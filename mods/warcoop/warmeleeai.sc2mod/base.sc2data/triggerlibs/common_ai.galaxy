//--------------------------------------------------------------------------------------------------
// Script: Common.ai
//--------------------------------------------------------------------------------------------------
//static int GAw3_AICreepPlayer=15;
//============================================================================
//  PickMeleeHero 
//============================================================================
void PickMeleeHero(int player, string raceid){
	if(raceid == "Orc"){
		hero_id[player]="Ofar";
		if(RandomInt(0,1)){
			hero_id2[player]="Otch";
			hero_id3[player]="Oshd";
		}else{
			hero_id3[player]="Otch";
			hero_id2[player]="Oshd";
		}
	}
}
int GetUnitCount(int player, string unitid){
    return TechTreeUnitAliasCount(player,unitid, c_techCountQueuedOrBetter);
}
int GetUnitCountDone(int player, string unitid){
    return TechTreeUnitAliasCount(player,unitid, c_techCountCompleteOnly);
}
int TownCountEx(int player, string unitid, boolean only_done, integer townid){
    int mask=c_techCountQueuedOrBetter;
    if(only_done){mask=c_techCountCompleteOnly;}
    return AIGetBuildingCountInTown(player, townid, unitid,mask);
}
//============================================================================
int TownCount(int player, string base){
    return TownCountEx(player,base,false,-1);
}
int TownCountDone(int player, string base){
    return TownCountEx(player,base,true,-1);
}
int GetUpgradeLevel(int player, string id){
    return TechTreeUpgradeCount(player, id, c_techCountCompleteOnly);
}
int GetFoodMade(string unitId){
    return FixedToInt(UnitTypeGetProperty(unitId, c_unitPropSuppliesMade));
}
int GetFoodUsed(string unitId){
    return FixedToInt(UnitTypeGetProperty(unitId, c_unitPropSuppliesUsed));
}
int FoodUsed(int player){
    return PlayerGetPropertyInt(player, c_playerPropSuppliesUsed);
}
int GetGold(int player){
    return PlayerGetPropertyInt(player, c_playerPropTerrazine);
}
int GetWood(int player){
    return PlayerGetPropertyInt(player, c_playerPropCustom);
}
int GetMinesOwned(int player){
    int c=c_townMax;
    int town;
    point loc;
    unitgroup mines;
    int amount=0;
    int uc;
    int ui;
    unit u;
    for(;town<c;town+=1){
        if(AIGetTownState(player,town)){
            loc=AIGetTownLocation(player,town);
            mines=UnitGroupSearch("ngol", player, loc, 20.0,UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy),0),0);
            ui=1;
            uc=UnitGroupCount(mines,c_unitCountAlive);
                amount+=uc;
        }
    }
    return amount;
}
int GetGoldOwned(int player){
    int c=c_townMax;
    int town;
    point loc;
    unitgroup mines;
    int amount=0;
    int uc;
    int ui;
    unit u;
    for(;town<c;town+=1){
        if(AIGetTownState(player,town)){
            loc=AIGetTownLocation(player,town);
            mines=UnitGroupSearch("ngol", player, loc, 20.0,UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy),0),0);
            ui=1;
            uc=UnitGroupCount(mines,c_unitCountAlive);
            for(;ui<=uc;ui+=1){
                u=UnitGroupUnit(mines,ui);
                amount+=UnitGetPropertyInt(u, c_unitPropResources, c_unitPropCurrent);
            }
        }
    }
    return amount;
}
bool TownHasHall (int player,integer townid) {
    return TownCountEx(player,"TWN1",true,townid)>0;
}
bool TownHasMine (int player,integer townid) {
    int town=townid;
    point loc=AIGetTownLocation(player,town);
    unitgroup mines=UnitGroupSearch("ngol", player, loc, 20.0,UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy),0),0);
    if(AIGetTownState(player,townid)<1){return false;}
    if(UnitGroupCount(mines,c_unitCountAlive)){
        return true;
    }else{
        return false;
    }
}
bool HallsCompleted(int player, string unitid){
    return GetUnitCount(player,unitid) == GetUnitCountDone(player,unitid) ;
}
