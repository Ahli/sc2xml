include "TriggerLibs/NativeLib"
include "TriggerLibs/WarClassic"
include "TriggerLibs/WarClassicSystem"

include "LibW3AI_h"

//--------------------------------------------------------------------------------------------------
// Library: WarCraft III AI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libW3AI_InitLibraries () {
    libNtve_InitVariables();
    libGAw3_InitVariables();
    libGAwX_InitVariables();
}

// Variable Initialization
bool libW3AI_InitVariables_completed = false;

void libW3AI_InitVariables () {
    if (libW3AI_InitVariables_completed) {
        return;
    }

    libW3AI_InitVariables_completed = true;

    libW3AI_gv_d = c_invalidDialogId;
    libW3AI_gv_warningframe = c_invalidDialogControlId;
    libW3AI_gv_helpButton = c_invalidDialogControlId;
}

// Functions
void libW3AI_gf_UseExtraWar3AISettings () {
    // Variable Declarations
    int lv_p;
    unit lv_trees;

    // Automatic Variable Declarations
    playergroup autoA26A65A4_g;

    // Variable Initialization

    // Implementation
    autoA26A65A4_g = PlayerGroupActive();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoA26A65A4_g, lv_p);
        if (lv_p < 0) { break; }
        if ((PlayerType(lv_p) == c_playerTypeComputer)) {
            AISetDifficulty(lv_p, c_diffRepairDamage, true);
            AISetDifficulty(lv_p, c_diffEarlyGameRepair, true);
            AISetDifficulty(lv_p, c_diffEnableDangerMap, true);
            AISetDifficulty(lv_p, c_diffSetRallyPoints, true);
            AISetDifficulty(lv_p, c_diffFleeDamage, true);
            AISetDifficulty(lv_p, c_diffFleeDanger, true);
            AISetDifficulty(lv_p, c_diffAutoTransport, true);
            AISetDifficulty(lv_p, c_diffNormalVision, false);
            AISetDifficulty(lv_p, c_diffLimitAPM, false);
            if ((PlayerDifficulty(lv_p) >= 6)) {
                AIHarvestBonus(lv_p,3);
            }

            if ((PlayerDifficulty(lv_p) >= 9)) {
                AIHarvestBonus(lv_p,6);
            }

            CatalogReferenceSet("Abil,Rome,InfoArray[Research1].Button.Requirements", lv_p, "");
            CatalogReferenceSet("Abil,Rora,InfoArray[Research1].Button.Requirements", lv_p, "");
            CatalogReferenceSet("Abil,Roar,InfoArray[Research1].Button.Requirements", lv_p, "");
            CatalogReferenceSet("Abil,Rost,InfoArray[Research1].Button.Requirements", lv_p, "");
            CatalogReferenceSet("Abil,Rowd,InfoArray[Research1].Button.Requirements", lv_p, "");
            CatalogReferenceSet("Abil,Rowt,InfoArray[Research1].Button.Requirements", lv_p, "");
            CatalogReferenceSet("Abil,Rosp,InfoArray[Research1].Button.Requirements", lv_p, "");
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, "Thrall", 1);
            CatalogLinkReplace(lv_p, c_gameCatalogModel, "Ofar", "Othr");
        }

    }
    libW3AI_gf__LoadAllPatchNotes();
    libW3AI_gf__LoadAllFeatures();
    TriggerEnable(libW3AI_gt_ExtraWorkDelay, true);
    TriggerEnable(libW3AI_gt_ClearPatchNoteTips, true);
}

void libW3AI_gf__LoadAllFeatures () {
    // Variable Declarations
    string lv_type;
    string lv_entry;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    const int auto095D7873_ae = 1;
    const int auto095D7873_ai = -1;

    // Variable Initialization
    lv_type = "PatchInfoNewFeatures";
    lv_c = UserDataInstanceCount(lv_type);

    // Implementation
    lv_i = lv_c;
    for ( ; ( (auto095D7873_ai >= 0 && lv_i <= auto095D7873_ae) || (auto095D7873_ai < 0 && lv_i >= auto095D7873_ae) ) ; lv_i += auto095D7873_ai ) {
        lv_entry = UserDataInstance(lv_type, lv_i);
        TextExpressionSetToken("Param/Expression/lib_W3AI_E3E15860", "title", UserDataGetText(lv_type, lv_entry, "Title", 1));
        HelpPanelAddTip(PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_W3AI_E3E15860"), UserDataGetText(lv_type, lv_entry, "Patch Notes", 1), StringToText(""), UserDataGetImagePath(lv_type, lv_entry, "Icon", 1));
        HelpPanelSetHelpItemDarkenedWhenViewed(HelpPanelLastCreatedHelpItem(), false);
    }
    TipAlertPanelClear(PlayerGroupAll());
}

void libW3AI_gf__LoadAllPatchNotes () {
    // Variable Declarations
    string lv_type;
    string lv_entry;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    const int auto31637660_ae = 1;
    const int auto31637660_ai = -1;

    // Variable Initialization
    lv_type = "PatchInfoNotes";
    lv_c = UserDataInstanceCount(lv_type);

    // Implementation
    lv_i = lv_c;
    for ( ; ( (auto31637660_ai >= 0 && lv_i <= auto31637660_ae) || (auto31637660_ai < 0 && lv_i >= auto31637660_ae) ) ; lv_i += auto31637660_ai ) {
        lv_entry = UserDataInstance(lv_type, lv_i);
        TextExpressionSetToken("Param/Expression/lib_W3AI_665882ED", "title", UserDataGetText(lv_type, lv_entry, "Title", 1));
        HelpPanelAddTip(PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_W3AI_665882ED"), UserDataGetText(lv_type, lv_entry, "Patch Notes", 1), StringToText(""), "Assets\\Textures\\BTN\\war3_btnengineeringupgrade.dds");
        HelpPanelSetHelpItemDarkenedWhenViewed(HelpPanelLastCreatedHelpItem(), false);
    }
    TipAlertPanelClear(PlayerGroupAll());
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Dialog
//--------------------------------------------------------------------------------------------------
bool libW3AI_gt_Dialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_d;
    int lv_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_d = c_invalidDialogId;
    lv_item = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    DialogCreate(500, 400, c_anchorTopLeft, 20, 20, true);
    lv_d = DialogLastCreated();
    libW3AI_gv_d = DialogLastCreated();
    DialogControlCreate(lv_d, c_triggerControlTypePortrait);
    libNtve_gf_SetDialogItemBorderImage(DialogControlLastCreated(), "Assets\\Textures\\UI\\Widgets\\EscMenu\\Human\\human-options-menu-border.tga", PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(lv_d, c_triggerControlTypeLabel);
    lv_item = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_item, StringExternal("Param/Value/lib_W3AI_2DABA109"), PlayerGroupAll());
    DialogControlSetSize(lv_item, PlayerGroupAll(), 400, 300);
    DialogControlSetPosition(lv_item, PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogSetVisible(lv_d, PlayerGroupAll(), true);
    DialogSetImageVisible(lv_d, false);
    DialogControlCreate(lv_d, c_triggerControlTypePanel);
    libW3AI_gv_warningframe = DialogControlLastCreated();
    DialogControlSetFullDialog(libW3AI_gv_warningframe, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemAcceptMouse(libW3AI_gv_warningframe, true, PlayerGroupAll());
    TriggerAddEventDialogControl(libW3AI_gt_Over, c_playerAny, libW3AI_gv_warningframe, c_triggerControlEventTypeMouseExit);
    Wait(30.0, c_timeGame);
    DialogDestroy(lv_d);
    TriggerDestroy(libW3AI_gt_Over);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libW3AI_gt_Dialog_Init () {
    libW3AI_gt_Dialog = TriggerCreate("libW3AI_gt_Dialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Over
//--------------------------------------------------------------------------------------------------
bool libW3AI_gt_Over_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libW3AI_gv_d, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libW3AI_gt_Over_Init () {
    libW3AI_gt_Over = TriggerCreate("libW3AI_gt_Over_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extra Work Delay
//--------------------------------------------------------------------------------------------------
bool libW3AI_gt_ExtraWorkDelay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto4F971A0B_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4F971A0B_g = PlayerGroupActive();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto4F971A0B_g, lv_p);
        if (lv_p < 0) { break; }
        if ((PlayerType(lv_p) == c_playerTypeComputer)) {
            AISetDifficulty(lv_p, c_diffAllowResourceReq, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libW3AI_gt_ExtraWorkDelay_Init () {
    libW3AI_gt_ExtraWorkDelay = TriggerCreate("libW3AI_gt_ExtraWorkDelay_Func");
    TriggerEnable(libW3AI_gt_ExtraWorkDelay, false);
    TriggerAddEventTimeElapsed(libW3AI_gt_ExtraWorkDelay, 11.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Patch Note Tips
//--------------------------------------------------------------------------------------------------
bool libW3AI_gt_ClearPatchNoteTips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UIHideTextCrawl(PlayerGroupSingle(lv_p));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libW3AI_gt_ClearPatchNoteTips_Init () {
    libW3AI_gt_ClearPatchNoteTips = TriggerCreate("libW3AI_gt_ClearPatchNoteTips_Func");
    TriggerEnable(libW3AI_gt_ClearPatchNoteTips, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teleport Gather
//--------------------------------------------------------------------------------------------------
bool libW3AI_gt_TeleportGather_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_c;
    point lv_po;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_po = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_ug = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerType(lv_p) == c_playerTypeComputer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ug = UnitGroupFilterRegion(AIWaveGetUnits(AIUnitGetWave(lv_c)), RegionCircle(lv_po, 20.0), 0);
    UnitGroupIssueOrder(lv_ug, OrderTargetingPoint(AbilityCommand("Aatk", 0), lv_po), c_orderQueueReplace);
    AISetGroupScriptControlled(lv_ug, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libW3AI_gt_TeleportGather_Init () {
    libW3AI_gt_TeleportGather = TriggerCreate("libW3AI_gt_TeleportGather_Func");
    TriggerAddEventPlayerEffectUsed(libW3AI_gt_TeleportGather, c_playerAny, "AItp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrall Tooltip
//--------------------------------------------------------------------------------------------------
bool libW3AI_gt_ThrallTooltip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_W3AI_C27559DB", "pn", PlayerName(EventPlayer()));
    TextExpressionSetToken("Param/Expression/lib_W3AI_C27559DB", "un", UnitGetName(lv_u));
    UnitSetInfoTip(lv_u, TextExpressionAssemble("Param/Expression/lib_W3AI_C27559DB"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libW3AI_gt_ThrallTooltip_Init () {
    libW3AI_gt_ThrallTooltip = TriggerCreate("libW3AI_gt_ThrallTooltip_Func");
    TriggerAddEventUnitBehaviorChange(libW3AI_gt_ThrallTooltip, null, "ThrallSkin", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hook
//--------------------------------------------------------------------------------------------------
bool libW3AI_gt_Hook_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanelAI/CommandButtonBuild");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libW3AI_gt_Hook_Init () {
    libW3AI_gt_Hook = TriggerCreate("libW3AI_gt_Hook_Func");
    TriggerAddEventMapInit(libW3AI_gt_Hook);
}

void libW3AI_InitTriggers () {
    libW3AI_gt_Dialog_Init();
    libW3AI_gt_Over_Init();
    libW3AI_gt_ExtraWorkDelay_Init();
    libW3AI_gt_ClearPatchNoteTips_Init();
    libW3AI_gt_TeleportGather_Init();
    libW3AI_gt_ThrallTooltip_Init();
    libW3AI_gt_Hook_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libW3AI_InitLib_completed = false;

void libW3AI_InitLib () {
    if (libW3AI_InitLib_completed) {
        return;
    }

    libW3AI_InitLib_completed = true;

    libW3AI_InitLibraries();
    libW3AI_InitVariables();
    libW3AI_InitTriggers();
}

