include "TriggerLibs/NativeLib"

include "TriggerLibs/WarClassic_h"

//--------------------------------------------------------------------------------------------------
// Library: Warcraft III
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGAw3_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libGAw3_InitVariables_completed = false;

void libGAw3_InitVariables () {
    if (libGAw3_InitVariables_completed) {
        return;
    }

    libGAw3_InitVariables_completed = true;

    libGAw3_gv_delayedActivateBehaviorSet = "0 ";
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: CustomScript
//--------------------------------------------------------------------------------------------------
unit GAw3_Core_EventItemPowerUp;
bool GAw3_Core_useTODSound=true;
void GAw3_TriggerAddEventUnitDamageAbsorbed (trigger t, unit u, string inBehavior){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitDamageAbsorbed(t,ur,inBehavior);
}
void GAw3_AddEventUnitCreated(trigger t,unit u,string creatorAbil,string creatorBehavior){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitCreated(t,ur,creatorAbil,creatorBehavior);
}
void GAw3_AddEventUnitProperty(trigger t,unit u,int p){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitProperty(t,ur,p);
}
void GAw3_AddEventUnitBehaviorChange(trigger t,unit u,string behavior,int inChangeType){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitBehaviorChange(t,ur,behavior,inChangeType);
}
void GAw3_AddEventUnitDamaged(trigger t,unit u,int inDamageType,int inDamageFatal,string inEffect){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitDamaged(t,ur,inDamageType,inDamageFatal,inEffect);
}
void GAw3_AddEventUnitStartedAttack2(trigger t,unit u,string weapon){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitStartedAttack2(t,ur,weapon);
}
void GAw3_AddEventUnitAbility(trigger t, unit u, abilcmd a, int stage, bool includeSharedAbils){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitAbility(t,ur,a,stage,includeSharedAbils);
}
void GAw3_TriggerAddEventUnitChangeOwner (trigger t, unit u){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitChangeOwner(t,ur);
}
void GAw3_TriggerAddEventUnitOrder (trigger t, unit u, abilcmd a){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitOrder(t,ur,a);
}
void GAw3_TriggerAddEventUnitSelected (trigger t, unit u, int player, bool state){
    unitref ur=UnitRefFromUnit(u);
    TriggerAddEventUnitSelected(t,ur,player,state);
}
void GAw3_SetUnitBehaviorCount(unit u,string behavior,int amount){
    int count=(amount-UnitBehaviorCount(u,behavior));
    if (count==0){return;}
    if (count>0){UnitBehaviorAdd(u,behavior,u,count);}
    else{UnitBehaviorRemove(u,behavior,count*-1);}
}
//entry can't be raw number, can't contain space.
typedef string entryset;
entryset GAw3_EntrySetEmpty(){return "0 ";};
bool GAw3_EntrySetHasEntry(entryset set, string entry){
    return StringContains(set,entry,c_stringAnywhere,c_stringCase);
}
entryset GAw3_EntrySetAdd(entryset set, string entry){
    int c=0;
    string head;
    string body;
    if(!GAw3_EntrySetHasEntry(set,entry))
        {
            head=StringWord(set,1);
            body=StringReplaceWord(set,head,"",1,c_stringCase);
            body=body+entry+" ";
            c=StringToInt(head);
            c+=1;
            set=IntToString(c)+body;
        }
    return set;
}
entryset GAw3_EntrySetAddIgnore(entryset set, string entry){
    int c=0;
    string head;
    string body;
    head=StringWord(set,1);
    body=StringReplaceWord(set,head,"",1,c_stringCase);
    body=body+entry+" ";
    c=StringToInt(head);
    c+=1;
    set=IntToString(c)+body;
    return set;
}
entryset GAw3_EntrySetRemove(entryset set, string entry){
    int c=0;
    string head;
    string body;
    if(GAw3_EntrySetHasEntry(set,entry))
        {
            head=StringWord(set,1);
            body=StringReplaceWord(set,head,"",1,c_stringCase);
            body=StringReplaceWord(body,entry+" ","",1,c_stringCase);
            c=StringToInt(head);
            c-=1;
            set=IntToString(c)+body;
        }
    return set;
}
string GAw3_EntrySetEntry(entryset set, int inIndex){
    return StringWord(set,inIndex+1);
}
int GAw3_EntrySetCount(entryset set){
    return StringToInt(StringWord(set,1));
}
string GAw3_EntrySetRandomEntry(entryset set){
    return GAw3_EntrySetEntry(set,RandomInt(1,GAw3_EntrySetCount(set)));
}

void libGAw3_InitCustomScript () {
}

// Presets
// Functions
bool libGAw3_gf_UnitIsChannelling (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_UnitCanCreateEffectOnUnit(lp_unit, "TriggerValidatorUnitIsChanneling", lp_unit);
}

int libGAw3_gf_CurrentHeroAbilityLearnedLevelForHeroWar3 (unit lp_hero, string lp_heroAbility) {
    // Variable Declarations
    string lv_itHeroAbil;
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto82B2AE7E_i;
    int auto82B2AE7E_c;
    string auto82B2AE7E_eval;

    // Variable Initialization

    // Implementation
    auto82B2AE7E_i=0;
    auto82B2AE7E_c=c_abilLearnCmdLearn20;
    auto82B2AE7E_eval="";
    for(;auto82B2AE7E_i<auto82B2AE7E_c;auto82B2AE7E_i+=1){

        auto82B2AE7E_eval=CatalogFieldValueGet(c_gameCatalogUnit,UnitGetType(lp_hero),"LearnInfoArray["+IntToString(auto82B2AE7E_i)+"].Abil",c_playerAny);
        if(CatalogEntryIsValid(c_gameCatalogAbil,auto82B2AE7E_eval)){
            lv_itHeroAbil=auto82B2AE7E_eval;
            lv_itIndex=auto82B2AE7E_i;
        }else{continue;}
        if ((lv_itHeroAbil == lp_heroAbility)) {
            return UnitLearnAbilGetLevel(lp_hero, libGAw3_gv_c_War3HeroLearnLink, lv_itIndex);
        }

    }
    return -1;
}

int libGAw3_gf_LearnAbilityPointForHeroWar3 (unit lp_unit, bool lp_currentTotal) {
    // Automatic Variable Declarations
    // Implementation
    return UnitLearnAbilGetPoints(lp_unit, libGAw3_gv_c_War3HeroLearnLink, lp_currentTotal);
}

string libGAw3_gf_ItemTypeOfUnit (string lp_u) {
    // Variable Declarations
    string lv_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = CatalogFieldValueGet(c_gameCatalogUnit, lp_u, "Item", c_playerAny);

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogItem, lv_item) == true)) {
        return (lv_item);
    }

    return null;
}

bool libGAw3_gf_UnitTypeTestFlagWar3 (string lp_u, string lp_f) {
    // Variable Declarations
    string lv_path;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_path = ("UserFlagArray[" + (lp_f) + "]");

    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_u, lv_path, c_playerAny) == 1)) {
        return true;
    }

    return false;
}

trigger auto_libGAw3_gf_PlaySoundLinkasMusic_Trigger = null;
soundlink auto_libGAw3_gf_PlaySoundLinkasMusic_lp_soundLink;
bool auto_libGAw3_gf_PlaySoundLinkasMusic_lp_loopForever;
bool auto_libGAw3_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter;

void libGAw3_gf_PlaySoundLinkasMusic (soundlink lp_soundLink, bool lp_loopForever, bool lp_unpauseSountrackAfter) {
    auto_libGAw3_gf_PlaySoundLinkasMusic_lp_soundLink = lp_soundLink;
    auto_libGAw3_gf_PlaySoundLinkasMusic_lp_loopForever = lp_loopForever;
    auto_libGAw3_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter = lp_unpauseSountrackAfter;

    if (auto_libGAw3_gf_PlaySoundLinkasMusic_Trigger == null) {
        auto_libGAw3_gf_PlaySoundLinkasMusic_Trigger = TriggerCreate("auto_libGAw3_gf_PlaySoundLinkasMusic_TriggerFunc");
    }

    TriggerExecute(auto_libGAw3_gf_PlaySoundLinkasMusic_Trigger, false, false);
}

bool auto_libGAw3_gf_PlaySoundLinkasMusic_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_soundLink = auto_libGAw3_gf_PlaySoundLinkasMusic_lp_soundLink;
    bool lp_loopForever = auto_libGAw3_gf_PlaySoundLinkasMusic_lp_loopForever;
    bool lp_unpauseSountrackAfter = auto_libGAw3_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter;

    // Automatic Variable Declarations
    // Implementation
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundPlay(lp_soundLink, PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    if (true) {
        if (true) {
            libGAw3_gf_PlaySoundLinkasMusic(lp_soundLink, true, true);
        }
        else {
            if ((lp_unpauseSountrackAfter == true)) {
                SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
            }

        }
    }

    return true;
}

actor GAw3_CreateModelAtPoint (string lp_model, point lp_position) {
    // Variable Declarations
    actor lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    ActorCreate(null, "War3_TriggerEffect", (lp_model), null, "null");
    lv_a = libNtve_gf_ActorLastCreated();
    ActorSend(lv_a, libNtve_gf_ActorMsg1("SetPositionH", libNtve_gf_ConvertXYToString(PointGetX(lp_position), PointGetY(lp_position))));
    ActorSend(lv_a, libNtve_gf_SetHeight(PointGetHeight(lp_position)));
    return lv_a;
}

actor War3_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint) {
    // Variable Declarations
    actorscope lv_scope;
    actor lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_scope = ActorScopeFromUnit(lp_unit);
    ActorCreate(lv_scope, "SiteHosted", lp_attachPoint, "", "");
    lv_a = libNtve_gf_ActorLastCreated();
    ActorCreate(lv_scope, "War3_TriggerEffectHostedInheritVisibility", (lp_model), "", "");
    lv_a = libNtve_gf_ActorLastCreated();
    return lv_a;
}

void libGAw3_gf_AnyUnitBehaviorActivateCountPreplaced (trigger t, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitBehaviorChange(t, null, lp_behavior, c_unitBehaviorChangeActivate);
    libGAw3_gv_delayedActivateBehaviorSet = GAw3_EntrySetAdd(libGAw3_gv_delayedActivateBehaviorSet,lp_behavior);
}

string libGAw3_gf_GAw3_WeaponAtkType (string lp_id) {
    // Variable Declarations
    string lv_str;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_str = CatalogFieldValueGet(c_gameCatalogWeapon, lp_id, "AttackType", c_playerAny);

    // Implementation
    return lv_str;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Delayed  Activate Behaviors
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_DelayedActivateBehaviors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buff;
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto9EF28ABC_g;
    string auto8C1EEC81_s;
    int auto8C1EEC81_i;
    int auto8C1EEC81_c;
    playergroup autoE72BAF42_g;
    string autoB3C79540_s;
    int autoB3C79540_i;
    int autoB3C79540_c;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9EF28ABC_g = PlayerGroupAll();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto9EF28ABC_g, lv_p);
        if (lv_p < 0) { break; }
        auto8C1EEC81_s=libGAw3_gv_delayedActivateBehaviorSet;
        auto8C1EEC81_i=1;
        auto8C1EEC81_c=GAw3_EntrySetCount(libGAw3_gv_delayedActivateBehaviorSet);
        for(;auto8C1EEC81_i<=auto8C1EEC81_c;auto8C1EEC81_i+=1){
            lv_buff=GAw3_EntrySetEntry(auto8C1EEC81_s,auto8C1EEC81_i);
            TechTreeBehaviorAllow(lv_p, lv_buff, false);
        }
    }
    Wait(0.125, c_timeGame);
    autoE72BAF42_g = PlayerGroupAll();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoE72BAF42_g, lv_p);
        if (lv_p < 0) { break; }
        autoB3C79540_s=libGAw3_gv_delayedActivateBehaviorSet;
        autoB3C79540_i=1;
        autoB3C79540_c=GAw3_EntrySetCount(libGAw3_gv_delayedActivateBehaviorSet);
        for(;autoB3C79540_i<=autoB3C79540_c;autoB3C79540_i+=1){
            lv_buff=GAw3_EntrySetEntry(autoB3C79540_s,autoB3C79540_i);
            TechTreeBehaviorAllow(lv_p, lv_buff, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_DelayedActivateBehaviors_Init () {
    libGAw3_gt_DelayedActivateBehaviors = TriggerCreate("libGAw3_gt_DelayedActivateBehaviors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_HERO_SKILL
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_HERO_SKILL_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int auto3FA70E8E_ae;
    const int auto3FA70E8E_ai = 1;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, ("EVENT_PLAYER_HERO_SKILL" + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Actions
    if (!runActions) {
        return true;
    }

    auto3FA70E8E_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto3FA70E8E_ai >= 0 && lv_i <= auto3FA70E8E_ae) || (auto3FA70E8E_ai < 0 && lv_i >= auto3FA70E8E_ae) ) ; lv_i += auto3FA70E8E_ai ) {
        lv_trig = DataTableGetTrigger(true, ("EVENT_PLAYER_HERO_SKILL" + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_HERO_SKILL_Init () {
    libGAw3_gt_EVENT_PLAYER_HERO_SKILL = TriggerCreate("libGAw3_gt_EVENT_PLAYER_HERO_SKILL_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_HERO_SKILL, false);
    TriggerAddEventUnitAbility(libGAw3_gt_EVENT_PLAYER_HERO_SKILL, null, AbilityCommand("War3_LearnHero", 255), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_UNIT_CHANGE_OWNER
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_UNIT_CHANGE_OWNER_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int autoCB994BCE_ae;
    const int autoCB994BCE_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_UNIT_CHANGE_OWNER";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Actions
    if (!runActions) {
        return true;
    }

    autoCB994BCE_ae = lv_c;
    lv_i = 1;
    for ( ; ( (autoCB994BCE_ai >= 0 && lv_i <= autoCB994BCE_ae) || (autoCB994BCE_ai < 0 && lv_i >= autoCB994BCE_ae) ) ; lv_i += autoCB994BCE_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_UNIT_CHANGE_OWNER_Init () {
    libGAw3_gt_EVENT_PLAYER_UNIT_CHANGE_OWNER = TriggerCreate("libGAw3_gt_EVENT_PLAYER_UNIT_CHANGE_OWNER_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_UNIT_CHANGE_OWNER, false);
    TriggerAddEventUnitChangeOwner(libGAw3_gt_EVENT_PLAYER_UNIT_CHANGE_OWNER, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_UNIT_DROP_ITEM
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_UNIT_DROP_ITEM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int auto37C7B10C_ae;
    const int auto37C7B10C_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_UNIT_DROP_ITEM";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Actions
    if (!runActions) {
        return true;
    }

    auto37C7B10C_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto37C7B10C_ai >= 0 && lv_i <= auto37C7B10C_ae) || (auto37C7B10C_ai < 0 && lv_i >= auto37C7B10C_ae) ) ; lv_i += auto37C7B10C_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_UNIT_DROP_ITEM_Init () {
    libGAw3_gt_EVENT_PLAYER_UNIT_DROP_ITEM = TriggerCreate("libGAw3_gt_EVENT_PLAYER_UNIT_DROP_ITEM_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_UNIT_DROP_ITEM, false);
    TriggerAddEventUnitInventoryChange(libGAw3_gt_EVENT_PLAYER_UNIT_DROP_ITEM, null, c_unitInventoryChangeDrops, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_UNIT_PICKUP_ITEM
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_UNIT_PICKUP_ITEM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int auto327DDD55_ae;
    const int auto327DDD55_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_UNIT_PICKUP_ITEM";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Actions
    if (!runActions) {
        return true;
    }

    auto327DDD55_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto327DDD55_ai >= 0 && lv_i <= auto327DDD55_ae) || (auto327DDD55_ai < 0 && lv_i >= auto327DDD55_ae) ) ; lv_i += auto327DDD55_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_UNIT_PICKUP_ITEM_Init () {
    libGAw3_gt_EVENT_PLAYER_UNIT_PICKUP_ITEM = TriggerCreate("libGAw3_gt_EVENT_PLAYER_UNIT_PICKUP_ITEM_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_UNIT_PICKUP_ITEM, false);
    TriggerAddEventUnitInventoryChange(libGAw3_gt_EVENT_PLAYER_UNIT_PICKUP_ITEM, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_UNIT_USE_ITEM
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int autoB399DBD2_ae;
    const int autoB399DBD2_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_UNIT_USE_ITEM";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Actions
    if (!runActions) {
        return true;
    }

    autoB399DBD2_ae = lv_c;
    lv_i = 1;
    for ( ; ( (autoB399DBD2_ai >= 0 && lv_i <= autoB399DBD2_ae) || (autoB399DBD2_ai < 0 && lv_i >= autoB399DBD2_ae) ) ; lv_i += autoB399DBD2_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEM_Init () {
    libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEM = TriggerCreate("libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEM_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEM, false);
    TriggerAddEventUnitInventoryChange(libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEM, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_UNIT_USE_ITEM (Power_Up)(Needs Improve!)
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEMPower_UpNeedsImprove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int auto9BE3F3C0_ae;
    const int auto9BE3F3C0_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_UNIT_USE_ITEM";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_Core_EventItemPowerUp=EventUnitPowerupUnit ();
    auto9BE3F3C0_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto9BE3F3C0_ai >= 0 && lv_i <= auto9BE3F3C0_ae) || (auto9BE3F3C0_ai < 0 && lv_i >= auto9BE3F3C0_ae) ) ; lv_i += auto9BE3F3C0_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    Wait(0.0, c_timeGame);
    GAw3_Core_EventItemPowerUp=null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEMPower_UpNeedsImprove_Init () {
    libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEMPower_UpNeedsImprove = TriggerCreate("libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEMPower_UpNeedsImprove_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEMPower_UpNeedsImprove, false);
    TriggerAddEventUnitPowerup(libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEMPower_UpNeedsImprove, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_UNIT_SELL_ITEM
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_UNIT_SELL_ITEM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int autoDE20ABD7_ae;
    const int autoDE20ABD7_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_UNIT_SELL_ITEM";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnitProgressUnit(), 1, UnitFilter((1 << c_targetFilterItem), 0, 0, 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE20ABD7_ae = lv_c;
    lv_i = 1;
    for ( ; ( (autoDE20ABD7_ai >= 0 && lv_i <= autoDE20ABD7_ae) || (autoDE20ABD7_ai < 0 && lv_i >= autoDE20ABD7_ae) ) ; lv_i += autoDE20ABD7_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_UNIT_SELL_ITEM_Init () {
    libGAw3_gt_EVENT_PLAYER_UNIT_SELL_ITEM = TriggerCreate("libGAw3_gt_EVENT_PLAYER_UNIT_SELL_ITEM_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_UNIT_SELL_ITEM, false);
    TriggerAddEventUnitTrainProgress(libGAw3_gt_EVENT_PLAYER_UNIT_SELL_ITEM, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_UNIT_PAWN_ITEM
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_UNIT_PAWN_ITEM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int auto43520F87_ae;
    const int auto43520F87_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_UNIT_PAWN_ITEM";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Actions
    if (!runActions) {
        return true;
    }

    auto43520F87_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto43520F87_ai >= 0 && lv_i <= auto43520F87_ae) || (auto43520F87_ai < 0 && lv_i >= auto43520F87_ae) ) ; lv_i += auto43520F87_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_UNIT_PAWN_ITEM_Init () {
    libGAw3_gt_EVENT_PLAYER_UNIT_PAWN_ITEM = TriggerCreate("libGAw3_gt_EVENT_PLAYER_UNIT_PAWN_ITEM_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_UNIT_PAWN_ITEM, false);
    TriggerAddEventUnitInventoryChange(libGAw3_gt_EVENT_PLAYER_UNIT_PAWN_ITEM, null, c_unitInventoryChangeSells, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_UNIT_SELL
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_UNIT_SELL_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;
    unit lv_uNIT;
    string lv_uNITType;
    unit lv_sHOP;

    // Automatic Variable Declarations
    int auto1C0E63FF_ae;
    const int auto1C0E63FF_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_UNIT_SELL";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));
    lv_uNIT = EventUnitProgressUnit();
    lv_uNITType = UnitGetType(lv_uNIT);
    lv_sHOP = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libGAw3_gf_UnitTypeTestFlagWar3(lv_uNITType, "Unit") == true))) {
            return false;
        }

        if (!((UnitAgent(lv_sHOP, UnitGetOwner(lv_uNIT)) != lv_sHOP))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1C0E63FF_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto1C0E63FF_ai >= 0 && lv_i <= auto1C0E63FF_ae) || (auto1C0E63FF_ai < 0 && lv_i >= auto1C0E63FF_ae) ) ; lv_i += auto1C0E63FF_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_UNIT_SELL_Init () {
    libGAw3_gt_EVENT_PLAYER_UNIT_SELL = TriggerCreate("libGAw3_gt_EVENT_PLAYER_UNIT_SELL_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_UNIT_SELL, false);
    TriggerAddEventUnitTrainProgress(libGAw3_gt_EVENT_PLAYER_UNIT_SELL, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_HERO_LEVEL
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_HERO_LEVEL_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int auto874622CD_ae;
    const int auto874622CD_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_HERO_LEVEL";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Actions
    if (!runActions) {
        return true;
    }

    auto874622CD_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto874622CD_ai >= 0 && lv_i <= auto874622CD_ae) || (auto874622CD_ai < 0 && lv_i >= auto874622CD_ae) ) ; lv_i += auto874622CD_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_HERO_LEVEL_Init () {
    libGAw3_gt_EVENT_PLAYER_HERO_LEVEL = TriggerCreate("libGAw3_gt_EVENT_PLAYER_HERO_LEVEL_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_HERO_LEVEL, false);
    TriggerAddEventUnitGainLevel(libGAw3_gt_EVENT_PLAYER_HERO_LEVEL, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EVENT_PLAYER_UNIT_DEATH
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_EVENT_PLAYER_UNIT_DEATH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_p;
    int lv_c;
    int lv_i;
    trigger lv_trig;

    // Automatic Variable Declarations
    int auto96C9B076_ae;
    const int auto96C9B076_ai = 1;

    // Variable Initialization
    lv_event = "EVENT_PLAYER_UNIT_DEATH";
    lv_p = EventPlayer();
    lv_c = DataTableGetInt(true, (lv_event + "_Player_" + IntToString(lv_p) + "_TrigCount"));

    // Conditions
    if (testConds) {
        if (!((libGAw3_gf_UnitTypeTestFlagWar3(UnitGetType(EventUnit()), "Unit") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto96C9B076_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto96C9B076_ai >= 0 && lv_i <= auto96C9B076_ae) || (auto96C9B076_ai < 0 && lv_i >= auto96C9B076_ae) ) ; lv_i += auto96C9B076_ai ) {
        lv_trig = DataTableGetTrigger(true, (lv_event + "_Player_" + IntToString(lv_p) + "_Trig_" + IntToString(lv_i)));
        if ((TriggerIsEnabled(lv_trig) == true)) {
            TriggerExecute(lv_trig, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_EVENT_PLAYER_UNIT_DEATH_Init () {
    libGAw3_gt_EVENT_PLAYER_UNIT_DEATH = TriggerCreate("libGAw3_gt_EVENT_PLAYER_UNIT_DEATH_Func");
    TriggerEnable(libGAw3_gt_EVENT_PLAYER_UNIT_DEATH, false);
    TriggerAddEventUnitDied(libGAw3_gt_EVENT_PLAYER_UNIT_DEATH, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Game
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_InitGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGAw3_gt_InitUI, true, false);
    TriggerExecute(libGAw3_gt_GameSpeed, true, false);
    TriggerExecute(libGAw3_gt_TOD, true, false);
    TriggerExecute(libGAw3_gt_Trade, true, false);
    TriggerExecute(libGAw3_gt_InitPlayer, true, false);
    TriggerExecute(libGAw3_gt_InitBlizzard, true, false);
    TriggerExecute(libGAw3_gt_DelayedActivateBehaviors, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_InitGame_Init () {
    libGAw3_gt_InitGame = TriggerCreate("libGAw3_gt_InitGame_Func");
    TriggerAddEventMapInit(libGAw3_gt_InitGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Player
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_InitPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto1CD2FA51_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1CD2FA51_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1CD2FA51_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeHostile)) {
            PlayerSetState(lv_player, c_playerStateAlwaysShowUnitTooltip, true);
        }
        else {
            PlayerSetState(lv_player, c_playerStateGivesBounty, false);
        }
        if ((PlayerType(lv_player) == c_playerTypeNeutral)) {
            PlayerSetState(lv_player, c_playerStateAlwaysShowUnitTooltip, true);
        }

        if ((PlayerType(lv_player) == c_playerTypeUser) && (PlayerStatus(lv_player) == c_playerStatusActive)) {
            PlayerSetState(lv_player, c_playerStateFormationMove, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_InitPlayer_Init () {
    libGAw3_gt_InitPlayer = TriggerCreate("libGAw3_gt_InitPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Speed
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_GameSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedNormal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_GameSpeed_Init () {
    libGAw3_gt_GameSpeed = TriggerCreate("libGAw3_gt_GameSpeed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TOD
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_TOD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDayPause(false);
    GameTimeOfDaySetLength(480.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_TOD_Init () {
    libGAw3_gt_TOD = TriggerCreate("libGAw3_gt_TOD_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trade
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_Trade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceTradeCountdownTime(0);
    UISetResourceTradingMajorStep(c_resourceTypeTerrazine, 200);
    UISetResourceTradingMajorStep(c_resourceTypeCustom, 100);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_Trade_Init () {
    libGAw3_gt_Trade = TriggerCreate("libGAw3_gt_Trade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init UI
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_InitUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowInfoPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeUpkeep, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowInventoryTargeting, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowModifiers, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowModifiersSmartCtrlAttack, false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer\\ConsolePanel\\ConsoleSkinTemplate\\InfoPanelImageContainer\\InfoPanelBackground");
    libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_InitUI_Init () {
    libGAw3_gt_InitUI = TriggerCreate("libGAw3_gt_InitUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death Message
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_HeroDeathMessage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_uT;
    int lv_p;
    color lv_color;
    playergroup lv_ally;
    text lv_prop;
    text lv_name;
    int lv_level;
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_uT = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false));
    lv_ally = PlayerGroupAlliance(c_playerGroupAlly, lv_p);
    lv_prop = UnitGetName(lv_u);
    lv_name = StringExternal(("Name/" + (lv_uT)));
    lv_level = UnitLevel(lv_u);
    TextExpressionSetToken("Param/Expression/lib_GAw3_EE11EABC", "Prop", TextWithColor(lv_prop, lv_color));
    TextExpressionSetToken("Param/Expression/lib_GAw3_EE11EABC", "Name", lv_name);
    TextExpressionSetToken("Param/Expression/lib_GAw3_EE11EABC", "Level", IntToText(lv_level));
    lv_text = TextExpressionAssemble("Param/Expression/lib_GAw3_EE11EABC");

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(lv_ally, c_messageAreaDebug, lv_text);
    UIDisplayMessage(PlayerGroupSingle(lv_p), c_messageAreaDebug, lv_text);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_HeroDeathMessage_Init () {
    libGAw3_gt_HeroDeathMessage = TriggerCreate("libGAw3_gt_HeroDeathMessage_Func");
    TriggerAddEventPlayerEffectUsed(libGAw3_gt_HeroDeathMessage, c_playerAny, "HeroDeathAlertSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Blizzard
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_InitBlizzard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGAw3_gt_InitSummonableCaps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_InitBlizzard_Init () {
    libGAw3_gt_InitBlizzard = TriggerCreate("libGAw3_gt_InitBlizzard_Func");
    TriggerEnable(libGAw3_gt_InitBlizzard, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Summonable Caps
//--------------------------------------------------------------------------------------------------
bool libGAw3_gt_InitSummonableCaps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup autoA298C663_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA298C663_g = PlayerGroupAll();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoA298C663_g, lv_p);
        if (lv_p < 0) { break; }
        if ((TechTreeUpgradeCount(lv_p, "Rhrt", c_techCountCompleteOnly) == 0)) {
            TechTreeUnitAllow(lv_p, "hrtt", false);
        }

        if ((TechTreeUpgradeCount(lv_p, "Robk", c_techCountCompleteOnly) == 0)) {
            TechTreeUnitAllow(lv_p, "otbk", false);
        }

        TechTreeSetProduceCap(lv_p, "uske", c_techCatUnit, libGAw3_gv_bj_MAX_SKELETONS);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAw3_gt_InitSummonableCaps_Init () {
    libGAw3_gt_InitSummonableCaps = TriggerCreate("libGAw3_gt_InitSummonableCaps_Func");
    TriggerEnable(libGAw3_gt_InitSummonableCaps, false);
}

void libGAw3_InitTriggers () {
    libGAw3_gt_DelayedActivateBehaviors_Init();
    libGAw3_gt_EVENT_PLAYER_HERO_SKILL_Init();
    libGAw3_gt_EVENT_PLAYER_UNIT_CHANGE_OWNER_Init();
    libGAw3_gt_EVENT_PLAYER_UNIT_DROP_ITEM_Init();
    libGAw3_gt_EVENT_PLAYER_UNIT_PICKUP_ITEM_Init();
    libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEM_Init();
    libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEMPower_UpNeedsImprove_Init();
    libGAw3_gt_EVENT_PLAYER_UNIT_SELL_ITEM_Init();
    libGAw3_gt_EVENT_PLAYER_UNIT_PAWN_ITEM_Init();
    libGAw3_gt_EVENT_PLAYER_UNIT_SELL_Init();
    libGAw3_gt_EVENT_PLAYER_HERO_LEVEL_Init();
    libGAw3_gt_EVENT_PLAYER_UNIT_DEATH_Init();
    libGAw3_gt_InitGame_Init();
    libGAw3_gt_InitPlayer_Init();
    libGAw3_gt_GameSpeed_Init();
    libGAw3_gt_TOD_Init();
    libGAw3_gt_Trade_Init();
    libGAw3_gt_InitUI_Init();
    libGAw3_gt_HeroDeathMessage_Init();
    libGAw3_gt_InitBlizzard_Init();
    libGAw3_gt_InitSummonableCaps_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGAw3_InitLib_completed = false;

void libGAw3_InitLib () {
    if (libGAw3_InitLib_completed) {
        return;
    }

    libGAw3_InitLib_completed = true;

    libGAw3_InitLibraries();
    libGAw3_InitVariables();
    libGAw3_InitCustomScript();
    libGAw3_InitTriggers();
}

