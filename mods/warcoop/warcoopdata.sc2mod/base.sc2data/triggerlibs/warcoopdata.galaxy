include "TriggerLibs/NativeLib"
include "TriggerLibs/WarClassicSystem"

include "TriggerLibs/WarCoopData_h"

//--------------------------------------------------------------------------------------------------
// Library: Warcraft Commander
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libWCdr_InitLibraries () {
    libNtve_InitVariables();
    libGAwX_InitVariables();
}

// Variable Initialization
bool libWCdr_InitVariables_completed = false;

void libWCdr_InitVariables () {
    int init_i1;
    int init_i2;

    if (libWCdr_InitVariables_completed) {
        return;
    }

    libWCdr_InitVariables_completed = true;

    libWCdr_gv_legends.lv_legendPlayers = PlayerGroupEmpty();
    libWCdr_gv_legends.lv_allyPlayers = PlayerGroupEmpty();
    libWCdr_gv_legends.lv_enemyPlayers = PlayerGroupEmpty();
    libWCdr_gv_legends.lv_gameMode = "Mission";
    libWCdr_gv_legends.lv_difficultyLevel = UserDataGetInt("LegionDifficultyScaling", "LevelRange", "MinLevel", 1);
    libWCdr_gv_legends.lv_enemyArmy = "BurningLegion";
    libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libWCdr_gv_dEBUG_HERO_SELECT_MAX_LEGENDS; init_i1 += 1) {
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[init_i1].lv_button = c_invalidDialogControlId;
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[init_i1].lv_icon = c_invalidDialogControlId;
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[init_i1].lv_friendLabel = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libWCdr_gv_lEGENDS_MAX_EQUIPMENT; init_i1 += 1) {
        libWCdr_gv_debugHeroSelectUI.lv_equipmentSlotButtons[init_i1].lv_equipmentButton = c_invalidDialogControlId;
        libWCdr_gv_debugHeroSelectUI.lv_equipmentSlotButtons[init_i1].lv_equipmentIcon = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libWCdr_gv_dEBUG_HERO_SELECT_MAX_PLAYERS; init_i1 += 1) {
        libWCdr_gv_debugHeroSelectUI.lv_readyPanels[init_i1].lv_readyPanel = c_invalidDialogControlId;
        libWCdr_gv_debugHeroSelectUI.lv_readyPanels[init_i1].lv_playerLabel = c_invalidDialogControlId;
        libWCdr_gv_debugHeroSelectUI.lv_readyPanels[init_i1].lv_legendLabel = c_invalidDialogControlId;
        libWCdr_gv_debugHeroSelectUI.lv_readyPanels[init_i1].lv_legendIcon = c_invalidDialogControlId;
    }
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_difficultySlider = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_difficultyLabel = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_damageLabel = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_healthLabel = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_bucketSizeLabel = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_handicapLabel = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_mutatorLabel = c_invalidDialogControlId;
    for (init_i2 = 0; init_i2 <= libWCdr_gv_dEBUG_HERO_SELECT_MAX_EQUIP_PER_PAGE; init_i2 += 1) {
        libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentButton[init_i2] = c_invalidDialogControlId;
    }
    for (init_i2 = 0; init_i2 <= libWCdr_gv_dEBUG_HERO_SELECT_MAX_EQUIP_PER_PAGE; init_i2 += 1) {
        libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentIcon[init_i2] = c_invalidDialogControlId;
    }
    libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_clearButton = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_readyButton = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_heroNameLabel = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_heroTitleLabel = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_heroLoreLabel = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_heroBackgroundImage = c_invalidDialogControlId;
    libWCdr_gv_debugHeroSelectUI.lv_gameStartTimer = TimerCreate();
    libWCdr_gv_gameUI.lv_consoleUIContainer = c_invalidDialogControlId;
    libWCdr_gv_gameUI.lv_hero_LevelLabel = c_invalidDialogControlId;
    libWCdr_gv_gameUI.lv_hero_Portrait = c_invalidDialogControlId;
    libWCdr_gv_gameUI.lv_hero_CommandPanel = c_invalidDialogControlId;
    libWCdr_gv_gameUI.lv_hero_InventoryPanel = c_invalidDialogControlId;
    libWCdr_gv_lootAward.lv_lootAwardPanel = c_invalidDialogControlId;
    libWCdr_gv_lootAward.lv_closeButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libWCdr_gv_dEBUG_LOOT_AWARD_MAX_LOOT; init_i1 += 1) {
        libWCdr_gv_lootAward.lv_lootAwardButtons[init_i1] = c_invalidDialogControlId;
    }
    libWCdr_gv_animationStates.lv_readyState = "ReadyState";
    libWCdr_gv_animationStates.lv_readyState_Ready = "Ready";
    libWCdr_gv_animationStates.lv_readyState_NotReady = "NotReady";
    libWCdr_gv_animationStates.lv_emptyState = "EmptyState";
    libWCdr_gv_animationStates.lv_emptyState_Empty = "Empty";
    libWCdr_gv_animationStates.lv_emptyState_NotEmpty = "NotEmpty";
    libWCdr_gv_animationStates.lv_hoverState = "HoverState";
    libWCdr_gv_animationStates.lv_hoverState_Hovered = "Hovered";
    libWCdr_gv_animationStates.lv_hoverState_NotHovered = "NotHovered";
    libWCdr_gv_animationStates.lv_rarityState = "RarityState";
    libWCdr_gv_animationStates.lv_friendSelectionState = "FriendState";
    libWCdr_gv_animationStates.lv_friendSelectionState_Selected = "Selected";
    libWCdr_gv_animationStates.lv_friendSelectionState_NotSelected = "NotSelected";
    libWCdr_gv_animationStates.lv_enabledState = "EnabledState";
    libWCdr_gv_animationStates.lv_enabledState_Enabled = "Enabled";
    libWCdr_gv_animationStates.lv_enabledState_Disabled = "Disabled";
    libWCdr_gv_animationStates.lv_selectionState = "SelectionState";
    libWCdr_gv_animationStates.lv_selectionState_Selected = "Selected";
    libWCdr_gv_animationStates.lv_selectionState_NotSelected = "NotSelected";
    libWCdr_gv_wayGatesUnitGroup = UnitGroupEmpty();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: AI Wave Think All Races
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/Computer"
//--------------------------------------------------------------------------------------------------
//  AIWaveThinkHuman
//--------------------------------------------------------------------------------------------------
void AIWaveThinkHuman (int player, wave w, int type) {
    AIWaveThinkWarCoop(player, w, type);
}
//--------------------------------------------------------------------------------------------------
//  AIWaveThinkNightElf
//--------------------------------------------------------------------------------------------------
void AIWaveThinkNightElf (int player, wave w, int type) {
    AIWaveThinkWarCoop(player, w, type);
}
//--------------------------------------------------------------------------------------------------
//  AIWaveThinkOrc
//--------------------------------------------------------------------------------------------------
void AIWaveThinkOrc (int player, wave w, int type) {
    AIWaveThinkWarCoop(player, w, type);
}
//--------------------------------------------------------------------------------------------------
//  AIWaveThinkUndead
//--------------------------------------------------------------------------------------------------
void AIWaveThinkUndead (int player, wave w, int type) {
    AIWaveThinkWarCoop(player, w, type);
}
//--------------------------------------------------------------------------------------------------
//  AIWaveThinkNaga
//--------------------------------------------------------------------------------------------------
void AIWaveThinkNaga (int player, wave w, int type) {
    AIWaveThinkWarCoop(player, w, type);
}
//--------------------------------------------------------------------------------------------------
//  AIWaveThinkDemon
//--------------------------------------------------------------------------------------------------
void AIWaveThinkDemon (int player, wave w, int type) {
    AIWaveThinkWarCoop(player, w, type);
}

void libWCdr_InitCustomScript () {
}

// Presets
// Functions
void AIWaveThinkWarCoop (int lp_player, wave lp_wave, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    AIWaveThinkDefault(lp_player, lp_wave, lp_type);
}

void libWCdr_gf_AIWaveClearedWarCoop (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, ("WarCoopAIWaveClearedWarCoop"));
}

void libWCdr_gf_EventVictoryDefeat (trigger t, string lp_victoryDefeat) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_victoryDefeat));
}

void libWCdr_gf_EndWarCoopMission (string lp_victoryDefeat) {
    // Variable Declarations
    int lv_legendplayer;

    // Automatic Variable Declarations
    playergroup autoB7AE4217_g;

    // Variable Initialization

    // Implementation
    if ((libWCdr_gv_legends.lv_gameIsOver == false)) {
        libWCdr_gv_legends.lv_gameIsOver = true;
    }
    else {
        return ;
    }
    if ((lp_victoryDefeat == "Event_VictoryDefeat_Victory")) {
        autoB7AE4217_g = libWCdr_gf_GetLegendPlayers();
        lv_legendplayer = -1;
        while (true) {
            lv_legendplayer = PlayerGroupNextPlayer(autoB7AE4217_g, lv_legendplayer);
            if (lv_legendplayer < 0) { break; }
            libWCdr_gf_AwardLoot(lv_legendplayer, libWCdr_gv_dEBUG_LOOT_AWARD_MAX_LOOT);
        }
        TriggerEnable(libWCdr_gt_LootAwardCloseButtonClicked, true);
    }

    TriggerSendEvent((lp_victoryDefeat));
}

void libWCdr_gf_ChatCheat (trigger t, string lp_cheatString) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, ("Event_ChatCheat_" + StringCase(lp_cheatString, false)));
}

string libWCdr_gf_TriggeringChatCheat () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(false, TriggerEventParamName(EventGenericName(), "Cheat"));
}

int libWCdr_gf_TriggeringChatCheatPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), "Player"));
}

string libWCdr_gf_TriggeringChatCheatParameter (int lp_parameterIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(false, TriggerEventParamName(EventGenericName(), ("Param" + IntToString(lp_parameterIndex))));
}

int libWCdr_gf_TriggeringChatCheatParameterCount () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), "ParamCount"));
}

void libWCdr_gf_InitializeWarCoopMission (string lp_mission, string lp_gameMode, playergroup lp_legendPlayers, playergroup lp_allyPlayers, playergroup lp_enemyPlayers, trigger lp_callbackTrigger) {
    // Variable Declarations
    playergroup lv_creepgroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_creepgroup = PlayerGroupSingle(15);

    // Implementation
    libWCdr_gv_legends.lv_mission = lp_mission;
    libWCdr_gv_legends.lv_gameMode = lp_gameMode;
    libWCdr_gv_legends.lv_legendPlayers = PlayerGroupCopy(lp_legendPlayers);
    libWCdr_gv_legends.lv_allyPlayers = PlayerGroupCopy(lp_allyPlayers);
    libWCdr_gv_legends.lv_enemyPlayers = PlayerGroupCopy(lp_enemyPlayers);
    libWCdr_gv_legends.lv_debugModeIsOn = (GameIsOnline() == false);
    libNtve_gf_SetPlayerGroupAlliance(lp_legendPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(lp_allyPlayers, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetPlayerGroupAlliance(lp_enemyPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lp_legendPlayers, lp_allyPlayers, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lp_allyPlayers, lp_legendPlayers, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lp_legendPlayers, lp_enemyPlayers, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lp_enemyPlayers, lp_legendPlayers, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lp_allyPlayers, lp_enemyPlayers, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lp_enemyPlayers, lp_allyPlayers, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lp_enemyPlayers, lv_creepgroup, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lv_creepgroup, lp_enemyPlayers, libNtve_ge_AllianceSetting_Ally);
    libWCdr_gf_InitPlayerColors();
    libWCdr_gf_InitializeGameUI();
    libWCdr_gf_InitializeLootAwardUI();
    libWCdr_gf_DisableCostsforPlayerGroup(lp_enemyPlayers);
    libWCdr_gf_EnableWaveLogicforPlayerGroup(lp_enemyPlayers);
    libWCdr_gf_PauseUnpauseMission(true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    libWCdr_gf_SetEnemyPlayerHandicap();
    if (libWCdr_gv_legends.lv_debugModeIsOn) {
        TriggerEnable(libWCdr_gt_ChatCheatListener, true);
        libWCdr_gf_InitializeDebugSelectionUI();
        libWCdr_gf_DebugSelectLegends(lp_callbackTrigger);
    } else{
        libWCdr_gf_StartMissionWithCallback(lp_callbackTrigger);
    }
}

void libWCdr_gf_PauseUnpauseMission (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_showHide;
    bool lv_lockUnlock;

    // Automatic Variable Declarations
    playergroup auto4592F139_g;
    int auto4592F139_var;

    // Variable Initialization
    lv_showHide = true;

    // Implementation
    if ((lp_pauseUnpause == true)) {
        lv_showHide = false;
        lv_lockUnlock = true;
    }

    GameSetMissionTimePaused(lp_pauseUnpause);
    AITimePause(lp_pauseUnpause);
    UnitPauseAll(lp_pauseUnpause);
    UISetWorldVisible(PlayerGroupAll(), lv_showHide);
    auto4592F139_g = PlayerGroupAll();
    auto4592F139_var = -1;
    while (true) {
        auto4592F139_var = PlayerGroupNextPlayer(auto4592F139_g, auto4592F139_var);
        if (auto4592F139_var < 0) { break; }
        CameraLockInput(auto4592F139_var, lv_lockUnlock);
    }
}

void libWCdr_gf_StartMissionWithCallback (trigger lp_triggerCallback) {
    // Variable Declarations
    string lv_eventname;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_eventname = "Mission Started";

    // Implementation
    libWCdr_gf_SetDifficultyLevel(libWCdr_gv_legends.lv_difficultyLevel);
    libWCdr_gf_ApplyArtifactEquipmentUpgrades();
    libWCdr_gf_InitializeCommanderScripts();
    libWCdr_gf_InitializeCommanderUIElements();
    libWCdr_gf_CreateStartingUnitsandSetGameplayOptions();
    libWCdr_gf_RevealStartingBaseRegion();
    libWCdr_gf_PauseUnpauseMission(false);
    TriggerSendEvent(lv_eventname);
    if ((lp_triggerCallback != null)) {
        TriggerExecute(lp_triggerCallback, false, false);
    }

    TriggerExecute(libWCdr_gt_InitializePortraitCameraandTeamColorFix, true, false);
    TriggerExecute(libWCdr_gt_InitializeDisableInventoryTech, true, false);
}

void libWCdr_gf_InitializeCommanderScripts () {
    // Variable Declarations
    int lv_commanderplayer;

    // Automatic Variable Declarations
    playergroup auto6B0C7F77_g;

    // Variable Initialization

    // Implementation
    auto6B0C7F77_g = libWCdr_gf_GetLegendPlayers();
    lv_commanderplayer = -1;
    while (true) {
        lv_commanderplayer = PlayerGroupNextPlayer(auto6B0C7F77_g, lv_commanderplayer);
        if (lv_commanderplayer < 0) { break; }
        libWCdr_gf_CommanderInitRunTrigger(lv_commanderplayer);
    }
}

void libWCdr_gf_InitializeCommanderUIElements () {
    // Variable Declarations
    int lv_commanderplayer;

    // Automatic Variable Declarations
    playergroup auto7C8C363C_g;

    // Variable Initialization

    // Implementation
    auto7C8C363C_g = libWCdr_gf_GetLegendPlayers();
    lv_commanderplayer = -1;
    while (true) {
        lv_commanderplayer = PlayerGroupNextPlayer(auto7C8C363C_g, lv_commanderplayer);
        if (lv_commanderplayer < 0) { break; }
        libWCdr_gf_HookUpHeroPortrait(lv_commanderplayer);
    }
}

void libWCdr_gf_CommanderInitRunTrigger (int lp_player) {
    // Variable Declarations
    string lv_commanderdata;
    string lv_triggername;
    string lv_functionname;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commanderdata = libWCdr_gf_GetLegendInstanceForPlayer(lp_player);
    lv_triggername = UserDataGetString("PlayableLegends", lv_commanderdata, "CommanderInitTrigger", 1);
    lv_functionname = (lv_triggername + "_Func");

    // Implementation
    if ((lv_triggername != "")) {
        DataTableSetInt(false, ("Player"), lp_player);
        libNtve_gf_TriggerExecuteByName(lv_functionname, false, true);
    }

}

int libWCdr_gf_CommanderInitGetIntegerParameter (string lp_commanderInitParameter) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, (lp_commanderInitParameter));
}

bool libWCdr_gf_WarCoopMissionIsOver () {
    // Automatic Variable Declarations
    // Implementation
    return libWCdr_gv_legends.lv_gameIsOver;
}

bool libWCdr_gf_StringIsInteger (string lp_string) {
    // Variable Declarations
    string lv_character;
    int lv_charindex;
    int lv_stringlength;

    // Automatic Variable Declarations
    int auto3A50006D_ae;
    const int auto3A50006D_ai = 1;

    // Variable Initialization
    lv_character = "";
    lv_stringlength = StringLength(lp_string);

    // Implementation
    auto3A50006D_ae = lv_stringlength;
    lv_charindex = 1;
    for ( ; ( (auto3A50006D_ai >= 0 && lv_charindex <= auto3A50006D_ae) || (auto3A50006D_ai < 0 && lv_charindex >= auto3A50006D_ae) ) ; lv_charindex += auto3A50006D_ai ) {
        lv_character = StringSub(lp_string, lv_charindex, lv_charindex);
        if (((StringCompare(lv_character, "0", c_stringCase) < 0) || (StringCompare(lv_character, "9", c_stringCase) > 0))) {
            return false;
        }

    }
    return true;
}

bool libWCdr_gf_UserDataInstanceExists (string lp_type, string lp_instance) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string auto8013E7AF_userType;
    int auto8013E7AF_i;

    // Variable Initialization

    // Implementation
    auto8013E7AF_userType = lp_type;
    auto8013E7AF_i = 1;
    for ( ; auto8013E7AF_i <= UserDataInstanceCount(auto8013E7AF_userType) ; auto8013E7AF_i += 1 ) {
        lv_instance = UserDataInstance(auto8013E7AF_userType, auto8013E7AF_i);
        if ((lp_instance == (lv_instance))) {
            return true;
        }

    }
    return false;
}

bool libWCdr_gf_PlayerIsLegendPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupHasPlayer(libWCdr_gf_GetLegendPlayers(), lp_player);
}

bool libWCdr_gf_LegendIsDisabled (string lp_legendInstance) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetGameLink("PlayableLegends", lp_legendInstance, "Commander", 1) == "");
}

bool libWCdr_gf_ConvertBooleantoEnableDisableOption (bool lp_boolean) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boolean == true)) {
        return true;
    }
    else {
        return false;
    }
}

int libWCdr_gf_GetRandomPlayerFromPlayerGroup (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_numberofplayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_numberofplayers = PlayerGroupCount(lp_playerGroup);

    // Implementation
    if ((lv_numberofplayers == 0)) {
        return -1;
    }

    return PlayerGroupPlayer(lp_playerGroup, RandomInt(1, lv_numberofplayers));
}

playergroup libWCdr_gf_GetHumanPlayers () {
    // Variable Declarations
    playergroup lv_humanPlayers;

    // Automatic Variable Declarations
    playergroup auto8BB4E0A1_g;
    int auto8BB4E0A1_var;

    // Variable Initialization
    lv_humanPlayers = PlayerGroupActive();

    // Implementation
    auto8BB4E0A1_g = lv_humanPlayers;
    auto8BB4E0A1_var = -1;
    while (true) {
        auto8BB4E0A1_var = PlayerGroupNextPlayer(auto8BB4E0A1_g, auto8BB4E0A1_var);
        if (auto8BB4E0A1_var < 0) { break; }
        if ((PlayerType(auto8BB4E0A1_var) != c_playerTypeUser)) {
            PlayerGroupRemove(lv_humanPlayers, auto8BB4E0A1_var);
        }

    }
    return lv_humanPlayers;
}

playergroup libWCdr_gf_GetLegendPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libWCdr_gv_legends.lv_legendPlayers;
}

playergroup libWCdr_gf_GetEnemiesofLegendPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libWCdr_gv_legends.lv_enemyPlayers;
}

playergroup libWCdr_gf_GetAlliesofLegendPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libWCdr_gv_legends.lv_allyPlayers;
}

string libWCdr_gf_GetNextWord (string lp_sentence, string lp_delimiter) {
    // Variable Declarations
    string lv_sentence;
    int lv_firstdelimiterindex;
    int lv_delimiterlength;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sentence = lp_sentence;
    lv_delimiterlength = StringLength(lp_delimiter);

    // Implementation
    lv_firstdelimiterindex = StringFind(lv_sentence, lp_delimiter, c_stringCase);
    while ((lv_firstdelimiterindex == 1) && (StringLength(lv_sentence) > 0)) {
        lv_sentence = StringSub(lv_sentence, (lv_delimiterlength + 1), StringLength(lv_sentence));
        lv_firstdelimiterindex = StringFind(lv_sentence, lp_delimiter, c_stringCase);
    }
    if ((lv_firstdelimiterindex == -1) && (StringLength(lv_sentence) == 0)) {
        return null;
    }
    else {
        return StringSub(lv_sentence, 1, (lv_firstdelimiterindex - 1));
    }
}

string libWCdr_gf_CliptoWord (string lp_sentence, string lp_clippingWord) {
    // Variable Declarations
    int lv_sentencelength;
    int lv_clippingwordlength;
    int lv_clippingwordstart;
    int lv_remainderstringstart;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sentencelength = StringLength(lp_sentence);
    lv_clippingwordlength = StringLength(lp_clippingWord);
    lv_clippingwordstart = StringFind(lp_sentence, lp_clippingWord, c_stringCase);
    lv_remainderstringstart = (lv_clippingwordstart + lv_clippingwordlength);

    // Implementation
    return StringSub(lp_sentence, lv_remainderstringstart, lv_sentencelength);
}

string libWCdr_gf_IIFString (bool lp_logic, string lp_stringIF, string lp_stringELSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_logic == true)) {
        return lp_stringIF;
    }
    else {
        return lp_stringELSE;
    }
}

string libWCdr_gf_GetLegendUnitTypeofPlayer (int lp_legendPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWCdr_gf_PlayerIsLegendPlayer(lp_legendPlayer) == true)) {
        return UserDataGetUnit("PlayableLegends", libWCdr_gf_GetLegendInstanceForPlayer(lp_legendPlayer), "HeroUnit", 1);
    }
    else {
        return null;
    }
}

string libWCdr_gf_GetLegendInstanceForPlayer (int lp_legendPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libWCdr_gv_legends.lv_legendPlayers, lp_legendPlayer) == true)) {
        return libWCdr_gv_legends.lv_player[lp_legendPlayer].lv_selectedLegend;
    }

    return null;
}

unit libWCdr_gf_GetLegendHero (int lp_legendPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libWCdr_gv_legends.lv_player[lp_legendPlayer].lv_hero;
}

trigger auto_libWCdr_gf_TurnTriggerOnOffWithDelay_Trigger = null;
trigger auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_trigger;
bool auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_onOff;
fixed auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_delay;
int auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_timeType;

void libWCdr_gf_TurnTriggerOnOffWithDelay (trigger lp_trigger, bool lp_onOff, fixed lp_delay, int lp_timeType) {
    auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_trigger = lp_trigger;
    auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_onOff = lp_onOff;
    auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_delay = lp_delay;
    auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_timeType = lp_timeType;

    if (auto_libWCdr_gf_TurnTriggerOnOffWithDelay_Trigger == null) {
        auto_libWCdr_gf_TurnTriggerOnOffWithDelay_Trigger = TriggerCreate("auto_libWCdr_gf_TurnTriggerOnOffWithDelay_TriggerFunc");
    }

    TriggerExecute(auto_libWCdr_gf_TurnTriggerOnOffWithDelay_Trigger, false, false);
}

bool auto_libWCdr_gf_TurnTriggerOnOffWithDelay_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_trigger = auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_trigger;
    bool lp_onOff = auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_onOff;
    fixed lp_delay = auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_delay;
    int lp_timeType = auto_libWCdr_gf_TurnTriggerOnOffWithDelay_lp_timeType;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_delay, lp_timeType);
    TriggerEnable(lp_trigger, lp_onOff);
    return true;
}

void libWCdr_gf_W3CBankOpen () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto81B8AA0F_g;

    // Variable Initialization

    // Implementation
    auto81B8AA0F_g = libWCdr_gf_GetHumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto81B8AA0F_g, lv_player);
        if (lv_player < 0) { break; }
        BankLoad("WarCoop", lv_player);
        libWCdr_gv_w3CBank[lv_player] = BankLastCreated();
    }
}

void libWCdr_gf_W3CBankStoreStringandSave (int lp_player, string lp_section, string lp_key, string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromString(libWCdr_gv_w3CBank[lp_player], lp_section, lp_key, lp_value);
    BankSave(libWCdr_gv_w3CBank[lp_player]);
}

void libWCdr_gf_W3CBankStoreLastPlayedCommander (int lp_player) {
    // Variable Declarations
    string lv_commanderstring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commanderstring = (libWCdr_gf_GetLegendInstanceForPlayer(lp_player));

    // Implementation
    libWCdr_gf_W3CBankStoreStringandSave(lp_player, "Global", "LastPlayedCommander", lv_commanderstring);
}

void libWCdr_gf_W3CBankStoreLoot (int lp_player, string lp_artifact, int lp_lootRank) {
    // Variable Declarations
    string lv_commanderstring;
    string lv_section;
    string lv_key;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commanderstring = (libWCdr_gf_GetLegendInstanceForPlayer(lp_player));
    lv_section = ("WCLoot_" + (lp_artifact));
    lv_key = "Rank";

    // Implementation
    if ((lp_artifact != null) && (libWCdr_gf_W3CBankKeyExists(lp_player, lv_section, lv_key) == false)) {
        libWCdr_gf_W3CBankStoreStringandSave(lp_player, lv_section, lv_key, IntToString(lp_lootRank));
    }

}

void libWCdr_gf_W3CBankStoreEquipmentInSlot (int lp_player, int lp_slotIndex) {
    // Variable Declarations
    string lv_section;
    string lv_key;
    string lv_artifactstring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section = ("Commander_" + (libWCdr_gf_GetLegendInstanceForPlayer(lp_player)));
    lv_key = ("Equip" + IntToString(lp_slotIndex));
    lv_artifactstring = (libWCdr_gv_legends.lv_player[lp_player].lv_equipment[lp_slotIndex]);

    // Implementation
    if ((libWCdr_gv_legends.lv_player[lp_player].lv_equipment[lp_slotIndex] == null)) {
        libWCdr_gf_W3CBankRemoveKey(lp_player, lv_section, lv_key);
    }
    else {
        libWCdr_gf_W3CBankStoreStringandSave(lp_player, lv_section, lv_key, lv_artifactstring);
    }
}

void libWCdr_gf_W3CBankStoreArtifactInSlotForCommander (int lp_player, string lp_artifact, int lp_slotIndex, string lp_commander) {
    // Variable Declarations
    string lv_section;
    string lv_key;
    string lv_artifactstring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section = ("Commander_" + (lp_commander));
    lv_key = ("Equip" + IntToString(lp_slotIndex));
    lv_artifactstring = (lp_artifact);

    // Implementation
    if ((lp_artifact == null)) {
        libWCdr_gf_W3CBankRemoveKey(lp_player, lv_section, lv_key);
    }
    else {
        libWCdr_gf_W3CBankStoreStringandSave(lp_player, lv_section, lv_key, lv_artifactstring);
    }
}

void libWCdr_gf_W3CBankRestoreEquipment (int lp_player) {
    // Variable Declarations
    string lv_artifact;
    string lv_artifactid;
    int lv_slotindex;
    string lv_section;
    string lv_key;
    bool lv_artifactowned;

    // Automatic Variable Declarations
    const int auto41D56D9C_ae = libWCdr_gv_lEGENDS_MAX_EQUIPMENT;
    const int auto41D56D9C_ai = 1;

    // Variable Initialization
    lv_artifactid = "";
    lv_section = ("Commander_" + (libWCdr_gf_GetLegendInstanceForPlayer(lp_player)));
    lv_key = "";

    // Implementation
    lv_slotindex = 1;
    for ( ; ( (auto41D56D9C_ai >= 0 && lv_slotindex <= auto41D56D9C_ae) || (auto41D56D9C_ai < 0 && lv_slotindex >= auto41D56D9C_ae) ) ; lv_slotindex += auto41D56D9C_ai ) {
        lv_key = ("Equip" + IntToString(lv_slotindex));
        lv_artifactid = libWCdr_gf_W3CBankRetrieveString(lp_player, lv_section, lv_key);
        lv_artifact = (lv_artifactid);
        if ((lv_artifactid != null) && (CatalogEntryIsValid(c_gameCatalogArtifact, lv_artifact) == true) && (libWCdr_gf_PlayerOwnsArtifact(lp_player, lv_artifact) == true)) {
            libWCdr_gv_legends.lv_player[lp_player].lv_equipment[lv_slotindex] = lv_artifact;
        }
        else if ((lv_artifactid != null)) {
            libWCdr_gv_legends.lv_player[lp_player].lv_equipment[lv_slotindex] = null;
            libWCdr_gf_W3CBankRemoveKey(lp_player, lv_section, lv_key);
        }
        else if (true) {
            libWCdr_gv_legends.lv_player[lp_player].lv_equipment[lv_slotindex] = null;
        }
        libWCdr_gf_RenderEquipmentSlotForPlayer(lp_player, lv_slotindex);
    }
}

string libWCdr_gf_W3CBankRetrieveString (int lp_player, string lp_section, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return BankValueGetAsString(libWCdr_gv_w3CBank[lp_player], lp_section, lp_key);
}

bool libWCdr_gf_W3CBankKeyExists (int lp_player, string lp_section, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return BankKeyExists(libWCdr_gv_w3CBank[lp_player], lp_section, lp_key);
}

string libWCdr_gf_W3CBankRetrieveLastPlayedCommander (int lp_player) {
    // Variable Declarations
    string lv_section;
    string lv_key;
    string lv_instanceid;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section = "Global";
    lv_key = "LastPlayedCommander";
    lv_instanceid = libWCdr_gf_W3CBankRetrieveString(lp_player, lv_section, lv_key);

    // Implementation
    if ((lv_instanceid != null) && (libWCdr_gf_UserDataInstanceExists("PlayableLegends", lv_instanceid) == true)) {
        return (lv_instanceid);
    }
    else {
        libWCdr_gf_W3CBankRemoveKey(lp_player, lv_section, lv_key);
    }
    return null;
}

void libWCdr_gf_W3CBankRemoveKey (int lp_player, string lp_section, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    BankKeyRemove(libWCdr_gv_w3CBank[lp_player], lp_section, lp_key);
    if ((BankKeyCount(libWCdr_gv_w3CBank[lp_player], lp_section) == 0)) {
        BankSectionRemove(libWCdr_gv_w3CBank[lp_player], lp_section);
    }

    BankSave(libWCdr_gv_w3CBank[lp_player]);
}

void libWCdr_gf_W3CBankRemoveSection (int lp_player, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    BankSectionRemove(libWCdr_gv_w3CBank[lp_player], lp_section);
    BankSave(libWCdr_gv_w3CBank[lp_player]);
}

void libWCdr_gf_InitializeDebugSelectionUI () {
    // Variable Declarations
    string lv_currentLegendInstance;
    int lv_currentIndex;
    int lv_lastPlayerIndex;
    int lv_lastLegendIndex;

    // Automatic Variable Declarations
    string autoFBA594AD_userType;
    int autoFBA594AD_i;
    int auto22983038_ae;
    const int auto22983038_ai = 1;
    const int auto77ED8DFC_ae = libWCdr_gv_lEGENDS_MAX_EQUIPMENT;
    const int auto77ED8DFC_ai = 1;
    const int autoC08EF675_ae = libWCdr_gv_dEBUG_HERO_SELECT_MAX_EQUIP_PER_PAGE;
    const int autoC08EF675_ai = 1;
    int auto84F86EE8_ae;
    const int auto84F86EE8_ai = 1;
    playergroup auto34F29E2A_g;

    // Variable Initialization
    lv_lastPlayerIndex = (libWCdr_gv_dEBUG_HERO_SELECT_MAX_PLAYERS - 1);
    lv_lastLegendIndex = (libWCdr_gv_dEBUG_HERO_SELECT_MAX_LEGENDS - 1);

    // Implementation
    if ((libWCdr_gv_debugHeroSelectUI.lv_initialized == true)) {
        return ;
    }
    else {
        libWCdr_gv_debugHeroSelectUI.lv_initialized = true;
    }
    libWCdr_gf_W3CBankOpen();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroSelectionScreen");
    libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI = DialogControlLastCreated();
    lv_currentIndex = 0;
    autoFBA594AD_userType = "PlayableLegends";
    autoFBA594AD_i = 1;
    for ( ; autoFBA594AD_i <= UserDataInstanceCount(autoFBA594AD_userType) ; autoFBA594AD_i += 1 ) {
        lv_currentLegendInstance = UserDataInstance(autoFBA594AD_userType, autoFBA594AD_i);
        if ((lv_currentIndex > lv_lastLegendIndex)) {
            break;
        }

        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroSelectButton" + IntToString(lv_currentIndex))));
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button = DialogControlLastCreated();
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, c_triggerControlTypeImage, "Icon");
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_icon = DialogControlLastCreated();
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, c_triggerControlTypeLabel, "FriendLabel");
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_friendLabel = DialogControlLastCreated();
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_legendInstance = lv_currentLegendInstance;
        libNtve_gf_SetDialogItemImage(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_icon, UserDataGetImagePath("PlayableLegends", lv_currentLegendInstance, "SelectPortrait", 1), PlayerGroupAll());
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, PlayerGroupAll(), libWCdr_gv_animationStates.lv_emptyState, libWCdr_gv_animationStates.lv_emptyState_NotEmpty);
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_friendLabel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_friendSelectionState, libWCdr_gv_animationStates.lv_friendSelectionState_NotSelected);
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_friendLabel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_selectionState, libWCdr_gv_animationStates.lv_selectionState_NotSelected);
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, PlayerGroupAll(), libWCdr_gv_animationStates.lv_enabledState, libWCdr_gf_IIFString(libWCdr_gf_LegendIsDisabled(lv_currentLegendInstance), libWCdr_gv_animationStates.lv_enabledState_Disabled, libWCdr_gv_animationStates.lv_enabledState_Enabled));
        lv_currentIndex += 1;
    }
    libWCdr_gv_debugHeroSelectUI.lv_numberofLegends = lv_currentIndex;
    auto22983038_ae = lv_lastLegendIndex;
    lv_currentIndex = libWCdr_gv_debugHeroSelectUI.lv_numberofLegends;
    for ( ; ( (auto22983038_ai >= 0 && lv_currentIndex <= auto22983038_ae) || (auto22983038_ai < 0 && lv_currentIndex >= auto22983038_ae) ) ; lv_currentIndex += auto22983038_ai ) {
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroSelectButton" + IntToString(lv_currentIndex))));
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button = DialogControlLastCreated();
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, c_triggerControlTypeImage, "Icon");
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_icon = DialogControlLastCreated();
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, c_triggerControlTypeLabel, "FriendLabel");
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_friendLabel = DialogControlLastCreated();
        libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_legendInstance = null;
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, PlayerGroupAll(), libWCdr_gv_animationStates.lv_emptyState, libWCdr_gv_animationStates.lv_emptyState_Empty);
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_friendLabel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_friendSelectionState, libWCdr_gv_animationStates.lv_friendSelectionState_NotSelected);
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_friendLabel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_selectionState, libWCdr_gv_animationStates.lv_selectionState_NotSelected);
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_friendLabel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_enabledState, libWCdr_gv_animationStates.lv_enabledState_Disabled);
    }
    lv_currentIndex = 1;
    for ( ; ( (auto77ED8DFC_ai >= 0 && lv_currentIndex <= auto77ED8DFC_ae) || (auto77ED8DFC_ai < 0 && lv_currentIndex >= auto77ED8DFC_ae) ) ; lv_currentIndex += auto77ED8DFC_ai ) {
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("EquipmentSlot" + IntToString(lv_currentIndex))));
        libWCdr_gv_debugHeroSelectUI.lv_equipmentSlotButtons[lv_currentIndex].lv_equipmentButton = DialogControlLastCreated();
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_equipmentSlotButtons[lv_currentIndex].lv_equipmentButton, PlayerGroupAll(), libWCdr_gv_animationStates.lv_emptyState, libWCdr_gv_animationStates.lv_emptyState_Empty);
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_equipmentSlotButtons[lv_currentIndex].lv_equipmentButton, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("IconImage"));
        libWCdr_gv_debugHeroSelectUI.lv_equipmentSlotButtons[lv_currentIndex].lv_equipmentIcon = DialogControlLastCreated();
    }
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("EquipmentContainer/ClearButton"));
    libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_clearButton = DialogControlLastCreated();
    lv_currentIndex = 1;
    for ( ; ( (autoC08EF675_ai >= 0 && lv_currentIndex <= autoC08EF675_ae) || (autoC08EF675_ai < 0 && lv_currentIndex >= autoC08EF675_ae) ) ; lv_currentIndex += autoC08EF675_ai ) {
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("EquipmentContainer/EquipmentButton" + IntToString(lv_currentIndex))));
        libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentButton[lv_currentIndex] = DialogControlLastCreated();
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentButton[lv_currentIndex], PlayerGroupAll(), libWCdr_gv_animationStates.lv_emptyState, libWCdr_gv_animationStates.lv_emptyState_Empty);
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentButton[lv_currentIndex], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("IconImage"));
        libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentIcon[lv_currentIndex] = DialogControlLastCreated();
    }
    auto84F86EE8_ae = (libWCdr_gv_dEBUG_HERO_SELECT_MAX_PLAYERS - 1);
    lv_currentIndex = 0;
    for ( ; ( (auto84F86EE8_ai >= 0 && lv_currentIndex <= auto84F86EE8_ae) || (auto84F86EE8_ai < 0 && lv_currentIndex >= auto84F86EE8_ae) ) ; lv_currentIndex += auto84F86EE8_ai ) {
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ReadyUpPanel" + IntToString(lv_currentIndex))));
        libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_readyPanel = DialogControlLastCreated();
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_readyPanel, c_triggerControlTypeLabel, "PlayerNameLabel");
        libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_playerLabel = DialogControlLastCreated();
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_readyPanel, c_triggerControlTypeLabel, "HeroNameLabel");
        libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_legendLabel = DialogControlLastCreated();
        DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_readyPanel, c_triggerControlTypeImage, "HeroIcon");
        libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_legendIcon = DialogControlLastCreated();
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_readyPanel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_readyState, libWCdr_gv_animationStates.lv_readyState_NotReady);
        if ((PlayerGroupHasPlayer(libWCdr_gv_legends.lv_legendPlayers, lv_currentIndex) == true)) {
            DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_readyPanel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_emptyState, libWCdr_gv_animationStates.lv_emptyState_NotEmpty);
            libNtve_gf_SetDialogItemColor(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_playerLabel, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentIndex, false)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_playerLabel, PlayerName(lv_currentIndex), PlayerGroupAll());
        }
        else {
            DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lv_currentIndex].lv_readyPanel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_emptyState, libWCdr_gv_animationStates.lv_emptyState_Empty);
        }
    }
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeLabel, "SelectedHeroNameLabel");
    libWCdr_gv_debugHeroSelectUI.lv_heroNameLabel = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeLabel, "SelectedHeroTitleLabel");
    libWCdr_gv_debugHeroSelectUI.lv_heroTitleLabel = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeLabel, "SelectedHeroContainer/Description");
    libWCdr_gv_debugHeroSelectUI.lv_heroLoreLabel = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeImage, "HeroSelectBackgroundImage/AnchorFrame");
    libWCdr_gv_debugHeroSelectUI.lv_heroBackgroundImage = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeButton, "ReadyButton");
    libWCdr_gv_debugHeroSelectUI.lv_readyButton = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeSlider, "OptionsContainer/DifficultyPanel/DifficultySlider");
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_difficultySlider = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeLabel, "OptionsContainer/DifficultyPanel/DifficultyLabel");
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_difficultyLabel = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeLabel, "OptionsContainer/DifficultyPanel/EnemyDamageLabel");
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_damageLabel = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeLabel, "OptionsContainer/DifficultyPanel/EnemyHealthLabel");
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_healthLabel = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeLabel, "OptionsContainer/DifficultyPanel/EnemyWaveSizeLabel");
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_bucketSizeLabel = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeLabel, "OptionsContainer/DifficultyPanel/EnemyHandicapLabel");
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_handicapLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_handicapLabel, (StringExternal("Param/Value/lib_WCdr_1C504110") + IntToText(libWCdr_gf_GetPlayerCountHandicap()) + StringExternal("Param/Value/lib_WCdr_B9821E25") + IntToText(PlayerGroupCount(libWCdr_gv_legends.lv_legendPlayers)) + StringExternal("Param/Value/lib_WCdr_84D88783") + IntToText(UserDataGetInt("LegionDifficultyScaling", "PlayerHandicap", "MaxLevel", 1)) + StringExternal("Param/Value/lib_WCdr_8937C83A")), PlayerGroupAll());
    DialogControlHookup(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, c_triggerControlTypeLabel, "OptionsContainer/DifficultyPanel/EnemyMutatorLabel");
    libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_mutatorLabel = DialogControlLastCreated();
    auto34F29E2A_g = libWCdr_gv_legends.lv_legendPlayers;
    lv_currentIndex = -1;
    while (true) {
        lv_currentIndex = PlayerGroupNextPlayer(auto34F29E2A_g, lv_currentIndex);
        if (lv_currentIndex < 0) { break; }
        if ((libWCdr_gf_W3CBankRetrieveLastPlayedCommander(lv_currentIndex) == null)) {
            libWCdr_gv_legends.lv_player[lv_currentIndex].lv_selectedLegend = libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[0].lv_legendInstance;
        }
        else {
            libWCdr_gv_legends.lv_player[lv_currentIndex].lv_selectedLegend = libWCdr_gf_W3CBankRetrieveLastPlayedCommander(lv_currentIndex);
        }
        libWCdr_gf_DebugSetSelectedHeroForPlayer(libWCdr_gv_legends.lv_player[lv_currentIndex].lv_selectedLegend, lv_currentIndex);
        libWCdr_gf_UpdateSelectedHeroButtonToggle(lv_currentIndex);
    }
    libWCdr_gf_UpdateDebugFriendHeroSelections();
    libWCdr_gf_UpdateDebugDifficultySetting(libWCdr_gv_legends.lv_difficultyLevel);
    TriggerEnable(libWCdr_gt_HeroSelectButtonClicked, true);
    TriggerEnable(libWCdr_gt_ReadyButtonClicked, true);
    TriggerEnable(libWCdr_gt_GameStartTimerExpires, true);
    TriggerEnable(libWCdr_gt_DifficultySliderMoved, true);
    TriggerEnable(libWCdr_gt_EquipmentSlotClicked, true);
    TriggerEnable(libWCdr_gt_EquipmentSelectButtonClicked, true);
    TriggerEnable(libWCdr_gt_EquipmentClearButtonClicked, true);
}

void libWCdr_gf_ShowHideDebugSelectionUI (bool lp_showHide) {
    // Variable Declarations
    bool lv_oppositeShowHide;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oppositeShowHide = true;

    // Implementation
    if ((lp_showHide == true)) {
        lv_oppositeShowHide = false;
    }
    else {
        lv_oppositeShowHide = true;
    }
    DialogControlSetVisible(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, libWCdr_gv_legends.lv_legendPlayers, lp_showHide);
    UISetFrameVisible(libWCdr_gv_legends.lv_legendPlayers, c_syncFrameTypeMenuBar, lv_oppositeShowHide);
    UISetFrameVisible(libWCdr_gv_legends.lv_legendPlayers, c_syncFrameTypeResourcePanel, lv_oppositeShowHide);
}

void libWCdr_gf_DebugSetSelectedHeroForPlayer (string lp_selectedLegendInstance, int lp_player) {
    // Variable Declarations
    playergroup lv_singlePlayerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_singlePlayerGroup = PlayerGroupSingle(lp_player);

    // Implementation
    libWCdr_gv_legends.lv_player[lp_player].lv_selectedLegend = lp_selectedLegendInstance;
    libWCdr_gf_UpdateSelectedHeroButtonToggle(lp_player);
    libNtve_gf_SetDialogItemImage(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lp_player].lv_legendIcon, UserDataGetImagePath("PlayableLegends", lp_selectedLegendInstance, "SelectPortrait", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[lp_player].lv_legendLabel, UserDataGetText("PlayableLegends", lp_selectedLegendInstance, "SelectName", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libWCdr_gv_debugHeroSelectUI.lv_heroBackgroundImage, UserDataGetImagePath("PlayableLegends", lp_selectedLegendInstance, "SelectBackgroundImage", 1), lv_singlePlayerGroup);
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_heroNameLabel, UserDataGetText("PlayableLegends", lp_selectedLegendInstance, "SelectName", 1), lv_singlePlayerGroup);
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_heroTitleLabel, UserDataGetText("PlayableLegends", lp_selectedLegendInstance, "SelectTitle", 1), lv_singlePlayerGroup);
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_heroLoreLabel, UserDataGetText("PlayableLegends", lp_selectedLegendInstance, "SelectLore", 1), lv_singlePlayerGroup);
    DialogControlSetEnabled(libWCdr_gv_debugHeroSelectUI.lv_readyButton, lv_singlePlayerGroup, libWCdr_gf_ConvertBooleantoEnableDisableOption(!(libWCdr_gf_LegendIsDisabled(lp_selectedLegendInstance))));
    DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, lv_singlePlayerGroup, libWCdr_gv_animationStates.lv_enabledState, libWCdr_gf_IIFString(libWCdr_gf_LegendIsDisabled(lp_selectedLegendInstance), libWCdr_gv_animationStates.lv_enabledState_Disabled, libWCdr_gv_animationStates.lv_enabledState_Enabled));
    libWCdr_gf_W3CBankRestoreEquipment(lp_player);
}

void libWCdr_gf_UpdateDebugFriendHeroSelections () {
    // Variable Declarations
    int lv_currentIndex;
    int lv_lastLegendIndex;
    int lv_selectedCount;

    // Automatic Variable Declarations
    int autoC6AD277A_ae;
    const int autoC6AD277A_ai = 1;
    playergroup autoEDC352C9_g;
    int autoEDC352C9_var;

    // Variable Initialization
    lv_lastLegendIndex = (libWCdr_gv_dEBUG_HERO_SELECT_MAX_LEGENDS - 1);

    // Implementation
    autoC6AD277A_ae = lv_lastLegendIndex;
    lv_currentIndex = 0;
    for ( ; ( (autoC6AD277A_ai >= 0 && lv_currentIndex <= autoC6AD277A_ae) || (autoC6AD277A_ai < 0 && lv_currentIndex >= autoC6AD277A_ae) ) ; lv_currentIndex += autoC6AD277A_ai ) {
        lv_selectedCount = libWCdr_gf_GetNumberofPlayersDebugSelectingHeroIndex(lv_currentIndex);
        if ((lv_selectedCount > 0)) {
            autoEDC352C9_g = libWCdr_gv_legends.lv_legendPlayers;
            autoEDC352C9_var = -1;
            while (true) {
                autoEDC352C9_var = PlayerGroupNextPlayer(autoEDC352C9_g, autoEDC352C9_var);
                if (autoEDC352C9_var < 0) { break; }
                if ((lv_selectedCount > 1) && (libWCdr_gv_legends.lv_player[autoEDC352C9_var].lv_selectedLegend == libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_legendInstance)) {
                    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_friendLabel, IntToText((lv_selectedCount - 1)), PlayerGroupSingle(autoEDC352C9_var));
                    DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, PlayerGroupSingle(autoEDC352C9_var), libWCdr_gv_animationStates.lv_friendSelectionState, libWCdr_gv_animationStates.lv_friendSelectionState_Selected);
                }
                else if ((libWCdr_gv_legends.lv_player[autoEDC352C9_var].lv_selectedLegend != libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_legendInstance)) {
                    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_friendLabel, IntToText(lv_selectedCount), PlayerGroupSingle(autoEDC352C9_var));
                    DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, PlayerGroupSingle(autoEDC352C9_var), libWCdr_gv_animationStates.lv_friendSelectionState, libWCdr_gv_animationStates.lv_friendSelectionState_Selected);
                }
                else if (true) {
                    DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, PlayerGroupSingle(autoEDC352C9_var), libWCdr_gv_animationStates.lv_friendSelectionState, libWCdr_gv_animationStates.lv_friendSelectionState_NotSelected);
                }
            }
        }
        else {
            DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, PlayerGroupAll(), libWCdr_gv_animationStates.lv_friendSelectionState, libWCdr_gv_animationStates.lv_friendSelectionState_NotSelected);
        }
    }
}

void libWCdr_gf_UpdateDebugDifficultySetting (int lp_difficultyLevel) {
    // Automatic Variable Declarations
    // Implementation
    if ((libWCdr_gv_debugHeroSelectUI.lv_initialized == false)) {
        return ;
    }

    libNtve_gf_SetDialogItemCurrentValue(libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_difficultySlider, lp_difficultyLevel, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_difficultyLabel, (StringExternal("Param/Value/lib_WCdr_7675AC1A") + StringToText(libWCdr_gf_GetPresetNameofDifficultyLevel(lp_difficultyLevel)) + StringExternal("Param/Value/lib_WCdr_0F4CB59A") + IntToText(lp_difficultyLevel) + StringExternal("Param/Value/lib_WCdr_9B6D6802")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_damageLabel, (StringExternal("Param/Value/lib_WCdr_83F00A60") + IntToText(RoundI(((libWCdr_gf_GetDifficultyMultiplier("EnemyDamageMultiplier", lp_difficultyLevel) + 1.0) * 100.0))) + StringExternal("Param/Value/lib_WCdr_546C1E35")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_healthLabel, (StringExternal("Param/Value/lib_WCdr_D6EB9AC5") + IntToText(RoundI(((libWCdr_gf_GetDifficultyMultiplier("EnemyHPMultiplier", lp_difficultyLevel) + 1.0) * 100.0))) + StringExternal("Param/Value/lib_WCdr_904E603F")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_bucketSizeLabel, (StringExternal("Param/Value/lib_WCdr_594DF4AB") + IntToText(RoundI(((libWCdr_gf_GetDifficultyMultiplier("BucketMultiplier", lp_difficultyLevel) + 1.0) * 100.0))) + StringExternal("Param/Value/lib_WCdr_2519A689")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_mutatorLabel, (StringExternal("Param/Value/lib_WCdr_0923E63F") + FixedToText(libWCdr_gf_GetDifficultySum("Mutator", lp_difficultyLevel), c_fixedPrecisionAny)), PlayerGroupAll());
}

void libWCdr_gf_UpdateSelectedHeroButtonToggle (int lp_player) {
    // Variable Declarations
    int lv_currentherobuttonindex;
    int lv_lastherobuttonindex;
    playergroup lv_playergroup;

    // Automatic Variable Declarations
    int auto2222C32C_ae;
    const int auto2222C32C_ai = 1;

    // Variable Initialization
    lv_lastherobuttonindex = (libWCdr_gv_dEBUG_HERO_SELECT_MAX_LEGENDS - 1);
    lv_playergroup = PlayerGroupSingle(lp_player);

    // Implementation
    auto2222C32C_ae = lv_lastherobuttonindex;
    lv_currentherobuttonindex = 0;
    for ( ; ( (auto2222C32C_ai >= 0 && lv_currentherobuttonindex <= auto2222C32C_ae) || (auto2222C32C_ai < 0 && lv_currentherobuttonindex >= auto2222C32C_ae) ) ; lv_currentherobuttonindex += auto2222C32C_ai ) {
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentherobuttonindex].lv_button, lv_playergroup, libWCdr_gv_animationStates.lv_selectionState, libWCdr_gf_IIFString((libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentherobuttonindex].lv_legendInstance == libWCdr_gv_legends.lv_player[lp_player].lv_selectedLegend), libWCdr_gv_animationStates.lv_selectionState_Selected, libWCdr_gv_animationStates.lv_selectionState_NotSelected));
    }
}

void libWCdr_gf_RenderEquipmentListForPlayer (int lp_player) {
    // Variable Declarations
    string lv_artifact;
    string lv_legendinstance;
    string lv_commander;
    int lv_artifactscounted;
    int lv_currentindex;

    // Automatic Variable Declarations
    int autoD9722848_catalog;
    int autoD9722848_i;
    const int auto7D0FE833_ae = libWCdr_gv_dEBUG_HERO_SELECT_MAX_EQUIP_PER_PAGE;
    const int auto7D0FE833_ai = 1;

    // Variable Initialization
    lv_legendinstance = libWCdr_gf_GetLegendInstanceForPlayer(lp_player);
    lv_commander = UserDataGetGameLink("PlayableLegends", lv_legendinstance, "Commander", 1);

    // Implementation
    autoD9722848_catalog = c_gameCatalogArtifact;
    autoD9722848_i = 1;
    for ( ; autoD9722848_i <= CatalogEntryCount(c_gameCatalogArtifact) ; autoD9722848_i += 1 ) {
        lv_artifact = CatalogEntryGet(autoD9722848_catalog, autoD9722848_i);
        if ((libWCdr_gf_PlayerOwnsArtifact(lp_player, lv_artifact) == true) && (libWCdr_gf_CommanderCanEquipArtifact(lv_commander, lv_artifact) == true) && ((lv_artifact == libWCdr_gv_legends.lv_player[lp_player].lv_equipment[libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_currentEquipmentSlot[lp_player]]) || (libWCdr_gf_PlayerHasArtifactEquipped(lp_player, lv_artifact) == false))) {
            lv_artifactscounted += 1;
            libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentLink[lv_artifactscounted][lp_player] = lv_artifact;
            libWCdr_gf_RenderEquipmentButton(lp_player, libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentButton[lv_artifactscounted], lv_artifact);
            if ((lv_artifactscounted >= libWCdr_gv_dEBUG_HERO_SELECT_MAX_EQUIP_PER_PAGE)) {
                break;
            }

        }

    }
    lv_currentindex = (lv_artifactscounted + 1);
    for ( ; ( (auto7D0FE833_ai >= 0 && lv_currentindex <= auto7D0FE833_ae) || (auto7D0FE833_ai < 0 && lv_currentindex >= auto7D0FE833_ae) ) ; lv_currentindex += auto7D0FE833_ai ) {
        libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentLink[lv_currentindex][lp_player] = null;
        libWCdr_gf_RenderEquipmentButton(lp_player, libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentButton[lv_currentindex], null);
    }
}

void libWCdr_gf_RenderEquipmentSlotForPlayer (int lp_player, int lp_slotIndex) {
    // Variable Declarations
    string lv_artifactface;
    playergroup lv_playergroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playergroup = PlayerGroupSingle(lp_player);

    // Implementation
    if ((((lp_slotIndex >= 1) && (lp_slotIndex <= libWCdr_gv_lEGENDS_MAX_EQUIPMENT)) == false)) {
        return ;
    }

    if ((libWCdr_gv_legends.lv_player[lp_player].lv_equipment[lp_slotIndex] == null)) {
        libWCdr_gf_RenderEquipmentButton(lp_player, libWCdr_gv_debugHeroSelectUI.lv_equipmentSlotButtons[lp_slotIndex].lv_equipmentButton, null);
    }
    else {
        libWCdr_gf_RenderEquipmentButton(lp_player, libWCdr_gv_debugHeroSelectUI.lv_equipmentSlotButtons[lp_slotIndex].lv_equipmentButton, libWCdr_gv_legends.lv_player[lp_player].lv_equipment[lp_slotIndex]);
    }
}

int libWCdr_gf_GetNumberofPlayersDebugSelectingHeroIndex (int lp_legendIndex) {
    // Variable Declarations
    int lv_selectedCount;

    // Automatic Variable Declarations
    playergroup autoFE413B9E_g;
    int autoFE413B9E_var;

    // Variable Initialization

    // Implementation
    autoFE413B9E_g = libWCdr_gv_legends.lv_legendPlayers;
    autoFE413B9E_var = -1;
    while (true) {
        autoFE413B9E_var = PlayerGroupNextPlayer(autoFE413B9E_g, autoFE413B9E_var);
        if (autoFE413B9E_var < 0) { break; }
        if ((libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lp_legendIndex].lv_legendInstance == libWCdr_gv_legends.lv_player[autoFE413B9E_var].lv_selectedLegend)) {
            lv_selectedCount += 1;
        }

    }
    return lv_selectedCount;
}

bool libWCdr_gf_AllLegendPlayersAreReady () {
    // Automatic Variable Declarations
    playergroup auto48E8EA47_g;
    int auto48E8EA47_var;

    // Implementation
    auto48E8EA47_g = libWCdr_gv_legends.lv_legendPlayers;
    auto48E8EA47_var = -1;
    while (true) {
        auto48E8EA47_var = PlayerGroupNextPlayer(auto48E8EA47_g, auto48E8EA47_var);
        if (auto48E8EA47_var < 0) { break; }
        if ((libWCdr_gv_debugHeroSelectUI.lv_playerIsReady[auto48E8EA47_var] == false)) {
            return false;
        }

    }
    return true;
}

void libWCdr_gf_DebugSelectLegends (trigger lp_callbackTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libWCdr_gv_debugHeroSelectUI.lv_callbackTrigger = lp_callbackTrigger;
    libWCdr_gf_ShowHideDebugSelectionUI(true);
}

void libWCdr_gf_SetCoopDebugOption (int lp_debugOption, bool lp_on) {
    // Automatic Variable Declarations
    int auto36054DA9_val;

    // Implementation
    auto36054DA9_val = lp_debugOption;
    if (auto36054DA9_val == libWCdr_ge_CoopDebugOption_SuppressStartingUnits) {
        libWCdr_gv_legends.lv_debugSuppressStartingUnits = lp_on;
    }
    else if (auto36054DA9_val == libWCdr_ge_CoopDebugOption_SuppressLegendTech) {
        libWCdr_gv_legends.lv_debugSuppressLegendTech = lp_on;
    }
    else {
    }
}

void libWCdr_gf_InitializeGameUI () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    libWCdr_gv_gameUI.lv_consoleUIContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePortrait, "UIContainer/ConsolePanel/HeroPortraitPanel");
    libWCdr_gv_gameUI.lv_hero_Portrait = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCommandPanel, "UIContainer/ConsoleUIContainer/CommanderCommandPanel");
    libWCdr_gv_gameUI.lv_hero_CommandPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeInvnentoryPanel, "UIContainer/ConsoleUIContainer/InventoryPanel");
    libWCdr_gv_gameUI.lv_hero_InventoryPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/CommanderLevelLabel");
    libWCdr_gv_gameUI.lv_hero_LevelLabel = DialogControlLastCreated();
    ConsoleCommand("Variable subtitles 1", true, true);
}

void libWCdr_gf_HookUpHeroInGameUI (int lp_player, unit lp_hero) {
    // Variable Declarations
    unitgroup lv_herogroup;
    playergroup lv_playergroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_herogroup = libNtve_gf_ConvertUnitToUnitGroup(lp_hero);
    lv_playergroup = PlayerGroupSingle(lp_player);

    // Implementation
    libNtve_gf_SetDialogItemUnitGroup(libWCdr_gv_gameUI.lv_hero_CommandPanel, lv_herogroup, lv_playergroup);
    libNtve_gf_SetDialogItemUnitGroup(libWCdr_gv_gameUI.lv_hero_InventoryPanel, lv_herogroup, lv_playergroup);
    libWCdr_gf_UpdateHeroLevelLabel(lp_hero);
}

void libWCdr_gf_HookUpHeroPortrait (int lp_player) {
    // Variable Declarations
    playergroup lv_playergroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playergroup = PlayerGroupSingle(lp_player);

    // Implementation
    libNtve_gf_SetDialogItemModel(libWCdr_gv_gameUI.lv_hero_Portrait, UserDataGetModel("PlayableLegends", libWCdr_gv_legends.lv_player[lp_player].lv_selectedLegend, "HeroPortraitModel", 1), lv_playergroup);
}

void libWCdr_gf_UpdateHeroLevelLabel (unit lp_hero) {
    // Variable Declarations
    playergroup lv_heroownergroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroownergroup = PlayerGroupSingle(UnitGetOwner(lp_hero));

    // Implementation
    libNtve_gf_SetDialogItemText(libWCdr_gv_gameUI.lv_hero_LevelLabel, IntToText(UnitXPGetCurrentLevel(lp_hero, "AHer")), lv_heroownergroup);
}

void libWCdr_gf_InitializeLootAwardUI () {
    // Variable Declarations
    int lv_currentindex;

    // Automatic Variable Declarations
    const int auto77733465_ae = libWCdr_gv_dEBUG_LOOT_AWARD_MAX_LOOT;
    const int auto77733465_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/LootAwardScreen");
    libWCdr_gv_lootAward.lv_lootAwardPanel = DialogControlLastCreated();
    DialogControlHookup(libWCdr_gv_lootAward.lv_lootAwardPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("CloseButton"));
    libWCdr_gv_lootAward.lv_closeButton = DialogControlLastCreated();
    lv_currentindex = 1;
    for ( ; ( (auto77733465_ai >= 0 && lv_currentindex <= auto77733465_ae) || (auto77733465_ai < 0 && lv_currentindex >= auto77733465_ae) ) ; lv_currentindex += auto77733465_ai ) {
        DialogControlHookup(libWCdr_gv_lootAward.lv_lootAwardPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("LootBox" + IntToString(lv_currentindex) + "/EquipmentButton")));
        libWCdr_gv_lootAward.lv_lootAwardButtons[lv_currentindex] = DialogControlLastCreated();
    }
}

void libWCdr_gf_ShowHideLootAwardUI (playergroup lp_playerGroup, bool lp_showHide) {
    // Variable Declarations
    bool lv_oppositeShowHide;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oppositeShowHide = true;

    // Implementation
    if ((lp_showHide == true)) {
        lv_oppositeShowHide = false;
    }
    else {
        lv_oppositeShowHide = true;
    }
    DialogControlSetVisible(libWCdr_gv_lootAward.lv_lootAwardPanel, lp_playerGroup, lp_showHide);
    UISetFrameVisible(libWCdr_gv_legends.lv_legendPlayers, c_syncFrameTypeMenuBar, lv_oppositeShowHide);
    UISetFrameVisible(libWCdr_gv_legends.lv_legendPlayers, c_syncFrameTypeResourcePanel, lv_oppositeShowHide);
}

string libWCdr_gf_WC_ReticleModelOfStyle (int lp_type, int lp_size) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    int auto190CD581_val;
    int autoD6CFE0AB_val;
    int auto29BC4A20_val;
    int auto515621BF_val;

    // Variable Initialization

    // Implementation
    auto190CD581_val = lp_size;
    if (auto190CD581_val == libWCdr_ge_WarCoopReticleSize_Large) {
        autoD6CFE0AB_val = lp_type;
        if (autoD6CFE0AB_val == libWCdr_ge_WarCoopReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoD6CFE0AB_val == libWCdr_ge_WarCoopReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoD6CFE0AB_val == libWCdr_ge_WarCoopReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoD6CFE0AB_val == libWCdr_ge_WarCoopReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoD6CFE0AB_val == libWCdr_ge_WarCoopReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoD6CFE0AB_val == libWCdr_ge_WarCoopReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoD6CFE0AB_val == libWCdr_ge_WarCoopReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (autoD6CFE0AB_val == libWCdr_ge_WarCoopReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (autoD6CFE0AB_val == libWCdr_ge_WarCoopReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else {
        }
    }
    else if (auto190CD581_val == libWCdr_ge_WarCoopReticleSize_Medium) {
        auto29BC4A20_val = lp_type;
        if (auto29BC4A20_val == libWCdr_ge_WarCoopReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto29BC4A20_val == libWCdr_ge_WarCoopReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto29BC4A20_val == libWCdr_ge_WarCoopReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto29BC4A20_val == libWCdr_ge_WarCoopReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto29BC4A20_val == libWCdr_ge_WarCoopReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto29BC4A20_val == libWCdr_ge_WarCoopReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto29BC4A20_val == libWCdr_ge_WarCoopReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (auto29BC4A20_val == libWCdr_ge_WarCoopReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (auto29BC4A20_val == libWCdr_ge_WarCoopReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else {
        }
    }
    else if (auto190CD581_val == libWCdr_ge_WarCoopReticleSize_Small) {
        auto515621BF_val = lp_type;
        if (auto515621BF_val == libWCdr_ge_WarCoopReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto515621BF_val == libWCdr_ge_WarCoopReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto515621BF_val == libWCdr_ge_WarCoopReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto515621BF_val == libWCdr_ge_WarCoopReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto515621BF_val == libWCdr_ge_WarCoopReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto515621BF_val == libWCdr_ge_WarCoopReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto515621BF_val == libWCdr_ge_WarCoopReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (auto515621BF_val == libWCdr_ge_WarCoopReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (auto515621BF_val == libWCdr_ge_WarCoopReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libWCdr_gf_WC_ReticleTextFontOfStyle (int lp_type) {
    // Variable Declarations
    string lv_fontStyle;

    // Automatic Variable Declarations
    int auto1B129CB5_val;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto1B129CB5_val = lp_type;
    if (auto1B129CB5_val == libWCdr_ge_WarCoopReticleType_ProtossBonusObjective) {
        lv_fontStyle = "VoidReticleProtossBonusObjective";
    }
    else if (auto1B129CB5_val == libWCdr_ge_WarCoopReticleType_ProtossEnemy) {
        lv_fontStyle = "VoidReticleProtossEnemy";
    }
    else if (auto1B129CB5_val == libWCdr_ge_WarCoopReticleType_ProtossMainObjective) {
        lv_fontStyle = "VoidReticleProtossMainObjective";
    }
    else if (auto1B129CB5_val == libWCdr_ge_WarCoopReticleType_TerranBonusObjective) {
        lv_fontStyle = "VoidReticleTerranBonusObjective";
    }
    else if (auto1B129CB5_val == libWCdr_ge_WarCoopReticleType_TerranEnemy) {
        lv_fontStyle = "VoidReticleTerranEnemy";
    }
    else if (auto1B129CB5_val == libWCdr_ge_WarCoopReticleType_TerranMainObjective) {
        lv_fontStyle = "VoidReticleTerranMainObjective";
    }
    else if (auto1B129CB5_val == libWCdr_ge_WarCoopReticleType_ZergBonusObjective) {
        lv_fontStyle = "VoidReticleZergBonusObjective";
    }
    else if (auto1B129CB5_val == libWCdr_ge_WarCoopReticleType_ZergEnemy) {
        lv_fontStyle = "VoidReticleZergEnemy";
    }
    else if (auto1B129CB5_val == libWCdr_ge_WarCoopReticleType_ZergMainObjective) {
        lv_fontStyle = "VoidReticleZergMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libWCdr_gf_WC_ReticleApplyTint (actor lp_reticle, int lp_type) {
    // Automatic Variable Declarations
    int autoF9C0C121_val;

    // Implementation
    autoF9C0C121_val = lp_type;
    if (autoF9C0C121_val == libWCdr_ge_WarCoopReticleType_ProtossMainObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else if (autoF9C0C121_val == libWCdr_ge_WarCoopReticleType_ProtossEnemy) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 255,0,0");
    }
    else if (autoF9C0C121_val == libWCdr_ge_WarCoopReticleType_ProtossBonusObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else {
    }
}

void libWCdr_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location, structref<libWCdr_gs_ReticleEffect> lp_outReticleRef) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lp_outReticleRef.lv_effectActor = null;
    lp_outReticleRef.lv_textTag = c_textTagNone;
    lv_model = libWCdr_gf_WC_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    lp_outReticleRef.lv_effectActor = libNtve_gf_ActorLastCreated();
    libWCdr_gf_WC_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libWCdr_gf_WC_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_WCdr_67F4C567", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_WCdr_67F4C567", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_WCdr_67F4C567"), 24, lp_location, 1.0, true, true, PlayerGroupSingle(1));
    lp_outReticleRef.lv_textTag = TextTagLastCreated();
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libWCdr_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint, structref<libWCdr_gs_ReticleEffect> lp_outReticleRef) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lp_outReticleRef.lv_effectActor = null;
    lp_outReticleRef.lv_textTag = c_textTagNone;
    lv_model = libWCdr_gf_WC_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnitInheritVisibility(lp_target, lv_model, lp_attachPoint);
    lp_outReticleRef.lv_effectActor = libNtve_gf_ActorLastCreated();
    libWCdr_gf_WC_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libWCdr_gf_WC_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_WCdr_7F2BEF1D", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_WCdr_7F2BEF1D", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_WCdr_7F2BEF1D"), 24, UnitGetPosition(lp_target), 0.0, true, true, PlayerGroupSingle(1));
    lp_outReticleRef.lv_textTag = TextTagLastCreated();
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 1.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeMask);
}

void libWCdr_gf_InitPlayerColors () {
    int init_i;

    // Variable Declarations
    int lv_player;
    playergroup lv_players;
    int lv_numberofplayers;
    int[libWCdr_gv_lEGENDS_MAX_PLAYERS + 1] lv_allycolors;

    // Automatic Variable Declarations
    int auto64FC2122_ae;
    const int auto64FC2122_ai = 1;
    playergroup auto46A323CB_g;

    // Variable Initialization
    lv_players = libWCdr_gf_GetLegendPlayers();
    lv_numberofplayers = PlayerGroupCount(lv_players);
    for (init_i = 0; init_i <= libWCdr_gv_lEGENDS_MAX_PLAYERS; init_i += 1) {
        lv_allycolors[init_i] = 2;
    }

    // Implementation
    lv_allycolors[1] = 2;
    lv_allycolors[2] = 3;
    lv_allycolors[3] = 4;
    lv_allycolors[4] = 7;
    auto64FC2122_ae = lv_numberofplayers;
    lv_player = 1;
    for ( ; ( (auto64FC2122_ai >= 0 && lv_player <= auto64FC2122_ae) || (auto64FC2122_ai < 0 && lv_player >= auto64FC2122_ae) ) ; lv_player += auto64FC2122_ai ) {
        PlayerSetColorIndex(PlayerGroupPlayer(lv_players, lv_player), lv_allycolors[lv_player], true);
    }
    auto46A323CB_g = libWCdr_gf_GetEnemiesofLegendPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto46A323CB_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerSetColorIndex(lv_player, 1, true);
    }
}

void libWCdr_gf_ApplyPlayerTalentCoop (int lp_player, string lp_talent) {
    // Variable Declarations
    string lv_abilLink;
    string lv_abilDataCollectionLink;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogTalent, lp_talent) == true)) {
        PlayerAddTalent(lp_player, lp_talent);
        lv_abilLink = (CatalogFieldValueGet(c_gameCatalogTalent, lp_talent, "Abil", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_abilLink) == true)) {
            lv_abilDataCollectionLink = (CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "DataCollection", c_playerAny));
            if ((CatalogEntryIsValid(c_gameCatalogDataCollection, lv_abilDataCollectionLink) == true) && (CatalogEntryScope(c_gameCatalogDataCollection, lv_abilDataCollectionLink) == "CDataCollectionAbil")) {
                libWCdr_gf_DataCollectionApplyTech(lv_abilDataCollectionLink, lp_player, true);
            }

        }

    }

}

void libWCdr_gf_ApplyArtifactEquipmentUpgrades () {
    // Variable Declarations
    int lv_legendplayer;
    string lv_artifact;
    int lv_artifactindex;
    string lv_upgrade;
    string lv_playerresponse;
    string lv_talent;
    string lv_t;

    // Automatic Variable Declarations
    playergroup auto8D293D26_g;
    const int auto990FA14D_ae = libWCdr_gv_lEGENDS_MAX_EQUIPMENT;
    const int auto990FA14D_ai = 1;
    int auto0D1C65C7_catalog;
    string auto0D1C65C7_entry;
    string auto0D1C65C7_fieldPath;
    int auto0D1C65C7_player;
    int auto0D1C65C7_i;
    int auto159B5369_catalog;
    string auto159B5369_entry;
    string auto159B5369_fieldPath;
    int auto159B5369_player;
    int auto159B5369_i;

    // Variable Initialization
    lv_upgrade = "";
    lv_playerresponse = "";
    lv_talent = "";

    // Implementation
    auto8D293D26_g = libWCdr_gf_GetLegendPlayers();
    lv_legendplayer = -1;
    while (true) {
        lv_legendplayer = PlayerGroupNextPlayer(auto8D293D26_g, lv_legendplayer);
        if (lv_legendplayer < 0) { break; }
        lv_artifactindex = 1;
        for ( ; ( (auto990FA14D_ai >= 0 && lv_artifactindex <= auto990FA14D_ae) || (auto990FA14D_ai < 0 && lv_artifactindex >= auto990FA14D_ae) ) ; lv_artifactindex += auto990FA14D_ai ) {
            lv_artifact = libWCdr_gv_legends.lv_player[lv_legendplayer].lv_equipment[lv_artifactindex];
            if ((lv_artifact != null)) {
                auto0D1C65C7_catalog = c_gameCatalogArtifact;
                auto0D1C65C7_entry = lv_artifact;
                auto0D1C65C7_fieldPath = "Upgrades";
                auto0D1C65C7_player = lv_legendplayer;
                auto0D1C65C7_i = 0;
                for ( ; auto0D1C65C7_i <= CatalogFieldValueCount(c_gameCatalogArtifact,auto0D1C65C7_entry,auto0D1C65C7_fieldPath,auto0D1C65C7_player)-1 ; auto0D1C65C7_i += 1 ) {
                    lv_upgrade = CatalogFieldValueGet(c_gameCatalogArtifact,auto0D1C65C7_entry,auto0D1C65C7_fieldPath+"["+IntToString(auto0D1C65C7_i)+"]",auto0D1C65C7_player);
                    if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lv_upgrade) == true)) {
                        TechTreeUpgradeAddLevel(lv_legendplayer, (lv_upgrade), 1);
                    }

                }
                auto159B5369_catalog = c_gameCatalogArtifact;
                auto159B5369_entry = lv_artifact;
                auto159B5369_fieldPath = "PlayerResponses";
                auto159B5369_player = lv_legendplayer;
                auto159B5369_i = 0;
                for ( ; auto159B5369_i <= CatalogFieldValueCount(c_gameCatalogArtifact,auto159B5369_entry,auto159B5369_fieldPath,auto159B5369_player)-1 ; auto159B5369_i += 1 ) {
                    lv_playerresponse = CatalogFieldValueGet(c_gameCatalogArtifact,auto159B5369_entry,auto159B5369_fieldPath+"["+IntToString(auto159B5369_i)+"]",auto159B5369_player);
                    if ((CatalogEntryIsValid(c_gameCatalogPlayerResponse, lv_upgrade) == true)) {
                        PlayerAddResponse(lv_legendplayer, (lv_playerresponse));
                    }

                }
                lv_talent = CatalogFieldValueGet(c_gameCatalogArtifact, lv_artifact, "Talent", lv_legendplayer);
                libWCdr_gf_ApplyPlayerTalentCoop(lv_legendplayer, (lv_talent));
            }

        }
    }
}

void libWCdr_gf_GiveArtifactGrantedItemstoHero (unit lp_hero) {
    // Variable Declarations
    int lv_player;
    string lv_artifact;
    int lv_artifactindex;
    string lv_itemid;
    string lv_item;

    // Automatic Variable Declarations
    const int autoA8846127_ae = libWCdr_gv_lEGENDS_MAX_EQUIPMENT;
    const int autoA8846127_ai = 1;
    int auto0ACD189B_catalog;
    string auto0ACD189B_entry;
    string auto0ACD189B_fieldPath;
    int auto0ACD189B_player;
    int auto0ACD189B_i;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_hero);
    lv_itemid = "";

    // Implementation
    lv_artifactindex = 1;
    for ( ; ( (autoA8846127_ai >= 0 && lv_artifactindex <= autoA8846127_ae) || (autoA8846127_ai < 0 && lv_artifactindex >= autoA8846127_ae) ) ; lv_artifactindex += autoA8846127_ai ) {
        lv_artifact = libWCdr_gv_legends.lv_player[lv_player].lv_equipment[lv_artifactindex];
        if ((lv_artifact != null)) {
            auto0ACD189B_catalog = c_gameCatalogArtifact;
            auto0ACD189B_entry = lv_artifact;
            auto0ACD189B_fieldPath = "Item";
            auto0ACD189B_player = lv_player;
            auto0ACD189B_i = 0;
            for ( ; auto0ACD189B_i <= CatalogFieldValueCount(c_gameCatalogArtifact,auto0ACD189B_entry,auto0ACD189B_fieldPath,auto0ACD189B_player)-1 ; auto0ACD189B_i += 1 ) {
                lv_itemid = CatalogFieldValueGet(c_gameCatalogArtifact,auto0ACD189B_entry,auto0ACD189B_fieldPath+"["+IntToString(auto0ACD189B_i)+"]",auto0ACD189B_player);
                lv_item = (lv_itemid);
                if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_item) == true)) {
                    UnitInventoryCreate(lp_hero, lv_item);
                }

            }
        }

    }
}

void libWCdr_gf_RenderEquipmentButton (int lp_player, int lp_button, string lp_artifact) {
    // Variable Declarations
    string lv_artifactface;
    playergroup lv_playergroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playergroup = PlayerGroupSingle(lp_player);

    // Implementation
    if ((lp_artifact == null)) {
        libNtve_gf_SetDialogItemTooltip(lp_button, StringToText(""), lv_playergroup);
        DialogControlSetAnimationState(lp_button, lv_playergroup, libWCdr_gv_animationStates.lv_emptyState, libWCdr_gv_animationStates.lv_emptyState_Empty);
    }
    else {
        lv_artifactface = (CatalogFieldValueGet(c_gameCatalogArtifact, lp_artifact, "Face", lp_player));
        DialogControlHookup(lp_button, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("IconImage"));
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (CatalogFieldValueGet(c_gameCatalogButton, lv_artifactface, "Icon", lp_player)), lv_playergroup);
        TextExpressionSetToken("Param/Expression/lib_WCdr_8FCB3CFB", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_artifactface, "Name", lp_player)));
        TextExpressionSetToken("Param/Expression/lib_WCdr_8FCB3CFB", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_artifactface, "Tooltip", lp_player)));
        libNtve_gf_SetDialogItemTooltip(lp_button, TextExpressionAssemble("Param/Expression/lib_WCdr_8FCB3CFB"), lv_playergroup);
        DialogControlSetAnimationState(lp_button, lv_playergroup, libWCdr_gv_animationStates.lv_emptyState, libWCdr_gv_animationStates.lv_emptyState_NotEmpty);
    }
}

void libWCdr_gf_AwardLoot (int lp_player, int lp_numberofLoots) {
    // Variable Declarations
    int lv_lootcount;
    int lv_lootindex;
    playergroup lv_playergroup;

    // Automatic Variable Declarations
    int autoAFDAB86B_ae;
    const int autoAFDAB86B_ai = 1;
    const int auto7731C68D_ae = libWCdr_gv_dEBUG_LOOT_AWARD_MAX_LOOT;
    const int auto7731C68D_ai = 1;

    // Variable Initialization
    lv_lootcount = libNtve_gf_ArithmeticIntClamp(lp_numberofLoots, 0, libWCdr_gv_dEBUG_LOOT_AWARD_MAX_LOOT);
    lv_playergroup = PlayerGroupSingle(lp_player);

    // Implementation
    autoAFDAB86B_ae = lv_lootcount;
    lv_lootindex = 1;
    for ( ; ( (autoAFDAB86B_ai >= 0 && lv_lootindex <= autoAFDAB86B_ae) || (autoAFDAB86B_ai < 0 && lv_lootindex >= autoAFDAB86B_ae) ) ; lv_lootindex += autoAFDAB86B_ai ) {
        libWCdr_gv_legends.lv_player[lp_player].lv_loot[lv_lootindex] = libWCdr_gf_RandomArtifact(lp_player);
        libWCdr_gf_W3CBankStoreLoot(lp_player, libWCdr_gv_legends.lv_player[lp_player].lv_loot[lv_lootindex], 1);
        libWCdr_gf_RenderEquipmentButton(lp_player, libWCdr_gv_lootAward.lv_lootAwardButtons[lv_lootindex], libWCdr_gv_legends.lv_player[lp_player].lv_loot[lv_lootindex]);
        DialogControlSetAnimationState(libWCdr_gv_lootAward.lv_lootAwardButtons[lv_lootindex], lv_playergroup, "ActiveState", "Active");
    }
    lv_lootindex = (lv_lootcount + 1);
    for ( ; ( (auto7731C68D_ai >= 0 && lv_lootindex <= auto7731C68D_ae) || (auto7731C68D_ai < 0 && lv_lootindex >= auto7731C68D_ae) ) ; lv_lootindex += auto7731C68D_ai ) {
        DialogControlSetAnimationState(libWCdr_gv_lootAward.lv_lootAwardButtons[lv_lootindex], lv_playergroup, "ActiveState", "Inactive");
    }
    if ((ModI(lv_lootcount, 2) == 1)) {
        DialogControlSetAnimationState(libWCdr_gv_lootAward.lv_lootAwardPanel, lv_playergroup, "EvenState", "Odd");
    }
    else {
        DialogControlSetAnimationState(libWCdr_gv_lootAward.lv_lootAwardPanel, lv_playergroup, "EvenState", "Even");
    }
}

string libWCdr_gf_RandomArtifact (int lp_player) {
    // Variable Declarations
    string lv_artifact;
    int lv_artifactscounted;
    string lv_pickedartifact;

    // Automatic Variable Declarations
    int auto75FD116A_catalog;
    int auto75FD116A_i;

    // Variable Initialization

    // Implementation
    auto75FD116A_catalog = c_gameCatalogArtifact;
    auto75FD116A_i = 1;
    for ( ; auto75FD116A_i <= CatalogEntryCount(c_gameCatalogArtifact) ; auto75FD116A_i += 1 ) {
        lv_artifact = CatalogEntryGet(auto75FD116A_catalog, auto75FD116A_i);
        if ((libWCdr_gf_ArtifactCanBeAwarded(lv_artifact) == true) && ((lp_player == c_playerAny) || (libWCdr_gf_PlayerOwnsArtifact(lp_player, lv_artifact) == false))) {
            lv_artifactscounted += 1;
            if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_artifactscounted))) {
                lv_pickedartifact = lv_artifact;
            }

        }

    }
    return lv_pickedartifact;
}

bool libWCdr_gf_CommanderCanEquipArtifact (string lp_commander, string lp_artifact) {
    // Variable Declarations
    string lv_commandername;
    string lv_commandertype;
    string lv_artifacttype;

    // Automatic Variable Declarations
    int auto15CE537D_catalog;
    string auto15CE537D_entry;
    string auto15CE537D_fieldPath;
    int auto15CE537D_player;
    int auto15CE537D_i;
    int auto17AF9D05_catalog;
    string auto17AF9D05_entry;
    string auto17AF9D05_fieldPath;
    int auto17AF9D05_player;
    int auto17AF9D05_i;

    // Variable Initialization
    lv_commandername = (lp_commander);
    lv_commandertype = "";
    lv_artifacttype = "";

    // Implementation
    if ((CatalogFieldValueCount(c_gameCatalogArtifact, lp_artifact, "AllowedCommanderKeyArray", c_playerAny) == 0)) {
        return true;
    }

    auto15CE537D_catalog = c_gameCatalogArtifact;
    auto15CE537D_entry = lp_artifact;
    auto15CE537D_fieldPath = "AllowedCommanderKeyArray";
    auto15CE537D_player = c_playerAny;
    auto15CE537D_i = 0;
    for ( ; auto15CE537D_i <= CatalogFieldValueCount(c_gameCatalogArtifact,auto15CE537D_entry,auto15CE537D_fieldPath,auto15CE537D_player)-1 ; auto15CE537D_i += 1 ) {
        lv_artifacttype = CatalogFieldValueGet(c_gameCatalogArtifact,auto15CE537D_entry,auto15CE537D_fieldPath+"["+IntToString(auto15CE537D_i)+"]",auto15CE537D_player);
        if ((lv_artifacttype == lv_commandername)) {
            return true;
        }

        auto17AF9D05_catalog = c_gameCatalogCommander;
        auto17AF9D05_entry = lp_commander;
        auto17AF9D05_fieldPath = "CommanderArtifactKeyArray";
        auto17AF9D05_player = c_playerAny;
        auto17AF9D05_i = 0;
        for ( ; auto17AF9D05_i <= CatalogFieldValueCount(c_gameCatalogCommander,auto17AF9D05_entry,auto17AF9D05_fieldPath,auto17AF9D05_player)-1 ; auto17AF9D05_i += 1 ) {
            lv_commandertype = CatalogFieldValueGet(c_gameCatalogCommander,auto17AF9D05_entry,auto17AF9D05_fieldPath+"["+IntToString(auto17AF9D05_i)+"]",auto17AF9D05_player);
            if ((lv_artifacttype == lv_commandertype)) {
                return true;
            }

        }
    }
    return false;
}

bool libWCdr_gf_PlayerHasArtifactEquipped (int lp_player, string lp_artifact) {
    // Variable Declarations
    int lv_slotindex;

    // Automatic Variable Declarations
    const int auto26C74063_ae = libWCdr_gv_lEGENDS_MAX_EQUIPMENT;
    const int auto26C74063_ai = 1;

    // Variable Initialization

    // Implementation
    lv_slotindex = 1;
    for ( ; ( (auto26C74063_ai >= 0 && lv_slotindex <= auto26C74063_ae) || (auto26C74063_ai < 0 && lv_slotindex >= auto26C74063_ae) ) ; lv_slotindex += auto26C74063_ai ) {
        if ((lp_artifact == libWCdr_gv_legends.lv_player[lp_player].lv_equipment[lv_slotindex])) {
            return true;
        }

    }
    return false;
}

bool libWCdr_gf_PlayerOwnsArtifact (int lp_player, string lp_artifact) {
    // Variable Declarations
    string lv_section;
    string lv_key;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section = ("WCLoot_" + (lp_artifact));
    lv_key = "Rank";

    // Implementation
    return libWCdr_gf_W3CBankKeyExists(lp_player, lv_section, lv_key);
}

bool libWCdr_gf_ArtifactCanBeAwarded (string lp_artifact) {
    // Automatic Variable Declarations
    // Implementation
    return ((CatalogFieldValueCount(c_gameCatalogArtifact, lp_artifact, "AllowedCommanderKeyArray", c_playerAny) == 0) || (CatalogFieldValueGet(c_gameCatalogArtifact, lp_artifact, "AllowedCommanderKeyArray[" + IntToString(0) + "]", c_playerAny) != "NONE"));
}

void libWCdr_gf_RegisterWayGateOneway (unit lp_sourceWayGate, unit lp_destinationWayGate) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitAbilityExists(lp_sourceWayGate, libWCdr_gv_waygateAbility) == true)) {
        UnitGroupAdd(libWCdr_gv_wayGatesUnitGroup, lp_sourceWayGate);
        if ((UnitHasBehavior2(lp_sourceWayGate, libWCdr_gv_waygateBehaviorDestination) == false)) {
            UnitBehaviorAdd(lp_sourceWayGate, "AwrpDestinationTracker", lp_sourceWayGate, 1);
        }

        UnitCreateEffectUnit(lp_sourceWayGate, libWCdr_gv_waygateEffectAssignDestination, lp_destinationWayGate);
    }

}

void libWCdr_gf_RegisterWayGatePairing (unit lp_wayGate1, unit lp_wayGate2) {
    // Automatic Variable Declarations
    // Implementation
    libWCdr_gf_RegisterWayGateOneway(lp_wayGate2, lp_wayGate1);
    libWCdr_gf_RegisterWayGateOneway(lp_wayGate1, lp_wayGate2);
}

void libWCdr_gf_EnableDisableWayGate (unit lp_wayGate, bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    UnitAbilityEnable(lp_wayGate, libWCdr_gv_waygateAbility, lp_enabled);
}

void libWCdr_gf_SetCircleOfPowerCaptureState (unit lp_circleOfPower, int lp_state) {
    // Automatic Variable Declarations
    int auto237784B2_val;

    // Implementation
    auto237784B2_val = lp_state;
    if (auto237784B2_val == libWCdr_ge_CircleOfPowerCaptureState_ActivatedGreen) {
        UnitAbilityEnable(lp_circleOfPower, "War_Shared_HeroEnterCircle", false);
        UnitSetTeamColorIndex(lp_circleOfPower, 7);
    }
    else if (auto237784B2_val == libWCdr_ge_CircleOfPowerCaptureState_CompleteBlue) {
        UnitAbilityEnable(lp_circleOfPower, "War_Shared_HeroEnterCircle", false);
        UnitSetTeamColorIndex(lp_circleOfPower, 2);
    }
    else if (auto237784B2_val == libWCdr_ge_CircleOfPowerCaptureState_OffIgnoreHero) {
        UnitAbilityEnable(lp_circleOfPower, "War_Shared_HeroEnterCircle", false);
        UnitSetTeamColorIndex(lp_circleOfPower, 13);
    }
    else if (auto237784B2_val == libWCdr_ge_CircleOfPowerCaptureState_OnAcceptHero) {
        UnitAbilityEnable(lp_circleOfPower, "War_Shared_HeroEnterCircle", true);
        UnitSetTeamColorIndex(lp_circleOfPower, 5);
    }
    else {
    }
}

void libWCdr_gf_CreateStartingUnitsandSetGameplayOptions () {
    // Automatic Variable Declarations
    // Implementation
    GameTimeOfDaySet(libGAwX_gv_bj_MELEE_STARTING_TOD);
    libWCdr_gf_SetGameplayOptionsForLegendPlayers();
    if ((libWCdr_gv_legends.lv_debugSuppressLegendTech == false)) {
        libWCdr_gf_SetLegendTechForAllPlayers();
    }

    if ((libWCdr_gv_legends.lv_debugSuppressStartingUnits == false)) {
        libWCdr_gf_SetStartingUnitsForLegendPlayers();
        libWCdr_gf_OrderStartingUnitstoGettoWork();
    }

}

void libWCdr_gf_SetLegendTechForPlayer (int lp_legendPlayer) {
    // Variable Declarations
    string lv_abilityReplacementInstance;

    // Automatic Variable Declarations
    string auto65265E94_userType;
    int auto65265E94_i;

    // Variable Initialization

    // Implementation
    auto65265E94_userType = "LegendAbilityReplacements";
    auto65265E94_i = 1;
    for ( ; auto65265E94_i <= UserDataInstanceCount(auto65265E94_userType) ; auto65265E94_i += 1 ) {
        lv_abilityReplacementInstance = UserDataInstance(auto65265E94_userType, auto65265E94_i);
        if ((UserDataGetUserInstance("LegendAbilityReplacements", lv_abilityReplacementInstance, "Legend", 1) == libWCdr_gf_GetLegendInstanceForPlayer(lp_legendPlayer)) && (UserDataGetGameLink("LegendAbilityReplacements", lv_abilityReplacementInstance, "AbilityReplacement", 1) == "")) {
            TechTreeAbilityAllow(lp_legendPlayer, UserDataGetAbilCmd("LegendAbilityReplacements", lv_abilityReplacementInstance, "AbilityToReplace", 1), false);
        }
        else if ((UserDataGetUserInstance("LegendAbilityReplacements", lv_abilityReplacementInstance, "Legend", 1) == libWCdr_gf_GetLegendInstanceForPlayer(lp_legendPlayer))) {
            CatalogLinkReplace(lp_legendPlayer, c_gameCatalogAbil, (UserDataGetGameLink("LegendAbilityReplacements", lv_abilityReplacementInstance, "AbilityToReplace", 1)), (UserDataGetGameLink("LegendAbilityReplacements", lv_abilityReplacementInstance, "AbilityReplacement", 1)));
        }
    }
}

void libWCdr_gf_SetCoopCommanderTechForPlayer (int lp_player) {
    // Variable Declarations
    string lv_commander;
    string lv_itDataCollection;
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto7F49E592_ae;
    const int auto7F49E592_ai = 1;

    // Variable Initialization
    lv_commander = UserDataGetGameLink("PlayableLegends", libWCdr_gv_legends.lv_player[lp_player].lv_selectedLegend, "Commander", 1);
    lv_itDataCollection = "";

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogCommander, lv_commander) == false)) {
        CatalogReferenceSet("Abil,CoopCommanderHeroSharedTrain,InfoArray[Train1].Flags[AutoCastOn]", lp_player, "0");
        CatalogReferenceSet("Abil,CoopCommanderHeroSharedTrain,InfoArray[Train1].Button.Flags[CreateDefaultButton]", lp_player, "0");
        CatalogReferenceSet("Abil,CoopCommanderHeroSharedTrain,InfoArray[Train1].Button.Flags[UseDefaultButton]", lp_player, "0");
        return ;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_itIndex, "WarcraftCommander", 1);
    PlayerSetCommander(lp_player, lv_commander);
    TechTreeUpgradeAddLevel(lp_player, "WarcraftCommander", 1);
    TechTreeSetProduceCap(lp_player, "_CoopHero", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TALT", c_techCatUnit, 1);
    TechTreeRestrictionsEnable(lp_player, true);
    auto7F49E592_ae = (CatalogFieldValueCount(c_gameCatalogCommander, lv_commander, "DataCollectionAllowed", lp_player) - 1);
    lv_itIndex = 0;
    for ( ; ( (auto7F49E592_ai >= 0 && lv_itIndex <= auto7F49E592_ae) || (auto7F49E592_ai < 0 && lv_itIndex >= auto7F49E592_ae) ) ; lv_itIndex += auto7F49E592_ai ) {
        lv_itDataCollection = CatalogFieldValueGet(c_gameCatalogCommander, lv_commander, "DataCollectionAllowed[" + IntToString(lv_itIndex) + "]", lp_player);
        libWCdr_gf_DataCollectionApplyTech((lv_itDataCollection), lp_player, true);
    }
}

void libWCdr_gf_SetRaceTechForPlayer (int lp_player) {
    // Variable Declarations
    string lv_itEntry;
    string lv_raceToken;
    string lv_oldLink;
    string lv_newLink;

    // Automatic Variable Declarations
    int autoECD28B4C_catalog;
    int autoECD28B4C_i;

    // Variable Initialization
    lv_raceToken = ("_" + (PlayerRace(lp_player)));
    lv_oldLink = "";
    lv_newLink = "";

    // Implementation
    autoECD28B4C_catalog = c_gameCatalogAbil;
    autoECD28B4C_i = 1;
    for ( ; autoECD28B4C_i <= CatalogEntryCount(c_gameCatalogAbil) ; autoECD28B4C_i += 1 ) {
        lv_itEntry = CatalogEntryGet(autoECD28B4C_catalog, autoECD28B4C_i);
        if ((StringContains((lv_itEntry), lv_raceToken, c_stringEnd, c_stringCase) == true)) {
            lv_newLink = (lv_itEntry);
            lv_oldLink = StringReplaceWord(lv_newLink, lv_raceToken, "", c_stringReplaceAll, c_stringCase);
            if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_oldLink) == true)) {
                CatalogLinkReplace(lp_player, c_gameCatalogAbil, lv_oldLink, lv_newLink);
            }

        }

    }
}

void libWCdr_gf_SetLegendTechForAllPlayers () {
    // Variable Declarations
    int lv_legendplayer;

    // Automatic Variable Declarations
    playergroup autoC3132F34_g;

    // Variable Initialization

    // Implementation
    autoC3132F34_g = libWCdr_gv_legends.lv_legendPlayers;
    lv_legendplayer = -1;
    while (true) {
        lv_legendplayer = PlayerGroupNextPlayer(autoC3132F34_g, lv_legendplayer);
        if (lv_legendplayer < 0) { break; }
        libWCdr_gf_SetRaceTechForPlayer(lv_legendplayer);
        libWCdr_gf_SetLegendTechForPlayer(lv_legendplayer);
        libWCdr_gf_SetCoopCommanderTechForPlayer(lv_legendplayer);
    }
}

void libWCdr_gf_SetStartingUnitsForLegendPlayers () {
    // Variable Declarations
    int lv_startingPlayer;

    // Automatic Variable Declarations
    playergroup autoD5159E03_g;

    // Variable Initialization

    // Implementation
    autoD5159E03_g = libWCdr_gv_legends.lv_legendPlayers;
    lv_startingPlayer = -1;
    while (true) {
        lv_startingPlayer = PlayerGroupNextPlayer(autoD5159E03_g, lv_startingPlayer);
        if (lv_startingPlayer < 0) { break; }
        MeleeInitUnitsForPlayer(lv_startingPlayer, UserDataGetGameLink("PlayableLegends", libWCdr_gf_GetLegendInstanceForPlayer(lv_startingPlayer), "RaceStartingUnits", 1), PlayerStartLocation(lv_startingPlayer));
    }
}

void libWCdr_gf_SetGameplayOptionsForLegendPlayers () {
    // Variable Declarations
    int lv_player;
    int lv_i;
    int lv_startingResource;
    string lv_race;
    int lv_playerProp;

    // Automatic Variable Declarations
    playergroup auto338B02D0_g;
    const int auto94C4F556_ae = 3;
    const int auto94C4F556_ai = 1;
    unitgroup auto38C35668_g;
    int auto38C35668_u;
    unit auto38C35668_var;

    // Variable Initialization
    lv_playerProp = c_playerPropMinerals;

    // Implementation
    TriggerEnable(libWCdr_gt_BaseDestroyedDefeat, true);
    auto338B02D0_g = libWCdr_gf_GetLegendPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto338B02D0_g, lv_player);
        if (lv_player < 0) { break; }
        lv_race = UserDataGetGameLink("PlayableLegends", libWCdr_gf_GetLegendInstanceForPlayer(lv_player), "Race", 1);
        PlayerSetRace(lv_player, lv_race);
        lv_playerProp = c_playerPropMinerals;
        lv_i = 0;
        for ( ; ( (auto94C4F556_ai >= 0 && lv_i <= auto94C4F556_ae) || (auto94C4F556_ai < 0 && lv_i >= auto94C4F556_ae) ) ; lv_i += auto94C4F556_ai ) {
            lv_startingResource = CatalogFieldValueGetAsInt(c_gameCatalogRace, lv_race, "StartingResource[" + IntToString(lv_i) + "]", lv_player);
            PlayerModifyPropertyInt(lv_player, lv_playerProp, c_playerPropOperSetTo, lv_startingResource);
            lv_playerProp = lv_playerProp+1;
        }
        PlayerOptionOverride(lv_player, "selectuncontrolable", "1");
        PlayerOptionOverride(lv_player, "showcurrentordermodel", "0");
        MeleeSetOption(lv_player, c_meleeOptionXPGainDisable, false);
        auto38C35668_g = UnitGroupSearch(null, 15, PlayerStartLocation(lv_player), 10.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto38C35668_u = UnitGroupCount(auto38C35668_g, c_unitCountAll);
        for (;; auto38C35668_u -= 1) {
            auto38C35668_var = UnitGroupUnitFromEnd(auto38C35668_g, auto38C35668_u);
            if (auto38C35668_var == null) { break; }
            UnitRemove(auto38C35668_var);
        }
    }
}

void libWCdr_gf_OrderStartingUnitstoGettoWork () {
    // Variable Declarations
    int lv_player;
    unit lv_townHall;
    unit lv_closestGoldmine;
    unit lv_closestTree;
    unitgroup lv_peons;
    unitgroup lv_ghouls;
    unit lv_worker;
    point lv_creationOffset;
    point lv_placement;
    point lv_startingLocation;

    // Automatic Variable Declarations
    playergroup auto1CAFF08B_g;
    string auto03EB927C_val;
    unitgroup autoE06D96B7_g;
    int autoE06D96B7_u;

    // Variable Initialization
    lv_peons = UnitGroupEmpty();
    lv_ghouls = UnitGroupEmpty();

    // Implementation
    auto1CAFF08B_g = libWCdr_gv_legends.lv_legendPlayers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1CAFF08B_g, lv_player);
        if (lv_player < 0) { break; }
        lv_startingLocation = PlayerStartLocation(lv_player);
        lv_closestGoldmine = UnitGroupClosestToPoint(UnitGroupSearch("ngol", c_playerAny, lv_startingLocation, 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_startingLocation);
        lv_closestTree = UnitGroupClosestToPoint(UnitGroupSearch(null, c_playerAny, lv_startingLocation, 10.0, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), lv_startingLocation);
        lv_townHall = UnitGroupClosestToPoint(UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_startingLocation);
        auto03EB927C_val = UserDataGetGameLink("PlayableLegends", libWCdr_gv_legends.lv_player[lv_player].lv_selectedLegend, "Race", 1);
        if (auto03EB927C_val == "Human") {
            UnitBehaviorRemove(lv_townHall, "DisableCallToArms", 1);
        }
        else if (auto03EB927C_val == "NightElf") {
            UnitCreate(1, "egol", c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(lv_closestGoldmine), 270.0);
            lv_closestGoldmine = UnitLastCreated();
            UnitBehaviorAdd(lv_townHall, "AentUniqueSummon", lv_closestGoldmine, 1);
        }
        else if (auto03EB927C_val == "Undead") {
            UnitCreate(1, "ugol", c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(lv_closestGoldmine), 270.0);
            lv_closestGoldmine = UnitLastCreated();
        }
        else {
        }
        lv_ghouls = UnitGroupSearch("ugho", lv_player, lv_startingLocation, 10.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_peons = UnitGroupSearch(null, lv_player, lv_startingLocation, 10.0, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitIsValid(lv_closestGoldmine) == true)) {
            lv_creationOffset = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_townHall), 1.0, UnitGetPosition(lv_closestGoldmine));
            autoE06D96B7_g = lv_peons;
            autoE06D96B7_u = UnitGroupCount(autoE06D96B7_g, c_unitCountAll);
            for (;; autoE06D96B7_u -= 1) {
                lv_worker = UnitGroupUnitFromEnd(autoE06D96B7_g, autoE06D96B7_u);
                if (lv_worker == null) { break; }
                lv_placement = UnitTypePlacementFromPoint(UnitGetType(lv_worker), lv_player, lv_creationOffset, 10.0);
                UnitSetPosition(lv_worker, lv_placement, false);
            }
            UnitGroupIssueOrder(lv_peons, OrderTargetingUnit(null, lv_closestGoldmine), c_orderQueueReplace);
        }

        if ((UnitIsValid(lv_closestTree) == true)) {
            UnitGroupIssueOrder(lv_ghouls, OrderTargetingUnit(null, lv_closestTree), c_orderQueueReplace);
        }

        if ((UnitGetType(lv_townHall) != "unpl")) {
            UnitIssueOrder(lv_townHall, OrderTargetingUnit(null, lv_closestTree), c_orderQueueReplace);
        }

    }
}

void libWCdr_gf_RevealStartingBaseRegion () {
    // Variable Declarations
    int lv_legendplayer;
    region lv_baserevealregion;

    // Automatic Variable Declarations
    playergroup autoCE20A92F_g;

    // Variable Initialization
    lv_baserevealregion = RegionFromName("Base Reveal");

    // Implementation
    if ((lv_baserevealregion != null)) {
        autoCE20A92F_g = libWCdr_gf_GetLegendPlayers();
        lv_legendplayer = -1;
        while (true) {
            lv_legendplayer = PlayerGroupNextPlayer(autoCE20A92F_g, lv_legendplayer);
            if (lv_legendplayer < 0) { break; }
            VisRevealArea(lv_legendplayer, RegionFromName("Base Reveal"), 0.0, false);
        }
    }

}

void libWCdr_gf_RemoveStartingGoldMineIfNotUsed (unit lp_goldMineUnit, point lp_associatedStartingLocation) {
    // Variable Declarations
    int lv_legendplayer;
    bool lv_owningplayerfound;

    // Automatic Variable Declarations
    playergroup auto4DCC3BF0_g;

    // Variable Initialization

    // Implementation
    auto4DCC3BF0_g = libWCdr_gf_GetLegendPlayers();
    lv_legendplayer = -1;
    while (true) {
        lv_legendplayer = PlayerGroupNextPlayer(auto4DCC3BF0_g, lv_legendplayer);
        if (lv_legendplayer < 0) { break; }
        if ((lp_associatedStartingLocation == PlayerStartLocation(lv_legendplayer))) {
            lv_owningplayerfound = true;
            break;
        }

    }
    if ((lv_owningplayerfound == false)) {
        UnitRemove(lp_goldMineUnit);
    }

}

void libWCdr_gf_RemoveExtraExpansionGoldMines (unitgroup lp_expansionGoldMines) {
    // Variable Declarations
    int lv_numberoflegendplayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_numberoflegendplayers = PlayerGroupCount(libWCdr_gf_GetLegendPlayers());

    // Implementation
    while ((UnitGroupCount(lp_expansionGoldMines, c_unitCountAlive) > lv_numberoflegendplayers)) {
        UnitRemove(UnitGroupRandomUnit(lp_expansionGoldMines, c_unitCountAlive));
    }
}

void libWCdr_gf_DataCollectionApplyTech (string lp_dataCollection, int lp_player, bool lp_replaceButton) {
    // Variable Declarations
    string lv_from;
    string lv_to;
    string lv_itUpgrade;
    int lv_itIndex;

    // Automatic Variable Declarations
    string auto7E80F3C8_val;
    int autoC5B949D5_ae;
    const int autoC5B949D5_ai = 1;
    int auto50853CB1_ae;
    const int auto50853CB1_ai = 1;

    // Variable Initialization
    lv_from = "";
    lv_to = "";
    lv_itUpgrade = "";

    // Implementation
    auto7E80F3C8_val = CatalogEntryScope(c_gameCatalogDataCollection, lp_dataCollection);
    if (auto7E80F3C8_val == "CDataCollectionUnit") {
        lv_from = CatalogFieldValueGet(c_gameCatalogDataCollection, lp_dataCollection, "TechInfoUnitReplaced", lp_player);
        lv_to = CatalogFieldValueGet(c_gameCatalogDataCollection, lp_dataCollection, "TechInfoUnit", lp_player);
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_from) == true)) {
            TechTreeUnitAllow(lp_player, (lv_from), true);
            CatalogLinkReplace(lp_player, c_gameCatalogUnit, lv_from, lv_to);
        }
        else {
            TechTreeUnitAllow(lp_player, (lv_to), true);
        }
        autoC5B949D5_ae = (CatalogFieldValueCount(c_gameCatalogDataCollection, lp_dataCollection, "TechInfoUpgradeUsed", lp_player) - 1);
        lv_itIndex = 0;
        for ( ; ( (autoC5B949D5_ai >= 0 && lv_itIndex <= autoC5B949D5_ae) || (autoC5B949D5_ai < 0 && lv_itIndex >= autoC5B949D5_ae) ) ; lv_itIndex += autoC5B949D5_ai ) {
            lv_itUpgrade = CatalogFieldValueGet(c_gameCatalogDataCollection, lp_dataCollection, "TechInfoUpgradeUsed[" + IntToString(lv_itIndex) + "]", lp_player);
            libWCdr_gf_DataCollectionApplyTech((CatalogFieldValueGet(c_gameCatalogUpgrade, lv_itUpgrade, "DataCollection", lp_player)), lp_player, lp_replaceButton);
        }
    }
    else if (auto7E80F3C8_val == "CDataCollectionUpgrade") {
        lv_from = CatalogFieldValueGet(c_gameCatalogDataCollection, lp_dataCollection, "TechInfoUpgradeReplaced", lp_player);
        lv_to = CatalogFieldValueGet(c_gameCatalogDataCollection, lp_dataCollection, "TechInfoUpgrade", lp_player);
        if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lv_from) == true)) {
            CatalogLinkReplace(lp_player, c_gameCatalogAbil, lv_from, lv_to);
            auto50853CB1_ae = (CatalogFieldValueGetAsInt(c_gameCatalogUpgrade, lp_dataCollection, "MaxLevel", c_playerAny)-1);
            lv_itIndex = 0;
            for ( ; ( (auto50853CB1_ai >= 0 && lv_itIndex <= auto50853CB1_ae) || (auto50853CB1_ai < 0 && lv_itIndex >= auto50853CB1_ae) ) ; lv_itIndex += auto50853CB1_ai ) {
                TechTreeAbilityAllow(lp_player, AbilityCommand((lv_to), lv_itIndex), true);
            }
        }
        else {
            TechTreeUpgradeAllow(lp_player, (lv_to), true);
        }
    }
    else if (auto7E80F3C8_val == "CDataCollectionAbil") {
        lv_from = CatalogFieldValueGet(c_gameCatalogDataCollection, lp_dataCollection, "TechInfoAbilReplaced", lp_player);
        lv_to = CatalogFieldValueGet(c_gameCatalogDataCollection, lp_dataCollection, "TechInfoAbil", lp_player);
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_from) == true)) {
            CatalogLinkReplace(lp_player, c_gameCatalogAbil, lv_from, lv_to);
        }

    }
    else {
        return ;
    }
    if ((lp_replaceButton == true) && (CatalogEntryIsValid(c_gameCatalogButton, lv_from) == true)) {
        CatalogLinkReplace(lp_player, c_gameCatalogButton, lv_from, lv_to);
    }

}

void libWCdr_gf_SendTransmissiontoPlayerGroup (playergroup lp_listeningPlayers, string lp_conversationState, int lp_conversationStateIndex, string lp_conversation) {
    // Variable Declarations
    int lv_skip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_skip = c_conversationSkipNone;

    // Implementation
    if ((GameIsTestMap(false) == true)) {
        lv_skip = c_conversationSkipFull;
    }

    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, lp_listeningPlayers, 1.0);
    ConversationDataStateSetValue(lp_conversationState, lp_conversationStateIndex);
    ConversationDataRun(lp_conversation, lp_listeningPlayers, lv_skip, true);
    ConversationDataStateSetValue(lp_conversationState, 0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_listeningPlayers, 1.0);
}

text libWCdr_gf_MissionObjectiveDescription (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Description", c_playerAny));
}

text libWCdr_gf_MissionObjectiveName (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Name", c_playerAny));
}

int libWCdr_gf_MissionObjectiveItemCount (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "RequiredCount", c_playerAny);
}

void libWCdr_gf_DisableCostsforPlayerGroup (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoA4692585_g;

    // Variable Initialization

    // Implementation
    autoA4692585_g = lp_playerGroup;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoA4692585_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerModifyPropertyFixed(lv_player, c_playerPropSuppliesMade, c_playerPropOperSetTo, 1000.0);
        PlayerModifyPropertyFixed(lv_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000.0);
        PlayerSetState(lv_player, c_playerStateTerrazineCostIgnored, true);
        PlayerSetState(lv_player, c_playerStateCustomCostIgnored, true);
    }
}

void libWCdr_gf_SetDifficultyLevel (int lp_difficultyLevel) {
    // Variable Declarations
    playergroup lv_handicappedplayers;
    int lv_enemy;
    string lv_difficultylevelrangeinstance;
    int lv_difficultylevel;
    fixed lv_damagemultiplier;
    fixed lv_healthmultiplier;

    // Automatic Variable Declarations
    playergroup auto508DC790_g;

    // Variable Initialization
    lv_handicappedplayers = PlayerGroupEmpty();
    lv_difficultylevelrangeinstance = libWCdr_gf_GetDifficultyLevelRangeInstance();
    lv_difficultylevel = libNtve_gf_ArithmeticIntClamp(lp_difficultyLevel, UserDataGetInt("LegionDifficultyScaling", lv_difficultylevelrangeinstance, "MinLevel", 1), UserDataGetInt("LegionDifficultyScaling", lv_difficultylevelrangeinstance, "MaxLevel", 1));
    lv_damagemultiplier = libWCdr_gf_GetDifficultyMultiplier("EnemyDamageMultiplier", lv_difficultylevel);
    lv_healthmultiplier = libWCdr_gf_GetDifficultyMultiplier("EnemyHPMultiplier", lv_difficultylevel);

    // Implementation
    libWCdr_gv_legends.lv_difficultyLevel = lv_difficultylevel;
    libWCdr_gv_bucketSizeMultiplier = (libWCdr_gf_GetDifficultyMultiplier("BucketMultiplier", lv_difficultylevel) + 1.0);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libWCdr_gv_legends.lv_enemyPlayers, lv_handicappedplayers);
    PlayerGroupAdd(lv_handicappedplayers, 0);
    PlayerGroupAdd(lv_handicappedplayers, 15);
    auto508DC790_g = lv_handicappedplayers;
    lv_enemy = -1;
    while (true) {
        lv_enemy = PlayerGroupNextPlayer(auto508DC790_g, lv_enemy);
        if (lv_enemy < 0) { break; }
        PlayerModifyPropertyInt(lv_enemy, c_playerPropHandicap, c_playerPropOperSetTo, RoundI(((lv_healthmultiplier + 1.0) * libWCdr_gv_legends.lv_playerCountHandicap * 100.0)));
        PlayerModifyPropertyInt(lv_enemy, c_playerPropDamageDealtPercent, c_playerPropOperSetTo, RoundI(((lv_damagemultiplier + 1.0) * 100.0)));
    }
    libWCdr_gf_UpdateDebugDifficultySetting(lv_difficultylevel);
}

void libWCdr_gf_SetEnemyPlayerHandicap () {
    // Variable Declarations
    int lv_handicap;
    int lv_enemy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_handicap = libWCdr_gf_GetPlayerCountHandicap();

    // Implementation
    libWCdr_gv_legends.lv_playerCountHandicap = (IntToFixed(libWCdr_gf_GetPlayerCountHandicap()) / 100.0);
}

bool libWCdr_gf_DifficultyScalingAppliestoCurrentGameMode (string lp_difficultyScalingInstance) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetUserInstance("LegionDifficultyScaling", lp_difficultyScalingInstance, "GameMode", 1) == libWCdr_gv_legends.lv_gameMode);
}

bool libWCdr_gf_DifficultyPresetAppliestoCurrentGameMode (string lp_difficultyScalingInstance) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetUserInstance("LegionDifficultyPresets", lp_difficultyScalingInstance, "GameMode", 1) == libWCdr_gv_legends.lv_gameMode);
}

string libWCdr_gf_GetDifficultyLevelRangeInstance () {
    // Variable Declarations
    string lv_usertype;
    string lv_instance;

    // Automatic Variable Declarations
    string auto94712DDB_userType;
    int auto94712DDB_i;

    // Variable Initialization
    lv_usertype = "LegionDifficultyScaling";

    // Implementation
    auto94712DDB_userType = lv_usertype;
    auto94712DDB_i = 1;
    for ( ; auto94712DDB_i <= UserDataInstanceCount(auto94712DDB_userType) ; auto94712DDB_i += 1 ) {
        lv_instance = UserDataInstance(auto94712DDB_userType, auto94712DDB_i);
        if ((libWCdr_gf_DifficultyScalingAppliestoCurrentGameMode(lv_instance) == true)) {
            return lv_instance;
        }

    }
    return "LevelRange";
}

fixed libWCdr_gf_GetDifficultyMultiplier (string lp_difficultyType, int lp_difficultyLevel) {
    // Variable Declarations
    string lv_difficultyscalinginstance;
    int lv_difficultyscalingminlevel;
    int lv_difficultyscalingmaxlevel;
    fixed lv_difficultyscalingvalue;
    fixed lv_totalmultiplier;

    // Automatic Variable Declarations
    string auto38882F29_userType;
    int auto38882F29_i;

    // Variable Initialization

    // Implementation
    auto38882F29_userType = "LegionDifficultyScaling";
    auto38882F29_i = 1;
    for ( ; auto38882F29_i <= UserDataInstanceCount(auto38882F29_userType) ; auto38882F29_i += 1 ) {
        lv_difficultyscalinginstance = UserDataInstance(auto38882F29_userType, auto38882F29_i);
        lv_difficultyscalingminlevel = UserDataGetInt("LegionDifficultyScaling", lv_difficultyscalinginstance, "MinLevel", 1);
        lv_difficultyscalingmaxlevel = UserDataGetInt("LegionDifficultyScaling", lv_difficultyscalinginstance, "MaxLevel", 1);
        lv_difficultyscalingvalue = UserDataGetFixed("LegionDifficultyScaling", lv_difficultyscalinginstance, "Value", 1);
        if ((UserDataGetUserInstance("LegionDifficultyScaling", lv_difficultyscalinginstance, "Modifier", 1) == lp_difficultyType) && (libWCdr_gf_DifficultyScalingAppliestoCurrentGameMode(lv_difficultyscalinginstance) == true) && (lp_difficultyLevel >= lv_difficultyscalingminlevel)) {
            lv_totalmultiplier += ((MinI(lp_difficultyLevel, lv_difficultyscalingmaxlevel) - lv_difficultyscalingminlevel + 1) * lv_difficultyscalingvalue);
        }

    }
    return lv_totalmultiplier;
}

fixed libWCdr_gf_GetDifficultySum (string lp_difficultyType, int lp_difficultyLevel) {
    // Variable Declarations
    string lv_difficultyscalinginstance;
    int lv_difficultyscalingminlevel;
    int lv_difficultyscalingmaxlevel;
    int lv_difficultyscalingvalue;
    int lv_sum;

    // Automatic Variable Declarations
    string auto32230582_userType;
    int auto32230582_i;

    // Variable Initialization

    // Implementation
    auto32230582_userType = "LegionDifficultyScaling";
    auto32230582_i = 1;
    for ( ; auto32230582_i <= UserDataInstanceCount(auto32230582_userType) ; auto32230582_i += 1 ) {
        lv_difficultyscalinginstance = UserDataInstance(auto32230582_userType, auto32230582_i);
        lv_difficultyscalingminlevel = UserDataGetInt("LegionDifficultyScaling", lv_difficultyscalinginstance, "MinLevel", 1);
        lv_difficultyscalingmaxlevel = UserDataGetInt("LegionDifficultyScaling", lv_difficultyscalinginstance, "MaxLevel", 1);
        lv_difficultyscalingvalue = RoundI(UserDataGetFixed("LegionDifficultyScaling", lv_difficultyscalinginstance, "Value", 1));
        if ((UserDataGetUserInstance("LegionDifficultyScaling", lv_difficultyscalinginstance, "Modifier", 1) == lp_difficultyType) && (libWCdr_gf_DifficultyScalingAppliestoCurrentGameMode(lv_difficultyscalinginstance) == true) && (lp_difficultyLevel >= lv_difficultyscalingminlevel) && (lp_difficultyLevel <= lv_difficultyscalingmaxlevel)) {
            lv_sum += lv_difficultyscalingvalue;
            PlayerModifyPropertyFixed(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200.0);
        }

    }
    return lv_sum;
}

int libWCdr_gf_GetPlayerCountHandicap () {
    // Variable Declarations
    int lv_minlevel;
    int lv_maxlevel;
    int lv_currentlevel;
    fixed lv_scalingperlevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minlevel = UserDataGetInt("LegionDifficultyScaling", "PlayerHandicap", "MinLevel", 1);
    lv_maxlevel = UserDataGetInt("LegionDifficultyScaling", "PlayerHandicap", "MaxLevel", 1);
    lv_currentlevel = libNtve_gf_ArithmeticIntClamp(PlayerGroupCount(libWCdr_gf_GetLegendPlayers()), lv_minlevel, lv_maxlevel);
    lv_scalingperlevel = UserDataGetFixed("LegionDifficultyScaling", "PlayerHandicap", "Value", 1);

    // Implementation
    return (lv_currentlevel * RoundI((lv_scalingperlevel * 100.0)));
}

string libWCdr_gf_GetPresetNameofDifficultyLevel (int lp_difficultyLevel) {
    // Variable Declarations
    string lv_difficultypresetinstance;
    string lv_bestname;
    int lv_bestdifference;
    int lv_currentdifference;

    // Automatic Variable Declarations
    string auto5564CCB4_userType;
    int auto5564CCB4_i;

    // Variable Initialization
    lv_bestname = "";
    lv_bestdifference = -1;

    // Implementation
    auto5564CCB4_userType = "LegionDifficultyPresets";
    auto5564CCB4_i = 1;
    for ( ; auto5564CCB4_i <= UserDataInstanceCount(auto5564CCB4_userType) ; auto5564CCB4_i += 1 ) {
        lv_difficultypresetinstance = UserDataInstance(auto5564CCB4_userType, auto5564CCB4_i);
        lv_currentdifference = (lp_difficultyLevel - UserDataGetInt("LegionDifficultyPresets", lv_difficultypresetinstance, "DifficultyLevel", 1));
        if ((libWCdr_gf_DifficultyPresetAppliestoCurrentGameMode(lv_difficultypresetinstance) == true) && ((((lv_currentdifference >= 0) && (lv_currentdifference <= lv_bestdifference)) == true) || ((lv_bestdifference == -1) && (lv_currentdifference >= 0)))) {
            lv_bestdifference = lv_currentdifference;
            lv_bestname = UserDataGetString("LegionDifficultyPresets", lv_difficultypresetinstance, "Name", 1);
        }

    }
    return lv_bestname;
}

int libWCdr_gf_GetDifficultyLevel () {
    // Automatic Variable Declarations
    // Implementation
    return libWCdr_gv_legends.lv_difficultyLevel;
}

void libWCdr_gf_EnableWaveLogicforPlayerGroup (playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoBC7BEAAC_g;

    // Variable Initialization

    // Implementation
    autoBC7BEAAC_g = lp_playerGroup;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoBC7BEAAC_g, lv_player);
        if (lv_player < 0) { break; }
        AISetDifficulty(lv_player, c_diffWaveLeashing, true);
        AISetDifficulty(lv_player, c_diffFleeDanger, true);
        AISetDifficulty(lv_player, c_diffPressForward, true);
    }
}

string libWCdr_gf_PickPotentialUnitForWave (string lp_wave, int lp_budget, int lp_difficultyLevel) {
    // Variable Declarations
    int lv_waveunitindex;
    string lv_waveunittype;
    int lv_waveunitweight;
    int lv_totalwaveweight;
    int lv_targetwaveweight;

    // Automatic Variable Declarations
    int auto7AF0E6AE_ae;
    const int auto7AF0E6AE_ai = 1;
    int auto73BD3D6C_ae;
    const int auto73BD3D6C_ai = 1;

    // Variable Initialization

    // Implementation
    auto7AF0E6AE_ae = UserDataFieldValueCount("LegionWaves", "UnitTypes");
    lv_waveunitindex = 1;
    for ( ; ( (auto7AF0E6AE_ai >= 0 && lv_waveunitindex <= auto7AF0E6AE_ae) || (auto7AF0E6AE_ai < 0 && lv_waveunitindex >= auto7AF0E6AE_ae) ) ; lv_waveunitindex += auto7AF0E6AE_ai ) {
        lv_waveunittype = UserDataGetUnit("LegionWaves", lp_wave, "UnitTypes", lv_waveunitindex);
        lv_waveunitweight = UserDataGetInt("LegionWaves", lp_wave, "UnitWeights", lv_waveunitindex);
        if ((lv_waveunittype != null) && (lv_waveunittype != "") && (lv_waveunitweight > 0) && ((libWCdr_gf_GetCostofUnitInWave(lp_wave, lv_waveunitindex) >= 0) && (libWCdr_gf_GetCostofUnitInWave(lp_wave, lv_waveunitindex) <= (lp_budget * 2)))) {
            lv_totalwaveweight += lv_waveunitweight;
        }

    }
    lv_targetwaveweight = RandomInt(1, lv_totalwaveweight);
    auto73BD3D6C_ae = UserDataFieldValueCount("LegionWaves", "UnitTypes");
    lv_waveunitindex = 1;
    for ( ; ( (auto73BD3D6C_ai >= 0 && lv_waveunitindex <= auto73BD3D6C_ae) || (auto73BD3D6C_ai < 0 && lv_waveunitindex >= auto73BD3D6C_ae) ) ; lv_waveunitindex += auto73BD3D6C_ai ) {
        lv_waveunittype = UserDataGetUnit("LegionWaves", lp_wave, "UnitTypes", lv_waveunitindex);
        lv_waveunitweight = UserDataGetInt("LegionWaves", lp_wave, "UnitWeights", lv_waveunitindex);
        if ((lv_waveunittype != null) && (lv_waveunittype != "") && (lv_waveunitweight > 0) && ((libWCdr_gf_GetCostofUnitInWave(lp_wave, lv_waveunitindex) >= 0) && (libWCdr_gf_GetCostofUnitInWave(lp_wave, lv_waveunitindex) <= (lp_budget * 2)))) {
            if ((lv_targetwaveweight <= lv_waveunitweight)) {
                libWCdr_gv_lastPickedWaveUnitCost = libWCdr_gf_GetCostofUnitInWave(lp_wave, lv_waveunitindex);
                return lv_waveunittype;
            }
            else {
                lv_targetwaveweight -= lv_waveunitweight;
            }
        }

    }
    libWCdr_gv_lastPickedWaveUnitCost = 0;
    return null;
}

string libWCdr_gf_PickWaveByArmyandTier (string lp_army, int lp_techTier) {
    // Variable Declarations
    string lv_waveinstance;
    int lv_wavetechlevel;
    int lv_currentbesttechlevel;
    int lv_numberofwaveoptionsattechlevel;
    string[libWCdr_gv_mAX_WAVES_PER_TECH_TIER + 1] lv_potentialwaves;

    // Automatic Variable Declarations
    string auto51E6C0CF_userType;
    int auto51E6C0CF_i;

    // Variable Initialization

    // Implementation
    auto51E6C0CF_userType = "LegionWaves";
    auto51E6C0CF_i = 1;
    for ( ; auto51E6C0CF_i <= UserDataInstanceCount(auto51E6C0CF_userType) ; auto51E6C0CF_i += 1 ) {
        lv_waveinstance = UserDataInstance(auto51E6C0CF_userType, auto51E6C0CF_i);
        lv_wavetechlevel = UserDataGetInt("LegionWaves", lv_waveinstance, "TechLevel", 1);
        if ((UserDataGetUserInstance("LegionWaves", lv_waveinstance, "Army", 1) == lp_army) && (lv_wavetechlevel <= lp_techTier) && (lv_wavetechlevel > lv_currentbesttechlevel)) {
            lv_currentbesttechlevel = lv_wavetechlevel;
            lv_potentialwaves[0] = lv_waveinstance;
            lv_numberofwaveoptionsattechlevel = 1;
        }
        else if ((lv_numberofwaveoptionsattechlevel < libWCdr_gv_mAX_WAVES_PER_TECH_TIER) && (UserDataGetUserInstance("LegionWaves", lv_waveinstance, "Army", 1) == lp_army) && (lv_wavetechlevel <= lp_techTier) && (lv_wavetechlevel == lv_currentbesttechlevel)) {
            lv_potentialwaves[lv_numberofwaveoptionsattechlevel] = lv_waveinstance;
            lv_numberofwaveoptionsattechlevel += 1;
        }
    }
    if ((lv_numberofwaveoptionsattechlevel > 0)) {
        return lv_potentialwaves[RandomInt(0, (lv_numberofwaveoptionsattechlevel - 1))];
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_WCdr_D5104E75") + StringToText((lp_army)) + StringExternal("Param/Value/lib_WCdr_D21E3CE4") + IntToText(lp_techTier)), true);
    return "BurningLegionTier1a";
}

int libWCdr_gf_GetCostofUnitInWave (string lp_wave, int lp_unitIndex) {
    // Variable Declarations
    string lv_unittype;
    int lv_overridevalue;
    int lv_xpvalue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unittype = UserDataGetUnit("LegionWaves", lp_wave, "UnitTypes", lp_unitIndex);
    lv_overridevalue = UserDataGetInt("LegionWaves", lp_wave, "UnitValueOverrides", lp_unitIndex);
    lv_xpvalue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unittype, "KillXP", c_playerAny);

    // Implementation
    if ((lv_overridevalue > 0)) {
        return lv_overridevalue;
    }
    else if ((lv_xpvalue > 0)) {
        return lv_xpvalue;
    }
    TriggerDebugOutput(1, (UnitTypeGetName(lv_unittype) + StringExternal("Param/Value/lib_WCdr_F5FE6910") + StringToText((lp_wave)) + StringExternal("Param/Value/lib_WCdr_54EB9FE1")), true);
    return 1;
}

int libWCdr_gf_NextAttackWaveIndex () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = libWCdr_gv_nextAttackWaveIndex;
    libWCdr_gv_nextAttackWaveIndex += 1;
    return lv_index;
}

unitgroup libWCdr_gf_CreateEnemyWave (int lp_controllingPlayer, point lp_spawnLocation, string lp_bucketSize, int lp_difficultyLevel, string lp_army, int lp_techTier) {
    // Variable Declarations
    unitgroup lv_waveunits;
    string lv_pickedwave;
    string lv_pickedwaveunit;
    int lv_remainingbudget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveunits = UnitGroupEmpty();
    lv_pickedwave = libWCdr_gf_PickWaveByArmyandTier(lp_army, lp_techTier);
    lv_remainingbudget = FixedToInt((IntToFixed(UserDataGetInt("LegionBucketSizes", lp_bucketSize, "BudgetBase", 1)) * libWCdr_gv_bucketSizeMultiplier));

    // Implementation
    do {
        lv_pickedwaveunit = libWCdr_gf_PickPotentialUnitForWave(lv_pickedwave, lv_remainingbudget, lp_difficultyLevel);
        if ((lv_pickedwaveunit != null)) {
            lv_remainingbudget -= libWCdr_gv_lastPickedWaveUnitCost;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_pickedwaveunit, 0, lp_controllingPlayer, lp_spawnLocation);
            UnitGroupAdd(lv_waveunits, UnitLastCreated());
            libNtve_gf_CreateActorAtPoint("RemoveUnitTeleportVisual", UnitGetPosition(UnitLastCreated()));
        }

    }while ((lv_remainingbudget > 0) && (lv_pickedwaveunit != null));
    return lv_waveunits;
}

trigger auto_libWCdr_gf_SendEnemyWave_Trigger = null;
int auto_libWCdr_gf_SendEnemyWave_lp_attackingPlayer;
unitgroup auto_libWCdr_gf_SendEnemyWave_lp_attackWave;
wavetarget auto_libWCdr_gf_SendEnemyWave_lp_attackTarget;
int auto_libWCdr_gf_SendEnemyWave_lp_delay;

void libWCdr_gf_SendEnemyWave (int lp_attackingPlayer, unitgroup lp_attackWave, wavetarget lp_attackTarget, int lp_delay) {
    auto_libWCdr_gf_SendEnemyWave_lp_attackingPlayer = lp_attackingPlayer;
    auto_libWCdr_gf_SendEnemyWave_lp_attackWave = lp_attackWave;
    auto_libWCdr_gf_SendEnemyWave_lp_attackTarget = lp_attackTarget;
    auto_libWCdr_gf_SendEnemyWave_lp_delay = lp_delay;

    if (auto_libWCdr_gf_SendEnemyWave_Trigger == null) {
        auto_libWCdr_gf_SendEnemyWave_Trigger = TriggerCreate("auto_libWCdr_gf_SendEnemyWave_TriggerFunc");
    }

    TriggerExecute(auto_libWCdr_gf_SendEnemyWave_Trigger, false, false);
}

bool auto_libWCdr_gf_SendEnemyWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_attackingPlayer = auto_libWCdr_gf_SendEnemyWave_lp_attackingPlayer;
    unitgroup lp_attackWave = auto_libWCdr_gf_SendEnemyWave_lp_attackWave;
    wavetarget lp_attackTarget = auto_libWCdr_gf_SendEnemyWave_lp_attackTarget;
    int lp_delay = auto_libWCdr_gf_SendEnemyWave_lp_delay;

    // Variable Declarations
    point lv_gatherpoint;
    int lv_attackwaveindex;
    int lv_attackwavetarget;
    wave lv_enemywave;

    // Automatic Variable Declarations
    unitgroup auto36E4A908_g;
    int auto36E4A908_u;
    unit auto36E4A908_var;

    // Variable Initialization
    lv_gatherpoint = UnitGroupCenterOfGroup(lp_attackWave);
    lv_attackwaveindex = libWCdr_gf_NextAttackWaveIndex();

    // Implementation
    libWCdr_gv_lastSentEnemyWave = AIWaveCreate(AIWaveInfoCreate(), lp_attackingPlayer, lv_gatherpoint);
    lv_enemywave = libWCdr_gv_lastSentEnemyWave;
    AIWaveSet(lp_attackingPlayer, lv_attackwaveindex, lv_enemywave);
    auto36E4A908_g = lp_attackWave;
    auto36E4A908_u = UnitGroupCount(auto36E4A908_g, c_unitCountAll);
    for (;; auto36E4A908_u -= 1) {
        auto36E4A908_var = UnitGroupUnitFromEnd(auto36E4A908_g, auto36E4A908_u);
        if (auto36E4A908_var == null) { break; }
        AISetUnitScriptControlled(auto36E4A908_var, false);
        AIWaveAddUnit(lv_enemywave, auto36E4A908_var);
    }
    AIWaveSetType(lv_enemywave, c_waveAttack, lp_attackTarget);
    return true;
}

wave libWCdr_gf_GetLastSentEnemyWave () {
    // Automatic Variable Declarations
    // Implementation
    return libWCdr_gv_lastSentEnemyWave;
}

trigger auto_libWCdr_gf_AttachPingtoEnemyWave_Trigger = null;
wave auto_libWCdr_gf_AttachPingtoEnemyWave_lp_wave;
string auto_libWCdr_gf_AttachPingtoEnemyWave_lp_pingModel;
fixed auto_libWCdr_gf_AttachPingtoEnemyWave_lp_scale;
color auto_libWCdr_gf_AttachPingtoEnemyWave_lp_color;

void libWCdr_gf_AttachPingtoEnemyWave (wave lp_wave, string lp_pingModel, fixed lp_scale, color lp_color) {
    auto_libWCdr_gf_AttachPingtoEnemyWave_lp_wave = lp_wave;
    auto_libWCdr_gf_AttachPingtoEnemyWave_lp_pingModel = lp_pingModel;
    auto_libWCdr_gf_AttachPingtoEnemyWave_lp_scale = lp_scale;
    auto_libWCdr_gf_AttachPingtoEnemyWave_lp_color = lp_color;

    if (auto_libWCdr_gf_AttachPingtoEnemyWave_Trigger == null) {
        auto_libWCdr_gf_AttachPingtoEnemyWave_Trigger = TriggerCreate("auto_libWCdr_gf_AttachPingtoEnemyWave_TriggerFunc");
    }

    TriggerExecute(auto_libWCdr_gf_AttachPingtoEnemyWave_Trigger, false, false);
}

bool auto_libWCdr_gf_AttachPingtoEnemyWave_TriggerFunc (bool testConds, bool runActions) {
    wave lp_wave = auto_libWCdr_gf_AttachPingtoEnemyWave_lp_wave;
    string lp_pingModel = auto_libWCdr_gf_AttachPingtoEnemyWave_lp_pingModel;
    fixed lp_scale = auto_libWCdr_gf_AttachPingtoEnemyWave_lp_scale;
    color lp_color = auto_libWCdr_gf_AttachPingtoEnemyWave_lp_color;

    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    if ((AIWaveUnitCount(lp_wave) == 0)) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lp_pingModel, UnitGroupCenterOfGroup(AIWaveGetUnits(lp_wave)), lp_color, 0.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetScale(lv_ping, lp_scale);
    while ((AIWaveUnitCount(lp_wave) > 0)) {
        PingSetPosition(lv_ping, UnitGroupCenterOfGroup(AIWaveGetUnits(lp_wave)));
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_ping);
    return true;
}

void libWCdr_gf_SetTransportReturnLocationforPlayerGroup (playergroup lp_playerGroup, point lp_returnLocation) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto7D93E065_g;

    // Variable Initialization

    // Implementation
    auto7D93E065_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto7D93E065_g, lv_player);
        if (lv_player < 0) { break; }
        AITransportSetReturn(lv_player, lp_returnLocation);
    }
}

void libWCdr_gf_RemoveUnitsFromtheMap (unitgroup lp_unitstoRemove, string lp_actorVisual) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto9142E92C_g;
    int auto9142E92C_u;

    // Variable Initialization

    // Implementation
    auto9142E92C_g = lp_unitstoRemove;
    auto9142E92C_u = UnitGroupCount(auto9142E92C_g, c_unitCountAll);
    for (;; auto9142E92C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto9142E92C_g, auto9142E92C_u);
        if (lv_unit == null) { break; }
        if ((lp_actorVisual != null)) {
            libNtve_gf_CreateActorAtPoint(lp_actorVisual, UnitGetPosition(lv_unit));
        }

        UnitRemove(lv_unit);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Chat Cheat Listener
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_ChatCheatListener_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_chatstring;
    int lv_chatstringlength;
    string lv_chatcheatstring;
    string lv_nextword;
    int lv_numberofparameters;
    string lv_eventname;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chatstring = StringCase(EventChatMessage(false), false);
    lv_chatstringlength = StringLength(lv_chatstring);
    lv_chatcheatstring = "";
    lv_nextword = "";
    lv_eventname = "";

    // Conditions
    if (testConds) {
        if (!((lv_chatstringlength > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chatcheatstring = libWCdr_gf_GetNextWord(lv_chatstring, " ");
    if (((lv_chatcheatstring == null) || (lv_chatcheatstring == ""))) {
        return true;
    }

    lv_chatstring = libWCdr_gf_CliptoWord(lv_chatstring, lv_chatcheatstring);
    lv_chatstringlength = StringLength(lv_chatstring);
    lv_eventname = ("Event_ChatCheat_" + lv_chatcheatstring);
    while (true) {
        lv_nextword = libWCdr_gf_GetNextWord(lv_chatstring, " ");
        if ((lv_nextword != null) && (lv_nextword != "")) {
            lv_chatstring = libWCdr_gf_CliptoWord(lv_chatstring, lv_nextword);
            lv_chatstringlength = StringLength(lv_chatstring);
            lv_numberofparameters += 1;
            DataTableSetString(false, TriggerEventParamName(lv_eventname, ("Param" + IntToString(lv_numberofparameters))), lv_nextword);
        }
        else {
            break;
        }
    }
    DataTableSetInt(false, TriggerEventParamName(lv_eventname, "Player"), EventPlayer());
    DataTableSetString(false, TriggerEventParamName(lv_eventname, "Cheat"), lv_chatcheatstring);
    DataTableSetInt(false, TriggerEventParamName(lv_eventname, "ParamCount"), lv_numberofparameters);
    TriggerSendEvent(lv_eventname);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_ChatCheatListener_Init () {
    libWCdr_gt_ChatCheatListener = TriggerCreate("libWCdr_gt_ChatCheatListener_Func");
    TriggerEnable(libWCdr_gt_ChatCheatListener, false);
    TriggerAddEventChatMessage(libWCdr_gt_ChatCheatListener, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Portrait Camera and Team Color Fix
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_InitializePortraitCameraandTeamColorFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto187B1612_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto187B1612_g = PlayerGroupActive();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto187B1612_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_SetDialogItemTeamColor(libWCdr_gv_gameUI.lv_hero_Portrait, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemCamera(libWCdr_gv_gameUI.lv_hero_Portrait, "Camera01", PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_InitializePortraitCameraandTeamColorFix_Init () {
    libWCdr_gt_InitializePortraitCameraandTeamColorFix = TriggerCreate("libWCdr_gt_InitializePortraitCameraandTeamColorFix_Func");
    TriggerEnable(libWCdr_gt_InitializePortraitCameraandTeamColorFix, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Disable Inventory Tech
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_InitializeDisableInventoryTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoE3FF5C12_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE3FF5C12_g = PlayerGroupActive();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE3FF5C12_g, lv_player);
        if (lv_player < 0) { break; }
        TechTreeUpgradeAllow(lv_player, "Rhpm", false);
        TechTreeUpgradeAllow(lv_player, "Rupm", false);
        TechTreeUpgradeAllow(lv_player, "Repm", false);
        TechTreeUpgradeAllow(lv_player, "Ropm", false);
        TechTreeAbilityAllow(lv_player, AbilityCommand("Ropm", 0), false);
        TechTreeAbilityAllow(lv_player, AbilityCommand("Rupm", 0), false);
        TechTreeAbilityAllow(lv_player, AbilityCommand("Repm", 0), false);
        TechTreeAbilityAllow(lv_player, AbilityCommand("Rhpm", 0), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_InitializeDisableInventoryTech_Init () {
    libWCdr_gt_InitializeDisableInventoryTech = TriggerCreate("libWCdr_gt_InitializeDisableInventoryTech_Func");
    TriggerEnable(libWCdr_gt_InitializeDisableInventoryTech, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Select Button Clicked
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_HeroSelectButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentIndex;
    int lv_lastLegendIndex;

    // Automatic Variable Declarations
    int auto7BD598B6_ae;
    const int auto7BD598B6_ai = 1;

    // Variable Initialization
    lv_lastLegendIndex = (libWCdr_gv_dEBUG_HERO_SELECT_MAX_LEGENDS - 1);

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libWCdr_gv_legends.lv_legendPlayers, EventPlayer()) == true))) {
            return false;
        }

        if (!((libWCdr_gv_debugHeroSelectUI.lv_playerIsReady[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7BD598B6_ae = lv_lastLegendIndex;
    lv_currentIndex = 0;
    for ( ; ( (auto7BD598B6_ai >= 0 && lv_currentIndex <= auto7BD598B6_ae) || (auto7BD598B6_ai < 0 && lv_currentIndex >= auto7BD598B6_ae) ) ; lv_currentIndex += auto7BD598B6_ai ) {
        if ((EventDialogControl() == libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button)) {
            libWCdr_gf_DebugSetSelectedHeroForPlayer(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_legendInstance, EventPlayer());
            libWCdr_gf_UpdateDebugFriendHeroSelections();
            libWCdr_gf_W3CBankStoreLastPlayedCommander(EventPlayer());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_HeroSelectButtonClicked_Init () {
    libWCdr_gt_HeroSelectButtonClicked = TriggerCreate("libWCdr_gt_HeroSelectButtonClicked_Func");
    TriggerEnable(libWCdr_gt_HeroSelectButtonClicked, false);
    TriggerAddEventDialogControl(libWCdr_gt_HeroSelectButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ready Button Clicked
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_ReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentIndex;
    int lv_lastLegendIndex;
    bool lv_enableDisable;
    playergroup lv_singlePlayerGroup;
    soundlink lv_readySound;

    // Automatic Variable Declarations
    int autoAA990CE1_ae;
    const int autoAA990CE1_ai = 1;

    // Variable Initialization
    lv_lastLegendIndex = (libWCdr_gv_dEBUG_HERO_SELECT_MAX_LEGENDS - 1);
    lv_enableDisable = true;
    lv_singlePlayerGroup = PlayerGroupSingle(EventPlayer());
    lv_readySound = SoundLink(UserDataGetSound("PlayableLegends", libWCdr_gv_legends.lv_player[EventPlayer()].lv_selectedLegend, "ReadySound", 1), c_soundIndexAny);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libWCdr_gv_debugHeroSelectUI.lv_readyButton))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libWCdr_gv_legends.lv_legendPlayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libWCdr_gf_LegendIsDisabled(libWCdr_gv_legends.lv_player[EventPlayer()].lv_selectedLegend) == true)) {
        return true;
    }
    else if ((libWCdr_gv_debugHeroSelectUI.lv_playerIsReady[EventPlayer()] == true)) {
        libWCdr_gv_debugHeroSelectUI.lv_playerIsReady[EventPlayer()] = false;
        lv_enableDisable = true;
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[EventPlayer()].lv_readyPanel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_readyState, libWCdr_gv_animationStates.lv_readyState_NotReady);
    }
    else if (true) {
        libWCdr_gv_debugHeroSelectUI.lv_playerIsReady[EventPlayer()] = true;
        lv_enableDisable = false;
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_readyPanels[EventPlayer()].lv_readyPanel, PlayerGroupAll(), libWCdr_gv_animationStates.lv_readyState, libWCdr_gv_animationStates.lv_readyState_Ready);
        if ((lv_readySound != null)) {
            SoundPlayForPlayer(SoundLink(UserDataGetSound("PlayableLegends", libWCdr_gv_legends.lv_player[EventPlayer()].lv_selectedLegend, "ReadySound", 1), c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

    }
    autoAA990CE1_ae = lv_lastLegendIndex;
    lv_currentIndex = 0;
    for ( ; ( (autoAA990CE1_ai >= 0 && lv_currentIndex <= autoAA990CE1_ae) || (autoAA990CE1_ai < 0 && lv_currentIndex >= autoAA990CE1_ae) ) ; lv_currentIndex += autoAA990CE1_ai ) {
        if ((libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_legendInstance != libWCdr_gv_legends.lv_player[EventPlayer()].lv_selectedLegend)) {
            DialogControlSetEnabled(libWCdr_gv_debugHeroSelectUI.lv_heroSelectButtons[lv_currentIndex].lv_button, lv_singlePlayerGroup, lv_enableDisable);
        }

    }
    if ((libWCdr_gf_AllLegendPlayersAreReady() == true)) {
        TimerStart(libWCdr_gv_debugHeroSelectUI.lv_gameStartTimer, 3.0, false, c_timeReal);
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, PlayerGroupAll(), libWCdr_gv_animationStates.lv_readyState, libWCdr_gv_animationStates.lv_readyState_Ready);
    }
    else {
        TimerPause(libWCdr_gv_debugHeroSelectUI.lv_gameStartTimer, true);
        DialogControlSetAnimationState(libWCdr_gv_debugHeroSelectUI.lv_heroSelectUI, PlayerGroupAll(), libWCdr_gv_animationStates.lv_readyState, libWCdr_gv_animationStates.lv_readyState_NotReady);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_ReadyButtonClicked_Init () {
    libWCdr_gt_ReadyButtonClicked = TriggerCreate("libWCdr_gt_ReadyButtonClicked_Func");
    TriggerEnable(libWCdr_gt_ReadyButtonClicked, false);
    TriggerAddEventDialogControl(libWCdr_gt_ReadyButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Start Timer Expires
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_GameStartTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libWCdr_gf_ShowHideDebugSelectionUI(false);
    libWCdr_gf_StartMissionWithCallback(libWCdr_gv_debugHeroSelectUI.lv_callbackTrigger);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_GameStartTimerExpires_Init () {
    libWCdr_gt_GameStartTimerExpires = TriggerCreate("libWCdr_gt_GameStartTimerExpires_Func");
    TriggerEnable(libWCdr_gt_GameStartTimerExpires, false);
    TriggerAddEventTimer(libWCdr_gt_GameStartTimerExpires, libWCdr_gv_debugHeroSelectUI.lv_gameStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Difficulty Slider Moved
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_DifficultySliderMoved_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newdifficultylevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_difficultySlider))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libWCdr_gv_legends.lv_legendPlayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newdifficultylevel = libNtve_gf_ArithmeticIntClamp(RoundI(libNtve_gf_DialogItemValue(libWCdr_gv_debugHeroSelectUI.lv_optionsPanel.lv_difficultySlider, 1)), UserDataGetInt("LegionDifficultyScaling", "LevelRange", "MinLevel", 1), UserDataGetInt("LegionDifficultyScaling", "LevelRange", "MaxLevel", 1));
    if ((lv_newdifficultylevel == libWCdr_gv_legends.lv_difficultyLevel)) {
        return true;
    }

    libWCdr_gf_SetDifficultyLevel(lv_newdifficultylevel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_DifficultySliderMoved_Init () {
    libWCdr_gt_DifficultySliderMoved = TriggerCreate("libWCdr_gt_DifficultySliderMoved_Func");
    TriggerEnable(libWCdr_gt_DifficultySliderMoved, false);
    TriggerAddEventDialogControl(libWCdr_gt_DifficultySliderMoved, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Equipment Slot Clicked
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_EquipmentSlotClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentIndex;

    // Automatic Variable Declarations
    const int auto928C0984_ae = libWCdr_gv_lEGENDS_MAX_EQUIPMENT;
    const int auto928C0984_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libWCdr_gv_legends.lv_legendPlayers, EventPlayer()) == true))) {
            return false;
        }

        if (!((libWCdr_gv_debugHeroSelectUI.lv_playerIsReady[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentIndex = 1;
    for ( ; ( (auto928C0984_ai >= 0 && lv_currentIndex <= auto928C0984_ae) || (auto928C0984_ai < 0 && lv_currentIndex >= auto928C0984_ae) ) ; lv_currentIndex += auto928C0984_ai ) {
        if ((EventDialogControl() == libWCdr_gv_debugHeroSelectUI.lv_equipmentSlotButtons[lv_currentIndex].lv_equipmentButton)) {
            libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_currentEquipmentSlot[EventPlayer()] = lv_currentIndex;
            libWCdr_gf_RenderEquipmentListForPlayer(EventPlayer());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_EquipmentSlotClicked_Init () {
    libWCdr_gt_EquipmentSlotClicked = TriggerCreate("libWCdr_gt_EquipmentSlotClicked_Func");
    TriggerEnable(libWCdr_gt_EquipmentSlotClicked, false);
    TriggerAddEventDialogControl(libWCdr_gt_EquipmentSlotClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Equipment Select Button Clicked
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_EquipmentSelectButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentIndex;
    int lv_slotIndex;

    // Automatic Variable Declarations
    const int auto3F2A086C_ae = libWCdr_gv_dEBUG_HERO_SELECT_MAX_EQUIP_PER_PAGE;
    const int auto3F2A086C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libWCdr_gv_legends.lv_legendPlayers, EventPlayer()) == true))) {
            return false;
        }

        if (!((libWCdr_gv_debugHeroSelectUI.lv_playerIsReady[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_slotIndex = libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_currentEquipmentSlot[EventPlayer()];
    lv_currentIndex = 1;
    for ( ; ( (auto3F2A086C_ai >= 0 && lv_currentIndex <= auto3F2A086C_ae) || (auto3F2A086C_ai < 0 && lv_currentIndex >= auto3F2A086C_ae) ) ; lv_currentIndex += auto3F2A086C_ai ) {
        if ((EventDialogControl() == libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentButton[lv_currentIndex])) {
            libWCdr_gv_legends.lv_player[EventPlayer()].lv_equipment[lv_slotIndex] = libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_equipmentLink[lv_currentIndex][EventPlayer()];
            libWCdr_gf_W3CBankStoreEquipmentInSlot(EventPlayer(), lv_slotIndex);
            libWCdr_gf_RenderEquipmentSlotForPlayer(EventPlayer(), lv_slotIndex);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_EquipmentSelectButtonClicked_Init () {
    libWCdr_gt_EquipmentSelectButtonClicked = TriggerCreate("libWCdr_gt_EquipmentSelectButtonClicked_Func");
    TriggerEnable(libWCdr_gt_EquipmentSelectButtonClicked, false);
    TriggerAddEventDialogControl(libWCdr_gt_EquipmentSelectButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Equipment Clear Button Clicked
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_EquipmentClearButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slotIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libWCdr_gv_legends.lv_legendPlayers, EventPlayer()) == true))) {
            return false;
        }

        if (!((libWCdr_gv_debugHeroSelectUI.lv_playerIsReady[EventPlayer()] == false))) {
            return false;
        }

        if (!((EventDialogControl() == libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_clearButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_slotIndex = libWCdr_gv_debugHeroSelectUI.lv_equipmentPanel.lv_currentEquipmentSlot[EventPlayer()];
    libWCdr_gv_legends.lv_player[EventPlayer()].lv_equipment[lv_slotIndex] = null;
    libWCdr_gf_W3CBankStoreEquipmentInSlot(EventPlayer(), lv_slotIndex);
    libWCdr_gf_RenderEquipmentSlotForPlayer(EventPlayer(), lv_slotIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_EquipmentClearButtonClicked_Init () {
    libWCdr_gt_EquipmentClearButtonClicked = TriggerCreate("libWCdr_gt_EquipmentClearButtonClicked_Func");
    TriggerEnable(libWCdr_gt_EquipmentClearButtonClicked, false);
    TriggerAddEventDialogControl(libWCdr_gt_EquipmentClearButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: victorys
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_victorys_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libWCdr_gf_EndWarCoopMission("Event_VictoryDefeat_Victory");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_victorys_Init () {
    libWCdr_gt_victorys = TriggerCreate("libWCdr_gt_victorys_Func");
    libWCdr_gf_ChatCheat(libWCdr_gt_victorys, "victorys");
}

//--------------------------------------------------------------------------------------------------
// Trigger: setdiff
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_setdiff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficultylevel;
    int lv_parametercount;
    string lv_param1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_parametercount = libWCdr_gf_TriggeringChatCheatParameterCount();
    lv_param1 = libWCdr_gf_TriggeringChatCheatParameter(1);

    // Conditions
    if (testConds) {
        if (!((lv_parametercount > 0))) {
            return false;
        }

        if (!((libWCdr_gf_StringIsInteger(lv_param1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_difficultylevel = StringToInt(lv_param1);
    libWCdr_gf_SetDifficultyLevel(lv_difficultylevel);
    TextExpressionSetToken("Param/Expression/lib_WCdr_DFEF9EE7", "A", IntToText(libWCdr_gf_GetDifficultyLevel()));
    TextExpressionSetToken("Param/Expression/lib_WCdr_DFEF9EE7", "B", StringToText(libWCdr_gf_GetPresetNameofDifficultyLevel(libWCdr_gf_GetDifficultyLevel())));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_WCdr_DFEF9EE7"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_setdiff_Init () {
    libWCdr_gt_setdiff = TriggerCreate("libWCdr_gt_setdiff_Func");
    libWCdr_gf_ChatCheat(libWCdr_gt_setdiff, "setdiff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: lootdelete
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_lootdelete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_artifact;

    // Automatic Variable Declarations
    int auto8D8877F3_catalog;
    int auto8D8877F3_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8D8877F3_catalog = c_gameCatalogArtifact;
    auto8D8877F3_i = 1;
    for ( ; auto8D8877F3_i <= CatalogEntryCount(c_gameCatalogArtifact) ; auto8D8877F3_i += 1 ) {
        lv_artifact = CatalogEntryGet(auto8D8877F3_catalog, auto8D8877F3_i);
        libWCdr_gf_W3CBankRemoveSection(libWCdr_gf_TriggeringChatCheatPlayer(), ("WCLoot_" + (lv_artifact)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_lootdelete_Init () {
    libWCdr_gt_lootdelete = TriggerCreate("libWCdr_gt_lootdelete_Func");
    libWCdr_gf_ChatCheat(libWCdr_gt_lootdelete, "lootdelete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: lootgrant
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_lootgrant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_parametercount;
    string lv_param1;
    string lv_param2;
    string lv_artifact;
    int lv_counter;
    int lv_lootcount;
    int lv_grantplayer;

    // Automatic Variable Declarations
    int auto864EBFCD_ae;
    const int auto864EBFCD_ai = 1;
    int autoD976407B_catalog;
    int autoD976407B_i;

    // Variable Initialization
    lv_parametercount = libWCdr_gf_TriggeringChatCheatParameterCount();
    lv_param1 = libWCdr_gf_TriggeringChatCheatParameter(1);
    lv_param2 = libWCdr_gf_TriggeringChatCheatParameter(2);
    lv_grantplayer = libWCdr_gf_TriggeringChatCheatPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_parametercount > 1) && (libWCdr_gf_StringIsInteger(lv_param2) == true)) {
        lv_grantplayer = StringToInt(lv_param2);
    }

    if (((lv_grantplayer >= 0) && (lv_grantplayer <= 15)) && (PlayerGroupHasPlayer(libWCdr_gf_GetLegendPlayers(), lv_grantplayer) == true)) {
    }
    else {
        return true;
    }
    if ((lv_parametercount > 0) && (libWCdr_gf_StringIsInteger(lv_param1) == true)) {
        lv_lootcount = StringToInt(lv_param1);
        auto864EBFCD_ae = lv_lootcount;
        lv_counter = 1;
        for ( ; ( (auto864EBFCD_ai >= 0 && lv_counter <= auto864EBFCD_ae) || (auto864EBFCD_ai < 0 && lv_counter >= auto864EBFCD_ae) ) ; lv_counter += auto864EBFCD_ai ) {
            lv_artifact = libWCdr_gf_RandomArtifact(lv_grantplayer);
            if ((lv_artifact != null)) {
                libWCdr_gf_W3CBankStoreLoot(lv_grantplayer, lv_artifact, 1);
            }
            else {
                break;
            }
        }
    }
    else if ((lv_parametercount > 0) && (CatalogEntryIsValid(c_gameCatalogArtifact, lv_param1) == true)) {
        libWCdr_gf_W3CBankStoreLoot(lv_grantplayer, (lv_param1), 1);
    }
    else if ((lv_parametercount == 0)) {
        autoD976407B_catalog = c_gameCatalogArtifact;
        autoD976407B_i = 1;
        for ( ; autoD976407B_i <= CatalogEntryCount(c_gameCatalogArtifact) ; autoD976407B_i += 1 ) {
            lv_artifact = CatalogEntryGet(autoD976407B_catalog, autoD976407B_i);
            libWCdr_gf_W3CBankStoreLoot(lv_grantplayer, (lv_param1), 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_lootgrant_Init () {
    libWCdr_gt_lootgrant = TriggerCreate("libWCdr_gt_lootgrant_Func");
    libWCdr_gf_ChatCheat(libWCdr_gt_lootgrant, "lootgrant");
}

//--------------------------------------------------------------------------------------------------
// Trigger: lootshow
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_lootshow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_grantplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_grantplayer = libWCdr_gf_TriggeringChatCheatPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libWCdr_gf_AwardLoot(lv_grantplayer, libWCdr_gv_dEBUG_LOOT_AWARD_MAX_LOOT);
    libWCdr_gf_ShowHideLootAwardUI(PlayerGroupSingle(lv_grantplayer), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_lootshow_Init () {
    libWCdr_gt_lootshow = TriggerCreate("libWCdr_gt_lootshow_Func");
    libWCdr_gf_ChatCheat(libWCdr_gt_lootshow, "lootshow");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LootAward - Close Button Clicked
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_LootAwardCloseButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libWCdr_gv_lootAward.lv_closeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(EventPlayer(), c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_LootAwardCloseButtonClicked_Init () {
    libWCdr_gt_LootAwardCloseButtonClicked = TriggerCreate("libWCdr_gt_LootAwardCloseButtonClicked_Func");
    TriggerEnable(libWCdr_gt_LootAwardCloseButtonClicked, false);
    TriggerAddEventDialogControl(libWCdr_gt_LootAwardCloseButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Demo Item Setup
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_DemoItemSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_equipslot;

    // Automatic Variable Declarations
    string autoEB44F08F_val;
    const int auto459785CE_ae = 3;
    const int auto459785CE_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((StringContains(EventChatMessage(false), "thrall lives", c_stringAnywhere, c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCdr_gf_W3CBankStoreLoot(lv_player, "ArtifactGromOnDeathBladestorm", 1);
    libWCdr_gf_W3CBankStoreLoot(lv_player, "ArtifactHeroAttackSpeed", 1);
    libWCdr_gf_W3CBankStoreLoot(lv_player, "ArtifactShepherdsStaff", 1);
    libWCdr_gf_W3CBankStoreLoot(lv_player, "ArtifactJainaDoubleWaterElemental", 1);
    libWCdr_gf_W3CBankStoreLoot(lv_player, "ArtifactAnkhofIntervention", 1);
    libWCdr_gf_W3CBankStoreLoot(lv_player, "ArtifactCaskofHolyWater", 1);
    autoEB44F08F_val = libWCdr_gf_GetLegendInstanceForPlayer(lv_player);
    if (autoEB44F08F_val == "Grom") {
        libWCdr_gv_legends.lv_player[EventPlayer()].lv_equipment[1] = "ArtifactGromOnDeathBladestorm";
        libWCdr_gv_legends.lv_player[EventPlayer()].lv_equipment[2] = "ArtifactHeroAttackSpeed";
        libWCdr_gv_legends.lv_player[EventPlayer()].lv_equipment[3] = "ArtifactShepherdsStaff";
    }
    else if (autoEB44F08F_val == "JainaProudmoore") {
        libWCdr_gv_legends.lv_player[EventPlayer()].lv_equipment[1] = "ArtifactJainaDoubleWaterElemental";
        libWCdr_gv_legends.lv_player[EventPlayer()].lv_equipment[2] = "ArtifactAnkhofIntervention";
        libWCdr_gv_legends.lv_player[EventPlayer()].lv_equipment[3] = "ArtifactCaskofHolyWater";
    }
    else {
    }
    libWCdr_gf_W3CBankStoreArtifactInSlotForCommander(lv_player, "ArtifactGromOnDeathBladestorm", 1, "Grom");
    libWCdr_gf_W3CBankStoreArtifactInSlotForCommander(lv_player, "ArtifactHeroAttackSpeed", 2, "Grom");
    libWCdr_gf_W3CBankStoreArtifactInSlotForCommander(lv_player, "ArtifactShepherdsStaff", 3, "Grom");
    libWCdr_gf_W3CBankStoreArtifactInSlotForCommander(lv_player, "ArtifactJainaDoubleWaterElemental", 1, "JainaProudmoore");
    libWCdr_gf_W3CBankStoreArtifactInSlotForCommander(lv_player, "ArtifactAnkhofIntervention", 2, "JainaProudmoore");
    libWCdr_gf_W3CBankStoreArtifactInSlotForCommander(lv_player, "ArtifactCaskofHolyWater", 3, "JainaProudmoore");
    lv_equipslot = 1;
    for ( ; ( (auto459785CE_ai >= 0 && lv_equipslot <= auto459785CE_ae) || (auto459785CE_ai < 0 && lv_equipslot >= auto459785CE_ae) ) ; lv_equipslot += auto459785CE_ai ) {
        libWCdr_gf_RenderEquipmentSlotForPlayer(lv_player, lv_equipslot);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_DemoItemSetup_Init () {
    libWCdr_gt_DemoItemSetup = TriggerCreate("libWCdr_gt_DemoItemSetup_Func");
    TriggerAddEventChatMessage(libWCdr_gt_DemoItemSetup, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Loot Drop Effect
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_LootDropEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringeffect;
    int lv_legendplayer;
    string lv_heroitemcategory;
    string lv_lootlevelinstance;

    // Automatic Variable Declarations
    playergroup autoED8CE00C_g;
    string auto6E4006F1_userType;
    int auto6E4006F1_i;
    unitgroup autoD6406425_g;
    int autoD6406425_u;
    unit autoD6406425_var;

    // Variable Initialization
    lv_triggeringeffect = EventPlayerEffectUsed();

    // Actions
    if (!runActions) {
        return true;
    }

    autoED8CE00C_g = libWCdr_gf_GetLegendPlayers();
    lv_legendplayer = -1;
    while (true) {
        lv_legendplayer = PlayerGroupNextPlayer(autoED8CE00C_g, lv_legendplayer);
        if (lv_legendplayer < 0) { break; }
        lv_heroitemcategory = UserDataGetUserInstance("PlayableLegends", libWCdr_gf_GetLegendInstanceForPlayer(lv_legendplayer), "HeroItemCategory", 1);
        auto6E4006F1_userType = "LootDropLevels";
        auto6E4006F1_i = 1;
        for ( ; auto6E4006F1_i <= UserDataInstanceCount(auto6E4006F1_userType) ; auto6E4006F1_i += 1 ) {
            lv_lootlevelinstance = UserDataInstance(auto6E4006F1_userType, auto6E4006F1_i);
            if ((lv_heroitemcategory == UserDataGetUserInstance("LootDropLevels", lv_lootlevelinstance, "HeroItemCategory", 1)) && (lv_triggeringeffect == UserDataGetGameLink("LootDropLevels", lv_lootlevelinstance, "LootEffect", 1))) {
                UnitLootDropPoint(lv_legendplayer, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), UserDataGetGameLink("LootDropLevels", lv_lootlevelinstance, "LootDrop", 1), lv_legendplayer);
                autoD6406425_g = UnitLootLastCreatedGroup();
                autoD6406425_u = UnitGroupCount(autoD6406425_g, c_unitCountAll);
                for (;; autoD6406425_u -= 1) {
                    autoD6406425_var = UnitGroupUnitFromEnd(autoD6406425_g, autoD6406425_u);
                    if (autoD6406425_var == null) { break; }
                    UnitSetOwner(autoD6406425_var, lv_legendplayer, true);
                }
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_LootDropEffect_Init () {
    libWCdr_gt_LootDropEffect = TriggerCreate("libWCdr_gt_LootDropEffect_Func");
    TriggerAddEventPlayerEffectUsed(libWCdr_gt_LootDropEffect, c_playerAny, "DropLootLevel1");
    TriggerAddEventPlayerEffectUsed(libWCdr_gt_LootDropEffect, c_playerAny, "DropLootLevel2");
    TriggerAddEventPlayerEffectUsed(libWCdr_gt_LootDropEffect, c_playerAny, "DropLootLevel3");
    TriggerAddEventPlayerEffectUsed(libWCdr_gt_LootDropEffect, c_playerAny, "DropLootLevel4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Destroyed Defeat
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_BaseDestroyedDefeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE0E12875_g;
    int autoE0E12875_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libWCdr_gv_legends.lv_legendPlayers, EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE0E12875_g = libWCdr_gv_legends.lv_legendPlayers;
    autoE0E12875_var = -1;
    while (true) {
        autoE0E12875_var = PlayerGroupNextPlayer(autoE0E12875_g, autoE0E12875_var);
        if (autoE0E12875_var < 0) { break; }
        GameOver(autoE0E12875_var, c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_BaseDestroyedDefeat_Init () {
    libWCdr_gt_BaseDestroyedDefeat = TriggerCreate("libWCdr_gt_BaseDestroyedDefeat_Func");
    TriggerEnable(libWCdr_gt_BaseDestroyedDefeat, false);
    TriggerAddEventUnitDied(libWCdr_gt_BaseDestroyedDefeat, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Unit Birth
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_HeroUnitBirth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_herounit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_herounit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libWCdr_gf_GetLegendPlayers(), UnitGetOwner(lv_herounit)) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_herounit, UnitGetOwner(lv_herounit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCdr_gf_GiveArtifactGrantedItemstoHero(lv_herounit);
    libWCdr_gv_legends.lv_player[UnitGetOwner(lv_herounit)].lv_hero = lv_herounit;
    libWCdr_gf_HookUpHeroInGameUI(UnitGetOwner(lv_herounit), lv_herounit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_HeroUnitBirth_Init () {
    libWCdr_gt_HeroUnitBirth = TriggerCreate("libWCdr_gt_HeroUnitBirth_Func");
    TriggerAddEventPlayerEffectUsed(libWCdr_gt_HeroUnitBirth, c_playerAny, "HeroCreationTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Auto Revive
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_HeroAutoRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroowner;
    string lv_herounittype;
    unitgroup lv_revivalstations;

    // Automatic Variable Declarations
    unitgroup autoBC6EED5B_g;
    int autoBC6EED5B_u;
    unit autoBC6EED5B_var;

    // Variable Initialization
    lv_heroowner = UnitGetOwner(EventUnit());
    lv_herounittype = libWCdr_gf_GetLegendUnitTypeofPlayer(lv_heroowner);
    lv_revivalstations = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == lv_herounittype))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    UnitGroupAddUnitGroup(lv_revivalstations, UnitGroup("oalt", lv_heroowner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_revivalstations, UnitGroup("halt", lv_heroowner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_revivalstations, UnitGroup("uaod", lv_heroowner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_revivalstations, UnitGroup("eate", lv_heroowner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoBC6EED5B_g = lv_revivalstations;
    autoBC6EED5B_u = UnitGroupCount(autoBC6EED5B_g, c_unitCountAll);
    for (;; autoBC6EED5B_u -= 1) {
        autoBC6EED5B_var = UnitGroupUnitFromEnd(autoBC6EED5B_g, autoBC6EED5B_u);
        if (autoBC6EED5B_var == null) { break; }
        UnitIssueOrder(autoBC6EED5B_var, Order(AbilityCommand("Arev", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_HeroAutoRevive_Init () {
    libWCdr_gt_HeroAutoRevive = TriggerCreate("libWCdr_gt_HeroAutoRevive_Func");
    TriggerAddEventUnitDied(libWCdr_gt_HeroAutoRevive, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Levels Up
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_HeroLevelsUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroowner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroowner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libWCdr_gf_PlayerIsLegendPlayer(lv_heroowner) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == libWCdr_gf_GetLegendUnitTypeofPlayer(lv_heroowner)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libWCdr_gf_UpdateHeroLevelLabel(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_HeroLevelsUp_Init () {
    libWCdr_gt_HeroLevelsUp = TriggerCreate("libWCdr_gt_HeroLevelsUp_Func");
    TriggerAddEventUnitGainLevel(libWCdr_gt_HeroLevelsUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Unit Creates a New Unit
//--------------------------------------------------------------------------------------------------
bool libWCdr_gt_AttackWaveUnitCreatesaNewUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    wave lv_attackwave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackwave = AIUnitGetWave(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_attackwave != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIWaveAddUnit(lv_attackwave, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libWCdr_gt_AttackWaveUnitCreatesaNewUnit_Init () {
    libWCdr_gt_AttackWaveUnitCreatesaNewUnit = TriggerCreate("libWCdr_gt_AttackWaveUnitCreatesaNewUnit_Func");
    TriggerAddEventUnitCreated(libWCdr_gt_AttackWaveUnitCreatesaNewUnit, null, null, null);
}

void libWCdr_InitTriggers () {
    libWCdr_gt_ChatCheatListener_Init();
    libWCdr_gt_InitializePortraitCameraandTeamColorFix_Init();
    libWCdr_gt_InitializeDisableInventoryTech_Init();
    libWCdr_gt_HeroSelectButtonClicked_Init();
    libWCdr_gt_ReadyButtonClicked_Init();
    libWCdr_gt_GameStartTimerExpires_Init();
    libWCdr_gt_DifficultySliderMoved_Init();
    libWCdr_gt_EquipmentSlotClicked_Init();
    libWCdr_gt_EquipmentSelectButtonClicked_Init();
    libWCdr_gt_EquipmentClearButtonClicked_Init();
    libWCdr_gt_victorys_Init();
    libWCdr_gt_setdiff_Init();
    libWCdr_gt_lootdelete_Init();
    libWCdr_gt_lootgrant_Init();
    libWCdr_gt_lootshow_Init();
    libWCdr_gt_LootAwardCloseButtonClicked_Init();
    libWCdr_gt_DemoItemSetup_Init();
    libWCdr_gt_LootDropEffect_Init();
    libWCdr_gt_BaseDestroyedDefeat_Init();
    libWCdr_gt_HeroUnitBirth_Init();
    libWCdr_gt_HeroAutoRevive_Init();
    libWCdr_gt_HeroLevelsUp_Init();
    libWCdr_gt_AttackWaveUnitCreatesaNewUnit_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libWCdr_InitLib_completed = false;

void libWCdr_InitLib () {
    if (libWCdr_InitLib_completed) {
        return;
    }

    libWCdr_InitLib_completed = true;

    libWCdr_InitLibraries();
    libWCdr_InitVariables();
    libWCdr_InitCustomScript();
    libWCdr_InitTriggers();
}

