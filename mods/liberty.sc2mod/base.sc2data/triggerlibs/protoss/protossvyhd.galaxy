//==================================================================================================
//  Protoss Melee Very Hard
//==================================================================================================

bool ProtossOpenRushZealotStalkerVyHd (int player);            // zealot/stalker rush
bool ProtossOpenRushProxyGateVyHd (int player);                // proxygate rush
bool ProtossOpenRushCannonRushVyHd (int player);               // cannon rush
bool ProtossOpenTimingFourGateVyHd (int player);               // four gate timing
bool ProtossOpenTimingGateImmortalVyHd (int player);           // stalker/immortal timing
bool ProtossOpenTimingStalkerBlinkVyHd (int player);           // blink stalker timing
bool ProtossOpenTimingDTRushVyHd (int player);                 // dt rush
bool ProtossOpenPowerMacroQuickExpGndVyHd (int player);        // aggresive quick expand
bool ProtossOpenPowerMacroGateExpGndVyHd (int player);         // expand guarded by zealot/stalker
bool ProtossOpenPowerMacroDefenseExpGndVyHd (int player);      // safer stalker/robo expand
bool ProtossOpenAirOneBaseAirVyHd (int player);                // single base "island" air build
bool ProtossOpenAirOneBaseDropVyHd (int player);                // single base "island" drop build
bool ProtossOpenAirQuickExpandAirVyHd (int player);            // quick expand air build

bool ProtossMidRushTimingFourGateRoboVyHd (int player);        // continued four gate pressure
bool ProtossMidRushTimingDefensiveExpandVyHd (int player);     // transition from early pressure to a macro game
bool ProtossMidPowerSevenGateVyHd (int player);                // pure gateway attack
bool ProtossMidPowerGateImmortalVyHd (int player);             // gateway/immortal attack
bool ProtossMidPowerGateColossiVyHd (int player);              // gateway/colossi attack
bool ProtossMidPowerGateAirVyHd (int player);                  // gateway/air attack
bool ProtossMidPowerGateVoidPhoenixVyHd (int player);          // air harrass (w/ gateway for defense)
bool ProtossMidMacroGateRoboVyHd (int player);                 // macro toward a gateway/robo late game
bool ProtossMidMacroGateAirVyHd (int player);                  // macro toward a gateway/stargate late game
bool ProtossMidAirOneBasePureAirVyHd (int player);             // continue single base "island" air build
bool ProtossMidAirOneBasePureDropVyHd (int player);            // continue single base "island" drop build
bool ProtossMidAirExpansionVoidrayVyHd (int player);           // quick expand voidray/pheonix attack
bool ProtossMidAirExpansionCapitalAirVyHd (int player);        // quick expand carrier attack
bool ProtossMidAirExpansionDropAirVyHd (int player);           // quick expand drop + air attack
bool ProtossMidAirMacroVyHd (int player);                      // macro toward a large late game air force

//--------------------------------------------------------------------------------------------------
//  TestProtossVyHdBuilds
//--------------------------------------------------------------------------------------------------
//void TestProtossVyHdBuilds (int player) {
//    ProtossOpenRushZealotStalkerVyHd (player);            // zealot/stalker rush
//    ProtossOpenRushProxyGateVyHd (player);                // proxygate rush
//    ProtossOpenRushCannonRushVyHd (player);               // cannon rush
//    ProtossOpenTimingFourGateVyHd (player);               // four gate timing
//    ProtossOpenTimingGateImmortalVyHd (player);           // stalker/immortal timing
//    ProtossOpenTimingStalkerBlinkVyHd (player);           // blink stalker timing
//    ProtossOpenTimingDTRushVyHd (player);                 // dt rush
//    ProtossOpenPowerMacroQuickExpGndVyHd (player);        // aggresive quick expand
//    ProtossOpenPowerMacroGateExpGndVyHd (player);         // expand guarded by zealot/stalker
//    ProtossOpenPowerMacroDefenseExpGndVyHd (player);      // safer stalker/robo expand
//    ProtossOpenAirOneBaseAirVyHd (player);                // single base "island" air build
//    ProtossOpenAirOneBaseDropVyHd (player);               // single base "island" drop build
//    ProtossOpenAirQuickExpandAirVyHd (player);            // quick expand air build
//    
//    ProtossMidRushTimingFourGateRoboVyHd (player);        // continued four gate pressure
//    ProtossMidRushTimingDefensiveExpandVyHd (player);     // transition from early pressure to a macro game
//    ProtossMidPowerSevenGateVyHd (player);                // pure gateway attack
//    ProtossMidPowerGateImmortalVyHd (player);             // gateway/immortal attack
//    ProtossMidPowerGateColossiVyHd (player);              // gateway/colossi attack
//    ProtossMidPowerGateAirVyHd (player);                  // gateway/air attack
//    ProtossMidPowerGateVoidPhoenixVyHd (player);          // air harrass (w/ gateway for defense)
//    ProtossMidMacroGateRoboVyHd (player);                 // macro toward a gateway/robo late game
//    ProtossMidMacroGateAirVyHd (player);                  // macro toward a gateway/stargate late game
//    ProtossMidAirOneBasePureAirVyHd (player);             // continue single base "island" air build
//    ProtossMidAirOneBasePureDropVyHd (player);            // continue single base "island" drop build
//    ProtossMidAirExpansionVoidrayVyHd (player);           // quick expand voidray/pheonix attack
//    ProtossMidAirExpansionCapitalAirVyHd (player);        // quick expand carrier/tempest attack
//    ProtossMidAirExpansionDropAirVyHd (player);           // quick expand drop + air attack
//    ProtossMidAirMacroVyHd (player);                      // macro toward a large late game air force
//}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenVyHd
//--------------------------------------------------------------------------------------------------
void ProtossOpenVyHd (int player) {
    bool done = false;
    int buildIndex;

    AIEarlyDefenseScouting(player);

    // see if we need to switch builds
    UpdateHDProtossOpening(player);
    
    buildIndex = AIGetUserInt(player, c_currentBuildIndex);
    if (buildIndex == e_hdBuildIndex_POpenRush_ZealotStalker)               { done = ProtossOpenRushZealotStalkerVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenRush_ProxyGate)              { done = ProtossOpenRushProxyGateVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenRush_CannonRush)             { done = ProtossOpenRushCannonRushVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenTiming_FourGate)             { done = ProtossOpenTimingFourGateVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenTiming_GateImmortal)         { done = ProtossOpenTimingGateImmortalVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenTiming_StalkerBlink)         { done = ProtossOpenTimingStalkerBlinkVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenTiming_DTRush)               { done = ProtossOpenTimingDTRushVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenPowerMacro_QuickExpGnd)      { done = ProtossOpenPowerMacroQuickExpGndVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenPowerMacro_GateExpGnd)       { done = ProtossOpenPowerMacroGateExpGndVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenPowerMacro_DefenseExpGnd)    { done = ProtossOpenPowerMacroDefenseExpGndVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenAir_OneBaseAir)              { done = ProtossOpenAirOneBaseAirVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenAir_OneBaseDrop)             { done = ProtossOpenAirOneBaseDropVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_POpenAir_QuickExpandAir)          { done = ProtossOpenAirQuickExpandAirVyHd (player); }
    else { ErrorMeleeScript(player, "Invalid Open BuildIndex ProtossVyHd"); }

    if (done) {
        ProtossHDInitMid(player); // Transition to MidGame
    }
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidVyHd
//--------------------------------------------------------------------------------------------------
void ProtossMidVyHd (int player) {
    bool done = false;
    int buildIndex;
    
    // enable scouting as appropriate
    if (AIGetUserInt(player, c_numGroundStartLocs) > 0) {
        AIScoutingEnable(player, 15, c_PU_Probe);
        AIEarlyDefenseScouting(player);
    }
    else {
        AIScoutingEnable(player, 1, c_PU_Observer);
    }

    // see if we need to switch builds
    UpdateHDProtossMidGame(player);
    
    buildIndex = AIGetUserInt(player, c_currentBuildIndex);
    if (buildIndex == e_hdBuildIndex_PMidRushTiming_FourGateRobo)           { done = ProtossMidRushTimingFourGateRoboVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidRushTiming_DefensiveExpand)   { done = ProtossMidRushTimingDefensiveExpandVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidPower_SevenGate)              { done = ProtossMidPowerSevenGateVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidPower_GateImmortal)           { done = ProtossMidPowerGateImmortalVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidPower_GateColossi)            { done = ProtossMidPowerGateColossiVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidPower_GateAir)                { done = ProtossMidPowerGateAirVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidPower_GateVoidPhoenix)        { done = ProtossMidPowerGateVoidPhoenixVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidMacro_GateRobo)               { done = ProtossMidMacroGateRoboVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidMacro_GateAir)                { done = ProtossMidMacroGateAirVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidAir_OneBasePureAir)           { done = ProtossMidAirOneBasePureAirVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidAir_OneBasePureDrop)          { done = ProtossMidAirOneBasePureDropVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidAir_ExpansionVoidray)         { done = ProtossMidAirExpansionVoidrayVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidAir_ExpansionCapitalAir)      { done = ProtossMidAirExpansionCapitalAirVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidAir_ExpansionDropAir)         { done = ProtossMidAirExpansionDropAirVyHd (player); }
    else if (buildIndex == e_hdBuildIndex_PMidAir_Macro)                    { done = ProtossMidAirMacroVyHd (player); }
    else { ErrorMeleeScript(player, "Invalid Mid BuildIndex ProtossVyHd"); }

    if (done) {
        ProtossHDInitLate(player); // Transition to LateGame
    }
}

//==================================================================================================
//  OPENINGS
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  ProtossOpenRushZealotStalkerVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenRushZealotStalkerVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 5, c_PU_Stalker );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 5, c_PB_Pylon );              // proxy
    AISetStock( player, 1, c_PB_RoboticsFacility ); 
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 7, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Pylon );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 12, c_PU_Probe, 1, c_PB_Gateway, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    if (AITechCount(player, c_PU_Zealot, c_techCountCompleteOnly) >= 2) {
        AISetAttackStatus(player, c_PU_Stalker, 1, 3, c_continuousMerge);
    }
    
    if (AIGetTime() < 450) {
        if (AITechCount(player, c_PU_Stalker, c_techCountInProgressOrBetter) < 7) {
            return false;
        }
    }
    
    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenRushProxyGateVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenRushProxyGateVyHd (int player) {

    // not yet a proxy build, needs to be fixed
    // this build is not used

    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );        // proxy
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );      // proxy
    AISetStock( player, 15, c_PU_Probe );
    AISetStock( player, 2, c_PB_Gateway );      // proxy
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );        // proxy
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 19, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 5, c_PU_Zealot );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 6, c_PU_Zealot );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 7, c_PU_Zealot );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AIScoutingEnableWithPreReq(player, 12, c_PU_Probe, 1, c_PB_Gateway, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 1, 1, c_continuousMerge);

    if (AIGetTime() < 300) {
        if (AITechCount(player, c_PU_Zealot, c_techCountInProgressOrBetter) < 5) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenRushCannonRushVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenRushCannonRushVyHd (int player) {
    AIClearStock(player);

    // not yet a proxy build, needs to be fixed
    // this build is not used

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 10, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );            // proxy
    AISetStock( player, 1, c_PB_Forge );            // proxy
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 2, c_PB_PhotonCannon );     // proxy
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );            // proxy
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 4, c_PB_PhotonCannon );     // proxy
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 24, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AIScoutingEnableWithPreReq(player, 9, c_PU_Probe, 1, c_PB_Nexus, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 1, 999, c_continuousMerge);

    if (AIGetTime() < 300) {
        if (AITechCount(player, c_PB_Gateway, c_techCountInProgressOrBetter) < 1) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenTimingFourGateVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenTimingFourGateVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 4, c_PB_Gateway );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 4, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 8, c_PU_Stalker );
    AISetStock( player, 7, c_PB_Pylon );         // proxy
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 10, c_PU_Stalker );
    AISetStock( player, 28, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 8, c_PB_Pylon );
    AISetStock( player, 30, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 12, c_PU_Probe, 1, c_PB_Gateway, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    if (AITechCount(player, c_PU_Zealot, c_techCountCompleteOnly) >= 2) {
        AISetAttackStatus(player, c_PU_Stalker, 1, 8, c_continuousMerge);
    }
    
    if (AIGetTime() < 510) {
        if (AITechCount(player, c_PB_Assimilator, c_techCountInProgressOrBetter) < 2) {
            return false;
        }
    }
    
    AISetAttackStatus(player, c_PU_Stalker, 1, 6, c_continuousMerge);
    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenTimingGateImmortalVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenTimingGateImmortalVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 1, c_PU_Immortal );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 2, c_PU_Immortal );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 3, c_PU_Immortal );
    AISetStock( player, 5, c_PU_Stalker );
    AISetStock( player, 26, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);

    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 12, c_PU_Probe, 1, c_PB_Gateway, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    if (AITechCount(player, c_PU_Stalker, c_techCountCompleteOnly) >= 5) {
        AISetAttackStatus(player, c_PU_Immortal, 1, 2, c_continuousMerge);
    }
    
    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_Stalker, c_techCountCompleteOnly) < 5) {
            return false;
        }
    }
    
    if (AITechCount(player, c_PU_Immortal, c_techCountCompleteOnly) >= 1) {
        AISetAttackStatus(player, c_PU_Stalker, 2, 5, c_continuousMerge);
    }
    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenTimingStalkerBlinkVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenTimingStalkerBlinkVyHd (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PB_TwilightCouncil );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 1, c_PR_StalkerBlink );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 5, c_PB_Pylon );       // proxy
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 5, c_PU_Stalker );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 8, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 11, c_PU_Stalker );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 27, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 12, c_PU_Probe, 1, c_PB_Gateway, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 1, 8, c_continuousMerge);

    if (AIGetTime() < 510) {
        if (AITechCount(player, c_PU_Stalker, c_techCountInProgressOrBetter) < 11) {
            return false;
        }
    }
    
    AISetAttackStatus(player, c_PU_Stalker, 1, 7, c_continuousMerge);
    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenTimingDTRushVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenTimingDTRushVyHd (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 10, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 15, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_TwilightCouncil );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 19, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 1, c_PB_DarkShrine );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );         // proxy
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 3, c_PU_DarkTemplar );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 5, c_PU_DarkTemplar );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 28, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 12, c_PU_Probe, 1, c_PB_Gateway, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_DarkTemplar, 1, 3, c_continuousMerge);

    if (AIGetTime() < 420) {
        if (AITechCount(player, c_PU_DarkTemplar, c_techCountInProgressOrBetter) < 5) {
            return false;
        }
    }
    
    AISetAttackStatus(player, c_PU_DarkTemplar, 1, 2, c_continuousMerge);
    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenPowerMacroQuickExpGndVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenPowerMacroQuickExpGndVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 16, c_PU_Probe );
    
    ProtossBasicDefenseStock(player);

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 16) {
        if (ProtossHDFastExpand(player)) { return false; }
    }

    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 24, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 18, c_PU_Probe, 1, c_PB_Gateway, c_techCountCompleteOnly);

    if (AIGetTime() < 270) {
        if (AITechCount(player, c_PB_Nexus, c_techCountInProgressOrBetter) < 2) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenPowerMacroGateExpGndVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenPowerMacroGateExpGndVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 22, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 22) {
        if (ProtossHDFastExpand(player)) { return false; }
    }

    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 28, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 18, c_PU_Probe, 1, c_PB_Gateway, c_techCountCompleteOnly);

    if (AIGetTime() < 300) {
        if (AITechCount(player, c_PB_Nexus, c_techCountInProgressOrBetter) < 2) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenPowerMacroDefenseExpGndVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenPowerMacroDefenseExpGndVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 1, c_PU_Immortal );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 26, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 26) {
        if (ProtossHDFastExpand(player)) { return false; }
    }
    
    AISetStock( player, 27, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 28, c_PU_Probe );
    AISetStock( player, 2, c_PU_Immortal );
    AISetStock( player, 29, c_PU_Probe );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 30, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 18, c_PU_Probe, 1, c_PB_Gateway, c_techCountCompleteOnly);

    if (AIGetTime() < 390) {
        if (AITechCount(player, c_PB_Nexus, c_techCountInProgressOrBetter) < 2) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenAirOneBaseAirVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenAirOneBaseAirVyHd (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 15, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 1, c_PB_Stargate );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 1, c_PU_VoidRay );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 3, c_PU_VoidRay );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 4, c_PU_VoidRay );
    AISetStock( player, 7, c_PB_Pylon );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);

    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 12, c_PU_Observer, 1, c_PB_RoboticsFacility, c_techCountInProgressOrBetter);
    AISetAttackStatus(player, c_PU_VoidRay, 1, 2, c_continuousMerge);

    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_VoidRay, c_techCountCompleteOnly) < 3) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenAirOneBaseDropVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenAirOneBaseDropVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_WarpPrism );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 2, c_PU_WarpPrism );
    AISetStock( player, 5, c_PU_Zealot );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 2, c_PU_Observer );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 5, c_PU_Stalker );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);

    //---------------------------------------------------------
    
    AIScoutingEnableWithPreReq(player, 12, c_PU_Observer, 1, c_PB_RoboticsFacility, c_techCountInProgressOrBetter);
    if (AITechCount(player, c_PU_WarpPrism, c_techCountCompleteOnly) >= 2) {
        AISetAttackStatus(player, c_PU_Zealot, 2, 3, c_continuousMerge);
        AISetAttackStatus(player, c_PU_Stalker, 2, 3, c_continuousMerge);
    }

    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PB_Stargate, c_techCountCompleteOnly) < 2) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenAirQuickExpandAirVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossOpenAirQuickExpandAirVyHd (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 16, c_PU_Probe );
    
    ProtossBasicDefenseStock(player);
    
    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 16) {
        if (ProtossHDFastExpand(player)) { return false; }
    }
    
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 28, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------

    if (AIGetTime() < 300) {
        if (AITechCount(player, c_PB_Nexus, c_techCountInProgressOrBetter) < 2) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//==================================================================================================
//  MID GAME
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  ProtossMidRushTimingFourGateRoboVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidRushTimingFourGateRoboVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Assimilator );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 4, c_PU_Stalker );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 1, c_PB_RoboticsFacility ); 
    AISetStock( player, 27, c_PU_Probe );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 6, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 28, c_PU_Probe );
    AISetStock( player, 1, c_PU_Immortal );
    AISetStock( player, 9, c_PU_Stalker );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Immortal );
    AISetStock( player, 12, c_PU_Stalker );
    AISetStock( player, 3, c_PU_Immortal );
    AISetStock( player, 15, c_PU_Stalker );
    AISetStock( player, 9, c_PB_Pylon );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 30, c_PU_Probe );

    ProtossHDDefaultExtraMidStock(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------
   
    AISetAttackStatus(player, c_PU_Zealot, 1, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 1, 999, c_continuousMerge);
    if (AITechCount(player, c_PU_Stalker, c_techCountInProgressOrBetter) >= 8) {
        AISetAttackStatus(player, c_PU_Immortal, 1, 2, c_continuousMerge);
    }

    if (AIGetTime() < 600) {
        if (AITechCount(player, c_PU_Immortal, c_techCountInProgressOrBetter) < 3) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidRushTimingDefensiveExpandVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidRushTimingDefensiveExpandVyHd (int player) {    
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 12, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 1, c_PU_Immortal );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 28, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 28) {
        if (ProtossHDFastExpand(player)) { return false; }
    }

    ProtossHDDefaultExtraMidStock(player);

    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 30, c_PU_Probe );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Immortal );

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    // don't attack alone, but be willing to support an attack
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Immortal, 2, 999, c_continuousMerge);

    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PB_Nexus, c_techCountQueuedOrBetter) < 2) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidPowerSevenGateVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidPowerSevenGateVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 22, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 22) {
        if (ProtossHDFastExpand(player)) { return false; }
    }
 
    ProtossHDDefaultExtraMidStock(player);  

    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 28, c_PU_Probe );

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 40, c_stockAlways);

    AISetStock( player, 12, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Gateway );
    AISetStock( player, 15, c_PU_Stalker );
    AISetStockPeons( player, 50, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 18, c_PU_Stalker );
    AISetStock( player, 7, c_PB_Gateway );
    AISetStockPeons( player, 60, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 3, c_PU_Sentry );
    AISetStock( player, 7, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Stalker );

    AIEnableStock(player);

    //---------------------------------------------------------
 
    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    if (AITechCount(player, c_PU_Stalker, c_techCountCompleteOnly) >= 15) {
        AISetAttackStatus(player, c_PU_Sentry, 1, 1, c_continuousMerge);
    }
    
    if (AIGetTime() < 720) {
        if (AITechCount(player, c_PU_Sentry, c_techCountInProgressOrBetter) < 3) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidPowerGateImmortalVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidPowerGateImmortalVyHd (int player) {
    int numStalker;

    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 22, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 22) {
        if (ProtossHDFastExpand(player)) { return false; }
    }

    ProtossHDDefaultExtraMidStock(player);  

    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 28, c_PU_Probe );

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 40, c_stockAlways);

    AISetStock( player, 9, c_PU_Stalker );
    AISetStock( player, 2, c_PB_RoboticsFacility );
    AISetStockPeons( player, 50, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 12, c_PU_Stalker );
    AISetStock( player, 2, c_PU_Immortal );
    AISetStockPeons( player, 60, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 14, c_PU_Stalker );
    AISetStock( player, 1, c_PU_Sentry );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 3, c_PU_Immortal );
    AISetStock( player, 17, c_PU_Stalker );
    AISetStock( player, 5, c_PU_Immortal );

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Immortal, 1, 3, c_continuousMerge);
    
    if (AIGetTime() < 720) {
        if (AITechCount(player, c_PU_Immortal, c_techCountInProgressOrBetter) < 3) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidPowerGateColossiVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidPowerGateColossiVyHd (int player) {
    AIClearStock(player); 
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 22, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 22) {
        if (ProtossHDFastExpand(player)) { return false; }
    }
    
    ProtossHDDefaultExtraMidStock(player);

    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 28, c_PU_Probe );

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 40, c_stockAlways);

    AISetStock( player, 9, c_PU_Stalker );
    AISetStock( player, 2, c_PB_RoboticsFacility );
    AISetStockPeons( player, 50, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 12, c_PU_Stalker );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_Immortal );
    AISetStockPeons( player, 60, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 1, c_PB_RoboticsBay );
    AISetStock( player, 14, c_PU_Stalker );
    AISetStock( player, 1, c_PU_Sentry );
    AISetStock( player, 2, c_PU_Colossus );
    AISetStock( player, 1, c_PR_ColossusRange );
    AISetStock( player, 17, c_PU_Stalker );
    AISetStock( player, 4, c_PU_Colossus );

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Colossus, 1, 4, c_continuousMerge);

    if (AIGetTime() < 720) {
        if (AITechCount(player, c_PU_Colossus, c_techCountInProgressOrBetter) < 3) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidPowerGateAirVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidPowerGateAirVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 22, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 22) {
        if (ProtossHDFastExpand(player)) { return false; }
    }
  
    ProtossHDDefaultExtraMidStock(player);   

    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 28, c_PU_Probe );

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 40, c_stockAlways);

    AISetStock( player, 9, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStockPeons( player, 50, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 12, c_PU_Stalker );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 3, c_PB_Stargate );
    AISetStockPeons( player, 60, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 15, c_PU_Stalker );
    AISetStock( player, 4, c_PU_VoidRay );
    AISetStock( player, 2, c_PU_Phoenix );
    AISetStock( player, 8, c_PU_VoidRay );

    AIEnableStock(player);

    //---------------------------------------------------------
    

    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_VoidRay, 1, 2, c_continuousMerge);

    if (AIGetTime() < 720) {
        if (AITechCount(player, c_PU_VoidRay, c_techCountCompleteOnly) < 4) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidPowerGateVoidPhoenixVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidPowerGateVoidPhoenixVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 22, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 22) {
        if (ProtossHDFastExpand(player)) { return false; }
    }

    ProtossHDDefaultExtraMidStock(player);  

    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 1, c_PB_Stargate );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 27, c_PU_Probe );
    AISetStock( player, 1, c_PU_VoidRay );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 4, c_PB_Assimilator );
    AISetStock( player, 29, c_PU_Probe );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 31, c_PU_Probe );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 2, c_PU_VoidRay );
    
    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 40, c_stockAlways);
    
    AISetStock( player, 3, c_PU_VoidRay );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 4, c_PU_VoidRay );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 5, c_PU_VoidRay );
    AISetStock( player, 8, c_PB_Pylon );
    AISetStock( player, 6, c_PU_VoidRay );
    AISetStockPeons( player, 50, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 9, c_PB_Pylon );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 2, c_PU_Phoenix );
    AISetStock( player, 10, c_PB_Pylon );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 11, c_PB_Pylon );
    AISetStock( player, 4, c_PU_Phoenix );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 4, c_PU_Stalker );
    AISetStockPeons( player, 60, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 8, c_PU_VoidRay );
    AISetStock( player, 5, c_PU_Stalker );

    AIEnableStock(player);
    
    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_Zealot, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_VoidRay, 1, 999, c_continuousMerge);

    if (AITechCount(player, c_PU_VoidRay, c_techCountCompleteOnly) >= 4) {
        AISetAttackStatus(player, c_PU_Phoenix, 1, 2, c_continuousMerge);
    }

    if (AIGetTime() < 750) {
        if (AITechCount(player, c_PU_Phoenix, c_techCountInProgressOrBetter) < 4) {
            return false;
        }
    }
    
    AISetAttackStatus(player, c_PU_Phoenix, 1, 2, c_continuousMerge);
    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidMacroGateRoboVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidMacroGateRoboVyHd (int player) {
    int numStalker;

    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 22, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 22) {
        if (ProtossHDFastExpand(player)) { return false; }
    }

    ProtossHDDefaultExtraMidStock(player);  

    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 28, c_PU_Probe );

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 40, c_stockAlways);

    AISetStock( player, 9, c_PU_Stalker );
    AISetStock( player, 2, c_PB_RoboticsFacility );
    AISetStockPeons( player, 50, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 12, c_PU_Stalker );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_Immortal );
    AISetStockPeons( player, 60, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 1, c_PB_RoboticsBay );
    AISetStock( player, 14, c_PU_Stalker );
    AISetStock( player, 1, c_PU_Sentry );
    
    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    // don't attack alone, but be willing to support an attack
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);

    if (AIGetTime() < 720) {
        if (AITechCount(player, c_PB_RoboticsBay, c_techCountQueuedOrBetter) < 1) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidMacroGateAirVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidMacroGateAirVyHd (int player) {
    int numStalker;

    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 21, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 22, c_PU_Probe );

    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 22) {
        if (ProtossHDFastExpand(player)) { return false; }
    }

    ProtossHDDefaultExtraMidStock(player);   

    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 23, c_PU_Probe );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 25, c_PU_Probe );
    AISetStock( player, 3, c_PB_Gateway );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 28, c_PU_Probe );

    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 40, c_stockAlways);
    
    AISetStock( player, 9, c_PU_Stalker );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStockPeons( player, 50, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 12, c_PU_Stalker );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 3, c_PB_Stargate );
    AISetStockPeons( player, 60, c_PU_Probe, c_stockMaxPeons, c_stockAlways);
    AISetStock( player, 15, c_PU_Stalker );
    AISetStock( player, 4, c_PU_VoidRay );
    
    AIEnableStock(player);
    
    //---------------------------------------------------------

    // don't attack alone, but be willing to support an attack
    AISetAttackStatus(player, c_PU_Stalker, 2, 999, c_continuousMerge);
    AISetAttackStatus(player, c_PU_VoidRay, 2, 999, c_continuousMerge);

    if (AIGetTime() < 720) {
        if (AITechCount(player, c_PB_Stargate, c_techCountQueuedOrBetter) < 3) {
            return false;
        }
    }

    return true;  // Transition to MidGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirOneBasePureAirVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidAirOneBasePureAirVyHd (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 15, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 20, c_PU_Probe );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 1, c_PB_Stargate );
    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 1, c_PU_VoidRay );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 3, c_PU_VoidRay );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 4, c_PU_Zealot );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 4, c_PU_VoidRay );
    AISetStock( player, 7, c_PB_Pylon );
    
    ProtossHDDefaultExtraMidStock(player);

    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_VoidRay, 1, 1, c_continuousMerge);

    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PU_VoidRay, c_techCountCompleteOnly) < 3) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirOneBasePureDropVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidAirOneBasePureDropVyHd (int player) {
    AIClearStock(player);
    
    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 13, c_PU_Probe );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 14, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    
    ProtossBasicDefenseStock(player);

    AISetStock( player, 16, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    AISetStock( player, 1, c_PU_Zealot );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PU_Zealot );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Zealot );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 2, c_PB_Assimilator );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 22, c_PU_Probe );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 1, c_PU_WarpPrism );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 24, c_PU_Probe );
    AISetStock( player, 2, c_PU_WarpPrism );
    AISetStock( player, 5, c_PU_Zealot );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 2, c_PU_Observer );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 5, c_PU_Stalker );
    
    ProtossHDDefaultExtraMidStock(player);

    AIEnableStock(player);

    //---------------------------------------------------------
    
    if (AITechCount(player, c_PU_WarpPrism, c_techCountCompleteOnly) >= 2) {
        AISetAttackStatus(player, c_PU_Zealot, 2, 3, c_continuousMerge);
        AISetAttackStatus(player, c_PU_Stalker, 2, 3, c_continuousMerge);
    }

    if (AIGetTime() < 480) {
        if (AITechCount(player, c_PB_Stargate, c_techCountCompleteOnly) < 2) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirExpansionVoidrayVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidAirExpansionVoidrayVyHd (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 16, c_PU_Probe );
    
    ProtossBasicDefenseStock(player);
    
    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 16) {
        if (ProtossHDFastExpand(player)) { return false; }
    }
    
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 32, c_PU_Probe );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 4, c_PB_Assimilator );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 38, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 42, c_PU_Probe );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 44, c_PU_Probe );
    AISetStock( player, 4, c_PU_VoidRay );
    AISetStock( player, 48, c_PU_Probe );
    AISetStock( player, 8, c_PB_Pylon );
    AISetStock( player, 6, c_PU_VoidRay );
    AISetStock( player, 9, c_PB_Pylon );
    AISetStock( player, 52, c_PU_Probe );
    AISetStock( player, 8, c_PU_VoidRay );
    AISetStock( player, 56, c_PU_Probe );
    AISetStock( player, 11, c_PB_Pylon );
    
    ProtossHDDefaultExtraMidStock(player);
    
    AIEnableStock(player);

    //---------------------------------------------------------

    AISetAttackStatus(player, c_PU_VoidRay, 1, 6, c_continuousMerge);
    
    if (AIGetTime() < 570) {
        if (AITechCount(player, c_PU_VoidRay, c_techCountInProgressOrBetter) < 8) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirExpansionCapitalAirVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidAirExpansionCapitalAirVyHd (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 16, c_PU_Probe );
    
    ProtossBasicDefenseStock(player);
    
    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 16) {
        if (ProtossHDFastExpand(player)) { return false; }
    }
    
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 32, c_PU_Probe );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 4, c_PB_Assimilator );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 38, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Phoenix );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 42, c_PU_Probe );
    AISetStock( player, 1, c_PB_FleetBeacon );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 46, c_PU_Probe );
    AISetStock( player, 2, c_PU_Carrier );
    AISetStock( player, 48, c_PU_Probe );
    AISetStock( player, 9, c_PB_Pylon );
    AISetStock( player, 52, c_PU_Probe );
    AISetStock( player, 4, c_PU_Carrier );
    AISetStock( player, 56, c_PU_Probe );
    
    ProtossHDDefaultExtraMidStock(player);

    AIEnableStock(player);
    
    //---------------------------------------------------------
    
    AISetAttackStatus(player, c_PU_Carrier, 1, 2, c_continuousMerge);
    
    if (AIGetTime() < 570) {
        if (AITechCount(player, c_PU_Carrier, c_techCountInProgressOrBetter) < 2) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirExpansionDropAirVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidAirExpansionDropAirVyHd (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 16, c_PU_Probe );
    
    ProtossBasicDefenseStock(player);
    
    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 16) {
        if (ProtossHDFastExpand(player)) { return false; }
    }
    
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 28, c_PU_Probe );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 32, c_PU_Probe );
    AISetStock( player, 1, c_PB_RoboticsFacility );
    AISetStock( player, 1, c_PU_Stalker );
    AISetStock( player, 1, c_PR_WarpGateResearch );
    AISetStock( player, 34, c_PU_Probe );
    AISetStock( player, 2, c_PB_Gateway );
    AISetStock( player, 36, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_Stalker );
    AISetStock( player, 38, c_PU_Probe );
    AISetStock( player, 1, c_PU_Observer );
    AISetStock( player, 40, c_PU_Probe );
    AISetStock( player, 3, c_PU_Stalker );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 42, c_PU_Probe );
    AISetStock( player, 4, c_PU_Stalker );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 1, c_PB_Stargate );
    AISetStock( player, 46, c_PU_Probe );
    AISetStock( player, 7, c_PB_Pylon );
    AISetStock( player, 1, c_PU_WarpPrism );
    AISetStock( player, 6, c_PU_Stalker );
    AISetStock( player, 48, c_PU_Probe );
    AISetStock( player, 8, c_PB_Pylon );
    AISetStock( player, 4, c_PB_Assimilator );
    AISetStock( player, 2, c_PU_WarpPrism );
    AISetStock( player, 1, c_PU_Phoenix );
    AISetStock( player, 8, c_PU_Stalker );
    AISetStock( player, 3, c_PU_WarpPrism );
    AISetStock( player, 10, c_PB_Pylon );
    AISetStock( player, 52, c_PU_Probe );
    AISetStock( player, 2, c_PU_Phoenix );
    AISetStock( player, 12, c_PU_Stalker );
    AISetStock( player, 1, c_PU_Immortal );
    AISetStock( player, 12, c_PB_Pylon );
    AISetStock( player, 56, c_PU_Probe );
    
    ProtossHDDefaultExtraMidStock(player);
    
    AIEnableStock(player);

    //---------------------------------------------------------

    if (AITechCount(player, c_PU_WarpPrism, c_techCountCompleteOnly) >= 3) {
        AISetAttackStatus(player, c_PU_Stalker, 2, 8, c_continuousMerge);
    }
    
    if (AIGetTime() < 570) {
        if (AITechCount(player, c_PU_Immortal, c_techCountInProgressOrBetter) < 21) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidAirMacroVyHd
//--------------------------------------------------------------------------------------------------
bool ProtossMidAirMacroVyHd (int player) {
    AIClearStock(player);

    AISetStock( player, 1, c_PB_Nexus );
    AISetStock( player, 9, c_PU_Probe );
    AISetStock( player, 1, c_PB_Pylon );
    AISetStock( player, 16, c_PU_Probe );
    
    ProtossBasicDefenseStock(player);
    
    if (AITechCount(player, c_PU_Probe, c_techCountQueuedOrBetter) >= 16) {
        if (ProtossHDFastExpand(player)) { return false; }
    }
    
    AISetStock( player, 17, c_PU_Probe );
    AISetStock( player, 2, c_PB_Pylon );
    AISetStock( player, 18, c_PU_Probe );
    AISetStock( player, 1, c_PB_Assimilator );
    AISetStock( player, 1, c_PB_Gateway );
    AISetStock( player, 20, c_PU_Probe );
    AISetStock( player, 2, c_PB_Assimilator );
    AISetStock( player, 26, c_PU_Probe );
    AISetStock( player, 1, c_PB_CyberneticsCore );
    
    ProtossHDEmergencyDetectionAntiAir(player);

    AISetStock( player, 32, c_PU_Probe );
    AISetStock( player, 2, c_PB_Stargate );
    AISetStock( player, 4, c_PB_Assimilator );
    AISetStock( player, 3, c_PB_Pylon );
    AISetStock( player, 38, c_PU_Probe );
    AISetStock( player, 4, c_PB_Pylon );
    AISetStock( player, 2, c_PU_VoidRay );
    AISetStock( player, 5, c_PB_Pylon );
    AISetStock( player, 42, c_PU_Probe );
    AISetStock( player, 6, c_PB_Pylon );
    AISetStock( player, 44, c_PU_Probe );
    AISetStock( player, 4, c_PU_VoidRay );
    AISetStock( player, 48, c_PU_Probe );
    AISetStock( player, 8, c_PB_Pylon );
    AISetStock( player, 6, c_PU_VoidRay );
    AISetStock( player, 9, c_PB_Pylon );
    AISetStock( player, 52, c_PU_Probe );
    AISetStock( player, 8, c_PU_VoidRay );
    AISetStock( player, 1, c_PB_FleetBeacon );
    AISetStock( player, 56, c_PU_Probe );
    AISetStock( player, 11, c_PB_Pylon );
    
    ProtossHDDefaultExtraMidStock(player);
    
    AIEnableStock(player);

    //---------------------------------------------------------
    
    // don't attack alone, but be willing to support an attack
    AISetAttackStatus(player, c_PU_VoidRay, 2, 999, c_continuousMerge);
    
    if (AIGetTime() < 570) {
        if (AITechCount(player, c_PB_FleetBeacon, c_techCountInProgressOrBetter) < 1) {
            return false;
        }
    }
    
    return true;  // Transition to LateGame
}

//==================================================================================================
//  LATE GAME
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  ProtossLateVyHd
//--------------------------------------------------------------------------------------------------
void ProtossLateVyHd (int player) {
    int armyCompareEstimate = AIArmyComparisonEstimate(player);
    int foodUsed = PlayerGetPropertyInt(player, c_playerPropSuppliesUsed);
    int minPylonCount;

    // only allow scouting if I have an observer to scout with, ie stop using workers
    AIScoutingEnable(player, 1, c_PU_Observer);
    // calculate a limit on how much simultaneous teching can happen
    AISetTechLimitLevels(player);


// ****************** Start Restock ****************** //
    AIClearStock(player);

// Very basic recovery start
    ProtossHDRecoveryStart(player);
    
// Minimum farms & peons
    AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
    AISetStockPeons( player, 16, c_PU_Probe, c_stockMinPeons, c_stockAlways);

// Desperate expand (we're about to run out of minerals/gas)
    AIDefaultExpansion(player, c_PB_Nexus, 3000, 1000, c_expandVitalHard);

// Choose what type of endgame army we'd like to make
    UpdateHDProtossLateGameArmy(player);

// Bare minimum army
    if (foodUsed < 180) {
        ProtossHDLateGameArmy(player, e_armyTypeMinimum);
    }

// Basic peons
    AISetStockPeons( player, 24, c_PU_Probe, c_stockMinPeons, c_stockAlways);

// Make sure we have enough pylon space to build things at the main town
    minPylonCount = 2;
    if (AIIsTownFull(player, c_townMain)) { 
        minPylonCount = 6;
    }
    if (AIGetBuildingCountInTown(player, c_townMain, c_PB_Pylon, c_techCountQueuedOrBetter) < minPylonCount) {
        minPylonCount = AITechCount(player, c_PB_Pylon, c_techCountQueuedOrBetter) + 1;
        AISetStockUnitNext( player, minPylonCount, c_PB_Pylon, c_stockAlways );
    }

// Urgent early detection
    if (AINeedsDetection(player)) {
        AISetStock( player, 1, c_PU_Observer );
    }

// Barely adequete army including anti-air
    if (foodUsed < 180) {
        ProtossHDLateGameArmy(player, e_armyTypeBase);
    }
   
// Basic towns, farms, & peons
    AIDefaultEconomy(player, c_PB_Nexus, c_PB_Assimilator, c_PB_Pylon, c_PU_Probe, 70, c_stockAlways);

// Low expand (we're running low on minerals/gas)
    AIAdjustedDefaultExpansion(player, c_PB_Nexus, 7000, 3000, c_expandVitalHard, armyCompareEstimate);
 
// Minimum normal detection
    if (AISuspectDetectionDanger(player, c_lateDetectionDangerTime)) {
        AISetStock( player, 1, c_PU_Observer );
    }

// On an air map build at least one transport as long as we have some other units/army
    if (AIGetUserInt(player, c_numGroundStartLocs) == 0) {
        AISetStock( player, 1, c_PU_WarpPrism );
    }

// Nearly food capped units
    if (foodUsed > 160) {
        AISetStock( player, 3, c_PU_Observer );
        AISetStock( player, 2, c_PU_WarpPrism );

        if (foodUsed >= 180) {
            ProtossHDLateGameArmy(player, e_armyTypeMinimum);
            ProtossHDLateGameArmy(player, e_armyTypeBase);
        }
    }

// Basic small army
    ProtossHDLateGameArmy(player, e_armyTypeSmall);
    
// Very important tech
    AISetStock( player, 1, c_PR_WarpGateResearch );

// Basic production buildings
    AISetStock( player, 2,  c_PB_Gateway );
    AISetStock( player, 1,  c_PB_RoboticsFacility );
    
// Normal expand
    AIAdjustedDefaultExpansion(player, c_PB_Nexus, 15000, 6000, c_expandNormalHard, armyCompareEstimate);

// Make Counter Units
    ProtossHDMakeCounters(player);

// Vital upgrades
    ProtossHDVitalUpgrades(player);
    
// Medium sized army
    ProtossHDLateGameArmy(player, e_armyTypeMedium);

// Observer to scout/detect
    AISetStock( player, 1, c_PU_Observer );

// General upgrades
    ProtossHDGeneralUpgrades(player);

// Addition production buildings
    AISetStockUnitNext( player, 3, c_PB_Gateway, c_stockIdle );

// Other towns defense
    ProtossHDDefenseOtherTowns(player);

// Large sized army
    ProtossHDLateGameArmy(player, e_armyTypeLarge);
    
// Main base defense
    ProtossHDDefenseMainTown(player);

// Multiple detectors & scouts & a transport
    AISetStockUnitNext( player, 2, c_PU_Observer, c_stockAlways );
    AISetStock( player, 1, c_PU_WarpPrism );

// Middle expand
    AIAdjustedDefaultExpansion(player, c_PB_Nexus, 20000, 9000, c_expandNormalHard, armyCompareEstimate);

// Extra detection & scouts & transports
    AISetStockUnitNext( player, 3, c_PU_Observer, c_stockAlways );
    AISetStockUnitNext( player, 2, c_PU_WarpPrism, c_stockAlways );

// Late expand
    AIAdjustedDefaultExpansion(player, c_PB_Nexus, 24000, 10000, c_expandNormalHard, armyCompareEstimate);

// Extra production buildings
    AISetStockUnitNext( player, 6, c_PB_Gateway, c_stockIdle );
    AISetStockUnitNext( player, 1, c_PB_TwilightCouncil, c_stockIdle );
    AISetStockUnitNext( player, 3, c_PB_RoboticsFacility, c_stockIdle );
    AISetStockUnitNext( player, 1, c_PB_Stargate, c_stockIdle );

// Extra research buildings
    if (AIHasRes(player,700,500)) {
        AISetStockUnitNext( player, 3, c_PB_Forge, c_stockAlways );
    }

// Minor upgrades
    ProtossHDMinorUpgrades(player);

// Idle expand (very low priority, to prevent us from sitting around with idle peons)
    AIAdjustedDefaultExpansion(player, c_PB_Nexus, 36000, 15000, c_expandIdleHard, armyCompareEstimate);

// Entire Army
    ProtossHDLateGameArmy(player, e_armyTypeFull);

    AIEnableStock(player);    
// ****************** End Restock ****************** //

}
