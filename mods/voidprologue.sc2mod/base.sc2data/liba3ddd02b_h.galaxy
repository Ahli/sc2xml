include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (Void Prologue)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libA3DDD02B_ge_ObjectiveMessageType_ObjectiveDiscovered = 0;
const int libA3DDD02B_ge_ObjectiveMessageType_ObjectiveUpdate = 1;
const int libA3DDD02B_ge_ObjectiveMessageType_ObjectiveCompleted = 2;
const int libA3DDD02B_ge_ObjectiveMessageType_ObjectiveFailed = 3;
const int libA3DDD02B_ge_CampaignMessageType_MissionFailed = 0;
const int libA3DDD02B_ge_CampaignMessageType_Hint = 1;
const int libA3DDD02B_ge_CampaignMessageType_SimpleHint = 2;
const int libA3DDD02B_ge_CampaignMessageType_Secret = 3;
const int libA3DDD02B_ge_CampaignMessageType_Warning = 4;
const int libA3DDD02B_ge_CampaignMessageType_NewUnitAcquired = 5;
const int libA3DDD02B_ge_CampaignMessageType_NewUnitAvailable = 6;
const int libA3DDD02B_ge_CampaignMessageType_NewTechAvailable = 7;
const int libA3DDD02B_ge_CampaignMessageType_NewUnitAvailable2 = 8;
const int libA3DDD02B_ge_CampaignMessageFormatNotFormat_FormatMessage = 0;
const int libA3DDD02B_ge_CampaignMessageFormatNotFormat_NotFormatMessage = 1;
const int libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter = 0;
const int libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter = 1;
const int libA3DDD02B_ge_CampaignTransmissionPortraitOptioins_DontShowPortrait = 2;
const int libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior = 0;
const int libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_PlayCueSound = 1;
const int libA3DDD02B_ge_CampaignTransmissionCueSoundOptions_DontPlayCueSound = 2;
const int libA3DDD02B_ge_CampaignTransmissionOptions_ChatBubble = 0;
const int libA3DDD02B_ge_DropPodRace_Terran = 0;
const int libA3DDD02B_ge_DropPodRace_Zerg = 1;
const int libA3DDD02B_ge_CampaignTimerPositiveNegativeOptions_Positive = 0;
const int libA3DDD02B_ge_CampaignTimerPositiveNegativeOptions_Negative = 1;
const int libA3DDD02B_ge_BossBarRaceSwarmCampaign_Terran = 0;
const int libA3DDD02B_ge_BossBarRaceSwarmCampaign_Zerg = 1;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_CinematicInTransmission = 0;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_Speech = 1;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_Game = 2;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_Victory = 3;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_Speech2 = 4;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_Speech3 = 5;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects = 6;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_LowHealthBegin = 7;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_LowHealthEnd = 8;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_Game2 = 9;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_Game3 = 10;
const int libA3DDD02B_ge_VolumeChannelModeCampaign_CinematicOutofTransmission = 11;
const int libA3DDD02B_ge_CacheResourceType_CustomResource = 0;
const int libA3DDD02B_ge_CacheResourceType_Mineral = 1;
const int libA3DDD02B_ge_CacheResourceType_Vespene = 2;
const int libA3DDD02B_ge_CacheResourceType_Mutagen = 3;
const int libA3DDD02B_ge_CacheResourceType_InfestationLife = 4;
const int libA3DDD02B_ge_CacheResourceType_InfestationEnergy = 5;
const int libA3DDD02B_ge_CacheResourceType_InfestationDamage = 6;
const int libA3DDD02B_ge_CacheResourceType_Influence = 7;
const int libA3DDD02B_ge_CacheResourceType_KerriganLevel = 8;
const int libA3DDD02B_ge_CampaginReticleType_ProtossMainObjective = 0;
const int libA3DDD02B_ge_CampaginReticleType_ProtossBonusObjective = 1;
const int libA3DDD02B_ge_CampaginReticleType_ProtossEnemy = 2;
const int libA3DDD02B_ge_CampaginReticleType_ZergMainObjective = 3;
const int libA3DDD02B_ge_CampaginReticleType_ZergBonusObjective = 4;
const int libA3DDD02B_ge_CampaginReticleType_ZergEnemy = 5;
const int libA3DDD02B_ge_CampaginReticleType_TerranMainObjective = 6;
const int libA3DDD02B_ge_CampaginReticleType_TerranBonusObjective = 7;
const int libA3DDD02B_ge_CampaginReticleType_TerranEnemy = 8;
const int libA3DDD02B_ge_CampaginReticleSize_Large = 0;
const int libA3DDD02B_ge_CampaginReticleSize_Medium = 1;
const int libA3DDD02B_ge_CampaginReticleSize_Small = 2;
const int libA3DDD02B_ge_MissionStatus_Locked = 0;
const int libA3DDD02B_ge_MissionStatus_Available = 1;
const int libA3DDD02B_ge_MissionStatus_Completed = 2;
const int libA3DDD02B_ge_MissionCountOptions_Locked = 0;
const int libA3DDD02B_ge_MissionCountOptions_Available = 1;
const int libA3DDD02B_ge_MissionCountOptions_Completed = 2;
const int libA3DDD02B_ge_MissionCountOptions_All = 3;
const int libA3DDD02B_ge_MissionObjectiveState_Undiscovered = 0;
const int libA3DDD02B_ge_MissionObjectiveState_Available = 1;
const int libA3DDD02B_ge_MissionObjectiveState_Completed = 2;
const int libA3DDD02B_ge_MissionObjectiveState_Failed = 3;
const int libA3DDD02B_ge_HeroUnit_Zeratul = 0;
const int libA3DDD02B_ge_MissionCondition_Sucessful = 0;
const int libA3DDD02B_ge_MissionCondition_Simulation = 1;
const int libA3DDD02B_ge_PP_ArchivesType_Mission = 0;
const int libA3DDD02B_ge_PP_ArchivesType_Scene = 1;

// Constants
const int libA3DDD02B_gv_pP_RePing_MAX = 12;
const fixed libA3DDD02B_gv_campaignObjectiveDelay = 2.0;
const fixed libA3DDD02B_gv_campaignHintDelay = 2.0;
const fixed libA3DDD02B_gv_campaignSecretDelay = 5.0;
const fixed libA3DDD02B_gv_campaignAchievementDelay = 2.0;
const fixed libA3DDD02B_gv_pP_HeroUIUpdateFrequency = 0.25;
const int libA3DDD02B_gv_pPC_HEROUIBARWIDTH = 200;
const int libA3DDD02B_gv_pPC_DifficultyCount = 4;
const int libA3DDD02B_gv_pPC_HelpUnitPanel_EnabledUnitTypeCountMax = 100;
const string libA3DDD02B_gv_pPC_ArmyCategoryStateKey = "PP_ArmyCategoryState_";

// Variable Declarations
int libA3DDD02B_gv_pP_WorldCoverDlg;
int libA3DDD02B_gv_pP_RePingCount;
int[libA3DDD02B_gv_pP_RePing_MAX + 1] libA3DDD02B_gv_pP_RePingArray;
fixed libA3DDD02B_gv_pP_RePingInterval;
int libA3DDD02B_gv_pP_SendTransmissionCampaignIndex;
int libA3DDD02B_gv_pP_SendTransmissionCampaignPortrait;
unit libA3DDD02B_gv_pP_SendTransmissionCampaignSpeaker;
trigger libA3DDD02B_gv_pP_SendTransmissionCampaignTrigger;
int libA3DDD02B_gv_pP_SendTransmissionCampaignPlayingTick;
bool libA3DDD02B_gv_pP_SendTransmissionCampaignChatBubbleOn;
point libA3DDD02B_gv__TP_DropPod_Location;
unitgroup libA3DDD02B_gv__TP_DropPod_Units;
int libA3DDD02B_gv__TP_DropPod_Player;
unit libA3DDD02B_gv__TP_ZergDropPod_Building;
bool libA3DDD02B_gv_pP_MissionVictoryActionQueyeEmpty;
int libA3DDD02B_gv_pP_MissionCompleteTime;
bool libA3DDD02B_gv_pP_GameOver;
int libA3DDD02B_gv__FadeDialog;
int libA3DDD02B_gv__FadeImage;
int libA3DDD02B_gv_pP_PlanetPortrait;
camerainfo libA3DDD02B_gv_pP_PlanetPortraitPlayerCamera;
string libA3DDD02B_gv_pP_PlanetPortraitEvoMissionLight;
int libA3DDD02B_gv_pP_ObjectivePanel;
int libA3DDD02B_gv_pP_ErrorPanel;
timer libA3DDD02B_gv_pP_CombatTimer;
int libA3DDD02B_gv_pP_MissionUIContainer;
text[21] libA3DDD02B_gv_pP_MissionTipTitle;
text[21] libA3DDD02B_gv_pP_MissionTipDescription;
string[21] libA3DDD02B_gv_pP_MissionTipIcons;
int[21] libA3DDD02B_gv_pP_MissionTipType;
int libA3DDD02B_gv_pP_MissionTipCount;
int libA3DDD02B_gv_pP_MissionHelpButton;
string[21] libA3DDD02B_gv_pP_MissionTip;
int libA3DDD02B_gv_pP_MissionHelpButtonTipPanel;
bool libA3DDD02B_gv_pP_ErrorPanelMaskOn;
int libA3DDD02B_gv_pP_ArmyButton;
int libA3DDD02B_gv_pP_ArmyButtonTipPanel;
bool libA3DDD02B_gv_pP_ArmyButtonTipReady;
int libA3DDD02B_gv_pP_VictoryStatDlg;
int libA3DDD02B_gv_pP_ProgressBarPanel;
int libA3DDD02B_gv_pP_ProgressBarLabelTitle;
int libA3DDD02B_gv_pP_ProgressBarLabelBarLeft;
int libA3DDD02B_gv_pP_ProgressBarLabelBarRight;
int libA3DDD02B_gv_pP_ProgressBarImageBar;
int libA3DDD02B_gv_pP_ProgressBarMax;
int libA3DDD02B_gv_pP_ProgressBarMin;
int libA3DDD02B_gv_pP_ProgressBarProgress;
bool libA3DDD02B_gv_pP_ProgressBarShowing;
int libA3DDD02B_gv_pPC_ProgressBarWidth;
int libA3DDD02B_gv_pPC_ProgressBarHeight;
int libA3DDD02B_gv_pP_BB_Race;
string libA3DDD02B_gv_pP_BB_Portraits;
text libA3DDD02B_gv_pP_BB_Title;
unit libA3DDD02B_gv_pP_BB_Boss;
fixed libA3DDD02B_gv_pP_BB_MaxValue;
fixed libA3DDD02B_gv_pP_BB_CurrentValue;
int libA3DDD02B_gv_pP_BB_HPOldWidth;
int libA3DDD02B_gv_pP_BB_Panel;
int libA3DDD02B_gv_pP_BB_PortraitImage;
int libA3DDD02B_gv_pP_BB_TitleLabel;
int libA3DDD02B_gv_pP_BB_HpLabel;
int libA3DDD02B_gv_pP_BB_HpFullImage;
int libA3DDD02B_gv_pP_BB_HpCurrentImage;
int libA3DDD02B_gv_pP_BB_BorderImage;
int libA3DDD02B_gv_pP_BB_HpBackground;
unit[3] libA3DDD02B_gv_pP_HeroUIUnit;
string[3] libA3DDD02B_gv_pP_HeroUIIcon;
int[3] libA3DDD02B_gv_pP_HeroUIPositionX;
int[3] libA3DDD02B_gv_pP_HeroUIPositionY;
bool[3] libA3DDD02B_gv_pP_HeroUIShowLevel;
int libA3DDD02B_gv_pPC_HEROUILIFEBARHEIGHT;
int libA3DDD02B_gv_pPC_HEROUISHIELDBARHEIGHT;
int libA3DDD02B_gv_pPC_HEROUIENERGYBARHEIGHT;
int[3] libA3DDD02B_gv_pP_HeroUIPanel;
int[3] libA3DDD02B_gv_pP_HeroUIDialogBorderImage;
int[3] libA3DDD02B_gv_pP_HeroUIDialogBorderImageNoEnergy;
int[3] libA3DDD02B_gv_pP_HeroUIDialogIconImage;
int[3] libA3DDD02B_gv_pP_HeroUIDialogCooldownImage;
int[3] libA3DDD02B_gv_pP_HeroUIDialogDamageTakenImage;
int[3] libA3DDD02B_gv_pP_HeroUIDialogDamageTakenLabel;
int[3] libA3DDD02B_gv_pP_HeroUIDialogNameLabel;
int[3] libA3DDD02B_gv_pP_HeroUIDialogShieldsLabel;
int[3] libA3DDD02B_gv_pP_HeroUIDialogLevelLabel;
int[3] libA3DDD02B_gv_pP_HeroUIDialogHealthBarImage;
int[3] libA3DDD02B_gv_pP_HeroUIDialogHealthBarBackground;
int[3] libA3DDD02B_gv_pP_HeroUIDialogShieldsBarImage;
int[3] libA3DDD02B_gv_pP_HeroUIDialogShieldsBarBackground;
int[3] libA3DDD02B_gv_pP_HeroUIDialogEnergyBarImage;
int[3] libA3DDD02B_gv_pP_HeroUIDialogEnergyBarBackground;
int[3] libA3DDD02B_gv_pP_HeroUIDialogHealthLabel;
int[3] libA3DDD02B_gv_pP_HeroUIDialogEnergyLabel;
int[3] libA3DDD02B_gv_pP_HeroUIDialogButton;
int[3] libA3DDD02B_gv_pP_HeroUIDialogLevelBox;
int[3] libA3DDD02B_gv_pP_HeroUIDialogLevelupPortrait;
fixed[3] libA3DDD02B_gv_pP_HeroUIDamageTimer;
fixed libA3DDD02B_gv_pP_HeroUIDamage;
int libA3DDD02B_gv_pP_MissionAutoSaveIndex;
bool libA3DDD02B_gv_pP_MissionAutoSaveDone;
bool libA3DDD02B_gv_pP_VolumeChannelModeInSpeech;
bool libA3DDD02B_gv_pP_VolumeChannelModeInLowHP;
int libA3DDD02B_gv_pP_AchievementPosition;
int libA3DDD02B_gv_pP_AchievementsDisplayed;
bool libA3DDD02B_gv_pP_AchievementDebugEnabled;
bool libA3DDD02B_gv_pC_AchievementDebugToastSuppressed;
int libA3DDD02B_gv_pPX_CampaignDifficulty;
int libA3DDD02B_gv_zSX_MissionObjRewardsEarnedCurrent;
string libA3DDD02B_gv_pP_CutsceneTimestamp;
string libA3DDD02B_gv_pP_PlaySceneCurrentScene;
int libA3DDD02B_gv_pP_CurrentCampaignCutscene;
bool libA3DDD02B_gv_pP_CampaignCutsceneSkippable;
int libA3DDD02B_gv_pP_CampaignCutsceneDialog;
bool libA3DDD02B_gv_pP_CampaignCutsceneSkipped;
bool libA3DDD02B_gv_pP_ApplyingCampaignTech;
int libA3DDD02B_gv_pPX_HelpUnitPanel_EnabledUnitTypeCount;
string[libA3DDD02B_gv_pPC_HelpUnitPanel_EnabledUnitTypeCountMax + 1] libA3DDD02B_gv_pPX_HelpUnitPanel_EnabledUnitTypes;
unit libA3DDD02B_gv_pP_Zeratul;
actor libA3DDD02B_gv_pP_ZeratulActor;
string libA3DDD02B_gv_pP_CurrentMap;
bool libA3DDD02B_gv_pP_InStoryMode;
bool libA3DDD02B_gv_pP_InCompletedCampaign;
string libA3DDD02B_gv_pPX_LastSuccessfulMission;
bool libA3DDD02B_gv_pPX_LastMissionSimulation;
bool libA3DDD02B_gv_pPX_LastMissionSuccess;
string libA3DDD02B_gv_pPX_LastMission;
bool libA3DDD02B_gv_pPX_LastMapSuccess;
string libA3DDD02B_gv_pPX_LastMap;
bool libA3DDD02B_gv_pPX_IsVictoryPlayAgain;
bool libA3DDD02B_gv_pPX_IsSimulation;
bank libA3DDD02B_gv_pC_ArchivesBank;
string libA3DDD02B_gv_pC_ArchiveBankName;
bool libA3DDD02B_gv_pP_ArchivesReloading;
bool libA3DDD02B_gv_pP_ArchivesVisited;
bool libA3DDD02B_gv_pP_InLoadedMission;
string libA3DDD02B_gv_pP_CampaignBankName;
bank libA3DDD02B_gv_pP_CampaignBank;
int libA3DDD02B_gv_pP_CampaignDataBackup_MissionBestTime;
int libA3DDD02B_gv_pP_MLDialog;
int libA3DDD02B_gv_pP_MLPanel;
int libA3DDD02B_gv_pP_MLTitle;
int libA3DDD02B_gv_pP_MLObjective;
int libA3DDD02B_gv_pP_MLContactPortrait;
int libA3DDD02B_gv_pP_MLSubtitleFrame;
int libA3DDD02B_gv_pP_MLBackgroundImage;
int[4] libA3DDD02B_gv_pP_MLAchievements;
int libA3DDD02B_gv_pP_MLLaunchButton;
int libA3DDD02B_gv_pP_MLQuitButton;
int libA3DDD02B_gv_pP_MLBackButton;
int libA3DDD02B_gv_pP_MLPitchFrame;
int libA3DDD02B_gv_pP_MLPitchPlayButton;
int libA3DDD02B_gv_pP_MLPitchStopButton;
int libA3DDD02B_gv_pP_MLDifficultyPulldown;
string libA3DDD02B_gv_pP_NextMission;
bool libA3DDD02B_gv_pP_MissionLaunchQuitToggled;
bool libA3DDD02B_gv_pP_MissionLaunchedToggled;
bool libA3DDD02B_gv_pP_MissionLaunchPitchPlaying;
bool libA3DDD02B_gv_pP_EndCinematicFinished;
bool libA3DDD02B_gv_pP_EndCreditFinished;
int libA3DDD02B_gv_pU_VSDialog;
int libA3DDD02B_gv_pU_VSPanel;
int libA3DDD02B_gv_pU_VSMainPanel;
int libA3DDD02B_gv_pU_VSBackgroundImage;
int libA3DDD02B_gv_pU_VSLabelMissionTitle;
int libA3DDD02B_gv_pU_VSLabelVictoryTitle;
int libA3DDD02B_gv_pU_VSLabelTime;
int libA3DDD02B_gv_pU_VSBtnContinue;
int libA3DDD02B_gv_pU_VSBtnPlayAgain;
int libA3DDD02B_gv_pU_VSRestartPanel;
int libA3DDD02B_gv_pU_VSRestartDifficultyPulldown;
int libA3DDD02B_gv_pU_VSRestartRestartButton;
int libA3DDD02B_gv_pU_VSRestartCancelButton;
int libA3DDD02B_gv_pU_VSBackgroundCover;
int libA3DDD02B_gv_pU_VSRewardBonusLevelPanel;
int libA3DDD02B_gv_pU_VSRewardBonusLevelTextLabel;
int libA3DDD02B_gv_pP_VSRewardLevelPanel;
int libA3DDD02B_gv_pP_VSRewardLevelTextLabel;
int libA3DDD02B_gv_pP_VSRewardNewUnitPanel;
int libA3DDD02B_gv_pP_VSRewardNewUnitTextLabel;
int libA3DDD02B_gv_pU_VSRewardNewFactionPanel;
int libA3DDD02B_gv_pU_VSRewardNewFactionTextLabel;
int libA3DDD02B_gv_pP_VSRewardEmptyLabel;
int libA3DDD02B_gv_pP_VSRewardSummaryLabel;
int libA3DDD02B_gv_pP_VSRewardSummaryUnderline;
int libA3DDD02B_gv_pU_VSAchievementTitle;
int[4] libA3DDD02B_gv_zS_VSAchievementTitle2;
int libA3DDD02B_gv_pP_ArchivesPanel;
int libA3DDD02B_gv_pP_ArchivesTitle;
int libA3DDD02B_gv_pP_ArchivesBackButton;
int libA3DDD02B_gv_pP_ArchivesQuitButton;
int libA3DDD02B_gv_pP_ArchivesMissionPanel;
int libA3DDD02B_gv_pP_ArchivesMissionTitle;
int libA3DDD02B_gv_pP_ArchivesMissionBonusLabel;
int libA3DDD02B_gv_pP_ArchivesMissionImage;
int libA3DDD02B_gv_pP_ArchivesAchievementPanel;
int[4] libA3DDD02B_gv_pP_ArchivesAchievements;
int libA3DDD02B_gv_pP_ArchivesDifficultyPanel;
int[5] libA3DDD02B_gv_pP_ArchivesDifficultyLabels;
int[5] libA3DDD02B_gv_pP_ArchivesDifficultyTimes;
int libA3DDD02B_gv_pP_ArchivesMissionPlayButton;
int libA3DDD02B_gv_pP_ArchivesScenePanel;
int libA3DDD02B_gv_pP_ArchivesSceneTitle;
int libA3DDD02B_gv_pP_ArchivesSceneImage;
int libA3DDD02B_gv_pP_ArchivesScenePlayButton;
int libA3DDD02B_gv_pP_ArchivesLoadingDialog;
int libA3DDD02B_gv_pP_ArchivesLoadingLabel;
bool libA3DDD02B_gv_pP_MissionArchiveOverlayCreated;
bool libA3DDD02B_gv_pP_ArchivesSynced;
bool libA3DDD02B_gv_pU_ArchivesFirstOpen;
bool libA3DDD02B_gv_pP_MasterArchivesEnabled;
int libA3DDD02B_gv_pUC_ArchivesMissionLoadingWidth;
int libA3DDD02B_gv_pUC_ArchivesMissionLoadingHeight;
int libA3DDD02B_gv_pUC_ArchivesMissionTargetWidth;
int libA3DDD02B_gv_pUC_ArchivesMissionTargetHeight;
trigger libA3DDD02B_gv_pP_FootageRecordingCallback;
trigger libA3DDD02B_gv_pP_TechLimitsCallback;

// Function Declarations
text libA3DDD02B_gf_FormatTimeCampaign (int lp_second);
string libA3DDD02B_gf_PP_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player);
void libA3DDD02B_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime);
void libA3DDD02B_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency);
void libA3DDD02B_gf_PP_MissionInit ();
void libA3DDD02B_gf_AddRemoveObjectiveRePing (int lp_ping, bool lp_addRemove, fixed lp_wait, fixed lp_interval);
void libA3DDD02B_gf_ObjectiveRePing (int lp_ping);
void libA3DDD02B_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot);
void libA3DDD02B_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption);
void libA3DDD02B_gf_SendTransmissionCampaign2 (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption);
void libA3DDD02B_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff);
void libA3DDD02B_gf_PP_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor);
void libA3DDD02B_gf_PP_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, actor lp_talkRing, int lp_ping, int lp_localIndex);
void libA3DDD02B_gf_HideCampaignTransmissionPortrait ();
fixed libA3DDD02B_gf_ConvesationLineDuration (string lp_conversationLine);
void libA3DDD02B_gf__ZergDropPod (point lp_location, unitgroup lp_units, int lp_player);
void libA3DDD02B_gf__TerranDropPod (point lp_location, unitgroup lp_units, int lp_player);
void libA3DDD02B_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player);
void libA3DDD02B_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait);
void libA3DDD02B_gf__CreateDropPodForBuildingDontWait (string lp_buildingType, point lp_landingPoint, int lp_player);
void libA3DDD02B_gf__CreateDropPodForBuildingWait (string lp_buildingType, point lp_landingPoint, int lp_player);
string libA3DDD02B_gf__LastDroppedUnitsDataTableName ();
unitgroup libA3DDD02B_gf_LastDroppedUnits ();
void libA3DDD02B_gf_PP_PostMissionVictoryUpdate ();
void libA3DDD02B_gf_PP_GameOver ();
void libA3DDD02B_gf_EndCampaignMission (int lp_player, int lp_type);
void libA3DDD02B_gf_RunMissionVictorySequence (trigger lp_victoryCinematic);
void libA3DDD02B_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone);
void libA3DDD02B_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libA3DDD02B_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libA3DDD02B_gf__FadeCreateDialog ();
void libA3DDD02B_gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light);
void libA3DDD02B_gf_ZoomInPlanetPortrait ();
void libA3DDD02B_gf_HidePlanetPortrait ();
void libA3DDD02B_gf_PP_UseUnitNameAsUnitTip (unit lp_unit);
void libA3DDD02B_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void libA3DDD02B_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
bool libA3DDD02B_gf_PP_DisplayResourcePickupInfo ();
bool libA3DDD02B_gf_PP_ResourcePickupUnit (unit lp_resource);
void libA3DDD02B_gf_AddMissionTipUserData (string lp_tipData);
void libA3DDD02B_gf_DisplayMissionTip (text lp_buttonText);
void libA3DDD02B_gf_ShowHideMissionTip (bool lp_showHide);
void libA3DDD02B_gf_PP_RefreshTip ();
void libA3DDD02B_gf_DifficultySetting (int lp_difficulty);
void libA3DDD02B_gf_PP_UpdateObjectivePanelMask ();
void libA3DDD02B_gf_PP_UpdateErrorPanelMask ();
void libA3DDD02B_gf_PP_UpdateErrorPanelMaskSingle ();
void libA3DDD02B_gf_TimerWindowCreate2 (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed, int lp_positiveNegativeOptions);
color libA3DDD02B_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps);
void libA3DDD02B_gf_DisplayArmyButton (bool lp_doDoNot);
void libA3DDD02B_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max);
void libA3DDD02B_gf_SetProgressBarTitle (text lp_title);
void libA3DDD02B_gf_SetProgressBarValueRange (int lp_min, int lp_max);
void libA3DDD02B_gf_SetProgressBarLabel (text lp_label);
void libA3DDD02B_gf_SetProgressBarProgress (int lp_progress);
void libA3DDD02B_gf_SetProgressBarColor (color lp_color);
void libA3DDD02B_gf_ShowHideProgressBar (bool lp_showHide);
void libA3DDD02B_gf_PP_UpdateProgressBar ();
color libA3DDD02B_gf_GetProgressBarColorCampaign ();
int libA3DDD02B_gf_PP_BB_HPBarCurrentWidth ();
text libA3DDD02B_gf_PP_BB_HPBarFormatLabel ();
void libA3DDD02B_gf_PP_BB_HPBarChange ();
void libA3DDD02B_gf_DisplaySingularBossBarSwarmCampaign (string lp_portrait, text lp_title, int lp_max);
void libA3DDD02B_gf_SetSingularBossBarMaximumValueSwarmCampaign (int lp_max, bool lp_refresh);
void libA3DDD02B_gf_SetSingularBossBarCurrentValueSwarmCampaign (int lp_current, bool lp_refresh);
void libA3DDD02B_gf_SetSingularBossBarBossSwarmCampaign (unit lp_boss, bool lp_refresh);
void libA3DDD02B_gf_ShowHideSingularBossBarSwarmCampaign (bool lp_showHide);
void libA3DDD02B_gf_RefreshSingularBossBarSwarmCampaign ();
void libA3DDD02B_gf_SetSingularBossBarColor (color lp_color);
void libA3DDD02B_gf_SetSingularBossBarTitleColor (color lp_color);
void libA3DDD02B_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit);
void libA3DDD02B_gf_PP_ShowHideHeroPanel (bool lp_showHide);
void libA3DDD02B_gf_PP_CreateHeroPanel (int lp_index);
void libA3DDD02B_gf_PP_UpdateHeroPanel (int lp_index);
void libA3DDD02B_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip);
void libA3DDD02B_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color);
void libA3DDD02B_gf_CreateMissionAutosavePoint (text lp_description);
void libA3DDD02B_gf_PP_MissionAutoSave (text lp_description);
void libA3DDD02B_gf_CreateTipCampaign (string lp_tipData, int lp_tipType, playergroup lp_players);
void libA3DDD02B_gf_SetAllSoundChannelVolumesCampaign (int lp_mode);
void libA3DDD02B_gf_MuteUnmuteAllSoundChannels (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players);
unit libA3DDD02B_gf_PP_NexusBestWorkerRallyMineral (unit lp_nexus);
void libA3DDD02B_gf_SetWorkerRallyPointforNexus (unit lp_nexus);
void libA3DDD02B_gf_SetWorkerRallyPointsforPlayersNexuses (int lp_player);
void libA3DDD02B_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player);
void libA3DDD02B_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void libA3DDD02B_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void libA3DDD02B_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void libA3DDD02B_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount);
text libA3DDD02B_gf_FormatTextWithReplacement (text lp_text, text lp_replacement1, text lp_replacement2, text lp_replacement3, text lp_replacement4);
unit libA3DDD02B_gf_PP_HatcheryBestWorkerRallyMineral (unit lp_hatcher);
void libA3DDD02B_gf_SetHatcheryRallyPoint (unit lp_hatchery, point lp_rallyPoint);
void libA3DDD02B_gf_SetAllHatcheriesRallyPoints (int lp_player);
string libA3DDD02B_gf_PP_ReticleModelOfStyle (int lp_type, int lp_size);
string libA3DDD02B_gf_PP_ReticleTextFontOfStyle (int lp_type);
void libA3DDD02B_gf_PP_ReticleApplyTint (actor lp_reticle, int lp_type2);
void libA3DDD02B_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location);
void libA3DDD02B_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint);
void libA3DDD02B_gf_CampaignAwardAchievement (string lp_achievement, int lp_player);
void libA3DDD02B_gf_PC_AchievementAwardEarned ();
void libA3DDD02B_gf_PC_AchievementAwardMission (string lp_completedMission);
void libA3DDD02B_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound);
bool libA3DDD02B_gf_PlayerIsInCombatCampaign (int lp_player);
void libA3DDD02B_gf_ShareVisionAmongPlayers (playergroup lp_players);
void libA3DDD02B_gf_CinematicModeSwarmCampaign (bool lp_onOff, fixed lp_duration);
bool libA3DDD02B_gf_PP_StartingWorkerAutoHarvestEnabled ();
void libA3DDD02B_gf_StartingWorkersAutoHarvest (region lp_regionMineralWorker, region lp_regionGasWorker);
void libA3DDD02B_gf_PP_ResetAbilityCD (abilcmd lp_abilityCommand, unit lp_hero);
int libA3DDD02B_gf_PP_DifficultyIndex (int lp_difficulty);
int libA3DDD02B_gf_PP_DifficultyFromIndex (int lp_index);
void libA3DDD02B_gf_PP_SetCampaignDifficulty (int lp_difficulty);
int libA3DDD02B_gf_DifficultyValuePrologueInteger (int lp_easy, int lp_normal, int lp_hard, int lp_brutal);
fixed libA3DDD02B_gf_DifficultyValuePrologueReal (fixed lp_easy, fixed lp_normal, fixed lp_hard, fixed lp_brutal);
bool libA3DDD02B_gf_DifficultyValuePrologueBoolean (bool lp_easy, bool lp_normal, bool lp_hard, bool lp_brutal);
string libA3DDD02B_gf_DifficultyValuePrologueUnitType (string lp_easy, string lp_normal, string lp_hard, string lp_brutal);
string libA3DDD02B_gf_StoryMapLoadingScreenImage (string lp_map);
string libA3DDD02B_gf_StoryMapLoadingScreenVictoryImage (string lp_map);
string libA3DDD02B_gf_StoryMapMissionArchiveBackgroundImage (string lp_map);
bool libA3DDD02B_gf_StoryMapTypeCheck (string lp_map, int lp_mapType);
string libA3DDD02B_gf_StoryMapFile (string lp_map);
text libA3DDD02B_gf_StoryMapName (string lp_map);
text libA3DDD02B_gf_StoryMapNameLowerCase (string lp_map);
text libA3DDD02B_gf_StoryMapHelp (string lp_map);
text libA3DDD02B_gf_StoryMapHelp2 (string lp_map);
text libA3DDD02B_gf_StoryMapHelp3 (string lp_map);
text libA3DDD02B_gf_StoryMapHelp4 (string lp_map);
string libA3DDD02B_gf_StoryMapContactPortrait (string lp_map);
int libA3DDD02B_gf_MissionStatusAge (string lp_mission, int lp_status);
int libA3DDD02B_gf_MissionStatus (string lp_mission);
bool libA3DDD02B_gf_MissionStatusCheck (string lp_mission, int lp_status);
string libA3DDD02B_gf_MissionPitch (string lp_mission);
string libA3DDD02B_gf_TravelPitch (string lp_mission);
int libA3DDD02B_gf_NumberOfMissions (int lp_options);
int libA3DDD02B_gf_NumberOfMissionsAll (int lp_options);
int libA3DDD02B_gf_NumberOfMissionArcsCompleted ();
int libA3DDD02B_gf_MissionCompleteBestTime (string lp_mission, int lp_difficulty);
string libA3DDD02B_gf_CurrentMap ();
string libA3DDD02B_gf_MissionArmyCategoryUnlocked (string lp_mission);
int libA3DDD02B_gf_MissionRewardTotalEarned (string lp_mission, string lp_type);
int libA3DDD02B_gf_MissionRewardTotal (string lp_mission, string lp_type);
string libA3DDD02B_gf_MissionDefaultMusic ();
bool libA3DDD02B_gf_MissionCompletedOnDifficulty (string lp_mission, int lp_difficulty);
string libA3DDD02B_gf_PP_MapUserDataInstance (string lp_map);
string libA3DDD02B_gf_PP_MapDataFromUserDataInstance (string lp_map);
string libA3DDD02B_gf_PP_StoryMapBankID (string lp_map);
bool libA3DDD02B_gf_PP_MissionisInstallation (string lp_mission);
int libA3DDD02B_gf_PP_CompletedMissionCountOnDifficulty (int lp_difficulty);
void libA3DDD02B_gf_LaunchMission (string lp_mission, bool lp_simulation, int lp_difficulty);
void libA3DDD02B_gf_StoryMapSwitch (string lp_nextMap);
void libA3DDD02B_gf_UpdateMissionFlow ();
void libA3DDD02B_gf_PP_SetMissionStatusAge (string lp_mission, int lp_status, int lp_age);
void libA3DDD02B_gf_PP_IncreaseMissionAge (string lp_mission);
void libA3DDD02B_gf_PP_CompleteMission (string lp_mission);
void libA3DDD02B_gf_PP_UpdateSimulationMissionAges (string lp_simulationMap);
void libA3DDD02B_gf_PP_MarkMissionAsStatus (string lp_mission, int lp_status);
void libA3DDD02B_gf_PP_LockUnlockMissionIfCondition (bool lp_lockUnlock, string lp_mission, bool lp_condition);
void libA3DDD02B_gf_PP_SetMissionCompletionBestTime (string lp_mIssion, int lp_difficulty, int lp_time);
void libA3DDD02B_gf_PP_SaveMapToBank (string lp_bankMap, bank lp_targetBank, bool lp_isSimulation);
void libA3DDD02B_gf_PP_LoadMapFromBank (string lp_bankMap, bank lp_sourceBank);
int libA3DDD02B_gf_PP_GetObjectiveForData (string lp_objectiveData);
string libA3DDD02B_gf_PP_ObjectiveUserDataInstance (string lp_objective);
text libA3DDD02B_gf_MissionObjectiveDescription (string lp_objective);
bool libA3DDD02B_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state);
bool libA3DDD02B_gf_MissionObjectiveIsPrimary (string lp_objective);
text libA3DDD02B_gf_MissionObjectiveName (string lp_objective);
int libA3DDD02B_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type);
int libA3DDD02B_gf_MissionObjectiveRewardsAvailable (string lp_objective, string lp_type);
int libA3DDD02B_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type);
int libA3DDD02B_gf_MissionObjectiveItemCount (string lp_objective);
int libA3DDD02B_gf_MissionObjectiveProgress (string lp_objective);
int libA3DDD02B_gf_MissionObjectiveRewards (string lp_objective, string lp_type);
int libA3DDD02B_gf_PP_MissionObjectivePreviousProgress (string lp_objective);
int libA3DDD02B_gf_PP_GetObjectiveTypeInteger (string lp_objective);
bool libA3DDD02B_gf_PP_GetObjectiveTypeBoolean (string lp_objective);
bool libA3DDD02B_gf_PP_AllObjectivesCompletedForMission (string lp_mission);
bool libA3DDD02B_gf_PP_ObjectiveRewardDivided (string lp_objective);
string libA3DDD02B_gf_PP_ObjectiveTableString (string lp_objective);
text libA3DDD02B_gf_PP_CampaignObjectiveBonusText (string lp_objective);
void libA3DDD02B_gf_SetMissionObjectiveProgress2 (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label, bool lp_updatetext);
void libA3DDD02B_gf_SetMissionObjectiveProgressAdvanced (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label, bool lp_updatetext, bool lp_updateObjectiveStateOption);
void libA3DDD02B_gf_UpdateMissionObjectiveText (string lp_objective, int lp_current, bool lp_showHideMax, text lp_label);
void libA3DDD02B_gf_CreateObjectiveCampaign (string lp_objectiveData);
void libA3DDD02B_gf_SetObjectiveStateCampaign (string lp_objective, int lp_state);
void libA3DDD02B_gf_PP_MissionObjectiveProgressDataSet (string lp_objective, int lp_progress, bool lp_updateObjectiveState);
void libA3DDD02B_gf_PP_MissionObjectivePreviousProgressSet (string lp_objective, int lp_progress);
void libA3DDD02B_gf_DisplayConversationTimestamp (string lp_conversation);
void libA3DDD02B_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait);
void libA3DDD02B_gf_HaltTimestamp ();
void libA3DDD02B_gf_PP_DisplayCinematicTimestamp (string lp_scene);
void libA3DDD02B_gf_PlayCinematic (string lp_scene, bool lp_animatic);
string libA3DDD02B_gf_PP_CinematicCutscene (string lp_scene);
void libA3DDD02B_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip);
void libA3DDD02B_gf_CampaignPlayCutscene2 (string lp_file, bool lp_waitDontWait, bool lp_allowSkip);
bool libA3DDD02B_gf_CampaignCutsceneWasSkipped ();
void libA3DDD02B_gf_SetStoryScenePlayed (string lp_scene, bool lp_played);
void libA3DDD02B_gf_PP_FadeAllSoundsExceptMusic (fixed lp_duration, bool lp_wait);
text libA3DDD02B_gf_StorySceneName (string lp_scene);
bool libA3DDD02B_gf_StoryScenePlayed (string lp_scene);
string libA3DDD02B_gf_PP_SceneMovie (string lp_scene);
void libA3DDD02B_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player);
bool libA3DDD02B_gf_CampaignTechUnitIsEnabled (string lp_techUnit);
string libA3DDD02B_gf_PP_CampaignTechUnitType (string lp_techUnit);
void libA3DDD02B_gf_PP_UpdateWeaponArmorUpgrades (int lp_player);
void libA3DDD02B_gf_PP_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player);
void libA3DDD02B_gf_PP_ApplyTech (int lp_player);
void libA3DDD02B_gf_PP_UpdateTechStates (int lp_player);
void libA3DDD02B_gf_PP_ResetTech ();
void libA3DDD02B_gf_PP_StoreTechBonusAtMissionBeginning ();
void libA3DDD02B_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player);
string libA3DDD02B_gf_PP_HelpUnitPanel_EnabledUnitTypeStringID (string lp_unitType);
bool libA3DDD02B_gf_PP_HelpUnitPanel_UnitTypeEnabled (string lp_unitType);
void libA3DDD02B_gf_PP_HelpUnitPanel_AddEnabledUnitType (string lp_unitType);
void libA3DDD02B_gf_PP_HelpUnitPanel_Reset ();
void libA3DDD02B_gf_PP_HelpUnitPanel_UpdatePanel ();
void libA3DDD02B_gf_PP_HelpTechTree_UpdatePanel ();
text libA3DDD02B_gf_StoryArmyCategoryName (string lp_armyCategory);
text libA3DDD02B_gf_StoryArmyCategoryName2 (string lp_armyCategory);
string libA3DDD02B_gf_StoryArmyCategoryIcon (string lp_armyCategory);
bool libA3DDD02B_gf_StoryArmyCategoryStateCheck (string lp_armyCategory, int lp_state);
string libA3DDD02B_gf_StoryArmyCategoryPlanetCamera (string lp_armyCategory);
string libA3DDD02B_gf_StoryArmyCategoryEvolutionMission (string lp_armyCategory);
void libA3DDD02B_gf_PP_SetArmyCategoryState (string lp_armyCategory, int lp_state);
void libA3DDD02B_gf_PP_UpdateArmyCategoryStates (int lp_player);
string libA3DDD02B_gf_PP_TechUnitOfArmyCategory (string lp_armyCategory);
string libA3DDD02B_gf_PP_ArmyCategoryOfTechUnit (string lp_techUnit);
string libA3DDD02B_gf_PP_StoryArmyCategoryUnitType (string lp_armyCategory);
int libA3DDD02B_gf_PP_StoryArmyCategoryState (string lp_armyCategory);
void libA3DDD02B_gf_PP_SaveArmyCategoryToBank (bank lp_bank, string lp_section);
void libA3DDD02B_gf_PP_LoadArmyCategoryFromBank (bank lp_bank, string lp_section);
void libA3DDD02B_gf_PP_ApplyArmyTech (int lp_player);
void libA3DDD02B_gf_PP_ResetArmyTech ();
void libA3DDD02B_gf_CreateHero (point lp_spawnPoint, int lp_player, int lp_type, fixed lp_facing, int lp_flags);
string libA3DDD02B_gf_PP_HeroUnitType (int lp_hero);
void libA3DDD02B_gf_ULoadCampaignData (string lp_map);
void libA3DDD02B_gf_PC_AutoHeatMapTestMode ();
void libA3DDD02B_gf_PC_CompletedSavesEnable ();
void libA3DDD02B_gf_PrepareForMission (string lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryAgain, int lp_difficulty);
void libA3DDD02B_gf_PrepareForStoryMode (int lp_victoryDefeat, int lp_difficulty);
void libA3DDD02B_gf_PrepareForStoryMapSwitch (string lp_nextMap);
void libA3DDD02B_gf_PrepareForStoryModeTransitionalSave ();
void libA3DDD02B_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition);
string libA3DDD02B_gf_PP_NextMission (string lp_mission, bool lp_simulation, int lp_victoryDefeat);
string libA3DDD02B_gf_NextAvailableMission ();
bool libA3DDD02B_gf_CurrentMissionIsSimulation ();
string libA3DDD02B_gf_LastMap ();
bool libA3DDD02B_gf_LastMapConditionCheck (int lp_condition);
string libA3DDD02B_gf_LastMission ();
bool libA3DDD02B_gf_LastMissionConditionCheck (int lp_condition);
string libA3DDD02B_gf_LastSuccessfulMission ();
void libA3DDD02B_gf_PP_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat);
void libA3DDD02B_gf_PP_LoadAllTransitionData (string lp_map);
void libA3DDD02B_gf_PP_SaveTransitionVars (bank lp_targetBank, string lp_map, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, bool lp_resultFromSimulation, bool lp_resultFromVictoryAgain);
void libA3DDD02B_gf_PP_LoadTransitionVars (bank lp_sourceBank, string lp_map);
void libA3DDD02B_gf_PP_PrepareLoadingScreen (string lp_nextMap, bool lp_restart);
void libA3DDD02B_gf_PP_UpdateCampaignScreen (string lp_mission);
void libA3DDD02B_gf_PP_CampaignPreload ();
void libA3DDD02B_gf_ResetCampaignData ();
void libA3DDD02B_gf_PC_OpenArchiveBank ();
void libA3DDD02B_gf_PC_ArchiveBankSave ();
void libA3DDD02B_gf_PC_ArchiveBankLoad ();
void libA3DDD02B_gf_PP_ArchiveBankMissionSave (string lp_mission);
void libA3DDD02B_gf_PP_ArchivesBankSyncForLoad ();
void libA3DDD02B_gf_PP_ArchivesBankSyncForSave ();
bool libA3DDD02B_gf_PC_ArchivesMasterVisited ();
void libA3DDD02B_gf_PP_OpenCampaignBank ();
bool libA3DDD02B_gf_PP_CampaignBankExists ();
void libA3DDD02B_gf_PP_SaveCampaignBank ();
bool libA3DDD02B_gf_PP_MissionSectionExists (string lp_mission);
void libA3DDD02B_gf_PP_SetMissionSectionExists (string lp_mission, bool lp_exist);
void libA3DDD02B_gf_PP_LoadMissionSections ();
void libA3DDD02B_gf_PP_ClampProgressToMission (string lp_mission);
string libA3DDD02B_gf_PP_BankSectionName (string lp_map, string lp_section);
int libA3DDD02B_gf_PP_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default);
bool libA3DDD02B_gf_PP_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default);
string libA3DDD02B_gf_PP_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default);
void libA3DDD02B_gf_PP_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default);
void libA3DDD02B_gf_PP_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default);
void libA3DDD02B_gf_PP_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default);
string libA3DDD02B_gf_PP_BankMIssionDifficultyKey (string lp_mission, int lp_difficulty);
void libA3DDD02B_gf_MissionLaunchDisplay (string lp_mission);
void libA3DDD02B_gf_PP_MissionLaunchClose ();
void libA3DDD02B_gf_PP_MissionLaunchPlayPitch ();
int libA3DDD02B_gf_PP_MissionLaunchSelectedDifficulty ();
string libA3DDD02B_gf_PP_MissionLaunchBackground (string lp_map);
string libA3DDD02B_gf_PP_MissionProperty (string lp_field);
void libA3DDD02B_gf_PP_CampaignVictory ();
void libA3DDD02B_gf_DisplayCampaignVictoryScoreScreen (string lp_mission);
void libA3DDD02B_gf_PU_CreateVictoryScreen ();
void libA3DDD02B_gf_PU_UpdateVictoryScreen (string lp_mission);
void libA3DDD02B_gf_PP_VSDisplayRestartDialog ();
string libA3DDD02B_gf_PP_VictoryScreenBackground (string lp_map);
string libA3DDD02B_gf_MissionCatalogPropertyVictoryScreen (string lp_field, string lp_mission);
string libA3DDD02B_gf_PP_ArchivesDataString (int lp_archive);
string libA3DDD02B_gf_PP_ArchivesDataTypeString (int lp_archive);
void libA3DDD02B_gf_PP_ArchivesOverlayCreate ();
void libA3DDD02B_gf_PP_ArchivesClosed ();
void libA3DDD02B_gf_DisplayMissionArchives ();
string libA3DDD02B_gf_PP_ArchivesLastMissionSelected ();
void libA3DDD02B_gf_PP_ArchivesUpdate ();
int libA3DDD02B_gf_PP_ArchivesScenePriority (string lp_scene);
int libA3DDD02B_gf_PP_ArchivesMissionPriority (string lp_mission);
string libA3DDD02B_gf_PU_ArchivesSelectedScene ();
void libA3DDD02B_gf_PU_ArchivesSetUV (string lp_side, fixed lp_value);
void libA3DDD02B_gf_PU_ArchivesSetUVs (fixed lp_centerX, fixed lp_centerY, fixed lp_scale);
bool libA3DDD02B_gf_CampaignDebugModeIsOn (string lp_mode);
void libA3DDD02B_gf_RegisterFootageRecording (trigger lp_callback);
void libA3DDD02B_gf_PP_FootageRecording ();
void libA3DDD02B_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger);
void libA3DDD02B_gf_PurchaseStorymodeTech ();
void libA3DDD02B_gf_PP_DefaultTechProgress (string lp_mission);

// Trigger Declarations
trigger libA3DDD02B_gt_PP_CinematicModeOn;
trigger libA3DDD02B_gt_PP_CinematicModeGlowOff;
trigger libA3DDD02B_gt_PP_CinematicModeOff;
trigger libA3DDD02B_gt_PP_ObjectiveRePingController;
trigger libA3DDD02B_gt_PP_SendTransmissionCampaignTick;
trigger libA3DDD02B_gt__ZergDropPod;
trigger libA3DDD02B_gt__TerranDropPod;
trigger libA3DDD02B_gt_PP_MissionVictoryCallbackBlockActionQueueOneMinute;
trigger libA3DDD02B_gt_PP_MissionVictoryCallbackBlockActionQueue;
trigger libA3DDD02B_gt_PP_AbortMission;
trigger libA3DDD02B_gt_PP_CampaignUnit;
trigger libA3DDD02B_gt_PP_CampaignUnitCreated;
trigger libA3DDD02B_gt_PP_CampaignUnitChangeOwner;
trigger libA3DDD02B_gt_PP_CampaignUnitInfoUnitMorphes;
trigger libA3DDD02B_gt_PP_ResourcePickupTip;
trigger libA3DDD02B_gt_PP_ResourcePickup;
trigger libA3DDD02B_gt_PP_MissionTipClicked;
trigger libA3DDD02B_gt_PP_FlashArmyButtonHelpTip;
trigger libA3DDD02B_gt_PP_ArmyButtonUsed;
trigger libA3DDD02B_gt_PP_ArmyButtonMissionInit;
trigger libA3DDD02B_gt_PP_VictoryStat;
trigger libA3DDD02B_gt_PP_VictoryStatOff;
trigger libA3DDD02B_gt_PP_BB_BossHPChanged;
trigger libA3DDD02B_gt_PP_BB_MouseHoverText;
trigger libA3DDD02B_gt_PP_HeroPanelUpdate;
trigger libA3DDD02B_gt_PP_HeroUIUnitDamaged;
trigger libA3DDD02B_gt_PP_HeroUIUnitVitalChange;
trigger libA3DDD02B_gt_PP_HeroUIMouseHoverText;
trigger libA3DDD02B_gt_VoidProloguePingSound;
trigger libA3DDD02B_gt_PP_SetCasualRallyPoints;
trigger libA3DDD02B_gt_DisplayTimestamp;
trigger libA3DDD02B_gt_DisplayTimestampSkippable;
trigger libA3DDD02B_gt_PP_CampaignCutsceneSkipped;
trigger libA3DDD02B_gt_PP_PlayCinematicSkippable;
trigger libA3DDD02B_gt_PP_CinematicDetectSkipping;
trigger libA3DDD02B_gt_PP_CinematicHandleSkipping;
trigger libA3DDD02B_gt_PP_WaitForDialogCutscene;
trigger libA3DDD02B_gt_PP_WaitForCutscene;
trigger libA3DDD02B_gt_PP_ArchivesBankLoadSyncComplete;
trigger libA3DDD02B_gt_PP_ArchivesBankSaveSyncComplete;
trigger libA3DDD02B_gt_PP_ArchivesHandleMissionLoad;
trigger libA3DDD02B_gt_PP_CreateLaunchScreen;
trigger libA3DDD02B_gt_PP_MissionLaunchQuitOKClicked;
trigger libA3DDD02B_gt_PP_MissionLaunchQuitCanceledClicked;
trigger libA3DDD02B_gt_PP_MissionLaunchQuitClicked;
trigger libA3DDD02B_gt_PP_MissionLaunchBackClicked;
trigger libA3DDD02B_gt_PP_MissionPitchPlayClicked;
trigger libA3DDD02B_gt_PP_MissionPitchStopClicked;
trigger libA3DDD02B_gt_PP_MissionLaunchClicked;
trigger libA3DDD02B_gt_PP_EndCinematic;
trigger libA3DDD02B_gt_PP_EndCredits;
trigger libA3DDD02B_gt_PP_EndCreditsEnds;
trigger libA3DDD02B_gt_PP_VSScreenContinue;
trigger libA3DDD02B_gt_PP_VSScreenPlayAgain;
trigger libA3DDD02B_gt_PP_VSRestartCancel;
trigger libA3DDD02B_gt_PP_VSRestartRestart;
trigger libA3DDD02B_gt_PP_ArchivesCreate;
trigger libA3DDD02B_gt_PP_ArchivesSelectionChanged;
trigger libA3DDD02B_gt_PP_ArchivesMissionPlayClicked;
trigger libA3DDD02B_gt_PP_ArchivesScenePlayClicked;
trigger libA3DDD02B_gt_PP_ArchivesCloseClicked;
trigger libA3DDD02B_gt_PP_ArchivesSynced;
trigger libA3DDD02B_gt_PP_DebugSceneBookmark;
trigger libA3DDD02B_gt_PP_FootageRecording;
trigger libA3DDD02B_gt_PP_DebugVictoryS;

// Library Initialization
void libA3DDD02B_InitVariables ();

