include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (Common)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libComC_ge_CC_Event_CC_EventFirst = 0;
const int libComC_ge_CC_Event_CC_EventDataReset = 1;
const int libComC_ge_CC_Event_CC_EventMapTransition = 2;
const int libComC_ge_CC_Event_CC_EventMissionFlowUpdate = 3;
const int libComC_ge_CC_Event_CC_EventArchivesSynced = 4;
const int libComC_ge_CC_Event_CC_EventCheatProgressStart = 5;
const int libComC_ge_CC_Event_CC_EventCheatProgressSave = 6;
const int libComC_ge_CC_Event_CC_EventCheatProgressLoad = 7;
const int libComC_ge_CC_Event_CC_EventCheatProgressCancel = 8;
const int libComC_ge_CC_Event_CC_EventObjectiveBonusText = 9;
const int libComC_ge_CC_Event_CC_EventTechUpdate = 10;
const int libComC_ge_CC_Event_CC_EventTechApply = 11;
const int libComC_ge_CC_Event_CC_EventTechUnitUpdate = 12;
const int libComC_ge_CC_Event_CC_EventTransitionLoad = 13;
const int libComC_ge_CC_Event_CC_EventTransitionSave = 14;
const int libComC_ge_CC_Event_CC_EventStorySimulationStart = 15;
const int libComC_ge_CC_Event_CC_EventMissionSimulationAgesUpdate = 16;
const int libComC_ge_CC_Event_CC_EventStorySimulationEnd = 17;
const int libComC_ge_CC_Event_CC_EventLast = 18;
const int libComC_ge_MissionStatus_Locked = 0;
const int libComC_ge_MissionStatus_Available = 1;
const int libComC_ge_MissionStatus_Completed = 2;
const int libComC_ge_MissionCountOptions_Locked = 0;
const int libComC_ge_MissionCountOptions_Available = 1;
const int libComC_ge_MissionCountOptions_Completed = 2;
const int libComC_ge_MissionCountOptions_All = 3;
const int libComC_ge_MissionObjectiveState_Undiscovered = 0;
const int libComC_ge_MissionObjectiveState_Available = 1;
const int libComC_ge_MissionObjectiveState_Completed = 2;
const int libComC_ge_MissionObjectiveState_Failed = 3;
const int libComC_ge_CC_PerkState_Locked = 0;
const int libComC_ge_CC_PerkState_Unlocked = 1;
const int libComC_ge_CC_PerkState_Active = 2;
const int libComC_ge_CC_PerkState_Hidden = 3;
const int libComC_ge_CC_PerkState_Missed = 4;
const int libComC_ge_MissionCondition_Sucessful = 0;
const int libComC_ge_MissionCondition_Simulation = 1;
const int libComC_ge_VolumeChannelModeCampaign_Cinematic = 0;
const int libComC_ge_VolumeChannelModeCampaign_Speech = 1;
const int libComC_ge_VolumeChannelModeCampaign_Game = 2;
const int libComC_ge_VolumeChannelModeCampaign_Victory = 3;
const int libComC_ge_VolumeChannelModeCampaign_Speech2 = 4;
const int libComC_ge_VolumeChannelModeCampaign_Speech3 = 5;
const int libComC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects = 6;
const int libComC_ge_VolumeChannelModeCampaign_LowHealthBegin = 7;
const int libComC_ge_VolumeChannelModeCampaign_LowHealthEnd = 8;
const int libComC_ge_VolumeChannelModeCampaign_Game2 = 9;
const int libComC_ge_VolumeChannelModeCampaign_Game3 = 10;
const int libComC_ge_VolumeChannelModeCampaign_MissionLaunchUI = 11;
const int libComC_ge_VolumeChannelModeCampaign_VictoryInstant = 12;

// Constants
const int libComC_gv_cCC_DifficultyCount = 4;
const int libComC_gv_cCC_MissionObjectiveCount = 5;
const string libComC_gv_cCC_ArmyCategoryStateKey = "CC_ArmyCategoryState_";
const string libComC_gv_pCC_ArmyUnitStateKey = "CC_ArmyUnitState_";

// Variable Declarations
int libComC_gv_cC_AchievementPosition;
int libComC_gv_cC_AchievementsDisplayed;
bool libComC_gv_cC_AchievementDebugToastSuppressed;
trigger[51] libComC_gv_cC_EventCallback;
bool libComC_gv_cC_EventIsRunning;
string[51][3] libComC_gv_cC_EventParameter;
string[51] libComC_gv_cC_EventReturnValue;
text[51] libComC_gv_cC_EventReturnValueText;
int libComC_gv_cCX_CampaignDifficulty;
string libComC_gv_cCX_CurrentLocation;
string[31] libComC_gv_cC_MissionCompleted;
string libComC_gv_cC_CurrentMap;
string libComC_gv_cC_MapPath;
bool libComC_gv_cC_CurrentMapIsInstallation;
int libComC_gv_cCX_MissionObjRewardsEarnedCurrent;
int libComC_gv_NC_MovieRecordingCount;
string libComC_gv_cC_CutsceneTimestamp;
int libComC_gv_cC_CutsceneCurrent;
bool libComC_gv_cC_CutsceneSkippable;
int libComC_gv_cC_CutsceneDialog;
string libComC_gv_cC_CutsceneCurrentUser;
bool libComC_gv_cC_ApplyingCampaignTech;
bool libComC_gv_cC_CampaignTechApplied;
bool libComC_gv_cCX_DebugProgress;
int libComC_gv_cCX_MapInstanceID;
bool libComC_gv_cCX_IsSimulation;
bool libComC_gv_cCX_IsVictoryPlayAgain;
string libComC_gv_cCX_LastMap;
bool libComC_gv_cCX_LastMapSuccess;
string libComC_gv_cCX_LastMission;
bool libComC_gv_cCX_LastMissionSuccess;
bool libComC_gv_cCX_LastMissionSimulation;
string libComC_gv_cCX_LastSuccessfulMission;
string libComC_gv_cC_TransitionNextMap;
string libComC_gv_cC_TransitionSaveMap;
bool libComC_gv_cC_TransitionSaveBankVarsResultFromDefeat;
bool libComC_gv_cC_TransitionSaveBankVarsResultFromSimulation;
bool libComC_gv_cC_TransitionSaveBankVarsResultFromVictoryAgain;
bool libComC_gv_cC_InCompletedCampaign;
bool libComC_gv_cC_LoadingComplete;
bool libComC_gv_cC_NewMissionAvailable;
bank libComC_gv_cC_ArmyTechBank;
bank libComC_gv_cC_ArchivesBank;
string libComC_gv_cC_ArchiveBankName;
bool libComC_gv_cC_ArchivesReloading;
bool libComC_gv_cC_ArchivesVisited;
bool libComC_gv_cC_InLoadedMission;
string libComC_gv_cC_CampaignBankName;
bank libComC_gv_NC_CampaignBank;
string libComC_gv_cC_StoryBankName;
bank libComC_gv_cC_StoryBank;
int libComC_gv_NC_CampaignDataBackup_MissionBestTime;
string libComC_gv_cC_StorySimulationMission;
bank libComC_gv_cC_StorySimulationOriginalBank;
bool libComC_gv_cC_VolumeChannelModeInSpeech;
bool libComC_gv_cC_VolumeChannelModeInLowHP;
int libComC_gv_cC_WorldCoverDlg;
bool libComC_gv_cC_TimeAIPaused;
int libComC_gv_cC_TimeAIOverrideCount;
bool libComC_gv_cC_TimeMissionPaused;
int libComC_gv__FadeDialog;
int libComC_gv__FadeImage;

// Function Declarations
bool libComC_gf_CampaignDebugModeIsOn (string lp_mode);
void libComC_gf_CampaignAwardAchievement (string lp_achievement, int lp_player);
void libComC_gf_CC_AchievementCategorySet ();
void libComC_gf_CC_AchievementAwardEarned ();
void libComC_gf_CC_AchievementAwardMission (string lp_completedMission);
void libComC_gf_CC_EventDispatch (int lp_event, string lp_param1, string lp_param2, bool lp_waitOption);
void libComC_gf_CC_EventRegister (int lp_event, trigger lp_callback);
string libComC_gf_CC_EventParameter (int lp_event, int lp_index);
void libComC_gf_CC_EventReturnValueSet (int lp_event, string lp_value);
void libComC_gf_CC_EventReturnValueSetText (int lp_event, text lp_value);
string libComC_gf_CC_EventReturnValue (int lp_event);
text libComC_gf_CC_EventReturnValueText (int lp_event);
int libComC_gf_CC_EventActualIndexValue (int lp_indexValue);
int libComC_gf_CC_DifficultyIndex (int lp_difficulty);
int libComC_gf_CC_DifficultyFromIndex (int lp_index);
int libComC_gf_CC_DifficultyofCampaign ();
void libComC_gf_CC_SetCampaignDifficulty (int lp_difficulty);
void libComC_gf_CC_Initialize (string lp_storyMap);
void libComC_gf_CC_LocationDataUpdate ();
void libComC_gf_CC_LocationActivate (string lp_planet);
bool libComC_gf_CC_LocationIsDefault (string lp_location);
string libComC_gf_CC_LocationUserData (string lp_planet);
string libComC_gf_CC_LocationDataString (string lp_planet);
string libComC_gf_CC_LocationBankID (string lp_map);
string libComC_gf_CC_LocationUnit (string lp_location);
string libComC_gf_CC_LocationContactPortrait (string lp_location);
string libComC_gf_CC_LocationLoadingImage (string lp_loadingLocation);
void libComC_gf_CC_LocationAvailabilitySet (string lp_planet, bool lp_available);
text libComC_gf_CC_LocationName (string lp_planet);
bool libComC_gf_StoryPlanetIsAvailable (string lp_planet);
string libComC_gf_StoryPlanetNonmissionPitch (string lp_planet);
bool libComC_gf_MissionAvailableOnPlanet (string lp_planet);
string libComC_gf_CurrentLocation ();
string libComC_gf_CurrentMap ();
string libComC_gf_CC_MapLoadingScreenImage (string lp_map);
text libComC_gf_CC_MapLoadingScreenTitle (string lp_map);
text libComC_gf_CC_MapLoadingScreenSubtitle (string lp_map);
text libComC_gf_CC_MapLoadingScreenBody (string lp_map);
text libComC_gf_CC_MapLoadingScreenVictoryTitle (string lp_map);
text libComC_gf_CC_MapLoadingScreenVictorySubtitle (string lp_map);
text libComC_gf_CC_MapLoadingScreenVictoryBody (string lp_map);
string libComC_gf_CC_MapLoadingScreenVictoryImage (string lp_map);
string libComC_gf_CC_MapMissionArchiveBackgroundImage (string lp_map);
bool libComC_gf_CampaignMapTypeCheck (string lp_map, int lp_mapType);
text libComC_gf_CC_MapDescription (string lp_map);
string libComC_gf_CC_MapFile (string lp_map);
text libComC_gf_CC_MapName (string lp_map);
bool libComC_gf_CC_MapInternal (string lp_map);
text libComC_gf_CC_MapHelp (string lp_map);
text libComC_gf_CC_MapSummary (string lp_map);
string libComC_gf_CC_MapContactPortrait (string lp_map);
string libComC_gf_CC_MapContactActor (string lp_map);
text libComC_gf_CC_MapContactName (string lp_map);
text libComC_gf_CC_MapContactTitle (string lp_map);
string libComC_gf_CC_MissionLocation (string lp_map);
int libComC_gf_MissionStatus (string lp_mission);
int libComC_gf_MissionStatusAge (string lp_mission, int lp_status);
bool libComC_gf_MissionStatusCheck (string lp_mission, int lp_status);
string libComC_gf_MissionPitch (string lp_mission);
int libComC_gf_NumberOfMissions (int lp_options);
int libComC_gf_MissionCompleteBestTime (string lp_mission, int lp_difficulty);
string libComC_gf_CC_MapUserDataInstance (string lp_map);
string libComC_gf_CC_MapDataFromUserDataInstance (string lp_map);
string libComC_gf_CC_MapBankID (string lp_map);
string libComC_gf_MissionArmyCategoryUnlocked (string lp_mission);
bool libComC_gf_CC_MissionCompletedOnDifficulty (string lp_mission, int lp_difficulty);
int libComC_gf_CC_MissionCountCompletedOnDifficulty (int lp_difficulty);
void libComC_gf_LaunchMission (string lp_mission, bool lp_simulation, int lp_difficulty);
void libComC_gf_UpdateMissionFlow ();
void libComC_gf_CC_UpdateCompletedMissionArray ();
void libComC_gf_CC_MapSetPath (string lp_mapPath);
void libComC_gf_CC_MapSetCurrent (string lp_map);
void libComC_gf_CC_MapSetInstallation (bool lp_isInstallation);
bool libComC_gf_CC_CurrentMapIsInstallation ();
void libComC_gf_CC_MissionStatusAgeSet (string lp_mission, int lp_status, int lp_age);
void libComC_gf_CC_MissionAgeIncrease (string lp_mission);
void libComC_gf_CC_MissionMarkCompleted (string lp_mission);
void libComC_gf_CC_MissionSimulationAgesUpdate (string lp_simulationMap);
void libComC_gf_CC_MissionStatusSet (string lp_mission, int lp_status);
void libComC_gf_CC_MissionConditionalLockUnlock (bool lp_lockUnlock, string lp_mission, bool lp_condition);
void libComC_gf_CC_MissionCompletionBestTimeSet (string lp_mission, int lp_difficulty, int lp_time);
void libComC_gf_CC_MapBankSave (string lp_bankMap, bank lp_targetBank, bool lp_isSimulation);
void libComC_gf_CC_MapBankLoad (string lp_bankMap, bank lp_sourceBank);
void libComC_gf_CC_MissionObjectiveProgressDataSet (string lp_objective, int lp_progress);
void libComC_gf_CC_MissionObjectiveBestProgressSet (string lp_objective, int lp_progress);
void libComC_gf_CC_MissionObjectiveArchiveProgressSet (string lp_objective, int lp_progress);
text libComC_gf_MissionObjectiveDescription (string lp_objective);
bool libComC_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state);
bool libComC_gf_MissionObjectiveIsPrimary (string lp_objective);
text libComC_gf_MissionObjectiveName (string lp_objective);
int libComC_gf_MissionObjectiveItemCount (string lp_objective);
int libComC_gf_MissionObjectiveProgress (string lp_objective);
bool libComC_gf_MissionObjectiveIsSecret (string lp_objective);
text libComC_gf_CC_ObjectiveBonusText (string lp_objective);
int libComC_gf_CC_ObjectiveBasicElement (string lp_objectiveData);
string libComC_gf_CC_ObjectiveUserDataInstance (string lp_objective);
int libComC_gf_CC_ObjectiveBestProgress (string lp_objective);
int libComC_gf_CC_ObjectiveArchiveProgress (string lp_objective);
int libComC_gf_CC_ObjectiveTypeInteger (string lp_objective);
bool libComC_gf_CC_ObjectiveTypeBoolean (string lp_objective);
string libComC_gf_CC_ObjectiveTableString (string lp_objective);
string libComC_gf_CC_ObjectiveRequiredCountTableString (string lp_objectiveData);
bool libComC_gf_CC_ObjectiveCountsDown (string lp_objective);
void libComC_gf_NC_MovieStartRecording (string lp_fileName);
void libComC_gf_NC_MovieStopRecording ();
void libComC_gf_DisplayConversationTimestamp (string lp_conversation);
void libComC_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait);
void libComC_gf_HaltTimestamp ();
void libComC_gf_CC_DisplayCinematicTimestamp (string lp_scene, bool lp_fromBookmark);
string libComC_gf_CC_SceneMovie (string lp_scene);
string libComC_gf_CC_CinematicCutscene (string lp_scene);
text libComC_gf_CC_SceneName (string lp_scene);
bool libComC_gf_CC_ScenePlayed (string lp_scene);
void libComC_gf_CC_SceneSetPlayed (string lp_scene, bool lp_played);
void libComC_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip);
void libComC_gf_CampaignPlayMovieCutscene (string lp_file, bool lp_waitDontWait, bool lp_allowSkip);
void libComC_gf_CampaignStopCutscene ();
void libComC_gf_PlayCinematic (string lp_scene, bool lp_animatic);
void libComC_gf_CC_FadeAllSoundsExceptMusic (fixed lp_duration, bool lp_wait);
void libComC_gf_CC_ApplyTech (int lp_player);
bool libComC_gf_CC_CampaignTechApplied ();
void libComC_gf_CC_UpdateTechStates (int lp_player);
void libComC_gf_CC_ResetTech ();
void libComC_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player);
bool libComC_gf_CampaignTechUnitIsEnabled (string lp_techUnit);
string libComC_gf_CC_CampaignTechUnitType (string lp_techUnit);
void libComC_gf_CC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player);
string libComC_gf_NC_TechUnitOfArmyCategory (string lp_armyCategory);
string libComC_gf_NC_ArmyCategoryOfTechUnit (string lp_techUnit);
text libComC_gf_NC_ArmyCategoryName (string lp_armyCategory);
text libComC_gf_CC_ArmyCategoryTitle (string lp_armyCategory);
text libComC_gf_CC_ArmyCategoryUnitDescription (string lp_armyCategory);
string libComC_gf_CC_ArmyCategoryIcon (string lp_armyCategory);
string libComC_gf_CC_ArmyCategoryUnitType (string lp_armyCategory);
int libComC_gf_CC_ArmyCategoryState (string lp_armyCategory);
void libComC_gf_CC_SetArmyCategoryState (string lp_armyCategory, int lp_state);
bool libComC_gf_ArmyCategoryStateCheck (string lp_armyCategory, int lp_state);
string libComC_gf_EnabledUnitTypeforArmyCategory (string lp_armyCategory);
string libComC_gf_NC_ArmyCategoryPlanetCamera (string lp_armyCategory);
string libComC_gf_CC_ArmyCategoryPurchasedUnit (string lp_armyCategory);
void libComC_gf_CC_ArmyCategoryUpdateStates (int lp_player);
bool libComC_gf_CC_ArmyCategoryUsedInUI (string lp_armyCategory);
string libComC_gf_NC_StoryArmyUnitUnitType (string lp_armyUnit);
string libComC_gf_NC_ArmyUnitOfTechUnit (string lp_armyUnit);
text libComC_gf_NC_ArmyUnitTitle (string lp_armyUnit);
string libComC_gf_NC_TechUnitOfArmyUnit (string lp_armyUnit);
text libComC_gf_StoryArmyUnitName (string lp_armyUnit);
text libComC_gf_NC_ArmyUnitDescription (string lp_armyUnit);
string libComC_gf_NC_ArmyUnitIcon (string lp_armyCategory);
string libComC_gf_NC_ArmyUnitMovie (string lp_armyUnit);
bool libComC_gf_CC_ArmyUnitStartsLocked (string lp_armyUnit);
string libComC_gf_CC_ArmyUnitRequiredMission (string lp_armyUnit);
string libComC_gf_NC_ArmyCategoryOfArmyUnit (string lp_armyUnit);
int libComC_gf_CC_ArmyUnitUIOrder (string lp_armyUnit);
string libComC_gf_NC_ArmyUnitSkin (string lp_armyCategory);
int libComC_gf_NC_StoryArmyUnitState (string lp_armyUnit);
bool libComC_gf_NC_StoryArmyUnitState2 (string lp_armyUnit);
void libComC_gf_NC_SetArmyUnitState (string lp_armyUnit, int lp_state);
void libComC_gf_CC_ArmyUnitSetNew (string lp_armyUnit, bool lp_new);
void libComC_gf_NC_UpdateArmyUnitStates ();
void libComC_gf_NC_SaveArmyCategoryToBank (bank lp_bank, string lp_section);
void libComC_gf_NC_SaveArmyUnitsToBank (bank lp_bank, string lp_section);
void libComC_gf_NC_LoadArmyCategoryFromBank (bank lp_bank, string lp_section);
void libComC_gf_NC_LoadArmyUnitsFromBank (bank lp_bank, string lp_section);
void libComC_gf_CC_ApplyArmyTech (int lp_player);
void libComC_gf_NC_ResetArmyTech ();
void libComC_gf_CC_PerkEnableDisable (bool lp_enableDisable, string lp_perk, int lp_player);
void libComC_gf_CC_PerkStateSet (string lp_campaignPerk, int lp_state);
int libComC_gf_CC_PerkState (string lp_campaignPerk);
bool libComC_gf_CC_PerkStateCheck (string lp_campaignPerk, int lp_perkState);
int libComC_gf_CC_PerkUISlot (string lp_campaignPerk);
int libComC_gf_CC_PerkGroupUIOrderX (string lp_perkGroup);
int libComC_gf_CC_PerkGroupMissionUIOrder (string lp_perkGroup);
bool libComC_gf_CC_PerkGroupUnlocked (string lp_perkGroup);
text libComC_gf_CC_PerkGroupName (string lp_perkGroup);
string libComC_gf_CC_PerkGroupOfPerk (string lp_campaignPerk);
text libComC_gf_CC_PerkName (string lp_campaignPerk);
string libComC_gf_CC_PerkIcon (string lp_campaignPerk);
text libComC_gf_CC_PerkTooltip (string lp_campaignPerk);
text libComC_gf_CC_PerkDescription (string lp_campaignPerk);
string libComC_gf_CC_PerkRequiredMission (string lp_perk);
string libComC_gf_CC_PerkRequiredObjective (string lp_perk);
void libComC_gf_CC_SavePerksToBank (bank lp_bank, string lp_section);
void libComC_gf_CC_LoadPerksFromBank (bank lp_bank, string lp_section);
void libComC_gf_CC_ApplyPerkTech (int lp_player);
void libComC_gf_CC_ResetPerkTech ();
void libComC_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, int lp_player);
void libComC_gf_CC_HelpUnitPanel_UpdatePanel ();
void libComC_gf_CC_HelpTechTree_UpdatePanel ();
void libComC_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition);
bool libComC_gf_CampaignIsComplete ();
void libComC_gf_CC_CampaignSetComplete (bool lp_isComplete);
void libComC_gf_CC_TransitionPrepareMissionLaunch (string lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryAgain, int lp_difficulty);
void libComC_gf_CC_TransitionPrepareSaveOnly ();
void libComC_gf_CC_TransitionPrepareMissionEnd (int lp_victoryDefeat, int lp_difficulty);
void libComC_gf_CC_TransitionSetNextMap (string lp_nextMap);
void libComC_gf_CC_TransitionSetSaveMap (string lp_nextMap);
void libComC_gf_CC_TransitionNewMissionSetAvailable (bool lp_isAvailable);
string libComC_gf_CC_TransitionNextMap ();
bool libComC_gf_CC_TransitionInSimulation ();
bool libComC_gf_CC_TransitionInPlayAgain ();
bool libComC_gf_CC_TransitionSaveBankVarsResultFromDefeat ();
bool libComC_gf_CC_TransitionSaveBankVarsResultFromSimulation ();
bool libComC_gf_CC_TransitionSaveBankVarsResultFromVictoryAgain ();
bool libComC_gf_CurrentMissionIsSimulation ();
void libComC_gf_CC_CompletedSavesEnable ();
void libComC_gf_NC_PrepareLoadingScreen (string lp_nextMap, bool lp_restart);
string libComC_gf_LastMap ();
bool libComC_gf_LastMapConditionCheck (int lp_condition);
string libComC_gf_LastMission ();
bool libComC_gf_LastMissionConditionCheck (int lp_condition);
string libComC_gf_LastSuccessfulMission ();
void libComC_gf_NS_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat);
void libComC_gf_NS_LoadAllTransitionData (string lp_map);
void libComC_gf_CC_TransitionSaveBankVars (bank lp_targetBank, string lp_map, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, bool lp_resultFromSimulation, bool lp_resultFromVictoryAgain);
void libComC_gf_CC_TransitionLoadBankVars (bank lp_sourceBank, string lp_map);
void libComC_gf_CC_ResetCampaignData ();
void libComC_gf_CC_SaveArmyTechBank (string lp_nextMission, bool lp_simulation);
void libComC_gf_CC_OpenArmyTechBank ();
string libComC_gf_CC_ArmyCategoryBankPath (string lp_category);
string libComC_gf_CC_ArmyCategoryBankSection (string lp_category);
string libComC_gf_CC_ArmyCategoryBankKey (string lp_category);
string libComC_gf_CC_ArmyUnitBankPath (string lp_unit);
string libComC_gf_CC_ArmyUnitBankSection (string lp_unit);
string libComC_gf_CC_ArmyUnitBankKey (string lp_unit);
void libComC_gf_CC_ArchiveBankOpen ();
void libComC_gf_CC_ArchiveBankSetName (string lp_bankName);
void libComC_gf_CC_ArchiveBankObjectiveSave (string lp_objective);
void libComC_gf_CC_ArchiveBankSave ();
void libComC_gf_CC_ArchiveBankLoad ();
void libComC_gf_CC_ArchiveBankMissionSave (string lp_mission);
void libComC_gf_CC_ArchiveBankSyncForLoad ();
void libComC_gf_CC_ArchiveBankSyncForSave ();
bool libComC_gf_CC_ArchiveMasterVisited ();
bool libComC_gf_CC_InLoadedMission ();
void libComC_gf_CC_CampaignBankSetName (string lp_bankName);
void libComC_gf_CC_OpenCampaignBank ();
bank libComC_gf_CC_CampaignBank ();
bool libComC_gf_CC_CampaignBankExists ();
void libComC_gf_NC_SaveCampaignBank ();
bool libComC_gf_NC_MissionSectionExists (string lp_mission);
void libComC_gf_NC_SetMissionSectionExists (string lp_mission, bool lp_exist);
void libComC_gf_NC_LoadMissionSections ();
void libComC_gf_NC_ClampProgressToMission (string lp_mission);
void libComC_gf_NC_OpenStoryBank ();
void libComC_gf_CC_StoryBankSetName (string lp_bankName);
void libComC_gf_NC_CopyWriterStatesToSnapshot ();
bank libComC_gf_CC_StoryBank ();
string libComC_gf_CC_BankMissionDifficultyKey (string lp_mission, int lp_difficulty);
string libComC_gf_CC_BankSectionName (string lp_map, string lp_section);
int libComC_gf_CC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default);
bool libComC_gf_CC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default);
string libComC_gf_CC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default);
void libComC_gf_CC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default);
void libComC_gf_CC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default);
void libComC_gf_CC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default);
void libComC_gf_CC_StorySimulationMissionSet (string lp_mission);
void libComC_gf_CC_StorySimulationEnd ();
bool libComC_gf_CC_StoryInSimulation ();
string libComC_gf_CC_StorySimulationMission ();
bank libComC_gf_CC_StorySimulationBank ();
void libComC_gf_SetAllSoundChannelVolumesCampaign (int lp_mode);
void libComC_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players);
void libComC_gf_CC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players);
void libComC_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime);
void libComC_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency);
string libComC_gf_CC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player);
text libComC_gf_FormatTimeCampaign (int lp_second);
void libComC_gf_PauseAITimeCampaign (bool lp_pauseUnpause);
void libComC_gf_CC_TimeAITemporarySet (bool lp_pauseUnpause);
void libComC_gf_CC_TimeAITemporaryRestore ();
void libComC_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause);
void libComC_gf_CC_TimeMissionTemporarySet (bool lp_pauseUnpause);
void libComC_gf_CC_TimeMissionTemporaryRestore ();
void libComC_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone);
void libComC_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libComC_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libComC_gf__FadeCreateDialog ();

// Trigger Declarations
trigger libComC_gt_CC_DisplayTimestamp;
trigger libComC_gt_CC_DisplayTimestampSkippable;
trigger libComC_gt_CC_DisplayTimestampFromBookmark;
trigger libComC_gt_CC_WaitForDialogCutscene;
trigger libComC_gt_CC_WaitForCutscene;
trigger libComC_gt_CC_CampaignCutsceneEnded;
trigger libComC_gt_CC_PlaySceneSkippable;
trigger libComC_gt_CC_CinematicDetectSkipping;
trigger libComC_gt_CC_SceneSkipped;
trigger libComC_gt_CC_ArchiveBankLoadSyncComplete;
trigger libComC_gt_CC_ArchiveBankSaveSyncComplete;
trigger libComC_gt_CC_ArchiveHandleMissionLoad;

// Library Initialization
void libComC_InitVariables ();

