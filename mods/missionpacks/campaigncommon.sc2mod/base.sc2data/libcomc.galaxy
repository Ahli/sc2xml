include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

include "LibComC_h"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (Common)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libComC_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
}

// Variable Initialization
bool libComC_InitVariables_completed = false;

void libComC_InitVariables () {
    int init_i;
    int init_j;

    if (libComC_InitVariables_completed) {
        return;
    }

    libComC_InitVariables_completed = true;

    for (init_i = 0; init_i <= 50; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libComC_gv_cC_EventParameter[init_i][init_j] = "";
        }
    }
    libComC_gv_cCX_CampaignDifficulty = 2;
    libComC_gv_cC_MapPath = "";
    libComC_gv_cC_CutsceneCurrent = c_cutsceneNone;
    libComC_gv_cC_CutsceneDialog = c_invalidDialogId;
    libComC_gv_cC_WorldCoverDlg = c_invalidDialogId;
    libComC_gv__FadeDialog = c_invalidDialogId;
    libComC_gv__FadeImage = c_invalidDialogControlId;
}

// Presets
// Functions
bool libComC_gf_CampaignDebugModeIsOn (string lp_mode) {
    // Implementation
    return GameIsDebugOptionSet((lp_mode), 1);
}

trigger auto_libComC_gf_CampaignAwardAchievement_Trigger = null;
string auto_libComC_gf_CampaignAwardAchievement_lp_achievement;
int auto_libComC_gf_CampaignAwardAchievement_lp_player;

void libComC_gf_CampaignAwardAchievement (string lp_achievement, int lp_player) {
    auto_libComC_gf_CampaignAwardAchievement_lp_achievement = lp_achievement;
    auto_libComC_gf_CampaignAwardAchievement_lp_player = lp_player;

    if (auto_libComC_gf_CampaignAwardAchievement_Trigger == null) {
        auto_libComC_gf_CampaignAwardAchievement_Trigger = TriggerCreate("auto_libComC_gf_CampaignAwardAchievement_TriggerFunc");
    }

    TriggerExecute(auto_libComC_gf_CampaignAwardAchievement_Trigger, false, false);
}

bool auto_libComC_gf_CampaignAwardAchievement_TriggerFunc (bool testConds, bool runActions) {
    string lp_achievement = auto_libComC_gf_CampaignAwardAchievement_lp_achievement;
    int lp_player = auto_libComC_gf_CampaignAwardAchievement_lp_player;

    // Variable Declarations
    int lv_achievementDialog;
    const fixed lv_durationRequired = 6.0;
    fixed lv_duration;
    int lv_panel;
    string lv_dataTableName;

    // Variable Initialization
    lv_achievementDialog = c_invalidDialogId;
    lv_panel = c_invalidDialogControlId;
    lv_dataTableName = "";

    // Implementation
    AchievementAward(1, lp_achievement);
    if (((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false) || (GameIsOnline() == true) || (libComC_gv_cC_AchievementDebugToastSuppressed == true) || (libComC_gf_CampaignDebugModeIsOn("NoBattleNet") == false))) {
        return true;
    }

    libComC_gv_cC_AchievementsDisplayed += 1;
    lv_dataTableName = ("ACHIEVEOPENED_" + (lp_achievement));
    if ((DataTableValueExists(true, lv_dataTableName) == true)) {
        return true;
    }

    DataTableSetString(true, lv_dataTableName, "1");
    while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
        Wait(0.25, c_timeGame);
    }
    TextExpressionSetToken("Param/Expression/lib_ComC_0C0920B0", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Name", c_playerAny)));
    TextExpressionSetToken("Param/Expression/lib_ComC_0C0920B0", "B", StringToText((lp_achievement)));
    TextExpressionSetToken("Param/Expression/lib_ComC_0C0920B0", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Description", c_playerAny)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_0C0920B0"), false);
    DialogCreate(1000, 400, c_anchorRight, -200, (libComC_gv_cC_AchievementPosition + 200), true);
    libComC_gv_cC_AchievementPosition -= 125;
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_achievementDialog = DialogLastCreated();
    DialogSetRenderPriority(lv_achievementDialog, 550);
    DialogSetImageVisible(lv_achievementDialog, false);
    DialogControlCreateFromTemplate(lv_achievementDialog, c_triggerControlTypePanel, "LotV_Debug/AchievementFrameDebugTemplate");
    lv_panel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "NameLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Name", 1)), PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "DescriptionLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Description", 1)), PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "IconImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_tipicon_story-archives.dds", PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "PointsLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(CatalogFieldValueGet(c_gameCatalogAchievement, lp_achievement, "Points", 1)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lv_achievementDialog, 200, 50, c_anchorTop, 0, 100, StringExternal("Param/Value/lib_ComC_1E62A3BC"), Color(100.00, 0.00, 0.00), false, 2.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    while (true) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), false);
        }
        else {
            DialogSetVisible(lv_achievementDialog, PlayerGroupAll(), true);
        }
        Wait(0.25, c_timeGame);
        lv_duration += 0.25;
        if ((lv_duration >= lv_durationRequired)) {
            break;
        }

    }
    DialogDestroy(lv_achievementDialog);
    libComC_gv_cC_AchievementsDisplayed -= 1;
    if ((libComC_gv_cC_AchievementsDisplayed <= 0)) {
        libComC_gv_cC_AchievementPosition = 0;
    }

    return true;
}

void libComC_gf_CC_AchievementCategorySet () {
    // Implementation
    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindMission) == true) && (UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(libComC_gf_CurrentMap()), "Achievements", 1) != null)) {
        AchievementPanelSetCategory(PlayerGroupAll(), UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(libComC_gf_CurrentMap()), "Achievements", 1));
    }

}

void libComC_gf_CC_AchievementAwardEarned () {
    int auto150C4FE0_ae;
    int auto150C4FE0_ai;

    // Variable Declarations
    bool lv_allBonusesComplete;
    string lv_indexMission;

    // Variable Initialization

    // Implementation
    libComC_gv_cC_AchievementDebugToastSuppressed = true;
    auto150C4FE0_ae = CatalogEntryCount(c_gameCatalogMap);
    auto150C4FE0_ai = 1;
    while (auto150C4FE0_ai <= auto150C4FE0_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto150C4FE0_ai);
        auto150C4FE0_ai = auto150C4FE0_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Completed) == true)) {
                libComC_gf_CC_AchievementAwardMission(lv_indexMission);
            }

        }    
    }
    libComC_gv_cC_AchievementDebugToastSuppressed = false;
}

void libComC_gf_CC_AchievementAwardMission (string lp_completedMission) {
    int auto55CA6805_ae;
    int auto55CA6805_ai;

    // Variable Declarations
    bool lv_allBonusesComplete;
    string lv_indexObjective;

    // Variable Initialization

    // Implementation
    libComC_gf_CampaignAwardAchievement(UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "Achievements", 1), 1);
    if ((UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 1) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 1), 1);
    }

    if ((UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 2) != null) && ((libComC_gf_CC_MissionCompletedOnDifficulty(lp_completedMission, 2) == true) || (libComC_gf_CC_MissionCompletedOnDifficulty(lp_completedMission, 3) == true) || (libComC_gf_CC_MissionCompletedOnDifficulty(lp_completedMission, 4) == true))) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 2), 1);
    }

    if (((libComC_gf_CC_MissionCompletedOnDifficulty(lp_completedMission, 3) == true) || (libComC_gf_CC_MissionCompletedOnDifficulty(lp_completedMission, 4) == true)) && (UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 3) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 3), 1);
    }

    if ((libComC_gf_CC_MissionCompletedOnDifficulty(lp_completedMission, 4) == true) && (UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 4) != null)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "CompletionAchievementTerms", 4), 1);
    }

    lv_allBonusesComplete = true;
    auto55CA6805_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_completedMission, "ObjectiveArray", 1);
    auto55CA6805_ai = 1;
    while (auto55CA6805_ai <= auto55CA6805_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_completedMission, "ObjectiveArray["+IntToString(auto55CA6805_ai-1)+"]", 1);
        auto55CA6805_ai = auto55CA6805_ai + 1;
        if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false) && (libComC_gf_MissionObjectiveStateCheck(lv_indexObjective, libComC_ge_MissionObjectiveState_Completed) == false) && (libComC_gf_MissionObjectiveIsSecret(lv_indexObjective) == false)) {
            lv_allBonusesComplete = false;
            break;
        }

    }
    if ((lv_allBonusesComplete == true)) {
        AchievementTermQuantitySet(1, UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_completedMission), "BonusAchievementTerm", 1), 1);
    }

}

void libComC_gf_CC_EventDispatch (int lp_event, string lp_param1, string lp_param2, bool lp_waitOption) {
    // Variable Declarations
    int lv_callbackIndex;

    // Variable Initialization

    // Implementation
    lv_callbackIndex = libComC_gf_CC_EventActualIndexValue(lp_event);
    if ((libComC_gv_cC_EventCallback[lv_callbackIndex] != null)) {
        libComC_gv_cC_EventParameter[lv_callbackIndex][1] = lp_param1;
        libComC_gv_cC_EventParameter[lv_callbackIndex][2] = lp_param2;
        libComC_gv_cC_EventReturnValue[lv_callbackIndex] = null;
        libComC_gv_cC_EventIsRunning = true;
        TriggerExecute(libComC_gv_cC_EventCallback[lv_callbackIndex], true, lp_waitOption);
        libComC_gv_cC_EventIsRunning = false;
    }

}

void libComC_gf_CC_EventRegister (int lp_event, trigger lp_callback) {
    // Implementation
    libComC_gv_cC_EventCallback[libComC_gf_CC_EventActualIndexValue(lp_event)] = lp_callback;
}

string libComC_gf_CC_EventParameter (int lp_event, int lp_index) {
    // Implementation
    if (((lp_index < 1) || (lp_index > 2))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_ComC_B41B211A"), true);
        return "<Error>";
    }

    return libComC_gv_cC_EventParameter[libComC_gf_CC_EventActualIndexValue(lp_event)][lp_index];
}

void libComC_gf_CC_EventReturnValueSet (int lp_event, string lp_value) {
    // Implementation
    libComC_gv_cC_EventReturnValue[libComC_gf_CC_EventActualIndexValue(lp_event)] = lp_value;
}

void libComC_gf_CC_EventReturnValueSetText (int lp_event, text lp_value) {
    // Implementation
    libComC_gv_cC_EventReturnValueText[libComC_gf_CC_EventActualIndexValue(lp_event)] = lp_value;
}

string libComC_gf_CC_EventReturnValue (int lp_event) {
    // Implementation
    return libComC_gv_cC_EventReturnValue[libComC_gf_CC_EventActualIndexValue(lp_event)];
}

text libComC_gf_CC_EventReturnValueText (int lp_event) {
    // Implementation
    return libComC_gv_cC_EventReturnValueText[libComC_gf_CC_EventActualIndexValue(lp_event)];
}

int libComC_gf_CC_EventActualIndexValue (int lp_indexValue) {
    // Implementation
    if (((lp_indexValue) < 10000)) {
        return (lp_indexValue);
    }
    else {
        return (((lp_indexValue) - 10000) + (libComC_ge_CC_Event_CC_EventLast));
    }
}

int libComC_gf_CC_DifficultyIndex (int lp_difficulty) {
    int autoE50BEE9C_val;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    autoE50BEE9C_val = lp_difficulty;
    if (autoE50BEE9C_val == 1) {
        return 1;
    }
    else if (autoE50BEE9C_val == 2) {
        return 2;
    }
    else if (autoE50BEE9C_val == 3) {
        return 3;
    }
    else if (autoE50BEE9C_val == 4) {
        return 4;
    }
    else {
        return 0;
    }
}

int libComC_gf_CC_DifficultyFromIndex (int lp_index) {
    int auto40FAA7F9_val;

    // Implementation
    auto40FAA7F9_val = lp_index;
    if (auto40FAA7F9_val == libComC_gf_CC_DifficultyIndex(1)) {
        return 1;
    }
    else if (auto40FAA7F9_val == libComC_gf_CC_DifficultyIndex(2)) {
        return 2;
    }
    else if (auto40FAA7F9_val == libComC_gf_CC_DifficultyIndex(3)) {
        return 3;
    }
    else if (auto40FAA7F9_val == libComC_gf_CC_DifficultyIndex(4)) {
        return 4;
    }
    else {
        return 2;
    }
}

int libComC_gf_CC_DifficultyofCampaign () {
    // Implementation
    return libComC_gv_cCX_CampaignDifficulty;
}

void libComC_gf_CC_SetCampaignDifficulty (int lp_difficulty) {
    // Implementation
    libComC_gv_cCX_CampaignDifficulty = lp_difficulty;
}

void libComC_gf_CC_Initialize (string lp_storyMap) {
    // Implementation
    TriggerDebugSetTypeFile(1, "StoryModeDebug.txt");
    CampaignMode(PlayerGroupAll(), true);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeTextTag);
    libComC_gv_cC_CurrentMap = lp_storyMap;
    libComC_gf_NS_LoadAllTransitionData(lp_storyMap);
    UserDataSetInt("Maps", libComC_gf_CC_MapUserDataInstance(lp_storyMap), "IsCurrent", 1, 1);
    libComC_gf_NC_PrepareLoadingScreen(lp_storyMap, true);
    libComC_gf_CC_AchievementCategorySet();
    if ((libComC_gf_CampaignIsComplete() == true) && ((libComC_gv_cCX_IsSimulation == true) || (libComC_gv_cCX_IsVictoryPlayAgain == true))) {
        libComC_gf_CC_MissionSimulationAgesUpdate(lp_storyMap);
    }

    libComC_gf_CC_UpdateCompletedMissionArray();
    libComC_gf_CC_LocationDataUpdate();
    libComC_gf_CC_OpenArmyTechBank();
    libComC_gf_NC_OpenStoryBank();
    if ((libComC_gf_CampaignIsComplete() == true) && (libComC_gf_CampaignMapTypeCheck(lp_storyMap, c_mapKindStory) == true)) {
        libComC_gf_CC_ArchiveBankSyncForLoad();
    }

    if ((libComC_gf_CampaignIsComplete() == true) && (libComC_gf_CampaignMapTypeCheck(lp_storyMap, c_mapKindStory) == false)) {
        CampaignProgressEnableCampaignSaves(PlayerGroupAll(), false);
    }
    else {
        CampaignProgressEnableCampaignSaves(PlayerGroupAll(), true);
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_ComC_046CE155"), false);
    libComC_gf_CC_ApplyTech(1);
}

void libComC_gf_CC_LocationDataUpdate () {
    int autoF1F6516C_ae;
    int autoF1F6516C_ai;
    int autoF09E61B2_ae;
    int autoF09E61B2_ai;
    int auto14830EDC_ae;
    int auto14830EDC_ai;

    // Variable Declarations
    string lv_indexMission;
    string lv_indexLocation;

    // Variable Initialization

    // Implementation
    if ((libComC_gf_CurrentLocation() == null)) {
        autoF1F6516C_ae = CatalogEntryCount(c_gameCatalogLocation);
        autoF1F6516C_ai = 1;
        while (autoF1F6516C_ai <= autoF1F6516C_ae) {
            lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, autoF1F6516C_ai);
            if ((libComC_gf_CC_LocationIsDefault(lv_indexLocation) == true)) {
                libComC_gf_CC_LocationActivate(lv_indexLocation);
                break;
            }

            autoF1F6516C_ai = autoF1F6516C_ai + 1;
        }
    }

    autoF09E61B2_ae = CatalogEntryCount(c_gameCatalogLocation);
    autoF09E61B2_ai = 1;
    while (autoF09E61B2_ai <= autoF09E61B2_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, autoF09E61B2_ai);
        libComC_gf_CC_LocationAvailabilitySet(lv_indexLocation, false);
        autoF09E61B2_ai = autoF09E61B2_ai + 1;
    }
    auto14830EDC_ae = CatalogEntryCount(c_gameCatalogMap);
    auto14830EDC_ai = 1;
    while (auto14830EDC_ai <= auto14830EDC_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto14830EDC_ai);
        auto14830EDC_ai = auto14830EDC_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Available) == true)) {
                libComC_gf_CC_LocationAvailabilitySet(libComC_gf_CC_MissionLocation(lv_indexMission), true);
            }

        }    
    }
}

void libComC_gf_CC_LocationActivate (string lp_planet) {
    int auto6A648E96_ae;
    int auto6A648E96_ai;

    // Variable Declarations
    string lv_indexPlanet;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_ComC_8E00420C", "A", StringToText((lp_planet)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_8E00420C"), false);
    libComC_gv_cCX_CurrentLocation = lp_planet;
    auto6A648E96_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto6A648E96_ai = 1;
    while (auto6A648E96_ai <= auto6A648E96_ae) {
        lv_indexPlanet = CatalogEntryGet(c_gameCatalogLocation, auto6A648E96_ai);
        UserDataSetInt("Locations", libComC_gf_CC_LocationUserData(lv_indexPlanet), "Active", 1, 0);
        auto6A648E96_ai = auto6A648E96_ai + 1;
    }
    UserDataSetInt("Locations", libComC_gf_CC_LocationUserData(lp_planet), "Active", 1, 1);
    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindStory) == true) && (libComC_gf_MissionAvailableOnPlanet(lp_planet) == false)) {
        UserDataSetInt("StoryStates", "Can Travel", "Value", 1, 1);
    }
    else {
        UserDataSetInt("StoryStates", "Can Travel", "Value", 1, 0);
    }
}

bool libComC_gf_CC_LocationIsDefault (string lp_location) {
    // Implementation
    return (UserDataGetInt("Locations", libComC_gf_CC_LocationUserData(lp_location), "Default", 1) == 1);
}

string libComC_gf_CC_LocationUserData (string lp_planet) {
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogLocation, (lp_planet), "UserReference", c_playerAny));
}

string libComC_gf_CC_LocationDataString (string lp_planet) {
    // Implementation
    return ("CC_L_" + (lp_planet));
}

string libComC_gf_CC_LocationBankID (string lp_map) {
    // Implementation
    return (lp_map);
}

string libComC_gf_CC_LocationUnit (string lp_location) {
    // Implementation
    return UserDataGetUnit("Locations", libComC_gf_CC_LocationUserData(lp_location), "Unit", 1);
}

string libComC_gf_CC_LocationContactPortrait (string lp_location) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogLocation, (lp_location), "ContactModel", 1));
}

string libComC_gf_CC_LocationLoadingImage (string lp_loadingLocation) {
    // Implementation
    return UserDataGetImagePath("Locations", libComC_gf_CC_LocationUserData(lp_loadingLocation), "LoadingImage", 1);
}

void libComC_gf_CC_LocationAvailabilitySet (string lp_planet, bool lp_available) {
    // Implementation
    UserDataSetInt("Locations", libComC_gf_CC_LocationUserData(lp_planet), "Available", 1, BoolToInt(lp_available));
}

text libComC_gf_CC_LocationName (string lp_planet) {
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogLocation, (lp_planet), "Name", c_playerAny));
}

bool libComC_gf_StoryPlanetIsAvailable (string lp_planet) {
    // Implementation
    return (UserDataGetInt("Locations", libComC_gf_CC_LocationUserData(lp_planet), "Available", 1) == 1);
}

string libComC_gf_StoryPlanetNonmissionPitch (string lp_planet) {
    // Implementation
    return UserDataGetGameLink("Locations", libComC_gf_CC_LocationUserData(lp_planet), "Pitch", 1);
}

bool libComC_gf_MissionAvailableOnPlanet (string lp_planet) {
    int auto86A4F335_ae;
    int auto86A4F335_ai;

    // Variable Declarations
    string lv_mission;

    // Variable Initialization

    // Implementation
    auto86A4F335_ae = CatalogEntryCount(c_gameCatalogMap);
    auto86A4F335_ai = 1;
    while (auto86A4F335_ai <= auto86A4F335_ae) {
        lv_mission = CatalogEntryGet(c_gameCatalogMap, auto86A4F335_ai);
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_mission, "Kind", 1) == "Mission" && libComC_gf_CC_MissionLocation(lv_mission) == lp_planet && libComC_gf_CC_MapInternal(lv_mission) == false ) {
            if ((libComC_gf_MissionStatusCheck(lv_mission, libComC_ge_MissionStatus_Available) == true)) {
                return true;
            }

        }
        auto86A4F335_ai = auto86A4F335_ai + 1;
    }
    return false;
}

string libComC_gf_CurrentLocation () {
    // Implementation
    return libComC_gv_cCX_CurrentLocation;
}

string libComC_gf_CurrentMap () {
    // Implementation
    return libComC_gv_cC_CurrentMap;
}

string libComC_gf_CC_MapLoadingScreenImage (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return "Assets\\Textures\\blank.dds";
    }

    if ((libComC_gf_CampaignMapTypeCheck(lp_map, c_mapKindStory) == true) && (libComC_gf_CurrentLocation() != null) && (libComC_gf_CC_LocationLoadingImage(libComC_gf_CurrentLocation()) != null)) {
        return libComC_gf_CC_LocationLoadingImage(libComC_gf_CurrentLocation());
    }

    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingImage", c_playerAny));
}

text libComC_gf_CC_MapLoadingScreenTitle (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_ComC_4666A6CA");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", 1));
}

text libComC_gf_CC_MapLoadingScreenSubtitle (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_ComC_C87C9BE5");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingSubtitle", 1));
}

text libComC_gf_CC_MapLoadingScreenBody (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_ComC_27FFD6F7");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingBody", 1));
}

text libComC_gf_CC_MapLoadingScreenVictoryTitle (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_ComC_7B6785A5");
    }

    return UserDataGetText("Maps", libComC_gf_CC_MapUserDataInstance(lp_map), "LoadingScreenVictoryTitle", 1);
}

text libComC_gf_CC_MapLoadingScreenVictorySubtitle (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_ComC_AE94F5D3");
    }

    return UserDataGetText("Maps", libComC_gf_CC_MapUserDataInstance(lp_map), "LoadingScreenVictorySubtitle", 1);
}

text libComC_gf_CC_MapLoadingScreenVictoryBody (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_ComC_5DA83C50");
    }

    return UserDataGetText("Maps", libComC_gf_CC_MapUserDataInstance(lp_map), "LoadingScreenVictoryBody", 1);
}

string libComC_gf_CC_MapLoadingScreenVictoryImage (string lp_map) {
    // Implementation
    if (((lp_map == null) || (libComC_gf_CampaignMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return "Assets\\Textures\\blank.dds";
    }

    return UserDataGetImagePath("Maps", libComC_gf_CC_MapUserDataInstance(lp_map), "LoadingScreenVictoryImage", 1);
}

string libComC_gf_CC_MapMissionArchiveBackgroundImage (string lp_map) {
    // Implementation
    return libComC_gf_CC_MapLoadingScreenImage(lp_map);
}

bool libComC_gf_CampaignMapTypeCheck (string lp_map, int lp_mapType) {
    // Implementation
    if ((lp_map == null)) {
        return false;
    }

    return (CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_map), "Kind", 1) == (lp_mapType));
}

text libComC_gf_CC_MapDescription (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return null;
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Description", 1));
}

string libComC_gf_CC_MapFile (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return "";
    }

    return CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "File", 1);
}

text libComC_gf_CC_MapName (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_ComC_157DFE43");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", 1));
}

bool libComC_gf_CC_MapInternal (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return true;
    }

    if ((UserDataGetInt("Maps", libComC_gf_CC_MapUserDataInstance(lp_map), "Internal", 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

text libComC_gf_CC_MapHelp (string lp_map) {
    // Implementation
    if (((lp_map == null) || (libComC_gf_CampaignMapTypeCheck(lp_map, c_mapKindStory) == true))) {
        return StringExternal("Param/Value/lib_ComC_1EB8D85E");
    }
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "LoadingHelp", 1));
}

text libComC_gf_CC_MapSummary (string lp_map) {
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_map, "Summary", 1));
}

string libComC_gf_CC_MapContactPortrait (string lp_map) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactModelLink", 1));
}

string libComC_gf_CC_MapContactActor (string lp_map) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactActor", 1));
}

text libComC_gf_CC_MapContactName (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_ComC_65C88DBA");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactNameText", 1));
}

text libComC_gf_CC_MapContactTitle (string lp_map) {
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_ComC_D3D54717");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "ContactTitle", 1));
}

string libComC_gf_CC_MissionLocation (string lp_map) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Location", c_playerAny));
}

int libComC_gf_MissionStatus (string lp_mission) {
    // Implementation
    if ((libComC_gf_MissionStatusAge(lp_mission, libComC_ge_MissionStatus_Completed) > 0)) {
        return libComC_ge_MissionStatus_Completed;
    }

    if ((libComC_gf_MissionStatusAge(lp_mission, libComC_ge_MissionStatus_Available) > 0)) {
        return libComC_ge_MissionStatus_Available;
    }

    return libComC_ge_MissionStatus_Locked;
}

int libComC_gf_MissionStatusAge (string lp_mission, int lp_status) {
    int autoFEAACA45_val;

    // Implementation
    autoFEAACA45_val = lp_status;
    if (autoFEAACA45_val == libComC_ge_MissionStatus_Available) {
        return UserDataGetInt("Maps", libComC_gf_CC_MapUserDataInstance(lp_mission), "AvailableAge", 1);
    }
    else if (autoFEAACA45_val == libComC_ge_MissionStatus_Completed) {
        return UserDataGetInt("Maps", libComC_gf_CC_MapUserDataInstance(lp_mission), "CompletedAge", 1);
    }
    else {
    }
    return 0;
}

bool libComC_gf_MissionStatusCheck (string lp_mission, int lp_status) {
    // Implementation
    return (libComC_gf_MissionStatus(lp_mission) == lp_status);
}

string libComC_gf_MissionPitch (string lp_mission) {
    // Implementation
    return UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_mission), "Pitch", 1);
}

int libComC_gf_NumberOfMissions (int lp_options) {
    int autoB555897C_ae;
    int autoB555897C_ai;
    int auto80A83B51_val;

    // Variable Declarations
    string lv_indexMission;
    int lv_total;

    // Variable Initialization

    // Implementation
    autoB555897C_ae = CatalogEntryCount(c_gameCatalogMap);
    autoB555897C_ai = 1;
    while (autoB555897C_ai <= autoB555897C_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoB555897C_ai);
        autoB555897C_ai = autoB555897C_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            auto80A83B51_val = lp_options;
            if (auto80A83B51_val == libComC_ge_MissionCountOptions_All) {
                lv_total += 1;
            }
            else if (auto80A83B51_val == libComC_ge_MissionCountOptions_Available) {
                if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Available) == true)) {
                    lv_total += 1;
                }

            }
            else if (auto80A83B51_val == libComC_ge_MissionCountOptions_Completed) {
                if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Completed) == true)) {
                    lv_total += 1;
                }

            }
            else if (auto80A83B51_val == libComC_ge_MissionCountOptions_Locked) {
                if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Locked) == true)) {
                    lv_total += 1;
                }

            }
            else {
            }
        }    
    }
    return lv_total;
}

int libComC_gf_MissionCompleteBestTime (string lp_mission, int lp_difficulty) {
    // Implementation
    return UserDataGetInt("Maps", libComC_gf_CC_MapUserDataInstance(lp_mission), "BestTime", libComC_gf_CC_DifficultyIndex(lp_difficulty));
}

string libComC_gf_CC_MapUserDataInstance (string lp_map) {
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", 1));
}

string libComC_gf_CC_MapDataFromUserDataInstance (string lp_map) {
    int auto26D1199E_ae;
    int auto26D1199E_ai;

    // Variable Declarations
    string lv_indexMap;

    // Variable Initialization

    // Implementation
    auto26D1199E_ae = CatalogEntryCount(c_gameCatalogMap);
    auto26D1199E_ai = 1;
    while (auto26D1199E_ai <= auto26D1199E_ae) {
        lv_indexMap = CatalogEntryGet(c_gameCatalogMap, auto26D1199E_ai);
        if ((libComC_gf_CC_MapUserDataInstance(lv_indexMap) == lp_map)) {
            return lv_indexMap;
        }

        auto26D1199E_ai = auto26D1199E_ai + 1;
    }
    return null;
}

string libComC_gf_CC_MapBankID (string lp_map) {
    // Implementation
    return (lp_map);
}

string libComC_gf_MissionArmyCategoryUnlocked (string lp_mission) {
    // Variable Declarations
    string lv_category;
    string lv_value;

    // Variable Initialization
    lv_value = "";

    // Implementation
    lv_value = CatalogFieldValueGet(c_gameCatalogMap, (lp_mission), "ArmyCategory", 1);
    return (lv_value);
}

bool libComC_gf_CC_MissionCompletedOnDifficulty (string lp_mission, int lp_difficulty) {
    // Implementation
    return (libComC_gf_MissionCompleteBestTime(lp_mission, lp_difficulty) > 0);
}

int libComC_gf_CC_MissionCountCompletedOnDifficulty (int lp_difficulty) {
    int auto1753A895_ae;
    int auto1753A895_ai;

    // Variable Declarations
    string lv_indexMission;
    int lv_count;

    // Variable Initialization

    // Implementation
    auto1753A895_ae = CatalogEntryCount(c_gameCatalogMap);
    auto1753A895_ai = 1;
    while (auto1753A895_ai <= auto1753A895_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto1753A895_ai);
        auto1753A895_ai = auto1753A895_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            if ((libComC_gf_CC_MissionCompletedOnDifficulty(lv_indexMission, lp_difficulty) == true)) {
                lv_count += 1;
            }

        }    
    }
    return lv_count;
}

void libComC_gf_LaunchMission (string lp_mission, bool lp_simulation, int lp_difficulty) {
    // Variable Declarations
    bool lv_useDebugDialog;
    string lv_nextMission;

    // Variable Initialization

    // Implementation
    libComC_gf_CC_TransitionPrepareMissionLaunch(lp_mission, lp_simulation, false, lp_difficulty);
    GameOver(1, c_gameOverVictory, false, false);
}

void libComC_gf_UpdateMissionFlow () {
    // Variable Declarations
    string lv_indexMission;

    // Variable Initialization

    // Implementation
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventMissionFlowUpdate, "", "", false);
    UserDataSetInt("StoryStates", "MissionCompletedCount", "Value", 1, libComC_gf_NumberOfMissions(libComC_ge_MissionCountOptions_Completed));
    libComC_gf_CC_UpdateCompletedMissionArray();
}

void libComC_gf_CC_UpdateCompletedMissionArray () {
    int autoEE21E2F4_ae;
    int autoEE21E2F4_ai;
    int autoA3D84438_ae;
    int autoA3D84438_ai;
    int autoFB292D0A_ae;
    int autoFB292D0A_ai;

    // Variable Declarations
    string lv_indexMision;
    int lv_count;
    int lv_indexOuter;
    int lv_indexInner;
    int lv_indexMin;
    string lv_missionSwap;

    // Variable Initialization

    // Implementation
    lv_count = 0;
    autoEE21E2F4_ae = UserDataInstanceCount("Maps");
    autoEE21E2F4_ai = 1;
    while (autoEE21E2F4_ai <= autoEE21E2F4_ae) {
        lv_indexMision = libComC_gf_CC_MapDataFromUserDataInstance(UserDataInstance("Maps", autoEE21E2F4_ai));
        if (lv_indexMision != null && CatalogFieldValueGet(c_gameCatalogMap, lv_indexMision, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMision) == false ) {
            if ((libComC_gf_MissionStatusCheck(lv_indexMision, libComC_ge_MissionStatus_Completed) == true)) {
                lv_count += 1;
                libComC_gv_cC_MissionCompleted[lv_count] = lv_indexMision;
            }

        }
        autoEE21E2F4_ai = autoEE21E2F4_ai + 1;
    }
    autoA3D84438_ae = (lv_count - 1);
    autoA3D84438_ai = 1;
    lv_indexOuter = 1;
    for ( ; ( (autoA3D84438_ai >= 0 && lv_indexOuter <= autoA3D84438_ae) || (autoA3D84438_ai <= 0 && lv_indexOuter >= autoA3D84438_ae) ) ; lv_indexOuter += autoA3D84438_ai ) {
        lv_indexMin = lv_indexOuter;
        autoFB292D0A_ae = lv_count;
        autoFB292D0A_ai = 1;
        lv_indexInner = (lv_indexOuter + 1);
        for ( ; ( (autoFB292D0A_ai >= 0 && lv_indexInner <= autoFB292D0A_ae) || (autoFB292D0A_ai <= 0 && lv_indexInner >= autoFB292D0A_ae) ) ; lv_indexInner += autoFB292D0A_ai ) {
            if ((libComC_gf_MissionStatusAge(libComC_gv_cC_MissionCompleted[lv_indexInner], libComC_ge_MissionStatus_Completed) > libComC_gf_MissionStatusAge(libComC_gv_cC_MissionCompleted[lv_indexMin], libComC_ge_MissionStatus_Completed))) {
                lv_indexMin = lv_indexInner;
            }

        }
        if ((lv_indexMin != lv_indexOuter)) {
            lv_missionSwap = libComC_gv_cC_MissionCompleted[lv_indexOuter];
            libComC_gv_cC_MissionCompleted[lv_indexOuter] = libComC_gv_cC_MissionCompleted[lv_indexMin];
            libComC_gv_cC_MissionCompleted[lv_indexMin] = lv_missionSwap;
        }

    }
}

void libComC_gf_CC_MapSetPath (string lp_mapPath) {
    // Implementation
    libComC_gv_cC_MapPath = lp_mapPath;
}

void libComC_gf_CC_MapSetCurrent (string lp_map) {
    // Implementation
    libComC_gv_cC_CurrentMap = lp_map;
}

void libComC_gf_CC_MapSetInstallation (bool lp_isInstallation) {
    // Implementation
    libComC_gv_cC_CurrentMapIsInstallation = lp_isInstallation;
}

bool libComC_gf_CC_CurrentMapIsInstallation () {
    // Implementation
    return libComC_gv_cC_CurrentMapIsInstallation;
}

void libComC_gf_CC_MissionStatusAgeSet (string lp_mission, int lp_status, int lp_age) {
    int autoDAA7CD9E_val;

    // Implementation
    autoDAA7CD9E_val = lp_status;
    if (autoDAA7CD9E_val == libComC_ge_MissionStatus_Available) {
        UserDataSetInt("Maps", libComC_gf_CC_MapUserDataInstance(lp_mission), "AvailableAge", 1, lp_age);
    }
    else if (autoDAA7CD9E_val == libComC_ge_MissionStatus_Completed) {
        UserDataSetInt("Maps", libComC_gf_CC_MapUserDataInstance(lp_mission), "CompletedAge", 1, lp_age);
    }
    else {
    }
}

void libComC_gf_CC_MissionAgeIncrease (string lp_mission) {
    // Implementation
    if ((libComC_gf_MissionStatusAge(lp_mission, libComC_ge_MissionStatus_Available) > 0)) {
        libComC_gf_CC_MissionStatusAgeSet(lp_mission, libComC_ge_MissionStatus_Available, (libComC_gf_MissionStatusAge(lp_mission, libComC_ge_MissionStatus_Available) + 1));
    }

    if ((libComC_gf_MissionStatusAge(lp_mission, libComC_ge_MissionStatus_Completed) > 0)) {
        libComC_gf_CC_MissionStatusAgeSet(lp_mission, libComC_ge_MissionStatus_Completed, (libComC_gf_MissionStatusAge(lp_mission, libComC_ge_MissionStatus_Completed) + 1));
    }

}

void libComC_gf_CC_MissionMarkCompleted (string lp_mission) {
    int auto47A8543D_ae;
    int auto47A8543D_ai;

    // Variable Declarations
    string lv_indexMision;

    // Variable Initialization

    // Implementation
    if (((lp_mission == null) || (libComC_gf_MissionStatusCheck(lp_mission, libComC_ge_MissionStatus_Completed) == true))) {
        return ;
    }

    libComC_gf_CC_MissionStatusSet(lp_mission, libComC_ge_MissionStatus_Completed);
    if ((libComC_gf_CampaignMapTypeCheck(lp_mission, c_mapKindMission) != true)) {
        return ;
    }

    auto47A8543D_ae = CatalogEntryCount(c_gameCatalogMap);
    auto47A8543D_ai = 1;
    while (auto47A8543D_ai <= auto47A8543D_ae) {
        lv_indexMision = CatalogEntryGet(c_gameCatalogMap, auto47A8543D_ai);
        auto47A8543D_ai = auto47A8543D_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMision, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMision) == false) {
            if ((lv_indexMision != lp_mission)) {
                libComC_gf_CC_MissionAgeIncrease(lv_indexMision);
            }

        }    
    }
    libComC_gf_UpdateMissionFlow();
    libComC_gf_CC_UpdateTechStates(1);
}

void libComC_gf_CC_MissionSimulationAgesUpdate (string lp_simulationMap) {
    // Variable Declarations
    string lv_indexMission;

    // Variable Initialization

    // Implementation
    libComC_gf_CC_MissionStatusSet(lp_simulationMap, libComC_ge_MissionStatus_Available);
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventMissionSimulationAgesUpdate, (lp_simulationMap), "", true);
    libComC_gf_UpdateMissionFlow();
    libComC_gf_CC_UpdateTechStates(1);
    libComC_gf_CC_ApplyTech(1);
}

void libComC_gf_CC_MissionStatusSet (string lp_mission, int lp_status) {
    int autoB34194D7_val;

    // Implementation
    autoB34194D7_val = lp_status;
    if (autoB34194D7_val == libComC_ge_MissionStatus_Locked) {
        libComC_gf_CC_MissionStatusAgeSet(lp_mission, libComC_ge_MissionStatus_Available, 0);
        libComC_gf_CC_MissionStatusAgeSet(lp_mission, libComC_ge_MissionStatus_Completed, 0);
    }
    else if (autoB34194D7_val == libComC_ge_MissionStatus_Available) {
        libComC_gf_CC_MissionStatusAgeSet(lp_mission, libComC_ge_MissionStatus_Available, 1);
        libComC_gf_CC_MissionStatusAgeSet(lp_mission, libComC_ge_MissionStatus_Completed, 0);
    }
    else if (autoB34194D7_val == libComC_ge_MissionStatus_Completed) {
        libComC_gf_CC_MissionStatusAgeSet(lp_mission, libComC_ge_MissionStatus_Available, 0);
        libComC_gf_CC_MissionStatusAgeSet(lp_mission, libComC_ge_MissionStatus_Completed, 1);
    }
    else {
    }
}

void libComC_gf_CC_MissionConditionalLockUnlock (bool lp_lockUnlock, string lp_mission, bool lp_condition) {
    // Variable Declarations
    text lv_label;

    // Variable Initialization

    // Implementation
    if ((lp_lockUnlock == true)) {
        lv_label = StringExternal("Param/Value/lib_ComC_A8DCE440");
    }
    else {
        lv_label = StringExternal("Param/Value/lib_ComC_BF5D2A4B");
    }
    TextExpressionSetToken("Param/Expression/lib_ComC_BAD6DCFE", "A", lv_label);
    TextExpressionSetToken("Param/Expression/lib_ComC_BAD6DCFE", "B", StringToText((lp_mission)));
    TextExpressionSetToken("Param/Expression/lib_ComC_BAD6DCFE", "C", libNtve_gf_ConvertBooleanToText(lp_condition));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_BAD6DCFE"), false);
    if ((lp_condition == true)) {
        if ((lp_lockUnlock == false)) {
            if ((libComC_gf_MissionStatusCheck(lp_mission, libComC_ge_MissionStatus_Locked) == true)) {
                libComC_gf_CC_MissionStatusSet(lp_mission, libComC_ge_MissionStatus_Available);
            }

        }
        else {
            if ((libComC_gf_MissionStatusCheck(lp_mission, libComC_ge_MissionStatus_Available) == true)) {
                libComC_gf_CC_MissionStatusSet(lp_mission, libComC_ge_MissionStatus_Locked);
            }

        }
    }

}

void libComC_gf_CC_MissionCompletionBestTimeSet (string lp_mission, int lp_difficulty, int lp_time) {
    // Implementation
    if ((lp_time < 0)) {
        return ;
    }

    UserDataSetInt("Maps", libComC_gf_CC_MapUserDataInstance(lp_mission), "BestTime", libComC_gf_CC_DifficultyIndex(lp_difficulty), lp_time);
}

void libComC_gf_CC_MapBankSave (string lp_bankMap, bank lp_targetBank, bool lp_isSimulation) {
    int auto29036970_ae;
    int auto29036970_ai;
    int auto504CEF5B_ae;
    int auto504CEF5B_ai;
    int autoCF0737AE_ae;
    int autoCF0737AE_ai;
    int auto18F45B9D_ae;
    int auto18F45B9D_ai;
    int autoC70654AC_ae;
    int autoC70654AC_ai;

    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficulty;
    int lv_progressThisMission;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 2;

    // Implementation
    if ((lp_bankMap == null)) {
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_bankMap, "MissionBestTime");
        auto29036970_ae = CatalogEntryCount(c_gameCatalogMap);
        auto29036970_ai = 1;
        while (auto29036970_ai <= auto29036970_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto29036970_ai);
            auto29036970_ai = auto29036970_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
                libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libComC_gf_CC_BankMissionDifficultyKey(lv_indexMission, 1), libComC_gf_MissionCompleteBestTime(lv_indexMission, 1), -1);
                libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libComC_gf_CC_BankMissionDifficultyKey(lv_indexMission, 2), libComC_gf_MissionCompleteBestTime(lv_indexMission, 2), -1);
                libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libComC_gf_CC_BankMissionDifficultyKey(lv_indexMission, 3), libComC_gf_MissionCompleteBestTime(lv_indexMission, 3), -1);
                libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libComC_gf_CC_BankMissionDifficultyKey(lv_indexMission, 4), libComC_gf_MissionCompleteBestTime(lv_indexMission, 4), -1);
            }    
        }
        libComC_gf_CC_ArchiveBankSave();
    }

    lv__SectionName = libComC_gf_CC_BankSectionName(lp_bankMap, "MissionObjectives");
    if ((lp_isSimulation == true)) {
        auto504CEF5B_ae = CatalogFieldValueCount(c_gameCatalogMap, libComC_gf_CurrentMap(), "ObjectiveArray", 1);
        auto504CEF5B_ai = 1;
        while (auto504CEF5B_ai <= auto504CEF5B_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libComC_gf_CurrentMap(), "ObjectiveArray["+IntToString(auto504CEF5B_ai-1)+"]", 1);
            auto504CEF5B_ai = auto504CEF5B_ai + 1;
            if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                lv_progressThisMission = libComC_gf_MissionObjectiveProgress(lv_indexObjective);
                UserDataSetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, libComC_gf_CC_ObjectiveBestProgress(lv_indexObjective));
                UserDataSaveInstance("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lv_indexObjective), lp_targetBank, lv__SectionName);
                UserDataSetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, lv_progressThisMission);
            }

        }
    }
    else {
        autoCF0737AE_ae = CatalogEntryCount(c_gameCatalogObjective);
        autoCF0737AE_ai = 1;
        while (autoCF0737AE_ai <= autoCF0737AE_ae) {
            lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoCF0737AE_ai);
            autoCF0737AE_ai = autoCF0737AE_ai + 1;
            if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                UserDataSaveInstance("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lv_indexObjective), lp_targetBank, lv__SectionName);
            }

        }
    }
    if ((lp_isSimulation == true)) {
        return ;
    }

    if ((lp_bankMap == null)) {
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_bankMap, "MissionAvailableAge");
        auto18F45B9D_ae = CatalogEntryCount(c_gameCatalogMap);
        auto18F45B9D_ai = 1;
        while (auto18F45B9D_ai <= auto18F45B9D_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto18F45B9D_ai);
            auto18F45B9D_ai = auto18F45B9D_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
                libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libComC_gf_CC_MapBankID(lv_indexMission), libComC_gf_MissionStatusAge(lv_indexMission, libComC_ge_MissionStatus_Available), 0);
            }    
        }
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_bankMap, "MissionCompletedAge");
        autoC70654AC_ae = CatalogEntryCount(c_gameCatalogMap);
        autoC70654AC_ai = 1;
        while (autoC70654AC_ai <= autoC70654AC_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoC70654AC_ai);
            autoC70654AC_ai = autoC70654AC_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
                libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libComC_gf_CC_MapBankID(lv_indexMission), libComC_gf_MissionStatusAge(lv_indexMission, libComC_ge_MissionStatus_Completed), 0);
            }    
        }
    }

}

void libComC_gf_CC_MapBankLoad (string lp_bankMap, bank lp_sourceBank) {
    int autoBA87C4B8_ae;
    int autoBA87C4B8_ai;
    int auto6820D815_ae;
    int auto6820D815_ai;
    int auto9F2A1F03_ae;
    int auto9F2A1F03_ai;
    int autoE7B797F0_ae;
    int autoE7B797F0_ai;
    int auto8F9D0B1A_ae;
    int auto8F9D0B1A_ai;
    int auto06466DBF_ae;
    int auto06466DBF_ai;

    // Variable Declarations
    string lv__SectionName;
    string lv_indexMission;
    string lv_indexObjective;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((lp_bankMap == null)) {
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_bankMap, "MissionAvailableAge");
        auto6820D815_ae = CatalogEntryCount(c_gameCatalogMap);
        auto6820D815_ai = 1;
        while (auto6820D815_ai <= auto6820D815_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto6820D815_ai);
            auto6820D815_ai = auto6820D815_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
                libComC_gf_CC_MissionStatusAgeSet(lv_indexMission, libComC_ge_MissionStatus_Available, libComC_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libComC_gf_CC_MapBankID(lv_indexMission), 0));
            }    
        }
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_bankMap, "MissionCompletedAge");
        auto9F2A1F03_ae = CatalogEntryCount(c_gameCatalogMap);
        auto9F2A1F03_ai = 1;
        while (auto9F2A1F03_ai <= auto9F2A1F03_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto9F2A1F03_ai);
            auto9F2A1F03_ai = auto9F2A1F03_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
                libComC_gf_CC_MissionStatusAgeSet(lv_indexMission, libComC_ge_MissionStatus_Completed, libComC_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libComC_gf_CC_MapBankID(lv_indexMission), 0));
            }    
        }
        if ((libComC_gf_NumberOfMissions(libComC_ge_MissionCountOptions_Completed) == libComC_gf_NumberOfMissions(libComC_ge_MissionCountOptions_All))) {
            libComC_gv_cC_InCompletedCampaign = true;
        }

        lv__SectionName = libComC_gf_CC_BankSectionName(lp_bankMap, "MissionBestTime");
        autoE7B797F0_ae = CatalogEntryCount(c_gameCatalogMap);
        autoE7B797F0_ai = 1;
        while (autoE7B797F0_ai <= autoE7B797F0_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoE7B797F0_ai);
            autoE7B797F0_ai = autoE7B797F0_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
                libComC_gf_CC_MissionCompletionBestTimeSet(lv_indexMission, 1, libComC_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libComC_gf_CC_BankMissionDifficultyKey(lv_indexMission, 1), -1));
                libComC_gf_CC_MissionCompletionBestTimeSet(lv_indexMission, 2, libComC_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libComC_gf_CC_BankMissionDifficultyKey(lv_indexMission, 2), -1));
                libComC_gf_CC_MissionCompletionBestTimeSet(lv_indexMission, 3, libComC_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libComC_gf_CC_BankMissionDifficultyKey(lv_indexMission, 3), -1));
                libComC_gf_CC_MissionCompletionBestTimeSet(lv_indexMission, 4, libComC_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libComC_gf_CC_BankMissionDifficultyKey(lv_indexMission, 4), -1));
            }    
        }
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_bankMap, "MissionObjectives");
        auto8F9D0B1A_ae = CatalogEntryCount(c_gameCatalogObjective);
        auto8F9D0B1A_ai = 1;
        while (auto8F9D0B1A_ai <= auto8F9D0B1A_ae) {
            lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, auto8F9D0B1A_ai);
            auto8F9D0B1A_ai = auto8F9D0B1A_ai + 1;
            if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                UserDataLoadInstance("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
            }

        }
        libComC_gf_CC_ArchiveBankLoad();
        auto06466DBF_ae = CatalogFieldValueCount(c_gameCatalogMap, libComC_gf_CurrentMap(), "ObjectiveArray", 1);
        auto06466DBF_ai = 1;
        while (auto06466DBF_ai <= auto06466DBF_ae) {
            lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libComC_gf_CurrentMap(), "ObjectiveArray["+IntToString(auto06466DBF_ai-1)+"]", 1);
            auto06466DBF_ai = auto06466DBF_ai + 1;
            if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                libComC_gf_CC_MissionObjectiveBestProgressSet(lv_indexObjective, libComC_gf_MissionObjectiveProgress(lv_indexObjective));
            }

        }
    }
    else {
        if ((libComC_gf_CampaignIsComplete() == false)) {
            lv__SectionName = libComC_gf_CC_BankSectionName(lp_bankMap, "MissionObjectives");
            autoBA87C4B8_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_bankMap, "ObjectiveArray", 1);
            autoBA87C4B8_ai = 1;
            while (autoBA87C4B8_ai <= autoBA87C4B8_ae) {
                lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_bankMap, "ObjectiveArray["+IntToString(autoBA87C4B8_ai-1)+"]", 1);
                autoBA87C4B8_ai = autoBA87C4B8_ai + 1;
                if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
                    UserDataResetInstance("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lv_indexObjective));
                    UserDataLoadInstance("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lv_indexObjective), lp_sourceBank, lv__SectionName);
                }

            }
        }

    }
    UserDataSetInt("StoryStates", "MissionCompletedCount", "Value", 1, libComC_gf_NumberOfMissions(libComC_ge_MissionCountOptions_Completed));
}

void libComC_gf_CC_MissionObjectiveProgressDataSet (string lp_objective, int lp_progress) {
    // Variable Declarations
    int lv_levelBefore;
    int lv_actualProgress;

    // Variable Initialization

    // Implementation
    lv_actualProgress = lp_progress;
    if ((libComC_gf_CC_ObjectiveCountsDown(lp_objective) == true)) {
        lv_actualProgress = (libComC_gf_MissionObjectiveItemCount(lp_objective) - lv_actualProgress);
    }

    if ((lv_actualProgress < 0)) {
        lv_actualProgress = 0;
        TextExpressionSetToken("Param/Expression/lib_ComC_D85591E0", "A", StringToText((lp_objective)));
        TextExpressionSetToken("Param/Expression/lib_ComC_D85591E0", "B", IntToText(lp_progress));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_D85591E0"), true);
    }

    if ((lv_actualProgress > libComC_gf_MissionObjectiveItemCount(lp_objective))) {
        lv_actualProgress = libComC_gf_MissionObjectiveItemCount(lp_objective);
        TextExpressionSetToken("Param/Expression/lib_ComC_2C889E12", "A", StringToText((lp_objective)));
        TextExpressionSetToken("Param/Expression/lib_ComC_2C889E12", "B", IntToText(lp_progress));
        TextExpressionSetToken("Param/Expression/lib_ComC_2C889E12", "C", IntToText(libComC_gf_MissionObjectiveItemCount(lp_objective)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_2C889E12"), true);
    }

    UserDataSetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lp_objective), "Progress", 1, lv_actualProgress);
}

void libComC_gf_CC_MissionObjectiveBestProgressSet (string lp_objective, int lp_progress) {
    // Implementation
    DataTableSetInt(true, ("CC_BestObj_" + (lp_objective)), lp_progress);
}

void libComC_gf_CC_MissionObjectiveArchiveProgressSet (string lp_objective, int lp_progress) {
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_ComC_6F77848E", "A", StringToText((lp_objective)));
    TextExpressionSetToken("Param/Expression/lib_ComC_6F77848E", "B", IntToText(lp_progress));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_6F77848E"), false);
    DataTableSetInt(true, ("CC_ArchiveObj_" + (lp_objective)), lp_progress);
}

text libComC_gf_MissionObjectiveDescription (string lp_objective) {
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Description", c_playerAny));
}

bool libComC_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state) {
    // Implementation
    if ((UserDataGetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 1) && (lp_state == libComC_ge_MissionObjectiveState_Available)) {
        return true;
    }

    if ((UserDataGetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 1) && (lp_state == libComC_ge_MissionObjectiveState_Completed)) {
        return true;
    }

    if ((lp_state == libComC_ge_MissionObjectiveState_Undiscovered) && (UserDataGetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 0) && (UserDataGetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 0)) {
        return true;
    }

    return false;
}

bool libComC_gf_MissionObjectiveIsPrimary (string lp_objective) {
    // Implementation
    return (libComC_gf_CC_ObjectiveTypeInteger(lp_objective) == c_objectiveTypePrimary);
}

text libComC_gf_MissionObjectiveName (string lp_objective) {
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Name", c_playerAny));
}

int libComC_gf_MissionObjectiveItemCount (string lp_objective) {
    // Variable Declarations
    int lv_objectiveRequiredItemCount;

    // Variable Initialization

    // Implementation
    lv_objectiveRequiredItemCount = DataTableGetInt(true, libComC_gf_CC_ObjectiveRequiredCountTableString(lp_objective));
    if ((lv_objectiveRequiredItemCount == 0)) {
        lv_objectiveRequiredItemCount = CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "RequiredCount", 1);
        DataTableSetInt(true, libComC_gf_CC_ObjectiveRequiredCountTableString(lp_objective), lv_objectiveRequiredItemCount);
    }

    return lv_objectiveRequiredItemCount;
}

int libComC_gf_MissionObjectiveProgress (string lp_objective) {
    // Implementation
    return UserDataGetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
}

bool libComC_gf_MissionObjectiveIsSecret (string lp_objective) {
    // Implementation
    return (UserDataGetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lp_objective), "IsSecret", 1) == 1);
}

text libComC_gf_CC_ObjectiveBonusText (string lp_objective) {
    // Variable Declarations
    text lv_bonusText;

    // Variable Initialization

    // Implementation
    lv_bonusText = UserDataGetText("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lp_objective), "RewardText", 1);
    if (((lv_bonusText != null) == false)) {
        libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventObjectiveBonusText, (lp_objective), "", false);
        lv_bonusText = libComC_gf_CC_EventReturnValueText(libComC_ge_CC_Event_CC_EventObjectiveBonusText);
    }

    return lv_bonusText;
}

int libComC_gf_CC_ObjectiveBasicElement (string lp_objectiveData) {
    // Implementation
    return DataTableGetObjective(true, libComC_gf_CC_ObjectiveTableString(lp_objectiveData));
}

string libComC_gf_CC_ObjectiveUserDataInstance (string lp_objective) {
    int auto6FC17B41_ae;
    int auto6FC17B41_ai;

    // Variable Declarations
    string lv_objectiveInstance;
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_index = DataTableGetInt(true, ("PObjIndex_" + (lp_objective)));
    if ((lv_index == 0)) {
        lv_objectiveInstance = UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "UserReference", 1));
        auto6FC17B41_ae = UserDataInstanceCount("MissionObjective");
        auto6FC17B41_ai = 1;
        lv_index = 1;
        for ( ; ( (auto6FC17B41_ai >= 0 && lv_index <= auto6FC17B41_ae) || (auto6FC17B41_ai <= 0 && lv_index >= auto6FC17B41_ae) ) ; lv_index += auto6FC17B41_ai ) {
            if ((UserDataInstance("MissionObjective", lv_index) == lv_objectiveInstance)) {
                DataTableSetInt(true, ("PObjIndex_" + (lp_objective)), lv_index);
                break;
            }

        }
    }
    else {
        lv_objectiveInstance = UserDataInstance("MissionObjective", lv_index);
    }
    return lv_objectiveInstance;
}

int libComC_gf_CC_ObjectiveBestProgress (string lp_objective) {
    // Implementation
    return DataTableGetInt(true, ("CC_BestObj_" + (lp_objective)));
}

int libComC_gf_CC_ObjectiveArchiveProgress (string lp_objective) {
    // Implementation
    return DataTableGetInt(true, ("CC_ArchiveObj_" + (lp_objective)));
}

int libComC_gf_CC_ObjectiveTypeInteger (string lp_objective) {
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return c_objectiveTypePrimary;
    }
    else {
        return c_objectiveTypeOptional;
    }
}

bool libComC_gf_CC_ObjectiveTypeBoolean (string lp_objective) {
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return true;
    }
    else {
        return false;
    }
}

string libComC_gf_CC_ObjectiveTableString (string lp_objective) {
    // Implementation
    return ("CC_Obj_" + (lp_objective));
}

string libComC_gf_CC_ObjectiveRequiredCountTableString (string lp_objectiveData) {
    // Implementation
    return (libComC_gf_CC_ObjectiveTableString(lp_objectiveData) + "_RequiredCount");
}

bool libComC_gf_CC_ObjectiveCountsDown (string lp_objective) {
    // Implementation
    return (UserDataGetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lp_objective), "CountDown", 1) == 1);
}

void libComC_gf_NC_MovieStartRecording (string lp_fileName) {
    // Implementation
    libComC_gv_NC_MovieRecordingCount += 1;
    if ((libComC_gv_NC_MovieRecordingCount != 1)) {
        return ;
    }

    MovieStartRecording(lp_fileName);
}

void libComC_gf_NC_MovieStopRecording () {
    // Implementation
    libComC_gv_NC_MovieRecordingCount -= 1;
    if ((libComC_gv_NC_MovieRecordingCount == 0)) {
        MovieStopRecording();
    }

}

void libComC_gf_DisplayConversationTimestamp (string lp_conversation) {
    int auto2A108C07_ae;
    int auto2A108C07_ai;

    // Variable Declarations
    int lv_index;
    string lv_convoTimestamp;

    // Variable Initialization

    // Implementation
    auto2A108C07_ae = UserDataInstanceCount("Timestamps");
    auto2A108C07_ai = 1;
    lv_index = 1;
    for ( ; ( (auto2A108C07_ai >= 0 && lv_index <= auto2A108C07_ae) || (auto2A108C07_ai <= 0 && lv_index >= auto2A108C07_ae) ) ; lv_index += auto2A108C07_ai ) {
        lv_convoTimestamp = UserDataInstance("Timestamps", lv_index);
        if ((UserDataGetGameLink("Timestamps", lv_convoTimestamp, "Conversation", 1) == lp_conversation)) {
            if ((UserDataGetInt("Timestamps", lv_convoTimestamp, "Wait", 1) == 1)) {
                libComC_gf_DisplayTimestamp(lv_convoTimestamp, true);
            }
            else {
                libComC_gf_DisplayTimestamp(lv_convoTimestamp, false);
            }
            return ;
        }

    }
}

void libComC_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait) {
    // Variable Declarations
    bool lv_cinematicOn;

    // Variable Initialization

    // Implementation
    libComC_gv_cC_CutsceneTimestamp = lp_timestamp;
    if ((lp_waitDontWait == true)) {
        lv_cinematicOn = libNtve_gf_PlayerInCinematicMode(1);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        }

        UISetWorldVisible(PlayerGroupAll(), false);
        TriggerExecute(libComC_gt_CC_DisplayTimestampSkippable, true, true);
        UIHideTextCrawl(PlayerGroupAll());
        Wait(0.625, c_timeGame);
        UISetWorldVisible(PlayerGroupAll(), true);
        if ((lv_cinematicOn == false)) {
            libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        }

    }
    else {
        TriggerExecute(libComC_gt_CC_DisplayTimestamp, true, false);
    }
}

void libComC_gf_HaltTimestamp () {
    // Implementation
    TriggerStop(libComC_gt_CC_DisplayTimestampSkippable);
    TriggerStop(libComC_gt_CC_DisplayTimestamp);
    UIHideTextCrawl(PlayerGroupAll());
}

void libComC_gf_CC_DisplayCinematicTimestamp (string lp_scene, bool lp_fromBookmark) {
    int autoF75EEEC7_ae;
    int autoF75EEEC7_ai;

    // Variable Declarations
    int lv_index;
    string lv_sceneTimestamp;

    // Variable Initialization

    // Implementation
    autoF75EEEC7_ae = UserDataInstanceCount("Timestamps");
    autoF75EEEC7_ai = 1;
    lv_index = 1;
    for ( ; ( (autoF75EEEC7_ai >= 0 && lv_index <= autoF75EEEC7_ae) || (autoF75EEEC7_ai <= 0 && lv_index >= autoF75EEEC7_ae) ) ; lv_index += autoF75EEEC7_ai ) {
        lv_sceneTimestamp = UserDataInstance("Timestamps", lv_index);
        if ((UserDataGetUserInstance("Timestamps", lv_sceneTimestamp, "Scene", 1) == lp_scene)) {
            if ((UserDataGetInt("Timestamps", lv_sceneTimestamp, "FromBookmark", 1) == 1) && (lp_fromBookmark == false)) {
                return ;
            }

            if ((UserDataGetInt("Timestamps", lv_sceneTimestamp, "Wait", 1) == 1)) {
                libComC_gf_DisplayTimestamp(lv_sceneTimestamp, true);
            }
            else {
                libComC_gf_DisplayTimestamp(lv_sceneTimestamp, false);
            }
            return ;
        }

    }
}

string libComC_gf_CC_SceneMovie (string lp_scene) {
    // Implementation
    return UserDataGetMovie("Scenes", lp_scene, "SceneFile", 1);
}

string libComC_gf_CC_CinematicCutscene (string lp_scene) {
    // Variable Declarations
    string lv_cutsceneFile;

    // Variable Initialization
    lv_cutsceneFile = "";

    // Implementation
    lv_cutsceneFile = UserDataGetString("Scenes", lp_scene, "Cutscene", 1);
    if ((lv_cutsceneFile == "")) {
        return null;
    }

    lv_cutsceneFile = ("Cutscenes\\" + lv_cutsceneFile + ".SC2Cutscene");
    return lv_cutsceneFile;
}

text libComC_gf_CC_SceneName (string lp_scene) {
    // Implementation
    return UserDataGetText("Scenes", lp_scene, "Name", 1);
}

bool libComC_gf_CC_ScenePlayed (string lp_scene) {
    // Implementation
    return (UserDataGetInt("Scenes", lp_scene, "Played", 1) > 0);
}

void libComC_gf_CC_SceneSetPlayed (string lp_scene, bool lp_played) {
    // Implementation
    if ((lp_played == true)) {
        UserDataSetInt("Scenes", lp_scene, "Played", 1, 1);
    }
    else {
        UserDataSetInt("Scenes", lp_scene, "Played", 1, 0);
    }
}

void libComC_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip) {
    // Implementation
    CutsceneCreateNew(lp_file, lp_position, 0.0, PlayerGroupAll(), true);
    libComC_gv_cC_CutsceneCurrent = CutsceneLastCreated();
    libComC_gv_cC_CutsceneSkippable = (lp_allowSkip == true);
    TriggerExecute(libComC_gt_CC_WaitForCutscene, true, lp_waitDontWait);
}

void libComC_gf_CampaignPlayMovieCutscene (string lp_file, bool lp_waitDontWait, bool lp_allowSkip) {
    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libComC_gv_cC_CutsceneDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), lp_file, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
    libComC_gv_cC_CutsceneCurrent = CutsceneGetTriggerControl(DialogControlLastCreated());
    libComC_gv_cC_CutsceneSkippable = (lp_allowSkip == true);
    CutscenePlay(libComC_gv_cC_CutsceneCurrent);
    TriggerExecute(libComC_gt_CC_WaitForDialogCutscene, true, lp_waitDontWait);
}

void libComC_gf_CampaignStopCutscene () {
    // Implementation
    if (((TriggerActiveCount(libComC_gt_CC_WaitForCutscene) > 0) || (TriggerActiveCount(libComC_gt_CC_WaitForDialogCutscene) > 0))) {
        TriggerStop(libComC_gt_CC_WaitForCutscene);
        TriggerStop(libComC_gt_CC_WaitForDialogCutscene);
    }

    CutsceneStop(libComC_gv_cC_CutsceneCurrent);
    DialogDestroy(libComC_gv_cC_CutsceneDialog);
}

void libComC_gf_PlayCinematic (string lp_scene, bool lp_animatic) {
    // Variable Declarations
    bool lv_wasStoryMode;
    bool lv_wasCinematicMode;

    // Variable Initialization

    // Implementation
    UserDataSetInt("Scenes", lp_scene, "Played", 1, 1);
    libComC_gv_cC_CutsceneCurrentUser = lp_scene;
    if ((libComC_gf_CC_CinematicCutscene(lp_scene) != null)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        lv_wasStoryMode = libNtve_gf_PlayerInStoryMode(1);
        lv_wasCinematicMode = libNtve_gf_PlayerInCinematicMode(1);
        libNtve_gf_StoryMode(PlayerGroupAll(), true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        libComC_gf_NC_MovieStartRecording(UserDataGetString("Scenes", lp_scene, "RecordFileName", 1));
        libComC_gf_CC_DisplayCinematicTimestamp(lp_scene, false);
        TriggerEnable(libComC_gt_CC_DisplayTimestampFromBookmark, true);
        libComC_gf_CampaignPlayMovieCutscene(libComC_gf_CC_CinematicCutscene(lp_scene), true, true);
        TriggerEnable(libComC_gt_CC_DisplayTimestampFromBookmark, false);
        libComC_gf_NC_MovieStopRecording();
        if ((lv_wasCinematicMode == false)) {
            libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        }

        if ((lv_wasStoryMode == false)) {
            libNtve_gf_StoryMode(PlayerGroupAll(), false);
        }

        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        return ;
    }

    if ((libComC_gf_CC_SceneMovie(lp_scene) != null)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
        libComC_gf_MuteUnmuteAllSoundChannelsExcept(true, c_soundCategoryMovie, PlayerGroupAll());
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
        if ((libComC_gv_cC_LoadingComplete == false)) {
            SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, false);
        }

        libComC_gf_CC_DisplayCinematicTimestamp(lp_scene, false);
        TriggerExecute(libComC_gt_CC_PlaySceneSkippable, true, true);
        libComC_gf_HaltTimestamp();
        TransmissionClearAll();
        libComC_gf_MuteUnmuteAllSoundChannelsExcept(false, c_soundCategoryMovie, PlayerGroupAll());
        libComC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
        return ;
    }

}

void libComC_gf_CC_FadeAllSoundsExceptMusic (fixed lp_duration, bool lp_wait) {
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

void libComC_gf_CC_ApplyTech (int lp_player) {
    // Implementation
    libComC_gv_cC_ApplyingCampaignTech = true;
    TechTreeRestrictionsEnable(lp_player, true);
    libComC_gf_CC_ApplyArmyTech(lp_player);
    libComC_gf_CC_ApplyPerkTech(lp_player);
    libComC_gv_cC_ApplyingCampaignTech = false;
    libComC_gv_cC_CampaignTechApplied = true;
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventTechApply, IntToString(lp_player), "", false);
    if ((lp_player == 1)) {
        libComC_gf_CC_HelpTechTree_UpdatePanel();
        libComC_gf_CC_HelpUnitPanel_UpdatePanel();
    }

}

bool libComC_gf_CC_CampaignTechApplied () {
    // Implementation
    return libComC_gv_cC_CampaignTechApplied;
}

void libComC_gf_CC_UpdateTechStates (int lp_player) {
    // Implementation
    libComC_gf_CC_ArmyCategoryUpdateStates(lp_player);
    libComC_gf_NC_UpdateArmyUnitStates();
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventTechUpdate, IntToString(lp_player), "", false);
}

void libComC_gf_CC_ResetTech () {
    // Implementation
    libComC_gf_NC_ResetArmyTech();
    libComC_gf_CC_ResetPerkTech();
    libComC_gf_CC_UpdateTechStates(1);
}

void libComC_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;
    text lv_debugMessage;

    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 1);
        lv_debugMessage = StringExternal("Param/Value/lib_ComC_4769D790");
    }
    else {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 0);
        lv_debugMessage = StringExternal("Param/Value/lib_ComC_3EC01ED2");
    }
    lv_armyCategory = libComC_gf_NC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        libComC_gf_CC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyCategory, (lv_armyCategory), null, null, lp_player);
        CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libComC_gf_CC_ArmyCategoryUnitType(lv_armyCategory)), (libComC_gf_CC_ArmyCategoryUnitType(lv_armyCategory)));
        TextExpressionSetToken("Param/Expression/lib_ComC_5E578D12", "A", lv_debugMessage);
        TextExpressionSetToken("Param/Expression/lib_ComC_5E578D12", "B", StringToText((lv_armyCategory)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_5E578D12"), false);
    }

    lv_armyCategory2 = libComC_gf_NC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        libComC_gf_CC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyUnit, (lv_armyCategory2), null, null, lp_player);
        TextExpressionSetToken("Param/Expression/lib_ComC_BEFF0CCA", "A", lv_debugMessage);
        TextExpressionSetToken("Param/Expression/lib_ComC_BEFF0CCA", "B", StringToText((lv_armyCategory2)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_BEFF0CCA"), false);
        if ((lp_enableDisable == true)) {
            CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libComC_gf_CC_ArmyCategoryUnitType(lv_armyCategory)), (libComC_gf_NC_StoryArmyUnitUnitType(lv_armyCategory2)));
            PlayerApplySkin(lp_player, libComC_gf_NC_ArmyUnitSkin(lv_armyCategory2), true);
        }

    }

    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventTechUnitUpdate, IntToString(lp_player), (lp_techUnit), false);
    if ((libComC_gf_CC_CurrentMapIsInstallation() == false)) {
        if ((lp_enableDisable == true)) {
            if ((libComC_gv_cC_ApplyingCampaignTech == true)) {
                libComC_gf_AddUnitTypeToUnitHelpPanel(libComC_gf_CC_CampaignTechUnitType(lp_techUnit), lp_player);
            }
            else {
                libComC_gf_AddUnitTypeToUnitHelpPanel(libComC_gf_CC_CampaignTechUnitType(lp_techUnit), lp_player);
            }
        }
        else {
            TechTreeUnitHelp(lp_player, libComC_gf_CC_CampaignTechUnitType(lp_techUnit), false);
        }
    }

}

bool libComC_gf_CampaignTechUnitIsEnabled (string lp_techUnit) {
    // Implementation
    return (UserDataGetInt("TechUnit", lp_techUnit, "Enabled", 1) > 0);
}

string libComC_gf_CC_CampaignTechUnitType (string lp_techUnit) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;

    // Variable Initialization

    // Implementation
    lv_armyCategory = libComC_gf_NC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        return libComC_gf_CC_ArmyCategoryUnitType(lv_armyCategory);
    }

    lv_armyCategory2 = libComC_gf_NC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        return libComC_gf_NC_StoryArmyUnitUnitType(lv_armyCategory2);
    }

    return null;
}

void libComC_gf_CC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player) {
    int autoCE548F05_ae;
    int autoCE548F05_ai;
    int auto454C61AE_ae;
    int auto454C61AE_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_indexUpgrade;
    int lv_index;
    int lv_unitIndex;
    string lv_upgrade;
    abilcmd lv_abilityCommand;
    string lv_uField;
    string lv_aField;

    // Variable Initialization
    lv_uField = "";
    lv_aField = "";

    // Implementation
    if ((lp_upgradeField == null)) {
        lv_uField = "UpgradeArray";
    }
    else {
        lv_uField = lp_upgradeField;
    }
    if ((lp_abilCommandField == null)) {
        lv_aField = "AbilCommandArray";
    }
    else {
        lv_aField = lp_abilCommandField;
    }
    autoCE548F05_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_uField, 1);
    autoCE548F05_ai = 1;
    lv_index = 1;
    for ( ; ( (autoCE548F05_ai >= 0 && lv_index <= autoCE548F05_ae) || (autoCE548F05_ai <= 0 && lv_index >= autoCE548F05_ae) ) ; lv_index += autoCE548F05_ai ) {
        lv_upgrade = (libComC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_uField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 0);
        }
    }
    auto454C61AE_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_aField, 1);
    auto454C61AE_ai = 1;
    lv_index = 1;
    for ( ; ( (auto454C61AE_ai >= 0 && lv_index <= auto454C61AE_ae) || (auto454C61AE_ai <= 0 && lv_index >= auto454C61AE_ae) ) ; lv_index += auto454C61AE_ai ) {
        lv_abilityCommand = StringToAbilCmd(libComC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, true);
        }
        else {
            TechTreeAbilityAllow(lp_player, lv_abilityCommand, false);
        }
    }
}

string libComC_gf_NC_TechUnitOfArmyCategory (string lp_armyCategory) {
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "UserReference", 1));
}

string libComC_gf_NC_ArmyCategoryOfTechUnit (string lp_techUnit) {
    int auto410BC298_ae;
    int auto410BC298_ai;

    // Variable Declarations
    string lv_indexCategory;

    // Variable Initialization

    // Implementation
    auto410BC298_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto410BC298_ai = 1;
    while (auto410BC298_ai <= auto410BC298_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto410BC298_ai);
        if ((libComC_gf_NC_TechUnitOfArmyCategory(lv_indexCategory) == lp_techUnit)) {
            return lv_indexCategory;
        }

        auto410BC298_ai = auto410BC298_ai + 1;
    }
    return null;
}

text libComC_gf_NC_ArmyCategoryName (string lp_armyCategory) {
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Name", 1));
}

text libComC_gf_CC_ArmyCategoryTitle (string lp_armyCategory) {
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Title", 1));
}

text libComC_gf_CC_ArmyCategoryUnitDescription (string lp_armyCategory) {
    // Variable Declarations
    string lv_unitLink;

    // Variable Initialization

    // Implementation
    lv_unitLink = (CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "Unit", 1));
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, (lv_unitLink), "Description", 1));
}

string libComC_gf_CC_ArmyCategoryIcon (string lp_armyCategory) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Icon", c_playerAny));
}

string libComC_gf_CC_ArmyCategoryUnitType (string lp_armyCategory) {
    // Variable Declarations
    string lv_value;

    // Variable Initialization
    lv_value = "";

    // Implementation
    if ((lp_armyCategory == null)) {
        return null;
    }

    lv_value = CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Unit", 1);
    return (lv_value);
}

int libComC_gf_CC_ArmyCategoryState (string lp_armyCategory) {
    // Variable Declarations
    int lv_value;

    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (libComC_gv_cCC_ArmyCategoryStateKey + (lp_armyCategory)));
    return lv_value;
}

void libComC_gf_CC_SetArmyCategoryState (string lp_armyCategory, int lp_state) {
    int auto2ABA591C_ae;
    int auto2ABA591C_ai;

    // Variable Declarations
    string lv_indexArmyUnit;

    // Variable Initialization

    // Implementation
    if ((libComC_gf_CC_ArmyCategoryState(lp_armyCategory) == lp_state)) {
        return ;
    }

    DataTableSetInt(true, (libComC_gv_cCC_ArmyCategoryStateKey + (lp_armyCategory)), (lp_state));
    if ((lp_state == c_armyCategoryStateLocked)) {
        auto2ABA591C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
        auto2ABA591C_ai = 1;
        while (auto2ABA591C_ai <= auto2ABA591C_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto2ABA591C_ai-1)+"]", 1);
            libComC_gf_NC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked);
            auto2ABA591C_ai = auto2ABA591C_ai + 1;
        }
    }

}

bool libComC_gf_ArmyCategoryStateCheck (string lp_armyCategory, int lp_state) {
    // Implementation
    return (libComC_gf_CC_ArmyCategoryState(lp_armyCategory) == lp_state);
}

string libComC_gf_EnabledUnitTypeforArmyCategory (string lp_armyCategory) {
    int auto97D97496_ae;
    int auto97D97496_ai;

    // Variable Declarations
    string lv_indexArmyUnit;

    // Variable Initialization

    // Implementation
    auto97D97496_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    auto97D97496_ai = 1;
    while (auto97D97496_ai <= auto97D97496_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto97D97496_ai-1)+"]", 1);
        if ((libComC_gf_CampaignTechUnitIsEnabled(libComC_gf_NC_TechUnitOfArmyCategory(lp_armyCategory)) == true)) {
            return libComC_gf_NC_StoryArmyUnitUnitType(lv_indexArmyUnit);
        }

        auto97D97496_ai = auto97D97496_ai + 1;
    }
    return libComC_gf_CC_ArmyCategoryUnitType(lp_armyCategory);
}

string libComC_gf_NC_ArmyCategoryPlanetCamera (string lp_armyCategory) {
    // Implementation
    return UserDataGetString("TechUnit", libComC_gf_NC_TechUnitOfArmyCategory(lp_armyCategory), "PlanetPanelCamera", 1);
}

string libComC_gf_CC_ArmyCategoryPurchasedUnit (string lp_armyCategory) {
    int auto5C2D4F9C_ae;
    int auto5C2D4F9C_ai;

    // Variable Declarations
    string lv_indexArmyUnit;

    // Variable Initialization

    // Implementation
    auto5C2D4F9C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    auto5C2D4F9C_ai = 1;
    while (auto5C2D4F9C_ai <= auto5C2D4F9C_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto5C2D4F9C_ai-1)+"]", 1);
        if ((libComC_gf_NC_StoryArmyUnitState(lv_indexArmyUnit) == c_armyUnitStatePurchased)) {
            return lv_indexArmyUnit;
        }

        auto5C2D4F9C_ai = auto5C2D4F9C_ai + 1;
    }
    return null;
}

void libComC_gf_CC_ArmyCategoryUpdateStates (int lp_player) {
    int autoF03F3E71_ae;
    int autoF03F3E71_ai;
    int auto82AF4654_ae;
    int auto82AF4654_ai;
    int autoD796D011_ae;
    int autoD796D011_ai;
    int autoCC1ACBDA_ae;
    int autoCC1ACBDA_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexMission;
    string lv_missionCategory;
    string lv_missionCategoryExtra;
    string lv_requiredMission;
    int lv_index;

    // Variable Initialization

    // Implementation
    autoF03F3E71_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoF03F3E71_ai = 1;
    while (autoF03F3E71_ai <= autoF03F3E71_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoF03F3E71_ai);
        DataTableSetBool(false, (lv_indexCategory), false);
        autoF03F3E71_ai = autoF03F3E71_ai + 1;
    }
    auto82AF4654_ae = CatalogEntryCount(c_gameCatalogMap);
    auto82AF4654_ai = 1;
    while (auto82AF4654_ai <= auto82AF4654_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto82AF4654_ai);
        auto82AF4654_ai = auto82AF4654_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Completed) == true)) {
                lv_missionCategory = libComC_gf_MissionArmyCategoryUnlocked(lv_indexMission);
                if ((lv_missionCategory != null)) {
                    DataTableSetBool(false, (lv_missionCategory), true);
                }

                autoD796D011_ae = 4;
                autoD796D011_ai = 1;
                lv_index = 1;
                for ( ; ( (autoD796D011_ai >= 0 && lv_index <= autoD796D011_ae) || (autoD796D011_ai <= 0 && lv_index >= autoD796D011_ae) ) ; lv_index += autoD796D011_ai ) {
                    lv_missionCategoryExtra = UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lv_indexMission), "ExtraArmyCategoryUnlock", lv_index);
                    if ((lv_missionCategoryExtra != null)) {
                        DataTableSetBool(false, (lv_missionCategoryExtra), true);
                    }

                }
            }

        }    
    }
    autoCC1ACBDA_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoCC1ACBDA_ai = 1;
    while (autoCC1ACBDA_ai <= autoCC1ACBDA_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoCC1ACBDA_ai);
        if ((DataTableGetBool(false, (lv_indexCategory)) == true)) {
            libComC_gf_CC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateUnlocked);
        }
        else {
            libComC_gf_CC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
        }
        autoCC1ACBDA_ai = autoCC1ACBDA_ai + 1;
    }
}

bool libComC_gf_CC_ArmyCategoryUsedInUI (string lp_armyCategory) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Flags[Hidden]", 1) == "0");
}

string libComC_gf_NC_StoryArmyUnitUnitType (string lp_armyUnit) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Unit", 1));
}

string libComC_gf_NC_ArmyUnitOfTechUnit (string lp_armyUnit) {
    int auto5665B759_ae;
    int auto5665B759_ai;
    int auto3DC93168_ae;
    int auto3DC93168_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;

    // Variable Initialization

    // Implementation
    auto5665B759_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto5665B759_ai = 1;
    while (auto5665B759_ai <= auto5665B759_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto5665B759_ai);
        auto3DC93168_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto3DC93168_ai = 1;
        while (auto3DC93168_ai <= auto3DC93168_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto3DC93168_ai-1)+"]", 1);
            if ((libComC_gf_NC_TechUnitOfArmyUnit(lv_indexUnit) == lp_armyUnit)) {
                return lv_indexUnit;
            }

            auto3DC93168_ai = auto3DC93168_ai + 1;
        }
        auto5665B759_ai = auto5665B759_ai + 1;
    }
    return null;
}

text libComC_gf_NC_ArmyUnitTitle (string lp_armyUnit) {
    // Implementation
    return UserDataGetText("TechUnit", libComC_gf_NC_TechUnitOfArmyUnit(lp_armyUnit), "DescriptionShort", 1);
}

string libComC_gf_NC_TechUnitOfArmyUnit (string lp_armyUnit) {
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "UserReference", 1));
}

text libComC_gf_StoryArmyUnitName (string lp_armyUnit) {
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Name", 1));
}

text libComC_gf_NC_ArmyUnitDescription (string lp_armyUnit) {
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Description", 1));
}

string libComC_gf_NC_ArmyUnitIcon (string lp_armyCategory) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyCategory), "Icon", c_playerAny));
}

string libComC_gf_NC_ArmyUnitMovie (string lp_armyUnit) {
    // Variable Declarations
    string lv_moviePath;

    // Variable Initialization
    lv_moviePath = "";

    // Implementation
    lv_moviePath = CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Movie", 1);
    return (lv_moviePath);
}

bool libComC_gf_CC_ArmyUnitStartsLocked (string lp_armyUnit) {
    // Implementation
    return (UserDataGetInt("TechUnit", libComC_gf_NC_TechUnitOfArmyUnit(lp_armyUnit), "StartsLocked", 1) == 1);
}

string libComC_gf_CC_ArmyUnitRequiredMission (string lp_armyUnit) {
    // Implementation
    return UserDataGetGameLink("TechUnit", libComC_gf_NC_TechUnitOfArmyUnit(lp_armyUnit), "RequiredMission", 1);
}

string libComC_gf_NC_ArmyCategoryOfArmyUnit (string lp_armyUnit) {
    int auto98F5727F_ae;
    int auto98F5727F_ai;
    int autoD6DF9EA0_ae;
    int autoD6DF9EA0_ai;

    // Variable Declarations
    string lv_indexUnit;
    string lv_indexCategory;

    // Variable Initialization

    // Implementation
    auto98F5727F_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto98F5727F_ai = 1;
    while (auto98F5727F_ai <= auto98F5727F_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto98F5727F_ai);
        autoD6DF9EA0_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoD6DF9EA0_ai = 1;
        while (autoD6DF9EA0_ai <= autoD6DF9EA0_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoD6DF9EA0_ai-1)+"]", 1);
            if ((lv_indexUnit == lp_armyUnit)) {
                return lv_indexCategory;
            }

            autoD6DF9EA0_ai = autoD6DF9EA0_ai + 1;
        }
        auto98F5727F_ai = auto98F5727F_ai + 1;
    }
    return null;
}

int libComC_gf_CC_ArmyUnitUIOrder (string lp_armyUnit) {
    // Implementation
    return UserDataGetInt("TechUnit", libComC_gf_NC_TechUnitOfArmyUnit(lp_armyUnit), "UIOrder", 1);
}

string libComC_gf_NC_ArmyUnitSkin (string lp_armyCategory) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyCategory, "Skin", 1));
}

int libComC_gf_NC_StoryArmyUnitState (string lp_armyUnit) {
    // Variable Declarations
    int lv_value;

    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, (libComC_gv_pCC_ArmyUnitStateKey + (lp_armyUnit)));
    return lv_value;
}

bool libComC_gf_NC_StoryArmyUnitState2 (string lp_armyUnit) {
    // Implementation
    return (UserDataGetInt("TechUnit", libComC_gf_NC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1) == 1);
}

void libComC_gf_NC_SetArmyUnitState (string lp_armyUnit, int lp_state) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Variable Initialization

    // Implementation
    DataTableSetInt(true, (libComC_gv_pCC_ArmyUnitStateKey + (lp_armyUnit)), (lp_state));
}

void libComC_gf_CC_ArmyUnitSetNew (string lp_armyUnit, bool lp_new) {
    // Implementation
    UserDataSetInt("TechUnit", libComC_gf_NC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1, BoolToInt(lp_new));
}

void libComC_gf_NC_UpdateArmyUnitStates () {
    int auto2FA4CABE_ae;
    int auto2FA4CABE_ai;
    int auto05A7AC8C_ae;
    int auto05A7AC8C_ai;
    int autoD8C8A3CB_ae;
    int autoD8C8A3CB_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexArmyUnit;

    // Variable Initialization

    // Implementation
    auto2FA4CABE_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto2FA4CABE_ai = 1;
    while (auto2FA4CABE_ai <= auto2FA4CABE_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto2FA4CABE_ai);
        if ((libComC_gf_CC_ArmyCategoryState(lv_indexCategory) == c_armyCategoryStateLocked)) {
            autoD8C8A3CB_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            autoD8C8A3CB_ai = 1;
            while (autoD8C8A3CB_ai <= autoD8C8A3CB_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoD8C8A3CB_ai-1)+"]", 1);
                libComC_gf_NC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked);
                autoD8C8A3CB_ai = autoD8C8A3CB_ai + 1;
            }
        }
        else {
            auto05A7AC8C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto05A7AC8C_ai = 1;
            while (auto05A7AC8C_ai <= auto05A7AC8C_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto05A7AC8C_ai-1)+"]", 1);
                libComC_gf_NC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateUnlocked);
                auto05A7AC8C_ai = auto05A7AC8C_ai + 1;
            }
        }
        auto2FA4CABE_ai = auto2FA4CABE_ai + 1;
    }
}

void libComC_gf_NC_SaveArmyCategoryToBank (bank lp_bank, string lp_section) {
    int auto6E2751AC_ae;
    int auto6E2751AC_ai;

    // Variable Declarations
    string lv_indexCategory;

    // Variable Initialization

    // Implementation
    auto6E2751AC_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto6E2751AC_ai = 1;
    while (auto6E2751AC_ai <= auto6E2751AC_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto6E2751AC_ai);
        libComC_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), (libComC_gf_CC_ArmyCategoryState(lv_indexCategory)), 0);
        auto6E2751AC_ai = auto6E2751AC_ai + 1;
    }
}

void libComC_gf_NC_SaveArmyUnitsToBank (bank lp_bank, string lp_section) {
    int autoF71E1E19_ae;
    int autoF71E1E19_ai;
    int auto60D8397C_ae;
    int auto60D8397C_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Variable Initialization

    // Implementation
    autoF71E1E19_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoF71E1E19_ai = 1;
    while (autoF71E1E19_ai <= autoF71E1E19_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoF71E1E19_ai);
        auto60D8397C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto60D8397C_ai = 1;
        while (auto60D8397C_ai <= auto60D8397C_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto60D8397C_ai-1)+"]", 1);
            libComC_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexUpgrade), (libComC_gf_NC_StoryArmyUnitState(lv_indexUpgrade)), 0);
            auto60D8397C_ai = auto60D8397C_ai + 1;
        }
        autoF71E1E19_ai = autoF71E1E19_ai + 1;
    }
}

void libComC_gf_NC_LoadArmyCategoryFromBank (bank lp_bank, string lp_section) {
    int auto8DD81BD7_ae;
    int auto8DD81BD7_ai;

    // Variable Declarations
    string lv_indexCategory;
    int lv_stateInt;
    int lv_state;

    // Variable Initialization

    // Implementation
    auto8DD81BD7_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto8DD81BD7_ai = 1;
    while (auto8DD81BD7_ai <= auto8DD81BD7_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto8DD81BD7_ai);
        lv_stateInt = libComC_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexCategory), 0);
        lv_state = lv_stateInt;
        libComC_gf_CC_SetArmyCategoryState(lv_indexCategory, lv_state);
        auto8DD81BD7_ai = auto8DD81BD7_ai + 1;
    }
}

void libComC_gf_NC_LoadArmyUnitsFromBank (bank lp_bank, string lp_section) {
    int autoBCDEBE81_ae;
    int autoBCDEBE81_ai;
    int autoF5426416_ae;
    int autoF5426416_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    int lv_stateInt;
    int lv_state;

    // Variable Initialization
    lv_state = c_armyUnitStateLocked;

    // Implementation
    autoBCDEBE81_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoBCDEBE81_ai = 1;
    while (autoBCDEBE81_ai <= autoBCDEBE81_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoBCDEBE81_ai);
        autoF5426416_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoF5426416_ai = 1;
        while (autoF5426416_ai <= autoF5426416_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoF5426416_ai-1)+"]", 1);
            lv_stateInt = libComC_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexUpgrade), 0);
            lv_state = lv_stateInt;
            libComC_gf_NC_SetArmyUnitState(lv_indexUpgrade, lv_state);
            autoF5426416_ai = autoF5426416_ai + 1;
        }
        autoBCDEBE81_ai = autoBCDEBE81_ai + 1;
    }
}

void libComC_gf_CC_ApplyArmyTech (int lp_player) {
    int auto6A37FD9B_ae;
    int auto6A37FD9B_ai;
    int autoD96EC642_ae;
    int autoD96EC642_ai;
    int auto834AFCDE_ae;
    int auto834AFCDE_ai;
    int auto97078098_ae;
    int auto97078098_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexCategory2;
    string lv_indexUpgrade;
    bool lv_categoryEnableDisable;
    bool lv_upgradeEnableDisable;

    // Variable Initialization
    lv_categoryEnableDisable = true;
    lv_upgradeEnableDisable = true;

    // Implementation
    auto6A37FD9B_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto6A37FD9B_ai = 1;
    while (auto6A37FD9B_ai <= auto6A37FD9B_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto6A37FD9B_ai);
        libComC_gf_EnableCampaignTechUnit(false, libComC_gf_NC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        autoD96EC642_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoD96EC642_ai = 1;
        while (autoD96EC642_ai <= autoD96EC642_ae) {
            lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoD96EC642_ai-1)+"]", 1);
            libComC_gf_EnableCampaignTechUnit(false, libComC_gf_NC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
            autoD96EC642_ai = autoD96EC642_ai + 1;
        }
        auto6A37FD9B_ai = auto6A37FD9B_ai + 1;
    }
    auto834AFCDE_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto834AFCDE_ai = 1;
    while (auto834AFCDE_ai <= auto834AFCDE_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto834AFCDE_ai);
        if ((libComC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyCategoryStateUnlocked) == true)) {
            lv_categoryEnableDisable = true;
            auto97078098_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto97078098_ai = 1;
            while (auto97078098_ai <= auto97078098_ae) {
                lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto97078098_ai-1)+"]", 1);
                if ((libComC_gf_NC_StoryArmyUnitState(lv_indexCategory2) == c_armyUnitStatePurchased)) {
                    libComC_gf_EnableCampaignTechUnit(true, libComC_gf_NC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
                    lv_categoryEnableDisable = false;
                }

                auto97078098_ai = auto97078098_ai + 1;
            }
        }
        else {
            lv_categoryEnableDisable = false;
        }
        if ((lv_categoryEnableDisable == true)) {
            libComC_gf_EnableCampaignTechUnit(true, libComC_gf_NC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        }

        auto834AFCDE_ai = auto834AFCDE_ai + 1;
    }
}

void libComC_gf_NC_ResetArmyTech () {
    int autoA87A40AD_ae;
    int autoA87A40AD_ai;

    // Variable Declarations
    string lv_indexCategory;

    // Variable Initialization

    // Implementation
    autoA87A40AD_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoA87A40AD_ai = 1;
    while (autoA87A40AD_ai <= autoA87A40AD_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoA87A40AD_ai);
        libComC_gf_CC_SetArmyCategoryState(lv_indexCategory, c_armyCategoryStateLocked);
        autoA87A40AD_ai = autoA87A40AD_ai + 1;
    }
}

void libComC_gf_CC_PerkEnableDisable (bool lp_enableDisable, string lp_perk, int lp_player) {
    int auto7A3CD7DC_ae;
    int auto7A3CD7DC_ai;
    int autoA574F886_ae;
    int autoA574F886_ai;

    // Variable Declarations
    int lv_upgradeLevel;
    int lv_upgradeIndex;
    int lv_commandIndex;
    bool lv_allowDisallow;

    // Variable Initialization
    lv_allowDisallow = true;

    // Implementation
    if ((lp_enableDisable == true)) {
        lv_upgradeLevel = 1;
        lv_allowDisallow = true;
    }
    else {
        lv_upgradeLevel = 0;
        lv_allowDisallow = false;
    }
    auto7A3CD7DC_ae = UserDataFieldValueCount("CampaignPerk", "Upgrade");
    auto7A3CD7DC_ai = 1;
    lv_upgradeIndex = 1;
    for ( ; ( (auto7A3CD7DC_ai >= 0 && lv_upgradeIndex <= auto7A3CD7DC_ae) || (auto7A3CD7DC_ai <= 0 && lv_upgradeIndex >= auto7A3CD7DC_ae) ) ; lv_upgradeIndex += auto7A3CD7DC_ai ) {
        if ((UserDataGetUpgrade("CampaignPerk", lp_perk, "Upgrade", lv_upgradeIndex) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("CampaignPerk", lp_perk, "Upgrade", lv_upgradeIndex), lv_upgradeLevel);
        }

    }
    autoA574F886_ae = UserDataFieldValueCount("CampaignPerk", "AbilityCommand");
    autoA574F886_ai = 1;
    lv_commandIndex = 1;
    for ( ; ( (autoA574F886_ai >= 0 && lv_commandIndex <= autoA574F886_ae) || (autoA574F886_ai <= 0 && lv_commandIndex >= autoA574F886_ae) ) ; lv_commandIndex += autoA574F886_ai ) {
        if ((UserDataGetAbilCmd("CampaignPerk", lp_perk, "AbilityCommand", lv_commandIndex) != null)) {
            TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("CampaignPerk", lp_perk, "AbilityCommand", lv_commandIndex), lv_allowDisallow);
        }

    }
}

void libComC_gf_CC_PerkStateSet (string lp_campaignPerk, int lp_state) {
    // Implementation
    UserDataSetInt("CampaignPerk", lp_campaignPerk, "State", 1, (lp_state));
}

int libComC_gf_CC_PerkState (string lp_campaignPerk) {
    // Variable Declarations
    int lv_perkStateInt;

    // Variable Initialization

    // Implementation
    lv_perkStateInt = UserDataGetInt("CampaignPerk", lp_campaignPerk, "State", 1);
    return lv_perkStateInt;
}

bool libComC_gf_CC_PerkStateCheck (string lp_campaignPerk, int lp_perkState) {
    // Implementation
    return (UserDataGetInt("CampaignPerk", lp_campaignPerk, "State", 1) == (lp_perkState));
}

int libComC_gf_CC_PerkUISlot (string lp_campaignPerk) {
    // Implementation
    return UserDataGetInt("CampaignPerk", lp_campaignPerk, "UISlot", 1);
}

int libComC_gf_CC_PerkGroupUIOrderX (string lp_perkGroup) {
    // Implementation
    return UserDataGetInt("CampaignPerkGroup", lp_perkGroup, "UIOrderX", 1);
}

int libComC_gf_CC_PerkGroupMissionUIOrder (string lp_perkGroup) {
    // Implementation
    return UserDataGetInt("CampaignPerkGroup", lp_perkGroup, "MissionUIOrder", 1);
}

bool libComC_gf_CC_PerkGroupUnlocked (string lp_perkGroup) {
    int auto1802D124_ai;
    int auto1802D124_ae;

    // Variable Declarations
    string lv_indexPerk;

    // Variable Initialization

    // Implementation
    auto1802D124_ai = 1;
    auto1802D124_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto1802D124_ai < auto1802D124_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto1802D124_ai);
        auto1802D124_ai = auto1802D124_ai+1;
        if( libComC_gf_CC_PerkGroupOfPerk(lv_indexPerk) == lp_perkGroup ) {
            if (((libComC_gf_CC_PerkStateCheck(lv_indexPerk, libComC_ge_CC_PerkState_Active) == true) || (libComC_gf_CC_PerkStateCheck(lv_indexPerk, libComC_ge_CC_PerkState_Unlocked) == true))) {
                return true;
            }

        }    
    }
    return false;
}

text libComC_gf_CC_PerkGroupName (string lp_perkGroup) {
    // Implementation
    return UserDataGetText("CampaignPerkGroup", lp_perkGroup, "Name", 1);
}

string libComC_gf_CC_PerkGroupOfPerk (string lp_campaignPerk) {
    // Implementation
    return UserDataGetUserInstance("CampaignPerk", lp_campaignPerk, "Group", 1);
}

text libComC_gf_CC_PerkName (string lp_campaignPerk) {
    // Implementation
    return UserDataGetText("CampaignPerk", lp_campaignPerk, "Name", 1);
}

string libComC_gf_CC_PerkIcon (string lp_campaignPerk) {
    // Implementation
    return UserDataGetImagePath("CampaignPerk", lp_campaignPerk, "Icon", 1);
}

text libComC_gf_CC_PerkTooltip (string lp_campaignPerk) {
    // Implementation
    return UserDataGetText("CampaignPerk", lp_campaignPerk, "Tooltip", 1);
}

text libComC_gf_CC_PerkDescription (string lp_campaignPerk) {
    // Implementation
    return UserDataGetText("CampaignPerk", lp_campaignPerk, "Description", 1);
}

string libComC_gf_CC_PerkRequiredMission (string lp_perk) {
    // Implementation
    return UserDataGetGameLink("CampaignPerk", lp_perk, "RequiredMission", 1);
}

string libComC_gf_CC_PerkRequiredObjective (string lp_perk) {
    // Implementation
    return UserDataGetGameLink("CampaignPerk", lp_perk, "RequiredObjective", 1);
}

void libComC_gf_CC_SavePerksToBank (bank lp_bank, string lp_section) {
    // Implementation
    UserDataSaveType("CampaignPerk", lp_bank, lp_section);
}

void libComC_gf_CC_LoadPerksFromBank (bank lp_bank, string lp_section) {
    // Implementation
    UserDataLoadType("CampaignPerk", lp_bank, lp_section);
}

void libComC_gf_CC_ApplyPerkTech (int lp_player) {
    int auto3E2E736C_ai;
    int auto3E2E736C_ae;
    int auto25F557A7_ai;
    int auto25F557A7_ae;

    // Variable Declarations
    string lv_indexPerk;

    // Variable Initialization

    // Implementation
    auto3E2E736C_ai = 1;
    auto3E2E736C_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto3E2E736C_ai < auto3E2E736C_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto3E2E736C_ai);
        auto3E2E736C_ai = auto3E2E736C_ai+1;
        libComC_gf_CC_PerkEnableDisable(false, lv_indexPerk, lp_player);
    }
    auto25F557A7_ai = 1;
    auto25F557A7_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto25F557A7_ai < auto25F557A7_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto25F557A7_ai);
        auto25F557A7_ai = auto25F557A7_ai+1;
        if ((libComC_gf_CC_PerkStateCheck(lv_indexPerk, libComC_ge_CC_PerkState_Active) == true)) {
            libComC_gf_CC_PerkEnableDisable(true, lv_indexPerk, lp_player);
        }

    }
}

void libComC_gf_CC_ResetPerkTech () {
    int autoC862D1E5_ai;
    int autoC862D1E5_ae;

    // Variable Declarations
    string lv_indexPerk;

    // Variable Initialization

    // Implementation
    autoC862D1E5_ai = 1;
    autoC862D1E5_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoC862D1E5_ai < autoC862D1E5_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoC862D1E5_ai);
        autoC862D1E5_ai = autoC862D1E5_ai+1;
        libComC_gf_CC_PerkStateSet(lv_indexPerk, libComC_ge_CC_PerkState_Locked);
    }
}

void libComC_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, int lp_player) {
    // Implementation
    TechTreeUnitHelp(lp_player, lp_unitType, true);
}

void libComC_gf_CC_HelpUnitPanel_UpdatePanel () {
    string auto259EDC9B_val;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    TechTreeUnitHelpDefault(1, false);
    if ((libComC_gf_CC_CurrentMapIsInstallation() == true)) {
        return ;
    }

    auto259EDC9B_val = PlayerRace(1);
    if (auto259EDC9B_val == "Terr") {
        TechTreeUnitHelp(1, "SCV", true);
    }
    else if (auto259EDC9B_val == "Prot") {
        TechTreeUnitHelp(1, "Probe", true);
    }
    else if (auto259EDC9B_val == "Zerg") {
        TechTreeUnitHelp(1, "Drone", true);
    }
    else {
    }
}

void libComC_gf_CC_HelpTechTree_UpdatePanel () {
    // Implementation
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    if (((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindMission) == false) || (libComC_gf_CC_CurrentMapIsInstallation() == true))) {
        return ;
    }

    HelpPanelShowTechTreeRace(PlayerGroupAll(), PlayerRace(1), true);
}

void libComC_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition) {
    // Variable Declarations
    string lv_image;

    // Variable Initialization

    // Implementation
    if ((libComC_gf_CurrentMap() == null)) {
        return ;
    }

    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindStory) == true)) {
        lv_image = libComC_gf_CC_MapLoadingScreenImage(libComC_gf_CurrentMap());
    }
    else {
        lv_image = libComC_gf_CC_MapLoadingScreenVictoryImage(libComC_gf_CurrentMap());
    }
    GameSetTransitionMap((libComC_gv_cC_MapPath + libComC_gf_CC_MapFile(libComC_gv_cC_TransitionSaveMap)));
    GameSaveCreate(lp_name, lp_transition, lv_image, true);
}

bool libComC_gf_CampaignIsComplete () {
    // Implementation
    return libComC_gv_cC_InCompletedCampaign;
}

void libComC_gf_CC_CampaignSetComplete (bool lp_isComplete) {
    // Implementation
    libComC_gv_cC_InCompletedCampaign = lp_isComplete;
}

void libComC_gf_CC_TransitionPrepareMissionLaunch (string lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryAgain, int lp_difficulty) {
    // Implementation
    SetNextMissionDifficulty(PlayerGroupAll(), lp_difficulty);
    if ((lp_nextIsSimulation == false)) {
        libComC_gf_CC_SetCampaignDifficulty(lp_difficulty);
    }

    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindStory) == true) && (libComC_gf_CampaignMapTypeCheck(lp_nextMission, c_mapKindStory) == false)) {
        libComC_gf_CC_SaveArmyTechBank(lp_nextMission, lp_nextIsSimulation);
    }

    libComC_gf_NS_SaveAllTransitionData(lp_nextIsSimulation, lp_nextIsVictoryAgain, false);
    libComC_gf_NC_PrepareLoadingScreen(lp_nextMission, false);
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventMapTransition, (lp_nextMission), "", true);
    GameSetNextMap((libComC_gv_cC_MapPath + libComC_gf_CC_MapFile(lp_nextMission)));
}

void libComC_gf_CC_TransitionPrepareSaveOnly () {
    // Implementation
    libComC_gf_CC_OpenCampaignBank();
    libComC_gf_CC_TransitionSaveBankVars(libComC_gv_NC_CampaignBank, null, false, false, false, false, false);
}

void libComC_gf_CC_TransitionPrepareMissionEnd (int lp_victoryDefeat, int lp_difficulty) {
    // Variable Declarations
    string lv_planet;
    bool lv_isActuallyVictory;

    // Variable Initialization

    // Implementation
    lv_isActuallyVictory = ((lp_victoryDefeat == c_gameOverVictory) || libComC_gv_cCX_IsVictoryPlayAgain);
    if ((libComC_gv_cCX_IsSimulation == false) && (libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindMission) == true) && (lv_isActuallyVictory == true)) {
        libComC_gv_cCX_LastSuccessfulMission = libComC_gf_CurrentMap();
        libComC_gf_CC_MissionMarkCompleted(libComC_gf_CurrentMap());
        libComC_gf_NC_CopyWriterStatesToSnapshot();
    }

    SetNextMissionDifficulty(PlayerGroupSingle(1), lp_difficulty);
    libComC_gf_NS_SaveAllTransitionData(false, false, (lp_victoryDefeat == c_gameOverDefeat));
    libComC_gf_NC_PrepareLoadingScreen(libComC_gv_cC_TransitionNextMap, false);
    GameSetNextMap((libComC_gv_cC_MapPath + libComC_gf_CC_MapFile(libComC_gv_cC_TransitionNextMap)));
    TextExpressionSetToken("Param/Expression/lib_ComC_7A0F7081", "A", StringToText((libComC_gv_cC_MapPath + libComC_gf_CC_MapFile(libComC_gv_cC_TransitionNextMap))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_7A0F7081"), false);
}

void libComC_gf_CC_TransitionSetNextMap (string lp_nextMap) {
    // Implementation
    libComC_gv_cC_TransitionNextMap = lp_nextMap;
}

void libComC_gf_CC_TransitionSetSaveMap (string lp_nextMap) {
    // Implementation
    libComC_gv_cC_TransitionSaveMap = lp_nextMap;
}

void libComC_gf_CC_TransitionNewMissionSetAvailable (bool lp_isAvailable) {
    // Implementation
    libComC_gv_cC_NewMissionAvailable = lp_isAvailable;
}

string libComC_gf_CC_TransitionNextMap () {
    // Implementation
    return libComC_gv_cC_TransitionNextMap;
}

bool libComC_gf_CC_TransitionInSimulation () {
    // Implementation
    return libComC_gv_cCX_IsSimulation;
}

bool libComC_gf_CC_TransitionInPlayAgain () {
    // Implementation
    return libComC_gv_cCX_IsVictoryPlayAgain;
}

bool libComC_gf_CC_TransitionSaveBankVarsResultFromDefeat () {
    // Implementation
    return libComC_gv_cC_TransitionSaveBankVarsResultFromDefeat;
}

bool libComC_gf_CC_TransitionSaveBankVarsResultFromSimulation () {
    // Implementation
    return libComC_gv_cC_TransitionSaveBankVarsResultFromSimulation;
}

bool libComC_gf_CC_TransitionSaveBankVarsResultFromVictoryAgain () {
    // Implementation
    return libComC_gv_cC_TransitionSaveBankVarsResultFromVictoryAgain;
}

bool libComC_gf_CurrentMissionIsSimulation () {
    // Implementation
    return (libComC_gv_cCX_IsSimulation || libComC_gv_cCX_IsVictoryPlayAgain);
}

void libComC_gf_CC_CompletedSavesEnable () {
    // Implementation
    if ((AchievementsDisabled(1) == true)) {
        return ;
    }

    CampaignProgressEnableCampaignCompletedSaves(PlayerGroupAll(), true);
}

void libComC_gf_NC_PrepareLoadingScreen (string lp_nextMap, bool lp_restart) {
    // Variable Declarations
    string lv_offsetString;
    int lv_offsetX;
    int lv_offsetY;
    text lv_title;
    text lv_subtitle;
    text lv_body;
    string lv_image;
    bool lv_waitForKey;

    // Variable Initialization
    lv_offsetString = "";

    // Implementation
    if ((lp_restart == true)) {
        UISetRestartLoadingScreen(StringExternal(CatalogFieldValueGet(c_gameCatalogMap, lp_nextMap, "LoadingHelpRestart", c_playerAny)));
        return ;
    }

    lv_offsetString = CatalogFieldValueGet(c_gameCatalogMap, (lp_nextMap), "LoadingTextOffset", c_playerAny);
    lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", 1, c_stringCase);
    lv_waitForKey = !(libComC_gf_CampaignMapTypeCheck(lp_nextMap, c_mapKindStory));
    UISetNextLoadingScreenImageScale(c_scaleAspect);
    if ((libComC_gf_LastMapConditionCheck(libComC_ge_MissionCondition_Sucessful) == true) && (libComC_gf_LastMapConditionCheck(libComC_ge_MissionCondition_Simulation) == false) && (libComC_gf_CampaignMapTypeCheck(libComC_gf_LastMap(), c_mapKindMission) == true) && (libComC_gf_LastMap() != lp_nextMap)) {
        lv_image = libComC_gf_CC_MapLoadingScreenVictoryImage(libComC_gf_CurrentMap());
    }

    lv_offsetX = StringToInt(StringWord(lv_offsetString, 1));
    lv_offsetY = StringToInt(StringWord(lv_offsetString, 2));
    lv_offsetY += 240;
    lv_offsetX += 130;
    if ((lv_image == null)) {
        lv_image = libComC_gf_CC_MapLoadingScreenImage(lp_nextMap);
    }

    UISetNextLoadingScreen(lv_image, StringToText(""), lv_subtitle, lv_body, libComC_gf_CC_MapHelp(lp_nextMap), lv_waitForKey);
    UISetNextLoadingScreenTextPosition(c_anchorTopLeft, lv_offsetX, lv_offsetY, CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_nextMap), "LoadingTextWidth", c_playerAny), CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_nextMap), "LoadingTextHeight", c_playerAny));
}

string libComC_gf_LastMap () {
    // Implementation
    return libComC_gv_cCX_LastMap;
}

bool libComC_gf_LastMapConditionCheck (int lp_condition) {
    int auto2ED317D5_val;

    // Implementation
    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_LastMap(), c_mapKindMission) == true)) {
        return libComC_gf_LastMissionConditionCheck(lp_condition);
    }

    auto2ED317D5_val = lp_condition;
    if (auto2ED317D5_val == libComC_ge_MissionCondition_Sucessful) {
        return libComC_gv_cCX_LastMapSuccess;
    }
    else {
    }
    return false;
}

string libComC_gf_LastMission () {
    // Implementation
    return libComC_gv_cCX_LastMission;
}

bool libComC_gf_LastMissionConditionCheck (int lp_condition) {
    int autoF68C6176_val;

    // Implementation
    autoF68C6176_val = lp_condition;
    if (autoF68C6176_val == libComC_ge_MissionCondition_Sucessful) {
        return libComC_gv_cCX_LastMissionSuccess;
    }
    else if (autoF68C6176_val == libComC_ge_MissionCondition_Simulation) {
        if ((libComC_gv_cC_NewMissionAvailable == true)) {
            return false;
        }

        return libComC_gv_cCX_LastMissionSimulation;
    }
    else {
    }
    return false;
}

string libComC_gf_LastSuccessfulMission () {
    // Implementation
    return libComC_gv_cCX_LastSuccessfulMission;
}

void libComC_gf_NS_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat) {
    // Variable Declarations
    int lv_saveType;

    // Variable Initialization

    // Implementation
    libComC_gf_CC_OpenCampaignBank();
    libComC_gv_cCX_LastMap = libComC_gf_CurrentMap();
    if ((libComC_gv_cCX_IsVictoryPlayAgain == true)) {
        libComC_gv_cCX_LastMapSuccess = true;
    }
    else {
        libComC_gv_cCX_LastMapSuccess = (lp_resultFromDefeat == false);
    }
    if ((libComC_gf_CampaignMapTypeCheck(libComC_gv_cCX_LastMap, c_mapKindMission) == true)) {
        libComC_gv_cCX_LastMission = libComC_gv_cCX_LastMap;
        libComC_gv_cCX_LastMissionSuccess = libComC_gv_cCX_LastMapSuccess;
        libComC_gv_cCX_LastMissionSimulation = libComC_gv_cCX_IsSimulation;
    }
    else if ((libComC_gf_CampaignMapTypeCheck(libComC_gv_cCX_LastMap, c_mapKindUpgrade) == true)) {
        libComC_gv_cCX_LastMissionSimulation = libComC_gv_cCX_IsSimulation;
    }
    libComC_gf_CC_TransitionSaveBankVars(libComC_gv_NC_CampaignBank, null, lp_nextIsSimulation, lp_nextIsVictoryPlayAgain, lp_resultFromDefeat, libComC_gv_cCX_IsSimulation, libComC_gv_cCX_IsVictoryPlayAgain);
    libComC_gf_NC_SaveCampaignBank();
}

void libComC_gf_NS_LoadAllTransitionData (string lp_map) {
    int auto5DE5C7B8_ae;
    int auto5DE5C7B8_ai;

    // Variable Declarations
    string lv_indexMission;

    // Variable Initialization

    // Implementation
    if ((libComC_gf_CC_CampaignBankExists() == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_ComC_1FF047AD"), false);
        libComC_gf_CC_ResetCampaignData();
        libComC_gf_CC_SetCampaignDifficulty(PlayerDifficulty(1));
        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_ComC_45EF3F1B"), false);
    libComC_gf_CC_OpenCampaignBank();
    libComC_gf_CC_TransitionLoadBankVars(libComC_gv_NC_CampaignBank, null);
    if ((libComC_gf_CampaignMapTypeCheck(lp_map, c_mapKindMission) == true)) {
        libComC_gv_NC_CampaignDataBackup_MissionBestTime = libComC_gf_MissionCompleteBestTime(lp_map, PlayerDifficulty(1));
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_ComC_61988E1E"), false);
    libComC_gf_NC_LoadMissionSections();
    if ((libComC_gf_CampaignIsComplete() == true)) {
        return ;
    }

    auto5DE5C7B8_ae = CatalogEntryCount(c_gameCatalogMap);
    auto5DE5C7B8_ai = 1;
    while (auto5DE5C7B8_ai <= auto5DE5C7B8_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto5DE5C7B8_ai);
        auto5DE5C7B8_ai = auto5DE5C7B8_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Available) == true)) {
                return ;
            }

        }    
    }
    libComC_gf_CC_TransitionNewMissionSetAvailable(true);
    libComC_gf_UpdateMissionFlow();
}

void libComC_gf_CC_TransitionSaveBankVars (bank lp_targetBank, string lp_map, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, bool lp_resultFromSimulation, bool lp_resultFromVictoryAgain) {
    // Variable Declarations
    int lv_indexScene;
    string lv__SectionName;
    int lv_difficulty;
    int lv_index;
    string lv_imagevar;

    // Variable Initialization
    lv__SectionName = "";
    lv_difficulty = 2;

    // Implementation
    libComC_gv_cC_TransitionSaveBankVarsResultFromDefeat = lp_resultFromDefeat;
    libComC_gv_cC_TransitionSaveBankVarsResultFromSimulation = lp_resultFromSimulation;
    libComC_gv_cC_TransitionSaveBankVarsResultFromVictoryAgain = lp_resultFromVictoryAgain;
    if ((lp_map == null)) {
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "CampaignLastInfo");
        libComC_gf_CC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("Simulation"), lp_nextIsSimulation, false);
        libComC_gf_CC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("VictoryPlayAgain"), lp_nextIsVictoryPlayAgain, false);
        libComC_gf_CC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMap"), libComC_gf_CC_MapBankID(libComC_gv_cCX_LastMap), "");
        libComC_gf_CC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMapSuccess"), libComC_gv_cCX_LastMapSuccess, false);
        libComC_gf_CC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastMission"), libComC_gf_CC_MapBankID(libComC_gv_cCX_LastMission), "");
        libComC_gf_CC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSuccess"), libComC_gv_cCX_LastMissionSuccess, false);
        libComC_gf_CC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("LastMissionSimulation"), libComC_gv_cCX_LastMissionSimulation, false);
        libComC_gf_CC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("LastSuccessfulMission"), libComC_gf_CC_MapBankID(libComC_gv_cCX_LastSuccessfulMission), "");
        libComC_gf_CC_SaveTransitionVarString(lp_targetBank, lv__SectionName, ("Location"), libComC_gf_CC_LocationBankID(libComC_gv_cCX_CurrentLocation), "");
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "CampaignSetting");
        libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MapInstanceID"), libComC_gv_cCX_MapInstanceID, 0);
        if ((lp_resultFromSimulation == false) && (lp_resultFromVictoryAgain == false)) {
            lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "CampaignSetting");
            libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("Difficulty"), libComC_gf_CC_DifficultyIndex(libComC_gv_cCX_CampaignDifficulty), 0);
            libComC_gf_CC_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, ("DebugProgress"), libComC_gv_cCX_DebugProgress, false);
            lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "Scenes");
            UserDataSaveType("Scenes", lp_targetBank, lv__SectionName);
            lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "WriterStates");
            UserDataSaveType("WriterStates", lp_targetBank, lv__SectionName);
            lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "StoryStates");
            UserDataSaveType("StoryStates", lp_targetBank, lv__SectionName);
            lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "CampaignStats");
            libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCount"), libComC_gf_NumberOfMissions(libComC_ge_MissionCountOptions_Completed), 0);
            lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "CampaignStats");
            libComC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("MissionCompletedCountNext"), (libComC_gf_NumberOfMissions(libComC_ge_MissionCountOptions_Completed)+1), 0);
            lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "ArmyCategory");
            BankSectionCreate(lp_targetBank, lv__SectionName);
            libComC_gf_NC_SaveArmyCategoryToBank(lp_targetBank, lv__SectionName);
        }

    }

    if ((lp_resultFromDefeat == true)) {
        libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventTransitionSave, BankName(lp_targetBank), (lp_map), false);
        return ;
    }

    if ((lp_map != null) && (libComC_gf_CampaignMapTypeCheck(lp_map, c_mapKindMission) == true)) {
        libComC_gf_NC_SetMissionSectionExists(lp_map, true);
    }

    if (((lp_map != null) || ((lp_resultFromSimulation == false) && (lp_resultFromVictoryAgain == false)))) {
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "ArmyUnit");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libComC_gf_NC_SaveArmyUnitsToBank(lp_targetBank, lv__SectionName);
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "Perks");
        BankSectionCreate(lp_targetBank, lv__SectionName);
        libComC_gf_CC_SavePerksToBank(lp_targetBank, lv__SectionName);
    }

    libComC_gf_CC_MapBankSave(lp_map, lp_targetBank, (lp_resultFromSimulation || lp_resultFromVictoryAgain));
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventTransitionSave, BankName(lp_targetBank), (lp_map), false);
    if (((lp_resultFromSimulation == true) || (lp_resultFromVictoryAgain == true))) {
        return ;
    }

    lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "Tips");
    UserDataSaveType("CampaignTips", lp_targetBank, lv__SectionName);
}

void libComC_gf_CC_TransitionLoadBankVars (bank lp_sourceBank, string lp_map) {
    // Variable Declarations
    string lv_indexScene;
    string lv_indexObjective;
    string lv__SectionName;
    int lv_count;
    int lv_index;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    libComC_gf_CC_MapBankLoad(lp_map, lp_sourceBank);
    if ((lp_map == null)) {
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "CampaignLastInfo");
        libComC_gv_cCX_IsSimulation = libComC_gf_CC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("Simulation"), false);
        libComC_gv_cCX_IsVictoryPlayAgain = libComC_gf_CC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("VictoryPlayAgain"), false);
        libComC_gv_cCX_LastMap = (libComC_gf_CC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMap"), ""));
        libComC_gv_cCX_LastMapSuccess = libComC_gf_CC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMapSuccess"), false);
        libComC_gv_cCX_LastMission = (libComC_gf_CC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastMission"), ""));
        libComC_gv_cCX_LastMissionSuccess = libComC_gf_CC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSuccess"), false);
        libComC_gv_cCX_LastMissionSimulation = libComC_gf_CC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("LastMissionSimulation"), false);
        libComC_gv_cCX_LastSuccessfulMission = (libComC_gf_CC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("LastSuccessfulMission"), ""));
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "CampaignSetting");
        libComC_gv_cCX_CampaignDifficulty = libComC_gf_CC_DifficultyFromIndex(libComC_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("Difficulty"), 0));
        libComC_gv_cCX_DebugProgress = libComC_gf_CC_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, ("DebugProgress"), false);
        libComC_gv_cCX_MapInstanceID = libComC_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("MapInstanceID"), 0);
        libComC_gv_cCX_MapInstanceID += 1;
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "Scenes");
        UserDataLoadType("Scenes", lp_sourceBank, lv__SectionName);
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "WriterStates");
        UserDataLoadType("WriterStates", lp_sourceBank, lv__SectionName);
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "StoryStates");
        UserDataLoadType("StoryStates", lp_sourceBank, lv__SectionName);
        lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "CampaignLastInfo");
        libComC_gf_CC_LocationActivate((libComC_gf_CC_LoadTransitionVarString(lp_sourceBank, lv__SectionName, ("Location"), "")));
    }

    lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "ArmyCategory");
    libComC_gf_NC_LoadArmyCategoryFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "ArmyUnit");
    libComC_gf_NC_LoadArmyUnitsFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "Perks");
    libComC_gf_CC_LoadPerksFromBank(lp_sourceBank, lv__SectionName);
    lv__SectionName = libComC_gf_CC_BankSectionName(lp_map, "Tips");
    UserDataLoadType("CampaignTips", lp_sourceBank, lv__SectionName);
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventTransitionLoad, BankName(lp_sourceBank), (lp_map), false);
}

void libComC_gf_CC_ResetCampaignData () {
    int autoA514DBDD_ai;
    int autoA514DBDD_ae;
    int auto8450FC8B_ae;
    int auto8450FC8B_ai;

    // Variable Declarations
    string lv_indexMission;
    string lv_indexScene;

    // Variable Initialization

    // Implementation
    UserDataResetAll();
    libComC_gv_cCX_IsSimulation = false;
    libComC_gv_cCX_IsVictoryPlayAgain = false;
    libComC_gv_cCX_LastMap = null;
    libComC_gv_cCX_LastMapSuccess = false;
    libComC_gv_cCX_LastMission = null;
    libComC_gv_cCX_LastMissionSimulation = false;
    libComC_gv_cCX_LastMissionSuccess = false;
    libComC_gv_cCX_LastSuccessfulMission = null;
    libComC_gv_cCX_DebugProgress = false;
    libComC_gf_CC_ResetTech();
    autoA514DBDD_ai = 1;
    autoA514DBDD_ae = UserDataInstanceCount("Scenes")+1;
    while (autoA514DBDD_ai < autoA514DBDD_ae) {
        lv_indexScene = UserDataInstance("Scenes", autoA514DBDD_ai);
        libComC_gf_CC_SceneSetPlayed(lv_indexScene, false);
        autoA514DBDD_ai = autoA514DBDD_ai+1;
    }
    auto8450FC8B_ae = CatalogEntryCount(c_gameCatalogMap);
    auto8450FC8B_ai = 1;
    while (auto8450FC8B_ai <= auto8450FC8B_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto8450FC8B_ai);
        auto8450FC8B_ai = auto8450FC8B_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            libComC_gf_CC_MissionStatusSet(lv_indexMission, libComC_ge_MissionStatus_Locked);
        }    
    }
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventDataReset, "", "", false);
}

void libComC_gf_CC_SaveArmyTechBank (string lp_nextMission, bool lp_simulation) {
    int auto03B47BF1_ae;
    int auto03B47BF1_ai;
    int auto3A10668D_ae;
    int auto3A10668D_ai;
    int auto78CFC0AD_ae;
    int auto78CFC0AD_ai;
    int autoD0CDB671_ae;
    int autoD0CDB671_ai;
    int autoAD936811_ae;
    int autoAD936811_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    int lv_categoryState;
    int lv_unitIndex;
    int lv_unitState;
    string lv_bankPath;
    string lv_section;
    string lv_key;
    string lv_categorySection;
    string lv_unitSection;

    // Variable Initialization
    lv_key = "";

    // Implementation
    libComC_gf_CC_OpenArmyTechBank();
    if (((libComC_gv_cC_ArmyTechBank == null))) {
        return ;
    }

    auto03B47BF1_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto03B47BF1_ai = 1;
    while (auto03B47BF1_ai <= auto03B47BF1_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto03B47BF1_ai);
        auto03B47BF1_ai = auto03B47BF1_ai + 1;
    }
    if ((lp_simulation == true)) {
        libComC_gf_CC_OpenCampaignBank();
        lv_categorySection = libComC_gf_CC_BankSectionName(null, "ArmyCategory");
        lv_unitSection = libComC_gf_CC_BankSectionName(lp_nextMission, "ArmyUnit");
        auto3A10668D_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        auto3A10668D_ai = 1;
        while (auto3A10668D_ai <= auto3A10668D_ae) {
            lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto3A10668D_ai);
            lv_categoryState = libComC_gf_CC_LoadTransitionVarInteger(libComC_gv_NC_CampaignBank, lv_categorySection, (lv_indexCategory), 0);
            lv_section = libComC_gf_CC_ArmyCategoryBankSection(lv_indexCategory);
            lv_key = libComC_gf_CC_ArmyCategoryBankKey(lv_indexCategory);
            libComC_gf_CC_SaveTransitionVarInteger(libComC_gv_cC_ArmyTechBank, lv_section, lv_key, lv_categoryState, 0);
            auto78CFC0AD_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto78CFC0AD_ai = 1;
            while (auto78CFC0AD_ai <= auto78CFC0AD_ae) {
                lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto78CFC0AD_ai-1)+"]", 1);
                lv_unitState = libComC_gf_CC_LoadTransitionVarInteger(libComC_gv_NC_CampaignBank, lv_unitSection, (lv_indexUnit), 0);
                lv_section = libComC_gf_CC_ArmyUnitBankSection(lv_indexUnit);
                lv_key = libComC_gf_CC_ArmyUnitBankKey(lv_indexUnit);
                libComC_gf_CC_SaveTransitionVarInteger(libComC_gv_cC_ArmyTechBank, lv_section, lv_key, lv_unitState, 0);
                auto78CFC0AD_ai = auto78CFC0AD_ai + 1;
            }
            auto3A10668D_ai = auto3A10668D_ai + 1;
        }
        BankSave(libComC_gv_cC_ArmyTechBank);
        return ;
    }

    autoD0CDB671_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoD0CDB671_ai = 1;
    while (autoD0CDB671_ai <= autoD0CDB671_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoD0CDB671_ai);
        lv_section = libComC_gf_CC_ArmyCategoryBankSection(lv_indexCategory);
        lv_key = libComC_gf_CC_ArmyCategoryBankKey(lv_indexCategory);
        libComC_gf_CC_SaveTransitionVarInteger(libComC_gv_cC_ArmyTechBank, lv_section, lv_key, (libComC_gf_CC_ArmyCategoryState(lv_indexCategory)), 0);
        autoAD936811_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        autoAD936811_ai = 1;
        while (autoAD936811_ai <= autoAD936811_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoAD936811_ai-1)+"]", 1);
            lv_section = libComC_gf_CC_ArmyUnitBankSection(lv_indexUnit);
            lv_key = libComC_gf_CC_ArmyUnitBankKey(lv_indexUnit);
            libComC_gf_CC_SaveTransitionVarInteger(libComC_gv_cC_ArmyTechBank, lv_section, lv_key, (libComC_gf_NC_StoryArmyUnitState(lv_indexUnit)), 0);
            autoAD936811_ai = autoAD936811_ai + 1;
        }
        autoD0CDB671_ai = autoD0CDB671_ai + 1;
    }
    BankSave(libComC_gv_cC_ArmyTechBank);
    TextExpressionSetToken("Param/Expression/lib_ComC_202D6D63", "A", StringToText(lv_bankPath));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_202D6D63"), false);
}

void libComC_gf_CC_OpenArmyTechBank () {
    int autoE9E38181_ae;
    int autoE9E38181_ai;

    // Variable Declarations
    string lv_indexCategory;
    string lv_bankPath;

    // Variable Initialization

    // Implementation
    if ((libComC_gv_cC_ArmyTechBank != null)) {
        return ;
    }

    autoE9E38181_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoE9E38181_ai = 1;
    while (autoE9E38181_ai <= autoE9E38181_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoE9E38181_ai);
        lv_bankPath = libComC_gf_CC_ArmyCategoryBankPath(lv_indexCategory);
        BankLoad(lv_bankPath, 1);
        libComC_gv_cC_ArmyTechBank = BankLastCreated();
        return ;
        autoE9E38181_ai = autoE9E38181_ai + 1;
    }
}

string libComC_gf_CC_ArmyCategoryBankPath (string lp_category) {
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.File", 1);
}

string libComC_gf_CC_ArmyCategoryBankSection (string lp_category) {
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.Section", 1);
}

string libComC_gf_CC_ArmyCategoryBankKey (string lp_category) {
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_category), "BankPath.Key", 1);
}

string libComC_gf_CC_ArmyUnitBankPath (string lp_unit) {
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.File", 1);
}

string libComC_gf_CC_ArmyUnitBankSection (string lp_unit) {
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.Section", 1);
}

string libComC_gf_CC_ArmyUnitBankKey (string lp_unit) {
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_unit), "BankPath.Key", 1);
}

void libComC_gf_CC_ArchiveBankOpen () {
    // Implementation
    if ((libComC_gv_cC_ArchivesBank != null)) {
        return ;
    }

    BankLoad(libComC_gv_cC_ArchiveBankName, 1);
    libComC_gv_cC_ArchivesBank = BankLastCreated();
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
}

void libComC_gf_CC_ArchiveBankSetName (string lp_bankName) {
    // Implementation
    libComC_gv_cC_ArchiveBankName = lp_bankName;
}

void libComC_gf_CC_ArchiveBankObjectiveSave (string lp_objective) {
    // Variable Declarations
    int lv_oldProgress;

    // Variable Initialization

    // Implementation
    lv_oldProgress = libComC_gf_CC_LoadTransitionVarInteger(libComC_gv_cC_ArchivesBank, libComC_gf_CC_BankSectionName(null, "MissionObjectives"), (lp_objective), 0);
    if ((lv_oldProgress < libComC_gf_MissionObjectiveProgress(lp_objective))) {
        libComC_gf_CC_SaveTransitionVarInteger(libComC_gv_cC_ArchivesBank, libComC_gf_CC_BankSectionName(null, "MissionObjectives"), (lp_objective), libComC_gf_MissionObjectiveProgress(lp_objective), 0);
    }
    else {
        libComC_gf_CC_SaveTransitionVarInteger(libComC_gv_cC_ArchivesBank, libComC_gf_CC_BankSectionName(null, "MissionObjectives"), (lp_objective), lv_oldProgress, 0);
    }
}

void libComC_gf_CC_ArchiveBankSave () {
    int auto60F0CFBA_ae;
    int auto60F0CFBA_ai;
    int autoA8656B45_ae;
    int autoA8656B45_ai;

    // Variable Declarations
    string lv_indexMission;
    string lv_indexObjective;

    // Variable Initialization

    // Implementation
    if (((AchievementsDisabled(1) == true) || (libComC_gv_cC_ArchivesReloading == true))) {
        return ;
    }

    libComC_gf_CC_ArchiveBankOpen();
    auto60F0CFBA_ae = CatalogEntryCount(c_gameCatalogObjective);
    auto60F0CFBA_ai = 1;
    while (auto60F0CFBA_ai <= auto60F0CFBA_ae) {
        lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, auto60F0CFBA_ai);
        auto60F0CFBA_ai = auto60F0CFBA_ai + 1;
        libComC_gf_CC_ArchiveBankObjectiveSave(lv_indexObjective);
    }
    autoA8656B45_ae = CatalogEntryCount(c_gameCatalogMap);
    autoA8656B45_ai = 1;
    while (autoA8656B45_ai <= autoA8656B45_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoA8656B45_ai);
        autoA8656B45_ai = autoA8656B45_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            libComC_gf_CC_ArchiveBankMissionSave(lv_indexMission);
        }    
    }
    if ((libComC_gf_CampaignIsComplete() == true)) {
        BankValueSetFromFlag(libComC_gv_cC_ArchivesBank, "GlobalStates", "CampaignComplete", true);
        if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindStory) == true)) {
            BankValueSetFromFlag(libComC_gv_cC_ArchivesBank, "GlobalStates", "ArchivesVisited", true);
        }

    }

    BankSave(libComC_gv_cC_ArchivesBank);
}

void libComC_gf_CC_ArchiveBankLoad () {
    int autoE1446BC7_ae;
    int autoE1446BC7_ai;
    int auto78560B24_ae;
    int auto78560B24_ai;
    int auto2E8D8858_ae;
    int auto2E8D8858_ai;

    // Variable Declarations
    string lv_indexMission;
    string lv_indexObjective;
    int lv_difficultyIndex;
    int lv_objectiveProgress;

    // Variable Initialization

    // Implementation
    if (((libComC_gf_CampaignIsComplete() == false) || (libComC_gv_cC_ArchivesReloading == true))) {
        return ;
    }

    libComC_gf_CC_ArchiveBankOpen();
    libComC_gv_cC_ArchivesVisited = libComC_gf_CC_LoadTransitionVarBoolean(libComC_gv_cC_ArchivesBank, "GlobalStates", "ArchivesVisited", false);
    autoE1446BC7_ae = CatalogEntryCount(c_gameCatalogObjective);
    autoE1446BC7_ai = 1;
    while (autoE1446BC7_ai <= autoE1446BC7_ae) {
        lv_indexObjective = CatalogEntryGet(c_gameCatalogObjective, autoE1446BC7_ai);
        autoE1446BC7_ai = autoE1446BC7_ai + 1;
        if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            lv_objectiveProgress = libComC_gf_CC_LoadTransitionVarInteger(libComC_gv_cC_ArchivesBank, libComC_gf_CC_BankSectionName(null, "MissionObjectives"), (lv_indexObjective), 0);
            UserDataSetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lv_indexObjective), "Progress", 1, lv_objectiveProgress);
            if ((libComC_gf_MissionObjectiveItemCount(lv_indexObjective) <= lv_objectiveProgress)) {
                UserDataSetInt("MissionObjective", libComC_gf_CC_ObjectiveUserDataInstance(lv_indexObjective), "Complete", 1, 1);
            }

        }

    }
    auto78560B24_ae = CatalogEntryCount(c_gameCatalogMap);
    auto78560B24_ai = 1;
    while (auto78560B24_ai <= auto78560B24_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto78560B24_ai);
        auto78560B24_ai = auto78560B24_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            auto2E8D8858_ae = 4;
            auto2E8D8858_ai = 1;
            lv_difficultyIndex = 1;
            for ( ; ( (auto2E8D8858_ai >= 0 && lv_difficultyIndex <= auto2E8D8858_ae) || (auto2E8D8858_ai <= 0 && lv_difficultyIndex >= auto2E8D8858_ae) ) ; lv_difficultyIndex += auto2E8D8858_ai ) {
                libComC_gf_CC_MissionCompletionBestTimeSet(lv_indexMission, libComC_gf_CC_DifficultyFromIndex(lv_difficultyIndex), libComC_gf_CC_LoadTransitionVarInteger(libComC_gv_cC_ArchivesBank, libComC_gf_CC_BankSectionName(null, "MissionBestTime"), libComC_gf_CC_BankMissionDifficultyKey(lv_indexMission, libComC_gf_CC_DifficultyFromIndex(lv_difficultyIndex)), -1));
            }
        }    
    }
}

void libComC_gf_CC_ArchiveBankMissionSave (string lp_mission) {
    int auto87E3E932_ae;
    int auto87E3E932_ai;

    // Variable Declarations
    int lv_oldTime;
    int lv_difficultyIndex;

    // Variable Initialization

    // Implementation
    if ((((libComC_gf_CurrentMap() != lp_mission) || (libComC_gf_CurrentMissionIsSimulation() == false)) && (libComC_gf_MissionStatusCheck(lp_mission, libComC_ge_MissionStatus_Completed) == false))) {
        return ;
    }

    auto87E3E932_ae = 4;
    auto87E3E932_ai = 1;
    lv_difficultyIndex = 1;
    for ( ; ( (auto87E3E932_ai >= 0 && lv_difficultyIndex <= auto87E3E932_ae) || (auto87E3E932_ai <= 0 && lv_difficultyIndex >= auto87E3E932_ae) ) ; lv_difficultyIndex += auto87E3E932_ai ) {
        lv_oldTime = libComC_gf_CC_LoadTransitionVarInteger(libComC_gv_cC_ArchivesBank, libComC_gf_CC_BankSectionName(null, "MissionBestTime"), libComC_gf_CC_BankMissionDifficultyKey(lp_mission, libComC_gf_CC_DifficultyFromIndex(lv_difficultyIndex)), -1);
        if (((lv_oldTime <= 0) || ((libComC_gf_MissionCompleteBestTime(lp_mission, libComC_gf_CC_DifficultyFromIndex(lv_difficultyIndex)) > 0) && (lv_oldTime > libComC_gf_MissionCompleteBestTime(lp_mission, libComC_gf_CC_DifficultyFromIndex(lv_difficultyIndex)))))) {
            libComC_gf_CC_SaveTransitionVarInteger(libComC_gv_cC_ArchivesBank, libComC_gf_CC_BankSectionName(null, "MissionBestTime"), libComC_gf_CC_BankMissionDifficultyKey(lp_mission, libComC_gf_CC_DifficultyFromIndex(lv_difficultyIndex)), libComC_gf_MissionCompleteBestTime(lp_mission, libComC_gf_CC_DifficultyFromIndex(lv_difficultyIndex)), -1);
        }

    }
}

void libComC_gf_CC_ArchiveBankSyncForLoad () {
    // Implementation
    libComC_gf_CC_ArchiveBankOpen();
    BankReload(libComC_gv_cC_ArchivesBank);
    libComC_gv_cC_ArchivesReloading = true;
    TriggerExecute(libComC_gt_CC_ArchiveBankLoadSyncComplete, true, false);
}

void libComC_gf_CC_ArchiveBankSyncForSave () {
    // Implementation
    libComC_gf_CC_ArchiveBankOpen();
    BankReload(libComC_gv_cC_ArchivesBank);
    libComC_gv_cC_ArchivesReloading = true;
    TriggerExecute(libComC_gt_CC_ArchiveBankSaveSyncComplete, true, false);
}

bool libComC_gf_CC_ArchiveMasterVisited () {
    // Implementation
    return libComC_gv_cC_ArchivesVisited;
}

bool libComC_gf_CC_InLoadedMission () {
    // Implementation
    return libComC_gv_cC_InLoadedMission;
}

void libComC_gf_CC_CampaignBankSetName (string lp_bankName) {
    // Implementation
    libComC_gv_cC_CampaignBankName = lp_bankName;
}

void libComC_gf_CC_OpenCampaignBank () {
    // Implementation
    if ((libComC_gv_NC_CampaignBank != null)) {
        return ;
    }

    if ((libComC_gv_cC_CampaignBankName == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_ComC_D7516390"), true);
        return ;
    }

    BankLoad(libComC_gv_cC_CampaignBankName, 1);
    libComC_gv_NC_CampaignBank = BankLastCreated();
}

bank libComC_gf_CC_CampaignBank () {
    // Implementation
    return libComC_gv_NC_CampaignBank;
}

bool libComC_gf_CC_CampaignBankExists () {
    // Implementation
    return BankExists(libComC_gv_cC_CampaignBankName, 1);
}

void libComC_gf_NC_SaveCampaignBank () {
    // Implementation
    if ((libComC_gv_NC_CampaignBank == null)) {
        return ;
    }

    BankSave(libComC_gv_NC_CampaignBank);
}

bool libComC_gf_NC_MissionSectionExists (string lp_mission) {
    // Implementation
    if ((libComC_gv_NC_CampaignBank == null)) {
        libComC_gf_CC_OpenCampaignBank();
    }

    return libComC_gf_CC_LoadTransitionVarBoolean(libComC_gv_NC_CampaignBank, libComC_gf_CC_BankSectionName(lp_mission, "MissionSectionExist"), "Value", false);
}

void libComC_gf_NC_SetMissionSectionExists (string lp_mission, bool lp_exist) {
    // Implementation
    if ((libComC_gv_NC_CampaignBank == null)) {
        libComC_gf_CC_OpenCampaignBank();
    }

    libComC_gf_CC_SaveTransitionVarBoolean(libComC_gv_NC_CampaignBank, libComC_gf_CC_BankSectionName(lp_mission, "MissionSectionExist"), "Value", lp_exist, false);
}

void libComC_gf_NC_LoadMissionSections () {
    int auto61EF4A58_ae;
    int auto61EF4A58_ai;

    // Variable Declarations
    string lv_indexMission;

    // Variable Initialization

    // Implementation
    auto61EF4A58_ae = CatalogEntryCount(c_gameCatalogMap);
    auto61EF4A58_ai = 1;
    while (auto61EF4A58_ai <= auto61EF4A58_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto61EF4A58_ai);
        auto61EF4A58_ai = auto61EF4A58_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            if ((lv_indexMission == libComC_gf_CurrentMap())) {
                if (((GameIsTransitionMap() == false) || (libComC_gv_cCX_IsSimulation == true) || (libComC_gv_cCX_IsVictoryPlayAgain == true)) && (libComC_gf_NC_MissionSectionExists(lv_indexMission) == true)) {
                    TextExpressionSetToken("Param/Expression/lib_ComC_C9FB5FCD", "A", StringToText(libComC_gf_CC_MapFile(lv_indexMission)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ComC_C9FB5FCD"), false);
                    libComC_gf_CC_TransitionLoadBankVars(libComC_gv_NC_CampaignBank, lv_indexMission);
                    if ((libComC_gf_CampaignIsComplete() == false)) {
                        libComC_gf_NC_ClampProgressToMission(lv_indexMission);
                    }

                }
                else {
                    if ((libComC_gf_NC_MissionSectionExists(lv_indexMission) == true)) {
                        libComC_gf_CC_SaveArmyTechBank(libComC_gf_CurrentMap(), libComC_gv_cCX_IsSimulation);
                        BankSave(libComC_gv_cC_ArmyTechBank);
                    }
                    else {
                        if ((libComC_gv_cCX_IsSimulation == true)) {
                            libComC_gf_NC_ClampProgressToMission(lv_indexMission);
                        }

                    }
                    libComC_gf_CC_TransitionSaveBankVars(libComC_gv_NC_CampaignBank, lv_indexMission, false, false, false, false, false);
                }
            }

        }    
    }
}

void libComC_gf_NC_ClampProgressToMission (string lp_mission) {
    int auto91EB395C_ae;
    int auto91EB395C_ai;

    // Variable Declarations
    string lv_indexMission;
    string lv_indexPerk;

    // Variable Initialization

    // Implementation
    auto91EB395C_ae = CatalogEntryCount(c_gameCatalogMap);
    auto91EB395C_ai = 1;
    while (auto91EB395C_ai <= auto91EB395C_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto91EB395C_ai);
        auto91EB395C_ai = auto91EB395C_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Available) == true)) {
                libComC_gf_CC_MissionStatusSet(lv_indexMission, libComC_ge_MissionStatus_Locked);
            }
            else if ((libComC_gf_MissionStatusAge(lv_indexMission, libComC_ge_MissionStatus_Completed) < libComC_gf_MissionStatusAge(lp_mission, libComC_ge_MissionStatus_Completed))) {
                libComC_gf_CC_MissionStatusSet(lv_indexMission, libComC_ge_MissionStatus_Locked);
            }
            else if ((lv_indexMission != lp_mission)) {
                libComC_gf_CC_MissionStatusAgeSet(lv_indexMission, libComC_ge_MissionStatus_Completed, (libComC_gf_MissionStatusAge(lv_indexMission, libComC_ge_MissionStatus_Completed)-libComC_gf_MissionStatusAge(lp_mission, libComC_ge_MissionStatus_Completed)));
            }
        }    
    }
    libComC_gf_CC_MissionStatusSet(lp_mission, libComC_ge_MissionStatus_Available);
    libComC_gf_CC_UpdateTechStates(1);
    libComC_gf_CC_ApplyTech(1);
}

void libComC_gf_NC_OpenStoryBank () {
    // Implementation
    if ((libComC_gv_cC_StoryBank != null)) {
        return ;
    }

    BankLoad(libComC_gv_cC_StoryBankName, 1);
    libComC_gv_cC_StoryBank = BankLastCreated();
}

void libComC_gf_CC_StoryBankSetName (string lp_bankName) {
    // Implementation
    libComC_gv_cC_StoryBankName = lp_bankName;
}

void libComC_gf_NC_CopyWriterStatesToSnapshot () {
    // Implementation
    libComC_gf_NC_OpenStoryBank();
    UserDataSaveType("WriterStates", libComC_gf_CC_StoryBank(), "WriterStateSnapshot");
    BankSave(libComC_gf_CC_StoryBank());
}

bank libComC_gf_CC_StoryBank () {
    // Implementation
    libComC_gf_NC_OpenStoryBank();
    return libComC_gv_cC_StoryBank;
}

string libComC_gf_CC_BankMissionDifficultyKey (string lp_mission, int lp_difficulty) {
    // Implementation
    return (libComC_gf_CC_MapBankID(lp_mission) + "-" + IntToString(libComC_gf_CC_DifficultyIndex(lp_difficulty)));
}

string libComC_gf_CC_BankSectionName (string lp_map, string lp_section) {
    // Implementation
    if ((lp_map == null)) {
        return ("Campaign" + "|" + (lp_section));
    }

    return (libComC_gf_CC_MapBankID(lp_map) + "|" + (lp_section));
}

int libComC_gf_CC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libComC_gf_CC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libComC_gf_CC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libComC_gf_CC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libComC_gf_CC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libComC_gf_CC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libComC_gf_CC_StorySimulationMissionSet (string lp_mission) {
    // Implementation
    if ((libComC_gv_cC_StorySimulationMission != null)) {
        libComC_gf_CC_StorySimulationEnd();
    }

    BankLoad("StorySimulation", 1);
    libComC_gv_cC_StorySimulationOriginalBank = BankLastCreated();
    libComC_gv_cC_StorySimulationMission = lp_mission;
    libComC_gf_CC_MapBankSave(null, libComC_gv_cC_StorySimulationOriginalBank, false);
    libComC_gf_CC_SaveTransitionVarString(libComC_gv_cC_StorySimulationOriginalBank, libComC_gf_CC_BankSectionName(null, "CampaignLastInfo"), ("Location"), libComC_gf_CC_LocationBankID(libComC_gv_cCX_CurrentLocation), "");
    libComC_gf_NC_SaveArmyCategoryToBank(libComC_gv_cC_StorySimulationOriginalBank, libComC_gf_CC_BankSectionName(null, "ArmyCategory"));
    libComC_gf_NC_SaveArmyUnitsToBank(libComC_gv_cC_StorySimulationOriginalBank, libComC_gf_CC_BankSectionName(null, "ArmyUnit"));
    libComC_gf_CC_SavePerksToBank(libComC_gv_cC_StorySimulationOriginalBank, libComC_gf_CC_BankSectionName(null, "Perks"));
    libComC_gf_CC_OpenCampaignBank();
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventStorySimulationStart, "", "", true);
    if ((libComC_gf_NC_MissionSectionExists(lp_mission) == true)) {
        if ((libComC_gf_CampaignIsComplete() == false)) {
            libComC_gf_CC_MapBankLoad(lp_mission, libComC_gv_NC_CampaignBank);
        }

        libComC_gf_NC_LoadArmyUnitsFromBank(libComC_gv_NC_CampaignBank, libComC_gf_CC_BankSectionName(lp_mission, "ArmyUnit"));
        libComC_gf_CC_LoadPerksFromBank(libComC_gv_NC_CampaignBank, libComC_gf_CC_BankSectionName(lp_mission, "Perks"));
    }

    if ((libComC_gf_CampaignIsComplete() == true)) {
        libComC_gf_CC_MissionSimulationAgesUpdate(lp_mission);
    }
    else {
        libComC_gf_NC_ClampProgressToMission(lp_mission);
    }
}

void libComC_gf_CC_StorySimulationEnd () {
    // Implementation
    libComC_gf_NC_SetMissionSectionExists(libComC_gv_cC_StorySimulationMission, true);
    libComC_gf_NC_SaveArmyUnitsToBank(libComC_gv_NC_CampaignBank, libComC_gf_CC_BankSectionName(libComC_gv_cC_StorySimulationMission, "ArmyUnit"));
    libComC_gf_CC_SavePerksToBank(libComC_gv_NC_CampaignBank, libComC_gf_CC_BankSectionName(libComC_gv_cC_StorySimulationMission, "Perks"));
    libComC_gf_CC_MapBankLoad(null, libComC_gv_cC_StorySimulationOriginalBank);
    libComC_gf_CC_LocationActivate((libComC_gf_CC_LoadTransitionVarString(libComC_gv_cC_StorySimulationOriginalBank, libComC_gf_CC_BankSectionName(null, "CampaignLastInfo"), ("Location"), "")));
    libComC_gf_NC_LoadArmyCategoryFromBank(libComC_gv_cC_StorySimulationOriginalBank, libComC_gf_CC_BankSectionName(null, "ArmyCategory"));
    libComC_gf_NC_LoadArmyUnitsFromBank(libComC_gv_cC_StorySimulationOriginalBank, libComC_gf_CC_BankSectionName(null, "ArmyUnit"));
    libComC_gf_CC_LoadPerksFromBank(libComC_gv_cC_StorySimulationOriginalBank, libComC_gf_CC_BankSectionName(null, "Perks"));
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventStorySimulationEnd, "", "", true);
    libComC_gf_UpdateMissionFlow();
    libComC_gf_CC_UpdateTechStates(1);
    libComC_gf_CC_ApplyTech(1);
    libComC_gv_cC_StorySimulationMission = null;
    BankRemove(libComC_gv_cC_StorySimulationOriginalBank);
}

bool libComC_gf_CC_StoryInSimulation () {
    // Implementation
    return (libComC_gv_cC_StorySimulationMission != null);
}

string libComC_gf_CC_StorySimulationMission () {
    // Implementation
    return libComC_gv_cC_StorySimulationMission;
}

bank libComC_gf_CC_StorySimulationBank () {
    // Implementation
    return libComC_gv_cC_StorySimulationOriginalBank;
}

void libComC_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    int auto5E4ADDA0_val;

    // Implementation
    auto5E4ADDA0_val = lp_mode;
    if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_Cinematic) {
        libLbty_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll());
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_Game) {
        libComC_gv_cC_VolumeChannelModeInSpeech = false;
        if ((libComC_gv_cC_VolumeChannelModeInLowHP == true)) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_LowHealthBegin);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libComC_gv_cC_VolumeChannelModeInLowHP = true;
        if ((libComC_gv_cC_VolumeChannelModeInSpeech == true)) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libComC_gv_cC_VolumeChannelModeInLowHP = false;
        if ((libComC_gv_cC_VolumeChannelModeInSpeech == true)) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_Speech) {
        libComC_gv_cC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_Victory) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMessage, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTest, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 1.0);
    }
    else if (auto5E4ADDA0_val == libComC_ge_VolumeChannelModeCampaign_VictoryInstant) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMessage, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTest, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.0);
    }
    else {
    }
}

void libComC_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players) {
    // Implementation
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAlert, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAmbient, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryBuild, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryCombat, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDeath, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDialogue, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDoodad, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFlames, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFoley, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryGather, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryME, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMission, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovement, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovie, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMusic, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryOther, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryReady, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySAmbient, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySEmitters, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySPieces, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySpell, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryTV, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryUI, lp_ignoredChannel, lp_players);
    libComC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryVoice, lp_ignoredChannel, lp_players);
}

void libComC_gf_CC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players) {
    // Implementation
    if ((lp_muteChannel != lp_ignoredChannel)) {
        SoundChannelMute(lp_players, lp_muteChannel, lp_muteUnmute);
    }

}

void libComC_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

void libComC_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency) {
    // Implementation
    if ((libComC_gv_cC_WorldCoverDlg == c_invalidDialogId)) {
        if ((lp_showHide == true)) {
            DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
            libComC_gv_cC_WorldCoverDlg = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1, PlayerGroupAll());
        }
        else {
            return ;
        }
    }

    if ((lp_showHide == true)) {
        DialogSetTransparency(libComC_gv_cC_WorldCoverDlg, lp_transparency);
    }

    DialogSetVisible(libComC_gv_cC_WorldCoverDlg, PlayerGroupAll(), lp_showHide);
}

string libComC_gf_CC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player) {
    // Variable Declarations
    string lv_fieldPath;

    // Variable Initialization
    lv_fieldPath = "";

    // Implementation
    lv_fieldPath = (lp_field + "[" + IntToString((lp_index - 1)) + "]");
    return CatalogFieldValueGet(lp_catalog, lp_entry, lv_fieldPath, lp_player);
}

text libComC_gf_FormatTimeCampaign (int lp_second) {
    // Implementation
    if ((lp_second < 3600)) {
        return TextTimeFormat(StringExternal("Param/Value/lib_ComC_F5BA4A43"), lp_second);
    }
    else {
        return TextTimeFormat(StringExternal("Param/Value/lib_ComC_ADAD9D86"), lp_second);
    }
}

void libComC_gf_PauseAITimeCampaign (bool lp_pauseUnpause) {
    // Implementation
    AITimePause(lp_pauseUnpause);
    libComC_gv_cC_TimeAIPaused = lp_pauseUnpause;
}

void libComC_gf_CC_TimeAITemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    libComC_gv_cC_TimeAIOverrideCount += 1;
    lv_originalPauseState = libComC_gv_cC_TimeAIPaused;
    libComC_gf_PauseAITimeCampaign(lp_pauseUnpause);
    libComC_gv_cC_TimeAIPaused = lv_originalPauseState;
}

void libComC_gf_CC_TimeAITemporaryRestore () {
    // Implementation
    libComC_gv_cC_TimeAIOverrideCount -= 1;
    if ((libComC_gv_cC_TimeAIOverrideCount <= 0)) {
        libComC_gf_PauseAITimeCampaign(libComC_gv_cC_TimeAIPaused);
    }

}

void libComC_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause) {
    // Implementation
    GameSetMissionTimePaused(lp_pauseUnpause);
    libComC_gv_cC_TimeMissionPaused = lp_pauseUnpause;
}

void libComC_gf_CC_TimeMissionTemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = libComC_gv_cC_TimeMissionPaused;
    libComC_gf_PauseMissionTimeCampaign(lp_pauseUnpause);
    libComC_gv_cC_TimeMissionPaused = lv_originalPauseState;
}

void libComC_gf_CC_TimeMissionTemporaryRestore () {
    // Implementation
    libComC_gf_PauseMissionTimeCampaign(libComC_gv_cC_TimeMissionPaused);
}

void libComC_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone) {
    // Implementation
    if ((lp_waitUntilDone == true)) {
        libComC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    }
    else {
        libComC_gf_CinematicFade4(lp_fadeIn, lp_duration, lp_color);
    }
}

void libComC_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    // Implementation
    if ((lp_fadeIn == true)) {
        if ((libComC_gv__FadeImage != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libComC_gv__FadeImage, lp_color, PlayerGroupAll());
            DialogControlFadeTransparency(libComC_gv__FadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    else {
        libComC_gf__FadeCreateDialog();
        libNtve_gf_SetDialogItemColor(libComC_gv__FadeImage, lp_color, PlayerGroupAll());
        DialogControlFadeTransparency(libComC_gv__FadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(libComC_gv__FadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeGame);
    }

}

trigger auto_libComC_gf_CinematicFade4_Trigger = null;
bool auto_libComC_gf_CinematicFade4_lp_fadeIn;
fixed auto_libComC_gf_CinematicFade4_lp_duration;
color auto_libComC_gf_CinematicFade4_lp_color;

void libComC_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    auto_libComC_gf_CinematicFade4_lp_fadeIn = lp_fadeIn;
    auto_libComC_gf_CinematicFade4_lp_duration = lp_duration;
    auto_libComC_gf_CinematicFade4_lp_color = lp_color;

    if (auto_libComC_gf_CinematicFade4_Trigger == null) {
        auto_libComC_gf_CinematicFade4_Trigger = TriggerCreate("auto_libComC_gf_CinematicFade4_TriggerFunc");
    }

    TriggerExecute(auto_libComC_gf_CinematicFade4_Trigger, false, false);
}

bool auto_libComC_gf_CinematicFade4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_libComC_gf_CinematicFade4_lp_fadeIn;
    fixed lp_duration = auto_libComC_gf_CinematicFade4_lp_duration;
    color lp_color = auto_libComC_gf_CinematicFade4_lp_color;

    // Implementation
    libComC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    return true;
}

void libComC_gf__FadeCreateDialog () {
    // Implementation
    if ((libComC_gv__FadeDialog != c_invalidDialogId)) {
        DialogDestroy(libComC_gv__FadeDialog);
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libComC_gv__FadeDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libComC_gv__FadeImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: CC_DisplayTimestamp
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_DisplayTimestamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("Timestamps", libComC_gv_cC_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("Timestamps", libComC_gv_cC_CutsceneTimestamp, "Title", 1);
    Wait(UserDataGetFixed("Timestamps", libComC_gv_cC_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("Timestamps", libComC_gv_cC_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("UI_Void_TextCallout", -1));
    Wait(UserDataGetFixed("Timestamps", libComC_gv_cC_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_DisplayTimestamp_Init () {
    libComC_gt_CC_DisplayTimestamp = TriggerCreate("libComC_gt_CC_DisplayTimestamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DisplayTimestampSkippable
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_DisplayTimestampSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_timestamp;
    text lv_title;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timestamp = UserDataGetText("Timestamps", libComC_gv_cC_CutsceneTimestamp, "Description", 1);
    lv_title = UserDataGetText("Timestamps", libComC_gv_cC_CutsceneTimestamp, "Title", 1);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(UserDataGetFixed("Timestamps", libComC_gv_cC_CutsceneTimestamp, "StartDelay", 1), c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), lv_title, lv_timestamp, UserDataGetFixed("Timestamps", libComC_gv_cC_CutsceneTimestamp, "FlashDuration", 1), SoundLink("Silent", -1), SoundLink("TextCrawlType", -1));
    Wait(UserDataGetFixed("Timestamps", libComC_gv_cC_CutsceneTimestamp, "WaitDuration", 1), c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_DisplayTimestampSkippable_Init () {
    libComC_gt_CC_DisplayTimestampSkippable = TriggerCreate("libComC_gt_CC_DisplayTimestampSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DisplayTimestampFromBookmark
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_DisplayTimestampFromBookmark_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_CC_DisplayCinematicTimestamp(libComC_gv_cC_CutsceneCurrentUser, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_DisplayTimestampFromBookmark_Init () {
    libComC_gt_CC_DisplayTimestampFromBookmark = TriggerCreate("libComC_gt_CC_DisplayTimestampFromBookmark_Func");
    TriggerEnable(libComC_gt_CC_DisplayTimestampFromBookmark, false);
    TriggerAddEventCutsceneBookmarkFired(libComC_gt_CC_DisplayTimestampFromBookmark, c_cutsceneNone, "ShowTimeStamp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_WaitForDialogCutscene
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_WaitForDialogCutscene_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libComC_gv_cC_CutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, libComC_gt_CC_CampaignCutsceneEnded, false, false);
    }

    WaitForCutsceneToEnd(libComC_gv_cC_CutsceneCurrent);
    DialogDestroy(libComC_gv_cC_CutsceneDialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_WaitForDialogCutscene_Init () {
    libComC_gt_CC_WaitForDialogCutscene = TriggerCreate("libComC_gt_CC_WaitForDialogCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_WaitForCutscene
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_WaitForCutscene_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libComC_gv_cC_CutsceneSkippable == true)) {
        TriggerSkippableBegin(PlayerGroupAll(), 0, libComC_gt_CC_CampaignCutsceneEnded, false, false);
    }

    WaitForCutsceneToEnd(libComC_gv_cC_CutsceneCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_WaitForCutscene_Init () {
    libComC_gt_CC_WaitForCutscene = TriggerCreate("libComC_gt_CC_WaitForCutscene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_CampaignCutsceneEnded
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_CampaignCutsceneEnded_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libComC_gt_CC_CampaignCutsceneEnded, false);
    CutsceneStop(libComC_gv_cC_CutsceneCurrent);
    DialogDestroy(libComC_gv_cC_CutsceneDialog);
    TriggerStop(libComC_gt_CC_WaitForCutscene);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_CampaignCutsceneEnded_Init () {
    libComC_gt_CC_CampaignCutsceneEnded = TriggerCreate("libComC_gt_CC_CampaignCutsceneEnded_Func");
    TriggerEnable(libComC_gt_CC_CampaignCutsceneEnded, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_PlaySceneSkippable
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_PlaySceneSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libComC_gf_CC_SceneMovie(libComC_gv_cC_CutsceneCurrentUser) != null)) {
        lv_movieSource = TransmissionSourceFromMovie(libComC_gf_CC_SceneMovie(libComC_gv_cC_CutsceneCurrentUser), true);
        TriggerExecute(libComC_gt_CC_CinematicDetectSkipping, true, false);
        TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
        TransmissionSourceSetPauseAllowed(lv_movieSource, true);
        TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, true);
        TriggerStop(libComC_gt_CC_CinematicDetectSkipping);
        TriggerStop(libComC_gt_CC_SceneSkipped);
    }
    else {
        TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
        while (true) {
            Wait(5.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_PlaySceneSkippable_Init () {
    libComC_gt_CC_PlaySceneSkippable = TriggerCreate("libComC_gt_CC_PlaySceneSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_CinematicDetectSkipping
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_CinematicDetectSkipping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, libComC_gt_CC_SceneSkipped, true, false);
    while (true) {
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_CinematicDetectSkipping_Init () {
    libComC_gt_CC_CinematicDetectSkipping = TriggerCreate("libComC_gt_CC_CinematicDetectSkipping_Func");
    TriggerEnable(libComC_gt_CC_CinematicDetectSkipping, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_SceneSkipped
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_SceneSkipped_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_CC_FadeAllSoundsExceptMusic(0.8, false);
    libComC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    TriggerStop(libComC_gt_CC_PlaySceneSkippable);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_SceneSkipped_Init () {
    libComC_gt_CC_SceneSkipped = TriggerCreate("libComC_gt_CC_SceneSkipped_Func");
    TriggerEnable(libComC_gt_CC_SceneSkipped, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ArchiveBankLoadSyncComplete
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_ArchiveBankLoadSyncComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    BankWait(libComC_gv_cC_ArchivesBank);
    libComC_gv_cC_ArchivesReloading = false;
    libComC_gf_CC_ArchiveBankLoad();
    libComC_gf_CC_EventDispatch(libComC_ge_CC_Event_CC_EventArchivesSynced, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_ArchiveBankLoadSyncComplete_Init () {
    libComC_gt_CC_ArchiveBankLoadSyncComplete = TriggerCreate("libComC_gt_CC_ArchiveBankLoadSyncComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ArchiveBankSaveSyncComplete
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_ArchiveBankSaveSyncComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    BankWait(libComC_gv_cC_ArchivesBank);
    libComC_gv_cC_ArchivesReloading = false;
    libComC_gf_CC_ArchiveBankSave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_ArchiveBankSaveSyncComplete_Init () {
    libComC_gt_CC_ArchiveBankSaveSyncComplete = TriggerCreate("libComC_gt_CC_ArchiveBankSaveSyncComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ArchiveHandleMissionLoad
//--------------------------------------------------------------------------------------------------
bool libComC_gt_CC_ArchiveHandleMissionLoad_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindStory) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gv_cC_InLoadedMission = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libComC_gt_CC_ArchiveHandleMissionLoad_Init () {
    libComC_gt_CC_ArchiveHandleMissionLoad = TriggerCreate("libComC_gt_CC_ArchiveHandleMissionLoad_Func");
    TriggerAddEventLoadGameDone(libComC_gt_CC_ArchiveHandleMissionLoad);
}

void libComC_InitTriggers () {
    libComC_gt_CC_DisplayTimestamp_Init();
    libComC_gt_CC_DisplayTimestampSkippable_Init();
    libComC_gt_CC_DisplayTimestampFromBookmark_Init();
    libComC_gt_CC_WaitForDialogCutscene_Init();
    libComC_gt_CC_WaitForCutscene_Init();
    libComC_gt_CC_CampaignCutsceneEnded_Init();
    libComC_gt_CC_PlaySceneSkippable_Init();
    libComC_gt_CC_CinematicDetectSkipping_Init();
    libComC_gt_CC_SceneSkipped_Init();
    libComC_gt_CC_ArchiveBankLoadSyncComplete_Init();
    libComC_gt_CC_ArchiveBankSaveSyncComplete_Init();
    libComC_gt_CC_ArchiveHandleMissionLoad_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libComC_InitLib_completed = false;

void libComC_InitLib () {
    if (libComC_InitLib_completed) {
        return;
    }

    libComC_InitLib_completed = true;

    libComC_InitLibraries();
    libComC_InitVariables();
    libComC_InitTriggers();
}

