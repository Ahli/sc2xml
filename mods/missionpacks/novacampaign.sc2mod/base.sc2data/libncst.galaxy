include "TriggerLibs/NativeLib"
include "LibComC"
include "LibNovC_h"
include "LibNCMI_h"
include "LibNCUI_h"

include "LibNCST_h"

//--------------------------------------------------------------------------------------------------
// Library: Story (Nova)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libNCST_InitLibraries () {
    libNtve_InitVariables();
    libComC_InitVariables();
    libNovC_InitVariables();
    libNCMI_InitVariables();
    libNCUI_InitVariables();
}

// Variable Initialization
bool libNCST_InitVariables_completed = false;

void libNCST_InitVariables () {
    int init_i;
    int init_j;
    int init_k;

    if (libNCST_InitVariables_completed) {
        return;
    }

    libNCST_InitVariables_completed = true;

    libNCST_gv_nS_DebugTimeCodePortrait = c_invalidPortraitId;
    libNCST_gv_nS_DebugStoryDialog = c_invalidDialogId;
    libNCST_gv_nS_DebugStoryTypeList = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStorySceneList = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStoryConvoTypeCheckbox = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStoryConvoTypeLabel = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStorySceneTypeCheckbox = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStorySceneTypeLabel = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStoryFilterEditBox = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStoryPreviewList = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStoryFilterLabel = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStoryPlayButton = c_invalidDialogControlId;
    libNCST_gv_nS_DebugStoryCloseButton = c_invalidDialogControlId;
    libNCST_gv_nS_CurrentSoundMode = libNtve_ge_VolumeChannelMode_Speech;
    libNCST_gv_nS_PlanetSetUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libNCST_gv_NS_AliasedUnitsMaxCount; init_i += 1) {
        libNCST_gv_nS_Aliases[init_i] = "";
    }
    libNCST_gv_nS_VisibleUnits = UnitGroupEmpty();
    libNCST_gv_nS_StorySetLightingCutscene = c_cutsceneNone;
    libNCST_gv_nS_UIVisible = true;
    libNCST_gv_nS_InteractionOn = true;
    libNCST_gv_nS_CurrentStoryActivity = libNCST_ge_StoryActivities_None;
    libNCST_gv_nS_LastStoryActivity = libNCST_ge_StoryActivities_None;
    libNCST_gv_nS_CurrentRoom = libNCST_ge_Rooms_StoryRoomVoid;
    libNCST_gv_nS_LastRoom = libNCST_ge_Rooms_StoryRoomVoid;
    for (init_i = 0; init_i <= libNCST_gv_nSC_RoomCount; init_i += 1) {
        libNCST_gv_nS_RoomUnits[init_i] = UnitGroupEmpty();
    }
    libNCST_gv_nS_RoomUICutscene = c_cutsceneNone;
    libNCST_gv_NS_RoomBeforeArchives = libNCST_ge_Rooms_StoryRoomMissionScreen;
    libNCST_gv_NS_NextRoom = libNCST_ge_Rooms_StoryRoomVoid;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNCST_gv_NS_Backgrounds[init_i] = c_cutsceneNone;
    }
    libNCST_gv_NS_ActiveBackground = c_cutsceneNone;
    for (init_i = 0; init_i <= libNCST_gv_pSC_MaxAmbientRooms; init_i += 1) {
        for (init_j = 0; init_j <= libNCST_gv_pSC_MaxAmbientScenes; init_j += 1) {
            for (init_k = 0; init_k <= libNCST_gv_pSC_MaxAmbientEvents; init_k += 1) {
                libNCST_gv_NS_AmbientEvents[init_i][init_j][init_k] = c_cutsceneNone;
            }
        }
    }
    for (init_i = 0; init_i <= libNCST_gv_pSC_MaxAmbientRooms; init_i += 1) {
        for (init_j = 0; init_j <= libNCST_gv_pSC_MaxAmbientScenes; init_j += 1) {
            libNCST_gv_nS_AmbientSceneTimer[init_i][init_j] = TimerCreate();
        }
    }
    for (init_i = 0; init_i <= libNCST_gv_pSC_MaxAmbientRooms; init_i += 1) {
        for (init_j = 0; init_j <= libNCST_gv_pSC_MaxAmbientScenes; init_j += 1) {
            libNCST_gv_nS_AmbientSceneStatus[init_i][init_j] = libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientSceneUnused;
        }
    }
    for (init_i = 0; init_i <= libNCST_gv_pSC_MaxAmbientRooms; init_i += 1) {
        libNCST_gv_nS_AmbientScenesHidden[init_i] = true;
    }
    libNCST_gv_NS_AmbientConversationTimer = TimerCreate();
    libNCST_gv_nS_ConversationScene = c_cutsceneNone;
    libNCST_gv_nS_ConversationCutscenePosition = libNtve_gf_PointFromXYZ(32.0, 32.0, 8.0);
    libNCST_gv_nS_ActiveConvoBookmarkToken = "";
    for (init_i = 0; init_i <= 40; init_i += 1) {
        libNCST_gv_nS_Clickable[init_i].lv_stringID = "";
        libNCST_gv_nS_Clickable[init_i].lv_callout = c_invalidDialogControlId;
        libNCST_gv_nS_Clickable[init_i].lv_calloutDialog = c_invalidDialogId;
        libNCST_gv_nS_Clickable[init_i].lv_calloutSubtitle = c_invalidDialogControlId;
        libNCST_gv_nS_Clickable[init_i].lv_calloutName = c_invalidDialogControlId;
        libNCST_gv_nS_Clickable[init_i].lv_lightingCutscene = c_cutsceneNone;
    }
    libNCST_gv_nS_Cutscene = c_cutsceneNone;
}

// Presets
// Functions
void libNCST_gf_NS_DebugStoryCheatDisplay () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    TriggerExecute(libNCST_gt_NS_DebugStoryCheatInit, true, false);
    libNCST_gf_NS_DebugStoryCheatUpdateList();
    if ((libNCST_gv_nS_InStoryCheat == false)) {
        libNCST_gv_nS_DebugStoryOriginalRoom = libNCST_gf_PreviousRoom();
    }

    CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    DialogSetVisible(libNCST_gv_nS_DebugStoryDialog, PlayerGroupAll(), true);
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatSceneListSelect, true);
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatFilterChange, true);
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatPlay, true);
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatClose, true);
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatCheckbox, true);
    if ((libNCST_gv_nS_DebugStorySelectedIndex != 0)) {
        DialogControlSelectItem(libNCST_gv_nS_DebugStorySceneList, PlayerGroupAll(), libNCST_gv_nS_DebugStorySelectedIndex);
    }

}

void libNCST_gf_NS_DebugStoryCheatHide () {
    // Implementation
    DialogSetVisible(libNCST_gv_nS_DebugStoryDialog, PlayerGroupAll(), false);
}

void libNCST_gf_NS_DebugStoryCheatUpdateList () {
    int auto88925A07_ae;
    int auto88925A07_ai;
    int auto34730C5A_ae;
    int auto34730C5A_ai;

    // Variable Declarations
    string lv_indexScene;
    string lv_indexConvo;
    int lv_index;

    // Variable Initialization

    // Implementation
    libNCST_gv_nS_DebugStoryListCount = 0;
    DialogControlRemoveAllItems(libNCST_gv_nS_DebugStorySceneList, PlayerGroupAll());
    auto88925A07_ae = UserDataInstanceCount("Scenes");
    auto88925A07_ai = 1;
    lv_index = 1;
    for ( ; ( (auto88925A07_ai >= 0 && lv_index <= auto88925A07_ae) || (auto88925A07_ai <= 0 && lv_index >= auto88925A07_ae) ) ; lv_index += auto88925A07_ai ) {
        lv_indexScene = UserDataInstance("Scenes", lv_index);
        libNCST_gf_NS_DebugStoryAddListItem((lv_indexScene), lv_indexScene, "Scenes");
    }
    auto34730C5A_ae = UserDataInstanceCount("Conversations");
    auto34730C5A_ai = 1;
    lv_index = 1;
    for ( ; ( (auto34730C5A_ai >= 0 && lv_index <= auto34730C5A_ae) || (auto34730C5A_ai <= 0 && lv_index >= auto34730C5A_ae) ) ; lv_index += auto34730C5A_ai ) {
        lv_indexConvo = UserDataInstance("Conversations", lv_index);
        libNCST_gf_NS_DebugStoryAddListItem(("(Conv) " + UserDataGetString("Conversations", lv_indexConvo, "Name", 1)), lv_indexConvo, "Conversations");
    }
}

void libNCST_gf_NS_DebugStoryCheatUpdateSelection () {
    int autoF5938A13_ae;
    int autoF5938A13_ai;
    int auto8ADDF7C4_ae;
    int auto8ADDF7C4_ai;
    int auto453FBC04_ae;
    int auto453FBC04_ai;

    // Variable Declarations
    int lv_indexGroup;
    int lv_indexParentGroup;
    int lv_indexChild;
    string lv_groupId;
    bool lv_passed;
    string lv_conversation;

    // Variable Initialization
    lv_groupId = "";

    // Implementation
    DialogControlRemoveAllItems(libNCST_gv_nS_DebugStoryPreviewList, PlayerGroupAll());
    if ((libNCST_gv_nS_DebugStoryListType[libNCST_gv_nS_DebugStorySelectedIndex] == null)) {
        return ;
    }

    if ((libNCST_gv_nS_DebugStoryListType[libNCST_gv_nS_DebugStorySelectedIndex] == "Scenes")) {
        lv_conversation = UserDataGetGameLink("Scenes", libNCST_gv_nS_DebugStoryListInstance[libNCST_gv_nS_DebugStorySelectedIndex], "Conversation", 1);
        if ((lv_conversation != null)) {
            libNCST_gf_NS_DebugStoryPreviewGroupRecursive(lv_conversation, "Group00001");
        }

        return ;
    }

    lv_conversation = UserDataGetGameLink("Conversations", libNCST_gv_nS_DebugStoryListInstance[libNCST_gv_nS_DebugStorySelectedIndex], "ConvoGameLink", 1);
    if ((lv_conversation == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_NCST_CAA1F39B"), true);
        return ;
    }

    libNCST_gf_NS_DebugStoryCheatPrepareConversation(libNCST_gv_nS_DebugStoryListInstance[libNCST_gv_nS_DebugStorySelectedIndex]);
    autoF5938A13_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lv_conversation, "Groups", c_playerAny)-1);
    autoF5938A13_ai = 1;
    lv_indexGroup = 1;
    for ( ; ( (autoF5938A13_ai >= 0 && lv_indexGroup <= autoF5938A13_ae) || (autoF5938A13_ai <= 0 && lv_indexGroup >= autoF5938A13_ae) ) ; lv_indexGroup += autoF5938A13_ai ) {
        lv_groupId = CatalogFieldValueGet(c_gameCatalogConversation, lv_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Id", c_playerAny);
        lv_passed = true;
        auto8ADDF7C4_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lv_conversation, "Groups", c_playerAny)-1);
        auto8ADDF7C4_ai = 1;
        lv_indexParentGroup = 1;
        for ( ; ( (auto8ADDF7C4_ai >= 0 && lv_indexParentGroup <= auto8ADDF7C4_ae) || (auto8ADDF7C4_ai <= 0 && lv_indexParentGroup >= auto8ADDF7C4_ae) ) ; lv_indexParentGroup += auto8ADDF7C4_ai ) {
            auto453FBC04_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lv_conversation, "Groups[" + IntToString(lv_indexParentGroup) + "].Children", c_playerAny)-1);
            auto453FBC04_ai = 1;
            lv_indexChild = 0;
            for ( ; ( (auto453FBC04_ai >= 0 && lv_indexChild <= auto453FBC04_ae) || (auto453FBC04_ai <= 0 && lv_indexChild >= auto453FBC04_ae) ) ; lv_indexChild += auto453FBC04_ai ) {
                if ((CatalogFieldValueGet(c_gameCatalogConversation, lv_conversation, "Groups[" + IntToString(lv_indexParentGroup) + "].Children[" + IntToString(lv_indexChild) + "]", c_playerAny) == lv_groupId)) {
                    lv_passed = false;
                }

            }
        }
        if ((lv_passed == true)) {
            libNCST_gf_NS_DebugStoryPreviewGroupRecursive(lv_conversation, lv_groupId);
        }

    }
}

void libNCST_gf_NS_DebugStoryCheatPrepareConversation (string lp_convoInstance) {
    int autoE1594938_ae;
    int autoE1594938_ai;

    // Variable Declarations
    int lv_indexMission;

    // Variable Initialization

    // Implementation
    libComC_gf_CC_ResetCampaignData();
    UserDataResetType("Locations");
    autoE1594938_ae = 3;
    autoE1594938_ai = 1;
    lv_indexMission = 1;
    for ( ; ( (autoE1594938_ai >= 0 && lv_indexMission <= autoE1594938_ae) || (autoE1594938_ai <= 0 && lv_indexMission >= autoE1594938_ae) ) ; lv_indexMission += autoE1594938_ai ) {
        if ((UserDataGetGameLink("Conversations", lp_convoInstance, "RequiredMission", lv_indexMission) != null)) {
            libNCST_gf_NS_DebugStoryCheatCompleteMission(UserDataGetGameLink("Conversations", lp_convoInstance, "RequiredMission", lv_indexMission));
        }

    }
    libNCST_gf_NS_DebugStoryCheatSetConditionRecursive(UserDataGetGameLink("Conversations", lp_convoInstance, "ConvoGameLink", 1), UserDataGetString("Conversations", lp_convoInstance, "Group", 1));
}

void libNCST_gf_NS_DebugStoryCheatCompleteMission (string lp_mission) {
    // Implementation
    libComC_gf_CC_MissionMarkCompleted(lp_mission);
}

void libNCST_gf_NS_DebugStoryCheatSetConditionRecursive (string lp_conversationLink, string lp_groupID) {
    int auto5153B48E_ae;
    int auto5153B48E_ai;
    int auto6D6C6CD9_ae;
    int auto6D6C6CD9_ai;
    int auto2CDBFF2F_ae;
    int auto2CDBFF2F_ai;
    int auto8A407701_ae;
    int auto8A407701_ai;

    // Variable Declarations
    int lv_indexCondition;
    int lv_indexGroup;
    int lv_indexValue;
    int lv_indexChild;
    string lv_typeString;
    string lv_instanceString;
    string lv_fieldString;
    string lv_userType;
    string lv_userInstance;
    string lv_userField;
    int lv_currentValue;

    // Variable Initialization
    lv_typeString = "";
    lv_instanceString = "";
    lv_fieldString = "";

    // Implementation
    auto5153B48E_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversationLink, "Groups", c_playerAny)-1);
    auto5153B48E_ai = 1;
    lv_indexGroup = 0;
    for ( ; ( (auto5153B48E_ai >= 0 && lv_indexGroup <= auto5153B48E_ae) || (auto5153B48E_ai <= 0 && lv_indexGroup >= auto5153B48E_ae) ) ; lv_indexGroup += auto5153B48E_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Id", c_playerAny) == lp_groupID)) {
            auto2CDBFF2F_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions", c_playerAny)-1);
            auto2CDBFF2F_ai = 1;
            lv_indexCondition = 0;
            for ( ; ( (auto2CDBFF2F_ai >= 0 && lv_indexCondition <= auto2CDBFF2F_ae) || (auto2CDBFF2F_ai <= 0 && lv_indexCondition >= auto2CDBFF2F_ae) ) ; lv_indexCondition += auto2CDBFF2F_ai ) {
                lv_typeString = CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Type", c_playerAny);
                lv_instanceString = CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Instance", c_playerAny);
                lv_fieldString = CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Field", c_playerAny);
                lv_userType = (lv_typeString);
                lv_userInstance = (lv_instanceString);
                lv_userField = (lv_fieldString);
                lv_currentValue = 0;
                auto8A407701_ae = 101;
                auto8A407701_ai = 1;
                lv_indexValue = DataTableGetInt(false, (lv_typeString + "." + lv_instanceString + "." + lv_fieldString));
                for ( ; ( (auto8A407701_ai >= 0 && lv_indexValue <= auto8A407701_ae) || (auto8A407701_ai <= 0 && lv_indexValue >= auto8A407701_ae) ) ; lv_indexValue += auto8A407701_ai ) {
                    if ((libNCST_gf_NS_DebugStoryConditionPassed(lv_typeString, lv_instanceString, lv_fieldString, "1", CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].Operation", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].Value", c_playerAny)) == true)) {
                        DataTableSetInt(false, (lv_typeString + "." + lv_instanceString + "." + lv_fieldString), UserDataGetInt(lv_userType, lv_userInstance, lv_userField, 1));
                        break;
                    }

                    UserDataSetInt(lv_userType, lv_userInstance, lv_userField, 1, lv_indexValue);
                }
            }
        }
        else {
            auto6D6C6CD9_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Children", c_playerAny)-1);
            auto6D6C6CD9_ai = 1;
            lv_indexChild = 0;
            for ( ; ( (auto6D6C6CD9_ai >= 0 && lv_indexChild <= auto6D6C6CD9_ae) || (auto6D6C6CD9_ai <= 0 && lv_indexChild >= auto6D6C6CD9_ae) ) ; lv_indexChild += auto6D6C6CD9_ai ) {
                if ((CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Children[" + IntToString(lv_indexChild) + "]", c_playerAny) == lp_groupID)) {
                    libNCST_gf_NS_DebugStoryCheatSetConditionRecursive(lp_conversationLink, CatalogFieldValueGet(c_gameCatalogConversation, lp_conversationLink, "Groups[" + IntToString(lv_indexGroup) + "].Id", c_playerAny));
                }

            }
        }
    }
}

void libNCST_gf_NS_DebugStoryPreviewGroupRecursive (string lp_conversation, string lp_group) {
    int auto46A2E312_ae;
    int auto46A2E312_ai;
    int auto0E703C23_ae;
    int auto0E703C23_ai;
    int autoD142832C_ae;
    int autoD142832C_ai;

    // Variable Declarations
    int lv_indexCondition;
    int lv_indexGroup;
    int lv_indexChild;
    string lv_childStr;

    // Variable Initialization
    lv_childStr = "";

    // Implementation
    auto46A2E312_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Groups", c_playerAny)-1);
    auto46A2E312_ai = 1;
    lv_indexGroup = 0;
    for ( ; ( (auto46A2E312_ai >= 0 && lv_indexGroup <= auto46A2E312_ae) || (auto46A2E312_ai <= 0 && lv_indexGroup >= auto46A2E312_ae) ) ; lv_indexGroup += auto46A2E312_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Id", c_playerAny) == lp_group)) {
            auto0E703C23_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions", c_playerAny)-1);
            auto0E703C23_ai = 1;
            lv_indexCondition = 0;
            for ( ; ( (auto0E703C23_ai >= 0 && lv_indexCondition <= auto0E703C23_ae) || (auto0E703C23_ai <= 0 && lv_indexCondition >= auto0E703C23_ae) ) ; lv_indexCondition += auto0E703C23_ai ) {
                if ((libNCST_gf_NS_DebugStoryConditionPassed(CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Type", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Instance", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Field", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Index", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].Operation", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Conditions[" + IntToString(lv_indexCondition) + "].Value", c_playerAny)) == false)) {
                    return ;
                }

            }
            autoD142832C_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Children", c_playerAny)-1);
            autoD142832C_ai = 1;
            lv_indexChild = 0;
            for ( ; ( (autoD142832C_ai >= 0 && lv_indexChild <= autoD142832C_ae) || (autoD142832C_ai <= 0 && lv_indexChild >= autoD142832C_ae) ) ; lv_indexChild += autoD142832C_ai ) {
                lv_childStr = CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Groups[" + IntToString(lv_indexGroup) + "].Children[" + IntToString(lv_indexChild) + "]", c_playerAny);
                if ((StringSub(lv_childStr, 1, 5) == "Group")) {
                    libNCST_gf_NS_DebugStoryPreviewGroupRecursive(lp_conversation, lv_childStr);
                }
                else if ((StringSub(lv_childStr, 1, 4) == "Line")) {
                    libNCST_gf_NS_DebugStoryPreviewLine(lp_conversation, lv_childStr);
                }
            }
            return ;
        }

    }
}

void libNCST_gf_NS_DebugStoryPreviewLine (string lp_conversation, string lp_line) {
    int autoD5FF4448_ae;
    int autoD5FF4448_ai;
    int auto2118A0E5_ae;
    int auto2118A0E5_ai;

    // Variable Declarations
    int lv_indexCondition;
    int lv_indexLine;

    // Variable Initialization

    // Implementation
    autoD5FF4448_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Lines", c_playerAny)-1);
    autoD5FF4448_ai = 1;
    lv_indexLine = 0;
    for ( ; ( (autoD5FF4448_ai >= 0 && lv_indexLine <= autoD5FF4448_ae) || (autoD5FF4448_ai <= 0 && lv_indexLine >= autoD5FF4448_ae) ) ; lv_indexLine += autoD5FF4448_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Id", c_playerAny) == lp_line)) {
            auto2118A0E5_ae = (CatalogFieldValueCount(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions", c_playerAny)-1);
            auto2118A0E5_ai = 1;
            lv_indexCondition = 0;
            for ( ; ( (auto2118A0E5_ai >= 0 && lv_indexCondition <= auto2118A0E5_ae) || (auto2118A0E5_ai <= 0 && lv_indexCondition >= auto2118A0E5_ae) ) ; lv_indexCondition += auto2118A0E5_ai ) {
                if ((libNCST_gf_NS_DebugStoryConditionPassed(CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Type", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Instance", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Field", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].User.Index", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].Operation", c_playerAny), CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Conditions[" + IntToString(lv_indexCondition) + "].Value", c_playerAny)) == false)) {
                    return ;
                }

            }
            TextExpressionSetToken("Param/Expression/lib_NCST_A03ACF50", "SPEAKER", StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].SpeakerCharacter", c_playerAny), "Name", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_NCST_A03ACF50", "LINE", StringExternal(CatalogFieldValueGet(c_gameCatalogConversation, lp_conversation, "Lines[" + IntToString(lv_indexLine) + "].Text", c_playerAny)));
            DialogControlAddItem(libNCST_gv_nS_DebugStoryPreviewList, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_NCST_A03ACF50"));
            return ;
        }

    }
}

bool libNCST_gf_NS_DebugStoryConditionPassed (string lp_userType, string lp_userInstance, string lp_userField, string lp_userIndex, string lp_compare, string lp_value) {
    string auto08DEDB16_val;

    // Implementation
    auto08DEDB16_val = lp_compare;
    if (auto08DEDB16_val == "NotEqual") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) != StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "Equal") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) == StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "LessEqual") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) <= StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "GreaterEqual") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) >= StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "Greater") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) > StringToInt(lp_value))) {
            return true;
        }

    }
    else if (auto08DEDB16_val == "Less") {
        if ((UserDataGetInt((lp_userType), (lp_userInstance), (lp_userField), 1) < StringToInt(lp_value))) {
            return true;
        }

    }
    else {
    }
    return false;
}

void libNCST_gf_NS_DebugStoryAddListItem (string lp_name, string lp_listInstance, string lp_listType) {
    // Implementation
    if ((libNtve_gf_DialogItemEditValue(libNCST_gv_nS_DebugStoryFilterEditBox, 1) != "") && (StringContains(lp_name, libNtve_gf_DialogItemEditValue(libNCST_gv_nS_DebugStoryFilterEditBox, 1), c_stringAnywhere, c_stringNoCase) == false)) {
        return ;
    }

    if ((lp_listType == "Scenes") && (libNtve_gf_DialogItemIsChecked(libNCST_gv_nS_DebugStorySceneTypeCheckbox, 1) == false)) {
        return ;
    }

    if ((lp_listType == "Conversations") && (libNtve_gf_DialogItemIsChecked(libNCST_gv_nS_DebugStoryConvoTypeCheckbox, 1) == false)) {
        return ;
    }

    DialogControlAddItem(libNCST_gv_nS_DebugStorySceneList, PlayerGroupAll(), StringToText(lp_name));
    libNCST_gv_nS_DebugStoryListCount += 1;
    libNCST_gv_nS_DebugStoryListInstance[libNCST_gv_nS_DebugStoryListCount] = lp_listInstance;
    libNCST_gv_nS_DebugStoryListType[libNCST_gv_nS_DebugStoryListCount] = lp_listType;
}

void libNCST_gf_NS_DebugStorySaveStats () {
    // Implementation
    BankLoad("ZDebugStory", 1);
    libNCST_gv_nS_DebugStoryBank = BankLastCreated();
    libComC_gf_CC_TransitionSaveBankVars(libNCST_gv_nS_DebugStoryBank, null, libComC_gf_CC_TransitionInSimulation(), libComC_gf_CC_TransitionInPlayAgain(), false, false, false);
}

void libNCST_gf_NS_DebugStoryRestoreStats () {
    // Variable Declarations
    string lv_indexMission;

    // Variable Initialization

    // Implementation
    if ((libNCST_gv_nS_DebugStoryBank == null)) {
        return ;
    }

    libComC_gf_CC_TransitionLoadBankVars(libNCST_gv_nS_DebugStoryBank, null);
    BankRemove(libNCST_gv_nS_DebugStoryBank);
    libNCST_gv_nS_DebugStoryBank = null;
}

int libNCST_gf_NS_DebugRoomFromString (string lp_roomString) {
    string auto4DFAB3F4_val;

    // Implementation
    auto4DFAB3F4_val = StringCase(lp_roomString, false);
    if (auto4DFAB3F4_val == "bridge") {
        return libNCST_ge_Rooms_StoryRoomBridge;
    }
    else {
    }
    return libNCST_ge_Rooms_StoryRoomVoid;
}

void libNCST_gf_InitializeNovaStorymode (string lp_storyMap) {
    // Variable Declarations
    int lv_episodeNumber;
    string lv_indexMission;
    string lv_nextMission;

    // Variable Initialization

    // Implementation
    UISetMinimumLetterboxHeight(0);
    GameSetTransitionMap(("Campaign/Nova/" + libComC_gf_CC_MapFile(lp_storyMap)));
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameSetQuitOnQuitButton(false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, false);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_CampaignDataReset, libNCST_gt_NS_EventCampaignResetData);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_CampaignMapTransition, libNCST_gt_NS_SaveStoryDataCallback);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_CampaignProgressCheatStart, libNCST_gt_NS_DebugProgressCheatUsed);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_CampaignProgressCheatLoad, libNCST_gt_NS_DebugProgressLoad);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_CampaignProgressCheatSave, libNCST_gt_NS_DebugProgressSave);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_CampaignProgressCheatCancel, libNCST_gt_NS_DebugProgressCheatCancelled);
    libComC_gf_CC_EventRegister(libComC_ge_CC_Event_CC_EventArchivesSynced, libNCUI_gt_NU_ArchivesSynced);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_UIArchivesQuit, libNCST_gt_NS_EventUIArchive_Quit);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_UIArchivesPlayMission, libNCST_gt_NS_EventUIArchive_PlayMission);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_UIArchivesPlayScene, libNCST_gt_NS_EventUIArchive_PlayScene);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_UIMissionLaunch, libNCST_gt_NS_EventUIMission_Launch);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_UIMissionQuit, libNCST_gt_NS_EventUIMission_Quit);
    libNCST_gf_NS_ClickableDataInit();
    libNCST_gf_NS_ConversationDataInit();
    libNCST_gf_NS_RoomInit();
    libNovC_gf_NC_Initialize("NStory01");
    libNCST_gf_NS_LoadStoryData();
    libNovC_gf_NC_UpdateOptionalTechUnlocks();
    libNCST_gf_NS_ClickableDataUpdate();
    libNtve_gf_SetCinematicTransitionStyle(libNtve_ge_CinematicTransitionStyle_Story);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    libNCST_gf_NS_ApplyStorymodeEnvironment();
    libComC_gf_CC_AchievementAwardEarned();
    lv_nextMission = libNCST_gf_NextAvailableMission();
    if ((lv_nextMission == null)) {
        libNCST_gf_NS_SetCurrentLocation("NovaStoryPH", false);
    }
    else {
        libNCST_gf_NS_SetCurrentLocation(libComC_gf_CC_MissionLocation(lv_nextMission), false);
    }
    if ((libComC_gf_MissionStatus("Nova02") == libComC_ge_MissionStatus_Completed)) {
        UserDataSetInt("WriterStates", "HaveReigel", "Value", 1, 1);
    }

}

void libNCST_gf_NS_ApplyStorymodeEnvironment () {
    // Implementation
    GameTimeOfDaySet("08:00:00");
    GameTimeOfDayPause(true);
    VisRevealArea(1, RegionEntireMap(), 0.0, false);
    CameraLockInput(1, true);
    CameraUseHeightSmoothing(1, false);
}

void libNCST_gf_NS_LoadStoryData () {
    int auto792D16C3_ai;
    int auto792D16C3_ae;

    // Variable Declarations
    bank lv_storyBank;
    bank lv_statisticsBank;
    string lv__SectionName;
    string lv_indexClickable;
    int lv_index;
    string lv_indexAbility;
    string lv_indexCategory;
    bool lv_debugIsFirstStorymodeEpisode;

    // Variable Initialization
    lv__SectionName = "";
    lv_debugIsFirstStorymodeEpisode = true;

    // Implementation
    libNCST_gf_NS_TransitionalLoad();
    lv_storyBank = libComC_gf_CC_StoryBank();
    auto792D16C3_ai = 1;
    auto792D16C3_ae = UserDataInstanceCount("Clickable")+1;
    while (auto792D16C3_ai < auto792D16C3_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto792D16C3_ai);
        lv__SectionName = "ClickableType";
        if ((libNCST_gf_NS_ClickableType(lv_indexClickable) != libNCST_ge_ClickableType_RoomChange) && (libNCST_gf_NS_ClickableType(lv_indexClickable) != libNCST_ge_ClickableType_Custom)) {
            libNCST_gf_ClickableSetType(lv_indexClickable, libNCST_gf_NS_ClickableIntToType(BankValueGetAsInt(lv_storyBank, lv__SectionName, (lv_indexClickable))));
        }

        lv__SectionName = "CharacterNew";
        libNCST_gf_ClickableSetNew(lv_indexClickable, (BankValueGetAsInt(lv_storyBank, lv__SectionName, (lv_indexClickable)) == 1));
        auto792D16C3_ai = auto792D16C3_ai+1;
    }
    libNCST_gf_NS_LoadConversations(lv_storyBank, "StoryConversations");
    lv__SectionName = "Debug";
    if ((BankValueGetAsFlag(libComC_gf_CC_StoryBank(), lv__SectionName, "StartedFirstStorymodeEpisode") == true)) {
        lv_debugIsFirstStorymodeEpisode = false;
    }

    if ((((libNCST_gv_nS_IsTransitionalLoad == false) && (libComC_gf_LastMapConditionCheck(libComC_ge_MissionCondition_Simulation) == false) && (libComC_gf_LastMapConditionCheck(libComC_ge_MissionCondition_Sucessful) == true) && (libComC_gf_CampaignMapTypeCheck(libComC_gf_LastMap(), c_mapKindMission) == true)) || (lv_debugIsFirstStorymodeEpisode == true))) {
        libNCST_gf_NS_StartNewStorymodeEpisode();
    }

}

void libNCST_gf_NS_SaveStoryData () {
    int auto741B8B93_ai;
    int auto741B8B93_ae;

    // Variable Declarations
    bank lv_storyBank;
    string lv__SectionName;
    string lv_indexClickable;
    string lv_indexCategory;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lv_storyBank = libComC_gf_CC_StoryBank();
    auto741B8B93_ai = 1;
    auto741B8B93_ae = UserDataInstanceCount("Clickable")+1;
    while (auto741B8B93_ai < auto741B8B93_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto741B8B93_ai);
        lv__SectionName = "ClickableType";
        BankValueSetFromInt(lv_storyBank, lv__SectionName, (lv_indexClickable), UserDataGetInt("Clickable", lv_indexClickable, "Type", 1));
        lv__SectionName = "CharacterNew";
        BankValueSetFromInt(lv_storyBank, lv__SectionName, (lv_indexClickable), BoolToInt(libNCST_gf_NS_ClickableIsNew(lv_indexClickable)));
        auto741B8B93_ai = auto741B8B93_ai+1;
    }
    libNCST_gf_NS_SaveConversations(lv_storyBank, "StoryConversations");
    lv__SectionName = "Misc";
    BankSave(lv_storyBank);
}

void libNCST_gf_NS_SaveConversations (bank lp_bank, string lp_section) {
    int auto67314A6A_ai;
    int auto67314A6A_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    auto67314A6A_ai = 1;
    auto67314A6A_ae = UserDataInstanceCount("Clickable")+1;
    while (auto67314A6A_ai < auto67314A6A_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto67314A6A_ai);
        ConversationDataSaveNodeState(libNCST_gf_NS_ClickableConversation(lv_indexClickable), lp_bank, lp_section);
        ConversationDataSaveNodeState(libNCST_gf_NS_ClickableAmbientConversation(lv_indexClickable), lp_bank, lp_section);
        ConversationDataSaveNodeState(libNCST_gf_NS_ClickableGreetingConversation(lv_indexClickable), lp_bank, lp_section);
        auto67314A6A_ai = auto67314A6A_ai+1;
    }
}

void libNCST_gf_NS_LoadConversations (bank lp_bank, string lp_section) {
    int auto2104D7CD_ai;
    int auto2104D7CD_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    auto2104D7CD_ai = 1;
    auto2104D7CD_ae = UserDataInstanceCount("Clickable")+1;
    while (auto2104D7CD_ai < auto2104D7CD_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto2104D7CD_ai);
        ConversationDataLoadNodeState(libNCST_gf_NS_ClickableConversation(lv_indexClickable), lp_bank, lp_section);
        ConversationDataLoadNodeState(libNCST_gf_NS_ClickableAmbientConversation(lv_indexClickable), lp_bank, lp_section);
        ConversationDataLoadNodeState(libNCST_gf_NS_ClickableGreetingConversation(lv_indexClickable), lp_bank, lp_section);
        auto2104D7CD_ai = auto2104D7CD_ai+1;
    }
}

void libNCST_gf_NS_RestoreWriterStates () {
    int auto2637DB5C_ae;
    int auto2637DB5C_ai;

    // Variable Declarations
    int lv_stateIndex;
    string lv_indexState;
    int lv_newValue;

    // Variable Initialization

    // Implementation
    auto2637DB5C_ae = UserDataInstanceCount("WriterStates");
    auto2637DB5C_ai = 1;
    lv_stateIndex = 1;
    for ( ; ( (auto2637DB5C_ai >= 0 && lv_stateIndex <= auto2637DB5C_ae) || (auto2637DB5C_ai <= 0 && lv_stateIndex >= auto2637DB5C_ae) ) ; lv_stateIndex += auto2637DB5C_ai ) {
        lv_indexState = UserDataInstance("WriterStates", lv_stateIndex);
        if ((UserDataGetInt("StoryStates", lv_indexState, "Snapshot", 1) == 1)) {
            lv_newValue = UserDataGetInt("StoryStates", lv_indexState, "Value", 1);
            UserDataLoadInstance("WriterStates", lv_indexState, libComC_gf_CC_StoryBank(), ("WriterStateSnapshot"));
            if ((UserDataGetInt("WriterStates", lv_indexState, "Value", 1) == lv_newValue)) {
                UserDataLoadInstance("WriterStates", lv_indexState, libNCST_gf_NS_TempConversationBank(), ("WriterStates"));
            }
            else {
                UserDataSetInt("StoryStates", lv_indexState, "Value", 1, lv_newValue);
            }
        }

    }
}

void libNCST_gf_NS_BackupSnapshotStates () {
    int auto36AC1F96_ae;
    int auto36AC1F96_ai;

    // Variable Declarations
    int lv_stateIndex;
    string lv_indexState;

    // Variable Initialization

    // Implementation
    auto36AC1F96_ae = UserDataInstanceCount("StoryStates");
    auto36AC1F96_ai = 1;
    lv_stateIndex = 1;
    for ( ; ( (auto36AC1F96_ai >= 0 && lv_stateIndex <= auto36AC1F96_ae) || (auto36AC1F96_ai <= 0 && lv_stateIndex >= auto36AC1F96_ae) ) ; lv_stateIndex += auto36AC1F96_ai ) {
        lv_indexState = UserDataInstance("StoryStates", lv_stateIndex);
        if ((UserDataGetInt("StoryStates", lv_indexState, "Snapshot", 1) == 1)) {
            UserDataSaveInstance("StoryStates", lv_indexState, libNCST_gf_NS_TempConversationBank(), ("WriterStates"));
        }

    }
}

void libNCST_gf_NS_SaveSnapshotStates () {
    int auto6F9608EF_ae;
    int auto6F9608EF_ai;

    // Variable Declarations
    int lv_stateIndex;
    string lv_indexState;

    // Variable Initialization

    // Implementation
    auto6F9608EF_ae = UserDataInstanceCount("StoryStates");
    auto6F9608EF_ai = 1;
    lv_stateIndex = 1;
    for ( ; ( (auto6F9608EF_ai >= 0 && lv_stateIndex <= auto6F9608EF_ae) || (auto6F9608EF_ai <= 0 && lv_stateIndex >= auto6F9608EF_ae) ) ; lv_stateIndex += auto6F9608EF_ai ) {
        lv_indexState = UserDataInstance("StoryStates", lv_stateIndex);
        if ((UserDataGetInt("StoryStates", lv_indexState, "Snapshot", 1) == 1)) {
            UserDataSaveInstance("StoryStates", lv_indexState, libComC_gf_CC_StoryBank(), ("WriterStateSnapshot"));
        }

    }
}

void libNCST_gf_NS_LoadSnapshotStates () {
    int auto39AB0444_ae;
    int auto39AB0444_ai;

    // Variable Declarations
    int lv_stateIndex;
    string lv_indexState;

    // Variable Initialization

    // Implementation
    auto39AB0444_ae = UserDataInstanceCount("StoryStates");
    auto39AB0444_ai = 1;
    lv_stateIndex = 1;
    for ( ; ( (auto39AB0444_ai >= 0 && lv_stateIndex <= auto39AB0444_ae) || (auto39AB0444_ai <= 0 && lv_stateIndex >= auto39AB0444_ae) ) ; lv_stateIndex += auto39AB0444_ai ) {
        lv_indexState = UserDataInstance("StoryStates", lv_stateIndex);
        if ((UserDataGetInt("StoryStates", lv_indexState, "Snapshot", 1) == 1)) {
            UserDataLoadInstance("StoryStates", lv_indexState, libComC_gf_CC_StoryBank(), ("WriterStateSnapshot"));
        }

    }
}

bank libNCST_gf_NS_TempConversationBank () {
    // Variable Declarations
    const string lv_tempConvoBankName = "PSTempConvoBank";

    // Variable Initialization

    // Implementation
    if ((libNCST_gv_nS_TempConvoBank == null)) {
        BankLoad(lv_tempConvoBankName, 1);
        libNCST_gv_nS_TempConvoBank = BankLastCreated();
    }

    return libNCST_gv_nS_TempConvoBank;
}

void libNCST_gf_NS_StartNewStorymodeEpisode () {
    int autoCF818BE1_ai;
    int autoCF818BE1_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    autoCF818BE1_ai = 1;
    autoCF818BE1_ae = UserDataInstanceCount("Clickable")+1;
    while (autoCF818BE1_ai < autoCF818BE1_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoCF818BE1_ai);
        if (((libNCST_gf_NS_ClickableType(lv_indexClickable) == libNCST_ge_ClickableType_Ambient) || (libNCST_gf_NS_ClickableType(lv_indexClickable) == libNCST_ge_ClickableType_Conversation))) {
            if ((ConversationDataCanRun(libNCST_gf_NS_ClickableConversation(lv_indexClickable), true) == true)) {
                libNCST_gf_ClickableSetType(lv_indexClickable, libNCST_ge_ClickableType_Conversation);
                libNCST_gf_ClickableSetNew(lv_indexClickable, true);
            }
            else {
                libNCST_gf_ClickableSetType(lv_indexClickable, libNCST_ge_ClickableType_Ambient);
                libNCST_gf_ClickableSetNew(lv_indexClickable, false);
            }
        }

        autoCF818BE1_ai = autoCF818BE1_ai+1;
    }
    libNCST_gf_NS_SaveConversations(libComC_gf_CC_StoryBank(), "ConversationSnapshot");
    libNovC_gf_NC_DebugProgressSetFirstStorymodeEpisode(true);
}

void libNCST_gf_NS_SaveForExit () {
    // Variable Declarations
    string lv_transitionMap;
    string lv_image;

    // Variable Initialization
    lv_transitionMap = "";

    // Implementation
    libNCST_gv_nS_IsLeavingMap = true;
    if ((libComC_gf_CampaignIsComplete() == true)) {
        libComC_gf_CC_CompletedSavesEnable();
    }

    libComC_gf_CC_TransitionPrepareSaveOnly();
    libNCST_gf_NS_SaveStoryData();
    libNCST_gf_NS_TransitionalSave();
    lv_transitionMap = ("Campaign/Nova/" + libComC_gf_CC_MapFile("NStory01"));
    GameSetTransitionMap(lv_transitionMap);
    lv_image = libComC_gf_CC_MapLoadingScreenVictoryImage(libComC_gf_CurrentMap());
    TextExpressionSetToken("Param/Expression/lib_NCST_9B920DB7", "A", libComC_gf_CC_LocationName(libComC_gf_CurrentLocation()));
    GameSaveCreate(TextExpressionAssemble("Param/Expression/lib_NCST_9B920DB7"), StringToText(""), lv_image, true);
    Wait(0.1, c_timeGame);
}

void libNCST_gf_NS_TransitionalSave () {
    // Variable Declarations
    string lv__SectionName;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    BankLoad(libNCST_gv_nS_TransitionBankName, 1);
    libNCST_gv_nS_TransitionBank = BankLastCreated();
    lv__SectionName = "StorySet";
    BankValueSetFromInt(BankLastCreated(), lv__SectionName, "CurrentRoom", (libNCST_gv_nS_CurrentRoom));
}

void libNCST_gf_NS_TransitionalLoad () {
    // Variable Declarations
    string lv__SectionName;

    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    if ((BankExists(libNCST_gv_nS_TransitionBankName, 1) == false)) {
        return ;
    }

    libNCST_gv_nS_IsTransitionalLoad = true;
    BankLoad(libNCST_gv_nS_TransitionBankName, 1);
    lv__SectionName = "StorySet";
    libNCST_gv_nS_CurrentRoom = (BankValueGetAsInt(BankLastCreated(), lv__SectionName, "CurrentRoom"));
    if ((libNCST_gv_nS_CurrentRoom != libNCST_ge_Rooms_StoryRoomMissionScreen)) {
        libNCST_gv_nS_CurrentRoom = libNCST_ge_Rooms_StoryRoomMissionScreen;
    }

}

void libNCST_gf_StoryPlayMainSetSound (soundlink lp_soundLink, int lp_index) {
    // Implementation
    if ((libNCST_gv_nS_MainSetSounds[lp_index] != null)) {
        return ;
    }

    SoundPlay(lp_soundLink, PlayerGroupAll(), 100.0, 0.0);
    libNCST_gv_nS_MainSetSounds[lp_index] = SoundLastPlayed();
}

void libNCST_gf_SetAllSoundChannelVolumesStory (int lp_mode, fixed lp_duration) {
    int autoB3B25D2F_val;

    // Implementation
    libNCST_gv_nS_CurrentSoundMode = lp_mode;
    libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), lp_duration);
    autoB3B25D2F_val = lp_mode;
    if (autoB3B25D2F_val == libNtve_ge_VolumeChannelMode_Game) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, lp_duration);
    }
    else if (autoB3B25D2F_val == libNtve_ge_VolumeChannelMode_Cinematic) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 50.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, lp_duration);
    }
    else {
    }
}

void libNCST_gf_NS_SoundMainSetStop () {
    int auto253CD6C5_ae;
    int auto253CD6C5_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    auto253CD6C5_ae = 2;
    auto253CD6C5_ai = 1;
    lv_index = 1;
    for ( ; ( (auto253CD6C5_ai >= 0 && lv_index <= auto253CD6C5_ae) || (auto253CD6C5_ai <= 0 && lv_index >= auto253CD6C5_ae) ) ; lv_index += auto253CD6C5_ai ) {
        SoundStop(libNCST_gv_nS_MainSetSounds[lv_index], true);
        libNCST_gv_nS_MainSetSounds[lv_index] = null;
    }
}

void libNCST_gf_NS_SoundFadeAll (fixed lp_duration, bool lp_wait) {
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

void libNCST_gf_NS_SoundFadeAllExceptMusic (fixed lp_duration, bool lp_wait) {
    // Implementation
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    if ((lp_wait == true)) {
        Wait(lp_duration, c_timeReal);
    }

}

void libNCST_gf_ShowHideStoryUnits (bool lp_showHide) {
    unitgroup auto4254474A_g;
    int auto4254474A_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    libNCST_gv_nS_StoryUnitsVisible = lp_showHide;
    auto4254474A_g = libNCST_gv_nS_VisibleUnits;
    auto4254474A_u = 1;
    for ( ; auto4254474A_u <= UnitGroupCount(auto4254474A_g, c_unitCountAll) ; auto4254474A_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto4254474A_g, auto4254474A_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto4254474A_g, auto4254474A_u);
        if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true) && (libNCST_gf_NS_RoomHasUnit(libNCST_gf_CurrentRoom(), lv_indexUnit) == true) && (lp_showHide == true)) {
            libNtve_gf_ShowHideUnit(lv_indexUnit, lp_showHide);
        }

        if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == false) && (lp_showHide == false)) {
            libNtve_gf_ShowHideUnit(lv_indexUnit, lp_showHide);
        }

    }
}

void libNCST_gf_ShowHideUnitAbs (bool lp_showHide, unit lp_unit) {
    // Implementation
    if ((lp_showHide == true)) {
        if ((UnitGroupHasUnit(libNCST_gv_nS_VisibleUnits, lp_unit) == false)) {
            UnitGroupAdd(libNCST_gv_nS_VisibleUnits, lp_unit);
        }

    }
    else {
        UnitGroupRemove(libNCST_gv_nS_VisibleUnits, lp_unit);
    }
    if ((lp_showHide == false) && (libNtve_gf_UnitIsHidden(lp_unit) == true)) {
        return ;
    }

    if ((lp_showHide == true) && ((libNtve_gf_UnitIsHidden(lp_unit) == false) || (libNCST_gv_nS_StoryUnitsVisible == false) || (libNCST_gf_NS_RoomHasUnit(libNCST_gf_CurrentRoom(), lp_unit) == false))) {
        return ;
    }

    libNtve_gf_ShowHideUnit(lp_unit, lp_showHide);
}

void libNCST_gf_StorySetUnitLocation (unit lp_unit, point lp_point) {
    // Implementation
    if ((lp_unit == null)) {
        return ;
    }

    UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetState(lp_unit, c_unitStateMoveSuppressed, false);
    libComC_gf_ClearAnimationwithblendtime(c_animNameDefault, lp_unit, 0.0);
    UnitSetPosition(lp_unit, lp_point, false);
    UnitSetHeight(lp_unit, PointGetHeight(lp_point), 0.0);
    UnitSetFacing(lp_unit, PointGetFacing(lp_point), 0.0);
    UnitSetState(lp_unit, c_unitStateMoveSuppressed, true);
}

void libNCST_gf_StoryCreateUnit (string lp_unitType, point lp_location, fixed lp_facing) {
    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, 0, lp_location, lp_facing);
    if ((PointGetHeight(lp_location) != 0.0)) {
        UnitSetHeight(UnitLastCreated(), PointGetHeight(lp_location), 0.0);
    }

    UnitUnloadModel(UnitLastCreated());
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
}

void libNCST_gf_StoryAddAliasedUnit (unit lp_unit, string lp_alias) {
    // Implementation
    libNCST_gv_nS_AliasedUnitCount += 1;
    libNCST_gv_nS_Aliases[libNCST_gv_nS_AliasedUnitCount] = lp_alias;
    libNCST_gv_nS_AliasedUnits[libNCST_gv_nS_AliasedUnitCount] = lp_unit;
}

void libNCST_gf_StoryReplaceAliasedUnit (unit lp_oldUnit, unit lp_newUnit) {
    int auto889F019C_ae;
    int auto889F019C_ai;

    // Variable Declarations
    int lv_indexUnit;

    // Variable Initialization

    // Implementation
    auto889F019C_ae = libNCST_gv_nS_AliasedUnitCount;
    auto889F019C_ai = 1;
    lv_indexUnit = 1;
    for ( ; ( (auto889F019C_ai >= 0 && lv_indexUnit <= auto889F019C_ae) || (auto889F019C_ai <= 0 && lv_indexUnit >= auto889F019C_ae) ) ; lv_indexUnit += auto889F019C_ai ) {
        if ((libNCST_gv_nS_AliasedUnits[lv_indexUnit] == lp_oldUnit)) {
            libNCST_gv_nS_AliasedUnits[lv_indexUnit] = lp_newUnit;
            return ;
        }

    }
}

void libNCST_gf_NS_ApplyAliases () {
    int auto3955D31C_ae;
    int auto3955D31C_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    auto3955D31C_ae = libNCST_gv_nS_AliasedUnitCount;
    auto3955D31C_ai = 1;
    lv_index = 1;
    for ( ; ( (auto3955D31C_ai >= 0 && lv_index <= auto3955D31C_ae) || (auto3955D31C_ai <= 0 && lv_index >= auto3955D31C_ae) ) ; lv_index += auto3955D31C_ai ) {
        libNtve_gf_SendActorMessageToUnit(libNCST_gv_nS_AliasedUnits[lv_index], "ExternalFinderAdd");
        libNtve_gf_SendActorMessageToUnit(libNCST_gv_nS_AliasedUnits[lv_index], (("AliasAdd " + libNCST_gv_nS_Aliases[lv_index])));
    }
}

int libNCST_gf_NS_TravelAvailableCount () {
    int autoEFAAD9DE_ae;
    int autoEFAAD9DE_ai;

    // Variable Declarations
    string lv_indexLocation;
    int lv_numLocations;

    // Variable Initialization

    // Implementation
    autoEFAAD9DE_ae = CatalogEntryCount(c_gameCatalogLocation);
    autoEFAAD9DE_ai = 1;
    while (autoEFAAD9DE_ai <= autoEFAAD9DE_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, autoEFAAD9DE_ai);
        if ((libComC_gf_StoryPlanetIsAvailable(lv_indexLocation) == true)) {
            lv_numLocations += 1;
        }

        autoEFAAD9DE_ai = autoEFAAD9DE_ai + 1;
    }
    return lv_numLocations;
}

string libNCST_gf_NextAvailableMission () {
    int auto38C52000_ae;
    int auto38C52000_ai;

    // Variable Declarations
    string lv_indexMission;

    // Variable Initialization

    // Implementation
    auto38C52000_ae = CatalogEntryCount(c_gameCatalogMap);
    auto38C52000_ai = 1;
    while (auto38C52000_ai <= auto38C52000_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto38C52000_ai);
        auto38C52000_ai = auto38C52000_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Available) == true)) {
                return lv_indexMission;
            }

        }    
    }
    return null;
}

string libNCST_gf_NS_SetLightingCutsceneFile () {
    // Implementation
    return null;
}

void libNCST_gf_NS_LightSetStopAll () {
    // Implementation
    libNCST_gf_NS_LightSetPrimaryStop();
    libNCST_gf_NS_HideAllClickableLights();
}

void libNCST_gf_NS_LightSetPrimaryPlay () {
    // Implementation
    if ((libNCST_gf_NS_SetLightingCutsceneFile() == null)) {
        return ;
    }

    if ((libNCST_gv_nS_StorySetLightingCutscene == c_cutsceneNone)) {
        CutsceneCreateNew(libNCST_gf_NS_SetLightingCutsceneFile(), libNCST_gv_nS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
        libNCST_gv_nS_StorySetLightingCutscene = CutsceneLastCreated();
        CutsceneGoToBookmark(libNCST_gv_nS_StorySetLightingCutscene, "World Light Start");
        CutscenePause(libNCST_gv_nS_StorySetLightingCutscene);
    }

    CutsceneShow(libNCST_gv_nS_StorySetLightingCutscene, true);
}

void libNCST_gf_NS_LightSetPrimaryStop () {
    // Implementation
    if ((libNCST_gf_NS_SetLightingCutsceneFile() == null)) {
        return ;
    }

    if ((libNCST_gv_nS_StorySetLightingCutscene == c_cutsceneNone)) {
        CutsceneCreateNew(libNCST_gf_NS_SetLightingCutsceneFile(), libNCST_gv_nS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
        libNCST_gv_nS_StorySetLightingCutscene = CutsceneLastCreated();
        CutscenePause(libNCST_gv_nS_StorySetLightingCutscene);
    }

    CutsceneShow(libNCST_gv_nS_StorySetLightingCutscene, false);
}

void libNCST_gf_NS_TipsInit () {
}

void libNCST_gf_NS_TipAddIf (string lp_tip, bool lp_condition) {
    // Implementation
    if ((lp_condition == false)) {
        return ;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(UserDataGetText("CampaignTips", lp_tip, "Name", 1), libNtve_ge_TipType_NormalTip), UserDataGetText("CampaignTips", lp_tip, "Description", 1), UserDataGetText("CampaignTips", lp_tip, "Name", 1), UserDataGetImagePath("CampaignTips", lp_tip, "Icon", 1));
    HelpPanelSetHelpItemDarkenedWhenViewed(HelpPanelLastCreatedHelpItem(), false);
}

void libNCST_gf_NS_SetCurrentLocation (string lp_newLocation, bool lp_newEpisode) {
    int auto2D3FC782_ae;
    int auto2D3FC782_ai;

    // Variable Declarations
    int lv_episodeNumber;
    string lv_indexMission;
    string lv_indexLocation;

    // Variable Initialization

    // Implementation
    auto2D3FC782_ae = CatalogEntryCount(c_gameCatalogLocation);
    auto2D3FC782_ai = 1;
    while (auto2D3FC782_ai <= auto2D3FC782_ae) {
        lv_indexLocation = CatalogEntryGet(c_gameCatalogLocation, auto2D3FC782_ai);
        if ((libNovC_gf_NC_LocationCutsceneFilter(lv_indexLocation) != null)) {
            CutsceneRemoveGlobalFilter(libNovC_gf_NC_LocationCutsceneFilter(lv_indexLocation));
        }

        auto2D3FC782_ai = auto2D3FC782_ai + 1;
    }
    if ((libNovC_gf_NC_LocationCutsceneFilter(lp_newLocation) != null)) {
        CutsceneAddGlobalFilter(libNovC_gf_NC_LocationCutsceneFilter(lp_newLocation));
    }

    libComC_gf_CC_LocationActivate(lp_newLocation);
    libNCST_gf_NS_UpdateEpisodeFilter();
    libComC_gf_CC_LocationDataUpdate();
    libNCST_gf_NS_ResetAllBackgrounds();
    if ((lp_newEpisode == true)) {
        libNCST_gf_NS_StartNewStorymodeEpisode();
    }

}

void libNCST_gf_NS_UpdateEpisodeFilter () {
    // Variable Declarations
    int lv_episodeNumber;
    string lv_indexMission;

    // Variable Initialization

    // Implementation
}

void libNCST_gf_ToggleInteractives (bool lp_onOff) {
    int autoE6572FC6_ai;
    int autoE6572FC6_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    libNCST_gv_nS_InteractionOn = (lp_onOff == true);
    autoE6572FC6_ai = 1;
    autoE6572FC6_ae = UserDataInstanceCount("Clickable")+1;
    while (autoE6572FC6_ai < autoE6572FC6_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoE6572FC6_ai);
        UnitSetState(libNCST_gf_ClickableUnit(lv_indexClickable), c_unitStateHighlightable, lp_onOff);
        libNCST_gf_NS_ClickableDisplayUpdate(lv_indexClickable);
        if ((lp_onOff == false)) {
            libNCST_gf_NS_ClickableCalloutShowHide(false, lv_indexClickable);
        }

        autoE6572FC6_ai = autoE6572FC6_ai+1;
    }
}

void libNCST_gf_StoryCinematicMode (bool lp_onOff) {
    // Implementation
    libNtve_gf_CinematicMode(lp_onOff, PlayerGroupAll(), c_transitionDurationImmediate);
    libNCST_gf_SetAllSoundChannelVolumesStory(libNCST_gv_nS_CurrentSoundMode, 1.0);
}

void libNCST_gf_TurnAnimationPropertiesOnOff (unit lp_unit, string lp_property, bool lp_onOff, fixed lp_blend) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimBlendTimeApply(lp_blend));
    if ((lp_onOff == true)) {
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    else {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(lp_unit), lp_property);
    }
    libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimBlendTimeRemove");
}

void libNCST_gf_FadeStoryUITransparency (fixed lp_transparency, fixed lp_time) {
    int autoCAC6B2F3_ai;
    int autoCAC6B2F3_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    autoCAC6B2F3_ai = 1;
    autoCAC6B2F3_ae = UserDataInstanceCount("Clickable")+1;
    while (autoCAC6B2F3_ai < autoCAC6B2F3_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoCAC6B2F3_ai);
        if ((libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lv_indexClickable)].lv_callout != c_invalidDialogControlId)) {
            DialogControlFadeTransparency(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lv_indexClickable)].lv_callout, PlayerGroupAll(), lp_time, lp_transparency);
        }

        autoCAC6B2F3_ai = autoCAC6B2F3_ai+1;
    }
}

void libNCST_gf_StoryCutsceneFade (bool lp_fadeInOut, fixed lp_duration, bool lp_waitDontWait) {
    // Implementation
    if ((lp_fadeInOut == true) && (lp_duration > 0.0)) {
        libNCST_gv_nS_StoryFadeDuration = lp_duration;
        TriggerExecute(libNCST_gt_NS_StoryPerformFadeIn, true, lp_waitDontWait);
    }
    else {
        CutsceneFade(lp_fadeInOut, lp_duration, Color(0,0,0), 100.0, PlayerGroupAll(), lp_waitDontWait);
    }
}

point libNCST_gf_StoryModeDefaultPosition () {
    // Implementation
    return libNCST_gv_nS_ConversationCutscenePosition;
}

void libNCST_gf_StoryCreateUnitForCutsceneAliasing (string lp_unitType, string lp_alias) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, 1, libNCST_gf_StoryModeDefaultPosition());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AliasAdd " + lp_alias);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ExternalFinderAdd");
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
}

void libNCST_gf_StoryCreateUnitForCutsceneAliasingForPlayer (string lp_unitType, string lp_alias, int lp_player) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_player, libNCST_gf_StoryModeDefaultPosition());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AliasAdd " + lp_alias);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ExternalFinderAdd");
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
}

void libNCST_gf_ShowHideStoryUI (bool lp_hideShow) {
    // Implementation
    libNCST_gv_nS_UIVisible = (lp_hideShow == true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, lp_hideShow);
    if ((lp_hideShow == false)) {
        libNCST_gf_ToggleInteractives(false);
    }
    else {
        libNCST_gf_ToggleInteractives(true);
    }
}

void libNCST_gf_NS_TurnAllFidgetsOnOff (bool lp_onOff) {
    int auto16BDDF3B_ai;
    int auto16BDDF3B_ae;

    // Variable Declarations
    string lv_indexClickable;
    bool lv_sendSignals;

    // Variable Initialization

    // Implementation
    PlayerSetState(1, c_playerStateFidgetingEnabled, false);
    if ((lp_onOff == false) && (libNCST_gv_nS_FidgetsOn == true)) {
        lv_sendSignals = true;
        libNCST_gv_nS_FidgetsOn = false;
    }
    else if ((lp_onOff == true) && (libNCST_gv_nS_FidgetsOn == false)) {
        lv_sendSignals = true;
        libNCST_gv_nS_FidgetsOn = true;
    }
    else if (true) {
        lv_sendSignals = false;
    }
    auto16BDDF3B_ai = 1;
    auto16BDDF3B_ae = UserDataInstanceCount("Clickable")+1;
    while (auto16BDDF3B_ai < auto16BDDF3B_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto16BDDF3B_ai);
        if ((lp_onOff == false)) {
            if ((lv_sendSignals == true)) {
                libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lv_indexClickable), "Signal FidgetOff");
            }

            libComC_gf_ClearAnimationwithblendtime("Fidget", libNCST_gf_ClickableUnit(lv_indexClickable), 0.0);
        }
        else {
            if ((lv_sendSignals == true)) {
                libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lv_indexClickable), "Signal FidgetOn");
            }

        }
        if ((UserDataGetInt("Clickable", lv_indexClickable, "AlternateAnimationsEnabled", 1) >= 1)) {
            if ((lp_onOff == false)) {
                if ((lv_sendSignals == true)) {
                    libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lv_indexClickable), "Signal AlternateOff");
                }

                libComC_gf_ClearAnimationwithblendtime("Alternate", libNCST_gf_ClickableUnit(lv_indexClickable), 0.0);
            }
            else {
                if ((lv_sendSignals == true)) {
                    libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lv_indexClickable), "Signal AlternateOn");
                }

            }
        }

        auto16BDDF3B_ai = auto16BDDF3B_ai+1;
    }
}

void libNCST_gf_NS_TurnAllFidgetStatusOnOff (bool lp_onOff) {
    int auto729B8CDE_ai;
    int auto729B8CDE_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    auto729B8CDE_ai = 1;
    auto729B8CDE_ae = UserDataInstanceCount("Clickable")+1;
    while (auto729B8CDE_ai < auto729B8CDE_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto729B8CDE_ai);
        libNCST_gf_TurnFidgetStatusForClickableOnOff(lv_indexClickable, lp_onOff);
        auto729B8CDE_ai = auto729B8CDE_ai+1;
    }
}

void libNCST_gf_NS_TurnAllAlternateStatusOnOff (bool lp_onOff) {
    int auto5ABD5FF9_ai;
    int auto5ABD5FF9_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    auto5ABD5FF9_ai = 1;
    auto5ABD5FF9_ae = UserDataInstanceCount("Clickable")+1;
    while (auto5ABD5FF9_ai < auto5ABD5FF9_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto5ABD5FF9_ai);
        libNCST_gf_TurnAlternateStatusForClickableOnOff(lv_indexClickable, lp_onOff);
        auto5ABD5FF9_ai = auto5ABD5FF9_ai+1;
    }
}

void libNCST_gf_NS_ApplyAllFidgets () {
    int auto9136A3AF_ai;
    int auto9136A3AF_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    auto9136A3AF_ai = 1;
    auto9136A3AF_ae = UserDataInstanceCount("Clickable")+1;
    while (auto9136A3AF_ai < auto9136A3AF_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto9136A3AF_ai);
        libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lv_indexClickable), "Signal FidgetOn");
        if ((UserDataGetInt("Clickable", lv_indexClickable, "AlternateAnimationsEnabled", 1) >= 1)) {
            libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lv_indexClickable), "Signal AlternateOn");
        }

        auto9136A3AF_ai = auto9136A3AF_ai+1;
    }
}

void libNCST_gf_NS_StopStoryActivitiy (int lp_activity) {
    int auto47B069B5_val;

    // Implementation
    auto47B069B5_val = lp_activity;
    if (auto47B069B5_val == libNCST_ge_StoryActivities_Conversation) {
        libNCST_gf_NS_StopActivityConversation();
    }
    else if (auto47B069B5_val == libNCST_ge_StoryActivities_ViewingRoom) {
        libNCST_gf_NS_StopActivityViewRoom();
    }
    else if (auto47B069B5_val == libNCST_ge_StoryActivities_ScriptedScene) {
        libNCST_gf_NS_StopActivityScriptedScene();
    }
    else if (auto47B069B5_val == libNCST_ge_StoryActivities_Cinematic) {
        libNCST_gf_NS_StopActivityCinematic();
    }
    else {
    }
}

void libNCST_gf_RegisterRoom (int lp_room, trigger lp_prepareCallback, trigger lp_viewCallback, trigger lp_viewStopCallback, string lp_conversationScene, string lp_uIScene) {
    // Implementation
    libNCST_gv_nS_RoomPrepareCallbacks[(lp_room)] = lp_prepareCallback;
    libNCST_gv_nS_RoomViewCallbacks[(lp_room)] = lp_viewCallback;
    libNCST_gv_nS_RoomViewStopCallbacks[(lp_room)] = lp_viewStopCallback;
    libNCST_gv_nS_RoomConvoSceneFiles[(lp_room)] = lp_conversationScene;
    libNCST_gv_nS_RoomUISceneFiles[(lp_room)] = lp_uIScene;
}

void libNCST_gf_AddRemoveUnitForRoom (bool lp_addRemove, unit lp_unit, int lp_room) {
    // Implementation
    if ((UnitGroupHasUnit(libNCST_gv_nS_RoomUnits[(lp_room)], lp_unit) == (lp_addRemove == true))) {
        return ;
    }

    if ((lp_addRemove == true)) {
        UnitGroupAdd(libNCST_gv_nS_RoomUnits[(lp_room)], lp_unit);
        if ((libNCST_gf_CurrentRoom() == lp_room)) {
            UnitLoadModel(lp_unit);
            libNCST_gf_NS_ApplyAliases();
            libNCST_gf_NS_ApplyAllFidgets();
        }

    }
    else {
        UnitGroupRemove(libNCST_gv_nS_RoomUnits[(lp_room)], lp_unit);
        if ((libNCST_gf_CurrentRoom() == lp_room)) {
            UnitUnloadModel(lp_unit);
        }

    }
    libNCST_gf_NS_RoomUpdateUnitVisibility();
    libNCST_gf_NS_RoomUpdateClickablesIsVisibleOnSet();
}

void libNCST_gf_StartStoryActivity (int lp_activity) {
    int auto17F960D6_val;

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_NCST_D4672859", "A", IntToText((lp_activity)));
    TextExpressionSetToken("Param/Expression/lib_NCST_D4672859", "B", IntToText((libNCST_gv_nS_CurrentStoryActivity)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_NCST_D4672859"), false);
    libNCST_gf_NS_StopStoryActivitiy(libNCST_gv_nS_CurrentStoryActivity);
    if ((libNCST_gv_nS_CurrentStoryActivity != libNCST_ge_StoryActivities_None)) {
        libNCST_gv_nS_LastStoryActivity = libNCST_gv_nS_CurrentStoryActivity;
    }

    libNCST_gv_nS_CurrentStoryActivity = lp_activity;
    auto17F960D6_val = lp_activity;
    if (auto17F960D6_val == libNCST_ge_StoryActivities_Conversation) {
        libNCST_gf_NS_StartActivityConversation();
    }
    else if (auto17F960D6_val == libNCST_ge_StoryActivities_ViewingRoom) {
        libNCST_gf_NS_StartActivityViewRoom();
    }
    else if (auto17F960D6_val == libNCST_ge_StoryActivities_ScriptedScene) {
        libNCST_gf_NS_StartActivityScriptedScene();
    }
    else if (auto17F960D6_val == libNCST_ge_StoryActivities_Cinematic) {
        libNCST_gf_NS_StartActivityCinematic();
    }
    else {
    }
}

int libNCST_gf_CurrentStoryActivity () {
    // Implementation
    return libNCST_gv_nS_CurrentStoryActivity;
}

void libNCST_gf_NS_StartActivityConversation () {
    int auto55442E7E_ai;
    int auto55442E7E_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    TriggerQueuePause(true);
    libNCST_gf_ToggleInteractives(false);
    ConversationDataStop();
    TransmissionClearAll();
    libNCST_gf_NS_TurnAllFidgetsOnOff(false);
    auto55442E7E_ai = 1;
    auto55442E7E_ae = UserDataInstanceCount("Clickable")+1;
    while (auto55442E7E_ai < auto55442E7E_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto55442E7E_ai);
        libComC_gf_ClearAnimationwithblendtime("::Conversation", libNCST_gf_ClickableUnit(lv_indexClickable), 0.0);
        auto55442E7E_ai = auto55442E7E_ai+1;
    }
    libNCST_gf_ShowHideStoryUnits(true);
    libNCST_gf_ShowHideAmbientScenesInRoom(false, libNCST_gv_nS_CurrentRoom);
    libNCST_gf_NS_AmbientSetIsInConvoState(true);
    libNCST_gf_NS_AmbientSceneShowForConvo();
    libNCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Cinematic, 0.5);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    DialogClearSubtitlePositionOverrideControl();
}

void libNCST_gf_NS_StopActivityConversation () {
    // Implementation
    libNCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 1.5);
    SoundSetReverb("Off", 1.0, true, true);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    libNCST_gf_NS_AmbientSetIsInConvoState(false);
}

void libNCST_gf_NS_StartActivityScriptedScene () {
    // Implementation
    TriggerQueuePause(true);
    libNCST_gf_ToggleInteractives(false);
    ConversationDataStop();
    TransmissionClearAll();
    libNCST_gf_ShowHideStoryUI(false);
    libNCST_gf_StoryCinematicMode(true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    libNCST_gf_ShowHideAmbientScenesInRoom(false, libNCST_gv_nS_CurrentRoom);
    libNCST_gf_NS_TurnAllFidgetsOnOff(false);
    libNCST_gf_ShowHideStoryUnits(true);
    UISetWorldVisible(PlayerGroupAll(), true);
    libNCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Cinematic, 0.5);
    DialogClearSubtitlePositionOverride();
    DialogClearSubtitlePositionOverrideControl();
}

void libNCST_gf_NS_StopActivityScriptedScene () {
    // Implementation
    SoundSetReverb("Off", 1.0, true, true);
    libNCST_gf_StoryCinematicMode(false);
    libNCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 1.5);
}

void libNCST_gf_NS_StartActivityCinematic () {
    // Implementation
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    ConversationDataStop();
    TransmissionClearAll();
    libNCST_gf_ShowHideStoryUI(false);
    libNCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Cinematic, 0.5);
    DialogClearSubtitlePositionOverride();
    DialogClearSubtitlePositionOverrideControl();
}

void libNCST_gf_NS_StopActivityCinematic () {
    // Implementation
    libNCST_gf_SetAllSoundChannelVolumesStory(libNtve_ge_VolumeChannelMode_Game, 0.5);
}

void libNCST_gf_NS_StartActivityViewRoom () {
    // Implementation
    GameCheatAllow(c_gameCheatProgress, false);
    GameCheatAllow(c_gameCheatScene, false);
    GameCheatAllow(c_gameCheatCredits, false);
    GameCheatAllow(c_gameCheatResearch, false);
    libNCST_gf_NS_TurnAllFidgetsOnOff(true);
    libNCST_gv_nS_ActivityViewRoomTarget = libNCST_gv_nS_CurrentRoom;
    TriggerExecute(libNCST_gv_nS_RoomViewCallbacks[(libNCST_gv_nS_CurrentRoom)], true, true);
    CutsceneStop(libNCST_gv_nS_RoomUICutscene);
    libNCST_gf_ShowHideAmbientScenesInRoom(true, libNCST_gv_nS_CurrentRoom);
    libNCST_gf_DisplayBackground(libNCST_gv_nS_CurrentRoom);
    if ((libNCST_gv_nS_RoomUISceneFiles[(libNCST_gf_CurrentRoom())] != null)) {
        CutsceneCreateNew(libNCST_gv_nS_RoomUISceneFiles[(libNCST_gf_CurrentRoom())], libNCST_gf_StoryModeDefaultPosition(), 0.0, PlayerGroupAll(), true);
        CutsceneGoToBookmark(CutsceneLastCreated(), "StartLoop");
        libNCST_gv_nS_RoomUICutscene = CutsceneLastCreated();
    }

    libNCST_gf_NS_RoomApplySceneFilters();
    libNCST_gf_NS_ClickableDisplayUpdateAll();
}

void libNCST_gf_NS_StopActivityViewRoom () {
    // Implementation
    TriggerExecute(libNCST_gv_nS_RoomViewStopCallbacks[(libNCST_gv_nS_ActivityViewRoomTarget)], true, true);
    CutsceneStop(libNCST_gv_nS_RoomUICutscene);
}

void libNCST_gf_EnterRoom (int lp_room) {
    // Implementation
    if ((lp_room != libNCST_gf_CurrentRoom())) {
        TransmissionClearAll();
        ConversationDataStop();
    }

    if ((lp_room != libNCST_gv_NS_NextRoom)) {
        libNCST_gv_NS_NextRoom = lp_room;
    }

    libNCST_gf_NS_PreloadRoomConversations(lp_room);
    TriggerExecute(libNCST_gv_NS_MovingToRoomCallback, true, true);
    libNCST_gf_ChangeRoom(lp_room);
    libNCST_gf_StartStoryActivity(libNCST_ge_StoryActivities_ViewingRoom);
    TriggerExecute(libNCST_gv_NS_RoomEnteredCallback, true, true);
    libNCST_gf_NS_UpdateBottomBar();
    libNCST_gf_NS_PreloadRoomUIs(lp_room);
}

void libNCST_gf_ChangeRoom (int lp_room) {
    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_NCST_78EFE760", "A", IntToText((lp_room)));
    TextExpressionSetToken("Param/Expression/lib_NCST_78EFE760", "B", IntToText((libNCST_gv_nS_CurrentRoom)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_NCST_78EFE760"), false);
    libNCST_gv_nS_LastRoom = libNCST_gv_nS_CurrentRoom;
    if ((lp_room != libNCST_gv_nS_CurrentRoom)) {
        StorySetChange();
        SoundSetReverb("Off", 1.0, true, true);
        libNCST_gf_ShowHideAmbientScenesInRoom(false, libNCST_gf_CurrentRoom());
        libNCST_gf_HideBackground(libNCST_gf_CurrentRoom());
        libNCST_gv_nS_LastUniqueRoom = libNCST_gv_nS_CurrentRoom;
        libNCST_gv_nS_CurrentRoom = lp_room;
    }

    libNCST_gf_NS_RoomUpdateUnitVisibility();
    libNCST_gf_NS_RoomUpdateClickablesIsVisibleOnSet();
    libNCST_gf_NS_RoomLoadUnits();
    libNCST_gf_NS_PrepareRoom();
}

void libNCST_gf_ClearRoom (int lp_room) {
    unitgroup auto300770A4_g;
    int auto300770A4_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    auto300770A4_g = libNCST_gv_nS_RoomUnits[(lp_room)];
    auto300770A4_u = 1;
    for ( ; auto300770A4_u <= UnitGroupCount(auto300770A4_g, c_unitCountAll) ; auto300770A4_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto300770A4_g, auto300770A4_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto300770A4_g, auto300770A4_u);
        libNCST_gf_AddRemoveUnitForRoom(false, lv_indexUnit, lp_room);
    }
}

void libNCST_gf_SetInArchives (bool lp_inArchives) {
    // Implementation
    libNCST_gv_NS_InArchives = lp_inArchives;
}

void libNCST_gf_SetEnterRoomCallback (trigger lp_roomEnterCallback) {
    // Implementation
    libNCST_gv_NS_RoomEnteredCallback = lp_roomEnterCallback;
}

void libNCST_gf_SetMovingToRoomCallback (trigger lp_movingToRoomCallback) {
    // Implementation
    libNCST_gv_NS_MovingToRoomCallback = lp_movingToRoomCallback;
}

void libNCST_gf_SetRoomBeforeArchives (int lp_room) {
    // Implementation
    libNCST_gv_NS_RoomBeforeArchives = lp_room;
}

int libNCST_gf_CurrentRoom () {
    // Implementation
    return libNCST_gv_nS_CurrentRoom;
}

int libNCST_gf_CurrentRoomCutscene () {
    // Implementation
    return libNCST_gv_nS_RoomUICutscene;
}

int libNCST_gf_NextRoom () {
    // Implementation
    return libNCST_gv_NS_NextRoom;
}

int libNCST_gf_PreviousRoom () {
    // Implementation
    return libNCST_gv_nS_LastRoom;
}

bool libNCST_gf_RoomIsUnlocked (int lp_room) {
    int autoC452F745_val;

    // Implementation
    autoC452F745_val = lp_room;
    if (autoC452F745_val == libNCST_ge_Rooms_StoryRoomBridge) {
        return (libComC_gf_NumberOfMissions(libComC_ge_MissionCountOptions_Completed) >= 1);
    }
    else {
    }
    return false;
}

bool libNCST_gf_IsInArchives () {
    // Implementation
    return libNCST_gv_NS_InArchives;
}

void libNCST_gf_NS_PreloadRoomUIs (int lp_room) {
}

void libNCST_gf_NS_UpdateBottomBar () {
    int autoBBB2DE8C_ai;
    int autoBBB2DE8C_ae;

    // Variable Declarations
    string lv_indexClickable;
    bool[4] lv_roomHasConvo;
    text lv_buttonTooltip;

    // Variable Initialization

    // Implementation
    if ((libNCST_gf_CurrentRoom() != libNCST_ge_Rooms_StoryRoomBridge)) {
        return ;
    }

    libNCUI_gf_NU_BottomBarButtonEnable(libNCUI_ge_NU_BottomBarButton_BridgeRoom, true);
    if ((libNCST_gf_CurrentRoom() != libNCST_ge_Rooms_StoryRoomBridge)) {
        libNCUI_gf_NU_BottomBarButtonToggle(libNCUI_ge_NU_BottomBarButton_BridgeRoom, false);
    }
    else {
        libNCUI_gf_NU_BottomBarButtonHighlight(libNCUI_ge_NU_BottomBarButton_BridgeRoom, false);
        libNCUI_gf_NU_BottomBarButtonToggle(libNCUI_ge_NU_BottomBarButton_BridgeRoom, true);
    }
    if ((libNCST_gf_CurrentRoom() != libNCST_ge_Rooms_StoryRoomMissionArchives)) {
        libNCUI_gf_NU_BottomBarButtonEnable(libNCUI_ge_NU_BottomBarButton_MissionArchivesRoom, true);
    }

    autoBBB2DE8C_ai = 1;
    autoBBB2DE8C_ae = UserDataInstanceCount("Clickable")+1;
    while (autoBBB2DE8C_ai < autoBBB2DE8C_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoBBB2DE8C_ai);
        if ((libNCST_gf_ClickableInRoom(lv_indexClickable, libNCST_ge_Rooms_StoryRoomBridge) == true) && (libNCST_gf_NS_ClickableIsNew(lv_indexClickable) == true) && (libNCST_gf_NS_ClickableType(lv_indexClickable) == libNCST_ge_ClickableType_Conversation)) {
            lv_roomHasConvo[libNCUI_ge_NU_BottomBarButton_BridgeRoom] = true;
        }

        autoBBB2DE8C_ai = autoBBB2DE8C_ai+1;
    }
    if ((libComC_gf_MissionAvailableOnPlanet(libComC_gf_CurrentLocation()) == true)) {
        lv_buttonTooltip = StringExternal("Param/Value/lib_NCST_9FC7B77E");
    }
    else {
        lv_buttonTooltip = StringExternal("Param/Value/lib_NCST_66D216E0");
    }
    if ((lv_roomHasConvo[(libNCUI_ge_NU_BottomBarButton_BridgeRoom)] == true)) {
        TextExpressionSetToken("Param/Expression/lib_NCST_DA08AEFD", "A", lv_buttonTooltip);
        TextExpressionSetToken("Param/Expression/lib_NCST_DA08AEFD", "B", StringExternal("Param/Value/lib_NCST_527B01E9"));
        lv_buttonTooltip = TextExpressionAssemble("Param/Expression/lib_NCST_DA08AEFD");
    }

    libNCUI_gf_NU_BottomBarSetExtendedTooltip(libNCUI_ge_NU_BottomBarButton_BridgeRoom, lv_buttonTooltip);
}

int libNCST_gf_NS_BottomBarButtonForRoom (int lp_room) {
    int auto8AB79A07_val;

    // Implementation
    auto8AB79A07_val = lp_room;
    if (auto8AB79A07_val == libNCST_ge_Rooms_StoryRoomBridge) {
        return libNCUI_ge_NU_BottomBarButton_BridgeRoom;
    }
    else {
    }
    return libNCUI_ge_NU_BottomBarButton_None;
}

void libNCST_gf_NS_RoomLoadUnits () {
    unitgroup auto8F428406_g;
    int auto8F428406_u;
    unitgroup auto4BA2BDE2_g;
    int auto4BA2BDE2_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    auto8F428406_g = libNCST_gv_nS_RoomUnits[(libNCST_gv_nS_CurrentRoom)];
    auto8F428406_u = 1;
    for ( ; auto8F428406_u <= UnitGroupCount(auto8F428406_g, c_unitCountAll) ; auto8F428406_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto8F428406_g, auto8F428406_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto8F428406_g, auto8F428406_u);
        if ((UnitGroupHasUnit(libNCST_gv_nS_RoomUnits[(libNCST_gv_nS_LastRoom)], lv_indexUnit) == false)) {
            UnitLoadModel(lv_indexUnit);
        }

    }
    auto4BA2BDE2_g = libNCST_gv_nS_RoomUnits[(libNCST_gv_nS_LastRoom)];
    auto4BA2BDE2_u = 1;
    for ( ; auto4BA2BDE2_u <= UnitGroupCount(auto4BA2BDE2_g, c_unitCountAll) ; auto4BA2BDE2_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto4BA2BDE2_g, auto4BA2BDE2_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto4BA2BDE2_g, auto4BA2BDE2_u);
        if ((UnitGroupHasUnit(libNCST_gv_nS_RoomUnits[(libNCST_gv_nS_CurrentRoom)], lv_indexUnit) == false)) {
            UnitUnloadModel(lv_indexUnit);
        }

    }
    libNCST_gf_NS_ApplyAliases();
    libNCST_gf_NS_ApplyAllFidgets();
}

void libNCST_gf_NS_RoomUpdateUnitVisibility () {
    unitgroup autoB1C4E56F_g;
    int autoB1C4E56F_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    autoB1C4E56F_g = libNCST_gv_nS_VisibleUnits;
    autoB1C4E56F_u = 1;
    for ( ; autoB1C4E56F_u <= UnitGroupCount(autoB1C4E56F_g, c_unitCountAll) ; autoB1C4E56F_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoB1C4E56F_g, autoB1C4E56F_u)) ) {
        lv_indexUnit = UnitGroupUnit(autoB1C4E56F_g, autoB1C4E56F_u);
        if ((libNCST_gf_NS_RoomHasUnit(libNCST_gv_nS_CurrentRoom, lv_indexUnit) == true)) {
            if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true)) {
                libNtve_gf_ShowHideUnit(lv_indexUnit, true);
            }

        }
        else {
            if ((libNtve_gf_UnitIsHidden(lv_indexUnit) == false)) {
                libNtve_gf_ShowHideUnit(lv_indexUnit, false);
            }

        }
    }
}

void libNCST_gf_NS_RoomUpdateClickablesIsVisibleOnSet () {
    int auto67E2991E_ai;
    int auto67E2991E_ae;

    // Variable Declarations
    unit lv_indexUnit;
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    auto67E2991E_ai = 1;
    auto67E2991E_ae = UserDataInstanceCount("Clickable")+1;
    while (auto67E2991E_ai < auto67E2991E_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto67E2991E_ai);
        if ((libNCST_gf_ClickableUnit(lv_indexClickable) != null)) {
            if ((libNtve_gf_UnitIsVisibleToPlayer(libNCST_gf_ClickableUnit(lv_indexClickable), 1) == true)) {
                libNCST_gf_NS_ClickableSetIsVisibleOnSet(lv_indexClickable, true);
            }
            else {
                libNCST_gf_NS_ClickableSetIsVisibleOnSet(lv_indexClickable, false);
            }
        }
        else {
            libNCST_gf_NS_ClickableSetIsVisibleOnSet(lv_indexClickable, false);
        }
        auto67E2991E_ai = auto67E2991E_ai+1;
    }
}

void libNCST_gf_NS_PrepareRoom () {
    int autoD705B45B_val;

    // Implementation
    TriggerExecute(libNCST_gv_nS_RoomPrepareCallbacks[(libNCST_gv_nS_CurrentRoom)], true, true);
    autoD705B45B_val = libNCST_gv_nS_CurrentRoom;
    if (autoD705B45B_val == libNCST_ge_Rooms_StoryRoomVoid) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        UISetWorldVisible(PlayerGroupAll(), true);
        libNCST_gf_ShowHideStoryUnits(false);
    }
    else {
    }
}

bool libNCST_gf_NS_RoomHasUnit (int lp_room, unit lp_testUnit) {
    // Implementation
    return UnitGroupHasUnit(libNCST_gv_nS_RoomUnits[(lp_room)], lp_testUnit);
}

void libNCST_gf_NS_RoomInit () {
    // Implementation
    libNCST_gf_RegisterRoom(libNCST_ge_Rooms_StoryRoomMissionArchives, libNCST_gt_NS_RoomPrepareUI, libNCST_gt_NS_RoomViewArchives, libNCST_gt_NS_RoomViewStopArchives, null, null);
    libNCST_gf_RegisterRoom(libNCST_ge_Rooms_StoryRoomMissionScreen, libNCST_gt_NS_RoomPrepareMission, libNCST_gt_NS_RoomViewMission, libNCST_gt_NS_RoomViewStopMission, null, null);
    libNCST_gf_RegisterRoom(libNCST_ge_Rooms_StoryRoomDebugStoryCheat, libNCST_gt_NS_RoomPrepareUI, libNCST_gt_NS_RoomViewStoryCheat, libNCST_gt_NS_RoomViewStopStoryCheat, null, null);
    libNCST_gf_RegisterRoom(libNCST_ge_Rooms_StoryRoomEquipment, libNCST_gt_NS_RoomPrepareEquipment, libNCST_gt_NS_RoomViewEquipment, libNCST_gt_NS_RoomViewStopEquipment, null, null);
    libNCST_gf_RegisterRoom(libNCST_ge_Rooms_StoryRoomArmyUpgrade, libNCST_gt_NS_RoomPrepareArmyUpgrade, libNCST_gt_NS_RoomViewArmyUpgrade, libNCST_gt_NS_RoomViewStopArmyUpgrade, null, null);
}

void libNCST_gf_NS_PreloadRoomConversations (int lp_room) {
    int autoE3F8C74A_ai;
    int autoE3F8C74A_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    autoE3F8C74A_ai = 1;
    autoE3F8C74A_ae = UserDataInstanceCount("Clickable")+1;
    while (autoE3F8C74A_ai < autoE3F8C74A_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoE3F8C74A_ai);
        if ((libNCST_gf_ClickableInRoom(lv_indexClickable, lp_room) == true) && (libNCST_gf_NS_ClickableIsEnabled(lv_indexClickable) == true)) {
            ConversationDataPreloadLines(libNCST_gf_NS_ClickableConversation(lv_indexClickable));
            ConversationDataPreloadLines(libNCST_gf_NS_ClickableResponse(lv_indexClickable));
        }

        autoE3F8C74A_ai = autoE3F8C74A_ai+1;
    }
}

void libNCST_gf_NS_RoomApplySceneFilters () {
    int autoFE31B176_ai;
    int autoFE31B176_ae;

    // Variable Declarations
    string lv_indexClickable;
    int lv_episodeNumber;
    string lv_indexMission;

    // Variable Initialization

    // Implementation
    autoFE31B176_ai = 1;
    autoFE31B176_ae = UserDataInstanceCount("Clickable")+1;
    while (autoFE31B176_ai < autoFE31B176_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoFE31B176_ai);
        if ((libNCST_gf_NS_ClickableSceneNameToken(lv_indexClickable) != null)) {
            if ((libNCST_gf_ClickableInRoom(lv_indexClickable, libNCST_gf_CurrentRoom()) == true) && (UnitGroupHasUnit(libNCST_gv_nS_VisibleUnits, libNCST_gf_ClickableUnit(lv_indexClickable)) == true)) {
                CutsceneAddFilter(libNCST_gv_nS_RoomUICutscene, libNCST_gf_NS_ClickableSceneNameToken(lv_indexClickable));
            }
            else {
                CutsceneRemoveFilter(libNCST_gv_nS_RoomUICutscene, libNCST_gf_NS_ClickableSceneNameToken(lv_indexClickable));
            }
        }

        autoFE31B176_ai = autoFE31B176_ai+1;
    }
}

string libNCST_gf_NS_SelectBackgroundCutscene (string lp_room) {
    int autoDD527CDD_ae;
    int autoDD527CDD_ai;

    // Variable Declarations
    string lv_sceneName;
    string lv_cutsceneFile;
    int lv_backgroundIndex;

    // Variable Initialization
    lv_sceneName = "";

    // Implementation
    if ((lp_room != "Invalid") && (lp_room != "")) {
        autoDD527CDD_ae = UserDataInstanceCount("Backgrounds");
        autoDD527CDD_ai = 1;
        lv_backgroundIndex = 1;
        for ( ; ( (autoDD527CDD_ai >= 0 && lv_backgroundIndex <= autoDD527CDD_ae) || (autoDD527CDD_ai <= 0 && lv_backgroundIndex >= autoDD527CDD_ae) ) ; lv_backgroundIndex += autoDD527CDD_ai ) {
            if ((libComC_gf_CurrentLocation() == UserDataGetGameLink("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Location", 1)) && (UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Room", 1) == lp_room)) {
                if ((UserDataGetGameLink("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Mission", 1) == libNCST_gf_NextAvailableMission()) && (UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Occurance", 1) == "Pre")) {
                    lv_sceneName = UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Cutscene", 1);
                    lv_cutsceneFile = "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
                    break;
                }

                if ((UserDataGetGameLink("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Mission", 1) == libComC_gf_LastSuccessfulMission()) && (UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Occurance", 1) == "Post")) {
                    lv_sceneName = UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Cutscene", 1);
                    lv_cutsceneFile = "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
                    break;
                }

                if ((UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Occurance", 1) == "Default")) {
                    lv_sceneName = UserDataGetString("Backgrounds", UserDataInstance("Backgrounds", lv_backgroundIndex), "Cutscene", 1);
                    lv_cutsceneFile = "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
                }

            }

        }
    }

    return lv_cutsceneFile;
}

string libNCST_gf_NS_ConvertRoomtoBackgroundRoomName (int lp_roomPreset) {
    int auto984B2137_val;

    // Implementation
    auto984B2137_val = lp_roomPreset;
    if (auto984B2137_val == libNCST_ge_Rooms_StoryRoomBridge) {
        return "Bridge";
    }
    else {
        return "Invalid";
    }
}

int libNCST_gf_NS_ConvertRoomtoBackgroundRoomNumber (int lp_roomPreset) {
    int autoB3D22A0C_val;

    // Implementation
    autoB3D22A0C_val = lp_roomPreset;
    if (autoB3D22A0C_val == libNCST_ge_Rooms_StoryRoomBridge) {
        return 1;
    }
    else {
        return 0;
    }
}

void libNCST_gf_NS_ResetAllBackgrounds () {
    // Implementation
    libNCST_gf_RemoveBackground(libNCST_ge_Rooms_StoryRoomBridge);
}

void libNCST_gf_NS_HideAllBackgrounds () {
    // Implementation
    libNCST_gf_HideBackground(libNCST_ge_Rooms_StoryRoomBridge);
}

void libNCST_gf_DisplayBackground (int lp_room) {
    // Variable Declarations
    string lv_backgroundCutscene;

    // Variable Initialization

    // Implementation
    lv_backgroundCutscene = libNCST_gf_NS_SelectBackgroundCutscene(libNCST_gf_NS_ConvertRoomtoBackgroundRoomName(lp_room));
    if ((lv_backgroundCutscene != null)) {
        if ((libNCST_gv_NS_Backgrounds[libNCST_gf_NS_ConvertRoomtoBackgroundRoomNumber(lp_room)] != c_cutsceneNone)) {
            CutsceneShow(libNCST_gv_NS_Backgrounds[libNCST_gf_NS_ConvertRoomtoBackgroundRoomNumber(lp_room)], true);
        }
        else {
            CutsceneCreateNew(lv_backgroundCutscene, libNCST_gf_StoryModeDefaultPosition(), 0.0, PlayerGroupAll(), true);
            CutsceneGoToBookmark(CutsceneLastCreated(), "LoopStart");
            libNCST_gv_NS_Backgrounds[libNCST_gf_NS_ConvertRoomtoBackgroundRoomNumber(lp_room)] = CutsceneLastCreated();
        }
        libNCST_gv_NS_ActiveBackground = libNCST_gv_NS_Backgrounds[libNCST_gf_NS_ConvertRoomtoBackgroundRoomNumber(lp_room)];
        libNCST_gf_SetBackgroundUIViewMode(true);
        libNCST_gf_SetBackgroundConversationViewMode(false);
    }

}

void libNCST_gf_HideBackground (int lp_room) {
    // Variable Declarations
    int lv_roomNumber;

    // Variable Initialization

    // Implementation
    libNCST_gf_SetBackgroundUIViewMode(false);
    libNCST_gf_SetBackgroundConversationViewMode(false);
    lv_roomNumber = libNCST_gf_NS_ConvertRoomtoBackgroundRoomNumber(lp_room);
    if ((lv_roomNumber != 0)) {
        if ((libNCST_gv_NS_Backgrounds[lv_roomNumber] == libNCST_gv_NS_ActiveBackground)) {
            libNCST_gv_NS_ActiveBackground = c_cutsceneNone;
        }

        CutsceneShow(libNCST_gv_NS_Backgrounds[lv_roomNumber], false);
    }

}

void libNCST_gf_RemoveBackground (int lp_room) {
    // Variable Declarations
    int lv_roomNumber;

    // Variable Initialization

    // Implementation
    libNCST_gf_SetBackgroundUIViewMode(false);
    libNCST_gf_SetBackgroundConversationViewMode(false);
    lv_roomNumber = libNCST_gf_NS_ConvertRoomtoBackgroundRoomNumber(lp_room);
    if ((lv_roomNumber != 0)) {
        if ((libNCST_gv_NS_Backgrounds[lv_roomNumber] == libNCST_gv_NS_ActiveBackground)) {
            libNCST_gv_NS_ActiveBackground = c_cutsceneNone;
        }

        CutsceneStop(libNCST_gv_NS_Backgrounds[lv_roomNumber]);
        libNCST_gv_NS_Backgrounds[lv_roomNumber] = c_cutsceneNone;
    }

}

void libNCST_gf_SetBackgroundUIViewMode (bool lp_enabled) {
    // Implementation
    if ((libNCST_gv_NS_ActiveBackground != c_cutsceneNone)) {
        if ((lp_enabled == true)) {
            CutsceneAddFilter(libNCST_gv_NS_ActiveBackground, "UIView");
        }
        else {
            CutsceneRemoveFilter(libNCST_gv_NS_ActiveBackground, "UIView");
        }
    }

}

void libNCST_gf_SetBackgroundConversationViewMode (bool lp_enabled) {
    // Implementation
    if ((libNCST_gv_NS_ActiveBackground != c_cutsceneNone)) {
        if ((lp_enabled == true)) {
            CutsceneAddFilter(libNCST_gv_NS_ActiveBackground, "ConversationView");
        }
        else {
            CutsceneRemoveFilter(libNCST_gv_NS_ActiveBackground, "ConversationView");
        }
    }

}

void libNCST_gf_ShowHideAllAmbientScenes (bool lp_showHide) {
    int auto4D0A1FE0_ae;
    int auto4D0A1FE0_ai;
    int auto066F6A07_ae;
    int auto066F6A07_ai;
    int autoE741D42F_ae;
    int autoE741D42F_ai;
    int auto022AC773_ae;
    int auto022AC773_ai;
    int autoC28F0D64_ae;
    int autoC28F0D64_ai;

    // Variable Declarations
    int lv_indexRoom;
    int lv_indexScene;
    int lv_indexEvent;

    // Variable Initialization

    // Implementation
    if ((lp_showHide == true)) {
        auto066F6A07_ae = libNCST_gv_pSC_MaxAmbientRooms;
        auto066F6A07_ai = 1;
        lv_indexRoom = 1;
        for ( ; ( (auto066F6A07_ai >= 0 && lv_indexRoom <= auto066F6A07_ae) || (auto066F6A07_ai <= 0 && lv_indexRoom >= auto066F6A07_ae) ) ; lv_indexRoom += auto066F6A07_ai ) {
            libNCST_gv_nS_AmbientScenesHidden[lv_indexRoom] = false;
        }
    }
    else {
        auto4D0A1FE0_ae = libNCST_gv_pSC_MaxAmbientRooms;
        auto4D0A1FE0_ai = 1;
        lv_indexRoom = 1;
        for ( ; ( (auto4D0A1FE0_ai >= 0 && lv_indexRoom <= auto4D0A1FE0_ae) || (auto4D0A1FE0_ai <= 0 && lv_indexRoom >= auto4D0A1FE0_ae) ) ; lv_indexRoom += auto4D0A1FE0_ai ) {
            libNCST_gv_nS_AmbientScenesHidden[lv_indexRoom] = true;
        }
    }
    lv_indexRoom = 0;
    autoE741D42F_ae = libNCST_gv_pSC_MaxAmbientRooms;
    autoE741D42F_ai = 1;
    lv_indexRoom = 1;
    for ( ; ( (autoE741D42F_ai >= 0 && lv_indexRoom <= autoE741D42F_ae) || (autoE741D42F_ai <= 0 && lv_indexRoom >= autoE741D42F_ae) ) ; lv_indexRoom += autoE741D42F_ai ) {
        auto022AC773_ae = libNCST_gv_pSC_MaxAmbientScenes;
        auto022AC773_ai = 1;
        lv_indexScene = 1;
        for ( ; ( (auto022AC773_ai >= 0 && lv_indexScene <= auto022AC773_ae) || (auto022AC773_ai <= 0 && lv_indexScene >= auto022AC773_ae) ) ; lv_indexScene += auto022AC773_ai ) {
            autoC28F0D64_ae = libNCST_gv_pSC_MaxAmbientEvents;
            autoC28F0D64_ai = 1;
            lv_indexEvent = 1;
            for ( ; ( (autoC28F0D64_ai >= 0 && lv_indexEvent <= autoC28F0D64_ae) || (autoC28F0D64_ai <= 0 && lv_indexEvent >= autoC28F0D64_ae) ) ; lv_indexEvent += autoC28F0D64_ai ) {
                CutsceneShow(libNCST_gv_NS_AmbientEvents[lv_indexRoom][lv_indexScene][lv_indexEvent], lp_showHide);
            }
        }
    }
}

void libNCST_gf_ShowHideAmbientScenesInRoom (bool lp_showHide, int lp_room) {
    int autoF8306E8C_ae;
    int autoF8306E8C_ai;
    int auto9AE66909_ae;
    int auto9AE66909_ai;

    // Variable Declarations
    int lv_indexScene;
    int lv_indexEvent;

    // Variable Initialization

    // Implementation
    if ((libNCST_gf_NS_AmbientGetRoomNumber(lp_room) == 0)) {
        return ;
    }

    if ((lp_showHide == true)) {
        libNCST_gv_nS_AmbientScenesHidden[libNCST_gf_NS_AmbientGetRoomNumber(lp_room)] = false;
    }
    else {
        libNCST_gv_nS_AmbientScenesHidden[libNCST_gf_NS_AmbientGetRoomNumber(lp_room)] = true;
    }
    autoF8306E8C_ae = libNCST_gv_pSC_MaxAmbientScenes;
    autoF8306E8C_ai = 1;
    lv_indexScene = 1;
    for ( ; ( (autoF8306E8C_ai >= 0 && lv_indexScene <= autoF8306E8C_ae) || (autoF8306E8C_ai <= 0 && lv_indexScene >= autoF8306E8C_ae) ) ; lv_indexScene += autoF8306E8C_ai ) {
        auto9AE66909_ae = libNCST_gv_pSC_MaxAmbientEvents;
        auto9AE66909_ai = 1;
        lv_indexEvent = 1;
        for ( ; ( (auto9AE66909_ai >= 0 && lv_indexEvent <= auto9AE66909_ae) || (auto9AE66909_ai <= 0 && lv_indexEvent >= auto9AE66909_ae) ) ; lv_indexEvent += auto9AE66909_ai ) {
            CutsceneShow(libNCST_gv_NS_AmbientEvents[libNCST_gf_NS_AmbientGetRoomNumber(lp_room)][lv_indexScene][lv_indexEvent], lp_showHide);
        }
    }
}

void libNCST_gf_NS_AmbientSceneShowForConvo () {
    int autoEEF3BC7B_ae;
    int autoEEF3BC7B_ai;
    int auto9AC7A288_ae;
    int auto9AC7A288_ai;

    // Variable Declarations
    int lv_indexScene;
    int lv_indexEvent;

    // Variable Initialization

    // Implementation
    if ((libNCST_gf_NS_AmbientGetRoomNumber(libNCST_gv_nS_CurrentRoom) == 0)) {
        return ;
    }

    autoEEF3BC7B_ae = libNCST_gv_pSC_MaxAmbientScenes;
    autoEEF3BC7B_ai = 1;
    lv_indexScene = 1;
    for ( ; ( (autoEEF3BC7B_ai >= 0 && lv_indexScene <= autoEEF3BC7B_ae) || (autoEEF3BC7B_ai <= 0 && lv_indexScene >= autoEEF3BC7B_ae) ) ; lv_indexScene += autoEEF3BC7B_ai ) {
        if ((UserDataGetInt("AmbientScenes", libNCST_gv_nS_AmbientSceneInstance[libNCST_gf_NS_AmbientGetRoomNumber(libNCST_gv_nS_CurrentRoom)][lv_indexScene], "ActiveInConvo", 1) == 1) && (libNCST_gv_nS_AmbientSceneStatus[libNCST_gf_NS_AmbientGetRoomNumber(libNCST_gv_nS_CurrentRoom)][lv_indexScene] == libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientScenePlaying)) {
            auto9AC7A288_ae = libNCST_gv_pSC_MaxAmbientEvents;
            auto9AC7A288_ai = 1;
            lv_indexEvent = 1;
            for ( ; ( (auto9AC7A288_ai >= 0 && lv_indexEvent <= auto9AC7A288_ae) || (auto9AC7A288_ai <= 0 && lv_indexEvent >= auto9AC7A288_ae) ) ; lv_indexEvent += auto9AC7A288_ai ) {
                CutsceneShow(libNCST_gv_NS_AmbientEvents[libNCST_gf_NS_AmbientGetRoomNumber(libNCST_gv_nS_CurrentRoom)][lv_indexScene][lv_indexEvent], true);
            }
        }

    }
}

trigger auto_libNCST_gf_PlayAmbientScene_Trigger = null;
int auto_libNCST_gf_PlayAmbientScene_lp_room;
string auto_libNCST_gf_PlayAmbientScene_lp_scene;

void libNCST_gf_PlayAmbientScene (int lp_room, string lp_scene) {
    auto_libNCST_gf_PlayAmbientScene_lp_room = lp_room;
    auto_libNCST_gf_PlayAmbientScene_lp_scene = lp_scene;

    if (auto_libNCST_gf_PlayAmbientScene_Trigger == null) {
        auto_libNCST_gf_PlayAmbientScene_Trigger = TriggerCreate("auto_libNCST_gf_PlayAmbientScene_TriggerFunc");
    }

    TriggerExecute(auto_libNCST_gf_PlayAmbientScene_Trigger, false, false);
}

bool auto_libNCST_gf_PlayAmbientScene_TriggerFunc (bool testConds, bool runActions) {
    int lp_room = auto_libNCST_gf_PlayAmbientScene_lp_room;
    string lp_scene = auto_libNCST_gf_PlayAmbientScene_lp_scene;

    // Implementation
    libNCST_gf_NS_AmbientScenePlay(libNCST_gf_NS_AmbientGetRoomNumber(lp_room), lp_scene);
    return true;
}

void libNCST_gf_NS_AmbientScenePlay (int lp_room, string lp_scene) {
    int auto308CD3B0_ae;
    int auto308CD3B0_ai;
    int autoB34D80F7_ae;
    int autoB34D80F7_ai;
    int auto054CD9AB_ae;
    int auto054CD9AB_ai;
    int autoF4041980_ae;
    int autoF4041980_ai;

    // Variable Declarations
    int lv_continuousSceneIndex;
    int lv_sceneIndex;
    int lv_eventIndex;

    // Variable Initialization

    // Implementation
    if ((lp_scene == null)) {
        return ;
    }

    if ((libNCST_gf_NS_AmbientSceneIsContinuousScene(lp_scene) == true)) {
        if ((libNCST_gf_NS_AmbientSceneContinuousSceneIsPlaying(lp_scene) == true)) {
            auto308CD3B0_ae = libNCST_gv_pSC_MaxAmbientScenes;
            auto308CD3B0_ai = 1;
            lv_continuousSceneIndex = 1;
            for ( ; ( (auto308CD3B0_ai >= 0 && lv_continuousSceneIndex <= auto308CD3B0_ae) || (auto308CD3B0_ai <= 0 && lv_continuousSceneIndex >= auto308CD3B0_ae) ) ; lv_continuousSceneIndex += auto308CD3B0_ai ) {
                if ((libNCST_gv_nS_AmbientSceneInstance[lp_room][lv_continuousSceneIndex] == lp_scene)) {
                    TimerStart(libNCST_gv_nS_AmbientSceneTimer[lp_room][lv_continuousSceneIndex], UserDataGetFixed("AmbientScenes", lp_scene, "NextSceneDelay", 1), false, c_timeReal);
                    return ;
                }

            }
        }
        else {
            libNCST_gf_NS_AmbientSceneSetContinuousScenePlaying(lp_scene, true);
        }
    }

    if ((libNCST_gv_NS_AmbientSceneCountPerRoom[lp_room] >= libNCST_gv_pSC_MaxAmbientScenes)) {
        TextExpressionSetToken("Param/Expression/lib_NCST_0814D95A", "A", IntToText(lp_room));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_NCST_0814D95A"), true);
        return ;
    }

    autoB34D80F7_ae = libNCST_gv_pSC_MaxAmbientScenes;
    autoB34D80F7_ai = 1;
    lv_sceneIndex = 1;
    for ( ; ( (autoB34D80F7_ai >= 0 && lv_sceneIndex <= autoB34D80F7_ae) || (autoB34D80F7_ai <= 0 && lv_sceneIndex >= autoB34D80F7_ae) ) ; lv_sceneIndex += autoB34D80F7_ai ) {
        if ((libNCST_gv_nS_AmbientSceneStatus[lp_room][lv_sceneIndex] == libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientSceneUnused)) {
            break;
        }

    }
    libNCST_gv_nS_AmbientSceneInstance[lp_room][lv_sceneIndex] = lp_scene;
    libNCST_gv_NS_AmbientSceneCountPerRoom[lp_room] += 1;
    auto054CD9AB_ae = libNCST_gv_pSC_MaxAmbientEvents;
    auto054CD9AB_ai = 1;
    lv_eventIndex = 1;
    for ( ; ( (auto054CD9AB_ai >= 0 && lv_eventIndex <= auto054CD9AB_ae) || (auto054CD9AB_ai <= 0 && lv_eventIndex >= auto054CD9AB_ae) ) ; lv_eventIndex += auto054CD9AB_ai ) {
        if ((UserDataGetUserInstance("AmbientScenes", lp_scene, "AmbientEvents", lv_eventIndex) != null)) {
            libNCST_gf_NS_AmbientEventPlay(lp_room, lv_sceneIndex, lv_eventIndex, UserDataGetUserInstance("AmbientScenes", lp_scene, "AmbientEvents", lv_eventIndex));
        }

    }
    libNCST_gv_nS_AmbientSceneStatus[lp_room][lv_sceneIndex] = libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientSceneFinished;
    lv_eventIndex = 0;
    autoF4041980_ae = libNCST_gv_pSC_MaxAmbientEvents;
    autoF4041980_ai = 1;
    lv_eventIndex = 1;
    for ( ; ( (autoF4041980_ai >= 0 && lv_eventIndex <= autoF4041980_ae) || (autoF4041980_ai <= 0 && lv_eventIndex >= autoF4041980_ae) ) ; lv_eventIndex += autoF4041980_ai ) {
        if ((libNCST_gv_NS_AmbientEvents[lp_room][lv_sceneIndex][lv_eventIndex] != c_cutsceneNone)) {
            libNCST_gv_nS_AmbientSceneStatus[lp_room][lv_sceneIndex] = libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientScenePlaying;
            break;
        }

    }
    if (((libNCST_gv_nS_AmbientSceneStatus[lp_room][lv_sceneIndex] == libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientSceneFinished) || (libNCST_gf_NS_AmbientSceneWaitForEventsToFinish(lp_scene) != true))) {
        TimerStart(libNCST_gv_nS_AmbientSceneTimer[lp_room][lv_sceneIndex], UserDataGetFixed("AmbientScenes", lp_scene, "NextSceneDelay", 1), false, c_timeReal);
    }

}

void libNCST_gf_NS_AmbientSceneOver (int lp_room, int lp_scene) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    if ((libNCST_gf_NS_AmbientSceneWaitForEventsToFinish(libNCST_gv_nS_AmbientSceneInstance[lp_room][lp_scene]) == true)) {
        if ((UserDataGetUserInstance("AmbientScenes", libNCST_gv_nS_AmbientSceneInstance[lp_room][lp_scene], "NextScene", 1) != null)) {
            libNCST_gv_nS_AmbientSceneStatus[lp_room][lp_scene] = libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientSceneFinished;
            TimerStart(libNCST_gv_nS_AmbientSceneTimer[lp_room][lp_scene], UserDataGetFixed("AmbientScenes", libNCST_gv_nS_AmbientSceneInstance[lp_room][lp_scene], "NextSceneDelay", 1), false, c_timeReal);
        }

    }
    else {
        if ((TimerGetRemaining(libNCST_gv_nS_AmbientSceneTimer[lp_room][lp_scene]) <= 0.0)) {
            libNCST_gf_NS_AmbientSceneRemove(lp_room, lp_scene);
        }
        else {
            libNCST_gv_nS_AmbientSceneStatus[lp_room][lp_scene] = libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientSceneFinished;
        }
    }
}

void libNCST_gf_NS_AmbientSceneRemove (int lp_room, int lp_scene) {
    // Implementation
    libNCST_gv_nS_AmbientSceneInstance[lp_room][lp_scene] = null;
    libNCST_gv_NS_AmbientSceneCountPerRoom[lp_room] -= 1;
    libNCST_gv_nS_AmbientSceneStatus[lp_room][lp_scene] = libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientSceneUnused;
}

void libNCST_gf_NS_AmbientSceneSetContinuousScenePlaying (string lp_ambientScene, bool lp_isPlaying) {
    // Implementation
    UserDataSetInt("AmbientScenes", lp_ambientScene, "ContinuousSceneIsPlaying", 1, BoolToInt(lp_isPlaying));
}

void libNCST_gf_NS_AmbientEventFinished (int lp_Room, int lp_scene) {
    int autoB6868FC5_ae;
    int autoB6868FC5_ai;

    // Variable Declarations
    int lv_indexEvent;

    // Variable Initialization

    // Implementation
    autoB6868FC5_ae = libNCST_gv_pSC_MaxAmbientEvents;
    autoB6868FC5_ai = 1;
    lv_indexEvent = 1;
    for ( ; ( (autoB6868FC5_ai >= 0 && lv_indexEvent <= autoB6868FC5_ae) || (autoB6868FC5_ai <= 0 && lv_indexEvent >= autoB6868FC5_ae) ) ; lv_indexEvent += autoB6868FC5_ai ) {
        if ((libNCST_gv_NS_AmbientEvents[lp_Room][lp_scene][lv_indexEvent] != c_cutsceneNone)) {
            return ;
        }

    }
    libNCST_gf_NS_AmbientSceneOver(lp_Room, lp_scene);
}

void libNCST_gf_NS_AmbientEventPlay (int lp_room, int lp_scene, int lp_eventIndex, string lp_ambientEvent) {
    // Implementation
    if ((UserDataGetString("AmbientEvents", lp_ambientEvent, "CutsceneFile", 1) == "")) {
        return ;
    }

    if ((UserDataGetGameLink("AmbientEvents", lp_ambientEvent, "CategoryRequiredForEvent", 1) != "") && (libComC_gf_CC_ArmyCategoryState(UserDataGetGameLink("AmbientEvents", lp_ambientEvent, "CategoryRequiredForEvent", 1)) == c_armyCategoryStateLocked)) {
        return ;
    }

    CutsceneCreateNew(UserDataGetString("AmbientEvents",lp_ambientEvent,"CutsceneFile",1), libNCST_gv_nS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
    libNCST_gv_NS_AmbientEvents[lp_room][lp_scene][lp_eventIndex] = CutsceneLastCreated();
    if ((UserDataGetString("AmbientEvents", lp_ambientEvent, "Bookmark", 1) != "")) {
        CutsceneGoToBookmark(libNCST_gv_NS_AmbientEvents[lp_room][lp_scene][lp_eventIndex], UserDataGetString("AmbientEvents", lp_ambientEvent, "Bookmark", 1));
    }

    if ((libNCST_gv_nS_AmbientScenesHidden[lp_room] == true)) {
        if ((libNCST_gv_NS_AmbientIsInConvoState == true) && (UserDataGetInt("AmbientScenes", libNCST_gv_nS_AmbientSceneInstance[lp_room][lp_scene], "ActiveInConvo", 1) == 1) && (libNCST_gf_NS_AmbientGetRoomNumber(libNCST_gv_nS_CurrentRoom) == lp_room)) {
            CutsceneShow(CutsceneLastCreated(), true);
        }
        else {
            CutsceneShow(CutsceneLastCreated(), false);
        }
    }

    CutscenePlay(CutsceneLastCreated());
}

void libNCST_gf_NS_AmbientSetIsInConvoState (bool lp_isInConvoState) {
    // Implementation
    libNCST_gv_NS_AmbientIsInConvoState = lp_isInConvoState;
}

bool libNCST_gf_NS_AmbientSceneWaitForEventsToFinish (string lp_ambientSceneInstance) {
    // Implementation
    if ((UserDataGetInt("AmbientScenes", lp_ambientSceneInstance, "WaitUntilEventsFinish", 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

bool libNCST_gf_NS_AmbientSceneIsContinuousScene (string lp_AmbientSceneInstance) {
    // Implementation
    if ((UserDataGetInt("AmbientScenes", lp_AmbientSceneInstance, "IsContinuousScene", 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

bool libNCST_gf_NS_AmbientSceneContinuousSceneIsPlaying (string lp_ambientScene) {
    // Implementation
    if ((UserDataGetInt("AmbientScenes", lp_ambientScene, "ContinuousSceneIsPlaying", 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

int libNCST_gf_NS_AmbientGetRoomNumber (int lp_room) {
    int auto9516A70F_val;

    // Implementation
    auto9516A70F_val = lp_room;
    if (auto9516A70F_val == libNCST_ge_Rooms_StoryRoomBridge) {
        return 1;
    }
    else {
        return 0;
    }
}

void libNCST_gf_StartAmbientConversationTimer () {
    // Implementation
    TimerStart(libNCST_gv_NS_AmbientConversationTimer, RandomInt(libNCST_gv_NS_AmbientConversationMinTimeToTrigger, libNCST_gv_NS_AmbientConversationMaxTimeToTrigger), false, c_timeGame);
}

void libNCST_gf_RegisterAmbientConversationRoom (int lp_room) {
    // Implementation
    libNCST_gv_NS_AmbientConversationValidRoom[(lp_room)] = true;
}

void libNCST_gf_NS_AmbientConversationTimerPauseUnpause (bool lp_pauseUnpause) {
    // Implementation
    TimerPause(libNCST_gv_NS_AmbientConversationTimer, lp_pauseUnpause);
}

void libNCST_gf_NS_AmbientConversationAnimationsOnOff (bool lp_onOff) {
    // Implementation
    if ((lp_onOff == true)) {
    }

}

void libNCST_gf_NS_AmbientConversationStart () {
    // Implementation
    libNCST_gf_NS_TurnAllFidgetStatusOnOff(false);
    libNCST_gf_NS_TurnAllAlternateStatusOnOff(false);
    libNCST_gf_NS_AmbientConversationAnimationsOnOff(true);
    libNCST_gv_NS_AmbientConversationRunning = true;
}

void libNCST_gf_NS_AmbientConversationEnd () {
    // Implementation
    if ((libNCST_gv_NS_AmbientConversationRunning == true)) {
        libNCST_gf_NS_AmbientConversationAnimationsOnOff(false);
        libNCST_gf_NS_TurnAllFidgetStatusOnOff(true);
        libNCST_gf_NS_TurnAllAlternateStatusOnOff(true);
        libNCST_gf_StartAmbientConversationTimer();
        libNCST_gv_NS_AmbientConversationRunning = false;
    }

}

void libNCST_gf_NS_ApplyEyeDarts () {
    // Implementation
}

void libNCST_gf_NS_RemoveEyeDarts () {
    // Implementation
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(libNCST_gf_ClickableUnit(libNCST_gv_nS_CurrentConvoChar)), "NS_EyeDart");
}

void libNCST_gf_NS_ConversationPlayClickable (string lp_clickable) {
    int auto34F56E92_ai;
    int auto34F56E92_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    if ((libNCST_gf_NS_ClickableType(lp_clickable) == libNCST_ge_ClickableType_Ambient)) {
        libNCST_gf_NS_ConversationPlayResponse(lp_clickable, null, false);
        return ;
    }

    libNCST_gv_nS_LastConversationSkipped = false;
    ConversationDataPreloadLines(libNCST_gf_NS_ClickableConversation(lp_clickable));
    SoundLengthQueryWait();
    libNCST_gv_nS_ConvoActive = true;
    libNCST_gf_NS_ConversationSnapshotStart(libNCST_gf_NS_ClickableConversation(lp_clickable));
    libNCST_gv_nS_ActiveConvoBookmarkToken = libNCST_gf_NS_ClickableSceneNameToken(lp_clickable);
    libNCST_gf_NS_AmbientConversationEnd();
    libNCST_gf_StartStoryActivity(libNCST_ge_StoryActivities_Conversation);
    libNCST_gf_ShowHideStoryUI(false);
    libNCST_gf_StoryCinematicMode(true);
    libNCST_gf_NS_PrepareRoom();
    libNCST_gf_DisplayBackground(libNCST_gv_nS_CurrentRoom);
    libNCST_gf_SetBackgroundUIViewMode(false);
    libNCST_gf_SetBackgroundConversationViewMode(true);
    TriggerExecute(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickable)].lv_preCallback, true, true);
    libNCST_gv_nS_CurrentConvoChar = lp_clickable;
    libComC_gf_DisplayConversationTimestamp(libNCST_gf_NS_ClickableConversation(lp_clickable));
    libNCST_gf_NS_ApplyEyeDarts();
    ConversationDataRun(libNCST_gf_NS_ClickableConversation(lp_clickable), PlayerGroupAll(), c_conversationSkipFull, true);
    libNCST_gv_nS_ConvoActive = false;
    libNCST_gv_nS_LastConversationSkipped = ConversationDataWasSkipped();
    libNCST_gv_nS_CurrentConvoChar = null;
    libNCST_gf_NS_ConversationSnapshotEnd(libNCST_gf_NS_ClickableConversation(lp_clickable));
    if ((ConversationDataWasSkipped() == false)) {
        libNCST_gf_ClickableSetNew(lp_clickable, false);
        libNCST_gf_NS_ClickableSetCalloutName(lp_clickable);
    }

    libNCST_gf_NS_RemoveEyeDarts();
    libNCST_gf_NS_ConversationSceneClose();
    auto34F56E92_ai = 1;
    auto34F56E92_ae = UserDataInstanceCount("Clickable")+1;
    while (auto34F56E92_ai < auto34F56E92_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto34F56E92_ai);
        libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_indexClickable), "InstantHeadOnly");
        libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_indexClickable), "Turret_Right");
        libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_indexClickable), "Turret_Left");
        libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_indexClickable), "InstantHeadOnlySubtle");
        libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lv_indexClickable), "AnimCancelActiveBlends ::Conversation");
        auto34F56E92_ai = auto34F56E92_ai+1;
    }
    TriggerExecute(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickable)].lv_postCallback, true, true);
    libNCST_gf_StoryCinematicMode(false);
    if ((ConversationDataWasSkipped() == true)) {
        CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    }
    else {
        CutsceneFade(true, 0.5, Color(0,0,0), 100.0, PlayerGroupAll(), false);
    }
}

void libNCST_gf_NS_ConversationSnapshotStart (string lp_conversation) {
    // Implementation
    ConversationDataSaveNodeState(lp_conversation, libNCST_gf_NS_TempConversationBank(), ("StoryConversations"));
    ConversationDataResetNodeState(lp_conversation);
    ConversationDataLoadNodeState(lp_conversation, libComC_gf_CC_StoryBank(), ("ConversationSnapshot"));
    libNCST_gf_NS_BackupSnapshotStates();
    libNCST_gf_NS_LoadSnapshotStates();
}

void libNCST_gf_NS_ConversationSnapshotEnd (string lp_conversation) {
    // Implementation
    if ((ConversationDataWasSkipped() == true)) {
        ConversationDataLoadNodeState(lp_conversation, libNCST_gf_NS_TempConversationBank(), ("StoryConversations"));
    }

    libNCST_gf_NS_RestoreWriterStates();
}

void libNCST_gf_PlayScriptedConversation (string lp_conversation, int lp_skipping, string lp_primaryCharacter, int lp_fadeStyle, trigger lp_lineCallback) {
    int autoCAA2A321_ai;
    int autoCAA2A321_ae;

    // Variable Declarations
    string lv_indexClickable;
    int lv_skipMode;

    // Variable Initialization

    // Implementation
    ConversationDataStop();
    ConversationDataPreloadLines(lp_conversation);
    libNCST_gv_nS_ConvoActive = true;
    libNCST_gv_nS_LastConversationSkipped = false;
    libNCST_gv_nS_LastScenePlayedFull = true;
    libNCST_gv_nS_ScriptedLineCallback = lp_lineCallback;
    if ((lp_primaryCharacter != null)) {
        libNCST_gv_nS_ActiveConvoBookmarkToken = libNCST_gf_NS_ClickableSceneNameToken(lp_primaryCharacter);
    }

    libNCST_gf_ShowHideStoryUI(false);
    libNCST_gf_SetBackgroundUIViewMode(false);
    libNCST_gf_SetBackgroundConversationViewMode(true);
    libComC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    SoundLengthQueryWait();
    libComC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    lv_skipMode = lp_skipping;
    libNCST_gf_StoryCinematicMode(true);
    libComC_gf_DisplayConversationTimestamp(lp_conversation);
    if ((lv_skipMode != c_conversationSkipNone) && ((lp_fadeStyle & libNCST_ge_NS_FadeStyle_FadeOutOnSkip) != 0)) {
        TriggerExecute(libNCST_gt_NS_ConversationWaitForSkip, true, false);
        lv_skipMode = c_conversationSkipNone;
    }

    libNCST_gf_NS_ApplyEyeDarts();
    if (((lp_fadeStyle & libNCST_ge_NS_FadeStyle_FadeInAtStart) != 0)) {
        libNCST_gf_StoryCutsceneFade(true, 1.0, false);
    }

    if (((lp_fadeStyle & libNCST_ge_NS_FadeStyle_BlockingFadeInAtStart) != 0)) {
        libNCST_gf_StoryCutsceneFade(true, 2.0, true);
    }

    if ((libNCST_gv_nS_LastConversationSkipped == false)) {
        ConversationDataRun(lp_conversation, PlayerGroupAll(), lv_skipMode, true);
    }

    if ((TriggerActiveCount(libNCST_gt_NS_ConversationWaitForSkip) > 0)) {
        TriggerStop(libNCST_gt_NS_ConversationWaitForSkip);
        if (((lp_fadeStyle & libNCST_ge_NS_FadeStyle_FadeOutAfter) != 0)) {
            libNCST_gf_StoryCutsceneFade(false, 1.0, true);
        }

    }

    TriggerStop(lp_lineCallback);
    if ((ConversationDataWasSkipped() == true)) {
        libNCST_gv_nS_LastConversationSkipped = true;
        libNCST_gv_nS_LastScenePlayedFull = false;
    }

    libNCST_gf_NS_ConversationSceneClose();
    libNCST_gf_NS_RemoveEyeDarts();
    autoCAA2A321_ai = 1;
    autoCAA2A321_ae = UserDataInstanceCount("Clickable")+1;
    while (autoCAA2A321_ai < autoCAA2A321_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoCAA2A321_ai);
        libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_indexClickable), "InstantHeadOnly");
        libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_indexClickable), "InstantHeadOnlySubtle");
        libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_indexClickable), "Turret_Right");
        libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_indexClickable), "Turret_Left");
        libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_indexClickable), "InstantEyesOnly");
        libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lv_indexClickable), "AnimCancelActiveBlends ::Conversation");
        autoCAA2A321_ai = autoCAA2A321_ai+1;
    }
    libNCST_gf_StoryCinematicMode(false);
    libNCST_gv_nS_ConvoActive = false;
    libNCST_gv_nS_ScriptedLineCallback = null;
    if (((lp_fadeStyle & libNCST_ge_NS_FadeStyle_FadeInAfter) != 0)) {
        libNCST_gf_StoryCutsceneFade(true, 0.5, false);
    }
    else if (((lp_fadeStyle & libNCST_ge_NS_FadeStyle_InstantFadeInAfter) != 0)) {
        libNCST_gf_StoryCutsceneFade(true, 0.0, false);
    }
}

void libNCST_gf_NS_ConversationPlayResponse (string lp_character, string lp_conversation, bool lp_waitOrNot) {
    // Implementation
    if ((libNCST_gv_nS_AmbientCharacter == lp_character)) {
        return ;
    }

    ConversationDataStop();
    TransmissionClearAll();
    libNCST_gv_nS_AmbientCharacter = lp_character;
    if ((lp_conversation == null)) {
        libNCST_gv_nS_ResponseConversation = libNCST_gf_NS_ClickableResponse(lp_character);
    }
    else {
        libNCST_gv_nS_ResponseConversation = lp_conversation;
    }
    TriggerExecute(libNCST_gt_NS_ConversationResponseRun, true, lp_waitOrNot);
}

void libNCST_gf_NS_ConversationPlayAmbientLine (string lp_character, string lp_line, bool lp_waitOrNot) {
    // Implementation
    if ((libNCST_gv_nS_AmbientCharacter == lp_character)) {
        return ;
    }

    libNCST_gv_nS_AmbientCharacter = lp_character;
    libNCST_gv_nS_AmbientLine = lp_line;
    TriggerExecute(libNCST_gt_NS_ConversationAmbientTransmissionRun, true, lp_waitOrNot);
}

void libNCST_gf_NS_ConversationListenerSet (string lp_listenerCharacter) {
    // Implementation
    libNCST_gv_nS_ConvoListener = lp_listenerCharacter;
}

void libNCST_gf_NS_ConversationSceneOpen () {
    // Implementation
    CutsceneCreateNew(libNCST_gv_nS_RoomConvoSceneFiles[(libNCST_gv_nS_CurrentRoom)], libNCST_gv_nS_ConversationCutscenePosition, 0.0, PlayerGroupAll(), false);
    libNCST_gv_nS_ConversationScene = CutsceneLastCreated();
    CutsceneSetTime(libNCST_gv_nS_ConversationScene, 0);
    CutscenePause(libNCST_gv_nS_ConversationScene);
}

void libNCST_gf_NS_ConversationSceneClose () {
    // Implementation
    if ((libNCST_gv_nS_ConversationScene == c_cutsceneNone)) {
        return ;
    }

    CutsceneStop(libNCST_gv_nS_ConversationScene);
    libNCST_gv_nS_ConversationScene = c_cutsceneNone;
}

bool libNCST_gf_NS_ConversationLastWasSkipped () {
    // Implementation
    return libNCST_gv_nS_LastConversationSkipped;
}

void libNCST_gf_NS_ConversationAchievementCheck (string lp_character) {
}

void libNCST_gf_NS_ConversationCameraApply (string lp_clickable, string lp_cameraType) {
    // Variable Declarations
    string lv_indexClickable;
    trigger lv_callback;
    string lv_listener;

    // Variable Initialization

    // Implementation
    if ((libNCST_gv_nS_ConvoActive == false)) {
        return ;
    }

    libNCST_gv_nS_CurrentCamera = lp_cameraType;
    libNCST_gv_nS_CurrentSpeaker = lp_clickable;
    libNCST_gv_nS_SkipConversationCamera = false;
    libNCST_gv_nS_SkipConversationLookAt = false;
    if ((libNCST_gv_nS_CurrentConvoChar != null) && (libNCST_gf_NS_ClickableLineCallback(libNCST_gv_nS_CurrentConvoChar) != null)) {
        TriggerStop(libNCST_gf_NS_ClickableLineCallback(libNCST_gv_nS_CurrentConvoChar));
        TriggerExecute(libNCST_gf_NS_ClickableLineCallback(libNCST_gv_nS_CurrentConvoChar), true, true);
        if ((libNCST_gv_nS_SkipConversationCamera == true)) {
            return ;
        }

    }

    if ((libNCST_gv_nS_ScriptedLineCallback != null)) {
        TriggerStop(libNCST_gv_nS_ScriptedLineCallback);
        libNCST_gv_nS_SkipConversationCamera = false;
        TriggerExecute(libNCST_gv_nS_ScriptedLineCallback, true, true);
        if ((libNCST_gv_nS_SkipConversationCamera == true)) {
            return ;
        }

    }

    if (((libNCST_gv_nS_CurrentSpeaker == libNCST_gv_nS_CurrentConvoChar) || (libNCST_gv_nS_CurrentConvoChar == null))) {
        lv_listener = libNCST_gv_nS_ConvoListener;
    }
    else {
        lv_listener = libNCST_gv_nS_CurrentConvoChar;
    }
    if ((lv_listener != null) && ((lp_cameraType == "Cameras|FarListener") || (lp_cameraType == "Cameras|CloseUpListener") || (lp_cameraType == "Cameras|MediumListener") || (lp_cameraType == "Cameras|ShoulderListener") || (lp_cameraType == "Cameras|CustomCamera01Listener") || (lp_cameraType == "Cameras|CustomCamera02Listener") || (lp_cameraType == "Cameras|CustomCamera03Listener") || (lp_cameraType == "Cameras|CustomCamera04Listener"))) {
        libNCST_gf_NS_CutsceneCameraApply(libNCST_gf_NS_CameraOppositeShot(lp_cameraType), lv_listener);
        return ;
    }

    libNCST_gf_NS_CutsceneCameraApply(lp_cameraType, lp_clickable);
}

void libNCST_gf_NS_CutsceneCameraApply (string lp_cameraType, string lp_speaker) {
    int auto8B3C31D6_ai;
    int auto8B3C31D6_ae;

    // Variable Declarations
    actor lv_sceneActor;
    fixed lv_lineDuration;
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    if ((libNCST_gv_nS_ConversationScene == c_cutsceneNone)) {
        libNCST_gf_NS_ConversationSceneOpen();
    }

    SoundLengthQuery(SoundLink(ConversationDataActiveSound(), c_soundIndexAny));
    if (((ConversationDataActiveSound() == null) || (SoundLengthSync(SoundLink(ConversationDataActiveSound(), c_soundIndexAny)) == 0.0))) {
        lv_lineDuration = 10.0;
    }
    else {
        lv_lineDuration = SoundLengthSync(SoundLink(ConversationDataActiveSound(), c_soundIndexAny));
    }
    CutscenePlayCutsceneRangeOverTime(libNCST_gv_nS_ConversationScene, libNCST_gf_NS_SceneCameraBookmark(lp_speaker, lp_cameraType, "Start"), libNCST_gf_NS_SceneCameraBookmark(lp_speaker, lp_cameraType, "End"), lv_lineDuration);
    auto8B3C31D6_ai = 1;
    auto8B3C31D6_ae = UserDataInstanceCount("Clickable")+1;
    while (auto8B3C31D6_ai < auto8B3C31D6_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto8B3C31D6_ai);
        lv_sceneActor = ActorFrom(("::external." + libNCST_gf_NS_ClickableSceneFinderTag(lv_indexClickable)));
        ActorSend(lv_sceneActor, "SetTintColor 255,0,0");
        ActorSend(lv_sceneActor, "SetVisibility");
        libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lv_indexClickable), "HostSiteOpsSet ::Host");
        ActorSend(ActorFrom(("::external." + libNCST_gf_NS_ClickableActorAlias(lv_indexClickable))), (("SetBearingsFrom ::external." + libNCST_gf_NS_ClickableSceneFinderTag(lv_indexClickable))));
        auto8B3C31D6_ai = auto8B3C31D6_ai+1;
    }
    libNCST_gf_NS_ApplyConversationMainCharacterLookAt();
    libNCST_gf_NS_ApplyConversationCurrentCharacterLookAt();
}

void libNCST_gf_NS_CutsceneCameraApplyFull (string lp_cameraType, string lp_speaker, string lp_convoChar) {
    // Variable Declarations
    string lv_backupToken;
    string lv_backupConvoChar;
    string lv_backupSpeaker;

    // Variable Initialization
    lv_backupToken = "";

    // Implementation
    lv_backupConvoChar = libNCST_gv_nS_CurrentConvoChar;
    lv_backupSpeaker = libNCST_gv_nS_CurrentSpeaker;
    lv_backupToken = libNCST_gv_nS_ActiveConvoBookmarkToken;
    libNCST_gv_nS_CurrentSpeaker = lp_speaker;
    libNCST_gv_nS_CurrentConvoChar = lp_convoChar;
    libNCST_gv_nS_ActiveConvoBookmarkToken = libNCST_gf_NS_ClickableSceneNameToken(lp_convoChar);
    libNCST_gf_NS_CutsceneCameraApply(lp_cameraType, lp_speaker);
    libNCST_gv_nS_ActiveConvoBookmarkToken = lv_backupToken;
    libNCST_gv_nS_CurrentSpeaker = lv_backupSpeaker;
    libNCST_gv_nS_CurrentConvoChar = lv_backupConvoChar;
}

void libNCST_gf_NS_ApplyConversationMainCharacterLookAt () {
    // Variable Declarations
    string lv_mainCharacter;

    // Variable Initialization

    // Implementation
    libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(lv_mainCharacter), "InstantHeadOnly");
    if ((ActorFrom(libNCST_gv_NS_LookAtMainCharacterActorRef) != null)) {
        libNtve_gf_SimpleLookAtStart(libNCST_gf_ClickableUnit(lv_mainCharacter), "InstantHeadOnly", ActorFrom(libNCST_gv_NS_LookAtMainCharacterActorRef));
    }

}

void libNCST_gf_NS_ApplyConversationCurrentCharacterLookAt () {
    // Implementation
    libNtve_gf_SimpleLookAtStop(libNCST_gf_ClickableUnit(libNCST_gv_nS_CurrentConvoChar), "InstantHeadOnly");
    if ((ActorFrom(libNCST_gv_NS_LookAtCurrentCharacterActorRef) != null)) {
        libNtve_gf_SimpleLookAtStart(libNCST_gf_ClickableUnit(libNCST_gv_nS_CurrentConvoChar), "InstantHeadOnly", ActorFrom(libNCST_gv_NS_LookAtCurrentCharacterActorRef));
    }

}

void libNCST_gf_AddCharacterRedirect (string lp_sourceCharacter, string lp_targetClickable) {
    // Implementation
    DataTableSetString(true, (libNCST_gv_nSC_REDIRECTPREFIX + (lp_sourceCharacter)), ("Clickable;" + (lp_targetClickable)));
}

void libNCST_gf_ClearCharacterRedirect (string lp_sourceCharacter) {
    // Implementation
    DataTableValueRemove(true, (libNCST_gv_nSC_REDIRECTPREFIX + (lp_sourceCharacter)));
}

void libNCST_gf_SkipNextConversationCamera () {
    // Implementation
    libNCST_gv_nS_SkipConversationCamera = true;
}

void libNCST_gf_NS_ConversationLookAtSkipNext () {
    // Implementation
    libNCST_gv_nS_SkipConversationLookAt = true;
}

string libNCST_gf_NS_SceneCameraBookmark (string lp_speaker, string lp_camera, string lp_startEnd) {
    // Variable Declarations
    string lv_bookmarkString;

    // Variable Initialization
    lv_bookmarkString = "";

    // Implementation
    lv_bookmarkString = (libNCST_gv_nS_ActiveConvoBookmarkToken + " - " + libNCST_gf_NS_ClickableSceneNameToken(lp_speaker) + " " + libNCST_gf_NS_CameraAsString(lp_camera) + " " + (lp_startEnd));
    return lv_bookmarkString;
}

string libNCST_gf_NS_CameraAsString (string lp_cameraType) {
    string autoB7668CFC_val;

    // Implementation
    autoB7668CFC_val = lp_cameraType;
    if (autoB7668CFC_val == "Cameras|CloseUp") {
        return "Closeup";
    }
    else if (autoB7668CFC_val == "Cameras|CloseUpListener") {
        return "Closeup Listener";
    }
    else if (autoB7668CFC_val == "Cameras|CloseUp02") {
        return "Closeup 02";
    }
    else if (autoB7668CFC_val == "Cameras|CloseUp02Listener") {
        return "Closeup Listener 02";
    }
    else if (autoB7668CFC_val == "Cameras|ExtremeCloseup") {
        return "Extreme Closeup";
    }
    else if (autoB7668CFC_val == "Cameras|ExtremeCloseupListener") {
        return "Extreme Closeup Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Far") {
        return "Far";
    }
    else if (autoB7668CFC_val == "Cameras|FarListener") {
        return "Far Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Far02") {
        return "Far 02";
    }
    else if (autoB7668CFC_val == "Cameras|Far02Listener") {
        return "Far 02 Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Medium") {
        return "Medium";
    }
    else if (autoB7668CFC_val == "Cameras|MediumListener") {
        return "Medium Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Medium02") {
        return "Medium 02";
    }
    else if (autoB7668CFC_val == "Cameras|Medium02Listener") {
        return "Medium 02 Listener";
    }
    else if (autoB7668CFC_val == "Cameras|Shoulder") {
        return "Double";
    }
    else if (autoB7668CFC_val == "Cameras|ShoulderListener") {
        return "Double";
    }
    else if (autoB7668CFC_val == "Cameras|TwoShot") {
        return "Two Shot";
    }
    else if (autoB7668CFC_val == "Cameras|CustomCamera01") {
        return "Custom 01";
    }
    else if (autoB7668CFC_val == "Cameras|CustomCamera02") {
        return "Custom 02";
    }
    else if (autoB7668CFC_val == "Cameras|CustomCamera03") {
        return "Custom 03";
    }
    else if (autoB7668CFC_val == "Cameras|CustomCamera04") {
        return "Custom 04";
    }
    else {
    }
    return "Unknown";
}

string libNCST_gf_NS_ConversationCameraCurrent () {
    // Implementation
    return libNCST_gv_nS_CurrentCamera;
}

string libNCST_gf_NS_CurrentSpeaker () {
    // Implementation
    return libNCST_gv_nS_CurrentSpeaker;
}

string libNCST_gf_NS_CameraOppositeShot (string lp_cameraShot) {
    string autoC2420CBC_val;

    // Implementation
    autoC2420CBC_val = lp_cameraShot;
    if (autoC2420CBC_val == "Cameras|CloseUp") {
        return "Cameras|CloseUpListener";
    }
    else if (autoC2420CBC_val == "Cameras|ExtremeCloseup") {
        return "Cameras|ExtremeCloseupListener";
    }
    else if (autoC2420CBC_val == "Cameras|Medium") {
        return "Cameras|MediumListener";
    }
    else if (autoC2420CBC_val == "Cameras|Shoulder") {
        return "Cameras|ShoulderListener";
    }
    else if (autoC2420CBC_val == "Cameras|Far") {
        return "Cameras|FarListener";
    }
    else if (autoC2420CBC_val == "Cameras|TwoShot") {
        return "Cameras|TwoShot";
    }
    else if (autoC2420CBC_val == "Cameras|CloseUpListener") {
        return "Cameras|CloseUp";
    }
    else if (autoC2420CBC_val == "Cameras|ExtremeCloseupListener") {
        return "Cameras|ExtremeCloseup";
    }
    else if (autoC2420CBC_val == "Cameras|MediumListener") {
        return "Cameras|Medium";
    }
    else if (autoC2420CBC_val == "Cameras|ShoulderListener") {
        return "Cameras|Shoulder";
    }
    else if (autoC2420CBC_val == "Cameras|FarListener") {
        return "Cameras|Far";
    }
    else if (autoC2420CBC_val == "Cameras|CustomCamera01Listener") {
        return "Cameras|CustomCamera01";
    }
    else if (autoC2420CBC_val == "Cameras|CustomCamera02Listener") {
        return "Cameras|CustomCamera02";
    }
    else if (autoC2420CBC_val == "Cameras|CustomCamera03Listener") {
        return "Cameras|CustomCamera03";
    }
    else if (autoC2420CBC_val == "Cameras|CustomCamera04Listener") {
        return "Cameras|CustomCamera04";
    }
    else {
    }
    return null;
}

string libNCST_gf_NS_ClickableFromCharacter (string lp_character) {
    int auto37E1F7BC_ai;
    int auto37E1F7BC_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    if ((DataTableGetString(true, (libNCST_gv_nSC_REDIRECTPREFIX + (lp_character))) != "")) {
        return UserDataInstanceFromReference(DataTableGetString(true, (libNCST_gv_nSC_REDIRECTPREFIX + (lp_character))));
    }

    auto37E1F7BC_ai = 1;
    auto37E1F7BC_ae = UserDataInstanceCount("Clickable")+1;
    while (auto37E1F7BC_ai < auto37E1F7BC_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto37E1F7BC_ai);
        if ((libNCST_gf_NC_ClickableGameLink(lv_indexClickable) == lp_character)) {
            return lv_indexClickable;
        }

        auto37E1F7BC_ai = auto37E1F7BC_ai+1;
    }
    return null;
}

void libNCST_gf_NS_ConversationDataInit () {
    int auto83C0223C_ai;
    int auto83C0223C_ae;
    int auto6F10283C_ae;
    int auto6F10283C_ai;

    // Variable Declarations
    string lv_indexClickable;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto83C0223C_ai = 1;
    auto83C0223C_ae = UserDataInstanceCount("Clickable")+1;
    while (auto83C0223C_ai < auto83C0223C_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto83C0223C_ai);
        auto6F10283C_ae = ConversationDataStateIndexCount("Cameras");
        auto6F10283C_ai = 1;
        lv_index = 1;
        for ( ; ( (auto6F10283C_ai >= 0 && lv_index <= auto6F10283C_ae) || (auto6F10283C_ai <= 0 && lv_index >= auto6F10283C_ae) ) ; lv_index += auto6F10283C_ai ) {
            ConversationDataRegisterCamera(ConversationDataStateIndex("Cameras", lv_index), libNovC_gf_NC_ClickableConversationLink(lv_indexClickable), null, libNCST_gt_NS_ConversationCameraApply, true);
        }
        auto83C0223C_ai = auto83C0223C_ai+1;
    }
}

unit libNCST_gf_ClickableUnit (string lp_clickableInstance) {
    // Implementation
    return libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_unit;
}

unit libNCST_gf_NS_ClickableCalloutUnit (string lp_clickableInstance) {
    // Implementation
    return libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutUnit;
}

bool libNCST_gf_NS_ClickableIsNew (string lp_clickableInstance) {
    // Implementation
    return (UserDataGetInt("Clickable", lp_clickableInstance, "New", 1) == 1);
}

bool libNCST_gf_NS_ClickableIsEnabled (string lp_clickableInstance) {
    // Implementation
    return (UserDataGetInt("Clickable", lp_clickableInstance, "Enabled", 1) == 1);
}

string libNCST_gf_NS_ClickableSceneNameToken (string lp_clickableInstance) {
    // Implementation
    return UserDataGetString("Clickable", lp_clickableInstance, "SceneToken", 1);
}

int libNCST_gf_NS_ClickableIndex (string lp_clickableInstance) {
    // Implementation
    return UserDataGetInt("Clickable", lp_clickableInstance, "Index", 1);
}

text libNCST_gf_ClickableName (string lp_clickableInstance) {
    // Implementation
    if ((UserDataGetGameLink("Clickable", lp_clickableInstance, "Game Link", 1) == null)) {
        return UserDataGetText("Clickable", lp_clickableInstance, "Name", 1);
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, (UserDataGetGameLink("Clickable", lp_clickableInstance, "Game Link", 1)), "Name", c_playerAny));
}

text libNCST_gf_NS_ClickableCalloutSubtitle (string lp_clickableInstance) {
    // Implementation
    return UserDataGetText("Clickable", lp_clickableInstance, "Callout Subtitle", 1);
}

int libNCST_gf_NS_ClickableType (string lp_clickableInstance) {
    // Implementation
    return libNCST_gf_NS_ClickableIntToType(UserDataGetInt("Clickable", lp_clickableInstance, "Type", 1));
}

int libNCST_gf_NS_ClickableIntToType (int lp_typeIndex) {
    int auto3DE40EF2_val;

    // Implementation
    auto3DE40EF2_val = lp_typeIndex;
    if (auto3DE40EF2_val == libNCST_ge_ClickableType_Conversation) {
        return libNCST_ge_ClickableType_Conversation;
    }
    else if (auto3DE40EF2_val == libNCST_ge_ClickableType_Ambient) {
        return libNCST_ge_ClickableType_Ambient;
    }
    else if (auto3DE40EF2_val == libNCST_ge_ClickableType_Custom) {
        return libNCST_ge_ClickableType_Custom;
    }
    else if (auto3DE40EF2_val == libNCST_ge_ClickableType_RoomChange) {
        return libNCST_ge_ClickableType_RoomChange;
    }
    else {
    }
    return libNCST_ge_ClickableType_Custom;
}

bool libNCST_gf_NS_ClickableIsBackground (string lp_clickableInstance) {
    // Implementation
    return (UserDataGetInt("Clickable", lp_clickableInstance, "Background", 1) == 1);
}

string libNCST_gf_NS_ClickableActorAlias (string lp_clickableInstance) {
    // Implementation
    return UserDataGetString("Clickable", lp_clickableInstance, "Alias", 1);
}

string libNCST_gf_NS_ClickableSceneFinderTag (string lp_clickableInstance) {
    // Implementation
    return UserDataGetString("Clickable", lp_clickableInstance, "SceneFinderTag", 1);
}

string libNCST_gf_NS_ClickableCalloutTag (string lp_clickableInstance) {
    // Implementation
    return UserDataGetString("Clickable", lp_clickableInstance, "CalloutAttach", 1);
}

string libNCST_gf_NS_ClickableConversation (string lp_clickableInstance) {
    // Implementation
    return UserDataGetGameLink("Clickable", lp_clickableInstance, "Conversation", 1);
}

string libNCST_gf_NS_ClickableAmbientConversation (string lp_clickableInstance) {
    // Implementation
    return UserDataGetGameLink("Clickable", lp_clickableInstance, "Ambient Conversation", 1);
}

string libNCST_gf_NS_ClickableGreetingConversation (string lp_clickableInstance) {
    // Implementation
    return UserDataGetGameLink("Clickable", lp_clickableInstance, "GreetingConversation", 1);
}

string libNCST_gf_NS_ClickableResponse (string lp_clickableInstance) {
    // Implementation
    return UserDataGetGameLink("Clickable", lp_clickableInstance, "Response", 1);
}

trigger libNCST_gf_NS_ClickableCustomCallback (string lp_clickableInstance) {
    // Implementation
    return libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_customCallback;
}

trigger libNCST_gf_NS_ClickablePreCallback (string lp_clickableInstance) {
    // Implementation
    return libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_preCallback;
}

trigger libNCST_gf_NS_ClickablePostCallback (string lp_clickableInstance) {
    // Implementation
    return libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_postCallback;
}

trigger libNCST_gf_NS_ClickableLineCallback (string lp_clickableInstance) {
    // Implementation
    return libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_lineCallback;
}

string libNCST_gf_NC_ClickableGameLink (string lp_characterInstance) {
    // Implementation
    return UserDataGetGameLink("Clickable", lp_characterInstance, "Game Link", 1);
}

bool libNCST_gf_ClickableInRoom (string lp_clickable, int lp_room) {
    // Implementation
    return libNCST_gf_NS_RoomHasUnit(lp_room, libNCST_gf_ClickableUnit(lp_clickable));
}

bool libNCST_gf_NS_ClickableCalloutAnchorToRight (string lp_clickable) {
    // Implementation
    return true;
}

void libNCST_gf_NS_ClickableSetUnit (string lp_clickableInstance, unit lp_unit) {
    int auto38BF952F_ae;
    int auto38BF952F_ai;

    // Variable Declarations
    bool lv_unitReplaced;
    unit lv_oldClickableUnit;
    int lv_indexRoom;

    // Variable Initialization

    // Implementation
    if ((libNCST_gf_ClickableUnit(lp_clickableInstance) != null)) {
        lv_unitReplaced = true;
        lv_oldClickableUnit = libNCST_gf_ClickableUnit(lp_clickableInstance);
        if ((libNCST_gf_NS_ClickableActorAlias(lp_clickableInstance) != null)) {
            libNCST_gf_StoryReplaceAliasedUnit(lv_oldClickableUnit, lp_unit);
        }

        auto38BF952F_ae = (libNCST_ge_Rooms_StoryRoomVoid);
        auto38BF952F_ai = 1;
        lv_indexRoom = 1;
        for ( ; ( (auto38BF952F_ai >= 0 && lv_indexRoom <= auto38BF952F_ae) || (auto38BF952F_ai <= 0 && lv_indexRoom >= auto38BF952F_ae) ) ; lv_indexRoom += auto38BF952F_ai ) {
            if ((libNCST_gf_NS_RoomHasUnit((lv_indexRoom), lv_oldClickableUnit) == true)) {
                libNCST_gf_AddRemoveUnitForRoom(false, lv_oldClickableUnit, (lv_indexRoom));
                libNCST_gf_AddRemoveUnitForRoom(true, lp_unit, (lv_indexRoom));
                break;
            }

        }
        UnitRemove(lv_oldClickableUnit);
    }

    libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_unit = lp_unit;
    libNCST_gf_NS_ClickableDataUpdate();
    ConversationDataRegisterUnit(libNovC_gf_NC_ClickableConversationLink(lp_clickableInstance), lp_unit);
    if ((libNCST_gf_NS_ClickableActorAlias(lp_clickableInstance) != null) && (lv_unitReplaced == false)) {
        libNCST_gf_StoryAddAliasedUnit(lp_unit, libNCST_gf_NS_ClickableActorAlias(lp_clickableInstance));
    }

}

void libNCST_gf_NS_ClickableUpdateCalloutUnit (string lp_clickable) {
    // Implementation
    if ((libNCST_gf_NS_ClickableCalloutUnit(lp_clickable) == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", 0, 1, libNCST_gf_StoryModeDefaultPosition());
        libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickable)].lv_calloutUnit = UnitLastCreated();
    }

    if ((libNCST_gf_NS_ClickableCalloutTag(lp_clickable) == "")) {
        return ;
    }

    libNtve_gf_SendActorMessageToUnit(libNCST_gf_NS_ClickableCalloutUnit(lp_clickable), "RefClear ::Host");
    ActorSend(libNtve_gf_MainActorofUnit(libNCST_gf_NS_ClickableCalloutUnit(lp_clickable)), (("RefSet ::Host ::external." + libNCST_gf_NS_ClickableCalloutTag(lp_clickable))));
}

void libNCST_gf_ClickableSetCustomCallback (string lp_clickableInstance, trigger lp_callback) {
    // Implementation
    libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_customCallback = lp_callback;
}

void libNCST_gf_ClickableSetPreCallback (string lp_clickableInstance, trigger lp_callback) {
    // Implementation
    libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_preCallback = lp_callback;
}

void libNCST_gf_ClickableSetPostCallback (string lp_clickableInstance, trigger lp_callback) {
    // Implementation
    libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_postCallback = lp_callback;
}

void libNCST_gf_ClickableSetLineCallback (string lp_clickableInstance, trigger lp_callback) {
    // Implementation
    libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_lineCallback = lp_callback;
}

void libNCST_gf_ClickableToggleBackground (string lp_clickableInstance, bool lp_background) {
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "Background", 1, BoolToInt(lp_background));
}

void libNCST_gf_ClickableSetNew (string lp_clickableInstance, bool lp_isNew) {
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "New", 1, BoolToInt(lp_isNew));
    libNCST_gf_NS_ClickableDisplayUpdate(lp_clickableInstance);
}

void libNCST_gf_ClickableSetEnabled (string lp_clickableInstance, bool lp_enabledDisabled) {
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "Enabled", 1, BoolToInt((lp_enabledDisabled == true)));
}

void libNCST_gf_TurnFidgetStatusForClickableOnOff (string lp_clickable, bool lp_onOff) {
    // Implementation
    if ((lp_onOff == false)) {
        libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lp_clickable), "Signal FidgetStatusOff");
    }
    else {
        if ((libNCST_gv_nS_ConvoActive == false)) {
            libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lp_clickable), "Signal FidgetStatusOn");
        }

    }
}

void libNCST_gf_TurnAlternateStatusForClickableOnOff (string lp_clickable, bool lp_onOff) {
    // Implementation
    if ((UserDataGetInt("Clickable", lp_clickable, "AlternateAnimationsEnabled", 1) == 1)) {
        if ((lp_onOff == false)) {
            libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lp_clickable), "Signal AlternateStatusOff");
        }
        else {
            if ((libNCST_gv_nS_ConvoActive == false)) {
                libNtve_gf_SendActorMessageToUnit(libNCST_gf_ClickableUnit(lp_clickable), "Signal AlternateStatusOn");
            }

        }
    }

}

void libNCST_gf_NS_ClickableSetIsVisibleOnSet (string lp_clickableInstance, bool lp_isVisibleOnSet) {
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "IsVisibleOnSet", 1, BoolToInt(lp_isVisibleOnSet));
}

void libNCST_gf_NS_ClickableSetLighting (string lp_clickableInstance, string lp_token) {
    // Variable Declarations
    string lv_setString;

    // Variable Initialization
    lv_setString = "";

    // Implementation
    if ((libNCST_gf_NS_SetLightingCutsceneFile() == null)) {
        return ;
    }

    return ;
}

void libNCST_gf_CreateClickable (string lp_clickableInstance, string lp_unitType, point lp_location) {
    // Variable Declarations
    string lv_unitType;

    // Variable Initialization

    // Implementation
    libNCST_gf_StoryCreateUnit(lp_unitType, lp_location, PointGetFacing(lp_location));
    libNCST_gf_NS_ClickableSetUnit(lp_clickableInstance, UnitLastCreated());
}

void libNCST_gf_AddRemoveClickableFromRoom (bool lp_addRemove, string lp_clickableInstance, int lp_room) {
    // Implementation
    libNCST_gf_AddRemoveUnitForRoom(lp_addRemove, libNCST_gf_ClickableUnit(lp_clickableInstance), lp_room);
}

void libNCST_gf_ClickableRemoveFromAllRooms (string lp_clickableInstance) {
    int autoC55C6076_ae;
    int autoC55C6076_ai;

    // Variable Declarations
    int lv_indexRoom;

    // Variable Initialization

    // Implementation
    autoC55C6076_ae = (libNCST_ge_Rooms_StoryRoomVoid);
    autoC55C6076_ai = 1;
    lv_indexRoom = 0;
    for ( ; ( (autoC55C6076_ai >= 0 && lv_indexRoom <= autoC55C6076_ae) || (autoC55C6076_ai <= 0 && lv_indexRoom >= autoC55C6076_ae) ) ; lv_indexRoom += autoC55C6076_ai ) {
        if ((libNCST_gf_NS_RoomHasUnit((lv_indexRoom), libNCST_gf_ClickableUnit(lp_clickableInstance)) == true)) {
            libNCST_gf_AddRemoveClickableFromRoom(false, lp_clickableInstance, (lv_indexRoom));
        }

    }
}

void libNCST_gf_NS_HideAllClickableLights () {
    int autoECCBBBDD_ai;
    int autoECCBBBDD_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    autoECCBBBDD_ai = 1;
    autoECCBBBDD_ae = UserDataInstanceCount("Clickable")+1;
    while (autoECCBBBDD_ai < autoECCBBBDD_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoECCBBBDD_ai);
        libNCST_gf_NS_ClickableHideLight(lv_indexClickable);
        autoECCBBBDD_ai = autoECCBBBDD_ai+1;
    }
}

void libNCST_gf_NS_ClickableActionRun (string lp_clickableInstance) {
    // Variable Declarations
    int lv_initialRoom;

    // Variable Initialization

    // Implementation
    lv_initialRoom = libNCST_gf_CurrentRoom();
    if ((libNCST_gf_NS_ClickableCustomCallback(lp_clickableInstance) != null)) {
        TriggerExecute(libNCST_gf_NS_ClickableCustomCallback(lp_clickableInstance), true, true);
    }
    else if (true) {
        libNCST_gf_NS_ConversationPlayClickable(lp_clickableInstance);
        libNCST_gf_NS_ConversationAchievementCheck(lp_clickableInstance);
    }
    if ((libNCST_gf_NS_ClickableType(lp_clickableInstance) != libNCST_ge_ClickableType_RoomChange) && ((libNCST_gf_CurrentStoryActivity() != libNCST_ge_StoryActivities_ViewingRoom) || (libNCST_gf_CurrentRoom() != lv_initialRoom))) {
        libNCST_gf_EnterRoom(libNCST_gf_CurrentRoom());
        libNCST_gf_NS_ClickableDataUpdate();
    }

}

void libNCST_gf_NS_ClickableHideLight (string lp_clickableInstance) {
    // Implementation
    if ((libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_lightingCutscene == c_cutsceneNone)) {
        return ;
    }

    CutsceneShow(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_lightingCutscene, false);
}

void libNCST_gf_ClickableSetType (string lp_clickableInstance, int lp_type) {
    // Implementation
    UserDataSetInt("Clickable", lp_clickableInstance, "Type", 1, (lp_type));
}

void libNCST_gf_NS_ClickableSetLink (string lp_clickableInstance, string lp_link) {
    // Implementation
    libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_conversationLink = lp_link;
}

void libNCST_gf_NS_ClickableSetCalloutName (string lp_clickableInstance) {
    // Implementation
    libNtve_gf_SetDialogItemText(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutName, libNCST_gf_ClickableName(lp_clickableInstance), PlayerGroupAll());
}

void libNCST_gf_NS_ClickableCursorUpdate (string lp_clickableInstance) {
    // Implementation
    if ((libNCST_gf_ClickableUnit(lp_clickableInstance) == null)) {
        return ;
    }

    if ((libNCST_gf_NS_ClickableIsEnabled(lp_clickableInstance) == false)) {
        UnitSetCursor(libNCST_gf_ClickableUnit(lp_clickableInstance), "Arrow_Prot");
    }
    else if ((libNCST_gf_NS_ClickableIsBackground(lp_clickableInstance) == true)) {
        UnitSetCursor(libNCST_gf_ClickableUnit(lp_clickableInstance), "Arrow_Prot");
    }
    else if ((libNCST_gf_NS_ClickableType(lp_clickableInstance) == libNCST_ge_ClickableType_Ambient)) {
        UnitSetCursor(libNCST_gf_ClickableUnit(lp_clickableInstance), "InteractiveLook");
    }
    else if ((libNCST_gf_NS_ClickableType(lp_clickableInstance) == libNCST_ge_ClickableType_RoomChange)) {
        UnitSetCursor(libNCST_gf_ClickableUnit(lp_clickableInstance), "InteractiveActivate");
    }
    else if ((libNCST_gf_NS_ClickableType(lp_clickableInstance) == libNCST_ge_ClickableType_Custom)) {
        UnitSetCursor(libNCST_gf_ClickableUnit(lp_clickableInstance), "InteractiveActivate");
    }
    else if (true) {
        UnitSetCursor(libNCST_gf_ClickableUnit(lp_clickableInstance), "InteractiveTalk");
    }
}

void libNCST_gf_NS_ClickableCalloutUpdate (string lp_clickableInstance) {
    // Variable Declarations
    string lv_attachmentPoint;
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    if ((libNCST_gv_nS_RoomUICutscene == c_cutsceneNone)) {
        return ;
    }

    if (((libNCST_gf_ClickableUnit(lp_clickableInstance) == null) || (libNtve_gf_UnitIsVisibleToPlayer(libNCST_gf_ClickableUnit(lp_clickableInstance), 1) == false))) {
        return ;
    }

    lv_attachmentPoint = "Ref_Xil";
    if ((libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_callout == c_invalidDialogControlId)) {
        DialogCreate(500, 300, c_anchorCenter, 0, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        if ((libNCST_gf_NS_ClickableCalloutAnchorToRight(lp_clickableInstance) == true)) {
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_StorySet/UnitCalloutRightTemplate");
        }
        else {
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_StorySet/UnitCalloutLeftTemplate");
        }
        libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_callout = DialogControlLastCreated();
        libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog = DialogLastCreated();
        DialogControlHookup(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_callout, c_triggerControlTypeLabel, "NameLabel");
        libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutName = DialogControlLastCreated();
        libNCST_gf_NS_ClickableSetCalloutName(lp_clickableInstance);
        DialogControlHookup(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_callout, c_triggerControlTypeLabel, "SubNameLabel");
        libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutSubtitle = DialogControlLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }

    if ((libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_callout != c_invalidDialogControlId)) {
        if ((libNCST_gf_NS_ClickableCalloutAnchorToRight(lp_clickableInstance) == true)) {
            DialogSetPositionRelativeToUnit(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog, libNCST_gf_ClickableUnit(lp_clickableInstance), lv_attachmentPoint, (0 - DialogGetWidth(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog)), (0 - (DialogGetHeight(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog) / 2)));
        }
        else {
            DialogSetPositionRelativeToUnit(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog, libNCST_gf_ClickableUnit(lp_clickableInstance), lv_attachmentPoint, 0, (0 - (DialogGetHeight(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutDialog) / 2)));
        }
    }

    libNtve_gf_SetDialogItemText(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutSubtitle, libNCST_gf_NS_ClickableCalloutSubtitle(lp_clickableInstance), PlayerGroupAll());
    if ((libNCST_gf_NS_ClickableIsNew(lp_clickableInstance) == false)) {
        DialogControlSetVisible(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutSubtitle, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_calloutSubtitle, PlayerGroupAll(), true);
    }
}

void libNCST_gf_NS_ClickableDisplayUpdate (string lp_clickableInstance) {
    // Implementation
    if ((libNCST_gf_ClickableUnit(lp_clickableInstance) == null)) {
        return ;
    }

    if (((libNCST_gv_nS_InteractionOn == false) || (libNCST_gf_NS_ClickableIsEnabled(lp_clickableInstance) == false))) {
        UnitSetState(libNCST_gf_ClickableUnit(lp_clickableInstance), c_unitStateHighlightable, false);
    }
    else {
        UnitSetState(libNCST_gf_ClickableUnit(lp_clickableInstance), c_unitStateHighlightable, true);
    }
    libNCST_gf_NS_ClickableCalloutUpdate(lp_clickableInstance);
    if ((libNCST_gf_NS_ClickableIsNew(lp_clickableInstance) == true) && (libNCST_gf_NS_ClickableIsEnabled(lp_clickableInstance) == true) && (libNCST_gf_ClickableInRoom(lp_clickableInstance, libNCST_gf_CurrentRoom()) == true) && (libNCST_gv_nS_InteractionOn == true)) {
        libNCST_gf_NS_ClickableCalloutShowHide(true, lp_clickableInstance);
    }
    else {
        libNCST_gf_NS_ClickableCalloutShowHide(false, lp_clickableInstance);
    }
    libNCST_gf_NS_ClickableCursorUpdate(lp_clickableInstance);
}

void libNCST_gf_NS_ClickableDisplayUpdateAll () {
    int auto8B6E3BA7_ai;
    int auto8B6E3BA7_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    auto8B6E3BA7_ai = 1;
    auto8B6E3BA7_ae = UserDataInstanceCount("Clickable")+1;
    while (auto8B6E3BA7_ai < auto8B6E3BA7_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto8B6E3BA7_ai);
        libNCST_gf_NS_ClickableDisplayUpdate(lv_indexClickable);
        auto8B6E3BA7_ai = auto8B6E3BA7_ai+1;
    }
}

void libNCST_gf_NS_ClickableCalloutShowHide (bool lp_showHide, string lp_clickableInstance) {
    // Variable Declarations
    int lv_callout;

    // Variable Initialization
    lv_callout = libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_callout;

    // Implementation
    if ((lv_callout == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(lv_callout, PlayerGroupAll(), lp_showHide);
}

void libNCST_gf_NS_ClickableCalloutHighlight (bool lp_highlight, string lp_clickableInstance) {
    // Variable Declarations
    int lv_callout;

    // Variable Initialization
    lv_callout = libNCST_gv_nS_Clickable[libNCST_gf_NS_ClickableIndex(lp_clickableInstance)].lv_callout;

    // Implementation
    if ((lv_callout == c_invalidDialogControlId)) {
        return ;
    }

    if ((lp_highlight == true)) {
        DialogControlSendAnimationEvent(lv_callout, PlayerGroupAll(), "Highlight");
    }
    else {
        DialogControlSendAnimationEvent(lv_callout, PlayerGroupAll(), "HighlightStop");
    }
}

void libNCST_gf_NS_ClickableLoadModel (int lp_untitledParameter001) {
}

void libNCST_gf_NS_ClickableDataInit () {
    int autoA8BD363B_ai;
    int autoA8BD363B_ae;

    // Variable Declarations
    int lv_clickableIndex;
    string lv_indexClickable;

    // Variable Initialization
    lv_clickableIndex = 1;

    // Implementation
    autoA8BD363B_ai = 1;
    autoA8BD363B_ae = UserDataInstanceCount("Clickable")+1;
    while (autoA8BD363B_ai < autoA8BD363B_ae) {
        lv_indexClickable = UserDataInstance("Clickable", autoA8BD363B_ai);
        UserDataSetInt("Clickable", lv_indexClickable, "Index", 1, lv_clickableIndex);
        lv_clickableIndex += 1;
        libNCST_gf_ClickableSetNew(lv_indexClickable, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", 0, 1, libNCST_gf_StoryModeDefaultPosition());
        libNCST_gv_nS_Clickable[lv_clickableIndex].lv_calloutUnit = UnitLastCreated();
        autoA8BD363B_ai = autoA8BD363B_ai+1;
    }
    TriggerExecute(libNCST_gt_NS_ClickableCalloutInitDelayed, true, false);
}

void libNCST_gf_NS_ClickableDataUpdate () {
}

void libNCST_gf_ActivateDeactivateCreditsTriggers (bool lp_activateDeactivate) {
    // Implementation
    if ((lp_activateDeactivate == true)) {
        TriggerEnable(libNCUI_gt_NU_EndCredits, true);
        TriggerExecute(libNCST_gt_NS_CreditsDetectEnd, true, false);
    }
    else {
        TriggerEnable(libNCUI_gt_NU_EndCredits, false);
        TriggerEnable(libNCUI_gt_NU_EndCreditsEnds, false);
        TriggerEnable(libNCUI_gt_NU_EndCreditsLoopMusic, false);
        TriggerStop(libNCST_gt_NS_CreditsDetectEnd);
    }
}

bool libNCST_gf_NS_CreditsFinished () {
    // Implementation
    return libNCUI_gv_NU_EndCreditFinished;
}

void libNCST_gf_PlayStorymodeScene (string lp_scene, bool lp_playOnce) {
    // Variable Declarations
    trigger lv_callback;

    // Variable Initialization

    // Implementation
    if ((lp_playOnce == true) && (UserDataGetInt("Scenes", lp_scene, "Played", 1) == 1)) {
        return ;
    }

    UserDataSetInt("Scenes", lp_scene, "Played", 1, 1);
    if ((UserDataGetUserInstance("Scenes", lp_scene, "Type", 1) == "Prerender")) {
        libNCST_gf_StartStoryActivity(libNCST_ge_StoryActivities_Cinematic);
    }
    else {
        libNCST_gf_StartStoryActivity(libNCST_ge_StoryActivities_ScriptedScene);
    }
    libComC_gf_NC_MovieStartRecording((lp_scene));
    lv_callback = DataTableGetTrigger(true, (libNCST_gv_nSC_ScriptedScenePrefix + (lp_scene)));
    TriggerExecute(lv_callback, true, true);
    libComC_gf_NC_MovieStopRecording();
}

void libNCST_gf_RegisterStorymodeScene (string lp_scene, trigger lp_callback) {
    // Implementation
    DataTableSetTrigger(true, (libNCST_gv_nSC_ScriptedScenePrefix + (lp_scene)), lp_callback);
}

void libNCST_gf_PlayStorymodeCutscene (string lp_cutscene) {
    // Implementation
    libNCST_gv_nS_LastScenePlayedFull = true;
    CutsceneCreateNew(lp_cutscene, Point(64.0, 64.0), 0.0, PlayerGroupAll(), true);
    libNCST_gv_nS_Cutscene = CutsceneLastCreated();
    TriggerExecute(libNCST_gt_NS_CutsceneDetectSkipping, true, false);
    WaitForCutsceneToEnd(libNCST_gv_nS_Cutscene);
    libNCST_gf_StoryCutsceneFade(true, 0.0, false);
    TriggerStop(libNCST_gt_NS_CutsceneDetectSkipping);
    TriggerStop(libNCST_gt_NS_CutsceneSkipped);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugProgressSave
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugProgressSave_Func (bool testConds, bool runActions) {
    int auto79D6B584_ai;
    int auto79D6B584_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad(libComC_gf_CC_EventParameter(libNovC_ge_NC_Event_CampaignProgressCheatSave, 1), 1);
    UserDataSaveType("Clickable", BankLastCreated(), "Characters");
    auto79D6B584_ai = 1;
    auto79D6B584_ae = UserDataInstanceCount("Clickable")+1;
    while (auto79D6B584_ai < auto79D6B584_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto79D6B584_ai);
        ConversationDataSaveNodeState(libNCST_gf_NS_ClickableConversation(lv_indexClickable), BankLastCreated(), "Conversations");
        auto79D6B584_ai = auto79D6B584_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugProgressSave_Init () {
    libNCST_gt_NS_DebugProgressSave = TriggerCreate("libNCST_gt_NS_DebugProgressSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugProgressLoad
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugProgressLoad_Func (bool testConds, bool runActions) {
    int auto3A2971A6_ai;
    int auto3A2971A6_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad(libComC_gf_CC_EventParameter(libNovC_ge_NC_Event_CampaignProgressCheatLoad, 1), 1);
    UserDataLoadType("Clickable", BankLastCreated(), "Characters");
    auto3A2971A6_ai = 1;
    auto3A2971A6_ae = UserDataInstanceCount("Clickable")+1;
    while (auto3A2971A6_ai < auto3A2971A6_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto3A2971A6_ai);
        ConversationDataResetNodeState(libNCST_gf_NS_ClickableConversation(lv_indexClickable));
        ConversationDataLoadNodeState(libNCST_gf_NS_ClickableConversation(lv_indexClickable), BankLastCreated(), "Conversations");
        auto3A2971A6_ai = auto3A2971A6_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugProgressLoad_Init () {
    libNCST_gt_NS_DebugProgressLoad = TriggerCreate("libNCST_gt_NS_DebugProgressLoad_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugProgressCheatUsed
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugProgressCheatUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libNCST_gf_ShowHideStoryUI(false);
    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomDebugProgressCheat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugProgressCheatUsed_Init () {
    libNCST_gt_NS_DebugProgressCheatUsed = TriggerCreate("libNCST_gt_NS_DebugProgressCheatUsed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugProgressCheatCancelled
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugProgressCheatCancelled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_NS_SetCurrentLocation(libComC_gf_CurrentLocation(), false);
    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomMissionScreen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugProgressCheatCancelled_Init () {
    libNCST_gt_NS_DebugProgressCheatCancelled = TriggerCreate("libNCST_gt_NS_DebugProgressCheatCancelled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugTimeCode
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugTimeCode_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCST_gv_nS_DebugTimeCodeActive == false)) {
        PortraitCreate(50, 0, c_anchorLeft, 237, 360, "DebugModel_TimecodePortrait", "", "Stand", true, true);
        libNCST_gv_nS_DebugTimeCodePortrait = PortraitLastCreated();
        libNCST_gv_nS_DebugTimeCodeActive = true;
    }
    else {
        PortraitDestroy(libNCST_gv_nS_DebugTimeCodePortrait);
        libNCST_gv_nS_DebugTimeCodeActive = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugTimeCode_Init () {
    libNCST_gt_NS_DebugTimeCode = TriggerCreate("libNCST_gt_NS_DebugTimeCode_Func");
    TriggerAddEventChatMessage(libNCST_gt_NS_DebugTimeCode, c_playerAny, "-TimeCode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugStoryCheat
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugStoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_NS_DebugStorySaveStats();
    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomDebugStoryCheat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugStoryCheat_Init () {
    libNCST_gt_NS_DebugStoryCheat = TriggerCreate("libNCST_gt_NS_DebugStoryCheat_Func");
    TriggerAddEventChatMessage(libNCST_gt_NS_DebugStoryCheat, c_playerAny, "story", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugStoryCheatInit
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugStoryCheatInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_y;
    const int lv_titleWidth = 150;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(1400, 1000, c_anchorCenter, 0, 0, true);
    libNCST_gv_nS_DebugStoryDialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    libNCST_gv_nS_DebugStorySceneList = DialogControlLastCreated();
    DialogControlSetSize(libNCST_gv_nS_DebugStorySceneList, PlayerGroupAll(), 500, 300);
    DialogControlSetPosition(libNCST_gv_nS_DebugStorySceneList, PlayerGroupAll(), c_anchorTopLeft, 50, 50);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    libNCST_gv_nS_DebugStoryPreviewList = DialogControlLastCreated();
    DialogControlSetSize(libNCST_gv_nS_DebugStoryPreviewList, PlayerGroupAll(), 800, 300);
    DialogControlSetPosition(libNCST_gv_nS_DebugStoryPreviewList, PlayerGroupAll(), c_anchorTopRight, 50, 50);
    libNtve_gf_CreateDialogItemButton(libNCST_gv_nS_DebugStoryDialog, 200, 50, c_anchorBottomLeft, 50, 50, StringToText(""), StringExternal("Param/Value/lib_NCST_DC70862E"), "");
    libNCST_gv_nS_DebugStoryPlayButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libNCST_gv_nS_DebugStoryDialog, 200, 50, c_anchorBottomRight, 50, 50, StringToText(""), StringExternal("Param/Value/lib_NCST_3D85F733"), "");
    libNCST_gv_nS_DebugStoryCloseButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(libNCST_gv_nS_DebugStoryDialog, 60, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_NCST_C5DC5309"), Color(100,100,100), false, 2.0);
    libNCST_gv_nS_DebugStoryFilterLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNCST_gv_nS_DebugStoryFilterLabel, PlayerGroupAll(), c_anchorTopLeft, libNCST_gv_nS_DebugStorySceneList, c_anchorBottomLeft, 0, 20);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libNCST_gv_nS_DebugStoryFilterEditBox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPositionRelative(libNCST_gv_nS_DebugStoryFilterEditBox, PlayerGroupAll(), c_anchorLeft, libNCST_gv_nS_DebugStoryFilterLabel, c_anchorRight, 0, -15);
    libNtve_gf_CreateDialogItemLabel(libNCST_gv_nS_DebugStoryDialog, 150, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_NCST_0FA8FF05"), Color(100,100,100), false, 2.0);
    libNCST_gv_nS_DebugStoryConvoTypeLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNCST_gv_nS_DebugStoryConvoTypeLabel, PlayerGroupAll(), c_anchorLeft, libNCST_gv_nS_DebugStoryFilterEditBox, c_anchorRight, 15, 15);
    DialogControlCreate(libNCST_gv_nS_DebugStoryDialog, c_triggerControlTypeCheckBox);
    libNCST_gv_nS_DebugStoryConvoTypeCheckbox = DialogControlLastCreated();
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPositionRelative(libNCST_gv_nS_DebugStoryConvoTypeCheckbox, PlayerGroupAll(), c_anchorLeft, libNCST_gv_nS_DebugStoryConvoTypeLabel, c_anchorRight, 0, -15);
    libNtve_gf_CreateDialogItemLabel(libNCST_gv_nS_DebugStoryDialog, 80, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_NCST_1F9F798F"), Color(100,100,100), false, 2.0);
    libNCST_gv_nS_DebugStorySceneTypeLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNCST_gv_nS_DebugStorySceneTypeLabel, PlayerGroupAll(), c_anchorLeft, libNCST_gv_nS_DebugStoryConvoTypeCheckbox, c_anchorRight, 15, 15);
    DialogControlCreate(libNCST_gv_nS_DebugStoryDialog, c_triggerControlTypeCheckBox);
    libNCST_gv_nS_DebugStorySceneTypeCheckbox = DialogControlLastCreated();
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPositionRelative(libNCST_gv_nS_DebugStorySceneTypeCheckbox, PlayerGroupAll(), c_anchorLeft, libNCST_gv_nS_DebugStorySceneTypeLabel, c_anchorRight, 0, -15);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugStoryCheatInit_Init () {
    libNCST_gt_NS_DebugStoryCheatInit = TriggerCreate("libNCST_gt_NS_DebugStoryCheatInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugStoryCheatSceneListSelect
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugStoryCheatSceneListSelect_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCST_gv_nS_DebugStorySceneList))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gv_nS_DebugStorySelectedIndex = DialogControlGetSelectedItem(libNCST_gv_nS_DebugStorySceneList, 1);
    DialogControlSetEnabled(libNCST_gv_nS_DebugStoryPlayButton, PlayerGroupAll(), true);
    libNCST_gf_NS_DebugStoryCheatUpdateSelection();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugStoryCheatSceneListSelect_Init () {
    libNCST_gt_NS_DebugStoryCheatSceneListSelect = TriggerCreate("libNCST_gt_NS_DebugStoryCheatSceneListSelect_Func");
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatSceneListSelect, false);
    TriggerAddEventDialogControl(libNCST_gt_NS_DebugStoryCheatSceneListSelect, 1, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugStoryCheatFilterChange
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugStoryCheatFilterChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCST_gv_nS_DebugStoryFilterEditBox != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libNCST_gv_nS_DebugStoryFilterEditBox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_NS_DebugStoryCheatUpdateList();
    libNCST_gv_nS_DebugStorySelectedIndex = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugStoryCheatFilterChange_Init () {
    libNCST_gt_NS_DebugStoryCheatFilterChange = TriggerCreate("libNCST_gt_NS_DebugStoryCheatFilterChange_Func");
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatFilterChange, false);
    TriggerAddEventDialogControl(libNCST_gt_NS_DebugStoryCheatFilterChange, 1, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugStoryCheatCheckbox
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugStoryCheatCheckbox_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libNCST_gv_nS_DebugStoryConvoTypeCheckbox) || (EventDialogControl() == libNCST_gv_nS_DebugStorySceneTypeCheckbox)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_NS_DebugStoryCheatUpdateList();
    libNCST_gv_nS_DebugStorySelectedIndex = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugStoryCheatCheckbox_Init () {
    libNCST_gt_NS_DebugStoryCheatCheckbox = TriggerCreate("libNCST_gt_NS_DebugStoryCheatCheckbox_Func");
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatCheckbox, false);
    TriggerAddEventDialogControl(libNCST_gt_NS_DebugStoryCheatCheckbox, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugStoryCheatPlay
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugStoryCheatPlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_callback;
    string lv_scene;
    int lv_index;
    int lv_typeIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCST_gv_nS_DebugStoryPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libNCST_gv_nS_DebugStoryPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCST_gv_nS_DebugStoryListType[libNCST_gv_nS_DebugStorySelectedIndex] == "Conversations")) {
        libNCST_gf_NS_DebugStoryCheatHide();
        libNCST_gf_ClickableSetType(UserDataGetUserInstance("Conversations", libNCST_gv_nS_DebugStoryListInstance[libNCST_gv_nS_DebugStorySelectedIndex], "PrimaryCharacter", 1), libNCST_ge_ClickableType_Conversation);
        libComC_gf_CC_EventDispatch(libNovC_ge_NC_Event_StoryStoryCheatPlay, "", "", false);
        libNCST_gf_ChangeRoom(libNCST_gf_NS_DebugRoomFromString(UserDataGetString("Conversations", libNCST_gv_nS_DebugStoryListInstance[libNCST_gv_nS_DebugStorySelectedIndex], "Room", 1)));
        UISetWorldVisible(PlayerGroupAll(), true);
        libNCST_gf_NS_ConversationPlayClickable(UserDataGetUserInstance("Conversations", libNCST_gv_nS_DebugStoryListInstance[libNCST_gv_nS_DebugStorySelectedIndex], "PrimaryCharacter", 1));
        libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomDebugStoryCheat);
        return true;
    }

    if ((libNCST_gv_nS_DebugStoryListType[libNCST_gv_nS_DebugStorySelectedIndex] == "Scenes")) {
        libNCST_gf_NS_DebugStoryCheatHide();
        libNCST_gf_PlayStorymodeScene(libNCST_gv_nS_DebugStoryListInstance[libNCST_gv_nS_DebugStorySelectedIndex], false);
        libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomDebugStoryCheat);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugStoryCheatPlay_Init () {
    libNCST_gt_NS_DebugStoryCheatPlay = TriggerCreate("libNCST_gt_NS_DebugStoryCheatPlay_Func");
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatPlay, false);
    TriggerAddEventDialogControl(libNCST_gt_NS_DebugStoryCheatPlay, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugStoryCheatClose
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugStoryCheatClose_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCST_gv_nS_DebugStoryCloseButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libNCST_gv_nS_DebugStoryCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_NS_DebugStoryCheatUpdateList();
    libNCST_gf_NS_DebugStoryCheatHide();
    libNCST_gf_NS_DebugStoryRestoreStats();
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatSceneListSelect, false);
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatFilterChange, false);
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatPlay, false);
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatClose, false);
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatCheckbox, false);
    libNCST_gf_EnterRoom(libNCST_gv_nS_DebugStoryOriginalRoom);
    libNCST_gv_nS_InStoryCheat = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugStoryCheatClose_Init () {
    libNCST_gt_NS_DebugStoryCheatClose = TriggerCreate("libNCST_gt_NS_DebugStoryCheatClose_Func");
    TriggerEnable(libNCST_gt_NS_DebugStoryCheatClose, false);
    TriggerAddEventDialogControl(libNCST_gt_NS_DebugStoryCheatClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_SaveStoryDataCallback
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_SaveStoryDataCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gv_nS_IsLeavingMap = true;
    libNCST_gf_NS_SaveStoryData();
    if ((libComC_gf_CC_EventParameter(libNovC_ge_NC_Event_CampaignMapTransition, 1) == "Mission")) {
        libNCST_gf_NS_SaveForExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_SaveStoryDataCallback_Init () {
    libNCST_gt_NS_SaveStoryDataCallback = TriggerCreate("libNCST_gt_NS_SaveStoryDataCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_StoryModeMenuQuit
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_StoryModeMenuQuit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_ShowHideStoryUI(false);
    libNCST_gf_ToggleInteractives(false);
    libNCST_gf_StoryCutsceneFade(false, 0.1, false);
    Wait(0.0625, c_timeGame);
    libNCST_gf_NS_SaveForExit();
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_StoryModeMenuQuit_Init () {
    libNCST_gt_NS_StoryModeMenuQuit = TriggerCreate("libNCST_gt_NS_StoryModeMenuQuit_Func");
    TriggerAddEventGameMenuItemSelected(libNCST_gt_NS_StoryModeMenuQuit, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_SaveGameStart
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_SaveGameStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_CC_TransitionPrepareSaveOnly();
    libNCST_gf_NS_SaveStoryData();
    libNCST_gf_NS_TransitionalSave();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_SaveGameStart_Init () {
    libNCST_gt_NS_SaveGameStart = TriggerCreate("libNCST_gt_NS_SaveGameStart_Func");
    TriggerAddEventSaveGame(libNCST_gt_NS_SaveGameStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_SaveGameEnd
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_SaveGameEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCST_gv_nS_TransitionBank != null)) {
        BankRemove(libNCST_gv_nS_TransitionBank);
        libNCST_gv_nS_TransitionBank = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_SaveGameEnd_Init () {
    libNCST_gt_NS_SaveGameEnd = TriggerCreate("libNCST_gt_NS_SaveGameEnd_Func");
    TriggerAddEventSaveGameDone(libNCST_gt_NS_SaveGameEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_StoryPerformFadeIn
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_StoryPerformFadeIn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CutsceneFade(false, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    Wait(0.0625, c_timeGame);
    CutsceneFade(true, libNCST_gv_nS_StoryFadeDuration, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_StoryPerformFadeIn_Init () {
    libNCST_gt_NS_StoryPerformFadeIn = TriggerCreate("libNCST_gt_NS_StoryPerformFadeIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventCampaignResetData
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventCampaignResetData_Func (bool testConds, bool runActions) {
    int auto2E4312ED_ai;
    int auto2E4312ED_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataResetType("StoryStates");
    libNCST_gf_NS_SetCurrentLocation("DefendersofManSecretBase", true);
    libNCST_gf_NS_ClickableDataInit();
    auto2E4312ED_ai = 1;
    auto2E4312ED_ae = UserDataInstanceCount("Clickable")+1;
    while (auto2E4312ED_ai < auto2E4312ED_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto2E4312ED_ai);
        ConversationDataResetNodeState(libNCST_gf_NS_ClickableConversation(lv_indexClickable));
        ConversationDataResetNodeState(libNCST_gf_NS_ClickableAmbientConversation(lv_indexClickable));
        UserDataResetValue("Clickable", lv_indexClickable, "Unlocked", 1);
        auto2E4312ED_ai = auto2E4312ED_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventCampaignResetData_Init () {
    libNCST_gt_NS_EventCampaignResetData = TriggerCreate("libNCST_gt_NS_EventCampaignResetData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventUIArchive_Quit
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventUIArchive_Quit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_SetInArchives(false);
    libNCUI_gf_NU_ArchivesTurnOffButtons();
    if ((libComC_gf_CampaignIsComplete() == true)) {
        libComC_gf_CinematicFade(false, 0.4, Color(0.00, 0.00, 0.00), true);
        Wait(0.0625, c_timeGame);
        libNCST_gf_NS_SaveForExit();
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    libComC_gf_CinematicFade(false, 0.4, Color(0.00, 0.00, 0.00), true);
    libNCST_gf_NS_SetCurrentLocation(libComC_gf_CurrentLocation(), false);
    libNCST_gf_EnterRoom(libNCST_gv_NS_RoomBeforeArchives);
    libComC_gf_CinematicFade(true, 0.3, Color(0.00, 0.00, 0.00), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventUIArchive_Quit_Init () {
    libNCST_gt_NS_EventUIArchive_Quit = TriggerCreate("libNCST_gt_NS_EventUIArchive_Quit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventUIArchive_PlayMission
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventUIArchive_PlayMission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_CC_StorySimulationMissionSet(libNCUI_gf_NU_ArchivesLastMissionSelected());
    libNCST_gf_NS_SetCurrentLocation(libComC_gf_CC_MissionLocation(libNCUI_gf_NU_ArchivesLastMissionSelected()), false);
    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomMissionScreen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventUIArchive_PlayMission_Init () {
    libNCST_gt_NS_EventUIArchive_PlayMission = TriggerCreate("libNCST_gt_NS_EventUIArchive_PlayMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventUIArchive_PlayScene
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventUIArchive_PlayScene_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_PlayStorymodeScene(libNCUI_gf_NU_ArchivesSelectedScene(), false);
    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomMissionArchives);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventUIArchive_PlayScene_Init () {
    libNCST_gt_NS_EventUIArchive_PlayScene = TriggerCreate("libNCST_gt_NS_EventUIArchive_PlayScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventUIMission_Launch
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventUIMission_Launch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_isSimulation;
    int lv_selectedDifficulty;

    // Variable Initialization
    lv_selectedDifficulty = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_selectedDifficulty = libNCUI_gf_NU_MissionSelectedDifficulty();
    libComC_gf_CC_EventDispatch(libNovC_ge_NC_Event_StoryMissionLaunch, "", "", true);
    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomVoid);
    libNCST_gf_ShowHideStoryUI(false);
    libNovC_gf_NC_UpdateCampaignIndex(libNCUI_gf_NU_NextAvailableMission());
    if ((libComC_gf_CC_StoryInSimulation() == true)) {
        lv_isSimulation = true;
        libComC_gf_CC_StorySimulationEnd();
    }

    libComC_gf_LaunchMission(libNCUI_gf_NU_NextAvailableMission(), lv_isSimulation, lv_selectedDifficulty);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventUIMission_Launch_Init () {
    libNCST_gt_NS_EventUIMission_Launch = TriggerCreate("libNCST_gt_NS_EventUIMission_Launch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventUIMission_Quit
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventUIMission_Quit_Func (bool testConds, bool runActions) {
    int auto404734DB_ai;
    int auto404734DB_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCUI_gv_nU_MissionQuitToggle == true)) {
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    auto404734DB_ai = 1;
    auto404734DB_ae = UserDataInstanceCount("Clickable")+1;
    while (auto404734DB_ai < auto404734DB_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto404734DB_ai);
        ConversationDataRegisterPortrait(libNovC_gf_NC_ClickableConversationLink(lv_indexClickable), c_invalidPortraitId);
        ConversationDataRegisterUnit(libNovC_gf_NC_ClickableConversationLink(lv_indexClickable), libNCST_gf_ClickableUnit(lv_indexClickable));
        auto404734DB_ai = auto404734DB_ai+1;
    }
    libNCST_gf_NS_ConversationDataInit();
    if ((libComC_gf_CC_StoryInSimulation() == true)) {
        libComC_gf_CC_StorySimulationEnd();
        libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomMissionArchives);
    }
    else {
        libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomMissionScreen);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventUIMission_Quit_Init () {
    libNCST_gt_NS_EventUIMission_Quit = TriggerCreate("libNCST_gt_NS_EventUIMission_Quit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventUIEquipment_Open
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventUIEquipment_Open_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomEquipment);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventUIEquipment_Open_Init () {
    libNCST_gt_NS_EventUIEquipment_Open = TriggerCreate("libNCST_gt_NS_EventUIEquipment_Open_Func");
    libNCUI_gf_NU_EquipmentOpened(libNCST_gt_NS_EventUIEquipment_Open);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventUIEquipment_Close
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventUIEquipment_Close_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomMissionScreen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventUIEquipment_Close_Init () {
    libNCST_gt_NS_EventUIEquipment_Close = TriggerCreate("libNCST_gt_NS_EventUIEquipment_Close_Func");
    libNCUI_gf_NU_EquipmentClosed(libNCST_gt_NS_EventUIEquipment_Close);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventUIUpgrades_Open
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventUIUpgrades_Open_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomArmyUpgrade);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventUIUpgrades_Open_Init () {
    libNCST_gt_NS_EventUIUpgrades_Open = TriggerCreate("libNCST_gt_NS_EventUIUpgrades_Open_Func");
    libNCUI_gf_NU_UpgradesOpened(libNCST_gt_NS_EventUIUpgrades_Open);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_EventUIUpgrades_Close
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_EventUIUpgrades_Close_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomMissionScreen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_EventUIUpgrades_Close_Init () {
    libNCST_gt_NS_EventUIUpgrades_Close = TriggerCreate("libNCST_gt_NS_EventUIUpgrades_Close_Func");
    libNCUI_gf_NU_UpgradesClosed(libNCST_gt_NS_EventUIUpgrades_Close);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugBackgroundReset
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugBackgroundReset_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_RemoveBackground(libNCST_gv_nS_CurrentRoom);
    libNCST_gf_DisplayBackground(libNCST_gv_nS_CurrentRoom);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugBackgroundReset_Init () {
    libNCST_gt_NS_DebugBackgroundReset = TriggerCreate("libNCST_gt_NS_DebugBackgroundReset_Func");
    TriggerAddEventChatMessage(libNCST_gt_NS_DebugBackgroundReset, c_playerAny, "BGReset", true);
    TriggerAddEventChatMessage(libNCST_gt_NS_DebugBackgroundReset, c_playerAny, "BackgroundReset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugBackgroundOff
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugBackgroundOff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_RemoveBackground(libNCST_gv_nS_CurrentRoom);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugBackgroundOff_Init () {
    libNCST_gt_NS_DebugBackgroundOff = TriggerCreate("libNCST_gt_NS_DebugBackgroundOff_Func");
    TriggerAddEventChatMessage(libNCST_gt_NS_DebugBackgroundOff, c_playerAny, "BGOff", true);
    TriggerAddEventChatMessage(libNCST_gt_NS_DebugBackgroundOff, c_playerAny, "BackgroundOff", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_DebugBackgroundOn
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_DebugBackgroundOn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_DisplayBackground(libNCST_gv_nS_CurrentRoom);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_DebugBackgroundOn_Init () {
    libNCST_gt_NS_DebugBackgroundOn = TriggerCreate("libNCST_gt_NS_DebugBackgroundOn_Func");
    TriggerAddEventChatMessage(libNCST_gt_NS_DebugBackgroundOn, c_playerAny, "BGOn", true);
    TriggerAddEventChatMessage(libNCST_gt_NS_DebugBackgroundOn, c_playerAny, "BackgroundOn", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_AmbientSceneEnded
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_AmbientSceneEnded_Func (bool testConds, bool runActions) {
    int autoF35DA8C7_ae;
    int autoF35DA8C7_ai;
    int autoF04E8F32_ae;
    int autoF04E8F32_ai;
    int autoE684077D_ae;
    int autoE684077D_ai;

    // Variable Declarations
    int lv_indexScene;
    int lv_indexRoom;
    int lv_indexEvent;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF35DA8C7_ae = libNCST_gv_pSC_MaxAmbientRooms;
    autoF35DA8C7_ai = 1;
    lv_indexRoom = 1;
    for ( ; ( (autoF35DA8C7_ai >= 0 && lv_indexRoom <= autoF35DA8C7_ae) || (autoF35DA8C7_ai <= 0 && lv_indexRoom >= autoF35DA8C7_ae) ) ; lv_indexRoom += autoF35DA8C7_ai ) {
        autoF04E8F32_ae = libNCST_gv_pSC_MaxAmbientScenes;
        autoF04E8F32_ai = 1;
        lv_indexScene = 1;
        for ( ; ( (autoF04E8F32_ai >= 0 && lv_indexScene <= autoF04E8F32_ae) || (autoF04E8F32_ai <= 0 && lv_indexScene >= autoF04E8F32_ae) ) ; lv_indexScene += autoF04E8F32_ai ) {
            autoE684077D_ae = libNCST_gv_pSC_MaxAmbientEvents;
            autoE684077D_ai = 1;
            lv_indexEvent = 1;
            for ( ; ( (autoE684077D_ai >= 0 && lv_indexEvent <= autoE684077D_ae) || (autoE684077D_ai <= 0 && lv_indexEvent >= autoE684077D_ae) ) ; lv_indexEvent += autoE684077D_ai ) {
                if ((EventCutsceneId() == libNCST_gv_NS_AmbientEvents[lv_indexRoom][lv_indexScene][lv_indexEvent])) {
                    libNCST_gv_NS_AmbientEvents[lv_indexRoom][lv_indexScene][lv_indexEvent] = c_cutsceneNone;
                    libNCST_gf_NS_AmbientEventFinished(lv_indexRoom, lv_indexScene);
                    return true;
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_AmbientSceneEnded_Init () {
    libNCST_gt_NS_AmbientSceneEnded = TriggerCreate("libNCST_gt_NS_AmbientSceneEnded_Func");
    TriggerAddEventCutsceneEndSceneFired(libNCST_gt_NS_AmbientSceneEnded, c_cutsceneNone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_AmbientSceneTimerExpired
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_AmbientSceneTimerExpired_Func (bool testConds, bool runActions) {
    int autoA476D0C5_ae;
    int autoA476D0C5_ai;
    int autoF9C823BA_ae;
    int autoF9C823BA_ai;

    // Variable Declarations
    string lv_nextAmbientScene;
    int lv_indexRoom;
    int lv_indexScene;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA476D0C5_ae = libNCST_gv_pSC_MaxAmbientRooms;
    autoA476D0C5_ai = 1;
    lv_indexRoom = 1;
    for ( ; ( (autoA476D0C5_ai >= 0 && lv_indexRoom <= autoA476D0C5_ae) || (autoA476D0C5_ai <= 0 && lv_indexRoom >= autoA476D0C5_ae) ) ; lv_indexRoom += autoA476D0C5_ai ) {
        autoF9C823BA_ae = libNCST_gv_pSC_MaxAmbientScenes;
        autoF9C823BA_ai = 1;
        lv_indexScene = 1;
        for ( ; ( (autoF9C823BA_ai >= 0 && lv_indexScene <= autoF9C823BA_ae) || (autoF9C823BA_ai <= 0 && lv_indexScene >= autoF9C823BA_ae) ) ; lv_indexScene += autoF9C823BA_ai ) {
            if ((libNCST_gv_nS_AmbientSceneTimer[lv_indexRoom][lv_indexScene] == EventTimer())) {
                lv_nextAmbientScene = UserDataGetUserInstance("AmbientScenes", libNCST_gv_nS_AmbientSceneInstance[lv_indexRoom][lv_indexScene], "NextScene", 1);
                if ((libNCST_gv_nS_AmbientSceneStatus[lv_indexRoom][lv_indexScene] == libNCST_ge_NS_AmbientSceneStatusType_NS_AmbientSceneFinished)) {
                    libNCST_gf_NS_AmbientSceneRemove(lv_indexRoom, lv_indexScene);
                }

                libNCST_gf_NS_AmbientScenePlay(lv_indexRoom, lv_nextAmbientScene);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_AmbientSceneTimerExpired_Init () {
    libNCST_gt_NS_AmbientSceneTimerExpired = TriggerCreate("libNCST_gt_NS_AmbientSceneTimerExpired_Func");
    TriggerAddEventTimer(libNCST_gt_NS_AmbientSceneTimerExpired, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_AmbientConversationTimerExpired
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_AmbientConversationTimerExpired_Func (bool testConds, bool runActions) {
    int autoC23605A7_ai;
    int autoC23605A7_ae;

    // Variable Declarations
    string lv_indexClickable;
    int lv_numberOfTalkingClickables;
    string[3] lv_listOfTalkingClickables;
    int lv_randomClickable;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCST_gv_NS_AmbientConversationValidRoom[(libNCST_gf_CurrentRoom())] == true)) {
        autoC23605A7_ai = 1;
        autoC23605A7_ae = UserDataInstanceCount("Clickable")+1;
        while (autoC23605A7_ai < autoC23605A7_ae) {
            lv_indexClickable = UserDataInstance("Clickable", autoC23605A7_ai);
            if ((libNCST_gf_ClickableInRoom(lv_indexClickable, libNCST_gf_CurrentRoom()) == true)) {
                if ((ConversationDataCanRun(UserDataGetGameLink("Clickable", lv_indexClickable, "Ambient Conversation", 1), false) == true)) {
                    lv_numberOfTalkingClickables = (lv_numberOfTalkingClickables + 1);
                    lv_listOfTalkingClickables[lv_numberOfTalkingClickables] = lv_indexClickable;
                }

            }

            autoC23605A7_ai = autoC23605A7_ai+1;
        }
        if ((lv_numberOfTalkingClickables > 0)) {
            lv_randomClickable = RandomInt(1, lv_numberOfTalkingClickables);
            if ((ConversationDataActiveSound() == "") && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
                libNCST_gf_NS_AmbientConversationStart();
                ConversationDataRun(UserDataGetGameLink("Clickable", lv_listOfTalkingClickables[lv_randomClickable], "Ambient Conversation", 1), PlayerGroupAll(), c_conversationSkipSimple, true);
                libNCST_gf_NS_AmbientConversationEnd();
            }
            else {
                libNCST_gf_StartAmbientConversationTimer();
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_AmbientConversationTimerExpired_Init () {
    libNCST_gt_NS_AmbientConversationTimerExpired = TriggerCreate("libNCST_gt_NS_AmbientConversationTimerExpired_Func");
    TriggerAddEventTimer(libNCST_gt_NS_AmbientConversationTimerExpired, libNCST_gv_NS_AmbientConversationTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_NS_AmbientConversationTrigger
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_Debug_NS_AmbientConversationTrigger_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libNCST_gv_NS_AmbientConversationTimer, 0.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_Debug_NS_AmbientConversationTrigger_Init () {
    libNCST_gt_Debug_NS_AmbientConversationTrigger = TriggerCreate("libNCST_gt_Debug_NS_AmbientConversationTrigger_Func");
    TriggerAddEventChatMessage(libNCST_gt_Debug_NS_AmbientConversationTrigger, c_playerAny, "talktome", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomPrepareUI
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomPrepareUI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupAll(), false);
    libNCST_gf_ShowHideStoryUnits(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomPrepareUI_Init () {
    libNCST_gt_NS_RoomPrepareUI = TriggerCreate("libNCST_gt_NS_RoomPrepareUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomPrepareMission
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomPrepareMission_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomPrepareMission_Init () {
    libNCST_gt_NS_RoomPrepareMission = TriggerCreate("libNCST_gt_NS_RoomPrepareMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomPrepareEquipment
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomPrepareEquipment_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomPrepareEquipment_Init () {
    libNCST_gt_NS_RoomPrepareEquipment = TriggerCreate("libNCST_gt_NS_RoomPrepareEquipment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomPrepareArmyUpgrade
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomPrepareArmyUpgrade_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomPrepareArmyUpgrade_Init () {
    libNCST_gt_NS_RoomPrepareArmyUpgrade = TriggerCreate("libNCST_gt_NS_RoomPrepareArmyUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewMission
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewMission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_ShowHideStoryUI(false);
    if ((libComC_gf_CC_StoryInSimulation() == true)) {
        libNCUI_gf_NU_MissionDisplay(libComC_gf_CC_StorySimulationMission());
    }
    else {
        libNCUI_gf_NU_MissionDisplay(libNCST_gf_NextAvailableMission());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewMission_Init () {
    libNCST_gt_NS_RoomViewMission = TriggerCreate("libNCST_gt_NS_RoomViewMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewEquipment
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewEquipment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_EquipmentDisplay();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewEquipment_Init () {
    libNCST_gt_NS_RoomViewEquipment = TriggerCreate("libNCST_gt_NS_RoomViewEquipment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewArmyUpgrade
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewArmyUpgrade_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_UpgradesDisplay();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewArmyUpgrade_Init () {
    libNCST_gt_NS_RoomViewArmyUpgrade = TriggerCreate("libNCST_gt_NS_RoomViewArmyUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewArchives
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewArchives_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_ToggleInteractives(false);
    libNCST_gf_ShowHideStoryUI(false);
    DialogClearSubtitlePositionOverride();
    DialogClearSubtitlePositionOverrideControl();
    libNCUI_gf_NU_ArchivesDisplay();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewArchives_Init () {
    libNCST_gt_NS_RoomViewArchives = TriggerCreate("libNCST_gt_NS_RoomViewArchives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewStoryCheat
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewStoryCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_ToggleInteractives(false);
    libNCST_gf_ShowHideStoryUI(false);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    UIClearBattleNetButtonOffset(PlayerGroupAll());
    libNCST_gf_NS_DebugStoryCheatDisplay();
    libNCST_gv_nS_InStoryCheat = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewStoryCheat_Init () {
    libNCST_gt_NS_RoomViewStoryCheat = TriggerCreate("libNCST_gt_NS_RoomViewStoryCheat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewProgressCheat
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewProgressCheat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_ToggleInteractives(false);
    libNCST_gf_ShowHideStoryUI(false);
    DialogSetSubtitlePositionOverride(c_invalidDialogId);
    UIClearBattleNetButtonOffset(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewProgressCheat_Init () {
    libNCST_gt_NS_RoomViewProgressCheat = TriggerCreate("libNCST_gt_NS_RoomViewProgressCheat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewStopMission
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewStopMission_Func (bool testConds, bool runActions) {
    int auto3D22C8A3_ai;
    int auto3D22C8A3_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNCST_gf_NextRoom() == libNCST_ge_Rooms_StoryRoomEquipment) || (libNCST_gf_NextRoom() == libNCST_ge_Rooms_StoryRoomArmyUpgrade))) {
        libNCUI_gf_NU_MissionTransition();
    }
    else {
        libNCUI_gf_NU_MissionClose();
    }
    auto3D22C8A3_ai = 1;
    auto3D22C8A3_ae = UserDataInstanceCount("Clickable")+1;
    while (auto3D22C8A3_ai < auto3D22C8A3_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto3D22C8A3_ai);
        ConversationDataRegisterPortrait(libNovC_gf_NC_ClickableConversationLink(lv_indexClickable), c_invalidPortraitId);
        ConversationDataRegisterUnit(libNovC_gf_NC_ClickableConversationLink(lv_indexClickable), libNCST_gf_ClickableUnit(lv_indexClickable));
        auto3D22C8A3_ai = auto3D22C8A3_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewStopMission_Init () {
    libNCST_gt_NS_RoomViewStopMission = TriggerCreate("libNCST_gt_NS_RoomViewStopMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewStopEquipment
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewStopEquipment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_EquipmentClose();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewStopEquipment_Init () {
    libNCST_gt_NS_RoomViewStopEquipment = TriggerCreate("libNCST_gt_NS_RoomViewStopEquipment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewStopArmyUpgrade
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewStopArmyUpgrade_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_UpgradesClose();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewStopArmyUpgrade_Init () {
    libNCST_gt_NS_RoomViewStopArmyUpgrade = TriggerCreate("libNCST_gt_NS_RoomViewStopArmyUpgrade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewStopArchives
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewStopArchives_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_ArchivesClosed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewStopArchives_Init () {
    libNCST_gt_NS_RoomViewStopArchives = TriggerCreate("libNCST_gt_NS_RoomViewStopArchives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_RoomViewStopStoryCheat
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_RoomViewStopStoryCheat_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_RoomViewStopStoryCheat_Init () {
    libNCST_gt_NS_RoomViewStopStoryCheat = TriggerCreate("libNCST_gt_NS_RoomViewStopStoryCheat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_ConversationWaitForSkip
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_ConversationWaitForSkip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, libNCST_gt_NS_ConversationCancelAndFade, true, false);
    while (true) {
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_ConversationWaitForSkip_Init () {
    libNCST_gt_NS_ConversationWaitForSkip = TriggerCreate("libNCST_gt_NS_ConversationWaitForSkip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_ConversationResponseRun
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_ConversationResponseRun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_originalCharacter;
    string lv_speakingCharacter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalCharacter = libNCST_gv_nS_AmbientCharacter;
    lv_speakingCharacter = lv_originalCharacter;
    libNCST_gf_TurnFidgetStatusForClickableOnOff(lv_speakingCharacter, false);
    if ((UserDataGetInt("Clickable", lv_originalCharacter, "AlternateAnimationsEnabled", 1) == 1)) {
        libNCST_gf_TurnAlternateStatusForClickableOnOff(lv_speakingCharacter, false);
    }

    ConversationDataRun(libNCST_gv_nS_ResponseConversation, PlayerGroupAll(), c_conversationSkipSimple, true);
    if ((libNCST_gv_nS_AmbientCharacter == lv_originalCharacter)) {
        libNCST_gv_nS_AmbientCharacter = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_ConversationResponseRun_Init () {
    libNCST_gt_NS_ConversationResponseRun = TriggerCreate("libNCST_gt_NS_ConversationResponseRun_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_ConversationAmbientTransmissionRun
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_ConversationAmbientTransmissionRun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_originalCharacter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalCharacter = libNCST_gv_nS_AmbientCharacter;
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(libNCST_gf_ClickableUnit(libNCST_gv_nS_AmbientCharacter), false, false, "Talk"), c_invalidPortraitId, SoundLink(ConversationDataGetSound(libNCST_gv_nS_AmbientLine, false), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    if ((libNCST_gv_nS_AmbientCharacter == lv_originalCharacter)) {
        libNCST_gv_nS_AmbientCharacter = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_ConversationAmbientTransmissionRun_Init () {
    libNCST_gt_NS_ConversationAmbientTransmissionRun = TriggerCreate("libNCST_gt_NS_ConversationAmbientTransmissionRun_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_ConversationCancelAndFade
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_ConversationCancelAndFade_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gv_nS_LastConversationSkipped = true;
    libNCST_gv_nS_LastScenePlayedFull = false;
    libNCST_gf_NS_SoundFadeAllExceptMusic(0.8, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libNCST_gf_StoryCutsceneFade(false, 1.0, true);
    ConversationDataStop();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_ConversationCancelAndFade_Init () {
    libNCST_gt_NS_ConversationCancelAndFade = TriggerCreate("libNCST_gt_NS_ConversationCancelAndFade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_ConversationCameraApply
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_ConversationCameraApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_convLine;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_NS_ConversationCameraApply(libNCST_gf_NS_ClickableFromCharacter(ConversationDataGetSpeaker(ConversationDataActiveLine())), ConversationDataActiveCamera());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_ConversationCameraApply_Init () {
    libNCST_gt_NS_ConversationCameraApply = TriggerCreate("libNCST_gt_NS_ConversationCameraApply_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_ClickableClicked
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_ClickableClicked_Func (bool testConds, bool runActions) {
    int auto3B40323A_ai;
    int auto3B40323A_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCST_gv_nS_InteractionOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3B40323A_ai = 1;
    auto3B40323A_ae = UserDataInstanceCount("Clickable")+1;
    while (auto3B40323A_ai < auto3B40323A_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto3B40323A_ai);
        if ((libNCST_gf_NS_ClickableIsEnabled(lv_indexClickable) == true) && (libNCST_gf_ClickableUnit(lv_indexClickable) == EventUnit())) {
            libNCST_gf_NS_ClickableActionRun(lv_indexClickable);
            return true;
        }

        auto3B40323A_ai = auto3B40323A_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_ClickableClicked_Init () {
    libNCST_gt_NS_ClickableClicked = TriggerCreate("libNCST_gt_NS_ClickableClicked_Func");
    TriggerAddEventUnitClick(libNCST_gt_NS_ClickableClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_InteractiveHighlightStart
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_InteractiveHighlightStart_Func (bool testConds, bool runActions) {
    int auto49CAF8FC_ai;
    int auto49CAF8FC_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCST_gv_nS_InteractionOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto49CAF8FC_ai = 1;
    auto49CAF8FC_ae = UserDataInstanceCount("Clickable")+1;
    while (auto49CAF8FC_ai < auto49CAF8FC_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto49CAF8FC_ai);
        if ((libNCST_gf_ClickableUnit(lv_indexClickable) == EventUnit()) && (libNCST_gf_NS_ClickableIsEnabled(lv_indexClickable) == true)) {
            libNCST_gf_NS_ClickableCalloutShowHide(true, lv_indexClickable);
            libNCST_gf_NS_ClickableCalloutHighlight(true, lv_indexClickable);
            return true;
        }

        auto49CAF8FC_ai = auto49CAF8FC_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_InteractiveHighlightStart_Init () {
    libNCST_gt_NS_InteractiveHighlightStart = TriggerCreate("libNCST_gt_NS_InteractiveHighlightStart_Func");
    TriggerAddEventUnitHighlight(libNCST_gt_NS_InteractiveHighlightStart, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_InteractiveHighlightStop
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_InteractiveHighlightStop_Func (bool testConds, bool runActions) {
    int auto9363527C_ai;
    int auto9363527C_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCST_gv_nS_InteractionOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9363527C_ai = 1;
    auto9363527C_ae = UserDataInstanceCount("Clickable")+1;
    while (auto9363527C_ai < auto9363527C_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto9363527C_ai);
        if ((libNCST_gf_ClickableUnit(lv_indexClickable) == EventUnit())) {
            if ((libNCST_gf_NS_ClickableIsNew(lv_indexClickable) == false)) {
                libNCST_gf_NS_ClickableCalloutShowHide(false, lv_indexClickable);
            }

            libNCST_gf_NS_ClickableCalloutHighlight(false, lv_indexClickable);
            return true;
        }

        auto9363527C_ai = auto9363527C_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_InteractiveHighlightStop_Init () {
    libNCST_gt_NS_InteractiveHighlightStop = TriggerCreate("libNCST_gt_NS_InteractiveHighlightStop_Func");
    TriggerAddEventUnitHighlight(libNCST_gt_NS_InteractiveHighlightStop, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_PlayIdleLines
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_PlayIdleLines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_waitTime;

    // Variable Initialization

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_PlayIdleLines_Init () {
    libNCST_gt_NS_PlayIdleLines = TriggerCreate("libNCST_gt_NS_PlayIdleLines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_PlayEntryAmbientLine
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_PlayEntryAmbientLine_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNCST_gf_CurrentRoom() == libNCST_ge_Rooms_StoryRoomBridge) && (libNCST_gf_CurrentStoryActivity() == libNCST_ge_StoryActivities_ViewingRoom))) {
        Wait(0.1, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    if (((libNCST_gf_CurrentRoom() != libNCST_ge_Rooms_StoryRoomBridge) || (libNCST_gf_CurrentStoryActivity() != libNCST_ge_StoryActivities_ViewingRoom))) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_PlayEntryAmbientLine_Init () {
    libNCST_gt_NS_PlayEntryAmbientLine = TriggerCreate("libNCST_gt_NS_PlayEntryAmbientLine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_ClickableCalloutInitDelayed
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_ClickableCalloutInitDelayed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    libNCST_gf_NS_ClickableDisplayUpdateAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_ClickableCalloutInitDelayed_Init () {
    libNCST_gt_NS_ClickableCalloutInitDelayed = TriggerCreate("libNCST_gt_NS_ClickableCalloutInitDelayed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_CreditsDetectEnd
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_CreditsDetectEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNCST_gf_NS_CreditsFinished() == true) && (UIFrameVisible(1, c_syncFrameTypeCreditsPanel) == true))) {
        Wait(0.1, c_timeGame);
    }
    libNCST_gf_NS_SoundFadeAllExceptMusic(0.8, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libNCST_gf_StoryCutsceneFade(false, 1.0, true);
    CutsceneStop(libNCST_gv_nS_Cutscene);
    ConversationDataStop();
    TransmissionClearAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_CreditsDetectEnd_Init () {
    libNCST_gt_NS_CreditsDetectEnd = TriggerCreate("libNCST_gt_NS_CreditsDetectEnd_Func");
    TriggerEnable(libNCST_gt_NS_CreditsDetectEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_CutsceneDetectSkipping
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_CutsceneDetectSkipping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, libNCST_gt_NS_CutsceneSkipped, true, false);
    while (true) {
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_CutsceneDetectSkipping_Init () {
    libNCST_gt_NS_CutsceneDetectSkipping = TriggerCreate("libNCST_gt_NS_CutsceneDetectSkipping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NS_CutsceneSkipped
//--------------------------------------------------------------------------------------------------
bool libNCST_gt_NS_CutsceneSkipped_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_NS_SoundFadeAllExceptMusic(0.8, false);
    libNCST_gv_nS_LastScenePlayedFull = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libNCST_gf_StoryCutsceneFade(false, 1.0, true);
    CutsceneStop(libNCST_gv_nS_Cutscene);
    ConversationDataStop();
    TransmissionClearAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCST_gt_NS_CutsceneSkipped_Init () {
    libNCST_gt_NS_CutsceneSkipped = TriggerCreate("libNCST_gt_NS_CutsceneSkipped_Func");
}

void libNCST_InitTriggers () {
    libNCST_gt_NS_DebugProgressSave_Init();
    libNCST_gt_NS_DebugProgressLoad_Init();
    libNCST_gt_NS_DebugProgressCheatUsed_Init();
    libNCST_gt_NS_DebugProgressCheatCancelled_Init();
    libNCST_gt_NS_DebugTimeCode_Init();
    libNCST_gt_NS_DebugStoryCheat_Init();
    libNCST_gt_NS_DebugStoryCheatInit_Init();
    libNCST_gt_NS_DebugStoryCheatSceneListSelect_Init();
    libNCST_gt_NS_DebugStoryCheatFilterChange_Init();
    libNCST_gt_NS_DebugStoryCheatCheckbox_Init();
    libNCST_gt_NS_DebugStoryCheatPlay_Init();
    libNCST_gt_NS_DebugStoryCheatClose_Init();
    libNCST_gt_NS_SaveStoryDataCallback_Init();
    libNCST_gt_NS_StoryModeMenuQuit_Init();
    libNCST_gt_NS_SaveGameStart_Init();
    libNCST_gt_NS_SaveGameEnd_Init();
    libNCST_gt_NS_StoryPerformFadeIn_Init();
    libNCST_gt_NS_EventCampaignResetData_Init();
    libNCST_gt_NS_EventUIArchive_Quit_Init();
    libNCST_gt_NS_EventUIArchive_PlayMission_Init();
    libNCST_gt_NS_EventUIArchive_PlayScene_Init();
    libNCST_gt_NS_EventUIMission_Launch_Init();
    libNCST_gt_NS_EventUIMission_Quit_Init();
    libNCST_gt_NS_EventUIEquipment_Open_Init();
    libNCST_gt_NS_EventUIEquipment_Close_Init();
    libNCST_gt_NS_EventUIUpgrades_Open_Init();
    libNCST_gt_NS_EventUIUpgrades_Close_Init();
    libNCST_gt_NS_DebugBackgroundReset_Init();
    libNCST_gt_NS_DebugBackgroundOff_Init();
    libNCST_gt_NS_DebugBackgroundOn_Init();
    libNCST_gt_NS_AmbientSceneEnded_Init();
    libNCST_gt_NS_AmbientSceneTimerExpired_Init();
    libNCST_gt_NS_AmbientConversationTimerExpired_Init();
    libNCST_gt_Debug_NS_AmbientConversationTrigger_Init();
    libNCST_gt_NS_RoomPrepareUI_Init();
    libNCST_gt_NS_RoomPrepareMission_Init();
    libNCST_gt_NS_RoomPrepareEquipment_Init();
    libNCST_gt_NS_RoomPrepareArmyUpgrade_Init();
    libNCST_gt_NS_RoomViewMission_Init();
    libNCST_gt_NS_RoomViewEquipment_Init();
    libNCST_gt_NS_RoomViewArmyUpgrade_Init();
    libNCST_gt_NS_RoomViewArchives_Init();
    libNCST_gt_NS_RoomViewStoryCheat_Init();
    libNCST_gt_NS_RoomViewProgressCheat_Init();
    libNCST_gt_NS_RoomViewStopMission_Init();
    libNCST_gt_NS_RoomViewStopEquipment_Init();
    libNCST_gt_NS_RoomViewStopArmyUpgrade_Init();
    libNCST_gt_NS_RoomViewStopArchives_Init();
    libNCST_gt_NS_RoomViewStopStoryCheat_Init();
    libNCST_gt_NS_ConversationWaitForSkip_Init();
    libNCST_gt_NS_ConversationResponseRun_Init();
    libNCST_gt_NS_ConversationAmbientTransmissionRun_Init();
    libNCST_gt_NS_ConversationCancelAndFade_Init();
    libNCST_gt_NS_ConversationCameraApply_Init();
    libNCST_gt_NS_ClickableClicked_Init();
    libNCST_gt_NS_InteractiveHighlightStart_Init();
    libNCST_gt_NS_InteractiveHighlightStop_Init();
    libNCST_gt_NS_PlayIdleLines_Init();
    libNCST_gt_NS_PlayEntryAmbientLine_Init();
    libNCST_gt_NS_ClickableCalloutInitDelayed_Init();
    libNCST_gt_NS_CreditsDetectEnd_Init();
    libNCST_gt_NS_CutsceneDetectSkipping_Init();
    libNCST_gt_NS_CutsceneSkipped_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libNCST_InitLib_completed = false;

void libNCST_InitLib () {
    if (libNCST_InitLib_completed) {
        return;
    }

    libNCST_InitLib_completed = true;

    libNCST_InitLibraries();
    libNCST_InitVariables();
    libNCST_InitTriggers();
}

include "LibNovC"
include "LibNCMI"
include "LibNCUI"

