include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Mission (Nova)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libNCMI_ge_StealthAIDefendRegionState_Active = 0;
const int libNCMI_ge_StealthAIDefendRegionState_Inactive = 1;
const int libNCMI_ge_StealthAIUnitState_Unavailable = 0;
const int libNCMI_ge_StealthAIUnitState_Idle = 1;
const int libNCMI_ge_StealthAIUnitState_Reacting = 2;
const int libNCMI_ge_StealthAIUnitState_Attacking = 3;
const int libNCMI_ge_StealthAIGhostJob_Floating = 0;
const int libNCMI_ge_StealthAIGhostJob_Scanning = 1;
const int libNCMI_ge_StealthAIUnitCasting_NotCasting = 0;
const int libNCMI_ge_StealthAIUnitCasting_Casting = 1;
const int libNCMI_ge_StealthAISpawnDespawn_Spawn = 0;
const int libNCMI_ge_StealthAISpawnDespawn_Despawn = 1;
const int libNCMI_ge_StealthAISpawnDespawnOption_Instantly = 0;
const int libNCMI_ge_StealthAISpawnDespawnOption_FromPoint = 1;
const int libNCMI_ge_MissionCheatUIType_None = 0;
const int libNCMI_ge_MissionCheatUIType_Button = 1;
const int libNCMI_ge_MissionCheatUIType_ButtonEditBoxCombo = 2;
const int libNCMI_ge_MissionCheatType_None = 0;
const int libNCMI_ge_MissionCheatType_Stage = 1;
const int libNCMI_ge_MissionCheatType_Mechanic = 2;
const int libNCMI_ge_MissionCheatType_User01 = 3;
const int libNCMI_ge_MissionCheatType_User02 = 4;
const int libNCMI_ge_CampaignMissionGameResultType_None = 0;
const int libNCMI_ge_CampaignMissionGameResultType_Victory = 1;
const int libNCMI_ge_CampaignMissionGameResultType_Defeat = 2;
const int libNCMI_ge_NM_HeroType_NM_HeroType_None = 0;
const int libNCMI_ge_NM_HeroType_NM_HeroType_Nova = 1;
const int libNCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter = 0;
const int libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter = 1;
const int libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait = 2;
const int libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior = 0;
const int libNCMI_ge_MissionTransmissionCueSoundOptions_PlayCueSound = 1;
const int libNCMI_ge_MissionTransmissionCueSoundOptions_DontPlayCueSound = 2;
const int libNCMI_ge_MissionTransmissionOptions_ChatBubble = 0;
const int libNCMI_ge_DropPodRace_Terran = 0;
const int libNCMI_ge_DropPodRace_Zerg = 1;
const int libNCMI_ge_BurrowUnburrowOption_Burrow = 0;
const int libNCMI_ge_BurrowUnburrowOption_Unburrow = 1;
const int libNCMI_ge_CacheResourceType_CustomResource = 0;
const int libNCMI_ge_CacheResourceType_Mineral = 1;
const int libNCMI_ge_CacheResourceType_Vespene = 2;
const int libNCMI_ge_CacheResourceType_Mutagen = 3;
const int libNCMI_ge_CacheResourceType_Influence = 4;
const int libNCMI_ge_CacheResourceType_Solarite = 5;
const int libNCMI_ge_ObjectiveMessageType_ObjectiveDiscovered = 0;
const int libNCMI_ge_ObjectiveMessageType_ObjectiveUpdate = 1;
const int libNCMI_ge_ObjectiveMessageType_ObjectiveCompleted = 2;
const int libNCMI_ge_ObjectiveMessageType_ObjectiveFailed = 3;
const int libNCMI_ge_CampaignMessageType_MissionFailed = 0;
const int libNCMI_ge_CampaignMessageType_Hint = 1;
const int libNCMI_ge_CampaignMessageType_SimpleHint = 2;
const int libNCMI_ge_CampaignMessageType_Secret = 3;
const int libNCMI_ge_CampaignMessageType_Warning = 4;
const int libNCMI_ge_CampaignMessageType_NewUnitAcquired = 5;
const int libNCMI_ge_CampaignMessageType_NewUnitAvailable = 6;
const int libNCMI_ge_CampaignMessageType_NewTechAvailable = 7;
const int libNCMI_ge_CampaignMessageType_NewUnitAvailable2 = 8;
const int libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage = 0;
const int libNCMI_ge_CampaignMessageFormatNotFormat_NotFormatMessage = 1;
const int libNCMI_ge_CampaginReticleType_ZergMainObjective = 0;
const int libNCMI_ge_CampaginReticleType_ZergBonusObjective = 1;
const int libNCMI_ge_CampaginReticleType_ZergEnemy = 2;
const int libNCMI_ge_CampaginReticleType_TerranMainObjective = 3;
const int libNCMI_ge_CampaginReticleType_TerranBonusObjective = 4;
const int libNCMI_ge_CampaginReticleType_TerranEnemy = 5;
const int libNCMI_ge_CampaginReticleType_ProtossMainObjective = 6;
const int libNCMI_ge_CampaginReticleType_ProtossBonusObjective = 7;
const int libNCMI_ge_CampaginReticleType_ProtossEnemy = 8;
const int libNCMI_ge_CampaginReticleSize_Large = 0;
const int libNCMI_ge_CampaginReticleSize_Medium = 1;
const int libNCMI_ge_CampaginReticleSize_Small = 2;

// Constants
const fixed libNCMI_gv_nM_StealthAI_UnitReactionTime = 6.0;
const int libNCMI_gv_nM_StealthAIHomePoint_PointStoredForUnitIndex = 20;
const int libNCMI_gv_nM_StealthAILastAttackPoint_PointStoredForUnitIndex = 21;
const int libNCMI_gv_nM_StealthAIState_CustomValueIndex = 20;
const int libNCMI_gv_nM_StealthAIGhostState_CustomValueIndex = 21;
const int libNCMI_gv_nM_StealthAIUnitCasting_CustomValueIndex = 22;
const int libNCMI_gv_nM_StealthAIDefendRegionCountMax = 32;
const int libNCMI_gv_nM_StealthAIDefenderUnitCountMax = 64;
const fixed libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldown = 1.0;
const string libNCMI_gv_NMC_SoundDataTableIdentifier = "NM_SoundDataTable_";
const string libNCMI_gv_scientistsFleeEffect = "ScientistScaredSearchImpact";
const string libNCMI_gv_scientistsFleeDamageDummy = "ScientistScaredFleeDummyDamage";
const int libNCMI_gv_NMC_MissionCheat_PanelCountMAX = 4;
const int libNCMI_gv_NMC_MissionCheat_MaxCheats = 13;
const fixed libNCMI_gv_campaignObjectiveDelay = 2.0;
const fixed libNCMI_gv_campaignHintDelay = 2.0;
const fixed libNCMI_gv_campaignSecretDelay = 5.0;
const fixed libNCMI_gv_campaignAchievementDelay = 2.0;
const string libNCMI_gv_missionEquipmentEventClosed = "MissionEquipmentEventClosed";
const int libNCMI_gv_nMC_HEROCOUNT = 5;
const fixed libNCMI_gv_nM_ReviveCooldownTimeNova = 60.0;
const string libNCMI_gv_launchUnitToTargetPointBaseEffect = "UnitLaunchToTargetPoint";

// Structures
struct libNCMI_gs_StealthAIDefendingUnit {
    unit lv_unit;
    string lv_unitType;
    point lv_homePoint;
    bool lv_isLookBetween2Angles;
    fixed lv_lookAngle1;
    fixed lv_lookAngle2;
    fixed lv_lookWaitTime;
    bool lv_isPatrol4Points;
    point lv_patrolPoint1;
    point lv_patrolPoint2;
    point lv_patrolPoint3;
    point lv_patrolPoint4;
    fixed lv_patrolWaitTime;
};

struct libNCMI_gs_StealthAIDefendRegion {
    int lv_aIState;
    int lv_owningPlayer;
    region lv_defendRegion;
    unitgroup lv_defendingUnitGroup;
    libNCMI_gs_StealthAIDefendingUnit[libNCMI_gv_nM_StealthAIDefenderUnitCountMax + 1] lv_defendingUnitArray;
    int lv_defendingUnitCount;
};

struct libNCMI_gs_MissionCheat {
    string lv_titleString;
    text lv_titleText;
    text lv_description;
    int lv_buttonDialog;
    int lv_editBoxDialog;
    int lv_uIType;
    int lv_cheatType;
    trigger lv_trigger;
};

// Variable Declarations
unitgroup libNCMI_gv_nM_StealthAI_EnemyUnitGroup;
int libNCMI_gv_nM_StealthAIDefendRegionCount;
libNCMI_gs_StealthAIDefendRegion[libNCMI_gv_nM_StealthAIDefendRegionCountMax + 1] libNCMI_gv_nM_StealthAIDefendRegionArray;
timer libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer;
fixed libNCMI_gv_nM_StealthAIGhostSnipeGlobalCooldown;
timer libNCMI_gv_nM_StealthAIGhostSnipeGlobalCooldownTimer;
int libNCMI_gv_NM_MissionAutoSaveIndex;
bool libNCMI_gv_NM_MissionAutoSaveDone;
int libNCMI_gv_NM_SoundDataTableIndex;
bool libNCMI_gv_NM_InCinematic;
int libNCMI_gv_nM_ScreenMode;
actor libNCMI_gv_nM_CreditsCutsceneNewsScreen;
int libNCMI_gv_nM_CreditsCutscene;
fixed libNCMI_gv_kerriganPsiStrikeFacing;
fixed libNCMI_gv_kerriganPsiStrikeEnergyCost;
unitgroup libNCMI_gv_nM_NovaNukesUnitGroup;
int libNCMI_gv_NM_GameCheat_DialogWidth;
int libNCMI_gv_NM_GameCheat_DialogHeight;
int libNCMI_gv_NM_GameCheat_Dialog;
int libNCMI_gv_NM_GameCheat_Minimize;
int libNCMI_gv_NM_GameCheat_OpenMissionCheat;
int libNCMI_gv_NM_GameCheat_ArrayIndex;
bool[26] libNCMI_gv_NM_GameCheat_CheatState;
int[26] libNCMI_gv_NM_GameCheat_CheckBox;
bool libNCMI_gv_NM_GameCheat_Minimized;
libNCMI_gs_MissionCheat[libNCMI_gv_NMC_MissionCheat_MaxCheats + 1] libNCMI_gv_NM_MissionCheat_Cheats;
int libNCMI_gv_NM_MissionCheat_Dialog;
int[libNCMI_gv_NMC_MissionCheat_PanelCountMAX + 1] libNCMI_gv_NM_MissionCheat_Panel;
int libNCMI_gv_NM_MissionCheat_CloseButton;
bool[libNCMI_gv_NMC_MissionCheat_PanelCountMAX + 1] libNCMI_gv_NM_MissionCheat_CategoryUsed;
int libNCMI_gv_NM_MissionCheat_ArrayCount;
bool libNCMI_gv_NM_MissionCheat_CloseButtonClicked;
bool libNCMI_gv_NM_MissionCheat_ArraySorted;
int[libNCMI_gv_NMC_MissionCheat_MaxCheats + 1] libNCMI_gv_NM_MissionCheat_ListPriority;
unit libNCMI_gv_NM_FlyoverUnit;
bool libNCMI_gv_NM_FlyoverModeEnabled;
int libNCMI_gv_NM_GameOverResult;
bool libNCMI_gv_nM_MissionEndStatsRecorded;
bool libNCMI_gv_NM_MissionVictoryActionQueyeEmpty;
int libNCMI_gv_NM_MissionCompleteTime;
unit libNCMI_gv_nM_NovaHeroUnit;
unit[libNCMI_gv_nMC_HEROCOUNT + 1] libNCMI_gv_nM_HeroRevivingUnit;
unit[libNCMI_gv_nMC_HEROCOUNT + 1] libNCMI_gv_nM_HeroReviverUnit;
int[libNCMI_gv_nMC_HEROCOUNT + 1] libNCMI_gv_nM_HeroRevivePlayer;
abilcmd[libNCMI_gv_nMC_HEROCOUNT + 1] libNCMI_gv_nM_HeroReviveCommand;
string[libNCMI_gv_nMC_HEROCOUNT + 1] libNCMI_gv_nM_HeroReviveCDLink;
bool libNCMI_gv_nM_ReviveUseAltMessage;
int libNCMI_gv_NM_PlanetPortrait;
camerainfo libNCMI_gv_NM_PlanetPortraitPlayerCamera;
text[21] libNCMI_gv_NM_MissionTipTitle;
text[21] libNCMI_gv_NM_MissionTipDescription;
string[21] libNCMI_gv_NM_MissionTipIcons;
int[21] libNCMI_gv_NM_MissionTipType;
int libNCMI_gv_NM_MissionTipCount;
int libNCMI_gv_NM_MissionHelpButton;
string[21] libNCMI_gv_NM_MissionTip;
int libNCMI_gv_NM_MissionHelpButtonTipPanel;
int libNCMI_gv_NM_SendTransmissionCampaignIndex;
int libNCMI_gv_NM_SendTransmissionCampaignPortrait;
unit libNCMI_gv_NM_SendTransmissionCampaignSpeaker;
trigger libNCMI_gv_NM_SendTransmissionCampaignTrigger;
int libNCMI_gv_NM_SendTransmissionCampaignPlayingTick;
bool libNCMI_gv_NM_SendTransmissionCampaignChatBubbleOn;
point libNCMI_gv_NM_DropPod_TP_Location;
unitgroup libNCMI_gv_NM_DropPod_TP_Units;
int libNCMI_gv_NM_DropPod_TP_Player;
unit libNCMI_gv_NM_DropPod_TP_ZergBuilding;
actor libNCMI_gv_nM_UpgradeReticle;
int libNCMI_gv_nM_UpgradeTextTag;
unit libNCMI_gv_nM_UpgradeUnit;

// Function Declarations
void libNCMI_gf_SetMissionObjectiveProgress (string lp_objective, int lp_current);
void libNCMI_gf_CreateObjectiveCampaign (string lp_objectiveData);
void libNCMI_gf_ZS_SetMissionObjectiveState (string lp_objective, int lp_state);
void libNCMI_gf_StealthAISetStealthAIDefendRegionState (region lp_stealthAIRegion, int lp_stealthAIRegionState);
int libNCMI_gf_StealthAIGetStealthAIDefendRegionState (region lp_stealthAIRegion);
void libNCMI_gf_StealthAISetStealthAIUnitState (unit lp_stealthAIUnit, int lp_stealthAIUnitState);
int libNCMI_gf_StealthAIGetStealthAIUnitState (unit lp_stealthAIUnit);
void libNCMI_gf_StealthAISetStealthAIGhostJob (unit lp_stealthAIGhost, int lp_stealthAIGhostState);
int libNCMI_gf_StealthAIGetStealthAIGhostJob (unit lp_stealthAIGhost);
void libNCMI_gf_StealthAISetStealthAIUnitCasting (unit lp_stealthAIUnit, int lp_stealthAIUnitCasting);
int libNCMI_gf_StealthAIGetStealthAIUnitCasting (unit lp_stealthAIUnit);
region libNCMI_gf_StealthAIGetDefendRegionOfUnit (unit lp_stealthAIUnit);
point libNCMI_gf_StealthAIGetHomePointOfUnit (unit lp_stealthAIUnit);
int libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion (region lp_stealthAIRegion);
region libNCMI_gf_StealthAIGetDefendRegionRegionFromIndex (int lp_stealthAIRegionIndex);
int libNCMI_gf_StealthAINumberOfVisibleEnemyUnitsInDefendRegion (region lp_stealthAIRegion);
int libNCMI_gf_StealthAINumberOfVisibleEnemyUnitsToUnitInDefendRegion (unit lp_defendingUnit, region lp_stealthAIRegion);
unitgroup libNCMI_gf_StealthAIGetVisibleEnemyUnitsInDefendRegion (region lp_stealthAIRegion);
unitgroup libNCMI_gf_StealthAIGetVisibleEnemyUnitsToUnitInDefendRegion (unit lp_defendingUnit, region lp_stealthAIRegion);
void libNCMI_gf_StealthAIInitializeStealthAIDefendRegion (region lp_defendRegion, int lp_defendingPlayer);
void libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion (region lp_stealthAIDefendRegion, unit lp_stealthAIUnit, point lp_stealthAIHomePoint);
void libNCMI_gf_StealthAIRemoveUnitFromAllStealthAIDefendRegions (unit lp_stealthAIUnit);
void libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup (unit lp_stealthAIEnemyUnit);
void libNCMI_gf_StealthAIRemoveUnitStealthAIEnemyUnitGroup (unit lp_stealthAIEnemyUnit);
bool libNCMI_gf_StealthAIIsUnitInStealthAIEnemyUnitGroup (unit lp_stealthAIEnemyUnit);
void libNCMI_gf_StealthAIStealthAIDefendRegion (int lp_stealthAIDefendRegionIndex);
void libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits (int lp_stealthAISpawnDespawn, region lp_stealthAIDefendRegion, point lp_spawnPoint, int lp_instantly);
void libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit (int lp_stealthAIDefendRegionIndex, int lp_stealthAIDefenderUnitIndex, point lp_targetPoint);
void libNCMI_gf_StealthAIMakeUnitGroupReactToPoint (unitgroup lp_reactingUnitGroup, point lp_targetPoint);
void libNCMI_gf_StealthAIMakeGhostLookBetween2Angles (unit lp_ghostUnit, fixed lp_ghostLookAngle01, fixed lp_ghostLookAngle02, fixed lp_ghostLookTime);
void libNCMI_gf_StealthAIMakeGhostPatrol4Points (unit lp_ghostUnit, point lp_startPoint, point lp_midPoint1, point lp_midPoint2, point lp_endPoint, fixed lp_waitTimeAtPoint);
void libNCMI_gf_StealthAIMakeSonarDronePatrol4Points (unit lp_droneUnit, point lp_startPoint, point lp_midPoint1, point lp_midPoint2, point lp_endPoint, fixed lp_waitTimeAtPoint);
void libNCMI_gf_StealthAIMakeGhostCastEMP (unit lp_ghostUnit);
void libNCMI_gf_StealthAIMakeGhostCastSnipe (unit lp_ghostUnit, unit lp_snipeTargetUnit);
void libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget (unit lp_ghostUnit, unit lp_eMPTargetUnit);
void libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit (unit lp_gunTurretUnit);
void libNCMI_gf_StealthAIMakeGhostExitConeDetection (unit lp_ghostUnit);
void libNCMI_gf_StealthAIMakeGhostEnterConeDetection (unit lp_ghostUnit);
void libNCMI_gf_StealthAIMakeRotatingGunTurretExitConeDetection (unit lp_gunTurretUnit);
void libNCMI_gf_StealthAIMakeRotatingGunTurretEnterConeDetection (unit lp_gunTurretUnit);
void libNCMI_gf_StealthAIMakeAlarmBotExitConeDetection (unit lp_alarmBotUnit);
void libNCMI_gf_StealthAIMakeAlarmBotEnterConeDetection (unit lp_alarmBotUnit);
void libNCMI_gf_StealthAIMakeSonarDroneCastEMP (unit lp_droneUnit);
void libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget (unit lp_droneUnit, unit lp_eMPTargetUnit);
void libNCMI_gf_StealthAIMakeAlarmBotCastEMP (unit lp_droneUnit);
void libNCMI_gf_StealthAITripUnitCastCooldown (unit lp_cooldownUnit);
unitgroup libNCMI_gf_AITacticalEnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
void libNCMI_gf_NM_MissionAutoSave (text lp_description);
void libNCMI_gf_CreateMissionAutosavePoint (text lp_description);
void libNCMI_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound);
bool libNCMI_gf_PlayerInCinematicModeCampaign ();
string libNCMI_gf_NM_SoundDataTableName ();
void libNCMI_gf_PlaySoundCinematic (soundlink lp_soundLink, playergroup lp_players, fixed lp_volume, fixed lp_offset);
void libNCMI_gf_StopCinematicSounds ();
void libNCMI_gf_SetScreenModeCampaign (int lp_mode, fixed lp_duration);
void libNCMI_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions);
void libNCMI_gf_NM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration);
void libNCMI_gf_NM_CinematicModeInternal (bool lp_onOff, fixed lp_duration);
void libNCMI_gf_NM_CreditsCutscenePlay ();
bool libNCMI_gf_NM_CreditsCutsceneCreditsFinished ();
void libNCMI_gf_NovaNukeTimerUpdate (int lp_player);
void libNCMI_gf_NM_DetectionUpgradesApply ();
void libNCMI_gf_AttachUnitModelToUnit (unit lp_attachmentUnit, unit lp_targetUnit, string lp_attachPont, fixed lp_xOffset, fixed lp_yOffset, fixed lp_zOffset, string lp_facingAdjustment);
void libNCMI_gf_NM_MissionCheat_UpdateButtonEnabled ();
void libNCMI_gf_NM_MissionCheat_ButtonTextInit ();
void libNCMI_gf_AddMissionCheat (string lp_command, string lp_description, trigger lp_trigger, int lp_cheatType, int lp_uIType);
int libNCMI_gf_MissionCheatEditBoxValueInteger (trigger lp_cheatTrigger);
fixed libNCMI_gf_MissionCheatEditBoxValueReal (trigger lp_cheatTrigger);
string libNCMI_gf_MissionCheatEditBoxValueString (trigger lp_cheatTrigger);
void libNCMI_gf_GameOver (int lp_gameOverType);
bool libNCMI_gf_GameIsOver ();
void libNCMI_gf_NM_PostMissionVictoryUpdate ();
void libNCMI_gf_RunMissionVictorySequence (trigger lp_victoryCinematic);
void libNCMI_gf_EndCampaignMission (int lp_player, int lp_type);
void libNCMI_gf_NM_CampaignNovaVictory ();
void libNCMI_gf_UnlockAllMissedNovaEquipment ();
void libNCMI_gf_LockUnlockNovaEquipment (bool lp_lockUnlock, string lp_novaEquipment);
void libNCMI_gf_OpenNovaEquipmentScreen ();
void libNCMI_gf_SetCharacterIsAliveStatus (string lp_character, bool lp_isAlive);
bool libNCMI_gf_CharacterIsAlive (string lp_character);
void libNCMI_gf_SetNovaHeroUnit (unit lp_novaUnit);
unit libNCMI_gf_NovaHeroUnit ();
void libNCMI_gf_HandleHeroDeathNova (unit lp_heroUnit, unit lp_reviveLocation, fixed lp_reviveTime);
void libNCMI_gf_ReviveHeroInstantly (unit lp_heroUnit, bool lp_displayReviveMessage);
void libNCMI_gf_EnableDisableHeroReviveSystem (bool lp_enableDisable, int lp_player);
void libNCMI_gf_NM_HeroRevive (int lp_heroType);
int libNCMI_gf_NM_HeroTypeFromUnitType (string lp_unitType);
unit libNCMI_gf_NM_FindPrimaryTownHall (int lp_player);
void libNCMI_gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light);
void libNCMI_gf_ZoomInPlanetPortrait ();
void libNCMI_gf_HidePlanetPortrait ();
void libNCMI_gf_StartAIPersonalityForPlayerCampaign (int lp_player, string lp_personality);
void libNCMI_gf_StartAIPersonalitiesForAllPlayersCampaign ();
void libNCMI_gf_StartCampaignAIForAllPlayersVoid ();
void libNCMI_gf_StartCampaignAIForPlayerVoid (int lp_player);
void libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers ();
void libNCMI_gf_EnableNovaCampaignAIBehaviorForPlayer (int lp_player);
bool libNCMI_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit);
int libNCMI_gf_CampaignPlayerColor ();
void libNCMI_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player);
void libNCMI_gf_ShareVisionAmongPlayers (playergroup lp_players);
void libNCMI_gf_AddMissionTipCampaign (string lp_tipData);
void libNCMI_gf_DisplayMissionTip ();
void libNCMI_gf_NM_RefreshTip ();
void libNCMI_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption);
void libNCMI_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff);
void libNCMI_gf_NM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor);
void libNCMI_gf_NM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, actor lp_talkRing, int lp_ping, int lp_localIndex);
void libNCMI_gf_HideCampaignTransmissionPortrait ();
fixed libNCMI_gf_ConvesationLineDuration (string lp_conversationLine);
void libNCMI_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption);
void libNCMI_gf_LaunchUnitToTargetPointWithMover (unit lp_unit, point lp_targetPoint, string lp_mover);
void libNCMI_gf_NM_DropPod_Zerg_Wait (point lp_location, unitgroup lp_units, int lp_player);
void libNCMI_gf_NM_DropPod_Terran_Wait (point lp_location, unitgroup lp_units, int lp_player);
void libNCMI_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player);
void libNCMI_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait);
void libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait (string lp_buildingType, point lp_landingPoint, int lp_player);
void libNCMI_gf_NM_DropPodCreateZergBuilding_Wait (string lp_buildingType, point lp_landingPoint, int lp_player);
string libNCMI_gf_NM_DropPod_LastDroppedUnitsDataTableName ();
unitgroup libNCMI_gf_LastDroppedUnits ();
unit libNCMI_gf_NM_BestWorkerRallyMineral (unit lp_nexus);
void libNCMI_gf_SetWorkerRallyPoint (unit lp_nexus);
void libNCMI_gf_SetAllWorkerRallyPointsForPlayer (int lp_player);
void libNCMI_gf_NM_UseUnitNameAsUnitTip (unit lp_unit);
void libNCMI_gf_NM_ApplyCampaignTeachingToUnit (unit lp_teachUnit);
void libNCMI_gf_NM_ShowHideCampaignTeaching (bool lp_showHide);
void libNCMI_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void libNCMI_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void libNCMI_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount);
void libNCMI_gf_ApplyLarvaUpgradeForPlayer (int lp_player);
void libNCMI_gf_BurrowUnburrowZergUnitGroup (unitgroup lp_unitGroup, int lp_burrowUnburrow);
void libNCMI_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target);
void libNCMI_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void libNCMI_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void libNCMI_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
bool libNCMI_gf_NM_StartingWorkerAutoHarvestEnabled ();
void libNCMI_gf_StartingWorkersAutoHarvest (region lp_regionMineralWorker, region lp_regionGasWorker);
text libNCMI_gf_UnitAbilityHotkeyText (string lp_unitType, string lp_abilityButton);
void libNCMI_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot);
void libNCMI_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip);
void libNCMI_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color);
string libNCMI_gf_NM_ReticleModelOfStyle (int lp_type, int lp_size);
string libNCMI_gf_NM_ReticleTextFontOfStyle (int lp_type);
void libNCMI_gf_NM_ReticleApplyTint (actor lp_reticle, int lp_type);
void libNCMI_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location);
void libNCMI_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint);
void libNCMI_gf_NM_VoidCampaignMissionInit ();
void libNCMI_gf_InitializeNovaMission (string lp_mission);

// Trigger Declarations
trigger libNCMI_gt_StealthAIRunStealthAIDefendRegions;
trigger libNCMI_gt_NM_CinematicModeOn;
trigger libNCMI_gt_NM_CinematicModeOff;
trigger libNCMI_gt_NM_CreditsCutsceneDetectEnd;
trigger libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate;
trigger libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie;
trigger libNCMI_gt_CreditsCutsceneMP03_040StopMovie;
trigger libNCMI_gt_NovaPsiStrike;
trigger libNCMI_gt_FuryofOneHeight;
trigger libNCMI_gt_FuryofOneReset;
trigger libNCMI_gt_NovaNukeTimerGhostAcademyNukeBuild;
trigger libNCMI_gt_NovaNukeTimerGhostAcademyNukeCancel;
trigger libNCMI_gt_NovaNukeTimerGhostAcademyNukeFired;
trigger libNCMI_gt_CreepTumorBuild;
trigger libNCMI_gt_XanthosFighterLaunch;
trigger libNCMI_gt_XanthosHighlightOff;
trigger libNCMI_gt_XanthosHighlightOn;
trigger libNCMI_gt_Flee;
trigger libNCMI_gt_NM_GameCheat_CreateDialog;
trigger libNCMI_gt_NS_GameCheat_CheckboxUsed;
trigger libNCMI_gt_NS_GameCheat_CheatUsed;
trigger libNCMI_gt_NM_MissionCheat_CreateDialog;
trigger libNCMI_gt_NM_MissionCheat_ButtonClicked;
trigger libNCMI_gt_NM_MissionCheat_CheatEntered;
trigger libNCMI_gt_NM_DebugVictoryS;
trigger libNCMI_gt_NM_DebugVictoryC;
trigger libNCMI_gt_NM_DebugEquipment;
trigger libNCMI_gt_NM_DebugEquipmentClosed;
trigger libNCMI_gt_NM_DebugUpgrades;
trigger libNCMI_gt_NM_DebugUpgradesClosed;
trigger libNCMI_gt_NM_ToggleFlyoverMode;
trigger libNCMI_gt_NM_TurnOffFlyoverMode;
trigger libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueueOneMinute;
trigger libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueue;
trigger libNCMI_gt_NM_AbortMission;
trigger libNCMI_gt_NM_MissionEndsPlayerExit;
trigger libNCMI_gt_NM_VictoryContinue;
trigger libNCMI_gt_NM_VictoryNextMissionLaunched;
trigger libNCMI_gt_NM_VictoryQuit;
trigger libNCMI_gt_NM_EventUIEquipment_Open;
trigger libNCMI_gt_NM_EventUIEquipment_Close;
trigger libNCMI_gt_NM_EventUIArmyUpgrades_Open;
trigger libNCMI_gt_NM_EventUIArmyUpgrades_Close;
trigger libNCMI_gt_NM_EventMissionEquipmentClose;
trigger libNCMI_gt_NM_DebugReviveNovaInstantly;
trigger libNCMI_gt_NM_HeroReviveNovaCooldownWait;
trigger libNCMI_gt_NM_HeroReviveNovaGameEnds;
trigger libNCMI_gt_NM_HeroReviveVOReminder;
trigger libNCMI_gt_NM_HeroReviveNova;
trigger libNCMI_gt_NM_MissionTipClicked;
trigger libNCMI_gt_NM_SendTransmissionCampaignTick;
trigger libNCMI_gt_NM_DropPod_Zerg_DontWait;
trigger libNCMI_gt_NM_DropPod_Terran_DontWait;
trigger libNCMI_gt_NM_CampaignUnit;
trigger libNCMI_gt_NM_CampaignUnitCreated;
trigger libNCMI_gt_NM_CampaignUnitChangeOwner;
trigger libNCMI_gt_NM_CampaignUnitInfoUnitMorphes;
trigger libNCMI_gt_NM_UnitBeingRemoved;
trigger libNCMI_gt_NovaPingSound;

// Library Initialization
void libNCMI_InitVariables ();

