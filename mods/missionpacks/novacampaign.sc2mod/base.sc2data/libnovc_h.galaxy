include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Campaign (Nova)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libNovC_ge_VolumeChannelModeCampaign_Cinematic = 0;
const int libNovC_ge_VolumeChannelModeCampaign_Speech = 1;
const int libNovC_ge_VolumeChannelModeCampaign_Game = 2;
const int libNovC_ge_VolumeChannelModeCampaign_Victory = 3;
const int libNovC_ge_VolumeChannelModeCampaign_Speech2 = 4;
const int libNovC_ge_VolumeChannelModeCampaign_Speech3 = 5;
const int libNovC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects = 6;
const int libNovC_ge_VolumeChannelModeCampaign_LowHealthBegin = 7;
const int libNovC_ge_VolumeChannelModeCampaign_LowHealthEnd = 8;
const int libNovC_ge_VolumeChannelModeCampaign_Game2 = 9;
const int libNovC_ge_VolumeChannelModeCampaign_Game3 = 10;
const int libNovC_ge_VolumeChannelModeCampaign_MissionLaunchUI = 11;
const int libNovC_ge_VolumeChannelModeCampaign_VictoryInstant = 12;
const int libNovC_ge_NC_NovaArc_NovaArcNone = 0;
const int libNovC_ge_NC_NovaArc_NovaArcOne = 1;
const int libNovC_ge_DebugProgressBonusObjectiveAmount_NoObjectives = 0;
const int libNovC_ge_DebugProgressBonusObjectiveAmount_FullObjectives = 1;
const int libNovC_ge_NC_Event_NC_EventFirst = 10000;
const int libNovC_ge_NC_Event_CampaignArmyCheatStarts = 10001;
const int libNovC_ge_NC_Event_CampaignArmyCheatEnds = 10002;
const int libNovC_ge_NC_Event_CampaignDataReset = 10003;
const int libNovC_ge_NC_Event_CampaignMapTransition = 10004;
const int libNovC_ge_NC_Event_CampaignProgressCheatStart = 10005;
const int libNovC_ge_NC_Event_CampaignProgressCheatSave = 10006;
const int libNovC_ge_NC_Event_CampaignProgressCheatLoad = 10007;
const int libNovC_ge_NC_Event_CampaignProgressMapCompleted = 10008;
const int libNovC_ge_NC_Event_CampaignProgressCheatCancel = 10009;
const int libNovC_ge_NC_Event_CampaignArchivesSynced = 10010;
const int libNovC_ge_NC_Event_UIArchivesQuit = 10011;
const int libNovC_ge_NC_Event_UIArchivesPlayMission = 10012;
const int libNovC_ge_NC_Event_UIArchivesPlayScene = 10013;
const int libNovC_ge_NC_Event_UIMissionQuit = 10014;
const int libNovC_ge_NC_Event_UIMissionLaunch = 10015;
const int libNovC_ge_NC_Event_UIArmyQuit = 10016;
const int libNovC_ge_NC_Event_UIBottomBarRoomChange = 10017;
const int libNovC_ge_NC_Event_StoryMissionLaunch = 10018;
const int libNovC_ge_NC_Event_StoryInstanceStart = 10019;
const int libNovC_ge_NC_Event_StoryStoryCheatPlay = 10020;
const int libNovC_ge_NC_Event_CampaignOverrideEvents = 10021;
const int libNovC_ge_NC_Event_NC_EventLast = 10022;
const int libNovC_ge_MissionObjectiveState_Undiscovered = 0;
const int libNovC_ge_MissionObjectiveState_Available = 1;
const int libNovC_ge_MissionObjectiveState_Completed = 2;
const int libNovC_ge_MissionObjectiveState_Failed = 3;
const int libNovC_ge_NC_ArmyTechItemState_Locked = 0;
const int libNovC_ge_NC_ArmyTechItemState_Unlocked = 1;
const int libNovC_ge_NC_ArmyTechItemState_Missed = 2;

// Constants
const int libNovC_gv_nCC_DebugCampaignTechEquipmentGroupCount = 4;
const int libNovC_gv_nCC_DebugCampaignTechEquipmentItemCount = 6;
const int libNovC_gv_nCC_DebugCampaignTechUpgradesItemsCountMax = 20;
const int libNovC_gv_nCC_DebugCampaignTechUpgradesUnitsCountMax = 5;
const int libNovC_gv_nCC_CampaignNovaIndex = 5;
const int libNovC_gv_nCC_DataVersion = 1;
const int libNovC_gv_nCC_NovaPlayerSlot = 1;

// Variable Declarations
int libNovC_gv_resultsDialog;
int[libNovC_gv_nCC_DebugCampaignTechEquipmentGroupCount + 1][libNovC_gv_nCC_DebugCampaignTechEquipmentItemCount + 1] libNovC_gv_nC_DebugCampaignTechEquipmentCheckBox;
string[libNovC_gv_nCC_DebugCampaignTechEquipmentGroupCount + 1][libNovC_gv_nCC_DebugCampaignTechEquipmentItemCount + 1] libNovC_gv_nC_DebugCampaignTechEquipment;
int libNovC_gv_nC_DebugCampaignTechUpgradesDialog;
int libNovC_gv_nC_DebugCampaignTechUpgradesOpen;
int libNovC_gv_nC_DebugCampaignTechUpgradesOK;
int libNovC_gv_nC_DebugCampaignTechUpgradesCancel;
int[libNovC_gv_nCC_DebugCampaignTechUpgradesUnitsCountMax + 1] libNovC_gv_nC_DebugCampaignTechUpgradesCheckBox;
int[libNovC_gv_nCC_DebugCampaignTechUpgradesUnitsCountMax + 1] libNovC_gv_nC_DebugCampaignTechUpgradesCheckBoxName;
string[libNovC_gv_nCC_DebugCampaignTechUpgradesUnitsCountMax + 1] libNovC_gv_nC_DebugCampaignTechUpgradesCheckBoxUnit;
string[libNovC_gv_nCC_DebugCampaignTechUpgradesItemsCountMax + 1] libNovC_gv_nC_DebugCampaignTechUpgradesItemList;
string[libNovC_gv_nCC_DebugCampaignTechUpgradesItemsCountMax + 1] libNovC_gv_nC_DebugCampaignTechUpgradesAssignedUnitList;
int[libNovC_gv_nCC_DebugCampaignTechUpgradesItemsCountMax + 1] libNovC_gv_nC_DebugCampaignTechUpgradesAssignedUnitLabelList;
int[libNovC_gv_nCC_DebugCampaignTechUpgradesItemsCountMax + 1] libNovC_gv_nC_DebugCampaignTechUpgradesButtonList;
int libNovC_gv_nC_DebugCampaignTechUpgradesActiveButton;
int libNovC_gv_nC_DebugCampaignTechUpgradesActiveButtonIndex;
string libNovC_gv_nC_DebugCampaignTechUpgradesActiveItem;
int libNovC_gv_NC_DebugCampaignTechDialog;
int libNovC_gv_NC_DebugCampaignTechOK;
int libNovC_gv_NC_DebugCampaignTechCancel;
int libNovC_gv_NC_DebugCampaignTechRandomizeTechButton;
trigger libNovC_gv_NC_TechLimitsCallback;
int libNovC_gv_NC_DebugProgressDialog;
int libNovC_gv_NC_DebugProgressButtonOK;
int libNovC_gv_NC_DebugProgressButtonCancel;
int libNovC_gv_NC_DebugProgressButtonReset;
int libNovC_gv_NC_DebugProgressButtonDirectSelect;
int libNovC_gv_NC_DebugProgressLabelInfo;
string libNovC_gv_NC_DebugProgressLastMission;
string libNovC_gv_NC_DebugProgressLastCreditMission;
string libNovC_gv_NC_DebugProgressCurrentMapBak;
trigger libNovC_gv_NC_DebugProgressExitCallbackOK;
trigger libNovC_gv_NC_DebugProgressExitCallbackCancel;
bool libNovC_gv_NC_DebugProgressResetUsed;
bool libNovC_gv_NC_DebugProgressDocDirty;
bool libNovC_gv_NC_DebugProgressShowRewards;
bool libNovC_gv_NC_DebugProgressDirectSelectEnabled;
int libNovC_gv_NC_DebugProgressBonusObjectiveLevel;
int libNovC_gv_NC_DebugProgressButtonNoObjectives;
int libNovC_gv_NC_DebugProgressButtonAllObjectives;
bool libNovC_gv_NC_DebugProgressRetailMode;
bool libNovC_gv_NC_DebugStartedFirstStorymodeEpisode;
bank libNovC_gv_NC_DebugProgressBank;
bool libNovC_gv_nC_DebugProgressTempBugFlag;
bool libNovC_gv_NC_LoadingComplete;
bool libNovC_gv_nCX_UpgradesTaught;

// Function Declarations
void libNovC_gf_PlayCinematic (string lp_scene, bool lp_animatic);
void libNovC_gf_CampaignAwardAchievement (string lp_achievement, int lp_player);
void libNovC_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player);
bool libNovC_gf_CampaignTechUnitIsEnabled (string lp_techUnit);
void libNovC_gf_LoadCampaignData (string lp_map);
void libNovC_gf_CampaignPlayCutscene (string lp_file, point lp_position, bool lp_waitDontWait, bool lp_allowSkip);
void libNovC_gf_DisplayConversationTimestamp (string lp_conversation);
void libNovC_gf_DisplayTimestamp (string lp_timestamp, bool lp_waitDontWait);
void libNovC_gf_HaltTimestamp ();
void libNovC_gf_CampaignPlayCutscene2 (string lp_file, bool lp_waitDontWait, bool lp_allowSkip);
void libNovC_gf_CampaignStopCutscene ();
void libNovC_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone);
void libNovC_gf_PauseAITimeCampaign (bool lp_pauseUnpause);
void libNovC_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause);
text libNovC_gf_FormatTimeCampaign (int lp_second);
actor libNovC_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint);
void libNovC_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency);
void libNovC_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime);
void libNovC_gf_SetAllSoundChannelVolumesCampaign (int lp_mode);
bool libNovC_gf_CampaignDebugModeIsOn (string lp_mode);
void libNovC_gf_NC_DebugCampaignTechUpgradesCreateDialog ();
void libNovC_gf_NC_DebugCampaignTechUpdateDialog ();
void libNovC_gf_NC_DebugCampaignTechUpgradesUpdateDialog ();
void libNovC_gf_NC_DebugCampaignTechUpdateData ();
void libNovC_gf_NC_DebugCampaignTechUpgradesUpdateData ();
void libNovC_gf_NC_DebugCampaignTechUpgradesAssignUnit (int lp_upgradeItemIndex, string lp_activeUpgradeItem);
void libNovC_gf_NC_DebugCampaignTechCreateDialog ();
void libNovC_gf_NC_DebugCampaignTechCloseDialog ();
void libNovC_gf_NC_DebugCampaignTechDisplayDialog ();
void libNovC_gf_NC_DebugCampaignTechStoreStates ();
void libNovC_gf_NC_DebugCampaignTechRestoreStates ();
bool libNovC_gf_NC_DebugCampaignTechIsDupe (string lp_mission, string lp_category);
void libNovC_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger);
void libNovC_gf_PurchaseStorymodeTech ();
void libNovC_gf_NC_DefaultTechProgress (string lp_mission);
string libNovC_gf_NC_DebugProgressDataTableID (string lp_type, string lp_name);
bool libNovC_gf_NC_DebugProgressDialogOpened ();
void libNovC_gf_NC_DebugProgressSetFirstStorymodeEpisode (bool lp_state);
void libNovC_gf_NC_DebugProgressAddMissionButton (string lp_mission, fixed lp_col, fixed lp_row);
void libNovC_gf_NC_DebugProgressCreateDialog ();
void libNovC_gf_NC_DebugProgressUpdateDialog ();
void libNovC_gf_NC_DebugProgressUpdateRequirementLabel (int lp_label, int lp_status);
void libNovC_gf_NC_DebugProgressCloseDialog ();
text libNovC_gf_NC_DebugProgressMapName (string lp_mission);
void libNovC_gf_NC_DebugProgressDisplayDialog (string lp_currentMission, trigger lp_oKCallback, trigger lp_cancelCallback, bool lp_showRewards);
void libNovC_gf_NC_DebugProgressSaveStats ();
void libNovC_gf_NC_DebugProgressRestoreStats ();
void libNovC_gf_NC_DebugProgressAdjustBonusObjectives ();
void libNovC_gf_NC_DebugProgressCompleteToMission (string lp_goalMission);
void libNovC_gf_NC_DebugProgressSetObjectiveProgress (string lp_missionObjective);
void libNovC_gf_NC_DebugProgressUpdateTutorialProgress (string lp_currentMission);
string libNovC_gf_NC_LocationCutsceneFilter (string lp_location);
string libNovC_gf_NC_MapNewsReport (string lp_map);
int libNovC_gf_NC_MissionRewardsBonusPossible (string lp_map);
string libNovC_gf_NC_MissionContainingObjective (string lp_objective);
string libNovC_gf_NC_MissionCampaignScreenImage (string lp_map);
bool libNovC_gf_NC_MissionIsInstallation (string lp_mission);
string libNovC_gf_NC_MissionFinal ();
void libNovC_gf_EnableDisableTechItemForUnit (bool lp_enableDisable, string lp_techItem, string lp_armyUnit);
void libNovC_gf_EnableDisableTechItemForAllUnits (bool lp_enableDisable, string lp_techItem);
void libNovC_gf_NC_UpdateArmyTechItemStates ();
void libNovC_gf_NC_ArmyTechItemAssignedUnitSet (string lp_techItem, string lp_assignedUnit);
void libNovC_gf_NC_ArmyTechItemStateSet (string lp_techItem, int lp_armyTechItemState);
void libNovC_gf_NC_ArmyTechItemIsNewSetFromIndex (string lp_techItem, int lp_unitIndex, bool lp_isNewStatus);
int libNovC_gf_NC_ArmyTechItemState (string lp_techItem);
bool libNovC_gf_NC_ArmyTechItemStateCheck (string lp_techItem, int lp_armyTechItemState);
bool libNovC_gf_NC_ArmyTechItemUnlocked (string lp_techItem);
bool libNovC_gf_NC_ArmyTechItemMissed (string lp_techItem);
text libNovC_gf_NC_ArmyTechItemName (string lp_techItem);
string libNovC_gf_NC_ArmyTechItemImage (string lp_techItem);
text libNovC_gf_NC_ArmyTechItemDescriptionFromIndex (string lp_techItem, int lp_upgradeIndex);
text libNovC_gf_NC_ArmyTechItemTooltipReward (string lp_techItem);
string libNovC_gf_NC_ArmyTechItemAssignedUnit (string lp_techItem);
bool libNovC_gf_NC_ArmyTechItemIsNewFromIndex (string lp_techItem, int lp_unitIndex);
string libNovC_gf_NC_ArmyTechItemUnitFromIndex (string lp_techItem, int lp_unitIndex);
string libNovC_gf_NC_ArmyTechItemUpgradeFromIndex (string lp_techItem, int lp_upgradeIndex);
string libNovC_gf_NC_ArmyTechItemMovieFromIndex (string lp_techItem, int lp_upgradeIndex);
string libNovC_gf_NC_ArmyTechItemRequiredMission (string lp_techItem);
string libNovC_gf_NC_ArmyTechItemRequiredObjective (string lp_techItem);
string libNovC_gf_NC_ArmyTechItemSourceMission (string lp_techItem);
bool libNovC_gf_NC_ArmyTechItemNewItemsAvailable ();
void libNovC_gf_NC_UpdateArmyUnitStates ();
bool libNovC_gf_ArmyHasUnusedTech ();
void libNovC_gf_NC_SaveArmyTechItemsToBank (bank lp_bank, string lp_section);
void libNovC_gf_NC_LoadArmyTechItemsFromBank (bank lp_bank, string lp_section);
void libNovC_gf_NC_ApplyArmyTechItems ();
void libNovC_gf_NC_ResetArmyTechItems ();
string libNovC_gf_NovaActiveEquipmentInSlot (string lp_equipmentSlot);
void libNovC_gf_EnableDisableNovaEquipment (bool lp_enableDisable, string lp_equipment);
void libNovC_gf_UnequipNovaEquipmentForSlot (string lp_equipmentSlot);
void libNovC_gf_NC_PerkIsNewSet (string lp_campaignPerk, bool lp_isNewState);
bool libNovC_gf_NC_EquipmentUnlocked (string lp_equipment);
bool libNovC_gf_NC_EquipmentMissed (string lp_equipment);
int libNovC_gf_NC_PerkCost (string lp_campaignPerk);
text libNovC_gf_NC_PerkDescriptionExtra (string lp_campaignPerk);
string libNovC_gf_NC_PerkUISound (string lp_campaignPerk);
text libNovC_gf_NC_PerkTooltipReward (string lp_campaignPerk);
bool libNovC_gf_NC_PerkIsNew (string lp_campaignPerk);
bool libNovC_gf_NC_PerkIsSecret (string lp_perk);
bool libNovC_gf_NC_PerkNewEquipmentAvailable ();
bool libNovC_gf_NC_PerkUpgradesActive (string lp_perk, int lp_player);
void libNovC_gf_NC_UpdatePerkStates ();
void libNovC_gf_NC_ResetTech ();
void libNovC_gf_ApplyUserTechChoicestoPlayer (int lp_player);
void libNovC_gf_NC_UpdateOptionalTechUnlocks ();
void libNovC_gf_NC_ApplyGeneralTech (int lp_player);
void libNovC_gf_NC_UpdateWeaponArmorUpgrades (int lp_player);
void libNovC_gf_NC_UpdateTerranAddOnStates (int lp_player);
void libNovC_gf_NC_Initialize (string lp_map);
void libNovC_gf_NC_AutoHeatMapTestMode ();
void libNovC_gf_NC_CampaignPreload ();
void libNovC_gf_NC_TransitionChooseNextMap ();
void libNovC_gf_NC_UpdateCampaignScreen (string lp_mission);
void libNovC_gf_NC_UpdateCampaignIndex (string lp_map);
void libNovC_gf_NC_ResetCampaignIndex ();
int libNovC_gf_NC_CampaignSaveIndex ();
string libNovC_gf_NC_ClickableConversationLink (string lp_characterInstance);
string libNovC_gf_NC_ChampResAbility (string lp_champion);

// Trigger Declarations
trigger libNovC_gt_TimeExpired;
trigger libNovC_gt_QuitDemo;
trigger libNovC_gt_TestUserOverrides;
trigger libNovC_gt_NC_DebugCampaignTechOK;
trigger libNovC_gt_NC_DebugCampaignTechCancel;
trigger libNovC_gt_NC_DebugCampaignTechEquipmentCheckClicked;
trigger libNovC_gt_NC_DebugCampaignTechRandomizeClicked;
trigger libNovC_gt_NC_DebugCampaignTechUpgradesOK;
trigger libNovC_gt_NC_DebugCampaignTechUpgradesCancel;
trigger libNovC_gt_NC_DebugCampaignTechUpgradesCheckClicked;
trigger libNovC_gt_NC_DebugCampaignTechUpgradesOpenClicked;
trigger libNovC_gt_NC_DebugCampaignTechUpgradesItemClicked;
trigger libNovC_gt_NC_DebugTech;
trigger libNovC_gt_NC_DebugProgressMissionButtonClicked;
trigger libNovC_gt_NC_DebugProgressDirectMissionButtonClicked;
trigger libNovC_gt_NC_DebugProgressDirectSelectButtonClicked;
trigger libNovC_gt_NC_DebugProgressOK;
trigger libNovC_gt_NC_DebugProgressLaunchMission;
trigger libNovC_gt_NC_DebugProgressDirectLaunchMission;
trigger libNovC_gt_NC_DebugProgressCancel;
trigger libNovC_gt_NC_DebugProgressReset;
trigger libNovC_gt_NC_DebugProgressBonusObjectiveButtonClicked;
trigger libNovC_gt_NC_DebugProgress;
trigger libNovC_gt_NC_DebugProgressDevelop;
trigger libNovC_gt_NC_DebugProgressOKCallback;
trigger libNovC_gt_NC_DebugProgressCancelCallback;
trigger libNovC_gt_NC_DebugProgressRetailMode;
trigger libNovC_gt_NC_MissionSimulationAgesUpate;
trigger libNovC_gt_NC_UpdateMissionFlow;
trigger libNovC_gt_NC_ObjectiveBonusText;
trigger libNovC_gt_NC_ApplyTech;
trigger libNovC_gt_NC_UpdateTechStates;
trigger libNovC_gt_NC_TechUnitUpdate;
trigger libNovC_gt_NC_TrackLoadingComplete;
trigger libNovC_gt_NC_SaveTransitionVars;
trigger libNovC_gt_NC_LoadTransitionVars;
trigger libNovC_gt_NC_ResetCampaignData;
trigger libNovC_gt_NC_StorySimulationStart;
trigger libNovC_gt_NC_StorySimulationEnd;

// Library Initialization
void libNovC_InitVariables ();

