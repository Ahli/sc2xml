include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "LibComC"
include "LibCMMI"
include "LibNovC_h"
include "LibNCST_h"
include "LibNCUI_h"

include "LibNCMI_h"

//--------------------------------------------------------------------------------------------------
// Library: Mission (Nova)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libNCMI_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libHots_InitVariables();
    libComC_InitVariables();
    libCMMI_InitVariables();
    libNovC_InitVariables();
    libNCST_InitVariables();
    libNCUI_InitVariables();
}

// Variable Initialization
bool libNCMI_InitVariables_completed = false;

void libNCMI_InitVariables () {
    int init_i;

    if (libNCMI_InitVariables_completed) {
        return;
    }

    libNCMI_InitVariables_completed = true;

    libNCMI_gv_nM_StealthAI_EnemyUnitGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libNCMI_gv_nM_StealthAIDefendRegionCountMax; init_i += 1) {
        libNCMI_gv_nM_StealthAIDefendRegionArray[init_i].lv_aIState = libNCMI_ge_StealthAIDefendRegionState_Inactive;
        libNCMI_gv_nM_StealthAIDefendRegionArray[init_i].lv_defendingUnitGroup = UnitGroupEmpty();
    }
    libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer = TimerCreate();
    libNCMI_gv_nM_StealthAIGhostSnipeGlobalCooldown = libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 1.0, 0.0625);
    libNCMI_gv_nM_StealthAIGhostSnipeGlobalCooldownTimer = TimerCreate();
    libNCMI_gv_nM_ScreenMode = c_uiModeConsole;
    libNCMI_gv_nM_CreditsCutscene = c_cutsceneNone;
    libNCMI_gv_kerriganPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("NovaPsiStrike", "Energy");
    libNCMI_gv_nM_NovaNukesUnitGroup = UnitGroupEmpty();
    libNCMI_gv_NM_GameCheat_DialogWidth = 300;
    libNCMI_gv_NM_GameCheat_DialogHeight = 400;
    libNCMI_gv_NM_GameCheat_Dialog = c_invalidDialogId;
    libNCMI_gv_NM_GameCheat_Minimize = c_invalidDialogControlId;
    libNCMI_gv_NM_GameCheat_OpenMissionCheat = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 25; init_i += 1) {
        libNCMI_gv_NM_GameCheat_CheckBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCMI_gv_NMC_MissionCheat_MaxCheats; init_i += 1) {
        libNCMI_gv_NM_MissionCheat_Cheats[init_i].lv_titleString = "";
        libNCMI_gv_NM_MissionCheat_Cheats[init_i].lv_buttonDialog = c_invalidDialogControlId;
        libNCMI_gv_NM_MissionCheat_Cheats[init_i].lv_editBoxDialog = c_invalidDialogControlId;
    }
    libNCMI_gv_NM_MissionCheat_Dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libNCMI_gv_NMC_MissionCheat_PanelCountMAX; init_i += 1) {
        libNCMI_gv_NM_MissionCheat_Panel[init_i] = c_invalidDialogControlId;
    }
    libNCMI_gv_NM_MissionCheat_CloseButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libNCMI_gv_nMC_HEROCOUNT; init_i += 1) {
        libNCMI_gv_nM_HeroReviveCDLink[init_i] = "";
    }
    libNCMI_gv_NM_PlanetPortrait = c_invalidPortraitId;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libNCMI_gv_NM_MissionTipType[init_i] = libNtve_ge_TipType_NormalTip;
    }
    libNCMI_gv_NM_MissionHelpButton = c_invalidDialogControlId;
    libNCMI_gv_NM_MissionHelpButtonTipPanel = c_invalidDialogControlId;
    libNCMI_gv_NM_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    libNCMI_gv_NM_SendTransmissionCampaignPlayingTick = 3;
    libNCMI_gv_NM_SendTransmissionCampaignChatBubbleOn = true;
    libNCMI_gv_NM_DropPod_TP_Units = UnitGroupEmpty();
    libNCMI_gv_nM_UpgradeTextTag = c_textTagNone;
}

// Presets
// Functions
void libNCMI_gf_SetMissionObjectiveProgress (string lp_objective, int lp_current) {
    // Deprecated
    libCMMI_gf_SetMissionObjectiveProgress(lp_objective, lp_current);
}

void libNCMI_gf_CreateObjectiveCampaign (string lp_objectiveData) {
    // Deprecated
    libCMMI_gf_CreateObjectiveCampaign(lp_objectiveData);
}

void libNCMI_gf_ZS_SetMissionObjectiveState (string lp_objective, int lp_state) {
    int autoCB253951_val;

    // Implementation
    autoCB253951_val = lp_state;
    if (autoCB253951_val == libNovC_ge_MissionObjectiveState_Available) {
        libCMMI_gf_ZS_SetMissionObjectiveState(lp_objective, libComC_ge_MissionObjectiveState_Available);
    }
    else if (autoCB253951_val == libNovC_ge_MissionObjectiveState_Completed) {
        libCMMI_gf_ZS_SetMissionObjectiveState(lp_objective, libComC_ge_MissionObjectiveState_Completed);
    }
    else if (autoCB253951_val == libNovC_ge_MissionObjectiveState_Failed) {
        libCMMI_gf_ZS_SetMissionObjectiveState(lp_objective, libComC_ge_MissionObjectiveState_Failed);
    }
    else if (autoCB253951_val == libNovC_ge_MissionObjectiveState_Undiscovered) {
        libCMMI_gf_ZS_SetMissionObjectiveState(lp_objective, libComC_ge_MissionObjectiveState_Undiscovered);
    }
    else {
    }
}

void libNCMI_gf_StealthAISetStealthAIDefendRegionState (region lp_stealthAIRegion, int lp_stealthAIRegionState) {
    // Variable Declarations
    int lv_stealthAIRegionIndex;

    // Variable Initialization

    // Implementation
    lv_stealthAIRegionIndex = libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(lp_stealthAIRegion);
    if (((lv_stealthAIRegionIndex > libNCMI_gv_nM_StealthAIDefendRegionCount) || (lv_stealthAIRegionIndex < 1))) {
        return ;
    }

    libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIRegionIndex].lv_aIState = lp_stealthAIRegionState;
}

int libNCMI_gf_StealthAIGetStealthAIDefendRegionState (region lp_stealthAIRegion) {
    int autoAFB5B1EE_val;

    // Variable Declarations
    int lv_returnRegionState;
    int lv_stealthAIRegionIndex;

    // Variable Initialization

    // Implementation
    lv_stealthAIRegionIndex = libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(lp_stealthAIRegion);
    if (((lv_stealthAIRegionIndex > libNCMI_gv_nM_StealthAIDefendRegionCount) || (lv_stealthAIRegionIndex < 1))) {
        return 0;
    }

    autoAFB5B1EE_val = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIRegionIndex].lv_aIState;
    if (autoAFB5B1EE_val == 0.0) {
        lv_returnRegionState = libNCMI_ge_StealthAIDefendRegionState_Inactive;
    }
    else if (autoAFB5B1EE_val == 1.0) {
        lv_returnRegionState = libNCMI_ge_StealthAIDefendRegionState_Active;
    }
    else {
        lv_returnRegionState = libNCMI_ge_StealthAIDefendRegionState_Inactive;
    }
    return lv_returnRegionState;
}

void libNCMI_gf_StealthAISetStealthAIUnitState (unit lp_stealthAIUnit, int lp_stealthAIUnitState) {
    int auto8757BA59_val;

    // Variable Declarations
    int lv_desiredUnitStateIndex;

    // Variable Initialization

    // Implementation
    auto8757BA59_val = lp_stealthAIUnitState;
    if (auto8757BA59_val == libNCMI_ge_StealthAIUnitState_Unavailable) {
        lv_desiredUnitStateIndex = 0;
    }
    else if (auto8757BA59_val == libNCMI_ge_StealthAIUnitState_Idle) {
        lv_desiredUnitStateIndex = 1;
    }
    else if (auto8757BA59_val == libNCMI_ge_StealthAIUnitState_Attacking) {
        lv_desiredUnitStateIndex = 2;
    }
    else if (auto8757BA59_val == libNCMI_ge_StealthAIUnitState_Reacting) {
        lv_desiredUnitStateIndex = 3;
    }
    else {
    }
    UnitSetCustomValue(lp_stealthAIUnit, libNCMI_gv_nM_StealthAIState_CustomValueIndex, lv_desiredUnitStateIndex);
}

int libNCMI_gf_StealthAIGetStealthAIUnitState (unit lp_stealthAIUnit) {
    fixed autoB8BEA561_val;

    // Variable Declarations
    int lv_returnUnitState;

    // Variable Initialization
    lv_returnUnitState = libNCMI_ge_StealthAIUnitState_Unavailable;

    // Implementation
    autoB8BEA561_val = UnitGetCustomValue(lp_stealthAIUnit, libNCMI_gv_nM_StealthAIState_CustomValueIndex);
    if (autoB8BEA561_val == 0.0) {
        lv_returnUnitState = libNCMI_ge_StealthAIUnitState_Unavailable;
    }
    else if (autoB8BEA561_val == 1.0) {
        lv_returnUnitState = libNCMI_ge_StealthAIUnitState_Idle;
    }
    else if (autoB8BEA561_val == 2.0) {
        lv_returnUnitState = libNCMI_ge_StealthAIUnitState_Attacking;
    }
    else if (autoB8BEA561_val == 3.0) {
        lv_returnUnitState = libNCMI_ge_StealthAIUnitState_Reacting;
    }
    else {
        lv_returnUnitState = libNCMI_ge_StealthAIUnitState_Unavailable;
    }
    return lv_returnUnitState;
}

void libNCMI_gf_StealthAISetStealthAIGhostJob (unit lp_stealthAIGhost, int lp_stealthAIGhostState) {
    int auto9F923E8E_val;

    // Variable Declarations
    int lv_desiredUnitStateIndex;

    // Variable Initialization

    // Implementation
    auto9F923E8E_val = lp_stealthAIGhostState;
    if (auto9F923E8E_val == libNCMI_ge_StealthAIGhostJob_Floating) {
        lv_desiredUnitStateIndex = 0;
    }
    else if (auto9F923E8E_val == libNCMI_ge_StealthAIGhostJob_Scanning) {
        lv_desiredUnitStateIndex = 1;
    }
    else {
    }
    UnitSetCustomValue(lp_stealthAIGhost, libNCMI_gv_nM_StealthAIGhostState_CustomValueIndex, lv_desiredUnitStateIndex);
}

int libNCMI_gf_StealthAIGetStealthAIGhostJob (unit lp_stealthAIGhost) {
    fixed auto1B9D5FC1_val;

    // Variable Declarations
    int lv_returnUnitState;

    // Variable Initialization
    lv_returnUnitState = libNCMI_ge_StealthAIGhostJob_Floating;

    // Implementation
    auto1B9D5FC1_val = UnitGetCustomValue(lp_stealthAIGhost, libNCMI_gv_nM_StealthAIGhostState_CustomValueIndex);
    if (auto1B9D5FC1_val == 0.0) {
        lv_returnUnitState = libNCMI_ge_StealthAIGhostJob_Floating;
    }
    else if (auto1B9D5FC1_val == 1.0) {
        lv_returnUnitState = libNCMI_ge_StealthAIGhostJob_Scanning;
    }
    else {
        lv_returnUnitState = libNCMI_ge_StealthAIGhostJob_Floating;
    }
    return lv_returnUnitState;
}

void libNCMI_gf_StealthAISetStealthAIUnitCasting (unit lp_stealthAIUnit, int lp_stealthAIUnitCasting) {
    int auto308D1312_val;

    // Variable Declarations
    int lv_desiredUnitStateIndex;

    // Variable Initialization

    // Implementation
    auto308D1312_val = lp_stealthAIUnitCasting;
    if (auto308D1312_val == libNCMI_ge_StealthAIUnitCasting_NotCasting) {
        lv_desiredUnitStateIndex = 0;
    }
    else if (auto308D1312_val == libNCMI_ge_StealthAIUnitCasting_Casting) {
        lv_desiredUnitStateIndex = 1;
    }
    else {
    }
    UnitSetCustomValue(lp_stealthAIUnit, libNCMI_gv_nM_StealthAIUnitCasting_CustomValueIndex, lv_desiredUnitStateIndex);
}

int libNCMI_gf_StealthAIGetStealthAIUnitCasting (unit lp_stealthAIUnit) {
    fixed auto32711F42_val;

    // Variable Declarations
    int lv_returnUnitState;

    // Variable Initialization

    // Implementation
    auto32711F42_val = UnitGetCustomValue(lp_stealthAIUnit, libNCMI_gv_nM_StealthAIUnitCasting_CustomValueIndex);
    if (auto32711F42_val == 0.0) {
        lv_returnUnitState = libNCMI_ge_StealthAIUnitCasting_NotCasting;
    }
    else if (auto32711F42_val == 1.0) {
        lv_returnUnitState = libNCMI_ge_StealthAIUnitCasting_Casting;
    }
    else {
        lv_returnUnitState = libNCMI_ge_StealthAIUnitCasting_NotCasting;
    }
    return lv_returnUnitState;
}

region libNCMI_gf_StealthAIGetDefendRegionOfUnit (unit lp_stealthAIUnit) {
    int auto4DC1C2DC_ae;
    int auto4DC1C2DC_ai;

    // Variable Declarations
    int lv_defendRegionIter;

    // Variable Initialization

    // Implementation
    auto4DC1C2DC_ae = libNCMI_gv_nM_StealthAIDefendRegionCount;
    auto4DC1C2DC_ai = 1;
    lv_defendRegionIter = 1;
    for ( ; ( (auto4DC1C2DC_ai >= 0 && lv_defendRegionIter <= auto4DC1C2DC_ae) || (auto4DC1C2DC_ai <= 0 && lv_defendRegionIter >= auto4DC1C2DC_ae) ) ; lv_defendRegionIter += auto4DC1C2DC_ai ) {
        if ((UnitGroupHasUnit(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitGroup, lp_stealthAIUnit) == true)) {
            return libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendRegion;
        }

    }
    return null;
}

point libNCMI_gf_StealthAIGetHomePointOfUnit (unit lp_stealthAIUnit) {
    // Variable Declarations
    int lv_defendRegionIter;

    // Variable Initialization

    // Implementation
    return libHots_gf_PointStoredForUnit(lp_stealthAIUnit, libNCMI_gv_nM_StealthAIHomePoint_PointStoredForUnitIndex);
}

int libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion (region lp_stealthAIRegion) {
    int autoD14AC3BA_ae;
    int autoD14AC3BA_ai;

    // Variable Declarations
    int lv_stealthAIRegionIndex;

    // Variable Initialization

    // Implementation
    autoD14AC3BA_ae = libNCMI_gv_nM_StealthAIDefendRegionCount;
    autoD14AC3BA_ai = 1;
    lv_stealthAIRegionIndex = 1;
    for ( ; ( (autoD14AC3BA_ai >= 0 && lv_stealthAIRegionIndex <= autoD14AC3BA_ae) || (autoD14AC3BA_ai <= 0 && lv_stealthAIRegionIndex >= autoD14AC3BA_ae) ) ; lv_stealthAIRegionIndex += autoD14AC3BA_ai ) {
        if ((lp_stealthAIRegion == libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIRegionIndex].lv_defendRegion)) {
            return lv_stealthAIRegionIndex;
        }

    }
    return lv_stealthAIRegionIndex;
}

region libNCMI_gf_StealthAIGetDefendRegionRegionFromIndex (int lp_stealthAIRegionIndex) {
    // Variable Declarations
    region lv_steathAIRegion;

    // Variable Initialization

    // Implementation
    if (((lp_stealthAIRegionIndex > libNCMI_gv_nM_StealthAIDefendRegionCount) || (lp_stealthAIRegionIndex < 1))) {
        return null;
    }

    return libNCMI_gv_nM_StealthAIDefendRegionArray[lp_stealthAIRegionIndex].lv_defendRegion;
}

int libNCMI_gf_StealthAINumberOfVisibleEnemyUnitsInDefendRegion (region lp_stealthAIRegion) {
    int auto82293375_ae;
    int auto82293375_ai;

    // Variable Declarations
    int lv_enemyUnitIter;
    int lv_enemyUnitCount;

    // Variable Initialization

    // Implementation
    auto82293375_ae = UnitGroupCount(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, c_unitCountAlive);
    auto82293375_ai = 1;
    lv_enemyUnitIter = 1;
    for ( ; ( (auto82293375_ai >= 0 && lv_enemyUnitIter <= auto82293375_ae) || (auto82293375_ai <= 0 && lv_enemyUnitIter >= auto82293375_ae) ) ; lv_enemyUnitIter += auto82293375_ai ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter), lp_stealthAIRegion) == true) && (libNtve_gf_UnitIsVisibleToPlayer(UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter), libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(lp_stealthAIRegion)].lv_owningPlayer) == true)) {
            lv_enemyUnitCount += 1;
        }

    }
    return lv_enemyUnitCount;
}

int libNCMI_gf_StealthAINumberOfVisibleEnemyUnitsToUnitInDefendRegion (unit lp_defendingUnit, region lp_stealthAIRegion) {
    int auto4FF8E539_ae;
    int auto4FF8E539_ai;

    // Variable Declarations
    region lv_defenderVisionRegion;
    int lv_enemyUnitIter;
    int lv_enemyUnitCount;

    // Variable Initialization

    // Implementation
    lv_defenderVisionRegion = RegionCircle(UnitGetPosition(lp_defendingUnit), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_defendingUnit), "Sight", c_playerAny)));
    auto4FF8E539_ae = UnitGroupCount(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, c_unitCountAlive);
    auto4FF8E539_ai = 1;
    lv_enemyUnitIter = 1;
    for ( ; ( (auto4FF8E539_ai >= 0 && lv_enemyUnitIter <= auto4FF8E539_ae) || (auto4FF8E539_ai <= 0 && lv_enemyUnitIter >= auto4FF8E539_ae) ) ; lv_enemyUnitIter += auto4FF8E539_ai ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter), lv_defenderVisionRegion) == true) && (libNtve_gf_UnitIsVisibleToPlayer(UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter), libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(lp_stealthAIRegion)].lv_owningPlayer) == true)) {
            lv_enemyUnitCount += 1;
        }

    }
    return lv_enemyUnitCount;
}

unitgroup libNCMI_gf_StealthAIGetVisibleEnemyUnitsInDefendRegion (region lp_stealthAIRegion) {
    int auto798AB812_ae;
    int auto798AB812_ai;

    // Variable Declarations
    int lv_enemyUnitIter;
    unitgroup lv_enemyUnitGroup;

    // Variable Initialization
    lv_enemyUnitGroup = UnitGroupEmpty();

    // Implementation
    auto798AB812_ae = UnitGroupCount(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, c_unitCountAlive);
    auto798AB812_ai = 1;
    lv_enemyUnitIter = 1;
    for ( ; ( (auto798AB812_ai >= 0 && lv_enemyUnitIter <= auto798AB812_ae) || (auto798AB812_ai <= 0 && lv_enemyUnitIter >= auto798AB812_ae) ) ; lv_enemyUnitIter += auto798AB812_ai ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter), lp_stealthAIRegion) == true) && (libNtve_gf_UnitIsVisibleToPlayer(UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter), libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(lp_stealthAIRegion)].lv_owningPlayer) == true)) {
            UnitGroupAdd(lv_enemyUnitGroup, UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter));
        }

    }
    return lv_enemyUnitGroup;
}

unitgroup libNCMI_gf_StealthAIGetVisibleEnemyUnitsToUnitInDefendRegion (unit lp_defendingUnit, region lp_stealthAIRegion) {
    int auto3CBF8973_ae;
    int auto3CBF8973_ai;

    // Variable Declarations
    region lv_defenderVisionRegion;
    int lv_enemyUnitIter;
    unitgroup lv_enemyUnitGroup;

    // Variable Initialization
    lv_enemyUnitGroup = UnitGroupEmpty();

    // Implementation
    lv_defenderVisionRegion = RegionCircle(UnitGetPosition(lp_defendingUnit), StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_defendingUnit), "Sight", c_playerAny)));
    auto3CBF8973_ae = UnitGroupCount(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, c_unitCountAlive);
    auto3CBF8973_ai = 1;
    lv_enemyUnitIter = 1;
    for ( ; ( (auto3CBF8973_ai >= 0 && lv_enemyUnitIter <= auto3CBF8973_ae) || (auto3CBF8973_ai <= 0 && lv_enemyUnitIter >= auto3CBF8973_ae) ) ; lv_enemyUnitIter += auto3CBF8973_ai ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter), lv_defenderVisionRegion) == true) && (libNtve_gf_UnitIsVisibleToPlayer(UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter), libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(lp_stealthAIRegion)].lv_owningPlayer) == true)) {
            UnitGroupAdd(lv_enemyUnitGroup, UnitGroupUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_enemyUnitIter));
        }

    }
    return lv_enemyUnitGroup;
}

void libNCMI_gf_StealthAIInitializeStealthAIDefendRegion (region lp_defendRegion, int lp_defendingPlayer) {
    // Implementation
    if ((libNCMI_gv_nM_StealthAIDefendRegionCount >= libNCMI_gv_nM_StealthAIDefendRegionCountMax)) {
        return ;
    }

    libNCMI_gv_nM_StealthAIDefendRegionCount += 1;
    libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gv_nM_StealthAIDefendRegionCount].lv_owningPlayer = lp_defendingPlayer;
    libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gv_nM_StealthAIDefendRegionCount].lv_defendRegion = lp_defendRegion;
    libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gv_nM_StealthAIDefendRegionCount].lv_aIState = libNCMI_ge_StealthAIDefendRegionState_Inactive;
    TriggerExecute(libNCMI_gt_StealthAIRunStealthAIDefendRegions, true, false);
}

void libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion (region lp_stealthAIDefendRegion, unit lp_stealthAIUnit, point lp_stealthAIHomePoint) {
    // Variable Declarations
    int lv_stealthAIDefendRegionIndex;
    int lv_stealthAIDefendingUnitIndex;

    // Variable Initialization

    // Implementation
    libNCMI_gf_StealthAIRemoveUnitFromAllStealthAIDefendRegions(lp_stealthAIUnit);
    lv_stealthAIDefendRegionIndex = libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(lp_stealthAIDefendRegion);
    if (((lv_stealthAIDefendRegionIndex > libNCMI_gv_nM_StealthAIDefendRegionCount) || (lv_stealthAIDefendRegionIndex < 1) || (libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitCount >= libNCMI_gv_nM_StealthAIDefenderUnitCountMax))) {
        return ;
    }

    if ((UnitGetType(lp_stealthAIUnit) != "RotatingTurretTarget") && (UnitGetType(lp_stealthAIUnit) != "RotatingTurretAuto") && (UnitGetType(lp_stealthAIUnit) != "RotatingTurretAutoTarget")) {
        libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitCount += 1;
        lv_stealthAIDefendingUnitIndex = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitCount;
        libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefendingUnitIndex].lv_unit = lp_stealthAIUnit;
        libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefendingUnitIndex].lv_unitType = UnitGetType(lp_stealthAIUnit);
        libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefendingUnitIndex].lv_homePoint = libNtve_gf_PointFacingAngle(lp_stealthAIHomePoint, PointGetFacing(lp_stealthAIHomePoint));
        UnitGroupAdd(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitGroup, lp_stealthAIUnit);
        libHots_gf_StorePointForUnit(lp_stealthAIUnit, libNCMI_gv_nM_StealthAIHomePoint_PointStoredForUnitIndex, libNtve_gf_PointFacingAngle(lp_stealthAIHomePoint, PointGetFacing(lp_stealthAIHomePoint)));
        libNCMI_gf_StealthAISetStealthAIUnitState(lp_stealthAIUnit, libNCMI_ge_StealthAIUnitState_Idle);
    }

}

void libNCMI_gf_StealthAIRemoveUnitFromAllStealthAIDefendRegions (unit lp_stealthAIUnit) {
    int auto4E7D3F74_ae;
    int auto4E7D3F74_ai;
    int auto315202B9_ae;
    int auto315202B9_ai;

    // Variable Declarations
    int lv_defendingUnitIter;
    int lv_defendRegionIter;

    // Variable Initialization

    // Implementation
    auto4E7D3F74_ae = libNCMI_gv_nM_StealthAIDefendRegionCount;
    auto4E7D3F74_ai = 1;
    lv_defendRegionIter = 1;
    for ( ; ( (auto4E7D3F74_ai >= 0 && lv_defendRegionIter <= auto4E7D3F74_ae) || (auto4E7D3F74_ai <= 0 && lv_defendRegionIter >= auto4E7D3F74_ae) ) ; lv_defendRegionIter += auto4E7D3F74_ai ) {
        auto315202B9_ae = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount;
        auto315202B9_ai = 1;
        lv_defendingUnitIter = 1;
        for ( ; ( (auto315202B9_ai >= 0 && lv_defendingUnitIter <= auto315202B9_ae) || (auto315202B9_ai <= 0 && lv_defendingUnitIter >= auto315202B9_ae) ) ; lv_defendingUnitIter += auto315202B9_ai ) {
            if ((lp_stealthAIUnit == libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_unit)) {
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_unit = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_unit;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_unitType = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_unitType;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_homePoint = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_homePoint;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_isLookBetween2Angles = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_isLookBetween2Angles;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookAngle1 = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_lookAngle1;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookAngle2 = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_lookAngle1;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookWaitTime = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_lookWaitTime;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_isPatrol4Points = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_isPatrol4Points;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint1 = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolPoint1;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint2 = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolPoint2;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint3 = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolPoint3;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint4 = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolPoint4;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolWaitTime = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolWaitTime;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_unit = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_unitType = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_homePoint = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_isLookBetween2Angles = false;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_lookAngle1 = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_lookAngle1 = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_lookWaitTime = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_isPatrol4Points = false;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolPoint1 = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolPoint2 = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolPoint3 = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolPoint4 = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount].lv_patrolWaitTime = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount -= 1;
            }

        }
        UnitGroupRemove(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitGroup, lp_stealthAIUnit);
        libHots_gf_StorePointForUnit(lp_stealthAIUnit, libNCMI_gv_nM_StealthAIHomePoint_PointStoredForUnitIndex, null);
        libNCMI_gf_StealthAISetStealthAIUnitState(lp_stealthAIUnit, libNCMI_ge_StealthAIUnitState_Unavailable);
    }
}

void libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup (unit lp_stealthAIEnemyUnit) {
    // Implementation
    UnitGroupAdd(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lp_stealthAIEnemyUnit);
}

void libNCMI_gf_StealthAIRemoveUnitStealthAIEnemyUnitGroup (unit lp_stealthAIEnemyUnit) {
    // Implementation
    UnitGroupRemove(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lp_stealthAIEnemyUnit);
}

bool libNCMI_gf_StealthAIIsUnitInStealthAIEnemyUnitGroup (unit lp_stealthAIEnemyUnit) {
    // Implementation
    if ((UnitGroupHasUnit(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lp_stealthAIEnemyUnit) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void libNCMI_gf_StealthAIStealthAIDefendRegion (int lp_stealthAIDefendRegionIndex) {
    unitgroup auto5ADAA0AD_g;
    int auto5ADAA0AD_u;
    unitgroup autoD087C6AB_g;
    int autoD087C6AB_u;
    unitgroup auto2D3EF93F_g;
    int auto2D3EF93F_u;
    unitgroup autoC958FC29_g;
    int autoC958FC29_u;

    // Variable Declarations
    unit lv_defendingUnit;
    region lv_defendRegion;
    unitgroup lv_viableEnemyTargets;
    unit lv_closestEnemyToDefendingUnit;
    unit lv_enemyUnitGroupIter;

    // Variable Initialization
    lv_defendRegion = libNCMI_gv_nM_StealthAIDefendRegionArray[lp_stealthAIDefendRegionIndex].lv_defendRegion;
    lv_viableEnemyTargets = UnitGroupEmpty();

    // Implementation
    UnitGroupLoopBegin(libNCMI_gv_nM_StealthAIDefendRegionArray[lp_stealthAIDefendRegionIndex].lv_defendingUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_defendingUnit = UnitGroupLoopCurrent();
        if ((libNCMI_gf_StealthAIGetStealthAIUnitCasting(lv_defendingUnit) == libNCMI_ge_StealthAIUnitCasting_NotCasting) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lv_defendingUnit) != libNCMI_ge_StealthAIUnitState_Unavailable) && (UnitGroupCount(UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_defendRegion, 1), c_unitCountAlive) > 0) && ((UnitGetType(lv_defendingUnit) == "GhostDetectorCone") || (UnitGetType(lv_defendingUnit) == "GhostAlternateDetectorCone") || (UnitGetType(lv_defendingUnit) == "Ghost") || (UnitGetType(lv_defendingUnit) == "GhostAlternate"))) {
            lv_viableEnemyTargets = UnitGroupEmpty();
            auto5ADAA0AD_g = UnitGroupFilter(null, c_playerAny, UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_defendRegion, 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto5ADAA0AD_u = 1;
            for ( ; auto5ADAA0AD_u <= UnitGroupCount(auto5ADAA0AD_g, c_unitCountAll) ; auto5ADAA0AD_u += BoolToInt(lv_enemyUnitGroupIter == UnitGroupUnit(auto5ADAA0AD_g, auto5ADAA0AD_u)) ) {
                lv_enemyUnitGroupIter = UnitGroupUnit(auto5ADAA0AD_g, auto5ADAA0AD_u);
                if ((DistanceBetweenPoints(UnitGetPosition(lv_defendingUnit), UnitGetPosition(lv_enemyUnitGroupIter)) <= (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_defendingUnit), "Radius", c_playerAny)) + StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "DOMEMP", "Range[" + IntToString(0) + "]", c_playerAny)))) && ((UnitGetType(lv_enemyUnitGroupIter) == "NovaHoloDecoy") || (UnitHasBehavior2(lv_enemyUnitGroupIter, "DetectorConeDetected") == true) || ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemyUnitGroupIter, UnitGetOwner(lv_defendingUnit)) == true) && (UnitTestState(lv_enemyUnitGroupIter, c_unitStateCloaked) == true)))) {
                    UnitGroupAdd(lv_viableEnemyTargets, lv_enemyUnitGroupIter);
                }

            }
            if ((UnitGroupCount(lv_viableEnemyTargets, c_unitCountAlive) > 0)) {
                libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget(lv_defendingUnit, UnitGroupClosestToPoint(lv_viableEnemyTargets, UnitGetPosition(lv_defendingUnit)));
            }

        }

        if ((libNCMI_gf_StealthAIGetStealthAIUnitCasting(lv_defendingUnit) == libNCMI_ge_StealthAIUnitCasting_NotCasting) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lv_defendingUnit) != libNCMI_ge_StealthAIUnitState_Unavailable) && (UnitGroupCount(UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_defendRegion, 1), c_unitCountAlive) > 0) && (UnitGetType(lv_defendingUnit) == "NovaSonarDrone")) {
            lv_viableEnemyTargets = UnitGroupEmpty();
            autoD087C6AB_g = UnitGroupFilter(null, c_playerAny, UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_defendRegion, 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD087C6AB_u = 1;
            for ( ; autoD087C6AB_u <= UnitGroupCount(autoD087C6AB_g, c_unitCountAll) ; autoD087C6AB_u += BoolToInt(lv_enemyUnitGroupIter == UnitGroupUnit(autoD087C6AB_g, autoD087C6AB_u)) ) {
                lv_enemyUnitGroupIter = UnitGroupUnit(autoD087C6AB_g, autoD087C6AB_u);
                if ((DistanceBetweenPoints(UnitGetPosition(lv_defendingUnit), UnitGetPosition(lv_enemyUnitGroupIter)) <= (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_defendingUnit), "Radius", c_playerAny)) + StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "SonarDroneEMP", "Range[" + IntToString(0) + "]", c_playerAny)))) && ((UnitGetType(lv_enemyUnitGroupIter) == "NovaHoloDecoy") || (UnitHasBehavior2(lv_enemyUnitGroupIter, "NovaSonarPingDetected") == true) || ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemyUnitGroupIter, UnitGetOwner(lv_defendingUnit)) == true) && (UnitTestState(lv_enemyUnitGroupIter, c_unitStateCloaked) == true)))) {
                    UnitGroupAdd(lv_viableEnemyTargets, lv_enemyUnitGroupIter);
                }

            }
            if ((UnitGroupCount(lv_viableEnemyTargets, c_unitCountAlive) > 0)) {
                libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget(lv_defendingUnit, UnitGroupClosestToPoint(lv_viableEnemyTargets, UnitGetPosition(lv_defendingUnit)));
            }

        }

        if ((libNCMI_gf_StealthAIGetStealthAIUnitCasting(lv_defendingUnit) == libNCMI_ge_StealthAIUnitCasting_NotCasting) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lv_defendingUnit) != libNCMI_ge_StealthAIUnitState_Unavailable) && (UnitGroupCount(UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_defendRegion, 1), c_unitCountAlive) > 0) && (UnitGetType(lv_defendingUnit) == "NovaAlarmBot")) {
            lv_viableEnemyTargets = UnitGroupEmpty();
            auto2D3EF93F_g = UnitGroupFilter(null, c_playerAny, UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_defendRegion, 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto2D3EF93F_u = 1;
            for ( ; auto2D3EF93F_u <= UnitGroupCount(auto2D3EF93F_g, c_unitCountAll) ; auto2D3EF93F_u += BoolToInt(lv_enemyUnitGroupIter == UnitGroupUnit(auto2D3EF93F_g, auto2D3EF93F_u)) ) {
                lv_enemyUnitGroupIter = UnitGroupUnit(auto2D3EF93F_g, auto2D3EF93F_u);
                if ((DistanceBetweenPoints(UnitGetPosition(lv_defendingUnit), UnitGetPosition(lv_enemyUnitGroupIter)) <= StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "NovaAlarmBotAuraSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny))) && ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemyUnitGroupIter, UnitGetOwner(lv_defendingUnit)) == true) || (UnitHasBehavior2(lv_enemyUnitGroupIter, "NovaSonarPingDetected") == true))) {
                    UnitGroupAdd(lv_viableEnemyTargets, lv_enemyUnitGroupIter);
                }

            }
            if ((UnitGroupCount(lv_viableEnemyTargets, c_unitCountAlive) > 0)) {
                libNCMI_gf_StealthAIMakeAlarmBotCastEMP(lv_defendingUnit);
            }

        }

        if ((libNCMI_gf_StealthAIGetStealthAIUnitCasting(lv_defendingUnit) == libNCMI_ge_StealthAIUnitCasting_NotCasting) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lv_defendingUnit) != libNCMI_ge_StealthAIUnitState_Unavailable) && (UnitGroupCount(UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_defendRegion, 1), c_unitCountAlive) > 0) && ((UnitGetType(lv_defendingUnit) == "RotatingTurretPassiveSCW") || (UnitGetType(lv_defendingUnit) == "RotatingTurretPassiveSCCW"))) {
            lv_viableEnemyTargets = UnitGroupEmpty();
            autoC958FC29_g = UnitGroupFilter(null, c_playerAny, UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, lv_defendRegion, 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC958FC29_u = 1;
            for ( ; autoC958FC29_u <= UnitGroupCount(autoC958FC29_g, c_unitCountAll) ; autoC958FC29_u += BoolToInt(lv_enemyUnitGroupIter == UnitGroupUnit(autoC958FC29_g, autoC958FC29_u)) ) {
                lv_enemyUnitGroupIter = UnitGroupUnit(autoC958FC29_g, autoC958FC29_u);
                if ((UnitHasBehavior2(lv_enemyUnitGroupIter, "DetectorConeDetected") == true)) {
                    UnitGroupAdd(lv_viableEnemyTargets, lv_enemyUnitGroupIter);
                }

            }
            if ((UnitGroupCount(lv_viableEnemyTargets, c_unitCountAlive) > 0)) {
                libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit(lv_defendingUnit);
            }

        }

        if ((libNCMI_gf_StealthAIGetStealthAIUnitState(lv_defendingUnit) != libNCMI_ge_StealthAIUnitState_Unavailable) && ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, libNCMI_gv_nM_StealthAI_EnemyUnitGroup, UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) || (UnitGroupCount(libNCMI_gf_StealthAIGetVisibleEnemyUnitsInDefendRegion(lv_defendRegion), c_unitCountAlive) > 0))) {
            libNCMI_gf_StealthAIMakeGhostExitConeDetection(lv_defendingUnit);
            libNCMI_gf_StealthAIMakeRotatingGunTurretExitConeDetection(lv_defendingUnit);
            libNCMI_gf_StealthAIMakeAlarmBotExitConeDetection(lv_defendingUnit);
        }
        else {
            if ((libNCMI_gf_StealthAIGetStealthAIUnitState(lv_defendingUnit) != libNCMI_ge_StealthAIUnitState_Unavailable)) {
                if ((UnitOrderCount(lv_defendingUnit) == 0)) {
                    libNCMI_gf_StealthAIMakeGhostEnterConeDetection(lv_defendingUnit);
                }

                libNCMI_gf_StealthAIMakeRotatingGunTurretEnterConeDetection(lv_defendingUnit);
                libNCMI_gf_StealthAIMakeAlarmBotEnterConeDetection(lv_defendingUnit);
            }

        }
        if ((UnitIsAlive(lv_defendingUnit) == true) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lv_defendingUnit) != libNCMI_ge_StealthAIUnitState_Unavailable) && ((UnitGetType(lv_defendingUnit) != "RotatingTurretActiveSCW") && (UnitGetType(lv_defendingUnit) != "RotatingTurretActiveSCCW") && (UnitGetType(lv_defendingUnit) != "RotatingTurretPassiveSCW") && (UnitGetType(lv_defendingUnit) != "RotatingTurretPassiveSCCW"))) {
            if ((libNCMI_gf_StealthAIGetStealthAIUnitCasting(lv_defendingUnit) == libNCMI_ge_StealthAIUnitCasting_NotCasting) && ((libNCMI_gf_StealthAINumberOfVisibleEnemyUnitsInDefendRegion(lv_defendRegion) > 0) || (libNCMI_gf_StealthAINumberOfVisibleEnemyUnitsToUnitInDefendRegion(lv_defendingUnit, lv_defendRegion) > 0)) && (TimerGetRemaining(libNCMI_gv_nM_StealthAIGhostSnipeGlobalCooldownTimer) == 0.0) && ((UnitGetType(lv_defendingUnit) == "Ghost") || (UnitGetType(lv_defendingUnit) == "GhostAlternate"))) {
                lv_viableEnemyTargets = libNCMI_gf_StealthAIGetVisibleEnemyUnitsInDefendRegion(lv_defendRegion);
                UnitGroupAddUnitGroup(lv_viableEnemyTargets, libNCMI_gf_StealthAIGetVisibleEnemyUnitsToUnitInDefendRegion(lv_defendingUnit, lv_defendRegion));
                lv_closestEnemyToDefendingUnit = UnitGroupClosestToPoint(lv_viableEnemyTargets, UnitGetPosition(lv_defendingUnit));
                libHots_gf_StorePointForUnit(lv_defendingUnit, libNCMI_gv_nM_StealthAILastAttackPoint_PointStoredForUnitIndex, UnitGetPosition(lv_closestEnemyToDefendingUnit));
                UnitIssueOrder(lv_defendingUnit, OrderTargetingPoint(AbilityCommand("move", 0), libHots_gf_PointStoredForUnit(lv_defendingUnit, libNCMI_gv_nM_StealthAIHomePoint_PointStoredForUnitIndex)), c_orderQueueReplace);
                libNCMI_gf_StealthAIMakeGhostCastSnipe(lv_defendingUnit, lv_closestEnemyToDefendingUnit);
            }
            else if (((libNCMI_gf_StealthAINumberOfVisibleEnemyUnitsInDefendRegion(lv_defendRegion) > 0) || (libNCMI_gf_StealthAINumberOfVisibleEnemyUnitsToUnitInDefendRegion(lv_defendingUnit, lv_defendRegion) > 0)) && (OrderGetAbilityCommand(UnitOrder(lv_defendingUnit, 0)) != AbilityCommand("Snipe", 0)) && (OrderGetAbilityCommand(UnitOrder(lv_defendingUnit, 0)) != AbilityCommand("DOMEMP", 0))) {
                libNCMI_gf_StealthAISetStealthAIUnitState(lv_defendingUnit, libNCMI_ge_StealthAIUnitState_Attacking);
                lv_viableEnemyTargets = libNCMI_gf_StealthAIGetVisibleEnemyUnitsInDefendRegion(lv_defendRegion);
                UnitGroupAddUnitGroup(lv_viableEnemyTargets, libNCMI_gf_StealthAIGetVisibleEnemyUnitsToUnitInDefendRegion(lv_defendingUnit, lv_defendRegion));
                lv_closestEnemyToDefendingUnit = UnitGroupClosestToPoint(lv_viableEnemyTargets, UnitGetPosition(lv_defendingUnit));
                libHots_gf_StorePointForUnit(lv_defendingUnit, libNCMI_gv_nM_StealthAILastAttackPoint_PointStoredForUnitIndex, UnitGetPosition(lv_closestEnemyToDefendingUnit));
                UnitIssueOrder(lv_defendingUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_closestEnemyToDefendingUnit), c_orderQueueReplace);
            }
            else if ((OrderGetAbilityCommand(UnitOrder(lv_defendingUnit, 0)) != AbilityCommand("Snipe", 0))) {
                if ((libNCMI_gf_StealthAIGetStealthAIUnitState(lv_defendingUnit) == libNCMI_ge_StealthAIUnitState_Attacking)) {
                    libNCMI_gf_StealthAISetStealthAIUnitState(lv_defendingUnit, libNCMI_ge_StealthAIUnitState_Idle);
                    libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(libNtve_gf_ConvertUnitToUnitGroup(lv_defendingUnit), libHots_gf_PointStoredForUnit(lv_defendingUnit, libNCMI_gv_nM_StealthAILastAttackPoint_PointStoredForUnitIndex));
                }

                if ((libNCMI_gf_StealthAIGetStealthAIUnitState(lv_defendingUnit) == libNCMI_ge_StealthAIUnitState_Idle) && (libNCMI_gf_StealthAIGetStealthAIGhostJob(lv_defendingUnit) == libNCMI_ge_StealthAIGhostJob_Floating)) {
                    UnitIssueOrder(lv_defendingUnit, OrderTargetingPoint(AbilityCommand("move", 0), libHots_gf_PointStoredForUnit(lv_defendingUnit, libNCMI_gv_nM_StealthAIHomePoint_PointStoredForUnitIndex)), c_orderQueueReplace);
                    if ((UnitFilterMatch(lv_defendingUnit, UnitGetOwner(lv_defendingUnit), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                        UnitIssueOrder(lv_defendingUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(libHots_gf_PointStoredForUnit(lv_defendingUnit, libNCMI_gv_nM_StealthAIHomePoint_PointStoredForUnitIndex), 1.0, PointGetFacing(libHots_gf_PointStoredForUnit(lv_defendingUnit, libNCMI_gv_nM_StealthAIHomePoint_PointStoredForUnitIndex)))), c_orderQueueAddToEnd);
                    }

                }

            }
        }

    }
    UnitGroupLoopEnd();
}

trigger auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_Trigger = null;
int auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_stealthAISpawnDespawn;
region auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_stealthAIDefendRegion;
point auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_spawnPoint;
int auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_instantly;

void libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits (int lp_stealthAISpawnDespawn, region lp_stealthAIDefendRegion, point lp_spawnPoint, int lp_instantly) {
    auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_stealthAISpawnDespawn = lp_stealthAISpawnDespawn;
    auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_stealthAIDefendRegion = lp_stealthAIDefendRegion;
    auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_spawnPoint = lp_spawnPoint;
    auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_instantly = lp_instantly;

    if (auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_Trigger == null) {
        auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_TriggerFunc (bool testConds, bool runActions) {
    int lp_stealthAISpawnDespawn = auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_stealthAISpawnDespawn;
    region lp_stealthAIDefendRegion = auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_stealthAIDefendRegion;
    point lp_spawnPoint = auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_spawnPoint;
    int lp_instantly = auto_libNCMI_gf_StealthAISpawnDespawnDefendRegionUnits_lp_instantly;

    int auto6E533F34_val;
    int autoE4798BD8_ae;
    int autoE4798BD8_ai;
    int autoBE592E1C_ae;
    int autoBE592E1C_ai;

    // Variable Declarations
    int lv_stealthAIDefendRegionIndex;
    int lv_stealthAIDefenderUnitIter;

    // Variable Initialization

    // Implementation
    lv_stealthAIDefendRegionIndex = libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(lp_stealthAIDefendRegion);
    if (((lv_stealthAIDefendRegionIndex > libNCMI_gv_nM_StealthAIDefendRegionCount) || (lv_stealthAIDefendRegionIndex < 1))) {
        return true;
    }

    auto6E533F34_val = lp_stealthAISpawnDespawn;
    if (auto6E533F34_val == libNCMI_ge_StealthAISpawnDespawn_Spawn) {
        autoE4798BD8_ae = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitCount;
        autoE4798BD8_ai = 1;
        lv_stealthAIDefenderUnitIter = 1;
        for ( ; ( (autoE4798BD8_ai >= 0 && lv_stealthAIDefenderUnitIter <= autoE4798BD8_ae) || (autoE4798BD8_ai <= 0 && lv_stealthAIDefenderUnitIter >= autoE4798BD8_ae) ) ; lv_stealthAIDefenderUnitIter += autoE4798BD8_ai ) {
            if ((libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_unitType != null) && ((UnitIsAlive(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_unit) == false) || (libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_unit == null))) {
                libNtve_gf_CreateUnitsAtPoint2(1, libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_unitType, 0, libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_owningPlayer, lp_spawnPoint);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_unit = UnitLastCreated();
                UnitGroupAdd(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitGroup, UnitLastCreated());
                libHots_gf_StorePointForUnit(UnitLastCreated(), libNCMI_gv_nM_StealthAIHomePoint_PointStoredForUnitIndex, libNtve_gf_PointFacingAngle(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_homePoint, PointGetFacing(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_homePoint)));
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitLastCreated(), libNCMI_ge_StealthAIUnitState_Idle);
                libNCMI_gf_StealthAIMakeGhostExitConeDetection(UnitLastCreated());
                if ((libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_isLookBetween2Angles == true)) {
                    libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitLastCreated(), libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_lookAngle1, libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_lookAngle2, libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_lookWaitTime);
                }

                if ((libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_isPatrol4Points == true)) {
                    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitLastCreated(), libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_patrolPoint1, libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_patrolPoint2, libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_patrolPoint3, libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_patrolPoint4, libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_patrolWaitTime);
                }

                if ((lp_instantly == libNCMI_ge_StealthAISpawnDespawnOption_Instantly)) {
                    UnitSetPosition(UnitLastCreated(), libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_homePoint, false);
                    UnitSetFacing(UnitLastCreated(), PointGetFacing(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_homePoint), 0.0);
                }

            }

        }
    }
    else if (auto6E533F34_val == libNCMI_ge_StealthAISpawnDespawn_Despawn) {
        autoBE592E1C_ae = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitCount;
        autoBE592E1C_ai = 1;
        lv_stealthAIDefenderUnitIter = 1;
        for ( ; ( (autoBE592E1C_ai >= 0 && lv_stealthAIDefenderUnitIter <= autoBE592E1C_ae) || (autoBE592E1C_ai <= 0 && lv_stealthAIDefenderUnitIter >= autoBE592E1C_ae) ) ; lv_stealthAIDefenderUnitIter += autoBE592E1C_ai ) {
            if ((libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_unitType != null) && (UnitIsAlive(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_unit) == true)) {
                if ((lp_instantly == libNCMI_ge_StealthAISpawnDespawnOption_Instantly)) {
                    UnitRemove(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_stealthAIDefendRegionIndex].lv_defendingUnitArray[lv_stealthAIDefenderUnitIter].lv_unit);
                }
                else {
                    libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit(lv_stealthAIDefendRegionIndex, lv_stealthAIDefenderUnitIter, lp_spawnPoint);
                }
            }

        }
    }
    else {
    }
    return true;
}

trigger auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_Trigger = null;
int auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_lp_stealthAIDefendRegionIndex;
int auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_lp_stealthAIDefenderUnitIndex;
point auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_lp_targetPoint;

void libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit (int lp_stealthAIDefendRegionIndex, int lp_stealthAIDefenderUnitIndex, point lp_targetPoint) {
    auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_lp_stealthAIDefendRegionIndex = lp_stealthAIDefendRegionIndex;
    auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_lp_stealthAIDefenderUnitIndex = lp_stealthAIDefenderUnitIndex;
    auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_lp_targetPoint = lp_targetPoint;

    if (auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_Trigger == null) {
        auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_stealthAIDefendRegionIndex = auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_lp_stealthAIDefendRegionIndex;
    int lp_stealthAIDefenderUnitIndex = auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_lp_stealthAIDefenderUnitIndex;
    point lp_targetPoint = auto_libNCMI_gf_StealthAIMoveAndDespawnDefenderUnit_lp_targetPoint;

    // Variable Declarations
    unit lv_defendingUnit;

    // Variable Initialization

    // Implementation
    lv_defendingUnit = libNCMI_gv_nM_StealthAIDefendRegionArray[lp_stealthAIDefendRegionIndex].lv_defendingUnitArray[lp_stealthAIDefenderUnitIndex].lv_unit;
    libNCMI_gf_StealthAISetStealthAIUnitState(lv_defendingUnit, libNCMI_ge_StealthAIUnitState_Unavailable);
    libNCMI_gf_StealthAIMakeGhostExitConeDetection(lv_defendingUnit);
    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_defendingUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_defendingUnit), lp_targetPoint) >= 1)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            UnitIssueOrder(lv_defendingUnit, OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
        }

        Wait(0.0625, c_timeGame);
    }
    UnitRemove(lv_defendingUnit);
    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_Trigger = null;
unitgroup auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_lp_reactingUnitGroup;
point auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_lp_targetPoint;

void libNCMI_gf_StealthAIMakeUnitGroupReactToPoint (unitgroup lp_reactingUnitGroup, point lp_targetPoint) {
    auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_lp_reactingUnitGroup = lp_reactingUnitGroup;
    auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_lp_targetPoint = lp_targetPoint;

    if (auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_reactingUnitGroup = auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_lp_reactingUnitGroup;
    point lp_targetPoint = auto_libNCMI_gf_StealthAIMakeUnitGroupReactToPoint_lp_targetPoint;

    // Variable Declarations
    unitgroup lv_filteredReactingUnitGroup;

    // Variable Initialization
    lv_filteredReactingUnitGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupLoopBegin(lp_reactingUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle) && (libNCMI_gf_StealthAIGetStealthAIGhostJob(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIGhostJob_Floating)) {
            UnitGroupAdd(lv_filteredReactingUnitGroup, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_filteredReactingUnitGroup, c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(lv_filteredReactingUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Reacting);
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Separatist")) {
                libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupApply Work");
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(lv_filteredReactingUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            Wait(RandomFixed(0.0, 0.25), c_timeAI);
            if ((UnitIsAlive(UnitGroupLoopCurrent()) == true) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Reacting)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupLoopCurrent()), (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lp_targetPoint) / 4.0), lp_targetPoint)), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), lp_targetPoint), c_orderQueueAddToEnd);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }

        }
        UnitGroupLoopEnd();
        Wait(libNCMI_gv_nM_StealthAI_UnitReactionTime, c_timeAI);
        UnitGroupLoopBegin(lv_filteredReactingUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Reacting)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Idle);
                if ((UnitGetType(UnitGroupLoopCurrent()) == "Separatist")) {
                    libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupRemove Work");
                }

                Wait(RandomFixed(0.0, 0.25), c_timeAI);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostUnit;
fixed auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostLookAngle01;
fixed auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostLookAngle02;
fixed auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostLookTime;

void libNCMI_gf_StealthAIMakeGhostLookBetween2Angles (unit lp_ghostUnit, fixed lp_ghostLookAngle01, fixed lp_ghostLookAngle02, fixed lp_ghostLookTime) {
    auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostUnit = lp_ghostUnit;
    auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostLookAngle01 = lp_ghostLookAngle01;
    auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostLookAngle02 = lp_ghostLookAngle02;
    auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostLookTime = lp_ghostLookTime;

    if (auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_TriggerFunc (bool testConds, bool runActions) {
    unit lp_ghostUnit = auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostUnit;
    fixed lp_ghostLookAngle01 = auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostLookAngle01;
    fixed lp_ghostLookAngle02 = auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostLookAngle02;
    fixed lp_ghostLookTime = auto_libNCMI_gf_StealthAIMakeGhostLookBetween2Angles_lp_ghostLookTime;

    int auto02373445_ae;
    int auto02373445_ai;
    int auto1500309B_ae;
    int auto1500309B_ai;
    int autoFDA90647_val;

    // Variable Declarations
    point lv_homePoint;
    fixed lv_homePointFacing;
    int lv_currentLookAngle;
    timer lv_lookTimer;
    int lv_defendingUnitIter;
    int lv_defendRegionIter;
    bool lv_defenderFound;

    // Variable Initialization
    lv_homePoint = UnitGetPosition(lp_ghostUnit);
    lv_homePointFacing = UnitGetFacing(lp_ghostUnit);
    lv_lookTimer = TimerCreate();

    // Implementation
    libNCMI_gf_StealthAISetStealthAIGhostJob(lp_ghostUnit, libNCMI_ge_StealthAIGhostJob_Scanning);
    auto02373445_ae = libNCMI_gv_nM_StealthAIDefendRegionCount;
    auto02373445_ai = 1;
    lv_defendRegionIter = 1;
    for ( ; ( (auto02373445_ai >= 0 && lv_defendRegionIter <= auto02373445_ae) || (auto02373445_ai <= 0 && lv_defendRegionIter >= auto02373445_ae) ) ; lv_defendRegionIter += auto02373445_ai ) {
        if ((lv_defenderFound == true)) {
            break;
        }

        auto1500309B_ae = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount;
        auto1500309B_ai = 1;
        lv_defendingUnitIter = 1;
        for ( ; ( (auto1500309B_ai >= 0 && lv_defendingUnitIter <= auto1500309B_ae) || (auto1500309B_ai <= 0 && lv_defendingUnitIter >= auto1500309B_ae) ) ; lv_defendingUnitIter += auto1500309B_ai ) {
            if ((lv_defenderFound == true)) {
                break;
            }

            if ((lp_ghostUnit == libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_unit)) {
                lv_defenderFound = true;
                lv_homePoint = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_homePoint;
                lv_homePointFacing = PointGetFacing(libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_homePoint);
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_isLookBetween2Angles = true;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookAngle1 = lp_ghostLookAngle01;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookAngle2 = lp_ghostLookAngle02;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookWaitTime = lp_ghostLookTime;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_isPatrol4Points = false;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint1 = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint2 = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint3 = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint4 = null;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolWaitTime = 0.0;
            }

        }
    }
    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_ghostUnit) == true)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lp_ghostUnit) == libNCMI_ge_StealthAIUnitState_Idle)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_ghostUnit), lv_homePoint) >= 0.5)) {
                UnitIssueOrder(lp_ghostUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_homePoint), c_orderQueueReplace);
                UnitIssueOrder(lp_ghostUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(lv_homePoint, 1.0, lv_homePointFacing)), c_orderQueueAddToEnd);
            }
            else {
                if ((TimerGetRemaining(lv_lookTimer) == 0.0)) {
                    if (lv_currentLookAngle >= 2) {
                        lv_currentLookAngle = 1;
                    }
                    else {
                        lv_currentLookAngle = lv_currentLookAngle + 1;
                    }
                    TimerStart(lv_lookTimer, lp_ghostLookTime, false, c_timeGame);
                    autoFDA90647_val = lv_currentLookAngle;
                    if (autoFDA90647_val == 1) {
                        UnitIssueOrder(lp_ghostUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(lv_homePoint, 1.0, lp_ghostLookAngle01)), c_orderQueueAddToEnd);
                    }
                    else if (autoFDA90647_val == 2) {
                        UnitIssueOrder(lp_ghostUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(lv_homePoint, 1.0, lp_ghostLookAngle02)), c_orderQueueAddToEnd);
                    }
                    else {
                    }
                }

            }
        }

        Wait(0.125, c_timeAI);
    }
    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_ghostUnit;
point auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_startPoint;
point auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_midPoint1;
point auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_midPoint2;
point auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_endPoint;
fixed auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_waitTimeAtPoint;

void libNCMI_gf_StealthAIMakeGhostPatrol4Points (unit lp_ghostUnit, point lp_startPoint, point lp_midPoint1, point lp_midPoint2, point lp_endPoint, fixed lp_waitTimeAtPoint) {
    auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_ghostUnit = lp_ghostUnit;
    auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_startPoint = lp_startPoint;
    auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_midPoint1 = lp_midPoint1;
    auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_midPoint2 = lp_midPoint2;
    auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_endPoint = lp_endPoint;
    auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_waitTimeAtPoint = lp_waitTimeAtPoint;

    if (auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_TriggerFunc (bool testConds, bool runActions) {
    unit lp_ghostUnit = auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_ghostUnit;
    point lp_startPoint = auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_startPoint;
    point lp_midPoint1 = auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_midPoint1;
    point lp_midPoint2 = auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_midPoint2;
    point lp_endPoint = auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_endPoint;
    fixed lp_waitTimeAtPoint = auto_libNCMI_gf_StealthAIMakeGhostPatrol4Points_lp_waitTimeAtPoint;

    int auto37395355_ae;
    int auto37395355_ai;
    int auto4D56506F_ae;
    int auto4D56506F_ai;
    point auto20B55DB3_val;

    // Variable Declarations
    point lv_eMPTargetPoint;
    point lv_currentTargetPoint;
    timer lv_waitTimer;
    timer lv_moveTimer;
    int lv_defendingUnitIter;
    int lv_defendRegionIter;
    bool lv_defenderFound;

    // Variable Initialization
    lv_currentTargetPoint = lp_midPoint1;
    lv_waitTimer = TimerCreate();
    lv_moveTimer = TimerCreate();

    // Implementation
    libNCMI_gf_StealthAISetStealthAIGhostJob(lp_ghostUnit, libNCMI_ge_StealthAIGhostJob_Scanning);
    auto37395355_ae = libNCMI_gv_nM_StealthAIDefendRegionCount;
    auto37395355_ai = 1;
    lv_defendRegionIter = 1;
    for ( ; ( (auto37395355_ai >= 0 && lv_defendRegionIter <= auto37395355_ae) || (auto37395355_ai <= 0 && lv_defendRegionIter >= auto37395355_ae) ) ; lv_defendRegionIter += auto37395355_ai ) {
        if ((lv_defenderFound == true)) {
            break;
        }

        auto4D56506F_ae = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount;
        auto4D56506F_ai = 1;
        lv_defendingUnitIter = 1;
        for ( ; ( (auto4D56506F_ai >= 0 && lv_defendingUnitIter <= auto4D56506F_ae) || (auto4D56506F_ai <= 0 && lv_defendingUnitIter >= auto4D56506F_ae) ) ; lv_defendingUnitIter += auto4D56506F_ai ) {
            if ((lv_defenderFound == true)) {
                break;
            }

            if ((lp_ghostUnit == libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_unit)) {
                lv_defenderFound = true;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_isLookBetween2Angles = false;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookAngle1 = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookAngle2 = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookWaitTime = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_isPatrol4Points = true;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint1 = lp_startPoint;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint2 = lp_midPoint1;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint3 = lp_midPoint2;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint4 = lp_endPoint;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolWaitTime = lp_waitTimeAtPoint;
            }

        }
    }
    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_ghostUnit) == true)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lp_ghostUnit) == libNCMI_ge_StealthAIUnitState_Idle)) {
            if (((TimerGetRemaining(lv_moveTimer) == 0.0) || (DistanceBetweenPoints(UnitGetPosition(lp_ghostUnit), lv_currentTargetPoint) <= 0.5))) {
                auto20B55DB3_val = lv_currentTargetPoint;
                if (auto20B55DB3_val == lp_startPoint) {
                    lv_currentTargetPoint = lp_midPoint1;
                }
                else if (auto20B55DB3_val == lp_midPoint1) {
                    lv_currentTargetPoint = lp_midPoint2;
                }
                else if (auto20B55DB3_val == lp_midPoint2) {
                    lv_currentTargetPoint = lp_endPoint;
                }
                else if (auto20B55DB3_val == lp_endPoint) {
                    lv_currentTargetPoint = lp_startPoint;
                }
                else {
                }
                TimerStart(lv_waitTimer, lp_waitTimeAtPoint, false, c_timeGame);
                TimerStart(lv_moveTimer, (20.0 + lp_waitTimeAtPoint), false, c_timeGame);
                if (((UnitGetType(lp_ghostUnit) == "Ghost") || (UnitGetType(lp_ghostUnit) == "GhostAlternate"))) {
                    UnitIssueOrder(lp_ghostUnit, Order(AbilityCommand("GhostDetetorConeEnter", 0)), c_orderQueueReplace);
                    UnitIssueOrder(lp_ghostUnit, Order(AbilityCommand("GhostAlternateDetetorConeEnter", 0)), c_orderQueueReplace);
                }

            }
            else {
                if ((TimerGetRemaining(lv_waitTimer) == 0.0)) {
                    UnitIssueOrder(lp_ghostUnit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_currentTargetPoint), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lp_ghostUnit, OrderTargetingPoint(AbilityCommand("move", 4), lv_currentTargetPoint), c_orderQueueReplace);
                }
            }
        }

        Wait(0.125, c_timeAI);
    }
    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_droneUnit;
point auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_startPoint;
point auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_midPoint1;
point auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_midPoint2;
point auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_endPoint;
fixed auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_waitTimeAtPoint;

void libNCMI_gf_StealthAIMakeSonarDronePatrol4Points (unit lp_droneUnit, point lp_startPoint, point lp_midPoint1, point lp_midPoint2, point lp_endPoint, fixed lp_waitTimeAtPoint) {
    auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_droneUnit = lp_droneUnit;
    auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_startPoint = lp_startPoint;
    auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_midPoint1 = lp_midPoint1;
    auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_midPoint2 = lp_midPoint2;
    auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_endPoint = lp_endPoint;
    auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_waitTimeAtPoint = lp_waitTimeAtPoint;

    if (auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_TriggerFunc (bool testConds, bool runActions) {
    unit lp_droneUnit = auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_droneUnit;
    point lp_startPoint = auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_startPoint;
    point lp_midPoint1 = auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_midPoint1;
    point lp_midPoint2 = auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_midPoint2;
    point lp_endPoint = auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_endPoint;
    fixed lp_waitTimeAtPoint = auto_libNCMI_gf_StealthAIMakeSonarDronePatrol4Points_lp_waitTimeAtPoint;

    int autoBA96527F_ae;
    int autoBA96527F_ai;
    int autoA49D68C0_ae;
    int autoA49D68C0_ai;
    point autoE27A1420_val;

    // Variable Declarations
    point lv_eMPTargetPoint;
    point lv_currentTargetPoint;
    timer lv_waitTimer;
    int lv_defendingUnitIter;
    int lv_defendRegionIter;
    bool lv_defenderFound;

    // Variable Initialization
    lv_currentTargetPoint = lp_midPoint1;
    lv_waitTimer = TimerCreate();

    // Implementation
    libNCMI_gf_StealthAISetStealthAIGhostJob(lp_droneUnit, libNCMI_ge_StealthAIGhostJob_Scanning);
    autoBA96527F_ae = libNCMI_gv_nM_StealthAIDefendRegionCount;
    autoBA96527F_ai = 1;
    lv_defendRegionIter = 1;
    for ( ; ( (autoBA96527F_ai >= 0 && lv_defendRegionIter <= autoBA96527F_ae) || (autoBA96527F_ai <= 0 && lv_defendRegionIter >= autoBA96527F_ae) ) ; lv_defendRegionIter += autoBA96527F_ai ) {
        if ((lv_defenderFound == true)) {
            break;
        }

        autoA49D68C0_ae = libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitCount;
        autoA49D68C0_ai = 1;
        lv_defendingUnitIter = 1;
        for ( ; ( (autoA49D68C0_ai >= 0 && lv_defendingUnitIter <= autoA49D68C0_ae) || (autoA49D68C0_ai <= 0 && lv_defendingUnitIter >= autoA49D68C0_ae) ) ; lv_defendingUnitIter += autoA49D68C0_ai ) {
            if ((lv_defenderFound == true)) {
                break;
            }

            if ((lp_droneUnit == libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_unit)) {
                lv_defenderFound = true;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_isLookBetween2Angles = false;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookAngle1 = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookAngle2 = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_lookWaitTime = 0.0;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_isPatrol4Points = true;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint1 = lp_startPoint;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint2 = lp_midPoint1;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint3 = lp_midPoint2;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolPoint4 = lp_endPoint;
                libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_defendingUnitArray[lv_defendingUnitIter].lv_patrolWaitTime = lp_waitTimeAtPoint;
            }

        }
    }
    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_droneUnit) == true)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lp_droneUnit) == libNCMI_ge_StealthAIUnitState_Idle)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_droneUnit), lv_currentTargetPoint) <= 0.5)) {
                autoE27A1420_val = lv_currentTargetPoint;
                if (autoE27A1420_val == lp_startPoint) {
                    lv_currentTargetPoint = lp_midPoint1;
                }
                else if (autoE27A1420_val == lp_midPoint1) {
                    lv_currentTargetPoint = lp_midPoint2;
                }
                else if (autoE27A1420_val == lp_midPoint2) {
                    lv_currentTargetPoint = lp_endPoint;
                }
                else if (autoE27A1420_val == lp_endPoint) {
                    lv_currentTargetPoint = lp_startPoint;
                }
                else {
                }
                TimerStart(lv_waitTimer, lp_waitTimeAtPoint, false, c_timeGame);
                if ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, libNCMI_gv_nM_StealthAI_EnemyUnitGroup, UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
                    UnitIssueOrder(lp_droneUnit, Order(AbilityCommand("NovaSonarPing", 0)), c_orderQueueReplace);
                }

            }
            else {
                if ((TimerGetRemaining(lv_waitTimer) <= 0.0)) {
                    UnitIssueOrder(lp_droneUnit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_currentTargetPoint), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lp_droneUnit, OrderTargetingPoint(AbilityCommand("move", 4), lv_currentTargetPoint), c_orderQueueReplace);
                }
            }
        }

        Wait(0.125, c_timeAI);
    }
    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeGhostCastEMP_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeGhostCastEMP_lp_ghostUnit;

void libNCMI_gf_StealthAIMakeGhostCastEMP (unit lp_ghostUnit) {
    auto_libNCMI_gf_StealthAIMakeGhostCastEMP_lp_ghostUnit = lp_ghostUnit;

    if (auto_libNCMI_gf_StealthAIMakeGhostCastEMP_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeGhostCastEMP_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeGhostCastEMP_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeGhostCastEMP_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeGhostCastEMP_TriggerFunc (bool testConds, bool runActions) {
    unit lp_ghostUnit = auto_libNCMI_gf_StealthAIMakeGhostCastEMP_lp_ghostUnit;

    // Variable Declarations
    fixed lv_novaCurrentMoveSpeed;
    point lv_targetPoint;

    // Variable Initialization

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_ghostUnit, libNCMI_ge_StealthAIUnitCasting_Casting);
    UnitIssueOrder(lp_ghostUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 0.0, 0.0), c_timeAI);
    lv_novaCurrentMoveSpeed = UnitGetPropertyFixed(libNCMI_gv_nM_NovaHeroUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent);
    lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(libNCMI_gv_nM_NovaHeroUnit), (lv_novaCurrentMoveSpeed * 0.125), UnitGetFacing(libNCMI_gv_nM_NovaHeroUnit));
    if ((UnitHasBehavior2(libNCMI_gv_nM_NovaHeroUnit, "DetectorConeDetected") == true) && (UnitHasBehavior2(libNCMI_gv_nM_NovaHeroUnit, "DOMEMPDecloak") == false) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lp_ghostUnit) != libNCMI_ge_StealthAIUnitState_Unavailable) && (TimerGetRemaining(libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer) == 0.0)) {
        TimerStart(libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer, libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldown, false, c_timeAI);
        UnitIssueOrder(lp_ghostUnit, OrderTargetingPoint(AbilityCommand("DOMEMP", 0), lv_targetPoint), c_orderQueueReplace);
    }

    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_ghostUnit, libNCMI_ge_StealthAIUnitCasting_NotCasting);
    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_lp_ghostUnit;
unit auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_lp_snipeTargetUnit;

void libNCMI_gf_StealthAIMakeGhostCastSnipe (unit lp_ghostUnit, unit lp_snipeTargetUnit) {
    auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_lp_ghostUnit = lp_ghostUnit;
    auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_lp_snipeTargetUnit = lp_snipeTargetUnit;

    if (auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_TriggerFunc (bool testConds, bool runActions) {
    unit lp_ghostUnit = auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_lp_ghostUnit;
    unit lp_snipeTargetUnit = auto_libNCMI_gf_StealthAIMakeGhostCastSnipe_lp_snipeTargetUnit;

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_ghostUnit, libNCMI_ge_StealthAIUnitCasting_Casting);
    Wait(libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 3.0, 2.0), c_timeAI);
    if ((UnitIsAlive(lp_ghostUnit) == true) && (UnitIsAlive(lp_snipeTargetUnit) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lp_snipeTargetUnit, UnitGetOwner(lp_ghostUnit)) == true) && (UnitGetPropertyFixed(lp_ghostUnit, c_unitPropEnergy, c_unitPropCurrent) >= libNtve_gf_CostOfAbility("Snipe", "Energy")) && (TimerGetRemaining(libNCMI_gv_nM_StealthAIGhostSnipeGlobalCooldownTimer) == 0.0)) {
        TimerStart(libNCMI_gv_nM_StealthAIGhostSnipeGlobalCooldownTimer, libNCMI_gv_nM_StealthAIGhostSnipeGlobalCooldown, false, c_timeAI);
        UnitIssueOrder(lp_ghostUnit, OrderTargetingUnit(AbilityCommand("Snipe", 0), lp_snipeTargetUnit), c_orderQueueReplace);
    }

    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_ghostUnit, libNCMI_ge_StealthAIUnitCasting_NotCasting);
    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_lp_ghostUnit;
unit auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_lp_eMPTargetUnit;

void libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget (unit lp_ghostUnit, unit lp_eMPTargetUnit) {
    auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_lp_ghostUnit = lp_ghostUnit;
    auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_lp_eMPTargetUnit = lp_eMPTargetUnit;

    if (auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_TriggerFunc (bool testConds, bool runActions) {
    unit lp_ghostUnit = auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_lp_ghostUnit;
    unit lp_eMPTargetUnit = auto_libNCMI_gf_StealthAIMakeGhostCastEMPWithTarget_lp_eMPTargetUnit;

    // Variable Declarations
    unitgroup lv_ghostGroup;
    fixed lv_targetCurrentMoveSpeed;
    point lv_eMPTargetPoint;

    // Variable Initialization
    lv_ghostGroup = UnitGroupEmpty();

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_ghostUnit, libNCMI_ge_StealthAIUnitCasting_Casting);
    Wait(libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 0.0, 0.0), c_timeAI);
    UnitGroupAddUnitGroup(lv_ghostGroup, UnitGroupFilter("GhostDetectorCone", UnitGetOwner(lp_ghostUnit), libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(libNCMI_gf_StealthAIGetDefendRegionOfUnit(lp_ghostUnit))].lv_defendingUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_ghostGroup, UnitGroupFilter("GhostAlternateDetectorCone", UnitGetOwner(lp_ghostUnit), libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(libNCMI_gf_StealthAIGetDefendRegionOfUnit(lp_ghostUnit))].lv_defendingUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_ghostGroup, UnitGroupFilter("Ghost", UnitGetOwner(lp_ghostUnit), libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(libNCMI_gf_StealthAIGetDefendRegionOfUnit(lp_ghostUnit))].lv_defendingUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_ghostGroup, UnitGroupFilter("GhostAlternate", UnitGetOwner(lp_ghostUnit), libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(libNCMI_gf_StealthAIGetDefendRegionOfUnit(lp_ghostUnit))].lv_defendingUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((UnitIsAlive(lp_eMPTargetUnit) == true) && (UnitIsAlive(lp_ghostUnit) == true) && (UnitGroupCount(lv_ghostGroup, c_unitCountAlive) > 0) && (UnitGroupClosestToPoint(lv_ghostGroup, UnitGetPosition(lp_eMPTargetUnit)) == lp_ghostUnit) && (((libNtve_gf_UnitIsVisibleToPlayer(lp_eMPTargetUnit, UnitGetOwner(lp_ghostUnit)) == true) && (UnitGetType(lp_eMPTargetUnit) == "NovaHoloDecoy")) || (UnitHasBehavior2(lp_eMPTargetUnit, "DetectorConeDetected") == true)) && (TimerGetRemaining(libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer) == 0.0)) {
        TimerStart(libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer, libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldown, false, c_timeAI);
        lv_targetCurrentMoveSpeed = UnitGetPropertyFixed(lp_eMPTargetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent);
        lv_eMPTargetPoint = PointWithOffsetPolar(UnitGetPosition(lp_eMPTargetUnit), (lv_targetCurrentMoveSpeed * 0.125), UnitGetFacing(lp_eMPTargetUnit));
        UnitIssueOrder(lp_ghostUnit, OrderTargetingPoint(AbilityCommand("DOMEMP", 0), lv_eMPTargetPoint), c_orderQueueReplace);
    }

    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_ghostUnit, libNCMI_ge_StealthAIUnitCasting_NotCasting);
    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit_lp_gunTurretUnit;

void libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit (unit lp_gunTurretUnit) {
    auto_libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit_lp_gunTurretUnit = lp_gunTurretUnit;

    if (auto_libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_gunTurretUnit = auto_libNCMI_gf_StealthAIMakeRotatingGunTurretSeeCloakedUnit_lp_gunTurretUnit;

    unitgroup auto3CF37BD8_g;
    int auto3CF37BD8_u;

    // Variable Declarations
    unitgroup lv_viableEnemyTargets;
    unit lv_enemyUnitGroupIter;

    // Variable Initialization
    lv_viableEnemyTargets = UnitGroupEmpty();

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_gunTurretUnit, libNCMI_ge_StealthAIUnitCasting_Casting);
    Wait(libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 0.0, 0.0), c_timeAI);
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_gunTurretUnit, libNCMI_ge_StealthAIUnitCasting_NotCasting);
    auto3CF37BD8_g = UnitGroupFilter(null, c_playerAny, UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, libNCMI_gf_StealthAIGetDefendRegionOfUnit(lp_gunTurretUnit), 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3CF37BD8_u = 1;
    for ( ; auto3CF37BD8_u <= UnitGroupCount(auto3CF37BD8_g, c_unitCountAll) ; auto3CF37BD8_u += BoolToInt(lv_enemyUnitGroupIter == UnitGroupUnit(auto3CF37BD8_g, auto3CF37BD8_u)) ) {
        lv_enemyUnitGroupIter = UnitGroupUnit(auto3CF37BD8_g, auto3CF37BD8_u);
        if ((UnitHasBehavior2(lv_enemyUnitGroupIter, "DetectorConeDetected") == true)) {
            UnitGroupAdd(lv_viableEnemyTargets, lv_enemyUnitGroupIter);
        }

    }
    if ((UnitGroupCount(lv_viableEnemyTargets, c_unitCountAlive) > 0)) {
        libNCMI_gf_StealthAIMakeRotatingGunTurretExitConeDetection(lp_gunTurretUnit);
    }

    return true;
}

void libNCMI_gf_StealthAIMakeGhostExitConeDetection (unit lp_ghostUnit) {
    string auto2E1A535C_val;

    // Implementation
    auto2E1A535C_val = UnitGetType(lp_ghostUnit);
    if (auto2E1A535C_val == "GhostDetectorCone") {
        UnitIssueOrder(lp_ghostUnit, Order(AbilityCommand("GhostDetetorConeExit", 0)), c_orderQueueReplace);
    }
    else if (auto2E1A535C_val == "GhostAlternateDetectorCone") {
        UnitIssueOrder(lp_ghostUnit, Order(AbilityCommand("GhostAlternateDetetorConeExit", 0)), c_orderQueueReplace);
    }
    else {
    }
}

void libNCMI_gf_StealthAIMakeGhostEnterConeDetection (unit lp_ghostUnit) {
    string auto40A6B464_val;

    // Implementation
    auto40A6B464_val = UnitGetType(lp_ghostUnit);
    if (auto40A6B464_val == "Ghost") {
        UnitIssueOrder(lp_ghostUnit, Order(AbilityCommand("GhostDetetorConeEnter", 0)), c_orderQueueReplace);
    }
    else if (auto40A6B464_val == "GhostAlternate") {
        UnitIssueOrder(lp_ghostUnit, Order(AbilityCommand("GhostAlternateDetetorConeEnter", 0)), c_orderQueueReplace);
    }
    else {
    }
}

void libNCMI_gf_StealthAIMakeRotatingGunTurretExitConeDetection (unit lp_gunTurretUnit) {
    // Implementation
    if ((libNCMI_gf_StealthAIGetStealthAIUnitCasting(lp_gunTurretUnit) == libNCMI_ge_StealthAIUnitCasting_NotCasting) && ((UnitGetType(lp_gunTurretUnit) == "RotatingTurretPassiveSCW") || (UnitGetType(lp_gunTurretUnit) == "RotatingTurretPassiveSCCW"))) {
        libNCMI_gf_StealthAITripUnitCastCooldown(lp_gunTurretUnit);
        UnitIssueOrder(lp_gunTurretUnit, Order(AbilityCommand("RotatingTurretActiveMorphIssueOrderCP", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_gunTurretUnit, Order(AbilityCommand("RotatingTurretActiveMorphIssueOrderCP", 0)), c_orderQueueReplace);
    }

}

void libNCMI_gf_StealthAIMakeRotatingGunTurretEnterConeDetection (unit lp_gunTurretUnit) {
    string auto6F739775_val;

    // Implementation
    if ((libNCMI_gf_StealthAIGetStealthAIUnitCasting(lp_gunTurretUnit) == libNCMI_ge_StealthAIUnitCasting_NotCasting)) {
        auto6F739775_val = UnitGetType(lp_gunTurretUnit);
        if (auto6F739775_val == "RotatingTurretActiveSCW") {
            UnitIssueOrder(lp_gunTurretUnit, Order(AbilityCommand("RotatingTurretPassiveSCW", 0)), c_orderQueueReplace);
            libNCMI_gf_StealthAITripUnitCastCooldown(lp_gunTurretUnit);
        }
        else if (auto6F739775_val == "RotatingTurretActiveSCCW") {
            UnitIssueOrder(lp_gunTurretUnit, Order(AbilityCommand("RotatingTurretPassiveSCCW", 0)), c_orderQueueReplace);
            libNCMI_gf_StealthAITripUnitCastCooldown(lp_gunTurretUnit);
        }
        else {
        }
    }

}

void libNCMI_gf_StealthAIMakeAlarmBotExitConeDetection (unit lp_alarmBotUnit) {
    // Implementation
    UnitIssueOrder(lp_alarmBotUnit, Order(AbilityCommand("NovaAlarmBotToggleDetectionVisionMode", 1)), c_orderQueueReplace);
}

void libNCMI_gf_StealthAIMakeAlarmBotEnterConeDetection (unit lp_alarmBotUnit) {
    // Implementation
    UnitIssueOrder(lp_alarmBotUnit, Order(AbilityCommand("NovaAlarmBotToggleDetectionVisionMode", 0)), c_orderQueueReplace);
}

trigger auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMP_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMP_lp_droneUnit;

void libNCMI_gf_StealthAIMakeSonarDroneCastEMP (unit lp_droneUnit) {
    auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMP_lp_droneUnit = lp_droneUnit;

    if (auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMP_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMP_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMP_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMP_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMP_TriggerFunc (bool testConds, bool runActions) {
    unit lp_droneUnit = auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMP_lp_droneUnit;

    // Variable Declarations
    fixed lv_novaCurrentMoveSpeed;
    point lv_targetPoint;

    // Variable Initialization

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_droneUnit, libNCMI_ge_StealthAIUnitCasting_Casting);
    Wait(libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 0.0, 0.0), c_timeAI);
    lv_novaCurrentMoveSpeed = UnitGetPropertyFixed(libNCMI_gv_nM_NovaHeroUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent);
    lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(libNCMI_gv_nM_NovaHeroUnit), (lv_novaCurrentMoveSpeed * 0.125), UnitGetFacing(libNCMI_gv_nM_NovaHeroUnit));
    if ((UnitHasBehavior2(libNCMI_gv_nM_NovaHeroUnit, "NovaSonarPingDetected") == true) && (UnitHasBehavior2(libNCMI_gv_nM_NovaHeroUnit, "DOMEMPDecloak") == false) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lp_droneUnit) != libNCMI_ge_StealthAIUnitState_Unavailable) && (TimerGetRemaining(libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer) == 0.0)) {
        TimerStart(libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer, libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldown, false, c_timeAI);
        UnitIssueOrder(lp_droneUnit, OrderTargetingPoint(AbilityCommand("SonarDroneEMP", 0), lv_targetPoint), c_orderQueueReplace);
    }

    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_droneUnit, libNCMI_ge_StealthAIUnitCasting_NotCasting);
    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_lp_droneUnit;
unit auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_lp_eMPTargetUnit;

void libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget (unit lp_droneUnit, unit lp_eMPTargetUnit) {
    auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_lp_droneUnit = lp_droneUnit;
    auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_lp_eMPTargetUnit = lp_eMPTargetUnit;

    if (auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_TriggerFunc (bool testConds, bool runActions) {
    unit lp_droneUnit = auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_lp_droneUnit;
    unit lp_eMPTargetUnit = auto_libNCMI_gf_StealthAIMakeSonarDroneCastEMPWithTarget_lp_eMPTargetUnit;

    // Variable Declarations
    unitgroup lv_sonarDroneGroup;
    fixed lv_targetCurrentMoveSpeed;
    point lv_eMPTargetPoint;

    // Variable Initialization
    lv_sonarDroneGroup = UnitGroupEmpty();

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_droneUnit, libNCMI_ge_StealthAIUnitCasting_Casting);
    Wait(libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 0.0, 0.0), c_timeAI);
    UnitGroupAddUnitGroup(lv_sonarDroneGroup, UnitGroupFilter("NovaSonarDrone", UnitGetOwner(lp_droneUnit), libNCMI_gv_nM_StealthAIDefendRegionArray[libNCMI_gf_StealthAIGetDefendRegionIndexFromRegion(libNCMI_gf_StealthAIGetDefendRegionOfUnit(lp_droneUnit))].lv_defendingUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((UnitIsAlive(lp_eMPTargetUnit) == true) && (UnitIsAlive(lp_droneUnit) == true) && (UnitGroupCount(lv_sonarDroneGroup, c_unitCountAlive) > 0) && (UnitGroupClosestToPoint(lv_sonarDroneGroup, UnitGetPosition(lp_eMPTargetUnit)) == lp_droneUnit) && (((libNtve_gf_UnitIsVisibleToPlayer(lp_eMPTargetUnit, UnitGetOwner(lp_droneUnit)) == true) && (UnitGetType(lp_eMPTargetUnit) == "NovaHoloDecoy")) || (UnitHasBehavior2(lp_eMPTargetUnit, "NovaSonarPingDetected") == true)) && (TimerGetRemaining(libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer) == 0.0)) {
        TimerStart(libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldownTimer, libNCMI_gv_nM_StealthAIGhostEMPGlobalCooldown, false, c_timeAI);
        lv_targetCurrentMoveSpeed = UnitGetPropertyFixed(lp_eMPTargetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent);
        lv_eMPTargetPoint = PointWithOffsetPolar(UnitGetPosition(lp_eMPTargetUnit), (lv_targetCurrentMoveSpeed * 0.125), UnitGetFacing(lp_eMPTargetUnit));
        UnitIssueOrder(lp_droneUnit, OrderTargetingPoint(AbilityCommand("SonarDroneEMP", 0), lv_eMPTargetPoint), c_orderQueueReplace);
    }

    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_droneUnit, libNCMI_ge_StealthAIUnitCasting_NotCasting);
    return true;
}

trigger auto_libNCMI_gf_StealthAIMakeAlarmBotCastEMP_Trigger = null;
unit auto_libNCMI_gf_StealthAIMakeAlarmBotCastEMP_lp_droneUnit;

void libNCMI_gf_StealthAIMakeAlarmBotCastEMP (unit lp_droneUnit) {
    auto_libNCMI_gf_StealthAIMakeAlarmBotCastEMP_lp_droneUnit = lp_droneUnit;

    if (auto_libNCMI_gf_StealthAIMakeAlarmBotCastEMP_Trigger == null) {
        auto_libNCMI_gf_StealthAIMakeAlarmBotCastEMP_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAIMakeAlarmBotCastEMP_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAIMakeAlarmBotCastEMP_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAIMakeAlarmBotCastEMP_TriggerFunc (bool testConds, bool runActions) {
    unit lp_droneUnit = auto_libNCMI_gf_StealthAIMakeAlarmBotCastEMP_lp_droneUnit;

    unitgroup auto7FAFEA5B_g;
    int auto7FAFEA5B_u;

    // Variable Declarations
    fixed lv_novaCurrentMoveSpeed;
    point lv_targetPoint;
    unitgroup lv_viableEnemyTargets;
    unit lv_enemyUnitGroupIter;

    // Variable Initialization
    lv_viableEnemyTargets = UnitGroupEmpty();

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_droneUnit, libNCMI_ge_StealthAIUnitCasting_Casting);
    Wait(libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 0.0, 0.0), c_timeAI);
    lv_viableEnemyTargets = UnitGroupFilter(null, c_playerAny, UnitGroupFilterRegion(libNCMI_gv_nM_StealthAI_EnemyUnitGroup, libNCMI_gf_StealthAIGetDefendRegionOfUnit(lp_droneUnit), 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7FAFEA5B_g = lv_viableEnemyTargets;
    auto7FAFEA5B_u = 1;
    for ( ; auto7FAFEA5B_u <= UnitGroupCount(auto7FAFEA5B_g, c_unitCountAll) ; auto7FAFEA5B_u += BoolToInt(lv_enemyUnitGroupIter == UnitGroupUnit(auto7FAFEA5B_g, auto7FAFEA5B_u)) ) {
        lv_enemyUnitGroupIter = UnitGroupUnit(auto7FAFEA5B_g, auto7FAFEA5B_u);
        if ((UnitIsAlive(lp_droneUnit) == true) && ((DistanceBetweenPoints(UnitGetPosition(lp_droneUnit), UnitGetPosition(lv_enemyUnitGroupIter)) > StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "NovaAlarmBotAuraSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny))) || ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemyUnitGroupIter, UnitGetOwner(lp_droneUnit)) == false) && (UnitHasBehavior2(lv_enemyUnitGroupIter, "NovaSonarPingDetected") == false)))) {
            UnitGroupRemove(lv_viableEnemyTargets, lv_enemyUnitGroupIter);
        }

    }
    if ((UnitIsAlive(lp_droneUnit) == true) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lp_droneUnit) != libNCMI_ge_StealthAIUnitState_Unavailable) && (UnitGroupCount(lv_viableEnemyTargets, c_unitCountAlive) > 0)) {
        UnitIssueOrder(lp_droneUnit, Order(AbilityCommand("NovaAlarmBotEMP", 0)), c_orderQueueReplace);
    }

    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_droneUnit, libNCMI_ge_StealthAIUnitCasting_NotCasting);
    return true;
}

trigger auto_libNCMI_gf_StealthAITripUnitCastCooldown_Trigger = null;
unit auto_libNCMI_gf_StealthAITripUnitCastCooldown_lp_cooldownUnit;

void libNCMI_gf_StealthAITripUnitCastCooldown (unit lp_cooldownUnit) {
    auto_libNCMI_gf_StealthAITripUnitCastCooldown_lp_cooldownUnit = lp_cooldownUnit;

    if (auto_libNCMI_gf_StealthAITripUnitCastCooldown_Trigger == null) {
        auto_libNCMI_gf_StealthAITripUnitCastCooldown_Trigger = TriggerCreate("auto_libNCMI_gf_StealthAITripUnitCastCooldown_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_StealthAITripUnitCastCooldown_Trigger, false, false);
}

bool auto_libNCMI_gf_StealthAITripUnitCastCooldown_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cooldownUnit = auto_libNCMI_gf_StealthAITripUnitCastCooldown_lp_cooldownUnit;

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_cooldownUnit, libNCMI_ge_StealthAIUnitCasting_Casting);
    Wait(2.0, c_timeAI);
    libNCMI_gf_StealthAISetStealthAIUnitCasting(lp_cooldownUnit, libNCMI_ge_StealthAIUnitCasting_NotCasting);
    return true;
}

unitgroup libNCMI_gf_AITacticalEnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

void libNCMI_gf_NM_MissionAutoSave (text lp_description) {
    // Variable Declarations
    text lv_name;

    // Variable Initialization
    lv_name = StringToText("");

    // Implementation
    libNCMI_gv_NM_MissionAutoSaveIndex += 1;
    TextExpressionSetToken("Param/Expression/lib_NCMI_87B2D44D", "A", libComC_gf_CC_MapName(libComC_gf_CurrentMap()));
    lv_name = TextExpressionAssemble("Param/Expression/lib_NCMI_87B2D44D");
    GameSaveCreate(lv_name, lp_description, "", true);
    Wait(1.0, c_timeGame);
    libNCMI_gv_NM_MissionAutoSaveDone = true;
}

void libNCMI_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    if ((libComC_gf_CurrentMap() == null)) {
        return ;
    }

    libNCMI_gv_NM_MissionAutoSaveDone = false;
    libNCMI_gf_NM_MissionAutoSave(lp_description);
}

void libNCMI_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound) {
    // Implementation
    if ((lp_point != null)) {
        if ((lp_actor != null)) {
            libNtve_gf_CreateActorAtPoint(lp_actor, lp_point);
        }

        if ((lp_sound != null)) {
            SoundPlayAtPoint(lp_sound, PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
        }

    }

}

bool libNCMI_gf_PlayerInCinematicModeCampaign () {
    // Implementation
    if (((libNtve_gf_PlayerInCinematicMode(1) == true) || (libNCMI_gv_NM_InCinematic == true))) {
        return true;
    }
    else {
        return false;
    }
}

string libNCMI_gf_NM_SoundDataTableName () {
    // Implementation
    return (libNCMI_gv_NMC_SoundDataTableIdentifier + IntToString(libNCMI_gv_NM_SoundDataTableIndex));
}

void libNCMI_gf_PlaySoundCinematic (soundlink lp_soundLink, playergroup lp_players, fixed lp_volume, fixed lp_offset) {
    playergroup autoEDCAAF8F_g;
    int autoEDCAAF8F_p;

    // Variable Declarations
    bool lv_playerInCinematic;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoEDCAAF8F_g = lp_players; 
    autoEDCAAF8F_p = 1;
    for ( ; autoEDCAAF8F_p <= PlayerGroupCount(autoEDCAAF8F_g) ; autoEDCAAF8F_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(autoEDCAAF8F_g, autoEDCAAF8F_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoEDCAAF8F_g, autoEDCAAF8F_p);
        if ((libNtve_gf_PlayerInCinematicMode(lv_playerIndex) == true)) {
            lv_playerInCinematic = true;
            break;
        }

    }
    if ((lv_playerInCinematic == false)) {
        return ;
    }

    SoundPlay(lp_soundLink, lp_players, lp_volume, lp_offset);
    libNCMI_gv_NM_SoundDataTableIndex += 1;
    DataTableSetSound(true, libNCMI_gf_NM_SoundDataTableName(), SoundLastPlayed());
}

void libNCMI_gf_StopCinematicSounds () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    while ((libNCMI_gv_NM_SoundDataTableIndex > 0)) {
        SoundStop(DataTableGetSound(true, libNCMI_gf_NM_SoundDataTableName()), true);
        libNCMI_gv_NM_SoundDataTableIndex -= 1;
    }
}

void libNCMI_gf_SetScreenModeCampaign (int lp_mode, fixed lp_duration) {
    // Implementation
    UISetMode(PlayerGroupAll(), lp_mode, lp_duration);
    libNCMI_gv_nM_ScreenMode = lp_mode;
}

void libNCMI_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions) {
    // Implementation
    if ((lp_onOff == true)) {
        libNCMI_gv_NM_InCinematic = true;
    }
    else {
        libNCMI_gv_NM_InCinematic = false;
    }
    if ((lp_waitOptions == false)) {
        libNCMI_gf_NM_CinematicModeNoWait(lp_onOff, lp_duration);
    }
    else {
        libNCMI_gf_NM_CinematicModeInternal(lp_onOff, lp_duration);
    }
}

trigger auto_libNCMI_gf_NM_CinematicModeNoWait_Trigger = null;
bool auto_libNCMI_gf_NM_CinematicModeNoWait_lp_onOff;
fixed auto_libNCMI_gf_NM_CinematicModeNoWait_lp_duration;

void libNCMI_gf_NM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration) {
    auto_libNCMI_gf_NM_CinematicModeNoWait_lp_onOff = lp_onOff;
    auto_libNCMI_gf_NM_CinematicModeNoWait_lp_duration = lp_duration;

    if (auto_libNCMI_gf_NM_CinematicModeNoWait_Trigger == null) {
        auto_libNCMI_gf_NM_CinematicModeNoWait_Trigger = TriggerCreate("auto_libNCMI_gf_NM_CinematicModeNoWait_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_NM_CinematicModeNoWait_Trigger, false, false);
}

bool auto_libNCMI_gf_NM_CinematicModeNoWait_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onOff = auto_libNCMI_gf_NM_CinematicModeNoWait_lp_onOff;
    fixed lp_duration = auto_libNCMI_gf_NM_CinematicModeNoWait_lp_duration;

    // Implementation
    libNCMI_gf_NM_CinematicModeInternal(lp_onOff, lp_duration);
    return true;
}

void libNCMI_gf_NM_CinematicModeInternal (bool lp_onOff, fixed lp_duration) {
    // Implementation
    if ((lp_onOff == true)) {
        libNCMI_gf_NM_ShowHideCampaignTeaching(false);
        if ((lp_duration != c_transitionDurationImmediate)) {
            UISetMode(PlayerGroupAll(), c_uiModeFullscreen, lp_duration);
        }

        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
        libNtve_gf_GlobalCinematicSetting(true);
        libComC_gf_PauseMissionTimeCampaign(true);
    }
    else {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lp_duration);
        libNtve_gf_GlobalCinematicSetting(false);
        libComC_gf_PauseMissionTimeCampaign(false);
        libNCMI_gf_NM_ShowHideCampaignTeaching(true);
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

    }
}

void libNCMI_gf_NM_CreditsCutscenePlay () {
    // Implementation
    TriggerEnable(libNCUI_gt_NU_EndCredits, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    UISetCursorVisible(PlayerGroupAll(), false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    EnvironmentShow(c_environmentAll, false);
    FogSetEnabled(false);
    GameSetLighting("NoLight", 0.0);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Cinematic);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, true);
    TriggerEnable(libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate, true);
    TriggerEnable(libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie, true);
    TriggerEnable(libNCMI_gt_CreditsCutsceneMP03_040StopMovie, true);
    TriggerExecute(libNCMI_gt_NM_CreditsCutsceneDetectEnd, true, false);
    libComC_gf_CampaignPlayCutscene("Cutscenes\\SMX3_Cutscene_MP03_040.SC2Cutscene", Point(64.0, 64.0), false, true);
    libNCMI_gv_nM_CreditsCutscene = CutsceneLastCreated();
    WaitForCutsceneToEnd(libNCMI_gv_nM_CreditsCutscene);
    ActorSend(libNCMI_gv_nM_CreditsCutsceneNewsScreen, libNtve_gf_TextureVideoStopAll());
    libNtve_gf_KillModel(libNCMI_gv_nM_CreditsCutsceneNewsScreen);
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryTV, "Reverb_NovaMP03_ValeriansChamber");
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryTV, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, false);
    TriggerEnable(libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate, false);
    TriggerEnable(libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie, false);
    TriggerEnable(libNCMI_gt_CreditsCutsceneMP03_040StopMovie, false);
    TriggerStop(libNCMI_gt_NM_CreditsCutsceneDetectEnd);
}

bool libNCMI_gf_NM_CreditsCutsceneCreditsFinished () {
    // Implementation
    return libNCUI_gv_NU_EndCreditFinished;
}

void libNCMI_gf_NovaNukeTimerUpdate (int lp_player) {
    // Variable Declarations
    fixed lv_lowestResearchTime;
    bool lv_trainingNukeFound;

    // Variable Initialization
    lv_lowestResearchTime = 1000.0;

    // Implementation
    if ((UnitGroupCount(libNCMI_gv_nM_NovaNukesUnitGroup, c_unitCountAlive) >= 1)) {
        UnitGroupLoopBegin(libNCMI_gv_nM_NovaNukesUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitQueueItemTime(UnitGroupLoopCurrent(), c_unitQueueTimeRemaining, 1) < lv_lowestResearchTime)) {
                lv_lowestResearchTime = UnitQueueItemTime(UnitGroupLoopCurrent(), c_unitQueueTimeRemaining, 1);
                lv_trainingNukeFound = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_trainingNukeFound == true)) {
            libNtve_gf_UnitAbilityRemoveCooldown(libNCMI_gv_nM_NovaHeroUnit, "NovaNukeTimer", "Abil/NovaNukeTimer");
            UnitAbilitySpendExplicit(libNCMI_gv_nM_NovaHeroUnit, AbilityCommand("NovaNukeTimer", 0), c_spendLocationAbility, 1.0, 1.0, 1.0, 1.0);
            UnitAbilityAddCooldown(libNCMI_gv_nM_NovaHeroUnit, "NovaNukeTimer", "Abil/NovaNukeTimer", (lv_lowestResearchTime - 300.0));
            UnitBehaviorAdd(libNCMI_gv_nM_NovaHeroUnit, "NovaNukeTimer", libNCMI_gv_nM_NovaHeroUnit, 1);
        }

    }

}

void libNCMI_gf_NM_DetectionUpgradesApply () {
    int auto4CF9774B_ae;
    int auto4CF9774B_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(1, "DetectionFriendly", 1);
    auto4CF9774B_ae = 15;
    auto4CF9774B_ai = 1;
    lv_i = 2;
    for ( ; ( (auto4CF9774B_ai >= 0 && lv_i <= auto4CF9774B_ae) || (auto4CF9774B_ai <= 0 && lv_i >= auto4CF9774B_ae) ) ; lv_i += auto4CF9774B_ai ) {
        if (((libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_EnemyMutual) == true))) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "DetectionEnemy", 1);
        }

    }
}

void libNCMI_gf_AttachUnitModelToUnit (unit lp_attachmentUnit, unit lp_targetUnit, string lp_attachPont, fixed lp_xOffset, fixed lp_yOffset, fixed lp_zOffset, string lp_facingAdjustment) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_attachmentUnit, "RefSet ::global.XanthosNewPart ::Self");
    libNtve_gf_SendActorMessageToUnit(lp_targetUnit, "RefSet ::global.XanthosBody ::Self");
    libNtve_gf_SendActorMessageToUnit(lp_attachmentUnit, "RefSet ::actor.MainBody ::global.XanthosBody");
    libNtve_gf_SendActorMessageToUnit(lp_attachmentUnit, "Signal BaselineHook");
    libNtve_gf_SendActorMessageToUnit(lp_targetUnit, (("AttachOffset ::global.XanthosNewPart {" + (lp_attachPont) + "} " + FixedToString(lp_xOffset, c_fixedPrecisionAny) + "," + FixedToString(lp_yOffset, c_fixedPrecisionAny) + "," + FixedToString(lp_zOffset, c_fixedPrecisionAny) + " {} {" + (lp_facingAdjustment) + "}")));
    ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(lp_targetUnit), "XanthosPartList"), "ListAdd ::global.XanthosNewPart");
}

void libNCMI_gf_NM_MissionCheat_UpdateButtonEnabled () {
    int auto0D8B4302_ae;
    int auto0D8B4302_ai;

    // Variable Declarations
    int lv_arrayIter;

    // Variable Initialization

    // Implementation
    if ((libNCMI_gv_NM_MissionCheat_Dialog == c_invalidDialogId)) {
        return ;
    }

    auto0D8B4302_ae = libNCMI_gv_NM_MissionCheat_ArrayCount;
    auto0D8B4302_ai = 1;
    lv_arrayIter = 1;
    for ( ; ( (auto0D8B4302_ai >= 0 && lv_arrayIter <= auto0D8B4302_ae) || (auto0D8B4302_ai <= 0 && lv_arrayIter >= auto0D8B4302_ae) ) ; lv_arrayIter += auto0D8B4302_ai ) {
        if ((TriggerIsEnabled(libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_trigger) == false)) {
            DialogControlSetEnabled(libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_buttonDialog, PlayerGroupAll(), false);
            TextExpressionSetToken("Param/Expression/lib_NCMI_9BF57690", "Button Text", libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_titleText);
            libNtve_gf_SetDialogItemText(libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_buttonDialog, TextExpressionAssemble("Param/Expression/lib_NCMI_9BF57690"), PlayerGroupAll());
            if ((libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_uIType == libNCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
                DialogControlSetEnabled(libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_editBoxDialog, PlayerGroupAll(), false);
            }

        }
        else {
            DialogControlSetEnabled(libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_buttonDialog, PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/lib_NCMI_80CEDAC6", "Button Text", libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_titleText);
            libNtve_gf_SetDialogItemText(libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_buttonDialog, TextExpressionAssemble("Param/Expression/lib_NCMI_80CEDAC6"), PlayerGroupAll());
            if ((libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_uIType == libNCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
                DialogControlSetEnabled(libNCMI_gv_NM_MissionCheat_Cheats[lv_arrayIter].lv_editBoxDialog, PlayerGroupAll(), true);
            }

        }
    }
}

void libNCMI_gf_NM_MissionCheat_ButtonTextInit () {
    int auto6A612C5A_ae;
    int auto6A612C5A_ai;
    int autoDF102A18_ae;
    int autoDF102A18_ai;
    int auto5B343B0C_ae;
    int auto5B343B0C_ai;

    // Variable Declarations
    int lv_cheatIndex01;
    int lv_cheatIndex02;

    // Variable Initialization

    // Implementation
    auto6A612C5A_ae = libNCMI_gv_NM_MissionCheat_ArrayCount;
    auto6A612C5A_ai = 1;
    lv_cheatIndex01 = 1;
    for ( ; ( (auto6A612C5A_ai >= 0 && lv_cheatIndex01 <= auto6A612C5A_ae) || (auto6A612C5A_ai <= 0 && lv_cheatIndex01 >= auto6A612C5A_ae) ) ; lv_cheatIndex01 += auto6A612C5A_ai ) {
        libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleText = StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString);
    }
    autoDF102A18_ae = libNCMI_gv_NM_MissionCheat_ArrayCount;
    autoDF102A18_ai = 1;
    lv_cheatIndex01 = 1;
    for ( ; ( (autoDF102A18_ai >= 0 && lv_cheatIndex01 <= autoDF102A18_ae) || (autoDF102A18_ai <= 0 && lv_cheatIndex01 >= autoDF102A18_ae) ) ; lv_cheatIndex01 += autoDF102A18_ai ) {
        if ((libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_trigger == null)) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_BB000415", "Button Text", StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
            TextExpressionSetToken("Param/Expression/lib_NCMI_BB000415", "Error Text", StringToText("Error"));
            libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleText = TextExpressionAssemble("Param/Expression/lib_NCMI_BB000415");
            TextExpressionSetToken("Param/Expression/lib_NCMI_CA1103D4", "Tip Text", libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_description);
            TextExpressionSetToken("Param/Expression/lib_NCMI_CA1103D4", "Error Text", StringToText("Error: Trigger not set for this Button"));
            libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_description = TextExpressionAssemble("Param/Expression/lib_NCMI_CA1103D4");
        }
        else {
            auto5B343B0C_ae = libNCMI_gv_NM_MissionCheat_ArrayCount;
            auto5B343B0C_ai = 1;
            lv_cheatIndex02 = (lv_cheatIndex01 + 1);
            for ( ; ( (auto5B343B0C_ai >= 0 && lv_cheatIndex02 <= auto5B343B0C_ae) || (auto5B343B0C_ai <= 0 && lv_cheatIndex02 >= auto5B343B0C_ae) ) ; lv_cheatIndex02 += auto5B343B0C_ai ) {
                if ((libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_trigger == libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_trigger)) {
                    TextExpressionSetToken("Param/Expression/lib_NCMI_345DFBBA", "Button Text", StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
                    TextExpressionSetToken("Param/Expression/lib_NCMI_345DFBBA", "Error Text", StringToText("Error"));
                    libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleText = TextExpressionAssemble("Param/Expression/lib_NCMI_345DFBBA");
                    TextExpressionSetToken("Param/Expression/lib_NCMI_E29A6B4F", "Desc Text", libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_description);
                    TextExpressionSetToken("Param/Expression/lib_NCMI_E29A6B4F", "trigname", StringToText(TriggerGetFunction(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_trigger)));
                    TextExpressionSetToken("Param/Expression/lib_NCMI_E29A6B4F", "command", StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString));
                    libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_description = TextExpressionAssemble("Param/Expression/lib_NCMI_E29A6B4F");
                    TextExpressionSetToken("Param/Expression/lib_NCMI_60CA52DA", "Button Text", StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString));
                    TextExpressionSetToken("Param/Expression/lib_NCMI_60CA52DA", "Error Text", StringToText("Error"));
                    libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleText = TextExpressionAssemble("Param/Expression/lib_NCMI_60CA52DA");
                    TextExpressionSetToken("Param/Expression/lib_NCMI_B57553DC", "Desc Text", libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_description);
                    TextExpressionSetToken("Param/Expression/lib_NCMI_B57553DC", "trigname", StringToText(TriggerGetFunction(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_trigger)));
                    TextExpressionSetToken("Param/Expression/lib_NCMI_B57553DC", "command", StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
                    libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_description = TextExpressionAssemble("Param/Expression/lib_NCMI_B57553DC");
                }

                if ((libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString == libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString)) {
                    TextExpressionSetToken("Param/Expression/lib_NCMI_3E2FD972", "Button Text", StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
                    TextExpressionSetToken("Param/Expression/lib_NCMI_3E2FD972", "Error Text", StringToText("Error"));
                    libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleText = TextExpressionAssemble("Param/Expression/lib_NCMI_3E2FD972");
                    TextExpressionSetToken("Param/Expression/lib_NCMI_BF425BB2", "Desc Text", libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_description);
                    TextExpressionSetToken("Param/Expression/lib_NCMI_BF425BB2", "command", StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_titleString));
                    libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex01].lv_description = TextExpressionAssemble("Param/Expression/lib_NCMI_BF425BB2");
                    TextExpressionSetToken("Param/Expression/lib_NCMI_84AF9873", "Button Text", StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString));
                    TextExpressionSetToken("Param/Expression/lib_NCMI_84AF9873", "Error Text", StringToText("Error"));
                    libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleText = TextExpressionAssemble("Param/Expression/lib_NCMI_84AF9873");
                    TextExpressionSetToken("Param/Expression/lib_NCMI_53441A0B", "Desc Text", libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_description);
                    TextExpressionSetToken("Param/Expression/lib_NCMI_53441A0B", "command", StringToText(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_titleString));
                    libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex02].lv_description = TextExpressionAssemble("Param/Expression/lib_NCMI_53441A0B");
                }

            }
        }
    }
}

void libNCMI_gf_AddMissionCheat (string lp_command, string lp_description, trigger lp_trigger, int lp_cheatType, int lp_uIType) {
    // Variable Declarations
    string lv_stageString;
    int lv_stage;

    // Variable Initialization
    lv_stageString = "";

    // Implementation
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        return ;
    }

    if ((libNCMI_gv_NM_MissionCheat_ArrayCount == libNCMI_gv_NMC_MissionCheat_MaxCheats)) {
        TextExpressionSetToken("Param/Expression/lib_NCMI_C3493724", "ErrorMessage", StringToText("Maximum Mission Cheats reached!"));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_NCMI_C3493724"), true);
        return ;
    }

    libNCMI_gv_NM_MissionCheat_ArrayCount += 1;
    libNCMI_gv_NM_MissionCheat_Cheats[libNCMI_gv_NM_MissionCheat_ArrayCount].lv_titleString = StringReplaceWord(lp_command, " ", "", c_stringReplaceAll, c_stringCase);
    libNCMI_gv_NM_MissionCheat_Cheats[libNCMI_gv_NM_MissionCheat_ArrayCount].lv_description = StringToText(lp_description);
    libNCMI_gv_NM_MissionCheat_Cheats[libNCMI_gv_NM_MissionCheat_ArrayCount].lv_trigger = lp_trigger;
    libNCMI_gv_NM_MissionCheat_Cheats[libNCMI_gv_NM_MissionCheat_ArrayCount].lv_cheatType = lp_cheatType;
    libNCMI_gv_NM_MissionCheat_CategoryUsed[lp_cheatType] = true;
    libNCMI_gv_NM_MissionCheat_Cheats[libNCMI_gv_NM_MissionCheat_ArrayCount].lv_uIType = lp_uIType;
}

int libNCMI_gf_MissionCheatEditBoxValueInteger (trigger lp_cheatTrigger) {
    // Variable Declarations
    string lv_returnValue;

    // Variable Initialization
    lv_returnValue = "";

    // Implementation
    lv_returnValue = DataTableGetString(true, ("NS_" + TriggerGetFunction(lp_cheatTrigger)));
    return StringToInt(lv_returnValue);
}

fixed libNCMI_gf_MissionCheatEditBoxValueReal (trigger lp_cheatTrigger) {
    // Variable Declarations
    string lv_returnValue;

    // Variable Initialization
    lv_returnValue = "";

    // Implementation
    lv_returnValue = DataTableGetString(true, ("NS_" + TriggerGetFunction(lp_cheatTrigger)));
    return StringToFixed(lv_returnValue);
}

string libNCMI_gf_MissionCheatEditBoxValueString (trigger lp_cheatTrigger) {
    // Variable Declarations
    string lv_returnValue;

    // Variable Initialization
    lv_returnValue = "";

    // Implementation
    lv_returnValue = DataTableGetString(true, ("NS_" + TriggerGetFunction(lp_cheatTrigger)));
    return lv_returnValue;
}

void libNCMI_gf_GameOver (int lp_gameOverType) {
    // Implementation
    libNCMI_gv_NM_GameOverResult = lp_gameOverType;
    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
}

bool libNCMI_gf_GameIsOver () {
    // Implementation
    return (libNCMI_gv_NM_GameOverResult != libNCMI_ge_CampaignMissionGameResultType_None);
}

void libNCMI_gf_NM_PostMissionVictoryUpdate () {
    int auto83CE6A7E_ae;
    int auto83CE6A7E_ai;

    // Variable Declarations
    int lv_missionDifficulty;
    int lv_bestTime;
    string lv_indexObjective;

    // Variable Initialization
    lv_missionDifficulty = 1;

    // Implementation
    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    lv_missionDifficulty = PlayerDifficulty(1);
    libNCMI_gv_NM_MissionCompleteTime = FixedToInt(libNtve_gf_GamePlayTime(1));
    lv_bestTime = libComC_gf_MissionCompleteBestTime(libComC_gf_CurrentMap(), lv_missionDifficulty);
    if (((lv_bestTime <= 0) || (libNCMI_gv_NM_MissionCompleteTime < lv_bestTime))) {
        libComC_gf_CC_MissionCompletionBestTimeSet(libComC_gf_CurrentMap(), lv_missionDifficulty, libNCMI_gv_NM_MissionCompleteTime);
    }

    auto83CE6A7E_ae = CatalogFieldValueCount(c_gameCatalogMap, libComC_gf_CurrentMap(), "ObjectiveArray", 1);
    auto83CE6A7E_ai = 1;
    while (auto83CE6A7E_ai <= auto83CE6A7E_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libComC_gf_CurrentMap(), "ObjectiveArray["+IntToString(auto83CE6A7E_ai-1)+"]", 1);
        auto83CE6A7E_ai = auto83CE6A7E_ai + 1;
        if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            if ((libComC_gf_MissionObjectiveProgress(lv_indexObjective) > libComC_gf_CC_ObjectiveBestProgress(lv_indexObjective))) {
                libComC_gf_CC_MissionObjectiveBestProgressSet(lv_indexObjective, libComC_gf_MissionObjectiveProgress(lv_indexObjective));
            }

        }

    }
}

void libNCMI_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Implementation
    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_NM_PostMissionVictoryUpdate();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(false);
    libNCMI_gv_NM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libNCMI_gv_NM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(lp_victoryCinematic, true, false);
    TriggerExecute(libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libNCMI_gf_EndCampaignMission (int lp_player, int lp_type) {
    int auto9E8DB646_ae;
    int auto9E8DB646_ai;

    // Variable Declarations
    unit lv_indexUnit;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    PerfTestStop();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(true);
    if ((lp_type != c_gameOverVictory)) {
        GameOver(lp_player, lp_type, true, false);
        return ;
    }

    GameCheatAllow(c_gameCheatProgress, false);
    AITimePause(true);
    UnitPauseAll(true);
    auto9E8DB646_ae = libNCUI_gv_nUC_HeroMaxHeroCount;
    auto9E8DB646_ai = 1;
    lv_heroIndex = 1;
    for ( ; ( (auto9E8DB646_ai >= 0 && lv_heroIndex <= auto9E8DB646_ae) || (auto9E8DB646_ai <= 0 && lv_heroIndex >= auto9E8DB646_ae) ) ; lv_heroIndex += auto9E8DB646_ai ) {
        libNCUI_gf_SetHeroPanelUnit(lv_heroIndex, null);
    }
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Destroy Immediate");
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
    SoundStopAllTriggerSounds(false);
    libComC_gf_CC_TransitionPrepareMissionEnd(c_gameOverVictory, libComC_gv_cCX_CampaignDifficulty);
    if ((libComC_gf_CC_InLoadedMission() == true)) {
        libComC_gf_CC_ArchiveBankSyncForSave();
    }

    if ((libComC_gf_CC_TransitionInSimulation() == false)) {
        libNovC_gf_NC_UpdateCampaignScreen(libComC_gf_CurrentMap());
    }

    if ((libComC_gf_CampaignIsComplete() == true)) {
        libComC_gf_CC_CompletedSavesEnable();
    }

    TextExpressionSetToken("Param/Expression/lib_NCMI_4BE4A58E", "A", libComC_gf_CC_MapName(libComC_gf_CurrentMap()));
    libComC_gf_CreateStoryModeTransitionSave(TextExpressionAssemble("Param/Expression/lib_NCMI_4BE4A58E"), StringToText(""));
    libNCUI_gf_NU_VictoryDisplay(libComC_gf_CurrentMap());
    if ((libComC_gf_CC_TransitionInSimulation() == true)) {
        libComC_gf_CC_OpenCampaignBank();
        libComC_gf_CC_TransitionLoadBankVars(libComC_gf_CC_CampaignBank(), libComC_gf_CurrentMap());
    }

    libComC_gf_CC_AchievementAwardMission(libComC_gf_CurrentMap());
}

void libNCMI_gf_NM_CampaignNovaVictory () {
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundStopAllTriggerSounds(true);
    TransmissionClearAll();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_NCMI_7A38473E"), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    libComC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    if ((libComC_gf_CurrentMap() == "Nova03")) {
        libComC_gf_PlayCinematic("MP01_040", false);
    }
    else if ((libComC_gf_CurrentMap() == "Nova09")) {
        libNCMI_gf_NM_CreditsCutscenePlay();
    }
    if ((libComC_gf_CC_TransitionInSimulation() == false)) {
        GameSetNextMap("");
    }

    CampaignProgressDeleteCampaignSave(PlayerGroupAll());
    GameOver(1, c_gameOverVictory, false, false);
}

void libNCMI_gf_UnlockAllMissedNovaEquipment () {
    int auto8C73AC62_ai;
    int auto8C73AC62_ae;

    // Variable Declarations
    string lv_indexEquipment;

    // Variable Initialization

    // Implementation
    auto8C73AC62_ai = 1;
    auto8C73AC62_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto8C73AC62_ai < auto8C73AC62_ae) {
        lv_indexEquipment = UserDataInstance("CampaignPerk", auto8C73AC62_ai);
        auto8C73AC62_ai = auto8C73AC62_ai+1;
        if ((libComC_gf_CC_PerkStateCheck(lv_indexEquipment, libComC_ge_CC_PerkState_Missed) == true)) {
            libComC_gf_CC_PerkStateSet(lv_indexEquipment, libComC_ge_CC_PerkState_Unlocked);
        }

    }
}

void libNCMI_gf_LockUnlockNovaEquipment (bool lp_lockUnlock, string lp_novaEquipment) {
    // Implementation
    if ((lp_lockUnlock == true)) {
        libComC_gf_CC_PerkStateSet(lp_novaEquipment, libComC_ge_CC_PerkState_Locked);
    }
    else {
        libComC_gf_CC_PerkStateSet(lp_novaEquipment, libComC_ge_CC_PerkState_Unlocked);
    }
}

void libNCMI_gf_OpenNovaEquipmentScreen () {
    int auto833582E7_ai;
    int auto833582E7_ae;
    int auto4EDF563F_ai;
    int auto4EDF563F_ae;

    // Variable Declarations
    string lv_indexPerk;
    string lv_indexPerkOthersInCategory;

    // Variable Initialization

    // Implementation
    auto833582E7_ai = 1;
    auto833582E7_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto833582E7_ai < auto833582E7_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto833582E7_ai);
        auto833582E7_ai = auto833582E7_ai+1;
        if ((libComC_gf_CC_PerkStateCheck(lv_indexPerk, libComC_ge_CC_PerkState_Active) == false) && (libComC_gf_CC_PerkStateCheck(lv_indexPerk, libComC_ge_CC_PerkState_Unlocked) == true)) {
            if ((libNovC_gf_NC_PerkUpgradesActive(lv_indexPerk, libNovC_gv_nCC_NovaPlayerSlot) == true)) {
                auto4EDF563F_ai = 1;
                auto4EDF563F_ae = UserDataInstanceCount("CampaignPerk")+1;
                while (auto4EDF563F_ai < auto4EDF563F_ae) {
                    lv_indexPerkOthersInCategory = UserDataInstance("CampaignPerk", auto4EDF563F_ai);
                    auto4EDF563F_ai = auto4EDF563F_ai+1;
                    if( libComC_gf_CC_PerkGroupOfPerk(lv_indexPerkOthersInCategory) == libComC_gf_CC_PerkGroupOfPerk(lv_indexPerk) ) {
                        if ((libComC_gf_CC_PerkStateCheck(lv_indexPerkOthersInCategory, libComC_ge_CC_PerkState_Active) == true)) {
                            libComC_gf_CC_PerkStateSet(lv_indexPerkOthersInCategory, libComC_ge_CC_PerkState_Unlocked);
                        }

                    }    
                }
                libComC_gf_CC_PerkStateSet(lv_indexPerk, libComC_ge_CC_PerkState_Active);
            }

        }

    }
    libNCUI_gf_NU_EquipmentDisplay();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    TriggerEnable(libNCMI_gt_NM_EventMissionEquipmentClose, true);
}

void libNCMI_gf_SetCharacterIsAliveStatus (string lp_character, bool lp_isAlive) {
    // Implementation
    if ((lp_isAlive == true)) {
        UserDataSetInt("CharacterStatus", lp_character, "IsAlive", 1, 1);
    }
    else {
        UserDataSetInt("CharacterStatus", lp_character, "IsAlive", 1, 0);
    }
}

bool libNCMI_gf_CharacterIsAlive (string lp_character) {
    // Implementation
    if ((UserDataGetInt("CharacterStatus", lp_character, "IsAlive", 1) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

void libNCMI_gf_SetNovaHeroUnit (unit lp_novaUnit) {
    // Implementation
    libNCMI_gv_nM_NovaHeroUnit = lp_novaUnit;
}

unit libNCMI_gf_NovaHeroUnit () {
    // Implementation
    return libNCMI_gv_nM_NovaHeroUnit;
}

trigger auto_libNCMI_gf_HandleHeroDeathNova_Trigger = null;
unit auto_libNCMI_gf_HandleHeroDeathNova_lp_heroUnit;
unit auto_libNCMI_gf_HandleHeroDeathNova_lp_reviveLocation;
fixed auto_libNCMI_gf_HandleHeroDeathNova_lp_reviveTime;

void libNCMI_gf_HandleHeroDeathNova (unit lp_heroUnit, unit lp_reviveLocation, fixed lp_reviveTime) {
    auto_libNCMI_gf_HandleHeroDeathNova_lp_heroUnit = lp_heroUnit;
    auto_libNCMI_gf_HandleHeroDeathNova_lp_reviveLocation = lp_reviveLocation;
    auto_libNCMI_gf_HandleHeroDeathNova_lp_reviveTime = lp_reviveTime;

    if (auto_libNCMI_gf_HandleHeroDeathNova_Trigger == null) {
        auto_libNCMI_gf_HandleHeroDeathNova_Trigger = TriggerCreate("auto_libNCMI_gf_HandleHeroDeathNova_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_HandleHeroDeathNova_Trigger, false, false);
}

bool auto_libNCMI_gf_HandleHeroDeathNova_TriggerFunc (bool testConds, bool runActions) {
    unit lp_heroUnit = auto_libNCMI_gf_HandleHeroDeathNova_lp_heroUnit;
    unit lp_reviveLocation = auto_libNCMI_gf_HandleHeroDeathNova_lp_reviveLocation;
    fixed lp_reviveTime = auto_libNCMI_gf_HandleHeroDeathNova_lp_reviveTime;

    int autoEABFE1D8_val;
    int autoE295FE6A_val;

    // Variable Declarations
    int lv_heroType;
    unit lv_actualReviveLocation;
    string lv_reviveUnitType;
    text lv_reviveMessage;
    text lv_reviveRebuildMessage;
    fixed lv_reviveCooldown;
    bool lv_updateRally;

    // Variable Initialization

    // Implementation
    if ((lp_reviveLocation != null) && (UnitIsAlive(lp_reviveLocation) == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_NCMI_59A400F9"), false);
        return true;
    }

    lv_heroType = libNCMI_gf_NM_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    libNCMI_gv_nM_HeroRevivePlayer[(lv_heroType)] = UnitGetOwner(lp_heroUnit);
    libNCMI_gv_nM_HeroRevivingUnit[(lv_heroType)] = lp_heroUnit;
    autoEABFE1D8_val = lv_heroType;
    if (autoEABFE1D8_val == libNCMI_ge_NM_HeroType_NM_HeroType_Nova) {
        lv_reviveUnitType = "NovaReviveCocoon";
        libNCMI_gv_nM_HeroReviveCDLink[(lv_heroType)] = "Abil/NovaRevive";
        libNCMI_gv_nM_HeroReviveCommand[(lv_heroType)] = AbilityCommand("NovaRevive", 0);
        if ((lp_reviveTime == -1.0)) {
            lv_reviveCooldown = libNCMI_gv_nM_ReviveCooldownTimeNova;
        }
        else {
            lv_reviveCooldown = lp_reviveTime;
        }
        if ((libNCMI_gv_nM_ReviveUseAltMessage == true)) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_FA7D5E45", "A", IntToText(FixedToInt(lv_reviveCooldown)));
            lv_reviveMessage = TextExpressionAssemble("Param/Expression/lib_NCMI_FA7D5E45");
            lv_reviveRebuildMessage = StringExternal("Param/Value/lib_NCMI_ADD87D4E");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NCMI_33ED0AF0", "A", IntToText(FixedToInt(lv_reviveCooldown)));
            lv_reviveMessage = TextExpressionAssemble("Param/Expression/lib_NCMI_33ED0AF0");
            lv_reviveRebuildMessage = StringExternal("Param/Value/lib_NCMI_FB9D3615");
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_NCMI_A9DB134E", "A", StringToText((UnitGetType(lp_heroUnit))));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_NCMI_A9DB134E"), false);
        return true;
    }
    libNCMI_gv_nM_ReviveUseAltMessage = false;
    if ((lp_reviveLocation != null)) {
        lv_actualReviveLocation = lp_reviveLocation;
    }
    else {
        lv_actualReviveLocation = libNCMI_gf_NM_FindPrimaryTownHall(libNCMI_gv_nM_HeroRevivePlayer[(lv_heroType)]);
    }
    if ((libNCMI_gv_nM_HeroRevivePlayer[(lv_heroType)] == 1)) {
        if (((lv_actualReviveLocation == null) || (UnitIsAlive(lv_actualReviveLocation) == false))) {
            libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_Warning, lv_reviveRebuildMessage, libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        else {
            TriggerExecute(libNCMI_gt_NM_HeroReviveVOReminder, true, false);
            libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_Warning, lv_reviveMessage, libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
    }

    Wait(2.0, c_timeGame);
    while (((lv_actualReviveLocation == null) || (UnitIsAlive(lv_actualReviveLocation) == false))) {
        Wait(1.0, c_timeGame);
        lv_actualReviveLocation = libNCMI_gf_NM_FindPrimaryTownHall(libNCMI_gv_nM_HeroRevivePlayer[(lv_heroType)]);
    }
    if ((UnitIsAlive(lp_heroUnit) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_reviveUnitType, 0, libNCMI_gv_nM_HeroRevivePlayer[(lv_heroType)], UnitGetPosition(lv_actualReviveLocation));
        libNCMI_gv_nM_HeroReviverUnit[(lv_heroType)] = UnitLastCreated();
        if ((lv_updateRally == true)) {
            UnitCreateEffectUnit(lv_actualReviveLocation, "CopyHatcheryRally", libNCMI_gv_nM_HeroReviverUnit[(lv_heroType)]);
            UnitIssueOrder(libNCMI_gv_nM_HeroReviverUnit[(lv_heroType)], OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), libNCMI_gv_nM_HeroReviverUnit[(lv_heroType)]), c_orderQueueReplace);
        }

        libNtve_gf_PlayerRemoveCooldown(libNCMI_gv_nM_HeroRevivePlayer[(lv_heroType)], libNCMI_gv_nM_HeroReviveCDLink[(lv_heroType)]);
        PlayerAddCooldown(libNCMI_gv_nM_HeroRevivePlayer[(lv_heroType)], libNCMI_gv_nM_HeroReviveCDLink[(lv_heroType)], lv_reviveCooldown);
        autoE295FE6A_val = lv_heroType;
        if (autoE295FE6A_val == libNCMI_ge_NM_HeroType_NM_HeroType_Nova) {
            TriggerEnable(libNCMI_gt_NM_HeroReviveNovaCooldownWait, true);
            TriggerEnable(libNCMI_gt_NM_HeroReviveNovaGameEnds, true);
        }
        else {
        }
    }

    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(lp_heroUnit) == false)) {
        UnitSetPosition(lp_heroUnit, UnitGetPosition(libNCMI_gv_nM_HeroReviverUnit[(lv_heroType)]), false);
    }

    return true;
}

void libNCMI_gf_ReviveHeroInstantly (unit lp_heroUnit, bool lp_displayReviveMessage) {
    int auto81273459_val;
    int autoEC0FE33E_val;
    int autoE5152A70_val;

    // Variable Declarations
    int lv_heroType;
    unit lv_reviveLocation;

    // Variable Initialization

    // Implementation
    lv_heroType = libNCMI_gf_NM_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    auto81273459_val = lv_heroType;
    if (auto81273459_val == libNCMI_ge_NM_HeroType_NM_HeroType_Nova) {
        TriggerEnable(libNCMI_gt_NM_HeroReviveNovaCooldownWait, false);
        TriggerEnable(libNCMI_gt_NM_HeroReviveNovaGameEnds, false);
    }
    else {
    }
    libNtve_gf_PlayerRemoveCooldown(libNCMI_gv_nM_HeroRevivePlayer[(lv_heroType)], libNCMI_gv_nM_HeroReviveCDLink[(lv_heroType)]);
    if ((UnitIsAlive(libNCMI_gv_nM_HeroReviverUnit[(lv_heroType)]) == true)) {
        UnitIssueOrder(libNCMI_gv_nM_HeroReviverUnit[(lv_heroType)], libNtve_gf_ReviveOrderWithNoTarget(libNCMI_gv_nM_HeroReviveCommand[(lv_heroType)], libNCMI_gv_nM_HeroRevivingUnit[(lv_heroType)]), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
        UnitKill(libNCMI_gv_nM_HeroReviverUnit[(lv_heroType)]);
    }
    else {
        lv_reviveLocation = libNCMI_gf_NM_FindPrimaryTownHall(libNCMI_gv_nM_HeroRevivePlayer[(lv_heroType)]);
        if ((lv_reviveLocation != null)) {
            UnitSetPosition(lp_heroUnit, UnitGetPosition(lv_reviveLocation), false);
        }

        UnitRevive(libNCMI_gv_nM_HeroRevivingUnit[(lv_heroType)]);
        autoEC0FE33E_val = lv_heroType;
        if (autoEC0FE33E_val == libNCMI_ge_NM_HeroType_NM_HeroType_Nova) {
            UnitSetPropertyFixed(libNCMI_gv_nM_NovaHeroUnit, c_unitPropLife, UnitGetPropertyFixed(libNCMI_gv_nM_NovaHeroUnit, c_unitPropLifeMax, c_unitPropCurrent));
        }
        else {
        }
    }
    if ((lp_displayReviveMessage == true)) {
        autoE5152A70_val = lv_heroType;
        if (autoE5152A70_val == libNCMI_ge_NM_HeroType_NM_HeroType_Nova) {
        }
        else {
        }
    }

}

void libNCMI_gf_EnableDisableHeroReviveSystem (bool lp_enableDisable, int lp_player) {
    // Implementation
    if ((lp_enableDisable == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NovaWarpOut", 1);
        TriggerEnable(libNCMI_gt_NM_HeroReviveNova, true);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NovaWarpOut", 0);
        TriggerEnable(libNCMI_gt_NM_HeroReviveNova, false);
        TriggerEnable(libNCMI_gt_NM_HeroReviveNovaCooldownWait, false);
        TriggerEnable(libNCMI_gt_NM_HeroReviveNovaGameEnds, false);
    }
}

void libNCMI_gf_NM_HeroRevive (int lp_heroType) {
    // Variable Declarations
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    lv_heroIndex = (lp_heroType);
    UnitIssueOrder(libNCMI_gv_nM_HeroReviverUnit[lv_heroIndex], libNtve_gf_ReviveOrderWithNoTarget(libNCMI_gv_nM_HeroReviveCommand[lv_heroIndex], libNCMI_gv_nM_HeroRevivingUnit[lv_heroIndex]), c_orderQueueReplace);
    Wait(0.125, c_timeGame);
    if ((libNCMI_gv_nM_HeroRevivePlayer[lv_heroIndex] == 1)) {
        UnitGroupLoopBegin(UnitGroupSelected(1));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() == libNCMI_gv_nM_HeroReviverUnit[lv_heroIndex])) {
                UnitSelect(libNCMI_gv_nM_HeroRevivingUnit[lv_heroIndex], libNCMI_gv_nM_HeroRevivePlayer[lv_heroIndex], true);
            }

        }
        UnitGroupLoopEnd();
    }

    UnitKill(libNCMI_gv_nM_HeroReviverUnit[lv_heroIndex]);
}

int libNCMI_gf_NM_HeroTypeFromUnitType (string lp_unitType) {
    // Implementation
    if (((lp_unitType == "NovaHero") || (lp_unitType == "Nova"))) {
        return libNCMI_ge_NM_HeroType_NM_HeroType_Nova;
    }
    return libNCMI_ge_NM_HeroType_NM_HeroType_None;
}

unit libNCMI_gf_NM_FindPrimaryTownHall (int lp_player) {
    string auto1C944BDB_val;
    unitgroup auto59F7820C_g;
    int auto59F7820C_u;

    // Variable Declarations
    fixed lv_distance;
    unitgroup lv_townHallGroup;
    unit lv_indexTownHall;
    unit lv_closestTownHall;

    // Variable Initialization
    lv_distance = 500.0;
    lv_townHallGroup = UnitGroupEmpty();

    // Implementation
    auto1C944BDB_val = PlayerRace(lp_player);
    if (auto1C944BDB_val == "Prot") {
        lv_townHallGroup = UnitGroup("Nexus", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else if (auto1C944BDB_val == "Terr") {
        lv_townHallGroup = UnitGroup("CommandCenter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("OrbitalCommand", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("OrbitalCommandFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("CommandCenterFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("PlanetaryFortress", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else if (auto1C944BDB_val == "Zerg") {
        lv_townHallGroup = UnitGroup("Hive", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("Lair", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup("Hatchery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
    }
    auto59F7820C_g = lv_townHallGroup;
    auto59F7820C_u = 1;
    for ( ; auto59F7820C_u <= UnitGroupCount(auto59F7820C_g, c_unitCountAll) ; auto59F7820C_u += BoolToInt(lv_indexTownHall == UnitGroupUnit(auto59F7820C_g, auto59F7820C_u)) ) {
        lv_indexTownHall = UnitGroupUnit(auto59F7820C_g, auto59F7820C_u);
        if ((DistanceBetweenPoints(PlayerStartLocation(lp_player), UnitGetPosition(lv_indexTownHall)) < lv_distance)) {
            lv_distance = DistanceBetweenPoints(PlayerStartLocation(lp_player), UnitGetPosition(lv_indexTownHall));
            lv_closestTownHall = lv_indexTownHall;
        }

    }
    return lv_closestTownHall;
}

void libNCMI_gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light) {
    string autoC182DE42_val;

    // Variable Declarations

    // Variable Initialization

    // Implementation
    if ((libNCMI_gv_NM_PlanetPortrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorTopLeft, 50, 50, lp_model, "", "Default", false, false);
        libNCMI_gv_NM_PlanetPortrait = PortraitLastCreated();
        PortraitSetOffscreen(libNCMI_gv_NM_PlanetPortrait, true);
        PortraitSetBackgroundVisible(libNCMI_gv_NM_PlanetPortrait, false);
        PortraitSetBorderVisible(libNCMI_gv_NM_PlanetPortrait, false);
        PortraitUseTransition(PortraitLastCreated(), false);
        PortraitWaitForLoad(libNCMI_gv_NM_PlanetPortrait);
    }
    else {
        PortraitSetModel(libNCMI_gv_NM_PlanetPortrait, lp_model, true);
    }
    autoC182DE42_val = lp_model;
    {
    }
    PortraitSetLight(libNCMI_gv_NM_PlanetPortrait, lp_light);
    GameSetLighting(lp_light, 0.0);
    PortraitSetPosition(libNCMI_gv_NM_PlanetPortrait, c_anchorTopLeft, 0, 0);
    PortraitSetFullscreen(libNCMI_gv_NM_PlanetPortrait, true);
    PortraitSetOffscreen(libNCMI_gv_NM_PlanetPortrait, false);
    PortraitSetVisible(libNCMI_gv_NM_PlanetPortrait, PlayerGroupAll(), true, true);
    libComC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    libComC_gf_CinematicFade(true, 2.0, Color(0.00, 0.00, 0.00), true);
    libNCMI_gv_NM_PlanetPortraitPlayerCamera = lp_camera;
    CameraApplyInfo(1, lp_camera, 0.0, -1, 10, true);
    CameraSetValue(1, c_cameraValueDistance, (CameraInfoGetValue(lp_camera, c_cameraValueDistance) + 100.0), 0.0, -1, 20.0);
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
}

void libNCMI_gf_ZoomInPlanetPortrait () {
    // Implementation
    SoundPlay(SoundLink("UI_Evolutions_PlanetaryZoom", -1), PlayerGroupAll(), 100.0, 0.0);
    ActorSend(ActorFromPortrait(libNCMI_gv_NM_PlanetPortrait), "AnimPlay Custom Spell PlayForever,NonLooping");
    Wait(3.0, c_timeGame);
    CameraSetValue(1, c_cameraValueDistance, CameraInfoGetValue(libNCMI_gv_NM_PlanetPortraitPlayerCamera, c_cameraValueDistance), 2.0, 100.0, 10.0);
    Wait(1.5, c_timeGame);
}

trigger auto_libNCMI_gf_HidePlanetPortrait_Trigger = null;

void libNCMI_gf_HidePlanetPortrait () {
    if (auto_libNCMI_gf_HidePlanetPortrait_Trigger == null) {
        auto_libNCMI_gf_HidePlanetPortrait_Trigger = TriggerCreate("auto_libNCMI_gf_HidePlanetPortrait_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_HidePlanetPortrait_Trigger, false, false);
}

bool auto_libNCMI_gf_HidePlanetPortrait_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    PortraitSetOffscreen(libNCMI_gv_NM_PlanetPortrait, true);
    ActorSend(ActorFromPortrait(libNCMI_gv_NM_PlanetPortrait), "AnimClear Custom 0.000000");
    return true;
}

void libNCMI_gf_StartAIPersonalityForPlayerCampaign (int lp_player, string lp_personality) {
    // Deprecated
}

void libNCMI_gf_StartAIPersonalitiesForAllPlayersCampaign () {
    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Deprecated
    CampaignInitAI();
}

void libNCMI_gf_StartCampaignAIForAllPlayersVoid () {
    // Deprecated
    CampaignInitAI();
}

void libNCMI_gf_StartCampaignAIForPlayerVoid (int lp_player) {
    // Deprecated
    AICampaignStart(lp_player);
}

void libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers () {
    playergroup autoDF48CB2F_g;
    int autoDF48CB2F_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Implementation
    autoDF48CB2F_g = PlayerGroupAll(); 
    autoDF48CB2F_p = 1;
    for ( ; autoDF48CB2F_p <= PlayerGroupCount(autoDF48CB2F_g) ; autoDF48CB2F_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoDF48CB2F_g, autoDF48CB2F_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoDF48CB2F_g, autoDF48CB2F_p);
        if ((PlayerType(lv_indexPlayer) == c_playerTypeComputer)) {
            libNCMI_gf_EnableNovaCampaignAIBehaviorForPlayer(lv_indexPlayer);
        }

    }
}

void libNCMI_gf_EnableNovaCampaignAIBehaviorForPlayer (int lp_player) {
    // Implementation
    AISetDifficulty(lp_player, c_diffAvoidMindControlled, false);
    AICombatDiffFlagTieBreakHealers (lp_player, c_combatFlagDisable);
}

bool libNCMI_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit) {
    // Variable Declarations
    bool lv_validAttackerFound;
    point lv_unitPosition;

    // Variable Initialization

    // Implementation
    lv_unitPosition = UnitGetPosition(lp_unit);
    UnitGroupLoopBegin(UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitCanAttackTarget(UnitGroupLoopCurrent(), lp_unit) == true)) {
            lv_validAttackerFound = true;
            break;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_validAttackerFound == false)) {
        UnitGroupLoopBegin(UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitCanAttackTarget(UnitGroupLoopCurrent(), lp_unit) == true)) {
                lv_validAttackerFound = true;
                break;
            }

        }
        UnitGroupLoopEnd();
    }

    return lv_validAttackerFound;
}

int libNCMI_gf_CampaignPlayerColor () {
    // Implementation
    return 14;
}

void libNCMI_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player) {
    int auto2117ABBB_n;
    int auto2117ABBB_i;

    // Implementation
    auto2117ABBB_n = lp_count;
    for (auto2117ABBB_i = 1; auto2117ABBB_i <= auto2117ABBB_n; auto2117ABBB_i += 1) {
        AIResearch(lp_player, 4, -1, lp_upgrade);
    }
}

void libNCMI_gf_ShareVisionAmongPlayers (playergroup lp_players) {
    playergroup autoE1FC9780_g;
    int autoE1FC9780_p;
    playergroup auto201B96D5_g;
    int auto201B96D5_p;

    // Variable Declarations
    int lv_indexPlayer1;
    int lv_indexPlayer2;

    // Variable Initialization

    // Implementation
    autoE1FC9780_g = lp_players; 
    autoE1FC9780_p = 1;
    for ( ; autoE1FC9780_p <= PlayerGroupCount(autoE1FC9780_g) ; autoE1FC9780_p += BoolToInt(lv_indexPlayer1 == PlayerGroupPlayer(autoE1FC9780_g, autoE1FC9780_p)) ) {
        lv_indexPlayer1 = PlayerGroupPlayer(autoE1FC9780_g, autoE1FC9780_p);
        auto201B96D5_g = lp_players; 
        auto201B96D5_p = 1;
        for ( ; auto201B96D5_p <= PlayerGroupCount(auto201B96D5_g) ; auto201B96D5_p += BoolToInt(lv_indexPlayer2 == PlayerGroupPlayer(auto201B96D5_g, auto201B96D5_p)) ) {
            lv_indexPlayer2 = PlayerGroupPlayer(auto201B96D5_g, auto201B96D5_p);
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                PlayerSetAlliance(lv_indexPlayer1, c_allianceIdVision, lv_indexPlayer2, true);
            }

        }
    }
}

void libNCMI_gf_AddMissionTipCampaign (string lp_tipData) {
    // Variable Declarations
    int lv_createdCount;

    // Variable Initialization

    // Implementation
    if ((UserDataGetInt("CampaignTips", lp_tipData, "Created", 1) >= UserDataGetInt("CampaignTips", lp_tipData, "Display Limit", 1)) && (UserDataGetInt("CampaignTips", lp_tipData, "Display Limit", 1) != 0)) {
        return ;
    }

    libNCMI_gv_NM_MissionTipCount += 1;
    libNCMI_gv_NM_MissionTip[libNCMI_gv_NM_MissionTipCount] = lp_tipData;
    lv_createdCount = UserDataGetInt("CampaignTips", lp_tipData, "Created", 1);
    UserDataSetInt("CampaignTips", lp_tipData, "Created", 1, (lv_createdCount + 1));
    libNCMI_gf_NM_RefreshTip();
}

trigger auto_libNCMI_gf_DisplayMissionTip_Trigger = null;

void libNCMI_gf_DisplayMissionTip () {
    if (auto_libNCMI_gf_DisplayMissionTip_Trigger == null) {
        auto_libNCMI_gf_DisplayMissionTip_Trigger = TriggerCreate("auto_libNCMI_gf_DisplayMissionTip_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_DisplayMissionTip_Trigger, false, false);
}

bool auto_libNCMI_gf_DisplayMissionTip_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 1, 0) == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HelpTipCallout");
        libNCMI_gv_NM_MissionHelpButtonTipPanel = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/HelpButton");
        libNCMI_gv_NM_MissionHelpButton = DialogControlLastCreated();
        DialogControlSetVisible(libNCMI_gv_NM_MissionHelpButtonTipPanel, PlayerGroupAll(), true);
        TriggerEnable(libNCMI_gt_NM_MissionTipClicked, true);
    }

    Wait(6.0, c_timeReal);
    if ((libNCMI_gv_NM_MissionHelpButtonTipPanel != c_invalidDialogControlId)) {
        DialogControlSetVisible(libNCMI_gv_NM_MissionHelpButtonTipPanel, PlayerGroupAll(), false);
    }

    return true;
}

void libNCMI_gf_NM_RefreshTip () {
    int auto8FF5A5CB_ae;
    int auto8FF5A5CB_ai;

    // Variable Declarations
    int lv_index;
    text lv_tipName;
    text lv_tipDescription;
    string lv_tipIcon;

    // Variable Initialization

    // Implementation
    HelpPanelDestroyAllTips();
    auto8FF5A5CB_ae = 1;
    auto8FF5A5CB_ai = -1;
    lv_index = libNCMI_gv_NM_MissionTipCount;
    for ( ; ( (auto8FF5A5CB_ai >= 0 && lv_index <= auto8FF5A5CB_ae) || (auto8FF5A5CB_ai <= 0 && lv_index >= auto8FF5A5CB_ae) ) ; lv_index += auto8FF5A5CB_ai ) {
        if ((UserDataGetText("CampaignTips", libNCMI_gv_NM_MissionTip[lv_index], "Name", 1) != null)) {
            lv_tipName = UserDataGetText("CampaignTips", libNCMI_gv_NM_MissionTip[lv_index], "Name", 1);
        }
        else {
            lv_tipName = StringExternal("Param/Value/lib_NCMI_758AA553");
        }
        if ((UserDataGetText("CampaignTips", libNCMI_gv_NM_MissionTip[lv_index], "Description", 1) != null)) {
            lv_tipDescription = UserDataGetText("CampaignTips", libNCMI_gv_NM_MissionTip[lv_index], "Description", 1);
        }
        else {
            lv_tipDescription = StringExternal("Param/Value/lib_NCMI_4837CBD0");
        }
        lv_tipIcon = UserDataGetImagePath("CampaignTips", libNCMI_gv_NM_MissionTip[lv_index], "Icon", 1);
        libNCUI_gf_NU_AddTip(lv_tipName, libNtve_ge_TipType_NormalTip, lv_tipDescription, lv_tipName, lv_tipIcon);
    }
}

void libNCMI_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    if ((lv_sound == null)) {
        return ;
    }

    libNCMI_gf_NM_SendTransmissionCampaignInternal(false, lp_unit, null, lv_sound, null, null, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, CatalogFieldValueGet(c_gameCatalogSound, ConversationDataGetSound(lp_conversationLine, true), "AssetArray[" + IntToString(0) + "].PortraitActor", c_playerAny));
}

void libNCMI_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff) {
    int auto664A67F5_val;

    // Implementation
    auto664A67F5_val = lp_option;
    if (auto664A67F5_val == libNCMI_ge_MissionTransmissionOptions_ChatBubble) {
        libNCMI_gv_NM_SendTransmissionCampaignChatBubbleOn = lp_onOff;
    }
    else {
    }
}

void libNCMI_gf_NM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    if ((lp_sound == null)) {
        return ;
    }

    libNCMI_gv_NM_SendTransmissionCampaignIndex += 1;
    lv_localIndex = libNCMI_gv_NM_SendTransmissionCampaignIndex;
    lv_oldSpeaker = libNCMI_gv_NM_SendTransmissionCampaignSpeaker;
    libNCMI_gv_NM_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = libNCMI_gv_NM_SendTransmissionCampaignTrigger;
    libNCMI_gv_NM_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == libNCMI_ge_MissionTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(libNCMI_gv_NM_SendTransmissionCampaignPortrait, 1) == false)))) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    libNCMI_gv_NM_SendTransmissionCampaignPortrait = lv_portrait;
    if ((libNCMI_gv_NM_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(libNCMI_gv_NM_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }

    libNCMI_gv_NM_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((UnitGetOwner(lp_unit) == 1)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, true, "Talk");
                }

            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libNCMI_gv_NM_SendTransmissionCampaignChatBubbleOn == true)) {
            if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
                if (((UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "WarPig") || (UnitGetType(lp_unit) == "MengskMarine") || (UnitGetType(lp_unit) == "Medic") || (UnitGetType(lp_unit) == "Firebat") || (UnitGetType(lp_unit) == "Marauder"))) {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelOneShot TalkIconBubble {Overhead 0} 0.000000,0.000000,0.500000");
                }
                else {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelOneShot TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
                }
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelOneShot TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            }
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelOneShot TalkIconRing {Origin 0} 0.000000,0.000000,0.100000");
            lv_talkRing = ActorFrom("::LastCreatedActual");
        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, 1) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", PointWithOffset(UnitGetPosition(lp_unit), 0.5, 3.5), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }

    }

    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        libNCMI_gf_NM_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
    else {
        libNCMI_gf_NM_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
}

trigger auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_talkIcon;
actor auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_talkRing;
int auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_ping;
int auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_localIndex;

void libNCMI_gf_NM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, actor lp_talkRing, int lp_ping, int lp_localIndex) {
    auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_talkRing = lp_talkRing;
    auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_talkIcon;
    actor lp_talkRing = auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_talkRing;
    int lp_ping = auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_libNCMI_gf_NM_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }

    Wait(0.75, c_timeReal);
    if ((lp_localIndex != libNCMI_gv_NM_SendTransmissionCampaignIndex)) {
        if ((libNCMI_gv_NM_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }

        if ((lp_talkIcon != null)) {
            libNtve_gf_KillModel(lp_talkIcon);
        }

        if ((lp_talkRing != null)) {
            libNtve_gf_KillModel(lp_talkRing);
        }

        return true;
    }

    libNCMI_gv_NM_SendTransmissionCampaignIndex = 0;
    libNCMI_gv_NM_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(libNCMI_gt_NM_SendTransmissionCampaignTick, true, false);
    if ((lp_keepPortraitVisible == libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }

    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }

    if ((lp_talkRing != null)) {
        libNtve_gf_KillModel(lp_talkRing);
    }

    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }

    return true;
}

void libNCMI_gf_HideCampaignTransmissionPortrait () {
    // Implementation
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
}

fixed libNCMI_gf_ConvesationLineDuration (string lp_conversationLine) {
    // Variable Declarations
    soundlink lv_sound;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    return SoundLengthSync(lv_sound);
}

void libNCMI_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    unit lv_actualUnit;
    string lv_actualModel;
    soundlink lv_sound;
    string lv_portraitActor;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";

    // Implementation
    lv_actualUnit = lp_unit;
    lv_actualModel = lp_model;
    if ((lp_unit != null) && (UnitIsAlive(lp_unit) == false) && (lp_unit == libNCMI_gv_nM_HeroRevivingUnit[(libNCMI_ge_NM_HeroType_NM_HeroType_Nova)])) {
        if ((libNCMI_gv_nM_HeroReviverUnit[(libNCMI_ge_NM_HeroType_NM_HeroType_Nova)] != null) && (UnitIsAlive(libNCMI_gv_nM_HeroReviverUnit[(libNCMI_ge_NM_HeroType_NM_HeroType_Nova)]) == true)) {
            lv_actualUnit = libNCMI_gv_nM_HeroReviverUnit[(libNCMI_ge_NM_HeroType_NM_HeroType_Nova)];
        }
        else {
            lv_actualUnit = null;
            lv_actualModel = "NovaReviveCocoon";
        }
    }

    lv_sound = SoundLink("PlaceholderSoundFile", c_soundIndexAny);
    libNCMI_gf_NM_SendTransmissionCampaignInternal(true, lv_actualUnit, lv_actualModel, lv_sound, lp_speaker, (StringExternal("Param/Value/lib_NCMI_19071613") + lp_message), c_transmissionDurationSet, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, lv_portraitActor);
}

void libNCMI_gf_LaunchUnitToTargetPointWithMover (unit lp_unit, point lp_targetPoint, string lp_mover) {
    // Variable Declarations
    int lv_o;

    // Variable Initialization
    lv_o = UnitGetOwner(lp_unit);

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogMover, lp_mover) == true) && (CatalogEntryIsDefault(c_gameCatalogMover, lp_mover) == false) && (CatalogEntryScope(c_gameCatalogMover, lp_mover) == "CMoverMissile")) {
        CatalogReferenceSet("Effect,UnitLaunchToTargetPointLM,Movers[0].Link", lv_o, (lp_mover));
        UnitCreateEffectPoint(lp_unit, libNCMI_gv_launchUnitToTargetPointBaseEffect, lp_targetPoint);
    }

}

void libNCMI_gf_NM_DropPod_Zerg_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    unitgroup auto29D5EF81_g;
    int auto29D5EF81_u;
    unitgroup auto5CF90E73_g;
    int auto5CF90E73_u;
    unitgroup auto7E0D3E3B_g;
    int auto7E0D3E3B_u;

    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    unit lv_creep;

    // Variable Initialization

    // Implementation
    auto29D5EF81_g = lp_units;
    auto29D5EF81_u = 1;
    for ( ; auto29D5EF81_u <= UnitGroupCount(auto29D5EF81_g, c_unitCountAll) ; auto29D5EF81_u += BoolToInt(lv_chosenUnit == UnitGroupUnit(auto29D5EF81_g, auto29D5EF81_u)) ) {
        lv_chosenUnit = UnitGroupUnit(auto29D5EF81_g, auto29D5EF81_u);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    if ((UnitIsAlive(lv_dropPod) == false)) {
        auto5CF90E73_g = lp_units;
        auto5CF90E73_u = 1;
        for ( ; auto5CF90E73_u <= UnitGroupCount(auto5CF90E73_g, c_unitCountAll) ; auto5CF90E73_u += BoolToInt(lv_chosenUnit == UnitGroupUnit(auto5CF90E73_g, auto5CF90E73_u)) ) {
            lv_chosenUnit = UnitGroupUnit(auto5CF90E73_g, auto5CF90E73_u);
            UnitRemove(lv_chosenUnit);
        }
        return ;
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", c_unitCreateIgnorePlacement, lp_player, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    auto7E0D3E3B_g = lp_units;
    auto7E0D3E3B_u = 1;
    for ( ; auto7E0D3E3B_u <= UnitGroupCount(auto7E0D3E3B_g, c_unitCountAll) ; auto7E0D3E3B_u += BoolToInt(lv_chosenUnit == UnitGroupUnit(auto7E0D3E3B_g, auto7E0D3E3B_u)) ) {
        lv_chosenUnit = UnitGroupUnit(auto7E0D3E3B_g, auto7E0D3E3B_u);
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
        lv_angle = (lv_angle + 77.0);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libNCMI_gf_NM_DropPod_Terran_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    unitgroup autoB56D9329_g;
    int autoB56D9329_u;
    unitgroup auto7DD6500F_g;
    int auto7DD6500F_u;

    // Variable Declarations
    unit lv_indexUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;

    // Variable Initialization

    // Implementation
    autoB56D9329_g = lp_units;
    autoB56D9329_u = 1;
    for ( ; autoB56D9329_u <= UnitGroupCount(autoB56D9329_g, c_unitCountAll) ; autoB56D9329_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoB56D9329_g, autoB56D9329_u)) ) {
        lv_indexUnit = UnitGroupUnit(autoB56D9329_g, autoB56D9329_u);
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    if ((UnitIsAlive(lv_dropPod) == false)) {
        UnitGroupLoopBegin(lp_units);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        return ;
    }

    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    if ((UnitIsValid(lv_dropPod) == true)) {
        lv_dropPodLocation = UnitGetPosition(lv_dropPod);
        lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
        lv_subIndex = 1;
        lv_angleStart = 225.0;
        lv_angle = lv_angleStart;
        auto7DD6500F_g = lp_units;
        auto7DD6500F_u = 1;
        for ( ; auto7DD6500F_u <= UnitGroupCount(auto7DD6500F_g, c_unitCountAll) ; auto7DD6500F_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto7DD6500F_g, auto7DD6500F_u)) ) {
            lv_indexUnit = UnitGroupUnit(auto7DD6500F_g, auto7DD6500F_u);
            lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_angle);
            SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
            Wait(0.125, c_timeGame);
            UnitSetPosition(lv_indexUnit, lv_dropLocation, false);
            libNtve_gf_ShowHideUnit(lv_indexUnit, true);
            libNtve_gf_PauseUnit(lv_indexUnit, false);
            lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
            UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveLocation), c_orderQueueReplace);
            if ((lv_subIndex == lv_countPerLine)) {
                lv_subIndex = 1;
                lv_angle = lv_angleStart;
                lv_distance -= 0.8;
            }
            else {
                lv_subIndex += 1;
                lv_angle += 10.0;
            }
        }
        UnitKill(lv_dropPod);
    }

}

void libNCMI_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player) {
    int auto30FEF00B_val;

    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    PointSetFacing(lv_dropLocation, PointGetFacing(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    DataTableSetUnitGroup(false, libNCMI_gf_NM_DropPod_LastDroppedUnitsDataTableName(), lv_dropUnits);
    auto30FEF00B_val = lp_race;
    if (auto30FEF00B_val == libNCMI_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libNCMI_gf_NM_DropPod_Terran_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libNCMI_gv_NM_DropPod_TP_Location = lv_dropLocation;
            libNCMI_gv_NM_DropPod_TP_Units = lv_dropUnits;
            libNCMI_gv_NM_DropPod_TP_Player = lp_player;
            TriggerExecute(libNCMI_gt_NM_DropPod_Terran_DontWait, true, false);
        }
    }
    else if (auto30FEF00B_val == libNCMI_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libNCMI_gf_NM_DropPod_Zerg_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libNCMI_gv_NM_DropPod_TP_Location = lv_dropLocation;
            libNCMI_gv_NM_DropPod_TP_Units = lv_dropUnits;
            libNCMI_gv_NM_DropPod_TP_Player = lp_player;
            TriggerExecute(libNCMI_gt_NM_DropPod_Zerg_DontWait, true, false);
        }
    }
    else {
    }
}

void libNCMI_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait) {
    bool autoFAF09496_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_buildingType, c_unitCreateIgnorePlacement, lp_player, lp_landingPoint);
    libNCMI_gv_NM_DropPod_TP_ZergBuilding = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    DataTableSetUnitGroup(false, libNCMI_gf_NM_DropPod_LastDroppedUnitsDataTableName(), UnitLastCreatedGroup());
    autoFAF09496_val = lp_waitDontWait;
    if (autoFAF09496_val == true) {
        libNCMI_gf_NM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else if (autoFAF09496_val == false) {
        libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else {
    }
}

trigger auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_Trigger = null;
string auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
point auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
int auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_lp_player;

void libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_lp_buildingType = lp_buildingType;
    auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_lp_landingPoint = lp_landingPoint;
    auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_lp_player = lp_player;

    if (auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_Trigger == null) {
        auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_Trigger = TriggerCreate("auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_Trigger, false, false);
}

bool auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_TriggerFunc (bool testConds, bool runActions) {
    string lp_buildingType = auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
    point lp_landingPoint = auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
    int lp_player = auto_libNCMI_gf_NM_DropPodCreateZergBuilding_DontWait_lp_player;

    // Implementation
    libNCMI_gf_NM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    return true;
}

void libNCMI_gf_NM_DropPodCreateZergBuilding_Wait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    // Variable Declarations
    unit lv_dropPod;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_landingPoint, 270.0);
    lv_dropPod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    if ((UnitIsAlive(lv_dropPod) == false)) {
        UnitRemove(libNCMI_gv_NM_DropPod_TP_ZergBuilding);
        return ;
    }

    UnitTypeMoveBlockersFromPoint(lp_buildingType, lp_player, lp_landingPoint, 0.0);
    Wait(1.25, c_timeReal);
    if ((UnitIsAlive(lv_dropPod) == false)) {
        UnitRemove(libNCMI_gv_NM_DropPod_TP_ZergBuilding);
        return ;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(lp_landingPoint, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "ZergDropPodLarge") && (UnitGroupLoopCurrent() != UnitLastCreated())) {
            if (((UnitGetOwner(UnitGroupLoopCurrent()) == lp_player) || (libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(UnitGroupLoopCurrent()), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(UnitGroupLoopCurrent(), UnitTypePlacementFromPoint(lp_buildingType, UnitGetOwner(UnitGroupLoopCurrent()), lp_landingPoint, 4.0), true);
            }
            else {
                UnitKill(UnitGroupLoopCurrent());
            }
        }

    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(libNCMI_gv_NM_DropPod_TP_ZergBuilding, true);
    Wait(5.0, c_timeReal);
    UnitKill(lv_dropPod);
}

string libNCMI_gf_NM_DropPod_LastDroppedUnitsDataTableName () {
    // Implementation
    return "LASTDROPPODEDUNITS";
}

unitgroup libNCMI_gf_LastDroppedUnits () {
    // Implementation
    return DataTableGetUnitGroup(false, libNCMI_gf_NM_DropPod_LastDroppedUnitsDataTableName());
}

unit libNCMI_gf_NM_BestWorkerRallyMineral (unit lp_nexus) {
    unitgroup autoEC5BF080_g;
    int autoEC5BF080_u;
    unitgroup auto956D9CE4_g;
    int auto956D9CE4_u;
    unitgroup auto226EA3E5_g;
    int auto226EA3E5_u;

    // Variable Declarations
    unit lv_indexUnitOuter;
    unit lv_indexUnitInner;
    unit lv_indexResource;
    fixed lv_bestDistance;
    fixed lv_curDistance;
    region lv_searchArea;
    unitgroup lv_mineralGroup;
    unit lv_bestMineral;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    lv_searchArea = RegionCircle(UnitGetPosition(lp_nexus), 10.0);
    lv_mineralGroup = UnitGroup(null, c_playerAny, lv_searchArea, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEC5BF080_g = lv_mineralGroup;
    autoEC5BF080_u = 1;
    for ( ; autoEC5BF080_u <= UnitGroupCount(autoEC5BF080_g, c_unitCountAll) ; autoEC5BF080_u += BoolToInt(lv_indexResource == UnitGroupUnit(autoEC5BF080_g, autoEC5BF080_u)) ) {
        lv_indexResource = UnitGroupUnit(autoEC5BF080_g, autoEC5BF080_u);
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) != "Minerals")) {
            UnitGroupRemove(lv_mineralGroup, lv_indexResource);
        }

    }
    auto956D9CE4_g = lv_mineralGroup;
    auto956D9CE4_u = 1;
    for ( ; auto956D9CE4_u <= UnitGroupCount(auto956D9CE4_g, c_unitCountAll) ; auto956D9CE4_u += BoolToInt(lv_indexUnitOuter == UnitGroupUnit(auto956D9CE4_g, auto956D9CE4_u)) ) {
        lv_indexUnitOuter = UnitGroupUnit(auto956D9CE4_g, auto956D9CE4_u);
        lv_curDistance = 0.0;
        auto226EA3E5_g = lv_mineralGroup;
        auto226EA3E5_u = 1;
        for ( ; auto226EA3E5_u <= UnitGroupCount(auto226EA3E5_g, c_unitCountAll) ; auto226EA3E5_u += BoolToInt(lv_indexUnitInner == UnitGroupUnit(auto226EA3E5_g, auto226EA3E5_u)) ) {
            lv_indexUnitInner = UnitGroupUnit(auto226EA3E5_g, auto226EA3E5_u);
            if ((lv_indexUnitOuter != lv_indexUnitInner)) {
                lv_curDistance += DistanceBetweenPoints(UnitGetPosition(lv_indexUnitOuter), UnitGetPosition(lv_indexUnitInner));
            }

        }
        if (((lv_bestDistance == 0.0) || (lv_curDistance < lv_bestDistance))) {
            lv_bestDistance = lv_curDistance;
            lv_bestMineral = lv_indexUnitOuter;
        }

    }
    return lv_bestMineral;
}

void libNCMI_gf_SetWorkerRallyPoint (unit lp_nexus) {
    // Variable Declarations
    unit lv_bestMineral;
    point lv_rallyPoint;

    // Variable Initialization

    // Implementation
    lv_bestMineral = libNCMI_gf_NM_BestWorkerRallyMineral(lp_nexus);
    if ((lv_bestMineral != null)) {
        if (((UnitGetType(lp_nexus) == "Hatchery") || (UnitGetType(lp_nexus) == "Lair") || (UnitGetType(lp_nexus) == "Hive"))) {
            if ((PlayerDifficulty(UnitGetOwner(lp_nexus)) == 1)) {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lv_bestMineral), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lv_bestMineral), c_orderQueueReplace);
            }
        }
        else {
            if ((PlayerDifficulty(UnitGetOwner(lp_nexus)) == 1)) {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyNexus", 1), lv_bestMineral), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), lv_bestMineral), c_orderQueueReplace);
            }
        }
    }

}

void libNCMI_gf_SetAllWorkerRallyPointsForPlayer (int lp_player) {
    string auto0417C543_val;
    unitgroup autoF7610F43_g;
    int autoF7610F43_u;

    // Variable Declarations
    unit lv_indexNexus;
    unitgroup lv_nexusGroup;

    // Variable Initialization
    lv_nexusGroup = UnitGroupEmpty();

    // Implementation
    auto0417C543_val = PlayerRace(lp_player);
    if (auto0417C543_val == "Prot") {
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Nexus", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else if (auto0417C543_val == "Terr") {
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("CommandCenter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("OrbitalCommand", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("PlanetaryFortress", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else if (auto0417C543_val == "Zerg") {
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Hatchery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Lair", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Hive", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
    }
    autoF7610F43_g = lv_nexusGroup;
    autoF7610F43_u = 1;
    for ( ; autoF7610F43_u <= UnitGroupCount(autoF7610F43_g, c_unitCountAll) ; autoF7610F43_u += BoolToInt(lv_indexNexus == UnitGroupUnit(autoF7610F43_g, autoF7610F43_u)) ) {
        lv_indexNexus = UnitGroupUnit(autoF7610F43_g, autoF7610F43_u);
        libNCMI_gf_SetWorkerRallyPoint(lv_indexNexus);
    }
}

void libNCMI_gf_NM_UseUnitNameAsUnitTip (unit lp_unit) {
    // Implementation
    if (((UnitGetType(lp_unit) == "ZergDropPod") || (UnitGetType(lp_unit) == "ZergDropPodLarge") || (UnitGetType(lp_unit) == "TerranDropPod") || (UnitGetType(lp_unit) == "ZergDropPodCreep"))) {
        return ;
    }

    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libNCMI_gf_NM_ApplyCampaignTeachingToUnit (unit lp_teachUnit) {
    // Implementation
    while (!((libComC_gf_CC_CampaignTechApplied() == true))) {
        Wait(0.1, c_timeGame);
    }
}

void libNCMI_gf_NM_ShowHideCampaignTeaching (bool lp_showHide) {
    // Implementation
    if ((libNCMI_gv_nM_UpgradeUnit != null)) {
        if ((lp_showHide == true)) {
            TextTagShow(libNCMI_gv_nM_UpgradeTextTag, PlayerGroupAll(), true);
            ActorSend(libNCMI_gv_nM_UpgradeReticle, "SetVisibility 1");
        }
        else {
            TextTagShow(libNCMI_gv_nM_UpgradeTextTag, PlayerGroupAll(), false);
            ActorSend(libNCMI_gv_nM_UpgradeReticle, "SetVisibility");
        }
    }

}

void libNCMI_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_NCMI_3704A828", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_NCMI_3704A828");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_NCMI_50F2381C", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_NCMI_50F2381C");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libNCMI_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_NCMI_1C88F6E4", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_NCMI_1C88F6E4");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_NCMI_08BB63F6", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_NCMI_08BB63F6");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libNCMI_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount) {
    // Implementation
    UnitBehaviorSpawn(lp_hatchery, "SpawnLarva", lp_larvaCount);
}

void libNCMI_gf_ApplyLarvaUpgradeForPlayer (int lp_player) {
    int autoE7EF6CA0_val;

    // Implementation
    autoE7EF6CA0_val = PlayerDifficulty(lp_player);
    if (autoE7EF6CA0_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HotSCampaignLarvaCountEasy", 1);
    }
    else if (autoE7EF6CA0_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HotSCampaignLarvaCountMedium", 1);
    }
    else if (autoE7EF6CA0_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HotSCampaignLarvaCountHard", 1);
    }
    else if (autoE7EF6CA0_val == 4) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HotSCampaignLarvaCountHard", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HotSCampaignLarvaCount", 1);
    }
}

void libNCMI_gf_BurrowUnburrowZergUnitGroup (unitgroup lp_unitGroup, int lp_burrowUnburrow) {
    string autoDFCA4B63_val;
    string auto210433CB_val;

    // Implementation
    if ((lp_burrowUnburrow == libNCMI_ge_BurrowUnburrowOption_Burrow)) {
        UnitGroupLoopBegin(lp_unitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            auto210433CB_val = UnitGetType(UnitGroupLoopCurrent());
            if (auto210433CB_val == "SwarmHost") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostBurrowed", 0)), c_orderQueueReplace);
            }
            else if (auto210433CB_val == "SwarmHostSplitA") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostSplitABurrowed", 0)), c_orderQueueReplace);
            }
            else if (auto210433CB_val == "SwarmHostSplitB") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostSplitBBurrowed", 0)), c_orderQueueReplace);
            }
            else if (auto210433CB_val == "Lurker") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowLurkerDown", 0)), c_orderQueueReplace);
            }
            else if (auto210433CB_val == "Impaler") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowImpaler", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueReplace);
            }
        }
        UnitGroupLoopEnd();
    }
    else {
        UnitGroupLoopBegin(lp_unitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            autoDFCA4B63_val = UnitGetType(UnitGroupLoopCurrent());
            if (autoDFCA4B63_val == "SwarmHostBurrowed") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHost", 0)), c_orderQueueReplace);
            }
            else if (autoDFCA4B63_val == "SwarmHostSplitABurrowed") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostSplitA", 0)), c_orderQueueReplace);
            }
            else if (autoDFCA4B63_val == "SwarmHostSplitBBurrowed") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("MorphToSwarmHostSplitB", 0)), c_orderQueueReplace);
            }
            else if (autoDFCA4B63_val == "LurkerBurrowed") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
            }
            else if (autoDFCA4B63_val == "ImpalerBurrowed") {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("UnburrowImpaler", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            }
        }
        UnitGroupLoopEnd();
    }
}

void libNCMI_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_terms;

    // Variable Initialization
    lv_terms = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_terms = ("ScopeContains " + lp_doodadType);
    }

    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_terms);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libNCMI_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Implementation
    libNCMI_gf_GivePlayerResources(UnitGetPosition(lp_cacheUnit), lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
    UnitKill(lp_cacheUnit);
}

void libNCMI_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    int auto8ED25223_val;

    // Variable Declarations
    text lv_text;

    // Variable Initialization

    // Implementation
    auto8ED25223_val = lp_resourceType;
    if (auto8ED25223_val == libNCMI_ge_CacheResourceType_Mineral) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto8ED25223_val == libNCMI_ge_CacheResourceType_Vespene) {
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto8ED25223_val == libNCMI_ge_CacheResourceType_Solarite) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_NCMI_E1D6FEA3"), true);
        return ;
    }
    else {
    }
    libNCMI_gf_DisplayRewardFloatingText(lp_location, lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
}

void libNCMI_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    int auto2128925C_val;
    int autoC4309F63_val;

    // Variable Declarations
    text lv_text;

    // Variable Initialization

    // Implementation
    auto2128925C_val = lp_resourceType;
    if (auto2128925C_val == libNCMI_ge_CacheResourceType_Mineral) {
        TextExpressionSetToken("Param/Expression/lib_NCMI_FA2F2D3B", "A", StringToText(("Kicker_Minerals")));
        TextExpressionSetToken("Param/Expression/lib_NCMI_FA2F2D3B", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_NCMI_FA2F2D3B");
    }
    else if (auto2128925C_val == libNCMI_ge_CacheResourceType_Vespene) {
        TextExpressionSetToken("Param/Expression/lib_NCMI_3D845762", "A", StringToText(("Kicker_Gas")));
        TextExpressionSetToken("Param/Expression/lib_NCMI_3D845762", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_NCMI_3D845762");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_NCMI_261E2441", "A", StringToText(("Kicker_Protoss")));
        TextExpressionSetToken("Param/Expression/lib_NCMI_261E2441", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_NCMI_261E2441");
    }
    if ((lp_resourceIcon != null)) {
        TextExpressionSetToken("Param/Expression/lib_NCMI_F881F2B7", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_NCMI_F881F2B7", "B", StringToText(lp_resourceIcon));
        lv_text = TextExpressionAssemble("Param/Expression/lib_NCMI_F881F2B7");
    }
    else {
        autoC4309F63_val = lp_resourceType;
        if (autoC4309F63_val == libNCMI_ge_CacheResourceType_Mineral) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_C99B9DE4", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_NCMI_C99B9DE4");
        }
        else if (autoC4309F63_val == libNCMI_ge_CacheResourceType_Vespene) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_6CB2A27A", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_NCMI_6CB2A27A");
        }
        else {
        }
    }
    if (((lp_resourceText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_NCMI_A8624C75", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_NCMI_A8624C75", "B", lp_resourceText);
        lv_text = TextExpressionAssemble("Param/Expression/lib_NCMI_A8624C75");
    }

    SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    TextTagCreate(lv_text, 24, lp_location, 2.0, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    if ((lp_resourceType == libNCMI_ge_CacheResourceType_CustomResource)) {
    }

    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

bool libNCMI_gf_NM_StartingWorkerAutoHarvestEnabled () {
    // Implementation
    return PlayerGetState(1, c_playerStateStartingRallyEnabled);
}

void libNCMI_gf_StartingWorkersAutoHarvest (region lp_regionMineralWorker, region lp_regionGasWorker) {
    unitgroup autoA8D4E691_g;
    int autoA8D4E691_u;
    unitgroup auto7A456887_g;
    int auto7A456887_u;
    unitgroup auto219ADB5D_g;
    int auto219ADB5D_u;
    unitgroup auto85EF0FC7_g;
    int auto85EF0FC7_u;

    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_resourceGroup;
    unit lv_indexResource;
    unitgroup lv_unitGroupHarvestMinerals;
    unitgroup lv_unitGroupHarvestGas;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();
    lv_unitGroupHarvestMinerals = UnitGroupEmpty();
    lv_unitGroupHarvestGas = UnitGroupEmpty();

    // Implementation
    if ((libNCMI_gf_NM_StartingWorkerAutoHarvestEnabled() == false)) {
        return ;
    }

    if ((lp_regionMineralWorker != null)) {
        lv_unitGroupHarvestMinerals = UnitGroup(null, 1, lp_regionMineralWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }

    if ((TechTreeUpgradeCount(1, "K5AutoExtractor", c_techCountQueuedOrBetter) > 0)) {
        UnitGroupAddUnitGroup(lv_unitGroupHarvestMinerals, UnitGroup(null, 1, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        if ((lp_regionGasWorker != null)) {
            lv_unitGroupHarvestGas = UnitGroup(null, 1, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    if ((lv_unitGroupHarvestMinerals != UnitGroupEmpty())) {
        autoA8D4E691_g = lv_unitGroupHarvestMinerals;
        autoA8D4E691_u = 1;
        for ( ; autoA8D4E691_u <= UnitGroupCount(autoA8D4E691_g, c_unitCountAll) ; autoA8D4E691_u += BoolToInt(lv_indexWorker == UnitGroupUnit(autoA8D4E691_g, autoA8D4E691_u)) ) {
            lv_indexWorker = UnitGroupUnit(autoA8D4E691_g, autoA8D4E691_u);
            UnitGroupClear(lv_resourceGroup);
            auto7A456887_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7A456887_u = 1;
            for ( ; auto7A456887_u <= UnitGroupCount(auto7A456887_g, c_unitCountAll) ; auto7A456887_u += BoolToInt(lv_indexResource == UnitGroupUnit(auto7A456887_g, auto7A456887_u)) ) {
                lv_indexResource = UnitGroupUnit(auto7A456887_g, auto7A456887_u);
                if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Minerals")) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }

        }
    }

    if ((lv_unitGroupHarvestGas != UnitGroupEmpty())) {
        auto219ADB5D_g = lv_unitGroupHarvestGas;
        auto219ADB5D_u = 1;
        for ( ; auto219ADB5D_u <= UnitGroupCount(auto219ADB5D_g, c_unitCountAll) ; auto219ADB5D_u += BoolToInt(lv_indexWorker == UnitGroupUnit(auto219ADB5D_g, auto219ADB5D_u)) ) {
            lv_indexWorker = UnitGroupUnit(auto219ADB5D_g, auto219ADB5D_u);
            UnitGroupClear(lv_resourceGroup);
            auto85EF0FC7_g = UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto85EF0FC7_u = 1;
            for ( ; auto85EF0FC7_u <= UnitGroupCount(auto85EF0FC7_g, c_unitCountAll) ; auto85EF0FC7_u += BoolToInt(lv_indexResource == UnitGroupUnit(auto85EF0FC7_g, auto85EF0FC7_u)) ) {
                lv_indexResource = UnitGroupUnit(auto85EF0FC7_g, auto85EF0FC7_u);
                if (((UnitGetType(lv_indexResource) == "Refinery") || (UnitGetType(lv_indexResource) == "Extractor") || (UnitGetType(lv_indexResource) == "Assimilator"))) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
            }

        }
    }

}

text libNCMI_gf_UnitAbilityHotkeyText (string lp_unitType, string lp_abilityButton) {
    int autoCD238B57_ae;
    int autoCD238B57_ai;

    // Variable Declarations
    int lv_row;
    int lv_column;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    autoCD238B57_ae = CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons", c_playerAny);
    autoCD238B57_ai = 1;
    lv_buttonIndex = 0;
    for ( ; ( (autoCD238B57_ai >= 0 && lv_buttonIndex <= autoCD238B57_ae) || (autoCD238B57_ai <= 0 && lv_buttonIndex >= autoCD238B57_ae) ) ; lv_buttonIndex += autoCD238B57_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Face", c_playerAny) == (lp_abilityButton))) {
            lv_row = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Row", c_playerAny));
            lv_column = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "].Column", c_playerAny));
            TextExpressionSetToken("Param/Expression/lib_NCMI_7545F4E8", "UNIT", StringToText((lp_unitType)));
            TextExpressionSetToken("Param/Expression/lib_NCMI_7545F4E8", "BTN", StringToText((lp_abilityButton)));
            TextExpressionSetToken("Param/Expression/lib_NCMI_7545F4E8", "ROW", IntToText(lv_row));
            TextExpressionSetToken("Param/Expression/lib_NCMI_7545F4E8", "COL", IntToText(lv_column));
            return TextExpressionAssemble("Param/Expression/lib_NCMI_7545F4E8");
        }

    }
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        return StringExternal("Param/Value/lib_NCMI_A53A2400");
    }

    return StringToText("");
}

void libNCMI_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    int auto859F408A_val;

    // Implementation
    if ((lp_formatOrNot == libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        auto859F408A_val = lp_messageType;
        if (auto859F408A_val == libNCMI_ge_CampaignMessageType_Hint) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_64DF7A24", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_NCMI_64DF7A24"));
            SoundPlay(SoundLink("UI_TerranHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libNCMI_ge_CampaignMessageType_SimpleHint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
            SoundPlay(SoundLink("UI_TerranHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libNCMI_ge_CampaignMessageType_Secret) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_C1624255", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_NCMI_C1624255"));
            SoundPlay(SoundLink("TUISecret", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libNCMI_ge_CampaignMessageType_NewUnitAcquired) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_A49EDD0B", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_NCMI_A49EDD0B"));
            SoundPlay(SoundLink("UI_TerranNewUnitAcquired", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libNCMI_ge_CampaignMessageType_NewUnitAvailable) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_BA0BF873", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_NCMI_BA0BF873"));
            SoundPlay(SoundLink("UI_TerranNewUnitAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libNCMI_ge_CampaignMessageType_NewTechAvailable) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_39320B7C", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_NCMI_39320B7C"));
            SoundPlay(SoundLink("UI_TerranNewTechAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libNCMI_ge_CampaignMessageType_NewUnitAvailable2) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_D6A0DA61", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_NCMI_D6A0DA61"));
            SoundPlay(SoundLink("UI_TerranNewTechAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libNCMI_ge_CampaignMessageType_Warning) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_19CBF466", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_NCMI_19CBF466"));
            SoundPlay(SoundLink("UI_ZergWarning", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libNCMI_ge_CampaignMessageType_MissionFailed) {
            TextExpressionSetToken("Param/Expression/lib_NCMI_A4179B16", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_NCMI_A4179B16"));
            SoundPlay(SoundLink("UI_TerranMissionFailed", 1), lp_toPlayerGroup, 100.0, 0.0);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
    }
}

void libNCMI_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    bool autoF871CA08_val;

    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    autoF871CA08_val = lp_objectiveType;
    if (autoF871CA08_val == true) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 1.0;
        lv_model = "PingObjective";
    }
    else if (autoF871CA08_val == false) {
        lv_color = Color(100.00, 100.00, 0.00);
        lv_scale = 0.6;
        lv_model = "PingBonus";
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_model, lp_position, lv_color, 0.0, 270.0);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(libNCMI_gt_NovaPingSound, true, false);
}

trigger auto_libNCMI_gf_PingMinimapCampaign_Trigger = null;
playergroup auto_libNCMI_gf_PingMinimapCampaign_lp_players;
point auto_libNCMI_gf_PingMinimapCampaign_lp_pos;
fixed auto_libNCMI_gf_PingMinimapCampaign_lp_dur;
color auto_libNCMI_gf_PingMinimapCampaign_lp_color;

void libNCMI_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color) {
    auto_libNCMI_gf_PingMinimapCampaign_lp_players = lp_players;
    auto_libNCMI_gf_PingMinimapCampaign_lp_pos = lp_pos;
    auto_libNCMI_gf_PingMinimapCampaign_lp_dur = lp_dur;
    auto_libNCMI_gf_PingMinimapCampaign_lp_color = lp_color;

    if (auto_libNCMI_gf_PingMinimapCampaign_Trigger == null) {
        auto_libNCMI_gf_PingMinimapCampaign_Trigger = TriggerCreate("auto_libNCMI_gf_PingMinimapCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libNCMI_gf_PingMinimapCampaign_Trigger, false, false);
}

bool auto_libNCMI_gf_PingMinimapCampaign_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libNCMI_gf_PingMinimapCampaign_lp_players;
    point lp_pos = auto_libNCMI_gf_PingMinimapCampaign_lp_pos;
    fixed lp_dur = auto_libNCMI_gf_PingMinimapCampaign_lp_dur;
    color lp_color = auto_libNCMI_gf_PingMinimapCampaign_lp_color;

    string autoC47256CC_val;

    // Implementation
    PlayerGroupLoopBegin(lp_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        autoC47256CC_val = PlayerRace(PlayerGroupLoopCurrent());
        if (autoC47256CC_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    libNtve_gf_CreatePingFacingAngle(lp_players, "PingAlert", lp_pos, lp_color, lp_dur, 270.0);
    Wait(lp_dur, c_timeGame);
    PingDestroy(PingLastCreated());
    return true;
}

string libNCMI_gf_NM_ReticleModelOfStyle (int lp_type, int lp_size) {
    int autoCDEF28CD_val;
    int autoBEC58E6C_val;
    int auto993B9915_val;
    int auto1B271D82_val;

    // Variable Declarations
    string lv_model;

    // Variable Initialization

    // Implementation
    autoCDEF28CD_val = lp_size;
    if (autoCDEF28CD_val == libNCMI_ge_CampaginReticleSize_Large) {
        autoBEC58E6C_val = lp_type;
        if (autoBEC58E6C_val == libNCMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoBEC58E6C_val == libNCMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoBEC58E6C_val == libNCMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoBEC58E6C_val == libNCMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libNCMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoBEC58E6C_val == libNCMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libNCMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (autoBEC58E6C_val == libNCMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (autoBEC58E6C_val == libNCMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libNCMI_ge_CampaginReticleSize_Medium) {
        auto993B9915_val = lp_type;
        if (auto993B9915_val == libNCMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libNCMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libNCMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libNCMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libNCMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto993B9915_val == libNCMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libNCMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (auto993B9915_val == libNCMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (auto993B9915_val == libNCMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libNCMI_ge_CampaginReticleSize_Small) {
        auto1B271D82_val = lp_type;
        if (auto1B271D82_val == libNCMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libNCMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libNCMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libNCMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libNCMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1B271D82_val == libNCMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libNCMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (auto1B271D82_val == libNCMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (auto1B271D82_val == libNCMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libNCMI_gf_NM_ReticleTextFontOfStyle (int lp_type) {
    int auto4C012C4E_val;

    // Variable Declarations
    string lv_fontStyle;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto4C012C4E_val = lp_type;
    if (auto4C012C4E_val == libNCMI_ge_CampaginReticleType_ProtossBonusObjective) {
        lv_fontStyle = "NovaReticleProtossBonusObjective";
    }
    else if (auto4C012C4E_val == libNCMI_ge_CampaginReticleType_ProtossEnemy) {
        lv_fontStyle = "NovaReticleProtossEnemy";
    }
    else if (auto4C012C4E_val == libNCMI_ge_CampaginReticleType_ProtossMainObjective) {
        lv_fontStyle = "NovaReticleProtossMainObjective";
    }
    else if (auto4C012C4E_val == libNCMI_ge_CampaginReticleType_TerranBonusObjective) {
        lv_fontStyle = "NovaReticleTerranBonusObjective";
    }
    else if (auto4C012C4E_val == libNCMI_ge_CampaginReticleType_TerranEnemy) {
        lv_fontStyle = "NovaReticleTerranEnemy";
    }
    else if (auto4C012C4E_val == libNCMI_ge_CampaginReticleType_TerranMainObjective) {
        lv_fontStyle = "NovaReticleTerranMainObjective";
    }
    else if (auto4C012C4E_val == libNCMI_ge_CampaginReticleType_ZergBonusObjective) {
        lv_fontStyle = "NovaReticleZergBonusObjective";
    }
    else if (auto4C012C4E_val == libNCMI_ge_CampaginReticleType_ZergEnemy) {
        lv_fontStyle = "NovaReticleZergEnemy";
    }
    else if (auto4C012C4E_val == libNCMI_ge_CampaginReticleType_ZergMainObjective) {
        lv_fontStyle = "NovaReticleZergMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libNCMI_gf_NM_ReticleApplyTint (actor lp_reticle, int lp_type) {
    int autoF8A9C4D8_val;

    // Implementation
    autoF8A9C4D8_val = lp_type;
    if (autoF8A9C4D8_val == libNCMI_ge_CampaginReticleType_ProtossMainObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else if (autoF8A9C4D8_val == libNCMI_ge_CampaginReticleType_ProtossEnemy) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 255,0,0");
    }
    else if (autoF8A9C4D8_val == libNCMI_ge_CampaginReticleType_ProtossBonusObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else {
    }
}

void libNCMI_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libNCMI_gf_NM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    libNCMI_gf_NM_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libNCMI_gf_NM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_NCMI_C1B831B2", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_NCMI_C1B831B2", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_NCMI_C1B831B2"), 24, lp_location, 1.0, true, true, PlayerGroupSingle(1));
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libNCMI_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libNCMI_gf_NM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnitInheritVisibility(lp_target, lv_model, lp_attachPoint);
    libNCMI_gf_NM_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libNCMI_gf_NM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_NCMI_242FDFAD", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_NCMI_242FDFAD", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_NCMI_242FDFAD"), 24, UnitGetPosition(lp_target), 0.0, true, true, PlayerGroupSingle(1));
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 1.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libNCMI_gf_NM_VoidCampaignMissionInit () {
    unitgroup auto0BA529BF_g;
    int auto0BA529BF_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Implementation
    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindMission) == true)) {
        UISetGameMenuItemVisible(PlayerGroupSingle(1), c_gameMenuDialogRestartDifficultyPulldown, true);
    }

    auto0BA529BF_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0BA529BF_u = 1;
    for ( ; auto0BA529BF_u <= UnitGroupCount(auto0BA529BF_g, c_unitCountAll) ; auto0BA529BF_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto0BA529BF_g, auto0BA529BF_u)) ) {
        lv_indexUnit = UnitGroupUnit(auto0BA529BF_g, auto0BA529BF_u);
        if ((UnitGetType(lv_indexUnit) != "Nexus")) {
            UnitSetPropertyFixed(lv_indexUnit, c_unitPropEnergyPercent, 100.0);
        }

    }
    TriggerExecute(libNCMI_gt_NM_CampaignUnit, true, false);
    TriggerExecute(libNCUI_gt_NS_ArmyButtonMissionInit, true, false);
    if ((libLotv_gf_DifficultyValueInt2(1, 0, 0, 0) == 1)) {
        TechTreeUpgradeAddLevel(1, "VoidCasualRallyBlock", 1);
    }

}

void libNCMI_gf_InitializeNovaMission (string lp_mission) {
    // Implementation
    libNovC_gf_NC_Initialize(lp_mission);
    libCMMI_gf_CM_Initialize();
    libNCMI_gf_NM_VoidCampaignMissionInit();
    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindStory) == true)) {
        return ;
    }

    libNCUI_gf_NU_ObjectivePanelInit();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Stealth AI - Run Stealth AI Defend Regions
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_StealthAIRunStealthAIDefendRegions_Func (bool testConds, bool runActions) {
    int autoA3F690D2_ae;
    int autoA3F690D2_ai;

    // Variable Declarations
    int lv_defendRegionIter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libNCMI_gf_GameIsOver() == false)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            autoA3F690D2_ae = libNCMI_gv_nM_StealthAIDefendRegionCount;
            autoA3F690D2_ai = 1;
            lv_defendRegionIter = 1;
            for ( ; ( (autoA3F690D2_ai >= 0 && lv_defendRegionIter <= autoA3F690D2_ae) || (autoA3F690D2_ai <= 0 && lv_defendRegionIter >= autoA3F690D2_ae) ) ; lv_defendRegionIter += autoA3F690D2_ai ) {
                if ((libNCMI_gv_nM_StealthAIDefendRegionArray[lv_defendRegionIter].lv_aIState == libNCMI_ge_StealthAIDefendRegionState_Active)) {
                    libNCMI_gf_StealthAIStealthAIDefendRegion(lv_defendRegionIter);
                }

            }
        }

        Wait(0.0625, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_StealthAIRunStealthAIDefendRegions_Init () {
    libNCMI_gt_StealthAIRunStealthAIDefendRegions = TriggerCreate("libNCMI_gt_StealthAIRunStealthAIDefendRegions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_CinematicModeOn
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_CinematicModeOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
        libNCMI_gv_nM_ScreenMode = c_uiModeLetterboxed;
    }

    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerScoreValueEnableAll(PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "CinematicMode", 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_CinematicModeOn_Init () {
    libNCMI_gt_NM_CinematicModeOn = TriggerCreate("libNCMI_gt_NM_CinematicModeOn_Func");
    TriggerAddEventGeneric(libNCMI_gt_NM_CinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_CinematicModeOff
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_CinematicModeOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(1) == false)) {
        if ((UIFrameVisible(1, c_syncFrameTypeConsolePanel) == true)) {
            libNCMI_gv_nM_ScreenMode = c_uiModeConsole;
        }
        else {
            libNCMI_gv_nM_ScreenMode = c_uiModeFullscreen;
        }
    }
    else {
        libNCMI_gv_nM_ScreenMode = c_uiModeLetterboxed;
    }
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerScoreValueEnableAll(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "CinematicMode", 0);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_CinematicModeOff_Init () {
    libNCMI_gt_NM_CinematicModeOff = TriggerCreate("libNCMI_gt_NM_CinematicModeOff_Func");
    TriggerAddEventGeneric(libNCMI_gt_NM_CinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_CreditsCutsceneDetectEnd
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_CreditsCutsceneDetectEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNCMI_gf_NM_CreditsCutsceneCreditsFinished() == true) && (UIFrameVisible(1, c_syncFrameTypeCreditsPanel) == true))) {
        Wait(0.1, c_timeGame);
    }
    CutsceneFade(false, 1.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    CutsceneStop(libNCMI_gv_nM_CreditsCutscene);
    ConversationDataStop();
    TransmissionClearAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_CreditsCutsceneDetectEnd_Init () {
    libNCMI_gt_NM_CreditsCutsceneDetectEnd = TriggerCreate("libNCMI_gt_NM_CreditsCutsceneDetectEnd_Func");
    TriggerEnable(libNCMI_gt_NM_CreditsCutsceneDetectEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreditsCutscene - MP03_040 - OGV Screen Create
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("SMX3_Cutscene_MP01_30_NewsTV", libNtve_gf_PointFromXYZ(64.0, 68.046, 4.6144));
    libNCMI_gv_nM_CreditsCutsceneNewsScreen = libNtve_gf_ActorLastCreated();
    ActorSend(libNCMI_gv_nM_CreditsCutsceneNewsScreen, "AliasAdd FunTest");
    ActorSend(libNCMI_gv_nM_CreditsCutsceneNewsScreen, "ExternalFinderAdd");
    ActorSend(ActorFrom("::external.Nova03_040"), "Attach ::external.FunTest {Origin 0} SOpAttachOrigin");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate_Init () {
    libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate = TriggerCreate("libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate_Func");
    TriggerEnable(libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate, false);
    TriggerAddEventCutsceneBookmarkFired(libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate, c_cutsceneNone, "Nova03_040ScreenCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreditsCutscene - MP03_040 - Play OGV Movie
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFrom("::external.Nova03_040"), "Attach ::external.FunTest {Origin 0} SOpAttachOrigin");
    ActorSend(libNCMI_gv_nM_CreditsCutsceneNewsScreen, libNtve_gf_ActorMsg1("TextureSelectById", ("video_newsreport_smx3_mp03_040")));
    ActorSend(libNCMI_gv_nM_CreditsCutsceneNewsScreen, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryTV, "Reverb_NovaMP03_ValeriansChamber");
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie_Init () {
    libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie = TriggerCreate("libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie_Func");
    TriggerEnable(libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie, false);
    TriggerAddEventCutsceneBookmarkFired(libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie, c_cutsceneNone, "Nova03_040Start");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreditsCutscene - MP03_040 - Stop Movie
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_CreditsCutsceneMP03_040StopMovie_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryTV, true);
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryTV, "Reverb_NovaMP03_ValeriansChamber");
    ActorSend(libNCMI_gv_nM_CreditsCutsceneNewsScreen, libNtve_gf_TextureVideoStopAll());
    libNtve_gf_KillModel(libNCMI_gv_nM_CreditsCutsceneNewsScreen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_CreditsCutsceneMP03_040StopMovie_Init () {
    libNCMI_gt_CreditsCutsceneMP03_040StopMovie = TriggerCreate("libNCMI_gt_CreditsCutsceneMP03_040StopMovie_Func");
    TriggerEnable(libNCMI_gt_CreditsCutsceneMP03_040StopMovie, false);
    TriggerAddEventCutsceneBookmarkFired(libNCMI_gt_CreditsCutsceneMP03_040StopMovie, c_cutsceneNone, "Nova03_040End");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Psi Strike
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NovaPsiStrike_Func (bool testConds, bool runActions) {
    int auto1200A504_ae;
    int auto1200A504_ai;

    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    auto1200A504_ae = 7;
    auto1200A504_ai = 1;
    lv_i = 1;
    for ( ; ( (auto1200A504_ai >= 0 && lv_i <= auto1200A504_ae) || (auto1200A504_ai <= 0 && lv_i >= auto1200A504_ae) ) ; lv_i += auto1200A504_ai ) {
        libNCMI_gv_kerriganPsiStrikeFacing = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libNCMI_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)) && (libNCMI_gv_kerriganPsiStrikeFacing > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libNCMI_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) && (libNCMI_gv_kerriganPsiStrikeFacing < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libNCMI_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) || (libNCMI_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NovaPsiStrike_Init () {
    libNCMI_gt_NovaPsiStrike = TriggerCreate("libNCMI_gt_NovaPsiStrike_Func");
    TriggerAddEventUnitAbility(libNCMI_gt_NovaPsiStrike, null, AbilityCommand("NovaPsiStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fury of One Height
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_FuryofOneHeight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nova;
    unit lv_target;

    // Variable Initialization
    lv_nova = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_nova, UnitGetHeight(lv_target), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_FuryofOneHeight_Init () {
    libNCMI_gt_FuryofOneHeight = TriggerCreate("libNCMI_gt_FuryofOneHeight_Func");
    TriggerAddEventPlayerEffectUsed(libNCMI_gt_FuryofOneHeight, c_playerAny, "NovaWeaponBlazefireBladeShadowFuryImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fury of One Reset
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_FuryofOneReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nova;

    // Variable Initialization
    lv_nova = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_nova, 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_FuryofOneReset_Init () {
    libNCMI_gt_FuryofOneReset = TriggerCreate("libNCMI_gt_FuryofOneReset_Func");
    TriggerAddEventUnitBehaviorChange(libNCMI_gt_FuryofOneReset, null, "NovaWeaponBlazefireBladeShadowFuryController", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaNukeTimerGhostAcademyNukeBuild
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NovaNukeTimerGhostAcademyNukeBuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "HeroNuke"))) {
            return false;
        }

        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNCMI_gv_nM_NovaNukesUnitGroup, EventUnit());
    libNCMI_gf_NovaNukeTimerUpdate(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NovaNukeTimerGhostAcademyNukeBuild_Init () {
    libNCMI_gt_NovaNukeTimerGhostAcademyNukeBuild = TriggerCreate("libNCMI_gt_NovaNukeTimerGhostAcademyNukeBuild_Func");
    TriggerAddEventUnitArmMagazineProgress(libNCMI_gt_NovaNukeTimerGhostAcademyNukeBuild, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaNukeTimerGhostAcademyNukeCancel
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NovaNukeTimerGhostAcademyNukeCancel_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "HeroNuke"))) {
            return false;
        }

        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libNCMI_gv_nM_NovaNukesUnitGroup, EventUnit());
    libNCMI_gf_NovaNukeTimerUpdate(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NovaNukeTimerGhostAcademyNukeCancel_Init () {
    libNCMI_gt_NovaNukeTimerGhostAcademyNukeCancel = TriggerCreate("libNCMI_gt_NovaNukeTimerGhostAcademyNukeCancel_Func");
    TriggerAddEventUnitArmMagazineProgress(libNCMI_gt_NovaNukeTimerGhostAcademyNukeCancel, null, c_unitProgressStageCancel);
    TriggerAddEventUnitArmMagazineProgress(libNCMI_gt_NovaNukeTimerGhostAcademyNukeCancel, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaNukeTimerGhostAcademyNukeFired
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NovaNukeTimerGhostAcademyNukeFired_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libNCMI_gf_NovaNukeTimerUpdate(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NovaNukeTimerGhostAcademyNukeFired_Init () {
    libNCMI_gt_NovaNukeTimerGhostAcademyNukeFired = TriggerCreate("libNCMI_gt_NovaNukeTimerGhostAcademyNukeFired_Func");
    TriggerAddEventPlayerEffectUsed(libNCMI_gt_NovaNukeTimerGhostAcademyNukeFired, c_playerAny, "HeroNukeSuicide");
    TriggerAddEventPlayerEffectUsed(libNCMI_gt_NovaNukeTimerGhostAcademyNukeFired, c_playerAny, "KerriganReviveHealA");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Build
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_CreepTumorBuild_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CreepTumorExhausted", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_CreepTumorBuild_Init () {
    libNCMI_gt_CreepTumorBuild = TriggerCreate("libNCMI_gt_CreepTumorBuild_Func");
    TriggerAddEventUnitAbility(libNCMI_gt_CreepTumorBuild, null, AbilityCommand("CreepTumorBuild", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XanthosFighterLaunch
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_XanthosFighterLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bay;
    unit lv_fighter;

    // Variable Initialization
    lv_bay = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_fighter = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(lv_fighter, UnitGetPosition(lv_bay), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_XanthosFighterLaunch_Init () {
    libNCMI_gt_XanthosFighterLaunch = TriggerCreate("libNCMI_gt_XanthosFighterLaunch_Func");
    TriggerAddEventPlayerEffectUsed(libNCMI_gt_XanthosFighterLaunch, c_playerAny, "NovaXThosFighterHeightStartSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XanthosHighlightOff
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_XanthosHighlightOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateHighlightable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_XanthosHighlightOff_Init () {
    libNCMI_gt_XanthosHighlightOff = TriggerCreate("libNCMI_gt_XanthosHighlightOff_Func");
    TriggerAddEventUnitBehaviorChange(libNCMI_gt_XanthosHighlightOff, null, "XanthosTurretInactive", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XanthosHighlightOn
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_XanthosHighlightOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateHighlightable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_XanthosHighlightOn_Init () {
    libNCMI_gt_XanthosHighlightOn = TriggerCreate("libNCMI_gt_XanthosHighlightOn_Func");
    TriggerAddEventUnitBehaviorChange(libNCMI_gt_XanthosHighlightOn, null, "XanthosTurretInactive", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flee
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_Flee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_t;

    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_c) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_t) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_t, libNCMI_gv_scientistsFleeDamageDummy, lv_c);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_Flee_Init () {
    libNCMI_gt_Flee = TriggerCreate("libNCMI_gt_Flee_Func");
    TriggerAddEventPlayerEffectUsed(libNCMI_gt_Flee, c_playerAny, libNCMI_gv_scientistsFleeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_GameCheat_CreateDialog
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_GameCheat_CreateDialog_Func (bool testConds, bool runActions) {
    int auto7CE5AB5F_val;
    int auto30B906DD_val;

    // Variable Declarations
    text lv_label;
    text lv_tooltip;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(libNCMI_gv_NM_GameCheat_DialogWidth, libNCMI_gv_NM_GameCheat_DialogHeight, c_anchorTopRight, 0, 50, true);
    libNCMI_gv_NM_GameCheat_Dialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/lib_NCMI_392837B9"));
    libNtve_gf_CreateDialogItemButton(libNCMI_gv_NM_GameCheat_Dialog, 40, 40, c_anchorTopRight, 0, 0, StringExternal("Param/Value/lib_NCMI_21C58550"), StringExternal("Param/Value/lib_NCMI_E5CED145"), "");
    libNCMI_gv_NM_GameCheat_Minimize = DialogControlLastCreated();
    IntLoopBegin(0, 25);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if (((IntLoopCurrent() == (c_gameCheatCooldown)) || (IntLoopCurrent() == (c_gameCheatFastBuild)) || (IntLoopCurrent() == (c_gameCheatGod)) || (IntLoopCurrent() == (c_gameCheatShowmap)))) {
            libNCMI_gv_NM_GameCheat_ArrayIndex += 1;
            libNtve_gf_CreateDialogItemCheckBox(libNCMI_gv_NM_GameCheat_Dialog, 25, 25, c_anchorTopLeft, 50, ((libNCMI_gv_NM_GameCheat_ArrayIndex * 50) + 50), StringExternal("Param/Value/lib_NCMI_2974025E"), false);
            libNCMI_gv_NM_GameCheat_CheckBox[IntLoopCurrent()] = DialogControlLastCreated();
            if ((libNCMI_gv_NM_GameCheat_CheatState[IntLoopCurrent()] == true)) {
                libNtve_gf_SetDialogItemChecked(libNCMI_gv_NM_GameCheat_CheckBox[IntLoopCurrent()], true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemChecked(libNCMI_gv_NM_GameCheat_CheckBox[IntLoopCurrent()], false, PlayerGroupAll());
            }
            auto7CE5AB5F_val = IntLoopCurrent();
            if (auto7CE5AB5F_val == (c_gameCheatCooldown)) {
                lv_label = StringExternal("Param/Value/lib_NCMI_DCE0A764");
            }
            else if (auto7CE5AB5F_val == (c_gameCheatFastBuild)) {
                lv_label = StringExternal("Param/Value/lib_NCMI_3DD7FD94");
            }
            else if (auto7CE5AB5F_val == (c_gameCheatGod)) {
                lv_label = StringExternal("Param/Value/lib_NCMI_C010EED9");
            }
            else if (auto7CE5AB5F_val == (c_gameCheatShowmap)) {
                lv_label = StringExternal("Param/Value/lib_NCMI_81D737B5");
            }
            else {
            }
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_label, PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(libNCMI_gv_NM_GameCheat_Dialog, 200, 25, c_anchorTopLeft, 80, ((libNCMI_gv_NM_GameCheat_ArrayIndex * 50) + 55), lv_label, Color(100,100,100), false, 2.0);
        }

    }
    IntLoopEnd();
    IntLoopBegin(0, 25);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if (((IntLoopCurrent() == (c_gameCheatGimme)) || (IntLoopCurrent() == (c_gameCheatTechTree)))) {
            libNCMI_gv_NM_GameCheat_ArrayIndex += 1;
            auto30B906DD_val = IntLoopCurrent();
            if (auto30B906DD_val == (c_gameCheatGimme)) {
                lv_label = StringExternal("Param/Value/lib_NCMI_41DADEA5");
                lv_tooltip = StringExternal("Param/Value/lib_NCMI_46DF5396");
            }
            else if (auto30B906DD_val == (c_gameCheatTechTree)) {
                lv_label = StringExternal("Param/Value/lib_NCMI_3437D367");
                lv_tooltip = StringExternal("Param/Value/lib_NCMI_E7FED887");
            }
            else {
            }
            libNtve_gf_CreateDialogItemButton(libNCMI_gv_NM_GameCheat_Dialog, 200, 50, c_anchorTopLeft, 50, ((libNCMI_gv_NM_GameCheat_ArrayIndex * 50) + 50), lv_tooltip, lv_label, "");
            libNCMI_gv_NM_GameCheat_CheckBox[IntLoopCurrent()] = DialogControlLastCreated();
        }

    }
    IntLoopEnd();
    libNCMI_gv_NM_GameCheat_ArrayIndex += 1;
    libNtve_gf_CreateDialogItemButton(libNCMI_gv_NM_GameCheat_Dialog, 200, 50, c_anchorTopLeft, 50, ((libNCMI_gv_NM_GameCheat_ArrayIndex * 50) + 50), StringExternal("Param/Value/lib_NCMI_CBE06FD6"), StringExternal("Param/Value/lib_NCMI_52B3321E"), "");
    libNCMI_gv_NM_GameCheat_OpenMissionCheat = DialogControlLastCreated();
    if ((DialogGetHeight(libNCMI_gv_NM_GameCheat_Dialog) < ((libNCMI_gv_NM_GameCheat_ArrayIndex * 50) + 150))) {
        libNCMI_gv_NM_GameCheat_DialogHeight = ((libNCMI_gv_NM_GameCheat_ArrayIndex * 50) + 150);
        DialogSetSize(libNCMI_gv_NM_GameCheat_Dialog, libNCMI_gv_NM_GameCheat_DialogWidth, libNCMI_gv_NM_GameCheat_DialogHeight);
    }

    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerEnable(libNCMI_gt_NS_GameCheat_CheckboxUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_GameCheat_CreateDialog_Init () {
    libNCMI_gt_NM_GameCheat_CreateDialog = TriggerCreate("libNCMI_gt_NM_GameCheat_CreateDialog_Func");
    TriggerAddEventChatMessage(libNCMI_gt_NM_GameCheat_CreateDialog, c_playerAny, "cheats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_GameCheat_CheckboxUsed
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NS_GameCheat_CheckboxUsed_Func (bool testConds, bool runActions) {
    int autoF189DDA6_val;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }

        if (!((DialogControlGetDialog(EventDialogControl()) == libNCMI_gv_NM_GameCheat_Dialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCMI_gv_NM_GameCheat_Minimize == EventDialogControl())) {
        if ((libNCMI_gv_NM_GameCheat_Minimized == false)) {
            DialogSetSize(libNCMI_gv_NM_GameCheat_Dialog, 50, 50);
            libNtve_gf_SetDialogItemText(libNCMI_gv_NM_GameCheat_Minimize, StringExternal("Param/Value/lib_NCMI_507ED1DB"), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(libNCMI_gv_NM_GameCheat_Minimize, StringExternal("Param/Value/lib_NCMI_4966D256"), PlayerGroupAll());
        }
        else {
            DialogSetSize(libNCMI_gv_NM_GameCheat_Dialog, libNCMI_gv_NM_GameCheat_DialogWidth, libNCMI_gv_NM_GameCheat_DialogHeight);
            libNtve_gf_SetDialogItemText(libNCMI_gv_NM_GameCheat_Minimize, StringExternal("Param/Value/lib_NCMI_B98D5E73"), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(libNCMI_gv_NM_GameCheat_Minimize, StringExternal("Param/Value/lib_NCMI_90FAD008"), PlayerGroupAll());
        }
        libNCMI_gv_NM_GameCheat_Minimized = !(libNCMI_gv_NM_GameCheat_Minimized);
        return true;
    }

    if ((libNCMI_gv_NM_GameCheat_OpenMissionCheat == EventDialogControl())) {
        if ((libNCMI_gv_NM_MissionCheat_Dialog == c_invalidDialogId)) {
            TriggerExecute(libNCMI_gt_NM_MissionCheat_CreateDialog, true, false);
        }

        return true;
    }

    IntLoopBegin(0, 25);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((libNCMI_gv_NM_GameCheat_CheckBox[IntLoopCurrent()] == EventDialogControl())) {
            autoF189DDA6_val = IntLoopCurrent();
            if (autoF189DDA6_val == (c_gameCheatCooldown)) {
                ConsoleCommand("cd", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatFastBuild)) {
                ConsoleCommand("fb", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatGod)) {
                ConsoleCommand("god 1", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatShowmap)) {
                ConsoleCommand("sm", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatGimme)) {
                ConsoleCommand("gimme", true, true);
            }
            else if (autoF189DDA6_val == (c_gameCheatTechTree)) {
                ConsoleCommand("tt", true, true);
                DialogControlSetEnabled(libNCMI_gv_NM_GameCheat_CheckBox[IntLoopCurrent()], PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemTooltip(libNCMI_gv_NM_GameCheat_CheckBox[IntLoopCurrent()], StringExternal("Param/Value/lib_NCMI_CDEC4192"), PlayerGroupAll());
            }
            else {
            }
            break;
        }

    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NS_GameCheat_CheckboxUsed_Init () {
    libNCMI_gt_NS_GameCheat_CheckboxUsed = TriggerCreate("libNCMI_gt_NS_GameCheat_CheckboxUsed_Func");
    TriggerEnable(libNCMI_gt_NS_GameCheat_CheckboxUsed, false);
    TriggerAddEventDialogControl(libNCMI_gt_NS_GameCheat_CheckboxUsed, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libNCMI_gt_NS_GameCheat_CheckboxUsed, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_GameCheat_CheatUsed
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NS_GameCheat_CheatUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(0, 25);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((IntLoopCurrent() == (EventCheatUsed()))) {
            TriggerEnable(libNCMI_gt_NS_GameCheat_CheckboxUsed, false);
            libNCMI_gv_NM_GameCheat_CheatState[IntLoopCurrent()] = !(libNCMI_gv_NM_GameCheat_CheatState[IntLoopCurrent()]);
            if ((libNCMI_gv_NM_GameCheat_Dialog != c_invalidDialogId) && (DialogIsVisible(libNCMI_gv_NM_GameCheat_Dialog, 1) == true)) {
                if ((libNCMI_gv_NM_GameCheat_CheatState[IntLoopCurrent()] == true)) {
                    libNtve_gf_SetDialogItemChecked(libNCMI_gv_NM_GameCheat_CheckBox[IntLoopCurrent()], true, PlayerGroupSingle(1));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libNCMI_gv_NM_GameCheat_CheckBox[IntLoopCurrent()], false, PlayerGroupSingle(1));
                }
            }

            Wait(0.1, c_timeGame);
            TriggerEnable(libNCMI_gt_NS_GameCheat_CheckboxUsed, true);
            return true;
        }

    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NS_GameCheat_CheatUsed_Init () {
    libNCMI_gt_NS_GameCheat_CheatUsed = TriggerCreate("libNCMI_gt_NS_GameCheat_CheatUsed_Func");
    TriggerAddEventCheatUsed(libNCMI_gt_NS_GameCheat_CheatUsed, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_MissionCheat_CreateDialog
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_MissionCheat_CreateDialog_Func (bool testConds, bool runActions) {
    int auto487E3D4B_ae;
    int auto487E3D4B_ai;
    int auto4960B2E2_ae;
    int auto4960B2E2_ai;
    int auto29FEF9E8_ae;
    int auto29FEF9E8_ai;

    // Variable Declarations
    int lv_buttonWidth;
    int lv_buttonHeight;
    string lv_boarderImage;
    string lv_buttonImage;
    string lv_buttonImageHover;
    string lv_buttonTextStyle;
    string lv_editBoxTextStyle;
    string lv_closeButtonTextStyle;
    int lv_RelativeAnchor;
    int lv_RelativeAnchor2;
    int lv_panelCount;
    int[libNCMI_gv_NMC_MissionCheat_PanelCountMAX + 1] lv_itemsInPanel;
    int lv_cheatUIHeight;
    int lv_panelIndex;
    int lv_cheatIndex;

    // Variable Initialization
    lv_buttonWidth = 200;
    lv_buttonHeight = 40;
    lv_boarderImage = "Assets\\Textures\\ui_ingame_subpanel2.dds";
    lv_buttonImage = "Assets\\Textures\\ui_button_generic_normaloverpressedover_protoss.dds";
    lv_buttonImageHover = "Assets\\Textures\\ui_battlenet_settings_dropdownbutton_normaloverpressedover.dds";
    lv_buttonTextStyle = "ModCenterSize16";
    lv_editBoxTextStyle = "ModLeftSize12";
    lv_closeButtonTextStyle = "ModCenterSize16Bold";
    lv_RelativeAnchor = c_anchorTopLeft;
    lv_RelativeAnchor2 = c_anchorTopLeft;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_NM_MissionCheat_ButtonTextInit();
    while (!((libNCMI_gf_GameIsOver() == false) && (libNtve_gf_PlayerInCinematicMode(1) == false))) {
        Wait(0.2, c_timeGame);
    }
    DialogCreate(20, 20, c_anchorTopRight, 5, 60, true);
    libNCMI_gv_NM_MissionCheat_Dialog = DialogLastCreated();
    DialogSetImage(libNCMI_gv_NM_MissionCheat_Dialog, lv_boarderImage);
    auto487E3D4B_ae = ((libNCMI_ge_MissionCheatType_User02) - 1);
    auto487E3D4B_ai = 1;
    lv_panelIndex = 1;
    for ( ; ( (auto487E3D4B_ai >= 0 && lv_panelIndex <= auto487E3D4B_ae) || (auto487E3D4B_ai <= 0 && lv_panelIndex >= auto487E3D4B_ae) ) ; lv_panelIndex += auto487E3D4B_ai ) {
        if ((libNCMI_gv_NM_MissionCheat_CategoryUsed[lv_panelIndex] == true)) {
            DialogControlCreate(libNCMI_gv_NM_MissionCheat_Dialog, c_triggerControlTypePanel);
            libNCMI_gv_NM_MissionCheat_Panel[lv_panelIndex] = DialogControlLastCreated();
            lv_panelCount += 1;
        }

    }
    auto4960B2E2_ae = libNCMI_gv_NM_MissionCheat_ArrayCount;
    auto4960B2E2_ai = 1;
    lv_cheatIndex = 1;
    for ( ; ( (auto4960B2E2_ai >= 0 && lv_cheatIndex <= auto4960B2E2_ae) || (auto4960B2E2_ai <= 0 && lv_cheatIndex >= auto4960B2E2_ae) ) ; lv_cheatIndex += auto4960B2E2_ai ) {
        lv_itemsInPanel[(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)] += 1;
        DialogControlCreateInPanel(libNCMI_gv_NM_MissionCheat_Panel[(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)], c_triggerControlTypeButton);
        libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_buttonDialog = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_titleText, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_buttonTextStyle, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_description, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonWidth, lv_buttonHeight);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), lv_RelativeAnchor2, libNCMI_gv_NM_MissionCheat_Panel[(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)], lv_RelativeAnchor, 0, (( (lv_itemsInPanel[(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)] - 1) * lv_buttonHeight ) + 2));
        if ((libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_uIType == libNCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
            DialogControlCreateInPanel(libNCMI_gv_NM_MissionCheat_Panel[(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_cheatType)], c_triggerControlTypeEditBox);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_editBoxTextStyle, PlayerGroupAll());
            libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
            libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_editBoxDialog = DialogControlLastCreated();
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), ((lv_buttonWidth * 1) / 3), lv_buttonHeight);
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_buttonDialog, c_anchorTopRight, 0, 0);
            DialogControlSetSize(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_buttonDialog, PlayerGroupAll(), ((lv_buttonWidth * 2) / 3), lv_buttonHeight);
            libNtve_gf_SetDialogItemEditorValue(libNCMI_gv_NM_MissionCheat_Cheats[lv_cheatIndex].lv_editBoxDialog, "0", PlayerGroupAll());
        }

    }
    DialogControlSetPosition(libNCMI_gv_NM_MissionCheat_Panel[(libNCMI_ge_MissionCheatType_Stage)], PlayerGroupAll(), c_anchorTopLeft, 3, 3);
    DialogControlSetSize(libNCMI_gv_NM_MissionCheat_Panel[(libNCMI_ge_MissionCheatType_Stage)], PlayerGroupAll(), (lv_buttonWidth + 6), (( lv_itemsInPanel[(libNCMI_ge_MissionCheatType_Stage)] * lv_buttonHeight ) + 20));
    auto29FEF9E8_ae = libNCMI_gv_NMC_MissionCheat_PanelCountMAX;
    auto29FEF9E8_ai = 1;
    lv_panelIndex = 1;
    for ( ; ( (auto29FEF9E8_ai >= 0 && lv_panelIndex <= auto29FEF9E8_ae) || (auto29FEF9E8_ai <= 0 && lv_panelIndex >= auto29FEF9E8_ae) ) ; lv_panelIndex += auto29FEF9E8_ai ) {
        if ((lv_panelIndex > 1) && (libNCMI_gv_NM_MissionCheat_Panel[lv_panelIndex] != c_invalidDialogControlId)) {
            DialogControlSetPositionRelative(libNCMI_gv_NM_MissionCheat_Panel[lv_panelIndex], PlayerGroupAll(), c_anchorTopLeft, libNCMI_gv_NM_MissionCheat_Panel[(lv_panelIndex - 1)], c_anchorBottomLeft, 0, 0);
            DialogControlSetSize(libNCMI_gv_NM_MissionCheat_Panel[lv_panelIndex], PlayerGroupAll(), (lv_buttonWidth + 6), (( lv_itemsInPanel[lv_panelIndex] * lv_buttonHeight ) + 20));
        }

        if ((libNCMI_gv_NM_MissionCheat_Panel[lv_panelIndex] != c_invalidDialogControlId) && (DialogGetWidth(libNCMI_gv_NM_MissionCheat_Dialog) < DialogControlGetWidth(libNCMI_gv_NM_MissionCheat_Panel[lv_panelIndex], 1))) {
            DialogSetSize(libNCMI_gv_NM_MissionCheat_Dialog, (DialogControlGetWidth(libNCMI_gv_NM_MissionCheat_Panel[lv_panelIndex], 1) + 0), DialogGetHeight(libNCMI_gv_NM_MissionCheat_Dialog));
        }

        if ((libNCMI_gv_NM_MissionCheat_Panel[lv_panelIndex] != c_invalidDialogControlId)) {
            lv_cheatUIHeight += DialogControlGetHeight(libNCMI_gv_NM_MissionCheat_Panel[lv_panelIndex], 1);
        }

    }
    DialogSetSize(libNCMI_gv_NM_MissionCheat_Dialog, DialogGetWidth(libNCMI_gv_NM_MissionCheat_Dialog), (lv_cheatUIHeight + 75));
    libNtve_gf_CreateDialogItemButton(libNCMI_gv_NM_MissionCheat_Dialog, (( lv_buttonWidth * 3 ) / 4), lv_buttonHeight, c_anchorBottomRight, 3, 3, StringToText(""), StringExternal("Param/Value/lib_NCMI_619B3399"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_closeButtonTextStyle, PlayerGroupAll());
    libNCMI_gv_NM_MissionCheat_CloseButton = DialogControlLastCreated();
    libNCMI_gf_NM_MissionCheat_UpdateButtonEnabled();
    DialogSetVisible(libNCMI_gv_NM_MissionCheat_Dialog, PlayerGroupAll(), true);
    while (!((libNCMI_gv_NM_MissionCheat_CloseButtonClicked == true))) {
        Wait(0.1, c_timeReal);
    }
    DialogDestroy(libNCMI_gv_NM_MissionCheat_Dialog);
    libNCMI_gv_NM_MissionCheat_Dialog = c_invalidDialogId;
    libNCMI_gv_NM_MissionCheat_CloseButtonClicked = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_MissionCheat_CreateDialog_Init () {
    libNCMI_gt_NM_MissionCheat_CreateDialog = TriggerCreate("libNCMI_gt_NM_MissionCheat_CreateDialog_Func");
    TriggerAddEventChatMessage(libNCMI_gt_NM_MissionCheat_CreateDialog, c_playerAny, "mcheats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_MissionCheat_ButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_MissionCheat_ButtonClicked_Func (bool testConds, bool runActions) {
    int auto69405232_ae;
    int auto69405232_ai;

    // Variable Declarations
    int lv_dialogIndex;
    string lv_editBoxValue;

    // Variable Initialization
    lv_editBoxValue = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gv_NM_MissionCheat_Dialog != c_invalidDialogId))) {
            return false;
        }

        if (!((DialogControlGetDialog(EventDialogControl()) == libNCMI_gv_NM_MissionCheat_Dialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto69405232_ae = libNCMI_gv_NM_MissionCheat_ArrayCount;
    auto69405232_ai = 1;
    lv_dialogIndex = 1;
    for ( ; ( (auto69405232_ai >= 0 && lv_dialogIndex <= auto69405232_ae) || (auto69405232_ai <= 0 && lv_dialogIndex >= auto69405232_ae) ) ; lv_dialogIndex += auto69405232_ai ) {
        if ((EventDialogControl() == libNCMI_gv_NM_MissionCheat_Cheats[lv_dialogIndex].lv_buttonDialog)) {
            if ((libNCMI_gv_NM_MissionCheat_Cheats[lv_dialogIndex].lv_uIType == libNCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
                lv_editBoxValue = libNtve_gf_DialogItemEditValue(libNCMI_gv_NM_MissionCheat_Cheats[lv_dialogIndex].lv_editBoxDialog, 1);
                if ((lv_editBoxValue != "")) {
                    DataTableSetString(true, ("NS_" + TriggerGetFunction(libNCMI_gv_NM_MissionCheat_Cheats[lv_dialogIndex].lv_trigger)), lv_editBoxValue);
                }

            }

            TriggerExecute(libNCMI_gv_NM_MissionCheat_Cheats[lv_dialogIndex].lv_trigger, true, false);
            libNCMI_gf_NM_MissionCheat_UpdateButtonEnabled();
            return true;
        }

    }
    if ((EventDialogControl() == libNCMI_gv_NM_MissionCheat_CloseButton)) {
        libNCMI_gv_NM_MissionCheat_CloseButtonClicked = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_MissionCheat_ButtonClicked_Init () {
    libNCMI_gt_NM_MissionCheat_ButtonClicked = TriggerCreate("libNCMI_gt_NM_MissionCheat_ButtonClicked_Func");
    TriggerAddEventDialogControl(libNCMI_gt_NM_MissionCheat_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_MissionCheat_CheatEntered
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_MissionCheat_CheatEntered_Func (bool testConds, bool runActions) {
    int autoB629ABE7_ae;
    int autoB629ABE7_ai;

    // Variable Declarations
    int lv_iter;
    string lv_cheatParameter;

    // Variable Initialization
    lv_cheatParameter = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB629ABE7_ae = libNCMI_gv_NMC_MissionCheat_MaxCheats;
    autoB629ABE7_ai = 1;
    lv_iter = 1;
    for ( ; ( (autoB629ABE7_ai >= 0 && lv_iter <= autoB629ABE7_ae) || (autoB629ABE7_ai <= 0 && lv_iter >= autoB629ABE7_ae) ) ; lv_iter += autoB629ABE7_ai ) {
        if ((StringCase(libNCMI_gv_NM_MissionCheat_Cheats[lv_iter].lv_titleString, false) == StringCase(StringWord(EventChatMessage(false), 1), false))) {
            if ((libNCMI_gv_NM_MissionCheat_Cheats[lv_iter].lv_uIType == libNCMI_ge_MissionCheatUIType_ButtonEditBoxCombo)) {
                DataTableSetString(true, ("NS_" + TriggerGetFunction(libNCMI_gv_NM_MissionCheat_Cheats[lv_iter].lv_trigger)), StringWord(EventChatMessage(false), 2));
            }

            TriggerExecute(libNCMI_gv_NM_MissionCheat_Cheats[lv_iter].lv_trigger, true, false);
            libNCMI_gf_NM_MissionCheat_UpdateButtonEnabled();
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_MissionCheat_CheatEntered_Init () {
    libNCMI_gt_NM_MissionCheat_CheatEntered = TriggerCreate("libNCMI_gt_NM_MissionCheat_CheatEntered_Func");
    TriggerAddEventChatMessage(libNCMI_gt_NM_MissionCheat_CheatEntered, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_DebugVictoryS
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_DebugVictoryS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_cineTrigger;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libNCMI_gf_HideCampaignTransmissionPortrait();
    libNCMI_gv_NM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libNCMI_gv_NM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    lv_cineTrigger = TriggerCreate("gt_VictorySequence_Func");
    TriggerExecute(lv_cineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_DebugVictoryS_Init () {
    libNCMI_gt_NM_DebugVictoryS = TriggerCreate("libNCMI_gt_NM_DebugVictoryS_Func");
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugVictoryS, c_playerAny, "VICTORYS", true);
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugVictoryS, c_playerAny, "VICTORYSEQUENCE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_DebugVictoryC
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_DebugVictoryC_Func (bool testConds, bool runActions) {
    int autoF3660CE6_ae;
    int autoF3660CE6_ai;

    // Variable Declarations
    trigger lv_cineTrigger;
    string lv_indexObjective;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libNCMI_gf_HideCampaignTransmissionPortrait();
    libNCMI_gv_NM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libNCMI_gv_NM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    autoF3660CE6_ae = CatalogFieldValueCount(c_gameCatalogMap, libComC_gf_CurrentMap(), "ObjectiveArray", 1);
    autoF3660CE6_ai = 1;
    while (autoF3660CE6_ai <= autoF3660CE6_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libComC_gf_CurrentMap(), "ObjectiveArray["+IntToString(autoF3660CE6_ai-1)+"]", 1);
        autoF3660CE6_ai = autoF3660CE6_ai + 1;
        if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            libCMMI_gf_SetMissionObjectiveProgress(lv_indexObjective, libComC_gf_MissionObjectiveItemCount(lv_indexObjective));
            libNCMI_gf_ZS_SetMissionObjectiveState(lv_indexObjective, libNovC_ge_MissionObjectiveState_Completed);
        }

    }
    lv_cineTrigger = TriggerCreate("gt_VictorySequence_Func");
    TriggerExecute(lv_cineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_DebugVictoryC_Init () {
    libNCMI_gt_NM_DebugVictoryC = TriggerCreate("libNCMI_gt_NM_DebugVictoryC_Func");
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugVictoryC, c_playerAny, "VICTORYC", true);
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugVictoryC, c_playerAny, "VICTORYCOMPLETE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_DebugEquipment
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_DebugEquipment_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNCMI_gt_NM_DebugEquipmentClosed, true);
    libNCUI_gf_NU_EquipmentDisplay();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_DebugEquipment_Init () {
    libNCMI_gt_NM_DebugEquipment = TriggerCreate("libNCMI_gt_NM_DebugEquipment_Func");
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugEquipment, c_playerAny, "-equipment", true);
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugEquipment, c_playerAny, "-Equipment", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_DebugEquipmentClosed
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_DebugEquipmentClosed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCUI_gf_NU_EquipmentClose();
    libComC_gf_CC_ApplyPerkTech(1);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_DebugEquipmentClosed_Init () {
    libNCMI_gt_NM_DebugEquipmentClosed = TriggerCreate("libNCMI_gt_NM_DebugEquipmentClosed_Func");
    TriggerEnable(libNCMI_gt_NM_DebugEquipmentClosed, false);
    libNCUI_gf_NU_EquipmentClosed(libNCMI_gt_NM_DebugEquipmentClosed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_DebugUpgrades
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_DebugUpgrades_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNCMI_gt_NM_DebugUpgradesClosed, true);
    libNCUI_gf_NU_UpgradesDisplay();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_DebugUpgrades_Init () {
    libNCMI_gt_NM_DebugUpgrades = TriggerCreate("libNCMI_gt_NM_DebugUpgrades_Func");
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugUpgrades, c_playerAny, "-army", true);
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugUpgrades, c_playerAny, "-Army", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_DebugUpgradesClosed
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_DebugUpgradesClosed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCUI_gf_NU_UpgradesClose();
    libNovC_gf_NC_ApplyArmyTechItems();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_DebugUpgradesClosed_Init () {
    libNCMI_gt_NM_DebugUpgradesClosed = TriggerCreate("libNCMI_gt_NM_DebugUpgradesClosed_Func");
    TriggerEnable(libNCMI_gt_NM_DebugUpgradesClosed, false);
    libNCUI_gf_NU_UpgradesClosed(libNCMI_gt_NM_DebugUpgradesClosed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_ToggleFlyoverMode
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_ToggleFlyoverMode_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCMI_gv_NM_FlyoverModeEnabled == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FlyoverUnit", 0, 1, RegionGetCenter(RegionEntireMap()));
        libNCMI_gv_NM_FlyoverUnit = UnitLastCreated();
        UnitGroupSelect(UnitGroupSelected(1), 1, false);
        UnitSelect(libNCMI_gv_NM_FlyoverUnit, 1, true);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetDragSelectEnabled(PlayerGroupAll(), false);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
        CameraFollowUnitGroup(1, UnitLastCreatedGroup(), true, false);
        CameraForceFollowUnitGroup(1, true);
        CameraLockInput(1, true);
        AITimePause(true);
        ConsoleCommand("togui", true, true);
        libNCMI_gv_NM_FlyoverModeEnabled = true;
        TriggerEnable(libNCMI_gt_NM_TurnOffFlyoverMode, true);
    }
    else {
        UISetDragSelectEnabled(PlayerGroupAll(), true);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
        UnitKill(libNCMI_gv_NM_FlyoverUnit);
        CameraLockInput(1, false);
        AITimePause(false);
        ConsoleCommand("togui", true, true);
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        libNCMI_gv_NM_FlyoverUnit = null;
        libNCMI_gv_NM_FlyoverModeEnabled = false;
        TriggerEnable(libNCMI_gt_NM_TurnOffFlyoverMode, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_ToggleFlyoverMode_Init () {
    libNCMI_gt_NM_ToggleFlyoverMode = TriggerCreate("libNCMI_gt_NM_ToggleFlyoverMode_Func");
    TriggerAddEventChatMessage(libNCMI_gt_NM_ToggleFlyoverMode, c_playerAny, "FlyoverMode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_TurnOffFlyoverMode
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_TurnOffFlyoverMode_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNCMI_gt_NM_ToggleFlyoverMode, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_TurnOffFlyoverMode_Init () {
    libNCMI_gt_NM_TurnOffFlyoverMode = TriggerCreate("libNCMI_gt_NM_TurnOffFlyoverMode_Func");
    TriggerEnable(libNCMI_gt_NM_TurnOffFlyoverMode, false);
    TriggerAddEventKeyPressed(libNCMI_gt_NM_TurnOffFlyoverMode, c_playerAny, c_keyB, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNCMI_gv_NM_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNCMI_gv_NM_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueue_Init () {
    libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueue = TriggerCreate("libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_AbortMission
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_AbortMission_Func (bool testConds, bool runActions) {
    unitgroup auto5DDB9E2A_g;
    int auto5DDB9E2A_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libComC_gf_CurrentMap() == libNovC_gf_NC_MissionFinal()) && (libComC_gf_CC_TransitionInPlayAgain() == true) && (libComC_gf_CC_TransitionInSimulation() == false)) {
        libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
        UnitPauseAll(true);
        auto5DDB9E2A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
        auto5DDB9E2A_u = 1;
        for ( ; auto5DDB9E2A_u <= UnitGroupCount(auto5DDB9E2A_g, c_unitCountAll) ; auto5DDB9E2A_u += BoolToInt(lv_indexUnit == UnitGroupUnit(auto5DDB9E2A_g, auto5DDB9E2A_u)) ) {
            lv_indexUnit = UnitGroupUnit(auto5DDB9E2A_g, auto5DDB9E2A_u);
            libNtve_gf_MakeUnitInvulnerable(lv_indexUnit, true);
            libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        }
        UISetWorldVisible(PlayerGroupAll(), false);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        TransmissionClearAll();
        ConversationDataStop();
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "SetVisibility");
        libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
        TriggerQueueClear(c_triggerQueueKill);
        TriggerQueuePause(true);
        SoundStopAllTriggerSounds(false);
        libNCMI_gf_NM_CampaignNovaVictory();
    }
    else {
        libComC_gf_CC_TransitionPrepareMissionEnd(c_gameOverDefeat, PlayerDifficulty(1));
        GameOver(1, c_gameOverDefeat, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_AbortMission_Init () {
    libNCMI_gt_NM_AbortMission = TriggerCreate("libNCMI_gt_NM_AbortMission_Func");
    TriggerAddEventAbortMission(libNCMI_gt_NM_AbortMission, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_MissionEndsPlayerExit
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_MissionEndsPlayerExit_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_MissionEndsPlayerExit_Init () {
    libNCMI_gt_NM_MissionEndsPlayerExit = TriggerCreate("libNCMI_gt_NM_MissionEndsPlayerExit_Func");
    TriggerAddEventPlayerLeft(libNCMI_gt_NM_MissionEndsPlayerExit, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_VictoryContinue
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_VictoryContinue_Func (bool testConds, bool runActions) {
    string auto2EF2DD9A_val;
    string auto52A4D7C7_val;

    // Variable Declarations
    string lv_nextMap;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libComC_gf_CC_TransitionInSimulation() == true)) {
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    if ((libComC_gf_CurrentMap() == libNovC_gf_NC_MissionFinal())) {
        libNCMI_gf_NM_CampaignNovaVictory();
        return true;
    }

    auto2EF2DD9A_val = libComC_gf_CurrentMap();
    if (auto2EF2DD9A_val == "Nova03") {
        libComC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
        UISetCursorVisible(PlayerGroupAll(), false);
        libComC_gf_PlayCinematic("MP01_040", false);
    }
    else {
    }
    lv_nextMap = libComC_gf_CC_TransitionNextMap();
    if ((lv_nextMap == "NStory01")) {
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_UIMissionLaunch, libNCMI_gt_NM_VictoryNextMissionLaunched);
    libComC_gf_CC_EventRegister(libNovC_ge_NC_Event_UIMissionQuit, libNCMI_gt_NM_VictoryQuit);
    libComC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    UISetCursorVisible(PlayerGroupAll(), false);
    auto52A4D7C7_val = libComC_gf_CurrentMap();
    if (auto52A4D7C7_val == "Nova01") {
        libComC_gf_PlayCinematic("MP01_020", false);
    }
    else if (auto52A4D7C7_val == "Nova02") {
        libComC_gf_PlayCinematic("MP01_030", false);
    }
    else {
    }
    UISetCursorVisible(PlayerGroupAll(), true);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    TriggerEnable(libNCMI_gt_NM_EventUIEquipment_Open, true);
    TriggerEnable(libNCMI_gt_NM_EventUIEquipment_Close, true);
    TriggerEnable(libNCMI_gt_NM_EventUIArmyUpgrades_Open, true);
    TriggerEnable(libNCMI_gt_NM_EventUIArmyUpgrades_Close, true);
    libNCUI_gf_NU_MissionDisplay(lv_nextMap);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_VictoryContinue_Init () {
    libNCMI_gt_NM_VictoryContinue = TriggerCreate("libNCMI_gt_NM_VictoryContinue_Func");
    libNCUI_gf_NU_VictoryClosed(libNCMI_gt_NM_VictoryContinue);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_VictoryNextMissionLaunched
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_VictoryNextMissionLaunched_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCST_gf_ShowHideStoryUI(false);
    libComC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    libNovC_gf_NC_UpdateCampaignIndex(libNCUI_gf_NU_NextAvailableMission());
    libComC_gf_LaunchMission(libNCUI_gf_NU_NextAvailableMission(), false, libNCUI_gf_NU_MissionSelectedDifficulty());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_VictoryNextMissionLaunched_Init () {
    libNCMI_gt_NM_VictoryNextMissionLaunched = TriggerCreate("libNCMI_gt_NM_VictoryNextMissionLaunched_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_VictoryQuit
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_VictoryQuit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetNextMap("");
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_VictoryQuit_Init () {
    libNCMI_gt_NM_VictoryQuit = TriggerCreate("libNCMI_gt_NM_VictoryQuit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_EventUIEquipment_Open
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_EventUIEquipment_Open_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_EquipmentDisplay();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_EventUIEquipment_Open_Init () {
    libNCMI_gt_NM_EventUIEquipment_Open = TriggerCreate("libNCMI_gt_NM_EventUIEquipment_Open_Func");
    TriggerEnable(libNCMI_gt_NM_EventUIEquipment_Open, false);
    libNCUI_gf_NU_EquipmentOpened(libNCMI_gt_NM_EventUIEquipment_Open);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_EventUIEquipment_Close
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_EventUIEquipment_Close_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_EquipmentClose();
    libNCUI_gf_NU_MissionCreate();
    libNCUI_gf_NU_MissionDisplay(libComC_gf_CC_TransitionNextMap());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_EventUIEquipment_Close_Init () {
    libNCMI_gt_NM_EventUIEquipment_Close = TriggerCreate("libNCMI_gt_NM_EventUIEquipment_Close_Func");
    TriggerEnable(libNCMI_gt_NM_EventUIEquipment_Close, false);
    libNCUI_gf_NU_EquipmentClosed(libNCMI_gt_NM_EventUIEquipment_Close);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_EventUIArmyUpgrades_Open
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_EventUIArmyUpgrades_Open_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_UpgradesDisplay();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_EventUIArmyUpgrades_Open_Init () {
    libNCMI_gt_NM_EventUIArmyUpgrades_Open = TriggerCreate("libNCMI_gt_NM_EventUIArmyUpgrades_Open_Func");
    TriggerEnable(libNCMI_gt_NM_EventUIArmyUpgrades_Open, false);
    libNCUI_gf_NU_UpgradesOpened(libNCMI_gt_NM_EventUIArmyUpgrades_Open);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_EventUIArmyUpgrades_Close
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_EventUIArmyUpgrades_Close_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_UpgradesClose();
    libNCUI_gf_NU_MissionCreate();
    libNCUI_gf_NU_MissionDisplay(libComC_gf_CC_TransitionNextMap());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_EventUIArmyUpgrades_Close_Init () {
    libNCMI_gt_NM_EventUIArmyUpgrades_Close = TriggerCreate("libNCMI_gt_NM_EventUIArmyUpgrades_Close_Func");
    TriggerEnable(libNCMI_gt_NM_EventUIArmyUpgrades_Close, false);
    libNCUI_gf_NU_UpgradesClosed(libNCMI_gt_NM_EventUIArmyUpgrades_Close);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_EventMissionEquipmentClose
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_EventMissionEquipmentClose_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCUI_gf_NU_EquipmentClose();
    libComC_gf_CC_ApplyPerkTech(1);
    TriggerSendEvent(libNCMI_gv_missionEquipmentEventClosed);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_EventMissionEquipmentClose_Init () {
    libNCMI_gt_NM_EventMissionEquipmentClose = TriggerCreate("libNCMI_gt_NM_EventMissionEquipmentClose_Func");
    TriggerEnable(libNCMI_gt_NM_EventMissionEquipmentClose, false);
    libNCUI_gf_NU_EquipmentClosed(libNCMI_gt_NM_EventMissionEquipmentClose);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_DebugReviveNovaInstantly
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_DebugReviveNovaInstantly_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((UnitIsAlive(libNCMI_gv_nM_NovaHeroUnit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_ReviveHeroInstantly(libNCMI_gv_nM_NovaHeroUnit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_DebugReviveNovaInstantly_Init () {
    libNCMI_gt_NM_DebugReviveNovaInstantly = TriggerCreate("libNCMI_gt_NM_DebugReviveNovaInstantly_Func");
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugReviveNovaInstantly, c_playerAny, "ReviveNovaInstant", true);
    TriggerAddEventChatMessage(libNCMI_gt_NM_DebugReviveNovaInstantly, c_playerAny, "ReviveNovaInstantly", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_HeroReviveNovaCooldownWait
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_HeroReviveNovaCooldownWait_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGetCooldown(libNCMI_gv_nM_HeroRevivePlayer[(libNCMI_ge_NM_HeroType_NM_HeroType_Nova)], libNCMI_gv_nM_HeroReviveCDLink[(libNCMI_ge_NM_HeroType_NM_HeroType_Nova)]) == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libNCMI_gt_NM_HeroReviveNovaGameEnds, false);
    libNCMI_gf_NM_HeroRevive(libNCMI_ge_NM_HeroType_NM_HeroType_Nova);
    libNCUI_gf_SetHeroPanelUnit(1, libNCMI_gv_nM_HeroRevivingUnit[libNCMI_ge_NM_HeroType_NM_HeroType_Nova]);
    if ((libNCMI_gv_nM_HeroRevivePlayer[(libNCMI_ge_NM_HeroType_NM_HeroType_Nova)] == 1)) {
        libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_NCMI_AADE848B"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_HeroReviveNovaCooldownWait_Init () {
    libNCMI_gt_NM_HeroReviveNovaCooldownWait = TriggerCreate("libNCMI_gt_NM_HeroReviveNovaCooldownWait_Func");
    TriggerEnable(libNCMI_gt_NM_HeroReviveNovaCooldownWait, false);
    TriggerAddEventTimePeriodic(libNCMI_gt_NM_HeroReviveNovaCooldownWait, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_HeroReviveNovaGameEnds
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_HeroReviveNovaGameEnds_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == true))) {
            return false;
        }

        if (!((UnitIsAlive(libNCMI_gv_nM_NovaHeroUnit) == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libNCMI_gt_NM_HeroReviveNovaCooldownWait, false);
    libNCMI_gf_NM_HeroRevive(libNCMI_ge_NM_HeroType_NM_HeroType_Nova);
    libNCUI_gf_SetHeroPanelUnit(1, libNCMI_gv_nM_HeroRevivingUnit[libNCMI_ge_NM_HeroType_NM_HeroType_Nova]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_HeroReviveNovaGameEnds_Init () {
    libNCMI_gt_NM_HeroReviveNovaGameEnds = TriggerCreate("libNCMI_gt_NM_HeroReviveNovaGameEnds_Func");
    TriggerEnable(libNCMI_gt_NM_HeroReviveNovaGameEnds, false);
    TriggerAddEventTimePeriodic(libNCMI_gt_NM_HeroReviveNovaGameEnds, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_HeroReviveVOReminder
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_HeroReviveVOReminder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UserDataGetInt("StoryStates", "NovaHasRevivedBefore", "Value", 1) == 0)) {
        UserDataSetInt("StoryStates", "NovaHasRevivedBefore", "Value", 1, 1);
        if ((libComC_gf_CurrentMap() == "Nova02")) {
            TriggerQueueEnter();
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00120", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            TriggerQueueExit();
        }
        else {
            TriggerQueueEnter();
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00117", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            TriggerQueueExit();
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_HeroReviveVOReminder_Init () {
    libNCMI_gt_NM_HeroReviveVOReminder = TriggerCreate("libNCMI_gt_NM_HeroReviveVOReminder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_HeroReviveNova
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_HeroReviveNova_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_HandleHeroDeathNova(libNCMI_gf_NovaHeroUnit(), null, -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_HeroReviveNova_Init () {
    libNCMI_gt_NM_HeroReviveNova = TriggerCreate("libNCMI_gt_NM_HeroReviveNova_Func");
    TriggerEnable(libNCMI_gt_NM_HeroReviveNova, false);
    TriggerAddEventUnitDied(libNCMI_gt_NM_HeroReviveNova, UnitRefFromVariable("libNCMI_gv_nM_NovaHeroUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_MissionTipClicked
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_MissionTipClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCMI_gv_NM_MissionHelpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCMI_gv_NM_MissionHelpButtonTipPanel != c_invalidDialogControlId)) {
        DialogControlSetVisible(libNCMI_gv_NM_MissionHelpButtonTipPanel, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_MissionTipClicked_Init () {
    libNCMI_gt_NM_MissionTipClicked = TriggerCreate("libNCMI_gt_NM_MissionTipClicked_Func");
    TriggerEnable(libNCMI_gt_NM_MissionTipClicked, false);
    TriggerAddEventDialogControl(libNCMI_gt_NM_MissionTipClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_SendTransmissionCampaignTick
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_SendTransmissionCampaignTick_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libNCMI_gv_NM_SendTransmissionCampaignIndex == 0) && (libNCMI_gv_NM_SendTransmissionCampaignPlayingTick > 0)) {
            libNCMI_gv_NM_SendTransmissionCampaignPlayingTick -= 1;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_SendTransmissionCampaignTick_Init () {
    libNCMI_gt_NM_SendTransmissionCampaignTick = TriggerCreate("libNCMI_gt_NM_SendTransmissionCampaignTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_DropPod_Zerg_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_DropPod_Zerg_DontWait_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_NM_DropPod_Zerg_Wait(libNCMI_gv_NM_DropPod_TP_Location, libNCMI_gv_NM_DropPod_TP_Units, libNCMI_gv_NM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_DropPod_Zerg_DontWait_Init () {
    libNCMI_gt_NM_DropPod_Zerg_DontWait = TriggerCreate("libNCMI_gt_NM_DropPod_Zerg_DontWait_Func");
    TriggerEnable(libNCMI_gt_NM_DropPod_Zerg_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_DropPod_Terran_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_DropPod_Terran_DontWait_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_NM_DropPod_Terran_Wait(libNCMI_gv_NM_DropPod_TP_Location, libNCMI_gv_NM_DropPod_TP_Units, libNCMI_gv_NM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_DropPod_Terran_DontWait_Init () {
    libNCMI_gt_NM_DropPod_Terran_DontWait = TriggerCreate("libNCMI_gt_NM_DropPod_Terran_DontWait_Func");
    TriggerEnable(libNCMI_gt_NM_DropPod_Terran_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_CampaignUnit
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_CampaignUnit_Func (bool testConds, bool runActions) {
    unitgroup autoD03D3C7E_g;
    int autoD03D3C7E_u;

    // Variable Declarations
    unit lv_indexUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindMission) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD03D3C7E_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD03D3C7E_u = 1;
    for ( ; autoD03D3C7E_u <= UnitGroupCount(autoD03D3C7E_g, c_unitCountAll) ; autoD03D3C7E_u += BoolToInt(lv_indexUnit == UnitGroupUnit(autoD03D3C7E_g, autoD03D3C7E_u)) ) {
        lv_indexUnit = UnitGroupUnit(autoD03D3C7E_g, autoD03D3C7E_u);
        if (((UnitGetOwner(lv_indexUnit) == 1) || (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            libNCMI_gf_NM_UseUnitNameAsUnitTip(lv_indexUnit);
            libNCMI_gf_NM_ApplyCampaignTeachingToUnit(lv_indexUnit);
        }

    }
    TriggerEnable(libNCMI_gt_NM_CampaignUnitCreated, true);
    TriggerEnable(libNCMI_gt_NM_CampaignUnitChangeOwner, true);
    TriggerEnable(libNCMI_gt_NM_CampaignUnitInfoUnitMorphes, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_CampaignUnit_Init () {
    libNCMI_gt_NM_CampaignUnit = TriggerCreate("libNCMI_gt_NM_CampaignUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_CampaignUnitCreated
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_CampaignUnitCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_NM_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    libNCMI_gf_NM_ApplyCampaignTeachingToUnit(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_CampaignUnitCreated_Init () {
    libNCMI_gt_NM_CampaignUnitCreated = TriggerCreate("libNCMI_gt_NM_CampaignUnitCreated_Func");
    TriggerEnable(libNCMI_gt_NM_CampaignUnitCreated, false);
    TriggerAddEventUnitCreated(libNCMI_gt_NM_CampaignUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_CampaignUnitChangeOwner
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_CampaignUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_NM_UseUnitNameAsUnitTip(EventUnit());
    libNCMI_gf_NM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_CampaignUnitChangeOwner_Init () {
    libNCMI_gt_NM_CampaignUnitChangeOwner = TriggerCreate("libNCMI_gt_NM_CampaignUnitChangeOwner_Func");
    TriggerEnable(libNCMI_gt_NM_CampaignUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(libNCMI_gt_NM_CampaignUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_CampaignUnitInfoUnitMorphes
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_CampaignUnitInfoUnitMorphes_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_NM_UseUnitNameAsUnitTip(EventUnit());
    libNCMI_gf_NM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_CampaignUnitInfoUnitMorphes_Init () {
    libNCMI_gt_NM_CampaignUnitInfoUnitMorphes = TriggerCreate("libNCMI_gt_NM_CampaignUnitInfoUnitMorphes_Func");
    TriggerEnable(libNCMI_gt_NM_CampaignUnitInfoUnitMorphes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NM_UnitBeingRemoved
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NM_UnitBeingRemoved_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal UnitRemoved");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NM_UnitBeingRemoved_Init () {
    libNCMI_gt_NM_UnitBeingRemoved = TriggerCreate("libNCMI_gt_NM_UnitBeingRemoved_Func");
    TriggerAddEventUnitRemoved(libNCMI_gt_NM_UnitBeingRemoved, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Ping Sound
//--------------------------------------------------------------------------------------------------
bool libNCMI_gt_NovaPingSound_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("UI_TerranPing", -1)), c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCMI_gt_NovaPingSound_Init () {
    libNCMI_gt_NovaPingSound = TriggerCreate("libNCMI_gt_NovaPingSound_Func");
}

void libNCMI_InitTriggers () {
    libNCMI_gt_StealthAIRunStealthAIDefendRegions_Init();
    libNCMI_gt_NM_CinematicModeOn_Init();
    libNCMI_gt_NM_CinematicModeOff_Init();
    libNCMI_gt_NM_CreditsCutsceneDetectEnd_Init();
    libNCMI_gt_CreditsCutsceneMP03_040OGVScreenCreate_Init();
    libNCMI_gt_CreditsCutsceneMP03_040PlayOGVMovie_Init();
    libNCMI_gt_CreditsCutsceneMP03_040StopMovie_Init();
    libNCMI_gt_NovaPsiStrike_Init();
    libNCMI_gt_FuryofOneHeight_Init();
    libNCMI_gt_FuryofOneReset_Init();
    libNCMI_gt_NovaNukeTimerGhostAcademyNukeBuild_Init();
    libNCMI_gt_NovaNukeTimerGhostAcademyNukeCancel_Init();
    libNCMI_gt_NovaNukeTimerGhostAcademyNukeFired_Init();
    libNCMI_gt_CreepTumorBuild_Init();
    libNCMI_gt_XanthosFighterLaunch_Init();
    libNCMI_gt_XanthosHighlightOff_Init();
    libNCMI_gt_XanthosHighlightOn_Init();
    libNCMI_gt_Flee_Init();
    libNCMI_gt_NM_GameCheat_CreateDialog_Init();
    libNCMI_gt_NS_GameCheat_CheckboxUsed_Init();
    libNCMI_gt_NS_GameCheat_CheatUsed_Init();
    libNCMI_gt_NM_MissionCheat_CreateDialog_Init();
    libNCMI_gt_NM_MissionCheat_ButtonClicked_Init();
    libNCMI_gt_NM_MissionCheat_CheatEntered_Init();
    libNCMI_gt_NM_DebugVictoryS_Init();
    libNCMI_gt_NM_DebugVictoryC_Init();
    libNCMI_gt_NM_DebugEquipment_Init();
    libNCMI_gt_NM_DebugEquipmentClosed_Init();
    libNCMI_gt_NM_DebugUpgrades_Init();
    libNCMI_gt_NM_DebugUpgradesClosed_Init();
    libNCMI_gt_NM_ToggleFlyoverMode_Init();
    libNCMI_gt_NM_TurnOffFlyoverMode_Init();
    libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    libNCMI_gt_NM_MissionVictoryCallbackBlockActionQueue_Init();
    libNCMI_gt_NM_AbortMission_Init();
    libNCMI_gt_NM_MissionEndsPlayerExit_Init();
    libNCMI_gt_NM_VictoryContinue_Init();
    libNCMI_gt_NM_VictoryNextMissionLaunched_Init();
    libNCMI_gt_NM_VictoryQuit_Init();
    libNCMI_gt_NM_EventUIEquipment_Open_Init();
    libNCMI_gt_NM_EventUIEquipment_Close_Init();
    libNCMI_gt_NM_EventUIArmyUpgrades_Open_Init();
    libNCMI_gt_NM_EventUIArmyUpgrades_Close_Init();
    libNCMI_gt_NM_EventMissionEquipmentClose_Init();
    libNCMI_gt_NM_DebugReviveNovaInstantly_Init();
    libNCMI_gt_NM_HeroReviveNovaCooldownWait_Init();
    libNCMI_gt_NM_HeroReviveNovaGameEnds_Init();
    libNCMI_gt_NM_HeroReviveVOReminder_Init();
    libNCMI_gt_NM_HeroReviveNova_Init();
    libNCMI_gt_NM_MissionTipClicked_Init();
    libNCMI_gt_NM_SendTransmissionCampaignTick_Init();
    libNCMI_gt_NM_DropPod_Zerg_DontWait_Init();
    libNCMI_gt_NM_DropPod_Terran_DontWait_Init();
    libNCMI_gt_NM_CampaignUnit_Init();
    libNCMI_gt_NM_CampaignUnitCreated_Init();
    libNCMI_gt_NM_CampaignUnitChangeOwner_Init();
    libNCMI_gt_NM_CampaignUnitInfoUnitMorphes_Init();
    libNCMI_gt_NM_UnitBeingRemoved_Init();
    libNCMI_gt_NovaPingSound_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libNCMI_InitLib_completed = false;

void libNCMI_InitLib () {
    if (libNCMI_InitLib_completed) {
        return;
    }

    libNCMI_InitLib_completed = true;

    libNCMI_InitLibraries();
    libNCMI_InitVariables();
    libNCMI_InitTriggers();
}

include "LibNovC"
include "LibNCST"
include "LibNCUI"

