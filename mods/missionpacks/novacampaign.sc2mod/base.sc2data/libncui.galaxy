include "TriggerLibs/NativeLib"
include "TriggerLibs/VoidLib"
include "LibComC"
include "LibNovC_h"
include "LibNCMI_h"
include "LibNCST_h"

include "LibNCUI_h"

//--------------------------------------------------------------------------------------------------
// Library: UI (Nova)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libNCUI_InitLibraries () {
    libNtve_InitVariables();
    libComC_InitVariables();
    libNovC_InitVariables();
    libNCMI_InitVariables();
    libNCST_InitVariables();
}

// Variable Initialization
bool libNCUI_InitVariables_completed = false;

void libNCUI_InitVariables () {
    int init_i;
    int init_j;

    if (libNCUI_InitVariables_completed) {
        return;
    }

    libNCUI_InitVariables_completed = true;

    libNCUI_gv_nU_BottomBarDialog = c_invalidDialogId;
    libNCUI_gv_nU_BottomBarPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libNCUI_gv_nUC_BOTTOMBUTTONCOUNT; init_i += 1) {
        libNCUI_gv_nU_BottomBarButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_BOTTOMBUTTONCOUNT; init_i += 1) {
        libNCUI_gv_nU_BottomBarButtonSelectedDecoration[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_nU_BottomBarBridgeButton = c_invalidDialogControlId;
    libNCUI_gv_nU_BottomBarCouncilButton = c_invalidDialogControlId;
    libNCUI_gv_nU_BottomBarSolarCoreButton = c_invalidDialogControlId;
    libNCUI_gv_NU_BottomBarMissionArchive = c_invalidDialogControlId;
    libNCUI_gv_nU_BottomBarStatusIcon = c_invalidDialogControlId;
    libNCUI_gv_nU_BottomBarStatusTooltip = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libNCUI_gv_nUC_BOTTOMBUTTONCOUNT; init_i += 1) {
        libNCUI_gv_nU_BottomBarStatusActionLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_BOTTOMBUTTONCOUNT; init_i += 1) {
        libNCUI_gv_nU_BottomBarStatusConvLabels[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_nU_BottomBarOn = true;
    libNCUI_gv_nU_BottomBarSubtitleAnchor = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesTitle = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesBackButton = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesQuitButton = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesMissionPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesMissionTitle = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesMissionBonusLabel = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesMissionImage = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesAchievementPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNCUI_gv_nU_ArchivesAchievements[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_nU_ArchivesDifficultyPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libNCUI_gv_nU_ArchivesDifficultyLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libNCUI_gv_nU_ArchivesDifficultyTimes[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_nU_ArchivesMissionPlayButton = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesScenePanel = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesSceneTitle = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesSceneImage = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesScenePlayButton = c_invalidDialogControlId;
    libNCUI_gv_nU_ArchivesLoadingDialog = c_invalidDialogId;
    libNCUI_gv_nU_ArchivesLoadingLabel = c_invalidDialogControlId;
    libNCUI_gv_NU_ArchivesFirstOpen = true;
    libNCUI_gv_pUC_ArchivesMissionLoadingWidth = 1920;
    libNCUI_gv_pUC_ArchivesMissionLoadingHeight = 1080;
    libNCUI_gv_pUC_ArchivesMissionTargetWidth = 960;
    libNCUI_gv_pUC_ArchivesMissionTargetHeight = 851;
    libNCUI_gv_nU_MissionBriefing = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionBriefingMovieFrame = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionBriefingContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionBriefingModuleCenter = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionBriefingModuleCenterMaskingContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionBriefingDiscoverBoxContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionBriefingDiscoverBoxSatComm = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionNewsButtonCalloutModeTimer = TimerCreate();
    libNCUI_gv_nU_MissionNewsButtonNormalModeTimer = TimerCreate();
    libNCUI_gv_nU_MissionNewsCalloutDelay = 4.0;
    libNCUI_gv_nU_MissionNewsNormalModeDelay = 10.0;
    libNCUI_gv_nU_MissionDialog = c_invalidDialogId;
    libNCUI_gv_nU_MissionPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionSubtitleAnchor = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionAuthentication = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNCUI_gv_NU_MissionAchievementFrame[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_NU_MissionAchievementPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionTitleLabel = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionObjectiveLabel = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionArchivesButton = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionQuitButton = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionCloseButton = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionLaunchButton = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionDifficultyDropdown = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionNewsButton = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionNewsCloseButton = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionNewsScreenContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionNewsScreen = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionManagementPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionManagementEquipmentButton = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionManagementUpgradesButton = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionRewardsModule = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libNCUI_gv_nUC_MissionRewardsMaxCount; init_i += 1) {
        libNCUI_gv_nU_MissionRewardsContainers[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_MissionRewardsMaxCount; init_i += 1) {
        libNCUI_gv_nU_MissionRewardsIcons[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_nU_MissionPortraitPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionPortrait = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionPortraitTitle = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionPortraitPlayButton = c_invalidDialogControlId;
    libNCUI_gv_nU_MissionPortraitStopButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libNCUI_gv_nUC_UpgradesUnitSlotCount; init_i += 1) {
        libNCUI_gv_nU_UpgradesSubselectionSelectedItem[init_i] = 1;
    }
    libNCUI_gv_nU_UpgradesDialog = c_invalidDialogId;
    libNCUI_gv_nU_UpgradesPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesTutorialResetButton = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesCloseButton = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesOverviewContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSectionalContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSelectionContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionMovie = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionMovieContainer = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libNCUI_gv_nUC_UpgradesUnitSlotCount; init_i += 1) {
        libNCUI_gv_nU_UpgradesSelectionButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_UpgradesUnitSlotCount; init_i += 1) {
        libNCUI_gv_nU_UpgradesSelectionIcons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_UpgradesUnitSlotCount; init_i += 1) {
        libNCUI_gv_nU_UpgradesSelectionUnitIcons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_UpgradesUnitSlotCount; init_i += 1) {
        libNCUI_gv_nU_UpgradesSelectionCounterLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_UpgradesUnitSlotCount; init_i += 1) {
        libNCUI_gv_nU_UpgradesSelectionUnitLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_UpgradesUnitSlotCount; init_i += 1) {
        libNCUI_gv_nU_UpgradesSelectionUpgradeLabels[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_nU_UpgradesSubselectionPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libNCUI_gv_nUC_UpgradesTechItemCount; init_i += 1) {
        libNCUI_gv_nU_UpgradesSubselectionItemButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_UpgradesTechItemCount; init_i += 1) {
        libNCUI_gv_nU_UpgradesSubselectionItemIcons[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_nU_UpgradesSubselectionItemInfoContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionItemTitle = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionItemDescription = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionItemStatusContainer = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionItemStatusLabel = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionItemStatusUnitLabel = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionItemStatusUnitIcon = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionEquipButton = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesSubselectionEquipButtonLabel = c_invalidDialogControlId;
    libNCUI_gv_nU_UpgradesReigelResponseTimer = TimerCreate();
    for (init_i = 0; init_i <= libNCUI_gv_nUC_EquipmentSlotCount; init_i += 1) {
        libNCUI_gv_nU_Equipment_Subselection_SelectedItem[init_i] = 1;
    }
    libNCUI_gv_nU_EquipmentDialog = c_invalidDialogId;
    libNCUI_gv_nU_EquipmentPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_EquipmentTutorialResetButton = c_invalidDialogControlId;
    libNCUI_gv_nU_EquipmentCloseButton = c_invalidDialogControlId;
    libNCUI_gv_nU_EquipmentOverviewContainer = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libNCUI_gv_nUC_EquipmentSlotCount; init_i += 1) {
        libNCUI_gv_nU_EquipmentSlotContainers[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_EquipmentSlotCount; init_i += 1) {
        libNCUI_gv_nU_EquipmentSlotContainersSelectedTitle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_EquipmentSlotCount; init_i += 1) {
        libNCUI_gv_nU_EquipmentSlotContainersSelectedDescription[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_EquipmentSlotCount; init_i += 1) {
        for (init_j = 0; init_j <= libNCUI_gv_nUC_EquipmentItemCount; init_j += 1) {
            libNCUI_gv_nU_EquipmentSlotContainerItemButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_EquipmentSlotCount; init_i += 1) {
        for (init_j = 0; init_j <= libNCUI_gv_nUC_EquipmentItemCount; init_j += 1) {
            libNCUI_gv_nU_EquipmentSlotContainerItemIcons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_EquipmentSlotCount; init_i += 1) {
        libNCUI_gv_nU_EquipmentSlotIndicators[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_nU_EquipmentSelectedItemTitle = c_invalidDialogControlId;
    libNCUI_gv_nU_EquipmentSelectedItemFluffLabel = c_invalidDialogControlId;
    libNCUI_gv_nU_EquipmentReigelResponseTimer = TimerCreate();
    libNCUI_gv_NU_ArmyButton = c_invalidDialogControlId;
    libNCUI_gv_NU_ArmyButtonTipPanel = c_invalidDialogControlId;
    libNCUI_gv_nU_DirectiveDialog = c_invalidDialogId;
    libNCUI_gv_nU_DirectivePanel = c_invalidDialogControlId;
    libNCUI_gv_NU_DirectiveLabel = c_invalidDialogControlId;
    libNCUI_gv_NU_BB_Style = libNCUI_ge_SingularBossBarStyle_Objective;
    libNCUI_gv_NU_BB_Panel = c_invalidDialogControlId;
    libNCUI_gv_NU_BB_ClickableAreaHealthBar = c_invalidDialogControlId;
    libNCUI_gv_NU_BB_ClickableAreaNameLabel = c_invalidDialogControlId;
    libNCUI_gv_NU_BB_TitleLabel = c_invalidDialogControlId;
    libNCUI_gv_NU_BB_HpLabel = c_invalidDialogControlId;
    libNCUI_gv_NU_BB_HpFullImage = c_invalidDialogControlId;
    libNCUI_gv_NU_BB_HpCurrentImage = c_invalidDialogControlId;
    libNCUI_gv_NU_BB_BossBG = c_invalidDialogControlId;
    libNCUI_gv_NU_BB_ObjectiveBG = c_invalidDialogControlId;
    libNCUI_gv_nUC_HEROUILIFEBARHEIGHT = 20;
    libNCUI_gv_nUC_HEROUISHIELDBARHEIGHT = 8;
    libNCUI_gv_nUC_HEROUIENERGYBARHEIGHT = 8;
    libNCUI_gv_nUC_HEROUIBARWIDTH = 200;
    libNCUI_gv_nU_ChampionReviveTimer = 180.0;
    libNCUI_gv_nU_ChampionCooldownTime = 60.0;
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroShowLevel[init_i] = true;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_nU_HeroPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_nU_HeroDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_nU_HeroDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_nU_HeroDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNCUI_gv_nUC_HeroMaxHeroCount; init_i += 1) {
        libNCUI_gv_NU_HeroRevivable[init_i] = true;
    }
    libNCUI_gv_nU_HeroAutomaticIndex = 1;
    libNCUI_gv_nU_HealthWatchDialog = c_invalidDialogId;
    libNCUI_gv_nU_HealthWatchImage = c_invalidDialogControlId;
    libNCUI_gv_NU_ObjectivePanel = c_invalidDialogControlId;
    libNCUI_gv_nU_TimerWindowHighlightFrame = c_invalidDialogControlId;
    libNCUI_gv_nU_TimerWindowDangerThreshold = 180.0;
    libNCUI_gv_nU_TimerWindowTimer = TimerCreate();
    libNCUI_gv_NU_VSDialog = c_invalidDialogId;
    libNCUI_gv_NU_VSPanel = c_invalidDialogControlId;
    libNCUI_gv_NU_VSMainPanel = c_invalidDialogControlId;
    libNCUI_gv_NU_VSLabelMissionTitle = c_invalidDialogControlId;
    libNCUI_gv_NU_VSLabelVictoryTitle = c_invalidDialogControlId;
    libNCUI_gv_NU_VSLabelTime = c_invalidDialogControlId;
    libNCUI_gv_NU_VSBtnContinue = c_invalidDialogControlId;
    libNCUI_gv_NU_VSBtnPlayAgain = c_invalidDialogControlId;
    libNCUI_gv_NU_VSRestartPanel = c_invalidDialogControlId;
    libNCUI_gv_NU_VSRestartDifficultyPulldown = c_invalidDialogControlId;
    libNCUI_gv_NU_VSRestartRestartButton = c_invalidDialogControlId;
    libNCUI_gv_NU_VSRestartCancelButton = c_invalidDialogControlId;
    libNCUI_gv_NU_VSBackgroundCover2 = c_invalidDialogControlId;
    libNCUI_gv_NU_VSBackgroundCover = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNCUI_gv_zS_VSAchievementTitle3[init_i] = c_invalidDialogControlId;
    }
    libNCUI_gv_NU_VSAchievementTitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNCUI_gv_zS_VSAchievementTitle2[init_i] = c_invalidDialogControlId;
    }
}

// Presets
// Functions
void libNCUI_gf_NU_BottomBarShowHide (bool lp_showHide) {
    // Implementation
    TriggerExecute(libNCUI_gt_NU_BottomBarInit, true, false);
    DialogSetVisible(libNCUI_gv_nU_BottomBarDialog, PlayerGroupAll(), lp_showHide);
    if ((lp_showHide == true)) {
        TriggerEnable(libNCUI_gt_NU_BottomBarButtonClicked, true);
        DialogSetSubtitlePositionOverrideControl(libNCUI_gv_nU_BottomBarSubtitleAnchor);
    }
    else {
        TriggerEnable(libNCUI_gt_NU_BottomBarButtonClicked, false);
    }
}

void libNCUI_gf_NU_BottomBarToggleOnOff (bool lp_onOff) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    TriggerExecute(libNCUI_gt_NU_BottomBarInit, true, false);
    if ((lp_onOff == true)) {
        libNCUI_gv_nU_BottomBarOn = true;
        DialogControlFadeTransparency(libNCUI_gv_nU_BottomBarPanel, PlayerGroupAll(), 0.5, 0.0);
    }
    else {
        libNCUI_gv_nU_BottomBarOn = false;
        DialogControlFadeTransparency(libNCUI_gv_nU_BottomBarPanel, PlayerGroupAll(), 0.5, 100.0);
    }
}

void libNCUI_gf_NU_BottomBarButtonEnable (int lp_button, bool lp_enableDisable) {
    // Implementation
    TriggerExecute(libNCUI_gt_NU_BottomBarInit, true, false);
    DialogControlSetEnabled(libNCUI_gv_nU_BottomBarButton[(lp_button)], PlayerGroupAll(), lp_enableDisable);
}

void libNCUI_gf_NU_BottomBarButtonToggle (int lp_button, bool lp_toggled) {
    // Implementation
    TriggerExecute(libNCUI_gt_NU_BottomBarInit, true, false);
    libNCUI_gv_nU_BottomBarButtonToggled[(lp_button)] = lp_toggled;
    if ((lp_toggled == true)) {
        DialogControlSetEnabled(libNCUI_gv_nU_BottomBarButton[(lp_button)], PlayerGroupAll(), true);
        DialogControlSetVisible(libNCUI_gv_nU_BottomBarButtonSelectedDecoration[(lp_button)], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libNCUI_gv_nU_BottomBarButtonSelectedDecoration[(lp_button)], PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_BottomBarButton[(lp_button)], lp_toggled, PlayerGroupAll());
}

trigger auto_libNCUI_gf_NU_BottomBarButtonHighlight_Trigger = null;
int auto_libNCUI_gf_NU_BottomBarButtonHighlight_lp_button;
bool auto_libNCUI_gf_NU_BottomBarButtonHighlight_lp_showHide;

void libNCUI_gf_NU_BottomBarButtonHighlight (int lp_button, bool lp_showHide) {
    auto_libNCUI_gf_NU_BottomBarButtonHighlight_lp_button = lp_button;
    auto_libNCUI_gf_NU_BottomBarButtonHighlight_lp_showHide = lp_showHide;

    if (auto_libNCUI_gf_NU_BottomBarButtonHighlight_Trigger == null) {
        auto_libNCUI_gf_NU_BottomBarButtonHighlight_Trigger = TriggerCreate("auto_libNCUI_gf_NU_BottomBarButtonHighlight_TriggerFunc");
    }

    TriggerExecute(auto_libNCUI_gf_NU_BottomBarButtonHighlight_Trigger, false, false);
}

bool auto_libNCUI_gf_NU_BottomBarButtonHighlight_TriggerFunc (bool testConds, bool runActions) {
    int lp_button = auto_libNCUI_gf_NU_BottomBarButtonHighlight_lp_button;
    bool lp_showHide = auto_libNCUI_gf_NU_BottomBarButtonHighlight_lp_showHide;

    // Implementation
    TriggerExecute(libNCUI_gt_NU_BottomBarInit, true, false);
    if ((lp_showHide == true)) {
        DialogControlSendAnimationEvent(libNCUI_gv_nU_BottomBarButton[(lp_button)], PlayerGroupAll(), "Highlight");
    }
    else {
        DialogControlSendAnimationEvent(libNCUI_gv_nU_BottomBarButton[(lp_button)], PlayerGroupAll(), "HighlightStop");
    }
    return true;
}

void libNCUI_gf_NU_BottomBarSetExtendedTooltip (int lp_button, text lp_tooltipText) {
    int auto14B9BE19_val;

    // Variable Declarations
    text lv_buttonTooltip;

    // Variable Initialization

    // Implementation
    auto14B9BE19_val = lp_button;
    if (auto14B9BE19_val == libNCUI_ge_NU_BottomBarButton_BridgeRoom) {
        lv_buttonTooltip = ConversationDataStateText("CampaignText|BottomBarBridgeTooltip", "Value");
    }
    else {
    }
    if (((lp_tooltipText != null) == true)) {
        if (((lv_buttonTooltip != null) == true)) {
            TextExpressionSetToken("Param/Expression/lib_NCUI_395995D8", "BOTTOMBARTOOLTIP", lv_buttonTooltip);
            TextExpressionSetToken("Param/Expression/lib_NCUI_395995D8", "EXTENDEDTIP", lp_tooltipText);
            libNtve_gf_SetDialogItemTooltip(libNCUI_gv_nU_BottomBarButton[(lp_button)], TextExpressionAssemble("Param/Expression/lib_NCUI_395995D8"), PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NCUI_9DEA3931", "A", lp_tooltipText);
            libNtve_gf_SetDialogItemTooltip(libNCUI_gv_nU_BottomBarButton[(lp_button)], TextExpressionAssemble("Param/Expression/lib_NCUI_9DEA3931"), PlayerGroupAll());
        }
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libNCUI_gv_nU_BottomBarButton[(lp_button)], lv_buttonTooltip, PlayerGroupAll());
    }
}

string libNCUI_gf_NU_ArchivesDataString (int lp_missionarchive) {
    // Implementation
    return ("ZSS_Archive_" + IntToString((lp_missionarchive)));
}

string libNCUI_gf_NU_ArchivesDataTypeString (int lp_missionarchive) {
    // Implementation
    return ("ZSS_ArchiveType_" + IntToString((lp_missionarchive)));
}

void libNCUI_gf_NU_ArchivesOverlayCreate () {
    // Implementation
    libNCUI_gv_nU_MissionArchiveOverlayCreated = true;
    libNCUI_gv_nU_ArchivesPanel = BattleReportGetDialogControl();
    DialogControlHookup(libNCUI_gv_nU_ArchivesPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    libNCUI_gv_nU_ArchivesTitle = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesPanel, c_triggerControlTypeButton, "CloseButton");
    libNCUI_gv_nU_ArchivesBackButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesPanel, c_triggerControlTypeButton, "QuitButton");
    libNCUI_gv_nU_ArchivesQuitButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesPanel, c_triggerControlTypePanel, "MissionSummaryContainer");
    libNCUI_gv_nU_ArchivesMissionPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesMissionPanel, c_triggerControlTypeLabel, "MissionTitleLabel");
    libNCUI_gv_nU_ArchivesMissionTitle = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesMissionPanel, c_triggerControlTypeLabel, "MissionBonusObjectivesLabel");
    libNCUI_gv_nU_ArchivesMissionBonusLabel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesMissionPanel, c_triggerControlTypePanel, "MissionImageContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "MissionImage");
    libNCUI_gv_nU_ArchivesMissionImage = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesMissionPanel, c_triggerControlTypePanel, "AchievementSummaryContainer");
    libNCUI_gv_nU_ArchivesAchievementPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame0");
    libNCUI_gv_nU_ArchivesAchievements[1] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame1");
    libNCUI_gv_nU_ArchivesAchievements[2] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesAchievementPanel, c_triggerControlTypeAchievement, "AchievementFrame2");
    libNCUI_gv_nU_ArchivesAchievements[3] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesMissionPanel, c_triggerControlTypePanel, "DifficultySummaryContainer");
    libNCUI_gv_nU_ArchivesDifficultyPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyCasualLabel");
    libNCUI_gv_nU_ArchivesDifficultyLabels[1] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyCasualTimeLabel");
    libNCUI_gv_nU_ArchivesDifficultyTimes[1] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyNormalLabel");
    libNCUI_gv_nU_ArchivesDifficultyLabels[2] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyNormalTimeLabel");
    libNCUI_gv_nU_ArchivesDifficultyTimes[2] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyHardLabel");
    libNCUI_gv_nU_ArchivesDifficultyLabels[3] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyHardTimeLabel");
    libNCUI_gv_nU_ArchivesDifficultyTimes[3] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyBrutalLabel");
    libNCUI_gv_nU_ArchivesDifficultyLabels[4] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesDifficultyPanel, c_triggerControlTypeLabel, "DifficultyBrutalTimeLabel");
    libNCUI_gv_nU_ArchivesDifficultyTimes[4] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesMissionPanel, c_triggerControlTypeButton, "ReplayMissionButton");
    libNCUI_gv_nU_ArchivesMissionPlayButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesPanel, c_triggerControlTypePanel, "CinematicSummaryContainer");
    libNCUI_gv_nU_ArchivesScenePanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesScenePanel, c_triggerControlTypeLabel, "CinematicTitleLabel");
    libNCUI_gv_nU_ArchivesSceneTitle = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesScenePanel, c_triggerControlTypeImage, "CinematicImage");
    libNCUI_gv_nU_ArchivesSceneImage = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_ArchivesScenePanel, c_triggerControlTypeButton, "PlayCinematicButton");
    libNCUI_gv_nU_ArchivesScenePlayButton = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libNCUI_gv_nU_ArchivesLoadingDialog = DialogLastCreated();
    DialogSetFullscreen(libNCUI_gv_nU_ArchivesLoadingDialog, true);
    DialogSetImageVisible(libNCUI_gv_nU_ArchivesLoadingDialog, false);
    libNtve_gf_CreateDialogItemLabel(libNCUI_gv_nU_ArchivesLoadingDialog, 200, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_NCUI_8DFE4298"), Color(254*100/255,138*100/255,14*100/255), false, 2.0);
    libNCUI_gv_nU_ArchivesLoadingLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNCUI_gv_nU_ArchivesLoadingLabel, PlayerGroupAll(), c_anchorTopRight, libNCUI_gv_nU_ArchivesMissionPanel, c_anchorBottomRight, 0, 0);
    DialogControlSendAnimationEvent(libNCUI_gv_nU_ArchivesPanel, PlayerGroupAll(), "Birth");
    SoundPlayForPlayer(SoundLink("UI_Archive_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

void libNCUI_gf_NU_ArchivesTurnOffButtons () {
    // Implementation
    TriggerEnable(libNCUI_gt_NU_ArchivesSelectionChanged, false);
    TriggerEnable(libNCUI_gt_NU_ArchivesScenePlayClicked, false);
    TriggerEnable(libNCUI_gt_NU_ArchivesMissionPlayClicked, false);
    TriggerEnable(libNCUI_gt_NU_ArchivesCloseClicked, false);
}

void libNCUI_gf_NU_ArchivesClosed () {
    // Implementation
    libNCUI_gf_NU_ArchivesTurnOffButtons();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
}

void libNCUI_gf_NU_ArchivesDisplay () {
    // Implementation
    TriggerExecute(libNCUI_gt_NU_ArchivesCreate, true, false);
    TriggerEnable(libNCUI_gt_NU_ArchivesSelectionChanged, true);
    TriggerEnable(libNCUI_gt_NU_ArchivesScenePlayClicked, true);
    TriggerEnable(libNCUI_gt_NU_ArchivesMissionPlayClicked, true);
    TriggerEnable(libNCUI_gt_NU_ArchivesCloseClicked, true);
    if ((libComC_gf_CampaignIsComplete() == false)) {
        libNCUI_gv_nU_ArchivesSynced = true;
    }

    libNCUI_gf_NU_ArchivesUpdate();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
    if ((libComC_gf_CampaignIsComplete() == true) && (libComC_gf_CC_ArchiveMasterVisited() == false) && (libNCUI_gv_NU_ArchivesFirstOpen == true)) {
        TextExpressionSetToken("Param/Expression/lib_NCUI_F859D055", "A", ConversationDataStateText("StoryModeText|MasterArchivesIntroText", "Description"));
        TextExpressionSetToken("Param/Expression/lib_NCUI_F859D055", "B", ConversationDataStateText("StoryModeText|MasterArchivesIntroText2", "Description"));
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, ConversationDataStateText("StoryModeText|MasterArchivesIntroTitle", "Description"), TextExpressionAssemble("Param/Expression/lib_NCUI_F859D055"), true);
    }

    libNCUI_gv_NU_ArchivesFirstOpen = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "pAmbience_MissionArchives", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libComC_gf_CinematicFade(true, 0.5, Color(0.00, 0.00, 0.00), false);
}

string libNCUI_gf_NU_ArchivesLastMissionSelected () {
    // Implementation
    return (DataTableGetString(true, libNCUI_gf_NU_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
}

void libNCUI_gf_NU_ArchivesUpdate () {
    int auto6A391340_ae;
    int auto6A391340_ai;
    int auto9C012B84_ae;
    int auto9C012B84_ai;

    // Variable Declarations
    int lv_index;
    int lv_difficultyIndex;
    string lv_selectedMission;
    string lv_selectedScene;

    // Variable Initialization

    // Implementation
    if ((libNCUI_gv_nU_ArchivesSynced == true)) {
        DialogSetVisible(libNCUI_gv_nU_ArchivesLoadingDialog, PlayerGroupAll(), false);
    }
    else {
        DialogSetVisible(libNCUI_gv_nU_ArchivesLoadingDialog, PlayerGroupAll(), true);
    }
    if ((libComC_gf_CampaignIsComplete() == true)) {
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesQuitButton, PlayerGroupAll(), true);
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesBackButton, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesTitle, ConversationDataStateText("StoryModeText|MasterArchivesIntroTitle", "Description"), PlayerGroupAll());
    }
    else {
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesQuitButton, PlayerGroupAll(), false);
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesBackButton, PlayerGroupAll(), true);
    }
    if ((BattleReportPanelGetSelectedBattleReport(1) == c_invalidBattleReportId)) {
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesScenePanel, PlayerGroupAll(), false);
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesMissionPanel, PlayerGroupAll(), false);
    }
    else if ((DataTableGetInt(true, libNCUI_gf_NU_ArchivesDataTypeString(BattleReportPanelGetSelectedBattleReport(1))) == libNCUI_ge_NU_ArchivesType_Mission)) {
        lv_selectedMission = (DataTableGetString(true, libNCUI_gf_NU_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesScenePanel, PlayerGroupAll(), false);
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesMissionPanel, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesMissionTitle, libComC_gf_CC_MapName(lv_selectedMission), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_ArchivesMissionImage, libComC_gf_CC_MapMissionArchiveBackgroundImage(lv_selectedMission), PlayerGroupAll());
        libNCUI_gf_NU_ArchivesSetUVs(UserDataGetFixed("Maps", libComC_gf_CC_MapUserDataInstance(lv_selectedMission), "ArchivesImageSettings", 1), UserDataGetFixed("Maps", libComC_gf_CC_MapUserDataInstance(lv_selectedMission), "ArchivesImageSettings", 2), UserDataGetFixed("Maps", libComC_gf_CC_MapUserDataInstance(lv_selectedMission), "ArchivesImageSettings", 3));
        if ((libNCUI_gv_nU_ArchivesSynced == true) && (libNovC_gf_NC_MissionRewardsBonusPossible(lv_selectedMission) >= 1)) {
            DialogControlSetVisible(libNCUI_gv_nU_ArchivesMissionBonusLabel, PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesMissionBonusLabel, libNCUI_gf_NU_ArchivesBonusObjectivesText(lv_selectedMission), PlayerGroupAll());
        }
        else {
            DialogControlSetVisible(libNCUI_gv_nU_ArchivesMissionBonusLabel, PlayerGroupAll(), false);
        }
        if ((libComC_gf_CampaignMapTypeCheck(lv_selectedMission, c_mapKindMission) == true)) {
            if ((libNCUI_gv_nU_ArchivesSynced == true)) {
                DialogControlSetVisible(libNCUI_gv_nU_ArchivesDifficultyPanel, PlayerGroupAll(), true);
                auto6A391340_ae = 4;
                auto6A391340_ai = 1;
                lv_difficultyIndex = 1;
                for ( ; ( (auto6A391340_ai >= 0 && lv_difficultyIndex <= auto6A391340_ae) || (auto6A391340_ai <= 0 && lv_difficultyIndex >= auto6A391340_ae) ) ; lv_difficultyIndex += auto6A391340_ai ) {
                    if ((libComC_gf_MissionCompleteBestTime(lv_selectedMission, libComC_gf_CC_DifficultyFromIndex(lv_difficultyIndex)) == 0)) {
                        libNtve_gf_SetDialogItemStyle(libNCUI_gv_nU_ArchivesDifficultyLabels[lv_difficultyIndex], "NovaMissionArchivesDifficultyLabel", PlayerGroupAll());
                        libNtve_gf_SetDialogItemStyle(libNCUI_gv_nU_ArchivesDifficultyTimes[lv_difficultyIndex], "NovaMissionArchivesDiffcultyTimeLabel", PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_SetDialogItemStyle(libNCUI_gv_nU_ArchivesDifficultyLabels[lv_difficultyIndex], "NovaMissionArchivesDifficultyCompletedLabel", PlayerGroupAll());
                        libNtve_gf_SetDialogItemStyle(libNCUI_gv_nU_ArchivesDifficultyTimes[lv_difficultyIndex], "NovaMissionArchivesDiffcultyTimeCompletedLabel", PlayerGroupAll());
                    }
                }
                libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesDifficultyLabels[1], DifficultyNameCampaign(1), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesDifficultyTimes[1], libComC_gf_FormatTimeCampaign(libComC_gf_MissionCompleteBestTime(lv_selectedMission, 1)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesDifficultyLabels[2], DifficultyNameCampaign(2), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesDifficultyTimes[2], libComC_gf_FormatTimeCampaign(libComC_gf_MissionCompleteBestTime(lv_selectedMission, 2)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesDifficultyLabels[3], DifficultyNameCampaign(3), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesDifficultyTimes[3], libComC_gf_FormatTimeCampaign(libComC_gf_MissionCompleteBestTime(lv_selectedMission, 3)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesDifficultyLabels[4], DifficultyNameCampaign(4), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesDifficultyTimes[4], libComC_gf_FormatTimeCampaign(libComC_gf_MissionCompleteBestTime(lv_selectedMission, 4)), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(libNCUI_gv_nU_ArchivesDifficultyPanel, PlayerGroupAll(), false);
            }
            DialogControlSetVisible(libNCUI_gv_nU_ArchivesAchievementPanel, PlayerGroupAll(), true);
            auto9C012B84_ae = 3;
            auto9C012B84_ai = 1;
            lv_index = 1;
            for ( ; ( (auto9C012B84_ai >= 0 && lv_index <= auto9C012B84_ae) || (auto9C012B84_ai <= 0 && lv_index >= auto9C012B84_ae) ) ; lv_index += auto9C012B84_ai ) {
                libNtve_gf_SetDialogItemAchievement(libNCUI_gv_nU_ArchivesAchievements[lv_index], UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lv_selectedMission), "Achievements", lv_index), PlayerGroupAll());
            }
        }
        else {
            if ((libComC_gf_MissionStatusCheck(libNovC_gf_NC_MissionFinal(), libComC_ge_MissionStatus_Completed) == true) && (libComC_gf_MissionStatusCheck(lv_selectedMission, libComC_ge_MissionStatus_Completed) == false) && (libNCUI_gv_nU_ArchivesSynced == true)) {
                DialogControlSetVisible(libNCUI_gv_nU_ArchivesMissionBonusLabel, PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesMissionBonusLabel, StringExternal("Param/Value/lib_NCUI_D3588EDE"), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(libNCUI_gv_nU_ArchivesMissionBonusLabel, PlayerGroupAll(), false);
            }
            DialogControlSetVisible(libNCUI_gv_nU_ArchivesDifficultyPanel, PlayerGroupAll(), false);
            DialogControlSetVisible(libNCUI_gv_nU_ArchivesAchievementPanel, PlayerGroupAll(), false);
        }
    }
    else if ((DataTableGetInt(true, libNCUI_gf_NU_ArchivesDataTypeString(BattleReportPanelGetSelectedBattleReport(1))) == libNCUI_ge_NU_ArchivesType_Scene)) {
        lv_selectedScene = UserDataInstanceFromReference(DataTableGetString(true, libNCUI_gf_NU_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesScenePanel, PlayerGroupAll(), true);
        DialogControlSetVisible(libNCUI_gv_nU_ArchivesMissionPanel, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_ArchivesSceneImage, UserDataGetImagePath("Scenes", lv_selectedScene, "Image", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNCUI_gv_nU_ArchivesSceneTitle, libComC_gf_CC_SceneName(lv_selectedScene), PlayerGroupAll());
    }
}

text libNCUI_gf_NU_ArchivesBonusObjectivesText (string lp_mission) {
    int autoD992DF16_ae;
    int autoD992DF16_ai;
    int auto5BE8490E_ai;
    int auto5BE8490E_ae;
    int auto6993E792_ai;
    int auto6993E792_ae;

    // Variable Declarations
    string lv_indexObjective;
    string lv_indexPerk;
    string lv_indexTechItem;
    text lv_finalBonusObjectiveText;

    // Variable Initialization

    // Implementation
    autoD992DF16_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
    autoD992DF16_ai = 1;
    while (autoD992DF16_ai <= autoD992DF16_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(autoD992DF16_ai-1)+"]", 1);
        autoD992DF16_ai = autoD992DF16_ai + 1;
        if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            auto5BE8490E_ai = 1;
            auto5BE8490E_ae = UserDataInstanceCount("CampaignPerk")+1;
            while (auto5BE8490E_ai < auto5BE8490E_ae) {
                lv_indexPerk = UserDataInstance("CampaignPerk", auto5BE8490E_ai);
                auto5BE8490E_ai = auto5BE8490E_ai+1;
                if ((libComC_gf_CC_PerkRequiredObjective(lv_indexPerk) == lv_indexObjective)) {
                    if ((libComC_gf_MissionObjectiveStateCheck(lv_indexObjective, libComC_ge_MissionObjectiveState_Completed) == true)) {
                        TextExpressionSetToken("Param/Expression/lib_NCUI_0970A60A", "FINALTEXT", lv_finalBonusObjectiveText);
                        TextExpressionSetToken("Param/Expression/lib_NCUI_0970A60A", "EQUIPMENTNAME", libComC_gf_CC_PerkName(lv_indexPerk));
                        lv_finalBonusObjectiveText = TextExpressionAssemble("Param/Expression/lib_NCUI_0970A60A");
                    }
                    else {
                        if ((libNovC_gf_NC_PerkIsSecret(lv_indexPerk) == false)) {
                            TextExpressionSetToken("Param/Expression/lib_NCUI_9C63119F", "FINALTEXT", lv_finalBonusObjectiveText);
                            TextExpressionSetToken("Param/Expression/lib_NCUI_9C63119F", "EQUIPMENTNAME", libComC_gf_CC_PerkName(lv_indexPerk));
                            lv_finalBonusObjectiveText = TextExpressionAssemble("Param/Expression/lib_NCUI_9C63119F");
                        }

                    }
                    break;
                }

            }
            auto6993E792_ai = 1;
            auto6993E792_ae = UserDataInstanceCount("CampaignTechItem")+1;
            while (auto6993E792_ai < auto6993E792_ae) {
                lv_indexTechItem = UserDataInstance("CampaignTechItem", auto6993E792_ai);
                auto6993E792_ai = auto6993E792_ai+1;
                if ((libNovC_gf_NC_ArmyTechItemRequiredObjective(lv_indexTechItem) == lv_indexObjective)) {
                    if ((libComC_gf_MissionObjectiveStateCheck(lv_indexObjective, libComC_ge_MissionObjectiveState_Completed) == true)) {
                        TextExpressionSetToken("Param/Expression/lib_NCUI_28078F1F", "FINALTEXT", lv_finalBonusObjectiveText);
                        TextExpressionSetToken("Param/Expression/lib_NCUI_28078F1F", "TECHITEMNAME", libNovC_gf_NC_ArmyTechItemName(lv_indexTechItem));
                        lv_finalBonusObjectiveText = TextExpressionAssemble("Param/Expression/lib_NCUI_28078F1F");
                    }
                    else {
                        TextExpressionSetToken("Param/Expression/lib_NCUI_F0D60501", "FINALTEXT", lv_finalBonusObjectiveText);
                        TextExpressionSetToken("Param/Expression/lib_NCUI_F0D60501", "TECHITEMNAME", libNovC_gf_NC_ArmyTechItemName(lv_indexTechItem));
                        lv_finalBonusObjectiveText = TextExpressionAssemble("Param/Expression/lib_NCUI_F0D60501");
                    }
                    break;
                }

            }
        }

    }
    return lv_finalBonusObjectiveText;
}

int libNCUI_gf_NU_ArchivesScenePriority (string lp_scene) {
    string autoA51553CE_val;

    // Implementation
    autoA51553CE_val = lp_scene;
    if (autoA51553CE_val == "MP01_010") {
        return 955;
    }
    else if (autoA51553CE_val == "MP01_020") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova02")+1);
    }
    else if (autoA51553CE_val == "MP01_030") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova03")+1);
    }
    else if (autoA51553CE_val == "MP01_040") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova03")-1);
    }
    else if (autoA51553CE_val == "MP02_005") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova04")+1);
    }
    else if (autoA51553CE_val == "MP02_020") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova04")-1);
    }
    else if (autoA51553CE_val == "MP02_030") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova06")+1);
    }
    else if (autoA51553CE_val == "MP02_040") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova06")-1);
    }
    else if (autoA51553CE_val == "MP03_010") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova07")+1);
    }
    else if (autoA51553CE_val == "MP03_020") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova07")-1);
    }
    else if (autoA51553CE_val == "MP03_030") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova09")+1);
    }
    else if (autoA51553CE_val == "MP03_040") {
        return (libNCUI_gf_NU_ArchivesMissionPriority("Nova09")-1);
    }
    else {
    }
    return 1000;
}

int libNCUI_gf_NU_ArchivesMissionPriority (string lp_mission) {
    // Implementation
    if ((libComC_gf_MissionStatusCheck(lp_mission, libComC_ge_MissionStatus_Completed) == false)) {
        return 1500;
    }

    if ((libComC_gf_MissionStatusCheck(lp_mission, libComC_ge_MissionStatus_Completed) == true) && (libComC_gf_CampaignMapTypeCheck(lp_mission, c_mapKindMission) == true)) {
        return (500+((libComC_gf_MissionStatusAge(lp_mission, libComC_ge_MissionStatus_Completed)+1)*5));
    }

    return 0;
}

string libNCUI_gf_NU_ArchivesSelectedScene () {
    // Implementation
    return UserDataInstanceFromReference(DataTableGetString(true, libNCUI_gf_NU_ArchivesDataString(BattleReportPanelGetSelectedBattleReport(1))));
}

void libNCUI_gf_NU_ArchivesSetUV (string lp_side, fixed lp_value) {
    // Implementation
    DialogControlSendAnimationEvent(libNCUI_gv_nU_ArchivesMissionImage, PlayerGroupAll(), ("Scroll" + lp_side + "Play"));
    DialogControlSetAnimationTime(libNCUI_gv_nU_ArchivesMissionImage, PlayerGroupAll(), ("Scroll" + lp_side), lp_value);
    DialogControlSendAnimationEvent(libNCUI_gv_nU_ArchivesMissionImage, PlayerGroupAll(), ("Scroll" + lp_side + "Pause"));
}

void libNCUI_gf_NU_ArchivesSetUVs (fixed lp_centerX, fixed lp_centerY, fixed lp_scale) {
    // Variable Declarations
    fixed lv_ratioX;
    fixed lv_ratioY;
    fixed lv_top;
    fixed lv_bottom;
    fixed lv_left;
    fixed lv_right;

    // Variable Initialization

    // Implementation
    lv_ratioX = (IntToFixed(libNCUI_gv_pUC_ArchivesMissionTargetWidth) / IntToFixed(libNCUI_gv_pUC_ArchivesMissionLoadingWidth));
    lv_ratioY = (IntToFixed(libNCUI_gv_pUC_ArchivesMissionTargetHeight) / IntToFixed(libNCUI_gv_pUC_ArchivesMissionLoadingHeight));
    lv_top = (lp_centerY-(lv_ratioY*lp_scale/2.0));
    lv_bottom = (lp_centerY+(lv_ratioY*lp_scale/2.0));
    lv_left = (lp_centerX-(lv_ratioX*lp_scale/2.0));
    lv_right = (lp_centerX+(lv_ratioX*lp_scale/2.0));
    if (((lv_left <= 0.0) || (lv_right >= 1.0) || (lv_top <= 0.0) || (lv_bottom >= 1.0))) {
        return ;
    }

    libNCUI_gf_NU_ArchivesSetUV("Top", lv_top);
    libNCUI_gf_NU_ArchivesSetUV("Bottom", lv_bottom);
    libNCUI_gf_NU_ArchivesSetUV("Left", lv_left);
    libNCUI_gf_NU_ArchivesSetUV("Right", lv_right);
}

void libNCUI_gf_NU_MissionBriefingNewPhase (int lp_eventFrame, int lp_mission, int lp_phase) {
    // Implementation
    DialogControlSendAnimationEvent(lp_eventFrame, PlayerGroupAll(), ("MissionBriefing" + IntToString(lp_mission) + "_Phase" + IntToString(lp_phase)));
}

void libNCUI_gf_NU_MissionBriefingSendTransmission (int lp_character, string lp_transmission, bool lp_playSwapSound) {
    // Variable Declarations
    text lv_characterName;

    // Variable Initialization

    // Implementation
    if ((lp_character == libNCUI_ge_NU_MissionBriefingCharacters_None)) {
        lv_characterName = StringToText("");
    }
    else if ((lp_character == libNCUI_ge_NU_MissionBriefingCharacters_Hall)) {
        lv_characterName = StringExternal("Param/Value/lib_NCUI_6C720276");
    }
    else if ((lp_character == libNCUI_ge_NU_MissionBriefingCharacters_Horner)) {
        lv_characterName = StringExternal("Param/Value/lib_NCUI_3BC03AF5");
    }
    else if ((lp_character == libNCUI_ge_NU_MissionBriefingCharacters_Nova)) {
        lv_characterName = StringExternal("Param/Value/lib_NCUI_1F2C7E8E");
    }
    else if ((lp_character == libNCUI_ge_NU_MissionBriefingCharacters_Reigel)) {
        lv_characterName = StringExternal("Param/Value/lib_NCUI_5DA45F55");
    }
    else if ((lp_character == libNCUI_ge_NU_MissionBriefingCharacters_Stone)) {
        lv_characterName = StringExternal("Param/Value/lib_NCUI_5CF41942");
    }
    else if ((lp_character == libNCUI_ge_NU_MissionBriefingCharacters_Wrangler)) {
        lv_characterName = StringExternal("Param/Value/lib_NCUI_C7853AC7");
    }
    else if ((lp_character == libNCUI_ge_NU_MissionBriefingCharacters_Valerian)) {
        lv_characterName = StringExternal("Param/Value/lib_NCUI_004793EA");
    }
    if ((lp_playSwapSound == true)) {
        SoundPlayForPlayer(SoundLink("UI_Nova_BriefingPortraitSwap", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    libNtve_gf_SetDialogItemText(libNCUI_gv_nU_MissionPortraitTitle, lv_characterName, PlayerGroupAll());
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(SoundPortraitModel(SoundLink(lp_transmission, c_soundIndexAny))), PortraitGetTriggerControl(libNCUI_gv_nU_MissionPortrait), SoundLink(lp_transmission, c_soundIndexAny), 0.0, c_transmissionDurationAdd, false);
}

void libNCUI_gf_NU_MissionCreate () {
    int auto0C0878CB_val;

    // Implementation
    if ((libNCUI_gv_nU_MissionDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNCUI_gv_nU_MissionDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "NovaMissionPreview/MissionPreviewPanel");
    libNCUI_gv_nU_MissionPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypePanel, "MissionPreviewContainer");
    libNCUI_gv_nU_MissionBriefingContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionBriefingContainer, c_triggerControlTypePanel, "ModuleCenter");
    libNCUI_gv_nU_MissionBriefingModuleCenter = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionBriefingModuleCenter, c_triggerControlTypePanel, "ModuleCenterMaskingContainer");
    libNCUI_gv_nU_MissionBriefingModuleCenterMaskingContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionBriefingModuleCenterMaskingContainer, c_triggerControlTypePanel, "MissionBriefingAnimationContainer");
    libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionBriefingModuleCenterMaskingContainer, c_triggerControlTypePanel, "DiscoverBoxContainer");
    libNCUI_gv_nU_MissionBriefingDiscoverBoxContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionBriefingDiscoverBoxContainer, c_triggerControlTypePanel, "DiscoverBoxSatComm");
    libNCUI_gv_nU_MissionBriefingDiscoverBoxSatComm = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionBriefingDiscoverBoxSatComm, c_triggerControlTypeMovie, "MovieFrame");
    libNCUI_gv_nU_MissionBriefingMovieFrame = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypeButton, "LaunchButton");
    libNCUI_gv_nU_MissionLaunchButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypeButton, "CloseButton");
    libNCUI_gv_nU_MissionCloseButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypeButton, "QuitButton");
    libNCUI_gv_nU_MissionQuitButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypeButton, "ArchivesButton");
    libNCUI_gv_nU_MissionArchivesButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypeLabel, "MissionTitleLabel");
    libNCUI_gv_nU_MissionTitleLabel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypeLabel, "MissionSubtitleLabel");
    libNCUI_gv_nU_MissionObjectiveLabel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypePanel, "ManagementPanel");
    libNCUI_gv_nU_MissionManagementPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionManagementPanel, c_triggerControlTypeButton, "EquipmentButton");
    libNCUI_gv_nU_MissionManagementEquipmentButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionManagementPanel, c_triggerControlTypeButton, "UpgradesButton");
    libNCUI_gv_nU_MissionManagementUpgradesButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypePanel, "PortraitPanel");
    libNCUI_gv_nU_MissionPortraitPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPortraitPanel, c_triggerControlTypePortrait, "Portrait");
    libNCUI_gv_nU_MissionPortrait = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPortraitPanel, c_triggerControlTypeButton, "PlayButton");
    libNCUI_gv_nU_MissionPortraitPlayButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPortraitPanel, c_triggerControlTypeButton, "StopButton");
    libNCUI_gv_nU_MissionPortraitStopButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPortraitPanel, c_triggerControlTypeLabel, "PortraitTitle");
    libNCUI_gv_nU_MissionPortraitTitle = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypePanel, "AuthenticationScreen");
    libNCUI_gv_nU_MissionAuthentication = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionBriefingModuleCenterMaskingContainer, c_triggerControlTypePanel, "NewsWindowContainer");
    libNCUI_gv_nU_MissionNewsScreenContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionNewsScreenContainer, c_triggerControlTypeMovie, "MovieFrame");
    libNCUI_gv_nU_MissionNewsScreen = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionBriefingModuleCenterMaskingContainer, c_triggerControlTypeButton, "NewsButton");
    libNCUI_gv_nU_MissionNewsButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypeButton, "NewsCloseButton");
    libNCUI_gv_nU_MissionNewsCloseButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypeImage, "AchievementModule");
    libNCUI_gv_NU_MissionAchievementPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_NU_MissionAchievementPanel, c_triggerControlTypeAchievement, "Achievement1");
    libNCUI_gv_NU_MissionAchievementFrame[1] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_NU_MissionAchievementPanel, c_triggerControlTypeAchievement, "Achievement2");
    libNCUI_gv_NU_MissionAchievementFrame[2] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_NU_MissionAchievementPanel, c_triggerControlTypeAchievement, "Achievement3");
    libNCUI_gv_NU_MissionAchievementFrame[3] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypePulldown, "DifficultyPulldown");
    libNCUI_gv_nU_MissionDifficultyDropdown = DialogControlLastCreated();
    DialogControlAddItem(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty01Campaign"));
    DialogControlAddItem(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty02Campaign"));
    DialogControlAddItem(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty03Campaign"));
    DialogControlAddItem(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), StringExternal("UI/Difficulty04Campaign"));
    auto0C0878CB_val = PlayerDifficulty(1);
    if (auto0C0878CB_val == 1) {
        DialogControlSelectItem(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), 1);
    }
    else if (auto0C0878CB_val == 2) {
        DialogControlSelectItem(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), 2);
    }
    else if (auto0C0878CB_val == 3) {
        DialogControlSelectItem(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), 3);
    }
    else if (auto0C0878CB_val == 4) {
        DialogControlSelectItem(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), 4);
    }
    else {
    }
    DialogControlHookup(libNCUI_gv_nU_MissionPanel, c_triggerControlTypePanel, "RewardsModule");
    libNCUI_gv_nU_MissionRewardsModule = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionRewardsModule, c_triggerControlTypePanel, "RewardContainer1");
    libNCUI_gv_nU_MissionRewardsContainers[1] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionRewardsModule, c_triggerControlTypePanel, "RewardContainer2");
    libNCUI_gv_nU_MissionRewardsContainers[2] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionRewardsContainers[1], c_triggerControlTypeImage, "Icon");
    libNCUI_gv_nU_MissionRewardsIcons[1] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_MissionRewardsContainers[2], c_triggerControlTypeImage, "Icon");
    libNCUI_gv_nU_MissionRewardsIcons[2] = DialogControlLastCreated();
    libNCUI_gv_nU_MissionUpgradesButtonAlwaysOff = false;
}

void libNCUI_gf_NU_MissionInitFromData (string lp_mission) {
    // Variable Declarations
    int lv_clickableIndex;
    int lv_fluffIndex;
    bool lv_briefingCreated;

    // Variable Initialization

    // Implementation
    libNCUI_gv_NU_MissionNextMap = lp_mission;
    libNtve_gf_SetDialogItemText(libNCUI_gv_nU_MissionPortraitTitle, libComC_gf_CC_MapContactName(lp_mission), PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(libNCUI_gv_nU_MissionPortrait, libComC_gf_CC_MapContactPortrait(lp_mission), PlayerGroupAll());
    if ((libComC_gf_CC_MapContactActor(lp_mission) == null)) {
        libNtve_gf_SetDialogItemActor(libNCUI_gv_nU_MissionPortrait, "PortraitActor", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemActor(libNCUI_gv_nU_MissionPortrait, libComC_gf_CC_MapContactActor(lp_mission), PlayerGroupAll());
    }
    ConversationDataRegisterPortrait("char_Nova", PortraitGetTriggerControl(libNCUI_gv_nU_MissionPortrait));
    ConversationDataRegisterUnit("char_Nova", null);
    if ((lp_mission == "Nova01")) {
        DialogControlSetVisible(libNCUI_gv_nU_MissionManagementEquipmentButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libNCUI_gv_nU_MissionManagementEquipmentButton, PlayerGroupAll(), true);
    }
    if (((lp_mission == "Nova01") || (lp_mission == "Nova02"))) {
        DialogControlSetVisible(libNCUI_gv_nU_MissionManagementUpgradesButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libNCUI_gv_nU_MissionManagementUpgradesButton, PlayerGroupAll(), true);
        libNCUI_gf_NU_MissionEnableDisableUpgradesButton(true);
    }
    if (((lp_mission == "Nova01") || (lp_mission == "Nova02") || (libComC_gf_CC_StoryInSimulation() == true))) {
        DialogControlSetVisible(libNCUI_gv_nU_MissionArchivesButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libNCUI_gv_nU_MissionArchivesButton, PlayerGroupAll(), true);
    }
    if ((libNCUI_gv_nU_MissionBriefing != c_invalidDialogControlId)) {
        DialogControlDestroy(libNCUI_gv_nU_MissionBriefing);
        libNCUI_gv_nU_MissionBriefing = c_invalidDialogControlId;
    }

    if ((lp_mission == "Nova01")) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, c_triggerControlTypePanel, "NovaMission1BriefingAnimations/MissionBriefing1ContainerTemplate");
        lv_briefingCreated = true;
        libNCUI_gv_nU_MissionNewsActive = false;
    }
    else if ((lp_mission == "Nova02")) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, c_triggerControlTypePanel, "NovaMission2BriefingAnimations/MissionBriefing2ContainerTemplate");
        lv_briefingCreated = true;
        libNCUI_gv_nU_MissionNewsActive = false;
    }
    else if ((lp_mission == "Nova03")) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, c_triggerControlTypePanel, "NovaMission3BriefingAnimations/MissionBriefing3ContainerTemplate");
        lv_briefingCreated = true;
        libNCUI_gv_nU_MissionNewsActive = false;
    }
    else if ((lp_mission == "Nova04")) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, c_triggerControlTypePanel, "NovaMission4BriefingAnimations/MissionBriefing4ContainerTemplate");
        lv_briefingCreated = true;
        libNCUI_gv_nU_MissionNewsActive = true;
    }
    else if ((lp_mission == "Nova05")) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, c_triggerControlTypePanel, "NovaMission5BriefingAnimations/MissionBriefing5ContainerTemplate");
        lv_briefingCreated = true;
        libNCUI_gv_nU_MissionNewsActive = true;
    }
    else if ((lp_mission == "Nova06")) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, c_triggerControlTypePanel, "NovaMission6BriefingAnimations/MissionBriefing6ContainerTemplate");
        lv_briefingCreated = true;
        libNCUI_gv_nU_MissionNewsActive = true;
    }
    else if ((lp_mission == "Nova07")) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, c_triggerControlTypePanel, "NovaMission7BriefingAnimations/MissionBriefing7ContainerTemplate");
        lv_briefingCreated = true;
        libNCUI_gv_nU_MissionNewsActive = true;
    }
    else if ((lp_mission == "Nova08")) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, c_triggerControlTypePanel, "NovaMission8BriefingAnimations/MissionBriefing8ContainerTemplate");
        lv_briefingCreated = true;
        libNCUI_gv_nU_MissionNewsActive = true;
    }
    else if ((lp_mission == "Nova09")) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, c_triggerControlTypePanel, "NovaMission9BriefingAnimations/MissionBriefing9ContainerTemplate");
        lv_briefingCreated = true;
        libNCUI_gv_nU_MissionNewsActive = true;
    }
    if ((lv_briefingCreated == true)) {
        libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionBriefingModuleCenterAnimationContainer, PlayerGroupAll(), "StartAnimations");
        libNCUI_gv_nU_MissionBriefing = DialogControlLastCreated();
    }

    libNCUI_gf_NU_MissionSetRewards();
}

void libNCUI_gf_NU_MissionSetRewards () {
    int auto8EA8AC6E_ae;
    int auto8EA8AC6E_ai;
    int auto833E559F_ai;
    int auto833E559F_ae;
    int auto7D186AAC_ai;
    int auto7D186AAC_ae;
    int autoBA431F5A_val;
    int autoEE87639B_ae;
    int autoEE87639B_ai;

    // Variable Declarations
    int lv_rewardCount;
    int lv_rewardIndex;
    string[libNCUI_gv_nUC_MissionRewardsMaxCount + 1] lv_techItemRewards;
    string[libNCUI_gv_nUC_MissionRewardsMaxCount + 1] lv_equipmentRewards;
    string lv_indexObjective;
    string lv_indexPerk;
    string lv_indexTechItem;

    // Variable Initialization

    // Implementation
    auto8EA8AC6E_ae = CatalogFieldValueCount(c_gameCatalogMap, libNCUI_gf_NU_NextAvailableMission(), "ObjectiveArray", 1);
    auto8EA8AC6E_ai = 1;
    while (auto8EA8AC6E_ai <= auto8EA8AC6E_ae) {
        lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, libNCUI_gf_NU_NextAvailableMission(), "ObjectiveArray["+IntToString(auto8EA8AC6E_ai-1)+"]", 1);
        auto8EA8AC6E_ai = auto8EA8AC6E_ai + 1;
        if ((libComC_gf_MissionObjectiveIsPrimary(lv_indexObjective) == false)) {
            auto833E559F_ai = 1;
            auto833E559F_ae = UserDataInstanceCount("CampaignPerk")+1;
            while (auto833E559F_ai < auto833E559F_ae) {
                lv_indexPerk = UserDataInstance("CampaignPerk", auto833E559F_ai);
                auto833E559F_ai = auto833E559F_ai+1;
                if ((libComC_gf_CC_PerkRequiredObjective(lv_indexPerk) == lv_indexObjective) && (libNovC_gf_NC_PerkIsSecret(lv_indexPerk) == false)) {
                    lv_rewardCount += 1;
                    lv_equipmentRewards[lv_rewardCount] = lv_indexPerk;
                }

            }
            auto7D186AAC_ai = 1;
            auto7D186AAC_ae = UserDataInstanceCount("CampaignTechItem")+1;
            while (auto7D186AAC_ai < auto7D186AAC_ae) {
                lv_indexTechItem = UserDataInstance("CampaignTechItem", auto7D186AAC_ai);
                auto7D186AAC_ai = auto7D186AAC_ai+1;
                if ((libNovC_gf_NC_ArmyTechItemRequiredObjective(lv_indexTechItem) == lv_indexObjective)) {
                    lv_rewardCount += 1;
                    lv_techItemRewards[lv_rewardCount] = lv_indexTechItem;
                }

            }
        }

    }
    autoBA431F5A_val = lv_rewardCount;
    if (autoBA431F5A_val == 1) {
        DialogControlSetAnimationState(libNCUI_gv_nU_MissionRewardsModule, PlayerGroupAll(), "RewardsCountState", "Rewards1");
        DialogControlSetVisible(libNCUI_gv_nU_MissionRewardsModule, PlayerGroupAll(), true);
        libNCUI_gv_nU_MissionRewardsEnabled = true;
    }
    else if (autoBA431F5A_val == 2) {
        DialogControlSetAnimationState(libNCUI_gv_nU_MissionRewardsModule, PlayerGroupAll(), "RewardsCountState", "Rewards2");
        DialogControlSetVisible(libNCUI_gv_nU_MissionRewardsModule, PlayerGroupAll(), true);
        libNCUI_gv_nU_MissionRewardsEnabled = true;
    }
    else {
        DialogControlSetAnimationState(libNCUI_gv_nU_MissionRewardsModule, PlayerGroupAll(), "RewardsCountState", "Rewards0");
        DialogControlSetVisible(libNCUI_gv_nU_MissionRewardsModule, PlayerGroupAll(), false);
        libNCUI_gv_nU_MissionRewardsEnabled = false;
        return ;
    }
    autoEE87639B_ae = lv_rewardCount;
    autoEE87639B_ai = 1;
    lv_rewardIndex = 1;
    for ( ; ( (autoEE87639B_ai >= 0 && lv_rewardIndex <= autoEE87639B_ae) || (autoEE87639B_ai <= 0 && lv_rewardIndex >= autoEE87639B_ae) ) ; lv_rewardIndex += autoEE87639B_ai ) {
        if ((lv_equipmentRewards[lv_rewardIndex] != null)) {
            libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_MissionRewardsIcons[lv_rewardIndex], libComC_gf_CC_PerkIcon(lv_equipmentRewards[lv_rewardIndex]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(libNCUI_gv_nU_MissionRewardsIcons[lv_rewardIndex], libNovC_gf_NC_PerkTooltipReward(lv_equipmentRewards[lv_rewardIndex]), PlayerGroupAll());
            if ((libComC_gf_CC_StoryInSimulation() == true) && (libComC_gf_MissionObjectiveStateCheck(libComC_gf_CC_PerkRequiredObjective(lv_equipmentRewards[lv_rewardIndex]), libComC_ge_MissionObjectiveState_Completed) == true)) {
                DialogControlSetAnimationState(libNCUI_gv_nU_MissionRewardsContainers[lv_rewardIndex], PlayerGroupAll(), "EarnedState", "Earned");
            }
            else {
                DialogControlSetAnimationState(libNCUI_gv_nU_MissionRewardsContainers[lv_rewardIndex], PlayerGroupAll(), "EarnedState", "Unearned");
            }
        }
        else if ((lv_techItemRewards[lv_rewardIndex] != null)) {
            libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_MissionRewardsIcons[lv_rewardIndex], libNovC_gf_NC_ArmyTechItemImage(lv_techItemRewards[lv_rewardIndex]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(libNCUI_gv_nU_MissionRewardsIcons[lv_rewardIndex], libNovC_gf_NC_ArmyTechItemTooltipReward(lv_techItemRewards[lv_rewardIndex]), PlayerGroupAll());
            if ((libComC_gf_CC_StoryInSimulation() == true) && (libComC_gf_MissionObjectiveStateCheck(libNovC_gf_NC_ArmyTechItemRequiredObjective(lv_techItemRewards[lv_rewardIndex]), libComC_ge_MissionObjectiveState_Completed) == true)) {
                DialogControlSetAnimationState(libNCUI_gv_nU_MissionRewardsContainers[lv_rewardIndex], PlayerGroupAll(), "EarnedState", "Earned");
            }
            else {
                DialogControlSetAnimationState(libNCUI_gv_nU_MissionRewardsContainers[lv_rewardIndex], PlayerGroupAll(), "EarnedState", "Unearned");
            }
        }
    }
}

void libNCUI_gf_NU_MissionDisplay (string lp_mission) {
    // Variable Declarations
    string lv_indexPerk;
    bool lv_briefingAutoPlaying;

    // Variable Initialization

    // Implementation
    libNCUI_gf_NU_MissionCreate();
    libNCUI_gf_NU_MissionInitFromData(lp_mission);
    libNCUI_gf_NU_MissionPreload(lp_mission);
    libNCUI_gf_NU_MissionUpdate();
    libNCST_gf_StoryCutsceneFade(true, 0.0, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    GameSetLighting("CLight", 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Nova01MissionLaunch", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    DialogSetVisible(libNCUI_gv_nU_MissionDialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libNCUI_gv_nU_MissionManagementPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libNCUI_gv_nU_MissionPortraitPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libNCUI_gv_nU_MissionPanel, PlayerGroupAll(), true);
    if ((libComC_gf_CampaignMapTypeCheck(libComC_gf_CurrentMap(), c_mapKindMission) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_MissionLaunchUI);
    }

    if ((libComC_gf_CC_StoryInSimulation() == false) && (libNCUI_gv_nU_MissionBriefingPlayed == false) && (libComC_gf_LastMissionConditionCheck(libComC_ge_MissionCondition_Simulation) == false) && (libNCST_gf_NextAvailableMission() != "Nova01")) {
        lv_briefingAutoPlaying = true;
        TriggerExecute(libNCUI_gt_NU_MissionLoginScreenPlay, true, false);
    }
    else {
        lv_briefingAutoPlaying = false;
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionPanel, PlayerGroupAll(), "EndBriefingEarly");
    }
    if ((libComC_gf_CC_StoryInSimulation() == true)) {
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionPanel, PlayerGroupAll(), "StartFromArchive");
    }

    if ((DialogControlIsVisible(libNCUI_gv_nU_MissionManagementEquipmentButton, 1) == true) && (libNovC_gf_NC_PerkNewEquipmentAvailable() == true)) {
        libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_MissionManagementEquipmentButton, libNCUI_ge_NU_DialogItemNewState_NewItem);
    }
    else {
        libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_MissionManagementEquipmentButton, libNCUI_ge_NU_DialogItemNewState_NoNewItem);
    }
    if ((libNCUI_gf_NU_NextAvailableMission() != "Nova07") && (DialogControlIsVisible(libNCUI_gv_nU_MissionManagementUpgradesButton, 1) == true) && (libNovC_gf_NC_ArmyTechItemNewItemsAvailable() == true)) {
        libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_MissionManagementUpgradesButton, libNCUI_ge_NU_DialogItemNewState_NewItem);
    }
    else {
        libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_MissionManagementUpgradesButton, libNCUI_ge_NU_DialogItemNewState_NoNewItem);
    }
    if ((libNovC_gf_NC_MapNewsReport(lp_mission) != null) && (lv_briefingAutoPlaying == false)) {
        TriggerEnable(libNCUI_gt_NU_MissionNewsButtonClicked, true);
        DialogControlSetVisible(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), true);
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), "NewsStandardDisplay");
    }
    else {
        TriggerEnable(libNCUI_gt_NU_MissionNewsButtonClicked, false);
        DialogControlSetVisible(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), false);
    }
    TriggerEnable(libNCUI_gt_NU_MissionCloseButtonClicked, true);
    TriggerEnable(libNCUI_gt_NU_MissionArchivesButtonClicked, true);
    TriggerEnable(libNCUI_gt_NU_MissionLaunchButtonClicked, true);
    TriggerEnable(libNCUI_gt_NU_MissionPlayButtonClicked, true);
    TriggerEnable(libNCUI_gt_NU_MissionQuitButtonClicked, true);
}

void libNCUI_gf_NU_MissionClose () {
    // Variable Declarations
    int lv_achievementIndex;

    // Variable Initialization

    // Implementation
    ConversationDataStop();
    TransmissionClearAll();
    DialogClearSubtitlePositionOverrideControl();
    DialogDestroy(libNCUI_gv_nU_MissionDialog);
    libNCUI_gv_nU_MissionDialog = c_invalidDialogId;
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    TriggerEnable(libNCUI_gt_NU_MissionCloseButtonClicked, false);
    libNCUI_gf_NU_MissionNewsCalloutSystemOff();
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledMouseClick, false);
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledESC, false);
}

void libNCUI_gf_NU_MissionTransition () {
    // Variable Declarations
    int lv_achievementIndex;

    // Variable Initialization

    // Implementation
    ConversationDataStop();
    TransmissionClearAll();
    DialogClearSubtitlePositionOverrideControl();
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    TriggerEnable(libNCUI_gt_NU_MissionCloseButtonClicked, false);
    TriggerEnable(libNCUI_gt_NU_MissionLaunchButtonClicked, false);
    TriggerEnable(libNCUI_gt_NU_MissionQuitButtonClicked, false);
    libNCUI_gf_NU_MissionNewsCalloutSystemOff();
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledMouseClick, false);
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledESC, false);
}

void libNCUI_gf_NU_MissionUpdate () {
    int autoD4BA0498_ae;
    int autoD4BA0498_ai;

    // Variable Declarations
    string lv_rewardCategory;
    int lv_rewardCount;
    int lv_mainObjectiveRewardCount;
    int lv_achievementIndex;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libNCUI_gv_nU_MissionTitleLabel, libComC_gf_CC_MapName(libNCUI_gf_NU_NextAvailableMission()), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libNCUI_gv_nU_MissionObjectiveLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogMap, libNCUI_gf_NU_NextAvailableMission(), "PrimaryObjectiveText", c_playerAny)), PlayerGroupAll());
    autoD4BA0498_ae = 3;
    autoD4BA0498_ai = 1;
    lv_achievementIndex = 1;
    for ( ; ( (autoD4BA0498_ai >= 0 && lv_achievementIndex <= autoD4BA0498_ae) || (autoD4BA0498_ai <= 0 && lv_achievementIndex >= autoD4BA0498_ae) ) ; lv_achievementIndex += autoD4BA0498_ai ) {
        if ((libNCUI_gv_NU_MissionAchievementFrame[lv_achievementIndex] != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemAchievement(libNCUI_gv_NU_MissionAchievementFrame[lv_achievementIndex], UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(libNCUI_gf_NU_NextAvailableMission()), "Achievements", lv_achievementIndex), PlayerGroupAll());
        }

    }
    if ((libComC_gf_CC_StoryInSimulation() == false)) {
        DialogControlSetVisible(libNCUI_gv_nU_MissionQuitButton, PlayerGroupAll(), true);
        DialogControlSetVisible(libNCUI_gv_nU_MissionCloseButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libNCUI_gv_nU_MissionQuitButton, PlayerGroupAll(), false);
        DialogControlSetVisible(libNCUI_gv_nU_MissionCloseButton, PlayerGroupAll(), true);
    }
}

void libNCUI_gf_NU_MissionPreload (string lp_mission) {
    // Implementation
    if ((libComC_gf_CC_MapContactPortrait(lp_mission) != null)) {
        libNtve_gf_PreloadModelObject(libComC_gf_CC_MapContactPortrait(lp_mission), false);
    }

    ConversationDataPreloadLines(libComC_gf_MissionPitch(lp_mission));
}

void libNCUI_gf_NU_MissionBriefingPlay () {
    string auto0FA5C453_val;

    // Implementation
    libNCUI_gf_NU_MissionNewsCalloutSystemOff();
    if ((libNovC_gf_NC_MapNewsReport(libNCUI_gf_NU_NextAvailableMission()) != null)) {
        TriggerEnable(libNCUI_gt_NU_MissionNewsButtonClicked, false);
        DialogControlSetVisible(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), false);
    }

    TriggerEnable(libNCUI_gt_NU_MissionEscPressed, true);
    DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionPanel, PlayerGroupAll(), "StartPreview");
    if ((libNCUI_gv_nU_MissionRewardsEnabled == true)) {
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionRewardsModule, PlayerGroupAll(), "HideRewardsModule");
    }

    DialogControlSetEnabled(libNCUI_gv_nU_MissionManagementEquipmentButton, PlayerGroupAll(), false);
    libNCUI_gf_NU_MissionEnableDisableUpgradesButton(false);
    libNCUI_gv_nU_MissionBriefingPlayed = true;
    auto0FA5C453_val = libNCUI_gf_NU_NextAvailableMission();
    if (auto0FA5C453_val == "Nova02") {
        libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations = libNCUI_gt_NU_Nova02BriefingAnimations;
    }
    else if (auto0FA5C453_val == "Nova03") {
        libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations = libNCUI_gt_NU_Nova03BriefingAnimations;
    }
    else if (auto0FA5C453_val == "Nova04") {
        libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations = libNCUI_gt_NU_Nova04BriefingAnimations;
    }
    else if (auto0FA5C453_val == "Nova05") {
        libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations = libNCUI_gt_NU_Nova05BriefingAnimations;
    }
    else if (auto0FA5C453_val == "Nova06") {
        libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations = libNCUI_gt_NU_Nova06BriefingAnimations;
    }
    else if (auto0FA5C453_val == "Nova07") {
        libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations = libNCUI_gt_NU_Nova07BriefingAnimations;
    }
    else if (auto0FA5C453_val == "Nova08") {
        libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations = libNCUI_gt_NU_Nova08BriefingAnimations;
    }
    else if (auto0FA5C453_val == "Nova09") {
        libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations = libNCUI_gt_NU_Nova09BriefingAnimations;
    }
    else {
        libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations = null;
    }
    if ((libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations != null)) {
        TriggerExecute(libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations, true, false);
    }

}

void libNCUI_gf_NU_MissionBriefingEnd () {
    // Implementation
    TriggerEnable(libNCUI_gt_NU_MissionEscPressed, false);
    TransmissionClearAll();
    ConversationDataStop();
    DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionPanel, PlayerGroupAll(), "EndPreview");
    if ((libNCUI_gv_nU_MissionBriefingExtraMovieSound != null)) {
        SoundStop(libNCUI_gv_nU_MissionBriefingExtraMovieSound, true);
        libNCUI_gv_nU_MissionBriefingExtraMovieSound = null;
    }

    if ((libNovC_gf_NC_MapNewsReport(libNCUI_gf_NU_NextAvailableMission()) != null)) {
        TriggerEnable(libNCUI_gt_NU_MissionNewsButtonClicked, true);
        DialogControlSetVisible(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), true);
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), "NewsStandardDisplay");
    }

    if ((libNCUI_gv_nU_MissionRewardsEnabled == true)) {
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionRewardsModule, PlayerGroupAll(), "ShowRewardsModule");
    }

    DialogControlSetEnabled(libNCUI_gv_nU_MissionManagementEquipmentButton, PlayerGroupAll(), true);
    libNCUI_gf_NU_MissionEnableDisableUpgradesButton(true);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, (""), PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(libNCUI_gv_nU_MissionPortrait, libComC_gf_CC_MapContactPortrait(libNCUI_gf_NU_NextAvailableMission()), PlayerGroupAll());
    if ((libComC_gf_CC_MapContactActor(libNCUI_gf_NU_NextAvailableMission()) == null)) {
        libNtve_gf_SetDialogItemActor(libNCUI_gv_nU_MissionPortrait, "PortraitActor", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemActor(libNCUI_gv_nU_MissionPortrait, libComC_gf_CC_MapContactActor(libNCUI_gf_NU_NextAvailableMission()), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemText(libNCUI_gv_nU_MissionPortraitTitle, libComC_gf_CC_MapContactName(libNCUI_gf_NU_NextAvailableMission()), PlayerGroupAll());
    if ((libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations != null)) {
        TriggerStop(libNCUI_gv_nU_MissionBriefingCurrentlyPlayingAnimations);
        TriggerStop(libNCUI_gv_nU_MissionBriefingCurrentlyPlayingTransmissions);
    }

    libNCUI_gf_NU_MissionNewsCalloutSystemOn();
}

void libNCUI_gf_NU_MissionPitchPlay () {
    // Implementation
    DialogControlSetVisible(libNCUI_gv_nU_MissionPortraitPlayButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libNCUI_gv_nU_MissionPortraitStopButton, PlayerGroupAll(), true);
    ConversationDataRun(libComC_gf_MissionPitch(libNCUI_gf_NU_NextAvailableMission()), PlayerGroupAll(), c_conversationSkipNone, true);
    if ((libNCUI_gv_nU_MissionDialog != c_invalidDialogId)) {
        DialogControlSetVisible(libNCUI_gv_nU_MissionPortraitPlayButton, PlayerGroupAll(), true);
        DialogControlSetVisible(libNCUI_gv_nU_MissionPortraitStopButton, PlayerGroupAll(), false);
    }

}

void libNCUI_gf_NU_MissionNewsCalloutSystemOn () {
    // Implementation
    if ((libNCUI_gv_nU_MissionNewsButtonStayNormal == false) && (libNCUI_gv_nU_MissionNewsActive == true)) {
        TimerStart(libNCUI_gv_nU_MissionNewsButtonCalloutModeTimer, libNCUI_gv_nU_MissionNewsCalloutDelay, false, c_timeReal);
        TriggerEnable(libNCUI_gt_NU_MissionNewsButtonCalloutStart, true);
    }

}

void libNCUI_gf_NU_MissionNewsCalloutSystemOff () {
    // Implementation
    TriggerEnable(libNCUI_gt_NU_MissionNewsButtonCalloutStart, false);
    TriggerEnable(libNCUI_gt_NU_MissionNewsButtonCalloutEnd, false);
    libNtve_gf_StopTimer(libNCUI_gv_nU_MissionNewsButtonCalloutModeTimer);
    libNtve_gf_StopTimer(libNCUI_gv_nU_MissionNewsButtonNormalModeTimer);
    libNCUI_gv_nU_MissionNewsButtonIsCallout = false;
}

void libNCUI_gf_NU_MissionNewsEnd () {
    // Implementation
    TriggerEnable(libNCUI_gt_NU_MissionNewsEnded, false);
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledMouseClick, false);
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledESC, false);
    TriggerEnable(libNCUI_gt_NU_MissionNewsButtonClicked, true);
    DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionNewsScreenContainer, PlayerGroupAll(), "NewsExit");
    DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), "NewsStandardDisplay");
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionNewsScreen, (""), PlayerGroupAll());
    DialogControlSetEnabled(libNCUI_gv_nU_MissionLaunchButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), true);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionCloseButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionArchivesButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionManagementEquipmentButton, PlayerGroupAll(), true);
    libNCUI_gf_NU_MissionEnableDisableUpgradesButton(true);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionQuitButton, PlayerGroupAll(), true);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionPortraitPlayButton, PlayerGroupAll(), true);
}

void libNCUI_gf_NU_MissionEnableDisableUpgradesButton (bool lp_enableDisable) {
    // Implementation
    if (((libNCUI_gv_nU_MissionUpgradesButtonAlwaysOff == true) || (lp_enableDisable == false))) {
        DialogControlSetEnabled(libNCUI_gv_nU_MissionManagementUpgradesButton, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetEnabled(libNCUI_gv_nU_MissionManagementUpgradesButton, PlayerGroupAll(), true);
    }
}

string libNCUI_gf_NU_MissionProperty (string lp_field) {
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogMap, (libNCUI_gf_NU_NextAvailableMission()), lp_field, c_playerAny);
}

int libNCUI_gf_NU_MissionSelectedDifficulty () {
    int autoC93DCDD8_val;

    // Implementation
    autoC93DCDD8_val = DialogControlGetSelectedItem(libNCUI_gv_nU_MissionDifficultyDropdown, 1);
    if (autoC93DCDD8_val == 1) {
        return 1;
    }
    else if (autoC93DCDD8_val == 2) {
        return 2;
    }
    else if (autoC93DCDD8_val == 3) {
        return 3;
    }
    else if (autoC93DCDD8_val == 4) {
        return 4;
    }
    else {
    }
    return 1;
}

void libNCUI_gf_NU_DialogItemNewStateSet (int lp_dialogItem, int lp_state) {
    // Implementation
    if ((lp_state == libNCUI_ge_NU_DialogItemNewState_NoNewItem)) {
        DialogControlSetAnimationState(lp_dialogItem, PlayerGroupAll(), "NewItemState", "NoNewItem ");
    }
    else if ((lp_state == libNCUI_ge_NU_DialogItemNewState_NewItem)) {
        DialogControlSetAnimationState(lp_dialogItem, PlayerGroupAll(), "NewItemState", "NewItem");
    }
}

void libNCUI_gf_NU_PlayPortraitPitch (string lp_pitch, int lp_portrait) {
    int auto8B731360_ai;
    int auto8B731360_ae;

    // Variable Declarations
    string lv_indexClickable;

    // Variable Initialization

    // Implementation
    auto8B731360_ai = 1;
    auto8B731360_ae = UserDataInstanceCount("Clickable")+1;
    while (auto8B731360_ai < auto8B731360_ae) {
        lv_indexClickable = UserDataInstance("Clickable", auto8B731360_ai);
        ConversationDataRegisterPortrait(libNovC_gf_NC_ClickableConversationLink(lv_indexClickable), lp_portrait);
        ConversationDataRegisterUnit(libNovC_gf_NC_ClickableConversationLink(lv_indexClickable), null);
        auto8B731360_ai = auto8B731360_ai+1;
    }
    ConversationDataRun(lp_pitch, PlayerGroupAll(), c_conversationSkipNone, true);
}

string libNCUI_gf_NU_NextAvailableMission () {
    int autoFD85C9C2_ae;
    int autoFD85C9C2_ai;

    // Variable Declarations
    string lv_indexMission;

    // Variable Initialization

    // Implementation
    if ((libNCUI_gv_NU_MissionNextMap == null)) {
        autoFD85C9C2_ae = CatalogEntryCount(c_gameCatalogMap);
        autoFD85C9C2_ai = 1;
        while (autoFD85C9C2_ai <= autoFD85C9C2_ae) {
            lv_indexMission = CatalogEntryGet(c_gameCatalogMap, autoFD85C9C2_ai);
            autoFD85C9C2_ai = autoFD85C9C2_ai + 1;
            if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
                if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Available) == true)) {
                    libNCUI_gv_NU_MissionNextMap = lv_indexMission;
                    break;
                }

            }    
        }
    }

    return libNCUI_gv_NU_MissionNextMap;
}

void libNCUI_gf_NU_UpgradesUpdateData () {
    int autoF0F09191_ai;
    int autoF0F09191_ae;
    int auto75980C97_ae;
    int auto75980C97_ai;

    // Variable Declarations
    string lv_indexTechItem;
    string lv_indexArmyUnit;
    int lv_unitSlotIndex;

    // Variable Initialization

    // Implementation
    autoF0F09191_ai = 1;
    autoF0F09191_ae = UserDataInstanceCount("CampaignTechItem")+1;
    while (autoF0F09191_ai < autoF0F09191_ae) {
        lv_indexTechItem = UserDataInstance("CampaignTechItem", autoF0F09191_ai);
        autoF0F09191_ai = autoF0F09191_ai+1;
        libNovC_gf_NC_ArmyTechItemAssignedUnitSet(lv_indexTechItem, null);
    }
    auto75980C97_ae = libNCUI_gv_nUC_UpgradesUnitSlotCount;
    auto75980C97_ai = 1;
    lv_unitSlotIndex = 1;
    for ( ; ( (auto75980C97_ai >= 0 && lv_unitSlotIndex <= auto75980C97_ae) || (auto75980C97_ai <= 0 && lv_unitSlotIndex >= auto75980C97_ae) ) ; lv_unitSlotIndex += auto75980C97_ai ) {
        lv_indexArmyUnit = libNCUI_gf_NU_UpgradesArmyUnitInSlot(lv_unitSlotIndex);
        if ((libComC_gf_NC_StoryArmyUnitState(lv_indexArmyUnit) != c_armyUnitStateLocked) && (libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lv_unitSlotIndex] != 0)) {
            libNovC_gf_NC_ArmyTechItemAssignedUnitSet(libNCUI_gf_NU_UpgradesTechItemInSlot(lv_unitSlotIndex, libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lv_unitSlotIndex]), lv_indexArmyUnit);
        }

    }
}

void libNCUI_gf_NU_UpgradesCreate () {
    int auto383664CE_ae;
    int auto383664CE_ai;
    int autoB1924854_ae;
    int autoB1924854_ai;

    // Variable Declarations
    int lv_upgradeSlotIndex;
    int lv_upgradeItemsIndex;

    // Variable Initialization

    // Implementation
    if ((libNCUI_gv_nU_UpgradesDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNCUI_gv_nU_UpgradesDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libNCUI_gv_nU_UpgradesDialog, c_triggerControlTypePanel, "NovaMissionUpgrades/MissionUpgradesPanel");
    libNCUI_gv_nU_UpgradesPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesPanel, c_triggerControlTypeButton, "ResetButton");
    libNCUI_gv_nU_UpgradesTutorialResetButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesPanel, c_triggerControlTypeButton, "CloseButton");
    libNCUI_gv_nU_UpgradesCloseButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesPanel, c_triggerControlTypePanel, "UpgradesOverviewContainer");
    libNCUI_gv_nU_UpgradesOverviewContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesOverviewContainer, c_triggerControlTypePanel, "UpgradesSectionalContainer");
    libNCUI_gv_nU_UpgradesSectionalContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSectionalContainer, c_triggerControlTypePanel, "SelectionContainer");
    libNCUI_gv_nU_UpgradesSelectionContainer = DialogControlLastCreated();
    auto383664CE_ae = libNCUI_gv_nUC_UpgradesUnitSlotCount;
    auto383664CE_ai = 1;
    lv_upgradeSlotIndex = 1;
    for ( ; ( (auto383664CE_ai >= 0 && lv_upgradeSlotIndex <= auto383664CE_ae) || (auto383664CE_ai <= 0 && lv_upgradeSlotIndex >= auto383664CE_ae) ) ; lv_upgradeSlotIndex += auto383664CE_ai ) {
        DialogControlHookup(libNCUI_gv_nU_UpgradesSelectionContainer, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("SelectionItem" + IntToString(lv_upgradeSlotIndex))));
        libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex] = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], c_triggerControlTypeImage, "UnitIcon");
        libNCUI_gv_nU_UpgradesSelectionUnitIcons[lv_upgradeSlotIndex] = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], c_triggerControlTypeImage, "SelectionIcon");
        libNCUI_gv_nU_UpgradesSelectionIcons[lv_upgradeSlotIndex] = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], c_triggerControlTypeLabel, "CounterLabel");
        libNCUI_gv_nU_UpgradesSelectionCounterLabels[lv_upgradeSlotIndex] = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], c_triggerControlTypeLabel, "UnitLabel");
        libNCUI_gv_nU_UpgradesSelectionUnitLabels[lv_upgradeSlotIndex] = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], c_triggerControlTypeLabel, "UpgradeLabel");
        libNCUI_gv_nU_UpgradesSelectionUpgradeLabels[lv_upgradeSlotIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libNCUI_gv_nU_UpgradesSectionalContainer, c_triggerControlTypePanel, "SubselectionContainer");
    libNCUI_gv_nU_UpgradesSubselectionContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionContainer, c_triggerControlTypeLabel, "HeaderLabel");
    libNCUI_gv_nU_UpgradesSubselectionLabel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionContainer, c_triggerControlTypePanel, "MovieFrameContainer");
    libNCUI_gv_nU_UpgradesSubselectionMovieContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionMovieContainer, c_triggerControlTypeMovie, "MovieFrame");
    libNCUI_gv_nU_UpgradesSubselectionMovie = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionContainer, c_triggerControlTypeButton, "EquipItemButton");
    libNCUI_gv_nU_UpgradesSubselectionEquipButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionEquipButton, c_triggerControlTypeLabel, "Label");
    libNCUI_gv_nU_UpgradesSubselectionEquipButtonLabel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionContainer, c_triggerControlTypePanel, "SelectedItemInfoContainer");
    libNCUI_gv_nU_UpgradesSubselectionItemInfoContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionItemInfoContainer, c_triggerControlTypeLabel, "SelectedItemTitle");
    libNCUI_gv_nU_UpgradesSubselectionItemTitle = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionItemInfoContainer, c_triggerControlTypeLabel, "SelectedItemDescription");
    libNCUI_gv_nU_UpgradesSubselectionItemDescription = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionContainer, c_triggerControlTypePanel, "SelectedItemStatusContainer");
    libNCUI_gv_nU_UpgradesSubselectionItemStatusContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionItemStatusContainer, c_triggerControlTypeLabel, "SelectedItemStatusLabel");
    libNCUI_gv_nU_UpgradesSubselectionItemStatusLabel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionItemStatusContainer, c_triggerControlTypeLabel, "SelectedItemStatusUnitLabel");
    libNCUI_gv_nU_UpgradesSubselectionItemStatusUnitLabel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionItemStatusContainer, c_triggerControlTypeImage, "SelectedItemStatusUnitIcon");
    libNCUI_gv_nU_UpgradesSubselectionItemStatusUnitIcon = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionContainer, c_triggerControlTypePanel, "SubselectionItemsContainer");
    libNCUI_gv_nU_UpgradesSubselectionPanel = DialogControlLastCreated();
    autoB1924854_ae = libNCUI_gv_nUC_UpgradesTechItemCount;
    autoB1924854_ai = 1;
    lv_upgradeItemsIndex = 1;
    for ( ; ( (autoB1924854_ai >= 0 && lv_upgradeItemsIndex <= autoB1924854_ae) || (autoB1924854_ai <= 0 && lv_upgradeItemsIndex >= autoB1924854_ae) ) ; lv_upgradeItemsIndex += autoB1924854_ai ) {
        DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("SubselectionItem" + IntToString(lv_upgradeItemsIndex))));
        libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_upgradeItemsIndex] = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_upgradeItemsIndex], c_triggerControlTypeImage, "Icon");
        libNCUI_gv_nU_UpgradesSubselectionItemIcons[lv_upgradeItemsIndex] = DialogControlLastCreated();
    }
}

void libNCUI_gf_NU_UpgradesInitFromData () {
    int auto39EA3AA4_ae;
    int auto39EA3AA4_ai;
    int autoD4038800_ae;
    int autoD4038800_ai;
    int auto9C8C458B_ae;
    int auto9C8C458B_ai;
    int auto1D9B1EB7_ae;
    int auto1D9B1EB7_ai;
    int auto808FC461_ai;
    int auto808FC461_ae;
    int auto5C4EAFD3_ai;
    int auto5C4EAFD3_ae;

    // Variable Declarations
    int lv_upgradeSlotIndex;
    int lv_currentTechItemSubsectionIndex;
    string lv_currentArmyUnit;
    string lv_indexTechItem;
    string lv_indexArmyUnit;
    int lv_unitListIndex;
    int lv_unitSlotIndex;
    int lv_techItemIndex;

    // Variable Initialization

    // Implementation
    if ((libComC_gf_CC_StoryInSimulation() == true)) {
        libNCUI_gv_nU_UpgradesTutorialStage = libNCUI_gv_nUC_UpgradesTutorialEndStage;
    }

    auto39EA3AA4_ae = libNCUI_gv_nUC_UpgradesUnitSlotCount;
    auto39EA3AA4_ai = 1;
    lv_unitSlotIndex = 1;
    for ( ; ( (auto39EA3AA4_ai >= 0 && lv_unitSlotIndex <= auto39EA3AA4_ae) || (auto39EA3AA4_ai <= 0 && lv_unitSlotIndex >= auto39EA3AA4_ae) ) ; lv_unitSlotIndex += auto39EA3AA4_ai ) {
        autoD4038800_ae = libNCUI_gv_nUC_UpgradesTechItemCount;
        autoD4038800_ai = 1;
        lv_techItemIndex = 1;
        for ( ; ( (autoD4038800_ai >= 0 && lv_techItemIndex <= autoD4038800_ae) || (autoD4038800_ai <= 0 && lv_techItemIndex >= autoD4038800_ae) ) ; lv_techItemIndex += autoD4038800_ai ) {
            libNCUI_gv_nU_UpgradesTechItemUnitListIndex[lv_unitSlotIndex][lv_techItemIndex] = 0;
            libNCUI_gv_nU_UpgradesTechItemOnEachArmyUnit[lv_unitSlotIndex][lv_techItemIndex] = null;
            libNCUI_gf_NU_UpgradesAssignItem(lv_unitSlotIndex, lv_techItemIndex, false);
        }
    }
    auto9C8C458B_ae = libNCUI_gv_nUC_UpgradesUnitSlotCount;
    auto9C8C458B_ai = 1;
    lv_unitSlotIndex = 1;
    for ( ; ( (auto9C8C458B_ai >= 0 && lv_unitSlotIndex <= auto9C8C458B_ae) || (auto9C8C458B_ai <= 0 && lv_unitSlotIndex >= auto9C8C458B_ae) ) ; lv_unitSlotIndex += auto9C8C458B_ai ) {
        libNCUI_gv_nU_UpgradesSubselectionSelectedItem[lv_unitSlotIndex] = 1;
    }
    auto1D9B1EB7_ae = libNCUI_gv_nUC_UpgradesUnitSlotCount;
    auto1D9B1EB7_ai = 1;
    lv_upgradeSlotIndex = 1;
    for ( ; ( (auto1D9B1EB7_ai >= 0 && lv_upgradeSlotIndex <= auto1D9B1EB7_ae) || (auto1D9B1EB7_ai <= 0 && lv_upgradeSlotIndex >= auto1D9B1EB7_ae) ) ; lv_upgradeSlotIndex += auto1D9B1EB7_ai ) {
        lv_currentArmyUnit = libNCUI_gf_NU_UpgradesArmyUnitInSlot(lv_upgradeSlotIndex);
        if ((lv_currentArmyUnit != null)) {
            libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_UpgradesSelectionUnitIcons[lv_upgradeSlotIndex], libNCUI_gf_NU_UpgradesSlotUnitIcon(lv_upgradeSlotIndex), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSelectionUnitLabels[lv_upgradeSlotIndex], libNCUI_gf_NU_UpgradesSlotUnitLabel(lv_upgradeSlotIndex), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSelectionUpgradeLabels[lv_upgradeSlotIndex], libNCUI_gf_NU_UpgradesSlotSelectionLabel(lv_upgradeSlotIndex), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_UpgradesSelectionIcons[lv_upgradeSlotIndex], libNCUI_gf_NU_UpgradesSlotSelectionIcon(lv_upgradeSlotIndex), PlayerGroupAll());
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], PlayerGroupAll(), "AssignedState", "Unassigned");
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], PlayerGroupAll(), "UnitState", (libNCUI_gf_NU_UpgradesArmyUnitInSlot(lv_upgradeSlotIndex)));
            lv_currentTechItemSubsectionIndex = 1;
            auto808FC461_ai = 1;
            auto808FC461_ae = UserDataInstanceCount("CampaignTechItem")+1;
            while (auto808FC461_ai < auto808FC461_ae) {
                lv_indexTechItem = UserDataInstance("CampaignTechItem", auto808FC461_ai);
                auto808FC461_ai = auto808FC461_ai+1;
                if (((libNovC_gf_NC_ArmyTechItemStateCheck(lv_indexTechItem, libNovC_ge_NC_ArmyTechItemState_Unlocked) == true) || (libNovC_gf_NC_ArmyTechItemStateCheck(lv_indexTechItem, libNovC_ge_NC_ArmyTechItemState_Missed) == true))) {
                    lv_unitListIndex = 0;
                    auto5C4EAFD3_ai = 1;
                    auto5C4EAFD3_ae = UserDataFieldValueCount("CampaignTechItem", "UnitList")+1;
                    while (auto5C4EAFD3_ai < auto5C4EAFD3_ae) {    
                        lv_indexArmyUnit = UserDataGetGameLink("CampaignTechItem", lv_indexTechItem, "UnitList", auto5C4EAFD3_ai);
                        auto5C4EAFD3_ai = auto5C4EAFD3_ai+1;
                        lv_unitListIndex += 1;
                        if ((lv_currentArmyUnit == lv_indexArmyUnit)) {
                            libNCUI_gv_nU_UpgradesTechItemUnitListIndex[lv_upgradeSlotIndex][lv_currentTechItemSubsectionIndex] = lv_unitListIndex;
                            libNCUI_gv_nU_UpgradesTechItemOnEachArmyUnit[lv_upgradeSlotIndex][lv_currentTechItemSubsectionIndex] = lv_indexTechItem;
                            if ((lv_currentArmyUnit == libNovC_gf_NC_ArmyTechItemAssignedUnit(lv_indexTechItem))) {
                                libNCUI_gf_NU_UpgradesAssignItem(lv_upgradeSlotIndex, lv_currentTechItemSubsectionIndex, true);
                                libNCUI_gv_nU_UpgradesSubselectionSelectedItem[lv_upgradeSlotIndex] = lv_currentTechItemSubsectionIndex;
                            }

                            lv_currentTechItemSubsectionIndex += 1;
                            continue;
                        }

                    }
                }

            }
            if ((libNCUI_gf_NU_UpgradesArmyUnitHasNewItem(lv_upgradeSlotIndex) == true)) {
                libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], libNCUI_ge_NU_DialogItemNewState_NewItem);
            }
            else {
                libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], libNCUI_ge_NU_DialogItemNewState_NoNewItem);
            }
        }
        else {
            DialogControlSetEnabled(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSelectionUpgradeLabels[lv_upgradeSlotIndex], StringToText(""), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_UpgradesSelectionIcons[lv_upgradeSlotIndex], "Assets\\Textures\\blank.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(libNCUI_gv_nU_UpgradesSelectionIcons[lv_upgradeSlotIndex], StringToText(""), PlayerGroupAll());
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], PlayerGroupAll(), "AssignedState", "Locked");
        }
    }
}

void libNCUI_gf_NU_UpgradesToggleSelectionPanel (int lp_unitSlot) {
    int autoA9DE7BAB_ae;
    int autoA9DE7BAB_ai;
    int autoF655D332_ae;
    int autoF655D332_ai;

    // Variable Declarations
    int lv_upgradeItemsIndex;
    int lv_upgradeSlotIndex;

    // Variable Initialization

    // Implementation
    libNCUI_gv_nU_UpgradesSelectedUnitSlot = lp_unitSlot;
    libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSubselectionLabel, libNCUI_gf_NU_UpgradesSubselectionHeader(lp_unitSlot), PlayerGroupAll());
    autoA9DE7BAB_ae = libNCUI_gv_nUC_UpgradesTechItemCount;
    autoA9DE7BAB_ai = 1;
    lv_upgradeItemsIndex = 1;
    for ( ; ( (autoA9DE7BAB_ai >= 0 && lv_upgradeItemsIndex <= autoA9DE7BAB_ae) || (autoA9DE7BAB_ai <= 0 && lv_upgradeItemsIndex >= autoA9DE7BAB_ae) ) ; lv_upgradeItemsIndex += autoA9DE7BAB_ai ) {
        libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_UpgradesSubselectionItemIcons[lv_upgradeItemsIndex], libNCUI_gf_NU_UpgradesSubselectionItemIcon(lp_unitSlot, lv_upgradeItemsIndex), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_upgradeItemsIndex], libNCUI_gf_NU_UpgradesSubselectionTooltip(lp_unitSlot, lv_upgradeItemsIndex), PlayerGroupAll());
        if ((libNCUI_gv_nU_UpgradesSubselectionSelectedItem[lp_unitSlot] == lv_upgradeItemsIndex)) {
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_upgradeItemsIndex], true, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_upgradeItemsIndex], false, PlayerGroupAll());
            if ((libNovC_gf_NC_ArmyTechItemStateCheck(libNCUI_gf_NU_UpgradesTechItemInSlot(lp_unitSlot, lv_upgradeItemsIndex), libNovC_ge_NC_ArmyTechItemState_Missed) == false) && (libNovC_gf_NC_ArmyTechItemIsNewFromIndex(libNCUI_gf_NU_UpgradesTechItemInSlot(lp_unitSlot, lv_upgradeItemsIndex), libNCUI_gv_nU_UpgradesTechItemUnitListIndex[lp_unitSlot][lv_upgradeItemsIndex]) == true)) {
                libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_upgradeItemsIndex], libNCUI_ge_NU_DialogItemNewState_NewItem);
            }
            else {
                libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_upgradeItemsIndex], libNCUI_ge_NU_DialogItemNewState_NoNewItem);
            }
        }
    }
    autoF655D332_ae = libNCUI_gv_nUC_UpgradesUnitSlotCount;
    autoF655D332_ai = 1;
    lv_upgradeSlotIndex = 1;
    for ( ; ( (autoF655D332_ai >= 0 && lv_upgradeSlotIndex <= autoF655D332_ae) || (autoF655D332_ai <= 0 && lv_upgradeSlotIndex >= autoF655D332_ae) ) ; lv_upgradeSlotIndex += autoF655D332_ai ) {
        if ((lp_unitSlot == lv_upgradeSlotIndex)) {
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], true, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_UpgradesSelectionButtons[lv_upgradeSlotIndex], false, PlayerGroupAll());
        }
    }
    libNCUI_gf_NU_UpgradesUpdateSubselectionItems();
    libNCUI_gf_NU_UpgradesUpdateMovie(lp_unitSlot, libNCUI_gv_nU_UpgradesSubselectionSelectedItem[lp_unitSlot]);
    libNCUI_gf_NU_UpgradesUpdateUnitSlotNewState(lp_unitSlot);
}

void libNCUI_gf_NU_UpgradesUpdateSubselectionItems () {
    int autoC7F4C078_ae;
    int autoC7F4C078_ai;

    // Variable Declarations
    int lv_slotID;
    int lv_itemID;
    bool lv_available;
    bool lv_missed;
    bool lv_assignedSelf;
    bool lv_assignedOther;
    text lv_equipButtonText;
    text lv_statusTitleText;
    text lv_statusDescriptionText;
    string lv_armyUnit;
    string lv_assignedUnit;

    // Variable Initialization
    lv_slotID = libNCUI_gv_nU_UpgradesSelectedUnitSlot;

    // Implementation
    lv_armyUnit = libNCUI_gf_NU_UpgradesArmyUnitInSlot(libNCUI_gv_nU_UpgradesSelectedUnitSlot);
    autoC7F4C078_ae = libNCUI_gv_nUC_UpgradesTechItemCount;
    autoC7F4C078_ai = 1;
    lv_itemID = 1;
    for ( ; ( (autoC7F4C078_ai >= 0 && lv_itemID <= autoC7F4C078_ae) || (autoC7F4C078_ai <= 0 && lv_itemID >= autoC7F4C078_ae) ) ; lv_itemID += autoC7F4C078_ai ) {
        lv_available = false;
        lv_missed = false;
        lv_assignedSelf = false;
        lv_assignedOther = false;
        if ((libNCUI_gv_nU_UpgradesTechItemOnEachArmyUnit[lv_slotID][lv_itemID] != null) && (libNovC_gf_NC_ArmyTechItemStateCheck(libNCUI_gv_nU_UpgradesTechItemOnEachArmyUnit[lv_slotID][lv_itemID], libNovC_ge_NC_ArmyTechItemState_Missed) == false)) {
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), "AvailableState", "Available");
            DialogControlSetEnabled(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), true);
            lv_available = true;
        }
        else if ((libNCUI_gv_nU_UpgradesTechItemOnEachArmyUnit[lv_slotID][lv_itemID] != null) && (libNovC_gf_NC_ArmyTechItemStateCheck(libNCUI_gv_nU_UpgradesTechItemOnEachArmyUnit[lv_slotID][lv_itemID], libNovC_ge_NC_ArmyTechItemState_Missed) == true)) {
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), "AvailableState", "Missed");
            DialogControlSetEnabled(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), true);
            lv_missed = true;
        }
        else if (true) {
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), "AvailableState", "Unavailable");
            DialogControlSetEnabled(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), false);
        }
        if ((libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lv_slotID] != lv_itemID) && (libNCUI_gf_NU_UpgradesTechItemAssignedUnit(libNCUI_gf_NU_UpgradesTechItemInSlot(lv_slotID, lv_itemID)) == null)) {
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), "AssignedState", "Unassigned");
        }
        else if ((libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lv_slotID] == lv_itemID)) {
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), "AssignedState", "SelfAssigned");
            lv_assignedSelf = true;
        }
        else if ((libNCUI_gf_NU_UpgradesTechItemAssignedUnit(libNCUI_gf_NU_UpgradesTechItemInSlot(lv_slotID, lv_itemID)) != lv_armyUnit) && (libNCUI_gf_NU_UpgradesTechItemAssignedUnit(libNCUI_gf_NU_UpgradesTechItemInSlot(lv_slotID, lv_itemID)) != null)) {
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), "AssignedState", "OtherAssigned");
            lv_assignedOther = true;
            lv_assignedUnit = libNCUI_gf_NU_UpgradesTechItemAssignedUnit(libNCUI_gf_NU_UpgradesTechItemInSlot(lv_slotID, lv_itemID));
        }
        if ((libNCUI_gv_nU_UpgradesSubselectionSelectedItem[lv_slotID] == lv_itemID)) {
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), "SelectedState", "Selected");
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], true, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSubselectionItemTitle, libNCUI_gf_NU_UpgradesSubselectionItemTitle(lv_slotID, lv_itemID), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSubselectionItemDescription, libNCUI_gf_NU_UpgradesSubselectionItemDescription(lv_slotID, lv_itemID), PlayerGroupAll());
            libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], libNCUI_ge_NU_DialogItemNewState_NoNewItem);
            libNovC_gf_NC_ArmyTechItemIsNewSetFromIndex(libNCUI_gf_NU_UpgradesTechItemInSlot(lv_slotID, lv_itemID), libNCUI_gv_nU_UpgradesTechItemUnitListIndex[lv_slotID][lv_itemID], false);
            if ((lv_available == false)) {
                lv_equipButtonText = libNCUI_gf_NU_UpgradesSetEquipButtonText(libNCUI_ge_NU_UpgradesSubselectionItemState_Locked, lv_armyUnit);
                lv_statusTitleText = libNCUI_gf_NU_UpgradesSetSubselectionStatusTitle(libNCUI_ge_NU_UpgradesSubselectionItemState_Locked, lv_armyUnit);
                lv_statusDescriptionText = libNCUI_gf_NU_UpgradesSetSubselectionStatusDescription(libNCUI_ge_NU_UpgradesSubselectionItemState_Locked, lv_armyUnit);
                DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemStatusContainer, PlayerGroupAll(), "ItemState", "Locked");
            }
            else if ((lv_assignedSelf == false) && (lv_assignedOther == false) && (lv_available == true)) {
                lv_equipButtonText = libNCUI_gf_NU_UpgradesSetEquipButtonText(libNCUI_ge_NU_UpgradesSubselectionItemState_Available, lv_armyUnit);
                lv_statusTitleText = libNCUI_gf_NU_UpgradesSetSubselectionStatusTitle(libNCUI_ge_NU_UpgradesSubselectionItemState_Available, lv_armyUnit);
                lv_statusDescriptionText = libNCUI_gf_NU_UpgradesSetSubselectionStatusDescription(libNCUI_ge_NU_UpgradesSubselectionItemState_Available, lv_armyUnit);
                DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemStatusContainer, PlayerGroupAll(), "ItemState", "Available");
            }
            else if ((lv_assignedSelf == true) && (lv_assignedOther == false) && (lv_available == true)) {
                lv_equipButtonText = libNCUI_gf_NU_UpgradesSetEquipButtonText(libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedSelf, lv_armyUnit);
                lv_statusTitleText = libNCUI_gf_NU_UpgradesSetSubselectionStatusTitle(libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedSelf, lv_assignedUnit);
                lv_statusDescriptionText = libNCUI_gf_NU_UpgradesSetSubselectionStatusDescription(libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedSelf, lv_armyUnit);
                DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemStatusContainer, PlayerGroupAll(), "ItemState", "Equipped");
            }
            else if ((lv_assignedSelf == false) && (lv_assignedOther == true) && (lv_available == true)) {
                lv_equipButtonText = libNCUI_gf_NU_UpgradesSetEquipButtonText(libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedOther, lv_assignedUnit);
                lv_statusTitleText = libNCUI_gf_NU_UpgradesSetSubselectionStatusTitle(libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedOther, lv_assignedUnit);
                lv_statusDescriptionText = libNCUI_gf_NU_UpgradesSetSubselectionStatusDescription(libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedOther, lv_armyUnit);
                DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemStatusContainer, PlayerGroupAll(), "ItemState", "InUse");
                libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_UpgradesSubselectionItemStatusUnitIcon, libComC_gf_NC_ArmyUnitIcon(lv_assignedUnit), PlayerGroupAll());
            }
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSubselectionEquipButtonLabel, lv_equipButtonText, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSubselectionItemStatusLabel, lv_statusTitleText, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSubselectionItemStatusUnitLabel, lv_statusDescriptionText, PlayerGroupAll());
        }
        else {
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], PlayerGroupAll(), "SelectedState", "Unselected");
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_itemID], false, PlayerGroupAll());
        }
    }
}

void libNCUI_gf_NU_UpgradesAssignItem (int lp_slotID, int lp_itemID, bool lp_assign) {
    // Variable Declarations
    int lv_itemIndex;

    // Variable Initialization

    // Implementation
    if ((lp_assign == true)) {
        libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lp_slotID] = lp_itemID;
        libNCUI_gf_NU_UpgradesRemoveDuplicateTechItems(lp_slotID, lp_itemID);
        libNCUI_gf_NU_UpgradesUpdateSelectionIcon(lp_slotID, libNCUI_gv_nU_UpgradesSubselectionSelectedItem[lp_slotID]);
        libNCUI_gf_NU_UpgradesUpdateSubselectionItems();
        DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSelectionButtons[lp_slotID], PlayerGroupAll(), "AssignedState", "Assigned");
        TriggerExecute(libNCUI_gt_NU_UpgradesTutorial, true, false);
        TriggerExecute(libNCUI_gt_NU_UpgradesReigelResponse, true, false);
    }
    else {
        libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lp_slotID] = 0;
        libNCUI_gf_NU_UpgradesUpdateSelectionIcon(lp_slotID, libNCUI_gv_nU_UpgradesSubselectionSelectedItem[lp_slotID]);
        libNCUI_gf_NU_UpgradesUpdateSubselectionItems();
        DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSelectionButtons[lp_slotID], PlayerGroupAll(), "AssignedState", "Unassigned");
    }
}

void libNCUI_gf_NU_UpgradesUpdateSelectionIcon (int lp_slotID, int lp_itemID) {
    // Implementation
    libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_UpgradesSelectionIcons[lp_slotID], libNCUI_gf_NU_UpgradesSlotSelectionIcon(lp_slotID), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSelectionUpgradeLabels[lp_slotID], libNCUI_gf_NU_UpgradesSlotSelectionLabel(lp_slotID), PlayerGroupAll());
}

void libNCUI_gf_NU_UpgradesUpdateMovie (int lp_unitSlot, int lp_upgradeItemIndex) {
    // Implementation
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_UpgradesSubselectionMovie, libNovC_gf_NC_ArmyTechItemMovieFromIndex(libNCUI_gf_NU_UpgradesTechItemInSlot(lp_unitSlot, lp_upgradeItemIndex), libNCUI_gv_nU_UpgradesTechItemUnitListIndex[lp_unitSlot][lp_upgradeItemIndex]), PlayerGroupAll());
}

void libNCUI_gf_NU_UpgradesUpdateUnitSlotNewState (int lp_unitSlot) {
    // Implementation
    if ((libNCUI_gf_NU_UpgradesArmyUnitHasNewItem(lp_unitSlot) == false)) {
        libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_UpgradesSelectionButtons[lp_unitSlot], libNCUI_ge_NU_DialogItemNewState_NoNewItem);
    }

}

void libNCUI_gf_NU_UpgradesRemoveDuplicateTechItems (int lp_assignedUnit, int lp_upgradeSelection) {
    int auto30B1737A_ae;
    int auto30B1737A_ai;

    // Variable Declarations
    int lv_unitIndex;
    string lv_newlyAssignedTechItem;
    string lv_otherTechItem;

    // Variable Initialization

    // Implementation
    lv_newlyAssignedTechItem = libNCUI_gf_NU_UpgradesTechItemInSlot(lp_assignedUnit, lp_upgradeSelection);
    if ((lv_newlyAssignedTechItem == null)) {
        return ;
    }

    auto30B1737A_ae = libNCUI_gv_nUC_UpgradesUnitSlotCount;
    auto30B1737A_ai = 1;
    lv_unitIndex = 1;
    for ( ; ( (auto30B1737A_ai >= 0 && lv_unitIndex <= auto30B1737A_ae) || (auto30B1737A_ai <= 0 && lv_unitIndex >= auto30B1737A_ae) ) ; lv_unitIndex += auto30B1737A_ai ) {
        lv_otherTechItem = libNCUI_gf_NU_UpgradesTechItemInSlot(lv_unitIndex, libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lv_unitIndex]);
        if ((lv_otherTechItem != null) && (lv_newlyAssignedTechItem == lv_otherTechItem) && (lv_unitIndex != lp_assignedUnit)) {
            libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_UpgradesSelectionIcons[lv_unitIndex], libNCUI_gf_NU_UpgradesSlotSelectionIcon(0), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_UpgradesSelectionUpgradeLabels[lv_unitIndex], libNCUI_gf_NU_UpgradesSlotSelectionLabel(0), PlayerGroupAll());
            DialogControlSetAnimationState(libNCUI_gv_nU_UpgradesSelectionButtons[lv_unitIndex], PlayerGroupAll(), "AssignedState", "Unassigned");
            libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lv_unitIndex] = 0;
        }

    }
}

void libNCUI_gf_NU_UpgradesDisplay () {
    // Implementation
    if ((UserDataGetInt("WriterStates", "VisitedArmyUpgradeRoom", "Value", 1) == 1)) {
        libNCUI_gv_nU_UpgradesTutorialStage = libNCUI_gv_nUC_UpgradesTutorialEndStage;
    }

    libNCUI_gf_NU_UpgradesCreate();
    libNCUI_gf_NU_UpgradesInitFromData();
    DialogSetVisible(libNCUI_gv_nU_UpgradesDialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libNCUI_gv_nU_UpgradesPanel, PlayerGroupAll(), true);
    TimerStart(libNCUI_gv_nU_UpgradesReigelResponseTimer, libNCUI_gv_nUC_UpgradesReigelResponseDelay, false, c_timeReal);
    TriggerEnable(libNCUI_gt_NU_UpgradesReigelResponse, true);
    libNCUI_gf_NU_UpgradesToggleSelectionPanel(1);
    libNCUI_gf_NU_UpgradesUpdateMovie(libNCUI_gv_nU_UpgradesSelectedUnitSlot, libNCUI_gv_nU_UpgradesSubselectionSelectedItem[libNCUI_gv_nU_UpgradesSelectedUnitSlot]);
    TriggerExecute(libNCUI_gt_NU_UpgradesRoomEntryFluff, true, false);
    TriggerExecute(libNCUI_gt_NU_UpgradesTutorial, true, false);
    libNCUI_gv_nU_UpgradesRoomEntered = true;
}

void libNCUI_gf_NU_UpgradesClose () {
    // Implementation
    TriggerStop(libNCUI_gt_NU_UpgradesTutorial);
    ConversationDataStop();
    libNCUI_gf_NU_UpgradesUpdateMovie(0, 0);
    libNCUI_gf_NU_UpgradesUpdateData();
    TriggerEnable(libNCUI_gt_NU_UpgradesReigelResponse, false);
    libNtve_gf_StopTimer(libNCUI_gv_nU_UpgradesReigelResponseTimer);
    if ((libNCUI_gv_nU_UpgradesTutorialStage < libNCUI_gv_nUC_UpgradesTutorialEndStage)) {
        libNCUI_gv_nU_UpgradesTutorialStage = (libNCUI_gv_nUC_UpgradesTutorialEndStage - 1);
    }

    DialogClearSubtitlePositionOverrideControl();
    DialogDestroy(libNCUI_gv_nU_UpgradesDialog);
    libNCUI_gv_nU_UpgradesDialog = c_invalidDialogId;
}

text libNCUI_gf_NU_UpgradesSetEquipButtonText (int lp_buttonType, string lp_unitType) {
    // Variable Declarations
    text lv_notAvailable;
    text lv_unequip;
    text lv_equip;
    text lv_swap;
    text lv_returnText;

    // Variable Initialization
    lv_notAvailable = StringExternal("Param/Value/lib_NCUI_6AFE1F9A");

    // Implementation
    if ((lp_buttonType == libNCUI_ge_NU_UpgradesSubselectionItemState_Locked)) {
        lv_returnText = lv_notAvailable;
    }
    else if ((lp_buttonType == libNCUI_ge_NU_UpgradesSubselectionItemState_Available)) {
        TextExpressionSetToken("Param/Expression/lib_NCUI_E3B54B46", "UNITNAME", libComC_gf_StoryArmyUnitName(lp_unitType));
        lv_equip = TextExpressionAssemble("Param/Expression/lib_NCUI_E3B54B46");
        lv_returnText = lv_equip;
    }
    else if ((lp_buttonType == libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedSelf)) {
        TextExpressionSetToken("Param/Expression/lib_NCUI_00BA0805", "UNITNAME", libComC_gf_StoryArmyUnitName(lp_unitType));
        lv_unequip = TextExpressionAssemble("Param/Expression/lib_NCUI_00BA0805");
        lv_returnText = lv_unequip;
    }
    else if ((lp_buttonType == libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedOther)) {
        TextExpressionSetToken("Param/Expression/lib_NCUI_BE1901D9", "UNITNAME", libComC_gf_StoryArmyUnitName(lp_unitType));
        lv_swap = TextExpressionAssemble("Param/Expression/lib_NCUI_BE1901D9");
        lv_returnText = lv_swap;
    }
    return lv_returnText;
}

text libNCUI_gf_NU_UpgradesSetSubselectionStatusTitle (int lp_statusType, string lp_unitType) {
    // Variable Declarations
    text lv_available;
    text lv_equipped;
    text lv_locked;
    text lv_inUse;
    text lv_returnText;

    // Variable Initialization
    lv_available = StringExternal("Param/Value/lib_NCUI_AA6EF23B");
    lv_equipped = StringExternal("Param/Value/lib_NCUI_9164C10E");
    lv_locked = StringExternal("Param/Value/lib_NCUI_143C97B4");

    // Implementation
    if ((lp_statusType == libNCUI_ge_NU_UpgradesSubselectionItemState_Available)) {
        lv_returnText = lv_available;
    }
    else if ((lp_statusType == libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedSelf)) {
        lv_returnText = lv_equipped;
    }
    else if ((lp_statusType == libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedOther)) {
        TextExpressionSetToken("Param/Expression/lib_NCUI_1AEDC0FC", "UNITNAME", libComC_gf_StoryArmyUnitName(lp_unitType));
        lv_inUse = TextExpressionAssemble("Param/Expression/lib_NCUI_1AEDC0FC");
        lv_returnText = lv_inUse;
    }
    else if ((lp_statusType == libNCUI_ge_NU_UpgradesSubselectionItemState_Locked)) {
        lv_returnText = lv_locked;
    }
    return lv_returnText;
}

text libNCUI_gf_NU_UpgradesSetSubselectionStatusDescription (int lp_statusType, string lp_unitType) {
    // Variable Declarations
    text lv_available;
    text lv_equipped;
    text lv_inUse;
    text lv_locked;
    text lv_returnText;

    // Variable Initialization
    lv_inUse = StringExternal("Param/Value/lib_NCUI_5C16C970");

    // Implementation
    if ((lp_statusType == libNCUI_ge_NU_UpgradesSubselectionItemState_Available)) {
        TextExpressionSetToken("Param/Expression/lib_NCUI_5484A93A", "UNITNAME", libComC_gf_StoryArmyUnitName(lp_unitType));
        lv_available = TextExpressionAssemble("Param/Expression/lib_NCUI_5484A93A");
        lv_returnText = lv_available;
    }
    else if ((lp_statusType == libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedSelf)) {
        TextExpressionSetToken("Param/Expression/lib_NCUI_461FC72A", "UNITNAME", libComC_gf_StoryArmyUnitName(lp_unitType));
        lv_equipped = TextExpressionAssemble("Param/Expression/lib_NCUI_461FC72A");
        lv_returnText = lv_equipped;
    }
    else if ((lp_statusType == libNCUI_ge_NU_UpgradesSubselectionItemState_AssignedOther)) {
        lv_returnText = lv_inUse;
    }
    else if ((lp_statusType == libNCUI_ge_NU_UpgradesSubselectionItemState_Locked)) {
        TextExpressionSetToken("Param/Expression/lib_NCUI_3E8850F0", "MissionName", libComC_gf_CC_MapName(libNovC_gf_NC_MissionContainingObjective(libNovC_gf_NC_ArmyTechItemRequiredObjective(libNCUI_gf_NU_UpgradesTechItemInSlot(libNCUI_gv_nU_UpgradesSelectedUnitSlot, libNCUI_gv_nU_UpgradesSubselectionSelectedItem[libNCUI_gv_nU_UpgradesSelectedUnitSlot])))));
        lv_locked = TextExpressionAssemble("Param/Expression/lib_NCUI_3E8850F0");
        lv_returnText = lv_locked;
    }
    return lv_returnText;
}

text libNCUI_gf_NU_UpgradesSetSubselectionTitleText (string lp_unitType) {
    // Variable Declarations
    text lv_subselectionTitleText;

    // Variable Initialization
    TextExpressionSetToken("Param/Expression/lib_NCUI_6E327D9B", "A", UnitTypeGetName(lp_unitType));
    lv_subselectionTitleText = TextExpressionAssemble("Param/Expression/lib_NCUI_6E327D9B");

    // Implementation
    return lv_subselectionTitleText;
}

text libNCUI_gf_NU_UpgradesSetSelectionSlotDescription (string lp_techItemType, int lp_status) {
    // Variable Declarations
    text lv_available;
    text lv_unequipped;
    text lv_locked;
    text lv_techItemEquipped;
    text lv_returnText;

    // Variable Initialization
    lv_available = StringExternal("Param/Value/lib_NCUI_EBDA6009");
    lv_unequipped = StringExternal("Param/Value/lib_NCUI_6C45D77F");
    lv_locked = StringExternal("Param/Value/lib_NCUI_250A4832");
    TextExpressionSetToken("Param/Expression/lib_NCUI_2B0C7A9C", "A", UnitTypeGetName(lp_techItemType));
    lv_techItemEquipped = TextExpressionAssemble("Param/Expression/lib_NCUI_2B0C7A9C");

    // Implementation
    if ((lp_status == libNCUI_ge_NU_UpgradesSelectionSlotDescriptionType_Assigned)) {
        lv_returnText = lv_techItemEquipped;
    }
    else if ((lp_status == libNCUI_ge_NU_UpgradesSelectionSlotDescriptionType_Unassigned)) {
        lv_returnText = lv_unequipped;
    }
    else if ((lp_status == libNCUI_ge_NU_UpgradesSelectionSlotDescriptionType_TechAvailable)) {
        lv_returnText = lv_available;
    }
    else if ((lp_status == libNCUI_ge_NU_UpgradesSelectionSlotDescriptionType_Locked)) {
        lv_returnText = lv_locked;
    }
    return lv_returnText;
}

string libNCUI_gf_NU_UpgradesSlotUnitIcon (int lp_upgradeID) {
    // Variable Declarations
    string lv_armyUnit;

    // Variable Initialization

    // Implementation
    lv_armyUnit = libNCUI_gf_NU_UpgradesArmyUnitInSlot(lp_upgradeID);
    if ((lv_armyUnit != null)) {
        return libComC_gf_NC_ArmyUnitIcon(lv_armyUnit);
    }

    return "Assets\\Textures\\blank.dds";
}

text libNCUI_gf_NU_UpgradesSlotUnitLabel (int lp_upgradeID) {
    // Variable Declarations
    string lv_armyUnit;

    // Variable Initialization

    // Implementation
    lv_armyUnit = libNCUI_gf_NU_UpgradesArmyUnitInSlot(lp_upgradeID);
    if ((lv_armyUnit != null)) {
        return libComC_gf_StoryArmyUnitName(lv_armyUnit);
    }

    return StringExternal("Param/Value/lib_NCUI_80846809");
}

string libNCUI_gf_NU_UpgradesSlotSelectionIcon (int lp_unitSlot) {
    // Variable Declarations
    string lv_techItem;

    // Variable Initialization

    // Implementation
    lv_techItem = libNCUI_gf_NU_UpgradesTechItemInSlot(lp_unitSlot, libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lp_unitSlot]);
    if ((lv_techItem != null)) {
        return libNovC_gf_NC_ArmyTechItemImage(lv_techItem);
    }

    return "Assets\\Textures\\blank.dds";
}

text libNCUI_gf_NU_UpgradesSlotSelectionLabel (int lp_upgradeID) {
    // Variable Declarations
    string lv_techItem;

    // Variable Initialization

    // Implementation
    lv_techItem = libNCUI_gf_NU_UpgradesTechItemInSlot(lp_upgradeID, libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lp_upgradeID]);
    if ((lv_techItem != null)) {
        return libNovC_gf_NC_ArmyTechItemName(lv_techItem);
    }

    return StringExternal("Param/Value/lib_NCUI_A23DA84A");
}

text libNCUI_gf_NU_UpgradesSubselectionHeader (int lp_upgradeID) {
    // Variable Declarations
    string lv_armyUnit;

    // Variable Initialization

    // Implementation
    lv_armyUnit = libNCUI_gf_NU_UpgradesArmyUnitInSlot(lp_upgradeID);
    if ((lv_armyUnit != null)) {
        return libComC_gf_StoryArmyUnitName(lv_armyUnit);
    }

    TextExpressionSetToken("Param/Expression/lib_NCUI_A21C3D30", "A", IntToText(lp_upgradeID));
    return (TextExpressionAssemble("Param/Expression/lib_NCUI_A21C3D30"));
}

text libNCUI_gf_NU_UpgradesSubselectionTooltip (int lp_slotID, int lp_itemID) {
    int autoA8BA21A8_ai;
    int autoA8BA21A8_ae;

    // Variable Declarations
    string lv_techItem;
    string lv_indexArmyUnit;
    text lv_returnText;

    // Variable Initialization

    // Implementation
    lv_techItem = libNCUI_gf_NU_UpgradesTechItemInSlot(lp_slotID, lp_itemID);
    if ((lv_techItem != null)) {
        lv_returnText = StringExternal("Param/Value/lib_NCUI_5CBA9BDD");
        autoA8BA21A8_ai = 1;
        autoA8BA21A8_ae = UserDataFieldValueCount("CampaignTechItem", "UnitList")+1;
        while (autoA8BA21A8_ai < autoA8BA21A8_ae) {    
            lv_indexArmyUnit = UserDataGetGameLink("CampaignTechItem", lv_techItem, "UnitList", autoA8BA21A8_ai);
            autoA8BA21A8_ai = autoA8BA21A8_ai+1;
            if ((libComC_gf_NC_StoryArmyUnitState(lv_indexArmyUnit) != c_armyUnitStateLocked)) {
                TextExpressionSetToken("Param/Expression/lib_NCUI_D7CB997E", "A", libComC_gf_StoryArmyUnitName(lv_indexArmyUnit));
                lv_returnText = (lv_returnText + TextExpressionAssemble("Param/Expression/lib_NCUI_D7CB997E"));
            }

        }
    }

    return lv_returnText;
}

text libNCUI_gf_NU_UpgradesSubselectionItemTitle (int lp_upgradeID, int lp_itemID) {
    // Variable Declarations
    string lv_techItem;

    // Variable Initialization

    // Implementation
    lv_techItem = libNCUI_gf_NU_UpgradesTechItemInSlot(lp_upgradeID, lp_itemID);
    if ((lv_techItem != null)) {
        return libNovC_gf_NC_ArmyTechItemName(lv_techItem);
    }

    TextExpressionSetToken("Param/Expression/lib_NCUI_2AB22791", "A", IntToText(lp_upgradeID));
    TextExpressionSetToken("Param/Expression/lib_NCUI_2AB22791", "B", IntToText(lp_itemID));
    return (TextExpressionAssemble("Param/Expression/lib_NCUI_2AB22791"));
}

text libNCUI_gf_NU_UpgradesSubselectionItemDescription (int lp_upgradeID, int lp_itemID) {
    // Variable Declarations
    string lv_techItem;

    // Variable Initialization

    // Implementation
    lv_techItem = libNCUI_gf_NU_UpgradesTechItemInSlot(lp_upgradeID, lp_itemID);
    if ((lv_techItem != null)) {
        return libNovC_gf_NC_ArmyTechItemDescriptionFromIndex(lv_techItem, libNCUI_gv_nU_UpgradesTechItemUnitListIndex[lp_upgradeID][lp_itemID]);
    }

    TextExpressionSetToken("Param/Expression/lib_NCUI_22B5C967", "A", IntToText(lp_upgradeID));
    TextExpressionSetToken("Param/Expression/lib_NCUI_22B5C967", "B", IntToText(lp_itemID));
    return (TextExpressionAssemble("Param/Expression/lib_NCUI_22B5C967"));
}

string libNCUI_gf_NU_UpgradesSubselectionItemIcon (int lp_upgradeID, int lp_itemID) {
    // Variable Declarations
    string lv_techItem;

    // Variable Initialization

    // Implementation
    lv_techItem = libNCUI_gf_NU_UpgradesTechItemInSlot(lp_upgradeID, lp_itemID);
    if ((lv_techItem != null)) {
        return libNovC_gf_NC_ArmyTechItemImage(lv_techItem);
    }

    return "Assets\\Textures\\blank.dds";
}

bool libNCUI_gf_NU_UpgradesArmyUnitHasNewItem (int lp_unitSlot) {
    int autoC8B8CD08_ae;
    int autoC8B8CD08_ai;

    // Variable Declarations
    int lv_techItemIndex;

    // Variable Initialization

    // Implementation
    autoC8B8CD08_ae = libNCUI_gv_nUC_UpgradesTechItemCount;
    autoC8B8CD08_ai = 1;
    lv_techItemIndex = 1;
    for ( ; ( (autoC8B8CD08_ai >= 0 && lv_techItemIndex <= autoC8B8CD08_ae) || (autoC8B8CD08_ai <= 0 && lv_techItemIndex >= autoC8B8CD08_ae) ) ; lv_techItemIndex += autoC8B8CD08_ai ) {
        if ((libNCUI_gf_NU_UpgradesTechItemInSlot(lp_unitSlot, lv_techItemIndex) != null) && (libNovC_gf_NC_ArmyTechItemIsNewFromIndex(libNCUI_gf_NU_UpgradesTechItemInSlot(lp_unitSlot, lv_techItemIndex), libNCUI_gv_nU_UpgradesTechItemUnitListIndex[lp_unitSlot][lv_techItemIndex]) == true) && (libNovC_gf_NC_ArmyTechItemStateCheck(libNCUI_gf_NU_UpgradesTechItemInSlot(lp_unitSlot, lv_techItemIndex), libNovC_ge_NC_ArmyTechItemState_Missed) == false)) {
            return true;
        }

    }
    return false;
}

string libNCUI_gf_NU_UpgradesArmyUnitInSlot (int lp_unitSlot) {
    int auto25FABF7B_ae;
    int auto25FABF7B_ai;
    int auto765F3CFB_ae;
    int auto765F3CFB_ai;

    // Variable Declarations
    string lv_indexArmyUnit;
    string lv_indexArmyCategory;

    // Variable Initialization

    // Implementation
    auto25FABF7B_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto25FABF7B_ai = 1;
    while (auto25FABF7B_ai <= auto25FABF7B_ae) {
        lv_indexArmyCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto25FABF7B_ai);
        auto765F3CFB_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray", 1);
        auto765F3CFB_ai = 1;
        while (auto765F3CFB_ai <= auto765F3CFB_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexArmyCategory, "ArmyUnitArray["+IntToString(auto765F3CFB_ai-1)+"]", 1);
            if ((libComC_gf_NC_StoryArmyUnitState(lv_indexArmyUnit) != c_armyUnitStateLocked) && (libComC_gf_CC_ArmyUnitUIOrder(lv_indexArmyUnit) == lp_unitSlot)) {
                return lv_indexArmyUnit;
            }

            auto765F3CFB_ai = auto765F3CFB_ai + 1;
        }
        auto25FABF7B_ai = auto25FABF7B_ai + 1;
    }
    return null;
}

string libNCUI_gf_NU_UpgradesTechItemInSlot (int lp_unitSlot, int lp_subselectionSlot) {
    // Variable Declarations
    int lv_techItemIndex;

    // Variable Initialization

    // Implementation
    return libNCUI_gv_nU_UpgradesTechItemOnEachArmyUnit[lp_unitSlot][lp_subselectionSlot];
}

string libNCUI_gf_NU_UpgradesTechItemAssignedUnit (string lp_techItem) {
    int autoCC702FD6_ae;
    int autoCC702FD6_ai;

    // Variable Declarations
    int lv_unitSlotIndex;

    // Variable Initialization

    // Implementation
    if ((lp_techItem != null)) {
        autoCC702FD6_ae = libNCUI_gv_nUC_UpgradesUnitSlotCount;
        autoCC702FD6_ai = 1;
        lv_unitSlotIndex = 1;
        for ( ; ( (autoCC702FD6_ai >= 0 && lv_unitSlotIndex <= autoCC702FD6_ae) || (autoCC702FD6_ai <= 0 && lv_unitSlotIndex >= autoCC702FD6_ae) ) ; lv_unitSlotIndex += autoCC702FD6_ai ) {
            if ((libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lv_unitSlotIndex] != 0) && (libNCUI_gv_nU_UpgradesTechItemOnEachArmyUnit[lv_unitSlotIndex][libNCUI_gv_nU_UpgradesSubselectionAssignedItem[lv_unitSlotIndex]] == lp_techItem)) {
                return libNCUI_gf_NU_UpgradesArmyUnitInSlot(lv_unitSlotIndex);
            }

        }
    }

    return null;
}

void libNCUI_gf_NU_UpgradesClosed (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libNCUI_gv_nUC_UpgradesEventClosed);
}

void libNCUI_gf_NU_UpgradesOpened (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libNCUI_gv_nUC_UpgradesEventOpened);
}

void libNCUI_gf_NU_EquipmentUpdateData () {
    int auto02DE18CB_ai;
    int auto02DE18CB_ae;
    int auto31A1050A_ae;
    int auto31A1050A_ai;

    // Variable Declarations
    int lv_equipmentSlotIndex;
    string lv_equipment;
    string lv_indexEquipment;

    // Variable Initialization

    // Implementation
    auto02DE18CB_ai = 1;
    auto02DE18CB_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto02DE18CB_ai < auto02DE18CB_ae) {
        lv_indexEquipment = UserDataInstance("CampaignPerk", auto02DE18CB_ai);
        auto02DE18CB_ai = auto02DE18CB_ai+1;
        if ((libComC_gf_CC_PerkStateCheck(lv_indexEquipment, libComC_ge_CC_PerkState_Locked) != true) && (libComC_gf_CC_PerkStateCheck(lv_indexEquipment, libComC_ge_CC_PerkState_Missed) != true)) {
            libComC_gf_CC_PerkStateSet(lv_indexEquipment, libComC_ge_CC_PerkState_Unlocked);
        }

    }
    auto31A1050A_ae = libNCUI_gv_nUC_EquipmentSlotCount;
    auto31A1050A_ai = 1;
    lv_equipmentSlotIndex = 1;
    for ( ; ( (auto31A1050A_ai >= 0 && lv_equipmentSlotIndex <= auto31A1050A_ae) || (auto31A1050A_ai <= 0 && lv_equipmentSlotIndex >= auto31A1050A_ae) ) ; lv_equipmentSlotIndex += auto31A1050A_ai ) {
        lv_equipment = libNCUI_gf_NU_EquipmentInSlot(lv_equipmentSlotIndex, libNCUI_gv_nU_Equipment_Subselection_SelectedItem[lv_equipmentSlotIndex]);
        if ((lv_equipment != null)) {
            libComC_gf_CC_PerkStateSet(lv_equipment, libComC_ge_CC_PerkState_Active);
        }

    }
}

void libNCUI_gf_NU_EquipmentCreate () {
    int auto5621FE69_ae;
    int auto5621FE69_ai;
    int auto4985848F_ae;
    int auto4985848F_ai;

    // Variable Declarations
    int lv_equipmentSlotIndex;
    int lv_equipmentItemIndex;

    // Variable Initialization

    // Implementation
    if ((libNCUI_gv_nU_EquipmentDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNCUI_gv_nU_EquipmentDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libNCUI_gv_nU_EquipmentDialog, c_triggerControlTypePanel, "NovaMissionEquipment/MissionEquipmentPanel");
    libNCUI_gv_nU_EquipmentPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_EquipmentPanel, c_triggerControlTypeButton, "ResetButton");
    libNCUI_gv_nU_EquipmentTutorialResetButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_EquipmentPanel, c_triggerControlTypeButton, "CloseButton");
    libNCUI_gv_nU_EquipmentCloseButton = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_EquipmentPanel, c_triggerControlTypePanel, "EquipmentOverviewContainer");
    libNCUI_gv_nU_EquipmentOverviewContainer = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_EquipmentOverviewContainer, c_triggerControlTypeLabel, "SelectedItemTitle");
    libNCUI_gv_nU_EquipmentSelectedItemTitle = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_EquipmentOverviewContainer, c_triggerControlTypeLabel, "SelectedItemFluffText");
    libNCUI_gv_nU_EquipmentSelectedItemFluffLabel = DialogControlLastCreated();
    auto5621FE69_ae = libNCUI_gv_nUC_EquipmentSlotCount;
    auto5621FE69_ai = 1;
    lv_equipmentSlotIndex = 1;
    for ( ; ( (auto5621FE69_ai >= 0 && lv_equipmentSlotIndex <= auto5621FE69_ae) || (auto5621FE69_ai <= 0 && lv_equipmentSlotIndex >= auto5621FE69_ae) ) ; lv_equipmentSlotIndex += auto5621FE69_ai ) {
        DialogControlHookup(libNCUI_gv_nU_EquipmentOverviewContainer, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("EquipmentContainer" + IntToString(lv_equipmentSlotIndex))));
        libNCUI_gv_nU_EquipmentSlotContainers[lv_equipmentSlotIndex] = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_nU_EquipmentSlotContainers[lv_equipmentSlotIndex], c_triggerControlTypeLabel, "SelectionNameLabel");
        libNCUI_gv_nU_EquipmentSlotContainersSelectedTitle[lv_equipmentSlotIndex] = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_nU_EquipmentSlotContainers[lv_equipmentSlotIndex], c_triggerControlTypeLabel, "SelectionDescriptionLabel");
        libNCUI_gv_nU_EquipmentSlotContainersSelectedDescription[lv_equipmentSlotIndex] = DialogControlLastCreated();
        auto4985848F_ae = libNCUI_gv_nUC_EquipmentItemCount;
        auto4985848F_ai = 1;
        lv_equipmentItemIndex = 1;
        for ( ; ( (auto4985848F_ai >= 0 && lv_equipmentItemIndex <= auto4985848F_ae) || (auto4985848F_ai <= 0 && lv_equipmentItemIndex >= auto4985848F_ae) ) ; lv_equipmentItemIndex += auto4985848F_ai ) {
            DialogControlHookup(libNCUI_gv_nU_EquipmentSlotContainers[lv_equipmentSlotIndex], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Item" + IntToString(lv_equipmentItemIndex))));
            libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lv_equipmentSlotIndex][lv_equipmentItemIndex] = DialogControlLastCreated();
            DialogControlHookup(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lv_equipmentSlotIndex][lv_equipmentItemIndex], c_triggerControlTypeImage, "Icon");
            libNCUI_gv_nU_EquipmentSlotContainerItemIcons[lv_equipmentSlotIndex][lv_equipmentItemIndex] = DialogControlLastCreated();
        }
    }
    DialogControlHookup(libNCUI_gv_nU_EquipmentOverviewContainer, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("EquipmentDollHelmet"));
    libNCUI_gv_nU_EquipmentSlotIndicators[1] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_EquipmentOverviewContainer, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("EquipmentDollSuit"));
    libNCUI_gv_nU_EquipmentSlotIndicators[2] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_EquipmentOverviewContainer, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("EquipmentDollGadget"));
    libNCUI_gv_nU_EquipmentSlotIndicators[3] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_EquipmentOverviewContainer, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("EquipmentDollWeapon"));
    libNCUI_gv_nU_EquipmentSlotIndicators[4] = DialogControlLastCreated();
}

void libNCUI_gf_NU_EquipmentInitFromData () {
    int auto793408E9_ae;
    int auto793408E9_ai;
    int auto6697A668_ae;
    int auto6697A668_ai;
    int auto2000ED7F_ae;
    int auto2000ED7F_ai;
    int auto45635EB0_ae;
    int auto45635EB0_ai;
    int auto88841389_ai;
    int auto88841389_ae;
    int auto2EB6B837_ai;
    int auto2EB6B837_ae;

    // Variable Declarations
    int lv_equipmentGroupIndex;
    int lv_equipmentItemIndex;
    string lv_indexEquipmentGroup;
    string lv_indexEquipment;
    int lv_resetEquipmentSlotIndex;
    int lv_resetEquipmentItemIndex;

    // Variable Initialization

    // Implementation
    if ((libComC_gf_CC_StoryInSimulation() == true)) {
        libNCUI_gv_nU_EquipmentTutorialStage = libNCUI_gv_nUC_EquipmentTutorialEndStage;
    }

    auto793408E9_ae = libNCUI_gv_nUC_EquipmentSlotCount;
    auto793408E9_ai = 1;
    lv_resetEquipmentSlotIndex = 1;
    for ( ; ( (auto793408E9_ai >= 0 && lv_resetEquipmentSlotIndex <= auto793408E9_ae) || (auto793408E9_ai <= 0 && lv_resetEquipmentSlotIndex >= auto793408E9_ae) ) ; lv_resetEquipmentSlotIndex += auto793408E9_ai ) {
        libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_EquipmentSlotContainers[lv_resetEquipmentSlotIndex], false, PlayerGroupAll());
        libNCUI_gv_nU_EquipmentSlotContainersToggleState[lv_resetEquipmentSlotIndex] = false;
        auto6697A668_ae = libNCUI_gv_nUC_EquipmentItemCount;
        auto6697A668_ai = 1;
        lv_resetEquipmentItemIndex = 1;
        for ( ; ( (auto6697A668_ai >= 0 && lv_resetEquipmentItemIndex <= auto6697A668_ae) || (auto6697A668_ai <= 0 && lv_resetEquipmentItemIndex >= auto6697A668_ae) ) ; lv_resetEquipmentItemIndex += auto6697A668_ai ) {
            libNCUI_gv_nU_EquipmentSlotContainerItemButtonsToggleState[lv_resetEquipmentSlotIndex][lv_resetEquipmentItemIndex] = false;
        }
    }
    auto2000ED7F_ae = libNCUI_gv_nUC_EquipmentSlotCount;
    auto2000ED7F_ai = 1;
    lv_equipmentGroupIndex = 1;
    for ( ; ( (auto2000ED7F_ai >= 0 && lv_equipmentGroupIndex <= auto2000ED7F_ae) || (auto2000ED7F_ai <= 0 && lv_equipmentGroupIndex >= auto2000ED7F_ae) ) ; lv_equipmentGroupIndex += auto2000ED7F_ai ) {
        auto45635EB0_ae = libNCUI_gv_nUC_EquipmentItemCount;
        auto45635EB0_ai = 1;
        lv_equipmentItemIndex = 1;
        for ( ; ( (auto45635EB0_ai >= 0 && lv_equipmentItemIndex <= auto45635EB0_ae) || (auto45635EB0_ai <= 0 && lv_equipmentItemIndex >= auto45635EB0_ae) ) ; lv_equipmentItemIndex += auto45635EB0_ai ) {
            libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_EquipmentSlotContainerItemIcons[lv_equipmentGroupIndex][lv_equipmentItemIndex], "Assets\\Textures\\blank.dds", PlayerGroupAll());
            DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lv_equipmentGroupIndex][lv_equipmentItemIndex], PlayerGroupAll(), "EmptyState", "Empty");
        }
    }
    auto88841389_ai = 1;
    auto88841389_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (auto88841389_ai < auto88841389_ae) {
        lv_indexEquipmentGroup = UserDataInstance("CampaignPerkGroup", auto88841389_ai);
        auto88841389_ai = auto88841389_ai+1;
        auto2EB6B837_ai = 1;
        auto2EB6B837_ae = UserDataInstanceCount("CampaignPerk")+1;
        while (auto2EB6B837_ai < auto2EB6B837_ae) {
            lv_indexEquipment = UserDataInstance("CampaignPerk", auto2EB6B837_ai);
            auto2EB6B837_ai = auto2EB6B837_ai+1;
            if( libComC_gf_CC_PerkGroupOfPerk(lv_indexEquipment) == lv_indexEquipmentGroup ) {
                if ((libComC_gf_CC_PerkStateCheck(lv_indexEquipment, libComC_ge_CC_PerkState_Locked) != true) && (libComC_gf_CC_PerkStateCheck(lv_indexEquipment, libComC_ge_CC_PerkState_Hidden) != true)) {
                    libNCUI_gv_nU_EquipmentList[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)] = lv_indexEquipment;
                    libNtve_gf_SetDialogItemImage(libNCUI_gv_nU_EquipmentSlotContainerItemIcons[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)], libComC_gf_CC_PerkIcon(lv_indexEquipment), PlayerGroupAll());
                    DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)], PlayerGroupAll(), "EmptyState", "NotEmpty");
                    DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)], PlayerGroupAll(), "OwnedState", "Owned");
                    DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)], PlayerGroupAll(), "AssignedState", "Unassigned");
                    if ((libComC_gf_CC_PerkStateCheck(lv_indexEquipment, libComC_ge_CC_PerkState_Active) == true)) {
                        libNCUI_gv_nU_Equipment_Subselection_SelectedItem[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)] = libComC_gf_CC_PerkUISlot(lv_indexEquipment);
                        DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)], PlayerGroupAll(), "AssignedState", "Assigned");
                        libNCUI_gf_NU_EquipmentToggleSubselectionItem(false, libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup), libNCUI_gv_nU_Equipment_Subselection_SelectedItem[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)]);
                    }
                    else if ((libComC_gf_CC_PerkStateCheck(lv_indexEquipment, libComC_ge_CC_PerkState_Missed) == true)) {
                        DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)], PlayerGroupAll(), "OwnedState", "Unowned");
                        TextExpressionSetToken("Param/Expression/lib_NCUI_172DD2F8", "A", libComC_gf_CC_MapName(libNovC_gf_NC_MissionContainingObjective(libComC_gf_CC_PerkRequiredObjective(lv_indexEquipment))));
                        libNtve_gf_SetDialogItemTooltip(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)], TextExpressionAssemble("Param/Expression/lib_NCUI_172DD2F8"), PlayerGroupAll());
                    }
                    else if ((libNovC_gf_NC_PerkIsNew(lv_indexEquipment) == true)) {
                        libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)], libNCUI_ge_NU_DialogItemNewState_NewItem);
                    }
                }
                else {
                    libNCUI_gv_nU_EquipmentList[libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup)][libComC_gf_CC_PerkUISlot(lv_indexEquipment)] = null;
                }
            }    
        }

    }
    libNCUI_gf_NU_EquipmentToggleSelectionPanel(1);
    libNCUI_gf_NU_EquipmentUpdateSelectedItemText(1, 1);
}

void libNCUI_gf_NU_EquipmentToggleSubselectionItem (bool lp_clicked, int lp_equipmentID, int lp_itemID) {
    int auto3BF02E4C_ae;
    int auto3BF02E4C_ai;

    // Variable Declarations
    int lv_equipmentItemIndex;

    // Variable Initialization

    // Implementation
    auto3BF02E4C_ae = libNCUI_gv_nUC_EquipmentItemCount;
    auto3BF02E4C_ai = 1;
    lv_equipmentItemIndex = 1;
    for ( ; ( (auto3BF02E4C_ai >= 0 && lv_equipmentItemIndex <= auto3BF02E4C_ae) || (auto3BF02E4C_ai <= 0 && lv_equipmentItemIndex >= auto3BF02E4C_ae) ) ; lv_equipmentItemIndex += auto3BF02E4C_ai ) {
        if (((libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lp_itemID] == libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex]) && (libNCUI_gv_nU_EquipmentSlotContainerItemButtonsToggleState[lp_equipmentID][lv_equipmentItemIndex] == false))) {
            libNCUI_gv_nU_EquipmentSlotContainerItemButtonsToggleState[lp_equipmentID][lv_equipmentItemIndex] = true;
            libNCUI_gv_nU_Equipment_Subselection_SelectedItem[lp_equipmentID] = lv_equipmentItemIndex;
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex], true, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_EquipmentSlotContainersSelectedTitle[lp_equipmentID], libNCUI_gf_NU_EquipmentSubselectionItemTitle(lp_equipmentID, lv_equipmentItemIndex), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_EquipmentSlotContainersSelectedDescription[lp_equipmentID], libNCUI_gf_NU_EquipmentSubselectionItemDescription(lp_equipmentID, lv_equipmentItemIndex), PlayerGroupAll());
            DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex], PlayerGroupAll(), "AssignedState", "Assigned");
            libNCUI_gf_NU_DialogItemNewStateSet(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex], libNCUI_ge_NU_DialogItemNewState_NoNewItem);
            libNovC_gf_NC_PerkIsNewSet(libNCUI_gf_NU_EquipmentInSlot(lp_equipmentID, lp_itemID), false);
            if ((lp_clicked == true) && (libNovC_gf_NC_PerkUISound(libNCUI_gf_NU_EquipmentInSlot(lp_equipmentID, lv_equipmentItemIndex)) != null)) {
                SoundPlayForPlayer(SoundLink(libNovC_gf_NC_PerkUISound(libNCUI_gf_NU_EquipmentInSlot(lp_equipmentID, lv_equipmentItemIndex)), c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            }

        }
        else if (((libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lp_itemID] == libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex]) && (libNCUI_gv_nU_EquipmentSlotContainerItemButtonsToggleState[lp_equipmentID][lv_equipmentItemIndex] == true))) {
            libNCUI_gv_nU_EquipmentSlotContainerItemButtonsToggleState[lp_equipmentID][lv_equipmentItemIndex] = false;
            libNCUI_gv_nU_Equipment_Subselection_SelectedItem[lp_equipmentID] = 0;
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_EquipmentSlotContainersSelectedTitle[lp_equipmentID], StringToText(""), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNCUI_gv_nU_EquipmentSlotContainersSelectedDescription[lp_equipmentID], StringToText(""), PlayerGroupAll());
            DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex], PlayerGroupAll(), "AssignedState", "Unassigned");
        }
        else if (((libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lp_itemID] != libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex]) && (libNCUI_gv_nU_EquipmentSlotContainerItemButtonsToggleState[lp_equipmentID][lv_equipmentItemIndex] == true))) {
            libNCUI_gv_nU_EquipmentSlotContainerItemButtonsToggleState[lp_equipmentID][lv_equipmentItemIndex] = false;
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex], false, PlayerGroupAll());
            DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex], PlayerGroupAll(), "AssignedState", "Unassigned");
        }
        else if (((libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lp_itemID] != libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex]) && (libNCUI_gv_nU_EquipmentSlotContainerItemButtonsToggleState[lp_equipmentID][lv_equipmentItemIndex] == false))) {
            libNCUI_gv_nU_EquipmentSlotContainerItemButtonsToggleState[lp_equipmentID][lv_equipmentItemIndex] = false;
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex], false, PlayerGroupAll());
            DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lp_equipmentID][lv_equipmentItemIndex], PlayerGroupAll(), "AssignedState", "Unassigned");
        }
    }
    libNCUI_gf_NU_EquipmentUpdateSelectionIndicator(lp_equipmentID);
}

void libNCUI_gf_NU_EquipmentToggleSelectionPanel (int lp_itemID) {
    int autoD14EA30C_ae;
    int autoD14EA30C_ai;

    // Variable Declarations
    int lv_equipmentSlotIndex;

    // Variable Initialization

    // Implementation
    autoD14EA30C_ae = libNCUI_gv_nUC_EquipmentSlotCount;
    autoD14EA30C_ai = 1;
    lv_equipmentSlotIndex = 1;
    for ( ; ( (autoD14EA30C_ai >= 0 && lv_equipmentSlotIndex <= autoD14EA30C_ae) || (autoD14EA30C_ai <= 0 && lv_equipmentSlotIndex >= autoD14EA30C_ae) ) ; lv_equipmentSlotIndex += autoD14EA30C_ai ) {
        if (((libNCUI_gv_nU_EquipmentSlotContainers[lp_itemID] == libNCUI_gv_nU_EquipmentSlotContainers[lv_equipmentSlotIndex]) && (libNCUI_gv_nU_EquipmentSlotContainersToggleState[lp_itemID] == false))) {
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_EquipmentSlotContainers[lv_equipmentSlotIndex], true, PlayerGroupAll());
            libNCUI_gv_nU_EquipmentSlotContainersToggleState[lv_equipmentSlotIndex] = true;
        }
        else {
            libNtve_gf_SetDialogItemToggled(libNCUI_gv_nU_EquipmentSlotContainers[lv_equipmentSlotIndex], false, PlayerGroupAll());
            libNCUI_gv_nU_EquipmentSlotContainersToggleState[lv_equipmentSlotIndex] = false;
        }
    }
}

void libNCUI_gf_NU_EquipmentUpdateSelectionIndicator (int lp_equipmentID) {
    // Implementation
    if ((libNCUI_gf_NU_EquipmentInSlot(lp_equipmentID, libNCUI_gv_nU_Equipment_Subselection_SelectedItem[lp_equipmentID]) != null)) {
        DialogControlSetAnimationState(libNCUI_gv_nU_EquipmentSlotIndicators[lp_equipmentID], PlayerGroupAll(), "EquipmentState", (libNCUI_gf_NU_EquipmentInSlot(lp_equipmentID, libNCUI_gv_nU_Equipment_Subselection_SelectedItem[lp_equipmentID])));
    }

}

void libNCUI_gf_NU_EquipmentUpdateSelectedItemText (int lp_equipmentID, int lp_itemID) {
    // Implementation
    if ((lp_equipmentID > 0) && (lp_itemID > 0)) {
        libNtve_gf_SetDialogItemText(libNCUI_gv_nU_EquipmentSelectedItemTitle, libNCUI_gf_NU_EquipmentSubselectionItemTitle(lp_equipmentID, lp_itemID), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNCUI_gv_nU_EquipmentSelectedItemFluffLabel, libNCUI_gf_NU_EquipmentSubselectionItemFluffDescription(lp_equipmentID, lp_itemID), PlayerGroupAll());
    }

}

void libNCUI_gf_NU_EquipmentDisplay () {
    // Variable Declarations
    int lv_equipmentGroupIndex;
    int lv_equipmentIndex;
    string lv_equipment;

    // Variable Initialization

    // Implementation
    if ((UserDataGetInt("WriterStates", "VisitedEquipmentRoom", "Value", 1) == 1)) {
        libNCUI_gv_nU_EquipmentTutorialStage = libNCUI_gv_nUC_EquipmentTutorialEndStage;
    }

    libNCUI_gf_NU_EquipmentCreate();
    libNCUI_gf_NU_EquipmentInitFromData();
    DialogSetVisible(libNCUI_gv_nU_EquipmentDialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libNCUI_gv_nU_EquipmentPanel, PlayerGroupAll(), true);
    if ((libNtve_gf_PlayerInStoryMode(1) == true)) {
        TimerStart(libNCUI_gv_nU_EquipmentReigelResponseTimer, libNCUI_gv_nUC_EquipmentReigelResponseDelay, false, c_timeReal);
        TriggerEnable(libNCUI_gt_NU_EquipmentReigelResponse, true);
        TriggerExecute(libNCUI_gt_NU_EquipmentRoomEntryFluff, true, false);
        TriggerExecute(libNCUI_gt_NU_EquipmentTutorial, true, false);
        DialogControlSetEnabled(libNCUI_gv_nU_EquipmentTutorialResetButton, PlayerGroupAll(), true);
    }
    else {
        TriggerEnable(libNCUI_gt_NU_EquipmentReigelResponse, false);
        DialogControlSetEnabled(libNCUI_gv_nU_EquipmentTutorialResetButton, PlayerGroupAll(), false);
    }
    libNCUI_gv_nU_EquipmentRoomEntered = true;
}

void libNCUI_gf_NU_EquipmentClose () {
    // Implementation
    ConversationDataStop();
    libNCUI_gf_NU_EquipmentUpdateData();
    UserDataSetInt("WriterStates", "VisitedEquipmentRoom", "Value", 1, 1);
    UserDataSetInt("WriterStates", "ResponseEquipmentVOEnabled", "Value", 1, 0);
    TriggerEnable(libNCUI_gt_NU_EquipmentReigelResponse, false);
    libNtve_gf_StopTimer(libNCUI_gv_nU_EquipmentReigelResponseTimer);
    if ((libNCUI_gv_nU_EquipmentTutorialStage < libNCUI_gv_nUC_EquipmentTutorialEndStage)) {
        libNCUI_gv_nU_EquipmentTutorialStage = libNCUI_gv_nUC_EquipmentTutorialEndStage;
    }

    DialogClearSubtitlePositionOverrideControl();
    DialogDestroy(libNCUI_gv_nU_EquipmentDialog);
    libNCUI_gv_nU_EquipmentDialog = c_invalidDialogId;
}

bool libNCUI_gf_NU_EquipmentSelectionPanelToggleStateCheck (int lp_itemID) {
    // Implementation
    if ((libNCUI_gv_nU_EquipmentSlotContainersToggleState[lp_itemID] == false)) {
        return false;
    }
    else {
        return true;
    }
}

string libNCUI_gf_NU_EquipmentSlotSelectionIcon (int lp_equipmentGroup) {
    int auto8270A1E3_ai;
    int auto8270A1E3_ae;
    int auto86209AFE_ai;
    int auto86209AFE_ae;

    // Variable Declarations
    string lv_indexEquipmentGroup;
    string lv_indexEquipment;

    // Variable Initialization

    // Implementation
    auto8270A1E3_ai = 1;
    auto8270A1E3_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (auto8270A1E3_ai < auto8270A1E3_ae) {
        lv_indexEquipmentGroup = UserDataInstance("CampaignPerkGroup", auto8270A1E3_ai);
        auto8270A1E3_ai = auto8270A1E3_ai+1;
        if ((libComC_gf_CC_PerkGroupMissionUIOrder(lv_indexEquipmentGroup) == lp_equipmentGroup)) {
            auto86209AFE_ai = 1;
            auto86209AFE_ae = UserDataInstanceCount("CampaignPerk")+1;
            while (auto86209AFE_ai < auto86209AFE_ae) {
                lv_indexEquipment = UserDataInstance("CampaignPerk", auto86209AFE_ai);
                auto86209AFE_ai = auto86209AFE_ai+1;
                if( libComC_gf_CC_PerkGroupOfPerk(lv_indexEquipment) == lv_indexEquipmentGroup ) {
                    if ((libComC_gf_CC_PerkUISlot(lv_indexEquipment) == libNCUI_gv_nU_Equipment_Subselection_SelectedItem[lp_equipmentGroup]) && ((libComC_gf_CC_PerkStateCheck(lv_indexEquipment, libComC_ge_CC_PerkState_Unlocked) == true) || (libComC_gf_CC_PerkStateCheck(lv_indexEquipment, libComC_ge_CC_PerkState_Active) == true))) {
                        return libComC_gf_CC_PerkIcon(lv_indexEquipment);
                    }

                }    
            }
        }

    }
    return "Assets\\Textures\\btn-command-cancel.dds";
}

string libNCUI_gf_NU_EquipmentSlotSelectionIndicator (int lp_equipmentID) {
    // Implementation
    return libNCUI_gf_NU_EquipmentSlotSelectionIcon(lp_equipmentID);
}

text libNCUI_gf_NU_EquipmentSubselectionItemTitle (int lp_equipmentGroup, int lp_itemSlot) {
    // Variable Declarations
    string lv_equipment;

    // Variable Initialization

    // Implementation
    lv_equipment = libNCUI_gf_NU_EquipmentInSlot(lp_equipmentGroup, lp_itemSlot);
    if ((lv_equipment != null)) {
        return libComC_gf_CC_PerkName(lv_equipment);
    }
    else {
        return StringExternal("Param/Value/lib_NCUI_BA481A19");
    }
}

text libNCUI_gf_NU_EquipmentSubselectionItemDescription (int lp_equipmentGroup, int lp_itemSlot) {
    // Variable Declarations
    string lv_equipment;

    // Variable Initialization

    // Implementation
    lv_equipment = libNCUI_gf_NU_EquipmentInSlot(lp_equipmentGroup, lp_itemSlot);
    return libComC_gf_CC_PerkDescription(lv_equipment);
}

text libNCUI_gf_NU_EquipmentSubselectionItemFluffDescription (int lp_equipmentGroup, int lp_itemSlot) {
    // Variable Declarations
    string lv_equipment;

    // Variable Initialization

    // Implementation
    lv_equipment = libNCUI_gf_NU_EquipmentInSlot(lp_equipmentGroup, lp_itemSlot);
    if ((lv_equipment != null)) {
        return libNovC_gf_NC_PerkDescriptionExtra(lv_equipment);
    }
    else {
        return StringToText("");
    }
}

string libNCUI_gf_NU_EquipmentSubselectionItemIcon (int lp_equipmentGroup, int lp_itemSlot) {
    // Variable Declarations
    string lv_equipment;

    // Variable Initialization

    // Implementation
    lv_equipment = libNCUI_gf_NU_EquipmentInSlot(lp_equipmentGroup, lp_itemSlot);
    if ((lv_equipment != null)) {
        return libComC_gf_CC_PerkIcon(lv_equipment);
    }
    else {
        return "Assets\\Textures\\blank.dds";
    }
}

string libNCUI_gf_NU_EquipmentInSlot (int lp_equipmentSlot, int lp_itemSlot) {
    // Implementation
    return libNCUI_gv_nU_EquipmentList[lp_equipmentSlot][lp_itemSlot];
}

void libNCUI_gf_NU_EquipmentClosed (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libNCUI_gv_nUC_EquipmentEventClosed);
}

void libNCUI_gf_NU_EquipmentOpened (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libNCUI_gv_nUC_EquipmentEventOpened);
}

trigger auto_libNCUI_gf_DisplayArmyButton_Trigger = null;
bool auto_libNCUI_gf_DisplayArmyButton_lp_doDoNot;

void libNCUI_gf_DisplayArmyButton (bool lp_doDoNot) {
    auto_libNCUI_gf_DisplayArmyButton_lp_doDoNot = lp_doDoNot;

    if (auto_libNCUI_gf_DisplayArmyButton_Trigger == null) {
        auto_libNCUI_gf_DisplayArmyButton_Trigger = TriggerCreate("auto_libNCUI_gf_DisplayArmyButton_TriggerFunc");
    }

    TriggerExecute(auto_libNCUI_gf_DisplayArmyButton_Trigger, false, false);
}

bool auto_libNCUI_gf_DisplayArmyButton_TriggerFunc (bool testConds, bool runActions) {
    bool lp_doDoNot = auto_libNCUI_gf_DisplayArmyButton_lp_doDoNot;

    // Implementation
    libNCUI_gf_NU_ArmyButtonHookup();
    TriggerEnable(libNCUI_gt_NU_ArmyButtonUsed, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    if ((lp_doDoNot == true)) {
        libNCUI_gf_ToggleArmyButtonFlashing(true);
    }

    return true;
}

void libNCUI_gf_NU_ArmyButtonHookup () {
    // Implementation
    if ((libNCUI_gv_NU_ArmyButton != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookupStandard(c_triggerControlTypeFlash, "UIContainer/ConsoleUIContainer/ArmyButtonTipEffects");
    libNCUI_gv_NU_ArmyButtonTipPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/ArmyButton");
    libNCUI_gv_NU_ArmyButton = DialogControlLastCreated();
}

void libNCUI_gf_ToggleArmyButtonFlashing (bool lp_onOff) {
    // Implementation
    if ((lp_onOff == true)) {
        libNCUI_gf_NU_ArmyButtonHookup();
        TriggerEnable(libNCUI_gt_NU_ArmyButtonUsed, true);
        libNCUI_gv_nU_ArmyButtonUsed = false;
        TriggerQueueEnter();
        TriggerExecute(libNCUI_gt_NU_FlashArmyButtonHelpTip, true, false);
        TriggerQueueExit();
    }
    else {
        TriggerExecute(libNCUI_gt_NU_ArmyButtonFlashingOff, true, false);
    }
}

void libNCUI_gf_SelectArmyButtonUsed (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libNCUI_gv_pUC_SelectArmyEventUsed);
}

void libNCUI_gf_DisplayCampaignDirective (text lp_directiveText) {
    // Implementation
    if ((libNCUI_gv_nU_DirectiveDialog == c_invalidDialogId)) {
        libNCUI_gf_NU_DirectiveInit();
    }

    DialogControlSetVisible(libNCUI_gv_nU_DirectivePanel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_DirectiveLabel, lp_directiveText, PlayerGroupAll());
}

void libNCUI_gf_HideCampaignDirective () {
    // Implementation
    if ((libNCUI_gv_nU_DirectiveDialog == c_invalidDialogId)) {
        return ;
    }

    DialogControlSetVisible(libNCUI_gv_nU_DirectivePanel, PlayerGroupAll(), false);
}

void libNCUI_gf_NU_DirectiveInit () {
    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNCUI_gv_nU_DirectiveDialog = DialogLastCreated();
    DialogSetVisible(libNCUI_gv_nU_DirectiveDialog, PlayerGroupAll(), true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/CampaignDirectiveDisplay");
    libNCUI_gv_nU_DirectivePanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_DirectivePanel, c_triggerControlTypeLabel, "DirectiveLabel");
    libNCUI_gv_NU_DirectiveLabel = DialogControlLastCreated();
}

int libNCUI_gf_NU_BB_HPBarCurrentWidth () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    int lv_width;

    // Variable Initialization

    // Implementation
    if ((libNCUI_gv_NU_BB_Boss == null)) {
        lv_current = libNCUI_gv_NU_BB_CurrentValue;
        lv_max = libNCUI_gv_NU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libNCUI_gv_NU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libNCUI_gv_NU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libNCUI_gv_NU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libNCUI_gv_NU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    if ((lv_max <= 0.0)) {
        lv_max = 1.0;
    }

    if ((lv_current > lv_max)) {
        lv_current = lv_max;
    }

    lv_width = FixedToInt((libNCUI_gv_nUC_BB_HPBarWidth * (lv_current / lv_max)));
    return lv_width;
}

text libNCUI_gf_NU_BB_HPBarFormatLabel () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;

    // Variable Initialization

    // Implementation
    if ((libNCUI_gv_NU_BB_Boss == null)) {
        lv_current = libNCUI_gv_NU_BB_CurrentValue;
        lv_max = libNCUI_gv_NU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libNCUI_gv_NU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libNCUI_gv_NU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libNCUI_gv_NU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libNCUI_gv_NU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    lv_label = (IntToText(FixedToInt(lv_current)) + StringExternal("Param/Value/lib_NCUI_A8DB4967") + IntToText(FixedToInt(lv_max)));
    return lv_label;
}

trigger auto_libNCUI_gf_NU_BB_HPBarChange_Trigger = null;

void libNCUI_gf_NU_BB_HPBarChange () {
    if (auto_libNCUI_gf_NU_BB_HPBarChange_Trigger == null) {
        auto_libNCUI_gf_NU_BB_HPBarChange_Trigger = TriggerCreate("auto_libNCUI_gf_NU_BB_HPBarChange_TriggerFunc");
    }

    TriggerExecute(auto_libNCUI_gf_NU_BB_HPBarChange_Trigger, false, false);
}

bool auto_libNCUI_gf_NU_BB_HPBarChange_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newWidth;
    int lv_width;
    int lv_damageBar;
    fixed lv_oldPct;
    fixed lv_newPct;
    string lv_iMAGE;

    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Implementation
    lv_newWidth = libNCUI_gf_NU_BB_HPBarCurrentWidth();
    lv_width = (libNCUI_gv_NU_BB_HPOldWidth - lv_newWidth);
    lv_oldPct = (libNCUI_gv_NU_BB_HPOldWidth / libNCUI_gv_nUC_BB_HPBarWidth);
    lv_newPct = (lv_newWidth / libNCUI_gv_nUC_BB_HPBarWidth);
    libNCUI_gv_NU_BB_HPOldWidth = lv_newWidth;
    if ((((lv_newPct <= 0.75) && (lv_oldPct > 0.75)) || ((lv_newPct <= 0.5) && (lv_oldPct > 0.5)) || ((lv_newPct <= 0.25) && (lv_oldPct > 0.25)))) {
        DialogControlSendAnimationEvent(libNCUI_gv_NU_BB_Panel, PlayerGroupAll(), "Highlight");
    }
    else if ((lv_newPct < 0.25)) {
        DialogControlSendAnimationEvent(libNCUI_gv_NU_BB_Panel, PlayerGroupAll(), "Danger");
    }
    else if (true) {
        DialogControlSendAnimationEvent(libNCUI_gv_NU_BB_Panel, PlayerGroupAll(), "DangerStop");
    }
    if ((lv_width > 0)) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_NU_BB_Panel, c_triggerControlTypeImage, "LotV_GameUnitFrame/BossHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libNCUI_gv_NU_BB_HpCurrentImage, c_anchorLeft, 0, 0);
        lv_damageBar = DialogControlLastCreated();
        DialogControlSetSize(lv_damageBar, PlayerGroupAll(), (libNCUI_gv_NU_BB_HPOldWidth + lv_width), libNCUI_gv_pUC_BB_HPBarHeight);
        libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 507, PlayerGroupAll());
        DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
        Wait(1.0, c_timeReal);
        DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
        Wait(1.1, c_timeReal);
        DialogControlDestroy(lv_damageBar);
    }

    return true;
}

void libNCUI_gf_DisplaySingularBossBarVoidCampaign (string lp_portrait, text lp_title, int lp_max) {
    // Implementation
    libNCUI_gv_NU_BB_Portraits = lp_portrait;
    libNCUI_gv_NU_BB_Title = lp_title;
    libNCUI_gv_NU_BB_Boss = null;
    libNCUI_gf_SetSingularBossBarMaximumValueVoidCampaign(lp_max, true);
    libNCUI_gf_SetSingularBossBarCurrentValueVoidCampaign(lp_max, true);
    libNCUI_gv_NU_BB_HPOldWidth = -1;
    if ((libNCUI_gv_NU_BB_Panel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidBossUnitFrame");
        libNCUI_gv_NU_BB_Panel = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_NU_BB_Panel, c_triggerControlTypeButton, "ClickableAreaHealthBar");
        libNCUI_gv_NU_BB_ClickableAreaHealthBar = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_NU_BB_Panel, c_triggerControlTypeButton, "ClickableAreaNameLabel");
        libNCUI_gv_NU_BB_ClickableAreaNameLabel = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_NU_BB_Panel, c_triggerControlTypeLabel, "NameLabel");
        libNCUI_gv_NU_BB_TitleLabel = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_NU_BB_Panel, c_triggerControlTypeImage, "HealthBarImage");
        libNCUI_gv_NU_BB_HpCurrentImage = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_NU_BB_Panel, c_triggerControlTypeLabel, "HealthLabel");
        libNCUI_gv_NU_BB_HpLabel = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_NU_BB_Panel, c_triggerControlTypeImage, "ObjectiveBarBorder");
        libNCUI_gv_NU_BB_ObjectiveBG = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_NU_BB_Panel, c_triggerControlTypeImage, "BossBarBorder");
        libNCUI_gv_NU_BB_BossBG = DialogControlLastCreated();
    }

    DialogControlSetVisible(libNCUI_gv_NU_BB_Panel, PlayerGroupAll(), true);
    libNCUI_gf_RefreshSingularBossBarVoidCampaign();
}

void libNCUI_gf_SetSingularBossBarMaximumValueVoidCampaign (int lp_max, bool lp_refresh) {
    // Implementation
    libNCUI_gv_NU_BB_MaxValue = IntToFixed(lp_max);
    if ((libNCUI_gv_NU_BB_MaxValue <= 0.0)) {
        libNCUI_gv_NU_BB_MaxValue = 1.0;
    }

    libNCUI_gv_NU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libNCUI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libNCUI_gf_SetSingularBossBarCurrentValueVoidCampaign (int lp_current, bool lp_refresh) {
    // Implementation
    libNCUI_gv_NU_BB_CurrentValue = IntToFixed(lp_current);
    if ((libNCUI_gv_NU_BB_CurrentValue < 0.0)) {
        libNCUI_gv_NU_BB_CurrentValue = 0.0;
    }

    libNCUI_gv_NU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libNCUI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libNCUI_gf_SetSingularBossBarBossVoidCampaign (unit lp_boss, bool lp_refresh) {
    // Implementation
    if ((lp_boss != null)) {
        TriggerEnable(libNCUI_gt_NU_BB_BossHPChanged, true);
        TriggerEnable(libNCUI_gt_NU_BossBarFocusOnTarget, true);
        TriggerEnable(libNCUI_gt_NU_BB_LoadUpdate, true);
    }

    libNCUI_gv_NU_BB_Boss = lp_boss;
    libNCUI_gv_NU_BB_MaxValue = 0.0;
    libNCUI_gv_NU_BB_CurrentValue = 0.0;
    if ((lp_refresh == true)) {
        libNCUI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libNCUI_gf_ShowHideSingularBossBarVoidCampaign (bool lp_showHide) {
    // Implementation
    if ((libNCUI_gv_NU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libNCUI_gv_NU_BB_Panel, PlayerGroupAll(), lp_showHide);
}

void libNCUI_gf_RefreshSingularBossBarVoidCampaign () {
    // Implementation
    if ((libNCUI_gv_NU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_BB_TitleLabel, libNCUI_gv_NU_BB_Title, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_BB_HpLabel, libNCUI_gf_NU_BB_HPBarFormatLabel(), PlayerGroupAll());
    DialogControlSetSize(libNCUI_gv_NU_BB_HpCurrentImage, PlayerGroupSingle(1), libNCUI_gf_NU_BB_HPBarCurrentWidth(), libNCUI_gv_pUC_BB_HPBarHeight);
    libNCUI_gf_NU_BB_HPBarChange();
    if ((libNCUI_gv_NU_BB_Style == libNCUI_ge_SingularBossBarStyle_Objective)) {
        DialogControlSetVisible(libNCUI_gv_NU_BB_BossBG, PlayerGroupAll(), false);
        DialogControlSetVisible(libNCUI_gv_NU_BB_ObjectiveBG, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libNCUI_gv_NU_BB_BossBG, PlayerGroupAll(), true);
        DialogControlSetVisible(libNCUI_gv_NU_BB_ObjectiveBG, PlayerGroupAll(), false);
    }
}

void libNCUI_gf_SetSingularBossBarColor (color lp_color) {
    // Implementation
    libNtve_gf_SetDialogItemColor(libNCUI_gv_NU_BB_HpCurrentImage, lp_color, PlayerGroupAll());
}

void libNCUI_gf_SetSingularBossBarTitleColor (color lp_color) {
    // Implementation
    libNtve_gf_SetDialogItemColor(libNCUI_gv_NU_BB_TitleLabel, lp_color, PlayerGroupAll());
}

void libNCUI_gf_SetSingularBossBarStyle (int lp_style) {
}

void libNCUI_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit) {
    int auto29980022_val;

    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;

    // Variable Initialization

    // Implementation
    libNCUI_gv_NU_HeroUnit[lp_index] = lp_heroUnit;
    libNCUI_gv_NU_HeroType[lp_index] = libNCUI_gf_NU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    libNCUI_gf_EnableLowHealthWarning(lp_index, lp_heroUnit);
    libNCUI_gv_NU_HeroShowLevel[lp_index] = false;
    libNCUI_gf_NU_UpdateHeroPanel(lp_index);
    TriggerEnable(libNCUI_gt_NU_HeroLoadUpdate, true);
    if ((libNCUI_gv_NU_HeroUnit[lp_index] == null)) {
        lv_noValidHeroes = true;
        IntLoopBegin(1, libNCUI_gv_nUC_HeroMaxHeroCount);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((libNCUI_gv_NU_HeroUnit[IntLoopCurrent()] == null)) {
            }
            else {
                lv_noValidHeroes = false;
                break;
            }
        }
        IntLoopEnd();
        if ((lv_noValidHeroes == true)) {
            TriggerEnable(libNCUI_gt_NU_HeroPanelUpdate, false);
            TriggerEnable(libNCUI_gt_NU_HeroUnitDamaged, false);
        }

    }
    else {
        if (((libNCUI_gv_NU_HeroType[lp_index] == libNCUI_ge_CampaignHeroes_Nova))) {
            DialogControlSendAnimationEvent(libNCUI_gv_nU_HeroPanel[lp_index], PlayerGroupAll(), "SwitchTerran");
        }

        TriggerEnable(libNCUI_gt_NU_HeroPanelUpdate, true);
        TriggerEnable(libNCUI_gt_NU_HeroUnitDamaged, true);
        TriggerEnable(libNCUI_gt_NU_HeroMouseHoverText, true);
        TriggerEnable(libNCUI_gt_NU_HeroUnitVitalChange, true);
        libNtve_gf_SetDialogItemAnimationDuration(libNCUI_gv_NU_HeroDialogCooldownImage[lp_index], 60.0, PlayerGroupAll());
        auto29980022_val = lp_index;
        if (auto29980022_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (auto29980022_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= libNCUI_gv_nUC_HeroMaxHeroCount)) {
            libNtve_gf_SetDialogItemHotkey(libNCUI_gv_NU_HeroDialogButton[lp_index], lv_heroHotkey, PlayerGroupSingle(UnitGetOwner(lp_heroUnit)));
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_NCUI_07D69887"), false);
        }
    }
}

void libNCUI_gf_NU_CreateHeroPanel (int lp_index) {
    int auto2536CC65_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    libNCUI_gv_nU_HeroPanel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    libNCUI_gv_nU_HeroDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    libNCUI_gv_NU_HeroDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    libNCUI_gv_nU_HeroDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    libNCUI_gv_NU_HeroDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libNCUI_gv_NU_HeroDialogLevelBox[lp_index], PlayerGroupAll(), true);
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    libNCUI_gv_NU_HeroDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    libNCUI_gv_NU_HeroDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    libNCUI_gv_NU_HeroDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    libNCUI_gv_NU_HeroDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    libNCUI_gv_NU_HeroDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    libNCUI_gv_NU_HeroDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    libNCUI_gv_NU_HeroDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    libNCUI_gv_NU_HeroDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    libNCUI_gv_NU_HeroDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    libNCUI_gv_NU_HeroDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    libNCUI_gv_NU_HeroDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    libNCUI_gv_NU_HeroDialogNameLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    libNCUI_gv_nU_HeroDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    libNCUI_gv_NU_HeroDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_HeroPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    libNCUI_gv_NU_HeroDialogShieldLabel[lp_index] = DialogControlLastCreated();
    auto2536CC65_val = lp_index;
    if (auto2536CC65_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (auto2536CC65_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    libNCUI_gv_NU_HeroDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libNCUI_gv_NU_HeroDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libNCUI_gv_NU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(libNCUI_gv_NU_HeroDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libNCUI_gv_NU_HeroDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libNCUI_gv_NU_HeroDialogShieldBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libNCUI_gv_nU_HeroDialogShieldBarImage[lp_index], 507, PlayerGroupAll());
}

int libNCUI_gf_NU_HeroTypeFromUnitType (string lp_unitType) {
    string auto066DA9BE_val;

    // Implementation
    auto066DA9BE_val = lp_unitType;
    if (auto066DA9BE_val == "NovaHero") {
        return libNCUI_ge_CampaignHeroes_Nova;
    }
    else if (auto066DA9BE_val == "NovaVulture") {
        return libNCUI_ge_CampaignHeroes_Nova;
    }
    else {
    }
    return libNCUI_ge_CampaignHeroes_None;
}

string libNCUI_gf_NU_HeroIcon (int lp_heroType) {
    int autoBEEE9A57_val;

    // Implementation
    autoBEEE9A57_val = lp_heroType;
    if (autoBEEE9A57_val == libNCUI_ge_CampaignHeroes_Nova) {
        return "Assets\\Textures\\novaex3_ingame_heroportrait.dds";
    }
    else {
    }
    return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
}

void libNCUI_gf_NU_UpdateHeroPanel (int lp_index) {
    int autoCE8EC21A_val;

    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;

    // Variable Initialization

    // Implementation
    if ((libNCUI_gv_NU_HeroUnit[lp_index] == null)) {
        if ((libNCUI_gv_nU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libNCUI_gv_nU_HeroPanel[lp_index], PlayerGroupAll(), false);
        }

        return ;
    }

    if ((libNCUI_gv_nU_HeroPanel[lp_index] == c_invalidDialogControlId)) {
        libNCUI_gf_NU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(libNCUI_gv_nU_HeroPanel[lp_index], PlayerGroupAll(), true);
    autoCE8EC21A_val = lp_index;
    if (autoCE8EC21A_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_NCUI_DD1F6DE6");
    }
    else if (autoCE8EC21A_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_NCUI_AC02B287");
    }
    else {
    }
    if ((UnitIsAlive(libNCUI_gv_NU_HeroUnit[lp_index]) == true)) {
        TextExpressionSetToken("Param/Expression/lib_NCUI_A27EDFDB", "A", UnitTypeGetName(UnitGetType(libNCUI_gv_NU_HeroUnit[lp_index])));
        TextExpressionSetToken("Param/Expression/lib_NCUI_A27EDFDB", "B", lv_hotkey);
        libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_NCUI_A27EDFDB"), PlayerGroupAll());
    }

    libNtve_gf_SetDialogItemImage(libNCUI_gv_NU_HeroDialogIconImage[lp_index], libNCUI_gf_NU_HeroIcon(libNCUI_gv_NU_HeroType[lp_index]), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_NCUI_8EF0FE86", "CurrentLife", FixedToText(UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_NCUI_8EF0FE86", "MaxLife", FixedToText(UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_NCUI_8EF0FE86"), PlayerGroupAll());
    lv_life = FixedToInt((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(libNCUI_gv_nUC_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(libNCUI_gv_NU_HeroDialogHealthBarImage[lp_index], PlayerGroupAll(), lv_life, libNCUI_gv_nUC_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(libNCUI_gv_NU_HeroDialogHealthBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libNCUI_gv_NU_HeroDialogHealthBarImage[lp_index], PlayerGroupAll(), false);
    }
    if ((libNCUI_gf_NU_HeroHasShields(libNCUI_gv_NU_HeroType[lp_index]) == true)) {
        if ((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogShieldBarBackground[lp_index], PlayerGroupAll(), true);
            TextExpressionSetToken("Param/Expression/lib_NCUI_B73F5C5A", "CurrentLife", FixedToText(UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropShields, c_unitPropCurrent), 0));
            TextExpressionSetToken("Param/Expression/lib_NCUI_B73F5C5A", "MaxLife", FixedToText(UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropShieldsMax, c_unitPropCurrent), 0));
            libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_NCUI_B73F5C5A"), PlayerGroupAll());
            lv_shields = FixedToInt((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(libNCUI_gv_nUC_HEROUIBARWIDTH) / 100.0)));
            if ((lv_shields > 0)) {
                DialogControlSetSize(libNCUI_gv_nU_HeroDialogShieldBarImage[lp_index], PlayerGroupAll(), lv_shields, libNCUI_gv_nUC_HEROUISHIELDBARHEIGHT);
                DialogControlSetVisible(libNCUI_gv_nU_HeroDialogShieldBarImage[lp_index], PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(libNCUI_gv_nU_HeroDialogShieldBarImage[lp_index], PlayerGroupAll(), false);
            }
        }
        else {
            libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogShieldLabel[lp_index], StringExternal("Param/Value/lib_NCUI_DFAFC36B"), PlayerGroupAll());
            DialogControlSetVisible(libNCUI_gv_nU_HeroDialogShieldBarImage[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogShieldBarBackground[lp_index], PlayerGroupAll(), false);
        }
    }
    else {
        DialogControlSetVisible(libNCUI_gv_nU_HeroDialogShieldBarImage[lp_index], PlayerGroupAll(), false);
        DialogControlSetVisible(libNCUI_gv_NU_HeroDialogShieldBarBackground[lp_index], PlayerGroupAll(), false);
    }
    TextExpressionSetToken("Param/Expression/lib_NCUI_2C92FDA7", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_NCUI_2C92FDA7", "MaxEnergy", FixedToText(UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_NCUI_2C92FDA7"), PlayerGroupAll());
    if ((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        DialogControlSetVisible(libNCUI_gv_NU_HeroDialogEnergyBarBackground[lp_index], PlayerGroupAll(), false);
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(libNCUI_gv_nUC_HEROUIBARWIDTH) / 100.0)));
        DialogControlSetVisible(libNCUI_gv_NU_HeroDialogEnergyBarBackground[lp_index], PlayerGroupAll(), true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(libNCUI_gv_NU_HeroDialogEnergyBarImage[lp_index], PlayerGroupAll(), lv_energy, libNCUI_gv_nUC_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(libNCUI_gv_NU_HeroDialogEnergyBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libNCUI_gv_NU_HeroDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
    }
    if ((UnitIsAlive(libNCUI_gv_NU_HeroUnit[lp_index]) == true)) {
        if ((libNCUI_gf_NU_HeroHasShields(libNCUI_gv_NU_HeroType[lp_index]) == true)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libNCUI_gv_nU_HeroDialogBorderImage[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libNCUI_gv_nU_HeroDialogBorderImageAll[lp_index], PlayerGroupAll(), true);
        }
        else {
            if ((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
                DialogControlSetVisible(libNCUI_gv_NU_HeroDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), true);
                DialogControlSetVisible(libNCUI_gv_nU_HeroDialogBorderImage[lp_index], PlayerGroupAll(), false);
                DialogControlSetVisible(libNCUI_gv_nU_HeroDialogBorderImageAll[lp_index], PlayerGroupAll(), false);
            }
            else {
                DialogControlSetVisible(libNCUI_gv_NU_HeroDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), false);
                DialogControlSetVisible(libNCUI_gv_nU_HeroDialogBorderImage[lp_index], PlayerGroupAll(), true);
                DialogControlSetVisible(libNCUI_gv_nU_HeroDialogBorderImageAll[lp_index], PlayerGroupAll(), false);
            }
        }
    }

    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogLevelLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlSetVisible(libNCUI_gv_NU_HeroDialogLevelBox[lp_index], PlayerGroupAll(), false);
    if ((libNCUI_gv_NU_HeroDamageTimer[lp_index] > 0.0)) {
        libNCUI_gv_NU_HeroDamageTimer[lp_index] -= libNCUI_gv_nUC_HeroUpdateFrequency;
        if ((libNCUI_gv_NU_HeroDamageTimer[lp_index] <= 0.0)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogDamageTakenLabel[lp_index], PlayerGroupAll(), false);
            DialogControlFadeTransparency(libNCUI_gv_NU_HeroDialogDamageTakenImage[lp_index], PlayerGroupAll(), 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(libNCUI_gv_NU_HeroUnit[lp_index]) == false) && (libNCMI_gf_GameIsOver() == false)) {
        if ((libNCUI_gv_NU_HeroRevivable[lp_index] == true) && (PlayerGetCooldown(1, libNovC_gf_NC_ChampResAbility(libNCUI_gf_NU_PresetToHeroGameLink(libNCUI_gv_NU_HeroType[lp_index]))) > 0.0)) {
            libNtve_gf_SetDialogItemAnimationTime(libNCUI_gv_NU_HeroDialogCooldownImage[lp_index], (libNCUI_gv_nU_ChampionReviveTimer - PlayerGetCooldown(1, libNovC_gf_NC_ChampResAbility(libNCUI_gf_NU_PresetToHeroGameLink(libNCUI_gv_NU_HeroType[lp_index])))), PlayerGroupAll());
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), true);
        }
        else if (true) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
        }
        if ((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
        }

    }
    else {
        DialogControlSetVisible(libNCUI_gv_NU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemUnit(libNCUI_gv_NU_HeroDialogButton[lp_index], libNCUI_gv_NU_HeroUnit[lp_index], PlayerGroupAll());
}

string libNCUI_gf_NU_PresetToHeroGameLink (int lp_championPreset) {
    int auto7A2827D5_val;

    // Implementation
    auto7A2827D5_val = lp_championPreset;
    if (auto7A2827D5_val == libNCUI_ge_CampaignHeroes_Nova) {
        return "NovaHero";
    }
    else {
        return null;
    }
}

bool libNCUI_gf_NU_HeroHasShields (int lp_champion) {
    // Implementation
    if ((lp_champion == libNCUI_ge_CampaignHeroes_Nova) && (libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotGadget") == "EQPGadgetItem7")) {
        return true;
    }

    return false;
}

void libNCUI_gf_EnableLowHealthWarning (int lp_slotIndex, unit lp_watchedUnit) {
    // Implementation
    libNCUI_gv_nU_HealthWatchUnit[lp_slotIndex] = lp_watchedUnit;
    libNCUI_gv_nU_HealthWatchLastHP[lp_slotIndex] = (UnitGetPropertyFixed(lp_watchedUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(lp_watchedUnit, c_unitPropShields, c_unitPropCurrent));
    TriggerEnable(libNCUI_gt_NU_HealthWatchLifeCheck, true);
    TriggerEnable(libNCUI_gt_NU_HealthWatchUnitDies, true);
}

void libNCUI_gf_NU_HealthWatchCreate () {
    // Implementation
    if ((libNCUI_gv_nU_HealthWatchDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNCUI_gv_nU_HealthWatchDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1200, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_effects_splash2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNCUI_gv_nU_HealthWatchImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

bool libNCUI_gf_NU_HealthWatchUnitBelowThreshold (unit lp_watchUnit) {
    // Implementation
    if (((UnitGetPropertyFixed(lp_watchUnit, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lp_watchUnit, c_unitPropShieldsMax, c_unitPropCurrent)) > 0.0)) {
        if ((libNCUI_gv_nUC_HealthWatchThreshold > ((UnitGetPropertyFixed(lp_watchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(lp_watchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(lp_watchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(lp_watchUnit, c_unitPropShieldsMax, c_unitPropCurrent))))) {
            return true;
        }

    }

    return false;
}

void libNCUI_gf_NM_StopHeroLowHPSound () {
    // Implementation
    if ((libNCUI_gv_nU_HealthWatchSoundStart != null)) {
        SoundStop(libNCUI_gv_nU_HealthWatchSoundStart, true);
        libNCUI_gv_nU_HealthWatchSoundStart = null;
    }

    if ((libNCUI_gv_nU_HealthWatchSoundBreath != null)) {
        SoundStop(libNCUI_gv_nU_HealthWatchSoundBreath, true);
        libNCUI_gv_nU_HealthWatchSoundBreath = null;
    }

    if ((libNCUI_gv_nU_HealthWatchSoundHeartbeat != null)) {
        SoundStop(libNCUI_gv_nU_HealthWatchSoundHeartbeat, true);
        libNCUI_gv_nU_HealthWatchSoundHeartbeat = null;
    }

    TriggerStop(libNCUI_gt_NU_HealthWatchBreathLoop);
    TriggerStop(libNCUI_gt_NU_HealthWatchHeartLoop);
    TriggerEnable(libNCUI_gt_NU_HealthWatchStartSound, true);
    TriggerEnable(libNCUI_gt_NU_HealthWatchBreathLoop, true);
    TriggerEnable(libNCUI_gt_NU_HealthWatchHeartLoop, true);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_LowHealthEnd);
}

trigger auto_libNCUI_gf_NU_UpdateObjectivePanel_Trigger = null;

void libNCUI_gf_NU_UpdateObjectivePanel () {
    if (auto_libNCUI_gf_NU_UpdateObjectivePanel_Trigger == null) {
        auto_libNCUI_gf_NU_UpdateObjectivePanel_Trigger = TriggerCreate("auto_libNCUI_gf_NU_UpdateObjectivePanel_TriggerFunc");
    }

    TriggerExecute(auto_libNCUI_gf_NU_UpdateObjectivePanel_Trigger, false, false);
}

bool auto_libNCUI_gf_NU_UpdateObjectivePanel_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    while (true) {
        if ((libNCUI_gv_NU_ObjectivePanel != c_invalidDialogControlId) && (libNtve_gf_PlayerInCinematicMode(1) == false)) {
            if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (libNCUI_gv_nU_HeroPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libNCUI_gv_nU_HeroPanel[1], 1) == true) && (libNCUI_gv_nU_HeroPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libNCUI_gv_nU_HeroPanel[2], 1) == true)) {
                libNtve_gf_SetDialogItemAlphaMask(libNCUI_gv_NU_ObjectivePanel, "@UI/ObjectivePanelMaskTwoHeroes", PlayerGroupAll());
            }
            else if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (((libNCUI_gv_nU_HeroPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libNCUI_gv_nU_HeroPanel[1], 1) == true)) || ((libNCUI_gv_nU_HeroPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libNCUI_gv_nU_HeroPanel[2], 1) == true)))) {
                libNtve_gf_SetDialogItemAlphaMask(libNCUI_gv_NU_ObjectivePanel, "", PlayerGroupAll());
            }
            else if (((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == false) || (((libNCUI_gv_nU_HeroPanel[1] == c_invalidDialogControlId) || (DialogControlIsVisible(libNCUI_gv_nU_HeroPanel[1], 1) == false)) && ((libNCUI_gv_nU_HeroPanel[2] == c_invalidDialogControlId) || (DialogControlIsVisible(libNCUI_gv_nU_HeroPanel[2], 1) == false))))) {
                libNtve_gf_SetDialogItemAlphaMask(libNCUI_gv_NU_ObjectivePanel, "", PlayerGroupAll());
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

void libNCUI_gf_NU_ObjectivePanelInit () {
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
    libNCUI_gv_NU_ObjectivePanel = DialogControlLastCreated();
    libNCUI_gf_NU_UpdateObjectivePanel();
}

void libNCUI_gf_TimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed) {
    string auto2D681054_val;

    // Variable Declarations
    string lv_image;

    // Variable Initialization

    // Implementation
    TimerWindowCreate(lp_timer, lp_title, lp_visible, lp_elapsed);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBackground, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFill, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBorder, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFrame, c_triggerImageTypeNineSlice);
    TimerWindowSetStyle(TimerWindowLastCreated(), c_timerWindowStyleVerticalTitleTime, false);
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 80);
    libNCUI_gf_RepositionTimerWindow(TimerWindowLastCreated());
    if ((libNCUI_gv_nU_TimerWindowHighlightFrame != c_invalidDialogControlId)) {
        DialogControlDestroy(libNCUI_gv_nU_TimerWindowHighlightFrame);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer\\ConsoleUIContainer\\TriggerWindowPanel\\TimerWindowTemplate");
    libNCUI_gv_nU_TimerWindowHighlightFrame = DialogControlLastCreated();
    libNCUI_gv_nU_TimerWindowTimer = lp_timer;
    libNCUI_gv_nU_TimerWindowInDanger = false;
    TriggerEnable(libNCUI_gt_NU_TimerWindowThresholdCrossed, true);
    TriggerEnable(libNCUI_gt_NU_TimerWindowLoadUpdate, true);
    libNCUI_gf_FlashTimerWindow(8.0, false);
    auto2D681054_val = PlayerRace(1);
    if (auto2D681054_val == "Prot") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 100.00, 0.00), 1);
    }
    else if (auto2D681054_val == "Terr") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(42.75, 68.24, 16.86), 1);
    }
    else if (auto2D681054_val == "Zerg") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 1);
    }
    else {
    }
}

void libNCUI_gf_RepositionTimerWindow (int lp_timerWindow) {
    // Implementation
    TimerWindowSetAnchor(lp_timerWindow, c_anchorTopRight, 0, 50);
}

void libNCUI_gf_FlashTimerWindow (fixed lp_duration, bool lp_waitOption) {
    // Implementation
    libNCUI_gv_nU_TimerWindowHighlightDuration = lp_duration;
    TriggerExecute(libNCUI_gt_NU_TimerWindowFlash, true, lp_waitOption);
}

void libNCUI_gf_SetTimerWindowDangerThreshold (fixed lp_thresholdTime) {
    // Implementation
    libNCUI_gv_nU_TimerWindowDangerThreshold = lp_thresholdTime;
}

void libNCUI_gf_NU_AddTip (text lp_tipName, int lp_tipType, text lp_tipDescription, text lp_tipAlertText, string lp_tipIcon) {
    // Implementation
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(lp_tipName, lp_tipType), lp_tipDescription, lp_tipAlertText, lp_tipIcon);
}

void libNCUI_gf_NU_CreditsNovaDisplay () {
    // Variable Declarations
    int lv_creditsDialog;
    int lv_creditsPanel;
    int lv_title;

    // Variable Initialization
    lv_creditsDialog = c_invalidDialogId;
    lv_creditsPanel = c_invalidDialogControlId;
    lv_title = c_invalidDialogControlId;

    // Implementation
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_creditsDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(lv_creditsDialog, c_triggerControlTypePanel, "LotV_VoidCredits/VoidCreditsTemplate");
    lv_creditsPanel = DialogControlLastCreated();
    DialogControlHookup(lv_creditsPanel, c_triggerControlTypeLabel, "TitleLabel");
    lv_title = DialogControlLastCreated();
    DialogControlFadeTransparency(lv_creditsPanel, PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(lv_creditsDialog, PlayerGroupAll(), true);
    DialogControlFadeTransparency(lv_creditsPanel, PlayerGroupAll(), 2.0, 0.0);
    Wait(6.0, c_timeGame);
    DialogControlFadeTransparency(lv_creditsPanel, PlayerGroupAll(), 2.0, 100.0);
    Wait(2.0, c_timeGame);
    DialogDestroy(lv_creditsDialog);
}

void libNCUI_gf_NU_VictoryCreate () {
    int auto34B08473_ae;
    int auto34B08473_ai;
    int auto9E95B4FC_ae;
    int auto9E95B4FC_ai;

    // Variable Declarations
    string[5] lv_kerriganKitAbilityPanelID;
    string[6] lv_kerriganUpgradeIconPanelID;
    int lv_panel;
    int lv_index;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    if ((libNCUI_gv_NU_VSDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
    libNCUI_gv_NU_VSDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Nova_ScoreScreen/VictoryPanelTemplate");
    libNCUI_gv_NU_VSPanel = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libNCUI_gv_NU_VSPanel, c_triggerControlTypePanel, "MainPanel");
    libNCUI_gv_NU_VSMainPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_NU_VSMainPanel, c_triggerControlTypeLabel, "VictoryTextLabel");
    libNCUI_gv_NU_VSLabelVictoryTitle = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_NU_VSMainPanel, c_triggerControlTypeLabel, "MissionTitleLabel");
    libNCUI_gv_NU_VSLabelMissionTitle = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_NU_VSMainPanel, c_triggerControlTypeLabel, "TimeTextLabel");
    libNCUI_gv_NU_VSLabelTime = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_NU_VSMainPanel, c_triggerControlTypeImage, "BackgroundCover");
    libNCUI_gv_NU_VSBackgroundCover = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_NU_VSMainPanel, c_triggerControlTypeImage, "MissionBackground");
    libNCUI_gv_NU_VSBackgroundCover2 = DialogControlLastCreated();
    auto34B08473_ae = 3;
    auto34B08473_ai = 1;
    lv_index = 1;
    for ( ; ( (auto34B08473_ai >= 0 && lv_index <= auto34B08473_ae) || (auto34B08473_ai <= 0 && lv_index >= auto34B08473_ae) ) ; lv_index += auto34B08473_ai ) {
        DialogControlHookup(libNCUI_gv_NU_VSMainPanel, c_triggerControlTypeCountdownLabel, "RewardTextLabel"+IntToString(lv_index));
        libNCUI_gv_zS_VSAchievementTitle3[lv_index] = DialogControlLastCreated();
    }
    auto9E95B4FC_ae = 3;
    auto9E95B4FC_ai = 1;
    lv_index = 1;
    for ( ; ( (auto9E95B4FC_ai >= 0 && lv_index <= auto9E95B4FC_ae) || (auto9E95B4FC_ai <= 0 && lv_index >= auto9E95B4FC_ae) ) ; lv_index += auto9E95B4FC_ai ) {
        DialogControlHookup(libNCUI_gv_NU_VSMainPanel, c_triggerControlTypeAchievement, "AchievementFrame"+IntToString(lv_index-1));
        libNCUI_gv_zS_VSAchievementTitle2[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libNCUI_gv_NU_VSMainPanel, c_triggerControlTypeButton, "PlayAgainButton");
    libNCUI_gv_NU_VSBtnPlayAgain = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_NU_VSMainPanel, c_triggerControlTypeButton, "CloseButton");
    libNCUI_gv_NU_VSBtnContinue = DialogControlLastCreated();
}

void libNCUI_gf_NU_VictoryDisplay (string lp_mission) {
    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libNCUI_gf_HideCampaignDirective();
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TransmissionClearAll();
    ConversationDataStop();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Victory);
    if ((libNCUI_gv_NU_VictoryMusicOverride == false)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    libNCUI_gf_NU_VictoryCreate();
    libNCUI_gf_NU_VictoryUpdate(lp_mission);
    DialogSetVisible(libNCUI_gv_NU_VSDialog, PlayerGroupAll(), true);
    TriggerEnable(libNCUI_gt_NU_VictoryContinue, true);
    TriggerEnable(libNCUI_gt_NU_VictoryPlayAgain, true);
}

void libNCUI_gf_NU_VictoryUpdate (string lp_mission) {
    int auto86793637_ae;
    int auto86793637_ai;
    int auto3ABE53F9_ai;
    int auto3ABE53F9_ae;
    int autoF378E21D_ae;
    int autoF378E21D_ai;
    int auto5B228D07_ai;
    int auto5B228D07_ae;
    int auto653F8D2D_ae;
    int auto653F8D2D_ai;
    int autoD4D88451_ae;
    int autoD4D88451_ai;

    // Variable Declarations
    string lv_indexObjective;
    string lv_indexPerk;
    string lv_indexTechItem;
    int lv_index;
    int lv_rewardCount;
    int lv_rewardIndex;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_VSLabelMissionTitle, libComC_gf_CC_MapName(lp_mission), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_NCUI_1D6AD694", "MISSIONTITLE", libComC_gf_CC_MapName(lp_mission));
    TextExpressionSetToken("Param/Expression/lib_NCUI_1D6AD694", "DIFFICULTYTITLE", DifficultyNameCampaign(PlayerDifficulty(1)));
    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_VSLabelMissionTitle, TextExpressionAssemble("Param/Expression/lib_NCUI_1D6AD694"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_VSLabelTime, libComC_gf_FormatTimeCampaign(libNCMI_gv_NM_MissionCompleteTime), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libNCUI_gv_NU_VSLabelVictoryTitle, StringExternal("Param/Value/lib_NCUI_BD1D498C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNCUI_gv_NU_VSBackgroundCover2, libNCUI_gf_NU_VictoryScreenBackground(lp_mission), PlayerGroupAll());
    auto86793637_ae = 3;
    auto86793637_ai = 1;
    lv_rewardIndex = 1;
    for ( ; ( (auto86793637_ai >= 0 && lv_rewardIndex <= auto86793637_ae) || (auto86793637_ai <= 0 && lv_rewardIndex >= auto86793637_ae) ) ; lv_rewardIndex += auto86793637_ai ) {
        DialogControlSetVisible(libNCUI_gv_zS_VSAchievementTitle3[lv_rewardIndex], PlayerGroupAll(), false);
    }
    if ((libComC_gf_LastMission() == "Nova09") && (libComC_gf_CurrentMissionIsSimulation() == false)) {
        libNtve_gf_SetDialogItemTooltip(libNCUI_gv_NU_VSBtnContinue, StringExternal("Param/Value/lib_NCUI_FDA694E0"), PlayerGroupAll());
    }

    auto3ABE53F9_ai = 1;
    auto3ABE53F9_ae = UserDataInstanceCount("CampaignTechItem")+1;
    while (auto3ABE53F9_ai < auto3ABE53F9_ae) {
        lv_indexTechItem = UserDataInstance("CampaignTechItem", auto3ABE53F9_ai);
        auto3ABE53F9_ai = auto3ABE53F9_ai+1;
        if ((libNovC_gf_NC_ArmyTechItemRequiredObjective(lv_indexTechItem) != null)) {
            autoF378E21D_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
            autoF378E21D_ai = 1;
            while (autoF378E21D_ai <= autoF378E21D_ae) {
                lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(autoF378E21D_ai-1)+"]", 1);
                autoF378E21D_ai = autoF378E21D_ai + 1;
                if ((libNovC_gf_NC_ArmyTechItemRequiredObjective(lv_indexTechItem) == lv_indexObjective)) {
                    lv_rewardCount += 1;
                    if ((libComC_gf_MissionObjectiveStateCheck(lv_indexObjective, libComC_ge_MissionObjectiveState_Completed) == true)) {
                        libNtve_gf_SetDialogItemText(libNCUI_gv_zS_VSAchievementTitle3[lv_rewardCount], libNovC_gf_NC_ArmyTechItemName(lv_indexTechItem), PlayerGroupAll());
                    }
                    else {
                        TextExpressionSetToken("Param/Expression/lib_NCUI_FD5E0824", "UPGRADE", libNovC_gf_NC_ArmyTechItemName(lv_indexTechItem));
                        libNtve_gf_SetDialogItemText(libNCUI_gv_zS_VSAchievementTitle3[lv_rewardCount], TextExpressionAssemble("Param/Expression/lib_NCUI_FD5E0824"), PlayerGroupAll());
                    }
                    DialogControlSetVisible(libNCUI_gv_zS_VSAchievementTitle3[lv_rewardCount], PlayerGroupAll(), true);
                    break;
                }

            }
        }

    }
    auto5B228D07_ai = 1;
    auto5B228D07_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto5B228D07_ai < auto5B228D07_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto5B228D07_ai);
        auto5B228D07_ai = auto5B228D07_ai+1;
        if ((libComC_gf_CC_PerkRequiredObjective(lv_indexPerk) != null)) {
            auto653F8D2D_ae = CatalogFieldValueCount(c_gameCatalogMap, lp_mission, "ObjectiveArray", 1);
            auto653F8D2D_ai = 1;
            while (auto653F8D2D_ai <= auto653F8D2D_ae) {
                lv_indexObjective = CatalogFieldValueGet(c_gameCatalogMap, lp_mission, "ObjectiveArray["+IntToString(auto653F8D2D_ai-1)+"]", 1);
                auto653F8D2D_ai = auto653F8D2D_ai + 1;
                if ((libComC_gf_CC_PerkRequiredObjective(lv_indexPerk) == lv_indexObjective)) {
                    lv_rewardCount += 1;
                    if ((libComC_gf_MissionObjectiveStateCheck(lv_indexObjective, libComC_ge_MissionObjectiveState_Completed) == true)) {
                        libNtve_gf_SetDialogItemText(libNCUI_gv_zS_VSAchievementTitle3[lv_rewardCount], libComC_gf_CC_PerkName(lv_indexPerk), PlayerGroupAll());
                        DialogControlSetVisible(libNCUI_gv_zS_VSAchievementTitle3[lv_rewardCount], PlayerGroupAll(), true);
                    }
                    else {
                        if ((libNovC_gf_NC_PerkIsSecret(lv_indexPerk) == false)) {
                            TextExpressionSetToken("Param/Expression/lib_NCUI_B607EE34", "EQUIPMENT", libComC_gf_CC_PerkName(lv_indexPerk));
                            libNtve_gf_SetDialogItemText(libNCUI_gv_zS_VSAchievementTitle3[lv_rewardCount], TextExpressionAssemble("Param/Expression/lib_NCUI_B607EE34"), PlayerGroupAll());
                            DialogControlSetVisible(libNCUI_gv_zS_VSAchievementTitle3[lv_rewardCount], PlayerGroupAll(), true);
                        }
                        else {
                            lv_rewardCount -= 1;
                        }
                    }
                    break;
                }

            }
        }

    }
    if ((lv_rewardCount == 0)) {
        DialogControlSendAnimationEvent(libNCUI_gv_NU_VSMainPanel, PlayerGroupAll(), "HideRewards");
    }
    else {
        DialogControlSendAnimationEvent(libNCUI_gv_NU_VSMainPanel, PlayerGroupAll(), "ShowRewards");
    }
    autoD4D88451_ae = 3;
    autoD4D88451_ai = 1;
    lv_index = 1;
    for ( ; ( (autoD4D88451_ai >= 0 && lv_index <= autoD4D88451_ae) || (autoD4D88451_ai <= 0 && lv_index >= autoD4D88451_ae) ) ; lv_index += autoD4D88451_ai ) {
        libNtve_gf_SetDialogItemAchievement(libNCUI_gv_zS_VSAchievementTitle2[lv_index], UserDataGetGameLink("Maps", libComC_gf_CC_MapUserDataInstance(lp_mission), "Achievements", lv_index), PlayerGroupAll());
    }
}

void libNCUI_gf_NU_VSDisplayRestartDialog () {
    int autoD44AF647_ae;
    int autoD44AF647_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    if ((libNCUI_gv_NU_VSRestartPanel == c_invalidDialogControlId)) {
        DialogControlHookup(libNCUI_gv_NU_VSPanel, c_triggerControlTypePanel, "RestartPanel");
        libNCUI_gv_NU_VSRestartPanel = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_NU_VSRestartPanel, c_triggerControlTypePanel, "DifficultyPulldownContainer");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePulldown, "DifficultyPulldown");
        libNCUI_gv_NU_VSRestartDifficultyPulldown = DialogControlLastCreated();
        autoD44AF647_ae = libComC_gv_cCC_DifficultyCount;
        autoD44AF647_ai = 1;
        lv_index = 1;
        for ( ; ( (autoD44AF647_ai >= 0 && lv_index <= autoD44AF647_ae) || (autoD44AF647_ai <= 0 && lv_index >= autoD44AF647_ae) ) ; lv_index += autoD44AF647_ai ) {
            DialogControlAddItem(libNCUI_gv_NU_VSRestartDifficultyPulldown, PlayerGroupAll(), DifficultyNameCampaign(libComC_gf_CC_DifficultyFromIndex(lv_index)));
        }
        DialogControlHookup(libNCUI_gv_NU_VSRestartPanel, c_triggerControlTypePanel, "RestartButton");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "Button");
        libNCUI_gv_NU_VSRestartRestartButton = DialogControlLastCreated();
        DialogControlHookup(libNCUI_gv_NU_VSRestartPanel, c_triggerControlTypePanel, "CancelButton");
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "Button");
        libNCUI_gv_NU_VSRestartCancelButton = DialogControlLastCreated();
    }

    TriggerEnable(libNCUI_gt_NU_VictoryRestartCancel, true);
    TriggerEnable(libNCUI_gt_NU_VictoryRestartRestart, true);
    DialogControlSelectItem(libNCUI_gv_NU_VSRestartDifficultyPulldown, PlayerGroupAll(), libComC_gf_CC_DifficultyIndex(PlayerDifficulty(1)));
    DialogControlSetVisible(libNCUI_gv_NU_VSRestartPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libNCUI_gv_NU_VSMainPanel, PlayerGroupAll(), false);
}

string libNCUI_gf_NU_VictoryScreenBackground (string lp_map) {
    // Implementation
    return libComC_gf_CC_MapLoadingScreenImage(lp_map);
}

void libNCUI_gf_NU_VictoryClosed (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libNCUI_gv_nUC_VictoryEventClosed);
}

void libNCUI_gf_OverrideScorescreenMusic () {
    // Implementation
    libNCUI_gv_NU_VictoryMusicOverride = true;
}

color libNCUI_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps) {
    int auto627A717C_val;

    // Variable Declarations
    int lv_middle;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Variable Initialization

    // Implementation
    auto627A717C_val = lp_steps;
    if (auto627A717C_val == 1) {
        return lp_color1;
    }
    else if (auto627A717C_val == 2) {
        lv_r = (ColorGetComponent(lp_color1, c_colorComponentRed)+(ColorGetComponent(lp_color2, c_colorComponentRed)-ColorGetComponent(lp_color1, c_colorComponentRed))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_g = (ColorGetComponent(lp_color1, c_colorComponentGreen)+(ColorGetComponent(lp_color2, c_colorComponentGreen)-ColorGetComponent(lp_color1, c_colorComponentGreen))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_b = (ColorGetComponent(lp_color1, c_colorComponentBlue)+(ColorGetComponent(lp_color2, c_colorComponentBlue)-ColorGetComponent(lp_color1, c_colorComponentBlue))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        return Color(lv_r, lv_g, lv_b);
    }
    else if (auto627A717C_val == 3) {
        lv_middle = ((lp_minValue+lp_maxValue)/2);
        if ((lp_progress < lv_middle)) {
            return libNCUI_gf_ProgressColor(lp_minValue, lv_middle, lp_progress, lp_color1, lp_color2, Color(0,0,0), 2);
        }
        else if ((lp_progress == lv_middle)) {
            return lp_color2;
        }
        else if ((lp_progress > lv_middle)) {
            return libNCUI_gf_ProgressColor(lv_middle, lp_maxValue, lp_progress, lp_color2, lp_color3, Color(0,0,0), 2);
        }
    }
    else {
    }
    return lp_color1;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: NU_DebugAchievement
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_DebugAchievement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementPanelSetVisible(PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_DebugAchievement_Init () {
    libNCUI_gt_NU_DebugAchievement = TriggerCreate("libNCUI_gt_NU_DebugAchievement_Func");
    TriggerAddEventChatMessage(libNCUI_gt_NU_DebugAchievement, c_playerAny, "-ach", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_BottomBarInit
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_BottomBarInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_image;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNCUI_gv_nU_BottomBarDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_StorySet/StorySetTemplate");
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNCUI_gv_nU_BottomBarPanel = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_BottomBarPanel, c_triggerControlTypePanel, "SubtitleAnchor");
    DialogControlHookup(libNCUI_gv_nU_BottomBarPanel, c_triggerControlTypeButton, "BridgeButton");
    libNCUI_gv_nU_BottomBarButton[1] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_BottomBarPanel, c_triggerControlTypePanel, "BridgeButtonScanLines");
    libNCUI_gv_nU_BottomBarButtonSelectedDecoration[1] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_BottomBarPanel, c_triggerControlTypeButton, "ArmyRoomButton");
    libNCUI_gv_nU_BottomBarButton[2] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_BottomBarPanel, c_triggerControlTypePanel, "ArmyButtonScanLines");
    libNCUI_gv_nU_BottomBarButtonSelectedDecoration[2] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_BottomBarPanel, c_triggerControlTypeButton, "ShipRoomButton");
    libNCUI_gv_nU_BottomBarButton[3] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_BottomBarPanel, c_triggerControlTypePanel, "ShipButtonScanLines");
    libNCUI_gv_nU_BottomBarButtonSelectedDecoration[3] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_BottomBarPanel, c_triggerControlTypeButton, "MissionArchiveRoomButton");
    libNCUI_gv_nU_BottomBarButton[4] = DialogControlLastCreated();
    DialogControlHookup(libNCUI_gv_nU_BottomBarPanel, c_triggerControlTypePanel, "SubtitleAnchor");
    libNCUI_gv_nU_BottomBarSubtitleAnchor = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_BottomBarInit_Init () {
    libNCUI_gt_NU_BottomBarInit = TriggerCreate("libNCUI_gt_NU_BottomBarInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_BottomBarButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_BottomBarButtonClicked_Func (bool testConds, bool runActions) {
    int auto917490C6_ae;
    int auto917490C6_ai;

    // Variable Declarations
    int lv_buttonIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCUI_gv_nU_BottomBarOn == false)) {
        return true;
    }

    auto917490C6_ae = libNCUI_gv_nUC_BOTTOMBUTTONCOUNT;
    auto917490C6_ai = 1;
    lv_buttonIndex = 1;
    for ( ; ( (auto917490C6_ai >= 0 && lv_buttonIndex <= auto917490C6_ae) || (auto917490C6_ai <= 0 && lv_buttonIndex >= auto917490C6_ae) ) ; lv_buttonIndex += auto917490C6_ai ) {
        if ((EventDialogControl() == libNCUI_gv_nU_BottomBarButton[lv_buttonIndex])) {
            if ((libNCUI_gv_nU_BottomBarButtonToggled[lv_buttonIndex] == false)) {
                libComC_gf_CC_EventDispatch(libNovC_ge_NC_Event_UIBottomBarRoomChange, IntToString(lv_buttonIndex), "", false);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_BottomBarButtonClicked_Init () {
    libNCUI_gt_NU_BottomBarButtonClicked = TriggerCreate("libNCUI_gt_NU_BottomBarButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_BottomBarButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_ArchivesCreate
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_ArchivesCreate_Func (bool testConds, bool runActions) {
    int auto03E7174C_ae;
    int auto03E7174C_ai;
    int auto75248FC1_ai;
    int auto75248FC1_ae;

    // Variable Declarations
    string lv_indexMission;
    string lv_indexScene;
    bool lv_defaultSelection;
    int lv_bestPriority;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNCUI_gv_nU_MissionArchiveOverlayCreated == false)) {
        libNCUI_gf_NU_ArchivesOverlayCreate();
    }

    libNCUI_gv_nU_MasterArchivesEnabled = libComC_gf_CampaignIsComplete();
    if ((BattleReportPanelGetSelectedBattleReport(1) == c_invalidBattleReportId) && (libComC_gf_LastMissionConditionCheck(libComC_ge_MissionCondition_Simulation) == false)) {
        if ((libComC_gf_CampaignIsComplete() == true)) {
            lv_bestPriority = 0;
        }
        else {
            lv_bestPriority = 1000;
        }
        lv_defaultSelection = true;
    }

    auto03E7174C_ae = CatalogEntryCount(c_gameCatalogMap);
    auto03E7174C_ai = 1;
    while (auto03E7174C_ai <= auto03E7174C_ae) {
        lv_indexMission = CatalogEntryGet(c_gameCatalogMap, auto03E7174C_ai);
        auto03E7174C_ai = auto03E7174C_ai + 1;
        if (CatalogFieldValueGet(c_gameCatalogMap, lv_indexMission, "Kind", 1) == "Mission" && libComC_gf_CC_MapInternal(lv_indexMission) == false) {
            if ((libComC_gf_MissionStatusCheck(lv_indexMission, libComC_ge_MissionStatus_Completed) == true)) {
                BattleReportCreate(PlayerGroupAll(), libComC_gf_CC_MapName(lv_indexMission), c_battleReportTypeMission, c_battleReportStateCompleted);
                BattleReportSetPriority(BattleReportLastCreated(), libNCUI_gf_NU_ArchivesMissionPriority(lv_indexMission));
                BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 1, true);
                BattleReportSetMissionText(BattleReportLastCreated(), libComC_gf_CC_MapName(lv_indexMission));
            }
            else {
                BattleReportCreate(PlayerGroupAll(), libComC_gf_CC_MapName(lv_indexMission), c_battleReportTypeMission, c_battleReportStateHidden);
            }
            DataTableSetString(true, libNCUI_gf_NU_ArchivesDataString(BattleReportLastCreated()), (lv_indexMission));
            DataTableSetInt(true, libNCUI_gf_NU_ArchivesDataTypeString(BattleReportLastCreated()), (libNCUI_ge_NU_ArchivesType_Mission));
            if ((libNCUI_gv_nU_MasterArchivesEnabled == false) && (lv_defaultSelection == true) && (libNCUI_gf_NU_ArchivesMissionPriority(lv_indexMission) <= lv_bestPriority)) {
                lv_bestPriority = libNCUI_gf_NU_ArchivesMissionPriority(lv_indexMission);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
            else if ((libComC_gf_LastMap() == lv_indexMission) && (libComC_gf_LastMapConditionCheck(libComC_ge_MissionCondition_Simulation) == true)) {
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
        }    
    }
    auto75248FC1_ai = 1;
    auto75248FC1_ae = UserDataInstanceCount("Scenes")+1;
    while (auto75248FC1_ai < auto75248FC1_ae) {
        lv_indexScene = UserDataInstance("Scenes", auto75248FC1_ai);
        if ((libNCUI_gf_NU_ArchivesScenePriority(lv_indexScene) < 1000)) {
            BattleReportCreate(PlayerGroupAll(), libComC_gf_CC_SceneName(lv_indexScene), c_battleReportTypeScene, c_battleReportStateCompleted);
            BattleReportSetPriority(BattleReportLastCreated(), libNCUI_gf_NU_ArchivesScenePriority(lv_indexScene));
            DataTableSetString(true, libNCUI_gf_NU_ArchivesDataString(BattleReportLastCreated()), ("Scenes;" + (lv_indexScene)));
            DataTableSetInt(true, libNCUI_gf_NU_ArchivesDataTypeString(BattleReportLastCreated()), (libNCUI_ge_NU_ArchivesType_Scene));
            if ((libNCUI_gv_nU_MasterArchivesEnabled == true) && (lv_defaultSelection == true) && (libNCUI_gf_NU_ArchivesScenePriority(lv_indexScene) >= lv_bestPriority)) {
                lv_bestPriority = libNCUI_gf_NU_ArchivesScenePriority(lv_indexScene);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
            else if ((libNCUI_gv_nU_MasterArchivesEnabled == false) && (lv_defaultSelection == true) && (libNCUI_gf_NU_ArchivesScenePriority(lv_indexScene) <= lv_bestPriority)) {
                lv_bestPriority = libNCUI_gf_NU_ArchivesScenePriority(lv_indexScene);
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), BattleReportLastCreated());
            }
        }

        auto75248FC1_ai = auto75248FC1_ai+1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_ArchivesCreate_Init () {
    libNCUI_gt_NU_ArchivesCreate = TriggerCreate("libNCUI_gt_NU_ArchivesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_ArchivesSelectionChanged
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_ArchivesSelectionChanged_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_ArchivesUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_ArchivesSelectionChanged_Init () {
    libNCUI_gt_NU_ArchivesSelectionChanged = TriggerCreate("libNCUI_gt_NU_ArchivesSelectionChanged_Func");
    TriggerEnable(libNCUI_gt_NU_ArchivesSelectionChanged, false);
    TriggerAddEventBattleReportPanelSelectionChanged(libNCUI_gt_NU_ArchivesSelectionChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_ArchivesMissionPlayClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_ArchivesMissionPlayClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCUI_gv_nU_ArchivesMissionPlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libNCUI_gv_nU_ArchivesMissionPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_CC_EventDispatch(libNovC_ge_NC_Event_UIArchivesPlayMission, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_ArchivesMissionPlayClicked_Init () {
    libNCUI_gt_NU_ArchivesMissionPlayClicked = TriggerCreate("libNCUI_gt_NU_ArchivesMissionPlayClicked_Func");
    TriggerEnable(libNCUI_gt_NU_ArchivesMissionPlayClicked, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_ArchivesMissionPlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_ArchivesScenePlayClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_ArchivesScenePlayClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCUI_gv_nU_ArchivesScenePlayButton != c_invalidDialogControlId))) {
            return false;
        }

        if (!((EventDialogControl() == libNCUI_gv_nU_ArchivesScenePlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_CC_EventDispatch(libNovC_ge_NC_Event_UIArchivesPlayScene, "", "", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_ArchivesScenePlayClicked_Init () {
    libNCUI_gt_NU_ArchivesScenePlayClicked = TriggerCreate("libNCUI_gt_NU_ArchivesScenePlayClicked_Func");
    TriggerEnable(libNCUI_gt_NU_ArchivesScenePlayClicked, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_ArchivesScenePlayClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_ArchivesCloseClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_ArchivesCloseClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libNCUI_gv_nU_ArchivesBackButton) || (EventDialogControl() == libNCUI_gv_nU_ArchivesQuitButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_CC_EventDispatch(libNovC_ge_NC_Event_UIArchivesQuit, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_ArchivesCloseClicked_Init () {
    libNCUI_gt_NU_ArchivesCloseClicked = TriggerCreate("libNCUI_gt_NU_ArchivesCloseClicked_Func");
    TriggerEnable(libNCUI_gt_NU_ArchivesCloseClicked, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_ArchivesCloseClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_ArchivesSynced
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_ArchivesSynced_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_ArchivesSynced = true;
    libNCUI_gf_NU_ArchivesUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_ArchivesSynced_Init () {
    libNCUI_gt_NU_ArchivesSynced = TriggerCreate("libNCUI_gt_NU_ArchivesSynced_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova02BriefingAnimations
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova02BriefingAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventFrame;
    int lv_mission;

    // Variable Initialization
    lv_eventFrame = libNCUI_gv_nU_MissionPanel;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = 2;
    TriggerExecute(libNCUI_gt_NU_Nova02BriefingTransmissions, true, false);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 1);
    Wait(5.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 2);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 3);
    Wait(2.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 4);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova02_00.ogv", PlayerGroupAll());
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 5);
    Wait(7.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 6);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 7);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 8);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 9);
    Wait(11.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 10);
    Wait(2.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 11);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova02_01.ogv", PlayerGroupAll());
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 12);
    Wait(12.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 13);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 14);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova02BriefingAnimations_Init () {
    libNCUI_gt_NU_Nova02BriefingAnimations = TriggerCreate("libNCUI_gt_NU_Nova02BriefingAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova02BriefingTransmissions
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova02BriefingTransmissions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventFrame;
    int lv_mission;

    // Variable Initialization
    lv_eventFrame = libNCUI_gv_nU_MissionPanel;

    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionBriefingCurrentlyPlayingTransmissions = TriggerGetCurrent();
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Horner, ConversationDataGetSound("Briefing_Nova02|Line00001", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Hall, ConversationDataGetSound("Briefing_Nova02|Line00002", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Horner, ConversationDataGetSound("Briefing_Nova02|Line00009", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova02|Line00005", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Horner, ConversationDataGetSound("Briefing_Nova02|Line00006", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Horner, ConversationDataGetSound("Briefing_Nova02|Line00008", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova02|Line00007", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova02BriefingTransmissions_Init () {
    libNCUI_gt_NU_Nova02BriefingTransmissions = TriggerCreate("libNCUI_gt_NU_Nova02BriefingTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova03BriefingAnimations
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova03BriefingAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventFrame;
    int lv_mission;

    // Variable Initialization
    lv_eventFrame = libNCUI_gv_nU_MissionPanel;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = 3;
    TriggerExecute(libNCUI_gt_NU_Nova03BriefingTransmissions, true, false);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 1);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova03_00.ogv", PlayerGroupAll());
    Wait(2.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 2);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 3);
    Wait(8.5, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova03_01.ogv", PlayerGroupAll());
    Wait(9.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 4);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 5);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 6);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 7);
    Wait(3.0, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova03_02.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 8);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 9);
    Wait(6.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 10);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 11);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 12);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova03_03.ogv", PlayerGroupAll());
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 13);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 14);
    Wait(6.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 15);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 16);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova03_04.ogv", PlayerGroupAll());
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 17);
    Wait(6.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 18);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 19);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 20);
    Wait(3.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova03BriefingAnimations_Init () {
    libNCUI_gt_NU_Nova03BriefingAnimations = TriggerCreate("libNCUI_gt_NU_Nova03BriefingAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova03BriefingTransmissions
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova03BriefingTransmissions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionBriefingCurrentlyPlayingTransmissions = TriggerGetCurrent();
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova03|Line00001", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova03|Line00002", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova03|Line00003", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova03|Line00004", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.2, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova03|Line00005", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(3.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova03|Line00006", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(2.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova03|Line00007", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova03|Line00008", true), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova03BriefingTransmissions_Init () {
    libNCUI_gt_NU_Nova03BriefingTransmissions = TriggerCreate("libNCUI_gt_NU_Nova03BriefingTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova04BriefingAnimations
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova04BriefingAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventFrame;
    int lv_mission;

    // Variable Initialization
    lv_eventFrame = libNCUI_gv_nU_MissionPanel;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = 4;
    TriggerExecute(libNCUI_gt_NU_Nova04BriefingTransmissions, true, false);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 1);
    Wait(3.2, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 2);
    Wait(4.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 3);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 4);
    Wait(2.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 5);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova04_00.ogv", PlayerGroupAll());
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 6);
    Wait(5.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 7);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 8);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 9);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 10);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova04_01.ogv", PlayerGroupAll());
    SoundPlayForPlayer(SoundLink("Event_Nova04Briefing_StadiumCrowdPanic", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCUI_gv_nU_MissionBriefingExtraMovieSound = SoundLastPlayed();
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 11);
    Wait(8.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 12);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 13);
    Wait(4.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 14);
    Wait(4.0, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova04_02.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 15);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 16);
    Wait(6.2, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 17);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 18);
    Wait(11.4, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 19);
    Wait(3.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 20);
    Wait(5.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova04BriefingAnimations_Init () {
    libNCUI_gt_NU_Nova04BriefingAnimations = TriggerCreate("libNCUI_gt_NU_Nova04BriefingAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova04BriefingTransmissions
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova04BriefingTransmissions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionBriefingCurrentlyPlayingTransmissions = TriggerGetCurrent();
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova04|Line00016", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova04|Line00017", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(2.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova04|Line00023", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova04|Line00018", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova04|Line00019", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova04|Line00024", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova04|Line00020", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova04|Line00021", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova04|Line00022", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova04BriefingTransmissions_Init () {
    libNCUI_gt_NU_Nova04BriefingTransmissions = TriggerCreate("libNCUI_gt_NU_Nova04BriefingTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova05BriefingAnimations
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova05BriefingAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventFrame;
    int lv_mission;

    // Variable Initialization
    lv_eventFrame = libNCUI_gv_nU_MissionPanel;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = 5;
    TriggerExecute(libNCUI_gt_NU_Nova05BriefingTransmissions, true, false);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 1);
    Wait(5.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 2);
    Wait(1.2, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 3);
    Wait(3.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 4);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova05_00.ogv", PlayerGroupAll());
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 5);
    Wait(12.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 6);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 7);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 8);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 9);
    Wait(2.0, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova05_01.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 10);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 11);
    Wait(12.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 12);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 13);
    Wait(4.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 14);
    Wait(3.0, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova05_02.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 16);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 17);
    Wait(4.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 18);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 19);
    Wait(3.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 15);
    Wait(6.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova05BriefingAnimations_Init () {
    libNCUI_gt_NU_Nova05BriefingAnimations = TriggerCreate("libNCUI_gt_NU_Nova05BriefingAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova05BriefingTransmissions
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova05BriefingTransmissions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionBriefingCurrentlyPlayingTransmissions = TriggerGetCurrent();
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova05|Line00016", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova05|Line00014", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova05|Line00018", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova05|Line00013", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova05|Line00020", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova05|Line00021", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova05|Line00005", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova05|Line00007", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova05|Line00011", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova05BriefingTransmissions_Init () {
    libNCUI_gt_NU_Nova05BriefingTransmissions = TriggerCreate("libNCUI_gt_NU_Nova05BriefingTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova06BriefingAnimations
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova06BriefingAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventFrame;
    int lv_mission;

    // Variable Initialization
    lv_eventFrame = libNCUI_gv_nU_MissionPanel;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = 6;
    TriggerExecute(libNCUI_gt_NU_Nova06BriefingTransmissions, true, false);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova06_01.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 1);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 2);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 3);
    Wait(11.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 4);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 5);
    Wait(0.8, c_timeReal);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 6);
    Wait(0.8, c_timeReal);
    Wait(0.4, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 7);
    Wait(3.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 8);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 9);
    Wait(9.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 10);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 11);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova06_00.ogv", PlayerGroupAll());
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 12);
    Wait(8.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 13);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 14);
    Wait(0.8, c_timeReal);
    Wait(0.3, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 15);
    Wait(2.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova06BriefingAnimations_Init () {
    libNCUI_gt_NU_Nova06BriefingAnimations = TriggerCreate("libNCUI_gt_NU_Nova06BriefingAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova06BriefingTransmissions
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova06BriefingTransmissions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionBriefingCurrentlyPlayingTransmissions = TriggerGetCurrent();
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova06|Line00015", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova06|Line00016", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova06|Line00017", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova06|Line00018", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova06|Line00019", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova06|Line00020", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova06BriefingTransmissions_Init () {
    libNCUI_gt_NU_Nova06BriefingTransmissions = TriggerCreate("libNCUI_gt_NU_Nova06BriefingTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova07BriefingAnimations
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova07BriefingAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventFrame;
    int lv_mission;

    // Variable Initialization
    lv_eventFrame = libNCUI_gv_nU_MissionPanel;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = 7;
    TriggerExecute(libNCUI_gt_NU_Nova07BriefingTransmissions, true, false);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 1);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 2);
    Wait(0.8, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova07_01.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 3);
    SoundPlayForPlayer(SoundLink("UI_NovaBrief07_Video01", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(8.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 4);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 5);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 6);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 7);
    Wait(0.8, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova07_02.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 8);
    SoundPlayForPlayer(SoundLink("UI_NovaBrief07_Video02", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 9);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 10);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 11);
    Wait(4.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 12);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 13);
    Wait(0.8, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova07_03.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 14);
    SoundPlayForPlayer(SoundLink("UI_NovaBrief07_Video03Sewer", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 15);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 16);
    Wait(2.4, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 17);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova07BriefingAnimations_Init () {
    libNCUI_gt_NU_Nova07BriefingAnimations = TriggerCreate("libNCUI_gt_NU_Nova07BriefingAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova07BriefingTransmissions
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova07BriefingTransmissions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionBriefingCurrentlyPlayingTransmissions = TriggerGetCurrent();
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova07|Line00001", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova07|Line00007", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova07|Line00008", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova07|Line00010", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova07|Line00009", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova07|Line00011", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova07|Line00012", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova07BriefingTransmissions_Init () {
    libNCUI_gt_NU_Nova07BriefingTransmissions = TriggerCreate("libNCUI_gt_NU_Nova07BriefingTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova08BriefingAnimations
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova08BriefingAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventFrame;
    int lv_mission;

    // Variable Initialization
    lv_eventFrame = libNCUI_gv_nU_MissionPanel;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = 8;
    TriggerExecute(libNCUI_gt_NU_Nova08BriefingTransmissions, true, false);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova08_00a.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 1);
    Wait(0.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 2);
    Wait(2.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 3);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 4);
    SoundPlayForPlayer(SoundLink("UI_NovaBrief08_VoidRayMovement", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_NovaBrief08_VoidRayMovement", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 5);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova08_00b.ogv", PlayerGroupAll());
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 6);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 7);
    SoundPlayForPlayer(SoundLink("UI_NovaBrief08_VoidRayMovement", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_NovaBrief08_VoidRayMovement", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 8);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 9);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 10);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 11);
    Wait(7.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 12);
    Wait(0.8, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova08_01.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 13);
    Wait(7.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 14);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 15);
    Wait(0.8, c_timeReal);
    Wait(3.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 16);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 17);
    Wait(7.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 18);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 19);
    Wait(9.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova08BriefingAnimations_Init () {
    libNCUI_gt_NU_Nova08BriefingAnimations = TriggerCreate("libNCUI_gt_NU_Nova08BriefingAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova08BriefingTransmissions
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova08BriefingTransmissions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionBriefingCurrentlyPlayingTransmissions = TriggerGetCurrent();
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Valerian, ConversationDataGetSound("Briefing_Nova08|Line00001", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Horner, ConversationDataGetSound("Briefing_Nova08|Line00002", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Horner, ConversationDataGetSound("Briefing_Nova08|Line00003", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Valerian, ConversationDataGetSound("Briefing_Nova08|Line00008", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova08|Line00005", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova08|Line00006", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Valerian, ConversationDataGetSound("Briefing_Nova08|Line00007", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova08BriefingTransmissions_Init () {
    libNCUI_gt_NU_Nova08BriefingTransmissions = TriggerCreate("libNCUI_gt_NU_Nova08BriefingTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova09BriefingAnimations
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova09BriefingAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventFrame;
    int lv_mission;

    // Variable Initialization
    lv_eventFrame = libNCUI_gv_nU_MissionPanel;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = 9;
    TriggerExecute(libNCUI_gt_NU_Nova09BriefingTransmissions, true, false);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 1);
    Wait(1.5, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova09_00.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 2);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 3);
    SoundPlayForPlayer(SoundLink("UI_NovaBrief09_Video01", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 4);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 5);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 6);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 7);
    Wait(3.2, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 8);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 9);
    Wait(7.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 10);
    Wait(0.8, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova09_01.ogv", PlayerGroupAll());
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 11);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 12);
    SoundPlayForPlayer(SoundLink("UI_NovaBrief09_Video02", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(11.0, c_timeReal);
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionBriefingMovieFrame, "Assets\\Textures\\briefing_video_nova09_02.ogv", PlayerGroupAll());
    Wait(11.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 13);
    Wait(0.7, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 14);
    Wait(0.8, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 15);
    Wait(8.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 16);
    Wait(2.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingNewPhase(lv_eventFrame, lv_mission, 17);
    Wait(5.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova09BriefingAnimations_Init () {
    libNCUI_gt_NU_Nova09BriefingAnimations = TriggerCreate("libNCUI_gt_NU_Nova09BriefingAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_Nova09BriefingTransmissions
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_Nova09BriefingTransmissions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionBriefingCurrentlyPlayingTransmissions = TriggerGetCurrent();
    Wait(0.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova09|Line00001", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova09|Line00007", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.5, c_timeReal);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova09|Line00003", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova09|Line00004", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova09|Line00008", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova09|Line00005", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova09|Line00010", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova09|Line00009", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Reigel, ConversationDataGetSound("Briefing_Nova09|Line00011", true), false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCUI_gf_NU_MissionBriefingSendTransmission(libNCUI_ge_NU_MissionBriefingCharacters_Nova, ConversationDataGetSound("Briefing_Nova09|Line00006", true), true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(0.5, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_Nova09BriefingTransmissions_Init () {
    libNCUI_gt_NU_Nova09BriefingTransmissions = TriggerCreate("libNCUI_gt_NU_Nova09BriefingTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionLoginScreenPlay
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionLoginScreenPlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_loginScreenTimer;

    // Variable Initialization
    lv_loginScreenTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionAuthentication, PlayerGroupAll(), "StartAuthentication");
    DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionPanel, PlayerGroupAll(), "StartAuthentication");
    TimerStart(lv_loginScreenTimer, 6.3, false, c_timeReal);
    libNtve_gf_WaitForTimer(lv_loginScreenTimer, 0.0, false);
    libNCUI_gf_NU_MissionBriefingPlay();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionLoginScreenPlay_Init () {
    libNCUI_gt_NU_MissionLoginScreenPlay = TriggerCreate("libNCUI_gt_NU_MissionLoginScreenPlay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionEscPressed
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionEscPressed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCUI_gf_NU_NextAvailableMission() != "Nova01")) {
        libNCUI_gf_NU_MissionBriefingEnd();
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionPanel, PlayerGroupAll(), "EndBriefingEarly");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionEscPressed_Init () {
    libNCUI_gt_NU_MissionEscPressed = TriggerCreate("libNCUI_gt_NU_MissionEscPressed_Func");
    TriggerEnable(libNCUI_gt_NU_MissionEscPressed, false);
    TriggerAddEventKeyPressed(libNCUI_gt_NU_MissionEscPressed, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionPlayButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionPlayButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_MissionPortraitPlayButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCUI_gf_NU_NextAvailableMission() == "Nova01")) {
        libNCUI_gf_NU_MissionPitchPlay();
    }
    else {
        libNCUI_gf_NU_MissionBriefingPlay();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionPlayButtonClicked_Init () {
    libNCUI_gt_NU_MissionPlayButtonClicked = TriggerCreate("libNCUI_gt_NU_MissionPlayButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionPlayButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionStopButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionStopButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_MissionPortraitStopButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCUI_gf_NU_NextAvailableMission() != "Nova01")) {
        libNCUI_gf_NU_MissionBriefingEnd();
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionPanel, PlayerGroupAll(), "EndBriefingEarly");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionStopButtonClicked_Init () {
    libNCUI_gt_NU_MissionStopButtonClicked = TriggerCreate("libNCUI_gt_NU_MissionStopButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionStopButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionLaunchButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionLaunchButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_MissionLaunchButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), false);
    libComC_gf_CC_EventDispatch(libNovC_ge_NC_Event_UIMissionLaunch, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionLaunchButtonClicked_Init () {
    libNCUI_gt_NU_MissionLaunchButtonClicked = TriggerCreate("libNCUI_gt_NU_MissionLaunchButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionLaunchButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionArchivesButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionArchivesButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_MissionArchivesButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNCUI_gt_NU_MissionCloseButtonClicked, false);
    TriggerEnable(libNCUI_gt_NU_MissionArchivesButtonClicked, false);
    TriggerEnable(libNCUI_gt_NU_MissionLaunchButtonClicked, false);
    TriggerEnable(libNCUI_gt_NU_MissionPlayButtonClicked, false);
    TriggerEnable(libNCUI_gt_NU_MissionQuitButtonClicked, false);
    libComC_gf_CinematicFade(false, 0.3, Color(0.00, 0.00, 0.00), true);
    libNCST_gf_SetInArchives(true);
    libNCST_gf_SetRoomBeforeArchives(libNCST_gf_CurrentRoom());
    libNCST_gf_EnterRoom(libNCST_ge_Rooms_StoryRoomMissionArchives);
    libComC_gf_CinematicFade(true, 0.0, Color(0.00, 0.00, 0.00), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionArchivesButtonClicked_Init () {
    libNCUI_gt_NU_MissionArchivesButtonClicked = TriggerCreate("libNCUI_gt_NU_MissionArchivesButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionArchivesButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionNewsButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionNewsButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_MissionNewsButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledMouseClick, true);
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledESC, true);
    TriggerEnable(libNCUI_gt_NU_MissionNewsEnded, true);
    TriggerEnable(TriggerGetCurrent(), false);
    libNCUI_gv_nU_MissionNewsButtonStayNormal = true;
    libNCUI_gf_NU_MissionNewsCalloutSystemOff();
    DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionNewsScreenContainer, PlayerGroupAll(), "NewsEnter");
    if ((libNCUI_gv_nU_MissionNewsButtonIsCallout == true)) {
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), "NewsCalloutHide");
    }
    else {
        DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), "NewsStandardHide");
    }
    libNtve_gf_SetDialogItemMovie(libNCUI_gv_nU_MissionNewsScreen, libNovC_gf_NC_MapNewsReport(libNCUI_gf_NU_NextAvailableMission()), PlayerGroupAll());
    DialogControlSetEnabled(libNCUI_gv_nU_MissionLaunchButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionDifficultyDropdown, PlayerGroupAll(), false);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionCloseButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionArchivesButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionManagementEquipmentButton, PlayerGroupAll(), false);
    libNCUI_gf_NU_MissionEnableDisableUpgradesButton(false);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionQuitButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libNCUI_gv_nU_MissionPortraitPlayButton, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionNewsButtonClicked_Init () {
    libNCUI_gt_NU_MissionNewsButtonClicked = TriggerCreate("libNCUI_gt_NU_MissionNewsButtonClicked_Func");
    TriggerEnable(libNCUI_gt_NU_MissionNewsButtonClicked, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionNewsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionNewsCanceledMouseClick
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionNewsCanceledMouseClick_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() != c_invalidDialogControlId) && (EventDialogControl() != libNCUI_gv_nU_MissionNewsCloseButton)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledESC, false);
    libNCUI_gf_NU_MissionNewsEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionNewsCanceledMouseClick_Init () {
    libNCUI_gt_NU_MissionNewsCanceledMouseClick = TriggerCreate("libNCUI_gt_NU_MissionNewsCanceledMouseClick_Func");
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledMouseClick, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionNewsCanceledMouseClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionNewsCanceledESC
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionNewsCanceledESC_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledMouseClick, false);
    libNCUI_gf_NU_MissionNewsEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionNewsCanceledESC_Init () {
    libNCUI_gt_NU_MissionNewsCanceledESC = TriggerCreate("libNCUI_gt_NU_MissionNewsCanceledESC_Func");
    TriggerEnable(libNCUI_gt_NU_MissionNewsCanceledESC, false);
    TriggerAddEventKeyPressed(libNCUI_gt_NU_MissionNewsCanceledESC, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionNewsEnded
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionNewsEnded_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCUI_gf_NU_MissionNewsEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionNewsEnded_Init () {
    libNCUI_gt_NU_MissionNewsEnded = TriggerCreate("libNCUI_gt_NU_MissionNewsEnded_Func");
    TriggerEnable(libNCUI_gt_NU_MissionNewsEnded, false);
    TriggerAddEventMovieFinished(libNCUI_gt_NU_MissionNewsEnded, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionNewsButtonCalloutStart
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionNewsButtonCalloutStart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libComC_gf_CC_StoryInSimulation() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionNewsButtonIsCallout = true;
    TimerStart(libNCUI_gv_nU_MissionNewsButtonNormalModeTimer, libNCUI_gv_nU_MissionNewsNormalModeDelay, false, c_timeReal);
    DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), "NewsCalloutDisplay");
    TriggerEnable(libNCUI_gt_NU_MissionNewsButtonCalloutEnd, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionNewsButtonCalloutStart_Init () {
    libNCUI_gt_NU_MissionNewsButtonCalloutStart = TriggerCreate("libNCUI_gt_NU_MissionNewsButtonCalloutStart_Func");
    TriggerEnable(libNCUI_gt_NU_MissionNewsButtonCalloutStart, false);
    TriggerAddEventTimer(libNCUI_gt_NU_MissionNewsButtonCalloutStart, libNCUI_gv_nU_MissionNewsButtonCalloutModeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionNewsButtonCalloutEnd
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionNewsButtonCalloutEnd_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionNewsButtonIsCallout = false;
    libNCUI_gv_nU_MissionNewsButtonStayNormal = true;
    DialogControlSendAnimationEvent(libNCUI_gv_nU_MissionNewsButton, PlayerGroupAll(), "NewsStandardReturn");
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionNewsButtonCalloutEnd_Init () {
    libNCUI_gt_NU_MissionNewsButtonCalloutEnd = TriggerCreate("libNCUI_gt_NU_MissionNewsButtonCalloutEnd_Func");
    TriggerEnable(libNCUI_gt_NU_MissionNewsButtonCalloutEnd, false);
    TriggerAddEventTimer(libNCUI_gt_NU_MissionNewsButtonCalloutEnd, libNCUI_gv_nU_MissionNewsButtonNormalModeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionQuitOKClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionQuitOKClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_CC_EventDispatch(libNovC_ge_NC_Event_UIMissionQuit, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionQuitOKClicked_Init () {
    libNCUI_gt_NU_MissionQuitOKClicked = TriggerCreate("libNCUI_gt_NU_MissionQuitOKClicked_Func");
    TriggerEnable(libNCUI_gt_NU_MissionQuitOKClicked, false);
    TriggerAddEventCustomDialogDismissed(libNCUI_gt_NU_MissionQuitOKClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultYes);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionQuitCancelClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionQuitCancelClicked_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionQuitToggle = false;
    TriggerEnable(libNCUI_gt_NU_MissionQuitOKClicked, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionQuitCancelClicked_Init () {
    libNCUI_gt_NU_MissionQuitCancelClicked = TriggerCreate("libNCUI_gt_NU_MissionQuitCancelClicked_Func");
    TriggerEnable(libNCUI_gt_NU_MissionQuitCancelClicked, false);
    TriggerAddEventCustomDialogDismissed(libNCUI_gt_NU_MissionQuitCancelClicked, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultNo);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionCloseButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionCloseButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_MissionCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNCUI_gt_NU_MissionQuitOKClicked, false);
    PlayerSetDifficulty(1, libNCUI_gf_NU_MissionSelectedDifficulty());
    libComC_gf_CC_EventDispatch(libNovC_ge_NC_Event_UIMissionQuit, "", "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionCloseButtonClicked_Init () {
    libNCUI_gt_NU_MissionCloseButtonClicked = TriggerCreate("libNCUI_gt_NU_MissionCloseButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionCloseButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionQuitButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionQuitButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_MissionQuitButton))) {
            return false;
        }

        if (!((libNCUI_gv_nU_MissionLaunchedToggle == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_MissionQuitToggle = true;
    TriggerEnable(libNCUI_gt_NU_MissionQuitOKClicked, true);
    TriggerEnable(libNCUI_gt_NU_MissionQuitCancelClicked, true);
    UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeQuery, StringExternal("Param/Value/lib_NCUI_5C3EE85B"), StringToText(""), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionQuitButtonClicked_Init () {
    libNCUI_gt_NU_MissionQuitButtonClicked = TriggerCreate("libNCUI_gt_NU_MissionQuitButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionQuitButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionEquipmentButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionEquipmentButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_MissionManagementEquipmentButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(libNCUI_gv_nUC_EquipmentEventOpened);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionEquipmentButtonClicked_Init () {
    libNCUI_gt_NU_MissionEquipmentButtonClicked = TriggerCreate("libNCUI_gt_NU_MissionEquipmentButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionEquipmentButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_MissionUpgradesButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_MissionUpgradesButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_MissionManagementUpgradesButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCUI_gf_NU_NextAvailableMission() == "Nova07")) {
        libNCUI_gv_nU_MissionUpgradesButtonAlwaysOff = true;
        libNCUI_gf_NU_MissionEnableDisableUpgradesButton(false);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(SoundPortraitModel(SoundLink(ConversationDataGetSound("Tutorial_ArmyUpgradeRoom3|Line00003", true), c_soundIndexAny))), PortraitGetTriggerControl(libNCUI_gv_nU_MissionPortrait), SoundLink(ConversationDataGetSound("Tutorial_ArmyUpgradeRoom3|Line00003", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    }
    else {
        TriggerSendEvent(libNCUI_gv_nUC_UpgradesEventOpened);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_MissionUpgradesButtonClicked_Init () {
    libNCUI_gt_NU_MissionUpgradesButtonClicked = TriggerCreate("libNCUI_gt_NU_MissionUpgradesButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_MissionUpgradesButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_UpgradesReigelResponse
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_UpgradesReigelResponse_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libNCUI_gv_nU_UpgradesReigelResponseTimer) <= 0.0))) {
            return false;
        }

        if (!((ConversationDataActiveSound() == null))) {
            return false;
        }

        if (!((TransmissionPlayerHasActiveTransmission(1) == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libNCUI_gv_nU_UpgradesReigelResponseTimer, libNCUI_gv_nUC_UpgradesReigelResponseDelay, false, c_timeReal);
    UserDataSetInt("WriterStates", "ResponseUpgradeVOEnabled", "Value", 1, 1);
    ConversationDataRun("TutorialArmyUpgradeRoom", PlayerGroupAll(), c_conversationSkipNone, false);
    UserDataSetInt("WriterStates", "ResponseUpgradeVOEnabled", "Value", 1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_UpgradesReigelResponse_Init () {
    libNCUI_gt_NU_UpgradesReigelResponse = TriggerCreate("libNCUI_gt_NU_UpgradesReigelResponse_Func");
    TriggerEnable(libNCUI_gt_NU_UpgradesReigelResponse, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_UpgradesTutorial
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_UpgradesTutorial_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCUI_gv_nU_UpgradesTutorialStage < libNCUI_gv_nUC_UpgradesTutorialEndStage))) {
            return false;
        }

        if (!((libNCST_gf_CurrentRoom() == libNCST_ge_Rooms_StoryRoomArmyUpgrade))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCUI_gv_nU_UpgradesSubselectionAssignedItem[libNCUI_gv_nU_UpgradesSelectedUnitSlot] > 0) && (libNCUI_gv_nU_UpgradesTutorialStage > 0)) {
        libNCUI_gv_nU_UpgradesTutorialStage = libNCUI_gv_nUC_UpgradesTutorialEndStage;
        UserDataSetInt("WriterStates", "VisitedArmyUpgradeRoom", "Value", 1, 1);
        TransmissionClearAll();
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("TutorialArmyUpgradeRoom|Line00005", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        return true;
    }

    if ((libNCUI_gv_nU_UpgradesTutorialStage == 0)) {
        TransmissionClearAll();
        if ((libNCUI_gv_nU_UpgradesTutorialStage == 0)) {
            libNCUI_gv_nU_UpgradesTutorialStage = 1;
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("TutorialArmyUpgradeRoom|Line00001", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        }

        if ((libNCUI_gv_nU_UpgradesTutorialStage == 1)) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("TutorialArmyUpgradeRoom|Line00002", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
            libNCUI_gv_nU_UpgradesTutorialStage = 2;
        }

        return true;
    }

    if ((libNCUI_gv_nU_UpgradesTutorialStage < 3)) {
        libNCUI_gv_nU_UpgradesTutorialStage = 3;
        TransmissionClearAll();
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("TutorialArmyUpgradeRoom|Line00003", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        if ((libNCUI_gv_nU_UpgradesTutorialStage == 3)) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("TutorialArmyUpgradeRoom|Line00004", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_UpgradesTutorial_Init () {
    libNCUI_gt_NU_UpgradesTutorial = TriggerCreate("libNCUI_gt_NU_UpgradesTutorial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_UpgradesRoomEntryFluff
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_UpgradesRoomEntryFluff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCUI_gv_nU_UpgradesRoomEntered == false))) {
            return false;
        }

        if (!((libNCUI_gv_nU_UpgradesTutorialStage == libNCUI_gv_nUC_UpgradesTutorialEndStage))) {
            return false;
        }

        if (!((libComC_gf_CurrentMissionIsSimulation() == false))) {
            return false;
        }

        if (!((libComC_gf_CC_StoryInSimulation() == false))) {
            return false;
        }

        if (!((libNCST_gf_CurrentRoom() == libNCST_ge_Rooms_StoryRoomArmyUpgrade))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCST_gf_NextAvailableMission() == "Nova04")) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("TutorialArmyUpgradeRoom2|Line00001", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    }
    else if ((libNCST_gf_NextAvailableMission() == "Nova05")) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("TutorialArmyUpgradeRoom2|Line00002", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    }
    else if ((libNCST_gf_NextAvailableMission() == "Nova07")) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_ArmyUpgradeRoom3|Line00003", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    }
    else if ((libNCST_gf_NextAvailableMission() == "Nova08")) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_ArmyUpgradeRoom3|Line00001", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        if ((libNCST_gf_CurrentRoom() == libNCST_ge_Rooms_StoryRoomArmyUpgrade)) {
            libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("Tutorial_ArmyUpgradeRoom3|Line00004", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_UpgradesRoomEntryFluff_Init () {
    libNCUI_gt_NU_UpgradesRoomEntryFluff = TriggerCreate("libNCUI_gt_NU_UpgradesRoomEntryFluff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_UpgradesSubselectionItemClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_UpgradesSubselectionItemClicked_Func (bool testConds, bool runActions) {
    int auto53101FD8_ae;
    int auto53101FD8_ai;

    // Variable Declarations
    int lv_upgradeItemIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto53101FD8_ae = libNCUI_gv_nUC_UpgradesTechItemCount;
    auto53101FD8_ai = 1;
    lv_upgradeItemIndex = 1;
    for ( ; ( (auto53101FD8_ai >= 0 && lv_upgradeItemIndex <= auto53101FD8_ae) || (auto53101FD8_ai <= 0 && lv_upgradeItemIndex >= auto53101FD8_ae) ) ; lv_upgradeItemIndex += auto53101FD8_ai ) {
        if ((libNCUI_gv_nU_UpgradesSubselectionItemButtons[lv_upgradeItemIndex] == EventDialogControl())) {
            libNCUI_gv_nU_UpgradesSubselectionSelectedItem[libNCUI_gv_nU_UpgradesSelectedUnitSlot] = lv_upgradeItemIndex;
            libNCUI_gf_NU_UpgradesUpdateSubselectionItems();
            libNCUI_gf_NU_UpgradesUpdateMovie(libNCUI_gv_nU_UpgradesSelectedUnitSlot, libNCUI_gv_nU_UpgradesSubselectionSelectedItem[libNCUI_gv_nU_UpgradesSelectedUnitSlot]);
            libNCUI_gf_NU_UpgradesUpdateUnitSlotNewState(libNCUI_gv_nU_UpgradesSelectedUnitSlot);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_UpgradesSubselectionItemClicked_Init () {
    libNCUI_gt_NU_UpgradesSubselectionItemClicked = TriggerCreate("libNCUI_gt_NU_UpgradesSubselectionItemClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_UpgradesSubselectionItemClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_UpgradesSelectionPanelClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_UpgradesSelectionPanelClicked_Func (bool testConds, bool runActions) {
    int autoB57E70E3_ae;
    int autoB57E70E3_ai;

    // Variable Declarations
    int lv_unitSlotIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB57E70E3_ae = libNCUI_gv_nUC_UpgradesUnitSlotCount;
    autoB57E70E3_ai = 1;
    lv_unitSlotIndex = 1;
    for ( ; ( (autoB57E70E3_ai >= 0 && lv_unitSlotIndex <= autoB57E70E3_ae) || (autoB57E70E3_ai <= 0 && lv_unitSlotIndex >= autoB57E70E3_ae) ) ; lv_unitSlotIndex += autoB57E70E3_ai ) {
        if ((libNCUI_gv_nU_UpgradesSelectionButtons[lv_unitSlotIndex] == EventDialogControl())) {
            libNCUI_gf_NU_UpgradesToggleSelectionPanel(lv_unitSlotIndex);
            TriggerExecute(libNCUI_gt_NU_UpgradesTutorial, true, false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_UpgradesSelectionPanelClicked_Init () {
    libNCUI_gt_NU_UpgradesSelectionPanelClicked = TriggerCreate("libNCUI_gt_NU_UpgradesSelectionPanelClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_UpgradesSelectionPanelClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_UpgradesEquipClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_UpgradesEquipClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCUI_gv_nU_UpgradesSubselectionEquipButton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCUI_gv_nU_UpgradesSubselectionAssignedItem[libNCUI_gv_nU_UpgradesSelectedUnitSlot] != libNCUI_gv_nU_UpgradesSubselectionSelectedItem[libNCUI_gv_nU_UpgradesSelectedUnitSlot])) {
        libNCUI_gf_NU_UpgradesAssignItem(libNCUI_gv_nU_UpgradesSelectedUnitSlot, libNCUI_gv_nU_UpgradesSubselectionSelectedItem[libNCUI_gv_nU_UpgradesSelectedUnitSlot], true);
    }
    else {
        libNCUI_gf_NU_UpgradesAssignItem(libNCUI_gv_nU_UpgradesSelectedUnitSlot, libNCUI_gv_nU_UpgradesSubselectionSelectedItem[libNCUI_gv_nU_UpgradesSelectedUnitSlot], false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_UpgradesEquipClicked_Init () {
    libNCUI_gt_NU_UpgradesEquipClicked = TriggerCreate("libNCUI_gt_NU_UpgradesEquipClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_UpgradesEquipClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_UpgradesTutorialResetClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_UpgradesTutorialResetClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_UpgradesTutorialResetButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libNCUI_gt_NU_UpgradesTutorial);
    TransmissionClearAll();
    libNCUI_gv_nU_UpgradesTutorialStage = 0;
    TriggerExecute(libNCUI_gt_NU_UpgradesTutorial, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_UpgradesTutorialResetClicked_Init () {
    libNCUI_gt_NU_UpgradesTutorialResetClicked = TriggerCreate("libNCUI_gt_NU_UpgradesTutorialResetClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_UpgradesTutorialResetClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_UpgradesCloseClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_UpgradesCloseClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_UpgradesCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(libNCUI_gv_nUC_UpgradesEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_UpgradesCloseClicked_Init () {
    libNCUI_gt_NU_UpgradesCloseClicked = TriggerCreate("libNCUI_gt_NU_UpgradesCloseClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_UpgradesCloseClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EquipmentReigelResponse
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EquipmentReigelResponse_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(libNCUI_gv_nU_EquipmentReigelResponseTimer) <= 0.0))) {
            return false;
        }

        if (!((ConversationDataActiveSound() == null))) {
            return false;
        }

        if (!((TransmissionPlayerHasActiveTransmission(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libNCUI_gv_nU_EquipmentReigelResponseTimer, libNCUI_gv_nUC_EquipmentReigelResponseDelay, false, c_timeReal);
    UserDataSetInt("WriterStates", "ResponseEquipmentVOEnabled", "Value", 1, 1);
    ConversationDataRun("TutorialEquipmentRoom", PlayerGroupAll(), c_conversationSkipNone, false);
    UserDataSetInt("WriterStates", "ResponseEquipmentVOEnabled", "Value", 1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EquipmentReigelResponse_Init () {
    libNCUI_gt_NU_EquipmentReigelResponse = TriggerCreate("libNCUI_gt_NU_EquipmentReigelResponse_Func");
    TriggerEnable(libNCUI_gt_NU_EquipmentReigelResponse, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EquipmentTutorial
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EquipmentTutorial_Func (bool testConds, bool runActions) {
    int autoC301D732_ae;
    int autoC301D732_ai;

    // Variable Declarations
    int lv_equipmentCategoryIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCUI_gv_nU_EquipmentTutorialStage < libNCUI_gv_nUC_EquipmentTutorialEndStage))) {
            return false;
        }

        if (!((libNCST_gf_CurrentRoom() == libNCST_ge_Rooms_StoryRoomEquipment))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC301D732_ae = libNCUI_gv_nUC_EquipmentSlotCount;
    autoC301D732_ai = 1;
    lv_equipmentCategoryIndex = 1;
    for ( ; ( (autoC301D732_ai >= 0 && lv_equipmentCategoryIndex <= autoC301D732_ae) || (autoC301D732_ai <= 0 && lv_equipmentCategoryIndex >= autoC301D732_ae) ) ; lv_equipmentCategoryIndex += autoC301D732_ai ) {
        if ((libNCUI_gv_nU_Equipment_Subselection_SelectedItem[lv_equipmentCategoryIndex] != 0) && (libNCUI_gv_nU_EquipmentTutorialStage == 1) && (UserDataGetInt("WriterStates", "HaveReigel", "Value", 1) == 1)) {
            ConversationDataStop();
            libNCUI_gv_nU_EquipmentTutorialStage = libNCUI_gv_nUC_EquipmentTutorialEndStage;
            UserDataSetInt("WriterStates", "VisitedEquipmentRoom", "Value", 1, 1);
            ConversationDataRun("TutorialEquipmentRoom", PlayerGroupAll(), c_conversationSkipNone, false);
            UserDataSetInt("WriterStates", "ResponseEquipmentVOEnabled", "Value", 1, 0);
            return true;
        }

    }
    if ((libNCUI_gv_nU_EquipmentTutorialStage == 0)) {
        libNCUI_gv_nU_EquipmentTutorialStage = 1;
        ConversationDataRun("TutorialEquipmentRoom", PlayerGroupAll(), c_conversationSkipNone, false);
        UserDataSetInt("WriterStates", "ResponseEquipmentVOEnabled", "Value", 1, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EquipmentTutorial_Init () {
    libNCUI_gt_NU_EquipmentTutorial = TriggerCreate("libNCUI_gt_NU_EquipmentTutorial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EquipmentRoomEntryFluff
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EquipmentRoomEntryFluff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCUI_gv_nU_EquipmentTutorialStage == libNCUI_gv_nUC_EquipmentTutorialEndStage))) {
            return false;
        }

        if (!((libNCUI_gv_nU_EquipmentRoomEntered == false))) {
            return false;
        }

        if (!((libComC_gf_CurrentMissionIsSimulation() == false))) {
            return false;
        }

        if (!((libComC_gf_CC_StoryInSimulation() == false))) {
            return false;
        }

        if (!((libNCST_gf_CurrentRoom() == libNCST_ge_Rooms_StoryRoomEquipment))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNovC_gf_NC_EquipmentUnlocked("EQPSuitItem4") == true) && (libNovC_gf_NC_PerkIsNew("EQPSuitItem4") == true)) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), c_invalidPortraitId, SoundLink(ConversationDataGetSound("TutorialEquipmentRoom2|Line00001", true), c_soundIndexAny), 0.0, c_transmissionDurationAdd, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EquipmentRoomEntryFluff_Init () {
    libNCUI_gt_NU_EquipmentRoomEntryFluff = TriggerCreate("libNCUI_gt_NU_EquipmentRoomEntryFluff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EquipmentSubselectionItemClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EquipmentSubselectionItemClicked_Func (bool testConds, bool runActions) {
    int auto21520146_ae;
    int auto21520146_ai;
    int auto7AE969DC_ae;
    int auto7AE969DC_ai;

    // Variable Declarations
    int lv_equipmentCategoryIndex;
    int lv_equipmentIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto21520146_ae = libNCUI_gv_nUC_EquipmentSlotCount;
    auto21520146_ai = 1;
    lv_equipmentCategoryIndex = 1;
    for ( ; ( (auto21520146_ai >= 0 && lv_equipmentCategoryIndex <= auto21520146_ae) || (auto21520146_ai <= 0 && lv_equipmentCategoryIndex >= auto21520146_ae) ) ; lv_equipmentCategoryIndex += auto21520146_ai ) {
        auto7AE969DC_ae = libNCUI_gv_nUC_EquipmentItemCount;
        auto7AE969DC_ai = 1;
        lv_equipmentIndex = 1;
        for ( ; ( (auto7AE969DC_ai >= 0 && lv_equipmentIndex <= auto7AE969DC_ae) || (auto7AE969DC_ai <= 0 && lv_equipmentIndex >= auto7AE969DC_ae) ) ; lv_equipmentIndex += auto7AE969DC_ai ) {
            if ((libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lv_equipmentCategoryIndex][lv_equipmentIndex] == EventDialogControl()) && (libNCUI_gv_nU_Equipment_Subselection_SelectedItem[lv_equipmentCategoryIndex] != lv_equipmentIndex)) {
                if ((libNCUI_gf_NU_EquipmentSelectionPanelToggleStateCheck(lv_equipmentCategoryIndex) == false)) {
                    libNCUI_gf_NU_EquipmentToggleSelectionPanel(lv_equipmentCategoryIndex);
                }

                libNCUI_gf_NU_EquipmentToggleSubselectionItem(true, lv_equipmentCategoryIndex, lv_equipmentIndex);
                libNCUI_gf_NU_EquipmentUpdateSelectedItemText(lv_equipmentCategoryIndex, lv_equipmentIndex);
                TriggerExecute(libNCUI_gt_NU_EquipmentTutorial, true, false);
                TriggerExecute(libNCUI_gt_NU_EquipmentReigelResponse, true, false);
                break;
            }
            else if ((libNCUI_gv_nU_EquipmentSlotContainerItemButtons[lv_equipmentCategoryIndex][lv_equipmentIndex] == EventDialogControl()) && (libNCUI_gv_nU_Equipment_Subselection_SelectedItem[lv_equipmentCategoryIndex] == lv_equipmentIndex) && (libNCUI_gf_NU_EquipmentSelectionPanelToggleStateCheck(lv_equipmentCategoryIndex) == false)) {
                libNCUI_gf_NU_EquipmentToggleSelectionPanel(lv_equipmentCategoryIndex);
                libNCUI_gf_NU_EquipmentUpdateSelectedItemText(lv_equipmentCategoryIndex, lv_equipmentIndex);
                if ((libNovC_gf_NC_PerkUISound(libNCUI_gf_NU_EquipmentInSlot(lv_equipmentCategoryIndex, lv_equipmentIndex)) != null)) {
                    SoundPlayForPlayer(SoundLink(libNovC_gf_NC_PerkUISound(libNCUI_gf_NU_EquipmentInSlot(lv_equipmentCategoryIndex, lv_equipmentIndex)), c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                }

                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EquipmentSubselectionItemClicked_Init () {
    libNCUI_gt_NU_EquipmentSubselectionItemClicked = TriggerCreate("libNCUI_gt_NU_EquipmentSubselectionItemClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_EquipmentSubselectionItemClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EquipmentSelectionPanelClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EquipmentSelectionPanelClicked_Func (bool testConds, bool runActions) {
    int auto3B57F272_ae;
    int auto3B57F272_ai;

    // Variable Declarations
    int lv_equipmentSlotIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libNCUI_gv_nU_EquipmentSlotContainers[1]) || (EventDialogControl() == libNCUI_gv_nU_EquipmentSlotContainers[2]) || (EventDialogControl() == libNCUI_gv_nU_EquipmentSlotContainers[3]) || (EventDialogControl() == libNCUI_gv_nU_EquipmentSlotContainers[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3B57F272_ae = libNCUI_gv_nUC_EquipmentSlotCount;
    auto3B57F272_ai = 1;
    lv_equipmentSlotIndex = 1;
    for ( ; ( (auto3B57F272_ai >= 0 && lv_equipmentSlotIndex <= auto3B57F272_ae) || (auto3B57F272_ai <= 0 && lv_equipmentSlotIndex >= auto3B57F272_ae) ) ; lv_equipmentSlotIndex += auto3B57F272_ai ) {
        if ((EventDialogControl() == libNCUI_gv_nU_EquipmentSlotContainers[lv_equipmentSlotIndex])) {
            libNCUI_gf_NU_EquipmentToggleSelectionPanel(lv_equipmentSlotIndex);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EquipmentSelectionPanelClicked_Init () {
    libNCUI_gt_NU_EquipmentSelectionPanelClicked = TriggerCreate("libNCUI_gt_NU_EquipmentSelectionPanelClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_EquipmentSelectionPanelClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EquipmentTutorialResetButtonClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EquipmentTutorialResetButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_EquipmentTutorialResetButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libNCUI_gt_NU_EquipmentTutorial);
    TransmissionClearAll();
    libNCUI_gv_nU_EquipmentTutorialStage = 0;
    UserDataSetInt("WriterStates", "ResponseEquipmentVOEnabled", "Value", 1, 0);
    TriggerExecute(libNCUI_gt_NU_EquipmentTutorial, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EquipmentTutorialResetButtonClicked_Init () {
    libNCUI_gt_NU_EquipmentTutorialResetButtonClicked = TriggerCreate("libNCUI_gt_NU_EquipmentTutorialResetButtonClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_EquipmentTutorialResetButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EquipmentCloseClicked
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EquipmentCloseClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_nU_EquipmentCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(libNCUI_gv_nUC_EquipmentEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EquipmentCloseClicked_Init () {
    libNCUI_gt_NU_EquipmentCloseClicked = TriggerCreate("libNCUI_gt_NU_EquipmentCloseClicked_Func");
    TriggerAddEventDialogControl(libNCUI_gt_NU_EquipmentCloseClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_FlashArmyButtonHelpTip
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_FlashArmyButtonHelpTip_Func (bool testConds, bool runActions) {
    string autoCFD98E36_val;

    // Conditions
    if (testConds) {
        if (!((libNCUI_gv_nU_ArmyButtonUsed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoCFD98E36_val = PlayerRace(1);
        if (autoCFD98E36_val == "Prot") {
            DialogControlInvokeAsText(libNCUI_gv_NU_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Prot", StringExternal("Param/Value/lib_NCUI_034F4713"), null, null, null);
        }
        else if (autoCFD98E36_val == "Zerg") {
            DialogControlInvokeAsText(libNCUI_gv_NU_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Zerg", StringExternal("Param/Value/lib_NCUI_B4347E4E"), null, null, null);
        }
        else if (autoCFD98E36_val == "Terr") {
            DialogControlInvokeAsText(libNCUI_gv_NU_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Terr", StringExternal("Param/Value/lib_NCUI_ED15A899"), null, null, null);
        }
        else {
        }
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_FlashArmyButtonHelpTip_Init () {
    libNCUI_gt_NU_FlashArmyButtonHelpTip = TriggerCreate("libNCUI_gt_NU_FlashArmyButtonHelpTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_ArmyButtonUsed
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_ArmyButtonUsed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libNCUI_gv_NU_ArmyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNCUI_gv_nU_ArmyButtonUsed == false)) {
        TriggerExecute(libNCUI_gt_NU_ArmyButtonFlashingOff, true, false);
        libNCUI_gv_nU_ArmyButtonUsed = true;
    }

    TriggerSendEvent(libNCUI_gv_pUC_SelectArmyEventUsed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_ArmyButtonUsed_Init () {
    libNCUI_gt_NU_ArmyButtonUsed = TriggerCreate("libNCUI_gt_NU_ArmyButtonUsed_Func");
    TriggerEnable(libNCUI_gt_NU_ArmyButtonUsed, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_ArmyButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_ArmyButtonFlashingOff
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_ArmyButtonFlashingOff_Func (bool testConds, bool runActions) {
    string autoBCDDD362_val;

    // Conditions
    if (testConds) {
        if (!((libNCUI_gv_NU_ArmyButtonTipPanel != c_invalidDialogControlId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libNCUI_gt_NU_FlashArmyButtonHelpTip);
    autoBCDDD362_val = PlayerRace(1);
    if (autoBCDDD362_val == "Prot") {
        DialogControlInvokeAsText(libNCUI_gv_NU_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Prot", StringExternal("Param/Value/lib_NCUI_F2711687"), null, null, null);
    }
    else if (autoBCDDD362_val == "Zerg") {
        DialogControlInvokeAsText(libNCUI_gv_NU_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Zerg", StringExternal("Param/Value/lib_NCUI_5A02F843"), null, null, null);
    }
    else if (autoBCDDD362_val == "Terr") {
        DialogControlInvokeAsText(libNCUI_gv_NU_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Terr", StringExternal("Param/Value/lib_NCUI_1B09ADE8"), null, null, null);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_ArmyButtonFlashingOff_Init () {
    libNCUI_gt_NU_ArmyButtonFlashingOff = TriggerCreate("libNCUI_gt_NU_ArmyButtonFlashingOff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_ArmyButtonMissionInit
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NS_ArmyButtonMissionInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    TriggerEnable(libNCUI_gt_NU_ArmyButtonUsed, true);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        Wait(1.0, c_timeGame);
        while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            Wait(0.5, c_timeGame);
        }
        Wait(0.5, c_timeGame);
        libNCUI_gf_DisplayArmyButton(false);
    }
    else {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    }
    Wait(0.5, c_timeGame);
    libNCUI_gf_NU_ArmyButtonHookup();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NS_ArmyButtonMissionInit_Init () {
    libNCUI_gt_NS_ArmyButtonMissionInit = TriggerCreate("libNCUI_gt_NS_ArmyButtonMissionInit_Func");
    TriggerEnable(libNCUI_gt_NS_ArmyButtonMissionInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_BossBarFocusOnTarget
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_BossBarFocusOnTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libNCUI_gv_NU_BB_ClickableAreaHealthBar) || (EventDialogControl() == libNCUI_gv_NU_BB_ClickableAreaNameLabel)))) {
            return false;
        }

        if (!((libNCUI_gv_NU_BB_Boss != null))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(libNCUI_gv_NU_BB_Boss, EventPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGetAlliance(UnitGetOwner(libNCUI_gv_NU_BB_Boss), c_allianceIdPassive, 1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(1, UnitGetPosition(libNCUI_gv_NU_BB_Boss), 0.0, 0.0, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_BossBarFocusOnTarget_Init () {
    libNCUI_gt_NU_BossBarFocusOnTarget = TriggerCreate("libNCUI_gt_NU_BossBarFocusOnTarget_Func");
    TriggerEnable(libNCUI_gt_NU_BossBarFocusOnTarget, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_BossBarFocusOnTarget, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeDoubleClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_BB_BossHPChanged
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_BB_BossHPChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_bossSet;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(libNCUI_gv_NU_BB_Boss) == false) || (libNCUI_gv_NU_BB_Boss == null))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    if ((libNCUI_gv_NU_BB_Boss != null)) {
        libNCUI_gf_RefreshSingularBossBarVoidCampaign();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_BB_BossHPChanged_Init () {
    libNCUI_gt_NU_BB_BossHPChanged = TriggerCreate("libNCUI_gt_NU_BB_BossHPChanged_Func");
    TriggerEnable(libNCUI_gt_NU_BB_BossHPChanged, false);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_BB_BossHPChanged, UnitRefFromVariable("libNCUI_gv_NU_BB_Boss"), c_unitPropLife);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_BB_BossHPChanged, UnitRefFromVariable("libNCUI_gv_NU_BB_Boss"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_BB_LoadUpdate
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_BB_LoadUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_RefreshSingularBossBarVoidCampaign();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_BB_LoadUpdate_Init () {
    libNCUI_gt_NU_BB_LoadUpdate = TriggerCreate("libNCUI_gt_NU_BB_LoadUpdate_Func");
    TriggerEnable(libNCUI_gt_NU_BB_LoadUpdate, false);
    TriggerAddEventLoadGameDone(libNCUI_gt_NU_BB_LoadUpdate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HeroDebugSetWidth
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HeroDebugSetWidth_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nUC_HEROUIBARWIDTH = StringToInt(StringWord(EventChatMessage(false), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HeroDebugSetWidth_Init () {
    libNCUI_gt_NU_HeroDebugSetWidth = TriggerCreate("libNCUI_gt_NU_HeroDebugSetWidth_Func");
    TriggerAddEventChatMessage(libNCUI_gt_NU_HeroDebugSetWidth, c_playerAny, "herowidth", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, libNCUI_gv_nUC_HeroMaxHeroCount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNCUI_gf_NU_UpdateHeroPanel(IntLoopCurrent());
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HeroPanelUpdate_Init () {
    libNCUI_gt_NU_HeroPanelUpdate = TriggerCreate("libNCUI_gt_NU_HeroPanelUpdate_Func");
    TriggerEnable(libNCUI_gt_NU_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(libNCUI_gt_NU_HeroPanelUpdate, libNCUI_gv_nUC_HeroUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HeroUnitDamaged
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HeroUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libNCUI_gv_NU_HeroUnit[1])) {
        lv_index = 1;
    }
    else if ((EventUnit() == libNCUI_gv_NU_HeroUnit[2])) {
        lv_index = 2;
    }
    else if (true) {
        return true;
    }
    DialogControlSetVisible(libNCUI_gv_NU_HeroDialogDamageTakenImage[lv_index], PlayerGroupAll(), true);
    if ((libNCUI_gv_NU_HeroDamageTimer[lv_index] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(libNCUI_gv_NU_HeroDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((libNCUI_gv_NU_HeroDamageTimer[lv_index] <= 0.25)) {
            libNCUI_gv_NU_HeroDamageTimer[lv_index] = 0.26;
            DialogControlFadeTransparency(libNCUI_gv_NU_HeroDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
            libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogDamageTakenLabel[lv_index], FixedToText(EventUnitDamageAmount(), 0), PlayerGroupAll());
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((libNCUI_gv_NU_HeroDamageTimer[lv_index] <= 0.5)) {
                libNCUI_gv_NU_HeroDamageTimer[lv_index] = 0.51;
                DialogControlFadeTransparency(libNCUI_gv_NU_HeroDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.5, 0.0);
                libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogDamageTakenLabel[lv_index], FixedToText(EventUnitDamageAmount(), 0), PlayerGroupAll());
                DialogControlSetVisible(libNCUI_gv_NU_HeroDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
        else {
            if ((libNCUI_gv_NU_HeroDamageTimer[lv_index] <= 1.0)) {
                libNCUI_gv_NU_HeroDamageTimer[lv_index] = 1.01;
                DialogControlFadeTransparency(libNCUI_gv_NU_HeroDialogDamageTakenImage[lv_index], PlayerGroupAll(), 1.0, 0.0);
                libNtve_gf_SetDialogItemText(libNCUI_gv_NU_HeroDialogDamageTakenLabel[lv_index], FixedToText(EventUnitDamageAmount(), 0), PlayerGroupAll());
                DialogControlSetVisible(libNCUI_gv_NU_HeroDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HeroUnitDamaged_Init () {
    libNCUI_gt_NU_HeroUnitDamaged = TriggerCreate("libNCUI_gt_NU_HeroUnitDamaged_Func");
    TriggerEnable(libNCUI_gt_NU_HeroUnitDamaged, false);
    TriggerAddEventUnitDamaged(libNCUI_gt_NU_HeroUnitDamaged, UnitRefFromVariable("libNCUI_gv_NU_HeroUnit[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libNCUI_gt_NU_HeroUnitDamaged, UnitRefFromVariable("libNCUI_gv_NU_HeroUnit[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HeroUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HeroUnitVitalChange_Func (bool testConds, bool runActions) {
    unit auto948A9A7A_val;
    int autoB2BDD4C2_val;

    // Variable Declarations
    int lv_index;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto948A9A7A_val = EventUnit();
    if (auto948A9A7A_val == libNCUI_gv_NU_HeroUnit[1]) {
        lv_index = 1;
    }
    else if (auto948A9A7A_val == libNCUI_gv_NU_HeroUnit[2]) {
        lv_index = 2;
    }
    else {
        return true;
    }
    autoB2BDD4C2_val = EventUnitProperty();
    if (autoB2BDD4C2_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_HeroPanel[lv_index], c_triggerControlTypeImage, "VoidShared_StatusBarTemplates/HeroUnitFrameTemplate/HealthBarDamageImage");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libNCUI_gv_NU_HeroDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(libNCUI_gv_nUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libNCUI_gv_NU_HeroDialogEnergyBarImage[lv_index], 1);
    }
    else if (autoB2BDD4C2_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_HeroPanel[lv_index], c_triggerControlTypeImage, "VoidShared_StatusBarTemplates/HeroUnitFrameTemplate/EnergyBarDamageImage");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libNCUI_gv_NU_HeroDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(libNCUI_gv_nUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libNCUI_gv_NU_HeroDialogHealthBarImage[lv_index], 1);
    }
    else if (autoB2BDD4C2_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(libNCUI_gv_nU_HeroPanel[lv_index], c_triggerControlTypeImage, "VoidShared_StatusBarTemplates/HeroUnitFrameTemplate/ShieldBarDamageImage");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libNCUI_gv_nU_HeroDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        if ((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropShieldsMax, c_unitPropCurrent) > 0.0)) {
            lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(libNCUI_gv_nUC_HEROUIBARWIDTH)));
        }
        else {
            lv_damageBarWidth = 0;
        }
        lv_damageBarHeight = DialogControlGetHeight(libNCUI_gv_nU_HeroDialogShieldBarImage[lv_index], 1);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, PlayerGroupAll());
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(lv_damageBarWidth, 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HeroUnitVitalChange_Init () {
    libNCUI_gt_NU_HeroUnitVitalChange = TriggerCreate("libNCUI_gt_NU_HeroUnitVitalChange_Func");
    TriggerEnable(libNCUI_gt_NU_HeroUnitVitalChange, false);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HeroUnitVitalChange, UnitRefFromVariable("libNCUI_gv_NU_HeroUnit[1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HeroUnitVitalChange, UnitRefFromVariable("libNCUI_gv_NU_HeroUnit[2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HeroUnitVitalChange, UnitRefFromVariable("libNCUI_gv_NU_HeroUnit[1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HeroUnitVitalChange, UnitRefFromVariable("libNCUI_gv_NU_HeroUnit[2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HeroUnitVitalChange, UnitRefFromVariable("libNCUI_gv_NU_HeroUnit[1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HeroUnitVitalChange, UnitRefFromVariable("libNCUI_gv_NU_HeroUnit[2]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HeroMouseHoverText
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HeroMouseHoverText_Func (bool testConds, bool runActions) {
    int autoF3A5F50D_val;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libNCUI_gv_nU_HeroDialogBorderImage[1]) || (EventDialogControl() == libNCUI_gv_NU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libNCUI_gv_nU_HeroDialogBorderImageAll[1]) || (EventDialogControl() == libNCUI_gv_nU_HeroDialogBorderImage[2]) || (EventDialogControl() == libNCUI_gv_NU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libNCUI_gv_nU_HeroDialogBorderImageAll[2]) || (EventDialogControl() == libNCUI_gv_NU_HeroDialogButton[1]) || (EventDialogControl() == libNCUI_gv_NU_HeroDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == libNCUI_gv_nU_HeroDialogBorderImage[1]) || (EventDialogControl() == libNCUI_gv_NU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libNCUI_gv_nU_HeroDialogBorderImageAll[1]) || (EventDialogControl() == libNCUI_gv_NU_HeroDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == libNCUI_gv_nU_HeroDialogBorderImage[2]) || (EventDialogControl() == libNCUI_gv_NU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libNCUI_gv_nU_HeroDialogBorderImageAll[2]) || (EventDialogControl() == libNCUI_gv_NU_HeroDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    autoF3A5F50D_val = EventDialogControlEventType();
    if (autoF3A5F50D_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogHealthLabel[lv_index], PlayerGroupAll(), true);
        }

        if ((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogEnergyLabel[lv_index], PlayerGroupAll(), true);
        }

        if ((libNCUI_gf_NU_HeroHasShields(libNCUI_gv_NU_HeroType[lv_index]) == true)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogShieldLabel[lv_index], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogShieldLabel[lv_index], PlayerGroupAll(), false);
        }
    }
    else if (autoF3A5F50D_val == c_triggerControlEventTypeMouseExit) {
        if ((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogHealthLabel[lv_index], PlayerGroupAll(), false);
        }

        if ((UnitGetPropertyFixed(libNCUI_gv_NU_HeroUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogEnergyLabel[lv_index], PlayerGroupAll(), false);
        }

        if ((libNCUI_gf_NU_HeroHasShields(libNCUI_gv_NU_HeroType[lv_index]) == true)) {
            DialogControlSetVisible(libNCUI_gv_NU_HeroDialogShieldLabel[lv_index], PlayerGroupAll(), false);
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HeroMouseHoverText_Init () {
    libNCUI_gt_NU_HeroMouseHoverText = TriggerCreate("libNCUI_gt_NU_HeroMouseHoverText_Func");
    TriggerEnable(libNCUI_gt_NU_HeroMouseHoverText, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libNCUI_gt_NU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HeroLoadUpdate
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HeroLoadUpdate_Func (bool testConds, bool runActions) {
    int auto90D45389_ae;
    int auto90D45389_ai;

    // Variable Declarations
    int lv_heroIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto90D45389_ae = libNCUI_gv_nUC_HeroMaxHeroCount;
    auto90D45389_ai = 1;
    lv_heroIndex = 1;
    for ( ; ( (auto90D45389_ai >= 0 && lv_heroIndex <= auto90D45389_ae) || (auto90D45389_ai <= 0 && lv_heroIndex >= auto90D45389_ae) ) ; lv_heroIndex += auto90D45389_ai ) {
        if ((libNCUI_gv_NU_HeroType[lv_heroIndex] == libNCUI_ge_CampaignHeroes_Nova)) {
            DialogControlSendAnimationEvent(libNCUI_gv_nU_HeroPanel[lv_heroIndex], PlayerGroupAll(), "SwitchTerran");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HeroLoadUpdate_Init () {
    libNCUI_gt_NU_HeroLoadUpdate = TriggerCreate("libNCUI_gt_NU_HeroLoadUpdate_Func");
    TriggerEnable(libNCUI_gt_NU_HeroLoadUpdate, false);
    TriggerAddEventLoadGameDone(libNCUI_gt_NU_HeroLoadUpdate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HealthWatchLifeCheck
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HealthWatchLifeCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_old;
    int lv_watchUnitIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libNCUI_gv_nU_HealthWatchUnit[1])) {
        lv_watchUnitIndex = 1;
    }
    else {
        lv_watchUnitIndex = 2;
    }
    lv_old = libNCUI_gv_nU_HealthWatchLastHP[lv_watchUnitIndex];
    libNCUI_gv_nU_HealthWatchLastHP[lv_watchUnitIndex] = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent));
    if ((libNCUI_gv_nU_HealthWatchLastHP[lv_watchUnitIndex] < lv_old) && (libNCUI_gf_NU_HealthWatchUnitBelowThreshold(EventUnit()) == true) && (libNCUI_gv_nU_HealthWatchFlashing == false)) {
        libNCUI_gv_NU_HealthWatchFlashingUnit = EventUnit();
        TriggerExecute(libNCUI_gt_NU_HealthWatchFlash, true, false);
    }

    if ((libNCUI_gf_NU_HealthWatchUnitBelowThreshold(EventUnit()) == false)) {
        libNCUI_gf_NM_StopHeroLowHPSound();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HealthWatchLifeCheck_Init () {
    libNCUI_gt_NU_HealthWatchLifeCheck = TriggerCreate("libNCUI_gt_NU_HealthWatchLifeCheck_Func");
    TriggerEnable(libNCUI_gt_NU_HealthWatchLifeCheck, false);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HealthWatchLifeCheck, UnitRefFromVariable("libNCUI_gv_nU_HealthWatchUnit[1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HealthWatchLifeCheck, UnitRefFromVariable("libNCUI_gv_nU_HealthWatchUnit[1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HealthWatchLifeCheck, UnitRefFromVariable("libNCUI_gv_nU_HealthWatchUnit[2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libNCUI_gt_NU_HealthWatchLifeCheck, UnitRefFromVariable("libNCUI_gv_nU_HealthWatchUnit[2]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HealthWatchUnitDies
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HealthWatchUnitDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NM_StopHeroLowHPSound();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HealthWatchUnitDies_Init () {
    libNCUI_gt_NU_HealthWatchUnitDies = TriggerCreate("libNCUI_gt_NU_HealthWatchUnitDies_Func");
    TriggerEnable(libNCUI_gt_NU_HealthWatchUnitDies, false);
    TriggerAddEventUnitDied(libNCUI_gt_NU_HealthWatchUnitDies, UnitRefFromVariable("libNCUI_gv_nU_HealthWatchUnit[1]"));
    TriggerAddEventUnitDied(libNCUI_gt_NU_HealthWatchUnitDies, UnitRefFromVariable("libNCUI_gv_nU_HealthWatchUnit[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HealthWatchFlash
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HealthWatchFlash_Func (bool testConds, bool runActions) {
    int auto374950CA_n;
    int auto374950CA_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(libNCUI_gv_NU_HealthWatchFlashingUnit) == false) || (libNCUI_gv_nU_HealthWatchFlashing == true))) {
        return true;
    }

    libNCUI_gv_nU_HealthWatchFlashing = true;
    TriggerExecute(libNCUI_gt_NU_HealthWatchStartSound, true, false);
    libNCUI_gf_NU_HealthWatchCreate();
    auto374950CA_n = 3;
    for (auto374950CA_i = 1; auto374950CA_i <= auto374950CA_n; auto374950CA_i += 1) {
        if (((libNCMI_gf_GameIsOver() == true) || (libNCUI_gf_NU_HealthWatchUnitBelowThreshold(libNCUI_gv_NU_HealthWatchFlashingUnit) == false) || (UnitIsAlive(libNCUI_gv_NU_HealthWatchFlashingUnit) == false))) {
            break;
        }

        DialogControlFadeTransparency(libNCUI_gv_nU_HealthWatchImage, PlayerGroupSingle(1), 0.25, 30.0);
        Wait(0.3, c_timeGame);
        DialogControlFadeTransparency(libNCUI_gv_nU_HealthWatchImage, PlayerGroupSingle(1), 0.625, 100.0);
        Wait(0.8, c_timeGame);
    }
    DialogControlFadeTransparency(libNCUI_gv_nU_HealthWatchImage, PlayerGroupSingle(1), 0.0, 100.0);
    libNCUI_gv_nU_HealthWatchFlashing = false;
    Wait(2.0, c_timeReal);
    if ((libNCUI_gv_nU_HealthWatchFlashing == false)) {
        libNCUI_gf_NM_StopHeroLowHPSound();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HealthWatchFlash_Init () {
    libNCUI_gt_NU_HealthWatchFlash = TriggerCreate("libNCUI_gt_NU_HealthWatchFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HealthWatchStartSound
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HealthWatchStartSound_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_LowHealthBegin);
    if ((libNCUI_gv_nU_HealthWatchSoundStart == null)) {
        SoundPlay(SoundLink("UI_LowHealthWarning_Start", -1), PlayerGroupAll(), 100.0, 0.0);
        libNCUI_gv_nU_HealthWatchSoundStart = SoundLastPlayed();
    }

    TriggerExecute(libNCUI_gt_NU_HealthWatchBreathLoop, true, false);
    TriggerExecute(libNCUI_gt_NU_HealthWatchHeartLoop, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HealthWatchStartSound_Init () {
    libNCUI_gt_NU_HealthWatchStartSound = TriggerCreate("libNCUI_gt_NU_HealthWatchStartSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HealthWatchHeartLoop
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HealthWatchHeartLoop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((libNtve_gf_PlayerInCinematicMode(1) == false) || (libNCMI_gf_GameIsOver() == true)))) {
        Wait(1.0, c_timeGame);
    }
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlay(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    libNCUI_gv_nU_HealthWatchSoundHeartbeat = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HealthWatchHeartLoop_Init () {
    libNCUI_gt_NU_HealthWatchHeartLoop = TriggerCreate("libNCUI_gt_NU_HealthWatchHeartLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_HealthWatchBreathLoop
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_HealthWatchBreathLoop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((libNtve_gf_PlayerInCinematicMode(1) == false) || (libNCMI_gf_GameIsOver() == true)))) {
        Wait(1.0, c_timeGame);
    }
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlay(SoundLink("UI_LowHealthWarning_BreathLoop", -1), PlayerGroupAll(), 100.0, 0.0);
    libNCUI_gv_nU_HealthWatchSoundBreath = SoundLastPlayed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_HealthWatchBreathLoop_Init () {
    libNCUI_gt_NU_HealthWatchBreathLoop = TriggerCreate("libNCUI_gt_NU_HealthWatchBreathLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_TimerWindowFlash
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_TimerWindowFlash_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(libNCUI_gv_nU_TimerWindowHighlightFrame, PlayerGroupAll(), "Highlight");
    Wait(libNCUI_gv_nU_TimerWindowHighlightDuration, c_timeReal);
    DialogControlSendAnimationEvent(libNCUI_gv_nU_TimerWindowHighlightFrame, PlayerGroupAll(), "HighlightStop");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_TimerWindowFlash_Init () {
    libNCUI_gt_NU_TimerWindowFlash = TriggerCreate("libNCUI_gt_NU_TimerWindowFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_TimerWindowThresholdCrossed
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_TimerWindowThresholdCrossed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libNCUI_gv_nU_TimerWindowTimer) <= libNCUI_gv_nU_TimerWindowDangerThreshold) && (libNCUI_gv_nU_TimerWindowInDanger == false)) {
        libNCUI_gv_nU_TimerWindowInDanger = true;
        DialogControlSendAnimationEvent(libNCUI_gv_nU_TimerWindowHighlightFrame, PlayerGroupAll(), "Danger");
    }
    else if ((TimerGetRemaining(libNCUI_gv_nU_TimerWindowTimer) > libNCUI_gv_nU_TimerWindowDangerThreshold) && (libNCUI_gv_nU_TimerWindowInDanger == true)) {
        libNCUI_gv_nU_TimerWindowInDanger = false;
        DialogControlSendAnimationEvent(libNCUI_gv_nU_TimerWindowHighlightFrame, PlayerGroupAll(), "DangerStop");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_TimerWindowThresholdCrossed_Init () {
    libNCUI_gt_NU_TimerWindowThresholdCrossed = TriggerCreate("libNCUI_gt_NU_TimerWindowThresholdCrossed_Func");
    TriggerEnable(libNCUI_gt_NU_TimerWindowThresholdCrossed, false);
    TriggerAddEventTimePeriodic(libNCUI_gt_NU_TimerWindowThresholdCrossed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_TimerWindowLoadUpdate
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_TimerWindowLoadUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gv_nU_TimerWindowInDanger = false;
    TriggerExecute(libNCUI_gt_NU_TimerWindowThresholdCrossed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_TimerWindowLoadUpdate_Init () {
    libNCUI_gt_NU_TimerWindowLoadUpdate = TriggerCreate("libNCUI_gt_NU_TimerWindowLoadUpdate_Func");
    TriggerEnable(libNCUI_gt_NU_TimerWindowLoadUpdate, false);
    TriggerAddEventLoadGameDone(libNCUI_gt_NU_TimerWindowLoadUpdate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EndCredits
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EndCredits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libNCUI_gv_NU_EndCreditFinished = false;
    if ((libComC_gf_CurrentMap() != "NStory01")) {
        libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, false);
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, true);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerEnable(libNCUI_gt_NU_EndCreditsLoopMusic, true);
    TriggerEnable(libNCUI_gt_NU_EndCreditsEnds, true);
    while (!((libNCUI_gv_NU_EndCreditFinished == true))) {
        Wait(0.5, c_timeGame);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EndCredits_Init () {
    libNCUI_gt_NU_EndCredits = TriggerCreate("libNCUI_gt_NU_EndCredits_Func");
    TriggerEnable(libNCUI_gt_NU_EndCredits, false);
    TriggerAddEventCutsceneBookmarkFired(libNCUI_gt_NU_EndCredits, c_cutsceneNone, "StartCredits");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EndCreditsLoopMusic
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EndCreditsLoopMusic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZNova_Credits_Static", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EndCreditsLoopMusic_Init () {
    libNCUI_gt_NU_EndCreditsLoopMusic = TriggerCreate("libNCUI_gt_NU_EndCreditsLoopMusic_Func");
    TriggerEnable(libNCUI_gt_NU_EndCreditsLoopMusic, false);
    TriggerAddEventCutsceneBookmarkFired(libNCUI_gt_NU_EndCreditsLoopMusic, c_cutsceneNone, "StartCreditsLoopMusic");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_EndCreditsEnds
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_EndCreditsEnds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetCursorVisible(PlayerGroupAll(), false);
    libNCUI_gv_NU_EndCreditFinished = true;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libNCUI_gt_NU_EndCredits, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_EndCreditsEnds_Init () {
    libNCUI_gt_NU_EndCreditsEnds = TriggerCreate("libNCUI_gt_NU_EndCreditsEnds_Func");
    TriggerEnable(libNCUI_gt_NU_EndCreditsEnds, false);
    TriggerAddEventGameCreditsFinished(libNCUI_gt_NU_EndCreditsEnds, c_playerAny);
    TriggerAddEventKeyPressed(libNCUI_gt_NU_EndCreditsEnds, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_VictoryContinue
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_VictoryContinue_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_NU_VSBtnContinue))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(libNCUI_gv_NU_VSBtnContinue, PlayerGroupAll(), false);
    DialogControlSetEnabled(libNCUI_gv_NU_VSBtnPlayAgain, PlayerGroupAll(), false);
    TriggerEnable(libNCUI_gt_NU_VictoryContinue, false);
    TriggerEnable(libNCUI_gt_NU_VictoryPlayAgain, false);
    if ((libNCUI_gv_NU_VictoryMusicOverride == true)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    libComC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    DialogControlSetVisible(libNCUI_gv_NU_VSMainPanel, PlayerGroupAll(), false);
    TriggerSendEvent(libNCUI_gv_nUC_VictoryEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_VictoryContinue_Init () {
    libNCUI_gt_NU_VictoryContinue = TriggerCreate("libNCUI_gt_NU_VictoryContinue_Func");
    TriggerEnable(libNCUI_gt_NU_VictoryContinue, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_VictoryContinue, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_VictoryPlayAgain
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_VictoryPlayAgain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_simulation;

    // Variable Initialization
    lv_simulation = true;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_NU_VSBtnPlayAgain))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_NU_VSDisplayRestartDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_VictoryPlayAgain_Init () {
    libNCUI_gt_NU_VictoryPlayAgain = TriggerCreate("libNCUI_gt_NU_VictoryPlayAgain_Func");
    TriggerEnable(libNCUI_gt_NU_VictoryPlayAgain, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_VictoryPlayAgain, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_VictoryRestartCancel
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_VictoryRestartCancel_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_NU_VSRestartCancelButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNCUI_gt_NU_VictoryRestartCancel, false);
    TriggerEnable(libNCUI_gt_NU_VictoryRestartRestart, false);
    DialogControlSetVisible(libNCUI_gv_NU_VSMainPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libNCUI_gv_NU_VSRestartPanel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_VictoryRestartCancel_Init () {
    libNCUI_gt_NU_VictoryRestartCancel = TriggerCreate("libNCUI_gt_NU_VictoryRestartCancel_Func");
    TriggerEnable(libNCUI_gt_NU_VictoryRestartCancel, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_VictoryRestartCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NU_VictoryRestartRestart
//--------------------------------------------------------------------------------------------------
bool libNCUI_gt_NU_VictoryRestartRestart_Func (bool testConds, bool runActions) {
    int auto119EE7F2_val;

    // Variable Declarations
    int lv_difficulty;

    // Variable Initialization
    lv_difficulty = 2;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNCUI_gv_NU_VSRestartRestartButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNCUI_gt_NU_VictoryRestartCancel, false);
    TriggerEnable(libNCUI_gt_NU_VictoryRestartRestart, false);
    auto119EE7F2_val = DialogControlGetSelectedItem(libNCUI_gv_NU_VSRestartDifficultyPulldown, 1);
    if (auto119EE7F2_val == libComC_gf_CC_DifficultyIndex(1)) {
        lv_difficulty = 1;
    }
    else if (auto119EE7F2_val == libComC_gf_CC_DifficultyIndex(2)) {
        lv_difficulty = 2;
    }
    else if (auto119EE7F2_val == libComC_gf_CC_DifficultyIndex(3)) {
        lv_difficulty = 3;
    }
    else if (auto119EE7F2_val == libComC_gf_CC_DifficultyIndex(4)) {
        lv_difficulty = 4;
    }
    else {
        lv_difficulty = PlayerDifficulty(1);
    }
    libComC_gf_CC_TransitionPrepareMissionLaunch(libComC_gf_CurrentMap(), libComC_gf_CC_TransitionInSimulation(), true, lv_difficulty);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNCUI_gt_NU_VictoryRestartRestart_Init () {
    libNCUI_gt_NU_VictoryRestartRestart = TriggerCreate("libNCUI_gt_NU_VictoryRestartRestart_Func");
    TriggerEnable(libNCUI_gt_NU_VictoryRestartRestart, false);
    TriggerAddEventDialogControl(libNCUI_gt_NU_VictoryRestartRestart, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void libNCUI_InitTriggers () {
    libNCUI_gt_NU_DebugAchievement_Init();
    libNCUI_gt_NU_BottomBarInit_Init();
    libNCUI_gt_NU_BottomBarButtonClicked_Init();
    libNCUI_gt_NU_ArchivesCreate_Init();
    libNCUI_gt_NU_ArchivesSelectionChanged_Init();
    libNCUI_gt_NU_ArchivesMissionPlayClicked_Init();
    libNCUI_gt_NU_ArchivesScenePlayClicked_Init();
    libNCUI_gt_NU_ArchivesCloseClicked_Init();
    libNCUI_gt_NU_ArchivesSynced_Init();
    libNCUI_gt_NU_Nova02BriefingAnimations_Init();
    libNCUI_gt_NU_Nova02BriefingTransmissions_Init();
    libNCUI_gt_NU_Nova03BriefingAnimations_Init();
    libNCUI_gt_NU_Nova03BriefingTransmissions_Init();
    libNCUI_gt_NU_Nova04BriefingAnimations_Init();
    libNCUI_gt_NU_Nova04BriefingTransmissions_Init();
    libNCUI_gt_NU_Nova05BriefingAnimations_Init();
    libNCUI_gt_NU_Nova05BriefingTransmissions_Init();
    libNCUI_gt_NU_Nova06BriefingAnimations_Init();
    libNCUI_gt_NU_Nova06BriefingTransmissions_Init();
    libNCUI_gt_NU_Nova07BriefingAnimations_Init();
    libNCUI_gt_NU_Nova07BriefingTransmissions_Init();
    libNCUI_gt_NU_Nova08BriefingAnimations_Init();
    libNCUI_gt_NU_Nova08BriefingTransmissions_Init();
    libNCUI_gt_NU_Nova09BriefingAnimations_Init();
    libNCUI_gt_NU_Nova09BriefingTransmissions_Init();
    libNCUI_gt_NU_MissionLoginScreenPlay_Init();
    libNCUI_gt_NU_MissionEscPressed_Init();
    libNCUI_gt_NU_MissionPlayButtonClicked_Init();
    libNCUI_gt_NU_MissionStopButtonClicked_Init();
    libNCUI_gt_NU_MissionLaunchButtonClicked_Init();
    libNCUI_gt_NU_MissionArchivesButtonClicked_Init();
    libNCUI_gt_NU_MissionNewsButtonClicked_Init();
    libNCUI_gt_NU_MissionNewsCanceledMouseClick_Init();
    libNCUI_gt_NU_MissionNewsCanceledESC_Init();
    libNCUI_gt_NU_MissionNewsEnded_Init();
    libNCUI_gt_NU_MissionNewsButtonCalloutStart_Init();
    libNCUI_gt_NU_MissionNewsButtonCalloutEnd_Init();
    libNCUI_gt_NU_MissionQuitOKClicked_Init();
    libNCUI_gt_NU_MissionQuitCancelClicked_Init();
    libNCUI_gt_NU_MissionCloseButtonClicked_Init();
    libNCUI_gt_NU_MissionQuitButtonClicked_Init();
    libNCUI_gt_NU_MissionEquipmentButtonClicked_Init();
    libNCUI_gt_NU_MissionUpgradesButtonClicked_Init();
    libNCUI_gt_NU_UpgradesReigelResponse_Init();
    libNCUI_gt_NU_UpgradesTutorial_Init();
    libNCUI_gt_NU_UpgradesRoomEntryFluff_Init();
    libNCUI_gt_NU_UpgradesSubselectionItemClicked_Init();
    libNCUI_gt_NU_UpgradesSelectionPanelClicked_Init();
    libNCUI_gt_NU_UpgradesEquipClicked_Init();
    libNCUI_gt_NU_UpgradesTutorialResetClicked_Init();
    libNCUI_gt_NU_UpgradesCloseClicked_Init();
    libNCUI_gt_NU_EquipmentReigelResponse_Init();
    libNCUI_gt_NU_EquipmentTutorial_Init();
    libNCUI_gt_NU_EquipmentRoomEntryFluff_Init();
    libNCUI_gt_NU_EquipmentSubselectionItemClicked_Init();
    libNCUI_gt_NU_EquipmentSelectionPanelClicked_Init();
    libNCUI_gt_NU_EquipmentTutorialResetButtonClicked_Init();
    libNCUI_gt_NU_EquipmentCloseClicked_Init();
    libNCUI_gt_NU_FlashArmyButtonHelpTip_Init();
    libNCUI_gt_NU_ArmyButtonUsed_Init();
    libNCUI_gt_NU_ArmyButtonFlashingOff_Init();
    libNCUI_gt_NS_ArmyButtonMissionInit_Init();
    libNCUI_gt_NU_BossBarFocusOnTarget_Init();
    libNCUI_gt_NU_BB_BossHPChanged_Init();
    libNCUI_gt_NU_BB_LoadUpdate_Init();
    libNCUI_gt_NU_HeroDebugSetWidth_Init();
    libNCUI_gt_NU_HeroPanelUpdate_Init();
    libNCUI_gt_NU_HeroUnitDamaged_Init();
    libNCUI_gt_NU_HeroUnitVitalChange_Init();
    libNCUI_gt_NU_HeroMouseHoverText_Init();
    libNCUI_gt_NU_HeroLoadUpdate_Init();
    libNCUI_gt_NU_HealthWatchLifeCheck_Init();
    libNCUI_gt_NU_HealthWatchUnitDies_Init();
    libNCUI_gt_NU_HealthWatchFlash_Init();
    libNCUI_gt_NU_HealthWatchStartSound_Init();
    libNCUI_gt_NU_HealthWatchHeartLoop_Init();
    libNCUI_gt_NU_HealthWatchBreathLoop_Init();
    libNCUI_gt_NU_TimerWindowFlash_Init();
    libNCUI_gt_NU_TimerWindowThresholdCrossed_Init();
    libNCUI_gt_NU_TimerWindowLoadUpdate_Init();
    libNCUI_gt_NU_EndCredits_Init();
    libNCUI_gt_NU_EndCreditsLoopMusic_Init();
    libNCUI_gt_NU_EndCreditsEnds_Init();
    libNCUI_gt_NU_VictoryContinue_Init();
    libNCUI_gt_NU_VictoryPlayAgain_Init();
    libNCUI_gt_NU_VictoryRestartCancel_Init();
    libNCUI_gt_NU_VictoryRestartRestart_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libNCUI_InitLib_completed = false;

void libNCUI_InitLib () {
    if (libNCUI_InitLib_completed) {
        return;
    }

    libNCUI_InitLib_completed = true;

    libNCUI_InitLibraries();
    libNCUI_InitVariables();
    libNCUI_InitTriggers();
}

include "LibNovC"
include "LibNCMI"
include "LibNCST"

