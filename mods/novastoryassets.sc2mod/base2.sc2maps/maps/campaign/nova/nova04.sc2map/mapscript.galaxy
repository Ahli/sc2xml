//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Trouble In Paradise
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "LibComC"
include "LibCMMI"
include "LibCMUI"
include "LibNovC"
include "LibNCMI"
include "LibNCUI"
include "ai285EA2B0"
include "aiCCC21B06"
include "aiBFD4C32A"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libComC_InitLib();
    libCMMI_InitLib();
    libCMUI_InitLib();
    libNovC_InitLib();
    libNCMI_InitLib();
    libNCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_REIGEL = 2;
const int gv_pLAYER_03_CIVILIANS = 3;
const int gv_pLAYER_04_DEFENDERS = 4;
const int gv_pLAYER_05_TALDARIM = 5;
const int gv_pLAYER_06_ZERG = 6;
const int gv_pLAYER_07_ZERG = 7;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_ZergWaveUnitTypes_nothing = 0;
const int ge_ZergWaveUnitTypes_Zergling = 1;
const int ge_ZergWaveUnitTypes_Roach = 2;
const int ge_ZergWaveUnitTypes_Hydralisk = 3;
const int ge_ZergWaveUnitTypes_Baneling = 4;
const int ge_ZergWaveUnitTypes_Mutalisk = 5;
const int ge_ZergWaveUnitTypes_BroodLord = 6;
const int ge_ZergWaveUnitTypes_Ultralisk = 7;
const int ge_ZergWaveUnitTypes_Ravager = 8;
const int ge_ZergWaveUnitTypes_Infestor = 9;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_retaliationPrismInitialWarpDelay;
int gv_retaliationPrismZealotCount;
int gv_retaliationPrismStalkerCount;
int gv_retaliationPrismZealotMax;
int gv_retaliationPrismStalkerMax;
int gv_phase1OverseerTimeRemaining;
playergroup gv_playerGroup_Zerg;
unit gv_nova;
unit gv_mothership;
string gv_ambienceMainTrack;
string gv_musicMainTrack;
string gv_musicIntroTrack;
string gv_musicOutroTrack;
string gv_musicMidCineTrack;
unitgroup gv_shieldProjectors;
int gv_activePhase;
unitgroup gv_zergHatcheries;
timer gv_s1_Timer;
int gv_s1_TimerWindow;
int gv_earlyNukeRevealModifier;
bool gv_zergRebuilt;
int gv_zergStartingStructureCount;
int[5] gv_zergHiveClusterPings;
bool gv_attackMode;
fixed gv_defenseModeDuration;
int gv_mothershipPing;
int[8] gv_mothershipArrows;
int gv_defenseModeCount;
int gv_attackModeCount;
int gv_attackWarningCount;
timer gv_defenseModeTimer;
unitgroup gv_stage1PausedObservers;
unitgroup gv_retaliationWave_AllUnits;
unitgroup gv_retaliationWave_JustAttackers;
unitgroup gv_retaliationWave_WarpedInInfantry;
region gv_activeMothershipAttackRegion;
int gv_zergHatcheriesKilledInPhase1;
int gv_allZergHatcheriesKilledInPhase1;
int gv_doMStructuresLost;
int gv_mothershipChargedCount;
int gv_objectiveDestroyZergHatcheries;
int gv_objectiveNovaMustSurvive;
int gv_objectiveDestroyShieldProjectors;
int gv_objectiveCivilianCenterMustSurvive;
int gv_objectiveDestroyTaldarimMothership;
int gv_objectiveDestroyRemainingZergHatcheries;
int gv_objectiveRescueStalkers2;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicNova;
unitgroup gv_introBanshees;
unit gv_introNova;
bool gv_introSound;
unitgroup gv_midGoliaths;
unitgroup gv_midMarines;

void InitGlobals () {
    int init_i;

    gv_retaliationPrismInitialWarpDelay = libLotv_gf_DifficultyValueInt2(25, 25, 20, 15);
    gv_retaliationPrismZealotCount = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_retaliationPrismStalkerCount = libLotv_gf_DifficultyValueInt2(1, 1, 1, 2);
    gv_retaliationPrismZealotMax = libLotv_gf_DifficultyValueInt2(3, 3, 4, 6);
    gv_retaliationPrismStalkerMax = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_phase1OverseerTimeRemaining = libLotv_gf_DifficultyValueInt2(40, 40, 70, 90);
    gv_playerGroup_Zerg = PlayerGroupEmpty();
    gv_shieldProjectors = UnitGroupEmpty();
    gv_zergHatcheries = UnitGroupEmpty();
    gv_s1_Timer = TimerCreate();
    gv_s1_TimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_zergHiveClusterPings[init_i] = c_invalidPingId;
    }
    gv_mothershipPing = c_invalidPingId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_mothershipArrows[init_i] = c_invalidPingId;
    }
    gv_defenseModeTimer = TimerCreate();
    gv_stage1PausedObservers = UnitGroupEmpty();
    gv_retaliationWave_AllUnits = UnitGroupEmpty();
    gv_retaliationWave_JustAttackers = UnitGroupEmpty();
    gv_retaliationWave_WarpedInInfantry = UnitGroupEmpty();
    gv_activeMothershipAttackRegion = RegionFromId(4);
    gv_objectiveDestroyZergHatcheries = c_invalidObjectiveId;
    gv_objectiveNovaMustSurvive = c_invalidObjectiveId;
    gv_objectiveDestroyShieldProjectors = c_invalidObjectiveId;
    gv_objectiveCivilianCenterMustSurvive = c_invalidObjectiveId;
    gv_objectiveDestroyTaldarimMothership = c_invalidObjectiveId;
    gv_objectiveDestroyRemainingZergHatcheries = c_invalidObjectiveId;
    gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introBanshees = UnitGroupEmpty();
    gv_midGoliaths = UnitGroupEmpty();
    gv_midMarines = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_GoToPointandDespawn (unit lp_unit, point lp_despawnPoint);
bool gf_UnitIsArmyUnit (unit lp_unit);
void gf_SporeCrawlerPingTracker (unit lp_sporeCrawler);
void gf_OverseerPatrol (string lp_patrolPointName, int lp_patrolIndexCount);
void gf_ZergExpansion (region lp_expansionRegion);
void gf_AddZergUnitsToAttackWave (string lp_unitType, int lp_count, point lp_spawnPoint);
void gf_zzOLDSendZergAttackWave (int lp_zerglingCount, int lp_roachCount, int lp_hydraCount, int lp_banelingCount, int lp_mutaliskCount, int lp_broodlordCount, int lp_ultraliskCount, int lp_ravagerCount, int lp_infestorCount, point lp_spawnPoint);
void gf_SpawnRetaliationUnits (int lp_zealotCount, int lp_stalkerCount, int lp_immortalCount, int lp_colossusCount, int lp_scoutCount, int lp_phoenixCount, int lp_voidRayCount, int lp_tempestCount, int lp_carrierCount, int lp_oracleCount, int lp_warpPrismCount);
void gf_PingUnitGroup (unitgroup lp_unitGroup);
void gf_AIWarpPrism (unit lp_warpPrism);
void gf_AIOracle (int lp_owner, unit lp_oracle, unitgroup lp_nearbyUnits);
void gf_AIRavager (int lp_owner, unit lp_ravager, unitgroup lp_nearbyUnits);
void gf_AISporeCrawler (int lp_owner, unit lp_sporeCrawler, unitgroup lp_nearbyUnits);
void gf_OrderCivilianstoRun (unit lp_civilian);
void gf_BansheeFormation (fixed lp_angle, fixed lp_distance, unit lp_escourtTarget);
void gf_FollowTransportWhileLoaded (unit lp_escourtTarget);
void gf_TaldarimDeathBeamBurninator (point lp_spawnPoint, fixed lp_distance);
void gf_SiegeAfterUnload (unit lp_tank);
void gf_EvacuateCivilians (unit lp_evacShip);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_IntroSequence;
trigger gt_Stage1Start;
trigger gt_Stage1FirstOrder;
trigger gt_SporeCrawlerSpawner;
trigger gt_HatchKilledQ;
trigger gt_SporeCrawlerWarningQ;
trigger gt_OutofTimeWarningQ;
trigger gt_NukeReadyQ;
trigger gt_GoKillStuffQ;
trigger gt_CloakReminderQ;
trigger gt_ReigelBaseReminderQ;
trigger gt_ReigelSCVStopper;
trigger gt_ReigelSupplyDepotBuilder;
trigger gt_ReigelNukeArmer;
trigger gt_ReigelBaseSetupTiming;
trigger gt_ReigelUntargetable;
trigger gt_Stage2Start;
trigger gt_Stage2IntroQ;
trigger gt_WeatherChange;
trigger gt_ZergLarvaSpawnerNorth;
trigger gt_ZergLarvaSpawnerSouth;
trigger gt_ZergExpandAcrossMap;
trigger gt_ZergTakeover;
trigger gt_ZergBonusObjEarlyKillQ;
trigger gt_ZergBonusObjRevealQ;
trigger gt_ZergBonusObjCompleteQ;
trigger gt_ZergHatcheryKilled;
trigger gt_ZergAttackWaves;
trigger gt_zzOLDZergAttackWaves;
trigger gt_AddProtossUnitsToGlossary;
trigger gt_ShieldProjectorDestroyed;
trigger gt_MothershipReinforcements;
trigger gt_StartMothershipAttack;
trigger gt_StartMothershipAttackQ;
trigger gt_MothershipAlmostReadyQ;
trigger gt_StartDefenseModeQ;
trigger gt_MothershipWarningQ;
trigger gt_ProtossBonusObjEarlyReveal;
trigger gt_ProtossBonusObjRevealQ;
trigger gt_ProtossBonusObjCompleteQ;
trigger gt_ProtossBonusObjDestroyed;
trigger gt_DefenseModeTimerUpdate;
trigger gt_AttackModeArrowUpdate;
trigger gt_RetaliationUnitSpawned;
trigger gt_DOMZone1;
trigger gt_DOMZone1Q;
trigger gt_DOMZone2;
trigger gt_DOMZone2Q;
trigger gt_DOMZone3;
trigger gt_DOMZone3Q;
trigger gt_DoMRegionAggro;
trigger gt_DoMUnitKilledAggro;
trigger gt_DoMApproachWarningQ;
trigger gt_DoMAggroWarningQ;
trigger gt_ZergHatcheriesKilledInPhase1Tracker;
trigger gt_AllZergHatcheriesKilledInPhase1Tracker;
trigger gt_DoMStructureLostTracker;
trigger gt_MothershipChargedCountTracker;
trigger gt_StartAI;
trigger gt_MothershipController;
trigger gt_AIUpgradeCasualNormal;
trigger gt_AIUpgradeHard;
trigger gt_AIUpgradeBrutal;
trigger gt_DefeatBaseDead;
trigger gt_DefeatNovaDead;
trigger gt_DefeatCivilianCenterMustSurviveFailed;
trigger gt_VictoryDestroyTaldarimMothershipCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipReadyQ;
trigger gt_ObjectiveDestroyZergHatcheriesCreate;
trigger gt_ObjectiveDestroyZergHatcheriesComplete;
trigger gt_ObjectiveDestroyZergHatcheriesFailed;
trigger gt_ObjectiveNovaMustSurviveCreate;
trigger gt_ObjectiveNovaMustSurviveComplete;
trigger gt_ObjectiveNovaMustSurviveFailed;
trigger gt_ObjectiveDestroyShieldProjectorsCreate;
trigger gt_ObjectiveDestroyShieldProjectorsComplete;
trigger gt_ObjectiveDestroyShieldProjectorsUpdate;
trigger gt_ObjectiveDestroyShieldProjectorsFailed;
trigger gt_ObjectiveCivilianCenterMustSurviveCreate;
trigger gt_ObjectiveCivilianCenterMustSurviveComplete;
trigger gt_ObjectiveCivilianCenterMustSurviveFailed;
trigger gt_ObjectiveDestroyTaldarimMothershipCreate;
trigger gt_ObjectiveDestroyTaldarimMothershipComplete;
trigger gt_ObjectiveDestroyTaldarimMothershipFailed;
trigger gt_ObjectiveDestroyRemainingZergHatcheriesCreate;
trigger gt_ObjectiveDestroyRemainingZergHatcheriesComplete;
trigger gt_ObjectiveDestroyRemainingZergHatcheriesUpdate;
trigger gt_ObjectiveDestroyRemainingZergHatcheriesFailed;
trigger gt_ObjectiveDestroyFleetBeaconCreate;
trigger gt_ObjectiveDestroyFleetBeaconComplete;
trigger gt_ObjectiveDestroyFleetBeaconFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene00Fortification;
trigger gt_BriefingScene01Stadium;
trigger gt_BriefingScene02Banshees;
trigger gt_SpawnCivilians;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai285EA2B0") { ai285EA2B0_start(p); }
    if (cai_playerAI[p] == "aiCCC21B06") { aiCCC21B06_start(p); }
    if (cai_playerAI[p] == "aiBFD4C32A") { aiBFD4C32A_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { ai285EA2B0_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiCCC21B06") { aiCCC21B06_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiBFD4C32A") { aiBFD4C32A_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { return ai285EA2B0_getCustomData(p); }
    if (cai_playerAI[p] == "aiCCC21B06") { return aiCCC21B06_getCustomData(p); }
    if (cai_playerAI[p] == "aiBFD4C32A") { return aiBFD4C32A_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { return ai285EA2B0_getLastWave(p); }
    if (cai_playerAI[p] == "aiCCC21B06") { return aiCCC21B06_getLastWave(p); }
    if (cai_playerAI[p] == "aiBFD4C32A") { return aiBFD4C32A_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { ai285EA2B0_waves_run(p, target); }
    if (cai_playerAI[p] == "aiCCC21B06") { aiCCC21B06_waves_run(p, target); }
    if (cai_playerAI[p] == "aiBFD4C32A") { aiBFD4C32A_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { ai285EA2B0_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiCCC21B06") { aiCCC21B06_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiBFD4C32A") { aiBFD4C32A_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai285EA2B0") { ai285EA2B0_waves_stop(); }
    if (ai == "aiCCC21B06") { aiCCC21B06_waves_stop(); }
    if (ai == "aiBFD4C32A") { aiBFD4C32A_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { ai285EA2B0_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiCCC21B06") { aiCCC21B06_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiBFD4C32A") { aiBFD4C32A_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { ai285EA2B0_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiCCC21B06") { aiCCC21B06_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiBFD4C32A") { aiBFD4C32A_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { return ai285EA2B0_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiCCC21B06") { return aiCCC21B06_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiBFD4C32A") { return aiBFD4C32A_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { return ai285EA2B0_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiCCC21B06") { return aiCCC21B06_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiBFD4C32A") { return aiBFD4C32A_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai285EA2B0") { return ai285EA2B0_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiCCC21B06") { return aiCCC21B06_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiBFD4C32A") { return aiBFD4C32A_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai285EA2B0", 6);
    cai_start("aiCCC21B06", 5);
    AICampaignStart(2);
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(7);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 4);
    cai_waves_run(6, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(5, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_GoToPointandDespawn_Trigger = null;
unit auto_gf_GoToPointandDespawn_lp_unit;
point auto_gf_GoToPointandDespawn_lp_despawnPoint;

void gf_GoToPointandDespawn (unit lp_unit, point lp_despawnPoint) {
    auto_gf_GoToPointandDespawn_lp_unit = lp_unit;
    auto_gf_GoToPointandDespawn_lp_despawnPoint = lp_despawnPoint;

    if (auto_gf_GoToPointandDespawn_Trigger == null) {
        auto_gf_GoToPointandDespawn_Trigger = TriggerCreate("auto_gf_GoToPointandDespawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_GoToPointandDespawn_Trigger, false, false);
}

bool auto_gf_GoToPointandDespawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_GoToPointandDespawn_lp_unit;
    point lp_despawnPoint = auto_gf_GoToPointandDespawn_lp_despawnPoint;

    // Automatic Variable Declarations
    // Implementation
    while ((UnitIsAlive(lp_unit) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_unit), lp_despawnPoint) > 1)) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_despawnPoint), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lp_unit) == true)) {
        UnitRemove(lp_unit);
    }

    return true;
}

bool gf_UnitIsArmyUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), (("FlagArray[" + "ArmySelect" + "]")), c_playerAny) == "1")) {
        return true;
    }
    else {
        return false;
    }
}

void gf_SporeCrawlerPingTracker (unit lp_sporeCrawler) {
    // Automatic Variable Declarations
    // Implementation
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        if ((libHots_gf_ActorForUnit(lp_sporeCrawler, 1) == null)) {
            libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranEnemy, libNCMI_ge_CampaginReticleSize_Small, null, lp_sporeCrawler, "Ref_Center");
            libHots_gf_StoreActorForUnit(lp_sporeCrawler, 1, libNtve_gf_ActorLastCreated());
        }

        if ((libHots_gf_PingStoredForUnit(lp_sporeCrawler, 1) == c_invalidPingId)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconDetectPing", UnitGetPosition(lp_sporeCrawler), Color(100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetScale(PingLastCreated(), 0.5);
            PingSetUnit(PingLastCreated(), lp_sporeCrawler);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/30B05E06"));
            libHots_gf_StorePingForUnit(lp_sporeCrawler, 1, PingLastCreated());
        }

        while (!(((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(lp_sporeCrawler) == false) || (UnitGetType(lp_sporeCrawler) == "SporeCrawler") || (gv_activePhase == 2)))) {
            Wait(1.0, c_timeGame);
        }
        if ((libHots_gf_PingStoredForUnit(lp_sporeCrawler, 1) != c_invalidPingId)) {
            PingDestroy(libHots_gf_PingStoredForUnit(lp_sporeCrawler, 1));
        }

    }

}

trigger auto_gf_OverseerPatrol_Trigger = null;
string auto_gf_OverseerPatrol_lp_patrolPointName;
int auto_gf_OverseerPatrol_lp_patrolIndexCount;

void gf_OverseerPatrol (string lp_patrolPointName, int lp_patrolIndexCount) {
    auto_gf_OverseerPatrol_lp_patrolPointName = lp_patrolPointName;
    auto_gf_OverseerPatrol_lp_patrolIndexCount = lp_patrolIndexCount;

    if (auto_gf_OverseerPatrol_Trigger == null) {
        auto_gf_OverseerPatrol_Trigger = TriggerCreate("auto_gf_OverseerPatrol_TriggerFunc");
    }

    TriggerExecute(auto_gf_OverseerPatrol_Trigger, false, false);
}

bool auto_gf_OverseerPatrol_TriggerFunc (bool testConds, bool runActions) {
    string lp_patrolPointName = auto_gf_OverseerPatrol_lp_patrolPointName;
    int lp_patrolIndexCount = auto_gf_OverseerPatrol_lp_patrolIndexCount;

    // Variable Declarations
    unit lv_overseer;
    int lv_overseerPlayer;
    int lv_i;

    // Automatic Variable Declarations
    fixed auto97AFD4EC_at;

    // Variable Initialization

    // Implementation
    if ((lp_patrolPointName == "ZergBaseNorth")) {
        lv_overseerPlayer = gv_pLAYER_07_ZERG;
    }
    else {
        lv_overseerPlayer = gv_pLAYER_06_ZERG;
    }
    while (true) {
        while (!((UnitGroupCount(UnitGroup("Overlord", lv_overseerPlayer, RegionFromName(lp_patrolPointName), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            Wait(1.0, c_timeAI);
        }
        lv_overseer = UnitGroupUnit(UnitGroup("Overlord", lv_overseerPlayer, RegionFromName(lp_patrolPointName), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        UnitIssueOrder(lv_overseer, Order(AbilityCommand("MorphToOverseer", 0)), c_orderQueueReplace);
        while (!(((UnitGetType(lv_overseer) == "Overseer") || (UnitIsAlive(lv_overseer) == false)))) {
            Wait(1.0, c_timeAI);
        }
        while ((UnitIsAlive(lv_overseer) == true)) {
            lv_i += 1;
            if ((lv_i > lp_patrolIndexCount)) {
                lv_i = 1;
            }

            UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lp_patrolPointName + IntToString(lv_i)))), c_orderQueueReplace);
            auto97AFD4EC_at = 0;
            while (!(((UnitIsAlive(lv_overseer) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_overseer), PointFromName((lp_patrolPointName + IntToString(lv_i)))) < 1))) && auto97AFD4EC_at <= 10.0) {
                Wait(0.25, c_timeAI);
                auto97AFD4EC_at = auto97AFD4EC_at + 0.25;
            }
            Wait(2.0, c_timeAI);
        }
    }
    return true;
}

trigger auto_gf_ZergExpansion_Trigger = null;
region auto_gf_ZergExpansion_lp_expansionRegion;

void gf_ZergExpansion (region lp_expansionRegion) {
    auto_gf_ZergExpansion_lp_expansionRegion = lp_expansionRegion;

    if (auto_gf_ZergExpansion_Trigger == null) {
        auto_gf_ZergExpansion_Trigger = TriggerCreate("auto_gf_ZergExpansion_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZergExpansion_Trigger, false, false);
}

bool auto_gf_ZergExpansion_TriggerFunc (bool testConds, bool runActions) {
    region lp_expansionRegion = auto_gf_ZergExpansion_lp_expansionRegion;

    // Automatic Variable Declarations
    unitgroup auto90DF6E28_g;
    int auto90DF6E28_u;
    unit auto90DF6E28_var;

    // Implementation
    AIToggleBulliesInRegion(gv_pLAYER_06_ZERG, lp_expansionRegion, true);
    AIToggleBulliesInRegion(gv_pLAYER_07_ZERG, lp_expansionRegion, true);
    while ((UnitGroupCount(UnitGroup("Elsecaro_Colonist_Hut", 0, lp_expansionRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        auto90DF6E28_g = UnitGroup("Elsecaro_Colonist_Hut", 0, lp_expansionRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto90DF6E28_u = UnitGroupCount(auto90DF6E28_g, c_unitCountAll);
        for (;; auto90DF6E28_u -= 1) {
            auto90DF6E28_var = UnitGroupUnitFromEnd(auto90DF6E28_g, auto90DF6E28_u);
            if (auto90DF6E28_var == null) { break; }
            if ((CreepIsPresent(UnitGetPosition(auto90DF6E28_var)) == true)) {
                libNtve_gf_AICast(UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_06_ZERG, lp_expansionRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto90DF6E28_var)), OrderTargetingUnit(AbilityCommand("attack", 0), auto90DF6E28_var));
                libNtve_gf_AICast(UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_07_ZERG, lp_expansionRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto90DF6E28_var)), OrderTargetingUnit(AbilityCommand("attack", 0), auto90DF6E28_var));
            }

        }
        Wait(2.0, c_timeAI);
    }
    return true;
}

void gf_AddZergUnitsToAttackWave (string lp_unitType, int lp_count, point lp_spawnPoint) {
    // Variable Declarations
    int lv_attackingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_spawnPoint == PointFromId(405))) {
        lv_attackingPlayer = gv_pLAYER_07_ZERG;
    }
    else {
        lv_attackingPlayer = gv_pLAYER_06_ZERG;
    }
    UnitCreate(lp_count, lp_unitType, 0, lv_attackingPlayer, lp_spawnPoint, PointGetFacing(lp_spawnPoint));
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
}

void gf_zzOLDSendZergAttackWave (int lp_zerglingCount, int lp_roachCount, int lp_hydraCount, int lp_banelingCount, int lp_mutaliskCount, int lp_broodlordCount, int lp_ultraliskCount, int lp_ravagerCount, int lp_infestorCount, point lp_spawnPoint) {
    // Variable Declarations
    int lv_attackingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_spawnPoint == PointFromId(405))) {
        lv_attackingPlayer = gv_pLAYER_07_ZERG;
    }
    else {
        lv_attackingPlayer = gv_pLAYER_06_ZERG;
    }
    AIAttackWaveSetGatherPoint(lv_attackingPlayer, PointFromId(293));
    AIAttackWaveSetTargetPoint(lv_attackingPlayer, PointFromId(410));
    UnitCreate(lp_zerglingCount, "ZerglingBurrowed", 0, lv_attackingPlayer, lp_spawnPoint, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
    UnitCreate(lp_roachCount, "RoachBurrowed", 0, lv_attackingPlayer, lp_spawnPoint, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
    UnitCreate(lp_hydraCount, "HydraliskBurrowed", 0, lv_attackingPlayer, lp_spawnPoint, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
    UnitCreate(lp_banelingCount, "BanelingBurrowed", 0, lv_attackingPlayer, lp_spawnPoint, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
    UnitCreate(lp_mutaliskCount, "Mutalisk", 0, lv_attackingPlayer, lp_spawnPoint, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
    UnitCreate(lp_broodlordCount, "BroodLord", 0, lv_attackingPlayer, lp_spawnPoint, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
    UnitCreate(lp_ultraliskCount, "UltraliskBurrowed", 0, lv_attackingPlayer, lp_spawnPoint, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
    UnitCreate(lp_ravagerCount, "RavagerBurrowed", 0, lv_attackingPlayer, lp_spawnPoint, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
    UnitCreate(lp_infestorCount, "InfestorBurrowed", 0, lv_attackingPlayer, lp_spawnPoint, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lv_attackingPlayer, UnitLastCreatedGroup());
    AIAttackWaveSend(lv_attackingPlayer, 45, false);
}

void gf_SpawnRetaliationUnits (int lp_zealotCount, int lp_stalkerCount, int lp_immortalCount, int lp_colossusCount, int lp_scoutCount, int lp_phoenixCount, int lp_voidRayCount, int lp_tempestCount, int lp_carrierCount, int lp_oracleCount, int lp_warpPrismCount) {
    // Variable Declarations
    unitgroup lv_livingGenerators;
    point lv_randomishSpawnPoint;
    unit lv_closestGenerator;

    // Automatic Variable Declarations
    unitgroup auto116063F0_g;
    int auto116063F0_u;
    unit auto116063F0_var;
    int autoBB28B4E8_ae;
    int autoBB28B4E8_var;
    int autoD32C90D4_ae;
    int autoD32C90D4_var;
    int auto8431FF2B_ae;
    int auto8431FF2B_var;
    int autoED1A0E0E_ae;
    int autoED1A0E0E_var;
    int autoE8CB8916_ae;
    int autoE8CB8916_var;
    int auto546636D7_ae;
    int auto546636D7_var;
    int autoA23B6681_ae;
    int autoA23B6681_var;
    int auto6C51DBB1_ae;
    int auto6C51DBB1_var;
    int autoCC7DA202_ae;
    int autoCC7DA202_var;
    int autoEC4B0FAA_ae;
    int autoEC4B0FAA_var;
    int auto6AEE7118_ae;
    int auto6AEE7118_var;

    // Variable Initialization
    lv_livingGenerators = UnitGroupEmpty();

    // Implementation
    auto116063F0_g = gv_shieldProjectors;
    auto116063F0_u = UnitGroupCount(auto116063F0_g, c_unitCountAll);
    for (;; auto116063F0_u -= 1) {
        auto116063F0_var = UnitGroupUnitFromEnd(auto116063F0_g, auto116063F0_u);
        if (auto116063F0_var == null) { break; }
        if ((UnitIsAlive(auto116063F0_var) == true)) {
            UnitGroupAdd(lv_livingGenerators, auto116063F0_var);
        }

    }
    lv_closestGenerator = UnitGroupClosestToPoint(lv_livingGenerators, PointFromId(410));
    if ((lv_closestGenerator != null)) {
        autoBB28B4E8_ae = lp_zealotCount;
        autoBB28B4E8_var = 1;
        for ( ; autoBB28B4E8_var <= autoBB28B4E8_ae; autoBB28B4E8_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        autoD32C90D4_ae = lp_stalkerCount;
        autoD32C90D4_var = 1;
        for ( ; autoD32C90D4_var <= autoD32C90D4_ae; autoD32C90D4_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        auto8431FF2B_ae = lp_immortalCount;
        auto8431FF2B_var = 1;
        for ( ; auto8431FF2B_var <= auto8431FF2B_ae; auto8431FF2B_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        autoED1A0E0E_ae = lp_colossusCount;
        autoED1A0E0E_var = 1;
        for ( ; autoED1A0E0E_var <= autoED1A0E0E_ae; autoED1A0E0E_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        autoE8CB8916_ae = lp_scoutCount;
        autoE8CB8916_var = 1;
        for ( ; autoE8CB8916_var <= autoE8CB8916_ae; autoE8CB8916_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 14), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        auto546636D7_ae = lp_phoenixCount;
        auto546636D7_var = 1;
        for ( ; auto546636D7_var <= auto546636D7_ae; auto546636D7_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 7), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        autoA23B6681_ae = lp_voidRayCount;
        autoA23B6681_var = 1;
        for ( ; autoA23B6681_var <= autoA23B6681_ae; autoA23B6681_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 8), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        auto6C51DBB1_ae = lp_tempestCount;
        auto6C51DBB1_var = 1;
        for ( ; auto6C51DBB1_var <= auto6C51DBB1_ae; auto6C51DBB1_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 15), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        autoCC7DA202_ae = lp_carrierCount;
        autoCC7DA202_var = 1;
        for ( ; autoCC7DA202_var <= autoCC7DA202_ae; autoCC7DA202_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 6), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        autoEC4B0FAA_ae = lp_oracleCount;
        autoEC4B0FAA_var = 1;
        for ( ; autoEC4B0FAA_var <= autoEC4B0FAA_ae; autoEC4B0FAA_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 1), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
        auto6AEE7118_ae = lp_warpPrismCount;
        auto6AEE7118_var = 1;
        for ( ; auto6AEE7118_var <= auto6AEE7118_ae; auto6AEE7118_var += 1 ) {
            lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_closestGenerator), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitFromId(409), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 16), lv_randomishSpawnPoint), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
        }
    }

}

trigger auto_gf_PingUnitGroup_Trigger = null;
unitgroup auto_gf_PingUnitGroup_lp_unitGroup;

void gf_PingUnitGroup (unitgroup lp_unitGroup) {
    auto_gf_PingUnitGroup_lp_unitGroup = lp_unitGroup;

    if (auto_gf_PingUnitGroup_Trigger == null) {
        auto_gf_PingUnitGroup_Trigger = TriggerCreate("auto_gf_PingUnitGroup_TriggerFunc");
    }

    TriggerExecute(auto_gf_PingUnitGroup_Trigger, false, false);
}

bool auto_gf_PingUnitGroup_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_PingUnitGroup_lp_unitGroup;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitGroup != null)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGroupCenterOfGroup(lp_unitGroup), Color(100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5D2C3943"));
        while ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) > 0)) {
            PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lp_unitGroup));
            Wait(0.25, c_timeAI);
        }
        PingDestroy(PingLastCreated());
    }

    return true;
}

trigger auto_gf_AIWarpPrism_Trigger = null;
unit auto_gf_AIWarpPrism_lp_warpPrism;

void gf_AIWarpPrism (unit lp_warpPrism) {
    auto_gf_AIWarpPrism_lp_warpPrism = lp_warpPrism;

    if (auto_gf_AIWarpPrism_Trigger == null) {
        auto_gf_AIWarpPrism_Trigger = TriggerCreate("auto_gf_AIWarpPrism_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIWarpPrism_Trigger, false, false);
}

bool auto_gf_AIWarpPrism_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpPrism = auto_gf_AIWarpPrism_lp_warpPrism;

    // Variable Declarations
    point lv_morphPoint;
    unitgroup lv_nearbyValidUnits;
    fixed lv_warpDelay;

    // Automatic Variable Declarations
    int auto08D0178E_ae;
    int auto08D0178E_var;
    int auto1101361A_ae;
    int auto1101361A_var;

    // Variable Initialization
    lv_nearbyValidUnits = UnitGroupEmpty();

    // Implementation
    while (!(((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(lp_warpPrism) == false) || (DistanceBetweenPoints(UnitGetPosition(lp_warpPrism), PointFromId(410)) <= 35.0)))) {
        Wait(1.0, c_timeGame);
    }
    lv_morphPoint = RegionRandomPoint(RegionFromId(48));
    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_warpPrism) == true) && (UnitGetType(lp_warpPrism) == "WarpPrism")) {
        UnitIssueOrder(lp_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), lv_morphPoint), c_orderQueueReplace);
        UnitIssueOrder(lp_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
        Wait(0.25, c_timeGame);
    }
    lv_warpDelay = gv_retaliationPrismInitialWarpDelay;
    while ((UnitIsAlive(lp_warpPrism) == true)) {
        auto08D0178E_ae = gv_retaliationPrismZealotCount;
        auto08D0178E_var = 1;
        for ( ; auto08D0178E_var <= auto08D0178E_ae; auto08D0178E_var += 1 ) {
            if ((UnitIsAlive(lp_warpPrism) == true) && (UnitGroupCount(UnitGroupFilter("Zealot", c_playerAny, gv_retaliationWave_WarpedInInfantry, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < gv_retaliationPrismZealotMax)) {
                UnitIssueOrder(UnitFromId(512), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointWithOffsetPolar(UnitGetPosition(lp_warpPrism), RandomFixed(0.0, 2.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                Wait(0.125, c_timeGame);
            }

        }
        auto1101361A_ae = gv_retaliationPrismStalkerCount;
        auto1101361A_var = 1;
        for ( ; auto1101361A_var <= auto1101361A_ae; auto1101361A_var += 1 ) {
            if ((UnitIsAlive(lp_warpPrism) == true) && (UnitGroupCount(UnitGroupFilter("Stalker", c_playerAny, gv_retaliationWave_WarpedInInfantry, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < gv_retaliationPrismZealotMax)) {
                UnitIssueOrder(UnitFromId(512), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffsetPolar(UnitGetPosition(lp_warpPrism), RandomFixed(0.0, 2.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                Wait(0.125, c_timeGame);
            }

        }
        Wait(lv_warpDelay, c_timeAI);
        if ((lv_warpDelay > (gv_retaliationPrismInitialWarpDelay / 2.0)) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            lv_warpDelay -= (gv_retaliationPrismInitialWarpDelay / 10.0);
        }

    }
    return true;
}

void gf_AIOracle (int lp_owner, unit lp_oracle, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_cloakedUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cloakedUnits = UnitGroupEmpty();

    // Implementation
    lv_cloakedUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_oracle), libLotv_gf_DifficultyValueFixed2(10.0, 10.0, 12.0, 15.0)), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_cloakedUnits, c_unitCountAlive) > 0)) {
        libNtve_gf_AICast(lp_oracle, OrderTargetingPoint(AbilityCommand("OracleRevelationV2", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupClosestToPoint(lv_cloakedUnits, UnitGetPosition(lp_oracle))), libLotv_gf_DifficultyValueFixed2(5.0, 5.0, 4.0, 3.0), UnitGetPosition(lp_oracle))));
    }

}

void gf_AIRavager (int lp_owner, unit lp_ravager, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unit lv_loopUnit;
    unitgroup lv_nearbyValidUnits;

    // Automatic Variable Declarations
    unitgroup auto096D078E_g;
    int auto096D078E_u;

    // Variable Initialization
    lv_nearbyValidUnits = UnitGroupEmpty();

    // Implementation
    auto096D078E_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_ravager), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto096D078E_u = UnitGroupCount(auto096D078E_g, c_unitCountAll);
    for (;; auto096D078E_u -= 1) {
        lv_loopUnit = UnitGroupUnitFromEnd(auto096D078E_g, auto096D078E_u);
        if (lv_loopUnit == null) { break; }
        if (((libNtve_gf_UnitIsVisibleToPlayer(lv_loopUnit, gv_pLAYER_06_ZERG) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_loopUnit, gv_pLAYER_07_ZERG) == true))) {
            UnitGroupAdd(lv_nearbyValidUnits, lv_loopUnit);
        }

    }
    if ((UnitGroupCount(lv_nearbyValidUnits, c_unitCountAlive) > 0)) {
        libNtve_gf_AICast(lp_ravager, OrderTargetingPoint(AbilityCommand("RavagerCorrosiveBile", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupRandomUnit(lv_nearbyValidUnits, c_unitCountAlive)), RandomFixed(0.0, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 2.0, 0.75)), libNtve_gf_RandomAngle())));
    }

}

trigger auto_gf_AISporeCrawler_Trigger = null;
int auto_gf_AISporeCrawler_lp_owner;
unit auto_gf_AISporeCrawler_lp_sporeCrawler;
unitgroup auto_gf_AISporeCrawler_lp_nearbyUnits;

void gf_AISporeCrawler (int lp_owner, unit lp_sporeCrawler, unitgroup lp_nearbyUnits) {
    auto_gf_AISporeCrawler_lp_owner = lp_owner;
    auto_gf_AISporeCrawler_lp_sporeCrawler = lp_sporeCrawler;
    auto_gf_AISporeCrawler_lp_nearbyUnits = lp_nearbyUnits;

    if (auto_gf_AISporeCrawler_Trigger == null) {
        auto_gf_AISporeCrawler_Trigger = TriggerCreate("auto_gf_AISporeCrawler_TriggerFunc");
    }

    TriggerExecute(auto_gf_AISporeCrawler_Trigger, false, false);
}

bool auto_gf_AISporeCrawler_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_AISporeCrawler_lp_owner;
    unit lp_sporeCrawler = auto_gf_AISporeCrawler_lp_sporeCrawler;
    unitgroup lp_nearbyUnits = auto_gf_AISporeCrawler_lp_nearbyUnits;

    // Variable Declarations
    unitgroup lv_nearValidUnits;
    unitgroup lv_farValidUnits;
    point lv_roundedCrawlerLocation;
    point lv_closestValidCrawlerLocation;
    point lv_crawlerCheckPoint;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    unitgroup autoC6E8BEE7_g;
    int autoC6E8BEE7_u;
    unit autoC6E8BEE7_var;
    unitgroup auto2CA30ED2_g;
    int auto2CA30ED2_u;
    unit auto2CA30ED2_var;
    const int auto968B5FCE_ae = 2;
    const int auto968B5FCE_ai = 1;
    const int auto10F83F74_ae = 2;
    const int auto10F83F74_ai = 1;

    // Variable Initialization
    lv_nearValidUnits = UnitGroupEmpty();
    lv_farValidUnits = UnitGroupEmpty();

    // Implementation
    lv_nearValidUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_sporeCrawler), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6E8BEE7_g = lv_nearValidUnits;
    autoC6E8BEE7_u = UnitGroupCount(autoC6E8BEE7_g, c_unitCountAll);
    for (;; autoC6E8BEE7_u -= 1) {
        autoC6E8BEE7_var = UnitGroupUnitFromEnd(autoC6E8BEE7_g, autoC6E8BEE7_u);
        if (autoC6E8BEE7_var == null) { break; }
        if ((UnitPathableToUnit(lp_sporeCrawler, autoC6E8BEE7_var, 0.0, 0.0) == false)) {
            UnitGroupRemove(lv_nearValidUnits, autoC6E8BEE7_var);
        }

    }
    lv_farValidUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2CA30ED2_g = lv_farValidUnits;
    auto2CA30ED2_u = UnitGroupCount(auto2CA30ED2_g, c_unitCountAll);
    for (;; auto2CA30ED2_u -= 1) {
        auto2CA30ED2_var = UnitGroupUnitFromEnd(auto2CA30ED2_g, auto2CA30ED2_u);
        if (auto2CA30ED2_var == null) { break; }
        if ((UnitPathableToUnit(lp_sporeCrawler, auto2CA30ED2_var, 0.0, 0.0) == false)) {
            UnitGroupRemove(lv_farValidUnits, auto2CA30ED2_var);
        }

    }
    if ((gv_activePhase == 2)) {
        UnitRemove(lp_sporeCrawler);
    }
    else if ((UnitGroupCount(lv_nearValidUnits, c_unitCountAlive) > 0)) {
        lv_roundedCrawlerLocation = Point(Round(PointGetX(UnitGetPosition(lp_sporeCrawler))), Round(PointGetY(UnitGetPosition(lp_sporeCrawler))));
        lv_x = -2;
        for ( ; ( (auto968B5FCE_ai >= 0 && lv_x <= auto968B5FCE_ae) || (auto968B5FCE_ai < 0 && lv_x >= auto968B5FCE_ae) ) ; lv_x += auto968B5FCE_ai ) {
            lv_y = -2;
            for ( ; ( (auto10F83F74_ai >= 0 && lv_y <= auto10F83F74_ae) || (auto10F83F74_ai < 0 && lv_y >= auto10F83F74_ae) ) ; lv_y += auto10F83F74_ai ) {
                lv_crawlerCheckPoint = Point((PointGetX(lv_roundedCrawlerLocation) + lv_x), (PointGetY(lv_roundedCrawlerLocation) + lv_y));
                if ((UnitOrderIsValid(lp_sporeCrawler, OrderTargetingPoint(AbilityCommand("SporeCrawlerRoot", 0), lv_crawlerCheckPoint)) == true)) {
                    if ((lv_closestValidCrawlerLocation == null)) {
                        lv_closestValidCrawlerLocation = lv_crawlerCheckPoint;
                    }
                    else {
                        if ((DistanceBetweenPoints(lv_crawlerCheckPoint, UnitGetPosition(lp_sporeCrawler)) < DistanceBetweenPoints(lv_closestValidCrawlerLocation, UnitGetPosition(lp_sporeCrawler)))) {
                            lv_closestValidCrawlerLocation = lv_crawlerCheckPoint;
                        }

                    }
                }

            }
        }
        if ((lv_closestValidCrawlerLocation != null)) {
            libNtve_gf_AICast(lp_sporeCrawler, OrderTargetingPoint(AbilityCommand("SporeCrawlerRoot", 0), lv_closestValidCrawlerLocation));
        }

    }
    else if ((UnitGroupCount(lv_farValidUnits, c_unitCountAlive) > 0)) {
        libNtve_gf_AICast(lp_sporeCrawler, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_farValidUnits, UnitGetPosition(lp_sporeCrawler)))));
    }
    return true;
}

trigger auto_gf_OrderCivilianstoRun_Trigger = null;
unit auto_gf_OrderCivilianstoRun_lp_civilian;

void gf_OrderCivilianstoRun (unit lp_civilian) {
    auto_gf_OrderCivilianstoRun_lp_civilian = lp_civilian;

    if (auto_gf_OrderCivilianstoRun_Trigger == null) {
        auto_gf_OrderCivilianstoRun_Trigger = TriggerCreate("auto_gf_OrderCivilianstoRun_TriggerFunc");
    }

    TriggerExecute(auto_gf_OrderCivilianstoRun_Trigger, false, false);
}

bool auto_gf_OrderCivilianstoRun_TriggerFunc (bool testConds, bool runActions) {
    unit lp_civilian = auto_gf_OrderCivilianstoRun_lp_civilian;

    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAdd(lp_civilian, "Run", lp_civilian, 1);
    while (true) {
        if ((libNtve_gf_UnitInRegion(lp_civilian, RegionFromId(18)) == true)) {
            UnitRemove(lp_civilian);
            return true;
        }
        else {
            UnitIssueOrder(lp_civilian, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(18))), c_orderQueueReplace);
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

trigger auto_gf_BansheeFormation_Trigger = null;
fixed auto_gf_BansheeFormation_lp_angle;
fixed auto_gf_BansheeFormation_lp_distance;
unit auto_gf_BansheeFormation_lp_escourtTarget;

void gf_BansheeFormation (fixed lp_angle, fixed lp_distance, unit lp_escourtTarget) {
    auto_gf_BansheeFormation_lp_angle = lp_angle;
    auto_gf_BansheeFormation_lp_distance = lp_distance;
    auto_gf_BansheeFormation_lp_escourtTarget = lp_escourtTarget;

    if (auto_gf_BansheeFormation_Trigger == null) {
        auto_gf_BansheeFormation_Trigger = TriggerCreate("auto_gf_BansheeFormation_TriggerFunc");
    }

    TriggerExecute(auto_gf_BansheeFormation_Trigger, false, false);
}

bool auto_gf_BansheeFormation_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_angle = auto_gf_BansheeFormation_lp_angle;
    fixed lp_distance = auto_gf_BansheeFormation_lp_distance;
    unit lp_escourtTarget = auto_gf_BansheeFormation_lp_escourtTarget;

    // Variable Declarations
    unit lv_banshee;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Banshee", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(lp_escourtTarget), lp_distance, lp_angle));
    lv_banshee = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    while ((UnitIsAlive(lv_banshee) == true) && (UnitIsAlive(lp_escourtTarget) == true) && (libNtve_gf_UnitIsInsideTransport(gv_cinematicNova) == true)) {
        UnitIssueOrder(lv_banshee, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escourtTarget), lp_distance, lp_angle)), c_orderQueueReplace);
        Wait(0.25, c_timeReal);
    }
    if ((UnitIsAlive(lv_banshee) == true)) {
        UnitIssueOrder(lv_banshee, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(270), lp_distance, lp_angle)), c_orderQueueReplace);
        UnitIssueOrder(lv_banshee, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(lv_banshee), lp_distance, PointGetFacing(PointFromId(270)))), c_orderQueueAddToEnd);
    }

    return true;
}

trigger auto_gf_FollowTransportWhileLoaded_Trigger = null;
unit auto_gf_FollowTransportWhileLoaded_lp_escourtTarget;

void gf_FollowTransportWhileLoaded (unit lp_escourtTarget) {
    auto_gf_FollowTransportWhileLoaded_lp_escourtTarget = lp_escourtTarget;

    if (auto_gf_FollowTransportWhileLoaded_Trigger == null) {
        auto_gf_FollowTransportWhileLoaded_Trigger = TriggerCreate("auto_gf_FollowTransportWhileLoaded_TriggerFunc");
    }

    TriggerExecute(auto_gf_FollowTransportWhileLoaded_Trigger, false, false);
}

bool auto_gf_FollowTransportWhileLoaded_TriggerFunc (bool testConds, bool runActions) {
    unit lp_escourtTarget = auto_gf_FollowTransportWhileLoaded_lp_escourtTarget;

    // Variable Declarations
    unit lv_banshee;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CameraFollowUnitGroup(gv_pLAYER_01_USER, libNtve_gf_ConvertUnitToUnitGroup(lp_escourtTarget), true, false);
    while ((libNtve_gf_UnitIsInsideTransport(gv_cinematicNova) == true) && (UnitIsAlive(lp_escourtTarget) == true)) {
        Wait(0.25, c_timeReal);
    }
    CameraFollowUnitGroup(gv_pLAYER_01_USER, libNtve_gf_ConvertUnitToUnitGroup(lp_escourtTarget), false, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(270), 2.0, -1, 10.0, false);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, 34.0, 2.0, -1, 10.0);
    return true;
}

trigger auto_gf_TaldarimDeathBeamBurninator_Trigger = null;
point auto_gf_TaldarimDeathBeamBurninator_lp_spawnPoint;
fixed auto_gf_TaldarimDeathBeamBurninator_lp_distance;

void gf_TaldarimDeathBeamBurninator (point lp_spawnPoint, fixed lp_distance) {
    auto_gf_TaldarimDeathBeamBurninator_lp_spawnPoint = lp_spawnPoint;
    auto_gf_TaldarimDeathBeamBurninator_lp_distance = lp_distance;

    if (auto_gf_TaldarimDeathBeamBurninator_Trigger == null) {
        auto_gf_TaldarimDeathBeamBurninator_Trigger = TriggerCreate("auto_gf_TaldarimDeathBeamBurninator_TriggerFunc");
    }

    TriggerExecute(auto_gf_TaldarimDeathBeamBurninator_Trigger, false, false);
}

bool auto_gf_TaldarimDeathBeamBurninator_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_TaldarimDeathBeamBurninator_lp_spawnPoint;
    fixed lp_distance = auto_gf_TaldarimDeathBeamBurninator_lp_distance;

    // Variable Declarations
    fixed lv_creepRemoveRadius;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_creepRemoveRadius = 1.5;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TaldarimDeathFleetBeamUnit", c_unitCreateIgnorePlacement, gv_pLAYER_05_TALDARIM, lp_spawnPoint);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    while ((UnitIsAlive(UnitLastCreated()) == true) && (DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), PointWithOffsetPolar(lp_spawnPoint, lp_distance, PointGetFacing(lp_spawnPoint))) > 1)) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lp_spawnPoint, lp_distance, PointGetFacing(lp_spawnPoint))), c_orderQueueAddToEnd);
        CreepModify(UnitGetPosition(UnitLastCreated()), lv_creepRemoveRadius, false, false);
        Wait(0.125, c_timeReal);
    }
    if ((UnitIsAlive(UnitLastCreated()) == true)) {
        UnitKill(UnitLastCreated());
    }

    return true;
}

trigger auto_gf_SiegeAfterUnload_Trigger = null;
unit auto_gf_SiegeAfterUnload_lp_tank;

void gf_SiegeAfterUnload (unit lp_tank) {
    auto_gf_SiegeAfterUnload_lp_tank = lp_tank;

    if (auto_gf_SiegeAfterUnload_Trigger == null) {
        auto_gf_SiegeAfterUnload_Trigger = TriggerCreate("auto_gf_SiegeAfterUnload_TriggerFunc");
    }

    TriggerExecute(auto_gf_SiegeAfterUnload_Trigger, false, false);
}

bool auto_gf_SiegeAfterUnload_TriggerFunc (bool testConds, bool runActions) {
    unit lp_tank = auto_gf_SiegeAfterUnload_lp_tank;

    // Automatic Variable Declarations
    // Implementation
    while (!((libNtve_gf_UnitIsInsideTransport(lp_tank) == false))) {
        Wait(0.25, c_timeReal);
    }
    UnitIssueOrder(lp_tank, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    return true;
}

trigger auto_gf_EvacuateCivilians_Trigger = null;
unit auto_gf_EvacuateCivilians_lp_evacShip;

void gf_EvacuateCivilians (unit lp_evacShip) {
    auto_gf_EvacuateCivilians_lp_evacShip = lp_evacShip;

    if (auto_gf_EvacuateCivilians_Trigger == null) {
        auto_gf_EvacuateCivilians_Trigger = TriggerCreate("auto_gf_EvacuateCivilians_TriggerFunc");
    }

    TriggerExecute(auto_gf_EvacuateCivilians_Trigger, false, false);
}

bool auto_gf_EvacuateCivilians_TriggerFunc (bool testConds, bool runActions) {
    unit lp_evacShip = auto_gf_EvacuateCivilians_lp_evacShip;

    // Automatic Variable Declarations
    const int autoF5660A4F_n = 25;
    int autoF5660A4F_i;

    // Implementation
    for (autoF5660A4F_i = 1; autoF5660A4F_i <= autoF5660A4F_n; autoF5660A4F_i += 1) {
        UnitCreate(1, "BeachMale", 0, gv_pLAYER_04_DEFENDERS, PointFromId(2961), 315.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, lp_evacShip), c_orderQueueAddToEnd);
        Wait(RandomFixed(0.0, 0.25), c_timeReal);
        UnitCreate(1, "BeachGirl", 0, gv_pLAYER_04_DEFENDERS, PointFromId(2961), 315.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, lp_evacShip), c_orderQueueAddToEnd);
        Wait(RandomFixed(0.0, 0.25), c_timeReal);
    }
    Wait(5.0, c_timeReal);
    UnitIssueOrder(lp_evacShip, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(5.0, c_timeReal);
    UnitIssueOrder(lp_evacShip, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(5121), 10.0, PointGetFacing(PointFromId(5121)))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_InitializeNovaMission("Nova04");
    TriggerExecute(gt_Init01Technology, true, false);
    libNovC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_BriefingQ, true, true);
        ConsoleCommand("exit", true, true);
    }

    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_Stage1Start, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNovC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_TALDARIM, "DarkProtoss", 1);
    PlayerApplySkin(gv_pLAYER_05_TALDARIM, "TaldarimSkin", true);
    libComC_gf_EnableCampaignTechUnit(true, "Goliath", gv_pLAYER_01_USER);
    libComC_gf_EnableCampaignTechUnit(true, "Banshee", gv_pLAYER_01_USER);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_ZERG, "SwarmQueenVisual", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_07_ZERG, "SwarmQueenVisual", 1);
    libNovC_gf_ApplyUserTechChoicestoPlayer(gv_pLAYER_02_REIGEL);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaVoice4", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_DEFENDERS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_CIVILIANS, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_REIGEL, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_04_DEFENDERS, gv_pLAYER_03_CIVILIANS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_ZERG, gv_pLAYER_07_ZERG, libNtve_ge_AllianceSetting_Ally);
    PlayerGroupAdd(gv_playerGroup_Zerg, gv_pLAYER_06_ZERG);
    PlayerGroupAdd(gv_playerGroup_Zerg, gv_pLAYER_07_ZERG);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerSetState(gv_pLAYER_02_REIGEL, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_02_REIGEL, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_02_REIGEL, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_04_DEFENDERS, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_04_DEFENDERS, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_04_DEFENDERS, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_05_TALDARIM, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_05_TALDARIM, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_05_TALDARIM, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_06_ZERG, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_06_ZERG, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_06_ZERG, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_07_ZERG, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_07_ZERG, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_07_ZERG, c_playerStateFoodIgnored, true);
    PlayerSetColorIndex(gv_pLAYER_07_ZERG, 6, true);
    PlayerSetState(gv_pLAYER_04_DEFENDERS, c_playerStateFidgetingEnabled, false);
    libNCMI_gf_NM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto864AF0F3_g;
    int auto864AF0F3_u;
    unit auto864AF0F3_var;
    unitgroup auto9E622B6E_g;
    int auto9E622B6E_u;
    unit auto9E622B6E_var;
    playergroup autoD0C55ADC_g;
    int autoD0C55ADC_var;
    unitgroup auto00EAB231_g;
    int auto00EAB231_u;
    unit auto00EAB231_var;
    unitgroup auto34CB6B7E_g;
    int auto34CB6B7E_u;
    unit auto34CB6B7E_var;
    unitgroup autoC110A405_g;
    int autoC110A405_u;
    unit autoC110A405_var;
    unitgroup auto32DCCB06_g;
    int auto32DCCB06_u;
    unit auto32DCCB06_var;
    unitgroup auto7F00C447_g;
    int auto7F00C447_u;
    unit auto7F00C447_var;
    unitgroup autoA248CAF7_g;
    int autoA248CAF7_u;
    unit autoA248CAF7_var;
    unitgroup autoB9F9D5E1_g;
    int autoB9F9D5E1_u;
    unit autoB9F9D5E1_var;
    unitgroup auto7F70B0AE_g;
    int auto7F70B0AE_u;
    unit auto7F70B0AE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(UnitFromId(2822), true);
    auto864AF0F3_g = UnitGroup("Observer", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto864AF0F3_u = UnitGroupCount(auto864AF0F3_g, c_unitCountAll);
    for (;; auto864AF0F3_u -= 1) {
        auto864AF0F3_var = UnitGroupUnitFromEnd(auto864AF0F3_g, auto864AF0F3_u);
        if (auto864AF0F3_var == null) { break; }
        libNtve_gf_PauseUnit(auto864AF0F3_var, true);
        UnitGroupAdd(gv_stage1PausedObservers, auto864AF0F3_var);
    }
    AISetUnitScriptControlled(UnitFromId(409), true);
    gv_mothership = UnitFromId(549);
    UnitIssueOrder(gv_mothership, Order(AbilityCommand("NovaMothershipWarpOut", 0)), c_orderQueueReplace);
    libNCMI_gf_SetAllWorkerRallyPointsForPlayer(gv_pLAYER_01_USER);
    UnitGroupAddUnitGroup(gv_shieldProjectors, UnitGroup("TaldarimShieldGenerator", gv_pLAYER_05_TALDARIM, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    auto9E622B6E_g = UnitGroup(null, gv_pLAYER_05_TALDARIM, RegionFromId(21), UnitFilter(0, 0, 0, 0), 0);
    auto9E622B6E_u = UnitGroupCount(auto9E622B6E_g, c_unitCountAll);
    for (;; auto9E622B6E_u -= 1) {
        auto9E622B6E_var = UnitGroupUnitFromEnd(auto9E622B6E_g, auto9E622B6E_u);
        if (auto9E622B6E_var == null) { break; }
        libNtve_gf_PauseUnit(auto9E622B6E_var, true);
    }
    autoD0C55ADC_g = gv_playerGroup_Zerg;
    autoD0C55ADC_var = -1;
    while (true) {
        autoD0C55ADC_var = PlayerGroupNextPlayer(autoD0C55ADC_g, autoD0C55ADC_var);
        if (autoD0C55ADC_var < 0) { break; }
        gv_zergStartingStructureCount += UnitGroupCount(UnitGroup(null, autoD0C55ADC_var, RegionFromId(7), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        UnitGroupAddUnitGroup(gv_zergHatcheries, UnitGroup("Hatchery", autoD0C55ADC_var, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_zergHatcheries, UnitGroup("Lair", autoD0C55ADC_var, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        AIToggleBulliesInRegion(autoD0C55ADC_var, RegionFromId(12), false);
    }
    auto00EAB231_g = UnitGroup("PalletMinerals", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto00EAB231_u = UnitGroupCount(auto00EAB231_g, c_unitCountAll);
    for (;; auto00EAB231_u -= 1) {
        auto00EAB231_var = UnitGroupUnitFromEnd(auto00EAB231_g, auto00EAB231_u);
        if (auto00EAB231_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto00EAB231_var, false);
    }
    auto34CB6B7E_g = UnitGroup("PalletGas", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto34CB6B7E_u = UnitGroupCount(auto34CB6B7E_g, c_unitCountAll);
    for (;; auto34CB6B7E_u -= 1) {
        auto34CB6B7E_var = UnitGroupUnitFromEnd(auto34CB6B7E_g, auto34CB6B7E_u);
        if (auto34CB6B7E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto34CB6B7E_var, false);
    }
    autoC110A405_g = UnitGroup("Elsecaro_Colonist_Hut", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC110A405_u = UnitGroupCount(autoC110A405_g, c_unitCountAll);
    for (;; autoC110A405_u -= 1) {
        autoC110A405_var = UnitGroupUnitFromEnd(autoC110A405_g, autoC110A405_u);
        if (autoC110A405_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(autoC110A405_var, true, gv_pLAYER_01_USER);
    }
    auto32DCCB06_g = UnitGroup("BeachMale", gv_pLAYER_03_CIVILIANS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto32DCCB06_u = UnitGroupCount(auto32DCCB06_g, c_unitCountAll);
    for (;; auto32DCCB06_u -= 1) {
        auto32DCCB06_var = UnitGroupUnitFromEnd(auto32DCCB06_g, auto32DCCB06_u);
        if (auto32DCCB06_var == null) { break; }
        UnitBehaviorAdd(auto32DCCB06_var, "BeachCivilianScared", auto32DCCB06_var, 1);
    }
    auto7F00C447_g = UnitGroup("BeachGirl", gv_pLAYER_03_CIVILIANS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7F00C447_u = UnitGroupCount(auto7F00C447_g, c_unitCountAll);
    for (;; auto7F00C447_u -= 1) {
        auto7F00C447_var = UnitGroupUnitFromEnd(auto7F00C447_g, auto7F00C447_u);
        if (auto7F00C447_var == null) { break; }
        UnitBehaviorAdd(auto7F00C447_var, "BeachCivilianScared", auto7F00C447_var, 1);
    }
    UnitSetOwner(UnitFromId(563), gv_pLAYER_03_CIVILIANS, false);
    UnitSetOwner(UnitFromId(825), gv_pLAYER_03_CIVILIANS, false);
    UnitSetState(UnitFromId(825), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(825), c_unitStateSelectable, false);
    autoA248CAF7_g = UnitGroup("BeachGirl", gv_pLAYER_03_CIVILIANS, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA248CAF7_u = UnitGroupCount(autoA248CAF7_g, c_unitCountAll);
    for (;; autoA248CAF7_u -= 1) {
        autoA248CAF7_var = UnitGroupUnitFromEnd(autoA248CAF7_g, autoA248CAF7_u);
        if (autoA248CAF7_var == null) { break; }
        UnitBehaviorAddPlayer(autoA248CAF7_var, "Scared", gv_pLAYER_03_CIVILIANS, 1);
    }
    autoB9F9D5E1_g = UnitGroup("BeachMale", gv_pLAYER_03_CIVILIANS, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB9F9D5E1_u = UnitGroupCount(autoB9F9D5E1_g, c_unitCountAll);
    for (;; autoB9F9D5E1_u -= 1) {
        autoB9F9D5E1_var = UnitGroupUnitFromEnd(autoB9F9D5E1_g, autoB9F9D5E1_u);
        if (autoB9F9D5E1_var == null) { break; }
        UnitBehaviorAddPlayer(autoB9F9D5E1_var, "Scared", gv_pLAYER_03_CIVILIANS, 1);
    }
    auto7F70B0AE_g = UnitGroup(null, gv_pLAYER_02_REIGEL, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7F70B0AE_u = UnitGroupCount(auto7F70B0AE_g, c_unitCountAll);
    for (;; auto7F70B0AE_u -= 1) {
        auto7F70B0AE_var = UnitGroupUnitFromEnd(auto7F70B0AE_g, auto7F70B0AE_u);
        if (auto7F70B0AE_var == null) { break; }
        UnitSetState(auto7F70B0AE_var, c_unitStateTargetable, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_musicMainTrack = "nDLC_Music_Nova04_Main";
    gv_musicIntroTrack = "nDLC_Music_Nova04_Intro";
    gv_musicOutroTrack = "nDLC_Music_Nova04_Outro";
    gv_musicMidCineTrack = "nDLC_Music_Nova04_MidCine";
    gv_ambienceMainTrack = "Ambience_Nova04_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    RegionPlayableMapSet(RegionFromId(8));
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(1), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(26), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(29), RegionFromId(28), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(30), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(46), RegionFromId(32), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(49), RegionFromId(47), gv_pLAYER_01_USER);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "RainSprinkle");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC4E51E3D_g;
    int autoC4E51E3D_u;
    unit autoC4E51E3D_var;
    playergroup autoF1C32FBC_g;
    int autoF1C32FBC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "SOAMothershipLineAttackV2Damage", "Amount", gv_pLAYER_05_TALDARIM, "100");
    }

    autoC4E51E3D_g = gv_shieldProjectors;
    autoC4E51E3D_u = UnitGroupCount(autoC4E51E3D_g, c_unitCountAll);
    for (;; autoC4E51E3D_u -= 1) {
        autoC4E51E3D_var = UnitGroupUnitFromEnd(autoC4E51E3D_g, autoC4E51E3D_u);
        if (autoC4E51E3D_var == null) { break; }
        UnitSetPropertyFixed(autoC4E51E3D_var, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(1000.0, 1000.0, 1500.0, 1500.0));
        UnitSetPropertyFixed(autoC4E51E3D_var, c_unitPropShieldsMax, libLotv_gf_DifficultyValueFixed2(500.0, 500.0, 1000.0, 1500.0));
        UnitSetPropertyFixed(autoC4E51E3D_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoC4E51E3D_var, c_unitPropShieldsPercent, 100.0);
    }
    UnitSetPropertyFixed(gv_mothership, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(750.0, 750.0, 1250.0, 1750.0));
    UnitSetPropertyFixed(gv_mothership, c_unitPropShieldsMax, libLotv_gf_DifficultyValueFixed2(750.0, 750.0, 1250.0, 1750.0));
    UnitSetPropertyFixed(gv_mothership, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_mothership, c_unitPropShieldsPercent, 100.0);
    autoF1C32FBC_g = gv_playerGroup_Zerg;
    autoF1C32FBC_var = -1;
    while (true) {
        autoF1C32FBC_var = PlayerGroupNextPlayer(autoF1C32FBC_g, autoF1C32FBC_var);
        if (autoF1C32FBC_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "CentrificalHooks", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "GlialReconstitution", 1);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "zerglingattackspeed", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "HotsMuscularAugments", 1);
            TechTreeUpgradeAddLevel(autoF1C32FBC_var, "ChitinousPlating", 1);
        }

    }
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TechTreeAbilityAllow(gv_pLAYER_05_TALDARIM, AbilityCommand("Charge", 0), false);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossShieldsLevel1", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_AddMissionTipCampaign("Zerg Presence");
    libNCMI_gf_AddMissionTipCampaign("Banshee");
    libNCMI_gf_AddMissionTipCampaign("Goliath");
    libComC_gf_AddUnitTypeToUnitHelpPanel("Marine", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Separatist", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Goliath", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Banshee", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Thor", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Zergling", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Baneling", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Infestor", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Queen", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Roach", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ravager", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Overseer", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Drone", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", gv_pLAYER_01_USER);
    libNCMI_gf_AddMissionCheat("Stage2", "Skip to the second mission stage", gt_DebugStage2, libNCMI_ge_MissionCheatType_Stage, libNCMI_ge_MissionCheatUIType_Button);
    libNCMI_gf_AddMissionCheat("s2", "Skip to the second mission stage", gt_DebugStage2, libNCMI_ge_MissionCheatType_Stage, libNCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TimerGetElapsed(gv_s1_Timer) == 0.0)) {
        TimerStart(gv_s1_Timer, 210.0, false, c_timeAI);
        libNCUI_gf_TimerWindowCreate(gv_s1_Timer, StringExternal("Param/Value/2504EF5B"), true, false);
        gv_s1_TimerWindow = TimerWindowLastCreated();
    }

    TriggerEnable(gt_Stage1FirstOrder, false);
    TriggerEnable(gt_SporeCrawlerWarningQ, false);
    TriggerEnable(gt_OutofTimeWarningQ, false);
    TriggerEnable(gt_NukeReadyQ, false);
    TriggerEnable(gt_GoKillStuffQ, false);
    Wait(3.0, c_timeGame);
    libNtve_gf_StopTimer(gv_s1_Timer);
    TriggerQueueClear(c_triggerQueueRemove);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Sequence
//--------------------------------------------------------------------------------------------------
bool gt_IntroSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    TriggerExecute(gt_StartAI, true, false);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.5);
    libNtve_gf_GlobalCinematicSetting(false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(270), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_Stage1Start, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSequence_Init () {
    gt_IntroSequence = TriggerCreate("gt_IntroSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage1 Start
//--------------------------------------------------------------------------------------------------
bool gt_Stage1Start_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto25CFC45A_at;
    unitgroup autoBC1A1F55_g;
    int autoBC1A1F55_u;
    unit autoBC1A1F55_var;
    unitgroup autoEDBED939_g;
    int autoEDBED939_u;
    unit autoEDBED939_var;
    unitgroup auto90BBEDA4_g;
    int auto90BBEDA4_u;
    unit auto90BBEDA4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_activePhase = 1;
    libNCUI_gf_SetHeroPanelUnit(1, gv_nova);
    libNCMI_gf_SetNovaHeroUnit(gv_nova);
    libNCMI_gf_EnableDisableHeroReviveSystem(false, gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D57A7D19"), null, PointFromId(270));
    AIToggleBulliesInRegion(gv_pLAYER_06_ZERG, RegionFromId(7), true);
    AIToggleBulliesInRegion(gv_pLAYER_07_ZERG, RegionFromId(7), true);
    TriggerExecute(gt_ReigelBaseSetupTiming, true, false);
    TriggerExecute(gt_ObjectiveDestroyZergHatcheriesCreate, true, false);
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, false);
    Wait(3.0, c_timeAI);
    TriggerExecute(gt_TipReadyQ, true, false);
    TriggerExecute(gt_GoKillStuffQ, true, false);
    auto25CFC45A_at = 0;
    while (!((TimerGetElapsed(gv_s1_Timer) != 0.0)) && auto25CFC45A_at <= 10.0) {
        Wait(0.25, c_timeAI);
        auto25CFC45A_at = auto25CFC45A_at + 0.25;
    }
    if ((TimerGetElapsed(gv_s1_Timer) == 0.0)) {
        TimerStart(gv_s1_Timer, 210.0, false, c_timeAI);
        libNCUI_gf_TimerWindowCreate(gv_s1_Timer, StringExternal("Param/Value/BDB3A6F7"), true, false);
        libNCUI_gf_SetTimerWindowDangerThreshold(30.0);
        gv_s1_TimerWindow = TimerWindowLastCreated();
        TriggerEnable(gt_Stage1FirstOrder, false);
    }

    while (!((TimerGetRemaining(gv_s1_Timer) <= 195.0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerEnable(gt_SporeCrawlerSpawner, true);
    while (!((TimerGetRemaining(gv_s1_Timer) <= gv_phase1OverseerTimeRemaining))) {
        Wait(1.0, c_timeAI);
    }
    gf_OverseerPatrol("ZergBaseSouth", 7);
    gf_OverseerPatrol("ZergBaseNorth", 8);
    while (!((TimerGetRemaining(gv_s1_Timer) <= 30.0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_OutofTimeWarningQ, true, false);
    while (!((TimerGetRemaining(gv_s1_Timer) <= 0.0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ObjectiveDestroyZergHatcheriesComplete, true, false);
    TriggerExecute(gt_ObjectiveNovaMustSurviveComplete, true, false);
    TimerWindowDestroy(gv_s1_TimerWindow);
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    Wait(3.0, c_timeGame);
    ObjectiveSetState(gv_objectiveDestroyZergHatcheries, c_objectiveStateHidden);
    ObjectiveSetState(gv_objectiveNovaMustSurvive, c_objectiveStateHidden);
    autoBC1A1F55_g = UnitGroup("SporeCrawler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC1A1F55_u = UnitGroupCount(autoBC1A1F55_g, c_unitCountAll);
    for (;; autoBC1A1F55_u -= 1) {
        autoBC1A1F55_var = UnitGroupUnitFromEnd(autoBC1A1F55_g, autoBC1A1F55_u);
        if (autoBC1A1F55_var == null) { break; }
        if ((libHots_gf_ActorForUnit(autoBC1A1F55_var, 1) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoBC1A1F55_var, 1));
        }

        if ((libHots_gf_PingStoredForUnit(autoBC1A1F55_var, 1) != c_invalidPingId)) {
            PingDestroy(libHots_gf_PingStoredForUnit(autoBC1A1F55_var, 1));
        }

    }
    autoEDBED939_g = UnitGroup("SporeCrawlerUprooted", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEDBED939_u = UnitGroupCount(autoEDBED939_g, c_unitCountAll);
    for (;; autoEDBED939_u -= 1) {
        autoEDBED939_var = UnitGroupUnitFromEnd(autoEDBED939_g, autoEDBED939_u);
        if (autoEDBED939_var == null) { break; }
        if ((libHots_gf_ActorForUnit(autoEDBED939_var, 1) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoEDBED939_var, 1));
        }

        if ((libHots_gf_PingStoredForUnit(autoEDBED939_var, 1) != c_invalidPingId)) {
            PingDestroy(libHots_gf_PingStoredForUnit(autoEDBED939_var, 1));
        }

    }
    auto90BBEDA4_g = gv_zergHatcheries;
    auto90BBEDA4_u = UnitGroupCount(auto90BBEDA4_g, c_unitCountAll);
    for (;; auto90BBEDA4_u -= 1) {
        auto90BBEDA4_var = UnitGroupUnitFromEnd(auto90BBEDA4_g, auto90BBEDA4_u);
        if (auto90BBEDA4_var == null) { break; }
        if ((libHots_gf_PingStoredForUnit(auto90BBEDA4_var, 1) != c_invalidPingId)) {
            PingDestroy(libHots_gf_PingStoredForUnit(auto90BBEDA4_var, 1));
        }

    }
    TriggerEnable(gt_CloakReminderQ, false);
    TriggerEnable(gt_ReigelBaseReminderQ, false);
    TriggerExecute(gt_MidQ, true, true);
    TriggerExecute(gt_Stage2Start, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage1Start_Init () {
    gt_Stage1Start = TriggerCreate("gt_Stage1Start_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage1 First Order
//--------------------------------------------------------------------------------------------------
bool gt_Stage1FirstOrder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_s1_Timer, 210.0, false, c_timeAI);
    libNCUI_gf_TimerWindowCreate(gv_s1_Timer, StringExternal("Param/Value/08FE18CB"), true, false);
    libNCUI_gf_SetTimerWindowDangerThreshold(30.0);
    gv_s1_TimerWindow = TimerWindowLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage1FirstOrder_Init () {
    gt_Stage1FirstOrder = TriggerCreate("gt_Stage1FirstOrder_Func");
    TriggerAddEventUnitOrder(gt_Stage1FirstOrder, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Crawler Spawner
//--------------------------------------------------------------------------------------------------
bool gt_SporeCrawlerSpawner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_activePhase == 1))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_06_ZERG) || (EventPlayer() == gv_pLAYER_07_ZERG)))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(16)) == true) && (UnitGroupCount(UnitGroup("SporeCrawlerUprooted", gv_pLAYER_07_ZERG, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) || ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(17)) == true) && (UnitGroupCount(UnitGroup("SporeCrawlerUprooted", gv_pLAYER_06_ZERG, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SporeCrawlerWarningQ, true, false);
    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(16)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SporeCrawlerUprooted", 0, gv_pLAYER_07_ZERG, PointFromId(405));
        gf_SporeCrawlerPingTracker(UnitLastCreated());
    }
    else if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(17)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SporeCrawlerUprooted", 0, gv_pLAYER_06_ZERG, PointFromId(406));
        gf_SporeCrawlerPingTracker(UnitLastCreated());
    }
    Wait(libLotv_gf_DifficultyValueInt2(40, 40, 20, 16), c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCrawlerSpawner_Init () {
    gt_SporeCrawlerSpawner = TriggerCreate("gt_SporeCrawlerSpawner_Func");
    TriggerEnable(gt_SporeCrawlerSpawner, false);
    TriggerAddEventUnitDied(gt_SporeCrawlerSpawner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatch Killed Q
//--------------------------------------------------------------------------------------------------
bool gt_HatchKilledQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE8DFBAF8_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE8DFBAF8_val = UnitGroupCount(gv_zergHatcheries, c_unitCountAlive);
    if (autoE8DFBAF8_val == 5) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00101", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00102", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoE8DFBAF8_val == 4) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00103", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoE8DFBAF8_val == 3) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00105", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoE8DFBAF8_val == 2) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00106", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoE8DFBAF8_val == 1) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00128", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatchKilledQ_Init () {
    gt_HatchKilledQ = TriggerCreate("gt_HatchKilledQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Crawler Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_SporeCrawlerWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00035", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCrawlerWarningQ_Init () {
    gt_SporeCrawlerWarningQ = TriggerCreate("gt_SporeCrawlerWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Out of Time Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_OutofTimeWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00083", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OutofTimeWarningQ_Init () {
    gt_OutofTimeWarningQ = TriggerCreate("gt_OutofTimeWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_NukeReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Alert_TerranNukeReady", 0), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    Wait(3.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    UnitMagazineArm(UnitFromId(2822), AbilityCommand("HeroArmNuke", 0), 1);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00037", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00038", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeReadyQ_Init () {
    gt_NukeReadyQ = TriggerCreate("gt_NukeReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Go Kill Stuff Q
//--------------------------------------------------------------------------------------------------
bool gt_GoKillStuffQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCBA64CD1_g;
    int autoCBA64CD1_u;
    unit autoCBA64CD1_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00039", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    PlayerCreateEffectPoint(gv_pLAYER_02_REIGEL, "ScannerSweep", PointFromId(381));
    Wait(1.0, c_timeGame);
    PlayerCreateEffectPoint(gv_pLAYER_02_REIGEL, "ScannerSweep", PointFromId(382));
    Wait(1.0, c_timeGame);
    autoCBA64CD1_g = gv_zergHatcheries;
    autoCBA64CD1_u = UnitGroupCount(autoCBA64CD1_g, c_unitCountAll);
    for (;; autoCBA64CD1_u -= 1) {
        autoCBA64CD1_var = UnitGroupUnitFromEnd(autoCBA64CD1_g, autoCBA64CD1_u);
        if (autoCBA64CD1_var == null) { break; }
        libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(autoCBA64CD1_var), StringExternal("Param/Value/B70020E2"));
        libHots_gf_StorePingForUnit(autoCBA64CD1_var, 1, PingLastCreated());
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00040", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoKillStuffQ_Init () {
    gt_GoKillStuffQ = TriggerCreate("gt_GoKillStuffQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloak Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_CloakReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_introBanshees, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter((1 << c_targetFilterCloaked), 0, 0, 0)) == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 100.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00129", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloakReminderQ_Init () {
    gt_CloakReminderQ = TriggerCreate("gt_CloakReminderQ_Func");
    TriggerAddEventUnitDamaged(gt_CloakReminderQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reigel Base Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ReigelBaseReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00130", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReigelBaseReminderQ_Init () {
    gt_ReigelBaseReminderQ = TriggerCreate("gt_ReigelBaseReminderQ_Func");
    TriggerAddEventUnitRegion(gt_ReigelBaseReminderQ, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reigel SCV Stopper
//--------------------------------------------------------------------------------------------------
bool gt_ReigelSCVStopper_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCargo()) == gv_pLAYER_02_REIGEL))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitScriptControlled(EventUnitCargo(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReigelSCVStopper_Init () {
    gt_ReigelSCVStopper = TriggerCreate("gt_ReigelSCVStopper_Func");
    TriggerAddEventUnitCargo(gt_ReigelSCVStopper, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reigel Supply Depot Builder
//--------------------------------------------------------------------------------------------------
bool gt_ReigelSupplyDepotBuilder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCargo()) == gv_pLAYER_02_REIGEL))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeAI);
    while ((UnitGroupCount(UnitGroup("SupplyDepot", gv_pLAYER_02_REIGEL, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0)) {
        libNtve_gf_AICast(UnitGroupUnit(UnitGroupIdle(gv_pLAYER_02_REIGEL, true), 1), OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), RegionGetCenter(RegionFromId(37))));
        Wait(10.0, c_timeAI);
    }
    Wait(15.0, c_timeAI);
    while ((UnitGroupCount(UnitGroup("SupplyDepot", gv_pLAYER_02_REIGEL, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0)) {
        libNtve_gf_AICast(UnitGroupUnit(UnitGroupIdle(gv_pLAYER_02_REIGEL, true), 1), OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), RegionGetCenter(RegionFromId(38))));
        Wait(10.0, c_timeAI);
    }
    Wait(15.0, c_timeAI);
    while ((UnitGroupCount(UnitGroup("SupplyDepot", gv_pLAYER_02_REIGEL, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0)) {
        libNtve_gf_AICast(UnitGroupUnit(UnitGroupIdle(gv_pLAYER_02_REIGEL, true), 1), OrderTargetingPoint(AbilityCommand("TerranBuildDrop", 0), RegionGetCenter(RegionFromId(39))));
        Wait(10.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReigelSupplyDepotBuilder_Init () {
    gt_ReigelSupplyDepotBuilder = TriggerCreate("gt_ReigelSupplyDepotBuilder_Func");
    TriggerAddEventUnitCargo(gt_ReigelSupplyDepotBuilder, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reigel Nuke Armer
//--------------------------------------------------------------------------------------------------
bool gt_ReigelNukeArmer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_REIGEL))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "GhostAcademy"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitAbilityEnable(EventUnitProgressUnit(), "HeroArmNuke", false);
    TriggerExecute(gt_NukeReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReigelNukeArmer_Init () {
    gt_ReigelNukeArmer = TriggerCreate("gt_ReigelNukeArmer_Func");
    TriggerAddEventUnitConstructProgress(gt_ReigelNukeArmer, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reigel Base Setup Timing
//--------------------------------------------------------------------------------------------------
bool gt_ReigelBaseSetupTiming_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_REIGEL, RegionFromId(3), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_REIGEL, RegionFromId(40), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_REIGEL, RegionFromId(35), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_REIGEL, RegionFromId(34), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_REIGEL, RegionFromId(37), true);
    Wait(60.0, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_REIGEL, RegionFromId(1), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReigelBaseSetupTiming_Init () {
    gt_ReigelBaseSetupTiming = TriggerCreate("gt_ReigelBaseSetupTiming_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reigel Untargetable
//--------------------------------------------------------------------------------------------------
bool gt_ReigelUntargetable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_pLAYER_02_REIGEL))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnitCreatedUnit(), c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReigelUntargetable_Init () {
    gt_ReigelUntargetable = TriggerCreate("gt_ReigelUntargetable_Func");
    TriggerAddEventUnitCreated(gt_ReigelUntargetable, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage 2 Start
//--------------------------------------------------------------------------------------------------
bool gt_Stage2Start_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto53EF84F2_g;
    int auto53EF84F2_u;
    unit auto53EF84F2_var;
    unitgroup autoC1A9B210_g;
    int autoC1A9B210_u;
    unit autoC1A9B210_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_activePhase = 2;
    gv_defenseModeDuration = libLotv_gf_DifficultyValueFixed2(240.0, 240.0, 210.0, 180.0);
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerEnable(gt_DefeatNovaDead, false);
    TriggerEnable(gt_ZergLarvaSpawnerNorth, true);
    TriggerEnable(gt_ZergLarvaSpawnerSouth, true);
    TriggerExecute(gt_ZergAttackWaves, true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(41), 0.0, false);
    libNCMI_gf_EnableDisableHeroReviveSystem(true, gv_pLAYER_01_USER);
    libNCMI_gf_AddMissionTipCampaign("Death Fleet");
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/792ACB64"), null, PointFromId(410));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    auto53EF84F2_g = gv_stage1PausedObservers;
    auto53EF84F2_u = UnitGroupCount(auto53EF84F2_g, c_unitCountAll);
    for (;; auto53EF84F2_u -= 1) {
        auto53EF84F2_var = UnitGroupUnitFromEnd(auto53EF84F2_g, auto53EF84F2_u);
        if (auto53EF84F2_var == null) { break; }
        libNtve_gf_PauseUnit(auto53EF84F2_var, false);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "QueenBurrowed", 0, gv_pLAYER_06_ZERG, PointFromId(5142));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "QueenBurrowed", 0, gv_pLAYER_07_ZERG, PointFromId(5143));
    libNCMI_gf_StartingWorkersAutoHarvest(RegionFromId(3), null);
    libNCMI_gf_SetWorkerRallyPoint(UnitGroupUnit(UnitGroup("CommandCenter", gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
    libNCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    Wait(3.0, c_timeAI);
    TriggerExecute(gt_ObjectiveDestroyShieldProjectorsCreate, true, false);
    TriggerExecute(gt_ObjectiveCivilianCenterMustSurviveCreate, true, false);
    TriggerExecute(gt_Stage2IntroQ, true, false);
    TriggerExecute(gt_AddProtossUnitsToGlossary, true, false);
    TimerStart(gv_defenseModeTimer, gv_defenseModeDuration, false, c_timeAI);
    libCMUI_gf_DisplayProgressBar(StringExternal("Param/Value/AA832D8E"), 0, FixedToInt(TimerGetDuration(gv_defenseModeTimer)));
    libCMUI_gf_SetProgressBarLabel(StringExternal("Param/Value/5D5D72D7"));
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/ProgressFrameTemplate/BarImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_lotv_bossbarframe_fill.dds", PlayerGroupAll());
    libCMUI_gf_SetProgressBarColor(Color(2.35, 67.45, 46.27));
    autoC1A9B210_g = gv_shieldProjectors;
    autoC1A9B210_u = UnitGroupCount(autoC1A9B210_g, c_unitCountAll);
    for (;; autoC1A9B210_u -= 1) {
        autoC1A9B210_var = UnitGroupUnitFromEnd(autoC1A9B210_g, autoC1A9B210_u);
        if (autoC1A9B210_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoC1A9B210_var, "Signal WorkStart");
    }
    TriggerExecute(gt_ZergExpandAcrossMap, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage2Start_Init () {
    gt_Stage2Start = TriggerCreate("gt_Stage2Start_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage 2 Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_Stage2IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00053", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00054", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if (((UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) >= 6) && (UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) <= 6))) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00115", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (((UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) >= 4) && (UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) <= 5))) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00086", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (((UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) >= 3) && (UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) <= 3))) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00124", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (((UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) >= 0) && (UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) <= 2))) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00087", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_ZergBonusObjEarlyKillQ, true, false);
    }
    else {
        TriggerExecute(gt_ZergBonusObjRevealQ, true, false);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage2IntroQ_Init () {
    gt_Stage2IntroQ = TriggerCreate("gt_Stage2IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weather Change
//--------------------------------------------------------------------------------------------------
bool gt_WeatherChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto941AB97A_ae = 10;
    int auto941AB97A_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameSetLighting("ElsecaroShower", 60.0);
    auto941AB97A_var = 1;
    for ( ; auto941AB97A_var <= auto941AB97A_ae; auto941AB97A_var += 1 ) {
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionRect(0.0, 0.0, (auto941AB97A_var * 20.0), 184.0), "RainSprinkle");
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeatherChange_Init () {
    gt_WeatherChange = TriggerCreate("gt_WeatherChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Larva Spawner North
//--------------------------------------------------------------------------------------------------
bool gt_ZergLarvaSpawnerNorth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("Larva", gv_pLAYER_07_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_07_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Lair", gv_pLAYER_07_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Egg", gv_pLAYER_07_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 5))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Larva", 0, gv_pLAYER_07_ZERG, PointFromId(405));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergLarvaSpawnerNorth_Init () {
    gt_ZergLarvaSpawnerNorth = TriggerCreate("gt_ZergLarvaSpawnerNorth_Func");
    TriggerEnable(gt_ZergLarvaSpawnerNorth, false);
    TriggerAddEventTimePeriodic(gt_ZergLarvaSpawnerNorth, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Larva Spawner South
//--------------------------------------------------------------------------------------------------
bool gt_ZergLarvaSpawnerSouth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("Larva", gv_pLAYER_06_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_06_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Lair", gv_pLAYER_06_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Egg", gv_pLAYER_06_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 5))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Larva", 0, gv_pLAYER_06_ZERG, PointFromId(406));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergLarvaSpawnerSouth_Init () {
    gt_ZergLarvaSpawnerSouth = TriggerCreate("gt_ZergLarvaSpawnerSouth_Func");
    TriggerEnable(gt_ZergLarvaSpawnerSouth, false);
    TriggerAddEventTimePeriodic(gt_ZergLarvaSpawnerSouth, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Expand Across Map
//--------------------------------------------------------------------------------------------------
bool gt_ZergExpandAcrossMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(libNtve_gf_DifficultyValueFixed(240.0, 240.0, 180.0, 180.0), c_timeAI);
    gf_ZergExpansion(RegionFromId(9));
    Wait(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 120.0, 120.0), c_timeAI);
    gf_ZergExpansion(RegionFromId(10));
    Wait(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 120.0, 120.0), c_timeAI);
    gf_ZergExpansion(RegionFromId(11));
    Wait(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 120.0, 120.0), c_timeAI);
    gf_ZergExpansion(RegionFromId(13));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergExpandAcrossMap_Init () {
    gt_ZergExpandAcrossMap = TriggerCreate("gt_ZergExpandAcrossMap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Takeover
//--------------------------------------------------------------------------------------------------
bool gt_ZergTakeover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(180.0, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_06_ZERG, RegionFromId(12), true);
    AIToggleBulliesInRegion(gv_pLAYER_07_ZERG, RegionFromId(12), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergTakeover_Init () {
    gt_ZergTakeover = TriggerCreate("gt_ZergTakeover_Func");
    TriggerAddEventUnitDied(gt_ZergTakeover, UnitRefFromUnit(UnitFromId(2825)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Bonus Obj Early Kill Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergBonusObjEarlyKillQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hatchAlive;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00113", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_ObjectiveDestroyRemainingZergHatcheriesComplete, true, false);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00114", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBonusObjEarlyKillQ_Init () {
    gt_ZergBonusObjEarlyKillQ = TriggerCreate("gt_ZergBonusObjEarlyKillQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Bonus Obj Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergBonusObjRevealQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6809D27C_g;
    int auto6809D27C_u;
    unit auto6809D27C_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00078", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) == 1)) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00116", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if ((UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) == 6)) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00131", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (true) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00127", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    Wait(3.0, c_timeAI);
    TriggerExecute(gt_ObjectiveDestroyRemainingZergHatcheriesCreate, true, false);
    TriggerExecute(gt_ObjectiveDestroyRemainingZergHatcheriesUpdate, true, false);
    auto6809D27C_g = gv_zergHatcheries;
    auto6809D27C_u = UnitGroupCount(auto6809D27C_g, c_unitCountAll);
    for (;; auto6809D27C_u -= 1) {
        auto6809D27C_var = UnitGroupUnitFromEnd(auto6809D27C_g, auto6809D27C_u);
        if (auto6809D27C_var == null) { break; }
        libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(auto6809D27C_var), StringExternal("Param/Value/CCD25EF0"));
        libHots_gf_StorePingForUnit(auto6809D27C_var, 1, PingLastCreated());
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5899B4DE"), null, UnitGetPosition(UnitGroupClosestToPoint(gv_zergHatcheries, PointFromId(410))));
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00079", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBonusObjRevealQ_Init () {
    gt_ZergBonusObjRevealQ = TriggerCreate("gt_ZergBonusObjRevealQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Bonus Obj Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergBonusObjCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00081", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00082", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBonusObjCompleteQ_Init () {
    gt_ZergBonusObjCompleteQ = TriggerCreate("gt_ZergBonusObjCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Hatchery Killed
//--------------------------------------------------------------------------------------------------
bool gt_ZergHatcheryKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringHiveCluster;

    // Automatic Variable Declarations
    unitgroup auto1E5D7E36_g;
    int auto1E5D7E36_u;
    unit auto1E5D7E36_var;
    unitgroup auto0748B04F_g;
    int auto0748B04F_u;
    unit auto0748B04F_var;
    unitgroup autoA6DD5DCE_g;
    int autoA6DD5DCE_u;
    unit autoA6DD5DCE_var;
    unitgroup auto40C6E144_g;
    int auto40C6E144_u;
    unit auto40C6E144_var;
    int auto04F170DC_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_zergHatcheries, EventUnit()) == true))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_06_ZERG) || (EventPlayer() == gv_pLAYER_07_ZERG)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libHots_gf_PingStoredForUnit(EventUnit(), 1) != c_invalidPingId)) {
        PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    }

    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        auto1E5D7E36_g = UnitGroup("Larva", gv_pLAYER_06_ZERG, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1E5D7E36_u = UnitGroupCount(auto1E5D7E36_g, c_unitCountAll);
        for (;; auto1E5D7E36_u -= 1) {
            auto1E5D7E36_var = UnitGroupUnitFromEnd(auto1E5D7E36_g, auto1E5D7E36_u);
            if (auto1E5D7E36_var == null) { break; }
            UnitKill(auto1E5D7E36_var);
        }
        auto0748B04F_g = UnitGroup("Egg", gv_pLAYER_06_ZERG, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0748B04F_u = UnitGroupCount(auto0748B04F_g, c_unitCountAll);
        for (;; auto0748B04F_u -= 1) {
            auto0748B04F_var = UnitGroupUnitFromEnd(auto0748B04F_g, auto0748B04F_u);
            if (auto0748B04F_var == null) { break; }
            UnitKill(auto0748B04F_var);
        }
        autoA6DD5DCE_g = UnitGroup("Larva", gv_pLAYER_07_ZERG, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA6DD5DCE_u = UnitGroupCount(autoA6DD5DCE_g, c_unitCountAll);
        for (;; autoA6DD5DCE_u -= 1) {
            autoA6DD5DCE_var = UnitGroupUnitFromEnd(autoA6DD5DCE_g, autoA6DD5DCE_u);
            if (autoA6DD5DCE_var == null) { break; }
            UnitKill(autoA6DD5DCE_var);
        }
        auto40C6E144_g = UnitGroup("Egg", gv_pLAYER_07_ZERG, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto40C6E144_u = UnitGroupCount(auto40C6E144_g, c_unitCountAll);
        for (;; auto40C6E144_u -= 1) {
            auto40C6E144_var = UnitGroupUnitFromEnd(auto40C6E144_g, auto40C6E144_u);
            if (auto40C6E144_var == null) { break; }
            UnitKill(auto40C6E144_var);
        }
    }

    auto04F170DC_val = gv_activePhase;
    if (auto04F170DC_val == 1) {
        TriggerExecute(gt_HatchKilledQ, true, false);
        if ((UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) == 0)) {
            TriggerExecute(gt_ObjectiveDestroyZergHatcheriesComplete, true, false);
            TriggerEnable(gt_ZergBonusObjRevealQ, false);
            libNtve_gf_StopTimer(gv_s1_Timer);
        }

    }
    else if (auto04F170DC_val == 2) {
        if ((UnitGroupCount(gv_zergHatcheries, c_unitCountAlive) == 0)) {
            TriggerExecute(gt_ObjectiveDestroyRemainingZergHatcheriesUpdate, true, false);
            TriggerExecute(gt_ObjectiveDestroyRemainingZergHatcheriesComplete, true, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupNovaZergDNA", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
            Wait(4.0, c_timeAI);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("PickupNovaZergDNA", 0), UnitLastCreated()), c_orderQueueReplace);
            Wait(2.0, c_timeAI);
            TriggerExecute(gt_ZergBonusObjCompleteQ, true, false);
        }
        else {
            TriggerExecute(gt_ObjectiveDestroyRemainingZergHatcheriesUpdate, true, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupNovaZergDNA", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
            Wait(4.0, c_timeAI);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("PickupNovaZergDNA", 0), UnitLastCreated()), c_orderQueueReplace);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergHatcheryKilled_Init () {
    gt_ZergHatcheryKilled = TriggerCreate("gt_ZergHatcheryKilled_Func");
    TriggerAddEventUnitDied(gt_ZergHatcheryKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_northHatcheryGroup;
    unitgroup lv_southHatcheryGroup;

    // Automatic Variable Declarations
    int auto271F5924_val;
    int autoAC34AFD2_val;
    int auto0E9DCC53_val;
    int auto1CCE1C60_val;
    int auto3358176C_val;
    int autoB232677C_val;
    int autoE6775829_val;
    int auto8923D8E3_val;

    // Variable Initialization
    lv_northHatcheryGroup = UnitGroupEmpty();
    lv_southHatcheryGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_northHatcheryGroup, UnitFromId(40));
    UnitGroupAdd(lv_northHatcheryGroup, UnitFromId(43));
    UnitGroupAdd(lv_northHatcheryGroup, UnitFromId(3));
    UnitGroupAdd(lv_southHatcheryGroup, UnitFromId(96));
    UnitGroupAdd(lv_southHatcheryGroup, UnitFromId(98));
    UnitGroupAdd(lv_southHatcheryGroup, UnitFromId(99));
    AIAttackWaveSetGatherPoint(gv_pLAYER_07_ZERG, PointFromId(293));
    AIAttackWaveSetTargetPoint(gv_pLAYER_07_ZERG, PointFromId(410));
    gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(3, 3, 5, 7), PointFromId(405));
    auto271F5924_val = UnitGroupCount(gv_zergHatcheries, c_unitCountAlive);
    if (auto271F5924_val == 1) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(2, 2, 4, 6), PointFromId(405));
    }
    else if (auto271F5924_val == 2) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(2, 2, 4, 6), PointFromId(405));
    }
    else if (auto271F5924_val == 3) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(2, 2, 4, 6), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
    }
    else if (auto271F5924_val == 4) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(2, 2, 4, 6), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
    }
    else if (auto271F5924_val == 5) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(2, 2, 4, 6), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Roach", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
    }
    else if (auto271F5924_val == 6) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(2, 2, 4, 6), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Roach", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
    }
    else {
    }
    AIAttackWaveSend(gv_pLAYER_07_ZERG, 45, false);
    Wait((4.0 * 60.0), c_timeAI);
    AIAttackWaveSetGatherPoint(gv_pLAYER_06_ZERG, PointFromId(293));
    AIAttackWaveSetTargetPoint(gv_pLAYER_06_ZERG, PointFromId(410));
    gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(6, 6, 6, 8), PointFromId(406));
    gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), PointFromId(406));
    autoAC34AFD2_val = UnitGroupCount(lv_southHatcheryGroup, c_unitCountAlive);
    if (autoAC34AFD2_val == 1) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(3, 3, 6, 9), PointFromId(406));
    }
    else if (autoAC34AFD2_val == 2) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(3, 3, 6, 9), PointFromId(406));
        gf_AddZergUnitsToAttackWave("Roach", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), PointFromId(406));
        gf_AddZergUnitsToAttackWave("Ravager", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), PointFromId(406));
    }
    else if (autoAC34AFD2_val == 3) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(3, 3, 6, 9), PointFromId(406));
        gf_AddZergUnitsToAttackWave("Roach", libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), PointFromId(406));
        gf_AddZergUnitsToAttackWave("Ravager", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), PointFromId(406));
    }
    else {
    }
    AIAttackWaveSend(gv_pLAYER_06_ZERG, 45, false);
    Wait((4.0 * 60.0), c_timeAI);
    AIAttackWaveSetGatherPoint(gv_pLAYER_07_ZERG, PointFromId(293));
    AIAttackWaveSetTargetPoint(gv_pLAYER_07_ZERG, PointFromId(410));
    gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), PointFromId(405));
    gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), PointFromId(405));
    auto0E9DCC53_val = UnitGroupCount(lv_southHatcheryGroup, c_unitCountAlive);
    if (auto0E9DCC53_val == 1) {
        gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
    }
    else if (auto0E9DCC53_val == 2) {
        gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(2, 2, 4, 6), PointFromId(405));
    }
    else if (auto0E9DCC53_val == 3) {
        gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(2, 2, 4, 6), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Infestor", libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), PointFromId(405));
    }
    else {
    }
    AIAttackWaveSend(gv_pLAYER_07_ZERG, 45, false);
    Wait((4.0 * 60.0), c_timeAI);
    AIAttackWaveSetGatherPoint(gv_pLAYER_06_ZERG, PointFromId(293));
    AIAttackWaveSetTargetPoint(gv_pLAYER_06_ZERG, PointFromId(410));
    gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), PointFromId(406));
    auto1CCE1C60_val = UnitGroupCount(lv_southHatcheryGroup, c_unitCountAlive);
    if (auto1CCE1C60_val == 1) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), PointFromId(406));
    }
    else if (auto1CCE1C60_val == 2) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), PointFromId(406));
        gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(406));
    }
    else if (auto1CCE1C60_val == 3) {
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), PointFromId(406));
        gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(406));
        gf_AddZergUnitsToAttackWave("Ravager", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(406));
    }
    else {
    }
    AIAttackWaveSend(gv_pLAYER_06_ZERG, 45, false);
    Wait((4.0 * 60.0), c_timeAI);
    AIAttackWaveSetGatherPoint(gv_pLAYER_07_ZERG, PointFromId(293));
    AIAttackWaveSetTargetPoint(gv_pLAYER_07_ZERG, PointFromId(410));
    gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(8, 8, 10, 12), PointFromId(405));
    gf_AddZergUnitsToAttackWave("Baneling", libLotv_gf_DifficultyValueInt2(0, 0, 2, 3), PointFromId(405));
    auto3358176C_val = UnitGroupCount(lv_southHatcheryGroup, c_unitCountAlive);
    if (auto3358176C_val == 1) {
        gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), PointFromId(405));
    }
    else if (auto3358176C_val == 2) {
        gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), PointFromId(405));
    }
    else if (auto3358176C_val == 3) {
        gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Infestor", libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), PointFromId(405));
    }
    else {
    }
    AIAttackWaveSend(gv_pLAYER_07_ZERG, 45, false);
    Wait((4.0 * 60.0), c_timeAI);
    AIAttackWaveSetGatherPoint(gv_pLAYER_06_ZERG, PointFromId(293));
    AIAttackWaveSetTargetPoint(gv_pLAYER_06_ZERG, PointFromId(410));
    gf_AddZergUnitsToAttackWave("Roach", libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), PointFromId(406));
    autoB232677C_val = UnitGroupCount(lv_southHatcheryGroup, c_unitCountAlive);
    if (autoB232677C_val == 1) {
        gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), PointFromId(406));
    }
    else if (autoB232677C_val == 2) {
        gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), PointFromId(406));
    }
    else if (autoB232677C_val == 3) {
        gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), PointFromId(406));
        gf_AddZergUnitsToAttackWave("Guardian", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), PointFromId(406));
    }
    else {
    }
    AIAttackWaveSend(gv_pLAYER_06_ZERG, 45, false);
    while ((libNCMI_gf_GameIsOver() == false)) {
        Wait((4.0 * 60.0), c_timeAI);
        AIAttackWaveSetGatherPoint(gv_pLAYER_07_ZERG, PointFromId(293));
        AIAttackWaveSetTargetPoint(gv_pLAYER_07_ZERG, PointFromId(410));
        gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), PointFromId(405));
        gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), PointFromId(405));
        autoE6775829_val = UnitGroupCount(lv_southHatcheryGroup, c_unitCountAlive);
        if (autoE6775829_val == 1) {
            gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), PointFromId(405));
        }
        else if (autoE6775829_val == 2) {
            gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), PointFromId(405));
            gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
        }
        else if (autoE6775829_val == 3) {
            gf_AddZergUnitsToAttackWave("Zergling", libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), PointFromId(405));
            gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(405));
            gf_AddZergUnitsToAttackWave("Ultralisk", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), PointFromId(405));
        }
        else {
        }
        AIAttackWaveSend(gv_pLAYER_07_ZERG, 45, false);
        Wait((4.0 * 60.0), c_timeAI);
        AIAttackWaveSetGatherPoint(gv_pLAYER_06_ZERG, PointFromId(293));
        AIAttackWaveSetTargetPoint(gv_pLAYER_06_ZERG, PointFromId(410));
        gf_AddZergUnitsToAttackWave("Mutalisk", libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), PointFromId(406));
        auto8923D8E3_val = UnitGroupCount(lv_southHatcheryGroup, c_unitCountAlive);
        if (auto8923D8E3_val == 1) {
            gf_AddZergUnitsToAttackWave("Guardian", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(406));
        }
        else if (auto8923D8E3_val == 2) {
            gf_AddZergUnitsToAttackWave("Guardian", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(406));
            gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), PointFromId(406));
        }
        else if (auto8923D8E3_val == 3) {
            gf_AddZergUnitsToAttackWave("Guardian", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), PointFromId(406));
            gf_AddZergUnitsToAttackWave("Hydralisk", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), PointFromId(406));
            gf_AddZergUnitsToAttackWave("Ravager", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), PointFromId(406));
        }
        else {
        }
        AIAttackWaveSend(gv_pLAYER_06_ZERG, 45, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWaves_Init () {
    gt_ZergAttackWaves = TriggerCreate("gt_ZergAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zzOLD - Zerg Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_zzOLDZergAttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_waveDelay;
    fixed lv_growthRate;
    int lv_waveCount;
    fixed[10] lv_northSpawnWaveData;
    fixed[10] lv_cluster1WaveData;
    fixed[10] lv_cluster2WaveData;
    fixed[10] lv_cluster3WaveData;
    fixed[10] lv_southSpawnWaveData;
    fixed[10] lv_cluster4WaveData;
    fixed[10] lv_cluster5WaveData;
    fixed[10] lv_cluster6WaveData;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveDelay = libLotv_gf_DifficultyValueFixed2(300.0, 300.0, 240.0, 180.0);
    lv_growthRate = 1.25;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_northSpawnWaveData[ge_ZergWaveUnitTypes_Zergling] = libLotv_gf_DifficultyValueFixed2(2.5, 2.5, 3.0, 3.5);
    lv_northSpawnWaveData[ge_ZergWaveUnitTypes_Roach] = libLotv_gf_DifficultyValueFixed2(0.75, 0.75, 1.0, 1.25);
    lv_northSpawnWaveData[ge_ZergWaveUnitTypes_Hydralisk] = libLotv_gf_DifficultyValueFixed2(0.5, 0.5, 0.75, 1.0);
    lv_cluster1WaveData[ge_ZergWaveUnitTypes_Baneling] = libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 1.25, 1.5);
    lv_cluster1WaveData[ge_ZergWaveUnitTypes_Zergling] = libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.5, 3.0);
    lv_cluster1WaveData[ge_ZergWaveUnitTypes_Roach] = libLotv_gf_DifficultyValueFixed2(0.5, 0.5, 0.75, 1.0);
    lv_cluster2WaveData[ge_ZergWaveUnitTypes_Mutalisk] = libLotv_gf_DifficultyValueFixed2(1.5, 1.5, 2.0, 2.5);
    lv_cluster2WaveData[ge_ZergWaveUnitTypes_Zergling] = libLotv_gf_DifficultyValueFixed2(1.5, 1.5, 2.0, 2.5);
    lv_cluster3WaveData[ge_ZergWaveUnitTypes_BroodLord] = libLotv_gf_DifficultyValueFixed2(0.34, 0.34, 0.67, 1.0);
    lv_cluster3WaveData[ge_ZergWaveUnitTypes_Zergling] = libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.5, 3.0);
    lv_cluster3WaveData[ge_ZergWaveUnitTypes_Roach] = libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 1.5, 2.0);
    lv_southSpawnWaveData[ge_ZergWaveUnitTypes_Zergling] = libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 1.5, 2.0);
    lv_southSpawnWaveData[ge_ZergWaveUnitTypes_Roach] = libLotv_gf_DifficultyValueFixed2(0.75, 0.75, 1.0, 1.25);
    lv_southSpawnWaveData[ge_ZergWaveUnitTypes_Hydralisk] = libLotv_gf_DifficultyValueFixed2(1.5, 1.5, 2.0, 2.5);
    lv_cluster4WaveData[ge_ZergWaveUnitTypes_Infestor] = libLotv_gf_DifficultyValueFixed2(0.75, 0.75, 1.0, 1.25);
    lv_cluster4WaveData[ge_ZergWaveUnitTypes_Zergling] = libLotv_gf_DifficultyValueFixed2(2.5, 2.5, 3.0, 3.5);
    lv_cluster4WaveData[ge_ZergWaveUnitTypes_Hydralisk] = libLotv_gf_DifficultyValueFixed2(1.0, 1.0, 1.5, 2.0);
    lv_cluster5WaveData[ge_ZergWaveUnitTypes_Ravager] = libLotv_gf_DifficultyValueFixed2(0.75, 0.75, 1.0, 1.25);
    lv_cluster5WaveData[ge_ZergWaveUnitTypes_Roach] = libLotv_gf_DifficultyValueFixed2(1.5, 1.5, 2.0, 2.5);
    lv_cluster6WaveData[ge_ZergWaveUnitTypes_Ultralisk] = libLotv_gf_DifficultyValueFixed2(0.34, 0.34, 0.67, 1.0);
    lv_cluster6WaveData[ge_ZergWaveUnitTypes_Zergling] = libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.5, 3.0);
    Wait(45.0, c_timeAI);
    while (true) {
        if ((lv_waveCount < 4)) {
            lv_waveCount += 1;
        }

        gf_zzOLDSendZergAttackWave(FixedToInt((lv_northSpawnWaveData[1] * lv_waveCount)), FixedToInt((lv_northSpawnWaveData[2] * lv_waveCount)), FixedToInt((lv_northSpawnWaveData[3] * lv_waveCount)), FixedToInt((lv_northSpawnWaveData[4] * lv_waveCount)), FixedToInt((lv_northSpawnWaveData[5] * lv_waveCount)), FixedToInt((lv_northSpawnWaveData[6] * lv_waveCount)), FixedToInt((lv_northSpawnWaveData[7] * lv_waveCount)), FixedToInt((lv_northSpawnWaveData[8] * lv_waveCount)), FixedToInt((lv_northSpawnWaveData[9] * lv_waveCount)), PointFromId(405));
        if ((UnitIsAlive(UnitFromId(99)) == true)) {
            gf_zzOLDSendZergAttackWave(FixedToInt((lv_cluster1WaveData[1] * lv_waveCount)), FixedToInt((lv_cluster1WaveData[2] * lv_waveCount)), FixedToInt((lv_cluster1WaveData[3] * lv_waveCount)), FixedToInt((lv_cluster1WaveData[4] * lv_waveCount)), FixedToInt((lv_cluster1WaveData[5] * lv_waveCount)), FixedToInt((lv_cluster1WaveData[6] * lv_waveCount)), FixedToInt((lv_cluster1WaveData[7] * lv_waveCount)), FixedToInt((lv_cluster1WaveData[8] * lv_waveCount)), FixedToInt((lv_cluster1WaveData[9] * lv_waveCount)), PointWithOffset(UnitGetPosition(UnitFromId(99)), 0.0, -2.0));
        }

        if ((UnitIsAlive(UnitFromId(40)) == true)) {
            gf_zzOLDSendZergAttackWave(FixedToInt((lv_cluster2WaveData[1] * lv_waveCount)), FixedToInt((lv_cluster2WaveData[2] * lv_waveCount)), FixedToInt((lv_cluster2WaveData[3] * lv_waveCount)), FixedToInt((lv_cluster2WaveData[4] * lv_waveCount)), FixedToInt((lv_cluster2WaveData[5] * lv_waveCount)), FixedToInt((lv_cluster2WaveData[6] * lv_waveCount)), FixedToInt((lv_cluster2WaveData[7] * lv_waveCount)), FixedToInt((lv_cluster2WaveData[8] * lv_waveCount)), FixedToInt((lv_cluster2WaveData[9] * lv_waveCount)), PointWithOffset(UnitGetPosition(UnitFromId(40)), 0.0, -2.0));
        }

        if ((UnitIsAlive(UnitFromId(98)) == true)) {
            gf_zzOLDSendZergAttackWave(FixedToInt((lv_cluster3WaveData[1] * lv_waveCount)), FixedToInt((lv_cluster3WaveData[2] * lv_waveCount)), FixedToInt((lv_cluster3WaveData[3] * lv_waveCount)), FixedToInt((lv_cluster3WaveData[4] * lv_waveCount)), FixedToInt((lv_cluster3WaveData[5] * lv_waveCount)), FixedToInt((lv_cluster3WaveData[6] * lv_waveCount)), FixedToInt((lv_cluster3WaveData[7] * lv_waveCount)), FixedToInt((lv_cluster3WaveData[8] * lv_waveCount)), FixedToInt((lv_cluster3WaveData[9] * lv_waveCount)), PointWithOffset(UnitGetPosition(UnitFromId(98)), 0.0, -2.0));
        }

        Wait(lv_waveDelay, c_timeAI);
        gf_zzOLDSendZergAttackWave(FixedToInt((lv_southSpawnWaveData[1] * lv_waveCount)), FixedToInt((lv_southSpawnWaveData[2] * lv_waveCount)), FixedToInt((lv_southSpawnWaveData[3] * lv_waveCount)), FixedToInt((lv_southSpawnWaveData[4] * lv_waveCount)), FixedToInt((lv_southSpawnWaveData[5] * lv_waveCount)), FixedToInt((lv_southSpawnWaveData[6] * lv_waveCount)), FixedToInt((lv_southSpawnWaveData[7] * lv_waveCount)), FixedToInt((lv_southSpawnWaveData[8] * lv_waveCount)), FixedToInt((lv_southSpawnWaveData[9] * lv_waveCount)), PointFromId(406));
        if ((UnitIsAlive(UnitFromId(3)) == true)) {
            gf_zzOLDSendZergAttackWave(FixedToInt((lv_cluster4WaveData[1] * lv_waveCount)), FixedToInt((lv_cluster4WaveData[2] * lv_waveCount)), FixedToInt((lv_cluster4WaveData[3] * lv_waveCount)), FixedToInt((lv_cluster4WaveData[4] * lv_waveCount)), FixedToInt((lv_cluster4WaveData[5] * lv_waveCount)), FixedToInt((lv_cluster4WaveData[6] * lv_waveCount)), FixedToInt((lv_cluster4WaveData[7] * lv_waveCount)), FixedToInt((lv_cluster4WaveData[8] * lv_waveCount)), FixedToInt((lv_cluster4WaveData[9] * lv_waveCount)), PointWithOffset(UnitGetPosition(UnitFromId(3)), 0.0, -2.0));
        }

        if ((UnitIsAlive(UnitFromId(96)) == true)) {
            gf_zzOLDSendZergAttackWave(FixedToInt((lv_cluster5WaveData[1] * lv_waveCount)), FixedToInt((lv_cluster5WaveData[2] * lv_waveCount)), FixedToInt((lv_cluster5WaveData[3] * lv_waveCount)), FixedToInt((lv_cluster5WaveData[4] * lv_waveCount)), FixedToInt((lv_cluster5WaveData[5] * lv_waveCount)), FixedToInt((lv_cluster5WaveData[6] * lv_waveCount)), FixedToInt((lv_cluster5WaveData[7] * lv_waveCount)), FixedToInt((lv_cluster5WaveData[8] * lv_waveCount)), FixedToInt((lv_cluster5WaveData[9] * lv_waveCount)), PointWithOffset(UnitGetPosition(UnitFromId(96)), 0.0, -2.0));
        }

        if ((UnitIsAlive(UnitFromId(43)) == true)) {
            gf_zzOLDSendZergAttackWave(FixedToInt((lv_cluster6WaveData[1] * lv_waveCount)), FixedToInt((lv_cluster6WaveData[2] * lv_waveCount)), FixedToInt((lv_cluster6WaveData[3] * lv_waveCount)), FixedToInt((lv_cluster6WaveData[4] * lv_waveCount)), FixedToInt((lv_cluster6WaveData[5] * lv_waveCount)), FixedToInt((lv_cluster6WaveData[6] * lv_waveCount)), FixedToInt((lv_cluster6WaveData[7] * lv_waveCount)), FixedToInt((lv_cluster6WaveData[8] * lv_waveCount)), FixedToInt((lv_cluster6WaveData[9] * lv_waveCount)), PointWithOffset(UnitGetPosition(UnitFromId(43)), 0.0, -2.0));
        }

        Wait(lv_waveDelay, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zzOLDZergAttackWaves_Init () {
    gt_zzOLDZergAttackWaves = TriggerCreate("gt_zzOLDZergAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Protoss Units To Glossary
//--------------------------------------------------------------------------------------------------
bool gt_AddProtossUnitsToGlossary_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_AddUnitTypeToUnitHelpPanel("Zealot", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Stalker", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Immortal", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Sentry", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Colossus", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Oracle", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Phoenix", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Scout", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Carrier", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddProtossUnitsToGlossary_Init () {
    gt_AddProtossUnitsToGlossary = TriggerCreate("gt_AddProtossUnitsToGlossary_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield Projector Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ShieldProjectorDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit autoA2CC282B_val;
    const int auto49060121_ae = 7;
    int auto49060121_var;
    unitgroup auto079A264B_g;
    int auto079A264B_u;
    unit auto079A264B_var;
    int auto8C7A5DE8_val;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_shieldProjectors, EventUnit()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyShieldProjectorsUpdate, true, false);
    autoA2CC282B_val = EventUnit();
    if (autoA2CC282B_val == UnitFromId(13)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_TALDARIM, RegionFromId(15), false);
    }
    else if (autoA2CC282B_val == UnitFromId(271)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_TALDARIM, RegionFromId(19), false);
    }
    else if (autoA2CC282B_val == UnitFromId(1)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_TALDARIM, RegionFromId(20), false);
    }
    else if (autoA2CC282B_val == UnitFromId(2825)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_TALDARIM, RegionFromId(21), false);
    }
    else {
    }
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    auto49060121_var = 1;
    for ( ; auto49060121_var <= auto49060121_ae; auto49060121_var += 1 ) {
        PingDestroy(gv_mothershipArrows[auto49060121_var]);
    }
    gv_attackMode = false;
    TriggerExecute(gt_StartDefenseModeQ, true, false);
    TriggerExecute(gt_WeatherChange, true, false);
    if ((UnitGroupCount(gv_shieldProjectors, c_unitCountAlive) == 0)) {
        gv_activeMothershipAttackRegion = RegionFromId(1);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_mothership), Color(100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), gv_mothership);
            gv_mothershipPing = PingLastCreated();
            UnitSetPosition(gv_mothership, PointFromId(5131), false);
            UnitIssueOrder(gv_mothership, Order(AbilityCommand("NovaMothershipWarpIn", 0)), c_orderQueueReplace);
            libNtve_gf_StopTimer(gv_defenseModeTimer);
        }
        else {
            UnitIssueOrder(gv_mothership, Order(AbilityCommand("NovaMothershipWarpOut", 0)), c_orderQueueReplace);
            while (!((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == true))) {
                Wait(0.5, c_timeAI);
            }
            UnitSetPosition(gv_mothership, PointFromId(5131), false);
            UnitIssueOrder(gv_mothership, Order(AbilityCommand("NovaMothershipWarpIn", 0)), c_orderQueueReplace);
        }
        libCMUI_gf_ShowHideProgressBar(false);
        UnitBehaviorRemove(gv_mothership, "NovaMothershipInvulnerabilityShield", 1);
        TriggerEnable(gt_MothershipWarningQ, false);
        CatalogReferenceSet("Effect,SOAMothershipv4BeamDamage,Amount", gv_pLAYER_05_TALDARIM, "9");
        gv_attackMode = true;
        TriggerExecute(gt_ObjectiveDestroyShieldProjectorsComplete, true, false);
        TriggerExecute(gt_ObjectiveDestroyTaldarimMothershipCreate, true, false);
        TriggerExecute(gt_MothershipReinforcements, true, false);
    }
    else {
        UnitIssueOrder(gv_mothership, Order(AbilityCommand("NovaMothershipWarpOut", 0)), c_orderQueueReplace);
        PingDestroy(gv_mothershipPing);
        TimerStart(gv_defenseModeTimer, gv_defenseModeDuration, false, c_timeAI);
        libCMUI_gf_SetProgressBarTitle(StringExternal("Param/Value/56837E28"));
        libCMUI_gf_SetProgressBarColor(Color(2.35, 67.45, 46.27));
        libCMUI_gf_SetProgressBarProgress(FixedToInt(TimerGetElapsed(gv_defenseModeTimer)));
        auto079A264B_g = gv_shieldProjectors;
        auto079A264B_u = UnitGroupCount(auto079A264B_g, c_unitCountAll);
        for (;; auto079A264B_u -= 1) {
            auto079A264B_var = UnitGroupUnitFromEnd(auto079A264B_g, auto079A264B_u);
            if (auto079A264B_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto079A264B_var, "Signal WorkStart");
        }
        TriggerEnable(gt_MothershipAlmostReadyQ, true);
    }
    libNCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    auto8C7A5DE8_val = UnitGroupCount(gv_shieldProjectors, c_unitCountAlive);
    if (auto8C7A5DE8_val == 3) {
        gv_retaliationWave_AllUnits = UnitGroupEmpty();
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            gf_SpawnRetaliationUnits(1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0);
        }
        else if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
            gf_SpawnRetaliationUnits(2, 2, 0, 0, 4, 0, 0, 0, 0, 1, 0);
        }
        else if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            gf_SpawnRetaliationUnits(0, 0, 0, 0, 4, 0, 2, 1, 0, 1, 0);
        }
        Wait(5.0, c_timeAI);
        gf_PingUnitGroup(gv_retaliationWave_AllUnits);
        Wait(15.0, c_timeAI);
        AIAttackWaveSetGatherPoint(gv_pLAYER_05_TALDARIM, UnitGetPosition(gv_mothership));
        AIAttackWaveSetTargetPoint(gv_pLAYER_05_TALDARIM, PointFromId(410));
        AIAttackWaveAddWaypoint(gv_pLAYER_05_TALDARIM, PointFromId(85), false);
        AIAttackWaveUseGroup(gv_pLAYER_05_TALDARIM, gv_retaliationWave_AllUnits);
        AIAttackWaveSend(gv_pLAYER_05_TALDARIM, 0, false);
        Wait(45.0, c_timeAI);
        TriggerExecute(gt_ProtossBonusObjRevealQ, true, false);
    }
    else if (auto8C7A5DE8_val == 2) {
        gv_retaliationWave_AllUnits = UnitGroupEmpty();
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            gf_SpawnRetaliationUnits(0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2);
        }
        else if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
            gf_SpawnRetaliationUnits(0, 0, 0, 0, 2, 0, 4, 0, 0, 1, 2);
        }
        else if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            gf_SpawnRetaliationUnits(0, 0, 0, 0, 2, 0, 4, 1, 0, 1, 2);
        }
        Wait(5.0, c_timeAI);
        gf_PingUnitGroup(gv_retaliationWave_AllUnits);
        Wait(15.0, c_timeAI);
        AIAttackWaveSetGatherPoint(gv_pLAYER_05_TALDARIM, UnitGetPosition(gv_mothership));
        AIAttackWaveSetTargetPoint(gv_pLAYER_05_TALDARIM, PointFromId(410));
        AIAttackWaveAddWaypoint(gv_pLAYER_05_TALDARIM, PointFromId(85), false);
        AIAttackWaveUseGroup(gv_pLAYER_05_TALDARIM, gv_retaliationWave_AllUnits);
        AIAttackWaveSend(gv_pLAYER_05_TALDARIM, 0, false);
    }
    else if (auto8C7A5DE8_val == 1) {
        gv_retaliationWave_AllUnits = UnitGroupEmpty();
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            gf_SpawnRetaliationUnits(0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 1);
        }
        else if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
            gf_SpawnRetaliationUnits(0, 0, 0, 0, 2, 0, 2, 0, 2, 1, 1);
        }
        else if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            gf_SpawnRetaliationUnits(0, 0, 0, 0, 2, 0, 4, 0, 2, 1, 1);
        }
        Wait(5.0, c_timeAI);
        gf_PingUnitGroup(gv_retaliationWave_AllUnits);
        Wait(15.0, c_timeAI);
        AIAttackWaveSetGatherPoint(gv_pLAYER_05_TALDARIM, UnitGetPosition(gv_mothership));
        AIAttackWaveSetTargetPoint(gv_pLAYER_05_TALDARIM, PointFromId(410));
        AIAttackWaveAddWaypoint(gv_pLAYER_05_TALDARIM, PointFromId(85), false);
        AIAttackWaveUseGroup(gv_pLAYER_05_TALDARIM, gv_retaliationWave_AllUnits);
        AIAttackWaveSend(gv_pLAYER_05_TALDARIM, 0, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldProjectorDestroyed_Init () {
    gt_ShieldProjectorDestroyed = TriggerCreate("gt_ShieldProjectorDestroyed_Func");
    TriggerAddEventUnitDied(gt_ShieldProjectorDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_MothershipReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randomishSpawnPoint;
    int lv_zealotCount;
    int lv_stalkerCount;
    int lv_immortalCount;

    // Automatic Variable Declarations
    int auto5C91E4F1_ae;
    int auto5C91E4F1_var;
    int auto06BE99DC_ae;
    int auto06BE99DC_var;
    int auto62721354_ae;
    int auto62721354_var;
    int autoF669412A_ae;
    int autoF669412A_var;
    int auto2A8A5644_ae;
    int auto2A8A5644_var;
    int autoDE7B174B_ae;
    int autoDE7B174B_var;

    // Variable Initialization
    lv_zealotCount = 2;
    lv_stalkerCount = 3;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitIsAlive(gv_mothership) == true) && ((UnitGetPropertyFixed(gv_mothership, c_unitPropLifePercent, c_unitPropCurrent) + UnitGetPropertyFixed(gv_mothership, c_unitPropShieldsPercent, c_unitPropCurrent)) <= 133.33))) {
        Wait(1.0, c_timeAI);
    }
    auto5C91E4F1_ae = lv_zealotCount;
    auto5C91E4F1_var = 1;
    for ( ; auto5C91E4F1_var <= auto5C91E4F1_ae; auto5C91E4F1_var += 1 ) {
        lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(gv_mothership), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitFromId(512), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), lv_randomishSpawnPoint), c_orderQueueReplace);
    }
    auto06BE99DC_ae = lv_stalkerCount;
    auto06BE99DC_var = 1;
    for ( ; auto06BE99DC_var <= auto06BE99DC_ae; auto06BE99DC_var += 1 ) {
        lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(gv_mothership), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitFromId(512), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), lv_randomishSpawnPoint), c_orderQueueReplace);
    }
    auto62721354_ae = lv_immortalCount;
    auto62721354_var = 1;
    for ( ; auto62721354_var <= auto62721354_ae; auto62721354_var += 1 ) {
        lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(gv_mothership), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitFromId(512), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), lv_randomishSpawnPoint), c_orderQueueReplace);
    }
    while (!((UnitIsAlive(gv_mothership) == true) && ((UnitGetPropertyFixed(gv_mothership, c_unitPropLifePercent, c_unitPropCurrent) + UnitGetPropertyFixed(gv_mothership, c_unitPropShieldsPercent, c_unitPropCurrent)) <= 66.66))) {
        Wait(1.0, c_timeAI);
    }
    autoF669412A_ae = lv_zealotCount;
    autoF669412A_var = 1;
    for ( ; autoF669412A_var <= autoF669412A_ae; autoF669412A_var += 1 ) {
        lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(gv_mothership), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitFromId(512), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), lv_randomishSpawnPoint), c_orderQueueReplace);
    }
    auto2A8A5644_ae = lv_stalkerCount;
    auto2A8A5644_var = 1;
    for ( ; auto2A8A5644_var <= auto2A8A5644_ae; auto2A8A5644_var += 1 ) {
        lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(gv_mothership), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitFromId(512), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), lv_randomishSpawnPoint), c_orderQueueReplace);
    }
    autoDE7B174B_ae = lv_immortalCount;
    autoDE7B174B_var = 1;
    for ( ; autoDE7B174B_var <= autoDE7B174B_ae; autoDE7B174B_var += 1 ) {
        lv_randomishSpawnPoint = PointWithOffsetPolar(UnitGetPosition(gv_mothership), RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitFromId(512), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), lv_randomishSpawnPoint), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipReinforcements_Init () {
    gt_MothershipReinforcements = TriggerCreate("gt_MothershipReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Mothership Attack
//--------------------------------------------------------------------------------------------------
bool gt_StartMothershipAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto72B4FA16_g;
    int auto72B4FA16_u;
    unit auto72B4FA16_var;
    const int autoF942182F_ae = 7;
    int autoF942182F_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_StartMothershipAttackQ, true, false);
    gv_attackMode = true;
    libCMUI_gf_SetProgressBarTitle(StringExternal("Param/Value/2B6A0A26"));
    libCMUI_gf_SetProgressBarColor(Color(100.00, 43.53, 0.00));
    auto72B4FA16_g = gv_shieldProjectors;
    auto72B4FA16_u = UnitGroupCount(auto72B4FA16_g, c_unitCountAll);
    for (;; auto72B4FA16_u -= 1) {
        auto72B4FA16_var = UnitGroupUnitFromEnd(auto72B4FA16_g, auto72B4FA16_u);
        if (auto72B4FA16_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto72B4FA16_var, "Signal WorkEnd");
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_mothership), Color(100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_mothership);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/146AAE02"));
    gv_mothershipPing = PingLastCreated();
    UnitSetPosition(gv_mothership, PointFromId(476), false);
    UnitIssueOrder(gv_mothership, Order(AbilityCommand("NovaMothershipWarpIn", 0)), c_orderQueueReplace);
    autoF942182F_var = 1;
    for ( ; autoF942182F_var <= autoF942182F_ae; autoF942182F_var += 1 ) {
        if ((gv_attackMode == true)) {
            PingCreateWithPlayerId(PlayerGroupAll(), "PingArrow", PointFromName(("ArrowPing" + IntToString(autoF942182F_var))), Color(100.00, 0.00, 0.00), 0.0, gv_pLAYER_01_USER);
            PingSetScale(PingLastCreated(), 0.8);
            gv_mothershipArrows[autoF942182F_var] = PingLastCreated();
            Wait(0.25, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartMothershipAttack_Init () {
    gt_StartMothershipAttack = TriggerCreate("gt_StartMothershipAttack_Func");
    TriggerAddEventTimer(gt_StartMothershipAttack, gv_defenseModeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Mothership Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_StartMothershipAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3304CD65_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_attackModeCount += 1;
    auto3304CD65_val = gv_attackModeCount;
    if (auto3304CD65_val == 1) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00056", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == false)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00057", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == false)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00125", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == false)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00091", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto3304CD65_val == 2) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00058", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == false)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00093", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto3304CD65_val == 3) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00059", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == false)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00094", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto3304CD65_val == 4) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00060", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == false)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00095", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto3304CD65_val == 5) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00061", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == false)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00096", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartMothershipAttackQ_Init () {
    gt_StartMothershipAttackQ = TriggerCreate("gt_StartMothershipAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Almost Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_MothershipAlmostReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto9EEA5451_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2A1CDFAA"), null, UnitGetPosition(UnitGroupClosestToPoint(gv_shieldProjectors, PointFromId(410))));
    TriggerQueueEnter();
    gv_attackWarningCount += 1;
    auto9EEA5451_val = gv_attackWarningCount;
    if (auto9EEA5451_val == 1) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00107", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto9EEA5451_val == 2) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00108", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto9EEA5451_val == 3) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00109", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto9EEA5451_val == 4) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00110", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto9EEA5451_val == 5) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00111", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipAlmostReadyQ_Init () {
    gt_MothershipAlmostReadyQ = TriggerCreate("gt_MothershipAlmostReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Defense Mode Q
//--------------------------------------------------------------------------------------------------
bool gt_StartDefenseModeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC653C846_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_defenseModeCount += 1;
    autoC653C846_val = gv_defenseModeCount;
    if (autoC653C846_val == 1) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == true)) {
            Wait(6.0, c_timeReal);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00062", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00063", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00064", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00112", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00062", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00063", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00064", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoC653C846_val == 2) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == true)) {
            Wait(6.0, c_timeReal);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00018", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00065", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00117", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00018", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00065", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoC653C846_val == 3) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == true)) {
            Wait(6.0, c_timeReal);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00021", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00066", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00118", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00021", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00066", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoC653C846_val == 4) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if ((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == true)) {
            Wait(6.0, c_timeReal);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00020", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00067", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00119", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00020", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00067", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartDefenseModeQ_Init () {
    gt_StartDefenseModeQ = TriggerCreate("gt_StartDefenseModeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_MothershipWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_mothership), 13.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitHasBehavior2(gv_mothership, "NovaMothershipHide") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(gv_mothership, "NovaMothershipInvulnerabilityShield") == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00068", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00126", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipWarningQ_Init () {
    gt_MothershipWarningQ = TriggerCreate("gt_MothershipWarningQ_Func");
    TriggerAddEventTimePeriodic(gt_MothershipWarningQ, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Bonus Obj Early Reveal
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBonusObjEarlyReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ProtossBonusObjRevealQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBonusObjEarlyReveal_Init () {
    gt_ProtossBonusObjEarlyReveal = TriggerCreate("gt_ProtossBonusObjEarlyReveal_Func");
    TriggerAddEventUnitRegion(gt_ProtossBonusObjEarlyReveal, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Bonus Obj Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBonusObjRevealQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ProtossBonusObjEarlyReveal, false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(540)) == true)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F261D56F"), null, UnitGetPosition(UnitFromId(540)));
        libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(540)), StringExternal("Param/Value/B6652F79"));
        libHots_gf_StorePingForUnit(UnitFromId(540), 1, PingLastCreated());
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(540)), 6.0), 6.0, false);
    }

    TriggerExecute(gt_ObjectiveDestroyFleetBeaconCreate, true, true);
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00074", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00075", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBonusObjRevealQ_Init () {
    gt_ProtossBonusObjRevealQ = TriggerCreate("gt_ProtossBonusObjRevealQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Bonus Obj Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBonusObjCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ProtossBonusObjRevealQ, false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00076", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00077", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBonusObjCompleteQ_Init () {
    gt_ProtossBonusObjCompleteQ = TriggerCreate("gt_ProtossBonusObjCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Bonus Obj Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBonusObjDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringUnitPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringUnitPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_ObjectiveDestroyFleetBeaconComplete, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupNovaEquipment", c_unitCreateIgnorePlacement, 0, lv_triggeringUnitPoint);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
    Wait(4.0, c_timeAI);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("PickupNovaEquipment", 0), UnitLastCreated()), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_ProtossBonusObjCompleteQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBonusObjDestroyed_Init () {
    gt_ProtossBonusObjDestroyed = TriggerCreate("gt_ProtossBonusObjDestroyed_Func");
    TriggerAddEventUnitDied(gt_ProtossBonusObjDestroyed, UnitRefFromUnit(UnitFromId(540)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defense Mode Timer Update
//--------------------------------------------------------------------------------------------------
bool gt_DefenseModeTimerUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetDuration(gv_defenseModeTimer) > 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCMUI_gf_SetProgressBarProgress(FixedToInt(TimerGetElapsed(gv_defenseModeTimer)));
    TextExpressionSetToken("Param/Expression/67FD2964", "A", FixedToText(((TimerGetElapsed(gv_defenseModeTimer) / gv_defenseModeDuration) * 100.0), 0));
    libCMUI_gf_SetProgressBarLabel(TextExpressionAssemble("Param/Expression/67FD2964"));
    if ((TimerGetRemaining(gv_defenseModeTimer) <= 30.0)) {
        TriggerExecute(gt_MothershipAlmostReadyQ, true, false);
    }

    if ((TimerGetRemaining(gv_defenseModeTimer) == 0.0)) {
        libCMUI_gf_SetProgressBarLabel(StringExternal("Param/Value/9A19693B"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenseModeTimerUpdate_Init () {
    gt_DefenseModeTimerUpdate = TriggerCreate("gt_DefenseModeTimerUpdate_Func");
    TriggerAddEventTimePeriodic(gt_DefenseModeTimerUpdate, 0.25, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Mode Arrow Update
//--------------------------------------------------------------------------------------------------
bool gt_AttackModeArrowUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7912E419_ae = 7;
    int auto7912E419_var;

    // Conditions
    if (testConds) {
        if (!((gv_attackMode == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7912E419_var = 1;
    for ( ; auto7912E419_var <= auto7912E419_ae; auto7912E419_var += 1 ) {
        if ((DistanceBetweenPoints(Point(PointGetX(UnitGetPosition(gv_mothership)), 0.0), Point(PointGetX(PointFromName(("ArrowPing" + IntToString(auto7912E419_var)))), 0.0)) < 8.0)) {
            PingDestroy(gv_mothershipArrows[auto7912E419_var]);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackModeArrowUpdate_Init () {
    gt_AttackModeArrowUpdate = TriggerCreate("gt_AttackModeArrowUpdate_Func");
    TriggerAddEventTimePeriodic(gt_AttackModeArrowUpdate, 0.5, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RetaliationUnitSpawned
//--------------------------------------------------------------------------------------------------
bool gt_RetaliationUnitSpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SuperWarpGate"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == UnitFromId(409))) {
        UnitGroupAdd(gv_retaliationWave_AllUnits, EventUnitProgressUnit());
        UnitGroupAdd(gv_retaliationWave_JustAttackers, EventUnitProgressUnit());
        if ((UnitGetType(EventUnitProgressUnit()) == "WarpPrism")) {
            gf_AIWarpPrism(EventUnitProgressUnit());
        }

    }
    else {
        AISetUnitSuicide(EventUnitProgressUnit(), true);
        UnitGroupAdd(gv_retaliationWave_WarpedInInfantry, EventUnitProgressUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetaliationUnitSpawned_Init () {
    gt_RetaliationUnitSpawned = TriggerCreate("gt_RetaliationUnitSpawned_Func");
    TriggerAddEventUnitConstructProgress(gt_RetaliationUnitSpawned, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DOM Zone 1
//--------------------------------------------------------------------------------------------------
bool gt_DOMZone1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(4)) == true))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_04_DEFENDERS))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DOMZone1Q, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_04_DEFENDERS, RegionFromId(4), false);
    if ((UnitGroupCount(gv_shieldProjectors, c_unitCountAlive) > 0)) {
        gv_activeMothershipAttackRegion = RegionFromId(5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DOMZone1_Init () {
    gt_DOMZone1 = TriggerCreate("gt_DOMZone1_Func");
    TriggerAddEventUnitDied(gt_DOMZone1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DOM Zone 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_DOMZone1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00097", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00014", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DOMZone1Q_Init () {
    gt_DOMZone1Q = TriggerCreate("gt_DOMZone1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DOM Zone 2
//--------------------------------------------------------------------------------------------------
bool gt_DOMZone2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(5)) == true))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_04_DEFENDERS))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DOMZone2Q, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_04_DEFENDERS, RegionFromId(5), false);
    if ((UnitGroupCount(gv_shieldProjectors, c_unitCountAlive) > 0)) {
        gv_activeMothershipAttackRegion = RegionFromId(6);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DOMZone2_Init () {
    gt_DOMZone2 = TriggerCreate("gt_DOMZone2_Func");
    TriggerAddEventUnitDied(gt_DOMZone2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DOM Zone 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_DOMZone2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00098", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DOMZone2Q_Init () {
    gt_DOMZone2Q = TriggerCreate("gt_DOMZone2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DOM Zone 3
//--------------------------------------------------------------------------------------------------
bool gt_DOMZone3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(6)) == true))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_04_DEFENDERS))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(6), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DOMZone3Q, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_04_DEFENDERS, RegionFromId(6), false);
    if ((UnitGroupCount(gv_shieldProjectors, c_unitCountAlive) > 0)) {
        gv_activeMothershipAttackRegion = RegionFromId(2);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DOMZone3_Init () {
    gt_DOMZone3 = TriggerCreate("gt_DOMZone3_Func");
    TriggerAddEventUnitDied(gt_DOMZone3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DOM Zone 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_DOMZone3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00099", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00016", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DOMZone3Q_Init () {
    gt_DOMZone3Q = TriggerCreate("gt_DOMZone3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Region Aggro
//--------------------------------------------------------------------------------------------------
bool gt_DoMRegionAggro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((EventUnitRegion() == RegionFromId(2)) || ((EventUnitRegion() == RegionFromId(4)) && (gv_activeMothershipAttackRegion == RegionFromId(4))) || ((EventUnitRegion() == RegionFromId(5)) && ((gv_activeMothershipAttackRegion == RegionFromId(4)) || (gv_activeMothershipAttackRegion == RegionFromId(5)))) || ((EventUnitRegion() == RegionFromId(6)) && ((gv_activeMothershipAttackRegion == RegionFromId(4)) || (gv_activeMothershipAttackRegion == RegionFromId(5)) || (gv_activeMothershipAttackRegion == RegionFromId(6))))))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DoMApproachWarningQ, true, false);
    Wait(15.0, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true) && (libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true)) {
        TriggerExecute(gt_DoMAggroWarningQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMRegionAggro_Init () {
    gt_DoMRegionAggro = TriggerCreate("gt_DoMRegionAggro_Func");
    TriggerAddEventUnitRegion(gt_DoMRegionAggro, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_DoMRegionAggro, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_DoMRegionAggro, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_DoMRegionAggro, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Unit Killed Aggro
//--------------------------------------------------------------------------------------------------
bool gt_DoMUnitKilledAggro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_04_DEFENDERS))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DoMApproachWarningQ, false);
    TriggerExecute(gt_DoMAggroWarningQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMUnitKilledAggro_Init () {
    gt_DoMUnitKilledAggro = TriggerCreate("gt_DoMUnitKilledAggro_Func");
    TriggerAddEventUnitDied(gt_DoMUnitKilledAggro, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Approach Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_DoMApproachWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00055", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMApproachWarningQ_Init () {
    gt_DoMApproachWarningQ = TriggerCreate("gt_DoMApproachWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Aggro Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_DoMAggroWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_DEFENDERS, libNtve_ge_AllianceSetting_Enemy);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00069", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMAggroWarningQ_Init () {
    gt_DoMAggroWarningQ = TriggerCreate("gt_DoMAggroWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Hatcheries Killed In Phase 1 Tracker
//--------------------------------------------------------------------------------------------------
bool gt_ZergHatcheriesKilledInPhase1Tracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_zergHatcheries, EventUnit()) == true))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_06_ZERG) || (EventPlayer() == gv_pLAYER_07_ZERG)))) {
            return false;
        }

        if (!((gv_activePhase == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergHatcheriesKilledInPhase1 += 1;
    if ((gv_zergHatcheriesKilledInPhase1 >= 3)) {
        libComC_gf_CampaignAwardAchievement("Nova04_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergHatcheriesKilledInPhase1Tracker_Init () {
    gt_ZergHatcheriesKilledInPhase1Tracker = TriggerCreate("gt_ZergHatcheriesKilledInPhase1Tracker_Func");
    TriggerAddEventUnitDied(gt_ZergHatcheriesKilledInPhase1Tracker, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: All Zerg Hatcheries Killed In Phase 1 Tracker
//--------------------------------------------------------------------------------------------------
bool gt_AllZergHatcheriesKilledInPhase1Tracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_zergHatcheries, EventUnit()) == true))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_06_ZERG) || (EventPlayer() == gv_pLAYER_07_ZERG)))) {
            return false;
        }

        if (!((gv_activePhase == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_allZergHatcheriesKilledInPhase1 += 1;
    if ((gv_allZergHatcheriesKilledInPhase1 == 6)) {
        libComC_gf_CampaignAwardAchievement("Anniversary_Nova04", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllZergHatcheriesKilledInPhase1Tracker_Init () {
    gt_AllZergHatcheriesKilledInPhase1Tracker = TriggerCreate("gt_AllZergHatcheriesKilledInPhase1Tracker_Func");
    TriggerAddEventUnitDied(gt_AllZergHatcheriesKilledInPhase1Tracker, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Structure Lost Tracker
//--------------------------------------------------------------------------------------------------
bool gt_DoMStructureLostTracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_pLAYER_04_DEFENDERS))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_04_DEFENDERS, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, 0, 0)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_doMStructuresLost += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMStructureLostTracker_Init () {
    gt_DoMStructureLostTracker = TriggerCreate("gt_DoMStructureLostTracker_Func");
    TriggerAddEventUnitDied(gt_DoMStructureLostTracker, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Charged Count Tracker
//--------------------------------------------------------------------------------------------------
bool gt_MothershipChargedCountTracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mothershipChargedCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipChargedCountTracker_Init () {
    gt_MothershipChargedCountTracker = TriggerCreate("gt_MothershipChargedCountTracker_Func");
    TriggerAddEventTimer(gt_MothershipChargedCountTracker, gv_defenseModeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD2ACF650_g;
    int autoD2ACF650_u;
    unit autoD2ACF650_var;

    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers();
    cai_runall();
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_05_TALDARIM, "Oracle", "AIOracle", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_06_ZERG, "Ravager", "AIRavager", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_06_ZERG, "SporeCrawlerUprooted", "AISporeCrawler", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_07_ZERG, "Ravager", "AIRavager", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_07_ZERG, "SporeCrawlerUprooted", "AISporeCrawler", false);
    AINearestTownBullyRebuild(gv_pLAYER_05_TALDARIM, true);
    AISetBullyRebuildDelay(libLotv_gf_DifficultyValueFixed2(30.0, 30.0, 15.0, 5.0), libLotv_gf_DifficultyValueFixed2(40.0, 40.0, 20.0, 10.0), gv_pLAYER_06_ZERG);
    AISetBullyRebuildDelay(libLotv_gf_DifficultyValueFixed2(30.0, 30.0, 15.0, 5.0), libLotv_gf_DifficultyValueFixed2(40.0, 40.0, 20.0, 10.0), gv_pLAYER_07_ZERG);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradeCasualNormal, true, false);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
        TriggerExecute(gt_AIUpgradeHard, true, false);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        TriggerExecute(gt_AIUpgradeBrutal, true, false);
    }

    autoD2ACF650_g = gv_shieldProjectors;
    autoD2ACF650_u = UnitGroupCount(autoD2ACF650_g, c_unitCountAll);
    for (;; autoD2ACF650_u -= 1) {
        autoD2ACF650_var = UnitGroupUnitFromEnd(autoD2ACF650_g, autoD2ACF650_u);
        if (autoD2ACF650_var == null) { break; }
        libNtve_gf_DeclareNextTown(gv_pLAYER_05_TALDARIM, UnitGetPosition(autoD2ACF650_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Controller
//--------------------------------------------------------------------------------------------------
bool gt_MothershipController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_activeZoneTargets;
    unitgroup lv_nearClusteredUnits;
    unitgroup lv_attackingGroup;

    // Automatic Variable Declarations
    unitgroup autoB6338AD8_g;
    int autoB6338AD8_u;
    unit autoB6338AD8_var;

    // Variable Initialization
    lv_activeZoneTargets = UnitGroupEmpty();
    lv_nearClusteredUnits = UnitGroupEmpty();
    lv_attackingGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_mothership) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_attackMode == true)) {
        UnitGroupAddUnitGroup(lv_nearClusteredUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_mothership), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nearClusteredUnits, UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionCircle(UnitGetPosition(gv_mothership), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nearClusteredUnits, UnitGroup(null, gv_pLAYER_06_ZERG, RegionCircle(UnitGetPosition(gv_mothership), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        autoB6338AD8_g = lv_nearClusteredUnits;
        autoB6338AD8_u = UnitGroupCount(autoB6338AD8_g, c_unitCountAll);
        for (;; autoB6338AD8_u -= 1) {
            autoB6338AD8_var = UnitGroupUnitFromEnd(autoB6338AD8_g, autoB6338AD8_u);
            if (autoB6338AD8_var == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, UnitGetOwner(autoB6338AD8_var), RegionCircle(UnitGetPosition(autoB6338AD8_var), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3)) {
                UnitGroupRemove(lv_nearClusteredUnits, autoB6338AD8_var);
            }

        }
        if ((UnitGroupCount(lv_nearClusteredUnits, c_unitCountAlive) > 0)) {
            UnitIssueOrder(gv_mothership, OrderTargetingPoint(AbilityCommand("SOAMothershipLineAttackV2", 0), UnitGetPosition(UnitGroupRandomUnit(lv_nearClusteredUnits, c_unitCountAlive))), c_orderQueueReplace);
        }
        else {
            UnitGroupAddUnitGroup(lv_activeZoneTargets, UnitGroup(null, gv_pLAYER_01_USER, gv_activeMothershipAttackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            UnitGroupAddUnitGroup(lv_activeZoneTargets, UnitGroup(null, gv_pLAYER_03_CIVILIANS, gv_activeMothershipAttackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            UnitGroupAddUnitGroup(lv_activeZoneTargets, UnitGroup(null, gv_pLAYER_04_DEFENDERS, gv_activeMothershipAttackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            UnitGroupAddUnitGroup(lv_activeZoneTargets, UnitGroup(null, gv_pLAYER_06_ZERG, gv_activeMothershipAttackRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            if ((gv_activeMothershipAttackRegion == RegionFromId(1))) {
                if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    UnitGroupAddUnitGroup(lv_activeZoneTargets, UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    UnitIssueOrder(gv_mothership, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_activeZoneTargets, PointFromId(476)))), c_orderQueueReplace);
                }
                else {
                    if ((libNtve_gf_UnitInRegion(gv_mothership, gv_activeMothershipAttackRegion) == true)) {
                        UnitIssueOrder(gv_mothership, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_activeZoneTargets, PointFromId(476)))), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(gv_mothership, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_activeMothershipAttackRegion)), c_orderQueueReplace);
                    }
                }
            }
            else {
                if ((libNtve_gf_UnitInRegion(gv_mothership, gv_activeMothershipAttackRegion) == true)) {
                    UnitIssueOrder(gv_mothership, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_activeZoneTargets, PointFromId(476))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(gv_mothership, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_activeMothershipAttackRegion)), c_orderQueueReplace);
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MothershipController_Init () {
    gt_MothershipController = TriggerCreate("gt_MothershipController_Func");
    TriggerAddEventTimePeriodic(gt_MothershipController, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto08B83804_g;
    int auto08B83804_var;
    playergroup autoC6980E5F_g;
    int autoC6980E5F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto08B83804_g = gv_playerGroup_Zerg;
    auto08B83804_var = -1;
    while (true) {
        auto08B83804_var = PlayerGroupNextPlayer(auto08B83804_g, auto08B83804_var);
        if (auto08B83804_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto08B83804_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto08B83804_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto08B83804_var, "ZergMissileWeaponsLevel1", 1);
    }
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirArmorsLevel1", 1);
    Wait(480.0, c_timeAI);
    autoC6980E5F_g = gv_playerGroup_Zerg;
    autoC6980E5F_var = -1;
    while (true) {
        autoC6980E5F_var = PlayerGroupNextPlayer(autoC6980E5F_g, autoC6980E5F_var);
        if (autoC6980E5F_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC6980E5F_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC6980E5F_var, "ZergFlyerArmorsLevel1", 1);
    }
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossShieldsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeCasualNormal_Init () {
    gt_AIUpgradeCasualNormal = TriggerCreate("gt_AIUpgradeCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Hard
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF57E9B6C_g;
    int autoF57E9B6C_var;
    playergroup auto32A9ECA2_g;
    int auto32A9ECA2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    autoF57E9B6C_g = gv_playerGroup_Zerg;
    autoF57E9B6C_var = -1;
    while (true) {
        autoF57E9B6C_var = PlayerGroupNextPlayer(autoF57E9B6C_g, autoF57E9B6C_var);
        if (autoF57E9B6C_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF57E9B6C_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoF57E9B6C_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoF57E9B6C_var, "ZergMissileWeaponsLevel2", 1);
    }
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundWeaponsLevel2", 1);
    Wait(480.0, c_timeAI);
    auto32A9ECA2_g = gv_playerGroup_Zerg;
    auto32A9ECA2_var = -1;
    while (true) {
        auto32A9ECA2_var = PlayerGroupNextPlayer(auto32A9ECA2_g, auto32A9ECA2_var);
        if (auto32A9ECA2_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto32A9ECA2_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto32A9ECA2_var, "ZergFlyerArmorsLevel2", 1);
    }
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossShieldsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeHard_Init () {
    gt_AIUpgradeHard = TriggerCreate("gt_AIUpgradeHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto71A23950_g;
    int auto71A23950_var;
    playergroup auto6B7C0594_g;
    int auto6B7C0594_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto71A23950_g = gv_playerGroup_Zerg;
    auto71A23950_var = -1;
    while (true) {
        auto71A23950_var = PlayerGroupNextPlayer(auto71A23950_g, auto71A23950_var);
        if (auto71A23950_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto71A23950_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto71A23950_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto71A23950_var, "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto71A23950_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto71A23950_var, "ZergFlyerArmorsLevel2", 1);
    }
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossShieldsLevel2", 1);
    Wait(480.0, c_timeAI);
    auto6B7C0594_g = gv_playerGroup_Zerg;
    auto6B7C0594_var = -1;
    while (true) {
        auto6B7C0594_var = PlayerGroupNextPlayer(auto6B7C0594_g, auto6B7C0594_var);
        if (auto6B7C0594_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6B7C0594_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto6B7C0594_var, "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto6B7C0594_var, "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto6B7C0594_var, "ZergGroundArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(auto6B7C0594_var, "ZergFlyerArmorsLevel3", 1);
    }
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_TALDARIM, "ProtossShieldsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeBrutal_Init () {
    gt_AIUpgradeBrutal = TriggerCreate("gt_AIUpgradeBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D36A4D25"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Nova Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatNovaDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/CC281FAF"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatNovaDead_Init () {
    gt_DefeatNovaDead = TriggerCreate("gt_DefeatNovaDead_Func");
    TriggerAddEventUnitDied(gt_DefeatNovaDead, UnitRefFromVariable("gv_nova"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Civilian Center Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCivilianCenterMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_pLAYER_03_CIVILIANS))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ElsecaroStadium"))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveCivilianCenterMustSurviveFailed, true, false);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/650B36D9"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCivilianCenterMustSurviveFailed_Init () {
    gt_DefeatCivilianCenterMustSurviveFailed = TriggerCreate("gt_DefeatCivilianCenterMustSurviveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatCivilianCenterMustSurviveFailed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destroy Tal'darim Mothership Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestroyTaldarimMothershipCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyTaldarimMothershipComplete, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestroyTaldarimMothershipCompleted_Init () {
    gt_VictoryDestroyTaldarimMothershipCompleted = TriggerCreate("gt_VictoryDestroyTaldarimMothershipCompleted_Func");
    TriggerAddEventUnitDied(gt_VictoryDestroyTaldarimMothershipCompleted, UnitRefFromVariable("gv_mothership"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyShieldProjectorsComplete, true, true);
    TriggerExecute(gt_ObjectiveCivilianCenterMustSurviveComplete, true, true);
    libNCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libComC_gf_CampaignAwardAchievement("Nova04_1", gv_pLAYER_01_USER);
    if ((gv_doMStructuresLost <= 20) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova04_3", gv_pLAYER_01_USER);
    }

    if ((gv_mothershipChargedCount == 0) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova04_Mastery", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E562DA89"), IntToText(gv_zergHatcheriesKilledInPhase1));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/02CD3B19"), IntToText(gv_doMStructuresLost));
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNCMI_gf_DisplayMissionTip();
    Wait(libNCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Hatcheries Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergHatcheriesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova04Primary01");
    gv_objectiveDestroyZergHatcheries = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergHatcheriesCreate_Init () {
    gt_ObjectiveDestroyZergHatcheriesCreate = TriggerCreate("gt_ObjectiveDestroyZergHatcheriesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Hatcheries Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergHatcheriesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyZergHatcheriesCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergHatcheriesComplete_Init () {
    gt_ObjectiveDestroyZergHatcheriesComplete = TriggerCreate("gt_ObjectiveDestroyZergHatcheriesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Hatcheries Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergHatcheriesFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyZergHatcheriesCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergHatcheriesFailed_Init () {
    gt_ObjectiveDestroyZergHatcheriesFailed = TriggerCreate("gt_ObjectiveDestroyZergHatcheriesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Nova Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNovaMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova04Primary02");
    gv_objectiveNovaMustSurvive = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNovaMustSurviveCreate_Init () {
    gt_ObjectiveNovaMustSurviveCreate = TriggerCreate("gt_ObjectiveNovaMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Nova Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNovaMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary02", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNovaMustSurviveComplete_Init () {
    gt_ObjectiveNovaMustSurviveComplete = TriggerCreate("gt_ObjectiveNovaMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Nova Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNovaMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary02", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNovaMustSurviveFailed_Init () {
    gt_ObjectiveNovaMustSurviveFailed = TriggerCreate("gt_ObjectiveNovaMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Shield Projectors Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShieldProjectorsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4CD37268_g;
    int auto4CD37268_u;
    unit auto4CD37268_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova04Primary03");
    auto4CD37268_g = gv_shieldProjectors;
    auto4CD37268_u = UnitGroupCount(auto4CD37268_g, c_unitCountAll);
    for (;; auto4CD37268_u -= 1) {
        auto4CD37268_var = UnitGroupUnitFromEnd(auto4CD37268_g, auto4CD37268_u);
        if (auto4CD37268_var == null) { break; }
        libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(auto4CD37268_var), StringExternal("Param/Value/5692570D"));
        libHots_gf_StorePingForUnit(auto4CD37268_var, 1, PingLastCreated());
    }
    gv_objectiveDestroyShieldProjectors = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShieldProjectorsCreate_Init () {
    gt_ObjectiveDestroyShieldProjectorsCreate = TriggerCreate("gt_ObjectiveDestroyShieldProjectorsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Shield Projectors Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShieldProjectorsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyShieldProjectorsCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary03", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShieldProjectorsComplete_Init () {
    gt_ObjectiveDestroyShieldProjectorsComplete = TriggerCreate("gt_ObjectiveDestroyShieldProjectorsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Shield Projectors Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShieldProjectorsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyShieldProjectorsCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova04Primary03", (4 - UnitGroupCount(gv_shieldProjectors, c_unitCountAlive)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShieldProjectorsUpdate_Init () {
    gt_ObjectiveDestroyShieldProjectorsUpdate = TriggerCreate("gt_ObjectiveDestroyShieldProjectorsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Shield Projectors Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShieldProjectorsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyShieldProjectorsCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary03", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShieldProjectorsFailed_Init () {
    gt_ObjectiveDestroyShieldProjectorsFailed = TriggerCreate("gt_ObjectiveDestroyShieldProjectorsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Civilian Center Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCivilianCenterMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova04Primary04");
    gv_objectiveCivilianCenterMustSurvive = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCivilianCenterMustSurviveCreate_Init () {
    gt_ObjectiveCivilianCenterMustSurviveCreate = TriggerCreate("gt_ObjectiveCivilianCenterMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Civilian Center Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCivilianCenterMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveCivilianCenterMustSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary04", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCivilianCenterMustSurviveComplete_Init () {
    gt_ObjectiveCivilianCenterMustSurviveComplete = TriggerCreate("gt_ObjectiveCivilianCenterMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Civilian Center Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCivilianCenterMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveCivilianCenterMustSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary04", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCivilianCenterMustSurviveFailed_Init () {
    gt_ObjectiveCivilianCenterMustSurviveFailed = TriggerCreate("gt_ObjectiveCivilianCenterMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Tal'darim Mothership Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTaldarimMothershipCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova04Primary05");
    gv_objectiveDestroyTaldarimMothership = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTaldarimMothershipCreate_Init () {
    gt_ObjectiveDestroyTaldarimMothershipCreate = TriggerCreate("gt_ObjectiveDestroyTaldarimMothershipCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Tal'darim Mothership Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTaldarimMothershipComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyTaldarimMothershipCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary05", libComC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTaldarimMothershipComplete_Init () {
    gt_ObjectiveDestroyTaldarimMothershipComplete = TriggerCreate("gt_ObjectiveDestroyTaldarimMothershipComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Tal'darim Mothership Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTaldarimMothershipFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyTaldarimMothershipCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Primary05", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTaldarimMothershipFailed_Init () {
    gt_ObjectiveDestroyTaldarimMothershipFailed = TriggerCreate("gt_ObjectiveDestroyTaldarimMothershipFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Remaining Zerg Hatcheries Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyRemainingZergHatcheriesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova04Bonus01");
    gv_objectiveDestroyRemainingZergHatcheries = ObjectiveLastCreated();
    libCMMI_gf_SetMissionObjectiveProgress("Nova04Bonus01", (6 - UnitGroupCount(gv_zergHatcheries, c_unitCountAlive)));
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyRemainingZergHatcheriesCreate_Init () {
    gt_ObjectiveDestroyRemainingZergHatcheriesCreate = TriggerCreate("gt_ObjectiveDestroyRemainingZergHatcheriesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Remaining Zerg Hatcheries Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyRemainingZergHatcheriesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyRemainingZergHatcheriesCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Bonus01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyRemainingZergHatcheriesComplete_Init () {
    gt_ObjectiveDestroyRemainingZergHatcheriesComplete = TriggerCreate("gt_ObjectiveDestroyRemainingZergHatcheriesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Remaining Zerg Hatcheries Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyRemainingZergHatcheriesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyRemainingZergHatcheriesCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova04Bonus01", (6 - UnitGroupCount(gv_zergHatcheries, c_unitCountAlive)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyRemainingZergHatcheriesUpdate_Init () {
    gt_ObjectiveDestroyRemainingZergHatcheriesUpdate = TriggerCreate("gt_ObjectiveDestroyRemainingZergHatcheriesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Remaining Zerg Hatcheries Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyRemainingZergHatcheriesFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyRemainingZergHatcheriesCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Bonus01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyRemainingZergHatcheriesFailed_Init () {
    gt_ObjectiveDestroyRemainingZergHatcheriesFailed = TriggerCreate("gt_ObjectiveDestroyRemainingZergHatcheriesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Fleet Beacon Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFleetBeaconCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova04Bonus02");
    gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFleetBeaconCreate_Init () {
    gt_ObjectiveDestroyFleetBeaconCreate = TriggerCreate("gt_ObjectiveDestroyFleetBeaconCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Fleet Beacon Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFleetBeaconComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyFleetBeaconCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Bonus02", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFleetBeaconComplete_Init () {
    gt_ObjectiveDestroyFleetBeaconComplete = TriggerCreate("gt_ObjectiveDestroyFleetBeaconComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Fleet Beacon Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFleetBeaconFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyFleetBeaconCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova04Bonus02", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFleetBeaconFailed_Init () {
    gt_ObjectiveDestroyFleetBeaconFailed = TriggerCreate("gt_ObjectiveDestroyFleetBeaconFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionEntireMap());
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene00Fortification, true, true);
    TriggerExecute(gt_BriefingScene01Stadium, true, true);
    TriggerExecute(gt_BriefingScene02Banshees, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 - Fortification
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00Fortification_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4327), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4328), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_Nova04_00");
    Wait(10.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00Fortification_Init () {
    gt_BriefingScene00Fortification = TriggerCreate("gt_BriefingScene00Fortification_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 - Stadium
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01Stadium_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnCivilians, true, false);
    libNtve_gf_ShowHideUnit(UnitFromId(437), false);
    libNtve_gf_ShowHideUnit(UnitFromId(322), false);
    libNtve_gf_ShowHideUnit(UnitFromId(427), false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2726), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4329), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_Nova04_01");
    Wait(10.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01Stadium_Init () {
    gt_BriefingScene01Stadium = TriggerCreate("gt_BriefingScene01Stadium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02 - Banshees
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02Banshees_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_banshees;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_banshees = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(523), 135.0);
    UnitGroupAdd(lv_banshees, UnitLastCreated());
    UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(562), 135.0);
    UnitGroupAdd(lv_banshees, UnitLastCreated());
    UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(4612), 135.0);
    UnitGroupAdd(lv_banshees, UnitLastCreated());
    UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(4613), 135.0);
    UnitGroupAdd(lv_banshees, UnitLastCreated());
    UnitSetHeight(UnitGroupUnit(lv_banshees, 1), 20.0, 0.0);
    UnitSetHeight(UnitGroupUnit(lv_banshees, 2), 14.0, 0.0);
    UnitSetHeight(UnitGroupUnit(lv_banshees, 3), 13.0, 0.0);
    UnitSetHeight(UnitGroupUnit(lv_banshees, 4), 14.0, 0.0);
    Wait(2.0, c_timeGame);
    UnitSetHeight(UnitGroupUnit(lv_banshees, 1), UnitGetPropertyFixed(UnitGroupUnit(lv_banshees, 1), c_unitPropHeight, c_unitPropNormal), 4.0);
    UnitSetHeight(UnitGroupUnit(lv_banshees, 2), UnitGetPropertyFixed(UnitGroupUnit(lv_banshees, 2), c_unitPropHeight, c_unitPropNormal), 5.0);
    UnitSetHeight(UnitGroupUnit(lv_banshees, 3), UnitGetPropertyFixed(UnitGroupUnit(lv_banshees, 3), c_unitPropHeight, c_unitPropNormal), 4.0);
    UnitSetHeight(UnitGroupUnit(lv_banshees, 4), UnitGetPropertyFixed(UnitGroupUnit(lv_banshees, 4), c_unitPropHeight, c_unitPropNormal), 5.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4330), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4331), 10.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_Nova04_02");
    Wait(3.0, c_timeReal);
    UnitIssueOrder(UnitGroupUnit(lv_banshees, 1), Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueReplace);
    Wait(0.25, c_timeReal);
    UnitIssueOrder(UnitGroupUnit(lv_banshees, 2), Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueReplace);
    Wait(0.125, c_timeReal);
    UnitIssueOrder(UnitGroupUnit(lv_banshees, 3), Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueReplace);
    Wait(0.25, c_timeReal);
    UnitIssueOrder(UnitGroupUnit(lv_banshees, 4), Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02Banshees_Init () {
    gt_BriefingScene02Banshees = TriggerCreate("gt_BriefingScene02Banshees_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Civilians
//--------------------------------------------------------------------------------------------------
bool gt_SpawnCivilians_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3A5DB3AF_n = 120;
    int auto3A5DB3AF_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto3A5DB3AF_i = 1; auto3A5DB3AF_i <= auto3A5DB3AF_n; auto3A5DB3AF_i += 1) {
        UnitCreate(1, "BeachMale", 0, 0, RegionRandomPoint(RegionFromId(44)), libNtve_gf_RandomAngle());
        gf_OrderCivilianstoRun(UnitLastCreated());
        UnitCreate(1, "BeachGirl", 0, 0, RegionRandomPoint(RegionFromId(44)), libNtve_gf_RandomAngle());
        gf_OrderCivilianstoRun(UnitLastCreated());
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnCivilians_Init () {
    gt_SpawnCivilians = TriggerCreate("gt_SpawnCivilians_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto99B22EDD_g;
    int auto99B22EDD_u;
    unit auto99B22EDD_var;
    unitgroup autoB1C122B9_g;
    int autoB1C122B9_u;
    unit autoB1C122B9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto99B22EDD_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto99B22EDD_u = UnitGroupCount(auto99B22EDD_g, c_unitCountAll);
    for (;; auto99B22EDD_u -= 1) {
        auto99B22EDD_var = UnitGroupUnitFromEnd(auto99B22EDD_g, auto99B22EDD_u);
        if (auto99B22EDD_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto99B22EDD_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto99B22EDD_var);
            libNtve_gf_PauseUnit(auto99B22EDD_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoB1C122B9_g = gv_cinematicHiddenUnits;
    autoB1C122B9_u = UnitGroupCount(autoB1C122B9_g, c_unitCountAll);
    for (;; autoB1C122B9_u -= 1) {
        autoB1C122B9_var = UnitGroupUnitFromEnd(autoB1C122B9_g, autoB1C122B9_u);
        if (autoB1C122B9_var == null) { break; }
        if ((UnitGetOwner(autoB1C122B9_var) != gv_pLAYER_06_ZERG) && (UnitGetType(autoB1C122B9_var) != "Elsecaro_Colonist_Hut")) {
            libNtve_gf_ShowHideUnit(autoB1C122B9_var, false);
        }

    }
    if ((libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotSuit") == "EQPSuitItem2")) {
        UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, PointFromId(102), 90.0);
    }
    else {
        UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, PointFromId(4339), 90.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(270)), c_orderQueueReplace);
    }
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introNova = UnitLastCreated();
    UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(4335), 120.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introBanshees, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(523)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(523), 3.0, 135.0)), c_orderQueueAddToEnd);
    UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(4336), 120.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introBanshees, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(562)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(562), 3.0, 135.0)), c_orderQueueAddToEnd);
    UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(4337), 120.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introBanshees, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(268)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(268), 3.0, 135.0)), c_orderQueueAddToEnd);
    UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(4338), 120.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introBanshees, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(269)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(269), 3.0, 135.0)), c_orderQueueAddToEnd);
    CatalogFieldValueSet(c_gameCatalogUnit, "Banshee", "TurningRate", gv_pLAYER_01_USER, "120");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_griffon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4332), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4333), ((SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova04|Line00122", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova04|Line00123", true), c_soundIndexAny))) + 6.0), -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_musicIntroTrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_ambienceMainTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_Nova04_BansheeFlyin", 0), PlayerGroupAll(), 30.0, 0.0);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_Nova04_SeagullIntro", 0), PlayerGroupAll(), 30.0, 0.0);
    gv_introSound = true;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00122", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00123", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 5.0);
    UnitIssueOrder(gv_introNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(270)), c_orderQueueReplace);
    UnitIssueOrder(gv_introNova, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(293)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    while (!((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_introBanshees, 1)), PointFromId(523)) < 0.5) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_introBanshees, 2)), PointFromId(562)) < 0.5) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_introBanshees, 3)), PointFromId(268)) < 0.5) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_introBanshees, 4)), PointFromId(269)) < 0.5))) {
        Wait(0.125, c_timeGame);
    }
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto6B89F5CC_g;
    int auto6B89F5CC_u;
    unit auto6B89F5CC_var;
    unitgroup autoB19C5691_g;
    int autoB19C5691_u;
    unit autoB19C5691_var;
    unitgroup auto2A55C006_g;
    int auto2A55C006_u;
    unit auto2A55C006_var;
    unitgroup autoF5157F6F_g;
    int autoF5157F6F_u;
    unit autoF5157F6F_var;
    unitgroup autoED4322A3_g;
    int autoED4322A3_u;
    unit autoED4322A3_var;
    unitgroup auto9053CDE8_g;
    int auto9053CDE8_u;
    unit auto9053CDE8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    if ((gv_cinematicCompleted == true)) {
        UnitGroupRemove(gv_cinematicTempUnits, gv_introNova);
        gv_nova = gv_introNova;
        auto6B89F5CC_g = gv_introBanshees;
        auto6B89F5CC_u = UnitGroupCount(auto6B89F5CC_g, c_unitCountAll);
        for (;; auto6B89F5CC_u -= 1) {
            auto6B89F5CC_var = UnitGroupUnitFromEnd(auto6B89F5CC_g, auto6B89F5CC_u);
            if (auto6B89F5CC_var == null) { break; }
            UnitGroupRemove(gv_cinematicTempUnits, auto6B89F5CC_var);
        }
    }
    else {
        UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(523), 135.0);
        UnitGroupAdd(gv_introBanshees, UnitLastCreated());
        UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(562), 135.0);
        UnitGroupAdd(gv_introBanshees, UnitLastCreated());
        UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(268), 135.0);
        UnitGroupAdd(gv_introBanshees, UnitLastCreated());
        UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromId(269), 135.0);
        UnitGroupAdd(gv_introBanshees, UnitLastCreated());
        UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, PointFromId(270), 135.0);
        gv_nova = UnitLastCreated();
    }
    autoB19C5691_g = gv_introBanshees;
    autoB19C5691_u = UnitGroupCount(autoB19C5691_g, c_unitCountAll);
    for (;; autoB19C5691_u -= 1) {
        autoB19C5691_var = UnitGroupUnitFromEnd(autoB19C5691_g, autoB19C5691_u);
        if (autoB19C5691_var == null) { break; }
        UnitSetPropertyFixed(autoB19C5691_var, c_unitPropEnergyPercent, 100.0);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "Banshee", "TurningRate", gv_pLAYER_01_USER, "1499.941");
    auto2A55C006_g = gv_cinematicTempUnits;
    auto2A55C006_u = UnitGroupCount(auto2A55C006_g, c_unitCountAll);
    for (;; auto2A55C006_u -= 1) {
        auto2A55C006_var = UnitGroupUnitFromEnd(auto2A55C006_g, auto2A55C006_u);
        if (auto2A55C006_var == null) { break; }
        UnitRemove(auto2A55C006_var);
    }
    autoF5157F6F_g = gv_cinematicHiddenUnits;
    autoF5157F6F_u = UnitGroupCount(autoF5157F6F_g, c_unitCountAll);
    for (;; autoF5157F6F_u -= 1) {
        autoF5157F6F_var = UnitGroupUnitFromEnd(autoF5157F6F_g, autoF5157F6F_u);
        if (autoF5157F6F_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF5157F6F_var, true);
    }
    autoED4322A3_g = gv_cinematicPausedUnits;
    autoED4322A3_u = UnitGroupCount(autoED4322A3_g, c_unitCountAll);
    for (;; autoED4322A3_u -= 1) {
        autoED4322A3_var = UnitGroupUnitFromEnd(autoED4322A3_g, autoED4322A3_u);
        if (autoED4322A3_var == null) { break; }
        libNtve_gf_PauseUnit(autoED4322A3_var, false);
    }
    auto9053CDE8_g = UnitGroup("Larva", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto9053CDE8_u = UnitGroupCount(auto9053CDE8_g, c_unitCountAll);
    for (;; auto9053CDE8_u -= 1) {
        auto9053CDE8_var = UnitGroupUnitFromEnd(auto9053CDE8_g, auto9053CDE8_u);
        if (auto9053CDE8_var == null) { break; }
        UnitRemove(auto9053CDE8_var);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(23), true, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_introSound == true)) {
        SoundStopAllTriggerSounds(true);
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_musicMainTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(270), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestNexus;
    unitgroup lv_attackingGroup;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto60BE10B0_g;
    int auto60BE10B0_u;
    unit auto60BE10B0_var;
    unitgroup autoF5881C37_g;
    int autoF5881C37_u;
    unit autoF5881C37_var;
    unitgroup autoA8FEB7F4_g;
    int autoA8FEB7F4_u;
    unit autoA8FEB7F4_var;
    unitgroup auto432E1FDF_g;
    int auto432E1FDF_u;
    unit auto432E1FDF_var;
    unitgroup auto2A36C80A_g;
    int auto2A36C80A_u;
    unit auto2A36C80A_var;
    const int auto38829DE8_ae = 10;
    int auto38829DE8_var;
    unitgroup auto7539FB33_g;
    int auto7539FB33_u;
    unit auto7539FB33_var;

    // Variable Initialization
    lv_attackingGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    RegionPlayableMapSet(RegionFromId(42));
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto60BE10B0_g = UnitGroup(null, gv_pLAYER_02_REIGEL, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto60BE10B0_u = UnitGroupCount(auto60BE10B0_g, c_unitCountAll);
    for (;; auto60BE10B0_u -= 1) {
        auto60BE10B0_var = UnitGroupUnitFromEnd(auto60BE10B0_g, auto60BE10B0_u);
        if (auto60BE10B0_var == null) { break; }
        UnitRemove(auto60BE10B0_var);
    }
    autoF5881C37_g = UnitGroup("VespeneGeyser", 0, RegionFromId(36), UnitFilter(0, 0, 0, 0), 0);
    autoF5881C37_u = UnitGroupCount(autoF5881C37_g, c_unitCountAll);
    for (;; autoF5881C37_u -= 1) {
        autoF5881C37_var = UnitGroupUnitFromEnd(autoF5881C37_g, autoF5881C37_u);
        if (autoF5881C37_var == null) { break; }
        UnitRemove(autoF5881C37_var);
    }
    autoA8FEB7F4_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA8FEB7F4_u = UnitGroupCount(autoA8FEB7F4_g, c_unitCountAll);
    for (;; autoA8FEB7F4_u -= 1) {
        autoA8FEB7F4_var = UnitGroupUnitFromEnd(autoA8FEB7F4_g, autoA8FEB7F4_u);
        if (autoA8FEB7F4_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoA8FEB7F4_var) == false) && (autoA8FEB7F4_var != gv_nova) && (UnitGroupHasUnit(gv_introBanshees, autoA8FEB7F4_var) != true)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoA8FEB7F4_var);
            libNtve_gf_PauseUnit(autoA8FEB7F4_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_03_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_05_TALDARIM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto432E1FDF_g = UnitGroup(null, gv_pLAYER_06_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto432E1FDF_u = UnitGroupCount(auto432E1FDF_g, c_unitCountAll);
    for (;; auto432E1FDF_u -= 1) {
        auto432E1FDF_var = UnitGroupUnitFromEnd(auto432E1FDF_g, auto432E1FDF_u);
        if (auto432E1FDF_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto432E1FDF_var, RegionFromId(12)) != true)) {
            UnitGroupAdd(gv_cinematicHiddenUnits, auto432E1FDF_var);
        }

    }
    auto2A36C80A_g = gv_cinematicHiddenUnits;
    auto2A36C80A_u = UnitGroupCount(auto2A36C80A_g, c_unitCountAll);
    for (;; auto2A36C80A_u -= 1) {
        auto2A36C80A_var = UnitGroupUnitFromEnd(auto2A36C80A_g, auto2A36C80A_u);
        if (auto2A36C80A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2A36C80A_var, false);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(2822), true);
    UnitSetOwner(UnitFromId(2822), gv_pLAYER_02_REIGEL, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(40)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(34)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(33)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Starport", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(25)));
    if ((TechTreeUpgradeCount(gv_pLAYER_01_USER, "InternalizedTechModuleBanshee", c_techCountQueuedOrBetter) >= 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StarportReactor", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(43)));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StarportTechLab", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(43)));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(24)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(36)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(37)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(38)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_02_REIGEL, RegionGetCenter(RegionFromId(39)));
    UnitCreate(1, "Marine", 0, gv_pLAYER_02_REIGEL, PointFromId(1348), PointGetFacing(PointFromId(2807)));
    UnitGroupAdd(gv_midMarines, UnitLastCreated());
    UnitCreate(1, "Marine", 0, gv_pLAYER_02_REIGEL, PointFromId(2300), PointGetFacing(PointFromId(2808)));
    UnitGroupAdd(gv_midMarines, UnitLastCreated());
    UnitCreate(1, "Goliath", 0, gv_pLAYER_02_REIGEL, PointFromId(1304), PointGetFacing(PointFromId(2809)));
    UnitGroupAdd(gv_midGoliaths, UnitLastCreated());
    UnitCreate(1, "Goliath", 0, gv_pLAYER_02_REIGEL, PointFromId(1306), PointGetFacing(PointFromId(2810)));
    UnitGroupAdd(gv_midGoliaths, UnitLastCreated());
    auto38829DE8_var = 1;
    for ( ; auto38829DE8_var <= auto38829DE8_ae; auto38829DE8_var += 1 ) {
        UnitCreate(1, "SCV", 0, gv_pLAYER_02_REIGEL, PointFromName(("S2 SCV " + IntToString(auto38829DE8_var))), PointGetFacing(PointFromName(("S2 SCV " + IntToString(auto38829DE8_var)))));
    }
    auto7539FB33_g = gv_introBanshees;
    auto7539FB33_u = UnitGroupCount(auto7539FB33_g, c_unitCountAll);
    for (;; auto7539FB33_u -= 1) {
        auto7539FB33_var = UnitGroupUnitFromEnd(auto7539FB33_g, auto7539FB33_u);
        if (auto7539FB33_var == null) { break; }
        lv_i += 1;
        UnitSetPosition(auto7539FB33_var, PointFromName(("S2 Banshee Start " + IntToString(lv_i))), false);
        UnitSetPropertyFixed(auto7539FB33_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto7539FB33_var, c_unitPropEnergyPercent, 100.0);
        UnitIssueOrder(auto7539FB33_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(auto7539FB33_var, Order(AbilityCommand("BansheeCloak", 1)), c_orderQueueAddToEnd);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "Banshee", "TurningRate", gv_pLAYER_01_USER, "240");
    UnitSetPropertyFixed(gv_nova, c_unitPropLifePercent, 100.0);
    UnitSetPosition(gv_nova, PointFromId(2704), false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cinematicNova;
    unit lv_cinematicMothership;
    unitgroup lv_notYetRescuedUnits;
    unit lv_rescuedUnit;
    int lv_i;
    int lv_replacementBansheesIter;

    // Automatic Variable Declarations
    unitgroup auto3A6BF8C6_g;
    int auto3A6BF8C6_u;
    unit auto3A6BF8C6_var;
    unitgroup auto1133977F_g;
    int auto1133977F_u;
    unit auto1133977F_var;
    const int autoDDCE1A04_ae = 4;
    const int autoDDCE1A04_ai = 1;
    unitgroup autoD45D0069_g;
    int autoD45D0069_u;
    unit autoD45D0069_var;
    unitgroup autoFCC35C65_g;
    int autoFCC35C65_u;
    unit autoFCC35C65_var;

    // Variable Initialization
    lv_notYetRescuedUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4867), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(267), 8.0, -1, 10.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    auto3A6BF8C6_g = gv_introBanshees;
    auto3A6BF8C6_u = UnitGroupCount(auto3A6BF8C6_g, c_unitCountAll);
    for (;; auto3A6BF8C6_u -= 1) {
        auto3A6BF8C6_var = UnitGroupUnitFromEnd(auto3A6BF8C6_g, auto3A6BF8C6_u);
        if (auto3A6BF8C6_var == null) { break; }
        UnitIssueOrder(auto3A6BF8C6_var, Order(AbilityCommand("BansheeCloak", 1)), c_orderQueueReplace);
    }
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00042", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitGroupAddUnitGroup(lv_notYetRescuedUnits, UnitGroup(null, gv_pLAYER_02_REIGEL, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while ((UnitGroupCount(lv_notYetRescuedUnits, c_unitCountAlive) > 0)) {
        lv_rescuedUnit = UnitGroupClosestToPoint(lv_notYetRescuedUnits, RegionGetCenter(RegionFromId(40)));
        libNtve_gf_RescueUnit(lv_rescuedUnit, gv_pLAYER_01_USER, true);
        UnitGroupRemove(lv_notYetRescuedUnits, lv_rescuedUnit);
        Wait(0.125, c_timeReal);
    }
    UnitIssueOrder(UnitGroupUnit(gv_midMarines, 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2807)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_midMarines, 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2808)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_midGoliaths, 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2809)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_midGoliaths, 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2810)), c_orderQueueReplace);
    auto1133977F_g = gv_introBanshees;
    auto1133977F_u = UnitGroupCount(auto1133977F_g, c_unitCountAll);
    for (;; auto1133977F_u -= 1) {
        auto1133977F_var = UnitGroupUnitFromEnd(auto1133977F_g, auto1133977F_u);
        if (auto1133977F_var == null) { break; }
        lv_i += 1;
        UnitIssueOrder(auto1133977F_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("S2 Banshee " + IntToString(lv_i)))), c_orderQueueReplace);
        UnitIssueOrder(auto1133977F_var, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(auto1133977F_var), 1.0, PointGetFacing(PointFromName(("S2 Banshee " + IntToString(lv_i)))))), c_orderQueueAddToEnd);
    }
    Wait(1.0, c_timeReal);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        lv_replacementBansheesIter = (lv_i + 1);
        for ( ; ( (autoDDCE1A04_ai >= 0 && lv_replacementBansheesIter <= autoDDCE1A04_ae) || (autoDDCE1A04_ai < 0 && lv_replacementBansheesIter >= autoDDCE1A04_ae) ) ; lv_replacementBansheesIter += autoDDCE1A04_ai ) {
            UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointFromName(("S2 Banshee " + IntToString(lv_replacementBansheesIter))), PointGetFacing(PointFromName(("S2 Banshee " + IntToString(lv_replacementBansheesIter)))));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            UnitGroupAdd(gv_introBanshees, UnitLastCreated());
            UnitGroupAdd(gv_cinematicHiddenUnits, UnitLastCreated());
            UnitGroupAdd(gv_cinematicPausedUnits, UnitLastCreated());
            UnitCreate(1, "Banshee", 0, gv_pLAYER_01_USER, PointWithOffset(PointFromName(("S2 Banshee " + IntToString(lv_replacementBansheesIter))), 12.0, -12.0), 135.0);
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("S2 Banshee " + IntToString(lv_replacementBansheesIter)))), c_orderQueueReplace);
        }
    }

    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(60)), c_orderQueueReplace);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(60), 1.0, PointGetFacing(PointFromId(60)))), c_orderQueueAddToEnd);
    Wait(1.0, c_timeReal);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_06_ZERG, PointFromId(2802));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(410)), c_orderQueueReplace);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_06_ZERG, PointFromId(2903));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(410)), c_orderQueueReplace);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_06_ZERG, PointFromId(2904));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(410)), c_orderQueueReplace);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, gv_pLAYER_06_ZERG, PointFromId(2919));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(410)), c_orderQueueReplace);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 15.0, 2.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_musicMidCineTrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00043", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00044", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraPan(gv_pLAYER_01_USER, PointFromId(554), 0.0, -1, 10.0, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
    libComC_gf_CampaignPlayMovieCutscene("Cutscenes\\Nova04VoidRay.SC2Cutscene", true, true);
    libComC_gf_MuteUnmuteAllSoundChannelsExcept(false, c_soundCategoryMusic, PlayerGroupAll());
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(554), 4.0);
    Wait(1.0, c_timeReal);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00084", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 22.5, 2.0);
    Wait(1.0, c_timeReal);
    gf_TaldarimDeathBeamBurninator(PointFromId(4864), 10.0);
    Wait(1.0, c_timeReal);
    gf_TaldarimDeathBeamBurninator(PointFromId(4865), 10.0);
    Wait(1.0, c_timeReal);
    gf_TaldarimDeathBeamBurninator(PointFromId(4866), 10.0);
    Wait(1.0, c_timeReal);
    gf_TaldarimDeathBeamBurninator(PointFromId(4469), 10.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TaldarimShieldGenerator", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_05_TALDARIM, RegionGetCenter(RegionFromId(21)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(2.0, c_timeReal);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00120", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 15.0, 1.0);
    autoD45D0069_g = UnitGroup(null, gv_pLAYER_05_TALDARIM, RegionFromId(21), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD45D0069_u = UnitGroupCount(autoD45D0069_g, c_unitCountAll);
    for (;; autoD45D0069_u -= 1) {
        autoD45D0069_var = UnitGroupUnitFromEnd(autoD45D0069_g, autoD45D0069_u);
        if (autoD45D0069_var == null) { break; }
        if ((UnitGetType(autoD45D0069_var) != "TaldarimShieldGenerator")) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(autoD45D0069_var), c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_05_TALDARIM, UnitGetPosition(autoD45D0069_var));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            Wait(0.35, c_timeReal);
        }

    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipShadow", 0, gv_pLAYER_05_TALDARIM, PointFromId(4868));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(21))), c_orderQueueReplace);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00046", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeReal);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_Nova04_MothershipRumble", 0), PlayerGroupAll(), 70.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00047", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    autoFCC35C65_g = UnitGroup("TaldarimShieldGenerator", c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFCC35C65_u = UnitGroupCount(autoFCC35C65_g, c_unitCountAll);
    for (;; autoFCC35C65_u -= 1) {
        autoFCC35C65_var = UnitGroupUnitFromEnd(autoFCC35C65_g, autoFCC35C65_u);
        if (autoFCC35C65_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoFCC35C65_var, "Signal WorkStart");
    }
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00048", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00085", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), libNCMI_gf_ConvesationLineDuration("Mission_Nova04|Line00049"), -1, 10.0, true);
    CameraPan(gv_pLAYER_01_USER, PointFromId(410), libNCMI_gf_ConvesationLineDuration("Mission_Nova04|Line00049"), -1, 10.0, false);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00049", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto1FC6FEF0_g;
    int auto1FC6FEF0_u;
    unit auto1FC6FEF0_var;
    unitgroup auto12EB0285_g;
    int auto12EB0285_u;
    unit auto12EB0285_var;
    unitgroup autoF319CF2B_g;
    int autoF319CF2B_u;
    unit autoF319CF2B_var;
    unitgroup auto499FFB9D_g;
    int auto499FFB9D_u;
    unit auto499FFB9D_var;
    unitgroup autoCE0419A5_g;
    int autoCE0419A5_u;
    unit autoCE0419A5_var;
    unitgroup autoC34579C0_g;
    int autoC34579C0_u;
    unit autoC34579C0_var;
    unitgroup auto830779BD_g;
    int auto830779BD_u;
    unit auto830779BD_var;
    unitgroup auto4C09575A_g;
    int auto4C09575A_u;
    unit auto4C09575A_var;
    unitgroup auto836248AB_g;
    int auto836248AB_u;
    unit auto836248AB_var;
    unitgroup auto93D1AC6B_g;
    int auto93D1AC6B_u;
    unit auto93D1AC6B_var;
    unitgroup autoE9FAA735_g;
    int autoE9FAA735_u;
    unit autoE9FAA735_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    auto1FC6FEF0_g = gv_cinematicTempUnits;
    auto1FC6FEF0_u = UnitGroupCount(auto1FC6FEF0_g, c_unitCountAll);
    for (;; auto1FC6FEF0_u -= 1) {
        auto1FC6FEF0_var = UnitGroupUnitFromEnd(auto1FC6FEF0_g, auto1FC6FEF0_u);
        if (auto1FC6FEF0_var == null) { break; }
        UnitRemove(auto1FC6FEF0_var);
    }
    auto12EB0285_g = gv_cinematicHiddenUnits;
    auto12EB0285_u = UnitGroupCount(auto12EB0285_g, c_unitCountAll);
    for (;; auto12EB0285_u -= 1) {
        auto12EB0285_var = UnitGroupUnitFromEnd(auto12EB0285_g, auto12EB0285_u);
        if (auto12EB0285_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto12EB0285_var, true);
    }
    autoF319CF2B_g = gv_cinematicPausedUnits;
    autoF319CF2B_u = UnitGroupCount(autoF319CF2B_g, c_unitCountAll);
    for (;; autoF319CF2B_u -= 1) {
        autoF319CF2B_var = UnitGroupUnitFromEnd(autoF319CF2B_g, autoF319CF2B_u);
        if (autoF319CF2B_var == null) { break; }
        libNtve_gf_PauseUnit(autoF319CF2B_var, false);
    }
    if ((gv_cinematicCompleted == true)) {
    }
    else {
        auto499FFB9D_g = UnitGroup(null, gv_pLAYER_02_REIGEL, RegionFromId(1), UnitFilter(0, 0, 0, 0), 0);
        auto499FFB9D_u = UnitGroupCount(auto499FFB9D_g, c_unitCountAll);
        for (;; auto499FFB9D_u -= 1) {
            auto499FFB9D_var = UnitGroupUnitFromEnd(auto499FFB9D_g, auto499FFB9D_u);
            if (auto499FFB9D_var == null) { break; }
            UnitSetOwner(auto499FFB9D_var, gv_pLAYER_01_USER, true);
        }
        UnitSetPosition(UnitGroupUnit(gv_midGoliaths, 1), PointFromId(2809), false);
        UnitSetPosition(UnitGroupUnit(gv_midGoliaths, 2), PointFromId(2810), false);
        UnitSetPosition(UnitGroupUnit(gv_midMarines, 1), PointFromId(2807), false);
        UnitSetPosition(UnitGroupUnit(gv_midMarines, 2), PointFromId(2808), false);
        autoCE0419A5_g = gv_introBanshees;
        autoCE0419A5_u = UnitGroupCount(autoCE0419A5_g, c_unitCountAll);
        for (;; autoCE0419A5_u -= 1) {
            autoCE0419A5_var = UnitGroupUnitFromEnd(autoCE0419A5_g, autoCE0419A5_u);
            if (autoCE0419A5_var == null) { break; }
            lv_i += 1;
            UnitSetPosition(autoCE0419A5_var, PointFromName(("S2 Banshee " + IntToString(lv_i))), false);
            UnitSetFacing(autoCE0419A5_var, PointGetFacing(PointFromName(("S2 Banshee " + IntToString(lv_i)))), 0.0);
        }
        CatalogFieldValueSet(c_gameCatalogUnit, "Banshee", "TurningRate", gv_pLAYER_01_USER, "1499.941");
        UnitSetPosition(gv_nova, PointFromId(60), false);
        UnitSetFacing(gv_nova, PointGetFacing(PointFromId(60)), 0.0);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_PauseUnit(UnitFromId(2822), false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, true);
    CameraPan(gv_pLAYER_01_USER, PointFromId(410), 0.0, -1, 10.0, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(22), true, false);
    autoC34579C0_g = UnitGroup("NaturalMinerals", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoC34579C0_u = UnitGroupCount(autoC34579C0_g, c_unitCountAll);
    for (;; autoC34579C0_u -= 1) {
        autoC34579C0_var = UnitGroupUnitFromEnd(autoC34579C0_g, autoC34579C0_u);
        if (autoC34579C0_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC34579C0_var, true);
    }
    auto830779BD_g = UnitGroup("NaturalGas", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto830779BD_u = UnitGroupCount(auto830779BD_g, c_unitCountAll);
    for (;; auto830779BD_u -= 1) {
        auto830779BD_var = UnitGroupUnitFromEnd(auto830779BD_g, auto830779BD_u);
        if (auto830779BD_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto830779BD_var, true);
    }
    auto4C09575A_g = UnitGroup("PalletMinerals", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto4C09575A_u = UnitGroupCount(auto4C09575A_g, c_unitCountAll);
    for (;; auto4C09575A_u -= 1) {
        auto4C09575A_var = UnitGroupUnitFromEnd(auto4C09575A_g, auto4C09575A_u);
        if (auto4C09575A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4C09575A_var, true);
    }
    auto836248AB_g = UnitGroup("PalletGas", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto836248AB_u = UnitGroupCount(auto836248AB_g, c_unitCountAll);
    for (;; auto836248AB_u -= 1) {
        auto836248AB_var = UnitGroupUnitFromEnd(auto836248AB_g, auto836248AB_u);
        if (auto836248AB_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto836248AB_var, true);
    }
    auto93D1AC6B_g = UnitGroup(null, gv_pLAYER_05_TALDARIM, RegionFromId(21), UnitFilter(0, 0, 0, 0), 0);
    auto93D1AC6B_u = UnitGroupCount(auto93D1AC6B_g, c_unitCountAll);
    for (;; auto93D1AC6B_u -= 1) {
        auto93D1AC6B_var = UnitGroupUnitFromEnd(auto93D1AC6B_g, auto93D1AC6B_u);
        if (auto93D1AC6B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto93D1AC6B_var, true);
        libNtve_gf_PauseUnit(auto93D1AC6B_var, false);
    }
    autoE9FAA735_g = UnitGroup(null, gv_pLAYER_06_ZERG, RegionFromId(12), UnitFilter(0, 0, 0, 0), 0);
    autoE9FAA735_u = UnitGroupCount(autoE9FAA735_g, c_unitCountAll);
    for (;; autoE9FAA735_u -= 1) {
        autoE9FAA735_var = UnitGroupUnitFromEnd(autoE9FAA735_g, autoE9FAA735_u);
        if (autoE9FAA735_var == null) { break; }
        UnitRemove(autoE9FAA735_var);
    }
    CreepModify(RegionGetCenter(RegionFromId(12)), 20.0, false, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_musicMainTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA8AE9C3C_g;
    int autoA8AE9C3C_u;
    unit autoA8AE9C3C_var;
    unitgroup autoB6D68EDF_g;
    int autoB6D68EDF_u;
    unit autoB6D68EDF_var;
    const int autoE10B3F26_ae = 2;
    int autoE10B3F26_var;
    const int auto6A1C4E67_ae = 4;
    int auto6A1C4E67_var;
    const int autoA330A8E0_ae = 8;
    int autoA330A8E0_var;
    const int autoAE9431CA_ae = 4;
    int autoAE9431CA_var;
    const int auto319E361F_ae = 4;
    int auto319E361F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(RegionFromId(42));
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    autoA8AE9C3C_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA8AE9C3C_u = UnitGroupCount(autoA8AE9C3C_g, c_unitCountAll);
    for (;; autoA8AE9C3C_u -= 1) {
        autoA8AE9C3C_var = UnitGroupUnitFromEnd(autoA8AE9C3C_g, autoA8AE9C3C_u);
        if (autoA8AE9C3C_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoA8AE9C3C_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoA8AE9C3C_var);
            libNtve_gf_PauseUnit(autoA8AE9C3C_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_REIGEL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_03_CIVILIANS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_05_TALDARIM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_06_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_07_ZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoB6D68EDF_g = gv_cinematicHiddenUnits;
    autoB6D68EDF_u = UnitGroupCount(autoB6D68EDF_g, c_unitCountAll);
    for (;; autoB6D68EDF_u -= 1) {
        autoB6D68EDF_var = UnitGroupUnitFromEnd(autoB6D68EDF_g, autoB6D68EDF_u);
        if (autoB6D68EDF_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB6D68EDF_var, false);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_06_ZERG, PointFromId(5100));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    autoE10B3F26_var = 1;
    for ( ; autoE10B3F26_var <= autoE10B3F26_ae; autoE10B3F26_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawler", 0, gv_pLAYER_06_ZERG, PointFromName(("Victory Cinematic SpineCrawler " + IntToString(autoE10B3F26_var))));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    auto6A1C4E67_var = 1;
    for ( ; auto6A1C4E67_var <= auto6A1C4E67_ae; auto6A1C4E67_var += 1 ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Hydralisk", 0, gv_pLAYER_06_ZERG, PointFromName(("Victory Cinematic Hydralisk " + IntToString(auto6A1C4E67_var))));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    autoA330A8E0_var = 1;
    for ( ; autoA330A8E0_var <= autoA330A8E0_ae; autoA330A8E0_var += 1 ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, gv_pLAYER_06_ZERG, PointFromName(("Victory Cinematic Zergling " + IntToString(autoA330A8E0_var))));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_pLAYER_04_DEFENDERS, PointFromId(5118), PointFromId(5115));
    UnitCargoCreate(UnitLastCreated(), "HellionTank", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitCargoCreate(UnitLastCreated(), "Marine", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitCargoCreate(UnitLastCreated(), "Marine", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitCargoCreate(UnitLastCreated(), "Marine", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitCargoCreate(UnitLastCreated(), "Marine", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(5115)), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_pLAYER_04_DEFENDERS, PointFromId(5119), PointFromId(5116));
    UnitCargoCreate(UnitLastCreated(), "SiegeTank", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    gf_SiegeAfterUnload(UnitCargoLastCreated());
    UnitCargoCreate(UnitLastCreated(), "SiegeTank", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    gf_SiegeAfterUnload(UnitCargoLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(5116)), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, gv_pLAYER_04_DEFENDERS, PointFromId(5120), PointFromId(5117));
    UnitCargoCreate(UnitLastCreated(), "HellionTank", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitCargoCreate(UnitLastCreated(), "Marine", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitCargoCreate(UnitLastCreated(), "Marine", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitCargoCreate(UnitLastCreated(), "Marine", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitCargoCreate(UnitLastCreated(), "Marine", 1);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    libNtve_gf_ChangeUnitDamage(UnitCargoLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(5117)), c_orderQueueReplace);
    autoAE9431CA_var = 1;
    for ( ; autoAE9431CA_var <= autoAE9431CA_ae; autoAE9431CA_var += 1 ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_04_DEFENDERS, PointFromName(("Victory Cinematic DoM Marine " + IntToString(autoAE9431CA_var))));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    auto319E361F_var = 1;
    for ( ; auto319E361F_var <= auto319E361F_ae; auto319E361F_var += 1 ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Goliath", 0, gv_pLAYER_04_DEFENDERS, PointFromName(("Victory Cinematic DoM Goliath " + IntToString(auto319E361F_var))));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ColonistShip", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(5121));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(5113), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(5114), 10.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_musicOutroTrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, 2.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00070", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(405)), c_orderQueueReplace);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00100", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova04_FleeingPeeps", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(5122), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(5123), 10.0, -1, 10, true);
    gf_EvacuateCivilians(UnitGroupUnit(UnitGroup("ColonistShip", gv_pLAYER_04_DEFENDERS, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
    Wait(1.0, c_timeReal);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00071", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00072", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova04|Line00073", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_IntroSequence_Init();
    gt_Stage1Start_Init();
    gt_Stage1FirstOrder_Init();
    gt_SporeCrawlerSpawner_Init();
    gt_HatchKilledQ_Init();
    gt_SporeCrawlerWarningQ_Init();
    gt_OutofTimeWarningQ_Init();
    gt_NukeReadyQ_Init();
    gt_GoKillStuffQ_Init();
    gt_CloakReminderQ_Init();
    gt_ReigelBaseReminderQ_Init();
    gt_ReigelSCVStopper_Init();
    gt_ReigelSupplyDepotBuilder_Init();
    gt_ReigelNukeArmer_Init();
    gt_ReigelBaseSetupTiming_Init();
    gt_ReigelUntargetable_Init();
    gt_Stage2Start_Init();
    gt_Stage2IntroQ_Init();
    gt_WeatherChange_Init();
    gt_ZergLarvaSpawnerNorth_Init();
    gt_ZergLarvaSpawnerSouth_Init();
    gt_ZergExpandAcrossMap_Init();
    gt_ZergTakeover_Init();
    gt_ZergBonusObjEarlyKillQ_Init();
    gt_ZergBonusObjRevealQ_Init();
    gt_ZergBonusObjCompleteQ_Init();
    gt_ZergHatcheryKilled_Init();
    gt_ZergAttackWaves_Init();
    gt_zzOLDZergAttackWaves_Init();
    gt_AddProtossUnitsToGlossary_Init();
    gt_ShieldProjectorDestroyed_Init();
    gt_MothershipReinforcements_Init();
    gt_StartMothershipAttack_Init();
    gt_StartMothershipAttackQ_Init();
    gt_MothershipAlmostReadyQ_Init();
    gt_StartDefenseModeQ_Init();
    gt_MothershipWarningQ_Init();
    gt_ProtossBonusObjEarlyReveal_Init();
    gt_ProtossBonusObjRevealQ_Init();
    gt_ProtossBonusObjCompleteQ_Init();
    gt_ProtossBonusObjDestroyed_Init();
    gt_DefenseModeTimerUpdate_Init();
    gt_AttackModeArrowUpdate_Init();
    gt_RetaliationUnitSpawned_Init();
    gt_DOMZone1_Init();
    gt_DOMZone1Q_Init();
    gt_DOMZone2_Init();
    gt_DOMZone2Q_Init();
    gt_DOMZone3_Init();
    gt_DOMZone3Q_Init();
    gt_DoMRegionAggro_Init();
    gt_DoMUnitKilledAggro_Init();
    gt_DoMApproachWarningQ_Init();
    gt_DoMAggroWarningQ_Init();
    gt_ZergHatcheriesKilledInPhase1Tracker_Init();
    gt_AllZergHatcheriesKilledInPhase1Tracker_Init();
    gt_DoMStructureLostTracker_Init();
    gt_MothershipChargedCountTracker_Init();
    gt_StartAI_Init();
    gt_MothershipController_Init();
    gt_AIUpgradeCasualNormal_Init();
    gt_AIUpgradeHard_Init();
    gt_AIUpgradeBrutal_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatNovaDead_Init();
    gt_DefeatCivilianCenterMustSurviveFailed_Init();
    gt_VictoryDestroyTaldarimMothershipCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveDestroyZergHatcheriesCreate_Init();
    gt_ObjectiveDestroyZergHatcheriesComplete_Init();
    gt_ObjectiveDestroyZergHatcheriesFailed_Init();
    gt_ObjectiveNovaMustSurviveCreate_Init();
    gt_ObjectiveNovaMustSurviveComplete_Init();
    gt_ObjectiveNovaMustSurviveFailed_Init();
    gt_ObjectiveDestroyShieldProjectorsCreate_Init();
    gt_ObjectiveDestroyShieldProjectorsComplete_Init();
    gt_ObjectiveDestroyShieldProjectorsUpdate_Init();
    gt_ObjectiveDestroyShieldProjectorsFailed_Init();
    gt_ObjectiveCivilianCenterMustSurviveCreate_Init();
    gt_ObjectiveCivilianCenterMustSurviveComplete_Init();
    gt_ObjectiveCivilianCenterMustSurviveFailed_Init();
    gt_ObjectiveDestroyTaldarimMothershipCreate_Init();
    gt_ObjectiveDestroyTaldarimMothershipComplete_Init();
    gt_ObjectiveDestroyTaldarimMothershipFailed_Init();
    gt_ObjectiveDestroyRemainingZergHatcheriesCreate_Init();
    gt_ObjectiveDestroyRemainingZergHatcheriesComplete_Init();
    gt_ObjectiveDestroyRemainingZergHatcheriesUpdate_Init();
    gt_ObjectiveDestroyRemainingZergHatcheriesFailed_Init();
    gt_ObjectiveDestroyFleetBeaconCreate_Init();
    gt_ObjectiveDestroyFleetBeaconComplete_Init();
    gt_ObjectiveDestroyFleetBeaconFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00Fortification_Init();
    gt_BriefingScene01Stadium_Init();
    gt_BriefingScene02Banshees_Init();
    gt_SpawnCivilians_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
