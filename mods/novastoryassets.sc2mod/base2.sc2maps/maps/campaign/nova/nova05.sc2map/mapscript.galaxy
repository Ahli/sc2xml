//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Night Terrors
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "LibComC"
include "LibCMMI"
include "LibCMUI"
include "LibNovC"
include "LibNCMI"
include "LibNCUI"
include "ai18837D4E"
include "aiEEE0FA37"
include "aiB6B8902B"
include "aiB85ADE2B"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libComC_InitLib();
    libCMMI_InitLib();
    libCMUI_InitLib();
    libNovC_InitLib();
    libNCMI_InitLib();
    libNCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_PROTOSS_BULLIES = 2;
const int gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS = 3;
const int gv_pLAYER_04_PROTOSS_WAVES = 4;
const int gv_pLAYER_05_INFESTED_FIGHTPROTOSS = 5;
const int gv_pLAYER_06_TERRAZINE = 6;
const int gv_pLAYER_07_COLONISTS = 7;
const int gv_pLAYER_08_ZERG = 8;
const int gv_pLAYER_09_ERADICATOR = 9;
const int gv_pLAYER_10_TERRAZINETARGET = 10;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORDTerrazineTankLocation {
    unit lv_terrazineTankUnit;
    unit lv_beaconUnit;
    region lv_beaconRegion;
    point lv_terrazineTankPoint;
    revealer lv_revealer;
    int lv_state;
    point lv_protossClaimerWaveTransportTarget;
    region lv_protossClaimerWaveTargetRegion;
    unitgroup lv_protossClaimerWaveUnitGroup;
    doodad lv_griffinActor;
    point lv_canisterSpawn;
    unit lv_canisterUnit;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESETWeaponReverb_Indoor = 0;
const int ge_PRESETWeaponReverb_Outdoor = 1;
const int ge_PRESETTerrazineTankState_Available = 0;
const int ge_PRESETTerrazineTankState_Working = 1;
const int ge_PRESETTerrazineTankState_Exhausted = 2;
const int ge_PRESETTerrazineTankState_Sealed = 3;
const int ge_BonusObjectiveEradicatorPositions_EradicatorNorth = 0;
const int ge_BonusObjectiveEradicatorPositions_EradicatorSouth = 1;
const int ge_BonusObjectiveEradicatorPositions_EradicatorEast = 2;
const int ge_BonusObjectiveEradicatorPositions_EradicatorWest = 3;
const int ge_BonusObjectiveEradicatorPositions_EradicatorCenter = 4;
const int ge_PRESETClaimerWaveType_SmallA = 0;
const int ge_PRESETClaimerWaveType_SmallB = 1;
const int ge_PRESETClaimerWaveType_MediumA = 2;
const int ge_PRESETClaimerWaveType_MediumB = 3;
const int ge_PRESETClaimerWaveType_LargeA = 4;
const int ge_PRESETClaimerWaveType_LargeB = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
string gv_mapMusicTrack5;
string gv_mapMusicTrack6;
string gv_mapMusicTrack7;
string gv_mapMusicTrack2;
string gv_mapMusicTrack3;
string gv_mapMusicTrack4;
unit gv_nova;
playergroup gv_zergPlayerGroup;
playergroup gv_taldarimPlayerGroup;
int gv_perfPausedCount;
region[21] gv_perfPausedRegions;
unitgroup[21] gv_perfPausedUnits;
region[21] gv_perfRevealRegions;
unitgroup gv_infestedSiegeTanks;
gs_RECORDTerrazineTankLocation[17] gv_terrazineTankLocations;
int gv_terrazineTankLocationsCount;
int gv_terrazineTanksDestroyedCount;
int gv_terrazineTankGatherTransmissionCount;
bool gv_terrazineTankGatherTransmissionInitial;
bool gv_terrazineTankGatherTransmissionSecond;
int gv_terrazineTankDualGatherTransmissionCount;
int gv_objectiveDestroyedProtossTransmissionCount;
int gv_objectiveDestroyedInfestedTransmissionCount;
int gv_terrazineTankAttackedTransmissionCount;
int gv_terrazineTankLowLifeTransmissionCount;
int gv_terrazineTankReminderTransmissionCount;
bool gv_terrazineCanisterRetrievalActive;
bool gv_bonusObjective_SoloOperativeTipAdded;
unit gv_novaSoulsUnit;
int gv_novaSoulsAmount;
bool gv_bonusObjective_MusicPlaying;
unitgroup gv_bonusObjective_HatchedInfestedGroup;
unit gv_bonusObjective_Blightbringer;
int gv_bonusObjective_ExplorePing;
bool gv_bonusObjective_BlightbringerActive;
bool gv_bonusObjectiveNovaInScienceFacility;
timer gv_eradicatorPlayerEntranceLoiterTimer;
bool gv_eradicatorDenyPlayerSafeZone;
bool gv_eradicatorsActivated;
unit gv_eradicatorTypeCannon;
unit gv_eradicatorTypeMissile;
unit gv_enragedEradicator;
int gv_eradicatorTypeCannonPosition;
unitgroup gv_infestedRageWaveUnits;
unitgroup gv_nydusUnloadedUnits;
unitgroup gv_protossBaseAttackGroup;
int gv_claimWaveTransmissionCount;
int gv_protossReachTankTransmissionCount;
int gv_protossClaimWavesSent;
int gv_sortOrderIndexStarter;
int gv_infestedKillClaimerWaveTransmissionCount;
bool gv_achievement_PlayerHasKilledProtoss;
int gv_victoryStat_LiberatorKills;
int gv_victoryStat_ProtossWavesIntercepted;
bool gv_achievementConstructedSiegeTankOrLiberator;
int gv_objectiveDestroyZergBase;
int gv_objectiveExtractTerrazineCount;
int gv_objectiveExtractTerrazineMax;
int gv_objectiveDestroyZergBase2;
int gv_objectiveDoNotLetDevicesBeDestroyed;
int gv_objectiveDoNotLetDevicesBeDestroyedMax;
int gv_objectiveRescueStalkers;
int gv_objectiveRescueStalkers3;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
actor gv_holo_CC;
actor gv_holo_Barracks;
actor gv_holo_Starport;
unitgroup gv_introPlayerUnits;
unit gv_introCineShip;
int[9] gv_introMinerals;
int[2] gv_introGas;
unit gv_cinematicNova;
unit gv_victoryAlarak;
int gv_victoryIndex;
camerainfo[10][5] gv_victoryCamera;
point[10][3] gv_victoryPoints;
unit gv_victoryCanister;
region[10] gv_victoryRegion;

void InitGlobals () {
    int init_i;

    gv_zergPlayerGroup = PlayerGroupEmpty();
    gv_taldarimPlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_perfPausedUnits[init_i] = UnitGroupEmpty();
    }
    gv_infestedSiegeTanks = UnitGroupEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_terrazineTankLocations[init_i].lv_state = ge_PRESETTerrazineTankState_Available;
        gv_terrazineTankLocations[init_i].lv_protossClaimerWaveUnitGroup = UnitGroupEmpty();
    }
    gv_terrazineTankGatherTransmissionInitial = true;
    gv_terrazineTankGatherTransmissionSecond = true;
    gv_bonusObjective_HatchedInfestedGroup = UnitGroupEmpty();
    gv_bonusObjective_Blightbringer = UnitFromId(1004);
    gv_bonusObjective_ExplorePing = c_invalidPingId;
    gv_eradicatorPlayerEntranceLoiterTimer = TimerCreate();
    gv_infestedRageWaveUnits = UnitGroupEmpty();
    gv_nydusUnloadedUnits = UnitGroupEmpty();
    gv_protossBaseAttackGroup = UnitGroupEmpty();
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveExtractTerrazineMax = libLotv_gf_DifficultyValueInt2(5, 5, 6, 6);
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveDoNotLetDevicesBeDestroyedMax = libLotv_gf_DifficultyValueInt2(5, 5, 4, 3);
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveRescueStalkers3 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introPlayerUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ToggleNovaWeaponReverb (int lp_reverbState);
int gf_GetTerrazineTankIndexFromTankUnit (unit lp_terrazineTankUnit);
int gf_GetTerrazineTankIndexFromBeaconRegion (region lp_beaconRegion);
void gf_PlayerInitiatesGatheringTerrazineTank (int lp_terrazineTankIndex);
void gf_PlayerFinishesGatheringTerrazineTankQ (int lp_terrazineTankIndex);
void gf_CreateTerrazineCanisterandAnimateTank (point lp_targetedPoint, int lp_terrazineIndex);
void gf_ProtossDestroysTerrazineTankQ (int lp_terrazineTankIndex);
void gf_InfestedDestroysTerrazineTank (int lp_terrazineTankIndex);
void gf_BonusObjectivePauseUnpauseUnitGroup (bool lp_pauseUnpause, unitgroup lp_pausingUnitGroup);
void gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit (unit lp_infestedUnit);
void gf_BonusObjectiveBlightbringerMoveToNewEggSpot (unit lp_blightbringer, point lp_targetPoint);
void gf_BonusObjectiveBlightbringerEgg (unit lp_blightbringer, point lp_eggPoint, bool lp_bigEgg);
void gf_BonusObjectiveBlightbringerCleanup ();
void gf_BonusObjectiveEradicatorMissilesRing ();
void gf_BonusObjectiveEradicatorMissilesAttackDirectly ();
void gf_BonusObjectiveEradicatorMissilesEnrageRing ();
void gf_BonusObjectiveEradicatorMissilesEntranceAttack ();
void gf_BonusObjectiveEradicatorCannonFiveWayShot ();
void gf_BonusObjectiveEradicatorCannonFanAttack ();
void gf_BonusObjectiveEradicatorCannonAttack (point lp_target);
void gf_BonusObjectiveEradicatorCannonAttackNoTurn (point lp_target);
void gf_BonusObjectiveEradicatorReset ();
void gf_AIMonitorBullyRebuildRegion (int lp_player, region lp_bullyRebuildRegion);
void gf_AIOracle (int lp_owner, unit lp_oracle, unitgroup lp_nearbyUnits);
unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
void gf_RunInfestedRageWaves (int lp_terrazineTankIndex);
void gf_InfestedRageWavesFirst (int lp_terrazineTankIndex);
void gf_InfestedRageWavesEarly (int lp_terrazineTankIndex);
void gf_InfestedRageWavesMid (int lp_terrazineTankIndex);
void gf_InfestedRageWavesLate (int lp_terrazineTankIndex);
void gf_SendInfestedRageWave (int lp_terrazineTankIndex, region lp_spawnRegion, bool lp_waveStartsBurrowed, int lp_infestedTerranCount, int lp_infestedExploderCount, int lp_infestedMarineCount, int lp_aberrationCount, int lp_infestedBansheeCount);
void gf_AddInfestedUnitsToRageWave (int lp_terrazineTankIndex, string lp_infestedUnitType, int lp_count, region lp_spawnRegion);
void gf_BurrowAndRemoveInfestedWaveUnit (unit lp_infestedUnit);
void gf_SpecialRageWaveJustMoreDudes (int lp_terrazineTankIndex);
void gf_SpecialRageWaveExploders (int lp_terrazineTankIndex);
void gf_SpecialRageWaveEggPoppers (int lp_terrazineTankIndex);
void gf_GrowAndHatchEggCluster (doodad lp_eggClusterDoodad, point lp_eggClusterPoint);
void gf_SendInfestedEggPopperWave (int lp_terrazineTankIndex, point lp_launchPoint, int lp_infestedTerranCount, int lp_infestedExploderCount, int lp_infestedMarineCount, int lp_aberrationCount, int lp_infestedBansheeCount);
void gf_AddInfestedUnitsToEggPopperWave (int lp_terrazineTankIndex, string lp_infestedUnitType, int lp_count, point lp_launchPoint);
void gf_SpecialRageWavesColonyShipExplodes (int lp_terrazineTankIndex);
void gf_SpecialRageWavesSiegeTanks (int lp_terrazineTankIndex);
void gf_UnloadInfestedSiegeTankFromOverlord (point lp_spawnPoint, point lp_dropPoint);
void gf_SpecialRageWavesNydusWorms (int lp_terrazineTankIndex);
void gf_UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, point lp_rallyPoint, int lp_player, int lp_maxCount);
void gf_SpecialRageWavesFlyers (int lp_terrazineTankIndex);
void gf_SendInfestedRageWaveFlyers (int lp_terrazineTankIndex, region lp_spawnRegion, int lp_infestedBansheeCount, int lp_mutaliskCount, int lp_guardianCount, int lp_corruptorCount);
void gf_DeployWarpPrismAndWarpInBaseAttacks (point lp_targetPoint);
void gf_WarpPrismBaseAttackReinforcements (unit lp_warpPrism, string lp_warpUnitType, int lp_warpUnitMaxCount);
void gf_RunProtossClaimerWave (int lp_claimerWaveSize);
int gf_GetProtossClaimerWaveTarget ();
void gf_TrackClaimerAttackRoute (unitgroup lp_inTransitUnitGroup, text lp_pingTooltip, int lp_terrazineTankIndex);
void gf_DrawClaimerAttackRoute (point lp_startPoint, point lp_endPoint);
void gf_TrackClaimerWaveTargetPing (int lp_claimerWaveTargetIndex);
void gf_WarpOutProtossUnit (unit lp_warpingUnit);
void gf_WarpPrismClaimerReinforcements (unit lp_warpPrism, string lp_warpUnitType, int lp_warpUnitMaxCount, int lp_terrazineTankIndex);
void gf_ProtossClaimerWaveReachesTargetQ (int lp_terrazineTankIndex);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugRunSmallClaimWave;
trigger gt_DebugRunMediumClaimWave;
trigger gt_DebugRunLargeClaimWave;
trigger gt_DebugRunAllClaimWaves;
trigger gt_DebugToggleAITimePauseUnpause;
trigger gt_DebugTestObjectiveCompletion;
trigger gt_PerformanceHandler;
trigger gt_PauseUnitsAgain;
trigger gt_OrbitalScanOrNukeUsed;
trigger gt_ShowMapCheatUsed;
trigger gt_StartGameQ;
trigger gt_CreateTerrazineTankPings;
trigger gt_SomethingTerribleQ;
trigger gt_InfestedComeDownRamp;
trigger gt_FoundTheMinersViaAttackQ;
trigger gt_FoundTheMinersViaUnburrowQ;
trigger gt_NeverTakeMeAliveQ;
trigger gt_AberrationSurpriseQ;
trigger gt_NovaSeesInfestedSiegeTankQ;
trigger gt_SiegeTankAlleyQ;
trigger gt_SiegeTanksSiegeUp;
trigger gt_BansheeRunQ;
trigger gt_PlayerNearsFriendlyUmojansQ;
trigger gt_FriendlyUmojansQ;
trigger gt_ReachUmojanForcesQ;
trigger gt_StayOutOfTaldarimBaseQ;
trigger gt_PlayerAttacksTaldarimBaseQ;
trigger gt_StayOutOfZergBaseQ;
trigger gt_PlayerAttacksZergBaseQ;
trigger gt_InitializeTerrazineTankLocations;
trigger gt_PlayerEntersTerrazineBeacon;
trigger gt_PlayerInitiatesGatheringTransmissionQ;
trigger gt_TerrazineTankAttackedWarningQ;
trigger gt_TerrazineTankLowLifeWarningQ;
trigger gt_TerrazineTankIsDestroyed;
trigger gt_TerrazineTanksDestroyedWarningQ;
trigger gt_TerrazineTanksObjectiveReminderQ;
trigger gt_TerrazineGatheringCompleteQ;
trigger gt_BonusObjectiveRevealMinesQ;
trigger gt_BonusObjectiveRevealScienceFacilityQ;
trigger gt_BonusObjectiveProximityRevealScienceFacility;
trigger gt_BonusObjectiveCollectedMinesQ;
trigger gt_BonusObjectiveCollectedFacilityQ;
trigger gt_BonusObjectiveNovaEntersMines;
trigger gt_BonusObjectiveNovaLeavesMines;
trigger gt_BonusObjectiveNovaEntersScienceFacility;
trigger gt_BonusObjectiveNovaLeavesScienceFacility;
trigger gt_BonusObjectiveNovaEntersBOFirstTimeQ;
trigger gt_BonusObjectiveNovaDiesInside;
trigger gt_NovaLeavesSoulsOnGround;
trigger gt_NovaRetrievesSouls;
trigger gt_BonusObjectiveStartBossMusic;
trigger gt_BonusObjectiveStopBossMusic;
trigger gt_BonusObjectiveBlightbringer;
trigger gt_BonusObjectiveBlightbringerBattleAI;
trigger gt_BonusObjectiveSpawnBlightbringerScene;
trigger gt_BonusObjectiveBlightbringerSpawned;
trigger gt_BonusObjectiveFoundBlightbringerTransmissionQ;
trigger gt_BonusObjectiveBlightbringerEggCreated;
trigger gt_BonusObjectiveInfestedAttackNova;
trigger gt_BonusObjectiveBlightbringerDies;
trigger gt_BonusObjectiveEradicatorNovaEntersRoom;
trigger gt_BonusObjectiveSpawnEradicatorScene;
trigger gt_BonusObjectiveActivateEradicatorTransmissionQ;
trigger gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ;
trigger gt_BonusObjectiveEradicatorTypeMissile;
trigger gt_BonusObjectiveEradicatorTypeCannon;
trigger gt_BonusObjectiveEradicatorTypeMissileEnrage;
trigger gt_BonusObjectiveEradicatorTypeCannonEnrage;
trigger gt_BonusObjectiveEradicatorDies;
trigger gt_BonusObjectivePlayerReturnsToEradicatorEntrance;
trigger gt_BonusObjectivePlayerLoiteringInEradicatorEntrance;
trigger gt_BonusObjectivePlayerLeftEradicatorEntrance;
trigger gt_StartAI;
trigger gt_AIUpgradeCasualNormal;
trigger gt_AIUpgradeHardBrutal;
trigger gt_FirstInfestedAttackEarlyWarningQ;
trigger gt_FirstInfestedAttackQ;
trigger gt_FirstInfestedAttackSideEntranceQ;
trigger gt_SpecialRageWaveSiegeTanksQ;
trigger gt_SpecialRageWaveFlyersQ;
trigger gt_SendProtossBaseAttack01Q;
trigger gt_ProtossBaseAttackUnitWarpingIn;
trigger gt_SendProtossClaimerWaveSmall;
trigger gt_SendProtossClaimerWaveMedium;
trigger gt_SendProtossClaimerWaveLarge;
trigger gt_ClaimWaveUnitWarpedIn;
trigger gt_ProtossClaimerWaveQ;
trigger gt_InfestedKillProtossClaimerWaveQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatProtossCapTerrazine;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_Achievement_PlayerHasKilledProtoss;
trigger gt_VictoryStat_LiberatorKills;
trigger gt_AchievementVictorywithoutconstructingSiegeTanksorLiberators;
trigger gt_TipReadyQ;
trigger gt_ObjectiveExtractTerrazineCreate;
trigger gt_ObjectiveExtractTerrazineComplete;
trigger gt_ObjectiveExtractTerrazineUpdate;
trigger gt_ObjectiveExtractTerrazineFailed;
trigger gt_ObjectiveDoNotLetDevicesBeDestroyedCreate;
trigger gt_ObjectiveDoNotLetDevicesBeDestroyedComplete;
trigger gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate;
trigger gt_ObjectivePreventProtossFailed;
trigger gt_ObjectiveExploreUmojanMineCreate;
trigger gt_ObjectiveExploreUmojanMineComplete;
trigger gt_ObjectiveExploreUmojanMineFailed;
trigger gt_ObjectiveExploreScienceFacilityCreate;
trigger gt_ObjectiveExploreScienceFacilityComplete;
trigger gt_ObjectiveExploreScienceFacilityFailed;
trigger gt_BriefingCinematic;
trigger gt_BriefingBaseHolograms;
trigger gt_BriefingQ;
trigger gt_BriefingScene00DropZone;
trigger gt_BreifingScene00DropZonePanning;
trigger gt_BriefingScene02ExtractionDevices;
trigger gt_BreifingScene02ExtractionDevicesPanning;
trigger gt_BreifingScene02ExtractionDevicesAssault;
trigger gt_BriefingScene03SignsofLife;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_FlyInForces;
trigger gt_FlyInGriffin;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryGriffinAnimationandSFX;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai18837D4E") { ai18837D4E_start(p); }
    if (cai_playerAI[p] == "aiEEE0FA37") { aiEEE0FA37_start(p); }
    if (cai_playerAI[p] == "aiB6B8902B") { aiB6B8902B_start(p); }
    if (cai_playerAI[p] == "aiB85ADE2B") { aiB85ADE2B_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai18837D4E") { ai18837D4E_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiEEE0FA37") { aiEEE0FA37_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiB6B8902B") { aiB6B8902B_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiB85ADE2B") { aiB85ADE2B_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai18837D4E") { return ai18837D4E_getCustomData(p); }
    if (cai_playerAI[p] == "aiEEE0FA37") { return aiEEE0FA37_getCustomData(p); }
    if (cai_playerAI[p] == "aiB6B8902B") { return aiB6B8902B_getCustomData(p); }
    if (cai_playerAI[p] == "aiB85ADE2B") { return aiB85ADE2B_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai18837D4E") { return ai18837D4E_getLastWave(p); }
    if (cai_playerAI[p] == "aiEEE0FA37") { return aiEEE0FA37_getLastWave(p); }
    if (cai_playerAI[p] == "aiB6B8902B") { return aiB6B8902B_getLastWave(p); }
    if (cai_playerAI[p] == "aiB85ADE2B") { return aiB85ADE2B_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai18837D4E") { ai18837D4E_waves_run(p, target); }
    if (cai_playerAI[p] == "aiEEE0FA37") { aiEEE0FA37_waves_run(p, target); }
    if (cai_playerAI[p] == "aiB6B8902B") { aiB6B8902B_waves_run(p, target); }
    if (cai_playerAI[p] == "aiB85ADE2B") { aiB85ADE2B_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai18837D4E") { ai18837D4E_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiEEE0FA37") { aiEEE0FA37_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiB6B8902B") { aiB6B8902B_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiB85ADE2B") { aiB85ADE2B_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai18837D4E") { ai18837D4E_waves_stop(); }
    if (ai == "aiEEE0FA37") { aiEEE0FA37_waves_stop(); }
    if (ai == "aiB6B8902B") { aiB6B8902B_waves_stop(); }
    if (ai == "aiB85ADE2B") { aiB85ADE2B_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai18837D4E") { ai18837D4E_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiEEE0FA37") { aiEEE0FA37_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiB6B8902B") { aiB6B8902B_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiB85ADE2B") { aiB85ADE2B_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai18837D4E") { ai18837D4E_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiEEE0FA37") { aiEEE0FA37_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiB6B8902B") { aiB6B8902B_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiB85ADE2B") { aiB85ADE2B_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai18837D4E") { return ai18837D4E_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiEEE0FA37") { return aiEEE0FA37_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiB6B8902B") { return aiB6B8902B_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiB85ADE2B") { return aiB85ADE2B_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai18837D4E") { return ai18837D4E_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiEEE0FA37") { return aiEEE0FA37_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiB6B8902B") { return aiB6B8902B_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiB85ADE2B") { return aiB85ADE2B_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai18837D4E") { return ai18837D4E_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiEEE0FA37") { return aiEEE0FA37_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiB6B8902B") { return aiB6B8902B_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiB85ADE2B") { return aiB85ADE2B_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai18837D4E", 5);
    cai_start("aiEEE0FA37", 4);
    cai_start("aiB6B8902B", 2);
    cai_start("aiB85ADE2B", 3);
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
    AICampaignStart(9);
    AICampaignStart(10);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ToggleNovaWeaponReverb (int lp_reverbState) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_reverbState == ge_PRESETWeaponReverb_Indoor)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaIndoorSounds", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaIndoorSounds", -1);
    }
    else {
        TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaOutdoorSounds", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaOutdoorSounds", -1);
    }
}

int gf_GetTerrazineTankIndexFromTankUnit (unit lp_terrazineTankUnit) {
    // Variable Declarations
    int lv_tankIter;

    // Automatic Variable Declarations
    int auto45E26AD5_ae;
    const int auto45E26AD5_ai = 1;

    // Variable Initialization

    // Implementation
    auto45E26AD5_ae = gv_terrazineTankLocationsCount;
    lv_tankIter = 1;
    for ( ; ( (auto45E26AD5_ai >= 0 && lv_tankIter <= auto45E26AD5_ae) || (auto45E26AD5_ai < 0 && lv_tankIter >= auto45E26AD5_ae) ) ; lv_tankIter += auto45E26AD5_ai ) {
        if ((gv_terrazineTankLocations[lv_tankIter].lv_terrazineTankUnit == lp_terrazineTankUnit)) {
            return lv_tankIter;
        }

    }
    return 0;
}

int gf_GetTerrazineTankIndexFromBeaconRegion (region lp_beaconRegion) {
    // Variable Declarations
    int lv_tankIter;

    // Automatic Variable Declarations
    int auto9292E08D_ae;
    const int auto9292E08D_ai = 1;

    // Variable Initialization

    // Implementation
    auto9292E08D_ae = gv_terrazineTankLocationsCount;
    lv_tankIter = 1;
    for ( ; ( (auto9292E08D_ai >= 0 && lv_tankIter <= auto9292E08D_ae) || (auto9292E08D_ai < 0 && lv_tankIter >= auto9292E08D_ae) ) ; lv_tankIter += auto9292E08D_ai ) {
        if ((gv_terrazineTankLocations[lv_tankIter].lv_beaconRegion == lp_beaconRegion)) {
            return lv_tankIter;
        }

    }
    return 0;
}

void gf_PlayerInitiatesGatheringTerrazineTank (int lp_terrazineTankIndex) {
    // Variable Declarations
    bool lv_tankAttackedTransmissionBool;
    bool lv_tankLowLifeTransmissionBool;
    unit lv_progressBarUnit;
    int lv_timerMax;
    int lv_timerCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timerMax = 120;
    lv_timerCount = 120;

    // Implementation
    gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state = ge_PRESETTerrazineTankState_Working;
    UnitSetOwner(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, gv_pLAYER_10_TERRAZINETARGET, true);
    UnitKill(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_beaconUnit);
    Wait(2.0, c_timeAI);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, "Signal WorkStart");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProgressBarDummy", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit));
    lv_progressBarUnit = UnitLastCreated();
    libCMUI_gf_DisplayUnitProgressBar(lv_progressBarUnit, StringExternal("Param/Value/D1544B7F"), 0, lv_timerMax);
    libCMUI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, lv_timerCount);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D63CE5CC"));
    libHots_gf_StorePingForUnit(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, 2, PingLastCreated());
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B8D9895E"), null, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_PlayerInitiatesGatheringTransmissionQ, true, false);
    SoundPlayForPlayer(SoundLink("Event_Nova05_Infested_Horde_01", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova05_Infested_Horde_GrpMv", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_RunInfestedRageWaves(lp_terrazineTankIndex);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit) == true) && (lv_timerCount > 0)) {
        libCMUI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, lv_timerCount);
        lv_timerCount -= 1;
        Wait(1.0, c_timeAI);
    }
    libCMUI_gf_ShowHideUnitProgressBar(lv_progressBarUnit, false);
    UnitRemove(lv_progressBarUnit);
}

void gf_PlayerFinishesGatheringTerrazineTankQ (int lp_terrazineTankIndex) {
    // Automatic Variable Declarations
    unitgroup auto84896655_g;
    int auto84896655_u;
    unit auto84896655_var;
    int auto75861884_val;

    // Implementation
    gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state = ge_PRESETTerrazineTankState_Exhausted;
    UnitSetOwner(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, gv_pLAYER_06_TERRAZINE, true);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, 1));
    PingDestroy(libHots_gf_PingStoredForUnit(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, 2));
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, "SetMinimapVisibility");
    libNtve_gf_MakeUnitInvulnerable(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, true);
    UnitSetState(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, c_unitStateStatusBar, false);
    UnitSetState(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, c_unitStateHighlightable, false);
    UnitSetState(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetState(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, c_unitStateTooltipable, false);
    UnitSetState(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit, c_unitStateSelectable, false);
    auto84896655_g = gv_infestedRageWaveUnits;
    auto84896655_u = UnitGroupCount(auto84896655_g, c_unitCountAll);
    for (;; auto84896655_u -= 1) {
        auto84896655_var = UnitGroupUnitFromEnd(auto84896655_g, auto84896655_u);
        if (auto84896655_var == null) { break; }
        if ((UnitGetCustomValue(auto84896655_var, 0) == lp_terrazineTankIndex)) {
            gf_BurrowAndRemoveInfestedWaveUnit(auto84896655_var);
        }

    }
    gv_objectiveExtractTerrazineCount += 1;
    TriggerExecute(gt_ObjectiveExtractTerrazineUpdate, true, false);
    if ((gv_objectiveExtractTerrazineCount >= gv_objectiveExtractTerrazineMax)) {
        gv_victoryIndex = lp_terrazineTankIndex;
        TriggerExecute(gt_VictorySequence, true, false);
        return ;
    }
    else {
        gf_CreateTerrazineCanisterandAnimateTank(RegionGetCenter(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_beaconRegion), lp_terrazineTankIndex);
        libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/EF3A34CF"));
    }
    Wait(2.0, c_timeAI);
    VisRevealerDestroy(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_revealer);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/506C6D79"), null, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint, 10.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    auto75861884_val = gv_objectiveExtractTerrazineCount;
    if (auto75861884_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00025", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto75861884_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00135", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto75861884_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00083", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto75861884_val == 4) {
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00136", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto75861884_val == 5) {
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00137", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto75861884_val == 6) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00084", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

trigger auto_gf_CreateTerrazineCanisterandAnimateTank_Trigger = null;
point auto_gf_CreateTerrazineCanisterandAnimateTank_lp_targetedPoint;
int auto_gf_CreateTerrazineCanisterandAnimateTank_lp_terrazineIndex;

void gf_CreateTerrazineCanisterandAnimateTank (point lp_targetedPoint, int lp_terrazineIndex) {
    auto_gf_CreateTerrazineCanisterandAnimateTank_lp_targetedPoint = lp_targetedPoint;
    auto_gf_CreateTerrazineCanisterandAnimateTank_lp_terrazineIndex = lp_terrazineIndex;

    if (auto_gf_CreateTerrazineCanisterandAnimateTank_Trigger == null) {
        auto_gf_CreateTerrazineCanisterandAnimateTank_Trigger = TriggerCreate("auto_gf_CreateTerrazineCanisterandAnimateTank_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateTerrazineCanisterandAnimateTank_Trigger, false, false);
}

bool auto_gf_CreateTerrazineCanisterandAnimateTank_TriggerFunc (bool testConds, bool runActions) {
    point lp_targetedPoint = auto_gf_CreateTerrazineCanisterandAnimateTank_lp_targetedPoint;
    int lp_terrazineIndex = auto_gf_CreateTerrazineCanisterandAnimateTank_lp_terrazineIndex;

    // Variable Declarations
    unit lv_canister;
    unit lv_griffin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[lp_terrazineIndex].lv_terrazineTankUnit, "Signal WorkEnd");
    SoundPlayForPlayer(SoundLink("Tal01_FogRollIn", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack2, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(14.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaTerrazineCanister", c_unitCreateIgnorePlacement, gv_pLAYER_06_TERRAZINE, gv_terrazineTankLocations[lp_terrazineIndex].lv_canisterSpawn);
    lv_canister = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 9.0, 3.0);
    libNtve_gf_ShareVisionofUnit(lv_canister, true, gv_pLAYER_01_USER);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 1.000000");
    Wait(4.0, c_timeGame);
    while (!((gv_terrazineCanisterRetrievalActive == false))) {
        Wait(0.25, c_timeGame);
    }
    gv_terrazineCanisterRetrievalActive = true;
    ActorSend(ActorFromDoodad(gv_terrazineTankLocations[lp_terrazineIndex].lv_griffinActor), "SetVisibility 1");
    libNtve_gf_PlayAnimation(ActorFromDoodad(gv_terrazineTankLocations[lp_terrazineIndex].lv_griffinActor), c_animNameDefault, "Stand Work 01", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.0, c_timeGame);
    UnitKill(lv_canister);
    Wait(2.0, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Griffin_Pickup_Flyby");
    gv_terrazineCanisterRetrievalActive = false;
    return true;
}

void gf_ProtossDestroysTerrazineTankQ (int lp_terrazineTankIndex) {
    // Variable Declarations
    fixed lv_timerTime;

    // Automatic Variable Declarations
    int autoAE540E49_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_ShowHideDoodadsInRegion(false, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_protossClaimerWaveTargetRegion, "DoodadSlaynTerrazineGeyserStand");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NaturalGasAir", 0, gv_pLAYER_04_PROTOSS_WAVES, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 128,0,128");
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    Wait(3.0, c_timeAI);
    UnitBehaviorAdd(UnitLastCreated(), "ObjectiveCollectionBeam", UnitLastCreated(), 1);
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2B8BDA35"), null, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint, 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if (gv_objectiveDestroyedProtossTransmissionCount >= 4) {
        gv_objectiveDestroyedProtossTransmissionCount = 1;
    }
    else {
        gv_objectiveDestroyedProtossTransmissionCount = gv_objectiveDestroyedProtossTransmissionCount + 1;
    }
    autoAE540E49_val = gv_objectiveDestroyedProtossTransmissionCount;
    if (autoAE540E49_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00168", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoAE540E49_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00187", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoAE540E49_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00169", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoAE540E49_val == 4) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00170", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    VisRevealerDestroy(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_revealer);
}

void gf_InfestedDestroysTerrazineTank (int lp_terrazineTankIndex) {
    // Variable Declarations
    fixed lv_timerTime;

    // Automatic Variable Declarations
    unitgroup autoC02902CA_g;
    int autoC02902CA_u;
    unit autoC02902CA_var;

    // Variable Initialization

    // Implementation
    autoC02902CA_g = UnitGroup(null, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionCircle(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC02902CA_u = UnitGroupCount(autoC02902CA_g, c_unitCountAll);
    for (;; autoC02902CA_u -= 1) {
        autoC02902CA_var = UnitGroupUnitFromEnd(autoC02902CA_g, autoC02902CA_u);
        if (autoC02902CA_var == null) { break; }
        if ((AIUnitGetWave(autoC02902CA_var) != null)) {
            AIRemoveUnitFromAnyWaves(autoC02902CA_var);
        }

    }
    Wait(2.0, c_timeAI);
    VisRevealerDestroy(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_revealer);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0FABD2CB"), null, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint, 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
}

void gf_BonusObjectivePauseUnpauseUnitGroup (bool lp_pauseUnpause, unitgroup lp_pausingUnitGroup) {
    // Automatic Variable Declarations
    bool auto57E003E7_val;
    unitgroup autoCCF771C0_g;
    int autoCCF771C0_u;
    unit autoCCF771C0_var;
    unitgroup auto725FFC0D_g;
    int auto725FFC0D_u;
    unit auto725FFC0D_var;

    // Implementation
    auto57E003E7_val = lp_pauseUnpause;
    if (auto57E003E7_val == true) {
        autoCCF771C0_g = lp_pausingUnitGroup;
        autoCCF771C0_u = UnitGroupCount(autoCCF771C0_g, c_unitCountAll);
        for (;; autoCCF771C0_u -= 1) {
            autoCCF771C0_var = UnitGroupUnitFromEnd(autoCCF771C0_g, autoCCF771C0_u);
            if (autoCCF771C0_var == null) { break; }
            if ((UnitGetType(autoCCF771C0_var) != "Beacon_Nova") && (UnitGetCustomValue(autoCCF771C0_var, 1) == 0.0)) {
                libNtve_gf_PauseUnit(autoCCF771C0_var, true);
                UnitSetState(autoCCF771C0_var, c_unitStateHighlightable, false);
                UnitSetState(autoCCF771C0_var, c_unitStateSelectable, false);
                UnitSetState(autoCCF771C0_var, c_unitStateTargetable, false);
                libNtve_gf_MakeUnitUncommandable(autoCCF771C0_var, true);
                libNtve_gf_MakeUnitInvulnerable(autoCCF771C0_var, true);
            }

        }
    }
    else if (auto57E003E7_val == false) {
        auto725FFC0D_g = lp_pausingUnitGroup;
        auto725FFC0D_u = UnitGroupCount(auto725FFC0D_g, c_unitCountAll);
        for (;; auto725FFC0D_u -= 1) {
            auto725FFC0D_var = UnitGroupUnitFromEnd(auto725FFC0D_g, auto725FFC0D_u);
            if (auto725FFC0D_var == null) { break; }
            if ((UnitGetType(auto725FFC0D_var) != "Beacon_Nova") && (UnitGetCustomValue(auto725FFC0D_var, 1) == 0.0)) {
                libNtve_gf_PauseUnit(auto725FFC0D_var, false);
                UnitSetState(auto725FFC0D_var, c_unitStateHighlightable, true);
                UnitSetState(auto725FFC0D_var, c_unitStateSelectable, true);
                UnitSetState(auto725FFC0D_var, c_unitStateTargetable, true);
                libNtve_gf_MakeUnitUncommandable(auto725FFC0D_var, false);
                libNtve_gf_MakeUnitInvulnerable(auto725FFC0D_var, false);
            }

        }
    }
    else {
    }
}

trigger auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_Trigger = null;
unit auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_lp_infestedUnit;

void gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit (unit lp_infestedUnit) {
    auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_lp_infestedUnit = lp_infestedUnit;

    if (auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_Trigger == null) {
        auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_Trigger = TriggerCreate("auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_Trigger, false, false);
}

bool auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_infestedUnit = auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_lp_infestedUnit;

    // Automatic Variable Declarations
    // Implementation
    AIRemoveUnitFromAnyWaves(lp_infestedUnit);
    Wait(RandomFixed(2.0, 5.0), c_timeGame);
    while ((UnitIsAlive(lp_infestedUnit) == true) && ((UnitGetType(lp_infestedUnit) == "InfestedCivilian") || (UnitGetType(lp_infestedUnit) == "InfestedExploder") || (UnitGetType(lp_infestedUnit) == "InfestedTerranCampaign") || (UnitGetType(lp_infestedUnit) == "InfestedAbomination"))) {
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedCivilianDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedExploderDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedTerranCampaignDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedAbominationDown", 0)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(lp_infestedUnit) == true)) {
        UnitRemove(lp_infestedUnit);
    }

    return true;
}

void gf_BonusObjectiveBlightbringerMoveToNewEggSpot (unit lp_blightbringer, point lp_targetPoint) {
    // Automatic Variable Declarations
    // Implementation
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_blightbringer) == true) && (UnitGetType(lp_blightbringer) == "Blightbringer")) {
        UnitIssueOrder(lp_blightbringer, Order(AbilityCommand("BurrowBlightbringerDown", 0)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    libNtve_gf_MakeUnitInvulnerable(lp_blightbringer, true);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_blightbringer) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_blightbringer), lp_targetPoint) > 0.5)) {
        UnitIssueOrder(lp_blightbringer, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    libNtve_gf_MakeUnitInvulnerable(lp_blightbringer, false);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_blightbringer) == true) && (UnitGetType(lp_blightbringer) == "BlightbringerBurrowed")) {
        UnitIssueOrder(lp_blightbringer, Order(AbilityCommand("BurrowBlightbringerUp", 0)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
}

void gf_BonusObjectiveBlightbringerEgg (unit lp_blightbringer, point lp_eggPoint, bool lp_bigEgg) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(lp_blightbringer) == true) && (UnitGroupCount(gv_bonusObjective_HatchedInfestedGroup, c_unitCountAlive) < 10)) {
        if ((lp_bigEgg == true)) {
            UnitIssueOrder(lp_blightbringer, OrderTargetingPoint(AbilityCommand("BlightbringerCreateLargeEggs", 0), lp_eggPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_blightbringer, OrderTargetingPoint(AbilityCommand("BlightbringerCreateEggs", 0), lp_eggPoint), c_orderQueueReplace);
        }
        Wait(0.26, c_timeGame);
    }

}

void gf_BonusObjectiveBlightbringerCleanup () {
    // Automatic Variable Declarations
    unitgroup autoABDBBD63_g;
    int autoABDBBD63_u;
    unit autoABDBBD63_var;

    // Implementation
    if ((UnitIsAlive(gv_bonusObjective_Blightbringer) == true)) {
        UnitSetPosition(gv_bonusObjective_Blightbringer, Point(47.0, 32.0), false);
        UnitSetFacing(gv_bonusObjective_Blightbringer, 140.0, 0.0);
        UnitIssueOrder(gv_bonusObjective_Blightbringer, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

    if (((gv_bonusObjective_BlightbringerActive == true) || (UnitIsAlive(gv_bonusObjective_Blightbringer) == false))) {
        autoABDBBD63_g = UnitGroup(null, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoABDBBD63_u = UnitGroupCount(autoABDBBD63_g, c_unitCountAll);
        for (;; autoABDBBD63_u -= 1) {
            autoABDBBD63_var = UnitGroupUnitFromEnd(autoABDBBD63_g, autoABDBBD63_u);
            if (autoABDBBD63_var == null) { break; }
            if (((UnitGetType(autoABDBBD63_var) == "InfestedCivilian") || (UnitGetType(autoABDBBD63_var) == "InfestedCivilianBurrowed") || (UnitGetType(autoABDBBD63_var) == "InfestedExploder") || (UnitGetType(autoABDBBD63_var) == "InfestedExploderBurrowed") || (UnitGetType(autoABDBBD63_var) == "InfestedTerranCampaign") || (UnitGetType(autoABDBBD63_var) == "InfestedTerranCampaign") || (UnitGetType(autoABDBBD63_var) == "InfestedAbomination") || (UnitGetType(autoABDBBD63_var) == "InfestedAbominationBurrowed") || (UnitGetType(autoABDBBD63_var) == "BlightbringerEgg") || (UnitGetType(autoABDBBD63_var) == "BlightbringerLargeEgg") || (UnitGetType(autoABDBBD63_var) == "BlightbringerEggWeapon") || (UnitGetType(autoABDBBD63_var) == "BlightbringerLargeEggWeapon") || (UnitGetType(autoABDBBD63_var) == "BlightbringerVileStream") || (UnitGetType(autoABDBBD63_var) == "SpitAcidWeapon") || (UnitGetType(autoABDBBD63_var) == "NovaAcidPuddle"))) {
                UnitRemove(autoABDBBD63_var);
            }

        }
    }

    TriggerStop(gt_BonusObjectiveBlightbringerBattleAI);
    TriggerStop(gt_BonusObjectiveInfestedAttackNova);
}

void gf_BonusObjectiveEradicatorMissilesRing () {
    // Variable Declarations
    fixed lv_currentAngle;
    fixed lv_initialAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        lv_currentAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        lv_initialAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        while ((lv_currentAngle < (lv_initialAngle + 360.0)) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            lv_currentAngle += 52.0;
            if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)) == true)) {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)), c_orderQueueAddToEnd);
            }

            Wait(0.08, c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }

    if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        lv_currentAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        lv_initialAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        while ((lv_currentAngle > (lv_initialAngle - 360.0)) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            lv_currentAngle -= 20.0;
            if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 9.0, lv_currentAngle)) == true)) {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 9.0, lv_currentAngle)), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)), c_orderQueueAddToEnd);
            }

            Wait(0.05, c_timeGame);
        }
        Wait(1.0, c_timeGame);
    }

}

void gf_BonusObjectiveEradicatorMissilesAttackDirectly () {
    // Variable Declarations
    fixed lv_currentAngle;
    fixed lv_initialAngle;
    const int lv_maxAttacks = 5;
    int lv_attackCounter;
    fixed lv_untitledVariable001;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingUnit(AbilityCommand("NovaEradicatorTurnTurret", 0), gv_nova), c_orderQueueAddToEnd);
    while ((UnitIsAlive(gv_eradicatorTypeMissile) == true) && (lv_attackCounter <= lv_maxAttacks)) {
        if ((UnitGetPropertyFixed(gv_nova, c_unitPropMovementSpeedCurrent, c_unitPropCurrent) > 0.0)) {
            UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_nova), UnitGetPropertyFixed(gv_nova, c_unitPropMovementSpeedCurrent, c_unitPropCurrent), UnitGetFacing(gv_nova))), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), UnitGetPosition(gv_nova)), c_orderQueueAddToEnd);
        }
        lv_attackCounter += 1;
        Wait(0.7, c_timeGame);
    }
}

void gf_BonusObjectiveEradicatorMissilesEnrageRing () {
    // Variable Declarations
    fixed lv_currentAngle;
    fixed lv_initialAngle;
    fixed lv_missileRange;
    fixed lv_missileVolleyAngle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missileRange = 6.0;

    // Implementation
    if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        lv_currentAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        lv_initialAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        while ((lv_currentAngle < (lv_initialAngle + 360.0)) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            lv_currentAngle += 52.0;
            if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)) == true)) {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)), c_orderQueueAddToEnd);
            }

            Wait(0.08, c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }

    lv_missileVolleyAngle = UnitGetFacing(gv_eradicatorTypeMissile);
    while ((UnitIsAlive(gv_eradicatorTypeMissile) == true) && (lv_missileRange <= 15)) {
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), lv_missileRange, (lv_missileVolleyAngle + 0.0))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), lv_missileRange, (lv_missileVolleyAngle + 72.0))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), lv_missileRange, (lv_missileVolleyAngle + 144.0))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), lv_missileRange, (lv_missileVolleyAngle + 216.0))), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), lv_missileRange, (lv_missileVolleyAngle + 288.0))), c_orderQueueAddToEnd);
        lv_missileVolleyAngle += 20.0;
        lv_missileRange += 2.0;
        Wait(0.08, c_timeGame);
    }
}

void gf_BonusObjectiveEradicatorMissilesEntranceAttack () {
    // Automatic Variable Declarations
    // Implementation
    while ((gv_eradicatorDenyPlayerSafeZone == true)) {
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingUnit(AbilityCommand("NovaEradicatorTurnTurret", 0), gv_nova), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), UnitGetPosition(gv_nova)), c_orderQueueAddToEnd);
        Wait(0.5, c_timeGame);
    }
}

void gf_BonusObjectiveEradicatorCannonFiveWayShot () {
    // Variable Declarations
    point lv_startPoint;
    point lv_endPoint;
    int lv_shotCount;
    fixed lv_interpolationOffset;

    // Automatic Variable Declarations
    int autoC17E2FA7_val;
    int auto902A0F71_val;

    // Variable Initialization

    // Implementation
    autoC17E2FA7_val = gv_eradicatorTypeCannonPosition;
    if (autoC17E2FA7_val == ge_BonusObjectiveEradicatorPositions_EradicatorNorth) {
        lv_startPoint = PointFromId(2106);
        lv_endPoint = PointFromId(2109);
    }
    else if (autoC17E2FA7_val == ge_BonusObjectiveEradicatorPositions_EradicatorEast) {
        lv_startPoint = PointFromId(2108);
        lv_endPoint = PointFromId(2104);
    }
    else if (autoC17E2FA7_val == ge_BonusObjectiveEradicatorPositions_EradicatorSouth) {
        lv_startPoint = PointFromId(2109);
        lv_endPoint = PointFromId(2106);
    }
    else if (autoC17E2FA7_val == ge_BonusObjectiveEradicatorPositions_EradicatorWest) {
        lv_startPoint = PointFromId(2104);
        lv_endPoint = PointFromId(2108);
    }
    else {
    }
    while ((UnitIsAlive(gv_eradicatorTypeCannon) == true) && (lv_shotCount < 5)) {
        auto902A0F71_val = lv_shotCount;
        if (auto902A0F71_val == 0) {
            lv_interpolationOffset = 0.0;
        }
        else if (auto902A0F71_val == 1) {
            lv_interpolationOffset = 0.25;
        }
        else if (auto902A0F71_val == 2) {
            lv_interpolationOffset = 0.5;
        }
        else if (auto902A0F71_val == 3) {
            lv_interpolationOffset = 0.75;
        }
        else if (auto902A0F71_val == 4) {
            lv_interpolationOffset = 1.0;
        }
        else {
        }
        if (((lv_shotCount == 0) || (libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1))) {
            gf_BonusObjectiveEradicatorCannonAttack(PointInterpolate(lv_startPoint, lv_endPoint, lv_interpolationOffset));
        }
        else {
            gf_BonusObjectiveEradicatorCannonAttackNoTurn(PointInterpolate(lv_startPoint, lv_endPoint, lv_interpolationOffset));
        }
        lv_shotCount += 1;
        Wait(libLotv_gf_DifficultyValueFixed2(3.1, 3.1, 1.6, 1.6), c_timeGame);
    }
}

void gf_BonusObjectiveEradicatorCannonFanAttack () {
    // Variable Declarations
    point lv_targetPoint;
    int lv_shotCount;
    fixed lv_leftArc;
    fixed lv_rightArc;

    // Automatic Variable Declarations
    int autoC7E9A424_val;

    // Variable Initialization

    // Implementation
    gf_BonusObjectiveEradicatorCannonAttack(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, UnitGetPosition(gv_nova)));
    Wait(0.5, c_timeGame);
    while ((UnitIsAlive(gv_eradicatorTypeCannon) == true) && (lv_shotCount < 4)) {
        autoC7E9A424_val = lv_shotCount;
        if (autoC7E9A424_val == 0) {
            lv_leftArc -= 30.0;
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, (UnitGetFacing(gv_eradicatorTypeCannon) + lv_leftArc));
        }
        else if (autoC7E9A424_val == 1) {
            lv_rightArc += 30.0;
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, (UnitGetFacing(gv_eradicatorTypeCannon) + lv_rightArc));
        }
        else if (autoC7E9A424_val == 2) {
            lv_leftArc -= 30.0;
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, (UnitGetFacing(gv_eradicatorTypeCannon) + lv_leftArc));
        }
        else if (autoC7E9A424_val == 3) {
            lv_rightArc += 30.0;
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, (UnitGetFacing(gv_eradicatorTypeCannon) + lv_rightArc));
        }
        else {
        }
        lv_shotCount += 1;
        gf_BonusObjectiveEradicatorCannonAttackNoTurn(lv_targetPoint);
        Wait(0.5, c_timeGame);
    }
}

trigger auto_gf_BonusObjectiveEradicatorCannonAttack_Trigger = null;
point auto_gf_BonusObjectiveEradicatorCannonAttack_lp_target;

void gf_BonusObjectiveEradicatorCannonAttack (point lp_target) {
    auto_gf_BonusObjectiveEradicatorCannonAttack_lp_target = lp_target;

    if (auto_gf_BonusObjectiveEradicatorCannonAttack_Trigger == null) {
        auto_gf_BonusObjectiveEradicatorCannonAttack_Trigger = TriggerCreate("auto_gf_BonusObjectiveEradicatorCannonAttack_TriggerFunc");
    }

    TriggerExecute(auto_gf_BonusObjectiveEradicatorCannonAttack_Trigger, false, false);
}

bool auto_gf_BonusObjectiveEradicatorCannonAttack_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_BonusObjectiveEradicatorCannonAttack_lp_target;

    // Variable Declarations
    int lv_dEBUG_SHOT_NUMBER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), lp_target), c_orderQueueReplace);
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgun", 0), lp_target), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), lp_target), c_orderQueueReplace);
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgunFire", 0), lp_target), c_orderQueueReplace);
    }

    return true;
}

trigger auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_Trigger = null;
point auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_lp_target;

void gf_BonusObjectiveEradicatorCannonAttackNoTurn (point lp_target) {
    auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_lp_target = lp_target;

    if (auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_Trigger == null) {
        auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_Trigger = TriggerCreate("auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_TriggerFunc");
    }

    TriggerExecute(auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_Trigger, false, false);
}

bool auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_lp_target;

    // Variable Declarations
    int lv_dEBUG_SHOT_NUMBER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgun", 0), lp_target), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), lp_target), c_orderQueueReplace);
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgunFire", 0), lp_target), c_orderQueueReplace);
    }

    return true;
}

void gf_BonusObjectiveEradicatorReset () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_BonusObjectiveEradicatorNovaEntersRoom, true);
    TriggerEnable(gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ, true);
    TriggerEnable(gt_BonusObjectiveActivateEradicatorTransmissionQ, true);
    TriggerEnable(gt_BonusObjectivePlayerLeftEradicatorEntrance, false);
    TriggerEnable(gt_BonusObjectivePlayerLoiteringInEradicatorEntrance, false);
    TriggerEnable(gt_BonusObjectivePlayerReturnsToEradicatorEntrance, false);
    libNtve_gf_StopTimer(gv_eradicatorPlayerEntranceLoiterTimer);
    UnitIssueOrder(UnitFromId(896), Order(AbilityCommand("UmojanLabDoorsThinLeftLowered", 0)), c_orderQueueReplace);
    TriggerStop(gt_BonusObjectiveEradicatorTypeCannon);
    TriggerStop(gt_BonusObjectiveEradicatorTypeCannonEnrage);
    TriggerStop(gt_BonusObjectiveEradicatorTypeMissile);
    TriggerStop(gt_BonusObjectiveEradicatorTypeMissileEnrage);
    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        UnitSetPosition(gv_eradicatorTypeCannon, PointFromId(2106), false);
        libNtve_gf_MakeUnitFacePoint(gv_eradicatorTypeCannon, PointFromId(2094), 0.0);
        gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorEast;
        UnitSetPosition(gv_eradicatorTypeMissile, PointFromId(2094), false);
        libNtve_gf_MakeUnitFacePoint(gv_eradicatorTypeCannon, PointFromId(868), 0.0);
        UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_eradicatorTypeMissile, Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToEnd);
    }
    else if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitSetPosition(gv_eradicatorTypeCannon, PointFromId(2094), false);
        libNtve_gf_MakeUnitFacePoint(gv_eradicatorTypeCannon, PointFromId(868), 0.0);
        UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToEnd);
    }
    else if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        UnitSetPosition(gv_eradicatorTypeMissile, PointFromId(2094), false);
        libNtve_gf_MakeUnitFacePoint(gv_eradicatorTypeMissile, PointFromId(868), 0.0);
        UnitIssueOrder(gv_eradicatorTypeMissile, Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToEnd);
    }
}

trigger auto_gf_AIMonitorBullyRebuildRegion_Trigger = null;
int auto_gf_AIMonitorBullyRebuildRegion_lp_player;
region auto_gf_AIMonitorBullyRebuildRegion_lp_bullyRebuildRegion;

void gf_AIMonitorBullyRebuildRegion (int lp_player, region lp_bullyRebuildRegion) {
    auto_gf_AIMonitorBullyRebuildRegion_lp_player = lp_player;
    auto_gf_AIMonitorBullyRebuildRegion_lp_bullyRebuildRegion = lp_bullyRebuildRegion;

    if (auto_gf_AIMonitorBullyRebuildRegion_Trigger == null) {
        auto_gf_AIMonitorBullyRebuildRegion_Trigger = TriggerCreate("auto_gf_AIMonitorBullyRebuildRegion_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIMonitorBullyRebuildRegion_Trigger, false, false);
}

bool auto_gf_AIMonitorBullyRebuildRegion_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AIMonitorBullyRebuildRegion_lp_player;
    region lp_bullyRebuildRegion = auto_gf_AIMonitorBullyRebuildRegion_lp_bullyRebuildRegion;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_DeclareNextTown(lp_player, RegionGetCenter(lp_bullyRebuildRegion));
    Wait(2.0, c_timeAI);
    while (!(((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || ((UnitCount("InfestableColonistHut", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0) && (UnitCount("InfestedCC", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0) && (UnitCount("InfestedBarracks", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0) && (UnitCount("InfestedFactory", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0) && (UnitCount("InfestedStarport", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0) && (UnitCount("InfestedEngBay", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0) && (UnitCount("InfestedArmory", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0) && (UnitCount("InfestedBunker", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0) && (UnitCount("InfestedSupply", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0) && (UnitCount("InfestedMissileTurret", lp_player, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 0))))) {
        Wait(1.0, c_timeAI);
    }
    AIToggleBulliesInRegion(lp_player, lp_bullyRebuildRegion, false);
    return true;
}

void gf_AIOracle (int lp_owner, unit lp_oracle, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unit lv_victim;
    unitgroup lv_cloakedEnemyGroup12;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto141DBA84_g;
    int auto141DBA84_u;

    // Variable Initialization
    lv_cloakedEnemyGroup12 = UnitGroupEmpty();

    // Implementation
    lv_cloakedEnemyGroup12 = gf_EnemiesWithinRange(lp_oracle, 12.0, UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    if ((UnitGroupCount(lv_cloakedEnemyGroup12, c_unitCountAlive) > 0)) {
        if ((UnitAbilityCheck(lp_oracle, "OracleRevelationV2", true) == true) && (UnitCheckAbilCmdState(lp_oracle, AbilityCommand("OracleRevelationV2", 0), c_cmdStateCooldown) == false)) {
            lv_victim = UnitGroupRandomUnit(lv_cloakedEnemyGroup12, c_unitCountAlive);
            auto141DBA84_g = lv_cloakedEnemyGroup12;
            auto141DBA84_u = UnitGroupCount(auto141DBA84_g, c_unitCountAll);
            for (;; auto141DBA84_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto141DBA84_g, auto141DBA84_u);
                if (lv_currentUnit == null) { break; }
                if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropLife, c_unitPropCurrent) >= 200.0) && (libNtve_gf_UnitIsVisibleToPlayer(lv_currentUnit, gv_pLAYER_02_PROTOSS_BULLIES) == false)) {
                    lv_victim = lv_currentUnit;
                    break;
                }

            }
            libNtve_gf_AICast(lp_oracle, OrderTargetingPoint(AbilityCommand("OracleRevelationV2", 0), UnitGetPosition(lv_victim)));
        }

    }

}

unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

void gf_RunInfestedRageWaves (int lp_terrazineTankIndex) {
    // Variable Declarations
    int lv_terrazineTankIter;
    int lv_terrazineTankWorkingOrExhaustedCount;

    // Automatic Variable Declarations
    int auto84CD3957_ae;
    const int auto84CD3957_ai = 1;
    int auto63856149_val;
    int auto1F527A4B_val;

    // Variable Initialization

    // Implementation
    auto84CD3957_ae = gv_terrazineTankLocationsCount;
    lv_terrazineTankIter = 1;
    for ( ; ( (auto84CD3957_ai >= 0 && lv_terrazineTankIter <= auto84CD3957_ae) || (auto84CD3957_ai < 0 && lv_terrazineTankIter >= auto84CD3957_ae) ) ; lv_terrazineTankIter += auto84CD3957_ai ) {
        if (((gv_terrazineTankLocations[lv_terrazineTankIter].lv_state == ge_PRESETTerrazineTankState_Working) || (gv_terrazineTankLocations[lv_terrazineTankIter].lv_state == ge_PRESETTerrazineTankState_Exhausted))) {
            lv_terrazineTankWorkingOrExhaustedCount += 1;
        }

    }
    auto63856149_val = lv_terrazineTankWorkingOrExhaustedCount;
    if (auto63856149_val == 1) {
        gf_InfestedRageWavesFirst(lp_terrazineTankIndex);
    }
    else if (auto63856149_val == 2) {
        gf_InfestedRageWavesEarly(lp_terrazineTankIndex);
    }
    else if (auto63856149_val == 3) {
        gf_InfestedRageWavesMid(lp_terrazineTankIndex);
    }
    else if (auto63856149_val == 4) {
        gf_InfestedRageWavesMid(lp_terrazineTankIndex);
    }
    else if (auto63856149_val == 5) {
        gf_InfestedRageWavesLate(lp_terrazineTankIndex);
    }
    else {
        gf_InfestedRageWavesLate(lp_terrazineTankIndex);
    }
    auto1F527A4B_val = lp_terrazineTankIndex;
    if (auto1F527A4B_val == 1) {
        gf_SpecialRageWaveJustMoreDudes(1);
    }
    else if (auto1F527A4B_val == 2) {
        gf_SpecialRageWavesColonyShipExplodes(2);
    }
    else if (auto1F527A4B_val == 3) {
        gf_SpecialRageWavesNydusWorms(3);
    }
    else if (auto1F527A4B_val == 4) {
        gf_SpecialRageWavesFlyers(4);
    }
    else if (auto1F527A4B_val == 5) {
        gf_SpecialRageWaveExploders(5);
    }
    else if (auto1F527A4B_val == 6) {
        gf_SpecialRageWavesColonyShipExplodes(6);
    }
    else if (auto1F527A4B_val == 7) {
        gf_SpecialRageWavesSiegeTanks(7);
    }
    else if (auto1F527A4B_val == 8) {
        gf_SpecialRageWaveEggPoppers(8);
    }
    else if (auto1F527A4B_val == 9) {
        gf_SpecialRageWaveJustMoreDudes(9);
    }
    else {
    }
}

trigger auto_gf_InfestedRageWavesFirst_Trigger = null;
int auto_gf_InfestedRageWavesFirst_lp_terrazineTankIndex;

void gf_InfestedRageWavesFirst (int lp_terrazineTankIndex) {
    auto_gf_InfestedRageWavesFirst_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_InfestedRageWavesFirst_Trigger == null) {
        auto_gf_InfestedRageWavesFirst_Trigger = TriggerCreate("auto_gf_InfestedRageWavesFirst_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedRageWavesFirst_Trigger, false, false);
}

bool auto_gf_InfestedRageWavesFirst_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_InfestedRageWavesFirst_lp_terrazineTankIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;

    // Automatic Variable Declarations
    const int autoBC94B77C_n = 5;
    int autoBC94B77C_i;
    const int auto10D25486_n = 6;
    int auto10D25486_i;

    // Variable Initialization

    // Implementation
    if ((lp_terrazineTankIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    Wait(5.0, c_timeAI);
    for (autoBC94B77C_i = 1; autoBC94B77C_i <= autoBC94B77C_n; autoBC94B77C_i += 1) {
        if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, 3, 0, libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), 0, 0);
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion02, true, 3, 0, libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), 0, 0);
            Wait(10.0, c_timeAI);
        }

    }
    for (auto10D25486_i = 1; auto10D25486_i <= auto10D25486_n; auto10D25486_i += 1) {
        if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, libLotv_gf_DifficultyValueInt2(3, 3, 5, 7), 0, libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), 0, 0);
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion02, true, libLotv_gf_DifficultyValueInt2(3, 3, 5, 7), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), 0, 0);
            Wait(10.0, c_timeAI);
        }

    }
    return true;
}

trigger auto_gf_InfestedRageWavesEarly_Trigger = null;
int auto_gf_InfestedRageWavesEarly_lp_terrazineTankIndex;

void gf_InfestedRageWavesEarly (int lp_terrazineTankIndex) {
    auto_gf_InfestedRageWavesEarly_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_InfestedRageWavesEarly_Trigger == null) {
        auto_gf_InfestedRageWavesEarly_Trigger = TriggerCreate("auto_gf_InfestedRageWavesEarly_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedRageWavesEarly_Trigger, false, false);
}

bool auto_gf_InfestedRageWavesEarly_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_InfestedRageWavesEarly_lp_terrazineTankIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;

    // Automatic Variable Declarations
    const int auto48C2BDE9_n = 5;
    int auto48C2BDE9_i;
    const int auto246363A6_n = 5;
    int auto246363A6_i;

    // Variable Initialization

    // Implementation
    if ((lp_terrazineTankIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    for (auto48C2BDE9_i = 1; auto48C2BDE9_i <= auto48C2BDE9_n; auto48C2BDE9_i += 1) {
        if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), 0, libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), 0, 0);
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion02, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), 0, 0);
            Wait(10.0, c_timeAI);
        }

    }
    for (auto246363A6_i = 1; auto246363A6_i <= auto246363A6_n; auto246363A6_i += 1) {
        if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), 0, 0);
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion02, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), 0);
            Wait(10.0, c_timeAI);
        }

    }
    return true;
}

trigger auto_gf_InfestedRageWavesMid_Trigger = null;
int auto_gf_InfestedRageWavesMid_lp_terrazineTankIndex;

void gf_InfestedRageWavesMid (int lp_terrazineTankIndex) {
    auto_gf_InfestedRageWavesMid_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_InfestedRageWavesMid_Trigger == null) {
        auto_gf_InfestedRageWavesMid_Trigger = TriggerCreate("auto_gf_InfestedRageWavesMid_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedRageWavesMid_Trigger, false, false);
}

bool auto_gf_InfestedRageWavesMid_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_InfestedRageWavesMid_lp_terrazineTankIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;

    // Automatic Variable Declarations
    const int autoA06F3702_n = 5;
    int autoA06F3702_i;
    const int auto0F030009_n = 5;
    int auto0F030009_i;

    // Variable Initialization

    // Implementation
    if ((lp_terrazineTankIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    for (autoA06F3702_i = 1; autoA06F3702_i <= autoA06F3702_n; autoA06F3702_i += 1) {
        if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), 2, libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), 0);
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion02, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), 0, libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), 0);
            Wait(10.0, c_timeAI);
        }

    }
    for (auto0F030009_i = 1; auto0F030009_i <= auto0F030009_n; auto0F030009_i += 1) {
        if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), 0);
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion02, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), 0, libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1));
            Wait(10.0, c_timeAI);
        }

    }
    return true;
}

trigger auto_gf_InfestedRageWavesLate_Trigger = null;
int auto_gf_InfestedRageWavesLate_lp_terrazineTankIndex;

void gf_InfestedRageWavesLate (int lp_terrazineTankIndex) {
    auto_gf_InfestedRageWavesLate_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_InfestedRageWavesLate_Trigger == null) {
        auto_gf_InfestedRageWavesLate_Trigger = TriggerCreate("auto_gf_InfestedRageWavesLate_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedRageWavesLate_Trigger, false, false);
}

bool auto_gf_InfestedRageWavesLate_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_InfestedRageWavesLate_lp_terrazineTankIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;

    // Automatic Variable Declarations
    const int auto78D8C335_n = 5;
    int auto78D8C335_i;
    const int auto4DBD467D_n = 5;
    int auto4DBD467D_i;

    // Variable Initialization

    // Implementation
    if ((lp_terrazineTankIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    for (auto78D8C335_i = 1; auto78D8C335_i <= auto78D8C335_n; auto78D8C335_i += 1) {
        if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), 0);
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion02, true, libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), libLotv_gf_DifficultyValueInt2(4, 4, 5, 5), libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1));
            Wait(10.0, c_timeAI);
        }

    }
    for (auto4DBD467D_i = 1; auto4DBD467D_i <= auto4DBD467D_n; auto4DBD467D_i += 1) {
        if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1));
            gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion02, true, libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), 2, 2, libLotv_gf_DifficultyValueInt2(0, 0, 2, 3), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1));
            Wait(10.0, c_timeAI);
        }

    }
    return true;
}

void gf_SendInfestedRageWave (int lp_terrazineTankIndex, region lp_spawnRegion, bool lp_waveStartsBurrowed, int lp_infestedTerranCount, int lp_infestedExploderCount, int lp_infestedMarineCount, int lp_aberrationCount, int lp_infestedBansheeCount) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetTargetUnit(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionGetCenter(lp_spawnRegion));
    if ((lp_waveStartsBurrowed == true)) {
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "InfestedCivilianBurrowed", lp_infestedTerranCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "InfestedExploderBurrowed", lp_infestedExploderCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "InfestedTerranCampaignBurrowed", lp_infestedMarineCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "InfestedAbominationBurrowed", lp_aberrationCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "NovaInfestedBansheeBurrowed", lp_infestedBansheeCount, lp_spawnRegion);
    }
    else {
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "InfestedCivilian", lp_infestedTerranCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "InfestedExploder", lp_infestedExploderCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "InfestedTerranCampaign", lp_infestedMarineCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "InfestedAbomination", lp_aberrationCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_terrazineTankIndex, "NovaInfestedBanshee", lp_infestedBansheeCount, lp_spawnRegion);
    }
    AIAttackWaveSend(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, 0, true);
}

void gf_AddInfestedUnitsToRageWave (int lp_terrazineTankIndex, string lp_infestedUnitType, int lp_count, region lp_spawnRegion) {
    // Automatic Variable Declarations
    int auto07296E11_n;
    int auto07296E11_i;

    // Implementation
    auto07296E11_n = lp_count;
    for (auto07296E11_i = 1; auto07296E11_i <= auto07296E11_n; auto07296E11_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_infestedUnitType, 0, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionRandomPoint(lp_spawnRegion));
        UnitGroupAdd(gv_infestedRageWaveUnits, UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 0, lp_terrazineTankIndex);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("NovaInfestedBansheeLand", 1)), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIAttackWaveUseUnit(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitLastCreated());
    }
}

trigger auto_gf_BurrowAndRemoveInfestedWaveUnit_Trigger = null;
unit auto_gf_BurrowAndRemoveInfestedWaveUnit_lp_infestedUnit;

void gf_BurrowAndRemoveInfestedWaveUnit (unit lp_infestedUnit) {
    auto_gf_BurrowAndRemoveInfestedWaveUnit_lp_infestedUnit = lp_infestedUnit;

    if (auto_gf_BurrowAndRemoveInfestedWaveUnit_Trigger == null) {
        auto_gf_BurrowAndRemoveInfestedWaveUnit_Trigger = TriggerCreate("auto_gf_BurrowAndRemoveInfestedWaveUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_BurrowAndRemoveInfestedWaveUnit_Trigger, false, false);
}

bool auto_gf_BurrowAndRemoveInfestedWaveUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_infestedUnit = auto_gf_BurrowAndRemoveInfestedWaveUnit_lp_infestedUnit;

    // Automatic Variable Declarations
    // Implementation
    AIRemoveUnitFromAnyWaves(lp_infestedUnit);
    Wait(RandomFixed(2.0, 5.0), c_timeAI);
    while ((UnitIsAlive(lp_infestedUnit) == true) && ((UnitGetType(lp_infestedUnit) == "InfestedCivilian") || (UnitGetType(lp_infestedUnit) == "InfestedExploder") || (UnitGetType(lp_infestedUnit) == "InfestedTerranCampaign") || (UnitGetType(lp_infestedUnit) == "InfestedAbomination") || (UnitGetType(lp_infestedUnit) == "NovaInfestedBanshee"))) {
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedCivilianDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedExploderDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedTerranCampaignDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedAbominationDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("NovaInfestedBansheeLand", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeAI);
    }
    if ((UnitIsAlive(lp_infestedUnit) == true)) {
        UnitRemove(lp_infestedUnit);
    }

    return true;
}

trigger auto_gf_SpecialRageWaveJustMoreDudes_Trigger = null;
int auto_gf_SpecialRageWaveJustMoreDudes_lp_terrazineTankIndex;

void gf_SpecialRageWaveJustMoreDudes (int lp_terrazineTankIndex) {
    auto_gf_SpecialRageWaveJustMoreDudes_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_SpecialRageWaveJustMoreDudes_Trigger == null) {
        auto_gf_SpecialRageWaveJustMoreDudes_Trigger = TriggerCreate("auto_gf_SpecialRageWaveJustMoreDudes_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWaveJustMoreDudes_Trigger, false, false);
}

bool auto_gf_SpecialRageWaveJustMoreDudes_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_SpecialRageWaveJustMoreDudes_lp_terrazineTankIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(63.0, c_timeAI);
    if ((lp_terrazineTankIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves 0" + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("Terrazine Waves " + IntToString(lp_terrazineTankIndex) + " - 02"));
    }
    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), libLotv_gf_DifficultyValueInt2(1, 1, 3, 3), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion02, true, libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), 2, libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion01, true, libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), 0);
    }

    return true;
}

trigger auto_gf_SpecialRageWaveExploders_Trigger = null;
int auto_gf_SpecialRageWaveExploders_lp_terrazineTankIndex;

void gf_SpecialRageWaveExploders (int lp_terrazineTankIndex) {
    auto_gf_SpecialRageWaveExploders_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_SpecialRageWaveExploders_Trigger == null) {
        auto_gf_SpecialRageWaveExploders_Trigger = TriggerCreate("auto_gf_SpecialRageWaveExploders_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWaveExploders_Trigger, false, false);
}

bool auto_gf_SpecialRageWaveExploders_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_SpecialRageWaveExploders_lp_terrazineTankIndex;

    // Variable Declarations
    region lv_spawnRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(63.0, c_timeAI);
    if ((lp_terrazineTankIndex == 1)) {
        lv_spawnRegion = RegionFromId(57);
    }
    else {
        lv_spawnRegion = RegionFromId(58);
    }
    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion, true, 0, libLotv_gf_DifficultyValueInt2(6, 6, 8, 10), 0, 0, 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion, true, 0, libLotv_gf_DifficultyValueInt2(10, 10, 12, 14), 0, 0, 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion, true, 0, libLotv_gf_DifficultyValueInt2(15, 15, 18, 21), 0, 0, 0);
    }

    return true;
}

trigger auto_gf_SpecialRageWaveEggPoppers_Trigger = null;
int auto_gf_SpecialRageWaveEggPoppers_lp_terrazineTankIndex;

void gf_SpecialRageWaveEggPoppers (int lp_terrazineTankIndex) {
    auto_gf_SpecialRageWaveEggPoppers_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_SpecialRageWaveEggPoppers_Trigger == null) {
        auto_gf_SpecialRageWaveEggPoppers_Trigger = TriggerCreate("auto_gf_SpecialRageWaveEggPoppers_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWaveEggPoppers_Trigger, false, false);
}

bool auto_gf_SpecialRageWaveEggPoppers_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_SpecialRageWaveEggPoppers_lp_terrazineTankIndex;

    // Automatic Variable Declarations
    // Implementation
    Wait(37.0, c_timeAI);
    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_GrowAndHatchEggCluster(DoodadFromId(3181), PointFromId(352));
        Wait(4.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(352), libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), 0, 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_GrowAndHatchEggCluster(DoodadFromId(3178), PointFromId(568));
        gf_GrowAndHatchEggCluster(DoodadFromId(3177), PointFromId(573));
        Wait(0.125, c_timeAI);
        gf_GrowAndHatchEggCluster(DoodadFromId(596), PointFromId(594));
        Wait(4.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(568), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), 0, 0);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(573), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), 0, 0);
        Wait(0.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(594), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), 0, 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_GrowAndHatchEggCluster(DoodadFromId(3182), PointFromId(595));
        gf_GrowAndHatchEggCluster(DoodadFromId(598), PointFromId(600));
        Wait(0.125, c_timeAI);
        gf_GrowAndHatchEggCluster(DoodadFromId(3180), PointFromId(791));
        gf_GrowAndHatchEggCluster(DoodadFromId(597), PointFromId(3183));
        Wait(4.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(595), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), 0, libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), 0);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(600), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), 1, libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), 0);
        Wait(0.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(791), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), 1, libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), 0);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(3183), libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), 0, libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_GrowAndHatchEggCluster(DoodadFromId(3179), PointFromId(3184));
        gf_GrowAndHatchEggCluster(DoodadFromId(599), PointFromId(3185));
        Wait(0.125, c_timeAI);
        gf_GrowAndHatchEggCluster(DoodadFromId(571), PointFromId(3186));
        gf_GrowAndHatchEggCluster(DoodadFromId(2612), PointFromId(3187));
        Wait(4.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(3184), 2, libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), 0);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(3185), 2, libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), 0);
        Wait(0.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(3186), 2, libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), 0);
        gf_SendInfestedEggPopperWave(lp_terrazineTankIndex, PointFromId(3187), 2, libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), 0);
    }

    return true;
}

trigger auto_gf_GrowAndHatchEggCluster_Trigger = null;
doodad auto_gf_GrowAndHatchEggCluster_lp_eggClusterDoodad;
point auto_gf_GrowAndHatchEggCluster_lp_eggClusterPoint;

void gf_GrowAndHatchEggCluster (doodad lp_eggClusterDoodad, point lp_eggClusterPoint) {
    auto_gf_GrowAndHatchEggCluster_lp_eggClusterDoodad = lp_eggClusterDoodad;
    auto_gf_GrowAndHatchEggCluster_lp_eggClusterPoint = lp_eggClusterPoint;

    if (auto_gf_GrowAndHatchEggCluster_Trigger == null) {
        auto_gf_GrowAndHatchEggCluster_Trigger = TriggerCreate("auto_gf_GrowAndHatchEggCluster_TriggerFunc");
    }

    TriggerExecute(auto_gf_GrowAndHatchEggCluster_Trigger, false, false);
}

bool auto_gf_GrowAndHatchEggCluster_TriggerFunc (bool testConds, bool runActions) {
    doodad lp_eggClusterDoodad = auto_gf_GrowAndHatchEggCluster_lp_eggClusterDoodad;
    point lp_eggClusterPoint = auto_gf_GrowAndHatchEggCluster_lp_eggClusterPoint;

    // Automatic Variable Declarations
    // Implementation
    SoundPlayAtPointForPlayer(SoundLink("Doodad_ZerusChrysalisEgg_StandMorphStart", -1), c_maxPlayers, PlayerGroupAll(), lp_eggClusterPoint, 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(lp_eggClusterDoodad), "AnimClear StandUnpowered");
    ActorSend(ActorFromDoodad(lp_eggClusterDoodad), "AnimPlay StandUnpoweredEnd Stand,Unpowered,End 0 -1.000000 -1.000000 2.000000 AsDuration");
    Wait(4.0, c_timeAI);
    SoundPlayAtPointForPlayer(SoundLink("Doodad_GiantYagdraEgg_Death", -1), c_maxPlayers, PlayerGroupAll(), lp_eggClusterPoint, 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(lp_eggClusterDoodad), "AnimPlay Death Death PlayForever,NonLooping -1.000000 -1.000000 2.000000 AsDuration");
    return true;
}

void gf_SendInfestedEggPopperWave (int lp_terrazineTankIndex, point lp_launchPoint, int lp_infestedTerranCount, int lp_infestedExploderCount, int lp_infestedMarineCount, int lp_aberrationCount, int lp_infestedBansheeCount) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetTargetUnit(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_terrazineTankIndex, "InfestedCivilian", lp_infestedTerranCount, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_terrazineTankIndex, "InfestedExploder", lp_infestedExploderCount, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_terrazineTankIndex, "InfestedTerranCampaign", lp_infestedMarineCount, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_terrazineTankIndex, "InfestedAbomination", lp_aberrationCount, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_terrazineTankIndex, "NovaInfestedBanshee", lp_infestedBansheeCount, lp_launchPoint);
    AIAttackWaveSend(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, 0, true);
}

void gf_AddInfestedUnitsToEggPopperWave (int lp_terrazineTankIndex, string lp_infestedUnitType, int lp_count, point lp_launchPoint) {
    // Variable Declarations
    point lv_impactPoint;

    // Automatic Variable Declarations
    int auto4577369B_n;
    int auto4577369B_i;
    const int auto9FFDE875_n = 50;
    int auto9FFDE875_i;

    // Variable Initialization

    // Implementation
    auto4577369B_n = lp_count;
    for (auto4577369B_i = 1; auto4577369B_i <= auto4577369B_n; auto4577369B_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_infestedUnitType, c_unitCreateIgnorePlacement, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionRandomPoint(RegionCircle(lp_launchPoint, 1.0)));
        UnitGroupAdd(gv_infestedRageWaveUnits, UnitLastCreated());
        lv_impactPoint = RegionRandomPoint(RegionCircle(lp_launchPoint, 3.5));
        for (auto9FFDE875_i = 1; auto9FFDE875_i <= auto9FFDE875_n; auto9FFDE875_i += 1) {
            if (((PointPathingPassable(lv_impactPoint) == false) || (PointPathingCliffLevel(lp_launchPoint) != PointPathingCliffLevel(lv_impactPoint)))) {
                lv_impactPoint = RegionRandomPoint(RegionCircle(lp_launchPoint, 3.5));
            }
            else {
                break;
            }
        }
        if (((PointPathingPassable(lv_impactPoint) == false) || (PointPathingCliffLevel(lp_launchPoint) != PointPathingCliffLevel(lv_impactPoint)))) {
            lv_impactPoint = libNtve_gf_PointOffsetTowardsPoint(lp_launchPoint, 2.0, PointFromId(3188));
        }

        libNCMI_gf_LaunchUnitToTargetPointWithMover(UnitLastCreated(), lv_impactPoint, "UnitLaunchToTargetPointSlower");
        UnitSetCustomValue(UnitLastCreated(), 0, lp_terrazineTankIndex);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIAttackWaveUseUnit(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitLastCreated());
    }
}

trigger auto_gf_SpecialRageWavesColonyShipExplodes_Trigger = null;
int auto_gf_SpecialRageWavesColonyShipExplodes_lp_terrazineTankIndex;

void gf_SpecialRageWavesColonyShipExplodes (int lp_terrazineTankIndex) {
    auto_gf_SpecialRageWavesColonyShipExplodes_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_SpecialRageWavesColonyShipExplodes_Trigger == null) {
        auto_gf_SpecialRageWavesColonyShipExplodes_Trigger = TriggerCreate("auto_gf_SpecialRageWavesColonyShipExplodes_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesColonyShipExplodes_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesColonyShipExplodes_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_SpecialRageWavesColonyShipExplodes_lp_terrazineTankIndex;

    // Variable Declarations
    region lv_spawnRegion;
    unit lv_spawnColonyShip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(56.0, c_timeAI);
    if ((lp_terrazineTankIndex == 2)) {
        lv_spawnRegion = RegionFromId(59);
        lv_spawnColonyShip = UnitFromId(803);
    }
    else {
        lv_spawnRegion = RegionFromId(62);
        lv_spawnColonyShip = UnitFromId(506);
    }
    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_spawnColonyShip), 4.0), 12.0, false);
        Wait(6.0, c_timeAI);
        UnitKill(lv_spawnColonyShip);
        Wait(0.25, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWave(lp_terrazineTankIndex, lv_spawnRegion, true, 4, 2, 0, 3, libLotv_gf_DifficultyValueInt2(0, 0, 2, 3));
    }

    return true;
}

trigger auto_gf_SpecialRageWavesSiegeTanks_Trigger = null;
int auto_gf_SpecialRageWavesSiegeTanks_lp_terrazineTankIndex;

void gf_SpecialRageWavesSiegeTanks (int lp_terrazineTankIndex) {
    auto_gf_SpecialRageWavesSiegeTanks_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_SpecialRageWavesSiegeTanks_Trigger == null) {
        auto_gf_SpecialRageWavesSiegeTanks_Trigger = TriggerCreate("auto_gf_SpecialRageWavesSiegeTanks_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesSiegeTanks_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesSiegeTanks_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_SpecialRageWavesSiegeTanks_lp_terrazineTankIndex;

    // Automatic Variable Declarations
    // Implementation
    Wait(30.0, c_timeAI);
    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        TriggerExecute(gt_SpecialRageWaveSiegeTanksQ, true, false);
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        }

        Wait(10.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        }

        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        }

        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        }

    }

    return true;
}

trigger auto_gf_UnloadInfestedSiegeTankFromOverlord_Trigger = null;
point auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_spawnPoint;
point auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_dropPoint;

void gf_UnloadInfestedSiegeTankFromOverlord (point lp_spawnPoint, point lp_dropPoint) {
    auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_spawnPoint = lp_spawnPoint;
    auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_dropPoint = lp_dropPoint;

    if (auto_gf_UnloadInfestedSiegeTankFromOverlord_Trigger == null) {
        auto_gf_UnloadInfestedSiegeTankFromOverlord_Trigger = TriggerCreate("auto_gf_UnloadInfestedSiegeTankFromOverlord_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnloadInfestedSiegeTankFromOverlord_Trigger, false, false);
}

bool auto_gf_UnloadInfestedSiegeTankFromOverlord_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_spawnPoint;
    point lp_dropPoint = auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_dropPoint;

    // Variable Declarations
    unit lv_overlord;
    unit lv_infestedSiegeTank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, "Overlord", 0, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, lp_spawnPoint, 270.0);
    lv_overlord = UnitLastCreated();
    UnitCargoCreate(lv_overlord, "NovaInfestedSiegeTankUprooted", 1);
    lv_infestedSiegeTank = UnitCargoLastCreated();
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lv_overlord) == true) && (libNtve_gf_UnitIsInsideTransport(lv_infestedSiegeTank) == true)) {
        UnitIssueOrder(lv_overlord, OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), lp_dropPoint), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    UnitIssueOrder(lv_infestedSiegeTank, Order(AbilityCommand("NovaInfestedSiegeTankRoot", 0)), c_orderQueueReplace);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lv_overlord) == true) && (libNtve_gf_UnitInRegion(lv_overlord, RegionFromId(71)) == false)) {
        UnitIssueOrder(lv_overlord, OrderTargetingPoint(AbilityCommand("move", 0), lp_spawnPoint), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(lv_overlord) == true)) {
        UnitRemove(lv_overlord);
    }

    return true;
}

trigger auto_gf_SpecialRageWavesNydusWorms_Trigger = null;
int auto_gf_SpecialRageWavesNydusWorms_lp_terrazineTankIndex;

void gf_SpecialRageWavesNydusWorms (int lp_terrazineTankIndex) {
    auto_gf_SpecialRageWavesNydusWorms_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_SpecialRageWavesNydusWorms_Trigger == null) {
        auto_gf_SpecialRageWavesNydusWorms_Trigger = TriggerCreate("auto_gf_SpecialRageWavesNydusWorms_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesNydusWorms_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesNydusWorms_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_SpecialRageWavesNydusWorms_lp_terrazineTankIndex;

    // Variable Declarations
    region lv_spawnRegion;
    unit lv_nydus01;
    unit lv_nydus02;
    unit lv_nydus03;

    // Automatic Variable Declarations
    unitgroup autoCE3A545B_g;
    int autoCE3A545B_u;
    unit autoCE3A545B_var;

    // Variable Initialization

    // Implementation
    Wait(45.0, c_timeAI);
    if ((lp_terrazineTankIndex == 1)) {
        lv_spawnRegion = RegionFromId(57);
    }
    else {
        lv_spawnRegion = RegionFromId(58);
    }
    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(66), 8.0, false);
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(60), 8.0, false);
        SoundPlayAtPointForPlayer(SoundLink("PShakuras02_BricksCrumble", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(203), 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("PShakuras02_BricksCrumble", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(205), 0.0, 100.0, 0.0);
        if ((RegionContainsPoint(RegionFromId(154), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            CameraShake(gv_pLAYER_01_USER, "Medium", "Shake", 1.0, 0.0, 2.0);
        }

        Wait(2.0, c_timeAI);
        if ((RegionContainsPoint(RegionFromId(154), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 1.0, 2.0);
        }

        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(203), 4.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_08_ZERG, PointFromId(203));
        lv_nydus01 = UnitLastCreated();
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth,00 DontResetOnUnhide 0.000000");
        SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(203), 0.0, 100.0, 0.0);
        Wait(0.25, c_timeAI);
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(205), 4.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_08_ZERG, PointFromId(205));
        lv_nydus02 = UnitLastCreated();
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth,01 DontResetOnUnhide 0.000000");
        SoundPlayAtPointForPlayer(SoundLink("Nydus_Unburrow", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(205), 0.0, 100.0, 0.0);
        Wait(5.0, c_timeAI);
        gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", lv_nydus01, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 8);
        Wait(0.25, c_timeAI);
        gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Zergling", lv_nydus02, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 5);
        Wait(7.0, c_timeAI);
        if ((RegionContainsPoint(RegionFromId(64), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 1.0, 2.0);
        }

        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(208), 4.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_08_ZERG, PointFromId(208));
        lv_nydus03 = UnitLastCreated();
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth,01 DontResetOnUnhide 0.000000");
        SoundPlayAtPointForPlayer(SoundLink("Nydus_Unburrow", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(208), 0.0, 100.0, 0.0);
        Wait(5.0, c_timeAI);
        gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(1, 1, 3, 5), "Zergling", lv_nydus03, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 5);
        Wait(5.0, c_timeAI);
        gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Hydralisk", lv_nydus01, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 3);
        Wait(0.25, c_timeAI);
        gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Hydralisk", lv_nydus02, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 4);
        Wait(10.0, c_timeAI);
        gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 2, 3), "Roach", lv_nydus02, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 3);
        Wait(0.25, c_timeAI);
        gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "Ultralisk", lv_nydus03, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 2);
        Wait(0.25, c_timeAI);
        gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 0, 2), "Roach", lv_nydus01, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 2);
        while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitGroupCount(gv_nydusUnloadedUnits, c_unitCountAlive) > 0)) {
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 4, 2), "Zergling", lv_nydus01, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 8);
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), "Roach", lv_nydus01, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 1);
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 4, 2), "Zergling", lv_nydus02, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 8);
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), "Hydralisk", lv_nydus02, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 2);
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 4, 2), "Zergling", lv_nydus03, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 8);
            gf_UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), "Hydralisk", lv_nydus03, RegionGetCenter(RegionFromId(64)), gv_pLAYER_08_ZERG, 2);
            autoCE3A545B_g = gv_nydusUnloadedUnits;
            autoCE3A545B_u = UnitGroupCount(autoCE3A545B_g, c_unitCountAll);
            for (;; autoCE3A545B_u -= 1) {
                autoCE3A545B_var = UnitGroupUnitFromEnd(autoCE3A545B_g, autoCE3A545B_u);
                if (autoCE3A545B_var == null) { break; }
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(autoCE3A545B_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(64))), c_orderQueueReplace);
                }

            }
            Wait(4.0, c_timeAI);
        }
    }

    return true;
}

trigger auto_gf_UnloadUnitsFromNydusWorm_Trigger = null;
int auto_gf_UnloadUnitsFromNydusWorm_lp_count;
string auto_gf_UnloadUnitsFromNydusWorm_lp_unitType;
unit auto_gf_UnloadUnitsFromNydusWorm_lp_nydusWorm;
point auto_gf_UnloadUnitsFromNydusWorm_lp_rallyPoint;
int auto_gf_UnloadUnitsFromNydusWorm_lp_player;
int auto_gf_UnloadUnitsFromNydusWorm_lp_maxCount;

void gf_UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, point lp_rallyPoint, int lp_player, int lp_maxCount) {
    auto_gf_UnloadUnitsFromNydusWorm_lp_count = lp_count;
    auto_gf_UnloadUnitsFromNydusWorm_lp_unitType = lp_unitType;
    auto_gf_UnloadUnitsFromNydusWorm_lp_nydusWorm = lp_nydusWorm;
    auto_gf_UnloadUnitsFromNydusWorm_lp_rallyPoint = lp_rallyPoint;
    auto_gf_UnloadUnitsFromNydusWorm_lp_player = lp_player;
    auto_gf_UnloadUnitsFromNydusWorm_lp_maxCount = lp_maxCount;

    if (auto_gf_UnloadUnitsFromNydusWorm_Trigger == null) {
        auto_gf_UnloadUnitsFromNydusWorm_Trigger = TriggerCreate("auto_gf_UnloadUnitsFromNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnloadUnitsFromNydusWorm_Trigger, false, false);
}

bool auto_gf_UnloadUnitsFromNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_UnloadUnitsFromNydusWorm_lp_count;
    string lp_unitType = auto_gf_UnloadUnitsFromNydusWorm_lp_unitType;
    unit lp_nydusWorm = auto_gf_UnloadUnitsFromNydusWorm_lp_nydusWorm;
    point lp_rallyPoint = auto_gf_UnloadUnitsFromNydusWorm_lp_rallyPoint;
    int lp_player = auto_gf_UnloadUnitsFromNydusWorm_lp_player;
    int lp_maxCount = auto_gf_UnloadUnitsFromNydusWorm_lp_maxCount;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto0EB86770_ae;
    const int auto0EB86770_ai = 1;

    // Variable Initialization

    // Implementation
    auto0EB86770_ae = lp_count;
    lv_i = 1;
    for ( ; ( (auto0EB86770_ai >= 0 && lv_i <= auto0EB86770_ae) || (auto0EB86770_ai < 0 && lv_i >= auto0EB86770_ae) ) ; lv_i += auto0EB86770_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true) && (libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitGroupCount(UnitGroupFilter(lp_unitType, c_playerAny, gv_nydusUnloadedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lp_maxCount)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_player, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            UnitGroupAdd(gv_nydusUnloadedUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_rallyPoint), c_orderQueueReplace);
            Wait(0.75, c_timeAI);
        }

    }
    return true;
}

trigger auto_gf_SpecialRageWavesFlyers_Trigger = null;
int auto_gf_SpecialRageWavesFlyers_lp_terrazineTankIndex;

void gf_SpecialRageWavesFlyers (int lp_terrazineTankIndex) {
    auto_gf_SpecialRageWavesFlyers_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_SpecialRageWavesFlyers_Trigger == null) {
        auto_gf_SpecialRageWavesFlyers_Trigger = TriggerCreate("auto_gf_SpecialRageWavesFlyers_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesFlyers_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesFlyers_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_SpecialRageWavesFlyers_lp_terrazineTankIndex;

    // Variable Declarations
    region lv_spawnRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(15.0, c_timeAI);
    lv_spawnRegion = RegionFromId(61);
    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        TriggerExecute(gt_SpecialRageWaveFlyersQ, true, false);
        gf_SendInfestedRageWaveFlyers(lp_terrazineTankIndex, lv_spawnRegion, libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), 0, 0, 0);
        Wait(7.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWaveFlyers(lp_terrazineTankIndex, lv_spawnRegion, 0, libLotv_gf_DifficultyValueInt2(3, 3, 5, 5), 0, libLotv_gf_DifficultyValueInt2(0, 0, 0, 1));
        Wait(10.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWaveFlyers(lp_terrazineTankIndex, lv_spawnRegion, libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), 0, libLotv_gf_DifficultyValueInt2(0, 0, 1, 2));
        Wait(20.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWaveFlyers(lp_terrazineTankIndex, lv_spawnRegion, libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), libLotv_gf_DifficultyValueInt2(2, 2, 0, 0), libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 2, 3));
        Wait(15.0, c_timeAI);
    }

    if ((gv_terrazineTankLocations[lp_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
        gf_SendInfestedRageWaveFlyers(lp_terrazineTankIndex, lv_spawnRegion, 3, 3, libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 1, 2));
    }

    return true;
}

trigger auto_gf_SendInfestedRageWaveFlyers_Trigger = null;
int auto_gf_SendInfestedRageWaveFlyers_lp_terrazineTankIndex;
region auto_gf_SendInfestedRageWaveFlyers_lp_spawnRegion;
int auto_gf_SendInfestedRageWaveFlyers_lp_infestedBansheeCount;
int auto_gf_SendInfestedRageWaveFlyers_lp_mutaliskCount;
int auto_gf_SendInfestedRageWaveFlyers_lp_guardianCount;
int auto_gf_SendInfestedRageWaveFlyers_lp_corruptorCount;

void gf_SendInfestedRageWaveFlyers (int lp_terrazineTankIndex, region lp_spawnRegion, int lp_infestedBansheeCount, int lp_mutaliskCount, int lp_guardianCount, int lp_corruptorCount) {
    auto_gf_SendInfestedRageWaveFlyers_lp_terrazineTankIndex = lp_terrazineTankIndex;
    auto_gf_SendInfestedRageWaveFlyers_lp_spawnRegion = lp_spawnRegion;
    auto_gf_SendInfestedRageWaveFlyers_lp_infestedBansheeCount = lp_infestedBansheeCount;
    auto_gf_SendInfestedRageWaveFlyers_lp_mutaliskCount = lp_mutaliskCount;
    auto_gf_SendInfestedRageWaveFlyers_lp_guardianCount = lp_guardianCount;
    auto_gf_SendInfestedRageWaveFlyers_lp_corruptorCount = lp_corruptorCount;

    if (auto_gf_SendInfestedRageWaveFlyers_Trigger == null) {
        auto_gf_SendInfestedRageWaveFlyers_Trigger = TriggerCreate("auto_gf_SendInfestedRageWaveFlyers_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendInfestedRageWaveFlyers_Trigger, false, false);
}

bool auto_gf_SendInfestedRageWaveFlyers_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_SendInfestedRageWaveFlyers_lp_terrazineTankIndex;
    region lp_spawnRegion = auto_gf_SendInfestedRageWaveFlyers_lp_spawnRegion;
    int lp_infestedBansheeCount = auto_gf_SendInfestedRageWaveFlyers_lp_infestedBansheeCount;
    int lp_mutaliskCount = auto_gf_SendInfestedRageWaveFlyers_lp_mutaliskCount;
    int lp_guardianCount = auto_gf_SendInfestedRageWaveFlyers_lp_guardianCount;
    int lp_corruptorCount = auto_gf_SendInfestedRageWaveFlyers_lp_corruptorCount;

    // Variable Declarations
    unitgroup lv_flyerUnits;

    // Automatic Variable Declarations
    int autoD1854113_n;
    int autoD1854113_i;
    int autoADEE4102_n;
    int autoADEE4102_i;
    int auto1DF713DA_n;
    int auto1DF713DA_i;
    int autoC2F1ABD3_n;
    int autoC2F1ABD3_i;
    unitgroup auto2F8EBA0F_g;
    int auto2F8EBA0F_u;
    unit auto2F8EBA0F_var;
    unitgroup auto3D66AE73_g;
    int auto3D66AE73_u;
    unit auto3D66AE73_var;

    // Variable Initialization
    lv_flyerUnits = UnitGroupEmpty();

    // Implementation
    autoD1854113_n = lp_infestedBansheeCount;
    for (autoD1854113_i = 1; autoD1854113_i <= autoD1854113_n; autoD1854113_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "NovaInfestedBanshee", 0, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionRandomPoint(lp_spawnRegion), UnitGetPosition(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit));
        UnitGroupAdd(lv_flyerUnits, UnitLastCreated());
    }
    autoADEE4102_n = lp_mutaliskCount;
    for (autoADEE4102_i = 1; autoADEE4102_i <= autoADEE4102_n; autoADEE4102_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionRandomPoint(lp_spawnRegion), UnitGetPosition(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit));
        UnitGroupAdd(lv_flyerUnits, UnitLastCreated());
    }
    auto1DF713DA_n = lp_guardianCount;
    for (auto1DF713DA_i = 1; auto1DF713DA_i <= auto1DF713DA_n; auto1DF713DA_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Guardian", 0, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionRandomPoint(lp_spawnRegion), UnitGetPosition(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit));
        UnitGroupAdd(lv_flyerUnits, UnitLastCreated());
    }
    autoC2F1ABD3_n = lp_corruptorCount;
    for (autoC2F1ABD3_i = 1; autoC2F1ABD3_i <= autoC2F1ABD3_n; autoC2F1ABD3_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Corruptor", 0, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionRandomPoint(lp_spawnRegion), UnitGetPosition(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit));
        UnitGroupAdd(lv_flyerUnits, UnitLastCreated());
    }
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitGroupCount(lv_flyerUnits, c_unitCountAlive) > 0) && (UnitIsAlive(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit) == true)) {
        auto2F8EBA0F_g = lv_flyerUnits;
        auto2F8EBA0F_u = UnitGroupCount(auto2F8EBA0F_g, c_unitCountAll);
        for (;; auto2F8EBA0F_u -= 1) {
            auto2F8EBA0F_var = UnitGroupUnitFromEnd(auto2F8EBA0F_g, auto2F8EBA0F_u);
            if (auto2F8EBA0F_var == null) { break; }
            UnitIssueOrder(auto2F8EBA0F_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit)), c_orderQueueReplace);
            UnitIssueOrder(auto2F8EBA0F_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankUnit), c_orderQueueAddToEnd);
        }
        Wait(2.0, c_timeAI);
    }
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitGroupCount(lv_flyerUnits, c_unitCountAlive) > 0)) {
        auto3D66AE73_g = lv_flyerUnits;
        auto3D66AE73_u = UnitGroupCount(auto3D66AE73_g, c_unitCountAll);
        for (;; auto3D66AE73_u -= 1) {
            auto3D66AE73_var = UnitGroupUnitFromEnd(auto3D66AE73_g, auto3D66AE73_u);
            if (auto3D66AE73_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto3D66AE73_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_protossClaimerWaveTargetRegion)), c_orderQueueReplace);
            }

        }
        Wait(2.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_DeployWarpPrismAndWarpInBaseAttacks_Trigger = null;
point auto_gf_DeployWarpPrismAndWarpInBaseAttacks_lp_targetPoint;

void gf_DeployWarpPrismAndWarpInBaseAttacks (point lp_targetPoint) {
    auto_gf_DeployWarpPrismAndWarpInBaseAttacks_lp_targetPoint = lp_targetPoint;

    if (auto_gf_DeployWarpPrismAndWarpInBaseAttacks_Trigger == null) {
        auto_gf_DeployWarpPrismAndWarpInBaseAttacks_Trigger = TriggerCreate("auto_gf_DeployWarpPrismAndWarpInBaseAttacks_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeployWarpPrismAndWarpInBaseAttacks_Trigger, false, false);
}

bool auto_gf_DeployWarpPrismAndWarpInBaseAttacks_TriggerFunc (bool testConds, bool runActions) {
    point lp_targetPoint = auto_gf_DeployWarpPrismAndWarpInBaseAttacks_lp_targetPoint;

    // Variable Declarations
    unit lv_warpPrismUnit;
    unitgroup lv_escortGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1321));
    lv_warpPrismUnit = UnitLastCreated();
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1321));
    AIAttackWaveSetTargetEscort(gv_pLAYER_02_PROTOSS_BULLIES, libNtve_gf_ConvertUnitToUnitGroup(lv_warpPrismUnit), 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1321));
    AIAttackWaveAddEscortUnit(gv_pLAYER_02_PROTOSS_BULLIES, UnitLastCreated(), lv_warpPrismUnit, 3.0, 45.0);
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1321));
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_PROTOSS_BULLIES, UnitLastCreated(), lv_warpPrismUnit, 3.0, -135.0);
        UnitGroupAdd(lv_escortGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1321));
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_PROTOSS_BULLIES, UnitLastCreated(), lv_warpPrismUnit, 3.0, -45.0);
        UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(1321));
        AIAttackWaveAddEscortUnit(gv_pLAYER_02_PROTOSS_BULLIES, UnitLastCreated(), lv_warpPrismUnit, 3.0, 135.0);
        UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    }

    AIAttackWaveSend(gv_pLAYER_02_PROTOSS_BULLIES, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lv_warpPrismUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FF7333B5"));
    PingSetUnit(PingLastCreated(), lv_warpPrismUnit);
    libHots_gf_StorePingForUnit(lv_warpPrismUnit, 1, PingLastCreated());
    Wait(2.0, c_timeAI);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lv_warpPrismUnit) == true) && (UnitGetType(lv_warpPrismUnit) == "WarpPrism")) {
        UnitIssueOrder(lv_warpPrismUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
        UnitIssueOrder(lv_warpPrismUnit, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
    gf_WarpPrismBaseAttackReinforcements(lv_warpPrismUnit, "Zealot", libLotv_gf_DifficultyValueInt2(2, 2, 2, 2));
    gf_WarpPrismBaseAttackReinforcements(lv_warpPrismUnit, "Stalker", libLotv_gf_DifficultyValueInt2(0, 0, 1, 2));
    while (!(((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(lv_warpPrismUnit) == false)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(lv_warpPrismUnit, 1));
    AIRemoveGroupFromAnyWavesAndSetHome(lv_escortGroup, PointFromId(666));
    return true;
}

trigger auto_gf_WarpPrismBaseAttackReinforcements_Trigger = null;
unit auto_gf_WarpPrismBaseAttackReinforcements_lp_warpPrism;
string auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitType;
int auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitMaxCount;

void gf_WarpPrismBaseAttackReinforcements (unit lp_warpPrism, string lp_warpUnitType, int lp_warpUnitMaxCount) {
    auto_gf_WarpPrismBaseAttackReinforcements_lp_warpPrism = lp_warpPrism;
    auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitType = lp_warpUnitType;
    auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitMaxCount = lp_warpUnitMaxCount;

    if (auto_gf_WarpPrismBaseAttackReinforcements_Trigger == null) {
        auto_gf_WarpPrismBaseAttackReinforcements_Trigger = TriggerCreate("auto_gf_WarpPrismBaseAttackReinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpPrismBaseAttackReinforcements_Trigger, false, false);
}

bool auto_gf_WarpPrismBaseAttackReinforcements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpPrism = auto_gf_WarpPrismBaseAttackReinforcements_lp_warpPrism;
    string lp_warpUnitType = auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitType;
    int lp_warpUnitMaxCount = auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitMaxCount;

    // Variable Declarations
    abilcmd lv_warpAbilCmd;

    // Automatic Variable Declarations
    string autoE99B5020_val;
    int auto3ED4B61B_n;
    int auto3ED4B61B_i;

    // Variable Initialization

    // Implementation
    autoE99B5020_val = lp_warpUnitType;
    if (autoE99B5020_val == "Zealot") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 0);
    }
    else if (autoE99B5020_val == "Stalker") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 1);
    }
    else if (autoE99B5020_val == "Sentry") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 5);
    }
    else if (autoE99B5020_val == "HighTemplar") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 3);
    }
    else if (autoE99B5020_val == "Archon") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 9);
    }
    else if (autoE99B5020_val == "Immortal") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 2);
    }
    else if (autoE99B5020_val == "Colossus") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrainVoid", 14);
    }
    else if (autoE99B5020_val == "Scout") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 14);
    }
    else if (autoE99B5020_val == "VoidRay") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 8);
    }
    else if (autoE99B5020_val == "Carrier") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 6);
    }
    else {
        return true;
    }
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_warpPrism) == true)) {
        auto3ED4B61B_n = lp_warpUnitMaxCount;
        for (auto3ED4B61B_i = 1; auto3ED4B61B_i <= auto3ED4B61B_n; auto3ED4B61B_i += 1) {
            if ((UnitGroupCount(gv_protossBaseAttackGroup, c_unitCountAlive) <= lp_warpUnitMaxCount) && (UnitIsAlive(lp_warpPrism) == true)) {
                UnitIssueOrder(UnitFromId(1437), OrderTargetingPoint(lv_warpAbilCmd, RegionRandomPoint(RegionCircle(UnitGetPosition(lp_warpPrism), 4.0))), c_orderQueueReplace);
                Wait(1.0, c_timeAI);
            }

        }
        Wait(20.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_RunProtossClaimerWave_Trigger = null;
int auto_gf_RunProtossClaimerWave_lp_claimerWaveSize;

void gf_RunProtossClaimerWave (int lp_claimerWaveSize) {
    auto_gf_RunProtossClaimerWave_lp_claimerWaveSize = lp_claimerWaveSize;

    if (auto_gf_RunProtossClaimerWave_Trigger == null) {
        auto_gf_RunProtossClaimerWave_Trigger = TriggerCreate("auto_gf_RunProtossClaimerWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunProtossClaimerWave_Trigger, false, false);
}

bool auto_gf_RunProtossClaimerWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_claimerWaveSize = auto_gf_RunProtossClaimerWave_lp_claimerWaveSize;

    // Variable Declarations
    unit lv_warpPrismUnit;
    int lv_terrazineTankTargetIndex;
    unitgroup lv_eligibleTargets;
    timer lv_objectiveReminderTimer;

    // Automatic Variable Declarations
    int auto9485ABC2_val;
    unitgroup auto0184EA48_g;
    int auto0184EA48_u;
    unit auto0184EA48_var;

    // Variable Initialization
    lv_eligibleTargets = UnitGroupEmpty();
    lv_objectiveReminderTimer = TimerCreate();

    // Implementation
    lv_terrazineTankTargetIndex = gf_GetProtossClaimerWaveTarget();
    if ((lv_terrazineTankTargetIndex == 0)) {
        return true;
    }

    TimerStart(lv_objectiveReminderTimer, 120.0, false, c_timeAI);
    auto9485ABC2_val = lp_claimerWaveSize;
    if (auto9485ABC2_val == ge_PRESETClaimerWaveType_SmallA) {
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 0, 2), "Phoenix", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Scout", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "VoidRay", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Oracle", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Zealot", libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Stalker", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), lv_terrazineTankTargetIndex);
    }
    else if (auto9485ABC2_val == ge_PRESETClaimerWaveType_SmallB) {
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Scout", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 0, 1), "VoidRay", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Tempest", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Oracle", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Zealot", libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Stalker", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), lv_terrazineTankTargetIndex);
    }
    else if (auto9485ABC2_val == ge_PRESETClaimerWaveType_MediumA) {
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Phoenix", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Scout", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "VoidRay", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Oracle", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Zealot", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Stalker", libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Colossus", libLotv_gf_DifficultyValueInt2(0, 0, 1, 0), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Immortal", libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), lv_terrazineTankTargetIndex);
    }
    else if (auto9485ABC2_val == ge_PRESETClaimerWaveType_MediumB) {
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(3, 3, 5, 5), "Scout", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Carrier", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Oracle", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Zealot", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Stalker", libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Colossus", libLotv_gf_DifficultyValueInt2(0, 0, 1, 0), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Immortal", libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), lv_terrazineTankTargetIndex);
    }
    else if (auto9485ABC2_val == ge_PRESETClaimerWaveType_LargeA) {
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Phoenix", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 0, 0), "Scout", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "VoidRay", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Tempest", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Oracle", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Zealot", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Stalker", libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Immortal", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Colossus", libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), lv_terrazineTankTargetIndex);
    }
    else if (auto9485ABC2_val == ge_PRESETClaimerWaveType_LargeB) {
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Scout", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "VoidRay", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Carrier", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Oracle", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_04_PROTOSS_WAVES, PointFromId(665));
        UnitGroupAddUnitGroup(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Zealot", libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Stalker", libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Immortal", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), lv_terrazineTankTargetIndex);
        gf_WarpPrismClaimerReinforcements(UnitLastCreated(), "Colossus", libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), lv_terrazineTankTargetIndex);
    }
    else {
    }
    AIAttackWaveSetGatherPoint(gv_pLAYER_04_PROTOSS_WAVES, PointFromId(666));
    AIAttackWaveSetTargetUnit(gv_pLAYER_04_PROTOSS_WAVES, gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_terrazineTankUnit);
    AIAttackWaveAddWaypoint(gv_pLAYER_04_PROTOSS_WAVES, gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveTransportTarget, false);
    AIAttackWaveUseGroup(gv_pLAYER_04_PROTOSS_WAVES, gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup);
    AIAttackWaveSend(gv_pLAYER_04_PROTOSS_WAVES, (30 + (FixedToInt(DistanceBetweenPoints(PointFromId(666), UnitGetPosition(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_terrazineTankUnit))) / 2)), false);
    Wait(0.125, c_timeAI);
    TriggerExecute(gt_ProtossClaimerWaveQ, true, false);
    gf_TrackClaimerAttackRoute(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, StringExternal("Param/Value/75FE2C98"), lv_terrazineTankTargetIndex);
    if ((UnitGroupCount(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, c_unitCountAlive) > UnitGroupCount(UnitGroupFilter("Observer", c_playerAny, gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
        AISetGroupScriptControlled(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, true);
        UnitGroupIssueOrder(gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        Wait(5.0, c_timeAI);
        auto0184EA48_g = gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_protossClaimerWaveUnitGroup;
        auto0184EA48_u = UnitGroupCount(auto0184EA48_g, c_unitCountAll);
        for (;; auto0184EA48_u -= 1) {
            auto0184EA48_var = UnitGroupUnitFromEnd(auto0184EA48_g, auto0184EA48_u);
            if (auto0184EA48_var == null) { break; }
            gf_WarpOutProtossUnit(auto0184EA48_var);
            Wait(0.125, c_timeAI);
        }
    }
    else {
        if ((gv_terrazineTankLocations[lv_terrazineTankTargetIndex].lv_state != ge_PRESETTerrazineTankState_Sealed)) {
            gv_victoryStat_ProtossWavesIntercepted += 1;
        }

    }
    Wait(16.0, c_timeAI);
    if ((TimerGetRemaining(lv_objectiveReminderTimer) > 0.0)) {
        TriggerExecute(gt_TerrazineTanksObjectiveReminderQ, true, false);
    }

    return true;
}

int gf_GetProtossClaimerWaveTarget () {
    // Variable Declarations
    int lv_sortOrderIndex;
    int[13] lv_sortOrderArray;

    // Automatic Variable Declarations
    int autoEC27C2D5_ae;
    const int autoEC27C2D5_ai = 1;
    int autoDA15607A_ae;
    const int autoDA15607A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_sortOrderArray[1] = 5;
    lv_sortOrderArray[2] = 6;
    lv_sortOrderArray[3] = 3;
    lv_sortOrderArray[4] = 2;
    lv_sortOrderArray[5] = 9;
    lv_sortOrderArray[6] = 8;
    lv_sortOrderArray[7] = 7;
    lv_sortOrderArray[8] = 4;
    lv_sortOrderArray[9] = 1;
    if (gv_sortOrderIndexStarter >= 9) {
        gv_sortOrderIndexStarter = 1;
    }
    else {
        gv_sortOrderIndexStarter = gv_sortOrderIndexStarter + 1;
    }
    autoEC27C2D5_ae = gv_terrazineTankLocationsCount;
    lv_sortOrderIndex = gv_sortOrderIndexStarter;
    for ( ; ( (autoEC27C2D5_ai >= 0 && lv_sortOrderIndex <= autoEC27C2D5_ae) || (autoEC27C2D5_ai < 0 && lv_sortOrderIndex >= autoEC27C2D5_ae) ) ; lv_sortOrderIndex += autoEC27C2D5_ai ) {
        if ((gv_terrazineTankLocations[lv_sortOrderArray[lv_sortOrderIndex]].lv_state == ge_PRESETTerrazineTankState_Available) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(gv_terrazineTankLocations[lv_sortOrderArray[lv_sortOrderIndex]].lv_terrazineTankPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            return lv_sortOrderArray[lv_sortOrderIndex];
        }

    }
    autoDA15607A_ae = gv_terrazineTankLocationsCount;
    lv_sortOrderIndex = 1;
    for ( ; ( (autoDA15607A_ai >= 0 && lv_sortOrderIndex <= autoDA15607A_ae) || (autoDA15607A_ai < 0 && lv_sortOrderIndex >= autoDA15607A_ae) ) ; lv_sortOrderIndex += autoDA15607A_ai ) {
        if ((gv_terrazineTankLocations[lv_sortOrderArray[lv_sortOrderIndex]].lv_state == ge_PRESETTerrazineTankState_Available)) {
            return lv_sortOrderArray[lv_sortOrderIndex];
        }

    }
    gv_sortOrderIndexStarter = 0;
    return 0;
}

void gf_TrackClaimerAttackRoute (unitgroup lp_inTransitUnitGroup, text lp_pingTooltip, int lp_terrazineTankIndex) {
    // Variable Declarations
    int lv_pingRedrawTimerCounter;
    unitgroup lv_trackedUnitGroup;
    int lv_trackedPing;
    point lv_trackedPingPoint;

    // Automatic Variable Declarations
    unitgroup auto61EECEDA_g;
    int auto61EECEDA_u;
    unit auto61EECEDA_var;

    // Variable Initialization
    lv_trackedUnitGroup = UnitGroupEmpty();
    lv_trackedPing = c_invalidPingId;

    // Implementation
    lv_trackedUnitGroup = lp_inTransitUnitGroup;
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGroupCenterOfGroup(lv_trackedUnitGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), lp_pingTooltip);
    PingSetScale(PingLastCreated(), 0.65);
    lv_trackedPing = PingLastCreated();
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitGroupCount(lv_trackedUnitGroup, c_unitCountAlive) > UnitGroupCount(UnitGroupFilter("Observer", c_playerAny, lv_trackedUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(lp_inTransitUnitGroup), gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint) > 15.0)) {
        lv_trackedPingPoint = UnitGroupCenterOfGroup(lv_trackedUnitGroup);
        PingSetPosition(lv_trackedPing, lv_trackedPingPoint);
        if (lv_pingRedrawTimerCounter >= 4) {
            lv_pingRedrawTimerCounter = 1;
        }
        else {
            lv_pingRedrawTimerCounter = lv_pingRedrawTimerCounter + 1;
        }
        if ((lv_pingRedrawTimerCounter == 1)) {
            gf_DrawClaimerAttackRoute(UnitGroupCenterOfGroup(lv_trackedUnitGroup), gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint);
        }

        Wait(1.0, c_timeAI);
    }
    PingDestroy(lv_trackedPing);
    if ((UnitGroupCount(lv_trackedUnitGroup, c_unitCountAlive) <= UnitGroupCount(UnitGroupFilter("Observer", c_playerAny, lv_trackedUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) && (UnitCount(null, gv_pLAYER_01_USER, RegionCircle(lv_trackedPingPoint, 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        TriggerExecute(gt_InfestedKillProtossClaimerWaveQ, true, false);
    }

    if ((UnitGroupCount(lv_trackedUnitGroup, c_unitCountAlive) > UnitGroupCount(UnitGroupFilter("Observer", c_playerAny, lv_trackedUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
        gf_ProtossClaimerWaveReachesTargetQ(lp_terrazineTankIndex);
        auto61EECEDA_g = UnitGroup(null, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_protossClaimerWaveTargetRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto61EECEDA_u = UnitGroupCount(auto61EECEDA_g, c_unitCountAll);
        for (;; auto61EECEDA_u -= 1) {
            auto61EECEDA_var = UnitGroupUnitFromEnd(auto61EECEDA_g, auto61EECEDA_u);
            if (auto61EECEDA_var == null) { break; }
            UnitSetOwner(auto61EECEDA_var, gv_pLAYER_05_INFESTED_FIGHTPROTOSS, true);
        }
        gf_TrackClaimerWaveTargetPing(lp_terrazineTankIndex);
    }

}

trigger auto_gf_DrawClaimerAttackRoute_Trigger = null;
point auto_gf_DrawClaimerAttackRoute_lp_startPoint;
point auto_gf_DrawClaimerAttackRoute_lp_endPoint;

void gf_DrawClaimerAttackRoute (point lp_startPoint, point lp_endPoint) {
    auto_gf_DrawClaimerAttackRoute_lp_startPoint = lp_startPoint;
    auto_gf_DrawClaimerAttackRoute_lp_endPoint = lp_endPoint;

    if (auto_gf_DrawClaimerAttackRoute_Trigger == null) {
        auto_gf_DrawClaimerAttackRoute_Trigger = TriggerCreate("auto_gf_DrawClaimerAttackRoute_TriggerFunc");
    }

    TriggerExecute(auto_gf_DrawClaimerAttackRoute_Trigger, false, false);
}

bool auto_gf_DrawClaimerAttackRoute_TriggerFunc (bool testConds, bool runActions) {
    point lp_startPoint = auto_gf_DrawClaimerAttackRoute_lp_startPoint;
    point lp_endPoint = auto_gf_DrawClaimerAttackRoute_lp_endPoint;

    // Variable Declarations
    unit lv_drawUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, 0, lp_startPoint, AngleBetweenPoints(lp_endPoint, lp_endPoint));
    lv_drawUnit = UnitLastCreated();
    UnitSetPropertyFixed(lv_drawUnit, c_unitPropMovementSpeed, 75.0);
    UnitIssueOrder(lv_drawUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_endPoint), c_orderQueueReplace);
    Wait(0.125, c_timeAI);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lv_drawUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_drawUnit), lp_endPoint) > 5.0)) {
        UnitIssueOrder(lv_drawUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_endPoint), c_orderQueueReplace);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", UnitGetPosition(lv_drawUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, UnitGetFacing(lv_drawUnit));
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.125, c_timeAI);
    }
    UnitRemove(lv_drawUnit);
    return true;
}

void gf_TrackClaimerWaveTargetPing (int lp_claimerWaveTargetIndex) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_terrazineTankLocations[lp_claimerWaveTargetIndex].lv_terrazineTankUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/25E8E89F"));
    libHots_gf_StorePingForUnit(gv_terrazineTankLocations[lp_claimerWaveTargetIndex].lv_terrazineTankUnit, 3, PingLastCreated());
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitGroupCount(gv_terrazineTankLocations[lp_claimerWaveTargetIndex].lv_protossClaimerWaveUnitGroup, c_unitCountAlive) > UnitGroupCount(UnitGroupFilter("Observer", c_playerAny, gv_terrazineTankLocations[lp_claimerWaveTargetIndex].lv_protossClaimerWaveUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) && ((gv_terrazineTankLocations[lp_claimerWaveTargetIndex].lv_state == ge_PRESETTerrazineTankState_Available) || (gv_terrazineTankLocations[lp_claimerWaveTargetIndex].lv_state == ge_PRESETTerrazineTankState_Working))) {
        Wait(0.05, c_timeAI);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(gv_terrazineTankLocations[lp_claimerWaveTargetIndex].lv_terrazineTankUnit, 3));
}

trigger auto_gf_WarpOutProtossUnit_Trigger = null;
unit auto_gf_WarpOutProtossUnit_lp_warpingUnit;

void gf_WarpOutProtossUnit (unit lp_warpingUnit) {
    auto_gf_WarpOutProtossUnit_lp_warpingUnit = lp_warpingUnit;

    if (auto_gf_WarpOutProtossUnit_Trigger == null) {
        auto_gf_WarpOutProtossUnit_Trigger = TriggerCreate("auto_gf_WarpOutProtossUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpOutProtossUnit_Trigger, false, false);
}

bool auto_gf_WarpOutProtossUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpingUnit = auto_gf_WarpOutProtossUnit_lp_warpingUnit;

    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAdd(lp_warpingUnit, "ProtossGenericWarpInOut", lp_warpingUnit, 1);
    libNtve_gf_SendActorMessageToUnit(lp_warpingUnit, "SetOpacity 0.000000 4.500000");
    Wait(5.0, c_timeAI);
    UnitRemove(lp_warpingUnit);
    return true;
}

trigger auto_gf_WarpPrismClaimerReinforcements_Trigger = null;
unit auto_gf_WarpPrismClaimerReinforcements_lp_warpPrism;
string auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitType;
int auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitMaxCount;
int auto_gf_WarpPrismClaimerReinforcements_lp_terrazineTankIndex;

void gf_WarpPrismClaimerReinforcements (unit lp_warpPrism, string lp_warpUnitType, int lp_warpUnitMaxCount, int lp_terrazineTankIndex) {
    auto_gf_WarpPrismClaimerReinforcements_lp_warpPrism = lp_warpPrism;
    auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitType = lp_warpUnitType;
    auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitMaxCount = lp_warpUnitMaxCount;
    auto_gf_WarpPrismClaimerReinforcements_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_WarpPrismClaimerReinforcements_Trigger == null) {
        auto_gf_WarpPrismClaimerReinforcements_Trigger = TriggerCreate("auto_gf_WarpPrismClaimerReinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpPrismClaimerReinforcements_Trigger, false, false);
}

bool auto_gf_WarpPrismClaimerReinforcements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpPrism = auto_gf_WarpPrismClaimerReinforcements_lp_warpPrism;
    string lp_warpUnitType = auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitType;
    int lp_warpUnitMaxCount = auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitMaxCount;
    int lp_terrazineTankIndex = auto_gf_WarpPrismClaimerReinforcements_lp_terrazineTankIndex;

    // Variable Declarations
    abilcmd lv_warpAbilCmd;

    // Automatic Variable Declarations
    string autoB02F5C7C_val;
    int autoC395BA85_n;
    int autoC395BA85_i;

    // Variable Initialization

    // Implementation
    autoB02F5C7C_val = lp_warpUnitType;
    if (autoB02F5C7C_val == "Zealot") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 0);
    }
    else if (autoB02F5C7C_val == "Stalker") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 1);
    }
    else if (autoB02F5C7C_val == "Sentry") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 5);
    }
    else if (autoB02F5C7C_val == "HighTemplar") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 3);
    }
    else if (autoB02F5C7C_val == "Archon") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 9);
    }
    else if (autoB02F5C7C_val == "Immortal") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 2);
    }
    else if (autoB02F5C7C_val == "Colossus") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 15);
    }
    else if (autoB02F5C7C_val == "Scout") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 14);
    }
    else if (autoB02F5C7C_val == "VoidRay") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 8);
    }
    else if (autoB02F5C7C_val == "Carrier") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 6);
    }
    else {
        return true;
    }
    while (!(((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(lp_warpPrism) == false) || (libNtve_gf_UnitInRegion(lp_warpPrism, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_protossClaimerWaveTargetRegion) == true) || (UnitGroupCount(gv_terrazineTankLocations[lp_terrazineTankIndex].lv_protossClaimerWaveUnitGroup, c_unitCountAlive) == 1)))) {
        Wait(0.25, c_timeAI);
    }
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_warpPrism) == true) && (UnitGetType(lp_warpPrism) == "WarpPrism")) {
        UnitIssueOrder(lp_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), gv_terrazineTankLocations[lp_terrazineTankIndex].lv_protossClaimerWaveTransportTarget), c_orderQueueReplace);
        UnitIssueOrder(lp_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
        Wait(0.125, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_warpPrism) == true)) {
        autoC395BA85_n = lp_warpUnitMaxCount;
        for (autoC395BA85_i = 1; autoC395BA85_i <= autoC395BA85_n; autoC395BA85_i += 1) {
            if ((UnitGroupCount(UnitGroupFilter(lp_warpUnitType, c_playerAny, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_protossClaimerWaveUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lp_warpUnitMaxCount) && (UnitIsAlive(lp_warpPrism) == true) && (UnitHasBehavior2(lp_warpPrism, "ProtossGenericWarpInOut") == false)) {
                UnitIssueOrder(UnitFromId(1438), OrderTargetingPoint(lv_warpAbilCmd, RegionRandomPoint(RegionCircle(UnitGetPosition(lp_warpPrism), 3.0))), c_orderQueueReplace);
                Wait(0.25, c_timeAI);
            }

        }
        Wait(10.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_ProtossClaimerWaveReachesTargetQ_Trigger = null;
int auto_gf_ProtossClaimerWaveReachesTargetQ_lp_terrazineTankIndex;

void gf_ProtossClaimerWaveReachesTargetQ (int lp_terrazineTankIndex) {
    auto_gf_ProtossClaimerWaveReachesTargetQ_lp_terrazineTankIndex = lp_terrazineTankIndex;

    if (auto_gf_ProtossClaimerWaveReachesTargetQ_Trigger == null) {
        auto_gf_ProtossClaimerWaveReachesTargetQ_Trigger = TriggerCreate("auto_gf_ProtossClaimerWaveReachesTargetQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_ProtossClaimerWaveReachesTargetQ_Trigger, false, false);
}

bool auto_gf_ProtossClaimerWaveReachesTargetQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_terrazineTankIndex = auto_gf_ProtossClaimerWaveReachesTargetQ_lp_terrazineTankIndex;

    // Automatic Variable Declarations
    int autoEAAD7DBC_val;

    // Implementation
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C3DF8648"), null, gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_terrazineTankLocations[lp_terrazineTankIndex].lv_terrazineTankPoint, 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if (gv_protossReachTankTransmissionCount >= 5) {
        gv_protossReachTankTransmissionCount = 1;
    }
    else {
        gv_protossReachTankTransmissionCount = gv_protossReachTankTransmissionCount + 1;
    }
    autoEAAD7DBC_val = gv_protossReachTankTransmissionCount;
    if (autoEAAD7DBC_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00138", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoEAAD7DBC_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00139", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoEAAD7DBC_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00140", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoEAAD7DBC_val == 4) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00141", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoEAAD7DBC_val == 5) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00142", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_InitializeNovaMission("Nova05");
    TriggerExecute(gt_Init01Technology, true, false);
    libNovC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_BriefingQ, true, true);
        ConsoleCommand("exit", true, true);
    }

    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNovC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_pLAYER_02_PROTOSS_BULLIES, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_PROTOSS_WAVES, "DarkProtoss", 1);
    PlayerApplySkin(gv_pLAYER_02_PROTOSS_BULLIES, "TaldarimSkin", true);
    PlayerApplySkin(gv_pLAYER_04_PROTOSS_WAVES, "TaldarimSkin", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_06_TERRAZINE, "FireSuppressionSystems", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_10_TERRAZINETARGET, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaVoice5", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5A28068E_g;
    int auto5A28068E_var;
    playergroup autoF04F56FE_g;
    int autoF04F56FE_var;
    playergroup autoAEA6D7E6_g;
    int autoAEA6D7E6_var;
    playergroup auto5ABBD8E5_g;
    int auto5ABBD8E5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_taldarimPlayerGroup, gv_pLAYER_02_PROTOSS_BULLIES);
    PlayerGroupAdd(gv_taldarimPlayerGroup, gv_pLAYER_04_PROTOSS_WAVES);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_05_INFESTED_FIGHTPROTOSS);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_08_ZERG);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_PROTOSS_BULLIES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_PROTOSS_WAVES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_TERRAZINE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_COLONISTS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_09_ERADICATOR, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_10_TERRAZINETARGET, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_PROTOSS_BULLIES, gv_pLAYER_06_TERRAZINE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_PROTOSS_WAVES, gv_pLAYER_06_TERRAZINE, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_TERRAZINE, gv_pLAYER_07_COLONISTS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_TERRAZINE, gv_pLAYER_10_TERRAZINETARGET, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_07_COLONISTS, gv_pLAYER_09_ERADICATOR, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_07_COLONISTS, gv_pLAYER_10_TERRAZINETARGET, libNtve_ge_AllianceSetting_Neutral);
    auto5A28068E_g = gv_zergPlayerGroup;
    auto5A28068E_var = -1;
    while (true) {
        auto5A28068E_var = PlayerGroupNextPlayer(auto5A28068E_g, auto5A28068E_var);
        if (auto5A28068E_var < 0) { break; }
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_02_PROTOSS_BULLIES, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_04_PROTOSS_WAVES, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_05_INFESTED_FIGHTPROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_06_TERRAZINE, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_07_COLONISTS, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_08_ZERG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_09_ERADICATOR, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_10_TERRAZINETARGET, libNtve_ge_AllianceSetting_Enemy);
        PlayerSetColorIndex(auto5A28068E_var, 6, true);
    }
    autoF04F56FE_g = gv_taldarimPlayerGroup;
    autoF04F56FE_var = -1;
    while (true) {
        autoF04F56FE_var = PlayerGroupNextPlayer(autoF04F56FE_g, autoF04F56FE_var);
        if (autoF04F56FE_var < 0) { break; }
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_02_PROTOSS_BULLIES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_04_PROTOSS_WAVES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_05_INFESTED_FIGHTPROTOSS, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_06_TERRAZINE, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_07_COLONISTS, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_09_ERADICATOR, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_10_TERRAZINETARGET, libNtve_ge_AllianceSetting_Enemy);
        PlayerSetColorIndex(autoF04F56FE_var, 1, true);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, gv_pLAYER_02_PROTOSS_BULLIES, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, gv_pLAYER_04_PROTOSS_WAVES, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetColorIndex(gv_pLAYER_09_ERADICATOR, 0, true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    autoAEA6D7E6_g = gv_zergPlayerGroup;
    autoAEA6D7E6_var = -1;
    while (true) {
        autoAEA6D7E6_var = PlayerGroupNextPlayer(autoAEA6D7E6_g, autoAEA6D7E6_var);
        if (autoAEA6D7E6_var < 0) { break; }
        PlayerSetState(autoAEA6D7E6_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(autoAEA6D7E6_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(autoAEA6D7E6_var, c_playerStateFoodIgnored, true);
    }
    auto5ABBD8E5_g = gv_taldarimPlayerGroup;
    auto5ABBD8E5_var = -1;
    while (true) {
        auto5ABBD8E5_var = PlayerGroupNextPlayer(auto5ABBD8E5_g, auto5ABBD8E5_var);
        if (auto5ABBD8E5_var < 0) { break; }
        PlayerSetState(auto5ABBD8E5_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(auto5ABBD8E5_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(auto5ABBD8E5_var, c_playerStateFoodIgnored, true);
    }
    PlayerSetState(gv_pLAYER_02_PROTOSS_BULLIES, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_04_PROTOSS_WAVES, c_playerStateFidgetingEnabled, false);
    libNCMI_gf_NM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0D61C4C8_g;
    int auto0D61C4C8_u;
    unit auto0D61C4C8_var;
    unitgroup auto85E423CE_g;
    int auto85E423CE_u;
    unit auto85E423CE_var;
    unitgroup auto71F4FFAB_g;
    int auto71F4FFAB_u;
    unit auto71F4FFAB_var;
    unitgroup autoC386889F_g;
    int autoC386889F_u;
    unit autoC386889F_var;
    unitgroup auto3043FF71_g;
    int auto3043FF71_u;
    unit auto3043FF71_var;
    unitgroup auto63ED60AE_g;
    int auto63ED60AE_u;
    unit auto63ED60AE_var;
    unitgroup auto4B109324_g;
    int auto4B109324_u;
    unit auto4B109324_var;
    unitgroup auto4BFC89B0_g;
    int auto4BFC89B0_u;
    unit auto4BFC89B0_var;
    unitgroup auto9E557A8C_g;
    int auto9E557A8C_u;
    unit auto9E557A8C_var;
    unitgroup auto5EF66E23_g;
    int auto5EF66E23_u;
    unit auto5EF66E23_var;
    unitgroup auto1BD26239_g;
    int auto1BD26239_u;
    unit auto1BD26239_var;
    unitgroup autoDFFB1E2D_g;
    int autoDFFB1E2D_u;
    unit autoDFFB1E2D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nova = UnitFromId(2334);
    libNCUI_gf_SetHeroPanelUnit(1, gv_nova);
    libNCMI_gf_SetNovaHeroUnit(gv_nova);
    libNCMI_gf_EnableDisableHeroReviveSystem(true, gv_pLAYER_01_USER);
    libNCMI_gf_SetAllWorkerRallyPointsForPlayer(gv_pLAYER_01_USER);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(781), "SetMinimapVisibility");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(862), "SetMinimapVisibility");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(863), "SetMinimapVisibility");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(865), "SetMinimapVisibility");
    auto0D61C4C8_g = UnitGroup("PalletMinerals", 0, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0D61C4C8_u = UnitGroupCount(auto0D61C4C8_g, c_unitCountAll);
    for (;; auto0D61C4C8_u -= 1) {
        auto0D61C4C8_var = UnitGroupUnitFromEnd(auto0D61C4C8_g, auto0D61C4C8_u);
        if (auto0D61C4C8_var == null) { break; }
        UnitSetCustomValue(auto0D61C4C8_var, 1, 1.0);
    }
    auto85E423CE_g = UnitGroup("PalletGas", 0, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto85E423CE_u = UnitGroupCount(auto85E423CE_g, c_unitCountAll);
    for (;; auto85E423CE_u -= 1) {
        auto85E423CE_var = UnitGroupUnitFromEnd(auto85E423CE_g, auto85E423CE_u);
        if (auto85E423CE_var == null) { break; }
        UnitSetCustomValue(auto85E423CE_var, 1, 1.0);
    }
    auto71F4FFAB_g = UnitGroup(null, gv_pLAYER_07_COLONISTS, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71F4FFAB_u = UnitGroupCount(auto71F4FFAB_g, c_unitCountAll);
    for (;; auto71F4FFAB_u -= 1) {
        auto71F4FFAB_var = UnitGroupUnitFromEnd(auto71F4FFAB_g, auto71F4FFAB_u);
        if (auto71F4FFAB_var == null) { break; }
        if (((UnitGetType(auto71F4FFAB_var) == "JarbanColonistHut") || (UnitGetType(auto71F4FFAB_var) == "Excavator") || (UnitGetType(auto71F4FFAB_var) == "TankerTruck") || (UnitGetType(auto71F4FFAB_var) == "DumpTruck") || (UnitGetType(auto71F4FFAB_var) == "TruckFlatbedUnit"))) {
            libNtve_gf_SendActorMessageToUnit(auto71F4FFAB_var, "SetMinimapVisibility");
            UnitIssueOrder(auto71F4FFAB_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }

    }
    autoC386889F_g = UnitGroup("InfestedColonistTransportNova", gv_pLAYER_07_COLONISTS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC386889F_u = UnitGroupCount(autoC386889F_g, c_unitCountAll);
    for (;; autoC386889F_u -= 1) {
        autoC386889F_var = UnitGroupUnitFromEnd(autoC386889F_g, autoC386889F_u);
        if (autoC386889F_var == null) { break; }
        UnitIssueOrder(autoC386889F_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimPlay StandUnpowered Stand,Unpowered PlayForever", "Zerg_EggSackOneEggs", RegionFromId(57));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimPlay StandUnpowered Stand,Unpowered PlayForever", "Zerg_EggSackTwoEggs", RegionFromId(57));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimPlay StandUnpowered Stand,Unpowered PlayForever", "Zerg_EggSackThreeEggs", RegionFromId(57));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("SetMinimapVisibility", "Zerg_EggSackOneEggs", RegionFromId(57));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("SetMinimapVisibility", "Zerg_EggSackTwoEggs", RegionFromId(57));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("SetMinimapVisibility", "Zerg_EggSackThreeEggs", RegionFromId(57));
    auto3043FF71_g = UnitGroup("InfestedColonistShip", gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3043FF71_u = UnitGroupCount(auto3043FF71_g, c_unitCountAll);
    for (;; auto3043FF71_u -= 1) {
        auto3043FF71_var = UnitGroupUnitFromEnd(auto3043FF71_g, auto3043FF71_u);
        if (auto3043FF71_var == null) { break; }
        UnitSetCustomValue(auto3043FF71_var, 1, 1.0);
        UnitSetState(auto3043FF71_var, c_unitStateHighlightable, false);
        UnitSetState(auto3043FF71_var, c_unitStateSelectable, false);
        UnitSetState(auto3043FF71_var, c_unitStateTargetable, false);
        UnitSetState(auto3043FF71_var, c_unitStateTooltipable, false);
        UnitSetState(auto3043FF71_var, c_unitStateInvulnerable, true);
        libNtve_gf_SendActorMessageToUnit(auto3043FF71_var, "SetMinimapVisibility");
    }
    auto63ED60AE_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63ED60AE_u = UnitGroupCount(auto63ED60AE_g, c_unitCountAll);
    for (;; auto63ED60AE_u -= 1) {
        auto63ED60AE_var = UnitGroupUnitFromEnd(auto63ED60AE_g, auto63ED60AE_u);
        if (auto63ED60AE_var == null) { break; }
        if (((UnitGetType(auto63ED60AE_var) == "InfestableBiodome") || (UnitGetType(auto63ED60AE_var) == "InfestableColonistBiodome") || (UnitGetType(auto63ED60AE_var) == "InfestableColonistHut") || (UnitGetType(auto63ED60AE_var) == "JarbanInfestibleColonistHut") || (UnitGetType(auto63ED60AE_var) == "InfestableHut") || (UnitGetType(auto63ED60AE_var) == "InfestedArmory") || (UnitGetType(auto63ED60AE_var) == "InfestedBarracks") || (UnitGetType(auto63ED60AE_var) == "InfestedBunker") || (UnitGetType(auto63ED60AE_var) == "InfestedCC") || (UnitGetType(auto63ED60AE_var) == "InfestedEngBay") || (UnitGetType(auto63ED60AE_var) == "InfestedFactory") || (UnitGetType(auto63ED60AE_var) == "InfestedMissileTurret") || (UnitGetType(auto63ED60AE_var) == "InfestedRefinery") || (UnitGetType(auto63ED60AE_var) == "InfestedStarport") || (UnitGetType(auto63ED60AE_var) == "InfestedSupply"))) {
            UnitBehaviorAddPlayer(auto63ED60AE_var, "ColonyInfestation", UnitGetOwner(auto63ED60AE_var), 1);
        }

    }
    auto4B109324_g = UnitGroup("InfestedBunker", gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B109324_u = UnitGroupCount(auto4B109324_g, c_unitCountAll);
    for (;; auto4B109324_u -= 1) {
        auto4B109324_var = UnitGroupUnitFromEnd(auto4B109324_g, auto4B109324_u);
        if (auto4B109324_var == null) { break; }
        UnitBehaviorAddPlayer(auto4B109324_var, "ColonyInfestation", gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, 1);
        UnitCargoCreate(auto4B109324_var, "InfestedTerranCampaign", 4);
    }
    auto4BFC89B0_g = UnitGroup("NovaInfestedSiegeTankUprooted", gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4BFC89B0_u = UnitGroupCount(auto4BFC89B0_g, c_unitCountAll);
    for (;; auto4BFC89B0_u -= 1) {
        auto4BFC89B0_var = UnitGroupUnitFromEnd(auto4BFC89B0_g, auto4BFC89B0_u);
        if (auto4BFC89B0_var == null) { break; }
        UnitGroupAdd(gv_infestedSiegeTanks, auto4BFC89B0_var);
        AISetUnitScriptControlled(auto4BFC89B0_var, true);
    }
    auto9E557A8C_g = UnitGroup("NovaInfestedSiegeTankUprooted", gv_pLAYER_05_INFESTED_FIGHTPROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9E557A8C_u = UnitGroupCount(auto9E557A8C_g, c_unitCountAll);
    for (;; auto9E557A8C_u -= 1) {
        auto9E557A8C_var = UnitGroupUnitFromEnd(auto9E557A8C_g, auto9E557A8C_u);
        if (auto9E557A8C_var == null) { break; }
        UnitGroupAdd(gv_infestedSiegeTanks, auto9E557A8C_var);
        AISetUnitScriptControlled(auto9E557A8C_var, true);
    }
    auto5EF66E23_g = UnitGroup("InfestedCivilianBurrowed", gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5EF66E23_u = UnitGroupCount(auto5EF66E23_g, c_unitCountAll);
    for (;; auto5EF66E23_u -= 1) {
        auto5EF66E23_var = UnitGroupUnitFromEnd(auto5EF66E23_g, auto5EF66E23_u);
        if (auto5EF66E23_var == null) { break; }
        UnitBehaviorAddPlayer(auto5EF66E23_var, "ScanRangeBonus", gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, 1);
    }
    auto1BD26239_g = UnitGroup("InfestedTerranCampaignBurrowed", gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1BD26239_u = UnitGroupCount(auto1BD26239_g, c_unitCountAll);
    for (;; auto1BD26239_u -= 1) {
        auto1BD26239_var = UnitGroupUnitFromEnd(auto1BD26239_g, auto1BD26239_u);
        if (auto1BD26239_var == null) { break; }
        UnitBehaviorAddPlayer(auto1BD26239_var, "ScanRangeBonus", gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, 1);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(369), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(369), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1093), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1093), true);
    AISetUnitScriptControlled(UnitFromId(1205), true);
    UnitCargoCreate(UnitFromId(1208), "WarPig", 4);
    UnitSetCustomValue(gv_bonusObjective_Blightbringer, 1, 1.0);
    autoDFFB1E2D_g = UnitGroup("InfestedCivilian", gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDFFB1E2D_u = UnitGroupCount(autoDFFB1E2D_g, c_unitCountAll);
    for (;; autoDFFB1E2D_u -= 1) {
        autoDFFB1E2D_var = UnitGroupUnitFromEnd(autoDFFB1E2D_g, autoDFFB1E2D_u);
        if (autoDFFB1E2D_var == null) { break; }
        UnitGroupAdd(gv_bonusObjective_HatchedInfestedGroup, autoDFFB1E2D_var);
        UnitBehaviorAdd(autoDFFB1E2D_var, "CritterWanderLeashShort", autoDFFB1E2D_var, 1);
    }
    UnitBehaviorRemove(UnitFromId(895), "Detector11", 1);
    libNtve_gf_PauseUnit(UnitFromId(895), true);
    UnitSetState(UnitFromId(895), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(895), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(895), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(895), c_unitStateTooltipable, false);
    UnitSetState(UnitFromId(895), c_unitStateInvulnerable, true);
    UnitSetCustomValue(UnitFromId(895), 1, 1.0);
    UnitBehaviorRemove(UnitFromId(1340), "Detector11", 1);
    libNtve_gf_PauseUnit(UnitFromId(1340), true);
    UnitSetState(UnitFromId(1340), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(1340), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1340), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(1340), c_unitStateTooltipable, false);
    UnitSetState(UnitFromId(1340), c_unitStateInvulnerable, true);
    UnitSetCustomValue(UnitFromId(1340), 1, 1.0);
    UnitSetCustomValue(UnitFromId(896), 1, 1.0);
    UnitSetPropertyFixed(UnitFromId(1634), c_unitPropLifePercent, 50.0);
    UnitSetPropertyFixed(UnitFromId(1634), c_unitPropKills, 5.0);
    UnitBehaviorAdd(UnitFromId(1634), "CritterWanderLeashShort", UnitFromId(1634), 1);
    UnitSetPropertyFixed(UnitFromId(1636), c_unitPropLifePercent, 30.0);
    UnitSetPropertyFixed(UnitFromId(1636), c_unitPropKills, 2.0);
    UnitBehaviorAdd(UnitFromId(1636), "CritterWanderLeashShort", UnitFromId(1636), 1);
    UnitSetPropertyFixed(UnitFromId(1635), c_unitPropLifePercent, 1.0);
    UnitSetPropertyFixed(UnitFromId(1635), c_unitPropKills, 17.0);
    UnitBehaviorAdd(UnitFromId(1635), "CritterWanderLeashShort", UnitFromId(1635), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "nDLC_Music_Nova05_Main";
    gv_mapMusicTrack5 = "nDLC_Music_Nova05_Intro";
    gv_mapMusicTrack6 = "nDLC_Music_Nova05_Outro";
    gv_mapMusicTrack7 = "nDLC_Music_Nova05_BossFight";
    gv_mapMusicTrack2 = "Ambience_Nova05_Main";
    gv_mapMusicTrack3 = "Ambience_Nova05_ZergMines";
    gv_mapMusicTrack4 = "Ambience_Nova05_ScienceFacility";
    gf_ToggleNovaWeaponReverb(ge_PRESETWeaponReverb_Outdoor);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    GameSetToDLighting("JarbanMinor_Jungle");
    libLbty_gf_AutoRevealRegion(RegionFromId(65), RegionFromId(65), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(74), RegionFromId(74), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(94), RegionFromId(94), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(95), RegionFromId(95), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(68), RegionFromId(68), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(69), RegionFromId(69), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(70), RegionFromId(70), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(155), RegionFromId(155), gv_pLAYER_01_USER);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Griffin_Pickup_Flyby");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto95A5FABE_g;
    int auto95A5FABE_u;
    unit auto95A5FABE_var;
    playergroup auto60B674C5_g;
    int auto60B674C5_var;
    playergroup auto851ADC83_g;
    int auto851ADC83_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_07_COLONISTS, "ShieldWall", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_INFESTED_FIGHTPROTOSS, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_08_ZERG, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_INFESTED_FIGHTPROTOSS, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_08_ZERG, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_PROTOSS_BULLIES, "ObserverGraviticBooster", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_PROTOSS_WAVES, "ObserverGraviticBooster", 1);
    auto95A5FABE_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto95A5FABE_u = UnitGroupCount(auto95A5FABE_g, c_unitCountAll);
    for (;; auto95A5FABE_u -= 1) {
        auto95A5FABE_var = UnitGroupUnitFromEnd(auto95A5FABE_g, auto95A5FABE_u);
        if (auto95A5FABE_var == null) { break; }
        if (((UnitGetType(auto95A5FABE_var) == "InfestableBiodome") || (UnitGetType(auto95A5FABE_var) == "InfestableColonistBiodome") || (UnitGetType(auto95A5FABE_var) == "InfestableColonistHut") || (UnitGetType(auto95A5FABE_var) == "InfestableHut") || (UnitGetType(auto95A5FABE_var) == "InfestedArmory") || (UnitGetType(auto95A5FABE_var) == "InfestedBarracks") || (UnitGetType(auto95A5FABE_var) == "InfestedBunker") || (UnitGetType(auto95A5FABE_var) == "InfestedCC") || (UnitGetType(auto95A5FABE_var) == "InfestedEngBay") || (UnitGetType(auto95A5FABE_var) == "InfestedFactory") || (UnitGetType(auto95A5FABE_var) == "InfestedMissileTurret") || (UnitGetType(auto95A5FABE_var) == "InfestedRefinery") || (UnitGetType(auto95A5FABE_var) == "InfestedStarport") || (UnitGetType(auto95A5FABE_var) == "InfestedSupply"))) {
            if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
                UnitSetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, (UnitGetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, c_unitPropCurrent) * 0.5));
            }
            else {
                UnitSetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, (UnitGetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, c_unitPropCurrent) * 0.75));
            }
        }

    }
    auto60B674C5_g = gv_zergPlayerGroup;
    auto60B674C5_var = -1;
    while (true) {
        auto60B674C5_var = PlayerGroupNextPlayer(auto60B674C5_g, auto60B674C5_var);
        if (auto60B674C5_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto60B674C5_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "ZergFlyerArmorsLevel1", 1);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto60B674C5_var, "zerglingattackspeed", 1);
            TechTreeAbilityAllow(auto60B674C5_var, AbilityCommand("FungalGrowth", 0), true);
        }
        else {
            TechTreeAbilityAllow(auto60B674C5_var, AbilityCommand("FungalGrowth", 0), false);
        }
    }
    auto851ADC83_g = gv_taldarimPlayerGroup;
    auto851ADC83_var = -1;
    while (true) {
        auto851ADC83_var = PlayerGroupNextPlayer(auto851ADC83_g, auto851ADC83_var);
        if (auto851ADC83_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto851ADC83_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto851ADC83_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto851ADC83_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto851ADC83_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto851ADC83_var, "ProtossShieldsLevel1", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_AddMissionTipCampaign("Liberator");
    libNCMI_gf_AddMissionTipCampaign("Raven");
    libNCMI_gf_AddMissionTipCampaign("Terrazine Harvester");
    libNCMI_gf_AddMissionTipCampaign("Tal'darim Challenge");
    libComC_gf_AddUnitTypeToUnitHelpPanel("Zealot", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("HERC", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("HERCCompound", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Stalker", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Sentry", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Immortal", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Colossus", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Zergling", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Roach", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Infestor", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Overlord", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Overseer", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("QueenClassic", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("InfestedExploder", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("NovaInfestedSiegeTank", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("NovaInfestedBanshee", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libComC_gf_AddUnitTypeToUnitHelpPanel("Corruptor", gv_pLAYER_01_USER);
        libComC_gf_AddUnitTypeToUnitHelpPanel("Guardian", gv_pLAYER_01_USER);
    }

    libNCMI_gf_AddMissionCheat("smallclaim", "Run a small-sized protoss claimer wave", gt_DebugRunSmallClaimWave, libNCMI_ge_MissionCheatType_Mechanic, libNCMI_ge_MissionCheatUIType_Button);
    libNCMI_gf_AddMissionCheat("medclaim", "Run a medium-sized protoss claimer wave", gt_DebugRunMediumClaimWave, libNCMI_ge_MissionCheatType_Mechanic, libNCMI_ge_MissionCheatUIType_Button);
    libNCMI_gf_AddMissionCheat("largeclaim", "Run a large-sized protoss claimer wave", gt_DebugRunLargeClaimWave, libNCMI_ge_MissionCheatType_Mechanic, libNCMI_ge_MissionCheatUIType_Button);
    libNCMI_gf_AddMissionCheat("allclaim", "Run 8 claim waves at once", gt_DebugRunAllClaimWaves, libNCMI_ge_MissionCheatType_Mechanic, libNCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Run Small Claim Wave
//--------------------------------------------------------------------------------------------------
bool gt_DebugRunSmallClaimWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossClaimWavesSent += 1;
    if ((ModI(gv_protossClaimWavesSent, 2) == 1)) {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_SmallA);
    }
    else {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_SmallB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugRunSmallClaimWave_Init () {
    gt_DebugRunSmallClaimWave = TriggerCreate("gt_DebugRunSmallClaimWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Run Medium Claim Wave
//--------------------------------------------------------------------------------------------------
bool gt_DebugRunMediumClaimWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossClaimWavesSent += 1;
    if ((ModI(gv_protossClaimWavesSent, 2) == 1)) {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_MediumA);
    }
    else {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_MediumB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugRunMediumClaimWave_Init () {
    gt_DebugRunMediumClaimWave = TriggerCreate("gt_DebugRunMediumClaimWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Run Large Claim Wave
//--------------------------------------------------------------------------------------------------
bool gt_DebugRunLargeClaimWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossClaimWavesSent += 1;
    if ((ModI(gv_protossClaimWavesSent, 2) == 1)) {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeA);
    }
    else {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugRunLargeClaimWave_Init () {
    gt_DebugRunLargeClaimWave = TriggerCreate("gt_DebugRunLargeClaimWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Run All Claim Waves
//--------------------------------------------------------------------------------------------------
bool gt_DebugRunAllClaimWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_protossClaimWavesSent += 1;
    gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_SmallA);
    Wait(1.0, c_timeGame);
    gv_protossClaimWavesSent += 1;
    gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_SmallB);
    Wait(1.0, c_timeGame);
    gv_protossClaimWavesSent += 1;
    gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_MediumA);
    Wait(1.0, c_timeGame);
    gv_protossClaimWavesSent += 1;
    gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_MediumB);
    Wait(1.0, c_timeGame);
    gv_protossClaimWavesSent += 1;
    gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeA);
    Wait(1.0, c_timeGame);
    gv_protossClaimWavesSent += 1;
    gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeB);
    Wait(1.0, c_timeGame);
    gv_protossClaimWavesSent += 1;
    gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeA);
    Wait(1.0, c_timeGame);
    gv_protossClaimWavesSent += 1;
    gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeB);
    Wait(1.0, c_timeGame);
    gv_protossClaimWavesSent += 1;
    gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeA);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugRunAllClaimWaves_Init () {
    gt_DebugRunAllClaimWaves = TriggerCreate("gt_DebugRunAllClaimWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Toggle AI Time Pause/Unpause
//--------------------------------------------------------------------------------------------------
bool gt_DebugToggleAITimePauseUnpause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/288BBAD8"), true);
        libComC_gf_PauseAITimeCampaign(true);
        UnitPauseAll(true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/566D777E"), true);
        libComC_gf_PauseAITimeCampaign(false);
        UnitPauseAll(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugToggleAITimePauseUnpause_Init () {
    gt_DebugToggleAITimePauseUnpause = TriggerCreate("gt_DebugToggleAITimePauseUnpause_Func");
    TriggerAddEventChatMessage(gt_DebugToggleAITimePauseUnpause, c_playerAny, "timetest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Test Objective Completion
//--------------------------------------------------------------------------------------------------
bool gt_DebugTestObjectiveCompletion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/9FDBEB97", "A", StringToText(StringWord(EventChatMessage(false), 2)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/9FDBEB97"), true);
    gv_objectiveExtractTerrazineCount = StringToInt(StringWord(EventChatMessage(false), 2));
    TriggerExecute(gt_ObjectiveExtractTerrazineUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugTestObjectiveCompletion_Init () {
    gt_DebugTestObjectiveCompletion = TriggerCreate("gt_DebugTestObjectiveCompletion_Func");
    TriggerAddEventChatMessage(gt_DebugTestObjectiveCompletion, c_playerAny, "obj", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Handler
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoE7930946_ae;
    const int autoE7930946_ai = 1;
    unitgroup auto0BC6F894_g;
    int auto0BC6F894_u;
    unit auto0BC6F894_var;
    int autoD90D5367_ae;
    const int autoD90D5367_ai = 1;
    unitgroup auto1934A6F2_g;
    int auto1934A6F2_u;
    unit auto1934A6F2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(124);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(123);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(126);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(125);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(128);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(127);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(130);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(129);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(132);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(131);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(134);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(133);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(136);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(135);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(138);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(137);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(140);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(139);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(142);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(141);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(144);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(143);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(146);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(145);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(148);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(147);
    gv_perfPausedCount += 1;
    gv_perfPausedRegions[gv_perfPausedCount] = RegionFromId(150);
    gv_perfRevealRegions[gv_perfPausedCount] = RegionFromId(149);
    autoE7930946_ae = gv_perfPausedCount;
    lv_index = 1;
    for ( ; ( (autoE7930946_ai >= 0 && lv_index <= autoE7930946_ae) || (autoE7930946_ai < 0 && lv_index >= autoE7930946_ae) ) ; lv_index += autoE7930946_ai ) {
        gv_perfPausedUnits[lv_index] = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_perfPausedRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0BC6F894_g = gv_perfPausedUnits[lv_index];
        auto0BC6F894_u = UnitGroupCount(auto0BC6F894_g, c_unitCountAll);
        for (;; auto0BC6F894_u -= 1) {
            auto0BC6F894_var = UnitGroupUnitFromEnd(auto0BC6F894_g, auto0BC6F894_u);
            if (auto0BC6F894_var == null) { break; }
            if ((UnitFilterMatch(auto0BC6F894_var, gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && ((UnitGetType(auto0BC6F894_var) == "JarbanInfestibleColonistHut") || (UnitGetType(auto0BC6F894_var) == "InfestedBarracks") || (UnitGetType(auto0BC6F894_var) == "InfestedFactory") || (UnitGetType(auto0BC6F894_var) == "InfestedStarport") || (UnitGetType(auto0BC6F894_var) == "InfestedCC") || (UnitGetType(auto0BC6F894_var) == "InfestedMissileTurret") || (UnitGetType(auto0BC6F894_var) == "InfestedBunker") || (UnitGetType(auto0BC6F894_var) == "InfestedEngBay") || (UnitGetType(auto0BC6F894_var) == "InfestedArmory") || (UnitGetType(auto0BC6F894_var) == "InfestedSupply") || (UnitGetType(auto0BC6F894_var) == "Hatchery") || (UnitGetType(auto0BC6F894_var) == "Lair") || (UnitGetType(auto0BC6F894_var) == "Hive") || (UnitGetType(auto0BC6F894_var) == "CreepTumorBurrowed") || (UnitGetType(auto0BC6F894_var) == "SporeCrawler") || (UnitGetType(auto0BC6F894_var) == "SpineCrawler") || (UnitGetType(auto0BC6F894_var) == "Extractor"))) {
                UnitGroupRemove(gv_perfPausedUnits[lv_index], auto0BC6F894_var);
            }
            else {
                libNtve_gf_PauseUnit(auto0BC6F894_var, true);
                UnitSetCustomValue(auto0BC6F894_var, 1, 1.0);
            }
        }
    }
    while (true) {
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        autoD90D5367_ae = gv_perfPausedCount;
        lv_index = 1;
        for ( ; ( (autoD90D5367_ai >= 0 && lv_index <= autoD90D5367_ae) || (autoD90D5367_ai < 0 && lv_index >= autoD90D5367_ae) ) ; lv_index += autoD90D5367_ai ) {
            if ((gv_perfRevealRegions[lv_index] != null) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_perfRevealRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_PROTOSS_BULLIES, gv_perfRevealRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_PROTOSS_WAVES, gv_perfRevealRegions[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
                auto1934A6F2_g = gv_perfPausedUnits[lv_index];
                auto1934A6F2_u = UnitGroupCount(auto1934A6F2_g, c_unitCountAll);
                for (;; auto1934A6F2_u -= 1) {
                    auto1934A6F2_var = UnitGroupUnitFromEnd(auto1934A6F2_g, auto1934A6F2_u);
                    if (auto1934A6F2_var == null) { break; }
                    libNtve_gf_PauseUnit(auto1934A6F2_var, false);
                    UnitGroupRemove(gv_perfPausedUnits[lv_index], auto1934A6F2_var);
                    UnitSetCustomValue(auto1934A6F2_var, 1, 0.0);
                }
                gv_perfRevealRegions[lv_index] = null;
            }

        }
        Wait(0.25, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceHandler_Init () {
    gt_PerformanceHandler = TriggerCreate("gt_PerformanceHandler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pause Units Again
//--------------------------------------------------------------------------------------------------
bool gt_PauseUnitsAgain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto0099E250_ae;
    int auto0099E250_var;
    unitgroup auto69CF187D_g;
    int auto69CF187D_u;
    unit auto69CF187D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0099E250_ae = gv_perfPausedCount;
    auto0099E250_var = 1;
    for ( ; auto0099E250_var <= auto0099E250_ae; auto0099E250_var += 1 ) {
        if ((gv_perfRevealRegions[auto0099E250_var] != null)) {
            auto69CF187D_g = gv_perfPausedUnits[auto0099E250_var];
            auto69CF187D_u = UnitGroupCount(auto69CF187D_g, c_unitCountAll);
            for (;; auto69CF187D_u -= 1) {
                auto69CF187D_var = UnitGroupUnitFromEnd(auto69CF187D_g, auto69CF187D_u);
                if (auto69CF187D_var == null) { break; }
                libNtve_gf_PauseUnit(auto69CF187D_var, true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PauseUnitsAgain_Init () {
    gt_PauseUnitsAgain = TriggerCreate("gt_PauseUnitsAgain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Scan Or Nuke Used
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalScanOrNukeUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_perfRegionIndex;

    // Automatic Variable Declarations
    int auto81643518_ae;
    int auto81643518_var;
    unitgroup autoD22248C3_g;
    int autoD22248C3_u;
    unit autoD22248C3_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto81643518_ae = gv_perfPausedCount;
    auto81643518_var = 1;
    for ( ; auto81643518_var <= auto81643518_ae; auto81643518_var += 1 ) {
        if ((gv_perfRevealRegions[auto81643518_var] != null) && (RegionContainsPoint(gv_perfRevealRegions[auto81643518_var], EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) == true)) {
            lv_perfRegionIndex = auto81643518_var;
            break;
        }

    }
    if ((gv_perfRevealRegions[lv_perfRegionIndex] != null)) {
        autoD22248C3_g = gv_perfPausedUnits[lv_perfRegionIndex];
        autoD22248C3_u = UnitGroupCount(autoD22248C3_g, c_unitCountAll);
        for (;; autoD22248C3_u -= 1) {
            autoD22248C3_var = UnitGroupUnitFromEnd(autoD22248C3_g, autoD22248C3_u);
            if (autoD22248C3_var == null) { break; }
            libNtve_gf_PauseUnit(autoD22248C3_var, false);
            UnitGroupRemove(gv_perfPausedUnits[lv_perfRegionIndex], autoD22248C3_var);
            UnitSetCustomValue(autoD22248C3_var, 1, 0.0);
        }
        gv_perfRevealRegions[lv_perfRegionIndex] = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalScanOrNukeUsed_Init () {
    gt_OrbitalScanOrNukeUsed = TriggerCreate("gt_OrbitalScanOrNukeUsed_Func");
    TriggerAddEventPlayerEffectUsed(gt_OrbitalScanOrNukeUsed, gv_pLAYER_01_USER, "ScannerSweep");
    TriggerAddEventPlayerEffectUsed(gt_OrbitalScanOrNukeUsed, gv_pLAYER_01_USER, "HeroNukeDetonate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Map Cheat Used
//--------------------------------------------------------------------------------------------------
bool gt_ShowMapCheatUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2166BD5A_ae;
    int auto2166BD5A_var;
    unitgroup autoEF2F6C68_g;
    int autoEF2F6C68_u;
    unit autoEF2F6C68_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_PerformanceHandler);
    auto2166BD5A_ae = gv_perfPausedCount;
    auto2166BD5A_var = 1;
    for ( ; auto2166BD5A_var <= auto2166BD5A_ae; auto2166BD5A_var += 1 ) {
        gv_perfRevealRegions[auto2166BD5A_var] = null;
        autoEF2F6C68_g = gv_perfPausedUnits[auto2166BD5A_var];
        autoEF2F6C68_u = UnitGroupCount(autoEF2F6C68_g, c_unitCountAll);
        for (;; autoEF2F6C68_u -= 1) {
            autoEF2F6C68_var = UnitGroupUnitFromEnd(autoEF2F6C68_g, autoEF2F6C68_u);
            if (autoEF2F6C68_var == null) { break; }
            libNtve_gf_PauseUnit(autoEF2F6C68_var, false);
            UnitGroupRemove(gv_perfPausedUnits[auto2166BD5A_var], autoEF2F6C68_var);
            UnitSetCustomValue(autoEF2F6C68_var, 1, 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowMapCheatUsed_Init () {
    gt_ShowMapCheatUsed = TriggerCreate("gt_ShowMapCheatUsed_Func");
    TriggerAddEventCheatUsed(gt_ShowMapCheatUsed, gv_pLAYER_01_USER, c_gameCheatShowmap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C0A0938F"), null, PointFromId(154));
    libNCMI_gf_StartingWorkersAutoHarvest(RegionFromId(89), null);
    TriggerExecute(gt_InitializeTerrazineTankLocations, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveExtractTerrazineCreate, true, true);
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00071", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_CreateTerrazineTankPings, true, true);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00072", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_novaSoulsUnit, "Mission_Nova05|Line00120", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    Wait(270.0, c_timeAI);
    TriggerExecute(gt_FriendlyUmojansQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Terrazine Tank Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateTerrazineTankPings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_terrazineTankIndex;
    fixed lv_revealerRange;

    // Automatic Variable Declarations
    const int auto6603F5E4_ae = 4;
    const int auto6603F5E4_ai = 1;
    const int auto8E09555C_ae = 6;
    const int auto8E09555C_ai = 1;
    int auto702AF802_ae;
    const int auto702AF802_ai = 1;

    // Variable Initialization
    lv_revealerRange = 5.0;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 1, 0) == 1)) {
        VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_terrazineTankLocations[1].lv_terrazineTankUnit), lv_revealerRange));
        gv_terrazineTankLocations[1].lv_revealer = VisRevealerLastCreated();
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_terrazineTankLocations[1].lv_terrazineTankUnit), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShowHideUnit(gv_terrazineTankLocations[1].lv_beaconUnit, true);
        libNCMI_gf_SetUnitInfoTextCampaign(gv_terrazineTankLocations[1].lv_beaconUnit, null, StringExternal("Param/Value/44D3D7E7"), StringExternal("Param/Value/512E142B"));
    }

    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_terrazineTankIndex = 2;
    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), lv_revealerRange));
    gv_terrazineTankLocations[lv_terrazineTankIndex].lv_revealer = VisRevealerLastCreated();
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), 2.0, Color(0.00, 100.00, 0.00));
    libNtve_gf_ShowHideUnit(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_beaconUnit, true);
    libNCMI_gf_SetUnitInfoTextCampaign(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_beaconUnit, null, StringExternal("Param/Value/35E447A5"), StringExternal("Param/Value/71C9BE61"));
    Wait(1.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_terrazineTankIndex = 3;
    for ( ; ( (auto6603F5E4_ai >= 0 && lv_terrazineTankIndex <= auto6603F5E4_ae) || (auto6603F5E4_ai < 0 && lv_terrazineTankIndex >= auto6603F5E4_ae) ) ; lv_terrazineTankIndex += auto6603F5E4_ai ) {
        VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), lv_revealerRange));
        gv_terrazineTankLocations[lv_terrazineTankIndex].lv_revealer = VisRevealerLastCreated();
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShowHideUnit(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_beaconUnit, true);
        libNCMI_gf_SetUnitInfoTextCampaign(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_beaconUnit, null, StringExternal("Param/Value/E19169C8"), StringExternal("Param/Value/76D3BFD1"));
    }
    Wait(1.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_terrazineTankIndex = 5;
    for ( ; ( (auto8E09555C_ai >= 0 && lv_terrazineTankIndex <= auto8E09555C_ae) || (auto8E09555C_ai < 0 && lv_terrazineTankIndex >= auto8E09555C_ae) ) ; lv_terrazineTankIndex += auto8E09555C_ai ) {
        VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), lv_revealerRange));
        gv_terrazineTankLocations[lv_terrazineTankIndex].lv_revealer = VisRevealerLastCreated();
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShowHideUnit(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_beaconUnit, true);
        libNCMI_gf_SetUnitInfoTextCampaign(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_beaconUnit, null, StringExternal("Param/Value/E328651F"), StringExternal("Param/Value/98AF372C"));
    }
    Wait(1.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto702AF802_ae = gv_terrazineTankLocationsCount;
    lv_terrazineTankIndex = 7;
    for ( ; ( (auto702AF802_ai >= 0 && lv_terrazineTankIndex <= auto702AF802_ae) || (auto702AF802_ai < 0 && lv_terrazineTankIndex >= auto702AF802_ae) ) ; lv_terrazineTankIndex += auto702AF802_ai ) {
        VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), lv_revealerRange));
        gv_terrazineTankLocations[lv_terrazineTankIndex].lv_revealer = VisRevealerLastCreated();
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), 2.0, Color(0.00, 100.00, 0.00));
        libNtve_gf_ShowHideUnit(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_beaconUnit, true);
        libNCMI_gf_SetUnitInfoTextCampaign(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_beaconUnit, null, StringExternal("Param/Value/1910DB4A"), StringExternal("Param/Value/705FD0F9"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTerrazineTankPings_Init () {
    gt_CreateTerrazineTankPings = TriggerCreate("gt_CreateTerrazineTankPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Something Terrible Q
//--------------------------------------------------------------------------------------------------
bool gt_SomethingTerribleQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    unitgroup autoCB5898EA_g;
    int autoCB5898EA_u;
    unit autoCB5898EA_var;

    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(8)) == false)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if ((TimerGetRemaining(lv_talkTimer) > 0.0)) {
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(389), 3.0, Color(100.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3941BD01"), null, PointFromId(389));
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00006", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, PointFromId(389));
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, PointFromId(154));
    autoCB5898EA_g = UnitGroup("InfestedCocoon", c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCB5898EA_u = UnitGroupCount(autoCB5898EA_g, c_unitCountAll);
    for (;; autoCB5898EA_u -= 1) {
        autoCB5898EA_var = UnitGroupUnitFromEnd(autoCB5898EA_g, autoCB5898EA_u);
        if (autoCB5898EA_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", c_unitCreateIgnorePlacement, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitGetPosition(autoCB5898EA_var));
        AIAttackWaveUseUnit(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitLastCreated());
        UnitKill(autoCB5898EA_var);
        Wait(0.125, c_timeAI);
    }
    AIAttackWaveSend(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SomethingTerribleQ_Init () {
    gt_SomethingTerribleQ = TriggerCreate("gt_SomethingTerribleQ_Func");
    TriggerAddEventTimePeriodic(gt_SomethingTerribleQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Come Down Ramp
//--------------------------------------------------------------------------------------------------
bool gt_InfestedComeDownRamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionGetCenter(RegionFromId(37)));
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionGetCenter(RegionFromId(37)));
    AIAttackWaveUseGroup(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitGroup(null, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, 10, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedComeDownRamp_Init () {
    gt_InfestedComeDownRamp = TriggerCreate("gt_InfestedComeDownRamp_Func");
    TriggerAddEventTimePeriodic(gt_InfestedComeDownRamp, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Found The Miners Via Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_FoundTheMinersViaAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_INFESTED_FIGHTPROTOSS) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_05_INFESTED_FIGHTPROTOSS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FoundTheMinersViaUnburrowQ, false);
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00183", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FoundTheMinersViaAttackQ_Init () {
    gt_FoundTheMinersViaAttackQ = TriggerCreate("gt_FoundTheMinersViaAttackQ_Func");
    TriggerAddEventUnitAttacked2(gt_FoundTheMinersViaAttackQ, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Found The Miners Via Unburrow Q
//--------------------------------------------------------------------------------------------------
bool gt_FoundTheMinersViaUnburrowQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnit(), gv_pLAYER_01_USER) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_INFESTED_FIGHTPROTOSS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FoundTheMinersViaAttackQ, false);
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00183", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FoundTheMinersViaUnburrowQ_Init () {
    gt_FoundTheMinersViaUnburrowQ = TriggerCreate("gt_FoundTheMinersViaUnburrowQ_Func");
    TriggerAddEventUnitAbility(gt_FoundTheMinersViaUnburrowQ, null, AbilityCommand("BurrowInfestedTerranCampaignUp", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_FoundTheMinersViaUnburrowQ, null, AbilityCommand("BurrowInfestedCivilianUp", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_FoundTheMinersViaUnburrowQ, null, AbilityCommand("BurrowInfestedExploderUp", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_FoundTheMinersViaUnburrowQ, null, AbilityCommand("BurrowInfestedAbominationUp", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Never Take Me Alive! Q
//--------------------------------------------------------------------------------------------------
bool gt_NeverTakeMeAliveQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    unitgroup auto6138109D_g;
    int auto6138109D_u;
    unit auto6138109D_var;

    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(792)) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(UnitFromId(792), gv_pLAYER_01_USER) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(792)), 3.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9F26D80B"), null, UnitGetPosition(UnitFromId(792)));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(24), 6.0, false);
    libNtve_gf_ShareVisionofUnit(UnitFromId(792), true, gv_pLAYER_01_USER);
    UnitIssueOrder(UnitFromId(792), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(804)), c_orderQueueReplace);
    auto6138109D_g = UnitGroup(null, gv_pLAYER_05_INFESTED_FIGHTPROTOSS, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6138109D_u = UnitGroupCount(auto6138109D_g, c_unitCountAll);
    for (;; auto6138109D_u -= 1) {
        auto6138109D_var = UnitGroupUnitFromEnd(auto6138109D_g, auto6138109D_u);
        if (auto6138109D_var == null) { break; }
        UnitIssueOrder(auto6138109D_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(792)), c_orderQueueReplace);
    }
    Wait(2.0, c_timeAI);
    TimerStart(lv_talkTimer, 1.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(UnitFromId(792)) == true) && (TimerGetRemaining(lv_talkTimer) > 0.0)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(792), "Mission_Nova05|Line00008", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    UnitKill(UnitFromId(792));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NeverTakeMeAliveQ_Init () {
    gt_NeverTakeMeAliveQ = TriggerCreate("gt_NeverTakeMeAliveQ_Func");
    TriggerAddEventTimePeriodic(gt_NeverTakeMeAliveQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aberration Surprise Q
//--------------------------------------------------------------------------------------------------
bool gt_AberrationSurpriseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(UnitFromId(375));
    Wait(0.5, c_timeAI);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, PointFromId(334));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitIsAlive(UnitLastCreated()) == true)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FD294869"), null, PointFromId(334));
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitLastCreated(), "Mission_Nova05|Line00010", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AberrationSurpriseQ_Init () {
    gt_AberrationSurpriseQ = TriggerCreate("gt_AberrationSurpriseQ_Func");
    TriggerAddEventTimePeriodic(gt_AberrationSurpriseQ, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Sees Infested Siege Tank Q
//--------------------------------------------------------------------------------------------------
bool gt_NovaSeesInfestedSiegeTankQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SiegeTankAlleyQ, false);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitIsAlive(EventUnit()) == true)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/640046FA"), null, UnitGetPosition(EventUnit()));
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 6.0, Color(100.00, 0.00, 0.00));
        Wait(2.0, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitLastCreated(), "Mission_Nova05|Line00202", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaSeesInfestedSiegeTankQ_Init () {
    gt_NovaSeesInfestedSiegeTankQ = TriggerCreate("gt_NovaSeesInfestedSiegeTankQ_Func");
    TriggerAddEventUnitAbility(gt_NovaSeesInfestedSiegeTankQ, null, AbilityCommand("NovaInfestedSiegeTankRoot", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tank Alley Q
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTankAlleyQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_NovaSeesInfestedSiegeTankQ, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(25), 12.0, false);
    Wait(2.0, c_timeAI);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/80C2ECA9"), null, RegionGetCenter(RegionFromId(25)));
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(25)), 6.0, Color(100.00, 0.00, 0.00));
        Wait(2.0, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitLastCreated(), "Mission_Nova05|Line00202", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTankAlleyQ_Init () {
    gt_SiegeTankAlleyQ = TriggerCreate("gt_SiegeTankAlleyQ_Func");
    TriggerAddEventTimePeriodic(gt_SiegeTankAlleyQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tanks Siege Up
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTanksSiegeUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto64C5BD11_g;
    int auto64C5BD11_u;
    unit auto64C5BD11_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto64C5BD11_g = gv_infestedSiegeTanks;
    auto64C5BD11_u = UnitGroupCount(auto64C5BD11_g, c_unitCountAll);
    for (;; auto64C5BD11_u -= 1) {
        auto64C5BD11_var = UnitGroupUnitFromEnd(auto64C5BD11_g, auto64C5BD11_u);
        if (auto64C5BD11_var == null) { break; }
        if ((UnitCount(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto64C5BD11_var), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 1)) {
            UnitIssueOrder(auto64C5BD11_var, Order(AbilityCommand("NovaInfestedSiegeTankRoot", 0)), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTanksSiegeUp_Init () {
    gt_SiegeTanksSiegeUp = TriggerCreate("gt_SiegeTanksSiegeUp_Func");
    TriggerAddEventTimePeriodic(gt_SiegeTanksSiegeUp, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Banshee Run Q
//--------------------------------------------------------------------------------------------------
bool gt_BansheeRunQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_infestedBanshee;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_INFESTED_FIGHTPROTOSS) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_05_INFESTED_FIGHTPROTOSS)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "NovaInfestedBanshee") || (UnitGetType(EventUnit()) == "NovaInfestedBansheeBurrowed") || (UnitGetType(EventUnitTarget()) == "NovaInfestedBanshee") || (UnitGetType(EventUnitTarget()) == "NovaInfestedBansheeBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_infestedBanshee = UnitGroupUnit(UnitGroup("NovaInfestedBanshee", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_infestedBanshee != null)) {
        TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
        TriggerQueueEnter();
        if ((TimerGetRemaining(lv_talkTimer) > 0.0)) {
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/451EBEFA"), null, UnitGetPosition(lv_infestedBanshee));
            libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_infestedBanshee), 6.0, Color(100.00, 0.00, 0.00));
            Wait(2.0, c_timeGame);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            if ((UnitIsAlive(lv_infestedBanshee) == true)) {
                libNCMI_gf_SendTransmissionCampaign(lv_infestedBanshee, "Mission_Nova05|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }

            libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00133", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }
        else {
            TriggerEnable(TriggerGetCurrent(), true);
        }
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BansheeRunQ_Init () {
    gt_BansheeRunQ = TriggerCreate("gt_BansheeRunQ_Func");
    TriggerAddEventUnitAttacked2(gt_BansheeRunQ, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Nears Friendly Umojans Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerNearsFriendlyUmojansQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_07_COLONISTS, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FriendlyUmojansQ, false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(1205)) == true) && (UnitGetOwner(UnitFromId(1205)) == gv_pLAYER_07_COLONISTS)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(26), 6.0, false);
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(1205)), 8.0, Color(100.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7F2AC4A6"), null, UnitGetPosition(UnitFromId(1205)));
        Wait(2.0, c_timeAI);
    }

    if ((UnitIsAlive(UnitFromId(1205)) == true) && (UnitGetOwner(UnitFromId(1205)) == gv_pLAYER_07_COLONISTS)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(1205), "Mission_Nova05|Line00172", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerNearsFriendlyUmojansQ_Init () {
    gt_PlayerNearsFriendlyUmojansQ = TriggerCreate("gt_PlayerNearsFriendlyUmojansQ_Func");
    TriggerAddEventTimePeriodic(gt_PlayerNearsFriendlyUmojansQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Friendly Umojans Q
//--------------------------------------------------------------------------------------------------
bool gt_FriendlyUmojansQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_07_COLONISTS, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PlayerNearsFriendlyUmojansQ, false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(1205)) == true)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(26), 6.0, false);
        libNtve_gf_ShareVisionofUnit(UnitFromId(1205), true, gv_pLAYER_01_USER);
        libNtve_gf_ShareVisionofUnit(UnitFromId(1212), true, gv_pLAYER_01_USER);
        libNtve_gf_ShareVisionofUnit(UnitFromId(848), true, gv_pLAYER_01_USER);
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(1205)), 8.0, Color(100.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/07DDF9C1"), null, UnitGetPosition(UnitFromId(1205)));
        Wait(2.0, c_timeAI);
    }

    if ((UnitIsAlive(UnitFromId(1205)) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(1205), "Mission_Nova05|Line00172", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FriendlyUmojansQ_Init () {
    gt_FriendlyUmojansQ = TriggerCreate("gt_FriendlyUmojansQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reach Umojan Forces Q
//--------------------------------------------------------------------------------------------------
bool gt_ReachUmojanForcesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2985741A_g;
    int auto2985741A_u;
    unit auto2985741A_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_07_COLONISTS, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FriendlyUmojansQ, false);
    auto2985741A_g = UnitGroup(null, gv_pLAYER_07_COLONISTS, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2985741A_u = UnitGroupCount(auto2985741A_g, c_unitCountAll);
    for (;; auto2985741A_u -= 1) {
        auto2985741A_var = UnitGroupUnitFromEnd(auto2985741A_g, auto2985741A_u);
        if (auto2985741A_var == null) { break; }
        libNtve_gf_RescueUnit(auto2985741A_var, gv_pLAYER_01_USER, true);
    }
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(UnitFromId(1205)) == true)) {
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(1205), "Mission_Nova05|Line00173", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReachUmojanForcesQ_Init () {
    gt_ReachUmojanForcesQ = TriggerCreate("gt_ReachUmojanForcesQ_Func");
    TriggerAddEventTimePeriodic(gt_ReachUmojanForcesQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stay Out Of Tal'darim Base Q
//--------------------------------------------------------------------------------------------------
bool gt_StayOutOfTaldarimBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/331211FC"), null, UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00197", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00198", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StayOutOfTaldarimBaseQ_Init () {
    gt_StayOutOfTaldarimBaseQ = TriggerCreate("gt_StayOutOfTaldarimBaseQ_Func");
    TriggerAddEventTimePeriodic(gt_StayOutOfTaldarimBaseQ, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Attacks Tal'darim Base Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerAttacksTaldarimBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_PROTOSS_BULLIES))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2AF29104"), null, UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00199", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerAttacksTaldarimBaseQ_Init () {
    gt_PlayerAttacksTaldarimBaseQ = TriggerCreate("gt_PlayerAttacksTaldarimBaseQ_Func");
    TriggerAddEventUnitDamaged(gt_PlayerAttacksTaldarimBaseQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stay Out Of Zerg Base Q
//--------------------------------------------------------------------------------------------------
bool gt_StayOutOfZergBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/044C7F23"), null, UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00121", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StayOutOfZergBaseQ_Init () {
    gt_StayOutOfZergBaseQ = TriggerCreate("gt_StayOutOfZergBaseQ_Func");
    TriggerAddEventTimePeriodic(gt_StayOutOfZergBaseQ, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Attacks Zerg Base Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerAttacksZergBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_ZERG))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(75)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/273E71DF"), null, UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00122", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00123", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerAttacksZergBaseQ_Init () {
    gt_PlayerAttacksZergBaseQ = TriggerCreate("gt_PlayerAttacksZergBaseQ_Func");
    TriggerAddEventUnitDamaged(gt_PlayerAttacksZergBaseQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Terrazine Tank Locations
//--------------------------------------------------------------------------------------------------
bool gt_InitializeTerrazineTankLocations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_terrazineTankLocationsCount += 1;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit = UnitFromId(380);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankPoint = UnitGetPosition(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit = UnitFromId(57);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconRegion = RegionFromId(5);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Available;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(13);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(12);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_griffinActor = DoodadFromId(2744);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_canisterSpawn = PointFromId(2388);
    UnitSetState(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_ReplaceUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, "NovaTerrazineTankDead", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        UnitRemove(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit);
        gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Sealed;
    }

    gv_victoryRegion[gv_terrazineTankLocationsCount] = RegionFromId(110);
    gv_terrazineTankLocationsCount += 1;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit = UnitFromId(379);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankPoint = UnitGetPosition(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit = UnitFromId(71);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconRegion = RegionFromId(6);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Available;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(85);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(13);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_griffinActor = DoodadFromId(2748);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_canisterSpawn = PointFromId(2753);
    UnitSetState(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_victoryRegion[gv_terrazineTankLocationsCount] = RegionFromId(111);
    gv_terrazineTankLocationsCount += 1;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit = UnitFromId(335);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankPoint = UnitGetPosition(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit = UnitFromId(59);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconRegion = RegionFromId(10);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Available;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(87);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(14);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_griffinActor = DoodadFromId(2747);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_canisterSpawn = PointFromId(2389);
    UnitSetState(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_victoryRegion[gv_terrazineTankLocationsCount] = RegionFromId(112);
    gv_terrazineTankLocationsCount += 1;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit = UnitFromId(128);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankPoint = UnitGetPosition(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit = UnitFromId(82);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconRegion = RegionFromId(11);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Available;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(88);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(15);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_griffinActor = DoodadFromId(2749);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_canisterSpawn = PointFromId(2616);
    UnitSetState(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_victoryRegion[gv_terrazineTankLocationsCount] = RegionFromId(113);
    gv_terrazineTankLocationsCount += 1;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit = UnitFromId(129);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankPoint = UnitGetPosition(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit = UnitFromId(90);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconRegion = RegionFromId(33);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Available;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(89);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(16);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_griffinActor = DoodadFromId(2745);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_canisterSpawn = PointFromId(2823);
    UnitSetState(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_victoryRegion[gv_terrazineTankLocationsCount] = RegionFromId(114);
    gv_terrazineTankLocationsCount += 1;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit = UnitFromId(136);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankPoint = UnitGetPosition(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit = UnitFromId(83);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconRegion = RegionFromId(34);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Available;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(91);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(17);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_griffinActor = DoodadFromId(2746);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_canisterSpawn = PointFromId(2824);
    UnitSetState(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_victoryRegion[gv_terrazineTankLocationsCount] = RegionFromId(115);
    gv_terrazineTankLocationsCount += 1;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit = UnitFromId(131);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankPoint = UnitGetPosition(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit = UnitFromId(84);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconRegion = RegionFromId(35);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Available;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(92);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(18);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_griffinActor = DoodadFromId(2751);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_canisterSpawn = PointFromId(2825);
    UnitSetState(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_victoryRegion[gv_terrazineTankLocationsCount] = RegionFromId(116);
    gv_terrazineTankLocationsCount += 1;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit = UnitFromId(133);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankPoint = UnitGetPosition(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit = UnitFromId(86);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconRegion = RegionFromId(36);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Available;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(93);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(19);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_griffinActor = DoodadFromId(2750);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_canisterSpawn = PointFromId(2826);
    UnitSetState(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_victoryRegion[gv_terrazineTankLocationsCount] = RegionFromId(117);
    gv_terrazineTankLocationsCount += 1;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit = UnitFromId(405);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankPoint = UnitGetPosition(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit = UnitFromId(404);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconRegion = RegionFromId(7);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_state = ge_PRESETTerrazineTankState_Available;
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(406);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(21);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_griffinActor = DoodadFromId(2752);
    gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_canisterSpawn = PointFromId(2827);
    UnitSetState(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_terrazineTankUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_terrazineTankLocations[gv_terrazineTankLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_victoryRegion[gv_terrazineTankLocationsCount] = RegionFromId(91);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeTerrazineTankLocations_Init () {
    gt_InitializeTerrazineTankLocations = TriggerCreate("gt_InitializeTerrazineTankLocations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Enters Terrazine Beacon
//--------------------------------------------------------------------------------------------------
bool gt_PlayerEntersTerrazineBeacon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_terrazineTankIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_terrazineTankIndex = gf_GetTerrazineTankIndexFromBeaconRegion(EventUnitRegion());
    if (((lv_terrazineTankIndex == 0) || (gv_terrazineTankLocations[lv_terrazineTankIndex].lv_state != ge_PRESETTerrazineTankState_Available))) {
        return true;
    }

    gf_PlayerInitiatesGatheringTerrazineTank(lv_terrazineTankIndex);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit) == true)) {
        gf_PlayerFinishesGatheringTerrazineTankQ(lv_terrazineTankIndex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerEntersTerrazineBeacon_Init () {
    gt_PlayerEntersTerrazineBeacon = TriggerCreate("gt_PlayerEntersTerrazineBeacon_Func");
    TriggerAddEventUnitRegion(gt_PlayerEntersTerrazineBeacon, UnitRefFromVariable("gv_nova"), RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_PlayerEntersTerrazineBeacon, UnitRefFromVariable("gv_nova"), RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_PlayerEntersTerrazineBeacon, UnitRefFromVariable("gv_nova"), RegionFromId(10), true);
    TriggerAddEventUnitRegion(gt_PlayerEntersTerrazineBeacon, UnitRefFromVariable("gv_nova"), RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_PlayerEntersTerrazineBeacon, UnitRefFromVariable("gv_nova"), RegionFromId(33), true);
    TriggerAddEventUnitRegion(gt_PlayerEntersTerrazineBeacon, UnitRefFromVariable("gv_nova"), RegionFromId(34), true);
    TriggerAddEventUnitRegion(gt_PlayerEntersTerrazineBeacon, UnitRefFromVariable("gv_nova"), RegionFromId(35), true);
    TriggerAddEventUnitRegion(gt_PlayerEntersTerrazineBeacon, UnitRefFromVariable("gv_nova"), RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_PlayerEntersTerrazineBeacon, UnitRefFromVariable("gv_nova"), RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Initiates Gathering Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerInitiatesGatheringTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_terrazineTankIndex;
    int lv_concurrentTanksGatheringCount;

    // Automatic Variable Declarations
    int autoE9C99AAE_ae;
    const int autoE9C99AAE_ai = 1;
    int auto25936872_val;
    int autoD3127D4B_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE9C99AAE_ae = gv_terrazineTankLocationsCount;
    lv_terrazineTankIndex = 1;
    for ( ; ( (autoE9C99AAE_ai >= 0 && lv_terrazineTankIndex <= autoE9C99AAE_ae) || (autoE9C99AAE_ai < 0 && lv_terrazineTankIndex >= autoE9C99AAE_ae) ) ; lv_terrazineTankIndex += autoE9C99AAE_ai ) {
        if ((gv_terrazineTankLocations[lv_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Working)) {
            lv_concurrentTanksGatheringCount += 1;
        }

    }
    if ((lv_concurrentTanksGatheringCount == 1)) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if ((gv_terrazineTankGatherTransmissionInitial == true)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00179", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00200", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00159", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            SoundPlayForPlayer(SoundLink("Event_Nova05_Infested_Horde_01", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
        }
        else if ((gv_terrazineTankGatherTransmissionSecond == true)) {
            gv_terrazineTankGatherTransmissionSecond = false;
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00074", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if ((gv_objectiveExtractTerrazineCount == (gv_objectiveExtractTerrazineMax - 1))) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00081", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (true) {
            if (gv_terrazineTankGatherTransmissionCount >= 4) {
                gv_terrazineTankGatherTransmissionCount = 1;
            }
            else {
                gv_terrazineTankGatherTransmissionCount = gv_terrazineTankGatherTransmissionCount + 1;
            }
            autoD3127D4B_val = gv_terrazineTankGatherTransmissionCount;
            if (autoD3127D4B_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00075", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (autoD3127D4B_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00077", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (autoD3127D4B_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00078", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00079", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (autoD3127D4B_val == 4) {
                libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00080", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        if ((gv_terrazineTankGatherTransmissionInitial == true)) {
            gv_terrazineTankGatherTransmissionInitial = false;
        }

    }
    else {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (gv_terrazineTankDualGatherTransmissionCount >= 6) {
            gv_terrazineTankDualGatherTransmissionCount = 1;
        }
        else {
            gv_terrazineTankDualGatherTransmissionCount = gv_terrazineTankDualGatherTransmissionCount + 1;
        }
        auto25936872_val = gv_terrazineTankDualGatherTransmissionCount;
        if (auto25936872_val == 1) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00193", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00033", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto25936872_val == 2) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00082", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00035", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto25936872_val == 3) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00036", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00037", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto25936872_val == 4) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00160", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00039", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto25936872_val == 5) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00194", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto25936872_val == 6) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00190", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerInitiatesGatheringTransmissionQ_Init () {
    gt_PlayerInitiatesGatheringTransmissionQ = TriggerCreate("gt_PlayerInitiatesGatheringTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terrazine Tank Attacked Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TerrazineTankAttackedWarningQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_terrazineTankIndex;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    int auto1A16BB77_val;

    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NovaTerrazineTank"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) > 45.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_05_INFESTED_FIGHTPROTOSS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_terrazineTankIndex = gf_GetTerrazineTankIndexFromTankUnit(EventUnit());
    if ((lv_terrazineTankIndex == 0) && ((gv_terrazineTankLocations[lv_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Exhausted) || (gv_terrazineTankLocations[lv_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Sealed))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/855947CA"), null, gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankPoint);
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankPoint, 6.0, Color(0.00, 100.00, 0.00));
        Wait(2.0, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (gv_terrazineTankAttackedTransmissionCount >= 4) {
            gv_terrazineTankAttackedTransmissionCount = 1;
        }
        else {
            gv_terrazineTankAttackedTransmissionCount = gv_terrazineTankAttackedTransmissionCount + 1;
        }
        auto1A16BB77_val = gv_terrazineTankAttackedTransmissionCount;
        if (auto1A16BB77_val == 1) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00161", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto1A16BB77_val == 2) {
            libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00104", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto1A16BB77_val == 3) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00162", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto1A16BB77_val == 4) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00163", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrazineTankAttackedWarningQ_Init () {
    gt_TerrazineTankAttackedWarningQ = TriggerCreate("gt_TerrazineTankAttackedWarningQ_Func");
    TriggerAddEventUnitAttacked2(gt_TerrazineTankAttackedWarningQ, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terrazine Tank Low Life Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TerrazineTankLowLifeWarningQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_terrazineTankIndex;

    // Automatic Variable Declarations
    int auto821DD602_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NovaTerrazineTank"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 45.0))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS) || (UnitGetOwner(EventUnitTarget()) == gv_pLAYER_05_INFESTED_FIGHTPROTOSS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_terrazineTankIndex = gf_GetTerrazineTankIndexFromTankUnit(EventUnit());
    if ((lv_terrazineTankIndex == 0) && ((gv_terrazineTankLocations[lv_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Exhausted) || (gv_terrazineTankLocations[lv_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Sealed))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    TriggerQueueEnter();
    if ((UnitIsAlive(EventUnit()) == true) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 45.0)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/626E0D36"), null, gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankPoint);
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankPoint, 6.0, Color(0.00, 100.00, 0.00));
        Wait(2.0, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (gv_terrazineTankLowLifeTransmissionCount >= 4) {
            gv_terrazineTankLowLifeTransmissionCount = 1;
        }
        else {
            gv_terrazineTankLowLifeTransmissionCount = gv_terrazineTankLowLifeTransmissionCount + 1;
        }
        auto821DD602_val = gv_terrazineTankLowLifeTransmissionCount;
        if (auto821DD602_val == 1) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00107", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto821DD602_val == 2) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00164", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto821DD602_val == 3) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00165", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto821DD602_val == 4) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00166", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrazineTankLowLifeWarningQ_Init () {
    gt_TerrazineTankLowLifeWarningQ = TriggerCreate("gt_TerrazineTankLowLifeWarningQ_Func");
    TriggerAddEventUnitAttacked2(gt_TerrazineTankLowLifeWarningQ, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terrazine Tank Is Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TerrazineTankIsDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_terrazineTankIndex;
    fixed lv_timerTime;

    // Automatic Variable Declarations
    unitgroup autoD7D5EE58_g;
    int autoD7D5EE58_u;
    unit autoD7D5EE58_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NovaTerrazineTank"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_terrazineTankIndex = gf_GetTerrazineTankIndexFromTankUnit(EventUnit());
    UnitKill(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_beaconUnit);
    gv_terrazineTanksDestroyedCount += 1;
    if (((lv_terrazineTankIndex == 0) || (gv_terrazineTankLocations[lv_terrazineTankIndex].lv_state == ge_PRESETTerrazineTankState_Exhausted))) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit, 1));
    PingDestroy(libHots_gf_PingStoredForUnit(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit, 2));
    autoD7D5EE58_g = gv_infestedRageWaveUnits;
    autoD7D5EE58_u = UnitGroupCount(autoD7D5EE58_g, c_unitCountAll);
    for (;; autoD7D5EE58_u -= 1) {
        autoD7D5EE58_var = UnitGroupUnitFromEnd(autoD7D5EE58_g, autoD7D5EE58_u);
        if (autoD7D5EE58_var == null) { break; }
        if ((UnitGetCustomValue(autoD7D5EE58_var, 0) == lv_terrazineTankIndex)) {
            gf_BurrowAndRemoveInfestedWaveUnit(autoD7D5EE58_var);
        }

    }
    gv_terrazineTankLocations[lv_terrazineTankIndex].lv_state = ge_PRESETTerrazineTankState_Sealed;
    gv_objectiveDoNotLetDevicesBeDestroyed += 1;
    TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate, true, false);
    if ((gv_objectiveDoNotLetDevicesBeDestroyed >= gv_objectiveDoNotLetDevicesBeDestroyedMax)) {
        TriggerExecute(gt_DefeatProtossCapTerrazine, true, false);
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_04_PROTOSS_WAVES)) {
        gf_ProtossDestroysTerrazineTankQ(lv_terrazineTankIndex);
    }
    else {
        gf_InfestedDestroysTerrazineTank(lv_terrazineTankIndex);
    }
    TriggerExecute(gt_TerrazineTanksDestroyedWarningQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrazineTankIsDestroyed_Init () {
    gt_TerrazineTankIsDestroyed = TriggerCreate("gt_TerrazineTankIsDestroyed_Func");
    TriggerAddEventUnitDied(gt_TerrazineTankIsDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terrazine Tanks Destroyed Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TerrazineTanksDestroyedWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto843C4E4F_val;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if (gv_objectiveDestroyedInfestedTransmissionCount >= 4) {
        gv_objectiveDestroyedInfestedTransmissionCount = 1;
    }
    else {
        gv_objectiveDestroyedInfestedTransmissionCount = gv_objectiveDestroyedInfestedTransmissionCount + 1;
    }
    auto843C4E4F_val = gv_objectiveDestroyedInfestedTransmissionCount;
    if (auto843C4E4F_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00171", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto843C4E4F_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00086", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto843C4E4F_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00188", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto843C4E4F_val == 4) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00087", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrazineTanksDestroyedWarningQ_Init () {
    gt_TerrazineTanksDestroyedWarningQ = TriggerCreate("gt_TerrazineTanksDestroyedWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terrazine Tanks Objective Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TerrazineTanksObjectiveReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFDCBBCE9_val;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_objectiveExtractTerrazineCount == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_terrazineTankReminderTransmissionCount == 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    gv_terrazineTankReminderTransmissionCount += 1;
    autoFDCBBCE9_val = gv_terrazineTankReminderTransmissionCount;
    if (autoFDCBBCE9_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00181", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoFDCBBCE9_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00182", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrazineTanksObjectiveReminderQ_Init () {
    gt_TerrazineTanksObjectiveReminderQ = TriggerCreate("gt_TerrazineTanksObjectiveReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terrazine Gathering Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerrazineGatheringCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    Wait(0.25, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00204", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00205", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerrazineGatheringCompleteQ_Init () {
    gt_TerrazineGatheringCompleteQ = TriggerCreate("gt_TerrazineGatheringCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Reveal Mines Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRevealMinesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(480)) == true)) {
        UnitKill(UnitFromId(480));
        Wait(5.0, c_timeAI);
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/44D60041"), null, UnitGetPosition(UnitFromId(781)));
    TriggerExecute(gt_ObjectiveExploreUmojanMineCreate, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(90), 12.0, false);
    libNCMI_gf_CreateObjectivePing(false, PointFromId(2988), StringExternal("Param/Value/EC9E09B2"));
    gv_bonusObjective_ExplorePing = PingLastCreated();
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(781)), StringExternal("Param/Value/2B4E9A60"));
    libHots_gf_StorePingForUnit(UnitFromId(781), 1, PingLastCreated());
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(863)), StringExternal("Param/Value/ACD71E74"));
    libHots_gf_StorePingForUnit(UnitFromId(863), 1, PingLastCreated());
    TriggerEnable(gt_BonusObjectiveNovaEntersMines, true);
    libNtve_gf_ShowHideUnit(UnitFromId(781), true);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(781), null, StringExternal("Param/Value/883E6043"), StringExternal("Param/Value/2F98A573"));
    libNtve_gf_ShowHideUnit(UnitFromId(863), true);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(863), null, StringExternal("Param/Value/9E61DFF3"), StringExternal("Param/Value/1ACFB8FF"));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00184", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00093", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRevealMinesQ_Init () {
    gt_BonusObjectiveRevealMinesQ = TriggerCreate("gt_BonusObjectiveRevealMinesQ_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveRevealMinesQ, UnitRefFromUnit(UnitFromId(480)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Reveal Science Facility Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRevealScienceFacilityQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveProximityRevealScienceFacility, false);
    TriggerEnable(gt_BonusObjectiveSpawnEradicatorScene, true);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6D06812E"), null, UnitGetPosition(UnitFromId(862)));
    TriggerExecute(gt_ObjectiveExploreScienceFacilityCreate, true, true);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(92), 8.0, false);
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(862)), StringExternal("Param/Value/9B478301"));
    libHots_gf_StorePingForUnit(UnitFromId(862), 1, PingLastCreated());
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(865)), StringExternal("Param/Value/B528D8F1"));
    libHots_gf_StorePingForUnit(UnitFromId(865), 1, PingLastCreated());
    TriggerEnable(gt_BonusObjectiveNovaEntersScienceFacility, true);
    libNtve_gf_ShowHideUnit(UnitFromId(862), true);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(862), null, StringExternal("Param/Value/DC6A84B7"), StringExternal("Param/Value/4F441CD2"));
    libNtve_gf_ShowHideUnit(UnitFromId(865), true);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(865), null, StringExternal("Param/Value/99CB205B"), StringExternal("Param/Value/97CC2FE9"));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00154", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00155", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRevealScienceFacilityQ_Init () {
    gt_BonusObjectiveRevealScienceFacilityQ = TriggerCreate("gt_BonusObjectiveRevealScienceFacilityQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Proximity Reveal Science Facility
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveProximityRevealScienceFacility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusObjectiveRevealScienceFacilityQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveProximityRevealScienceFacility_Init () {
    gt_BonusObjectiveProximityRevealScienceFacility = TriggerCreate("gt_BonusObjectiveProximityRevealScienceFacility_Func");
    TriggerAddEventTimePeriodic(gt_BonusObjectiveProximityRevealScienceFacility, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Collected Mines Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCollectedMinesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPoint = UnitGetPosition(UnitFromId(369));

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveNovaEntersMines, false);
    Wait(4.0, c_timeGame);
    UIAlertPoint("Trigger", 1, StringExternal("Param/Value/B01043EF"), null, lv_triggeringPoint);
    TriggerExecute(gt_ObjectiveExploreUmojanMineComplete, true, false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(781), 1));
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(369), 1));
    UnitKill(UnitFromId(781));
    if ((UnitIsAlive(UnitFromId(369)) == true)) {
        UnitKill(UnitFromId(369));
    }

    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00149", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00150", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCollectedMinesQ_Init () {
    gt_BonusObjectiveCollectedMinesQ = TriggerCreate("gt_BonusObjectiveCollectedMinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Collected Facility Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCollectedFacilityQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPoint = UnitGetPosition(UnitFromId(1093));

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveNovaEntersScienceFacility, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7B95B5A1"), null, lv_triggeringPoint);
    TriggerExecute(gt_ObjectiveExploreScienceFacilityComplete, true, false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(862), 1));
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(1093), 1));
    UnitKill(UnitFromId(862));
    UnitKill(UnitFromId(1093));
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00206", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00207", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCollectedFacilityQ_Init () {
    gt_BonusObjectiveCollectedFacilityQ = TriggerCreate("gt_BonusObjectiveCollectedFacilityQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Nova Enters Mines
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveNovaEntersMines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(32)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_bonusObjective_SoloOperativeTipAdded == false)) {
        gv_bonusObjective_SoloOperativeTipAdded = true;
        libNCMI_gf_AddMissionTipCampaign("Solo Operative");
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Nova", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(781)));
    UnitKill(UnitLastCreated());
    libComC_gf_PauseAITimeCampaign(true);
    gf_BonusObjectivePauseUnpauseUnitGroup(true, UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    CinematicFade(false, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(RegionFromId(79));
    UnitSetPosition(gv_nova, PointFromId(866), false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(866)), 0.0);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitAbilityEnable(gv_nova, "HeroNuclearStrike", false);
    UnitAbilityEnable(gv_nova, "NovaNukeTimer", false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(876), 0.0, -1, 10.0, true);
    CameraSetData(PlayerGroupAll(), "BonusObjectiveInstallation");
    TriggerExecute(gt_BonusObjectiveStartBossMusic, true, false);
    gf_ToggleNovaWeaponReverb(ge_PRESETWeaponReverb_Indoor);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny);
    gf_BonusObjectivePauseUnpauseUnitGroup(false, UnitGroup(null, c_playerAny, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_01_USER), gv_pLAYER_01_USER, false);
    UnitSelect(gv_nova, gv_pLAYER_01_USER, true);
    if ((gv_bonusObjective_BlightbringerActive == true)) {
        TriggerExecute(gt_BonusObjectiveInfestedAttackNova, true, false);
        TriggerExecute(gt_BonusObjectiveBlightbringerBattleAI, true, false);
    }

    CinematicFade(true, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BonusObjectiveNovaEntersBOFirstTimeQ, true, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveNovaEntersMines_Init () {
    gt_BonusObjectiveNovaEntersMines = TriggerCreate("gt_BonusObjectiveNovaEntersMines_Func");
    TriggerEnable(gt_BonusObjectiveNovaEntersMines, false);
    TriggerAddEventTimePeriodic(gt_BonusObjectiveNovaEntersMines, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Nova Leaves Mines
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveNovaLeavesMines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(81)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Nova", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(863)));
    UnitKill(UnitLastCreated());
    gf_BonusObjectivePauseUnpauseUnitGroup(true, UnitGroup(null, c_playerAny, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    CinematicFade(false, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(RegionFromId(76));
    UnitSetPosition(gv_nova, PointFromId(869), false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(869)), 0.0);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitAbilityEnable(gv_nova, "HeroNuclearStrike", true);
    UnitAbilityEnable(gv_nova, "NovaNukeTimer", true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(872), 0.0, -1, 10.0, true);
    CameraSetData(PlayerGroupAll(), "Dflt");
    TriggerExecute(gt_BonusObjectiveStopBossMusic, true, false);
    gf_ToggleNovaWeaponReverb(ge_PRESETWeaponReverb_Outdoor);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack2, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_BonusObjectiveBlightbringerCleanup();
    CinematicFade(true, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libComC_gf_PauseAITimeCampaign(false);
    gf_BonusObjectivePauseUnpauseUnitGroup(false, UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveNovaLeavesMines_Init () {
    gt_BonusObjectiveNovaLeavesMines = TriggerCreate("gt_BonusObjectiveNovaLeavesMines_Func");
    TriggerAddEventTimePeriodic(gt_BonusObjectiveNovaLeavesMines, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Nova Enters Science Facility
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveNovaEntersScienceFacility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(80)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_bonusObjective_SoloOperativeTipAdded == false)) {
        gv_bonusObjective_SoloOperativeTipAdded = true;
        libNCMI_gf_AddMissionTipCampaign("Solo Operative");
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Nova", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(862)));
    UnitKill(UnitLastCreated());
    libComC_gf_PauseAITimeCampaign(true);
    gf_BonusObjectivePauseUnpauseUnitGroup(true, UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    CinematicFade(false, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(RegionFromId(78));
    UnitSetPosition(gv_nova, PointFromId(868), false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(868)), 0.0);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitAbilityEnable(gv_nova, "HeroNuclearStrike", false);
    UnitAbilityEnable(gv_nova, "NovaNukeTimer", false);
    gv_bonusObjectiveNovaInScienceFacility = true;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(878), 0.0, -1, 10.0, true);
    CameraSetData(PlayerGroupAll(), "BonusObjectiveInstallation");
    TriggerExecute(gt_BonusObjectiveStartBossMusic, true, false);
    gf_ToggleNovaWeaponReverb(ge_PRESETWeaponReverb_Indoor);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny);
    gf_BonusObjectivePauseUnpauseUnitGroup(false, UnitGroup(null, c_playerAny, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_01_USER), gv_pLAYER_01_USER, false);
    UnitSelect(gv_nova, gv_pLAYER_01_USER, true);
    CinematicFade(true, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BonusObjectiveNovaEntersBOFirstTimeQ, true, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveNovaEntersScienceFacility_Init () {
    gt_BonusObjectiveNovaEntersScienceFacility = TriggerCreate("gt_BonusObjectiveNovaEntersScienceFacility_Func");
    TriggerEnable(gt_BonusObjectiveNovaEntersScienceFacility, false);
    TriggerAddEventTimePeriodic(gt_BonusObjectiveNovaEntersScienceFacility, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Nova Leaves Science Facility
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveNovaLeavesScienceFacility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(83)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Nova", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(865)));
    UnitKill(UnitLastCreated());
    gf_BonusObjectivePauseUnpauseUnitGroup(true, UnitGroup(null, c_playerAny, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    CinematicFade(false, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(RegionFromId(76));
    UnitSetPosition(gv_nova, PointFromId(871), false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(871)), 0.0);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitAbilityEnable(gv_nova, "HeroNuclearStrike", true);
    UnitAbilityEnable(gv_nova, "NovaNukeTimer", true);
    gv_bonusObjectiveNovaInScienceFacility = false;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(875), 0.0, -1, 10.0, true);
    TriggerExecute(gt_BonusObjectiveStopBossMusic, true, false);
    gf_ToggleNovaWeaponReverb(ge_PRESETWeaponReverb_Outdoor);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack2, c_soundtrackCueAny, c_soundtrackIndexAny);
    CinematicFade(true, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraSetData(PlayerGroupAll(), "Dflt");
    libComC_gf_PauseAITimeCampaign(false);
    gf_BonusObjectivePauseUnpauseUnitGroup(false, UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveNovaLeavesScienceFacility_Init () {
    gt_BonusObjectiveNovaLeavesScienceFacility = TriggerCreate("gt_BonusObjectiveNovaLeavesScienceFacility_Func");
    TriggerAddEventTimePeriodic(gt_BonusObjectiveNovaLeavesScienceFacility, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Nova Enters BO First Time Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveNovaEntersBOFirstTimeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00145", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00146", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveNovaEntersBOFirstTimeQ_Init () {
    gt_BonusObjectiveNovaEntersBOFirstTimeQ = TriggerCreate("gt_BonusObjectiveNovaEntersBOFirstTimeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Nova Dies Inside
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveNovaDiesInside_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((AITimeIsPaused() == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nova) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BonusObjectivePauseUnpauseUnitGroup(true, UnitGroup(null, c_playerAny, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gf_BonusObjectivePauseUnpauseUnitGroup(true, UnitGroup(null, c_playerAny, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    CinematicFade(false, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if ((gv_bonusObjectiveNovaInScienceFacility == true)) {
        gf_BonusObjectiveEradicatorReset();
        gv_bonusObjectiveNovaInScienceFacility = false;
    }
    else {
        gf_BonusObjectiveBlightbringerCleanup();
    }
    RegionPlayableMapSet(RegionFromId(76));
    UnitAbilityEnable(gv_nova, "HeroNuclearStrike", true);
    UnitAbilityEnable(gv_nova, "NovaNukeTimer", true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, true);
    CameraSetData(PlayerGroupAll(), "Dflt");
    CameraPan(gv_pLAYER_01_USER, PlayerStartLocation(gv_pLAYER_01_USER), 0.0, -1, 10.0, false);
    TriggerExecute(gt_BonusObjectiveStopBossMusic, true, false);
    gf_ToggleNovaWeaponReverb(ge_PRESETWeaponReverb_Outdoor);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack2, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 0.75, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libComC_gf_PauseAITimeCampaign(false);
    gf_BonusObjectivePauseUnpauseUnitGroup(false, UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    gf_BonusObjectivePauseUnpauseUnitGroup(false, libNtve_gf_ConvertUnitToUnitGroup(gv_nova));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveNovaDiesInside_Init () {
    gt_BonusObjectiveNovaDiesInside = TriggerCreate("gt_BonusObjectiveNovaDiesInside_Func");
    TriggerAddEventTimePeriodic(gt_BonusObjectiveNovaDiesInside, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Leaves Souls On Ground
//--------------------------------------------------------------------------------------------------
bool gt_NovaLeavesSoulsOnGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((AITimeIsPaused() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_novaSoulsAmount = (libNtve_gf_UnitGetPropertyKills(gv_nova, c_unitPropCurrent) * 100);
    UnitCreate(1, "NaturalGas", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_nova), 270.0);
    gv_novaSoulsUnit = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 0,255,172");
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    UnitSetCustomValue(UnitLastCreated(), 1, 1.0);
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    Wait(5.0, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
    libNtve_gf_CreateModelAtPoint("BloodSplats", UnitGetPosition(gv_novaSoulsUnit));
    TriggerEnable(gt_NovaRetrievesSouls, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaLeavesSoulsOnGround_Init () {
    gt_NovaLeavesSoulsOnGround = TriggerCreate("gt_NovaLeavesSoulsOnGround_Func");
    TriggerAddEventUnitDamaged(gt_NovaLeavesSoulsOnGround, UnitRefFromVariable("gv_nova"), c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Retrieves Souls
//--------------------------------------------------------------------------------------------------
bool gt_NovaRetrievesSouls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((AITimeIsPaused() == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_nova), UnitGetPosition(gv_novaSoulsUnit)) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_DisplayRewardFloatingText(UnitGetPosition(gv_novaSoulsUnit), libNCMI_ge_CacheResourceType_CustomResource, gv_novaSoulsAmount, null, StringExternal("Param/Value/E681CA23"), gv_pLAYER_01_USER);
    UnitKill(gv_novaSoulsUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaRetrievesSouls_Init () {
    gt_NovaRetrievesSouls = TriggerCreate("gt_NovaRetrievesSouls_Func");
    TriggerEnable(gt_NovaRetrievesSouls, false);
    TriggerAddEventTimePeriodic(gt_NovaRetrievesSouls, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Start Boss Music
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveStartBossMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_bonusObjective_MusicPlaying == false))) {
            return false;
        }

        if (!((((TriggerIsEnabled(gt_BonusObjectiveBlightbringer) == false) && (libNtve_gf_UnitInRegion(gv_nova, RegionFromId(79)) == true)) || ((TriggerIsEnabled(gt_BonusObjectiveSpawnEradicatorScene) == false) && (libNtve_gf_UnitInRegion(gv_nova, RegionFromId(78)) == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusObjective_MusicPlaying = true;
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    if ((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(79)) == true)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack7, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack7, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveStartBossMusic_Init () {
    gt_BonusObjectiveStartBossMusic = TriggerCreate("gt_BonusObjectiveStartBossMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Stop Boss Music
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveStopBossMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_bonusObjective_MusicPlaying == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusObjective_MusicPlaying = false;
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveStopBossMusic_Init () {
    gt_BonusObjectiveStopBossMusic = TriggerCreate("gt_BonusObjectiveStopBossMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_bonusObjective_ExplorePing);
    TriggerExecute(gt_BonusObjectiveInfestedAttackNova, true, false);
    if ((UnitIsAlive(gv_bonusObjective_Blightbringer) == true)) {
        TriggerExecute(gt_BonusObjectiveSpawnBlightbringerScene, true, true);
    }

    gv_bonusObjective_BlightbringerActive = true;
    TriggerExecute(gt_BonusObjectiveFoundBlightbringerTransmissionQ, true, false);
    TriggerExecute(gt_BonusObjectiveBlightbringerBattleAI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringer_Init () {
    gt_BonusObjectiveBlightbringer = TriggerCreate("gt_BonusObjectiveBlightbringer_Func");
    TriggerAddEventUnitRegion(gt_BonusObjectiveBlightbringer, UnitRefFromVariable("gv_nova"), RegionFromId(101), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Battle AI
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerBattleAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_attackGroundTimer;
    fixed lv_attackGroundCooldown;
    int lv_layEggsIndex;
    timer lv_layEggsTimer;
    fixed lv_layEggsCooldown;
    fixed lv_layEggsCooldownEnraged;
    int lv_layEggsCooldownEnragedIter;

    // Automatic Variable Declarations
    int auto9A2057DD_val;

    // Variable Initialization
    lv_attackGroundTimer = TimerCreate();
    lv_attackGroundCooldown = libLotv_gf_DifficultyValueFixed2(6.0, 6.0, 4.0, 3.0);
    lv_layEggsTimer = TimerCreate();
    lv_layEggsCooldown = libLotv_gf_DifficultyValueFixed2(12.0, 12.0, 10.0, 9.0);
    lv_layEggsCooldownEnraged = libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 5.0, 4.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_layEggsTimer, 5.0, false, c_timeGame);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_bonusObjective_Blightbringer) == true)) {
        if ((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(79)) == true)) {
            if ((TimerGetRemaining(lv_layEggsTimer) <= 0.0) && (libNtve_gf_UnitInRegion(gv_nova, RegionFromId(93)) == true)) {
                if (lv_layEggsIndex >= 5) {
                    lv_layEggsIndex = 1;
                }
                else {
                    lv_layEggsIndex = lv_layEggsIndex + 1;
                }
                gf_BonusObjectiveBlightbringerMoveToNewEggSpot(gv_bonusObjective_Blightbringer, PointFromName(("BO Blightbringer Eggs Stand 0" + IntToString(lv_layEggsIndex))));
                gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), true);
                if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
                    gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                    gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                }

                if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
                    gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex) + " (Brutal)"))), false);
                    gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex) + " (Brutal)"))), false);
                    gf_BonusObjectiveBlightbringerEgg(gv_bonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex) + " (Brutal)"))), true);
                }

                if ((UnitGetPropertyFixed(gv_bonusObjective_Blightbringer, c_unitPropLifePercent, c_unitPropCurrent) > 40.0)) {
                    TimerStart(lv_layEggsTimer, lv_layEggsCooldown, false, c_timeGame);
                }
                else {
                    if (lv_layEggsCooldownEnragedIter >= 2) {
                        lv_layEggsCooldownEnragedIter = 1;
                    }
                    else {
                        lv_layEggsCooldownEnragedIter = lv_layEggsCooldownEnragedIter + 1;
                    }
                    auto9A2057DD_val = lv_layEggsCooldownEnragedIter;
                    if (auto9A2057DD_val == 1) {
                        TimerStart(lv_layEggsTimer, lv_layEggsCooldownEnraged, false, c_timeGame);
                    }
                    else if (auto9A2057DD_val == 2) {
                        TimerStart(lv_layEggsTimer, lv_layEggsCooldown, false, c_timeGame);
                    }
                    else {
                    }
                }
            }
            else {
                if ((TimerGetRemaining(lv_attackGroundTimer) == 0.0)) {
                    TimerStart(lv_attackGroundTimer, lv_attackGroundCooldown, false, c_timeGame);
                    UnitIssueOrder(gv_bonusObjective_Blightbringer, OrderTargetingPoint(AbilityCommand("attack", 2), UnitGetPosition(gv_nova)), c_orderQueueReplace);
                }

            }
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerBattleAI_Init () {
    gt_BonusObjectiveBlightbringerBattleAI = TriggerCreate("gt_BonusObjectiveBlightbringerBattleAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Spawn Blightbringer Scene
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveSpawnBlightbringerScene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_finalPosition;
    fixed lv_finalFacing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_finalPosition = Point(-17.5494, -32.9949);
    lv_finalFacing = 115.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueClear(c_triggerQueueRemove);
    libNtve_gf_MakeUnitInvulnerable(gv_bonusObjective_Blightbringer, true);
    libNtve_gf_PauseUnit(gv_bonusObjective_Blightbringer, true);
    libNtve_gf_MakeUnitInvulnerable(gv_nova, true);
    libNtve_gf_MakeUnitUncommandable(gv_nova, true);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2988)), c_orderQueueAddToEnd);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2079), 3.0, -1, 10.0, true);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    lv_finalPosition = Point((PointGetX(lv_finalPosition)+64.0), (PointGetY(lv_finalPosition)+64.0));
    UnitSetPosition(gv_bonusObjective_Blightbringer, lv_finalPosition, false);
    UnitSetFacing(gv_bonusObjective_Blightbringer, lv_finalFacing, 0.0);
    CutsceneCreateNoPosition("Cutscenes\\MonsterBirth.SC2Cutscene", PlayerGroupAll(), true);
    libNtve_gf_ShowHideUnit(gv_bonusObjective_Blightbringer, false);
    Wait(1.0, c_timeGame);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_EarthquakeRumble", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 2.0, 2.0, 4.0);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_Nova05_BlightBringer_Fx_Intro", -1), PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_Nova05_BlightBringer_VxFx_Intro", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_Nova03_BuildingCrumbleDebris2", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2072), 3.0, -1, 10.0, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    TriggerExecute(gt_BonusObjectiveStartBossMusic, true, false);
    Wait(4.0, c_timeGame);
    libNtve_gf_PauseUnit(gv_bonusObjective_Blightbringer, false);
    UnitIssueOrder(gv_bonusObjective_Blightbringer, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_nova)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    libNCMI_gf_PlaySoundCinematic(SoundLink("BlightBringer_VxFx_02", -1), PlayerGroupAll(), 300.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_bonusObjective_Blightbringer, "AnimPlay Spell Spell 0 -1.000000 -1.000000 4.000000 AsDuration");
    Wait(3.0, c_timeGame);
    ObjectiveShow(gv_objectiveRescueStalkers, PlayerGroupAll(), false);
    libLbty_gf_AutoRevealRegion(RegionFromId(93), RegionFromId(93), gv_pLAYER_01_USER);
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, true);
    libNtve_gf_MakeUnitInvulnerable(gv_nova, false);
    libNtve_gf_MakeUnitUncommandable(gv_nova, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_bonusObjective_Blightbringer, false);
    libNCMI_gf_SetUnitInfoTextCampaign(gv_bonusObjective_Blightbringer, null, StringExternal("Param/Value/790CBAA8"), null);
    ObjectiveSetName(gv_objectiveRescueStalkers, StringExternal("Param/Value/737E0C1A"));
    ObjectiveShow(gv_objectiveRescueStalkers, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveSpawnBlightbringerScene_Init () {
    gt_BonusObjectiveSpawnBlightbringerScene = TriggerCreate("gt_BonusObjectiveSpawnBlightbringerScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Spawned
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerSpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(gv_bonusObjective_Blightbringer, true);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimCopy ::external.BirthBlight");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerSpawned_Init () {
    gt_BonusObjectiveBlightbringerSpawned = TriggerCreate("gt_BonusObjectiveBlightbringerSpawned_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_BonusObjectiveBlightbringerSpawned, c_cutsceneNone, "SpawnBlightbringer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Found Blightbringer Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveFoundBlightbringerTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(1004)), StringExternal("Param/Value/95154A26"));
    libHots_gf_StorePingForUnit(UnitFromId(1004), 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), UnitFromId(1004));
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00147", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveFoundBlightbringerTransmissionQ_Init () {
    gt_BonusObjectiveFoundBlightbringerTransmissionQ = TriggerCreate("gt_BonusObjectiveFoundBlightbringerTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Egg Created
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerEggCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_eggUnit;
    int lv_randomInt;

    // Automatic Variable Declarations
    string autoBB01348F_val;
    unitgroup autoA6C93D58_g;
    int autoA6C93D58_u;
    unit autoA6C93D58_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "BlightbringerEgg") || (UnitGetType(EventUnit()) == "BlightbringerLargeEgg")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_eggUnit = EventUnit();
    UnitBehaviorAdd(lv_eggUnit, "ProgressBar", lv_eggUnit, 1);
    Wait(10.1, c_timeGame);
    if ((UnitIsAlive(lv_eggUnit) == true)) {
        autoBB01348F_val = UnitGetType(lv_eggUnit);
        if (autoBB01348F_val == "BlightbringerEgg") {
            lv_randomInt = RandomInt(1, 100);
            if ((lv_randomInt < 50)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", c_unitCreateIgnorePlacement, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitGetPosition(lv_eggUnit));
            }
            else {
                if ((lv_randomInt < 80)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", c_unitCreateIgnorePlacement, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitGetPosition(lv_eggUnit));
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedExploder", c_unitCreateIgnorePlacement, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitGetPosition(lv_eggUnit));
                }
            }
        }
        else if (autoBB01348F_val == "BlightbringerLargeEgg") {
            if ((libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotWeapon") == "EQPWeaponItem2")) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "InfestedTerranCampaign", c_unitCreateIgnorePlacement, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitGetPosition(lv_eggUnit));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", c_unitCreateIgnorePlacement, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, UnitGetPosition(lv_eggUnit));
            }
        }
        else {
        }
        autoA6C93D58_g = UnitLastCreatedGroup();
        autoA6C93D58_u = UnitGroupCount(autoA6C93D58_g, c_unitCountAll);
        for (;; autoA6C93D58_u -= 1) {
            autoA6C93D58_var = UnitGroupUnitFromEnd(autoA6C93D58_g, autoA6C93D58_u);
            if (autoA6C93D58_var == null) { break; }
            UnitGroupAdd(gv_bonusObjective_HatchedInfestedGroup, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, UnitGetPropertyFixed(lv_eggUnit, c_unitPropLifePercent, c_unitPropCurrent));
        }
        UnitKill(lv_eggUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerEggCreated_Init () {
    gt_BonusObjectiveBlightbringerEggCreated = TriggerCreate("gt_BonusObjectiveBlightbringerEggCreated_Func");
    TriggerAddEventUnitRegion(gt_BonusObjectiveBlightbringerEggCreated, null, RegionFromId(79), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Infested Attack Nova
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveInfestedAttackNova_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_bonusObjective_Blightbringer) == true)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (libNtve_gf_UnitInRegion(gv_nova, RegionFromId(79)) == true) && (libNtve_gf_UnitIsVisibleToPlayer(gv_nova, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS) == true)) {
            UnitGroupIssueOrder(gv_bonusObjective_HatchedInfestedGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_nova)), c_orderQueueReplace);
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveInfestedAttackNova_Init () {
    gt_BonusObjectiveInfestedAttackNova = TriggerCreate("gt_BonusObjectiveInfestedAttackNova_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Dies
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dyingPoint;

    // Automatic Variable Declarations
    unitgroup auto051B9103_g;
    int auto051B9103_u;
    unit auto051B9103_var;
    unitgroup auto55A3B2E4_g;
    int auto55A3B2E4_u;
    unit auto55A3B2E4_var;
    unitgroup auto88E6E922_g;
    int auto88E6E922_u;
    unit auto88E6E922_var;

    // Variable Initialization
    lv_dyingPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_bonusObjective_BlightbringerActive = false;
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.0, 2.0, 2.0);
    auto051B9103_g = UnitGroup("BlightbringerEgg", c_playerAny, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto051B9103_u = UnitGroupCount(auto051B9103_g, c_unitCountAll);
    for (;; auto051B9103_u -= 1) {
        auto051B9103_var = UnitGroupUnitFromEnd(auto051B9103_g, auto051B9103_u);
        if (auto051B9103_var == null) { break; }
        UnitKill(auto051B9103_var);
    }
    auto55A3B2E4_g = UnitGroup("BlightbringerLargeEgg", c_playerAny, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto55A3B2E4_u = UnitGroupCount(auto55A3B2E4_g, c_unitCountAll);
    for (;; auto55A3B2E4_u -= 1) {
        auto55A3B2E4_var = UnitGroupUnitFromEnd(auto55A3B2E4_g, auto55A3B2E4_u);
        if (auto55A3B2E4_var == null) { break; }
        UnitKill(auto55A3B2E4_var);
    }
    auto88E6E922_g = gv_bonusObjective_HatchedInfestedGroup;
    auto88E6E922_u = UnitGroupCount(auto88E6E922_g, c_unitCountAll);
    for (;; auto88E6E922_u -= 1) {
        auto88E6E922_var = UnitGroupUnitFromEnd(auto88E6E922_g, auto88E6E922_u);
        if (auto88E6E922_var == null) { break; }
        gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit(auto88E6E922_var);
    }
    TriggerExecute(gt_BonusObjectiveStopBossMusic, true, false);
    UnitSetPosition(UnitFromId(369), lv_dyingPoint, false);
    libNtve_gf_ShowHideUnit(UnitFromId(369), true);
    gf_BonusObjectivePauseUnpauseUnitGroup(false, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(369)));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(369), true);
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(369)), StringExternal("Param/Value/A7330F00"));
    libHots_gf_StorePingForUnit(UnitFromId(369), 1, PingLastCreated());
    TriggerExecute(gt_BonusObjectiveCollectedMinesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerDies_Init () {
    gt_BonusObjectiveBlightbringerDies = TriggerCreate("gt_BonusObjectiveBlightbringerDies_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveBlightbringerDies, UnitRefFromUnit(UnitFromId(1004)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Nova Enters Room
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorNovaEntersRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(896), Order(AbilityCommand("UmojanLabDoorsThinLeft", 0)), c_orderQueueReplace);
    if ((gv_eradicatorsActivated == true)) {
        if ((UnitIsAlive(gv_eradicatorTypeCannon) == true) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            TriggerExecute(gt_BonusObjectiveActivateEradicatorTransmissionQ, true, false);
            TriggerExecute(gt_BonusObjectiveEradicatorTypeCannon, true, false);
            TriggerExecute(gt_BonusObjectiveEradicatorTypeMissile, true, false);
            TriggerEnable(gt_BonusObjectivePlayerReturnsToEradicatorEntrance, true);
        }
        else if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
            TriggerExecute(gt_BonusObjectiveEradicatorTypeCannonEnrage, true, false);
        }
        else if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            TriggerExecute(gt_BonusObjectiveEradicatorTypeMissileEnrage, true, false);
            TriggerEnable(gt_BonusObjectivePlayerReturnsToEradicatorEntrance, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorNovaEntersRoom_Init () {
    gt_BonusObjectiveEradicatorNovaEntersRoom = TriggerCreate("gt_BonusObjectiveEradicatorNovaEntersRoom_Func");
    TriggerAddEventUnitRegion(gt_BonusObjectiveEradicatorNovaEntersRoom, UnitRefFromVariable("gv_nova"), RegionFromId(86), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Spawn Eradicator Scene
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveSpawnEradicatorScene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(96)) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1634)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1636)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1635)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueRemove);
    libNCMI_gf_SendActorMessageToDoodadsInRegion("Signal AlarmOff", "NovaUmojanLabWallCap", RegionFromId(78));
    libNtve_gf_MakeUnitInvulnerable(gv_nova, true);
    libNtve_gf_MakeUnitUncommandable(gv_nova, true);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3192)), c_orderQueueReplace);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2094)), c_orderQueueAddToEnd);
    gv_eradicatorTypeMissile = UnitFromId(895);
    gv_eradicatorTypeCannon = UnitFromId(1340);
    gv_eradicatorsActivated = true;
    libNtve_gf_PauseUnit(gv_eradicatorTypeMissile, false);
    libNtve_gf_PauseUnit(gv_eradicatorTypeCannon, false);
    UnitSetState(UnitFromId(895), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(1340), c_unitStateInvulnerable, true);
    UnitAbilityEnable(gv_eradicatorTypeCannon, "attack", false);
    UnitAbilityEnable(gv_eradicatorTypeMissile, "attack", false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        UnitSetPropertyFixed(gv_eradicatorTypeMissile, c_unitPropLifeMax, 1500.0);
        UnitSetPropertyFixed(gv_eradicatorTypeCannon, c_unitPropLifeMax, 1500.0);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 0) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_09_ERADICATOR, "NovaEradicatorDamageHard", 1);
    }
    else if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_09_ERADICATOR, "NovaEradicatorDamageBrutal", 1);
    }
    VisRevealArea(gv_pLAYER_09_ERADICATOR, RegionFromId(78), 0.0, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3189), 3.0, -1, 10.0, true);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, false);
    Wait(2.0, c_timeGame);
    libNCMI_gf_SendActorMessageToDoodadsInRegion("Signal AlarmOn", "NovaUmojanLabWallCap", RegionFromId(78));
    Wait(2.0, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(1332)), "AnimBracketStart Spell Death Dead {} OpeningPlayForever");
    SoundPlayAtPointForPlayer(SoundLink("HoldingPen_Explode", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(901), 0.0, 100.0, 0.0);
    Wait(0.75, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(2591)), "AnimBracketStart Spell Death Dead {} OpeningPlayForever");
    SoundPlayAtPointForPlayer(SoundLink("HoldingPen_Explode", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(2536), 0.0, 100.0, 0.0);
    UnitBehaviorAdd(gv_eradicatorTypeMissile, "Detector12", gv_eradicatorTypeMissile, 1);
    UnitBehaviorAdd(gv_eradicatorTypeCannon, "Detector12", gv_eradicatorTypeCannon, 1);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3191), 5.0, -1, 10.0, true);
    UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2094)), c_orderQueueReplace);
    Wait(0.75, c_timeGame);
    UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2106)), c_orderQueueReplace);
    gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorEast;
    UnitIssueOrder(gv_eradicatorTypeMissile, Order(AbilityCommand("NovaEradicatorMissileMode", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_eradicatorTypeMissile, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2094)), c_orderQueueReplace);
    UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    ObjectiveShow(gv_objectiveRescueStalkers3, PlayerGroupAll(), false);
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, true);
    ObjectiveSetName(gv_objectiveRescueStalkers3, StringExternal("Param/Value/76CD0CBD"));
    ObjectiveShow(gv_objectiveRescueStalkers3, PlayerGroupAll(), true);
    TriggerExecute(gt_BonusObjectiveStartBossMusic, true, false);
    TriggerEnable(gt_BonusObjectivePlayerReturnsToEradicatorEntrance, true);
    TriggerExecute(gt_BonusObjectiveActivateEradicatorTransmissionQ, true, false);
    libNtve_gf_MakeUnitInvulnerable(gv_nova, false);
    libNtve_gf_MakeUnitUncommandable(gv_nova, false);
    UnitSetState(UnitFromId(895), c_unitStateHighlightable, true);
    UnitSetState(UnitFromId(895), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(895), c_unitStateTargetable, true);
    UnitSetState(UnitFromId(895), c_unitStateTooltipable, true);
    UnitSetState(UnitFromId(895), c_unitStateInvulnerable, false);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(895), null, UnitGetName(UnitFromId(895)), null);
    UnitSetState(UnitFromId(1340), c_unitStateHighlightable, true);
    UnitSetState(UnitFromId(1340), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(1340), c_unitStateTargetable, true);
    UnitSetState(UnitFromId(1340), c_unitStateTooltipable, true);
    UnitSetState(UnitFromId(1340), c_unitStateInvulnerable, false);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1340), null, UnitGetName(UnitFromId(1340)), null);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_BonusObjectiveEradicatorTypeMissile, true, false);
    TriggerExecute(gt_BonusObjectiveEradicatorTypeCannon, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveSpawnEradicatorScene_Init () {
    gt_BonusObjectiveSpawnEradicatorScene = TriggerCreate("gt_BonusObjectiveSpawnEradicatorScene_Func");
    TriggerEnable(gt_BonusObjectiveSpawnEradicatorScene, false);
    TriggerAddEventTimePeriodic(gt_BonusObjectiveSpawnEradicatorScene, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Activate Eradicator Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveActivateEradicatorTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueRemove);
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(895)), StringExternal("Param/Value/61AD65F1"));
    libHots_gf_StorePingForUnit(UnitFromId(895), 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), UnitFromId(895));
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(UnitFromId(895)) == true)) {
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(895), "Mission_Nova05|Line00116", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        libNCMI_gf_SendTransmissionCampaign(gv_eradicatorTypeCannon, "Mission_Nova05|Line00117", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveActivateEradicatorTransmissionQ_Init () {
    gt_BonusObjectiveActivateEradicatorTransmissionQ = TriggerCreate("gt_BonusObjectiveActivateEradicatorTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Activate Eradicator Enrage Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueRemove);
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(gv_enragedEradicator), StringExternal("Param/Value/3168DAC6"));
    libHots_gf_StorePingForUnit(gv_enragedEradicator, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), gv_enragedEradicator);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(gv_enragedEradicator) == true)) {
        libNCMI_gf_SendTransmissionCampaign(gv_enragedEradicator, "Mission_Nova05|Line00024", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ_Init () {
    gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ = TriggerCreate("gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Type Missile
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorTypeMissile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_eradicatorTypeMissile) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nova) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == true) && (UnitIsAlive(gv_eradicatorTypeCannon) == true) && (UnitIsAlive(gv_nova) == true)) {
        gf_BonusObjectiveEradicatorMissilesRing();
        Wait(4.0, c_timeGame);
        if ((gv_eradicatorDenyPlayerSafeZone == true)) {
            gf_BonusObjectiveEradicatorMissilesEntranceAttack();
        }
        else {
            gf_BonusObjectiveEradicatorMissilesAttackDirectly();
            Wait(1.0, c_timeGame);
            if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), UnitGetPosition(gv_nova)), c_orderQueueAddToEnd);
            }

        }
        Wait(2.0, c_timeGame);
        if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            UnitIssueOrder(gv_eradicatorTypeMissile, Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToEnd);
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorTypeMissile_Init () {
    gt_BonusObjectiveEradicatorTypeMissile = TriggerCreate("gt_BonusObjectiveEradicatorTypeMissile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Type Cannon
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorTypeCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPosition;

    // Automatic Variable Declarations
    int autoC7813182_val;
    fixed auto5F1EC19C_at;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_eradicatorTypeCannon) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nova) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == true) && (UnitIsAlive(gv_eradicatorTypeCannon) == true) && (UnitIsAlive(gv_nova) == true)) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
            gf_BonusObjectiveEradicatorCannonFiveWayShot();
            Wait(libLotv_gf_DifficultyValueFixed2(0.0, 0.0, 1.7, 1.7), c_timeGame);
            UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToEnd);
            Wait(1.0, c_timeGame);
            autoC7813182_val = gv_eradicatorTypeCannonPosition;
            if (autoC7813182_val == ge_BonusObjectiveEradicatorPositions_EradicatorEast) {
                lv_targetPosition = PointFromId(2108);
                gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorSouth;
            }
            else if (autoC7813182_val == ge_BonusObjectiveEradicatorPositions_EradicatorSouth) {
                lv_targetPosition = PointFromId(2109);
                gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorWest;
            }
            else if (autoC7813182_val == ge_BonusObjectiveEradicatorPositions_EradicatorWest) {
                lv_targetPosition = PointFromId(2104);
                gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorNorth;
            }
            else if (autoC7813182_val == ge_BonusObjectiveEradicatorPositions_EradicatorNorth) {
                lv_targetPosition = PointFromId(2106);
                gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorEast;
            }
            else {
            }
            if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
                UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPosition), c_orderQueueReplace);
            }

            auto5F1EC19C_at = 0;
            while (!(((DistanceBetweenPoints(UnitGetPosition(gv_eradicatorTypeCannon), lv_targetPosition) <= 0.2) || (UnitIsAlive(gv_eradicatorTypeCannon) == false))) && auto5F1EC19C_at <= ((DistanceBetweenPoints(UnitGetPosition(gv_eradicatorTypeCannon), lv_targetPosition) / UnitGetPropertyFixed(gv_eradicatorTypeCannon, c_unitPropMovementSpeed, c_unitPropCurrent)) + 0.3)) {
                Wait(0.01, c_timeGame);
                auto5F1EC19C_at = auto5F1EC19C_at + 0.01;
            }
            if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
                UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2094)), c_orderQueueReplace);
                UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorTypeCannon_Init () {
    gt_BonusObjectiveEradicatorTypeCannon = TriggerCreate("gt_BonusObjectiveEradicatorTypeCannon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Type Missile Enrage
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorTypeMissileEnrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_eradicatorTypeMissile) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nova) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enragedEradicator = gv_eradicatorTypeMissile;
    TriggerExecute(gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ, true, false);
    Wait(3.0, c_timeGame);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == true) && (UnitIsAlive(gv_nova) == true)) {
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), UnitGetPosition(gv_nova)), c_orderQueueReplace);
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_nova)), c_orderQueueAddToEnd);
        gf_BonusObjectiveEradicatorMissilesEnrageRing();
        Wait(1.0, c_timeGame);
        gf_BonusObjectiveEradicatorMissilesAttackDirectly();
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorTypeMissileEnrage_Init () {
    gt_BonusObjectiveEradicatorTypeMissileEnrage = TriggerCreate("gt_BonusObjectiveEradicatorTypeMissileEnrage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Type Cannon Enrage
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorTypeCannonEnrage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_eradicatorTypeCannon) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nova) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enragedEradicator = gv_eradicatorTypeCannon;
    TriggerExecute(gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ, true, false);
    Wait(3.0, c_timeGame);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_eradicatorTypeCannon) == true) && (UnitIsAlive(gv_nova) == true)) {
        gf_BonusObjectiveEradicatorCannonAttack(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, UnitGetPosition(gv_nova)));
        lv_attackCount = 0;
        while ((lv_attackCount < 5) && (UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
            lv_attackCount += 1;
            gf_BonusObjectiveEradicatorCannonAttackNoTurn(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, UnitGetPosition(gv_nova)));
            Wait(1.1, c_timeGame);
        }
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_nova)), c_orderQueueReplace);
        Wait(0.3, c_timeGame);
        UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        gf_BonusObjectiveEradicatorCannonFanAttack();
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorTypeCannonEnrage_Init () {
    gt_BonusObjectiveEradicatorTypeCannonEnrage = TriggerCreate("gt_BonusObjectiveEradicatorTypeCannonEnrage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Dies
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dyingPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_eradicatorTypeCannon) == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == false)) {
        TriggerStop(gt_BonusObjectiveEradicatorTypeMissile);
        TriggerStop(gt_BonusObjectiveEradicatorTypeCannon);
        TriggerStop(gt_BonusObjectiveEradicatorTypeMissileEnrage);
        TriggerStop(gt_BonusObjectiveEradicatorTypeCannonEnrage);
        TriggerEnable(TriggerGetCurrent(), false);
        UnitSetPosition(UnitFromId(1093), lv_dyingPoint, false);
        libNtve_gf_ShowHideUnit(UnitFromId(1093), true);
        gf_BonusObjectivePauseUnpauseUnitGroup(false, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(1093)));
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(1093), true);
        TriggerExecute(gt_BonusObjectiveStopBossMusic, true, false);
        PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
        libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(1093)), StringExternal("Param/Value/5826CA7E"));
        libHots_gf_StorePingForUnit(UnitFromId(1093), 1, PingLastCreated());
        Wait(4.0, c_timeGame);
        TriggerExecute(gt_BonusObjectiveCollectedFacilityQ, true, false);
        UnitIssueOrder(UnitFromId(896), Order(AbilityCommand("UmojanLabDoorsThinLeftLowered", 0)), c_orderQueueReplace);
    }
    else if ((UnitIsAlive(gv_eradicatorTypeCannon) == true) && (UnitIsAlive(gv_eradicatorTypeMissile) == false)) {
        TriggerStop(gt_BonusObjectiveEradicatorTypeMissile);
        TriggerStop(gt_BonusObjectiveEradicatorTypeCannon);
        TriggerExecute(gt_BonusObjectiveEradicatorTypeCannonEnrage, true, false);
    }
    else if ((UnitIsAlive(gv_eradicatorTypeCannon) == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        TriggerStop(gt_BonusObjectiveEradicatorTypeMissile);
        TriggerStop(gt_BonusObjectiveEradicatorTypeCannon);
        TriggerExecute(gt_BonusObjectiveEradicatorTypeMissileEnrage, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorDies_Init () {
    gt_BonusObjectiveEradicatorDies = TriggerCreate("gt_BonusObjectiveEradicatorDies_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveEradicatorDies, UnitRefFromVariable("gv_eradicatorTypeCannon"));
    TriggerAddEventUnitDied(gt_BonusObjectiveEradicatorDies, UnitRefFromVariable("gv_eradicatorTypeMissile"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Player Returns To Eradicator Entrance
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectivePlayerReturnsToEradicatorEntrance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_eradicatorPlayerEntranceLoiterTimer) <= 0.0)) {
        TimerStart(gv_eradicatorPlayerEntranceLoiterTimer, 4.0, false, c_timeGame);
    }
    else {
        TimerPause(gv_eradicatorPlayerEntranceLoiterTimer, false);
    }
    TriggerEnable(gt_BonusObjectivePlayerLoiteringInEradicatorEntrance, true);
    TriggerEnable(gt_BonusObjectivePlayerLeftEradicatorEntrance, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectivePlayerReturnsToEradicatorEntrance_Init () {
    gt_BonusObjectivePlayerReturnsToEradicatorEntrance = TriggerCreate("gt_BonusObjectivePlayerReturnsToEradicatorEntrance_Func");
    TriggerEnable(gt_BonusObjectivePlayerReturnsToEradicatorEntrance, false);
    TriggerAddEventUnitRegion(gt_BonusObjectivePlayerReturnsToEradicatorEntrance, UnitRefFromVariable("gv_nova"), RegionFromId(86), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Player Loitering In Eradicator Entrance
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectivePlayerLoiteringInEradicatorEntrance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(86)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_eradicatorDenyPlayerSafeZone = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectivePlayerLoiteringInEradicatorEntrance_Init () {
    gt_BonusObjectivePlayerLoiteringInEradicatorEntrance = TriggerCreate("gt_BonusObjectivePlayerLoiteringInEradicatorEntrance_Func");
    TriggerEnable(gt_BonusObjectivePlayerLoiteringInEradicatorEntrance, false);
    TriggerAddEventTimer(gt_BonusObjectivePlayerLoiteringInEradicatorEntrance, gv_eradicatorPlayerEntranceLoiterTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Player Left Eradicator Entrance
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectivePlayerLeftEradicatorEntrance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_BonusObjectivePlayerReturnsToEradicatorEntrance, true);
    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_eradicatorDenyPlayerSafeZone == true)) {
        gv_eradicatorDenyPlayerSafeZone = false;
    }
    else {
        TimerPause(gv_eradicatorPlayerEntranceLoiterTimer, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectivePlayerLeftEradicatorEntrance_Init () {
    gt_BonusObjectivePlayerLeftEradicatorEntrance = TriggerCreate("gt_BonusObjectivePlayerLeftEradicatorEntrance_Func");
    TriggerEnable(gt_BonusObjectivePlayerLeftEradicatorEntrance, false);
    TriggerAddEventUnitRegion(gt_BonusObjectivePlayerLeftEradicatorEntrance, UnitRefFromVariable("gv_nova"), RegionFromId(86), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers();
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_PROTOSS_BULLIES, "Oracle", "AIOracle", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_04_PROTOSS_WAVES, "Oracle", "AIOracle", false);
    AISetBullyRebuildDelay(5.0, 10.0, gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS);
    AINearestTownBullyRebuild(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, true);
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(87));
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(88));
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(102));
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(103));
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(104));
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(105));
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(106));
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_03_INFESTED_NOFIGHTPROTOSS, RegionFromId(109));
    AISetBullyRebuildDelay(5.0, 10.0, gv_pLAYER_05_INFESTED_FIGHTPROTOSS);
    AINearestTownBullyRebuild(gv_pLAYER_05_INFESTED_FIGHTPROTOSS, true);
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_05_INFESTED_FIGHTPROTOSS, RegionFromId(107));
    gf_AIMonitorBullyRebuildRegion(gv_pLAYER_05_INFESTED_FIGHTPROTOSS, RegionFromId(108));
    cai_runall();
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradeCasualNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradeHardBrutal, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto70EECDC9_g;
    int auto70EECDC9_var;
    playergroup autoDBA116CD_g;
    int autoDBA116CD_var;
    playergroup auto7E0CBA8B_g;
    int auto7E0CBA8B_var;
    playergroup auto410FB630_g;
    int auto410FB630_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto70EECDC9_g = gv_taldarimPlayerGroup;
    auto70EECDC9_var = -1;
    while (true) {
        auto70EECDC9_var = PlayerGroupNextPlayer(auto70EECDC9_g, auto70EECDC9_var);
        if (auto70EECDC9_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto70EECDC9_var, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto70EECDC9_var, "ProtossAirWeaponsLevel1", 1);
    }
    autoDBA116CD_g = gv_zergPlayerGroup;
    autoDBA116CD_var = -1;
    while (true) {
        autoDBA116CD_var = PlayerGroupNextPlayer(autoDBA116CD_g, autoDBA116CD_var);
        if (autoDBA116CD_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoDBA116CD_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoDBA116CD_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoDBA116CD_var, "ZergMissileWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    auto7E0CBA8B_g = gv_taldarimPlayerGroup;
    auto7E0CBA8B_var = -1;
    while (true) {
        auto7E0CBA8B_var = PlayerGroupNextPlayer(auto7E0CBA8B_g, auto7E0CBA8B_var);
        if (auto7E0CBA8B_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7E0CBA8B_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto7E0CBA8B_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto7E0CBA8B_var, "ProtossShieldsLevel1", 1);
    }
    auto410FB630_g = gv_zergPlayerGroup;
    auto410FB630_var = -1;
    while (true) {
        auto410FB630_var = PlayerGroupNextPlayer(auto410FB630_g, auto410FB630_var);
        if (auto410FB630_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto410FB630_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto410FB630_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeCasualNormal_Init () {
    gt_AIUpgradeCasualNormal = TriggerCreate("gt_AIUpgradeCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2C2010B0_g;
    int auto2C2010B0_var;
    playergroup auto2499DE3F_g;
    int auto2499DE3F_var;
    playergroup auto1CFAEDD8_g;
    int auto1CFAEDD8_var;
    playergroup auto2A280954_g;
    int auto2A280954_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto2C2010B0_g = gv_taldarimPlayerGroup;
    auto2C2010B0_var = -1;
    while (true) {
        auto2C2010B0_var = PlayerGroupNextPlayer(auto2C2010B0_g, auto2C2010B0_var);
        if (auto2C2010B0_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2C2010B0_var, "ProtossGroundWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C2010B0_var, "ProtossAirWeaponsLevel2", 1);
    }
    auto2499DE3F_g = gv_zergPlayerGroup;
    auto2499DE3F_var = -1;
    while (true) {
        auto2499DE3F_var = PlayerGroupNextPlayer(auto2499DE3F_g, auto2499DE3F_var);
        if (auto2499DE3F_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2499DE3F_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2499DE3F_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2499DE3F_var, "ZergMissileWeaponsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    auto1CFAEDD8_g = gv_taldarimPlayerGroup;
    auto1CFAEDD8_var = -1;
    while (true) {
        auto1CFAEDD8_var = PlayerGroupNextPlayer(auto1CFAEDD8_g, auto1CFAEDD8_var);
        if (auto1CFAEDD8_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto1CFAEDD8_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto1CFAEDD8_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto1CFAEDD8_var, "ProtossShieldsLevel2", 1);
    }
    auto2A280954_g = gv_zergPlayerGroup;
    auto2A280954_var = -1;
    while (true) {
        auto2A280954_var = PlayerGroupNextPlayer(auto2A280954_g, auto2A280954_var);
        if (auto2A280954_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2A280954_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2A280954_var, "ZergFlyerArmorsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeHardBrutal_Init () {
    gt_AIUpgradeHardBrutal = TriggerCreate("gt_AIUpgradeHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Infested Attack Early Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstInfestedAttackEarlyWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(106.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/270D8CC5"), null, PointFromId(1143));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1143), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((TriggerIsEnabled(gt_FoundTheMinersViaAttackQ) == true)) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00130", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00131", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstInfestedAttackEarlyWarningQ_Init () {
    gt_FirstInfestedAttackEarlyWarningQ = TriggerCreate("gt_FirstInfestedAttackEarlyWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Infested Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstInfestedAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_triggeringWaveGroup;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringWaveGroup = UnitGroupEmpty();
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_triggeringWaveGroup = AIWaveGetUnits(EventPlayerWave());
    Wait(4.0, c_timeAI);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((UnitGroupCount(lv_triggeringWaveGroup, c_unitCountAlive) > 0) && (TimerGetRemaining(lv_talkTimer) > 0.0)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupUnit(lv_triggeringWaveGroup, 1), "Mission_Nova05|Line00174", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstInfestedAttackQ_Init () {
    gt_FirstInfestedAttackQ = TriggerCreate("gt_FirstInfestedAttackQ_Func");
    TriggerAddEventPlayerAIWave(gt_FirstInfestedAttackQ, gv_pLAYER_05_INFESTED_FIGHTPROTOSS);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Infested Attack Side Entrance Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstInfestedAttackSideEntranceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(320.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/68A5DC85"), null, PointFromId(1142));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1142), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(UnitLastCreated(), "Mission_Nova05|Line00097", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00017", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstInfestedAttackSideEntranceQ_Init () {
    gt_FirstInfestedAttackSideEntranceQ = TriggerCreate("gt_FirstInfestedAttackSideEntranceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Rage Wave - Siege Tanks Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialRageWaveSiegeTanksQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F7A5C037"), null, RegionGetCenter(RegionFromId(71)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(71)), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00175", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialRageWaveSiegeTanksQ_Init () {
    gt_SpecialRageWaveSiegeTanksQ = TriggerCreate("gt_SpecialRageWaveSiegeTanksQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Rage Wave - Flyers Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialRageWaveFlyersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0033FC46"), null, RegionGetCenter(RegionFromId(61)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(61)), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00129", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialRageWaveFlyersQ_Init () {
    gt_SpecialRageWaveFlyersQ = TriggerCreate("gt_SpecialRageWaveFlyersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Protoss Base Attack 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_SendProtossBaseAttack01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00203", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    gf_DeployWarpPrismAndWarpInBaseAttacks(PointFromId(796));
    gf_DeployWarpPrismAndWarpInBaseAttacks(PointFromId(797));
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00119", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendProtossBaseAttack01Q_Init () {
    gt_SendProtossBaseAttack01Q = TriggerCreate("gt_SendProtossBaseAttack01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Base Attack Unit Warping In
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBaseAttackUnitWarpingIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_PROTOSS_BULLIES))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(84)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(85)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_protossBaseAttackGroup, EventUnitProgressUnit());
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_PROTOSS_BULLIES, UnitGetPosition(EventUnitProgressUnit()));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_PROTOSS_BULLIES, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveUseUnit(gv_pLAYER_02_PROTOSS_BULLIES, EventUnitProgressUnit());
    AIAttackWaveSend(gv_pLAYER_02_PROTOSS_BULLIES, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBaseAttackUnitWarpingIn_Init () {
    gt_ProtossBaseAttackUnitWarpingIn = TriggerCreate("gt_ProtossBaseAttackUnitWarpingIn_Func");
    TriggerAddEventUnitConstructProgress(gt_ProtossBaseAttackUnitWarpingIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Protoss Claimer Wave (Small)
//--------------------------------------------------------------------------------------------------
bool gt_SendProtossClaimerWaveSmall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossClaimWavesSent += 1;
    if ((ModI(gv_protossClaimWavesSent, 2) == 1)) {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_SmallA);
    }
    else {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_SmallB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendProtossClaimerWaveSmall_Init () {
    gt_SendProtossClaimerWaveSmall = TriggerCreate("gt_SendProtossClaimerWaveSmall_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Protoss Claimer Wave (Medium)
//--------------------------------------------------------------------------------------------------
bool gt_SendProtossClaimerWaveMedium_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossClaimWavesSent += 1;
    if ((ModI(gv_protossClaimWavesSent, 2) == 1)) {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_MediumA);
    }
    else {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_MediumB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendProtossClaimerWaveMedium_Init () {
    gt_SendProtossClaimerWaveMedium = TriggerCreate("gt_SendProtossClaimerWaveMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Protoss Claimer Wave (Large)
//--------------------------------------------------------------------------------------------------
bool gt_SendProtossClaimerWaveLarge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossClaimWavesSent += 1;
    if ((ModI(gv_protossClaimWavesSent, 2) == 1)) {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeA);
    }
    else {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendProtossClaimerWaveLarge_Init () {
    gt_SendProtossClaimerWaveLarge = TriggerCreate("gt_SendProtossClaimerWaveLarge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Claim Wave Unit Warped In
//--------------------------------------------------------------------------------------------------
bool gt_ClaimWaveUnitWarpedIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_terrazineTankIndex;
    unit lv_warpedUnit;

    // Automatic Variable Declarations
    int auto843D6849_ae;
    const int auto843D6849_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_04_PROTOSS_WAVES))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Zealot") || (UnitGetType(EventUnitProgressUnit()) == "Stalker") || (UnitGetType(EventUnitProgressUnit()) == "Sentry") || (UnitGetType(EventUnitProgressUnit()) == "HighTemplar") || (UnitGetType(EventUnitProgressUnit()) == "Archon") || (UnitGetType(EventUnitProgressUnit()) == "Immortal") || (UnitGetType(EventUnitProgressUnit()) == "Colossus")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto843D6849_ae = gv_terrazineTankLocationsCount;
    lv_terrazineTankIndex = 1;
    for ( ; ( (auto843D6849_ai >= 0 && lv_terrazineTankIndex <= auto843D6849_ae) || (auto843D6849_ai < 0 && lv_terrazineTankIndex >= auto843D6849_ae) ) ; lv_terrazineTankIndex += auto843D6849_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), gv_terrazineTankLocations[lv_terrazineTankIndex].lv_protossClaimerWaveTargetRegion) == true)) {
            UnitGroupAdd(gv_terrazineTankLocations[lv_terrazineTankIndex].lv_protossClaimerWaveUnitGroup, EventUnitProgressUnit());
            lv_warpedUnit = EventUnitProgressUnit();
            break;
        }

    }
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lv_warpedUnit) == true)) {
        if (((UnitGetType(EventUnitProgressUnit()) == "Stalker") || (UnitGetType(EventUnitProgressUnit()) == "Archon") || (UnitGetType(EventUnitProgressUnit()) == "Sentry"))) {
            if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_PROTOSS_WAVES, c_unitAllianceEnemy, gv_terrazineTankLocations[lv_terrazineTankIndex].lv_protossClaimerWaveTargetRegion, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
                UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(gv_pLAYER_04_PROTOSS_WAVES, c_unitAllianceEnemy, gv_terrazineTankLocations[lv_terrazineTankIndex].lv_protossClaimerWaveTargetRegion, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_warpedUnit)))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), c_orderQueueReplace);
            }
        }
        else {
            if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_PROTOSS_WAVES, c_unitAllianceEnemy, gv_terrazineTankLocations[lv_terrazineTankIndex].lv_protossClaimerWaveTargetRegion, UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
                UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(gv_pLAYER_04_PROTOSS_WAVES, c_unitAllianceEnemy, gv_terrazineTankLocations[lv_terrazineTankIndex].lv_protossClaimerWaveTargetRegion, UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_warpedUnit)))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_terrazineTankLocations[lv_terrazineTankIndex].lv_terrazineTankUnit), c_orderQueueReplace);
            }
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClaimWaveUnitWarpedIn_Init () {
    gt_ClaimWaveUnitWarpedIn = TriggerCreate("gt_ClaimWaveUnitWarpedIn_Func");
    TriggerAddEventUnitConstructProgress(gt_ClaimWaveUnitWarpedIn, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Claimer Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossClaimerWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto36970975_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_claimWaveTransmissionCount == 0)) {
        if (gv_claimWaveTransmissionCount >= 4) {
            gv_claimWaveTransmissionCount = 1;
        }
        else {
            gv_claimWaveTransmissionCount = gv_claimWaveTransmissionCount + 1;
        }
        TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedCreate, true, true);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00053", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00189", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        if (gv_claimWaveTransmissionCount >= 4) {
            gv_claimWaveTransmissionCount = 1;
        }
        else {
            gv_claimWaveTransmissionCount = gv_claimWaveTransmissionCount + 1;
        }
        auto36970975_val = gv_claimWaveTransmissionCount;
        if (auto36970975_val == 1) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00178", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto36970975_val == 2) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00176", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto36970975_val == 3) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00177", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto36970975_val == 4) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00186", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossClaimerWaveQ_Init () {
    gt_ProtossClaimerWaveQ = TriggerCreate("gt_ProtossClaimerWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Kill Protoss Claimer Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_InfestedKillProtossClaimerWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if (gv_infestedKillClaimerWaveTransmissionCount >= 2) {
        gv_infestedKillClaimerWaveTransmissionCount = 1;
    }
    else {
        gv_infestedKillClaimerWaveTransmissionCount = gv_infestedKillClaimerWaveTransmissionCount + 1;
    }
    if ((gv_infestedKillClaimerWaveTransmissionCount == 1)) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00191", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00192", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedKillProtossClaimerWaveQ_Init () {
    gt_InfestedKillProtossClaimerWaveQ = TriggerCreate("gt_InfestedKillProtossClaimerWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveExtractTerrazineFailed, true, false);
    TriggerExecute(gt_ObjectivePreventProtossFailed, true, false);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/BA4FA2ED"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Protoss Cap Terrazine
//--------------------------------------------------------------------------------------------------
bool gt_DefeatProtossCapTerrazine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveExtractTerrazineFailed, true, false);
    TriggerExecute(gt_ObjectivePreventProtossFailed, true, false);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7C3FF7DB"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatProtossCapTerrazine_Init () {
    gt_DefeatProtossCapTerrazine = TriggerCreate("gt_DefeatProtossCapTerrazine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveExtractTerrazineComplete, true, true);
    TriggerExecute(gt_TerrazineGatheringCompleteQ, true, true);
    libNCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyZergBase) == c_objectiveStateCompleted)) {
        libComC_gf_CampaignAwardAchievement("Nova05_1", gv_pLAYER_01_USER);
    }

    if ((gv_objectiveDoNotLetDevicesBeDestroyed == 0) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova05_3", gv_pLAYER_01_USER);
    }

    if ((gv_achievement_PlayerHasKilledProtoss == false) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova05_Mastery", gv_pLAYER_01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementConstructedSiegeTankOrLiberator == false)) {
        libComC_gf_CampaignAwardAchievement("Anniversary_Nova05", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/69B8D28E"), IntToText(gv_victoryStat_LiberatorKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D5FAFD5E"), IntToText(gv_victoryStat_ProtossWavesIntercepted));
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement_PlayerHasKilledProtoss
//--------------------------------------------------------------------------------------------------
bool gt_Achievement_PlayerHasKilledProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_02_PROTOSS_BULLIES) || (EventPlayer() == gv_pLAYER_04_PROTOSS_WAVES)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_achievement_PlayerHasKilledProtoss = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Achievement_PlayerHasKilledProtoss_Init () {
    gt_Achievement_PlayerHasKilledProtoss = TriggerCreate("gt_Achievement_PlayerHasKilledProtoss_Func");
    TriggerAddEventUnitDied(gt_Achievement_PlayerHasKilledProtoss, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VictoryStat_LiberatorKills
//--------------------------------------------------------------------------------------------------
bool gt_VictoryStat_LiberatorKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((EventPlayer() != gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(libNtve_gf_KillingUnit()) == "Liberator") || (UnitGetType(libNtve_gf_KillingUnit()) == "LiberatorAG")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_victoryStat_LiberatorKills += 1;
    AchievementTermQuantitySet(gv_pLAYER_01_USER, "Nova05_2", gv_victoryStat_LiberatorKills);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryStat_LiberatorKills_Init () {
    gt_VictoryStat_LiberatorKills = TriggerCreate("gt_VictoryStat_LiberatorKills_Func");
    TriggerAddEventUnitDied(gt_VictoryStat_LiberatorKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Victory without constructing Siege Tanks or Liberators
//--------------------------------------------------------------------------------------------------
bool gt_AchievementVictorywithoutconstructingSiegeTanksorLiberators_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "SiegeTank") || (UnitGetType(EventUnitProgressUnit()) == "Liberator")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementConstructedSiegeTankOrLiberator = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementVictorywithoutconstructingSiegeTanksorLiberators_Init () {
    gt_AchievementVictorywithoutconstructingSiegeTanksorLiberators = TriggerCreate("gt_AchievementVictorywithoutconstructingSiegeTanksorLiberators_Func");
    TriggerAddEventUnitTrainProgress(gt_AchievementVictorywithoutconstructingSiegeTanksorLiberators, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNCMI_gf_DisplayMissionTip();
    Wait(libNCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Extract Terrazine Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExtractTerrazineCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova05Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    libCMMI_gf_SetObjectiveRequiredCountCampaign("Nova05Primary01", gv_objectiveExtractTerrazineMax);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExtractTerrazineCreate_Init () {
    gt_ObjectiveExtractTerrazineCreate = TriggerCreate("gt_ObjectiveExtractTerrazineCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Extract Terrazine Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExtractTerrazineComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveExtractTerrazineCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova05Primary01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExtractTerrazineComplete_Init () {
    gt_ObjectiveExtractTerrazineComplete = TriggerCreate("gt_ObjectiveExtractTerrazineComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Extract Terrazine Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExtractTerrazineUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveExtractTerrazineCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova05Primary01", gv_objectiveExtractTerrazineCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExtractTerrazineUpdate_Init () {
    gt_ObjectiveExtractTerrazineUpdate = TriggerCreate("gt_ObjectiveExtractTerrazineUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Extract Terrazine Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExtractTerrazineFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveExtractTerrazineCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova05Primary01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExtractTerrazineFailed_Init () {
    gt_ObjectiveExtractTerrazineFailed = TriggerCreate("gt_ObjectiveExtractTerrazineFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Do Not Let Devices Be Destroyed Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDoNotLetDevicesBeDestroyedCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova05Primary02");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    libCMMI_gf_SetObjectiveRequiredCountCampaign("Nova05Primary02", gv_objectiveDoNotLetDevicesBeDestroyedMax);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDoNotLetDevicesBeDestroyedCreate_Init () {
    gt_ObjectiveDoNotLetDevicesBeDestroyedCreate = TriggerCreate("gt_ObjectiveDoNotLetDevicesBeDestroyedCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Do Not Let Devices Be Destroyed Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDoNotLetDevicesBeDestroyedComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova05Primary02", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDoNotLetDevicesBeDestroyedComplete_Init () {
    gt_ObjectiveDoNotLetDevicesBeDestroyedComplete = TriggerCreate("gt_ObjectiveDoNotLetDevicesBeDestroyedComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Do Not Let Devices Be Destroyed Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova05Primary02", gv_objectiveDoNotLetDevicesBeDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate_Init () {
    gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate = TriggerCreate("gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prevent Protoss Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventProtossFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova05Primary02", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventProtossFailed_Init () {
    gt_ObjectivePreventProtossFailed = TriggerCreate("gt_ObjectivePreventProtossFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Umojan Mine Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreUmojanMineCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCMMI_gf_CreateObjectiveCampaign("Nova05Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreUmojanMineCreate_Init () {
    gt_ObjectiveExploreUmojanMineCreate = TriggerCreate("gt_ObjectiveExploreUmojanMineCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Umojan Mine Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreUmojanMineComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveExploreUmojanMineCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova05Bonus01", libComC_ge_MissionObjectiveState_Completed);
    libCMMI_gf_SetMissionObjectiveProgress("Nova05Bonus01", 1);
    ObjectiveSetName(gv_objectiveRescueStalkers, StringExternal("Param/Value/58D153F9"));
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreUmojanMineComplete_Init () {
    gt_ObjectiveExploreUmojanMineComplete = TriggerCreate("gt_ObjectiveExploreUmojanMineComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Umojan Mine Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreUmojanMineFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveExploreUmojanMineCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova05Bonus01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreUmojanMineFailed_Init () {
    gt_ObjectiveExploreUmojanMineFailed = TriggerCreate("gt_ObjectiveExploreUmojanMineFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Science Facility Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreScienceFacilityCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCMMI_gf_CreateObjectiveCampaign("Nova05Bonus02");
    gv_objectiveRescueStalkers3 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreScienceFacilityCreate_Init () {
    gt_ObjectiveExploreScienceFacilityCreate = TriggerCreate("gt_ObjectiveExploreScienceFacilityCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Science Facility Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreScienceFacilityComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveExploreScienceFacilityCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova05Bonus02", libComC_ge_MissionObjectiveState_Completed);
    libCMMI_gf_SetMissionObjectiveProgress("Nova05Bonus02", 1);
    ObjectiveSetName(gv_objectiveRescueStalkers3, StringExternal("Param/Value/120C59A6"));
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreScienceFacilityComplete_Init () {
    gt_ObjectiveExploreScienceFacilityComplete = TriggerCreate("gt_ObjectiveExploreScienceFacilityComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Science Facility Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreScienceFacilityFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveExploreScienceFacilityCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova05Bonus02", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreScienceFacilityFailed_Init () {
    gt_ObjectiveExploreScienceFacilityFailed = TriggerCreate("gt_ObjectiveExploreScienceFacilityFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_BriefingCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(211), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(212), 13.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova05|Line00016", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(213), 0.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova05|Line00014", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova05|Line00018", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova05|Line00013", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova05|Line00019", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova05|Line00015", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(215), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(250), 12.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova05|Line00005", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova05|Line00007", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova05|Line00011", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_BriefingBaseHolograms, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(214), 0.0, -1, 10, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingCinematic_Init () {
    gt_BriefingCinematic = TriggerCreate("gt_BriefingCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Base Holograms
//--------------------------------------------------------------------------------------------------
bool gt_BriefingBaseHolograms_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("CommandCenterPlacement", PointFromId(154));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetFacing 225.000000");
    gv_holo_CC = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("BarracksPlacement", PointFromId(243));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetFacing 225.000000");
    gv_holo_Barracks = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("StarportPlacement", PointFromId(242));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetFacing 225.000000");
    gv_holo_Starport = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingBaseHolograms_Init () {
    gt_BriefingBaseHolograms = TriggerCreate("gt_BriefingBaseHolograms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameQ);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal GuideHide");
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "ModelFlagsClear OutlineOccluder");
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "ModelFlagsClear OutlineEmitter,OutlineOccluder");
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Nova_003.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Nova_004.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Nova_007.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Nova_012.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Nova_015.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Nova_017.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Nova_018.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Reigel_001.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Reigel_005.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Reigel_009.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Reigel_010.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Reigel_011.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Reigel_013.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Reigel_014.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Reigel_016.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova05_Reigel_019.ogg", false);
    TriggerExecute(gt_BriefingScene00DropZone, true, true);
    TriggerExecute(gt_BriefingScene02ExtractionDevices, true, true);
    TriggerExecute(gt_BriefingScene03SignsofLife, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 - Drop Zone
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00DropZone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_voiceOverDurationTotal;
    fixed lv_voiceOverFraction;

    // Automatic Variable Declarations
    unitgroup autoE1558EC6_g;
    int autoE1558EC6_u;
    unit autoE1558EC6_var;
    unitgroup autoEFD6A382_g;
    int autoEFD6A382_u;
    unit autoEFD6A382_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_voiceOverDurationTotal = (SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00001", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00002", true), c_soundIndexAny)));
    lv_voiceOverFraction = (lv_voiceOverDurationTotal / 3.0);
    autoE1558EC6_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE1558EC6_u = UnitGroupCount(autoE1558EC6_g, c_unitCountAll);
    for (;; autoE1558EC6_u -= 1) {
        autoE1558EC6_var = UnitGroupUnitFromEnd(autoE1558EC6_g, autoE1558EC6_u);
        if (autoE1558EC6_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoE1558EC6_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoE1558EC6_var);
            libNtve_gf_PauseUnit(autoE1558EC6_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoEFD6A382_g = gv_cinematicHiddenUnits;
    autoEFD6A382_u = UnitGroupCount(autoEFD6A382_g, c_unitCountAll);
    for (;; autoEFD6A382_u -= 1) {
        autoEFD6A382_var = UnitGroupUnitFromEnd(autoEFD6A382_g, autoEFD6A382_u);
        if (autoEFD6A382_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoEFD6A382_var, false);
    }
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2082), 0.0, -1, 10, true);
    TriggerExecute(gt_BreifingScene00DropZonePanning, true, false);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova05_00");
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova05|Line00016", true), c_soundIndexAny))), c_timeReal);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova05|Line00014", true), c_soundIndexAny))), c_timeReal);
    Wait(8.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00DropZone_Init () {
    gt_BriefingScene00DropZone = TriggerCreate("gt_BriefingScene00DropZone_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Breifing Scene 00 - Drop Zone - Panning
//--------------------------------------------------------------------------------------------------
bool gt_BreifingScene00DropZonePanning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_voiceOverDurationTotal;
    fixed lv_voiceOverFraction;

    // Automatic Variable Declarations
    unitgroup auto266717DB_g;
    int auto266717DB_u;
    unit auto266717DB_var;
    unitgroup autoA5B2E2F9_g;
    int autoA5B2E2F9_u;
    unit autoA5B2E2F9_var;
    unitgroup auto0E84B6E3_g;
    int auto0E84B6E3_u;
    unit auto0E84B6E3_var;
    unitgroup auto5E2960D3_g;
    int auto5E2960D3_u;
    unit auto5E2960D3_var;
    unitgroup auto55C3D76F_g;
    int auto55C3D76F_u;
    unit auto55C3D76F_var;
    unitgroup auto5EC5D734_g;
    int auto5EC5D734_u;
    unit auto5EC5D734_var;
    unitgroup autoD24ADE42_g;
    int autoD24ADE42_u;
    unit autoD24ADE42_var;
    unitgroup auto746A2F52_g;
    int auto746A2F52_u;
    unit auto746A2F52_var;
    unitgroup autoAD6BE263_g;
    int autoAD6BE263_u;
    unit autoAD6BE263_var;
    unitgroup auto55B0DB9D_g;
    int auto55B0DB9D_u;
    unit auto55B0DB9D_var;
    unitgroup auto9D068FB1_g;
    int auto9D068FB1_u;
    unit auto9D068FB1_var;
    unitgroup autoCE37B54F_g;
    int autoCE37B54F_u;
    unit autoCE37B54F_var;
    unitgroup autoD16F38B7_g;
    int autoD16F38B7_u;
    unit autoD16F38B7_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto266717DB_g = UnitGroup("Probe", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto266717DB_u = UnitGroupCount(auto266717DB_g, c_unitCountAll);
    for (;; auto266717DB_u -= 1) {
        auto266717DB_var = UnitGroupUnitFromEnd(auto266717DB_g, auto266717DB_u);
        if (auto266717DB_var == null) { break; }
        libNtve_gf_PauseUnit(auto266717DB_var, false);
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_02_PROTOSS_BULLIES);
    autoA5B2E2F9_g = UnitGroup("Scout", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA5B2E2F9_u = UnitGroupCount(autoA5B2E2F9_g, c_unitCountAll);
    for (;; autoA5B2E2F9_u -= 1) {
        autoA5B2E2F9_var = UnitGroupUnitFromEnd(autoA5B2E2F9_g, autoA5B2E2F9_u);
        if (autoA5B2E2F9_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA5B2E2F9_var, false);
    }
    auto0E84B6E3_g = UnitGroup("VoidRay", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0E84B6E3_u = UnitGroupCount(auto0E84B6E3_g, c_unitCountAll);
    for (;; auto0E84B6E3_u -= 1) {
        auto0E84B6E3_var = UnitGroupUnitFromEnd(auto0E84B6E3_g, auto0E84B6E3_u);
        if (auto0E84B6E3_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0E84B6E3_var, false);
    }
    auto5E2960D3_g = UnitGroup("WarpPrism", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E2960D3_u = UnitGroupCount(auto5E2960D3_g, c_unitCountAll);
    for (;; auto5E2960D3_u -= 1) {
        auto5E2960D3_var = UnitGroupUnitFromEnd(auto5E2960D3_g, auto5E2960D3_u);
        if (auto5E2960D3_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5E2960D3_var, false);
    }
    auto55C3D76F_g = UnitGroup("Stalker", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto55C3D76F_u = UnitGroupCount(auto55C3D76F_g, c_unitCountAll);
    for (;; auto55C3D76F_u -= 1) {
        auto55C3D76F_var = UnitGroupUnitFromEnd(auto55C3D76F_g, auto55C3D76F_u);
        if (auto55C3D76F_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto55C3D76F_var, false);
    }
    auto5EC5D734_g = UnitGroup("Immortal", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5EC5D734_u = UnitGroupCount(auto5EC5D734_g, c_unitCountAll);
    for (;; auto5EC5D734_u -= 1) {
        auto5EC5D734_var = UnitGroupUnitFromEnd(auto5EC5D734_g, auto5EC5D734_u);
        if (auto5EC5D734_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5EC5D734_var, false);
    }
    autoD24ADE42_g = UnitGroup("Zealot", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD24ADE42_u = UnitGroupCount(autoD24ADE42_g, c_unitCountAll);
    for (;; autoD24ADE42_u -= 1) {
        autoD24ADE42_var = UnitGroupUnitFromEnd(autoD24ADE42_g, autoD24ADE42_u);
        if (autoD24ADE42_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD24ADE42_var, false);
    }
    auto746A2F52_g = UnitGroup("Colossus", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto746A2F52_u = UnitGroupCount(auto746A2F52_g, c_unitCountAll);
    for (;; auto746A2F52_u -= 1) {
        auto746A2F52_var = UnitGroupUnitFromEnd(auto746A2F52_g, auto746A2F52_u);
        if (auto746A2F52_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto746A2F52_var, false);
    }
    autoAD6BE263_g = UnitGroup("Carrier", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAD6BE263_u = UnitGroupCount(autoAD6BE263_g, c_unitCountAll);
    for (;; autoAD6BE263_u -= 1) {
        autoAD6BE263_var = UnitGroupUnitFromEnd(autoAD6BE263_g, autoAD6BE263_u);
        if (autoAD6BE263_var == null) { break; }
        libNtve_gf_PauseUnit(autoAD6BE263_var, false);
        UnitSetPosition(autoAD6BE263_var, PointWithOffsetPolar(UnitGetPosition(autoAD6BE263_var), 4.0, 250.0), false);
        UnitIssueOrder(autoAD6BE263_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoAD6BE263_var), 8.0, UnitGetFacing(autoAD6BE263_var))), c_orderQueueReplace);
    }
    lv_voiceOverDurationTotal = (SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova05|Line00016", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova05|Line00014", true), c_soundIndexAny)));
    lv_voiceOverFraction = (lv_voiceOverDurationTotal / 3.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2082), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2083), (lv_voiceOverDurationTotal * 2.0), -1, 10, true);
    Wait(lv_voiceOverFraction, c_timeGame);
    auto55B0DB9D_g = UnitGroup("Stalker", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto55B0DB9D_u = UnitGroupCount(auto55B0DB9D_g, c_unitCountAll);
    for (;; auto55B0DB9D_u -= 1) {
        auto55B0DB9D_var = UnitGroupUnitFromEnd(auto55B0DB9D_g, auto55B0DB9D_u);
        if (auto55B0DB9D_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto55B0DB9D_var, false);
        UnitIssueOrder(UnitFromId(1437), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), UnitGetPosition(auto55B0DB9D_var)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    auto9D068FB1_g = UnitGroup("Colossus", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9D068FB1_u = UnitGroupCount(auto9D068FB1_g, c_unitCountAll);
    for (;; auto9D068FB1_u -= 1) {
        auto9D068FB1_var = UnitGroupUnitFromEnd(auto9D068FB1_g, auto9D068FB1_u);
        if (auto9D068FB1_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9D068FB1_var, false);
        UnitIssueOrder(UnitFromId(1437), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), UnitGetPosition(auto9D068FB1_var)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    autoCE37B54F_g = UnitGroup("Immortal", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCE37B54F_u = UnitGroupCount(autoCE37B54F_g, c_unitCountAll);
    for (;; autoCE37B54F_u -= 1) {
        autoCE37B54F_var = UnitGroupUnitFromEnd(autoCE37B54F_g, autoCE37B54F_u);
        if (autoCE37B54F_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCE37B54F_var, false);
        UnitIssueOrder(UnitFromId(1437), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), UnitGetPosition(autoCE37B54F_var)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    Wait(1.5, c_timeGame);
    autoD16F38B7_g = UnitGroup("Zealot", gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD16F38B7_u = UnitGroupCount(autoD16F38B7_g, c_unitCountAll);
    for (;; autoD16F38B7_u -= 1) {
        autoD16F38B7_var = UnitGroupUnitFromEnd(autoD16F38B7_g, autoD16F38B7_u);
        if (autoD16F38B7_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD16F38B7_var, false);
        UnitIssueOrder(UnitFromId(1437), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(autoD16F38B7_var)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreifingScene00DropZonePanning_Init () {
    gt_BreifingScene00DropZonePanning = TriggerCreate("gt_BreifingScene00DropZonePanning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02 - Extraction Devices
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02ExtractionDevices_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_voiceOverDurationTotal;

    // Automatic Variable Declarations
    unitgroup auto32663F7A_g;
    int auto32663F7A_u;
    unit auto32663F7A_var;
    unitgroup auto186334E2_g;
    int auto186334E2_u;
    unit auto186334E2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(UnitFromId(528), false);
    auto32663F7A_g = UnitGroup(null, c_playerAny, RegionCircle(PointFromId(2090), 45.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto32663F7A_u = UnitGroupCount(auto32663F7A_g, c_unitCountAll);
    for (;; auto32663F7A_u -= 1) {
        auto32663F7A_var = UnitGroupUnitFromEnd(auto32663F7A_g, auto32663F7A_u);
        if (auto32663F7A_var == null) { break; }
        if ((UnitGetOwner(auto32663F7A_var) != gv_pLAYER_06_TERRAZINE)) {
            UnitRemove(auto32663F7A_var);
        }

    }
    Wait(0.0625, c_timeGame);
    auto186334E2_g = UnitGroup(null, c_playerAny, RegionCircle(PointFromId(2090), 45.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto186334E2_u = UnitGroupCount(auto186334E2_g, c_unitCountAll);
    for (;; auto186334E2_u -= 1) {
        auto186334E2_var = UnitGroupUnitFromEnd(auto186334E2_g, auto186334E2_u);
        if (auto186334E2_var == null) { break; }
        if ((UnitGetOwner(auto186334E2_var) != gv_pLAYER_06_TERRAZINE)) {
            UnitRemove(auto186334E2_var);
        }

    }
    CreepModify(PointFromId(2090), 45.0, false, true);
    CreepModify(PointFromId(2090), 45.0, false, false);
    lv_voiceOverDurationTotal = (SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova05|Line00019", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova05|Line00015", true), c_soundIndexAny)));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_BreifingScene02ExtractionDevicesPanning, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2084), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2085), 8.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_Nova05_01");
    Wait(16.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02ExtractionDevices_Init () {
    gt_BriefingScene02ExtractionDevices = TriggerCreate("gt_BriefingScene02ExtractionDevices_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Breifing Scene 02 - Extraction Devices - Panning
//--------------------------------------------------------------------------------------------------
bool gt_BreifingScene02ExtractionDevicesPanning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_voiceOverDurationTotal;
    fixed lv_voiceOverFraction;
    unitgroup lv_liberatorGroup;
    unit lv_raven;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_liberatorGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Liberator", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2088));
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetHeight(UnitLastCreated(), 13.0, 0.0);
    UnitSetHeight(UnitLastCreated(), UnitGetPropertyFixed(UnitLastCreated(), c_unitPropHeight, c_unitPropNormal), 3.0);
    UnitGroupAdd(lv_liberatorGroup, UnitLastCreated());
    Wait(0.3, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Liberator", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2089));
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetHeight(UnitLastCreated(), 13.0, 0.0);
    UnitSetHeight(UnitLastCreated(), UnitGetPropertyFixed(UnitLastCreated(), c_unitPropHeight, c_unitPropNormal), 3.0);
    UnitGroupAdd(lv_liberatorGroup, UnitLastCreated());
    Wait(0.6, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Liberator", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2090));
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetHeight(UnitLastCreated(), 13.0, 0.0);
    UnitSetHeight(UnitLastCreated(), UnitGetPropertyFixed(UnitLastCreated(), c_unitPropHeight, c_unitPropNormal), 3.0);
    UnitGroupAdd(lv_liberatorGroup, UnitLastCreated());
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Raven", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2091));
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    lv_raven = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 13.0, 0.0);
    UnitSetHeight(UnitLastCreated(), UnitGetPropertyFixed(UnitLastCreated(), c_unitPropHeight, c_unitPropNormal), 3.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(lv_liberatorGroup, 1), OrderTargetingPoint(AbilityCommand("LiberatorAGTarget", 0), PointFromId(2093)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(lv_liberatorGroup, 2), OrderTargetingPoint(AbilityCommand("LiberatorAGTarget", 0), PointFromId(2096)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(lv_liberatorGroup, 3), OrderTargetingPoint(AbilityCommand("LiberatorAGTarget", 0), PointFromId(2095)), c_orderQueueReplace);
    TriggerExecute(gt_BreifingScene02ExtractionDevicesAssault, true, false);
    Wait(0.75, c_timeGame);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), PointFromId(2092)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(lv_raven, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), PointFromId(2097)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreifingScene02ExtractionDevicesPanning_Init () {
    gt_BreifingScene02ExtractionDevicesPanning = TriggerCreate("gt_BreifingScene02ExtractionDevicesPanning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Breifing Scene 02 - Extraction Devices - Assault
//--------------------------------------------------------------------------------------------------
bool gt_BreifingScene02ExtractionDevicesAssault_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_voiceOverDurationTotal;
    fixed lv_voiceOverFraction;
    unitgroup lv_liberatorGroup;
    unit lv_raven;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_liberatorGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", c_unitCreateIgnorePlacement, gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(2098));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2096)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", c_unitCreateIgnorePlacement, gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(2103));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2093)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", c_unitCreateIgnorePlacement, gv_pLAYER_02_PROTOSS_BULLIES, PointFromId(2101));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2095)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreifingScene02ExtractionDevicesAssault_Init () {
    gt_BreifingScene02ExtractionDevicesAssault = TriggerCreate("gt_BreifingScene02ExtractionDevicesAssault_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03 - Signs of Life
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03SignsofLife_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_voiceOverDurationTotal;

    // Automatic Variable Declarations
    unitgroup auto608C1B45_g;
    int auto608C1B45_u;
    unit auto608C1B45_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(UnitFromId(528), false);
    auto608C1B45_g = UnitGroup(null, c_playerAny, RegionCircle(PointFromId(2107), 45.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto608C1B45_u = UnitGroupCount(auto608C1B45_g, c_unitCountAll);
    for (;; auto608C1B45_u -= 1) {
        auto608C1B45_var = UnitGroupUnitFromEnd(auto608C1B45_g, auto608C1B45_u);
        if (auto608C1B45_var == null) { break; }
        if ((UnitGetType(auto608C1B45_var) != "JarbanInfestibleColonistHut")) {
            UnitRemove(auto608C1B45_var);
        }
        else {
            UnitBehaviorRemove(auto608C1B45_var, "ColonyInfestation", 1);
        }
    }
    CreepModify(PointFromId(2107), 45.0, false, true);
    CreepModify(PointFromId(2107), 45.0, false, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2086), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2087), 8.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_Nova05_02");
    Wait(10.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03SignsofLife_Init () {
    gt_BriefingScene03SignsofLife = TriggerCreate("gt_BriefingScene03SignsofLife_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_mineralGroup;
    unit lv_targertedMinerals;

    // Automatic Variable Declarations
    unitgroup auto11B21E61_g;
    int auto11B21E61_u;
    unit auto11B21E61_var;
    unitgroup auto6CFC510E_g;
    int auto6CFC510E_u;
    unit auto6CFC510E_var;
    unitgroup auto5ADB5797_g;
    int auto5ADB5797_u;
    unit auto5ADB5797_var;
    unitgroup auto756DD7AE_g;
    int auto756DD7AE_u;
    unit auto756DD7AE_var;
    unitgroup auto6FDF1C1A_g;
    int auto6FDF1C1A_u;
    unit auto6FDF1C1A_var;
    unitgroup auto4523F031_g;
    int auto4523F031_u;
    unit auto4523F031_var;
    unitgroup autoDE9165BB_g;
    int autoDE9165BB_u;
    unit autoDE9165BB_var;
    string autoDB3473E2_val;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto11B21E61_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto11B21E61_u = UnitGroupCount(auto11B21E61_g, c_unitCountAll);
    for (;; auto11B21E61_u -= 1) {
        auto11B21E61_var = UnitGroupUnitFromEnd(auto11B21E61_g, auto11B21E61_u);
        if (auto11B21E61_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto11B21E61_var) == false) && (libNtve_gf_UnitInRegion(auto11B21E61_var, RegionFromId(82)) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto11B21E61_var);
            libNtve_gf_PauseUnit(auto11B21E61_var, true);
        }
        else {
            if (((auto11B21E61_var == UnitFromId(1633)) || (auto11B21E61_var == UnitFromId(252)) || (auto11B21E61_var == UnitFromId(253)))) {
                UnitGroupAdd(gv_introPlayerUnits, auto11B21E61_var);
            }

        }
    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto6CFC510E_g = gv_cinematicHiddenUnits;
    auto6CFC510E_u = UnitGroupCount(auto6CFC510E_g, c_unitCountAll);
    for (;; auto6CFC510E_u -= 1) {
        auto6CFC510E_var = UnitGroupUnitFromEnd(auto6CFC510E_g, auto6CFC510E_u);
        if (auto6CFC510E_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto6CFC510E_var, RegionFromId(82)) == false)) {
            libNtve_gf_ShowHideUnit(auto6CFC510E_var, false);
        }

    }
    libNtve_gf_ShowHideUnit(UnitFromId(288), false);
    libNtve_gf_ShowHideUnit(UnitFromId(289), false);
    libNtve_gf_ShowHideUnit(UnitFromId(151), false);
    auto5ADB5797_g = UnitGroup("MineralField", 0, null, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5ADB5797_u = UnitGroupCount(auto5ADB5797_g, c_unitCountAll);
    for (;; auto5ADB5797_u -= 1) {
        auto5ADB5797_var = UnitGroupUnitFromEnd(auto5ADB5797_g, auto5ADB5797_u);
        if (auto5ADB5797_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5ADB5797_var, true);
    }
    auto756DD7AE_g = UnitGroup("VespeneGeyser", 0, null, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto756DD7AE_u = UnitGroupCount(auto756DD7AE_g, c_unitCountAll);
    for (;; auto756DD7AE_u -= 1) {
        auto756DD7AE_var = UnitGroupUnitFromEnd(auto756DD7AE_g, auto756DD7AE_u);
        if (auto756DD7AE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto756DD7AE_var, true);
    }
    auto6FDF1C1A_g = UnitGroup(null, gv_pLAYER_02_PROTOSS_BULLIES, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto6FDF1C1A_u = UnitGroupCount(auto6FDF1C1A_g, c_unitCountAll);
    for (;; auto6FDF1C1A_u -= 1) {
        auto6FDF1C1A_var = UnitGroupUnitFromEnd(auto6FDF1C1A_g, auto6FDF1C1A_u);
        if (auto6FDF1C1A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6FDF1C1A_var, true);
        libNtve_gf_PauseUnit(auto6FDF1C1A_var, false);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaShip", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2071));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introCineShip = UnitLastCreated();
    UnitSetHeight(gv_introCineShip, 14.0, 0.0);
    libNtve_gf_ShowHideUnit(gv_introCineShip, false);
    libNtve_gf_ShowHideUnit(gv_nova, false);
    libNtve_gf_PauseUnit(gv_nova, true);
    UnitSetPosition(gv_nova, PointFromId(2080), false);
    gv_introMinerals[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_introMinerals[1] = libNtve_gf_UnitGetPropertyResources(UnitFromId(8), c_unitPropCurrent);
    gv_introMinerals[2] = libNtve_gf_UnitGetPropertyResources(UnitFromId(7), c_unitPropCurrent);
    gv_introMinerals[3] = libNtve_gf_UnitGetPropertyResources(UnitFromId(6), c_unitPropCurrent);
    gv_introMinerals[4] = libNtve_gf_UnitGetPropertyResources(UnitFromId(5), c_unitPropCurrent);
    gv_introMinerals[5] = libNtve_gf_UnitGetPropertyResources(UnitFromId(4), c_unitPropCurrent);
    gv_introMinerals[6] = libNtve_gf_UnitGetPropertyResources(UnitFromId(3), c_unitPropCurrent);
    gv_introMinerals[7] = libNtve_gf_UnitGetPropertyResources(UnitFromId(2), c_unitPropCurrent);
    gv_introMinerals[8] = libNtve_gf_UnitGetPropertyResources(UnitFromId(1), c_unitPropCurrent);
    gv_introGas[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    gv_introGas[1] = libNtve_gf_UnitGetPropertyResources(UnitFromId(9), c_unitPropCurrent);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(1), gv_pLAYER_02_PROTOSS_BULLIES);
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("MineralField", c_playerAny, RegionFromId(82), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto4523F031_g = UnitGroup("SCV", gv_pLAYER_01_USER, RegionFromId(82), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4523F031_u = UnitGroupCount(auto4523F031_g, c_unitCountAll);
    for (;; auto4523F031_u -= 1) {
        auto4523F031_var = UnitGroupUnitFromEnd(auto4523F031_g, auto4523F031_u);
        if (auto4523F031_var == null) { break; }
        lv_targertedMinerals = UnitGroupClosestToPoint(lv_mineralGroup, UnitGetPosition(auto4523F031_var));
        UnitIssueOrder(auto4523F031_var, OrderTargetingUnit(null, lv_targertedMinerals), c_orderQueueReplace);
        UnitGroupRemove(lv_mineralGroup, lv_targertedMinerals);
    }
    autoDE9165BB_g = gv_introPlayerUnits;
    autoDE9165BB_u = UnitGroupCount(autoDE9165BB_g, c_unitCountAll);
    for (;; autoDE9165BB_u -= 1) {
        autoDE9165BB_var = UnitGroupUnitFromEnd(autoDE9165BB_g, autoDE9165BB_u);
        if (autoDE9165BB_var == null) { break; }
        autoDB3473E2_val = UnitGetType(autoDE9165BB_var);
        if (autoDB3473E2_val == "BarracksFlying") {
            UnitSetPosition(autoDE9165BB_var, PointWithOffsetPolar(UnitGetPosition(autoDE9165BB_var), 3.0, 225.0), false);
            UnitIssueOrder(autoDE9165BB_var, OrderTargetingPoint(AbilityCommand("BarracksLand", 0), PointFromId(243)), c_orderQueueReplace);
        }
        else if (autoDB3473E2_val == "StarportFlying") {
            UnitSetPosition(autoDE9165BB_var, PointWithOffsetPolar(UnitGetPosition(autoDE9165BB_var), 3.8, 225.0), false);
            UnitIssueOrder(autoDE9165BB_var, OrderTargetingPoint(AbilityCommand("StarportLand", 0), PointFromId(242)), c_orderQueueReplace);
        }
        else if (autoDB3473E2_val == "FactoryFlying") {
            UnitSetPosition(autoDE9165BB_var, PointWithOffsetPolar(UnitGetPosition(autoDE9165BB_var), 4.5, 225.0), false);
            UnitIssueOrder(autoDE9165BB_var, OrderTargetingPoint(AbilityCommand("FactoryLand", 0), PointFromId(1639)), c_orderQueueReplace);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(214), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2070), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova05|Line00195", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova05|Line00167", true), c_soundIndexAny))), -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack5, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack2, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00195", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_FlyInGriffin, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00167", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova05|Line00196", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.5, c_timeGame);
    TriggerExecute(gt_FlyInForces, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova05|Line00180", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2077), 4.5, -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto32F11588_g;
    int auto32F11588_u;
    unit auto32F11588_var;
    unitgroup auto82529B02_g;
    int auto82529B02_u;
    unit auto82529B02_var;
    unitgroup autoE7CE1573_g;
    int autoE7CE1573_u;
    unit autoE7CE1573_var;
    unitgroup autoDE1C20C8_g;
    int autoDE1C20C8_u;
    unit autoDE1C20C8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    auto32F11588_g = gv_cinematicTempUnits;
    auto32F11588_u = UnitGroupCount(auto32F11588_g, c_unitCountAll);
    for (;; auto32F11588_u -= 1) {
        auto32F11588_var = UnitGroupUnitFromEnd(auto32F11588_g, auto32F11588_u);
        if (auto32F11588_var == null) { break; }
        UnitRemove(auto32F11588_var);
    }
    auto82529B02_g = gv_cinematicHiddenUnits;
    auto82529B02_u = UnitGroupCount(auto82529B02_g, c_unitCountAll);
    for (;; auto82529B02_u -= 1) {
        auto82529B02_var = UnitGroupUnitFromEnd(auto82529B02_g, auto82529B02_u);
        if (auto82529B02_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto82529B02_var, true);
    }
    autoE7CE1573_g = gv_cinematicPausedUnits;
    autoE7CE1573_u = UnitGroupCount(autoE7CE1573_g, c_unitCountAll);
    for (;; autoE7CE1573_u -= 1) {
        autoE7CE1573_var = UnitGroupUnitFromEnd(autoE7CE1573_g, autoE7CE1573_u);
        if (autoE7CE1573_var == null) { break; }
        libNtve_gf_PauseUnit(autoE7CE1573_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(3), true, false);
    RegionPlayableMapSet(RegionFromId(76));
    if ((gv_cinematicCompleted == false)) {
        autoDE1C20C8_g = gv_introPlayerUnits;
        autoDE1C20C8_u = UnitGroupCount(autoDE1C20C8_g, c_unitCountAll);
        for (;; autoDE1C20C8_u -= 1) {
            autoDE1C20C8_var = UnitGroupUnitFromEnd(autoDE1C20C8_g, autoDE1C20C8_u);
            if (autoDE1C20C8_var == null) { break; }
            UnitRemove(autoDE1C20C8_var);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1639));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(243));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Starport", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(242));
        libNtve_gf_ShowHideUnit(UnitFromId(288), true);
        libNtve_gf_ShowHideUnit(UnitFromId(289), true);
        libNtve_gf_ShowHideUnit(UnitFromId(151), true);
        UnitSetPropertyFixed(UnitFromId(151), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_ShowHideUnit(gv_nova, true);
        libNtve_gf_PauseUnit(gv_nova, false);
        UnitSetPosition(gv_nova, PointFromId(2073), false);
        libNtve_gf_MakeUnitFacePoint(gv_nova, PointFromId(15), 0.0);
    }
    else {
        UnitRemove(UnitFromId(288));
        UnitRemove(UnitFromId(289));
        UnitRemove(UnitFromId(151));
    }
    TriggerExecute(gt_PerformanceHandler, true, false);
    Wait(0.125, c_timeGame);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals[0]);
    UnitSetPropertyFixed(UnitFromId(8), c_unitPropResources, gv_introMinerals[1]);
    UnitSetPropertyFixed(UnitFromId(7), c_unitPropResources, gv_introMinerals[2]);
    UnitSetPropertyFixed(UnitFromId(6), c_unitPropResources, gv_introMinerals[3]);
    UnitSetPropertyFixed(UnitFromId(5), c_unitPropResources, gv_introMinerals[4]);
    UnitSetPropertyFixed(UnitFromId(4), c_unitPropResources, gv_introMinerals[5]);
    UnitSetPropertyFixed(UnitFromId(3), c_unitPropResources, gv_introMinerals[6]);
    UnitSetPropertyFixed(UnitFromId(2), c_unitPropResources, gv_introMinerals[7]);
    UnitSetPropertyFixed(UnitFromId(1), c_unitPropResources, gv_introMinerals[7]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_introGas[0]);
    UnitSetPropertyFixed(UnitFromId(9), c_unitPropResources, gv_introGas[1]);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    TriggerEnable(gt_DefeatBaseDead, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 50.0, false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fly In Forces
//--------------------------------------------------------------------------------------------------
bool gt_FlyInForces_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_griffin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Raven", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(PointFromId(11), 25.0, 225.0));
    UnitGroupAdd(gv_introPlayerUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(11)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "Liberator", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(PointFromId(290), 25.0, 225.0));
    UnitGroupAdd(gv_introPlayerUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(290)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Liberator", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(PointFromId(291), 25.0, 225.0));
    UnitGroupAdd(gv_introPlayerUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(291)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlyInForces_Init () {
    gt_FlyInForces = TriggerCreate("gt_FlyInForces_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fly In Griffin
//--------------------------------------------------------------------------------------------------
bool gt_FlyInGriffin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introCineShip), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_NovaShipStandWork", -1), PlayerGroupAll(), 30.0, 0.0);
    UnitBehaviorAdd(gv_introCineShip, "PermanentlyCloaked", gv_introCineShip, 1);
    libNtve_gf_ShowHideUnit(gv_introCineShip, true);
    UnitBehaviorAdd(gv_introCineShip, "SuppressCloak", gv_introCineShip, 1);
    CameraShake(1, "Heavy", "Shake", 0.0, 2.0, 3.0);
    Wait(3.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2076), 6.0, -1, 10.0, true);
    Wait(5.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitBehaviorAdd(gv_nova, "SuppressCloak", gv_nova, 1);
    libNtve_gf_PauseUnit(gv_nova, false);
    libNtve_gf_ShowHideUnit(gv_nova, true);
    Wait(0.5, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2075), 4.5, -1, 10.0, true);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2073)), c_orderQueueReplace);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2074)), c_orderQueueAddToEnd);
    Wait(1.5, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitBehaviorRemove(gv_nova, "SuppressCloak", 1);
    Wait(1.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitBehaviorRemove(gv_introCineShip, "SuppressCloak", 1);
    Wait(3.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_ShowHideUnit(gv_introCineShip, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlyInGriffin_Init () {
    gt_FlyInGriffin = TriggerCreate("gt_FlyInGriffin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto726B61FC_g;
    int auto726B61FC_u;
    unit auto726B61FC_var;
    unitgroup auto5B06091C_g;
    int auto5B06091C_u;
    unit auto5B06091C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto726B61FC_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto726B61FC_u = UnitGroupCount(auto726B61FC_g, c_unitCountAll);
    for (;; auto726B61FC_u -= 1) {
        auto726B61FC_var = UnitGroupUnitFromEnd(auto726B61FC_g, auto726B61FC_u);
        if (auto726B61FC_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto726B61FC_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto726B61FC_var);
            libNtve_gf_PauseUnit(auto726B61FC_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto5B06091C_g = gv_cinematicHiddenUnits;
    auto5B06091C_u = UnitGroupCount(auto5B06091C_g, c_unitCountAll);
    for (;; auto5B06091C_u -= 1) {
        auto5B06091C_var = UnitGroupUnitFromEnd(auto5B06091C_g, auto5B06091C_u);
        if (auto5B06091C_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto5B06091C_var, gv_victoryRegion[gv_victoryIndex]) != true) && (UnitGetOwner(auto5B06091C_var) == gv_pLAYER_01_USER)) {
            UnitGroupRemove(gv_cinematicHiddenUnits, auto5B06091C_var);
            continue;
        }

        if ((UnitGetType(auto5B06091C_var) != "NovaTerrazineTank")) {
            libNtve_gf_ShowHideUnit(auto5B06091C_var, false);
        }

    }
    gv_victoryCamera[1][1] = CameraInfoFromId(3001);
    gv_victoryCamera[1][2] = CameraInfoFromId(3081);
    gv_victoryCamera[1][3] = CameraInfoFromId(2829);
    gv_victoryPoints[1][1] = PointFromId(3202);
    gv_victoryPoints[1][2] = PointFromId(2613);
    gv_victoryCamera[2][1] = CameraInfoFromId(2615);
    gv_victoryCamera[2][2] = CameraInfoFromId(2614);
    gv_victoryCamera[2][3] = CameraInfoFromId(2830);
    gv_victoryPoints[2][1] = PointFromId(2617);
    gv_victoryPoints[2][2] = PointFromId(2618);
    gv_victoryCamera[3][1] = CameraInfoFromId(3269);
    gv_victoryCamera[3][2] = CameraInfoFromId(3270);
    gv_victoryCamera[3][3] = CameraInfoFromId(2828);
    gv_victoryPoints[3][1] = PointFromId(2622);
    gv_victoryPoints[3][2] = PointFromId(3252);
    gv_victoryCamera[4][1] = CameraInfoFromId(6000);
    gv_victoryCamera[4][2] = CameraInfoFromId(6001);
    gv_victoryCamera[4][3] = CameraInfoFromId(2831);
    gv_victoryPoints[4][1] = PointFromId(3253);
    gv_victoryPoints[4][2] = PointFromId(3255);
    gv_victoryCamera[5][1] = CameraInfoFromId(6004);
    gv_victoryCamera[5][2] = CameraInfoFromId(6006);
    gv_victoryCamera[5][3] = CameraInfoFromId(2832);
    gv_victoryPoints[5][1] = PointFromId(3257);
    gv_victoryPoints[5][2] = PointFromId(3258);
    gv_victoryCamera[6][1] = CameraInfoFromId(6009);
    gv_victoryCamera[6][2] = CameraInfoFromId(6010);
    gv_victoryCamera[6][3] = CameraInfoFromId(2833);
    gv_victoryPoints[6][1] = PointFromId(3259);
    gv_victoryPoints[6][2] = PointFromId(3262);
    gv_victoryCamera[7][1] = CameraInfoFromId(6012);
    gv_victoryCamera[7][2] = CameraInfoFromId(6014);
    gv_victoryCamera[7][3] = CameraInfoFromId(2834);
    gv_victoryPoints[7][1] = PointFromId(3260);
    gv_victoryPoints[7][2] = PointFromId(3263);
    gv_victoryCamera[8][1] = CameraInfoFromId(6017);
    gv_victoryCamera[8][2] = CameraInfoFromId(6019);
    gv_victoryCamera[8][3] = CameraInfoFromId(2835);
    gv_victoryPoints[8][1] = PointFromId(3265);
    gv_victoryPoints[8][2] = PointFromId(3266);
    gv_victoryCamera[9][1] = CameraInfoFromId(6020);
    gv_victoryCamera[9][2] = CameraInfoFromId(6023);
    gv_victoryCamera[9][3] = CameraInfoFromId(2836);
    gv_victoryPoints[9][1] = PointFromId(3267);
    gv_victoryPoints[9][2] = PointFromId(3268);
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, gv_victoryPoints[gv_victoryIndex][1]);
    gv_cinematicNova = UnitLastCreated();
    UnitBehaviorAdd(gv_cinematicNova, "SuppressCloak", gv_cinematicNova, 1);
    UnitSetState(gv_cinematicNova, c_unitStateFidget, false);
    libNtve_gf_MakeUnitInvulnerable(gv_cinematicNova, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "AlarakChampion", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, gv_victoryPoints[gv_victoryIndex][2]);
    gv_victoryAlarak = UnitLastCreated();
    UnitSetState(gv_victoryAlarak, c_unitStateFidget, false);
    libNtve_gf_MakeUnitInvulnerable(gv_victoryAlarak, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_victoryAlarak, "AlarakWarpIn", gv_victoryAlarak, 1);
    SoundPlayAtPointForPlayer(SoundLink("Event_Taldarim01_End_Malash_WarpIn_6Ch", -1), c_maxPlayers, PlayerGroupAll(), gv_victoryPoints[gv_victoryIndex][2], 0.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("Hybrid_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), gv_victoryPoints[gv_victoryIndex][2], 0.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("Event_Taldarim01_End_Cine_SlapFx_6Ch", -1), c_maxPlayers, PlayerGroupAll(), gv_victoryPoints[gv_victoryIndex][2], 0.0, 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, gv_victoryCamera[gv_victoryIndex][1], 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack6, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 8.0, 0.0, 120.0);
    libNtve_gf_SendActorMessageToUnit(UnitGroupUnit(UnitGroup("NovaTerrazineTank", c_playerAny, gv_terrazineTankLocations[gv_victoryIndex].lv_protossClaimerWaveTargetRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), "Signal WorkEnd");
    TriggerExecute(gt_VictoryGriffinAnimationandSFX, true, false);
    Wait(2.0, c_timeGame);
    libNCMI_gf_SendTransmissionCampaign(gv_victoryAlarak, "Mission_Nova05|Line00062", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, gv_victoryCamera[gv_victoryIndex][2], 4.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(gv_victoryAlarak, "Mission_Nova05|Line00064", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Taldarim01_GeyserErupt_St", -1), PlayerGroupAll(), 120.0, 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova05|Line00065", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, gv_victoryCamera[gv_victoryIndex][3], 12.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(gv_victoryAlarak, "Mission_Nova05|Line00066", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Griffin Animation and SFX
//--------------------------------------------------------------------------------------------------
bool gt_VictoryGriffinAnimationandSFX_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(14.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaTerrazineCanister", c_unitCreateIgnorePlacement, gv_pLAYER_06_TERRAZINE, gv_terrazineTankLocations[gv_victoryIndex].lv_canisterSpawn);
    UnitSetHeight(UnitLastCreated(), 0.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 6.0, 3.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 1.000000");
    gv_victoryCanister = UnitLastCreated();
    Wait(2.0, c_timeGame);
    ActorSend(ActorFromDoodad(gv_terrazineTankLocations[gv_victoryIndex].lv_griffinActor), "SetVisibility 1");
    libNtve_gf_PlayAnimation(ActorFromDoodad(gv_terrazineTankLocations[gv_victoryIndex].lv_griffinActor), c_animNameDefault, "Stand Work 01", c_animFlagNonLooping, c_animTimeDefault);
    Wait(2.5, c_timeGame);
    UnitKill(gv_victoryCanister);
    Wait(1.5, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Griffin_Pickup_Flyby");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryGriffinAnimationandSFX_Init () {
    gt_VictoryGriffinAnimationandSFX = TriggerCreate("gt_VictoryGriffinAnimationandSFX_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugRunSmallClaimWave_Init();
    gt_DebugRunMediumClaimWave_Init();
    gt_DebugRunLargeClaimWave_Init();
    gt_DebugRunAllClaimWaves_Init();
    gt_DebugToggleAITimePauseUnpause_Init();
    gt_DebugTestObjectiveCompletion_Init();
    gt_PerformanceHandler_Init();
    gt_PauseUnitsAgain_Init();
    gt_OrbitalScanOrNukeUsed_Init();
    gt_ShowMapCheatUsed_Init();
    gt_StartGameQ_Init();
    gt_CreateTerrazineTankPings_Init();
    gt_SomethingTerribleQ_Init();
    gt_InfestedComeDownRamp_Init();
    gt_FoundTheMinersViaAttackQ_Init();
    gt_FoundTheMinersViaUnburrowQ_Init();
    gt_NeverTakeMeAliveQ_Init();
    gt_AberrationSurpriseQ_Init();
    gt_NovaSeesInfestedSiegeTankQ_Init();
    gt_SiegeTankAlleyQ_Init();
    gt_SiegeTanksSiegeUp_Init();
    gt_BansheeRunQ_Init();
    gt_PlayerNearsFriendlyUmojansQ_Init();
    gt_FriendlyUmojansQ_Init();
    gt_ReachUmojanForcesQ_Init();
    gt_StayOutOfTaldarimBaseQ_Init();
    gt_PlayerAttacksTaldarimBaseQ_Init();
    gt_StayOutOfZergBaseQ_Init();
    gt_PlayerAttacksZergBaseQ_Init();
    gt_InitializeTerrazineTankLocations_Init();
    gt_PlayerEntersTerrazineBeacon_Init();
    gt_PlayerInitiatesGatheringTransmissionQ_Init();
    gt_TerrazineTankAttackedWarningQ_Init();
    gt_TerrazineTankLowLifeWarningQ_Init();
    gt_TerrazineTankIsDestroyed_Init();
    gt_TerrazineTanksDestroyedWarningQ_Init();
    gt_TerrazineTanksObjectiveReminderQ_Init();
    gt_TerrazineGatheringCompleteQ_Init();
    gt_BonusObjectiveRevealMinesQ_Init();
    gt_BonusObjectiveRevealScienceFacilityQ_Init();
    gt_BonusObjectiveProximityRevealScienceFacility_Init();
    gt_BonusObjectiveCollectedMinesQ_Init();
    gt_BonusObjectiveCollectedFacilityQ_Init();
    gt_BonusObjectiveNovaEntersMines_Init();
    gt_BonusObjectiveNovaLeavesMines_Init();
    gt_BonusObjectiveNovaEntersScienceFacility_Init();
    gt_BonusObjectiveNovaLeavesScienceFacility_Init();
    gt_BonusObjectiveNovaEntersBOFirstTimeQ_Init();
    gt_BonusObjectiveNovaDiesInside_Init();
    gt_NovaLeavesSoulsOnGround_Init();
    gt_NovaRetrievesSouls_Init();
    gt_BonusObjectiveStartBossMusic_Init();
    gt_BonusObjectiveStopBossMusic_Init();
    gt_BonusObjectiveBlightbringer_Init();
    gt_BonusObjectiveBlightbringerBattleAI_Init();
    gt_BonusObjectiveSpawnBlightbringerScene_Init();
    gt_BonusObjectiveBlightbringerSpawned_Init();
    gt_BonusObjectiveFoundBlightbringerTransmissionQ_Init();
    gt_BonusObjectiveBlightbringerEggCreated_Init();
    gt_BonusObjectiveInfestedAttackNova_Init();
    gt_BonusObjectiveBlightbringerDies_Init();
    gt_BonusObjectiveEradicatorNovaEntersRoom_Init();
    gt_BonusObjectiveSpawnEradicatorScene_Init();
    gt_BonusObjectiveActivateEradicatorTransmissionQ_Init();
    gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ_Init();
    gt_BonusObjectiveEradicatorTypeMissile_Init();
    gt_BonusObjectiveEradicatorTypeCannon_Init();
    gt_BonusObjectiveEradicatorTypeMissileEnrage_Init();
    gt_BonusObjectiveEradicatorTypeCannonEnrage_Init();
    gt_BonusObjectiveEradicatorDies_Init();
    gt_BonusObjectivePlayerReturnsToEradicatorEntrance_Init();
    gt_BonusObjectivePlayerLoiteringInEradicatorEntrance_Init();
    gt_BonusObjectivePlayerLeftEradicatorEntrance_Init();
    gt_StartAI_Init();
    gt_AIUpgradeCasualNormal_Init();
    gt_AIUpgradeHardBrutal_Init();
    gt_FirstInfestedAttackEarlyWarningQ_Init();
    gt_FirstInfestedAttackQ_Init();
    gt_FirstInfestedAttackSideEntranceQ_Init();
    gt_SpecialRageWaveSiegeTanksQ_Init();
    gt_SpecialRageWaveFlyersQ_Init();
    gt_SendProtossBaseAttack01Q_Init();
    gt_ProtossBaseAttackUnitWarpingIn_Init();
    gt_SendProtossClaimerWaveSmall_Init();
    gt_SendProtossClaimerWaveMedium_Init();
    gt_SendProtossClaimerWaveLarge_Init();
    gt_ClaimWaveUnitWarpedIn_Init();
    gt_ProtossClaimerWaveQ_Init();
    gt_InfestedKillProtossClaimerWaveQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatProtossCapTerrazine_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_Achievement_PlayerHasKilledProtoss_Init();
    gt_VictoryStat_LiberatorKills_Init();
    gt_AchievementVictorywithoutconstructingSiegeTanksorLiberators_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveExtractTerrazineCreate_Init();
    gt_ObjectiveExtractTerrazineComplete_Init();
    gt_ObjectiveExtractTerrazineUpdate_Init();
    gt_ObjectiveExtractTerrazineFailed_Init();
    gt_ObjectiveDoNotLetDevicesBeDestroyedCreate_Init();
    gt_ObjectiveDoNotLetDevicesBeDestroyedComplete_Init();
    gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate_Init();
    gt_ObjectivePreventProtossFailed_Init();
    gt_ObjectiveExploreUmojanMineCreate_Init();
    gt_ObjectiveExploreUmojanMineComplete_Init();
    gt_ObjectiveExploreUmojanMineFailed_Init();
    gt_ObjectiveExploreScienceFacilityCreate_Init();
    gt_ObjectiveExploreScienceFacilityComplete_Init();
    gt_ObjectiveExploreScienceFacilityFailed_Init();
    gt_BriefingCinematic_Init();
    gt_BriefingBaseHolograms_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00DropZone_Init();
    gt_BreifingScene00DropZonePanning_Init();
    gt_BriefingScene02ExtractionDevices_Init();
    gt_BreifingScene02ExtractionDevicesPanning_Init();
    gt_BreifingScene02ExtractionDevicesAssault_Init();
    gt_BriefingScene03SignsofLife_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_FlyInForces_Init();
    gt_FlyInGriffin_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryGriffinAnimationandSFX_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
