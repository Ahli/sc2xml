//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Flashpoint
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibComC"
include "LibCMMI"
include "LibNovC"
include "LibNCMI"
include "LibNCUI"
include "ai5131106F"
include "ai2EBC3D31"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libComC_InitLib();
    libCMMI_InitLib();
    libNovC_InitLib();
    libNCMI_InitLib();
    libNCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_ZERG = 2;
const int gv_pLAYER_03_ZERG_BULLIES = 3;
const int gv_pLAYER_04_CIVILIANS = 4;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_NydusWorm {
    unit lv_unit;
    unitgroup lv_bullies;
    timer lv_bullyRespawnTimer;
};

struct gs_RECORD_FlashbackDialog {
    int lv_dialog;
    int lv_titleLabel;
    int lv_banelingButton;
    int lv_mutaliskButton;
    int lv_nydusWormButton;
    int lv_lurkerButton;
    int lv_broodLordButton;
    int lv_ultraliskButton;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_ZergTypes_Roach = 0;
const int ge_PRESET_ZergTypes_Baneling = 1;
const int ge_PRESET_ZergTypes_Mutalisk = 2;
const int ge_PRESET_ZergTypes_NydusWorm = 3;
const int ge_PRESET_ZergTypes_Lurker = 4;
const int ge_PRESET_ZergTypes_BroodLord = 5;
const int ge_PRESET_ZergTypes_Ultralisk = 6;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_zergPlayerGroup;
unit gv_artanis;
string gv_mapMusicTrack;
string gv_mapMusicTrack5;
string gv_mapMusicTrack6;
string gv_mapMusicTrack4;
string gv_mapMusicTrack3;
bool[6] gv_coordinatesSearched;
int[6] gv_coordinatePings;
int gv_searchCount;
timer gv_killNearbyZergTransmissionTimer;
int[7] gv_emittersPlaced;
int gv_emittersPlacedCounter;
int gv_banelingEmitters;
int gv_mutaliskEmitters;
int gv_nydusWormEmitters;
int gv_lurkerEmitters;
int gv_broodLordEmitters;
int gv_ultraliskEmitters;
int gv_zerglingLevel;
int gv_hydraliskLevel;
int gv_banelingLevel;
int gv_mutaliskLevel;
int gv_nydusWormLevel;
int gv_lurkerLevel;
int gv_broodLordLevel;
int gv_ultraliskLevel;
region gv_topAttackSpawn;
region gv_rightAttackSpawn;
unitgroup gv_newZergGroup;
unitgroup gv_finalBaseZerg;
gs_RECORD_NydusWorm[16] gv_nydusWorms;
int gv_newEquipmentPing;
bool gv_newEquipmentFound;
timer gv_bonusDiscoveryDelayTimer;
int gv_subwayExitsCleared;
timer gv_subwayPingCooldown;
bool gv_firstClearTransmissionHeard;
int[5] gv_subwayPings;
bool gv_attackExpansionRight;
point gv_midOverseerDespawn;
int gv_nydusCharges;
unitgroup gv_rightWaveGroup;
unitgroup gv_topWaveGroup;
unitgroup gv_corruptorPatrol;
int gv_nukeKills;
bool gv_nukeAchievementTriggered;
int gv_zergStructuresRemaining;
bool gv_structureAchievementTriggered;
int gv_zergTypesEliminated;
int gv_achievementNuclearStrikeKillsBest;
int gv_achievementNuclearStrikeKillsCurrent;
int gv_anniversaryAchievementTermNuclearStrikeKillsBest;
int gv_objectiveDestroyZergBase;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicNova;
unitgroup gv_introBaseUnits;
gs_RECORD_FlashbackDialog gv_flashbackDialog;
int gv_flashbackProgression;
bool gv_buttonPressed;
bool gv_doubleFlashbackChoice;
sound gv_midStinger;
sound gv_midStinger2;
bool gv_spawnFlashbackZerg;
bool gv_flashbackPostChoiceDialogueFinished;
camerainfo gv_flashbackOverviewCamera;
camerainfo gv_flashbackZoomCamera;
point gv_flashbackArrivalPoint;
point gv_flashbackRetreatPoint;
fixed gv_flashbackPanDuration;
bool gv_flashbackMusicStarted;
bool gv_flashbackAmbienceStarted;
int gv_flashbackEffectDialog;
actor gv_emitterDoodad;
unit gv_flashbackNova;
unit gv_flashbackStone;
bool gv_top1ZergCampCreated;
bool gv_right1ZergCampCreated;
bool gv_top2ZergCampsCreated;
bool gv_right2ZergCampsCreated;
bool gv_stadiumActive;
int gv_victoryFlashbackEffectCutscene;
actor gv_mP02_040_Screen;

void InitGlobals () {
    int init_i;

    gv_zergPlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_coordinatePings[init_i] = c_invalidPingId;
    }
    gv_killNearbyZergTransmissionTimer = TimerCreate();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_emittersPlaced[init_i] = ge_PRESET_ZergTypes_Baneling;
    }
    gv_banelingEmitters = 1;
    gv_mutaliskEmitters = 1;
    gv_nydusWormEmitters = 1;
    gv_lurkerEmitters = 1;
    gv_broodLordEmitters = 1;
    gv_ultraliskEmitters = 1;
    gv_zerglingLevel = 8;
    gv_hydraliskLevel = 2;
    gv_banelingLevel = 1;
    gv_mutaliskLevel = 1;
    gv_nydusWormLevel = 1;
    gv_lurkerLevel = 1;
    gv_broodLordLevel = 1;
    gv_ultraliskLevel = 1;
    gv_topAttackSpawn = RegionFromId(9);
    gv_rightAttackSpawn = RegionFromId(10);
    gv_newZergGroup = UnitGroupEmpty();
    gv_finalBaseZerg = UnitGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_nydusWorms[init_i].lv_bullies = UnitGroupEmpty();
        gv_nydusWorms[init_i].lv_bullyRespawnTimer = TimerCreate();
    }
    gv_newEquipmentPing = c_invalidPingId;
    gv_bonusDiscoveryDelayTimer = TimerCreate();
    gv_subwayPingCooldown = TimerCreate();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_subwayPings[init_i] = c_invalidPingId;
    }
    gv_attackExpansionRight = true;
    gv_midOverseerDespawn = PointFromId(1707);
    gv_rightWaveGroup = UnitGroupEmpty();
    gv_topWaveGroup = UnitGroupEmpty();
    gv_corruptorPatrol = UnitGroupEmpty();
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introBaseUnits = UnitGroupEmpty();
    gv_flashbackDialog.lv_dialog = c_invalidDialogId;
    gv_flashbackDialog.lv_titleLabel = c_invalidDialogControlId;
    gv_flashbackDialog.lv_banelingButton = c_invalidDialogControlId;
    gv_flashbackDialog.lv_mutaliskButton = c_invalidDialogControlId;
    gv_flashbackDialog.lv_nydusWormButton = c_invalidDialogControlId;
    gv_flashbackDialog.lv_lurkerButton = c_invalidDialogControlId;
    gv_flashbackDialog.lv_broodLordButton = c_invalidDialogControlId;
    gv_flashbackDialog.lv_ultraliskButton = c_invalidDialogControlId;
    gv_flashbackPanDuration = 5.0;
    gv_flashbackEffectDialog = c_invalidDialogId;
    gv_victoryFlashbackEffectCutscene = c_invalidDialogControlId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateZergCamp (region lp_region, int lp_size, int lp_type);
void gf_CreateNydusWorm (point lp_point);
void gf_RunZergCampAI (region lp_campRegion, region lp_aggroRegion, point lp_overseerSpawnPoint);
void gf_AttackWavePing (unitgroup lp_waveUnitGroup);
void gf_CreateFlashbackCivilians (int lp_count, region lp_area);
void gf_CreateFlashbackZerg (region lp_spawnArea, region lp_attackArea, int lp_type);
void gf_PlayZergSound (int lp_type);
void gf_ForceClickButton (int lp_buttonIndex);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugIntro;
trigger gt_StartGameQ;
trigger gt_BeaconChecks;
trigger gt_KillNearbyZergQ;
trigger gt_Autosave2Q;
trigger gt_Autosave4Q;
trigger gt_HatcheryDies1;
trigger gt_HatcheryDies2;
trigger gt_HatcheryDies3;
trigger gt_KillBanelingNestsQ;
trigger gt_KillSpiresQ;
trigger gt_KillNydusNetworksQ;
trigger gt_KillLurkerDensQ;
trigger gt_KillGreaterSpiresQ;
trigger gt_KillUltraliskCavernsQ;
trigger gt_SpawnZergCampTop5;
trigger gt_SpawnZergCampRight5;
trigger gt_SpawnZergCamp6;
trigger gt_OverseerDespawn;
trigger gt_NewEquipmentPickupQ;
trigger gt_SpawnBonusObjectiveCampQ;
trigger gt_ActivateLeftBridge;
trigger gt_ActivateRightBridge;
trigger gt_SubwayIntroductionQ;
trigger gt_SubwayExitClearedQ;
trigger gt_SubwayPings;
trigger gt_HatcheryQ;
trigger gt_StartAI;
trigger gt_AIUpgradeCasualNormal;
trigger gt_AIUpgradeHard;
trigger gt_AIUpgradeBrutal;
trigger gt_Top2CorruptorPatrol;
trigger gt_Right2CorruptorPatrol;
trigger gt_EndCorruptorPatrol;
trigger gt_AttackWaves1;
trigger gt_AttackWaves2;
trigger gt_AttackWaves3;
trigger gt_NydusWormSpawning;
trigger gt_NydusWormAI;
trigger gt_FirstAttackQ;
trigger gt_SecondAttackQ;
trigger gt_FirstDoubleAttackQ;
trigger gt_FirstEscalationQ;
trigger gt_GenericAttackQ;
trigger gt_SecondEscalationQ;
trigger gt_UnitKilledbyNuke;
trigger gt_ZergStructureKilled;
trigger gt_AchievementNuclearStrikeUnitsKilledInitialize;
trigger gt_AchievementNuclearStrikeUnitsKilledKillCounter;
trigger gt_AchievementNuclearStrikeUnitsKilledAchievementGranted;
trigger gt_DefeatBaseDead;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveSearchCoordinatesCreate;
trigger gt_ObjectiveSearchCoordinatesComplete;
trigger gt_ObjectiveSearchCoordinatesUpdate;
trigger gt_ObjectiveRecoverEquipmentCreate;
trigger gt_ObjectiveRecoverEquipmentComplete;
trigger gt_BriefingQ;
trigger gt_BriefingScene00;
trigger gt_BriefingScene00EstablishZerg;
trigger gt_BriefingScene01;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroZerg;
trigger gt_IntroNovaOrders;
trigger gt_IntroBaseFlyIn;
trigger gt_IntroInfestorSounds;
trigger gt_InitFlashbackDialog;
trigger gt_UpdateFlashbackDialog;
trigger gt_ButtonPressed;
trigger gt_FlashbackStartTransmissions;
trigger gt_FlashbackTransmissionsPrechoice;
trigger gt_FlashbackTransmissionsPostchoice;
trigger gt_PostCinematicTransmissions;
trigger gt_NovaUsesTerrazine;
trigger gt_NovaPlacesEmitter;
trigger gt_MidSummonZergMusic;
trigger gt_CreateFullscreenFlashbackEffect;
trigger gt_Top1Q;
trigger gt_Top1Setup;
trigger gt_Top1Flashback;
trigger gt_Top1Choice;
trigger gt_Top1Cleanup;
trigger gt_Top1StopCar;
trigger gt_Right1Q;
trigger gt_Right1Setup;
trigger gt_Right1Flashback;
trigger gt_Right1Choice;
trigger gt_Right1Cleanup;
trigger gt_Right1StopCar;
trigger gt_Top2Q;
trigger gt_Top2Setup;
trigger gt_Top2Flashback;
trigger gt_Top2Choice;
trigger gt_Top2Cleanup;
trigger gt_Right2Q;
trigger gt_Right2Setup;
trigger gt_Right2Flashback;
trigger gt_Right2Choice;
trigger gt_Right2Cleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryFade;
trigger gt_VictoryCleanup;
trigger gt_ScenesMP02_040;
trigger gt_ScenesMP02_040EchoOn;
trigger gt_ScenesMP02_040EchoOff;
trigger gt_ScenesMP02_040Timestamp;
trigger gt_ScenesMP02_040OGVScreenCreate;
trigger gt_ScenesMP02_040PlayOGVMovie;
trigger gt_ScenesMP02_040StopMovie;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai5131106F") { ai5131106F_start(p); }
    if (cai_playerAI[p] == "ai2EBC3D31") { ai2EBC3D31_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5131106F") { ai5131106F_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai2EBC3D31") { ai2EBC3D31_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5131106F") { return ai5131106F_getCustomData(p); }
    if (cai_playerAI[p] == "ai2EBC3D31") { return ai2EBC3D31_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5131106F") { return ai5131106F_getLastWave(p); }
    if (cai_playerAI[p] == "ai2EBC3D31") { return ai2EBC3D31_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5131106F") { ai5131106F_waves_run(p, target); }
    if (cai_playerAI[p] == "ai2EBC3D31") { ai2EBC3D31_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5131106F") { ai5131106F_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai2EBC3D31") { ai2EBC3D31_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai5131106F") { ai5131106F_waves_stop(); }
    if (ai == "ai2EBC3D31") { ai2EBC3D31_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5131106F") { ai5131106F_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai2EBC3D31") { ai2EBC3D31_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5131106F") { ai5131106F_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai2EBC3D31") { ai2EBC3D31_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai5131106F") { return ai5131106F_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai2EBC3D31") { return ai2EBC3D31_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5131106F") { return ai5131106F_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai2EBC3D31") { return ai2EBC3D31_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5131106F") { return ai5131106F_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai2EBC3D31") { return ai2EBC3D31_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai5131106F", 3);
    cai_start("ai2EBC3D31", 4);
    AICampaignStart(2);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateZergCamp (region lp_region, int lp_size, int lp_type) {
    // Variable Declarations
    int lv_spawnFactor;
    string lv_buildingSpawnString;
    string lv_nydusSpawnString;
    int lv_i;

    // Automatic Variable Declarations
    region autoC7C5F8A4_val;
    int auto845E34A1_val;
    int auto6A58FE7D_val;
    int auto877C2C8B_n;
    int auto877C2C8B_i;
    int autoDD1300F3_n;
    int autoDD1300F3_i;
    int autoF9E1F79E_n;
    int autoF9E1F79E_i;
    int auto9B0E3B78_n;
    int auto9B0E3B78_i;
    int auto6A44B668_n;
    int auto6A44B668_i;
    int autoC59A74F5_ae;
    const int autoC59A74F5_ai = 1;
    int auto82F63B4A_ae;
    const int auto82F63B4A_ai = 1;
    int auto34915B8E_n;
    int auto34915B8E_i;
    int auto2C0B6FD9_n;
    int auto2C0B6FD9_i;
    int autoCE6461DF_n;
    int autoCE6461DF_i;
    int autoD296064E_n;
    int autoD296064E_i;
    int auto76F7C2E6_n;
    int auto76F7C2E6_i;
    const int autoD310E2A2_ae = 2;
    const int autoD310E2A2_ai = 1;
    int auto32E4F42A_val;
    int autoF6EF8093_n;
    int autoF6EF8093_i;
    int auto016D35D0_n;
    int auto016D35D0_i;
    int auto9AD88560_n;
    int auto9AD88560_i;
    int auto352480D5_n;
    int auto352480D5_i;
    int auto3ED5F7EF_n;
    int auto3ED5F7EF_i;
    int autoCCB0590C_n;
    int autoCCB0590C_i;
    int auto3DE46E49_n;
    int auto3DE46E49_i;
    int auto949FDDE2_n;
    int auto949FDDE2_i;

    // Variable Initialization
    lv_buildingSpawnString = "";
    lv_nydusSpawnString = "";

    // Implementation
    gv_newZergGroup = UnitGroupEmpty();
    if (((libNCMI_gf_GameIsOver() == true) || (lp_size <= 0))) {
        return ;
    }

    if (((lp_size == 2) || (lp_size == 3))) {
        autoC7C5F8A4_val = lp_region;
        if (autoC7C5F8A4_val == RegionFromId(16)) {
            lv_buildingSpawnString = "Top Building Spawn 1 - ";
            lv_nydusSpawnString = "Nydus Spawn Top 1 - ";
        }
        else if (autoC7C5F8A4_val == RegionFromId(19)) {
            lv_buildingSpawnString = "Top Building Spawn 3 - ";
            lv_nydusSpawnString = "Nydus Spawn Top 3 - ";
        }
        else if (autoC7C5F8A4_val == RegionFromId(20)) {
            lv_buildingSpawnString = "Top Building Spawn 4 - ";
            lv_nydusSpawnString = "Nydus Spawn Top 4 - ";
        }
        else if (autoC7C5F8A4_val == RegionFromId(22)) {
            lv_buildingSpawnString = "Right Building Spawn 1 - ";
            lv_nydusSpawnString = "Nydus Spawn Right 1 - ";
        }
        else if (autoC7C5F8A4_val == RegionFromId(26)) {
            lv_buildingSpawnString = "Right Building Spawn 3 - ";
            lv_nydusSpawnString = "Nydus Spawn Right 3 - ";
        }
        else if (autoC7C5F8A4_val == RegionFromId(25)) {
            lv_buildingSpawnString = "Right Building Spawn 4 - ";
            lv_nydusSpawnString = "Nydus Spawn Right 4 - ";
        }
        else {
        }
        auto845E34A1_val = lp_type;
        if (auto845E34A1_val == ge_PRESET_ZergTypes_Baneling) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingNest", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_buildingSpawnString + IntToString(1))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingNest", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_nydusSpawnString + IntToString(2))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingNest", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_nydusSpawnString + IntToString(3))));
        }
        else if (auto845E34A1_val == ge_PRESET_ZergTypes_Mutalisk) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spire", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_buildingSpawnString + IntToString(4))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spire", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_buildingSpawnString + IntToString(5))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spire", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_buildingSpawnString + IntToString(6))));
        }
        else if (auto845E34A1_val == ge_PRESET_ZergTypes_NydusWorm) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusNetwork", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_buildingSpawnString + IntToString(2))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusNetwork", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_buildingSpawnString + IntToString(3))));
        }
        else if (auto845E34A1_val == ge_PRESET_ZergTypes_Lurker) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LurkerDen", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_buildingSpawnString + IntToString(1))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LurkerDen", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_nydusSpawnString + IntToString(2))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LurkerDen", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_nydusSpawnString + IntToString(3))));
        }
        else if (auto845E34A1_val == ge_PRESET_ZergTypes_BroodLord) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterSpire", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_buildingSpawnString + IntToString(1))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterSpire", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_nydusSpawnString + IntToString(2))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterSpire", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_nydusSpawnString + IntToString(3))));
        }
        else if (auto845E34A1_val == ge_PRESET_ZergTypes_Ultralisk) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskCavern", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_buildingSpawnString + IntToString(1))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskCavern", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_nydusSpawnString + IntToString(2))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskCavern", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromName((lv_nydusSpawnString + IntToString(3))));
        }
        else {
        }
    }

    if ((lp_size >= 4)) {
        lv_spawnFactor = 3;
    }
    else {
        lv_spawnFactor = lp_size;
    }
    auto6A58FE7D_val = lp_type;
    if (auto6A58FE7D_val == ge_PRESET_ZergTypes_Roach) {
        if ((lv_spawnFactor == 1)) {
            autoDD1300F3_n = libNtve_gf_DifficultyValueInt(4, 4, 6, 6);
            for (autoDD1300F3_i = 1; autoDD1300F3_i <= autoDD1300F3_n; autoDD1300F3_i += 1) {
                UnitCreate(1, "Roach", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
            }
        }
        else {
            auto877C2C8B_n = libNtve_gf_DifficultyValueInt(6, 6, 7, 8);
            for (auto877C2C8B_i = 1; auto877C2C8B_i <= auto877C2C8B_n; auto877C2C8B_i += 1) {
                UnitCreate(1, "Roach", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
            }
        }
    }
    else if (auto6A58FE7D_val == ge_PRESET_ZergTypes_Baneling) {
        autoF9E1F79E_n = ((4 * lv_spawnFactor) + libNtve_gf_DifficultyValueInt(-4, -4, 0, 5));
        for (autoF9E1F79E_i = 1; autoF9E1F79E_i <= autoF9E1F79E_n; autoF9E1F79E_i += 1) {
            UnitCreate(1, "Baneling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
    }
    else if (auto6A58FE7D_val == ge_PRESET_ZergTypes_Mutalisk) {
        auto9B0E3B78_n = ((4 * lv_spawnFactor) + libNtve_gf_DifficultyValueInt(-4, -4, -2, 2));
        for (auto9B0E3B78_i = 1; auto9B0E3B78_i <= auto9B0E3B78_n; auto9B0E3B78_i += 1) {
            UnitCreate(1, "Mutalisk", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
        auto6A44B668_n = ((4 * lv_spawnFactor) + libNtve_gf_DifficultyValueInt(-8, -8, -4, 0));
        for (auto6A44B668_i = 1; auto6A44B668_i <= auto6A44B668_n; auto6A44B668_i += 1) {
            UnitCreate(1, "Scourge", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
    }
    else if (auto6A58FE7D_val == ge_PRESET_ZergTypes_NydusWorm) {
        if ((lv_spawnFactor == 2)) {
            autoC59A74F5_ae = libNtve_gf_DifficultyValueInt(2, 2, 4, 4);
            lv_i = 1;
            for ( ; ( (autoC59A74F5_ai >= 0 && lv_i <= autoC59A74F5_ae) || (autoC59A74F5_ai < 0 && lv_i >= autoC59A74F5_ae) ) ; lv_i += autoC59A74F5_ai ) {
                gf_CreateNydusWorm(PointFromName((lv_nydusSpawnString + IntToString(lv_i))));
            }
        }

        if ((lv_spawnFactor == 3)) {
            auto82F63B4A_ae = libNtve_gf_DifficultyValueInt(3, 3, 5, 5);
            lv_i = 1;
            for ( ; ( (auto82F63B4A_ai >= 0 && lv_i <= auto82F63B4A_ae) || (auto82F63B4A_ai < 0 && lv_i >= auto82F63B4A_ae) ) ; lv_i += auto82F63B4A_ai ) {
                gf_CreateNydusWorm(PointFromName((lv_nydusSpawnString + IntToString(lv_i))));
            }
        }

    }
    else if (auto6A58FE7D_val == ge_PRESET_ZergTypes_Lurker) {
        auto34915B8E_n = ((2 * lv_spawnFactor) + libNtve_gf_DifficultyValueInt(-2, -2, 0, 2));
        for (auto34915B8E_i = 1; auto34915B8E_i <= auto34915B8E_n; auto34915B8E_i += 1) {
            UnitCreate(1, "Lurker", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
    }
    else if (auto6A58FE7D_val == ge_PRESET_ZergTypes_BroodLord) {
        auto2C0B6FD9_n = ((2 * lv_spawnFactor) + libNtve_gf_DifficultyValueInt(-2, -2, -1, 1));
        for (auto2C0B6FD9_i = 1; auto2C0B6FD9_i <= auto2C0B6FD9_n; auto2C0B6FD9_i += 1) {
            UnitCreate(1, "BroodLord", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
    }
    else if (auto6A58FE7D_val == ge_PRESET_ZergTypes_Ultralisk) {
        if ((lv_spawnFactor == 1)) {
            auto76F7C2E6_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
            for (auto76F7C2E6_i = 1; auto76F7C2E6_i <= auto76F7C2E6_n; auto76F7C2E6_i += 1) {
                UnitCreate(1, "Ultralisk", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
            }
        }
        else {
            if ((lv_spawnFactor == 2)) {
                autoD296064E_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 5);
                for (autoD296064E_i = 1; autoD296064E_i <= autoD296064E_n; autoD296064E_i += 1) {
                    UnitCreate(1, "Ultralisk", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
                }
            }
            else {
                autoCE6461DF_n = libNtve_gf_DifficultyValueInt(3, 3, 4, 6);
                for (autoCE6461DF_i = 1; autoCE6461DF_i <= autoCE6461DF_n; autoCE6461DF_i += 1) {
                    UnitCreate(1, "Ultralisk", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
                }
            }
        }
    }
    else {
    }
    if ((libNtve_gf_DifficultyValueInt(1, 1, 1, 0) == 1)) {
        UnitCreate(1, "Overseer", 0, gv_pLAYER_03_ZERG_BULLIES, PointWithOffsetPolar(RegionGetCenter(lp_region), 3.0, 110.0), 290.0);
        UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
    }
    else {
        lv_i = 1;
        for ( ; ( (autoD310E2A2_ai >= 0 && lv_i <= autoD310E2A2_ae) || (autoD310E2A2_ai < 0 && lv_i >= autoD310E2A2_ae) ) ; lv_i += autoD310E2A2_ai ) {
            UnitCreate(1, "Overseer", 0, gv_pLAYER_03_ZERG_BULLIES, PointWithOffsetPolar(RegionGetCenter(lp_region), 3.0, 110.0), 290.0);
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
    }
    auto32E4F42A_val = lv_spawnFactor;
    if (auto32E4F42A_val == 1) {
        autoF6EF8093_n = libNtve_gf_DifficultyValueInt(0, 0, 4, 6);
        for (autoF6EF8093_i = 1; autoF6EF8093_i <= autoF6EF8093_n; autoF6EF8093_i += 1) {
            UnitCreate(1, "Hydralisk", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
        auto016D35D0_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
        for (auto016D35D0_i = 1; auto016D35D0_i <= auto016D35D0_n; auto016D35D0_i += 1) {
            UnitCreate(1, "InfestedTerranCampaign", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
    }
    else if (auto32E4F42A_val == 2) {
        auto9AD88560_n = libNtve_gf_DifficultyValueInt(3, 3, 4, 6);
        for (auto9AD88560_i = 1; auto9AD88560_i <= auto9AD88560_n; auto9AD88560_i += 1) {
            UnitCreate(1, "Hydralisk", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
        auto352480D5_n = libNtve_gf_DifficultyValueInt(4, 4, 7, 8);
        for (auto352480D5_i = 1; auto352480D5_i <= auto352480D5_n; auto352480D5_i += 1) {
            UnitCreate(1, "InfestedTerranCampaign", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
        auto3ED5F7EF_n = libNtve_gf_DifficultyValueInt(6, 6, 10, 12);
        for (auto3ED5F7EF_i = 1; auto3ED5F7EF_i <= auto3ED5F7EF_n; auto3ED5F7EF_i += 1) {
            UnitCreate(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
    }
    else if (auto32E4F42A_val == 3) {
        autoCCB0590C_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 7);
        for (autoCCB0590C_i = 1; autoCCB0590C_i <= autoCCB0590C_n; autoCCB0590C_i += 1) {
            UnitCreate(1, "Hydralisk", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
        auto3DE46E49_n = libNtve_gf_DifficultyValueInt(6, 6, 7, 8);
        for (auto3DE46E49_i = 1; auto3DE46E49_i <= auto3DE46E49_n; auto3DE46E49_i += 1) {
            UnitCreate(1, "InfestedTerranCampaign", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
        auto949FDDE2_n = libNtve_gf_DifficultyValueInt(10, 10, 14, 16);
        for (auto949FDDE2_i = 1; auto949FDDE2_i <= auto949FDDE2_n; auto949FDDE2_i += 1) {
            UnitCreate(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_newZergGroup, UnitLastCreated());
        }
    }
    else {
    }
}

void gf_CreateNydusWorm (point lp_point) {
    // Variable Declarations
    int lv_i;
    int lv_index;

    // Automatic Variable Declarations
    const int autoD0E51C33_ae = 15;
    const int autoD0E51C33_ai = 1;

    // Variable Initialization
    lv_index = -1;

    // Implementation
    if ((libNCMI_gf_GameIsOver() == true)) {
        return ;
    }

    lv_i = 0;
    for ( ; ( (autoD0E51C33_ai >= 0 && lv_i <= autoD0E51C33_ae) || (autoD0E51C33_ai < 0 && lv_i >= autoD0E51C33_ae) ) ; lv_i += autoD0E51C33_ai ) {
        if ((UnitIsAlive(gv_nydusWorms[lv_i].lv_unit) == false) && (libNtve_gf_UnitGroupIsDead(gv_nydusWorms[lv_i].lv_bullies) == true)) {
            lv_index = lv_i;
            break;
        }

    }
    if ((lv_index == -1)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, lp_point);
    gv_nydusWorms[lv_index].lv_unit = UnitLastCreated();
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == true)) {
        CreepModify(UnitGetPosition(gv_nydusWorms[lv_index].lv_unit), 10.0, true, false);
        TimerStart(gv_nydusWorms[lv_index].lv_bullyRespawnTimer, 2.0, false, c_timeGame);
    }
    else {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_nydusWorms[lv_index].lv_unit), c_animNameDefault, "Birth", 0, c_animTimeDefault);
        SoundPlayAtPointForPlayer(SoundLink("Event_Nova06_NydusWormSwtnr", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_nydusWorms[lv_index].lv_unit), 0.0, 100.0, 0.0);
        TimerStart(gv_nydusWorms[lv_index].lv_bullyRespawnTimer, 7.0, false, c_timeGame);
    }
}

trigger auto_gf_RunZergCampAI_Trigger = null;
region auto_gf_RunZergCampAI_lp_campRegion;
region auto_gf_RunZergCampAI_lp_aggroRegion;
point auto_gf_RunZergCampAI_lp_overseerSpawnPoint;

void gf_RunZergCampAI (region lp_campRegion, region lp_aggroRegion, point lp_overseerSpawnPoint) {
    auto_gf_RunZergCampAI_lp_campRegion = lp_campRegion;
    auto_gf_RunZergCampAI_lp_aggroRegion = lp_aggroRegion;
    auto_gf_RunZergCampAI_lp_overseerSpawnPoint = lp_overseerSpawnPoint;

    if (auto_gf_RunZergCampAI_Trigger == null) {
        auto_gf_RunZergCampAI_Trigger = TriggerCreate("auto_gf_RunZergCampAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunZergCampAI_Trigger, false, false);
}

bool auto_gf_RunZergCampAI_TriggerFunc (bool testConds, bool runActions) {
    region lp_campRegion = auto_gf_RunZergCampAI_lp_campRegion;
    region lp_aggroRegion = auto_gf_RunZergCampAI_lp_aggroRegion;
    point lp_overseerSpawnPoint = auto_gf_RunZergCampAI_lp_overseerSpawnPoint;

    int init_i;

    // Variable Declarations
    int lv_i;
    int lv_a;
    unitgroup lv_zergGroup;
    unitgroup lv_zergGroupGroundOnly;
    unitgroup lv_zergGroupAirOnly;
    unitgroup lv_lurkerGroup;
    unit[3] lv_overseers;
    timer[3] lv_overseerRespawnTimer;
    timer[3] lv_overseerMovementTimer;
    timer[3] lv_overseerRespondTimer;
    bool[3] lv_overseerAlive;
    unitgroup lv_validPlayerUnits;
    bool lv_overseerAirSpawn;
    unit lv_closestUnit;
    int lv_currentOverseer;
    int lv_overseerMax;

    // Automatic Variable Declarations
    unitgroup autoFB445248_g;
    int autoFB445248_u;
    unit autoFB445248_var;
    int autoBC864EFD_ae;
    const int autoBC864EFD_ai = 1;
    int autoBCCE3228_ae;
    const int autoBCCE3228_ai = 1;
    unitgroup auto5A9FD8F0_g;
    int auto5A9FD8F0_u;
    unit auto5A9FD8F0_var;
    unitgroup auto71911F66_g;
    int auto71911F66_u;
    unit auto71911F66_var;
    unitgroup auto3DB593EA_g;
    int auto3DB593EA_u;
    unit auto3DB593EA_var;
    unitgroup autoD998C4F5_g;
    int autoD998C4F5_u;
    unit autoD998C4F5_var;
    unitgroup auto583EE5AF_g;
    int auto583EE5AF_u;
    unit auto583EE5AF_var;
    unitgroup auto853BBD50_g;
    int auto853BBD50_u;
    unit auto853BBD50_var;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();
    lv_zergGroupGroundOnly = UnitGroupEmpty();
    lv_zergGroupAirOnly = UnitGroupEmpty();
    lv_lurkerGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_overseerRespawnTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_overseerMovementTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_overseerRespondTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_overseerAlive[init_i] = true;
    }
    lv_validPlayerUnits = UnitGroupEmpty();

    // Implementation
    autoFB445248_g = gv_newZergGroup;
    autoFB445248_u = UnitGroupCount(autoFB445248_g, c_unitCountAll);
    for (;; autoFB445248_u -= 1) {
        autoFB445248_var = UnitGroupUnitFromEnd(autoFB445248_g, autoFB445248_u);
        if (autoFB445248_var == null) { break; }
        if (((UnitGetType(autoFB445248_var) == "InfestedCivilian") || (UnitGetType(autoFB445248_var) == "InfestedTerranCampaign"))) {
            libNCMI_gf_SetUnitInfoTextCampaign(autoFB445248_var, null, StringExternal("Param/Value/C8F98358"), null);
        }

        if ((UnitGetType(autoFB445248_var) == "Overseer")) {
            lv_currentOverseer += 1;
            if ((lv_currentOverseer <= 2)) {
                lv_overseers[lv_currentOverseer] = autoFB445248_var;
            }
            else {
                lv_currentOverseer = 2;
            }
        }
        else {
            if (((UnitGetType(autoFB445248_var) == "Lurker") || (UnitGetType(autoFB445248_var) == "LurkerBurrowed"))) {
                UnitGroupAdd(lv_lurkerGroup, autoFB445248_var);
            }
            else {
                UnitGroupAdd(lv_zergGroup, autoFB445248_var);
            }
        }
        if (((UnitGetType(autoFB445248_var) == "InfestedCivilian") || (UnitGetType(autoFB445248_var) == "Zergling") || (UnitGetType(autoFB445248_var) == "Baneling") || (UnitGetType(autoFB445248_var) == "Roach") || (UnitGetType(autoFB445248_var) == "Hydralisk") || (UnitGetType(autoFB445248_var) == "Ultralisk") || (UnitGetType(autoFB445248_var) == "BroodLord"))) {
            UnitGroupAdd(lv_zergGroupGroundOnly, autoFB445248_var);
        }

        if (((UnitGetType(autoFB445248_var) == "Scourge") || (UnitGetType(autoFB445248_var) == "Corruptor"))) {
            UnitGroupAdd(lv_zergGroupAirOnly, autoFB445248_var);
        }

    }
    lv_overseerMax = lv_currentOverseer;
    TimerStart(lv_overseerMovementTimer[1], 8.0, false, c_timeAI);
    TimerStart(lv_overseerMovementTimer[2], 8.0, false, c_timeAI);
    TimerStart(lv_overseerRespondTimer[1], 4.0, false, c_timeAI);
    TimerStart(lv_overseerRespondTimer[2], 4.0, false, c_timeAI);
    if ((lp_overseerSpawnPoint == PointFromId(1426))) {
        lv_overseerAirSpawn = true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if (((libNCMI_gf_GameIsOver() == true) || ((libNtve_gf_UnitGroupIsDead(lv_zergGroup) == true) && (libNtve_gf_UnitGroupIsDead(lv_lurkerGroup) == true) && (UnitIsAlive(lv_overseers[1]) == false) && (UnitIsAlive(lv_overseers[2]) == false)))) {
            return true;
        }

        autoBC864EFD_ae = lv_overseerMax;
        lv_i = 1;
        for ( ; ( (autoBC864EFD_ai >= 0 && lv_i <= autoBC864EFD_ae) || (autoBC864EFD_ai < 0 && lv_i >= autoBC864EFD_ae) ) ; lv_i += autoBC864EFD_ai ) {
            if ((UnitIsAlive(lv_overseers[lv_i]) == false) && (lv_overseerAlive[lv_i] == true)) {
                lv_overseerAlive[lv_i] = false;
                TimerStart(lv_overseerRespawnTimer[lv_i], libNtve_gf_DifficultyValueFixed(20.0, 20.0, 15.0, 10.0), false, c_timeAI);
            }

            if ((lv_overseerAlive[lv_i] == false) && (TimerGetRemaining(lv_overseerRespawnTimer[lv_i]) < 0.1)) {
                UnitCreate(1, "Overseer", 0, gv_pLAYER_03_ZERG_BULLIES, lp_overseerSpawnPoint, 0.0);
                lv_overseers[lv_i] = UnitLastCreated();
                lv_overseerAlive[lv_i] = true;
                if ((lv_overseerAirSpawn == false)) {
                    if ((UnitIsAlive(gv_artanis) == true) && (libNtve_gf_UnitInRegion(gv_artanis, lp_aggroRegion) == true)) {
                        UnitIssueOrder(lv_overseers[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(lv_overseers[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lp_campRegion)), c_orderQueueReplace);
                    }
                    UnitIssueOrder(lv_overseers[lv_i], Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                    TimerStart(lv_overseerMovementTimer[lv_i], 8.0, false, c_timeAI);
                    TimerStart(lv_overseerRespondTimer[lv_i], 4.0, false, c_timeAI);
                }
                else {
                    UnitIssueOrder(lv_overseers[lv_i], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                    UnitSetHeight(lv_overseers[lv_i], 12.0, 0.0);
                    Wait(0.0625, c_timeGame);
                    UnitSetHeight(lv_overseers[lv_i], 3.75, 2.0);
                    TimerStart(lv_overseerMovementTimer[lv_i], 2.0, false, c_timeAI);
                    TimerStart(lv_overseerRespondTimer[lv_i], 2.0, false, c_timeAI);
                }
            }

            if ((lv_overseerAlive[lv_i] == true)) {
                if ((libNtve_gf_UnitGroupIsDead(lv_zergGroup) == true) && (libNtve_gf_UnitGroupIsDead(lv_lurkerGroup) == true)) {
                    if ((lp_campRegion == RegionFromId(39))) {
                        if ((libNtve_gf_UnitInRegion(lv_overseers[lv_i], RegionCircle(gv_midOverseerDespawn, 2.0)) == true)) {
                            UnitRemove(lv_overseers[lv_i]);
                        }
                        else {
                            UnitIssueOrder(lv_overseers[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), gv_midOverseerDespawn), c_orderQueueReplace);
                        }
                    }
                    else {
                        if ((libNtve_gf_UnitInRegion(lv_overseers[lv_i], RegionCircle(lp_overseerSpawnPoint, 2.0)) == true)) {
                            UnitRemove(lv_overseers[lv_i]);
                        }
                        else {
                            UnitIssueOrder(lv_overseers[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), lp_overseerSpawnPoint), c_orderQueueReplace);
                        }
                    }
                }
                else {
                    if ((UnitIsAlive(gv_artanis) == true) && (libNtve_gf_UnitInRegion(gv_artanis, lp_aggroRegion) == true)) {
                        if ((TimerGetRemaining(lv_overseerRespondTimer[lv_i]) < 0.1)) {
                            UnitIssueOrder(lv_overseers[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
                            UnitIssueOrder(lv_overseers[lv_i], Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                            TimerStart(lv_overseerRespondTimer[lv_i], 8.0, false, c_timeAI);
                            autoBCCE3228_ae = lv_overseerMax;
                            lv_a = 1;
                            for ( ; ( (autoBCCE3228_ai >= 0 && lv_a <= autoBCCE3228_ae) || (autoBCCE3228_ai < 0 && lv_a >= autoBCCE3228_ae) ) ; lv_a += autoBCCE3228_ai ) {
                                if ((lv_a != lv_i)) {
                                    TimerStart(lv_overseerRespondTimer[lv_a], 5.0, false, c_timeAI);
                                }

                            }
                        }

                    }
                    else {
                        if ((TimerGetRemaining(lv_overseerMovementTimer[lv_i]) < 0.1)) {
                            UnitIssueOrder(lv_overseers[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_campRegion), 6.0))), c_orderQueueReplace);
                            UnitIssueOrder(lv_overseers[lv_i], Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                            TimerStart(lv_overseerMovementTimer[lv_i], 8.0, false, c_timeAI);
                        }

                    }
                }
            }

        }
        if ((UnitGroupCount(lv_zergGroup, c_unitCountAlive) > 0)) {
            lv_validPlayerUnits = UnitGroupEmpty();
            auto5A9FD8F0_g = UnitGroup(null, gv_pLAYER_01_USER, lp_aggroRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto5A9FD8F0_u = UnitGroupCount(auto5A9FD8F0_g, c_unitCountAll);
            for (;; auto5A9FD8F0_u -= 1) {
                auto5A9FD8F0_var = UnitGroupUnitFromEnd(auto5A9FD8F0_g, auto5A9FD8F0_u);
                if (auto5A9FD8F0_var == null) { break; }
                if ((libNtve_gf_UnitIsVisibleToPlayer(auto5A9FD8F0_var, gv_pLAYER_03_ZERG_BULLIES) == true)) {
                    UnitGroupAdd(lv_validPlayerUnits, auto5A9FD8F0_var);
                }

            }
            if ((UnitGroupCount(lv_validPlayerUnits, c_unitCountAlive) > 0)) {
                auto3DB593EA_g = lv_zergGroup;
                auto3DB593EA_u = UnitGroupCount(auto3DB593EA_g, c_unitCountAll);
                for (;; auto3DB593EA_u -= 1) {
                    auto3DB593EA_var = UnitGroupUnitFromEnd(auto3DB593EA_g, auto3DB593EA_u);
                    if (auto3DB593EA_var == null) { break; }
                    if ((UnitGroupHasUnit(lv_zergGroupAirOnly, auto3DB593EA_var) == true)) {
                        if ((UnitGroupCount(UnitGroupFilter(null, gv_pLAYER_01_USER, lv_validPlayerUnits, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                            UnitIssueOrder(auto3DB593EA_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilter(null, gv_pLAYER_01_USER, lv_validPlayerUnits, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto3DB593EA_var)))), c_orderQueueReplace);
                        }

                    }
                    else {
                        if ((UnitGroupHasUnit(lv_zergGroupGroundOnly, auto3DB593EA_var) == true)) {
                            if ((UnitGroupCount(UnitGroupFilter(null, gv_pLAYER_01_USER, lv_validPlayerUnits, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                                UnitIssueOrder(auto3DB593EA_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilter(null, gv_pLAYER_01_USER, lv_validPlayerUnits, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto3DB593EA_var)))), c_orderQueueReplace);
                            }

                        }
                        else {
                            UnitIssueOrder(auto3DB593EA_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_validPlayerUnits, UnitGetPosition(auto3DB593EA_var)))), c_orderQueueReplace);
                        }
                    }
                }
            }
            else {
                auto71911F66_g = lv_zergGroup;
                auto71911F66_u = UnitGroupCount(auto71911F66_g, c_unitCountAll);
                for (;; auto71911F66_u -= 1) {
                    auto71911F66_var = UnitGroupUnitFromEnd(auto71911F66_g, auto71911F66_u);
                    if (auto71911F66_var == null) { break; }
                    if ((libNtve_gf_UnitInRegion(auto71911F66_var, lp_aggroRegion) == false)) {
                        if ((RandomInt(1, 6) == 1)) {
                            UnitIssueOrder(auto71911F66_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_campRegion)), c_orderQueueReplace);
                        }

                    }
                    else {
                        if ((RandomInt(1, 15) == 1)) {
                            UnitIssueOrder(auto71911F66_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_campRegion)), c_orderQueueReplace);
                        }

                    }
                }
            }
        }

        if ((UnitGroupCount(lv_lurkerGroup, c_unitCountAlive) > 0)) {
            lv_validPlayerUnits = UnitGroupEmpty();
            autoD998C4F5_g = UnitGroup(null, gv_pLAYER_01_USER, lp_aggroRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD998C4F5_u = UnitGroupCount(autoD998C4F5_g, c_unitCountAll);
            for (;; autoD998C4F5_u -= 1) {
                autoD998C4F5_var = UnitGroupUnitFromEnd(autoD998C4F5_g, autoD998C4F5_u);
                if (autoD998C4F5_var == null) { break; }
                if ((libNtve_gf_UnitIsVisibleToPlayer(autoD998C4F5_var, gv_pLAYER_03_ZERG_BULLIES) == true)) {
                    UnitGroupAdd(lv_validPlayerUnits, autoD998C4F5_var);
                }

            }
            if ((UnitGroupCount(lv_validPlayerUnits, c_unitCountAlive) > 0)) {
                auto853BBD50_g = lv_lurkerGroup;
                auto853BBD50_u = UnitGroupCount(auto853BBD50_g, c_unitCountAll);
                for (;; auto853BBD50_u -= 1) {
                    auto853BBD50_var = UnitGroupUnitFromEnd(auto853BBD50_g, auto853BBD50_u);
                    if (auto853BBD50_var == null) { break; }
                    lv_closestUnit = UnitGroupClosestToPoint(lv_validPlayerUnits, UnitGetPosition(auto853BBD50_var));
                    if ((UnitGetType(auto853BBD50_var) == "Lurker")) {
                        if ((DistanceBetweenPoints(UnitGetPosition(auto853BBD50_var), UnitGetPosition(lv_closestUnit)) <= 4.0)) {
                            UnitIssueOrder(auto853BBD50_var, Order(AbilityCommand("BurrowLurkerDown", 0)), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(auto853BBD50_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_closestUnit)), c_orderQueueReplace);
                            UnitIssueOrder(auto853BBD50_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                        }
                    }
                    else {
                        if ((DistanceBetweenPoints(UnitGetPosition(auto853BBD50_var), UnitGetPosition(lv_closestUnit)) > 6.0)) {
                            UnitIssueOrder(auto853BBD50_var, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
                            UnitIssueOrder(auto853BBD50_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                        }

                    }
                }
            }
            else {
                auto583EE5AF_g = lv_lurkerGroup;
                auto583EE5AF_u = UnitGroupCount(auto583EE5AF_g, c_unitCountAll);
                for (;; auto583EE5AF_u -= 1) {
                    auto583EE5AF_var = UnitGroupUnitFromEnd(auto583EE5AF_g, auto583EE5AF_u);
                    if (auto583EE5AF_var == null) { break; }
                    if ((UnitGetType(auto583EE5AF_var) == "Lurker")) {
                        if ((libNtve_gf_UnitInRegion(auto583EE5AF_var, lp_campRegion) == false)) {
                            UnitIssueOrder(auto583EE5AF_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_campRegion)), c_orderQueueReplace);
                        }
                        else {
                            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto583EE5AF_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                                UnitIssueOrder(auto583EE5AF_var, Order(AbilityCommand("BurrowLurkerDown", 0)), c_orderQueueReplace);
                            }
                            else {
                                if ((RandomInt(1, 15) == 1)) {
                                    UnitIssueOrder(auto583EE5AF_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_campRegion)), c_orderQueueReplace);
                                }

                            }
                        }
                    }
                    else {
                        if ((libNtve_gf_UnitInRegion(auto583EE5AF_var, lp_campRegion) == false)) {
                            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto583EE5AF_var), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                                UnitIssueOrder(auto583EE5AF_var, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
                                UnitIssueOrder(auto583EE5AF_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_campRegion)), c_orderQueueAddToEnd);
                            }

                        }
                        else {
                            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto583EE5AF_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                                UnitIssueOrder(auto583EE5AF_var, Order(AbilityCommand("BurrowLurkerUp", 0)), c_orderQueueReplace);
                            }

                        }
                    }
                }
            }
        }

    }
    return true;
}

trigger auto_gf_AttackWavePing_Trigger = null;
unitgroup auto_gf_AttackWavePing_lp_waveUnitGroup;

void gf_AttackWavePing (unitgroup lp_waveUnitGroup) {
    auto_gf_AttackWavePing_lp_waveUnitGroup = lp_waveUnitGroup;

    if (auto_gf_AttackWavePing_Trigger == null) {
        auto_gf_AttackWavePing_Trigger = TriggerCreate("auto_gf_AttackWavePing_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackWavePing_Trigger, false, false);
}

bool auto_gf_AttackWavePing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_waveUnitGroup = auto_gf_AttackWavePing_lp_waveUnitGroup;

    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGroupCenterOfGroup(lp_waveUnitGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetScale(lv_ping, 0.7);
    PingSetTooltip(lv_ping, StringExternal("Param/Value/232D1357"));
    while ((libNtve_gf_UnitGroupIsDead(lp_waveUnitGroup) == false)) {
        PingSetPosition(lv_ping, UnitGroupCenterOfGroup(lp_waveUnitGroup));
        Wait(0.0625, c_timeAI);
    }
    PingDestroy(lv_ping);
    return true;
}

trigger auto_gf_CreateFlashbackCivilians_Trigger = null;
int auto_gf_CreateFlashbackCivilians_lp_count;
region auto_gf_CreateFlashbackCivilians_lp_area;

void gf_CreateFlashbackCivilians (int lp_count, region lp_area) {
    auto_gf_CreateFlashbackCivilians_lp_count = lp_count;
    auto_gf_CreateFlashbackCivilians_lp_area = lp_area;

    if (auto_gf_CreateFlashbackCivilians_Trigger == null) {
        auto_gf_CreateFlashbackCivilians_Trigger = TriggerCreate("auto_gf_CreateFlashbackCivilians_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateFlashbackCivilians_Trigger, false, false);
}

bool auto_gf_CreateFlashbackCivilians_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_CreateFlashbackCivilians_lp_count;
    region lp_area = auto_gf_CreateFlashbackCivilians_lp_area;

    // Variable Declarations
    unitgroup lv_civilianGroup;
    unitgroup lv_nearbyEnemies;
    unit lv_closetEnemy;
    int lv_randomMovementThreshold;

    // Automatic Variable Declarations
    int autoCD0AA1C7_n;
    int autoCD0AA1C7_i;
    unitgroup auto94A574D2_g;
    int auto94A574D2_u;
    unit auto94A574D2_var;

    // Variable Initialization
    lv_civilianGroup = UnitGroupEmpty();
    lv_nearbyEnemies = UnitGroupEmpty();

    // Implementation
    autoCD0AA1C7_n = (lp_count / 2);
    for (autoCD0AA1C7_i = 1; autoCD0AA1C7_i <= autoCD0AA1C7_n; autoCD0AA1C7_i += 1) {
        UnitCreate(1, "Civilian", 0, gv_pLAYER_04_CIVILIANS, RegionRandomPoint(lp_area), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_civilianGroup, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "CivilianFemale", 0, gv_pLAYER_04_CIVILIANS, RegionRandomPoint(lp_area), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_civilianGroup, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    if ((lp_count <= 10)) {
        lv_randomMovementThreshold = 8;
    }
    else {
        if ((lp_count <= 20)) {
            lv_randomMovementThreshold = 15;
        }
        else {
            lv_randomMovementThreshold = 22;
        }
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libNtve_gf_UnitGroupIsDead(lv_civilianGroup) == true) || (libNCMI_gf_GameIsOver() == true))) {
            return true;
        }

        auto94A574D2_g = lv_civilianGroup;
        auto94A574D2_u = UnitGroupCount(auto94A574D2_g, c_unitCountAll);
        for (;; auto94A574D2_u -= 1) {
            auto94A574D2_var = UnitGroupUnitFromEnd(auto94A574D2_g, auto94A574D2_u);
            if (auto94A574D2_var == null) { break; }
            lv_nearbyEnemies = UnitGroupAlliance(gv_pLAYER_04_CIVILIANS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto94A574D2_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
                lv_closetEnemy = UnitGroupClosestToPoint(lv_nearbyEnemies, UnitGetPosition(auto94A574D2_var));
            }
            else {
                lv_closetEnemy = null;
            }
            if ((UnitIsAlive(lv_closetEnemy) == true)) {
                if ((DistanceBetweenPoints(UnitGetPosition(auto94A574D2_var), UnitGetPosition(lv_closetEnemy)) > 6.0)) {
                    UnitIssueOrder(auto94A574D2_var, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(lv_closetEnemy)), c_orderQueueReplace);
                }
                else {
                    UnitSetPropertyFixed(auto94A574D2_var, c_unitPropMovementSpeed, 2.5);
                    UnitIssueOrder(auto94A574D2_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto94A574D2_var), 8.0, AngleBetweenPoints(UnitGetPosition(lv_closetEnemy), UnitGetPosition(auto94A574D2_var)))), c_orderQueueReplace);
                }
            }
            else {
                if ((RandomInt(1, lv_randomMovementThreshold) == 1)) {
                    UnitIssueOrder(auto94A574D2_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_area)), c_orderQueueReplace);
                }

            }
        }
    }
    return true;
}

trigger auto_gf_CreateFlashbackZerg_Trigger = null;
region auto_gf_CreateFlashbackZerg_lp_spawnArea;
region auto_gf_CreateFlashbackZerg_lp_attackArea;
int auto_gf_CreateFlashbackZerg_lp_type;

void gf_CreateFlashbackZerg (region lp_spawnArea, region lp_attackArea, int lp_type) {
    auto_gf_CreateFlashbackZerg_lp_spawnArea = lp_spawnArea;
    auto_gf_CreateFlashbackZerg_lp_attackArea = lp_attackArea;
    auto_gf_CreateFlashbackZerg_lp_type = lp_type;

    if (auto_gf_CreateFlashbackZerg_Trigger == null) {
        auto_gf_CreateFlashbackZerg_Trigger = TriggerCreate("auto_gf_CreateFlashbackZerg_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateFlashbackZerg_Trigger, false, false);
}

bool auto_gf_CreateFlashbackZerg_TriggerFunc (bool testConds, bool runActions) {
    region lp_spawnArea = auto_gf_CreateFlashbackZerg_lp_spawnArea;
    region lp_attackArea = auto_gf_CreateFlashbackZerg_lp_attackArea;
    int lp_type = auto_gf_CreateFlashbackZerg_lp_type;

    // Variable Declarations
    unitgroup lv_zergGroup;
    unitgroup lv_civilians;
    unit lv_closetCivilian;
    timer lv_broodLordTimer;

    // Automatic Variable Declarations
    int auto74FF831F_val;
    const int auto95CD9B57_n = 16;
    int auto95CD9B57_i;
    const int auto883A8FEB_n = 8;
    int auto883A8FEB_i;
    const int auto1576E442_n = 12;
    int auto1576E442_i;
    const int auto62328339_n = 4;
    int auto62328339_i;
    const int auto9D643404_n = 4;
    int auto9D643404_i;
    const int auto5242E416_n = 4;
    int auto5242E416_i;
    const int autoF6F5250C_n = 8;
    int autoF6F5250C_i;
    unitgroup auto1038820A_g;
    int auto1038820A_u;
    unit auto1038820A_var;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();
    lv_civilians = UnitGroupEmpty();
    lv_broodLordTimer = TimerCreate();

    // Implementation
    auto74FF831F_val = lp_type;
    if (auto74FF831F_val == ge_PRESET_ZergTypes_Baneling) {
        for (auto95CD9B57_i = 1; auto95CD9B57_i <= auto95CD9B57_n; auto95CD9B57_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
        }
    }
    else if (auto74FF831F_val == ge_PRESET_ZergTypes_Mutalisk) {
        for (auto883A8FEB_i = 1; auto883A8FEB_i <= auto883A8FEB_n; auto883A8FEB_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
        }
    }
    else if (auto74FF831F_val == ge_PRESET_ZergTypes_NydusWorm) {
        for (auto1576E442_i = 1; auto1576E442_i <= auto1576E442_n; auto1576E442_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
        }
        if ((lp_attackArea == RegionFromId(52))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(84));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
            SoundPlayAtPointForPlayer(SoundLink("Event_Nova06_NydusWormSwtnr", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(85));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
            SoundPlayAtPointForPlayer(SoundLink("Event_Nova06_NydusWormSwtnr", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
        }

        if ((lp_attackArea == RegionFromId(59))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(86));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
            SoundPlayAtPointForPlayer(SoundLink("Event_Nova06_NydusWormSwtnr", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(89));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
            SoundPlayAtPointForPlayer(SoundLink("Event_Nova06_NydusWormSwtnr", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
        }

    }
    else if (auto74FF831F_val == ge_PRESET_ZergTypes_Lurker) {
        for (auto62328339_i = 1; auto62328339_i <= auto62328339_n; auto62328339_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Lurker", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
            libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
        }
    }
    else if (auto74FF831F_val == ge_PRESET_ZergTypes_BroodLord) {
        TimerStart(lv_broodLordTimer, 4.0, false, c_timeGame);
        for (auto9D643404_i = 1; auto9D643404_i <= auto9D643404_n; auto9D643404_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "BroodLord", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
            libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
        }
    }
    else if (auto74FF831F_val == ge_PRESET_ZergTypes_Ultralisk) {
        for (auto5242E416_i = 1; auto5242E416_i <= auto5242E416_n; auto5242E416_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
            libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
        }
    }
    else {
    }
    for (autoF6F5250C_i = 1; autoF6F5250C_i <= autoF6F5250C_n; autoF6F5250C_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(lp_spawnArea), RegionGetCenter(lp_attackArea));
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libNtve_gf_UnitGroupIsDead(lv_zergGroup) == true) || (libNCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((TimerGetRemaining(lv_broodLordTimer) < 0.1)) {
            auto1038820A_g = lv_zergGroup;
            auto1038820A_u = UnitGroupCount(auto1038820A_g, c_unitCountAll);
            for (;; auto1038820A_u -= 1) {
                auto1038820A_var = UnitGroupUnitFromEnd(auto1038820A_g, auto1038820A_u);
                if (auto1038820A_var == null) { break; }
                lv_civilians = UnitGroup(null, gv_pLAYER_04_CIVILIANS, RegionCircle(UnitGetPosition(auto1038820A_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_civilians, c_unitCountAlive) > 0)) {
                    lv_closetCivilian = UnitGroupClosestToPoint(lv_civilians, UnitGetPosition(auto1038820A_var));
                }
                else {
                    lv_closetCivilian = null;
                }
                if ((UnitIsAlive(lv_closetCivilian) == true)) {
                    UnitIssueOrder(auto1038820A_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_closetCivilian)), c_orderQueueReplace);
                }
                else {
                    if ((RandomInt(1, 7) == 1)) {
                        UnitIssueOrder(auto1038820A_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(lp_attackArea), 10.0))), c_orderQueueReplace);
                    }

                }
            }
        }

    }
    return true;
}

trigger auto_gf_PlayZergSound_Trigger = null;
int auto_gf_PlayZergSound_lp_type;

void gf_PlayZergSound (int lp_type) {
    auto_gf_PlayZergSound_lp_type = lp_type;

    if (auto_gf_PlayZergSound_Trigger == null) {
        auto_gf_PlayZergSound_Trigger = TriggerCreate("auto_gf_PlayZergSound_TriggerFunc");
    }

    TriggerExecute(auto_gf_PlayZergSound_Trigger, false, false);
}

bool auto_gf_PlayZergSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_type = auto_gf_PlayZergSound_lp_type;

    // Automatic Variable Declarations
    int autoFD146EF6_val;

    // Implementation
    autoFD146EF6_val = lp_type;
    if (autoFD146EF6_val == ge_PRESET_ZergTypes_Baneling) {
        SoundPlayForPlayer(SoundLink("Event_Nova06_VoxBaneling", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoFD146EF6_val == ge_PRESET_ZergTypes_Mutalisk) {
        SoundPlayForPlayer(SoundLink("Event_Nova06_VoxMutalisk", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoFD146EF6_val == ge_PRESET_ZergTypes_NydusWorm) {
        SoundPlayForPlayer(SoundLink("Event_Nova06_VoxNydusWorm", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoFD146EF6_val == ge_PRESET_ZergTypes_Lurker) {
        SoundPlayForPlayer(SoundLink("Event_Nova06_VoxLurker", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoFD146EF6_val == ge_PRESET_ZergTypes_BroodLord) {
        SoundPlayForPlayer(SoundLink("Event_Nova06_VoxBroodLord", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoFD146EF6_val == ge_PRESET_ZergTypes_Ultralisk) {
        SoundPlayForPlayer(SoundLink("Event_Nova06_VoxUltralisk", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        SoundPlayForPlayer(SoundLink("Event_Nova06_VoxBaneling", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

void gf_ForceClickButton (int lp_buttonIndex) {
    // Automatic Variable Declarations
    int auto76C38593_val;

    // Implementation
    gv_emittersPlacedCounter += 1;
    if ((gv_emittersPlacedCounter <= 6)) {
        auto76C38593_val = lp_buttonIndex;
        if (auto76C38593_val == 1) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_Baneling;
            gv_banelingEmitters -= 1;
        }
        else if (auto76C38593_val == 2) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_Mutalisk;
            gv_mutaliskEmitters -= 1;
        }
        else if (auto76C38593_val == 3) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_NydusWorm;
            gv_nydusWormEmitters -= 1;
        }
        else if (auto76C38593_val == 4) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_Lurker;
            gv_lurkerEmitters -= 1;
        }
        else if (auto76C38593_val == 5) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_BroodLord;
            gv_broodLordEmitters -= 1;
        }
        else if (auto76C38593_val == 6) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_Ultralisk;
            gv_ultraliskEmitters -= 1;
        }
        else {
        }
    }

    SoundPlayForPlayer(SoundLink("ButtonPressedShort", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((gv_doubleFlashbackChoice == true)) {
        gv_doubleFlashbackChoice = false;
        TriggerExecute(gt_UpdateFlashbackDialog, true, false);
    }
    else {
        gv_buttonPressed = true;
        DialogSetVisible(gv_flashbackDialog.lv_dialog, PlayerGroupAll(), false);
        UISetCursorVisible(PlayerGroupAll(), false);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_InitializeNovaMission("Nova06");
    TriggerExecute(gt_Init01Technology, true, false);
    libNovC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_InitFlashbackDialog, true, false);
    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_BriefingQ, true, true);
        ConsoleCommand("exit", true, true);
    }

    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNovC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaVoice6", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_02_ZERG);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_03_ZERG_BULLIES);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_CIVILIANS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_03_ZERG_BULLIES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 150);
    PlayerModifyPropertyInt(gv_pLAYER_03_ZERG_BULLIES, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_ZERG_BULLIES, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerSetState(gv_pLAYER_02_ZERG, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_03_ZERG_BULLIES, c_playerStateFoodIgnored, true);
    libNCMI_gf_NM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto47F8335C_g;
    int auto47F8335C_u;
    unit auto47F8335C_var;
    unitgroup auto0CBE7955_g;
    int auto0CBE7955_u;
    unit auto0CBE7955_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, PointFromId(7), 45.0);
    gv_artanis = UnitLastCreated();
    libNCMI_gf_SetNovaHeroUnit(gv_artanis);
    libNCMI_gf_EnableDisableHeroReviveSystem(true, gv_pLAYER_01_USER);
    libNCMI_gf_SetAllWorkerRallyPointsForPlayer(gv_pLAYER_01_USER);
    gv_zergStructuresRemaining = UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    gv_zergStructuresRemaining += UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    gv_zergStructuresRemaining -= 1;
    gv_zergStructuresRemaining -= 3;
    gv_zergStructuresRemaining += 17;
    auto47F8335C_g = UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto47F8335C_u = UnitGroupCount(auto47F8335C_g, c_unitCountAll);
    for (;; auto47F8335C_u -= 1) {
        auto47F8335C_var = UnitGroupUnitFromEnd(auto47F8335C_g, auto47F8335C_u);
        if (auto47F8335C_var == null) { break; }
        UnitGroupAdd(gv_finalBaseZerg, auto47F8335C_var);
        libNtve_gf_PauseUnit(auto47F8335C_var, true);
        libNtve_gf_ShowHideUnit(auto47F8335C_var, false);
    }
    auto0CBE7955_g = UnitGroup("Beacon_Nova", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CBE7955_u = UnitGroupCount(auto0CBE7955_g, c_unitCountAll);
    for (;; auto0CBE7955_u -= 1) {
        auto0CBE7955_var = UnitGroupUnitFromEnd(auto0CBE7955_g, auto0CBE7955_u);
        if (auto0CBE7955_var == null) { break; }
        libNCMI_gf_SetUnitInfoTextCampaign(auto0CBE7955_var, StringExternal("Param/Value/DA4EE5EA"), StringExternal("Param/Value/02CFAD80"), null);
    }
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(157), StringToText(""), StringExternal("Param/Value/5437F9ED"), StringExternal("Param/Value/424ECEA0"));
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1026), StringToText(""), StringToText(""), StringToText(""));
    UnitSetState(UnitFromId(1026), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1026), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(1026), c_unitStateTooltipable, false);
    UnitSetState(UnitFromId(1026), c_unitStateCursorable, false);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(196), StringToText(""), StringToText(""), StringToText(""));
    UnitSetState(UnitFromId(196), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(196), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(196), c_unitStateTooltipable, false);
    UnitSetState(UnitFromId(196), c_unitStateCursorable, false);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(871), StringToText(""), StringToText(""), StringToText(""));
    UnitSetState(UnitFromId(871), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(871), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(871), c_unitStateTooltipable, false);
    UnitSetState(UnitFromId(871), c_unitStateCursorable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "nDLC_Music_Nova06_Main";
    gv_mapMusicTrack5 = "nDLC_Music_Nova06_Intro";
    gv_mapMusicTrack6 = "nDLC_Music_Nova06_Outro";
    gv_mapMusicTrack4 = "nDLC_Music_Nova06_Flashback";
    gv_mapMusicTrack3 = "Ambience_Nova06_MainAmbience";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(75), RegionFromId(72), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(76), RegionFromId(74), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8C400BC4_g;
    int auto8C400BC4_var;
    playergroup autoACF2C5FD_g;
    int autoACF2C5FD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        auto8C400BC4_g = gv_zergPlayerGroup;
        auto8C400BC4_var = -1;
        while (true) {
            auto8C400BC4_var = PlayerGroupNextPlayer(auto8C400BC4_g, auto8C400BC4_var);
            if (auto8C400BC4_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto8C400BC4_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto8C400BC4_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto8C400BC4_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto8C400BC4_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto8C400BC4_var, "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto8C400BC4_var, "CentrificalHooks", 1);
            TechTreeUpgradeAddLevel(auto8C400BC4_var, "GlialReconstitution", 1);
            TechTreeUpgradeAddLevel(auto8C400BC4_var, "HydraliskSpeedUpgrade", 1);
        }
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        autoACF2C5FD_g = gv_zergPlayerGroup;
        autoACF2C5FD_var = -1;
        while (true) {
            autoACF2C5FD_var = PlayerGroupNextPlayer(autoACF2C5FD_g, autoACF2C5FD_var);
            if (autoACF2C5FD_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoACF2C5FD_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(autoACF2C5FD_var, "zerglingattackspeed", 1);
            TechTreeUpgradeAddLevel(autoACF2C5FD_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(autoACF2C5FD_var, "HotsMuscularAugments", 1);
            TechTreeUpgradeAddLevel(autoACF2C5FD_var, "ChitinousPlating", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_AddMissionTipCampaign("Liberator");
    libNCMI_gf_AddMissionTipCampaign("Raven");
    libComC_gf_AddUnitTypeToUnitHelpPanel("Zergling", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Roach", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("BroodLord", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Queen", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Overseer", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Lurker", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingQ, true, true);
    ConsoleCommand("exit", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugIntro_Init () {
    gt_DebugIntro = TriggerCreate("gt_DebugIntro_Func");
    TriggerAddEventChatMessage(gt_DebugIntro, 1, "Intro", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_SetHeroPanelUnit(1, gv_artanis);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/37D1E31D"), null, PointFromId(154));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_pLAYER_01_USER);
    TriggerExecute(gt_SubwayIntroductionQ, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSearchCoordinatesCreate, true, true);
    if ((gv_coordinatesSearched[1] == false) && (libNCMI_gf_GameIsOver() == false)) {
        libNCMI_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(5)), StringExternal("Param/Value/E926771A"));
        gv_coordinatePings[1] = PingLastCreated();
    }

    if ((gv_coordinatesSearched[2] == false) && (libNCMI_gf_GameIsOver() == false)) {
        libNCMI_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(6)), StringExternal("Param/Value/46A30A9B"));
        gv_coordinatePings[2] = PingLastCreated();
    }

    Wait(4.0, c_timeReal);
    if ((libNCMI_gf_GameIsOver() == false) && (gv_searchCount == 0)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00082", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Checks
//--------------------------------------------------------------------------------------------------
bool gt_BeaconChecks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoB37B81DC_ae = 5;
    const int autoB37B81DC_ai = 1;
    unitgroup autoC5258A0D_g;
    int autoC5258A0D_u;
    unit autoC5258A0D_var;
    int auto93B6148A_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_artanis) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoB37B81DC_ai >= 0 && lv_i <= autoB37B81DC_ae) || (autoB37B81DC_ai < 0 && lv_i >= autoB37B81DC_ae) ) ; lv_i += autoB37B81DC_ai ) {
        if ((gv_coordinatesSearched[lv_i] == false) && (libNtve_gf_UnitInRegion(gv_artanis, RegionFromName(("Evidence " + IntToString(lv_i)))) == true)) {
            if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(RegionGetCenter(RegionFromName(("Evidence " + IntToString(lv_i)))), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                if ((TimerGetRemaining(gv_killNearbyZergTransmissionTimer) < 0.1)) {
                    TimerStart(gv_killNearbyZergTransmissionTimer, 60.0, false, c_timeAI);
                    TriggerExecute(gt_KillNearbyZergQ, true, false);
                }

            }
            else {
                gv_coordinatesSearched[lv_i] = true;
                gv_searchCount += 1;
                TriggerExecute(gt_ObjectiveSearchCoordinatesUpdate, true, false);
                autoC5258A0D_g = UnitGroup("Beacon_Nova", 0, RegionCircle(RegionGetCenter(RegionFromName(("Evidence " + IntToString(lv_i)))), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoC5258A0D_u = UnitGroupCount(autoC5258A0D_g, c_unitCountAll);
                for (;; autoC5258A0D_u -= 1) {
                    autoC5258A0D_var = UnitGroupUnitFromEnd(autoC5258A0D_g, autoC5258A0D_u);
                    if (autoC5258A0D_var == null) { break; }
                    UnitKill(autoC5258A0D_var);
                }
                PingDestroy(gv_coordinatePings[lv_i]);
                if ((gv_searchCount == 2)) {
                    TriggerExecute(gt_Autosave2Q, true, false);
                }

                if ((gv_searchCount == 4)) {
                    TriggerExecute(gt_Autosave4Q, true, false);
                }

                auto93B6148A_val = lv_i;
                if (auto93B6148A_val == 1) {
                    Wait(1.0, c_timeReal);
                    TriggerExecute(gt_Top1Q, true, false);
                }
                else if (auto93B6148A_val == 2) {
                    Wait(1.0, c_timeReal);
                    TriggerExecute(gt_Right1Q, true, false);
                }
                else if (auto93B6148A_val == 3) {
                    Wait(1.0, c_timeReal);
                    TriggerExecute(gt_Top2Q, true, false);
                }
                else if (auto93B6148A_val == 4) {
                    Wait(1.0, c_timeReal);
                    TriggerExecute(gt_Right2Q, true, false);
                }
                else if (auto93B6148A_val == 5) {
                    TriggerExecute(gt_VictorySequence, true, false);
                }
                else {
                }
            }
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeaconChecks_Init () {
    gt_BeaconChecks = TriggerCreate("gt_BeaconChecks_Func");
    TriggerAddEventTimePeriodic(gt_BeaconChecks, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Nearby Zerg Q
//--------------------------------------------------------------------------------------------------
bool gt_KillNearbyZergQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentEvidenceCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentEvidenceCount = gv_searchCount;
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (gv_searchCount > lv_currentEvidenceCount))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00020", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillNearbyZergQ_Init () {
    gt_KillNearbyZergQ = TriggerCreate("gt_KillNearbyZergQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autosave 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_Autosave2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/89E70583"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Autosave2Q_Init () {
    gt_Autosave2Q = TriggerCreate("gt_Autosave2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autosave 4 Q
//--------------------------------------------------------------------------------------------------
bool gt_Autosave4Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/72651A8C"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Autosave4Q_Init () {
    gt_Autosave4Q = TriggerCreate("gt_Autosave4Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Dies 1
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDies1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD7EF4006_g;
    int autoD7EF4006_u;
    unit autoD7EF4006_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD7EF4006_g = UnitGroup("Larva", gv_pLAYER_02_ZERG, RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD7EF4006_u = UnitGroupCount(autoD7EF4006_g, c_unitCountAll);
    for (;; autoD7EF4006_u -= 1) {
        autoD7EF4006_var = UnitGroupUnitFromEnd(autoD7EF4006_g, autoD7EF4006_u);
        if (autoD7EF4006_var == null) { break; }
        UnitKill(autoD7EF4006_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDies1_Init () {
    gt_HatcheryDies1 = TriggerCreate("gt_HatcheryDies1_Func");
    TriggerAddEventUnitDied(gt_HatcheryDies1, UnitRefFromUnit(UnitFromId(102)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Dies 2
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDies2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDBC7F706_g;
    int autoDBC7F706_u;
    unit autoDBC7F706_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDBC7F706_g = UnitGroup("Larva", gv_pLAYER_03_ZERG_BULLIES, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDBC7F706_u = UnitGroupCount(autoDBC7F706_g, c_unitCountAll);
    for (;; autoDBC7F706_u -= 1) {
        autoDBC7F706_var = UnitGroupUnitFromEnd(autoDBC7F706_g, autoDBC7F706_u);
        if (autoDBC7F706_var == null) { break; }
        UnitKill(autoDBC7F706_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDies2_Init () {
    gt_HatcheryDies2 = TriggerCreate("gt_HatcheryDies2_Func");
    TriggerAddEventUnitDied(gt_HatcheryDies2, UnitRefFromUnit(UnitFromId(3187)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Dies 3
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryDies3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC4F970E0_g;
    int autoC4F970E0_u;
    unit autoC4F970E0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4F970E0_g = UnitGroup("Larva", gv_pLAYER_03_ZERG_BULLIES, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4F970E0_u = UnitGroupCount(autoC4F970E0_g, c_unitCountAll);
    for (;; autoC4F970E0_u -= 1) {
        autoC4F970E0_var = UnitGroupUnitFromEnd(autoC4F970E0_g, autoC4F970E0_u);
        if (autoC4F970E0_var == null) { break; }
        UnitKill(autoC4F970E0_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryDies3_Init () {
    gt_HatcheryDies3 = TriggerCreate("gt_HatcheryDies3_Func");
    TriggerAddEventUnitDied(gt_HatcheryDies3, UnitRefFromUnit(UnitFromId(3186)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Baneling Nests Q
//--------------------------------------------------------------------------------------------------
bool gt_KillBanelingNestsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_BULLIES))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "BanelingNest"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("BanelingNest", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_banelingLevel -= 100;
    gv_zerglingLevel += libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
    gv_zergTypesEliminated += 1;
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00071", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillBanelingNestsQ_Init () {
    gt_KillBanelingNestsQ = TriggerCreate("gt_KillBanelingNestsQ_Func");
    TriggerAddEventUnitDied(gt_KillBanelingNestsQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Spires Q
//--------------------------------------------------------------------------------------------------
bool gt_KillSpiresQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_BULLIES))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Spire"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Spire", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_mutaliskLevel -= 100;
    gv_zerglingLevel += libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
    gv_zergTypesEliminated += 1;
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00009", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillSpiresQ_Init () {
    gt_KillSpiresQ = TriggerCreate("gt_KillSpiresQ_Func");
    TriggerAddEventUnitDied(gt_KillSpiresQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Nydus Networks Q
//--------------------------------------------------------------------------------------------------
bool gt_KillNydusNetworksQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_BULLIES))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NydusNetwork"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("NydusNetwork", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_nydusWormLevel -= 100;
    gv_zerglingLevel += libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
    gv_zergTypesEliminated += 1;
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00092", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillNydusNetworksQ_Init () {
    gt_KillNydusNetworksQ = TriggerCreate("gt_KillNydusNetworksQ_Func");
    TriggerAddEventUnitDied(gt_KillNydusNetworksQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Lurker Dens Q
//--------------------------------------------------------------------------------------------------
bool gt_KillLurkerDensQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_BULLIES))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "LurkerDen"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("LurkerDen", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_lurkerLevel -= 100;
    gv_hydraliskLevel += libNtve_gf_DifficultyValueInt(0, 0, 1, 1);
    gv_zergTypesEliminated += 1;
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00094", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillLurkerDensQ_Init () {
    gt_KillLurkerDensQ = TriggerCreate("gt_KillLurkerDensQ_Func");
    TriggerAddEventUnitDied(gt_KillLurkerDensQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Greater Spires Q
//--------------------------------------------------------------------------------------------------
bool gt_KillGreaterSpiresQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_BULLIES))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "GreaterSpire"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("GreaterSpire", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_broodLordLevel -= 100;
    gv_hydraliskLevel += libNtve_gf_DifficultyValueInt(0, 0, 1, 1);
    gv_zergTypesEliminated += 1;
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00073", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillGreaterSpiresQ_Init () {
    gt_KillGreaterSpiresQ = TriggerCreate("gt_KillGreaterSpiresQ_Func");
    TriggerAddEventUnitDied(gt_KillGreaterSpiresQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Ultralisk Caverns Q
//--------------------------------------------------------------------------------------------------
bool gt_KillUltraliskCavernsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_BULLIES))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UltraliskCavern"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("UltraliskCavern", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_ultraliskLevel -= 100;
    gv_hydraliskLevel += libNtve_gf_DifficultyValueInt(0, 0, 1, 1);
    gv_zergTypesEliminated += 1;
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00013", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillUltraliskCavernsQ_Init () {
    gt_KillUltraliskCavernsQ = TriggerCreate("gt_KillUltraliskCavernsQ_Func");
    TriggerAddEventUnitDied(gt_KillUltraliskCavernsQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zerg Camp Top 5
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZergCampTop5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateZergCamp(RegionFromId(61), 4, ge_PRESET_ZergTypes_Roach);
    gf_RunZergCampAI(RegionFromId(61), RegionFromId(62), PointFromId(2944));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZergCampTop5_Init () {
    gt_SpawnZergCampTop5 = TriggerCreate("gt_SpawnZergCampTop5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zerg Camp Right 5
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZergCampRight5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateZergCamp(RegionFromId(65), 4, ge_PRESET_ZergTypes_Roach);
    gf_RunZergCampAI(RegionFromId(65), RegionFromId(66), PointFromId(2946));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZergCampRight5_Init () {
    gt_SpawnZergCampRight5 = TriggerCreate("gt_SpawnZergCampRight5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zerg Camp 6
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZergCamp6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4CBA7C94_g;
    int auto4CBA7C94_u;
    unit auto4CBA7C94_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto4CBA7C94_g = gv_finalBaseZerg;
    auto4CBA7C94_u = UnitGroupCount(auto4CBA7C94_g, c_unitCountAll);
    for (;; auto4CBA7C94_u -= 1) {
        auto4CBA7C94_var = UnitGroupUnitFromEnd(auto4CBA7C94_g, auto4CBA7C94_u);
        if (auto4CBA7C94_var == null) { break; }
        libNtve_gf_PauseUnit(auto4CBA7C94_var, false);
        libNtve_gf_ShowHideUnit(auto4CBA7C94_var, true);
    }
    gf_CreateZergCamp(RegionFromId(63), 4, ge_PRESET_ZergTypes_Roach);
    gf_RunZergCampAI(RegionFromId(63), RegionFromId(64), PointFromId(2945));
    gf_CreateZergCamp(RegionFromId(67), 4, ge_PRESET_ZergTypes_Roach);
    gf_RunZergCampAI(RegionFromId(67), RegionFromId(68), PointFromId(2947));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZergCamp6_Init () {
    gt_SpawnZergCamp6 = TriggerCreate("gt_SpawnZergCamp6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Despawn
//--------------------------------------------------------------------------------------------------
bool gt_OverseerDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8DDBCCBA_g;
    int auto8DDBCCBA_u;
    unit auto8DDBCCBA_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8DDBCCBA_g = UnitGroup("Overseer", gv_pLAYER_02_ZERG, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8DDBCCBA_u = UnitGroupCount(auto8DDBCCBA_g, c_unitCountAll);
    for (;; auto8DDBCCBA_u -= 1) {
        auto8DDBCCBA_var = UnitGroupUnitFromEnd(auto8DDBCCBA_g, auto8DDBCCBA_u);
        if (auto8DDBCCBA_var == null) { break; }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG, RegionCircle(UnitGetPosition(auto8DDBCCBA_var), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2), c_unitCountAlive) <= 1)) {
            if ((libNtve_gf_UnitInRegion(auto8DDBCCBA_var, RegionFromId(69)) == true)) {
                UnitRemove(auto8DDBCCBA_var);
            }
            else {
                UnitIssueOrder(auto8DDBCCBA_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(69))), c_orderQueueReplace);
                UnitIssueOrder(auto8DDBCCBA_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerDespawn_Init () {
    gt_OverseerDespawn = TriggerCreate("gt_OverseerDespawn_Func");
    TriggerAddEventTimePeriodic(gt_OverseerDespawn, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Equipment Pickup Q
//--------------------------------------------------------------------------------------------------
bool gt_NewEquipmentPickupQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_newEquipmentFound = true;
    PingDestroy(gv_newEquipmentPing);
    TriggerExecute(gt_ObjectiveRecoverEquipmentComplete, true, true);
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00076", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewEquipmentPickupQ_Init () {
    gt_NewEquipmentPickupQ = TriggerCreate("gt_NewEquipmentPickupQ_Func");
    TriggerAddEventUnitAbility(gt_NewEquipmentPickupQ, UnitRefFromUnit(UnitFromId(546)), AbilityCommand("PickupNovaEquipment", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Bonus Objective Camp Q
//--------------------------------------------------------------------------------------------------
bool gt_SpawnBonusObjectiveCampQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateZergCamp(RegionFromId(39), 4, ge_PRESET_ZergTypes_Roach);
    gf_RunZergCampAI(RegionFromId(39), RegionFromId(41), PointFromId(1426));
    Wait(8.0, c_timeReal);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    while (!((TimerGetRemaining(gv_bonusDiscoveryDelayTimer) < 1))) {
        Wait(1.0, c_timeGame);
    }
    if (((libNCMI_gf_GameIsOver() == true) || (gv_newEquipmentFound == true))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00181", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectiveRecoverEquipmentCreate, true, false);
    if ((libNCMI_gf_GameIsOver() == false) && (gv_newEquipmentFound == false)) {
        libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(546)), StringExternal("Param/Value/B63EB8D2"));
        gv_newEquipmentPing = PingLastCreated();
        Wait(2.0, c_timeReal);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnBonusObjectiveCampQ_Init () {
    gt_SpawnBonusObjectiveCampQ = TriggerCreate("gt_SpawnBonusObjectiveCampQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Left Bridge
//--------------------------------------------------------------------------------------------------
bool gt_ActivateLeftBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(261), Order(AbilityCommand("PortCity_Bridge_UnitNE8Out", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(826), Order(AbilityCommand("PortCity_Bridge_UnitSW8Out", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2982), Order(AbilityCommand("BridgeIconOpenedNE", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateLeftBridge_Init () {
    gt_ActivateLeftBridge = TriggerCreate("gt_ActivateLeftBridge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Right Bridge
//--------------------------------------------------------------------------------------------------
bool gt_ActivateRightBridge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(240), Order(AbilityCommand("PortCity_Bridge_UnitNE8Out", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(574), Order(AbilityCommand("PortCity_Bridge_UnitSW8Out", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2986), Order(AbilityCommand("BridgeIconOpenedNE", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateRightBridge_Init () {
    gt_ActivateRightBridge = TriggerCreate("gt_ActivateRightBridge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Subway Introduction Q
//--------------------------------------------------------------------------------------------------
bool gt_SubwayIntroductionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_pustuleDamaged;

    // Automatic Variable Declarations
    unitgroup auto9AE26DA6_g;
    int auto9AE26DA6_u;
    unit auto9AE26DA6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            break;
        }

        lv_pustuleDamaged = false;
        auto9AE26DA6_g = UnitGroup("InfestationPustule", gv_pLAYER_03_ZERG_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9AE26DA6_u = UnitGroupCount(auto9AE26DA6_g, c_unitCountAll);
        for (;; auto9AE26DA6_u -= 1) {
            auto9AE26DA6_var = UnitGroupUnitFromEnd(auto9AE26DA6_g, auto9AE26DA6_u);
            if (auto9AE26DA6_var == null) { break; }
            if ((UnitGetPropertyFixed(auto9AE26DA6_var, c_unitPropLifePercent, c_unitPropCurrent) < 99.0)) {
                lv_pustuleDamaged = true;
                break;
            }

        }
        if ((lv_pustuleDamaged == true)) {
            break;
        }

    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (gv_subwayExitsCleared > 0))) {
        return true;
    }

    TriggerExecute(gt_SubwayPings, true, false);
    Wait(1.0, c_timeReal);
    if (((libNCMI_gf_GameIsOver() == true) || (gv_subwayExitsCleared > 0))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00116", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00117", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubwayIntroductionQ_Init () {
    gt_SubwayIntroductionQ = TriggerCreate("gt_SubwayIntroductionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Subway Exit Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt_SubwayExitClearedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_subwayExitsClearedCurrent;
    point lv_pingPoint;

    // Automatic Variable Declarations
    unit autoDACEF4C3_val;
    int auto96F68164_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_subwayExitsCleared += 1;
    lv_subwayExitsClearedCurrent = gv_subwayExitsCleared;
    autoDACEF4C3_val = EventUnit();
    if (autoDACEF4C3_val == UnitFromId(1876)) {
        Wait(1.5, c_timeReal);
        UnitSetOwner(UnitFromId(1026), gv_pLAYER_01_USER, true);
        UnitIssueOrder(UnitFromId(1026), Order(AbilityCommand("SubwayEntrancePower", 1)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1026), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(2398)), c_orderQueueAddToEnd);
        libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1026), null, StringExternal("Param/Value/D71D4F6E"), StringExternal("Param/Value/E5E3994E"));
        UnitSetState(UnitFromId(1026), c_unitStateSelectable, true);
        UnitSetState(UnitFromId(1026), c_unitStateTargetable, true);
        UnitSetState(UnitFromId(1026), c_unitStateTooltipable, true);
        UnitSetState(UnitFromId(1026), c_unitStateCursorable, true);
        lv_pingPoint = PointFromId(2396);
        if ((gv_subwayPings[3] != c_invalidPingId)) {
            PingSetModel(gv_subwayPings[3], "BeaconScoutPing");
            PingSetPosition(gv_subwayPings[3], PointFromId(2396));
            PingSetScale(gv_subwayPings[3], 0.6);
            PingSetTooltip(gv_subwayPings[3], StringExternal("Param/Value/FAF73833"));
        }

    }
    else if (autoDACEF4C3_val == UnitFromId(3274)) {
        Wait(1.5, c_timeReal);
        UnitSetOwner(UnitFromId(196), gv_pLAYER_01_USER, true);
        UnitIssueOrder(UnitFromId(196), Order(AbilityCommand("SubwayEntrancePower", 1)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(196), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(3266)), c_orderQueueAddToEnd);
        libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(196), null, StringExternal("Param/Value/572ED4DF"), StringExternal("Param/Value/409D5864"));
        UnitSetState(UnitFromId(196), c_unitStateSelectable, true);
        UnitSetState(UnitFromId(196), c_unitStateTargetable, true);
        UnitSetState(UnitFromId(196), c_unitStateTooltipable, true);
        UnitSetState(UnitFromId(196), c_unitStateCursorable, true);
        lv_pingPoint = PointFromId(3284);
        if ((gv_subwayPings[2] != c_invalidPingId)) {
            PingSetModel(gv_subwayPings[2], "BeaconScoutPing");
            PingSetPosition(gv_subwayPings[2], PointFromId(3284));
            PingSetScale(gv_subwayPings[2], 0.6);
            PingSetTooltip(gv_subwayPings[2], StringExternal("Param/Value/62C97625"));
        }

    }
    else if (autoDACEF4C3_val == UnitFromId(1025)) {
        Wait(1.5, c_timeReal);
        UnitSetOwner(UnitFromId(871), gv_pLAYER_01_USER, true);
        UnitIssueOrder(UnitFromId(871), Order(AbilityCommand("SubwayEntrancePower", 1)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(871), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(2399)), c_orderQueueAddToEnd);
        libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(871), null, StringExternal("Param/Value/C46D1B64"), StringExternal("Param/Value/45BE4E51"));
        UnitSetState(UnitFromId(871), c_unitStateSelectable, true);
        UnitSetState(UnitFromId(871), c_unitStateTargetable, true);
        UnitSetState(UnitFromId(871), c_unitStateTooltipable, true);
        UnitSetState(UnitFromId(871), c_unitStateCursorable, true);
        lv_pingPoint = PointFromId(2397);
        if ((gv_subwayPings[4] != c_invalidPingId)) {
            PingSetModel(gv_subwayPings[4], "BeaconScoutPing");
            PingSetPosition(gv_subwayPings[4], PointFromId(2397));
            PingSetScale(gv_subwayPings[4], 0.6);
            PingSetTooltip(gv_subwayPings[4], StringExternal("Param/Value/AC5B1011"));
        }

    }
    else {
    }
    if ((UnitGetOwner(UnitFromId(157)) == gv_pLAYER_04_CIVILIANS)) {
        UnitSetOwner(UnitFromId(157), gv_pLAYER_01_USER, true);
        UnitIssueOrder(UnitFromId(157), Order(AbilityCommand("SubwayEntrancePower", 1)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(157), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(3267)), c_orderQueueAddToEnd);
        libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(157), null, StringExternal("Param/Value/3C827656"), StringExternal("Param/Value/4F2CCADE"));
        UnitIssueOrder(UnitFromId(157), Order(AbilityCommand("SubwayEntrancePower", 1)), c_orderQueueReplace);
    }

    TriggerQueueEnter();
    if ((lv_subwayExitsClearedCurrent != gv_subwayExitsCleared)) {
        return true;
    }

    if ((TriggerIsEnabled(gt_SubwayPings) == true)) {
        TriggerExecute(gt_SubwayPings, true, false);
        Wait(1.0, c_timeReal);
    }
    else {
        if ((TimerGetRemaining(gv_subwayPingCooldown) < 0.1)) {
            libNCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), lv_pingPoint, 5.0, Color(0.00, 100.00, 0.00));
            Wait(1.0, c_timeReal);
        }

    }
    Wait(1.5, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    auto96F68164_val = gv_subwayExitsCleared;
    if (auto96F68164_val == 1) {
        gv_firstClearTransmissionHeard = true;
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00118", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00123", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto96F68164_val == 2) {
        if ((gv_firstClearTransmissionHeard == false)) {
            gv_firstClearTransmissionHeard = true;
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00118", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00123", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00183", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else if (auto96F68164_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00184", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubwayExitClearedQ_Init () {
    gt_SubwayExitClearedQ = TriggerCreate("gt_SubwayExitClearedQ_Func");
    TriggerAddEventUnitDied(gt_SubwayExitClearedQ, UnitRefFromUnit(UnitFromId(1876)));
    TriggerAddEventUnitDied(gt_SubwayExitClearedQ, UnitRefFromUnit(UnitFromId(3274)));
    TriggerAddEventUnitDied(gt_SubwayExitClearedQ, UnitRefFromUnit(UnitFromId(1025)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Subway Pings
//--------------------------------------------------------------------------------------------------
bool gt_SubwayPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), PointFromId(3283), 5.0, Color(0.00, 100.00, 0.00));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconScoutPing", PointFromId(3283), Color(100.00, 100.00, 100.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/38EA023C"));
    PingSetScale(PingLastCreated(), 0.6);
    gv_subwayPings[1] = PingLastCreated();
    libNCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), PointFromId(3284), 5.0, Color(0.00, 100.00, 0.00));
    if ((UnitGetOwner(UnitFromId(196)) == gv_pLAYER_01_USER)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconScoutPing", PointFromId(3284), Color(100.00, 100.00, 100.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8088CEB8"));
    }
    else {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconRallyPing", PointFromId(3284), Color(100.00, 100.00, 100.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/518B1AE9"));
    }
    PingSetScale(PingLastCreated(), 0.6);
    gv_subwayPings[2] = PingLastCreated();
    libNCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), PointFromId(2396), 5.0, Color(0.00, 100.00, 0.00));
    if ((UnitGetOwner(UnitFromId(1026)) == gv_pLAYER_01_USER)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconScoutPing", PointFromId(2396), Color(100.00, 100.00, 100.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1B157E14"));
    }
    else {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconRallyPing", PointFromId(2396), Color(100.00, 100.00, 100.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/638C76EB"));
    }
    PingSetScale(PingLastCreated(), 0.6);
    gv_subwayPings[3] = PingLastCreated();
    libNCMI_gf_PingMinimapCampaign(PlayerGroupSingle(gv_pLAYER_01_USER), PointFromId(2397), 5.0, Color(0.00, 100.00, 0.00));
    if ((UnitGetOwner(UnitFromId(871)) == gv_pLAYER_01_USER)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconScoutPing", PointFromId(2397), Color(100.00, 100.00, 100.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/BD4CF598"));
    }
    else {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconRallyPing", PointFromId(2397), Color(100.00, 100.00, 100.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/64272F9B"));
    }
    PingSetScale(PingLastCreated(), 0.6);
    gv_subwayPings[4] = PingLastCreated();
    TimerStart(gv_subwayPingCooldown, 5.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubwayPings_Init () {
    gt_SubwayPings = TriggerCreate("gt_SubwayPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Q
//--------------------------------------------------------------------------------------------------
bool gt_HatcheryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(102)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(UnitFromId(102)) == false))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00172", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00173", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HatcheryQ_Init () {
    gt_HatcheryQ = TriggerCreate("gt_HatcheryQ_Func");
    TriggerAddEventUnitRegion(gt_HatcheryQ, null, RegionFromId(104), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers();
    TriggerExecute(gt_AttackWaves1, true, false);
    TriggerExecute(gt_NydusWormAI, true, false);
    TriggerExecute(gt_NydusWormSpawning, true, false);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradeCasualNormal, true, false);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 0) == 1)) {
        TriggerExecute(gt_AIUpgradeHard, true, false);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        TriggerExecute(gt_AIUpgradeBrutal, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6D62ED9A_g;
    int auto6D62ED9A_var;
    playergroup auto0589D419_g;
    int auto0589D419_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto6D62ED9A_g = gv_zergPlayerGroup;
    auto6D62ED9A_var = -1;
    while (true) {
        auto6D62ED9A_var = PlayerGroupNextPlayer(auto6D62ED9A_g, auto6D62ED9A_var);
        if (auto6D62ED9A_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6D62ED9A_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto6D62ED9A_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto6D62ED9A_var, "ZergMissileWeaponsLevel1", 1);
    }
    Wait(600.0, c_timeAI);
    auto0589D419_g = gv_zergPlayerGroup;
    auto0589D419_var = -1;
    while (true) {
        auto0589D419_var = PlayerGroupNextPlayer(auto0589D419_g, auto0589D419_var);
        if (auto0589D419_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0589D419_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0589D419_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeCasualNormal_Init () {
    gt_AIUpgradeCasualNormal = TriggerCreate("gt_AIUpgradeCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Hard
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCA5BE632_g;
    int autoCA5BE632_var;
    playergroup autoB3C9C046_g;
    int autoB3C9C046_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    autoCA5BE632_g = gv_zergPlayerGroup;
    autoCA5BE632_var = -1;
    while (true) {
        autoCA5BE632_var = PlayerGroupNextPlayer(autoCA5BE632_g, autoCA5BE632_var);
        if (autoCA5BE632_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoCA5BE632_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCA5BE632_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCA5BE632_var, "ZergMissileWeaponsLevel2", 1);
    }
    Wait(600.0, c_timeAI);
    autoB3C9C046_g = gv_zergPlayerGroup;
    autoB3C9C046_var = -1;
    while (true) {
        autoB3C9C046_var = PlayerGroupNextPlayer(autoB3C9C046_g, autoB3C9C046_var);
        if (autoB3C9C046_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoB3C9C046_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoB3C9C046_var, "ZergFlyerArmorsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeHard_Init () {
    gt_AIUpgradeHard = TriggerCreate("gt_AIUpgradeHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto39E21F26_g;
    int auto39E21F26_var;
    playergroup autoDD679E80_g;
    int autoDD679E80_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto39E21F26_g = gv_zergPlayerGroup;
    auto39E21F26_var = -1;
    while (true) {
        auto39E21F26_var = PlayerGroupNextPlayer(auto39E21F26_g, auto39E21F26_var);
        if (auto39E21F26_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto39E21F26_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto39E21F26_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto39E21F26_var, "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto39E21F26_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto39E21F26_var, "ZergFlyerArmorsLevel2", 1);
    }
    Wait(600.0, c_timeAI);
    autoDD679E80_g = gv_zergPlayerGroup;
    autoDD679E80_var = -1;
    while (true) {
        autoDD679E80_var = PlayerGroupNextPlayer(autoDD679E80_g, autoDD679E80_var);
        if (autoDD679E80_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoDD679E80_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoDD679E80_var, "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoDD679E80_var, "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoDD679E80_var, "ZergGroundArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(autoDD679E80_var, "ZergFlyerArmorsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeBrutal_Init () {
    gt_AIUpgradeBrutal = TriggerCreate("gt_AIUpgradeBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 2 Corruptor Patrol
//--------------------------------------------------------------------------------------------------
bool gt_Top2CorruptorPatrol_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    int autoD31BDD38_n;
    int autoD31BDD38_i;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(102), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD31BDD38_n = libNtve_gf_DifficultyValueInt(0, 0, 3, 5);
    for (autoD31BDD38_i = 1; autoD31BDD38_i <= autoD31BDD38_n; autoD31BDD38_i += 1) {
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        UnitCreate(1, "Corruptor", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(RegionFromId(53)), 270.0);
        UnitGroupAdd(lv_attackGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    if ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true)) {
        return true;
    }

    AIAttackWaveSetTargetPatrol(gv_pLAYER_03_ZERG_BULLIES, 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_ZERG_BULLIES, RegionGetCenter(RegionFromId(60)));
    AIAttackWaveUseGroup(gv_pLAYER_03_ZERG_BULLIES, lv_attackGroup);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2423), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2424), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2425), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2426), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2427), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2424), false);
    AIAttackWaveSend(gv_pLAYER_03_ZERG_BULLIES, 0, false);
    while (true) {
        Wait(5.0, c_timeAI);
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true)) {
            Wait(1.0, c_timeAI);
            TriggerExecute(gt_Top2CorruptorPatrol, true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top2CorruptorPatrol_Init () {
    gt_Top2CorruptorPatrol = TriggerCreate("gt_Top2CorruptorPatrol_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 2 Corruptor Patrol
//--------------------------------------------------------------------------------------------------
bool gt_Right2CorruptorPatrol_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    int autoA633A958_n;
    int autoA633A958_i;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(103), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA633A958_n = libNtve_gf_DifficultyValueInt(0, 0, 3, 5);
    for (autoA633A958_i = 1; autoA633A958_i <= autoA633A958_n; autoA633A958_i += 1) {
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        UnitCreate(1, "Corruptor", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(RegionFromId(60)), 270.0);
        UnitGroupAdd(lv_attackGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    if ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true)) {
        return true;
    }

    AIAttackWaveSetTargetPatrol(gv_pLAYER_03_ZERG_BULLIES, 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_ZERG_BULLIES, RegionGetCenter(RegionFromId(60)));
    AIAttackWaveUseGroup(gv_pLAYER_03_ZERG_BULLIES, lv_attackGroup);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2413), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2420), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2421), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2422), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2413), false);
    AIAttackWaveSend(gv_pLAYER_03_ZERG_BULLIES, 0, false);
    while (true) {
        Wait(5.0, c_timeAI);
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true)) {
            Wait(1.0, c_timeAI);
            TriggerExecute(gt_Right2CorruptorPatrol, true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right2CorruptorPatrol_Init () {
    gt_Right2CorruptorPatrol = TriggerCreate("gt_Right2CorruptorPatrol_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Corruptor Patrol
//--------------------------------------------------------------------------------------------------
bool gt_EndCorruptorPatrol_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    int autoDE0F87BE_n;
    int autoDE0F87BE_i;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE0F87BE_n = libNtve_gf_DifficultyValueInt(0, 0, 3, 5);
    for (autoDE0F87BE_i = 1; autoDE0F87BE_i <= autoDE0F87BE_n; autoDE0F87BE_i += 1) {
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        UnitCreate(1, "Corruptor", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(2947), 270.0);
        UnitGroupAdd(lv_attackGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    if ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true)) {
        return true;
    }

    AIAttackWaveSetTargetPatrol(gv_pLAYER_03_ZERG_BULLIES, 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2947));
    AIAttackWaveUseGroup(gv_pLAYER_03_ZERG_BULLIES, lv_attackGroup);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2990), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2994), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2995), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2997), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2998), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(3002), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(3003), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ZERG_BULLIES, PointFromId(2990), false);
    AIAttackWaveSend(gv_pLAYER_03_ZERG_BULLIES, 0, false);
    while (true) {
        Wait(5.0, c_timeAI);
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == true)) {
            Wait(1.0, c_timeAI);
            TriggerExecute(gt_EndCorruptorPatrol, true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndCorruptorPatrol_Init () {
    gt_EndCorruptorPatrol = TriggerCreate("gt_EndCorruptorPatrol_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves 1
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaves1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_currentSpawnRegion;

    // Automatic Variable Declarations
    int auto88FED79F_n;
    int auto88FED79F_i;
    int auto8249D60B_n;
    int auto8249D60B_i;
    int autoFA226FC8_n;
    int autoFA226FC8_i;
    int autoE09FDCE4_n;
    int autoE09FDCE4_i;
    int auto58D85301_n;
    int auto58D85301_i;
    int auto8FA13D3B_n;
    int auto8FA13D3B_i;
    int auto8B968058_n;
    int auto8B968058_i;
    int autoB8600C73_n;
    int autoB8600C73_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(170.0, c_timeAI);
    TriggerExecute(gt_FirstAttackQ, true, false);
    Wait(10.0, c_timeAI);
    lv_currentSpawnRegion = gv_rightAttackSpawn;
    gv_rightWaveGroup = UnitGroupEmpty();
    auto88FED79F_n = libNtve_gf_DifficultyValueInt(6, 6, 12, 24);
    for (auto88FED79F_i = 1; auto88FED79F_i <= auto88FED79F_n; auto88FED79F_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto8249D60B_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
    for (auto8249D60B_i = 1; auto8249D60B_i <= auto8249D60B_n; auto8249D60B_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_rightWaveGroup);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
    }

    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    gf_AttackWavePing(gv_rightWaveGroup);
    Wait(170.0, c_timeAI);
    TriggerExecute(gt_SecondAttackQ, true, false);
    Wait(10.0, c_timeAI);
    lv_currentSpawnRegion = gv_topAttackSpawn;
    autoFA226FC8_n = libNtve_gf_DifficultyValueInt(6, 6, 12, 24);
    for (autoFA226FC8_i = 1; autoFA226FC8_i <= autoFA226FC8_n; autoFA226FC8_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoE09FDCE4_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
    for (autoE09FDCE4_i = 1; autoE09FDCE4_i <= autoE09FDCE4_n; autoE09FDCE4_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_topWaveGroup);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
    }

    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    gf_AttackWavePing(gv_topWaveGroup);
    Wait(170.0, c_timeAI);
    TriggerExecute(gt_FirstDoubleAttackQ, true, false);
    Wait(10.0, c_timeAI);
    lv_currentSpawnRegion = gv_topAttackSpawn;
    gv_topWaveGroup = UnitGroupEmpty();
    auto58D85301_n = libNtve_gf_DifficultyValueInt(8, 8, 12, 24);
    for (auto58D85301_i = 1; auto58D85301_i <= auto58D85301_n; auto58D85301_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto8FA13D3B_n = libNtve_gf_DifficultyValueInt(2, 2, 4, 6);
    for (auto8FA13D3B_i = 1; auto8FA13D3B_i <= auto8FA13D3B_n; auto8FA13D3B_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_topWaveGroup);
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    lv_currentSpawnRegion = gv_rightAttackSpawn;
    gv_rightWaveGroup = UnitGroupEmpty();
    auto8B968058_n = libNtve_gf_DifficultyValueInt(8, 8, 12, 24);
    for (auto8B968058_i = 1; auto8B968058_i <= auto8B968058_n; auto8B968058_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoB8600C73_n = libNtve_gf_DifficultyValueInt(2, 2, 4, 6);
    for (autoB8600C73_i = 1; autoB8600C73_i <= autoB8600C73_n; autoB8600C73_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_rightWaveGroup);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
    }

    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    gf_AttackWavePing(gv_rightWaveGroup);
    gf_AttackWavePing(gv_topWaveGroup);
    Wait(170.0, c_timeAI);
    TriggerExecute(gt_FirstEscalationQ, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_AttackWaves2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaves1_Init () {
    gt_AttackWaves1 = TriggerCreate("gt_AttackWaves1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves 2
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaves2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_currentSpawnRegion;
    bool lv_sendExpansionAttack;

    // Automatic Variable Declarations
    int auto6FE9C89C_n;
    int auto6FE9C89C_i;
    int auto75EC1D96_n;
    int auto75EC1D96_i;
    int auto75C51949_n;
    int auto75C51949_i;
    int autoD9FB5A2F_n;
    int autoD9FB5A2F_i;
    int autoDFC8C76B_n;
    int autoDFC8C76B_i;
    int auto60B974A7_n;
    int auto60B974A7_i;
    int auto8F104DD4_n;
    int auto8F104DD4_i;
    int auto97CFC310_n;
    int auto97CFC310_i;
    int auto0F60B1FB_n;
    int auto0F60B1FB_i;
    int autoA6898650_n;
    int autoA6898650_i;
    int auto56D782BA_n;
    int auto56D782BA_i;
    int autoD7046BD7_n;
    int autoD7046BD7_i;
    int auto514D9173_n;
    int auto514D9173_i;
    int autoB2492B0D_n;
    int autoB2492B0D_i;
    int autoC1B89FFE_n;
    int autoC1B89FFE_i;
    int autoD7709DFC_n;
    int autoD7709DFC_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentSpawnRegion = gv_rightAttackSpawn;
    gv_rightWaveGroup = UnitGroupEmpty();
    auto6FE9C89C_n = (gv_zerglingLevel + libNtve_gf_DifficultyValueInt(0, 0, 4, 8));
    for (auto6FE9C89C_i = 1; auto6FE9C89C_i <= auto6FE9C89C_n; auto6FE9C89C_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto75EC1D96_n = (gv_hydraliskLevel + libNtve_gf_DifficultyValueInt(1, 1, 3, 4));
    for (auto75EC1D96_i = 1; auto75EC1D96_i <= auto75EC1D96_n; auto75EC1D96_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto75C51949_n = ((2 * gv_banelingLevel) + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (auto75C51949_i = 1; auto75C51949_i <= auto75C51949_n; auto75C51949_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoD9FB5A2F_n = ((2 * gv_mutaliskLevel) + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (autoD9FB5A2F_i = 1; autoD9FB5A2F_i <= autoD9FB5A2F_n; autoD9FB5A2F_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    if ((gv_nydusWormLevel > 0)) {
        gv_nydusCharges += libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
    }

    UnitCreate(1, "Overseer", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
    UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_rightWaveGroup);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
    }

    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    gf_AttackWavePing(gv_rightWaveGroup);
    Wait(170.0, c_timeAI);
    TriggerExecute(gt_GenericAttackQ, true, false);
    Wait(10.0, c_timeAI);
    lv_currentSpawnRegion = gv_topAttackSpawn;
    autoDFC8C76B_n = (gv_zerglingLevel + libNtve_gf_DifficultyValueInt(0, 0, 4, 8));
    for (autoDFC8C76B_i = 1; autoDFC8C76B_i <= autoDFC8C76B_n; autoDFC8C76B_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto60B974A7_n = (gv_hydraliskLevel + libNtve_gf_DifficultyValueInt(1, 1, 3, 4));
    for (auto60B974A7_i = 1; auto60B974A7_i <= auto60B974A7_n; auto60B974A7_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto8F104DD4_n = ((2 * gv_banelingLevel) + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (auto8F104DD4_i = 1; auto8F104DD4_i <= auto8F104DD4_n; auto8F104DD4_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto97CFC310_n = ((2 * gv_mutaliskLevel) + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (auto97CFC310_i = 1; auto97CFC310_i <= auto97CFC310_n; auto97CFC310_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    if ((gv_nydusWormLevel > 0)) {
        gv_nydusCharges += libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
    }

    UnitCreate(1, "Overseer", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
    UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_topWaveGroup);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(70), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(70)), false);
    }
    else {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
        }

    }
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    gf_AttackWavePing(gv_topWaveGroup);
    Wait(170.0, c_timeAI);
    TriggerExecute(gt_GenericAttackQ, true, false);
    Wait(10.0, c_timeAI);
    lv_currentSpawnRegion = gv_topAttackSpawn;
    gv_topWaveGroup = UnitGroupEmpty();
    auto0F60B1FB_n = (gv_zerglingLevel + libNtve_gf_DifficultyValueInt(2, 2, 6, 10));
    for (auto0F60B1FB_i = 1; auto0F60B1FB_i <= auto0F60B1FB_n; auto0F60B1FB_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoA6898650_n = (gv_hydraliskLevel + libNtve_gf_DifficultyValueInt(1, 1, 4, 5));
    for (autoA6898650_i = 1; autoA6898650_i <= autoA6898650_n; autoA6898650_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto56D782BA_n = ((2 * gv_banelingLevel) + libNtve_gf_DifficultyValueInt(0, 0, 1, 3));
    for (auto56D782BA_i = 1; auto56D782BA_i <= auto56D782BA_n; auto56D782BA_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoD7046BD7_n = ((2 * gv_mutaliskLevel) + libNtve_gf_DifficultyValueInt(0, 0, 2, 3));
    for (autoD7046BD7_i = 1; autoD7046BD7_i <= autoD7046BD7_n; autoD7046BD7_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    if ((gv_nydusWormLevel > 0)) {
        gv_nydusCharges += libNtve_gf_DifficultyValueInt(1, 1, 3, 3);
    }

    UnitCreate(1, "Overseer", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
    UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_topWaveGroup);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
    }

    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    lv_currentSpawnRegion = gv_rightAttackSpawn;
    gv_rightWaveGroup = UnitGroupEmpty();
    auto514D9173_n = (gv_zerglingLevel + libNtve_gf_DifficultyValueInt(2, 2, 6, 10));
    for (auto514D9173_i = 1; auto514D9173_i <= auto514D9173_n; auto514D9173_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoB2492B0D_n = (gv_hydraliskLevel + libNtve_gf_DifficultyValueInt(1, 1, 4, 5));
    for (autoB2492B0D_i = 1; autoB2492B0D_i <= autoB2492B0D_n; autoB2492B0D_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoC1B89FFE_n = ((2 * gv_banelingLevel) + libNtve_gf_DifficultyValueInt(0, 0, 1, 3));
    for (autoC1B89FFE_i = 1; autoC1B89FFE_i <= autoC1B89FFE_n; autoC1B89FFE_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoD7709DFC_n = ((2 * gv_mutaliskLevel) + libNtve_gf_DifficultyValueInt(1, 1, 2, 3));
    for (autoD7709DFC_i = 1; autoD7709DFC_i <= autoD7709DFC_n; autoD7709DFC_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    UnitCreate(1, "Overseer", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
    UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_rightWaveGroup);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
    }

    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    gf_AttackWavePing(gv_rightWaveGroup);
    gf_AttackWavePing(gv_topWaveGroup);
    Wait(230.0, c_timeAI);
    TriggerExecute(gt_SecondEscalationQ, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_AttackWaves3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaves2_Init () {
    gt_AttackWaves2 = TriggerCreate("gt_AttackWaves2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves 3
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaves3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_currentSpawnRegion;

    // Automatic Variable Declarations
    int auto5E4A22D8_n;
    int auto5E4A22D8_i;
    int auto80D5217C_n;
    int auto80D5217C_i;
    int auto85F52C53_n;
    int auto85F52C53_i;
    int autoA5205322_n;
    int autoA5205322_i;
    int auto03940554_n;
    int auto03940554_i;
    int auto14EE5AAD_n;
    int auto14EE5AAD_i;
    int autoA775B1F1_n;
    int autoA775B1F1_i;
    int autoCFF32DF1_n;
    int autoCFF32DF1_i;
    int auto98CA4AD7_n;
    int auto98CA4AD7_i;
    int auto2F325E5E_n;
    int auto2F325E5E_i;
    int autoF7DA2576_n;
    int autoF7DA2576_i;
    int auto7BEB588B_n;
    int auto7BEB588B_i;
    int auto861FA7F5_n;
    int auto861FA7F5_i;
    int auto251BC4E1_n;
    int auto251BC4E1_i;
    int auto3BC59D0D_n;
    int auto3BC59D0D_i;
    int auto9F0CEA7E_n;
    int auto9F0CEA7E_i;
    int auto52CF2EF9_n;
    int auto52CF2EF9_i;
    int auto6B4DB0D0_n;
    int auto6B4DB0D0_i;
    int auto0682F543_n;
    int auto0682F543_i;
    int auto0DBE72FE_n;
    int auto0DBE72FE_i;
    int auto9818577D_n;
    int auto9818577D_i;
    int autoF2E34771_n;
    int autoF2E34771_i;
    int autoA6F7A5B5_n;
    int autoA6F7A5B5_i;
    int autoF3C7A3FA_n;
    int autoF3C7A3FA_i;
    int autoA903E29B_n;
    int autoA903E29B_i;
    int autoA32EED65_n;
    int autoA32EED65_i;
    int auto9E2A0A60_n;
    int auto9E2A0A60_i;
    int auto8BC90A81_n;
    int auto8BC90A81_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_attackExpansionRight == false)) {
        gv_attackExpansionRight = true;
    }
    else {
        gv_attackExpansionRight = false;
    }
    lv_currentSpawnRegion = gv_rightAttackSpawn;
    gv_rightWaveGroup = UnitGroupEmpty();
    auto5E4A22D8_n = (gv_zerglingLevel + libNtve_gf_DifficultyValueInt(2, 2, 6, 10));
    for (auto5E4A22D8_i = 1; auto5E4A22D8_i <= auto5E4A22D8_n; auto5E4A22D8_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto80D5217C_n = (gv_hydraliskLevel + libNtve_gf_DifficultyValueInt(1, 1, 4, 5));
    for (auto80D5217C_i = 1; auto80D5217C_i <= auto80D5217C_n; auto80D5217C_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto85F52C53_n = ((gv_banelingLevel * 2) + libNtve_gf_DifficultyValueInt(0, 0, 2, 3));
    for (auto85F52C53_i = 1; auto85F52C53_i <= auto85F52C53_n; auto85F52C53_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoA5205322_n = ((gv_mutaliskLevel * 2) + libNtve_gf_DifficultyValueInt(0, 0, 2, 3));
    for (autoA5205322_i = 1; autoA5205322_i <= autoA5205322_n; autoA5205322_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    if ((gv_nydusWormLevel > 0)) {
        gv_nydusCharges += libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
    }

    auto03940554_n = ((gv_lurkerLevel * 2) + libNtve_gf_DifficultyValueInt(-1, -1, 1, 1));
    for (auto03940554_i = 1; auto03940554_i <= auto03940554_n; auto03940554_i += 1) {
        UnitCreate(1, "Lurker", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto14EE5AAD_n = (gv_broodLordLevel + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (auto14EE5AAD_i = 1; auto14EE5AAD_i <= auto14EE5AAD_n; auto14EE5AAD_i += 1) {
        UnitCreate(1, "BroodLord", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoA775B1F1_n = (gv_ultraliskLevel + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (autoA775B1F1_i = 1; autoA775B1F1_i <= autoA775B1F1_n; autoA775B1F1_i += 1) {
        UnitCreate(1, "Ultralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    UnitCreate(1, "Overseer", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
    UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_rightWaveGroup);
    if ((gv_attackExpansionRight == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(70), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(70)), false);
    }
    else {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
        }

    }
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    gf_AttackWavePing(gv_rightWaveGroup);
    Wait(230.0, c_timeAI);
    TriggerExecute(gt_GenericAttackQ, true, false);
    Wait(10.0, c_timeAI);
    lv_currentSpawnRegion = gv_topAttackSpawn;
    autoCFF32DF1_n = (gv_zerglingLevel + libNtve_gf_DifficultyValueInt(2, 2, 6, 10));
    for (autoCFF32DF1_i = 1; autoCFF32DF1_i <= autoCFF32DF1_n; autoCFF32DF1_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto98CA4AD7_n = (gv_hydraliskLevel + libNtve_gf_DifficultyValueInt(1, 1, 4, 5));
    for (auto98CA4AD7_i = 1; auto98CA4AD7_i <= auto98CA4AD7_n; auto98CA4AD7_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto2F325E5E_n = ((gv_banelingLevel * 2) + libNtve_gf_DifficultyValueInt(0, 0, 2, 3));
    for (auto2F325E5E_i = 1; auto2F325E5E_i <= auto2F325E5E_n; auto2F325E5E_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoF7DA2576_n = ((gv_mutaliskLevel * 2) + libNtve_gf_DifficultyValueInt(0, 0, 2, 3));
    for (autoF7DA2576_i = 1; autoF7DA2576_i <= autoF7DA2576_n; autoF7DA2576_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    if ((gv_nydusWormLevel > 0)) {
        gv_nydusCharges += libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
    }

    auto7BEB588B_n = ((gv_lurkerLevel * 2) + libNtve_gf_DifficultyValueInt(-1, -1, 1, 1));
    for (auto7BEB588B_i = 1; auto7BEB588B_i <= auto7BEB588B_n; auto7BEB588B_i += 1) {
        UnitCreate(1, "Lurker", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto861FA7F5_n = (gv_broodLordLevel + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (auto861FA7F5_i = 1; auto861FA7F5_i <= auto861FA7F5_n; auto861FA7F5_i += 1) {
        UnitCreate(1, "BroodLord", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto251BC4E1_n = (gv_ultraliskLevel + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (auto251BC4E1_i = 1; auto251BC4E1_i <= auto251BC4E1_n; auto251BC4E1_i += 1) {
        UnitCreate(1, "Ultralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    UnitCreate(1, "Overseer", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
    UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_topWaveGroup);
    if ((gv_attackExpansionRight == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(70), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(70)), false);
    }
    else {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
        }

    }
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    gf_AttackWavePing(gv_topWaveGroup);
    Wait(230.0, c_timeAI);
    TriggerExecute(gt_GenericAttackQ, true, false);
    Wait(10.0, c_timeAI);
    lv_currentSpawnRegion = gv_topAttackSpawn;
    gv_topWaveGroup = UnitGroupEmpty();
    auto3BC59D0D_n = (gv_zerglingLevel + libNtve_gf_DifficultyValueInt(2, 2, 6, 10));
    for (auto3BC59D0D_i = 1; auto3BC59D0D_i <= auto3BC59D0D_n; auto3BC59D0D_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto9F0CEA7E_n = (gv_hydraliskLevel + libNtve_gf_DifficultyValueInt(1, 1, 4, 5));
    for (auto9F0CEA7E_i = 1; auto9F0CEA7E_i <= auto9F0CEA7E_n; auto9F0CEA7E_i += 1) {
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto52CF2EF9_n = ((gv_banelingLevel * 2) + libNtve_gf_DifficultyValueInt(0, 0, 2, 3));
    for (auto52CF2EF9_i = 1; auto52CF2EF9_i <= auto52CF2EF9_n; auto52CF2EF9_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto6B4DB0D0_n = ((gv_mutaliskLevel * 2) + libNtve_gf_DifficultyValueInt(0, 0, 2, 3));
    for (auto6B4DB0D0_i = 1; auto6B4DB0D0_i <= auto6B4DB0D0_n; auto6B4DB0D0_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    if ((gv_nydusWormLevel > 0)) {
        gv_nydusCharges += libNtve_gf_DifficultyValueInt(1, 1, 2, 4);
    }

    auto0682F543_n = ((gv_lurkerLevel * 2) + libNtve_gf_DifficultyValueInt(-1, -1, -1, 1));
    for (auto0682F543_i = 1; auto0682F543_i <= auto0682F543_n; auto0682F543_i += 1) {
        UnitCreate(1, "Lurker", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto0DBE72FE_n = (gv_broodLordLevel + libNtve_gf_DifficultyValueInt(0, 0, 0, 2));
    for (auto0DBE72FE_i = 1; auto0DBE72FE_i <= auto0DBE72FE_n; auto0DBE72FE_i += 1) {
        UnitCreate(1, "BroodLord", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto9818577D_n = (gv_ultraliskLevel + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (auto9818577D_i = 1; auto9818577D_i <= auto9818577D_n; auto9818577D_i += 1) {
        UnitCreate(1, "Ultralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    UnitCreate(1, "Overseer", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
    UnitGroupAdd(gv_topWaveGroup, UnitLastCreated());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_topWaveGroup);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
    }

    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    lv_currentSpawnRegion = gv_rightAttackSpawn;
    gv_rightWaveGroup = UnitGroupEmpty();
    autoF2E34771_n = (gv_zerglingLevel + libNtve_gf_DifficultyValueInt(2, 2, 6, 10));
    for (autoF2E34771_i = 1; autoF2E34771_i <= autoF2E34771_n; autoF2E34771_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoA6F7A5B5_n = (gv_hydraliskLevel + libNtve_gf_DifficultyValueInt(1, 1, 4, 5));
    for (autoA6F7A5B5_i = 1; autoA6F7A5B5_i <= autoA6F7A5B5_n; autoA6F7A5B5_i += 1) {
        UnitCreate(1, "Roach", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoF3C7A3FA_n = ((gv_banelingLevel * 2) + libNtve_gf_DifficultyValueInt(0, 0, 2, 3));
    for (autoF3C7A3FA_i = 1; autoF3C7A3FA_i <= autoF3C7A3FA_n; autoF3C7A3FA_i += 1) {
        UnitCreate(1, "Baneling", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoA903E29B_n = ((gv_mutaliskLevel * 2) + libNtve_gf_DifficultyValueInt(0, 0, 2, 3));
    for (autoA903E29B_i = 1; autoA903E29B_i <= autoA903E29B_n; autoA903E29B_i += 1) {
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    autoA32EED65_n = ((gv_lurkerLevel * 2) + libNtve_gf_DifficultyValueInt(-1, -1, -1, 1));
    for (autoA32EED65_i = 1; autoA32EED65_i <= autoA32EED65_n; autoA32EED65_i += 1) {
        UnitCreate(1, "Lurker", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto9E2A0A60_n = (gv_broodLordLevel + libNtve_gf_DifficultyValueInt(0, 0, 0, 2));
    for (auto9E2A0A60_i = 1; auto9E2A0A60_i <= auto9E2A0A60_n; auto9E2A0A60_i += 1) {
        UnitCreate(1, "BroodLord", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    auto8BC90A81_n = (gv_ultraliskLevel + libNtve_gf_DifficultyValueInt(0, 0, 1, 2));
    for (auto8BC90A81_i = 1; auto8BC90A81_i <= auto8BC90A81_n; auto8BC90A81_i += 1) {
        UnitCreate(1, "Ultralisk", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
        UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
        Wait(0.0625, c_timeAI);
    }
    UnitCreate(1, "Overseer", 0, gv_pLAYER_02_ZERG, RegionRandomPoint(lv_currentSpawnRegion), 270.0);
    UnitGroupAdd(gv_rightWaveGroup, UnitLastCreated());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_ZERG, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(lv_currentSpawnRegion));
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, gv_rightWaveGroup);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(71)), false);
    }

    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    gf_AttackWavePing(gv_rightWaveGroup);
    gf_AttackWavePing(gv_topWaveGroup);
    Wait(230.0, c_timeAI);
    TriggerExecute(gt_GenericAttackQ, true, false);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_AttackWaves3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaves3_Init () {
    gt_AttackWaves3 = TriggerCreate("gt_AttackWaves3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm Spawning
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormSpawning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_nydusCooldown;
    point lv_testPoint;
    bool lv_testPointValid;

    // Automatic Variable Declarations
    const int autoAA5E72F1_n = 4;
    int autoAA5E72F1_i;

    // Variable Initialization
    lv_nydusCooldown = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (gv_nydusWormLevel < 0))) {
            return true;
        }

        if ((gv_nydusCharges > 0) && (TimerGetRemaining(lv_nydusCooldown) < 0.1)) {
            for (autoAA5E72F1_i = 1; autoAA5E72F1_i <= autoAA5E72F1_n; autoAA5E72F1_i += 1) {
                lv_testPoint = RegionRandomPoint(RegionFromId(77));
                if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
                    lv_testPoint = RegionRandomPoint(RegionFromId(77));
                }
                else {
                    lv_testPoint = RegionRandomPoint(RegionFromId(78));
                }
                if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_testPoint, 1.5), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_ZERG, RegionCircle(lv_testPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(lv_testPoint, 16.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (RegionContainsPoint(RegionPlayableMap(), lv_testPoint) == true)) {
                    lv_testPointValid = true;
                    break;
                }
                else {
                    lv_testPointValid = false;
                }
            }
            if ((lv_testPointValid == true)) {
                gv_nydusCharges -= 1;
                TimerStart(lv_nydusCooldown, 5.0, false, c_timeAI);
                gf_CreateNydusWorm(lv_testPoint);
                libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_testPoint, 5.0, Color(100.00, 0.00, 0.00));
                VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lv_testPoint, 6.0), 10.0, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormSpawning_Init () {
    gt_NydusWormSpawning = TriggerCreate("gt_NydusWormSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm AI
//--------------------------------------------------------------------------------------------------
bool gt_NydusWormAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_currentUnloader;
    unitgroup lv_validPlayerUnits;

    // Automatic Variable Declarations
    const int autoABF8EA57_ae = 15;
    const int autoABF8EA57_ai = 1;
    unitgroup auto228A2A62_g;
    int auto228A2A62_u;
    unit auto228A2A62_var;
    unitgroup autoCB048A7A_g;
    int autoCB048A7A_u;
    unit autoCB048A7A_var;
    unitgroup auto82F34D82_g;
    int auto82F34D82_u;
    unit auto82F34D82_var;
    unitgroup autoA8AF1846_g;
    int autoA8AF1846_u;
    unit autoA8AF1846_var;

    // Variable Initialization
    lv_validPlayerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        lv_i = 0;
        for ( ; ( (autoABF8EA57_ai >= 0 && lv_i <= autoABF8EA57_ae) || (autoABF8EA57_ai < 0 && lv_i >= autoABF8EA57_ae) ) ; lv_i += autoABF8EA57_ai ) {
            if ((UnitIsAlive(gv_nydusWorms[lv_i].lv_unit) == true)) {
                if ((UnitGroupCount(UnitCargoGroup(gv_nydusWorms[lv_i].lv_unit), c_unitCountAlive) > 0) && (lv_currentUnloader == gv_nydusWorms[lv_i].lv_unit)) {
                    UnitIssueOrder(gv_nydusWorms[lv_i].lv_unit, Order(AbilityCommand("NydusWormTransport", 1)), c_orderQueueReplace);
                }

                if ((UnitGroupCount(UnitCargoGroup(gv_nydusWorms[lv_i].lv_unit), c_unitCountAlive) == 0) && (UnitGroupCount(gv_nydusWorms[lv_i].lv_bullies, c_unitCountAlive) == 0) && (TimerGetRemaining(gv_nydusWorms[lv_i].lv_bullyRespawnTimer) < 0.1)) {
                    TimerStart(gv_nydusWorms[lv_i].lv_bullyRespawnTimer, libNtve_gf_DifficultyValueFixed(12.0, 12.0, 10.0, 8.0), false, c_timeAI);
                    lv_currentUnloader = gv_nydusWorms[lv_i].lv_unit;
                    UnitCargoCreate(gv_nydusWorms[lv_i].lv_unit, "Zergling", libNtve_gf_DifficultyValueInt(2, 2, 4, 6));
                    UnitGroupAddUnitGroup(gv_nydusWorms[lv_i].lv_bullies, UnitCargoLastCreatedGroup());
                    UnitCargoCreate(gv_nydusWorms[lv_i].lv_unit, "Hydralisk", libNtve_gf_DifficultyValueInt(1, 1, 1, 2));
                    UnitGroupAddUnitGroup(gv_nydusWorms[lv_i].lv_bullies, UnitCargoLastCreatedGroup());
                    AISetGroupScriptControlled(gv_nydusWorms[lv_i].lv_bullies, true);
                    UnitIssueOrder(gv_nydusWorms[lv_i].lv_unit, Order(AbilityCommand("NydusWormTransport", 1)), c_orderQueueReplace);
                }

                if ((UnitGroupCount(gv_nydusWorms[lv_i].lv_bullies, c_unitCountAlive) > 0)) {
                    lv_validPlayerUnits = UnitGroupEmpty();
                    autoCB048A7A_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_nydusWorms[lv_i].lv_unit), 18.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoCB048A7A_u = UnitGroupCount(autoCB048A7A_g, c_unitCountAll);
                    for (;; autoCB048A7A_u -= 1) {
                        autoCB048A7A_var = UnitGroupUnitFromEnd(autoCB048A7A_g, autoCB048A7A_u);
                        if (autoCB048A7A_var == null) { break; }
                        if ((libNtve_gf_UnitIsVisibleToPlayer(autoCB048A7A_var, gv_pLAYER_03_ZERG_BULLIES) == true)) {
                            UnitGroupAdd(lv_validPlayerUnits, autoCB048A7A_var);
                        }

                    }
                    auto82F34D82_g = UnitGroupFilter("Zergling", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorms[lv_i].lv_bullies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto82F34D82_u = UnitGroupCount(auto82F34D82_g, c_unitCountAll);
                    for (;; auto82F34D82_u -= 1) {
                        auto82F34D82_var = UnitGroupUnitFromEnd(auto82F34D82_g, auto82F34D82_u);
                        if (auto82F34D82_var == null) { break; }
                        if ((libNtve_gf_UnitIsInsideTransport(auto82F34D82_var) == false)) {
                            if ((UnitGroupCount(UnitGroupFilter(null, gv_pLAYER_01_USER, lv_validPlayerUnits, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                                UnitIssueOrder(auto82F34D82_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilter(null, gv_pLAYER_01_USER, lv_validPlayerUnits, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto82F34D82_var)))), c_orderQueueReplace);
                            }
                            else {
                                if ((RandomInt(1, 8) == 1)) {
                                    UnitIssueOrder(auto82F34D82_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_nydusWorms[lv_i].lv_unit), 8.0))), c_orderQueueReplace);
                                }

                            }
                        }

                    }
                    autoA8AF1846_g = UnitGroupFilter("Hydralisk", gv_pLAYER_03_ZERG_BULLIES, gv_nydusWorms[lv_i].lv_bullies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoA8AF1846_u = UnitGroupCount(autoA8AF1846_g, c_unitCountAll);
                    for (;; autoA8AF1846_u -= 1) {
                        autoA8AF1846_var = UnitGroupUnitFromEnd(autoA8AF1846_g, autoA8AF1846_u);
                        if (autoA8AF1846_var == null) { break; }
                        if ((libNtve_gf_UnitIsInsideTransport(autoA8AF1846_var) == false)) {
                            if ((UnitGroupCount(UnitGroupFilter(null, gv_pLAYER_01_USER, lv_validPlayerUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                                UnitIssueOrder(autoA8AF1846_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilter(null, gv_pLAYER_01_USER, lv_validPlayerUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(autoA8AF1846_var)))), c_orderQueueReplace);
                            }
                            else {
                                if ((RandomInt(1, 8) == 1)) {
                                    UnitIssueOrder(autoA8AF1846_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_nydusWorms[lv_i].lv_unit), 8.0))), c_orderQueueReplace);
                                }

                            }
                        }

                    }
                }

            }
            else {
                if ((libNtve_gf_UnitGroupIsDead(gv_nydusWorms[lv_i].lv_bullies) == false)) {
                    auto228A2A62_g = gv_nydusWorms[lv_i].lv_bullies;
                    auto228A2A62_u = UnitGroupCount(auto228A2A62_g, c_unitCountAll);
                    for (;; auto228A2A62_u -= 1) {
                        auto228A2A62_var = UnitGroupUnitFromEnd(auto228A2A62_g, auto228A2A62_u);
                        if (auto228A2A62_var == null) { break; }
                        if ((libNtve_gf_UnitIsInsideTransport(auto228A2A62_var) == true)) {
                            UnitRemove(auto228A2A62_var);
                        }
                        else {
                            UnitGroupRemove(gv_nydusWorms[lv_i].lv_bullies, auto228A2A62_var);
                            AISetUnitScriptControlled(auto228A2A62_var, false);
                            AISetUnitSuicide(auto228A2A62_var, true);
                        }
                    }
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWormAI_Init () {
    gt_NydusWormAI = TriggerCreate("gt_NydusWormAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeoutTimer, 20.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (TimerGetRemaining(lv_timeoutTimer) < 1))) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00166", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00167", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackQ_Init () {
    gt_FirstAttackQ = TriggerCreate("gt_FirstAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_SecondAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeoutTimer, 20.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (TimerGetRemaining(lv_timeoutTimer) < 1))) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00168", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondAttackQ_Init () {
    gt_SecondAttackQ = TriggerCreate("gt_SecondAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Double Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstDoubleAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeoutTimer, 20.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (TimerGetRemaining(lv_timeoutTimer) < 1))) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00097", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstDoubleAttackQ_Init () {
    gt_FirstDoubleAttackQ = TriggerCreate("gt_FirstDoubleAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Escalation Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstEscalationQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeoutTimer, 20.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (TimerGetRemaining(lv_timeoutTimer) < 1))) {
        return true;
    }

    if ((gv_banelingLevel > 0) && (gv_mutaliskLevel > 0) && (gv_nydusWormLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00098", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_banelingLevel > 0) && (gv_mutaliskLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00099", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_banelingLevel > 0) && (gv_nydusWormLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00100", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_mutaliskLevel > 0) && (gv_nydusWormLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00101", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_banelingLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00102", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_mutaliskLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00103", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_nydusWormLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00104", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstEscalationQ_Init () {
    gt_FirstEscalationQ = TriggerCreate("gt_FirstEscalationQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Generic Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_GenericAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    int auto08C234BD_val;

    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeoutTimer, 20.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (TimerGetRemaining(lv_timeoutTimer) < 1))) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    auto08C234BD_val = RandomInt(1, 3);
    if (auto08C234BD_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00169", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto08C234BD_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00170", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto08C234BD_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00171", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenericAttackQ_Init () {
    gt_GenericAttackQ = TriggerCreate("gt_GenericAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Escalation Q
//--------------------------------------------------------------------------------------------------
bool gt_SecondEscalationQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timeoutTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeoutTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timeoutTimer, 20.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (TimerGetRemaining(lv_timeoutTimer) < 1))) {
        return true;
    }

    if ((gv_lurkerLevel > 0) && (gv_ultraliskLevel > 0) && (gv_broodLordLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00105", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00106", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_lurkerLevel > 0) && (gv_broodLordLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00107", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00106", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_broodLordLevel > 0) && (gv_ultraliskLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00108", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_lurkerLevel > 0) && (gv_ultraliskLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00109", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00106", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_lurkerLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00110", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00106", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_broodLordLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00111", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((gv_ultraliskLevel > 0)) {
        SoundPlayForPlayer(SoundLink("WarningSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00112", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecondEscalationQ_Init () {
    gt_SecondEscalationQ = TriggerCreate("gt_SecondEscalationQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Killed by Nuke
//--------------------------------------------------------------------------------------------------
bool gt_UnitKilledbyNuke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG) || (UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_BULLIES)))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Larva"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nukeKills += 1;
    AchievementTermQuantityAdd(gv_pLAYER_01_USER, "Nova06_2", 1);
    if ((gv_nukeAchievementTriggered == false) && (gv_nukeKills >= 75)) {
        gv_nukeAchievementTriggered = true;
        libComC_gf_CampaignAwardAchievement("Nova06_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitKilledbyNuke_Init () {
    gt_UnitKilledbyNuke = TriggerCreate("gt_UnitKilledbyNuke_Func");
    TriggerAddEventUnitDamaged(gt_UnitKilledbyNuke, null, c_unitDamageTypeAny, c_unitDamageFatal, "HeroNukeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Structure Killed
//--------------------------------------------------------------------------------------------------
bool gt_ZergStructureKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_ZERG) || (UnitGetOwner(EventUnit()) == gv_pLAYER_03_ZERG_BULLIES)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NydusCanal"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InfestationPustule"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergStructuresRemaining -= 1;
    if ((gv_structureAchievementTriggered == false) && (gv_zergStructuresRemaining <= 0)) {
        gv_structureAchievementTriggered = true;
        libComC_gf_CampaignAwardAchievement("Nova06_3", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergStructureKilled_Init () {
    gt_ZergStructureKilled = TriggerCreate("gt_ZergStructureKilled_Func");
    TriggerAddEventUnitDied(gt_ZergStructureKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Nuclear Strike Units Killed - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_AchievementNuclearStrikeUnitsKilledInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementNuclearStrikeKillsCurrent = 0;
    TriggerEnable(gt_AchievementNuclearStrikeUnitsKilledKillCounter, true);
    Wait(3.0, c_timeGame);
    TriggerEnable(gt_AchievementNuclearStrikeUnitsKilledKillCounter, false);
    if ((gv_achievementNuclearStrikeKillsCurrent > gv_achievementNuclearStrikeKillsBest)) {
        gv_anniversaryAchievementTermNuclearStrikeKillsBest = gv_achievementNuclearStrikeKillsCurrent;
        AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_Nova06", gv_anniversaryAchievementTermNuclearStrikeKillsBest);
        TextExpressionSetToken("Param/Expression/0944FA12", "A", IntToText(gv_anniversaryAchievementTermNuclearStrikeKillsBest));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/0944FA12"), false);
        gv_achievementNuclearStrikeKillsBest = gv_achievementNuclearStrikeKillsCurrent;
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementNuclearStrikeKillsBest >= 50)) {
        TriggerExecute(gt_AchievementNuclearStrikeUnitsKilledAchievementGranted, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementNuclearStrikeUnitsKilledInitialize_Init () {
    gt_AchievementNuclearStrikeUnitsKilledInitialize = TriggerCreate("gt_AchievementNuclearStrikeUnitsKilledInitialize_Func");
    TriggerAddEventUnitAbility(gt_AchievementNuclearStrikeUnitsKilledInitialize, null, AbilityCommand("HeroNuclearStrike", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Nuclear Strike Units Killed - Kill Counter
//--------------------------------------------------------------------------------------------------
bool gt_AchievementNuclearStrikeUnitsKilledKillCounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementNuclearStrikeKillsCurrent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementNuclearStrikeUnitsKilledKillCounter_Init () {
    gt_AchievementNuclearStrikeUnitsKilledKillCounter = TriggerCreate("gt_AchievementNuclearStrikeUnitsKilledKillCounter_Func");
    TriggerEnable(gt_AchievementNuclearStrikeUnitsKilledKillCounter, false);
    TriggerAddEventUnitDamaged(gt_AchievementNuclearStrikeUnitsKilledKillCounter, null, c_unitDamageTypeAny, c_unitDamageFatal, "HeroNukeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Nuclear Strike Units Killed - Achievement Granted
//--------------------------------------------------------------------------------------------------
bool gt_AchievementNuclearStrikeUnitsKilledAchievementGranted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_CampaignAwardAchievement("Anniversary_Nova06", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementNuclearStrikeUnitsKilledAchievementGranted_Init () {
    gt_AchievementNuclearStrikeUnitsKilledAchievementGranted = TriggerCreate("gt_AchievementNuclearStrikeUnitsKilledAchievementGranted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/F4405C08"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_ChangeUnitDamage(gv_artanis, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSearchCoordinatesComplete, true, true);
    libNCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyZergBase) == c_objectiveStateCompleted)) {
        libComC_gf_CampaignAwardAchievement("Nova06_1", gv_pLAYER_01_USER);
    }

    if ((gv_zergTypesEliminated == 0) && (libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova06_Mastery", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/128E4B29"), IntToText(gv_nukeKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4D309898"), IntToText(gv_zergStructuresRemaining));
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Search Coordinates - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSearchCoordinatesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova06Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSearchCoordinatesCreate_Init () {
    gt_ObjectiveSearchCoordinatesCreate = TriggerCreate("gt_ObjectiveSearchCoordinatesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Search Coordinates - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSearchCoordinatesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSearchCoordinatesCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova06Primary01", 5);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova06Primary01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSearchCoordinatesComplete_Init () {
    gt_ObjectiveSearchCoordinatesComplete = TriggerCreate("gt_ObjectiveSearchCoordinatesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Search Coordinates - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSearchCoordinatesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSearchCoordinatesCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova06Primary01", gv_searchCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSearchCoordinatesUpdate_Init () {
    gt_ObjectiveSearchCoordinatesUpdate = TriggerCreate("gt_ObjectiveSearchCoordinatesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Recover Equipment - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecoverEquipmentCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova06Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecoverEquipmentCreate_Init () {
    gt_ObjectiveRecoverEquipmentCreate = TriggerCreate("gt_ObjectiveRecoverEquipmentCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Recover Equipment - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecoverEquipmentComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRecoverEquipmentCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova06Bonus01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecoverEquipmentComplete_Init () {
    gt_ObjectiveRecoverEquipmentComplete = TriggerCreate("gt_ObjectiveRecoverEquipmentComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameQ);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova06_Reigel_019.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova06_Nova_020.ogg", false);
    TriggerExecute(gt_BriefingScene00, true, true);
    TriggerExecute(gt_BriefingScene01, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingScene00EstablishZerg, true, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1203), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1202), 12.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_Nova06_00");
    Wait((0.5 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova06|Line00019", true), c_soundIndexAny))), c_timeReal);
    Wait((0.5 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova06|Line00020", true), c_soundIndexAny))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00_Init () {
    gt_BriefingScene00 = TriggerCreate("gt_BriefingScene00_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 - Establish Zerg
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00EstablishZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_introZerg;

    // Automatic Variable Declarations
    unitgroup auto612E02C0_g;
    int auto612E02C0_u;
    unit auto612E02C0_var;
    const int autoF5ACEBF1_n = 3;
    int autoF5ACEBF1_i;
    const int autoF3789BB3_n = 8;
    int autoF3789BB3_i;
    unitgroup auto6A019374_g;
    int auto6A019374_u;
    unit auto6A019374_var;
    unitgroup autoC5B3D1EA_g;
    int autoC5B3D1EA_u;
    unit autoC5B3D1EA_var;

    // Variable Initialization
    lv_introZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto612E02C0_g = gv_cinematicHiddenUnits;
    auto612E02C0_u = UnitGroupCount(auto612E02C0_g, c_unitCountAll);
    for (;; auto612E02C0_u -= 1) {
        auto612E02C0_var = UnitGroupUnitFromEnd(auto612E02C0_g, auto612E02C0_u);
        if (auto612E02C0_var == null) { break; }
        UnitRemove(auto612E02C0_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpacePlatformGeyser", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(169)));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(3048), "AnimClear CoverStart 0.000000");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestationPit", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(3014));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestationPit", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(3015));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawler", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(3016));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    for (autoF5ACEBF1_i = 1; autoF5ACEBF1_i <= autoF5ACEBF1_n; autoF5ACEBF1_i += 1) {
        UnitCreate(1, "Infestor", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(RegionFromId(73)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_introZerg, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
    }
    for (autoF3789BB3_i = 1; autoF3789BB3_i <= autoF3789BB3_n; autoF3789BB3_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(RegionFromId(73)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_introZerg, UnitLastCreated());
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((libNtve_gf_UnitGroupIsDead(lv_introZerg) == true)) {
            Wait(0.5, c_timeGame);
            auto6A019374_g = UnitGroup("Broodling", c_playerAny, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto6A019374_u = UnitGroupCount(auto6A019374_g, c_unitCountAll);
            for (;; auto6A019374_u -= 1) {
                auto6A019374_var = UnitGroupUnitFromEnd(auto6A019374_g, auto6A019374_u);
                if (auto6A019374_var == null) { break; }
                UnitIssueOrder(auto6A019374_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(3042)), c_orderQueueReplace);
                Wait(0.2, c_timeGame);
            }
            return true;
        }

        autoC5B3D1EA_g = lv_introZerg;
        autoC5B3D1EA_u = UnitGroupCount(autoC5B3D1EA_g, c_unitCountAll);
        for (;; autoC5B3D1EA_u -= 1) {
            autoC5B3D1EA_var = UnitGroupUnitFromEnd(autoC5B3D1EA_g, autoC5B3D1EA_u);
            if (autoC5B3D1EA_var == null) { break; }
            if ((RandomInt(1, 10) == 1)) {
                UnitIssueOrder(autoC5B3D1EA_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(73))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00EstablishZerg_Init () {
    gt_BriefingScene00EstablishZerg = TriggerCreate("gt_BriefingScene00EstablishZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1621), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1622), 16.0, -1, 10, true);
    MovieStartRecording("Briefing_Video_Nova06_01");
    Wait(16.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9447CCD0_g;
    int auto9447CCD0_u;
    unit auto9447CCD0_var;
    unitgroup auto8D4E0FB9_g;
    int auto8D4E0FB9_u;
    unit auto8D4E0FB9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto9447CCD0_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9447CCD0_u = UnitGroupCount(auto9447CCD0_g, c_unitCountAll);
    for (;; auto9447CCD0_u -= 1) {
        auto9447CCD0_var = UnitGroupUnitFromEnd(auto9447CCD0_g, auto9447CCD0_u);
        if (auto9447CCD0_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto9447CCD0_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto9447CCD0_var);
            libNtve_gf_PauseUnit(auto9447CCD0_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto8D4E0FB9_g = gv_cinematicHiddenUnits;
    auto8D4E0FB9_u = UnitGroupCount(auto8D4E0FB9_g, c_unitCountAll);
    for (;; auto8D4E0FB9_u -= 1) {
        auto8D4E0FB9_var = UnitGroupUnitFromEnd(auto8D4E0FB9_g, auto8D4E0FB9_u);
        if (auto8D4E0FB9_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8D4E0FB9_var, false);
        libNtve_gf_MakeUnitInvulnerable(auto8D4E0FB9_var, true);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpacePlatformGeyser", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(169)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, PointFromId(3011), 180.0);
    gv_cinematicNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicNova);
    UnitSetState(gv_cinematicNova, c_unitStateFidget, false);
    UnitSetState(gv_cinematicNova, c_unitStateInvulnerable, true);
    libNtve_gf_PauseUnit(UnitFromId(3036), false);
    UnitMagazineArm(UnitFromId(3036), AbilityCommand("HeroArmNuke", 0), 1);
    TriggerExecute(gt_IntroZerg, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3020), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3019), 7.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack5, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 33.0, 0.0);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00120", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_IntroInfestorSounds, true, false);
    TransmissionWait(TransmissionLastSent(), 2.0);
    TriggerExecute(gt_IntroNovaOrders, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova06|Line00067", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 66.0, 6.0);
    Wait(6.0, c_timeGame);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 33.0, 3.0);
    Wait(3.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 40.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 0.25);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00119", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova06|Line00121", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 2.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00122", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto78A413F3_g;
    int auto78A413F3_u;
    unit auto78A413F3_var;
    unitgroup auto49DB3DD7_g;
    int auto49DB3DD7_u;
    unit auto49DB3DD7_var;
    unitgroup autoA9C6E379_g;
    int autoA9C6E379_u;
    unit autoA9C6E379_var;
    unitgroup autoD520F75A_g;
    int autoD520F75A_u;
    unit autoD520F75A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameDestroyEffects(RegionGetCenter(RegionFromId(71)), 12.0, 0, null);
    libNtve_gf_SendActorMessageToGameRegion(RegionFromId(71), "Signal CinematicRemoval");
    auto78A413F3_g = gv_cinematicTempUnits;
    auto78A413F3_u = UnitGroupCount(auto78A413F3_g, c_unitCountAll);
    for (;; auto78A413F3_u -= 1) {
        auto78A413F3_var = UnitGroupUnitFromEnd(auto78A413F3_g, auto78A413F3_u);
        if (auto78A413F3_var == null) { break; }
        UnitRemove(auto78A413F3_var);
    }
    auto49DB3DD7_g = UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto49DB3DD7_u = UnitGroupCount(auto49DB3DD7_g, c_unitCountAll);
    for (;; auto49DB3DD7_u -= 1) {
        auto49DB3DD7_var = UnitGroupUnitFromEnd(auto49DB3DD7_g, auto49DB3DD7_u);
        if (auto49DB3DD7_var == null) { break; }
        UnitRemove(auto49DB3DD7_var);
    }
    autoA9C6E379_g = gv_cinematicHiddenUnits;
    autoA9C6E379_u = UnitGroupCount(autoA9C6E379_g, c_unitCountAll);
    for (;; autoA9C6E379_u -= 1) {
        autoA9C6E379_var = UnitGroupUnitFromEnd(autoA9C6E379_g, autoA9C6E379_u);
        if (autoA9C6E379_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoA9C6E379_var, false);
        libNtve_gf_ShowHideUnit(autoA9C6E379_var, true);
    }
    autoD520F75A_g = gv_cinematicPausedUnits;
    autoD520F75A_u = UnitGroupCount(autoD520F75A_g, c_unitCountAll);
    for (;; autoD520F75A_u -= 1) {
        autoD520F75A_var = UnitGroupUnitFromEnd(autoD520F75A_g, autoD520F75A_u);
        if (autoD520F75A_var == null) { break; }
        libNtve_gf_PauseUnit(autoD520F75A_var, false);
    }
    UnitRemove(UnitFromId(3036));
    UnitRemove(UnitFromId(3048));
    gv_newZergGroup = UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gf_RunZergCampAI(RegionFromId(12), RegionFromId(11), PointFromId(365));
    gv_newZergGroup = UnitGroup(null, gv_pLAYER_03_ZERG_BULLIES, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gf_RunZergCampAI(RegionFromId(14), RegionFromId(13), PointFromId(408));
    TriggerStop(gt_IntroZerg);
    TriggerStop(gt_IntroNovaOrders);
    TriggerStop(gt_IntroInfestorSounds);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionFromId(71));
    RegionPlayableMapSet(RegionFromId(1));
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CreepModify(RegionGetCenter(RegionFromId(71)), 16.0, false, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_IntroBaseFlyIn, true, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerg
//--------------------------------------------------------------------------------------------------
bool gt_IntroZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_introZerg;

    // Automatic Variable Declarations
    const int autoF9543D4A_n = 3;
    int autoF9543D4A_i;
    const int auto9F4D2748_n = 8;
    int auto9F4D2748_i;
    unitgroup auto39EE11AF_g;
    int auto39EE11AF_u;
    unit auto39EE11AF_var;
    unitgroup auto5AD37698_g;
    int auto5AD37698_u;
    unit auto5AD37698_var;

    // Variable Initialization
    lv_introZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(UnitFromId(3048), "AnimClear CoverStart 0.000000");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestationPit", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(3014));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestationPit", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(3015));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpineCrawler", 0, gv_pLAYER_03_ZERG_BULLIES, PointFromId(3016));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    for (autoF9543D4A_i = 1; autoF9543D4A_i <= autoF9543D4A_n; autoF9543D4A_i += 1) {
        UnitCreate(1, "Infestor", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(RegionFromId(73)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_introZerg, UnitLastCreated());
        AISetUnitScriptControlled(UnitLastCreated(), true);
    }
    for (auto9F4D2748_i = 1; auto9F4D2748_i <= auto9F4D2748_n; auto9F4D2748_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_03_ZERG_BULLIES, RegionRandomPoint(RegionFromId(73)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_introZerg, UnitLastCreated());
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((libNtve_gf_UnitGroupIsDead(lv_introZerg) == true)) {
            Wait(0.5, c_timeGame);
            auto39EE11AF_g = UnitGroup("Broodling", c_playerAny, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto39EE11AF_u = UnitGroupCount(auto39EE11AF_g, c_unitCountAll);
            for (;; auto39EE11AF_u -= 1) {
                auto39EE11AF_var = UnitGroupUnitFromEnd(auto39EE11AF_g, auto39EE11AF_u);
                if (auto39EE11AF_var == null) { break; }
                UnitIssueOrder(auto39EE11AF_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(3042)), c_orderQueueReplace);
                Wait(0.2, c_timeGame);
            }
            return true;
        }

        auto5AD37698_g = lv_introZerg;
        auto5AD37698_u = UnitGroupCount(auto5AD37698_g, c_unitCountAll);
        for (;; auto5AD37698_u -= 1) {
            auto5AD37698_var = UnitGroupUnitFromEnd(auto5AD37698_g, auto5AD37698_u);
            if (auto5AD37698_var == null) { break; }
            if ((RandomInt(1, 10) == 1)) {
                UnitIssueOrder(auto5AD37698_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(73))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZerg_Init () {
    gt_IntroZerg = TriggerCreate("gt_IntroZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Nova Orders
//--------------------------------------------------------------------------------------------------
bool gt_IntroNovaOrders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto45E73EC5_ae = 10;
    const int auto45E73EC5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("HeroNuclearStrike", 0), PointFromId(3021)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3022), 4.0, -1, 10, true);
    Wait(6.7, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto45E73EC5_ai >= 0 && lv_i <= auto45E73EC5_ae) || (auto45E73EC5_ai < 0 && lv_i >= auto45E73EC5_ae) ) ; lv_i += auto45E73EC5_ai ) {
        UnitCreate(1, "Marine", 0, gv_pLAYER_01_USER, PointFromName(("Intro Marine " + IntToString(lv_i) + "-1")), 180.0);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Intro Marine " + IntToString(lv_i) + "-2"))), c_orderQueueReplace);
    }
    Wait(2.0, c_timeGame);
    UnitKill(UnitFromId(3048));
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.5, 3.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3023), 5.0, -1, 10, true);
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(3025)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(3025), 1.0, 260.0)), c_orderQueueAddToEnd);
    Wait(9.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3024), 5.0, -1, 10, true);
    UnitCreate(1, "Liberator", 0, gv_pLAYER_01_USER, PointFromId(3211), 190.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3213)), c_orderQueueReplace);
    UnitCreate(1, "Liberator", 0, gv_pLAYER_01_USER, PointFromId(3212), 180.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3214)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova06_Liberator2FlyInIntro", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(3214), 0.0, 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova06_Liberator1FlyInIntro", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(3213), 0.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3047), 10.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroNovaOrders_Init () {
    gt_IntroNovaOrders = TriggerCreate("gt_IntroNovaOrders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Base Fly In
//--------------------------------------------------------------------------------------------------
bool gt_IntroBaseFlyIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FactoryFlying", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(3013)));
    UnitRemove(UnitFromId(3013));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("FactoryLand", 0), UnitGetPosition(UnitFromId(3013))), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BarracksFlying", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(28)));
    UnitRemove(UnitFromId(28));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BarracksLand", 0), UnitGetPosition(UnitFromId(28))), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StarportFlying", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(337)));
    UnitRemove(UnitFromId(337));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("StarportLand", 0), UnitGetPosition(UnitFromId(337))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBaseFlyIn_Init () {
    gt_IntroBaseFlyIn = TriggerCreate("gt_IntroBaseFlyIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Infestor Sounds
//--------------------------------------------------------------------------------------------------
bool gt_IntroInfestorSounds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("Infestor_Ready", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(3021), 0.0, 70.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova06_IntroCreepGrow", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(3021), 0.0, 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Infestor_Ready", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(3021), 0.0, 100.0, 0.0);
    Wait(6.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Infestor_Ready", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(3021), 0.0, 70.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroInfestorSounds_Init () {
    gt_IntroInfestorSounds = TriggerCreate("gt_IntroInfestorSounds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Flashback Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitFlashbackDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selectionPanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selectionPanel = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(800, 192, c_anchorCenter, 0, 0, true);
    gv_flashbackDialog.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(gv_flashbackDialog.lv_dialog, false);
    DialogSetFullscreen(gv_flashbackDialog.lv_dialog, true);
    DialogControlCreateFromTemplate(gv_flashbackDialog.lv_dialog, c_triggerControlTypePanel, "NovaMissionZergUnitSelection/MissionZergSelectionPanel");
    lv_selectionPanel = DialogControlLastCreated();
    DialogControlHookup(lv_selectionPanel, c_triggerControlTypeLabel, "TitleLabel");
    gv_flashbackDialog.lv_titleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_selectionPanel, c_triggerControlTypeButton, "SelectionButton_1");
    gv_flashbackDialog.lv_banelingButton = DialogControlLastCreated();
    DialogControlHookup(lv_selectionPanel, c_triggerControlTypeButton, "SelectionButton_2");
    gv_flashbackDialog.lv_mutaliskButton = DialogControlLastCreated();
    DialogControlHookup(lv_selectionPanel, c_triggerControlTypeButton, "SelectionButton_3");
    gv_flashbackDialog.lv_nydusWormButton = DialogControlLastCreated();
    DialogControlHookup(lv_selectionPanel, c_triggerControlTypeButton, "SelectionButton_4");
    gv_flashbackDialog.lv_lurkerButton = DialogControlLastCreated();
    DialogControlHookup(lv_selectionPanel, c_triggerControlTypeButton, "SelectionButton_5");
    gv_flashbackDialog.lv_broodLordButton = DialogControlLastCreated();
    DialogControlHookup(lv_selectionPanel, c_triggerControlTypeButton, "SelectionButton_6");
    gv_flashbackDialog.lv_ultraliskButton = DialogControlLastCreated();
    DialogSetVisible(gv_flashbackDialog.lv_dialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitFlashbackDialog_Init () {
    gt_InitFlashbackDialog = TriggerCreate("gt_InitFlashbackDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Flashback Dialog
//--------------------------------------------------------------------------------------------------
bool gt_UpdateFlashbackDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_banelingEmitters <= 0)) {
        DialogControlSetEnabled(gv_flashbackDialog.lv_banelingButton, PlayerGroupAll(), false);
    }

    if ((gv_mutaliskEmitters <= 0)) {
        DialogControlSetEnabled(gv_flashbackDialog.lv_mutaliskButton, PlayerGroupAll(), false);
    }

    if ((gv_broodLordEmitters <= 0)) {
        DialogControlSetEnabled(gv_flashbackDialog.lv_broodLordButton, PlayerGroupAll(), false);
    }

    if ((gv_ultraliskEmitters <= 0)) {
        DialogControlSetEnabled(gv_flashbackDialog.lv_ultraliskButton, PlayerGroupAll(), false);
    }

    if ((gv_nydusWormEmitters <= 0)) {
        DialogControlSetEnabled(gv_flashbackDialog.lv_nydusWormButton, PlayerGroupAll(), false);
    }

    if ((gv_lurkerEmitters <= 0)) {
        DialogControlSetEnabled(gv_flashbackDialog.lv_lurkerButton, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateFlashbackDialog_Init () {
    gt_UpdateFlashbackDialog = TriggerCreate("gt_UpdateFlashbackDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEF3FFB08_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_flashbackDialog.lv_banelingButton) || (EventDialogControl() == gv_flashbackDialog.lv_mutaliskButton) || (EventDialogControl() == gv_flashbackDialog.lv_nydusWormButton) || (EventDialogControl() == gv_flashbackDialog.lv_lurkerButton) || (EventDialogControl() == gv_flashbackDialog.lv_broodLordButton) || (EventDialogControl() == gv_flashbackDialog.lv_ultraliskButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_emittersPlacedCounter += 1;
    if ((gv_emittersPlacedCounter <= 6)) {
        autoEF3FFB08_val = EventDialogControl();
        if (autoEF3FFB08_val == gv_flashbackDialog.lv_banelingButton) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_Baneling;
            gv_banelingEmitters -= 1;
        }
        else if (autoEF3FFB08_val == gv_flashbackDialog.lv_mutaliskButton) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_Mutalisk;
            gv_mutaliskEmitters -= 1;
        }
        else if (autoEF3FFB08_val == gv_flashbackDialog.lv_nydusWormButton) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_NydusWorm;
            gv_nydusWormEmitters -= 1;
        }
        else if (autoEF3FFB08_val == gv_flashbackDialog.lv_lurkerButton) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_Lurker;
            gv_lurkerEmitters -= 1;
        }
        else if (autoEF3FFB08_val == gv_flashbackDialog.lv_broodLordButton) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_BroodLord;
            gv_broodLordEmitters -= 1;
        }
        else if (autoEF3FFB08_val == gv_flashbackDialog.lv_ultraliskButton) {
            gv_emittersPlaced[gv_emittersPlacedCounter] = ge_PRESET_ZergTypes_Ultralisk;
            gv_ultraliskEmitters -= 1;
        }
        else {
        }
    }

    SoundPlayForPlayer(SoundLink("ButtonPressedShort", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((gv_doubleFlashbackChoice == true)) {
        gv_doubleFlashbackChoice = false;
        TriggerExecute(gt_UpdateFlashbackDialog, true, false);
    }
    else {
        gv_buttonPressed = true;
        DialogSetVisible(gv_flashbackDialog.lv_dialog, PlayerGroupAll(), false);
        UISetCursorVisible(PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonPressed_Init () {
    gt_ButtonPressed = TriggerCreate("gt_ButtonPressed_Func");
    TriggerAddEventDialogControl(gt_ButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flashback Start Transmissions
//--------------------------------------------------------------------------------------------------
bool gt_FlashbackStartTransmissions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_facing;

    // Automatic Variable Declarations
    int auto910F6099_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    auto910F6099_val = gv_flashbackProgression;
    if (auto910F6099_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova06|Line00124", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova06|Line00125", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_cinematicNova), 1.0, 260.0)), c_orderQueueReplace);
    }
    else if (auto910F6099_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova06|Line00179", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00143", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_cinematicNova), 1.0, 260.0)), c_orderQueueReplace);
    }
    else if (auto910F6099_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova06|Line00150", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_cinematicNova), 1.0, 260.0)), c_orderQueueReplace);
    }
    else if (auto910F6099_val == 4) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00158", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_cinematicNova), 1.0, 260.0)), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashbackStartTransmissions_Init () {
    gt_FlashbackStartTransmissions = TriggerCreate("gt_FlashbackStartTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flashback Transmissions Prechoice
//--------------------------------------------------------------------------------------------------
bool gt_FlashbackTransmissionsPrechoice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_stoneOriginalFacing;

    // Automatic Variable Declarations
    int autoA8576C44_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    autoA8576C44_val = gv_flashbackProgression;
    if (autoA8576C44_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00126", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        while (!((libNtve_gf_UnitInRegion(gv_flashbackNova, RegionCircle(gv_flashbackArrivalPoint, 1.0)) == true))) {
            Wait(0.25, c_timeGame);
        }
        UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackNova)), c_orderQueueReplace);
        CameraApplyInfo(gv_pLAYER_01_USER, gv_flashbackZoomCamera, 10.0, -1, 10.0, true);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00127", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00128", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TriggerExecute(gt_NovaPlacesEmitter, true, false);
        Wait(1.5, c_timeReal);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00129", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00130", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA8576C44_val == 2) {
        while (!((libNtve_gf_UnitInRegion(gv_flashbackNova, RegionCircle(gv_flashbackArrivalPoint, 1.0)) == true))) {
            Wait(0.25, c_timeGame);
        }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackNova)), c_orderQueueReplace);
        UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackStone)), c_orderQueueReplace);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00144", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        CameraApplyInfo(gv_pLAYER_01_USER, gv_flashbackZoomCamera, 10.0, -1, 10.0, true);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackStone, "Mission_Nova06|Line00145", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_flashbackNova), 1.0, PointGetFacing(gv_flashbackArrivalPoint))), c_orderQueueReplace);
        Wait(1.0, c_timeReal);
        TriggerExecute(gt_NovaPlacesEmitter, true, false);
        Wait(1.5, c_timeReal);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00146", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackStone, "Mission_Nova06|Line00147", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA8576C44_val == 3) {
        while (!((libNtve_gf_UnitInRegion(gv_flashbackNova, RegionCircle(gv_flashbackArrivalPoint, 1.0)) == true))) {
            Wait(0.25, c_timeGame);
        }
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00151", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackNova)), c_orderQueueReplace);
        CameraApplyInfo(gv_pLAYER_01_USER, gv_flashbackZoomCamera, 12.0, -1, 10.0, true);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackStone, "Mission_Nova06|Line00152", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00155", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackStone, "Mission_Nova06|Line00154", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TriggerExecute(gt_NovaPlacesEmitter, true, false);
        Wait(1.5, c_timeReal);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00153", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA8576C44_val == 4) {
        while (!((libNtve_gf_UnitInRegion(gv_flashbackNova, RegionCircle(gv_flashbackArrivalPoint, 1.0)) == true))) {
            Wait(0.25, c_timeGame);
        }
        UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackNova)), c_orderQueueReplace);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackStone, "Mission_Nova06|Line00159", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TriggerExecute(gt_NovaPlacesEmitter, true, false);
        Wait(1.5, c_timeReal);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00160", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashbackTransmissionsPrechoice_Init () {
    gt_FlashbackTransmissionsPrechoice = TriggerCreate("gt_FlashbackTransmissionsPrechoice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flashback Transmissions Postchoice
//--------------------------------------------------------------------------------------------------
bool gt_FlashbackTransmissionsPostchoice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_novaOriginalFacing;
    fixed lv_stoneOriginalFacing;

    // Automatic Variable Declarations
    int auto7B4A30FB_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    lv_novaOriginalFacing = UnitGetFacing(gv_flashbackNova);
    lv_stoneOriginalFacing = UnitGetFacing(gv_flashbackStone);
    auto7B4A30FB_val = gv_flashbackProgression;
    if (auto7B4A30FB_val == 1) {
        CameraApplyInfo(gv_pLAYER_01_USER, gv_flashbackOverviewCamera, 8.0, -1, 10.0, true);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackStone, "Mission_Nova06|Line00131", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
        UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
        UnitIssueOrder(gv_flashbackStone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        Wait((5.0 - SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova06|Line00131", true), c_soundIndexAny))), c_timeReal);
        gv_flashbackPostChoiceDialogueFinished = true;
    }
    else if (auto7B4A30FB_val == 2) {
        if ((gv_stadiumActive == true)) {
            UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackStone)), c_orderQueueReplace);
            libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00149", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            SoundPlayForPlayer(SoundLink("Event_Nova06_StadiumFlashback", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            gv_midStinger = SoundLastPlayed();
            UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
            UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
            UnitIssueOrder(gv_flashbackStone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            CameraApplyInfo(gv_pLAYER_01_USER, gv_flashbackOverviewCamera, 7.0, -1, 10.0, true);
            Wait(4.0, c_timeReal);
        }
        else {
            CameraApplyInfo(gv_pLAYER_01_USER, gv_flashbackOverviewCamera, 8.0, -1, 10.0, true);
            UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackStone)), c_orderQueueReplace);
            libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00149", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
            UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
            UnitIssueOrder(gv_flashbackStone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            Wait((5.0 - SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova06|Line00149", true), c_soundIndexAny))), c_timeReal);
        }
        gv_flashbackPostChoiceDialogueFinished = true;
    }
    else if (auto7B4A30FB_val == 3) {
        if ((gv_stadiumActive == true)) {
            UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackStone)), c_orderQueueReplace);
            libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00156", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            SoundPlayForPlayer(SoundLink("Event_Nova06_StadiumFlashback", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            gv_midStinger = SoundLastPlayed();
            UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
            UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
            UnitIssueOrder(gv_flashbackStone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            CameraApplyInfo(gv_pLAYER_01_USER, gv_flashbackOverviewCamera, 7.0, -1, 10.0, true);
            Wait(4.0, c_timeReal);
        }
        else {
            CameraApplyInfo(gv_pLAYER_01_USER, gv_flashbackOverviewCamera, 8.0, -1, 10.0, true);
            UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackStone)), c_orderQueueReplace);
            libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00156", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
            UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
            UnitIssueOrder(gv_flashbackStone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            Wait((5.0 - SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova06|Line00156", true), c_soundIndexAny))), c_timeReal);
        }
        gv_flashbackPostChoiceDialogueFinished = true;
    }
    else if (auto7B4A30FB_val == 4) {
        UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_flashbackStone)), c_orderQueueReplace);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackNova, "Mission_Nova06|Line00161", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackStone, "Mission_Nova06|Line00162", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackStone, "Mission_Nova06|Line00180", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        SoundPlayForPlayer(SoundLink("Event_Nova06_PsiEmitterStart1", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Event_Nova06_PsiEmitterStart2", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Event_Nova06_PsiEmitterStart3", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_flashbackNova), 1.0, lv_novaOriginalFacing)), c_orderQueueReplace);
        UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_flashbackStone), 1.0, lv_stoneOriginalFacing)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        libNCMI_gf_SendTransmissionCampaign(gv_flashbackStone, "Mission_Nova06|Line00163", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_flashbackNova), -1.0, lv_novaOriginalFacing)), c_orderQueueReplace);
        UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_flashbackStone), -1.0, lv_stoneOriginalFacing)), c_orderQueueReplace);
        gv_spawnFlashbackZerg = true;
        SoundPlayForPlayer(SoundLink("Event_Nova06_CrowdPanic", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        gv_midStinger2 = SoundLastPlayed();
        if ((gv_stadiumActive == true)) {
            SoundPlayForPlayer(SoundLink("Event_Nova06_StadiumFlashback", 0), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
            gv_midStinger = SoundLastPlayed();
        }

        CameraApplyInfo(gv_pLAYER_01_USER, gv_flashbackOverviewCamera, 8.0, -1, 10.0, true);
        TriggerExecute(gt_MidSummonZergMusic, true, false);
        Wait(3.0, c_timeReal);
        UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
        UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_flashbackStone, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackRetreatPoint), c_orderQueueReplace);
        UnitIssueOrder(gv_flashbackStone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 50.0, 0.35);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00164", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00165", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.5);
        gv_flashbackPostChoiceDialogueFinished = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashbackTransmissionsPostchoice_Init () {
    gt_FlashbackTransmissionsPostchoice = TriggerCreate("gt_FlashbackTransmissionsPostchoice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Post Cinematic Transmissions
//--------------------------------------------------------------------------------------------------
bool gt_PostCinematicTransmissions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto1615D9E0_val;
    int auto7B18227F_val;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1615D9E0_val = gv_flashbackProgression;
    if (auto1615D9E0_val == 1) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 0.5);
        auto7B18227F_val = gv_emittersPlaced[1];
        if (auto7B18227F_val == ge_PRESET_ZergTypes_Baneling) {
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00139", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00142", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto7B18227F_val == ge_PRESET_ZergTypes_Mutalisk) {
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00133", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00134", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto7B18227F_val == ge_PRESET_ZergTypes_NydusWorm) {
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00137", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00138", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto7B18227F_val == ge_PRESET_ZergTypes_Lurker) {
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00140", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00142", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto7B18227F_val == ge_PRESET_ZergTypes_BroodLord) {
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00135", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00136", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto7B18227F_val == ge_PRESET_ZergTypes_Ultralisk) {
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00141", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00142", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TimerStart(gv_bonusDiscoveryDelayTimer, 8.0, false, c_timeReal);
    }
    else if (auto1615D9E0_val == 2) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00085", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00086", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00087", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TimerStart(gv_bonusDiscoveryDelayTimer, 8.0, false, c_timeReal);
    }
    else if (auto1615D9E0_val == 3) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00157", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00043", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00174", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TimerStart(gv_bonusDiscoveryDelayTimer, 8.0, false, c_timeReal);
    }
    else if (auto1615D9E0_val == 4) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova06|Line00081", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PostCinematicTransmissions_Init () {
    gt_PostCinematicTransmissions = TriggerCreate("gt_PostCinematicTransmissions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Uses Terrazine
//--------------------------------------------------------------------------------------------------
bool gt_NovaUsesTerrazine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CreateFullscreenFlashbackEffect, true, false);
    SoundPlayForPlayer(SoundLink("NovaUsesTerrazine", 0), c_maxPlayers, PlayerGroupAll(), 70.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova06_Flashback51", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midStinger = SoundLastPlayed();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cinematicNova), c_animNameDefault, "Spell T", 0, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("FlashbackCrowd", -1), c_maxPlayers, PlayerGroupAll(), 30.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaUsesTerrazine_Init () {
    gt_NovaUsesTerrazine = TriggerCreate("gt_NovaUsesTerrazine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Places Emitter
//--------------------------------------------------------------------------------------------------
bool gt_NovaPlacesEmitter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_flashbackNova), c_animNameDefault, "Spell I", 0, c_animTimeDefault);
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal PsiEmitterRemove");
    Wait(0.3, c_timeGame);
    libNtve_gf_PlayAnimation(gv_emitterDoodad, c_animNameDefault, "Birth", 0, c_animTimeDefault);
    ActorSend(gv_emitterDoodad, "SetOpacity 1.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaPlacesEmitter_Init () {
    gt_NovaPlacesEmitter = TriggerCreate("gt_NovaPlacesEmitter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Summon Zerg Music
//--------------------------------------------------------------------------------------------------
bool gt_MidSummonZergMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "SummonZergMusicLight";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSummonZergMusic_Init () {
    gt_MidSummonZergMusic = TriggerCreate("gt_MidSummonZergMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Fullscreen Flashback Effect
//--------------------------------------------------------------------------------------------------
bool gt_CreateFullscreenFlashbackEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_flashbackEffectCutscene;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_flashbackEffectCutscene = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(gv_flashbackEffectDialog);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
    gv_flashbackEffectDialog = DialogLastCreated();
    DialogSetFullscreen(gv_flashbackEffectDialog, true);
    DialogSetImageVisible(gv_flashbackEffectDialog, false);
    DialogControlCreate(gv_flashbackEffectDialog, c_triggerControlTypeCutscene);
    lv_flashbackEffectCutscene = DialogControlLastCreated();
    DialogControlSetFullDialog(lv_flashbackEffectCutscene, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCutscene(lv_flashbackEffectCutscene, "Cutscenes\\Nova06FlashbackEffect.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(lv_flashbackEffectCutscene));
    DialogSetVisible(gv_flashbackEffectDialog, PlayerGroupAll(), true);
    Wait(5.0, c_timeReal);
    DialogControlFadeTransparency(lv_flashbackEffectCutscene, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeReal);
    DialogDestroy(gv_flashbackEffectDialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateFullscreenFlashbackEffect_Init () {
    gt_CreateFullscreenFlashbackEffect = TriggerCreate("gt_CreateFullscreenFlashbackEffect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_Top1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_Top1Setup, true, true);
    TriggerExecute(gt_Top1Flashback, true, true);
    TriggerExecute(gt_Top1Choice, true, true);
    TriggerExecute(gt_Top1Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top1Q_Init () {
    gt_Top1Q = TriggerCreate("gt_Top1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 1 Setup
//--------------------------------------------------------------------------------------------------
bool gt_Top1Setup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8CBA828A_g;
    int auto8CBA828A_u;
    unit auto8CBA828A_var;
    unitgroup auto85AB6D2F_g;
    int auto85AB6D2F_u;
    unit auto85AB6D2F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    RegionPlayableMapSet(RegionEntireMap());
    gv_flashbackProgression += 1;
    gv_cinematicPausedUnits = UnitGroupEmpty();
    auto8CBA828A_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8CBA828A_u = UnitGroupCount(auto8CBA828A_g, c_unitCountAll);
    for (;; auto8CBA828A_u -= 1) {
        auto8CBA828A_var = UnitGroupUnitFromEnd(auto8CBA828A_g, auto8CBA828A_u);
        if (auto8CBA828A_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto8CBA828A_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto8CBA828A_var);
            libNtve_gf_PauseUnit(auto8CBA828A_var, true);
        }

    }
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto85AB6D2F_g = gv_cinematicHiddenUnits;
    auto85AB6D2F_u = UnitGroupCount(auto85AB6D2F_g, c_unitCountAll);
    for (;; auto85AB6D2F_u -= 1) {
        auto85AB6D2F_var = UnitGroupUnitFromEnd(auto85AB6D2F_g, auto85AB6D2F_u);
        if (auto85AB6D2F_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto85AB6D2F_var, false);
    }
    UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(5)), 45.0);
    gv_cinematicNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicNova);
    UnitAbilityEnable(gv_cinematicNova, "attack", false);
    UnitSetState(gv_cinematicNova, c_unitStateFidget, false);
    UnitSetState(gv_cinematicNova, c_unitStateInvulnerable, true);
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(991)), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(gv_cinematicNova, "Signal Disarm");
    UnitCreate(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(362), PointGetFacing(PointFromId(362)));
    gv_flashbackNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_flashbackNova);
    UnitAbilityEnable(gv_flashbackNova, "attack", false);
    UnitSetState(gv_flashbackNova, c_unitStateFidget, false);
    UnitSetState(gv_flashbackNova, c_unitStateInvulnerable, true);
    UnitBehaviorAdd(gv_flashbackNova, "PermanentlyCloaked", gv_flashbackNova, 1);
    ActorSend(libNtve_gf_MainActorofUnit(gv_flashbackNova), "ModelSwap NovaHeroBase");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal Disarm");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal RemoveEquipment");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal PsiEmitterAdd");
    UnitSetPropertyFixed(gv_flashbackNova, c_unitPropMovementSpeed, 2.25);
    UnitCreate(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(3051), PointGetFacing(PointFromId(3051)));
    gv_flashbackStone = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_flashbackStone);
    UnitAbilityEnable(gv_flashbackStone, "attack", false);
    UnitSetState(gv_flashbackStone, c_unitStateFidget, false);
    UnitSetState(gv_flashbackStone, c_unitStateInvulnerable, true);
    UnitBehaviorAdd(gv_flashbackStone, "PermanentlyCloaked", gv_flashbackStone, 1);
    gf_CreateFlashbackCivilians(2, RegionFromId(40));
    gf_CreateFlashbackCivilians(6, RegionFromId(33));
    gf_CreateFlashbackCivilians(4, RegionFromId(80));
    gf_CreateFlashbackCivilians(4, RegionFromId(81));
    gf_CreateFlashbackCivilians(2, RegionFromId(82));
    gf_CreateFlashbackCivilians(6, RegionFromId(83));
    gf_CreateFlashbackCivilians(2, RegionFromId(84));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top1Setup_Init () {
    gt_Top1Setup = TriggerCreate("gt_Top1Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 1 Flashback
//--------------------------------------------------------------------------------------------------
bool gt_Top1Flashback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(986), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(992), 4.0, -1, 10, true);
    gv_flashbackMusicStarted = false;
    gv_flashbackAmbienceStarted = false;
    gv_emitterDoodad = ActorFromDoodad(DoodadFromId(1128));
    ActorSend(gv_emitterDoodad, "SetOpacity");
    gv_flashbackZoomCamera = CameraInfoFromId(2430);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 0.5);
    TriggerExecute(gt_FlashbackStartTransmissions, true, true);
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("Event_Nova06_TerrazineOn", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.5);
    TriggerExecute(gt_NovaUsesTerrazine, true, false);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackMusicStarted = true;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Nova06_CinematicTop1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackAmbienceStarted = true;
    GameSetLighting("PortCityFlashback", 0.0);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_cinematicNova), c_animNameDefault);
    gv_flashbackArrivalPoint = PointFromId(399);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), gv_flashbackArrivalPoint), c_orderQueueReplace);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(gv_flashbackArrivalPoint, 1.0, PointGetFacing(gv_flashbackArrivalPoint))), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1667)), "Driveby", "Stand", c_animFlagPlayForever, 0.0);
    libNtve_gf_ClearAnimation(ActorFromDoodad(DoodadFromId(1667)), "Stand");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(358), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(360), 7.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    TriggerExecute(gt_FlashbackTransmissionsPrechoice, true, true);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top1Flashback_Init () {
    gt_Top1Flashback = TriggerCreate("gt_Top1Flashback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 1 Choice
//--------------------------------------------------------------------------------------------------
bool gt_Top1Choice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2A29CB2C_g;
    int auto2A29CB2C_u;
    unit auto2A29CB2C_var;
    unitgroup auto658C557E_g;
    int auto658C557E_u;
    unit auto658C557E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_flashbackMusicStarted == false)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    if ((gv_flashbackAmbienceStarted == false)) {
        SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
        SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Nova06_CinematicTop1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        gv_flashbackAmbienceStarted = true;
    }

    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TransmissionClearAll();
        libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_cinematicNova), c_animNameDefault);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_flashbackNova), c_animNameDefault);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(360), 0.0, -1, 10, true);
        GameSetLighting("PortCityFlashback", 0.0);
        UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_flashbackNova, PointFromId(399), false);
        UnitSetFacing(gv_flashbackNova, PointGetFacing(PointFromId(399)), 0.0);
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(1667)), "Driveby", "Stand", c_animFlagPlayForever, 0.0);
        libNtve_gf_ClearAnimation(ActorFromDoodad(DoodadFromId(1667)), "Stand");
        libNtve_gf_PlayAnimation(gv_emitterDoodad, c_animNameDefault, "Stand", 0, c_animTimeDefault);
        ActorSend(gv_emitterDoodad, "SetOpacity 1.000000");
        TriggerStop(gt_NovaPlacesEmitter);
        libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal PsiEmitterRemove");
        CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    gv_buttonPressed = false;
    TriggerExecute(gt_UpdateFlashbackDialog, true, true);
    libNtve_gf_SetDialogItemText(gv_flashbackDialog.lv_titleLabel, StringExternal("Param/Value/F68BBEE2"), PlayerGroupAll());
    DialogSetVisible(gv_flashbackDialog.lv_dialog, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_Nova06_SelectionScreen_Open", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_Nova06_SelectionScreen_Open2", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UISetCursorVisible(PlayerGroupAll(), true);
    while (!((gv_buttonPressed == true))) {
        Wait(0.0625, c_timeGame);
    }
    gv_flashbackPostChoiceDialogueFinished = false;
    gv_flashbackOverviewCamera = CameraInfoFromId(987);
    gv_flashbackRetreatPoint = PointFromId(362);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_Top1StopCar, true, false);
    TriggerExecute(gt_FlashbackTransmissionsPostchoice, true, true);
    TriggerExecute(gt_CreateFullscreenFlashbackEffect, true, false);
    SoundPlayForPlayer(SoundLink("NovaUsesTerrazine", 0), c_maxPlayers, PlayerGroupAll(), 70.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova06_Flashback51", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midStinger = SoundLastPlayed();
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundStopAllTriggerSounds(true);
    GameSetLighting("PortCity", 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackAmbienceStarted = false;
    auto2A29CB2C_g = gv_cinematicTempUnits;
    auto2A29CB2C_u = UnitGroupCount(auto2A29CB2C_g, c_unitCountAll);
    for (;; auto2A29CB2C_u -= 1) {
        auto2A29CB2C_var = UnitGroupUnitFromEnd(auto2A29CB2C_g, auto2A29CB2C_u);
        if (auto2A29CB2C_var == null) { break; }
        UnitRemove(auto2A29CB2C_var);
    }
    auto658C557E_g = gv_cinematicHiddenUnits;
    auto658C557E_u = UnitGroupCount(auto658C557E_g, c_unitCountAll);
    for (;; auto658C557E_u -= 1) {
        auto658C557E_var = UnitGroupUnitFromEnd(auto658C557E_g, auto658C557E_u);
        if (auto658C557E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto658C557E_var, true);
    }
    gf_CreateZergCamp(RegionFromId(16), 2, gv_emittersPlaced[gv_emittersPlacedCounter]);
    gf_RunZergCampAI(RegionFromId(16), RegionFromId(15), PointFromId(990));
    gv_top1ZergCampCreated = true;
    gf_PlayZergSound(gv_emittersPlaced[gv_emittersPlacedCounter]);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(988), 0.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("Event_Nova06_CameraWhoosh", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(92), gv_flashbackPanDuration, -1, 10, true);
    Wait(gv_flashbackPanDuration, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top1Choice_Init () {
    gt_Top1Choice = TriggerCreate("gt_Top1Choice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 1 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_Top1Cleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB7CAE1EF_g;
    int autoB7CAE1EF_u;
    unit autoB7CAE1EF_var;
    unitgroup auto6B5534CE_g;
    int auto6B5534CE_u;
    unit auto6B5534CE_var;
    unitgroup autoCDC6F11F_g;
    int autoCDC6F11F_u;
    unit autoCDC6F11F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    autoB7CAE1EF_g = gv_cinematicTempUnits;
    autoB7CAE1EF_u = UnitGroupCount(autoB7CAE1EF_g, c_unitCountAll);
    for (;; autoB7CAE1EF_u -= 1) {
        autoB7CAE1EF_var = UnitGroupUnitFromEnd(autoB7CAE1EF_g, autoB7CAE1EF_u);
        if (autoB7CAE1EF_var == null) { break; }
        UnitRemove(autoB7CAE1EF_var);
    }
    auto6B5534CE_g = gv_cinematicHiddenUnits;
    auto6B5534CE_u = UnitGroupCount(auto6B5534CE_g, c_unitCountAll);
    for (;; auto6B5534CE_u -= 1) {
        auto6B5534CE_var = UnitGroupUnitFromEnd(auto6B5534CE_g, auto6B5534CE_u);
        if (auto6B5534CE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6B5534CE_var, true);
    }
    autoCDC6F11F_g = gv_cinematicPausedUnits;
    autoCDC6F11F_u = UnitGroupCount(autoCDC6F11F_g, c_unitCountAll);
    for (;; autoCDC6F11F_u -= 1) {
        autoCDC6F11F_var = UnitGroupUnitFromEnd(autoCDC6F11F_g, autoCDC6F11F_u);
        if (autoCDC6F11F_var == null) { break; }
        libNtve_gf_PauseUnit(autoCDC6F11F_var, false);
    }
    if ((gv_top1ZergCampCreated == false)) {
        gf_CreateZergCamp(RegionFromId(16), 2, gv_emittersPlaced[gv_emittersPlacedCounter]);
        gf_RunZergCampAI(RegionFromId(16), RegionFromId(15), PointFromId(990));
    }

    gf_CreateZergCamp(RegionFromId(43), 1, ge_PRESET_ZergTypes_Roach);
    gf_RunZergCampAI(RegionFromId(43), RegionFromId(44), PointFromId(1429));
    TriggerStop(gt_MidSummonZergMusic);
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundStop(gv_midStinger, true);
    if ((gv_flashbackAmbienceStarted == true)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    TriggerStop(gt_NovaPlacesEmitter);
    TriggerStop(gt_CreateFullscreenFlashbackEffect);
    DialogDestroy(gv_flashbackEffectDialog);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    gv_topAttackSpawn = RegionFromId(47);
    if ((gv_coordinatesSearched[2] == false)) {
        RegionPlayableMapSet(RegionFromId(2));
    }

    if ((gv_coordinatesSearched[2] == true) && (gv_coordinatesSearched[4] == false)) {
        RegionPlayableMapSet(RegionFromId(4));
        TriggerExecute(gt_SpawnBonusObjectiveCampQ, true, false);
        libNtve_gf_ShowHideUnit(UnitFromId(3274), true);
    }

    if ((gv_coordinatesSearched[4] == true)) {
        RegionPlayableMapSet(RegionFromId(32));
        TriggerExecute(gt_SpawnBonusObjectiveCampQ, true, false);
        TriggerExecute(gt_SpawnZergCampRight5, true, false);
        TriggerExecute(gt_ActivateRightBridge, true, false);
        libNtve_gf_ShowHideUnit(UnitFromId(3274), true);
    }

    if ((gv_cinematicCompleted == false)) {
        GameSetLighting("PortCity", 0.0);
    }

    if ((gv_cinematicCompleted == true)) {
        libNCMI_gf_CinematicModeCampaign(false, 1.5, true);
    }
    else {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(92), 0.0, -1, 10.0, true);
        libNCMI_gf_CinematicModeCampaign(false, 1.0, false);
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(15), 0.1, false);
    UnitSelect(gv_artanis, gv_pLAYER_01_USER, true);
    Wait(3.0, c_timeReal);
    if ((gv_coordinatesSearched[3] == false) && (libNCMI_gf_GameIsOver() == false)) {
        libNCMI_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(7)), StringExternal("Param/Value/340B82FA"));
        gv_coordinatePings[3] = PingLastCreated();
        Wait(2.0, c_timeReal);
    }

    TriggerExecute(gt_PostCinematicTransmissions, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top1Cleanup_Init () {
    gt_Top1Cleanup = TriggerCreate("gt_Top1Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 1 Stop Car
//--------------------------------------------------------------------------------------------------
bool gt_Top1StopCar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    generichandle lv_carAnimation;
    fixed lv_animationTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    AnimLengthQueryByName(ActorFromDoodad(DoodadFromId(1667)), "Driveby", true);
    AnimLengthQueryWait();
    lv_carAnimation = AnimLengthQueryLastCreated();
    lv_animationTime = AnimLengthRemainingSync(lv_carAnimation);
    if ((lv_animationTime >= 8.0)) {
        Wait((10.0 - lv_animationTime), c_timeGame);
    }

    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(1667)), "Driveby", 0.8);
    Wait(0.4, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(1667)), "Driveby", 0.6);
    Wait(0.4, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(1667)), "Driveby", 0.4);
    Wait(0.4, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(1667)), "Driveby", 0.2);
    Wait(0.4, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(1667)), "Driveby", 0.1);
    Wait(0.4, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(1667)), "AnimSetPausedAll");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top1StopCar_Init () {
    gt_Top1StopCar = TriggerCreate("gt_Top1StopCar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_Right1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_Right1Setup, true, true);
    TriggerExecute(gt_Right1Flashback, true, true);
    TriggerExecute(gt_Right1Choice, true, true);
    TriggerExecute(gt_Right1Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right1Q_Init () {
    gt_Right1Q = TriggerCreate("gt_Right1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 1 Setup
//--------------------------------------------------------------------------------------------------
bool gt_Right1Setup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7E653626_g;
    int auto7E653626_u;
    unit auto7E653626_var;
    unitgroup auto89C81EEE_g;
    int auto89C81EEE_u;
    unit auto89C81EEE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    RegionPlayableMapSet(RegionEntireMap());
    gv_flashbackProgression += 1;
    gv_cinematicPausedUnits = UnitGroupEmpty();
    auto7E653626_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto7E653626_u = UnitGroupCount(auto7E653626_g, c_unitCountAll);
    for (;; auto7E653626_u -= 1) {
        auto7E653626_var = UnitGroupUnitFromEnd(auto7E653626_g, auto7E653626_u);
        if (auto7E653626_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto7E653626_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto7E653626_var);
            libNtve_gf_PauseUnit(auto7E653626_var, true);
        }

    }
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto89C81EEE_g = gv_cinematicHiddenUnits;
    auto89C81EEE_u = UnitGroupCount(auto89C81EEE_g, c_unitCountAll);
    for (;; auto89C81EEE_u -= 1) {
        auto89C81EEE_var = UnitGroupUnitFromEnd(auto89C81EEE_g, auto89C81EEE_u);
        if (auto89C81EEE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto89C81EEE_var, false);
    }
    UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(RegionGetCenter(RegionFromId(6)), 1.0, 90.0), 0.0);
    gv_cinematicNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicNova);
    UnitAbilityEnable(gv_cinematicNova, "attack", false);
    UnitSetState(gv_cinematicNova, c_unitStateFidget, false);
    UnitSetState(gv_cinematicNova, c_unitStateInvulnerable, true);
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(995)), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(gv_cinematicNova, "Signal Disarm");
    UnitCreate(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1381), PointGetFacing(PointFromId(1381)));
    gv_flashbackNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_flashbackNova);
    UnitAbilityEnable(gv_flashbackNova, "attack", false);
    UnitSetState(gv_flashbackNova, c_unitStateFidget, false);
    UnitSetState(gv_flashbackNova, c_unitStateInvulnerable, true);
    UnitBehaviorAdd(gv_flashbackNova, "PermanentlyCloaked", gv_flashbackNova, 1);
    ActorSend(libNtve_gf_MainActorofUnit(gv_flashbackNova), "ModelSwap NovaHeroBase");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal Disarm");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal RemoveEquipment");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal PsiEmitterAdd");
    UnitSetPropertyFixed(gv_flashbackNova, c_unitPropMovementSpeed, 2.25);
    UnitCreate(1, "Ghost", 0, gv_pLAYER_01_USER, PointFromId(3052), PointGetFacing(PointFromId(3052)));
    gv_flashbackStone = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_flashbackStone);
    UnitAbilityEnable(gv_flashbackStone, "attack", false);
    UnitSetState(gv_flashbackStone, c_unitStateFidget, false);
    UnitSetState(gv_flashbackStone, c_unitStateInvulnerable, true);
    UnitBehaviorAdd(gv_flashbackStone, "PermanentlyCloaked", gv_flashbackStone, 1);
    gf_CreateFlashbackCivilians(2, RegionFromId(36));
    gf_CreateFlashbackCivilians(2, RegionFromId(93));
    gf_CreateFlashbackCivilians(4, RegionFromId(92));
    gf_CreateFlashbackCivilians(4, RegionFromId(89));
    gf_CreateFlashbackCivilians(4, RegionFromId(85));
    gf_CreateFlashbackCivilians(2, RegionFromId(94));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right1Setup_Init () {
    gt_Right1Setup = TriggerCreate("gt_Right1Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 1 Flashback
//--------------------------------------------------------------------------------------------------
bool gt_Right1Flashback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1135), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1137), 4.0, -1, 10, true);
    gv_flashbackMusicStarted = false;
    gv_flashbackAmbienceStarted = false;
    gv_emitterDoodad = ActorFromDoodad(DoodadFromId(2419));
    ActorSend(gv_emitterDoodad, "SetOpacity");
    gv_flashbackZoomCamera = CameraInfoFromId(2431);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 0.5);
    TriggerExecute(gt_FlashbackStartTransmissions, true, true);
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("Event_Nova06_TerrazineOn", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.5);
    TriggerExecute(gt_NovaUsesTerrazine, true, false);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackMusicStarted = true;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Nova06_CinematicRight1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackAmbienceStarted = true;
    GameSetLighting("PortCityFlashback", 0.0);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_cinematicNova), c_animNameDefault);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1382)), c_orderQueueReplace);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1343)), c_orderQueueAddToEnd);
    gv_flashbackArrivalPoint = PointFromId(1343);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(gv_flashbackArrivalPoint, 1.0, PointGetFacing(gv_flashbackArrivalPoint))), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(5973)), "Driveby", "Stand", c_animFlagPlayForever, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(5973)), "AnimClear Stand");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1213), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1170), 7.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    TriggerExecute(gt_FlashbackTransmissionsPrechoice, true, true);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right1Flashback_Init () {
    gt_Right1Flashback = TriggerCreate("gt_Right1Flashback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 1 Choice
//--------------------------------------------------------------------------------------------------
bool gt_Right1Choice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5191777F_g;
    int auto5191777F_u;
    unit auto5191777F_var;
    unitgroup auto3EE6FE9E_g;
    int auto3EE6FE9E_u;
    unit auto3EE6FE9E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_flashbackMusicStarted == false)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    if ((gv_flashbackAmbienceStarted == false)) {
        SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
        SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Nova06_CinematicRight1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        gv_flashbackAmbienceStarted = true;
    }

    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TransmissionClearAll();
        libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_cinematicNova), c_animNameDefault);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_flashbackNova), c_animNameDefault);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1170), 0.0, -1, 10, true);
        GameSetLighting("PortCityFlashback", 0.0);
        UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_flashbackNova, PointFromId(1343), false);
        UnitSetFacing(gv_flashbackNova, PointGetFacing(PointFromId(1343)), 0.0);
        libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(5973)), "Driveby", "Stand", c_animFlagPlayForever, 0.0);
        libNtve_gf_ClearAnimation(ActorFromDoodad(DoodadFromId(5973)), "Stand");
        libNtve_gf_PlayAnimation(gv_emitterDoodad, c_animNameDefault, "Stand", 0, c_animTimeDefault);
        ActorSend(gv_emitterDoodad, "SetOpacity 1.000000");
        TriggerStop(gt_NovaPlacesEmitter);
        libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal PsiEmitterRemove");
        CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    gv_buttonPressed = false;
    TriggerExecute(gt_UpdateFlashbackDialog, true, true);
    libNtve_gf_SetDialogItemText(gv_flashbackDialog.lv_titleLabel, StringExternal("Param/Value/F28425B0"), PlayerGroupAll());
    DialogSetVisible(gv_flashbackDialog.lv_dialog, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_Nova06_SelectionScreen_Open", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_Nova06_SelectionScreen_Open2", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UISetCursorVisible(PlayerGroupAll(), true);
    while (!((gv_buttonPressed == true))) {
        Wait(0.0625, c_timeGame);
    }
    gv_flashbackPostChoiceDialogueFinished = false;
    gv_flashbackOverviewCamera = CameraInfoFromId(1314);
    gv_flashbackRetreatPoint = PointFromId(1431);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_Right1StopCar, true, false);
    TriggerExecute(gt_FlashbackTransmissionsPostchoice, true, true);
    TriggerExecute(gt_CreateFullscreenFlashbackEffect, true, false);
    SoundPlayForPlayer(SoundLink("NovaUsesTerrazine", 0), c_maxPlayers, PlayerGroupAll(), 70.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova06_Flashback51", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midStinger = SoundLastPlayed();
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackAmbienceStarted = false;
    GameSetLighting("PortCity", 0.0);
    auto5191777F_g = gv_cinematicTempUnits;
    auto5191777F_u = UnitGroupCount(auto5191777F_g, c_unitCountAll);
    for (;; auto5191777F_u -= 1) {
        auto5191777F_var = UnitGroupUnitFromEnd(auto5191777F_g, auto5191777F_u);
        if (auto5191777F_var == null) { break; }
        UnitRemove(auto5191777F_var);
    }
    auto3EE6FE9E_g = gv_cinematicHiddenUnits;
    auto3EE6FE9E_u = UnitGroupCount(auto3EE6FE9E_g, c_unitCountAll);
    for (;; auto3EE6FE9E_u -= 1) {
        auto3EE6FE9E_var = UnitGroupUnitFromEnd(auto3EE6FE9E_g, auto3EE6FE9E_u);
        if (auto3EE6FE9E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto3EE6FE9E_var, true);
    }
    gf_CreateZergCamp(RegionFromId(22), 2, gv_emittersPlaced[gv_emittersPlacedCounter]);
    gf_RunZergCampAI(RegionFromId(22), RegionFromId(21), PointFromId(1383));
    gv_right1ZergCampCreated = true;
    gf_PlayZergSound(gv_emittersPlaced[gv_emittersPlacedCounter]);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1315), 0.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("Event_Nova06_CameraWhoosh", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1138), gv_flashbackPanDuration, -1, 10, true);
    Wait(gv_flashbackPanDuration, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right1Choice_Init () {
    gt_Right1Choice = TriggerCreate("gt_Right1Choice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 1 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_Right1Cleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto655BB7A9_g;
    int auto655BB7A9_u;
    unit auto655BB7A9_var;
    unitgroup auto43206A0C_g;
    int auto43206A0C_u;
    unit auto43206A0C_var;
    unitgroup auto3C9DEC4F_g;
    int auto3C9DEC4F_u;
    unit auto3C9DEC4F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    auto655BB7A9_g = gv_cinematicTempUnits;
    auto655BB7A9_u = UnitGroupCount(auto655BB7A9_g, c_unitCountAll);
    for (;; auto655BB7A9_u -= 1) {
        auto655BB7A9_var = UnitGroupUnitFromEnd(auto655BB7A9_g, auto655BB7A9_u);
        if (auto655BB7A9_var == null) { break; }
        UnitRemove(auto655BB7A9_var);
    }
    auto43206A0C_g = gv_cinematicHiddenUnits;
    auto43206A0C_u = UnitGroupCount(auto43206A0C_g, c_unitCountAll);
    for (;; auto43206A0C_u -= 1) {
        auto43206A0C_var = UnitGroupUnitFromEnd(auto43206A0C_g, auto43206A0C_u);
        if (auto43206A0C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto43206A0C_var, true);
    }
    auto3C9DEC4F_g = gv_cinematicPausedUnits;
    auto3C9DEC4F_u = UnitGroupCount(auto3C9DEC4F_g, c_unitCountAll);
    for (;; auto3C9DEC4F_u -= 1) {
        auto3C9DEC4F_var = UnitGroupUnitFromEnd(auto3C9DEC4F_g, auto3C9DEC4F_u);
        if (auto3C9DEC4F_var == null) { break; }
        libNtve_gf_PauseUnit(auto3C9DEC4F_var, false);
    }
    if ((gv_right1ZergCampCreated == false)) {
        gf_CreateZergCamp(RegionFromId(22), 2, gv_emittersPlaced[gv_emittersPlacedCounter]);
        gf_RunZergCampAI(RegionFromId(22), RegionFromId(21), PointFromId(1383));
    }

    gf_CreateZergCamp(RegionFromId(45), 1, ge_PRESET_ZergTypes_Roach);
    gf_RunZergCampAI(RegionFromId(45), RegionFromId(46), PointFromId(1430));
    TriggerStop(gt_MidSummonZergMusic);
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundStop(gv_midStinger, true);
    if ((gv_flashbackAmbienceStarted == true)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    TriggerStop(gt_NovaPlacesEmitter);
    TriggerStop(gt_CreateFullscreenFlashbackEffect);
    DialogDestroy(gv_flashbackEffectDialog);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    gv_rightAttackSpawn = RegionFromId(48);
    if ((gv_coordinatesSearched[1] == false)) {
        RegionPlayableMapSet(RegionFromId(3));
    }

    if ((gv_coordinatesSearched[1] == true) && (gv_coordinatesSearched[3] == false)) {
        RegionPlayableMapSet(RegionFromId(4));
        TriggerExecute(gt_SpawnBonusObjectiveCampQ, true, false);
        libNtve_gf_ShowHideUnit(UnitFromId(3274), true);
    }

    if ((gv_coordinatesSearched[3] == true)) {
        RegionPlayableMapSet(RegionFromId(29));
        TriggerExecute(gt_SpawnBonusObjectiveCampQ, true, false);
        TriggerExecute(gt_SpawnZergCampTop5, true, false);
        TriggerExecute(gt_ActivateLeftBridge, true, false);
        libNtve_gf_ShowHideUnit(UnitFromId(3274), true);
    }

    if ((gv_cinematicCompleted == false)) {
        GameSetLighting("PortCity", 0.0);
    }

    if ((gv_cinematicCompleted == true)) {
        libNCMI_gf_CinematicModeCampaign(false, 1.5, true);
    }
    else {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1138), 0.0, -1, 10.0, true);
        libNCMI_gf_CinematicModeCampaign(false, 1.0, false);
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(21), 0.1, false);
    UnitSelect(gv_artanis, gv_pLAYER_01_USER, true);
    Wait(3.0, c_timeReal);
    if ((gv_coordinatesSearched[4] == false) && (libNCMI_gf_GameIsOver() == false)) {
        libNCMI_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(8)), StringExternal("Param/Value/58B5324A"));
        gv_coordinatePings[4] = PingLastCreated();
        Wait(2.0, c_timeReal);
    }

    TriggerExecute(gt_PostCinematicTransmissions, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right1Cleanup_Init () {
    gt_Right1Cleanup = TriggerCreate("gt_Right1Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 1 Stop Car
//--------------------------------------------------------------------------------------------------
bool gt_Right1StopCar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    generichandle lv_carAnimation;
    fixed lv_animationTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    AnimLengthQueryByName(ActorFromDoodad(DoodadFromId(5973)), "Driveby", true);
    AnimLengthQueryWait();
    lv_carAnimation = AnimLengthQueryLastCreated();
    lv_animationTime = AnimLengthRemainingSync(lv_carAnimation);
    if ((lv_animationTime >= 11.0) && (lv_animationTime <= 18.0)) {
        libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(5973)), "Driveby", 0.8);
        Wait(0.4, c_timeGame);
        libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(5973)), "Driveby", 0.6);
        Wait(0.4, c_timeGame);
        libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(5973)), "Driveby", 0.4);
        Wait(0.4, c_timeGame);
        libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(5973)), "Driveby", 0.2);
        Wait(0.4, c_timeGame);
        libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(DoodadFromId(5973)), "Driveby", 0.1);
        Wait(0.4, c_timeGame);
        ActorSend(ActorFromDoodad(DoodadFromId(5973)), "AnimSetPausedAll");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right1StopCar_Init () {
    gt_Right1StopCar = TriggerCreate("gt_Right1StopCar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_Top2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_Top2Setup, true, true);
    TriggerExecute(gt_Top2Flashback, true, true);
    TriggerExecute(gt_Top2Choice, true, true);
    TriggerExecute(gt_Top2Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top2Q_Init () {
    gt_Top2Q = TriggerCreate("gt_Top2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 2 Setup
//--------------------------------------------------------------------------------------------------
bool gt_Top2Setup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1AF562E6_g;
    int auto1AF562E6_u;
    unit auto1AF562E6_var;
    unitgroup auto080DC543_g;
    int auto080DC543_u;
    unit auto080DC543_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    RegionPlayableMapSet(RegionEntireMap());
    gv_flashbackProgression += 1;
    gv_cinematicPausedUnits = UnitGroupEmpty();
    auto1AF562E6_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1AF562E6_u = UnitGroupCount(auto1AF562E6_g, c_unitCountAll);
    for (;; auto1AF562E6_u -= 1) {
        auto1AF562E6_var = UnitGroupUnitFromEnd(auto1AF562E6_g, auto1AF562E6_u);
        if (auto1AF562E6_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto1AF562E6_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto1AF562E6_var);
            libNtve_gf_PauseUnit(auto1AF562E6_var, true);
        }

    }
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto080DC543_g = gv_cinematicHiddenUnits;
    auto080DC543_u = UnitGroupCount(auto080DC543_g, c_unitCountAll);
    for (;; auto080DC543_u -= 1) {
        auto080DC543_var = UnitGroupUnitFromEnd(auto080DC543_g, auto080DC543_u);
        if (auto080DC543_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto080DC543_var, false);
    }
    UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(7)), 45.0);
    gv_cinematicNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicNova);
    UnitAbilityEnable(gv_cinematicNova, "attack", false);
    UnitSetState(gv_cinematicNova, c_unitStateFidget, false);
    UnitSetState(gv_cinematicNova, c_unitStateInvulnerable, true);
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2099)), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(gv_cinematicNova, "Signal Disarm");
    UnitCreate(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2089), PointGetFacing(PointFromId(2089)));
    gv_flashbackNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_flashbackNova);
    UnitAbilityEnable(gv_flashbackNova, "attack", false);
    UnitSetState(gv_flashbackNova, c_unitStateFidget, false);
    UnitSetState(gv_flashbackNova, c_unitStateInvulnerable, true);
    UnitBehaviorAdd(gv_flashbackNova, "PermanentlyCloaked", gv_flashbackNova, 1);
    ActorSend(libNtve_gf_MainActorofUnit(gv_flashbackNova), "ModelSwap NovaHeroBase");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal Disarm");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal RemoveEquipment");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal PsiEmitterAdd");
    UnitSetPropertyFixed(gv_flashbackNova, c_unitPropMovementSpeed, 2.25);
    UnitCreate(1, "Ghost", 0, gv_pLAYER_01_USER, PointFromId(3053), PointGetFacing(PointFromId(3053)));
    gv_flashbackStone = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_flashbackStone);
    UnitAbilityEnable(gv_flashbackStone, "attack", false);
    UnitSetState(gv_flashbackStone, c_unitStateFidget, false);
    UnitSetState(gv_flashbackStone, c_unitStateInvulnerable, true);
    UnitBehaviorAdd(gv_flashbackStone, "PermanentlyCloaked", gv_flashbackStone, 1);
    libNtve_gf_ShowHideUnit(UnitFromId(1026), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1876), true);
    gf_CreateFlashbackCivilians(3, RegionFromId(49));
    gf_CreateFlashbackCivilians(3, RegionFromId(86));
    gf_CreateFlashbackCivilians(3, RegionFromId(87));
    gf_CreateFlashbackCivilians(3, RegionFromId(91));
    gf_CreateFlashbackCivilians(3, RegionFromId(54));
    gf_CreateFlashbackCivilians(3, RegionFromId(90));
    gf_CreateFlashbackCivilians(3, RegionFromId(97));
    gf_CreateFlashbackCivilians(3, RegionFromId(98));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top2Setup_Init () {
    gt_Top2Setup = TriggerCreate("gt_Top2Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 2 Flashback
//--------------------------------------------------------------------------------------------------
bool gt_Top2Flashback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2084), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2087), 4.0, -1, 10, true);
    gv_flashbackMusicStarted = false;
    gv_flashbackAmbienceStarted = false;
    gv_emitterDoodad = ActorFromDoodad(DoodadFromId(2417));
    ActorSend(gv_emitterDoodad, "SetOpacity");
    gv_flashbackZoomCamera = CameraInfoFromId(2433);
    if ((gv_flashbackProgression == 4)) {
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(52), "PortCity_CarTraffic_a");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(52), "PortCity_CarTraffic_e");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(52), "PortCity_CarTraffic_f");
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 0.5);
    TriggerExecute(gt_FlashbackStartTransmissions, true, true);
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("Event_Nova06_TerrazineOn", 3), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.5);
    TriggerExecute(gt_NovaUsesTerrazine, true, false);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackMusicStarted = true;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Nova06_CinematicTop2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackAmbienceStarted = true;
    GameSetLighting("PortCityFlashback", 0.0);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_cinematicNova), c_animNameDefault);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2090)), c_orderQueueReplace);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1136)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(1136), 1.0, PointGetFacing(PointFromId(1136)))), c_orderQueueAddToEnd);
    gv_flashbackArrivalPoint = PointFromId(1136);
    UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2088), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2091), 7.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    TriggerExecute(gt_FlashbackTransmissionsPrechoice, true, true);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top2Flashback_Init () {
    gt_Top2Flashback = TriggerCreate("gt_Top2Flashback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 2 Choice
//--------------------------------------------------------------------------------------------------
bool gt_Top2Choice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto430EE3F8_g;
    int auto430EE3F8_u;
    unit auto430EE3F8_var;
    unitgroup autoFFB2711E_g;
    int autoFFB2711E_u;
    unit autoFFB2711E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_flashbackMusicStarted == false)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    if ((gv_flashbackAmbienceStarted == false)) {
        SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
        SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Nova06_CinematicTop2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        gv_flashbackAmbienceStarted = true;
    }

    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TransmissionClearAll();
        libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_cinematicNova), c_animNameDefault);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_flashbackNova), c_animNameDefault);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2091), 0.0, -1, 10, true);
        GameSetLighting("PortCityFlashback", 0.0);
        UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_flashbackNova, PointFromId(1136), false);
        UnitSetFacing(gv_flashbackNova, PointGetFacing(PointFromId(1136)), 0.0);
        libNtve_gf_PlayAnimation(gv_emitterDoodad, c_animNameDefault, "Stand", 0, c_animTimeDefault);
        ActorSend(gv_emitterDoodad, "SetOpacity 1.000000");
        TriggerStop(gt_NovaPlacesEmitter);
        libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal PsiEmitterRemove");
        CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    gv_buttonPressed = false;
    gv_doubleFlashbackChoice = true;
    TriggerExecute(gt_UpdateFlashbackDialog, true, true);
    libNtve_gf_SetDialogItemText(gv_flashbackDialog.lv_titleLabel, StringExternal("Param/Value/C20074AA"), PlayerGroupAll());
    DialogSetVisible(gv_flashbackDialog.lv_dialog, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_Nova06_SelectionScreen_Open", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_Nova06_SelectionScreen_Open2", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UISetCursorVisible(PlayerGroupAll(), true);
    while (!((gv_buttonPressed == true))) {
        Wait(0.0625, c_timeGame);
    }
    gv_flashbackPostChoiceDialogueFinished = false;
    gv_flashbackOverviewCamera = CameraInfoFromId(2093);
    gv_flashbackRetreatPoint = PointFromId(2092);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_FlashbackTransmissionsPostchoice, true, false);
    if ((gv_flashbackProgression == 4)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        gv_spawnFlashbackZerg = false;
        while (!((gv_spawnFlashbackZerg == true))) {
            Wait(0.25, c_timeGame);
        }
        gf_CreateFlashbackZerg(RegionFromId(50), RegionFromId(52), gv_emittersPlaced[(gv_emittersPlacedCounter - 1)]);
        gf_CreateFlashbackZerg(RegionFromId(51), RegionFromId(52), gv_emittersPlaced[gv_emittersPlacedCounter]);
    }

    while (!((gv_flashbackPostChoiceDialogueFinished == true))) {
        Wait(0.25, c_timeGame);
    }
    TriggerExecute(gt_CreateFullscreenFlashbackEffect, true, false);
    SoundPlayForPlayer(SoundLink("NovaUsesTerrazine", 0), c_maxPlayers, PlayerGroupAll(), 70.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova06_Flashback51", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midStinger = SoundLastPlayed();
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackAmbienceStarted = false;
    GameSetLighting("PortCity", 0.0);
    auto430EE3F8_g = gv_cinematicTempUnits;
    auto430EE3F8_u = UnitGroupCount(auto430EE3F8_g, c_unitCountAll);
    for (;; auto430EE3F8_u -= 1) {
        auto430EE3F8_var = UnitGroupUnitFromEnd(auto430EE3F8_g, auto430EE3F8_u);
        if (auto430EE3F8_var == null) { break; }
        UnitRemove(auto430EE3F8_var);
    }
    autoFFB2711E_g = gv_cinematicHiddenUnits;
    autoFFB2711E_u = UnitGroupCount(autoFFB2711E_g, c_unitCountAll);
    for (;; autoFFB2711E_u -= 1) {
        autoFFB2711E_var = UnitGroupUnitFromEnd(autoFFB2711E_g, autoFFB2711E_u);
        if (autoFFB2711E_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFFB2711E_var, true);
    }
    gf_CreateZergCamp(RegionFromId(19), 3, gv_emittersPlaced[(gv_emittersPlacedCounter - 1)]);
    gf_RunZergCampAI(RegionFromId(19), RegionFromId(17), PointFromId(2100));
    gf_CreateZergCamp(RegionFromId(20), 3, gv_emittersPlaced[gv_emittersPlacedCounter]);
    gf_RunZergCampAI(RegionFromId(20), RegionFromId(18), PointFromId(2101));
    gv_top2ZergCampsCreated = true;
    gf_PlayZergSound(gv_emittersPlaced[(gv_emittersPlacedCounter - 1)]);
    gf_PlayZergSound(gv_emittersPlaced[gv_emittersPlacedCounter]);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2094), 0.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("Event_Nova06_CameraWhoosh", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2098), gv_flashbackPanDuration, -1, 10, true);
    Wait(gv_flashbackPanDuration, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top2Choice_Init () {
    gt_Top2Choice = TriggerCreate("gt_Top2Choice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top 2 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_Top2Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_finalDiscovery;

    // Automatic Variable Declarations
    unitgroup auto8B30B8F6_g;
    int auto8B30B8F6_u;
    unit auto8B30B8F6_var;
    unitgroup auto483BE7D6_g;
    int auto483BE7D6_u;
    unit auto483BE7D6_var;
    unitgroup autoB12B5247_g;
    int autoB12B5247_u;
    unit autoB12B5247_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    auto8B30B8F6_g = gv_cinematicTempUnits;
    auto8B30B8F6_u = UnitGroupCount(auto8B30B8F6_g, c_unitCountAll);
    for (;; auto8B30B8F6_u -= 1) {
        auto8B30B8F6_var = UnitGroupUnitFromEnd(auto8B30B8F6_g, auto8B30B8F6_u);
        if (auto8B30B8F6_var == null) { break; }
        UnitRemove(auto8B30B8F6_var);
    }
    auto483BE7D6_g = gv_cinematicHiddenUnits;
    auto483BE7D6_u = UnitGroupCount(auto483BE7D6_g, c_unitCountAll);
    for (;; auto483BE7D6_u -= 1) {
        auto483BE7D6_var = UnitGroupUnitFromEnd(auto483BE7D6_g, auto483BE7D6_u);
        if (auto483BE7D6_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto483BE7D6_var, true);
    }
    autoB12B5247_g = gv_cinematicPausedUnits;
    autoB12B5247_u = UnitGroupCount(autoB12B5247_g, c_unitCountAll);
    for (;; autoB12B5247_u -= 1) {
        autoB12B5247_var = UnitGroupUnitFromEnd(autoB12B5247_g, autoB12B5247_u);
        if (autoB12B5247_var == null) { break; }
        libNtve_gf_PauseUnit(autoB12B5247_var, false);
    }
    if ((gv_top2ZergCampsCreated == false)) {
        gf_CreateZergCamp(RegionFromId(19), 3, gv_emittersPlaced[(gv_emittersPlacedCounter - 1)]);
        gf_RunZergCampAI(RegionFromId(19), RegionFromId(17), PointFromId(2100));
        gf_CreateZergCamp(RegionFromId(20), 3, gv_emittersPlaced[gv_emittersPlacedCounter]);
        gf_RunZergCampAI(RegionFromId(20), RegionFromId(18), PointFromId(2101));
    }

    TriggerExecute(gt_Top2CorruptorPatrol, true, false);
    TriggerStop(gt_MidSummonZergMusic);
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundStop(gv_midStinger, true);
    SoundStop(gv_midStinger2, true);
    if ((gv_flashbackAmbienceStarted == true)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    TriggerStop(gt_NovaPlacesEmitter);
    TriggerStop(gt_CreateFullscreenFlashbackEffect);
    DialogDestroy(gv_flashbackEffectDialog);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    gv_topAttackSpawn = RegionFromId(53);
    gv_midOverseerDespawn = PointFromId(1708);
    if ((gv_coordinatesSearched[2] == false)) {
        RegionPlayableMapSet(RegionFromId(28));
    }

    if ((gv_coordinatesSearched[2] == true) && (gv_coordinatesSearched[4] == false)) {
        RegionPlayableMapSet(RegionFromId(29));
        TriggerExecute(gt_SpawnZergCampTop5, true, false);
        TriggerExecute(gt_ActivateLeftBridge, true, false);
        libNtve_gf_ShowHideUnit(UnitFromId(3274), true);
    }

    if ((gv_coordinatesSearched[4] == true)) {
        RegionPlayableMapSet(RegionFromId(30));
        lv_finalDiscovery = true;
        TriggerExecute(gt_SpawnZergCampTop5, true, false);
        TriggerExecute(gt_SpawnZergCamp6, true, false);
        TriggerExecute(gt_ActivateRightBridge, true, false);
        TriggerExecute(gt_ActivateLeftBridge, true, false);
        TriggerExecute(gt_EndCorruptorPatrol, true, false);
        libNtve_gf_ShowHideUnit(UnitFromId(3274), true);
    }

    if ((gv_cinematicCompleted == false)) {
        GameSetLighting("PortCity", 0.0);
    }

    if ((gv_cinematicCompleted == true)) {
        libNCMI_gf_CinematicModeCampaign(false, 1.5, true);
    }
    else {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2098), 0.0, -1, 10.0, true);
        libNCMI_gf_CinematicModeCampaign(false, 1.0, false);
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(17), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(18), 0.1, false);
    UnitSelect(gv_artanis, gv_pLAYER_01_USER, true);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_PostCinematicTransmissions, true, true);
    if ((lv_finalDiscovery == true) && (gv_coordinatesSearched[5] == false) && (libNCMI_gf_GameIsOver() == false)) {
        libNCMI_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(27)), StringExternal("Param/Value/CA7E3D2F"));
        gv_coordinatePings[5] = PingLastCreated();
        Wait(2.0, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Top2Cleanup_Init () {
    gt_Top2Cleanup = TriggerCreate("gt_Top2Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_Right2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_Right2Setup, true, true);
    TriggerExecute(gt_Right2Flashback, true, true);
    TriggerExecute(gt_Right2Choice, true, true);
    TriggerExecute(gt_Right2Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right2Q_Init () {
    gt_Right2Q = TriggerCreate("gt_Right2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 2 Setup
//--------------------------------------------------------------------------------------------------
bool gt_Right2Setup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD26E13A8_g;
    int autoD26E13A8_u;
    unit autoD26E13A8_var;
    unitgroup autoBCF5070E_g;
    int autoBCF5070E_u;
    unit autoBCF5070E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    RegionPlayableMapSet(RegionEntireMap());
    gv_flashbackProgression += 1;
    gv_stadiumActive = true;
    gv_cinematicPausedUnits = UnitGroupEmpty();
    autoD26E13A8_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD26E13A8_u = UnitGroupCount(autoD26E13A8_g, c_unitCountAll);
    for (;; autoD26E13A8_u -= 1) {
        autoD26E13A8_var = UnitGroupUnitFromEnd(autoD26E13A8_g, autoD26E13A8_u);
        if (autoD26E13A8_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoD26E13A8_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoD26E13A8_var);
            libNtve_gf_PauseUnit(autoD26E13A8_var, true);
        }

    }
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoBCF5070E_g = gv_cinematicHiddenUnits;
    autoBCF5070E_u = UnitGroupCount(autoBCF5070E_g, c_unitCountAll);
    for (;; autoBCF5070E_u -= 1) {
        autoBCF5070E_var = UnitGroupUnitFromEnd(autoBCF5070E_g, autoBCF5070E_u);
        if (autoBCF5070E_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoBCF5070E_var, false);
    }
    UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(8)), 45.0);
    gv_cinematicNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicNova);
    UnitAbilityEnable(gv_cinematicNova, "attack", false);
    UnitSetState(gv_cinematicNova, c_unitStateFidget, false);
    UnitSetState(gv_cinematicNova, c_unitStateInvulnerable, true);
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2784)), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(gv_cinematicNova, "Signal Disarm");
    UnitCreate(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2788), PointGetFacing(PointFromId(2788)));
    gv_flashbackNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_flashbackNova);
    UnitAbilityEnable(gv_flashbackNova, "attack", false);
    UnitSetState(gv_flashbackNova, c_unitStateFidget, false);
    UnitSetState(gv_flashbackNova, c_unitStateInvulnerable, true);
    UnitBehaviorAdd(gv_flashbackNova, "PermanentlyCloaked", gv_flashbackNova, 1);
    ActorSend(libNtve_gf_MainActorofUnit(gv_flashbackNova), "ModelSwap NovaHeroBase");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal Disarm");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal RemoveEquipment");
    libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal PsiEmitterAdd");
    UnitSetPropertyFixed(gv_flashbackNova, c_unitPropMovementSpeed, 2.25);
    UnitCreate(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2085), PointGetFacing(PointFromId(2085)));
    gv_flashbackStone = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_flashbackStone);
    UnitAbilityEnable(gv_flashbackStone, "attack", false);
    UnitSetState(gv_flashbackStone, c_unitStateFidget, false);
    UnitSetState(gv_flashbackStone, c_unitStateInvulnerable, true);
    UnitBehaviorAdd(gv_flashbackStone, "PermanentlyCloaked", gv_flashbackStone, 1);
    libNtve_gf_ShowHideUnit(UnitFromId(871), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1025), true);
    gf_CreateFlashbackCivilians(4, RegionFromId(56));
    gf_CreateFlashbackCivilians(6, RegionFromId(100));
    gf_CreateFlashbackCivilians(4, RegionFromId(99));
    gf_CreateFlashbackCivilians(4, RegionFromId(96));
    gf_CreateFlashbackCivilians(8, RegionFromId(55));
    gf_CreateFlashbackCivilians(8, RegionFromId(101));
    gf_CreateFlashbackCivilians(4, RegionFromId(88));
    gf_CreateFlashbackCivilians(4, RegionFromId(95));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right2Setup_Init () {
    gt_Right2Setup = TriggerCreate("gt_Right2Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 2 Flashback
//--------------------------------------------------------------------------------------------------
bool gt_Right2Flashback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2797), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2786), 4.0, -1, 10, true);
    gv_flashbackMusicStarted = false;
    gv_flashbackAmbienceStarted = false;
    gv_emitterDoodad = ActorFromDoodad(DoodadFromId(2418));
    ActorSend(gv_emitterDoodad, "SetOpacity");
    gv_flashbackZoomCamera = CameraInfoFromId(2432);
    if ((gv_flashbackProgression == 4)) {
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(59), "PortCity_CarTraffic_d");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(59), "PortCity_CarTraffic_e");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(59), "PortCity_CarTraffic_f");
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 0.5);
    TriggerExecute(gt_FlashbackStartTransmissions, true, true);
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("Event_Nova06_TerrazineOn", 1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.5);
    TriggerExecute(gt_NovaUsesTerrazine, true, false);
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackMusicStarted = true;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Nova06_CinematicRight2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackAmbienceStarted = true;
    GameSetLighting("PortCityFlashback", 0.0);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_cinematicNova), c_animNameDefault);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2791)), c_orderQueueReplace);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3050)), c_orderQueueAddToEnd);
    gv_flashbackArrivalPoint = PointFromId(3050);
    UnitIssueOrder(gv_flashbackNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(gv_flashbackArrivalPoint, 1.0, PointGetFacing(gv_flashbackArrivalPoint))), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2787), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2789), 7.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    TriggerExecute(gt_FlashbackTransmissionsPrechoice, true, true);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right2Flashback_Init () {
    gt_Right2Flashback = TriggerCreate("gt_Right2Flashback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 2 Choice
//--------------------------------------------------------------------------------------------------
bool gt_Right2Choice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBCC28828_g;
    int autoBCC28828_u;
    unit autoBCC28828_var;
    unitgroup auto6242AE7E_g;
    int auto6242AE7E_u;
    unit auto6242AE7E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_flashbackMusicStarted == false)) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    if ((gv_flashbackAmbienceStarted == false)) {
        SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
        SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Nova06_CinematicRight2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        gv_flashbackAmbienceStarted = true;
    }

    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        TransmissionClearAll();
        libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_cinematicNova), c_animNameDefault);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_flashbackNova), c_animNameDefault);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2789), 0.0, -1, 10, true);
        GameSetLighting("PortCityFlashback", 0.0);
        UnitIssueOrder(gv_flashbackNova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_flashbackNova, PointFromId(3050), false);
        UnitSetFacing(gv_flashbackNova, PointGetFacing(PointFromId(3050)), 0.0);
        libNtve_gf_PlayAnimation(gv_emitterDoodad, c_animNameDefault, "Stand", 0, c_animTimeDefault);
        ActorSend(gv_emitterDoodad, "SetOpacity 1.000000");
        TriggerStop(gt_NovaPlacesEmitter);
        libNtve_gf_SendActorMessageToUnit(gv_flashbackNova, "Signal PsiEmitterRemove");
        CinematicFade(true, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    gv_buttonPressed = false;
    gv_doubleFlashbackChoice = true;
    TriggerExecute(gt_UpdateFlashbackDialog, true, true);
    libNtve_gf_SetDialogItemText(gv_flashbackDialog.lv_titleLabel, StringExternal("Param/Value/B6476CE9"), PlayerGroupAll());
    DialogSetVisible(gv_flashbackDialog.lv_dialog, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_Nova06_SelectionScreen_Open", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_Nova06_SelectionScreen_Open2", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UISetCursorVisible(PlayerGroupAll(), true);
    while (!((gv_buttonPressed == true))) {
        Wait(0.0625, c_timeGame);
    }
    gv_flashbackPostChoiceDialogueFinished = false;
    gv_flashbackOverviewCamera = CameraInfoFromId(2790);
    gv_flashbackRetreatPoint = PointFromId(2792);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_FlashbackTransmissionsPostchoice, true, false);
    if ((gv_flashbackProgression == 4)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        gv_spawnFlashbackZerg = false;
        while (!((gv_spawnFlashbackZerg == true))) {
            Wait(0.25, c_timeGame);
        }
        gf_CreateFlashbackZerg(RegionFromId(58), RegionFromId(59), gv_emittersPlaced[(gv_emittersPlacedCounter - 1)]);
        gf_CreateFlashbackZerg(RegionFromId(57), RegionFromId(59), gv_emittersPlaced[gv_emittersPlacedCounter]);
    }

    while (!((gv_flashbackPostChoiceDialogueFinished == true))) {
        Wait(0.25, c_timeGame);
    }
    TriggerExecute(gt_CreateFullscreenFlashbackEffect, true, false);
    SoundPlayForPlayer(SoundLink("NovaUsesTerrazine", 0), c_maxPlayers, PlayerGroupAll(), 70.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova06_Flashback51", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_midStinger = SoundLastPlayed();
    CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_flashbackAmbienceStarted = false;
    GameSetLighting("PortCity", 0.0);
    autoBCC28828_g = gv_cinematicTempUnits;
    autoBCC28828_u = UnitGroupCount(autoBCC28828_g, c_unitCountAll);
    for (;; autoBCC28828_u -= 1) {
        autoBCC28828_var = UnitGroupUnitFromEnd(autoBCC28828_g, autoBCC28828_u);
        if (autoBCC28828_var == null) { break; }
        UnitRemove(autoBCC28828_var);
    }
    auto6242AE7E_g = gv_cinematicHiddenUnits;
    auto6242AE7E_u = UnitGroupCount(auto6242AE7E_g, c_unitCountAll);
    for (;; auto6242AE7E_u -= 1) {
        auto6242AE7E_var = UnitGroupUnitFromEnd(auto6242AE7E_g, auto6242AE7E_u);
        if (auto6242AE7E_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6242AE7E_var, true);
    }
    gf_CreateZergCamp(RegionFromId(25), 3, gv_emittersPlaced[(gv_emittersPlacedCounter - 1)]);
    gf_RunZergCampAI(RegionFromId(25), RegionFromId(23), PointFromId(2796));
    gf_CreateZergCamp(RegionFromId(26), 3, gv_emittersPlaced[gv_emittersPlacedCounter]);
    gf_RunZergCampAI(RegionFromId(26), RegionFromId(24), PointFromId(2795));
    gv_right2ZergCampsCreated = true;
    gf_PlayZergSound(gv_emittersPlaced[(gv_emittersPlacedCounter - 1)]);
    gf_PlayZergSound(gv_emittersPlaced[gv_emittersPlacedCounter]);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2793), 0.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("Event_Nova06_CameraWhoosh", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2794), gv_flashbackPanDuration, -1, 10, true);
    Wait(gv_flashbackPanDuration, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right2Choice_Init () {
    gt_Right2Choice = TriggerCreate("gt_Right2Choice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right 2 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_Right2Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_finalDiscovery;

    // Automatic Variable Declarations
    unitgroup auto71BF3C41_g;
    int auto71BF3C41_u;
    unit auto71BF3C41_var;
    unitgroup autoA9121B5A_g;
    int autoA9121B5A_u;
    unit autoA9121B5A_var;
    unitgroup auto9B27DC50_g;
    int auto9B27DC50_u;
    unit auto9B27DC50_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    auto71BF3C41_g = gv_cinematicTempUnits;
    auto71BF3C41_u = UnitGroupCount(auto71BF3C41_g, c_unitCountAll);
    for (;; auto71BF3C41_u -= 1) {
        auto71BF3C41_var = UnitGroupUnitFromEnd(auto71BF3C41_g, auto71BF3C41_u);
        if (auto71BF3C41_var == null) { break; }
        UnitRemove(auto71BF3C41_var);
    }
    autoA9121B5A_g = gv_cinematicHiddenUnits;
    autoA9121B5A_u = UnitGroupCount(autoA9121B5A_g, c_unitCountAll);
    for (;; autoA9121B5A_u -= 1) {
        autoA9121B5A_var = UnitGroupUnitFromEnd(autoA9121B5A_g, autoA9121B5A_u);
        if (autoA9121B5A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA9121B5A_var, true);
    }
    auto9B27DC50_g = gv_cinematicPausedUnits;
    auto9B27DC50_u = UnitGroupCount(auto9B27DC50_g, c_unitCountAll);
    for (;; auto9B27DC50_u -= 1) {
        auto9B27DC50_var = UnitGroupUnitFromEnd(auto9B27DC50_g, auto9B27DC50_u);
        if (auto9B27DC50_var == null) { break; }
        libNtve_gf_PauseUnit(auto9B27DC50_var, false);
    }
    if ((gv_right2ZergCampsCreated == false)) {
        gf_CreateZergCamp(RegionFromId(25), 3, gv_emittersPlaced[(gv_emittersPlacedCounter - 1)]);
        gf_RunZergCampAI(RegionFromId(25), RegionFromId(23), PointFromId(2796));
        gf_CreateZergCamp(RegionFromId(26), 3, gv_emittersPlaced[gv_emittersPlacedCounter]);
        gf_RunZergCampAI(RegionFromId(26), RegionFromId(24), PointFromId(2795));
    }

    TriggerExecute(gt_Right2CorruptorPatrol, true, false);
    TriggerStop(gt_MidSummonZergMusic);
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryMission, "Reverb_Nova06_Flashback01");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryMission, "Echo_Nova06_Flashback01");
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundStop(gv_midStinger, true);
    SoundStop(gv_midStinger2, true);
    if ((gv_flashbackAmbienceStarted == true)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    TriggerStop(gt_NovaPlacesEmitter);
    TriggerStop(gt_CreateFullscreenFlashbackEffect);
    DialogDestroy(gv_flashbackEffectDialog);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    gv_rightAttackSpawn = RegionFromId(60);
    gv_stadiumActive = false;
    if ((gv_coordinatesSearched[1] == false)) {
        RegionPlayableMapSet(RegionFromId(31));
    }

    if ((gv_coordinatesSearched[1] == true) && (gv_coordinatesSearched[3] == false)) {
        RegionPlayableMapSet(RegionFromId(32));
        TriggerExecute(gt_SpawnZergCampRight5, true, false);
        TriggerExecute(gt_ActivateRightBridge, true, false);
        libNtve_gf_ShowHideUnit(UnitFromId(3274), true);
    }

    if ((gv_coordinatesSearched[3] == true)) {
        RegionPlayableMapSet(RegionFromId(30));
        lv_finalDiscovery = true;
        TriggerExecute(gt_SpawnZergCampRight5, true, false);
        TriggerExecute(gt_SpawnZergCamp6, true, false);
        TriggerExecute(gt_ActivateRightBridge, true, false);
        TriggerExecute(gt_ActivateLeftBridge, true, false);
        TriggerExecute(gt_EndCorruptorPatrol, true, false);
        libNtve_gf_ShowHideUnit(UnitFromId(3274), true);
    }

    if ((gv_cinematicCompleted == false)) {
        GameSetLighting("PortCity", 0.0);
    }

    if ((gv_cinematicCompleted == true)) {
        libNCMI_gf_CinematicModeCampaign(false, 1.5, true);
    }
    else {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2794), 0.0, -1, 10.0, true);
        libNCMI_gf_CinematicModeCampaign(false, 1.0, false);
        CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(24), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(23), 0.1, false);
    UnitSelect(gv_artanis, gv_pLAYER_01_USER, true);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_PostCinematicTransmissions, true, true);
    if ((lv_finalDiscovery == true) && (gv_coordinatesSearched[5] == false) && (libNCMI_gf_GameIsOver() == false)) {
        libNCMI_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(27)), StringExternal("Param/Value/899632E0"));
        gv_coordinatePings[5] = PingLastCreated();
        Wait(2.0, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Right2Cleanup_Init () {
    gt_Right2Cleanup = TriggerCreate("gt_Right2Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryFade, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerExecute(gt_ScenesMP02_040, true, true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto689866BD_g;
    int auto689866BD_u;
    unit auto689866BD_var;
    unitgroup auto7E315A97_g;
    int auto7E315A97_u;
    unit auto7E315A97_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionEntireMap());
    gv_cinematicPausedUnits = UnitGroupEmpty();
    auto689866BD_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto689866BD_u = UnitGroupCount(auto689866BD_g, c_unitCountAll);
    for (;; auto689866BD_u -= 1) {
        auto689866BD_var = UnitGroupUnitFromEnd(auto689866BD_g, auto689866BD_u);
        if (auto689866BD_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto689866BD_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto689866BD_var);
            libNtve_gf_PauseUnit(auto689866BD_var, true);
        }

    }
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto7E315A97_g = gv_cinematicHiddenUnits;
    auto7E315A97_u = UnitGroupCount(auto7E315A97_g, c_unitCountAll);
    for (;; auto7E315A97_u -= 1) {
        auto7E315A97_var = UnitGroupUnitFromEnd(auto7E315A97_g, auto7E315A97_u);
        if (auto7E315A97_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto7E315A97_var, false);
    }
    UnitCreate(1, "NovaHero", 0, gv_pLAYER_01_USER, PointFromId(2948), 45.0);
    gv_cinematicNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicNova);
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2949)), c_orderQueueReplace);
    UnitAbilityEnable(gv_cinematicNova, "attack", false);
    UnitSetState(gv_cinematicNova, c_unitStateFidget, false);
    UnitSetState(gv_cinematicNova, c_unitStateInvulnerable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2950), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2951), 4.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack6, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova06|Line00182", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova06|Line00062", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova06|Line00063", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(gv_cinematicNova), 1.0, 260.0)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeReal);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fade
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        SoundPlayForPlayer(SoundLink("Event_Nova06_TerrazineOn", 4), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_NovaUsesTerrazine, true, false);
        CinematicFade(false, 3.0, c_fadeStyleNormal, ColorWithAlpha(47.06, 19.61, 80.39, 0.00), 0.0, true);
        CutsceneFade(false, 2.0, Color(0.00, 0.00, 0.00), 100.0, PlayerGroupAll(), true);
        CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }
    else {
        CutsceneFade(false, 0.5, Color(0.00, 0.00, 0.00), 100.0, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFade_Init () {
    gt_VictoryFade = TriggerCreate("gt_VictoryFade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenes - MP02_040
//--------------------------------------------------------------------------------------------------
bool gt_ScenesMP02_040_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE6DE8887_g;
    int autoE6DE8887_u;
    unit autoE6DE8887_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE6DE8887_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE6DE8887_u = UnitGroupCount(autoE6DE8887_g, c_unitCountAll);
    for (;; autoE6DE8887_u -= 1) {
        autoE6DE8887_var = UnitGroupUnitFromEnd(autoE6DE8887_g, autoE6DE8887_u);
        if (autoE6DE8887_var == null) { break; }
        UnitRemove(autoE6DE8887_var);
    }
    EnvironmentShow(c_environmentAll, false);
    FogSetEnabled(false);
    GameSetLighting("NoLight", 0.0);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    TriggerEnable(gt_ScenesMP02_040EchoOn, true);
    TriggerEnable(gt_ScenesMP02_040EchoOff, true);
    TriggerEnable(gt_ScenesMP02_040Timestamp, true);
    TriggerEnable(gt_ScenesMP02_040OGVScreenCreate, true);
    TriggerEnable(gt_ScenesMP02_040PlayOGVMovie, true);
    TriggerEnable(gt_ScenesMP02_040StopMovie, true);
    libComC_gf_CampaignPlayCutscene("Cutscenes\\SMX3_Cutscene_MP02_040.SC2Cutscene", Point(64.0, 64.0), true, true);
    libComC_gf_HaltTimestamp();
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryDialogue, "Echo_CS_MP02_Flashback");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryDialogue, "Reverb_CS_MP02_Flashback");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryTV, "Reverb_NovaMP02_GriffinBridgeMS");
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 1.0);
    ActorSend(gv_mP02_040_Screen, libNtve_gf_TextureVideoStopAll());
    libNtve_gf_KillModel(gv_mP02_040_Screen);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryTV, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    TriggerEnable(gt_ScenesMP02_040EchoOn, false);
    TriggerEnable(gt_ScenesMP02_040EchoOff, false);
    TriggerEnable(gt_ScenesMP02_040Timestamp, false);
    TriggerEnable(gt_ScenesMP02_040OGVScreenCreate, false);
    TriggerEnable(gt_ScenesMP02_040PlayOGVMovie, false);
    TriggerEnable(gt_ScenesMP02_040StopMovie, false);
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScenesMP02_040_Init () {
    gt_ScenesMP02_040 = TriggerCreate("gt_ScenesMP02_040_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenes - MP02_040 - EchoOn
//--------------------------------------------------------------------------------------------------
bool gt_ScenesMP02_040EchoOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryDialogue, "Reverb_CS_MP02_Flashback");
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryDialogue, "Echo_CS_MP02_Flashback");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScenesMP02_040EchoOn_Init () {
    gt_ScenesMP02_040EchoOn = TriggerCreate("gt_ScenesMP02_040EchoOn_Func");
    TriggerEnable(gt_ScenesMP02_040EchoOn, false);
    TriggerAddEventCutsceneBookmarkFired(gt_ScenesMP02_040EchoOn, c_cutsceneNone, "EchoOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenes - MP02_040 - EchoOff
//--------------------------------------------------------------------------------------------------
bool gt_ScenesMP02_040EchoOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryDialogue, "Echo_CS_MP02_Flashback");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryDialogue, "Reverb_CS_MP02_Flashback");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScenesMP02_040EchoOff_Init () {
    gt_ScenesMP02_040EchoOff = TriggerCreate("gt_ScenesMP02_040EchoOff_Func");
    TriggerEnable(gt_ScenesMP02_040EchoOff, false);
    TriggerAddEventCutsceneBookmarkFired(gt_ScenesMP02_040EchoOff, c_cutsceneNone, "EchoOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenes - MP02_040 - Timestamp
//--------------------------------------------------------------------------------------------------
bool gt_ScenesMP02_040Timestamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libComC_gf_DisplayTimestamp("CutsceneMP02_040", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScenesMP02_040Timestamp_Init () {
    gt_ScenesMP02_040Timestamp = TriggerCreate("gt_ScenesMP02_040Timestamp_Func");
    TriggerEnable(gt_ScenesMP02_040Timestamp, false);
    TriggerAddEventCutsceneBookmarkFired(gt_ScenesMP02_040Timestamp, c_cutsceneNone, "ShowTimeStamp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenes - MP02_040 - OGV Screen Create
//--------------------------------------------------------------------------------------------------
bool gt_ScenesMP02_040OGVScreenCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("SMX3_Nova_Ship_Bridge_MainScreen", libNtve_gf_PointFromXYZ(64.0, 68.046, 4.6144));
    gv_mP02_040_Screen = libNtve_gf_ActorLastCreated();
    ActorSend(gv_mP02_040_Screen, "AliasAdd FunTest");
    ActorSend(gv_mP02_040_Screen, "ExternalFinderAdd");
    ActorSend(gv_mP02_040_Screen, "AnimPlay ShowScreen Morph,A PlayForever 0.000000 0.000000");
    ActorSend(ActorFrom("::external.Nova02_040"), "Attach ::external.FunTest {Origin 0} SOpAttachOrigin");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScenesMP02_040OGVScreenCreate_Init () {
    gt_ScenesMP02_040OGVScreenCreate = TriggerCreate("gt_ScenesMP02_040OGVScreenCreate_Func");
    TriggerEnable(gt_ScenesMP02_040OGVScreenCreate, false);
    TriggerAddEventCutsceneBookmarkFired(gt_ScenesMP02_040OGVScreenCreate, c_cutsceneNone, "Nova02_040ScreenCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenes - MP02_040 - Play OGV Movie
//--------------------------------------------------------------------------------------------------
bool gt_ScenesMP02_040PlayOGVMovie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFrom("::external.Nova02_040"), "Attach ::external.FunTest {Origin 0} SOpAttachOrigin");
    ActorSend(gv_mP02_040_Screen, libNtve_gf_ActorMsg1("TextureSelectById", ("video_newsreport_smx3_mp02_040")));
    ActorSend(gv_mP02_040_Screen, MakeMsgTextureVideoPlay("video", c_textureSlotComponentDefault, 30, c_textureVideoPlayFlagSynced, 1, "Transmission"));
    SoundChannelDSPInsert(PlayerGroupAll(), c_soundCategoryTV, "Reverb_NovaMP02_GriffinBridgeMS");
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 10.0, 1.5);
    Wait(5.0, c_timeReal);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 50.0, 6.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScenesMP02_040PlayOGVMovie_Init () {
    gt_ScenesMP02_040PlayOGVMovie = TriggerCreate("gt_ScenesMP02_040PlayOGVMovie_Func");
    TriggerEnable(gt_ScenesMP02_040PlayOGVMovie, false);
    TriggerAddEventCutsceneBookmarkFired(gt_ScenesMP02_040PlayOGVMovie, c_cutsceneNone, "Nova02_040Start");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenes - MP02_040 - Stop Movie
//--------------------------------------------------------------------------------------------------
bool gt_ScenesMP02_040StopMovie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryTV, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 1.0);
    ActorSend(gv_mP02_040_Screen, libNtve_gf_TextureVideoStopAll());
    ActorSend(gv_mP02_040_Screen, "AnimClear ShowScreen");
    SoundChannelDSPRemove(PlayerGroupAll(), c_soundCategoryTV, "Reverb_NovaMP02_GriffinBridgeMS");
    libNtve_gf_KillModel(gv_mP02_040_Screen);
    SoundPlayForPlayer(SoundLink("CS_SMX3_Cutscene_MP02_040_MonitorBeep", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScenesMP02_040StopMovie_Init () {
    gt_ScenesMP02_040StopMovie = TriggerCreate("gt_ScenesMP02_040StopMovie_Func");
    TriggerEnable(gt_ScenesMP02_040StopMovie, false);
    TriggerAddEventCutsceneBookmarkFired(gt_ScenesMP02_040StopMovie, c_cutsceneNone, "Nova02_040End");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugIntro_Init();
    gt_StartGameQ_Init();
    gt_BeaconChecks_Init();
    gt_KillNearbyZergQ_Init();
    gt_Autosave2Q_Init();
    gt_Autosave4Q_Init();
    gt_HatcheryDies1_Init();
    gt_HatcheryDies2_Init();
    gt_HatcheryDies3_Init();
    gt_KillBanelingNestsQ_Init();
    gt_KillSpiresQ_Init();
    gt_KillNydusNetworksQ_Init();
    gt_KillLurkerDensQ_Init();
    gt_KillGreaterSpiresQ_Init();
    gt_KillUltraliskCavernsQ_Init();
    gt_SpawnZergCampTop5_Init();
    gt_SpawnZergCampRight5_Init();
    gt_SpawnZergCamp6_Init();
    gt_OverseerDespawn_Init();
    gt_NewEquipmentPickupQ_Init();
    gt_SpawnBonusObjectiveCampQ_Init();
    gt_ActivateLeftBridge_Init();
    gt_ActivateRightBridge_Init();
    gt_SubwayIntroductionQ_Init();
    gt_SubwayExitClearedQ_Init();
    gt_SubwayPings_Init();
    gt_HatcheryQ_Init();
    gt_StartAI_Init();
    gt_AIUpgradeCasualNormal_Init();
    gt_AIUpgradeHard_Init();
    gt_AIUpgradeBrutal_Init();
    gt_Top2CorruptorPatrol_Init();
    gt_Right2CorruptorPatrol_Init();
    gt_EndCorruptorPatrol_Init();
    gt_AttackWaves1_Init();
    gt_AttackWaves2_Init();
    gt_AttackWaves3_Init();
    gt_NydusWormSpawning_Init();
    gt_NydusWormAI_Init();
    gt_FirstAttackQ_Init();
    gt_SecondAttackQ_Init();
    gt_FirstDoubleAttackQ_Init();
    gt_FirstEscalationQ_Init();
    gt_GenericAttackQ_Init();
    gt_SecondEscalationQ_Init();
    gt_UnitKilledbyNuke_Init();
    gt_ZergStructureKilled_Init();
    gt_AchievementNuclearStrikeUnitsKilledInitialize_Init();
    gt_AchievementNuclearStrikeUnitsKilledKillCounter_Init();
    gt_AchievementNuclearStrikeUnitsKilledAchievementGranted_Init();
    gt_DefeatBaseDead_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveSearchCoordinatesCreate_Init();
    gt_ObjectiveSearchCoordinatesComplete_Init();
    gt_ObjectiveSearchCoordinatesUpdate_Init();
    gt_ObjectiveRecoverEquipmentCreate_Init();
    gt_ObjectiveRecoverEquipmentComplete_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00_Init();
    gt_BriefingScene00EstablishZerg_Init();
    gt_BriefingScene01_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroZerg_Init();
    gt_IntroNovaOrders_Init();
    gt_IntroBaseFlyIn_Init();
    gt_IntroInfestorSounds_Init();
    gt_InitFlashbackDialog_Init();
    gt_UpdateFlashbackDialog_Init();
    gt_ButtonPressed_Init();
    gt_FlashbackStartTransmissions_Init();
    gt_FlashbackTransmissionsPrechoice_Init();
    gt_FlashbackTransmissionsPostchoice_Init();
    gt_PostCinematicTransmissions_Init();
    gt_NovaUsesTerrazine_Init();
    gt_NovaPlacesEmitter_Init();
    gt_MidSummonZergMusic_Init();
    gt_CreateFullscreenFlashbackEffect_Init();
    gt_Top1Q_Init();
    gt_Top1Setup_Init();
    gt_Top1Flashback_Init();
    gt_Top1Choice_Init();
    gt_Top1Cleanup_Init();
    gt_Top1StopCar_Init();
    gt_Right1Q_Init();
    gt_Right1Setup_Init();
    gt_Right1Flashback_Init();
    gt_Right1Choice_Init();
    gt_Right1Cleanup_Init();
    gt_Right1StopCar_Init();
    gt_Top2Q_Init();
    gt_Top2Setup_Init();
    gt_Top2Flashback_Init();
    gt_Top2Choice_Init();
    gt_Top2Cleanup_Init();
    gt_Right2Q_Init();
    gt_Right2Setup_Init();
    gt_Right2Flashback_Init();
    gt_Right2Choice_Init();
    gt_Right2Cleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryFade_Init();
    gt_VictoryCleanup_Init();
    gt_ScenesMP02_040_Init();
    gt_ScenesMP02_040EchoOn_Init();
    gt_ScenesMP02_040EchoOff_Init();
    gt_ScenesMP02_040Timestamp_Init();
    gt_ScenesMP02_040OGVScreenCreate_Init();
    gt_ScenesMP02_040PlayOGVMovie_Init();
    gt_ScenesMP02_040StopMovie_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
