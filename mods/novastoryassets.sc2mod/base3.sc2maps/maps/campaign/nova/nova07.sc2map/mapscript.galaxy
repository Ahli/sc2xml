//==================================================================================================
// 
// Generated Map Script
// 
// Name:   In The Enemy's Shadow
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "LibComC"
include "LibCMMI"
include "LibNovC"
include "LibNCMI"
include "LibNCUI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libComC_InitLib();
    libCMMI_InitLib();
    libNovC_InitLib();
    libNCMI_InitLib();
    libNCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_NOVASUPPORT = 2;
const int gv_pLAYER_03_DOMINION = 3;
const int gv_pLAYER_04_DEFENDERS = 4;
const int gv_pLAYER_05_DEFENDERS = 5;
const int gv_pLAYER_06_DEFENDERS_TRIPWIRES = 6;
const int gv_pLAYER_07_ANTI_CLOAK = 7;
const int gv_pLAYER_08_ANTI_JETPACK = 8;
const fixed gv_uNITINVESTIGATE_TRANSMISSIONCOOLDOWN = 30.0;
const fixed gv_eNGAGINGTARGET_TRANSMISSIONCOOLDOWN = 30.0;
const fixed gv_nOVARECLOAKS_TRANSMISSIONCOOLDOWN = 30.0;
const int gv_cUSTOMVALUEINDEX_DOMINATEDUNIT = 5;
const int gv_achievementDominationKillsRequired = 20;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_stage1Active;
bool gv_stage2Active;
string gv_mapMusicTrack;
string gv_mapMusicTrack4;
string gv_mapMusicTrack2;
string gv_mapMusicTrack3;
string gv_mapMusicTrack5;
unit gv_nova;
unit gv_davis;
unit gv_stone;
unit gv_pierce;
unit gv_delta;
playergroup gv_allyPlayerGroup;
playergroup gv_enemyPlayerGroup;
unitgroup gv_stage2PausedUnits;
string gv_gearSwapCurrentHead;
string gv_gearSwapCurrentSuit;
string gv_gearSwapCurrentGadget;
string gv_gearSwapCurrentWeapon;
bool gv_gearSwapScreenOpen;
unitgroup gv_gearSwapPausedUnits;
unitgroup gv_gearSwapCrates;
int gv_unitInvestigateTransmissionCycleGhost;
int gv_unitInvestigateTransmissionCycleTrooper;
int gv_unitInvestigateTransmissionCycleMarauder;
int gv_engagingTargetTransmissionCycleGhost;
int gv_engagingTargetTransmissionCycleTrooper;
int gv_novaReCloaksTransmissionCycleGhost;
int gv_novaReCloaksTransmissionCycleTrooper;
timer gv_unitInvestigateTransmissionCooldownTimer;
timer gv_engagingTargetTransmissionCooldownTimer;
timer gv_novaReCloaksTransmissionCooldownTimer;
point gv_combatLastKnownPosition;
unitgroup gv_scientistsGroup;
fixed gv_tripWire_FriendlyTrip_TransmissionCooldown;
timer gv_tripWire_FriendlyTrip_TransmissionTimer;
int gv_tripWire_FriendlyTrip_TransmissionIter_Trooper;
int gv_tripWire_FriendlyTrip_TransmissionIter_Generic;
unit gv_dominatedBuddyUnit;
unitgroup gv_holoDecoyUnits;
int gv_startGameTransmission;
bool gv_holdFireActivated;
string gv_lighting_Sewers;
int gv_currentStage;
string gv_lighting_Facility;
timer gv_autoSaveTimer;
fixed gv_autoSaveTimerCooldown;
string gv_ambienceSound_Sewers;
string gv_ambienceSound_Facility_Outside;
region gv_ambienceRegion_Facility_Outside;
actor gv_ambienceActor_Facility_Outside;
string gv_ambienceSound_Facility_Inside;
region gv_ambienceRegion_Facility_Inside;
actor gv_ambienceActor_Facility_Inside;
unitgroup gv_plasmaPuddleUnitGroup;
unitgroup gv_s1_TrooperBackupGroup;
unit gv_s1_ThorFriend;
int gv_s1_VisorTransmission01;
int gv_s1_VisorTransmission02;
int gv_s1_ThorTransmission;
unit gv_s1_TripWire_Critter;
unitgroup gv_s1_TripWire_DefendersUnits;
int gv_s1_TripWireTransmission;
unitgroup gv_s1_MarauderGankGroup;
timer gv_s1_GhostAlleyCooldownTimer;
timer gv_s1_LastEncounterAreaCooldownTimer;
unit gv_s1_FacilityEntrance;
fixed gv_s2_RotatingTurretAlertUpTime;
int gv_s2_OverheardConversationTransmission04;
sound gv_civilian_Cheers_01;
sound gv_civilian_Cheers_02;
sound gv_civilian_Cheers_03;
timer gv_s2_AutoSaveAfterDoorOpenedTimer;
unitgroup gv_s2_TargetPracticeGuys;
int gv_s2_SecurityRoomTransmission;
unitgroup gv_s3_PlayerUnitGroup;
unitgroup gv_s3_PlayerHoloDecoyTargetsGroup;
timer gv_s3_DMatrixRecastTimer;
fixed gv_s3_DMatrixRecastCooldown;
timer gv_s3_SnipeTimer;
fixed gv_s3_SnipeCooldown;
timer gv_s3_EMPTimer;
fixed gv_s3_EMPCooldown;
timer gv_s3_BlinkTimer;
fixed gv_s3_BlinkCooldown;
fixed gv_s3_StoneDefeatHPPercent;
int gv_s3_AlarmBotSpawnPointIter;
bool gv_s3_AlarmBotSpawnBusy01;
bool gv_s3_AlarmBotSpawnBusy02;
unitgroup gv_s3_SnipeMissedTargets;
int gv_statDominationsCount;
int gv_statGearSwapCount;
int gv_achievementDominationKills;
timer gv_achievementMasteryTimer;
fixed gv_achievementMasteryTime;
int gv_achievement_UnitKills;
int gv_mapStage;
int gv_objectiveDestroyZergBase;
int gv_objectiveDestroyZergBase5;
int gv_objectiveDestroyZergBase8;
int gv_objectiveUnlockDoorToDavisCount;
int gv_objectiveUnlockDoorToDavisMax;
int gv_objectiveDestroyZergBase9;
int gv_objectiveDestroyZergBase7;
int gv_objectiveDestroyZergBase6;
int gv_objectiveRescueStalkers;
int gv_objectiveRescueStalkers2;
int gv_objectiveRescueStalkers3;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_midDoor;
unit gv_midDavis;
unit gv_midCinematicNova;
unit gv_cinematicTargetDummy;
unit gv_victoryNova;
unit gv_victoryDavis;

void InitGlobals () {
    gv_stage1Active = true;
    gv_nova = UnitFromId(1);
    gv_davis = UnitFromId(582148282);
    gv_stone = UnitFromId(1883379535);
    gv_pierce = UnitFromId(28324647);
    gv_delta = UnitFromId(1947179403);
    gv_allyPlayerGroup = PlayerGroupEmpty();
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_stage2PausedUnits = UnitGroupEmpty();
    gv_gearSwapCurrentHead = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotHelmet");
    gv_gearSwapCurrentSuit = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotSuit");
    gv_gearSwapCurrentGadget = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotGadget");
    gv_gearSwapCurrentWeapon = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotWeapon");
    gv_gearSwapPausedUnits = UnitGroupEmpty();
    gv_gearSwapCrates = UnitGroupEmpty();
    gv_unitInvestigateTransmissionCooldownTimer = TimerCreate();
    gv_engagingTargetTransmissionCooldownTimer = TimerCreate();
    gv_novaReCloaksTransmissionCooldownTimer = TimerCreate();
    gv_scientistsGroup = UnitGroupEmpty();
    gv_tripWire_FriendlyTrip_TransmissionCooldown = 20.0;
    gv_tripWire_FriendlyTrip_TransmissionTimer = TimerCreate();
    gv_holoDecoyUnits = UnitGroupEmpty();
    gv_startGameTransmission = c_invalidTransmissionId;
    gv_lighting_Sewers = "CompoundSewer";
    gv_lighting_Facility = "CompoundMansion";
    gv_autoSaveTimer = TimerCreate();
    gv_autoSaveTimerCooldown = 60.0;
    gv_ambienceSound_Sewers = "Ambience_Nova07_Sewer_Quad";
    gv_ambienceSound_Facility_Outside = "Ambience_Nova07_Outside";
    gv_ambienceSound_Facility_Inside = "Ambience_Nova07_Inside";
    gv_plasmaPuddleUnitGroup = UnitGroupEmpty();
    gv_s1_TrooperBackupGroup = UnitGroupEmpty();
    gv_s1_VisorTransmission01 = c_invalidTransmissionId;
    gv_s1_VisorTransmission02 = c_invalidTransmissionId;
    gv_s1_ThorTransmission = c_invalidTransmissionId;
    gv_s1_TripWire_Critter = UnitFromId(1840974833);
    gv_s1_TripWire_DefendersUnits = UnitGroupEmpty();
    gv_s1_TripWireTransmission = c_invalidTransmissionId;
    gv_s1_MarauderGankGroup = UnitGroupEmpty();
    gv_s1_GhostAlleyCooldownTimer = TimerCreate();
    gv_s1_LastEncounterAreaCooldownTimer = TimerCreate();
    gv_s1_FacilityEntrance = UnitFromId(1448970569);
    gv_s2_RotatingTurretAlertUpTime = libNCMI_gv_nM_StealthAI_UnitReactionTime;
    gv_s2_OverheardConversationTransmission04 = c_invalidTransmissionId;
    gv_s2_AutoSaveAfterDoorOpenedTimer = TimerCreate();
    gv_s2_TargetPracticeGuys = UnitGroupEmpty();
    gv_s2_SecurityRoomTransmission = c_invalidTransmissionId;
    gv_s3_PlayerUnitGroup = UnitGroupEmpty();
    gv_s3_PlayerHoloDecoyTargetsGroup = UnitGroupEmpty();
    gv_s3_DMatrixRecastTimer = TimerCreate();
    gv_s3_DMatrixRecastCooldown = libLotv_gf_DifficultyValueFixed2(20.0, 20.0, 15.0, 10.0);
    gv_s3_SnipeTimer = TimerCreate();
    gv_s3_SnipeCooldown = libLotv_gf_DifficultyValueFixed2(10.0, 10.0, 8.0, 6.0);
    gv_s3_EMPTimer = TimerCreate();
    gv_s3_EMPCooldown = libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 1.0, 1.0);
    gv_s3_BlinkTimer = TimerCreate();
    gv_s3_BlinkCooldown = libLotv_gf_DifficultyValueFixed2(20.0, 20.0, 17.0, 15.0);
    gv_s3_StoneDefeatHPPercent = 15.0;
    gv_s3_SnipeMissedTargets = UnitGroupEmpty();
    gv_achievementMasteryTimer = TimerCreate();
    gv_achievementMasteryTime = (4.0 * 60.0);
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase5 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase8 = c_invalidObjectiveId;
    gv_objectiveUnlockDoorToDavisMax = libComC_gf_MissionObjectiveItemCount("Nova07Primary03");
    gv_objectiveDestroyZergBase9 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase7 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase6 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers3 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_S2TrackUnitHitBySonar (unit lp_trackedUnit);
point gf_RandomPointinRegionSharedbyGroup (region lp_region, unitgroup lp_unitGroup);
void gf_NovaEquipmentScreenCloses (trigger t);
void gf_DOMUnitsInvestigateTransmissionsQ (unitgroup lp_investigatingUnitGroup, point lp_investigatingPoint);
void gf_S2DominatedUnitOpensDoorQ (unit lp_dominatedUnit);
void gf_S2DominatedUnitCantOpenDoorQ (unit lp_dominatedUnit);
void gf_S2HandleScientistRespawn (unit lp_unit, point lp_respawnPoint);
void gf_S3SpawnAlarmBotPatrol (int lp_spawnPointIter);
void gf_S3StoneCastsDefensiveMatrix ();
void gf_S3StoneCastsSnipe (unit lp_snipeTargetUnit);
void gf_S3StoneCastsEMP (point lp_eMPTargetPoint);
void gf_S3StoneCastsBlink (point lp_blinkTargetPoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init03aStage01Sewers;
trigger gt_Init03bStage02Facility;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugIntro;
trigger gt_DebugStage2;
trigger gt_DebugStage3;
trigger gt_DebugAllowAllNovaTech;
trigger gt_DebugOpenNovaTechScreen;
trigger gt_NovaHitBySonar;
trigger gt_NovaPicksUpRestorationCharge;
trigger gt_NovaEntersGearSwap;
trigger gt_NovaExitsGearSwapScreen;
trigger gt_NovaNearGearSwaps;
trigger gt_NovaKillsDOMUnitInDefendRegion;
trigger gt_NovaAttacksDOMUnitInDefendRegion;
trigger gt_NovaFlashbangsUnitInDefendRegion;
trigger gt_DOMUnitsEngagingTargetTransmissionsQ;
trigger gt_NovaLosesDetectorConeDetectedStillCloakedQ;
trigger gt_NovaReCloaksTransmissionQ;
trigger gt_ScientistsGetScurred;
trigger gt_PlayerUnitCrossesTripWireQ;
trigger gt_UndominatedScientistCrossesTripWire;
trigger gt_UnitIsDominated;
trigger gt_DominatedUnitAttacks;
trigger gt_DominatedUnitGivenAttackOrder;
trigger gt_DominatedUnitUsesAbility;
trigger gt_NovaAttackedWhileHavingHarmlessDominatedBuddy;
trigger gt_DominatedUnitGoesHostileToDOM;
trigger gt_HoloDecoyIsCreated;
trigger gt_StartGameCleanup;
trigger gt_StartGame01IntroQ;
trigger gt_StartGame02MainQ;
trigger gt_StartGame03StoneFightQ;
trigger gt_StartGameTeachingHoldFire;
trigger gt_MonitorHoldFireActivation;
trigger gt_SetupStage02Ambiences;
trigger gt_NovaFiresPlasmaShot;
trigger gt_DestroyPlasmaPuddleShotIfInUnpathable;
trigger gt_S1SetSewerReverbonLoad;
trigger gt_S1NovaEntersDeadEndTransmissionQ;
trigger gt_S1CombatInDefendRegionsController;
trigger gt_S1CombatInInitialEncounter;
trigger gt_S1CombatInInitialEncounterTransmissionQ;
trigger gt_S1AllDetectorsDeadInInitialEncounter;
trigger gt_S1AllDetectorsDeadInInitialEncounterTransmissionQ;
trigger gt_S1NovaFindsShortcutQ;
trigger gt_S1NovaFindsShortcutFromWrongSide;
trigger gt_S1ReigelDetectsSideRoomQ;
trigger gt_S1ScientistLeavesToGoHomeQ;
trigger gt_S1Scientist2SeesNovaQ;
trigger gt_S1NovaPicksUpDominationVisorQ;
trigger gt_S1NovaSeesThorBuddyQ;
trigger gt_S1ThorDamagedRemoveHarmless;
trigger gt_S1ThorCantProceedQ;
trigger gt_S1IntroTripWiresQ;
trigger gt_S1TripWiresTrippedQ;
trigger gt_S1TripWiresFlashbangedQ;
trigger gt_S1NovaEncountersWidowMineQ;
trigger gt_S1WidowMineBurrowsDamage;
trigger gt_S1WidowMineBurrowsDistance;
trigger gt_S1AllDetectorsDeadInTripWirePractice;
trigger gt_S1AllDetectorsDeadInTripWirePracticeTransmissionQ;
trigger gt_S1CombatInMarauderGank;
trigger gt_S1NovaEntersAlarmBotIntroQ;
trigger gt_S1IntroAlarmBotDies;
trigger gt_S1GearSwapIntroQ;
trigger gt_S1UnitAttackedInGhostAlley;
trigger gt_S1GhostAlleyTimerEnds;
trigger gt_S1TripWireLastEncounterCrossed;
trigger gt_S1TripWireLastEncounterTimerEnds;
trigger gt_S1ThorNearsMechanicRoom;
trigger gt_S1ThorEntersMechanicRoomQ;
trigger gt_S1NovaSeesFacilityEntranceQ;
trigger gt_S1NovaEntersFacilityEntranceBeacon;
trigger gt_S1CleanUpSection01;
trigger gt_S2CombatInDefendRegionsController;
trigger gt_S2CompoundWingCheckpoints;
trigger gt_S2NovaEntersDoorControlRegion;
trigger gt_S2NovaSeesDoorBeacon;
trigger gt_S2NovaEntersSonarDroneIntroQ;
trigger gt_S2RemoveSonarDroneReticles;
trigger gt_S2NovaOverhearsConversations01Q;
trigger gt_S2NovaOverhearsConversations02Q;
trigger gt_S2NovaOverhearsConversations03Q;
trigger gt_S2NovaOverhearsConversations04Q;
trigger gt_S2CheckpointCiviliansFlee;
trigger gt_S2NovaSeesLockedDoorStillLockedQ;
trigger gt_S2PreStoneCheckpoint;
trigger gt_S2NovaEntersStoneEncounter;
trigger gt_S2NovaSeesPierceAndOrDeltaQ;
trigger gt_S2CombatInHallway02;
trigger gt_S2CombatInHallway03;
trigger gt_S2TargetPracticeGuysInterrupted;
trigger gt_S2NovaSeesSecurityRoom01Q;
trigger gt_S2NovaSeesSecurityRoom02Q;
trigger gt_S2DoorGuyOpensDoor01Q;
trigger gt_S2DoorGuyOpensDoor02Q;
trigger gt_S2DoorToDavisUnlockedQ;
trigger gt_S2IntroduceBonusObjectivesQ;
trigger gt_S2IntroduceBonusObjectiveBlinkSuitQ;
trigger gt_S2IntroduceBonusObjectiveArmyTechnologyQ;
trigger gt_S2NovaAcquiresBlinkSuitQ;
trigger gt_S2NovaAcquiresArmyTechnologyQ;
trigger gt_S2NovaAcquiresExperimentalWeaponQ;
trigger gt_S2SecretRoomLockedDoorHintQ;
trigger gt_S2SecretRoomBlinkGapHintQ;
trigger gt_S3StoneAI;
trigger gt_S3StoneBlinksToSafetyToUseDefensiveMatrix;
trigger gt_S3StoneDominated;
trigger gt_S3StoneDominationBrokenTransmissionQ;
trigger gt_S3StoneConversationTransmissionQ;
trigger gt_S3TurnOnAlarmBotPatrols;
trigger gt_S3AlarmBotPatrolDies;
trigger gt_S3StoneDefeated;
trigger gt_S3UnitIsDominated;
trigger gt_S3HoloDecoyIsCreated;
trigger gt_DefeatNovaDies;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryArrestGeneralDavisCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementDominations;
trigger gt_AchievementKillfewerthan20units;
trigger gt_StartAI;
trigger gt_TipReadyQ;
trigger gt_ObjectiveNovaMustSurviveCreate;
trigger gt_ObjectiveNovaMustSurviveComplete;
trigger gt_ObjectiveNovaMustSurviveFailed;
trigger gt_ObjectiveInfiltrateTheFacilityCreate;
trigger gt_ObjectiveInfiltrateTheFacilityComplete;
trigger gt_ObjectiveInfiltrateTheFacilityFailed;
trigger gt_ObjectiveUnlockDoorToDavisCreate;
trigger gt_ObjectiveUnlockDoorToDavisComplete;
trigger gt_ObjectiveUnlockDoorToDavisUpdate;
trigger gt_ObjectiveUnlockDoorToDavisFailed;
trigger gt_ObjectiveDefeatStoneCreate;
trigger gt_ObjectiveDefeatStoneComplete;
trigger gt_ObjectiveDefeatStoneFailed;
trigger gt_ObjectiveArrestGeneralDavisCreate;
trigger gt_ObjectiveArrestGeneralDavisComplete;
trigger gt_ObjectiveArrestGeneralDavisFailed;
trigger gt_ObjectiveInvestigatePowerSignalCreate;
trigger gt_ObjectiveInvestigatePowerSignalComplete;
trigger gt_ObjectiveInvestigatePowerSignalFailed;
trigger gt_ObjectiveObtainBlinkSuitCreate;
trigger gt_ObjectiveObtainBlinkSuitComplete;
trigger gt_ObjectiveObtainBlinkSuitFailed;
trigger gt_ObjectiveObtainArmyTechCreate;
trigger gt_ObjectiveObtainArmyTechComplete;
trigger gt_ObjectiveObtainArmyTechFailed;
trigger gt_ObjectiveObtainExperimentalWeaponCreate;
trigger gt_ObjectiveObtainExperimentalWeaponComplete;
trigger gt_ObjectiveObtainExperimentalWeaponFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene01;
trigger gt_BriefingScene02;
trigger gt_BriefingScene03;
trigger gt_BriefingScene03Setup;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidDavis;
trigger gt_MidGuardRoomAnimate1;
trigger gt_MidGuardRoomAnimate2;
trigger gt_Mid2Q;
trigger gt_Mid2Setup;
trigger gt_Mid2Cinematic;
trigger gt_Mid2CinematicEnd;
trigger gt_Mid2Cleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_S2TrackUnitHitBySonar (unit lp_trackedUnit) {
    // Variable Declarations
    actor lv_beaconActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_AttachModelToUnit(lp_trackedUnit, "BeaconScout", "Ref_Origin");
    lv_beaconActor = libNtve_gf_ActorLastCreated();
    while ((UnitHasBehavior2(lp_trackedUnit, "DetectorConeDetected") == true)) {
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_KillModel(lv_beaconActor);
}

point gf_RandomPointinRegionSharedbyGroup (region lp_region, unitgroup lp_unitGroup) {
    // Variable Declarations
    point lv_currentPoint;
    int lv_unitIndex;
    bool lv_pointIsValid;

    // Automatic Variable Declarations
    const int auto90B3A01F_n = 50;
    int auto90B3A01F_i;
    int autoDE63358A_ae;
    const int autoDE63358A_ai = 1;

    // Variable Initialization

    // Implementation
    for (auto90B3A01F_i = 1; auto90B3A01F_i <= auto90B3A01F_n; auto90B3A01F_i += 1) {
        lv_currentPoint = RegionRandomPoint(lp_region);
        lv_pointIsValid = true;
        autoDE63358A_ae = UnitGroupCount(lp_unitGroup, c_unitCountAlive);
        lv_unitIndex = 1;
        for ( ; ( (autoDE63358A_ai >= 0 && lv_unitIndex <= autoDE63358A_ae) || (autoDE63358A_ai < 0 && lv_unitIndex >= autoDE63358A_ae) ) ; lv_unitIndex += autoDE63358A_ai ) {
            if ((DistanceBetweenPoints(libNCMI_gf_StealthAIGetHomePointOfUnit(UnitGroupUnit(lp_unitGroup, lv_unitIndex)), lv_currentPoint) < 1.5)) {
                lv_pointIsValid = false;
                break;
            }

        }
        if ((lv_pointIsValid == true)) {
            break;
        }

    }
    return lv_currentPoint;
}

void gf_NovaEquipmentScreenCloses (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "MissionEquipmentEventClosed");
}

trigger auto_gf_DOMUnitsInvestigateTransmissionsQ_Trigger = null;
unitgroup auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingUnitGroup;
point auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingPoint;

void gf_DOMUnitsInvestigateTransmissionsQ (unitgroup lp_investigatingUnitGroup, point lp_investigatingPoint) {
    auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingUnitGroup = lp_investigatingUnitGroup;
    auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingPoint = lp_investigatingPoint;

    if (auto_gf_DOMUnitsInvestigateTransmissionsQ_Trigger == null) {
        auto_gf_DOMUnitsInvestigateTransmissionsQ_Trigger = TriggerCreate("auto_gf_DOMUnitsInvestigateTransmissionsQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_DOMUnitsInvestigateTransmissionsQ_Trigger, false, false);
}

bool auto_gf_DOMUnitsInvestigateTransmissionsQ_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_investigatingUnitGroup = auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingUnitGroup;
    point lp_investigatingPoint = auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingPoint;

    // Variable Declarations
    unit lv_speaker;
    timer lv_talkTimer;
    bool lv_enemyUnitsVisible;

    // Automatic Variable Declarations
    unitgroup auto93C5B8D6_g;
    int auto93C5B8D6_u;
    unit auto93C5B8D6_var;
    int auto47452228_val;
    int auto60325007_val;
    int auto70D016BB_val;

    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Implementation
    TimerStart(lv_talkTimer, 2.0, false, c_timeAI);
    TriggerQueueEnter();
    auto93C5B8D6_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(lp_investigatingPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto93C5B8D6_u = UnitGroupCount(auto93C5B8D6_g, c_unitCountAll);
    for (;; auto93C5B8D6_u -= 1) {
        auto93C5B8D6_var = UnitGroupUnitFromEnd(auto93C5B8D6_g, auto93C5B8D6_u);
        if (auto93C5B8D6_var == null) { break; }
        if (((libNtve_gf_UnitIsVisibleToPlayer(auto93C5B8D6_var, gv_pLAYER_04_DEFENDERS) == true) || (libNtve_gf_UnitIsVisibleToPlayer(auto93C5B8D6_var, gv_pLAYER_05_DEFENDERS) == true))) {
            lv_enemyUnitsVisible = true;
            break;
        }

    }
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_nova) == false) || (lv_enemyUnitsVisible == true))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if ((UnitGroupCount(lp_investigatingUnitGroup, c_unitCountAlive) > 0)) {
        TimerStart(gv_unitInvestigateTransmissionCooldownTimer, gv_uNITINVESTIGATE_TRANSMISSIONCOOLDOWN, false, c_timeGame);
        lv_speaker = UnitGroupClosestToPoint(lp_investigatingUnitGroup, lp_investigatingPoint);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if ((libNtve_gf_UnitInRegion(lv_speaker, RegionFromId(64)) == true)) {
        }
        else if (((UnitGetType(lv_speaker) == "Ghost") || (UnitGetType(lv_speaker) == "GhostDetectorCone"))) {
            if (gv_unitInvestigateTransmissionCycleGhost >= 2) {
                gv_unitInvestigateTransmissionCycleGhost = 1;
            }
            else {
                gv_unitInvestigateTransmissionCycleGhost = gv_unitInvestigateTransmissionCycleGhost + 1;
            }
            auto47452228_val = gv_unitInvestigateTransmissionCycleGhost;
            if (auto47452228_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00131", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto47452228_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00088", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else if (((UnitGetType(lv_speaker) == "GhostAlternate") || (UnitGetType(lv_speaker) == "GhostAlternateDetectorCone"))) {
            if (gv_unitInvestigateTransmissionCycleGhost >= 2) {
                gv_unitInvestigateTransmissionCycleGhost = 1;
            }
            else {
                gv_unitInvestigateTransmissionCycleGhost = gv_unitInvestigateTransmissionCycleGhost + 1;
            }
            auto60325007_val = gv_unitInvestigateTransmissionCycleGhost;
            if (auto60325007_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto60325007_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00134", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else if ((UnitGetType(lv_speaker) == "Separatist")) {
            if (gv_unitInvestigateTransmissionCycleTrooper >= 6) {
                gv_unitInvestigateTransmissionCycleTrooper = 1;
            }
            else {
                gv_unitInvestigateTransmissionCycleTrooper = gv_unitInvestigateTransmissionCycleTrooper + 1;
            }
            auto70D016BB_val = gv_unitInvestigateTransmissionCycleTrooper;
            if (auto70D016BB_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00126", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto70D016BB_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00129", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto70D016BB_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00130", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto70D016BB_val == 4) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00077", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto70D016BB_val == 5) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00084", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto70D016BB_val == 6) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00077", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

trigger auto_gf_S2DominatedUnitOpensDoorQ_Trigger = null;
unit auto_gf_S2DominatedUnitOpensDoorQ_lp_dominatedUnit;

void gf_S2DominatedUnitOpensDoorQ (unit lp_dominatedUnit) {
    auto_gf_S2DominatedUnitOpensDoorQ_lp_dominatedUnit = lp_dominatedUnit;

    if (auto_gf_S2DominatedUnitOpensDoorQ_Trigger == null) {
        auto_gf_S2DominatedUnitOpensDoorQ_Trigger = TriggerCreate("auto_gf_S2DominatedUnitOpensDoorQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_S2DominatedUnitOpensDoorQ_Trigger, false, false);
}

bool auto_gf_S2DominatedUnitOpensDoorQ_TriggerFunc (bool testConds, bool runActions) {
    unit lp_dominatedUnit = auto_gf_S2DominatedUnitOpensDoorQ_lp_dominatedUnit;

    // Variable Declarations
    timer lv_talkTimer;
    unit lv_reactingUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Implementation
    lv_reactingUnit = UnitGroupClosestToPoint(UnitGroup("Separatist", c_playerAny, RegionCircle(UnitGetPosition(lp_dominatedUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_dominatedUnit));
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((lv_reactingUnit != null) && (UnitIsAlive(lv_reactingUnit) == true) && (TimerGetRemaining(lv_talkTimer) > 0.0)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(libNtve_gf_ConvertUnitToUnitGroup(lv_reactingUnit), UnitGetPosition(lp_dominatedUnit));
        libNCMI_gf_SendTransmissionCampaign(lv_reactingUnit, "Mission_Nova07|Line00056", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(lp_dominatedUnit, "Mission_Nova07|Line00057", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

trigger auto_gf_S2DominatedUnitCantOpenDoorQ_Trigger = null;
unit auto_gf_S2DominatedUnitCantOpenDoorQ_lp_dominatedUnit;

void gf_S2DominatedUnitCantOpenDoorQ (unit lp_dominatedUnit) {
    auto_gf_S2DominatedUnitCantOpenDoorQ_lp_dominatedUnit = lp_dominatedUnit;

    if (auto_gf_S2DominatedUnitCantOpenDoorQ_Trigger == null) {
        auto_gf_S2DominatedUnitCantOpenDoorQ_Trigger = TriggerCreate("auto_gf_S2DominatedUnitCantOpenDoorQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_S2DominatedUnitCantOpenDoorQ_Trigger, false, false);
}

bool auto_gf_S2DominatedUnitCantOpenDoorQ_TriggerFunc (bool testConds, bool runActions) {
    unit lp_dominatedUnit = auto_gf_S2DominatedUnitCantOpenDoorQ_lp_dominatedUnit;

    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0BCBE5B7"), null, UnitGetPosition(lp_dominatedUnit));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lp_dominatedUnit), 8.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00058", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00059", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

trigger auto_gf_S2HandleScientistRespawn_Trigger = null;
unit auto_gf_S2HandleScientistRespawn_lp_unit;
point auto_gf_S2HandleScientistRespawn_lp_respawnPoint;

void gf_S2HandleScientistRespawn (unit lp_unit, point lp_respawnPoint) {
    auto_gf_S2HandleScientistRespawn_lp_unit = lp_unit;
    auto_gf_S2HandleScientistRespawn_lp_respawnPoint = lp_respawnPoint;

    if (auto_gf_S2HandleScientistRespawn_Trigger == null) {
        auto_gf_S2HandleScientistRespawn_Trigger = TriggerCreate("auto_gf_S2HandleScientistRespawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_S2HandleScientistRespawn_Trigger, false, false);
}

bool auto_gf_S2HandleScientistRespawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_S2HandleScientistRespawn_lp_unit;
    point lp_respawnPoint = auto_gf_S2HandleScientistRespawn_lp_respawnPoint;

    // Variable Declarations
    point lv_scientistHomePoint;
    string lv_scientistUnitType;
    int lv_scientistOwner;
    unit lv_scientistUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_scientistUnit = lp_unit;
    lv_scientistUnitType = UnitGetType(lp_unit);
    lv_scientistOwner = UnitGetOwner(lp_unit);
    lv_scientistHomePoint = UnitGetPosition(lp_unit);
    while ((libNCMI_gf_GameIsOver() == false) && (gv_currentStage < 3)) {
        while (!((UnitIsAlive(lv_scientistUnit) == false))) {
            Wait(1.0, c_timeGame);
        }
        Wait(10.0, c_timeGame);
        libNtve_gf_CreateUnitsAtPoint2(1, lv_scientistUnitType, 0, lv_scientistOwner, lp_respawnPoint);
        lv_scientistUnit = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "Harmless", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_scientistHomePoint), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_S3SpawnAlarmBotPatrol_Trigger = null;
int auto_gf_S3SpawnAlarmBotPatrol_lp_spawnPointIter;

void gf_S3SpawnAlarmBotPatrol (int lp_spawnPointIter) {
    auto_gf_S3SpawnAlarmBotPatrol_lp_spawnPointIter = lp_spawnPointIter;

    if (auto_gf_S3SpawnAlarmBotPatrol_Trigger == null) {
        auto_gf_S3SpawnAlarmBotPatrol_Trigger = TriggerCreate("auto_gf_S3SpawnAlarmBotPatrol_TriggerFunc");
    }

    TriggerExecute(auto_gf_S3SpawnAlarmBotPatrol_Trigger, false, false);
}

bool auto_gf_S3SpawnAlarmBotPatrol_TriggerFunc (bool testConds, bool runActions) {
    int lp_spawnPointIter = auto_gf_S3SpawnAlarmBotPatrol_lp_spawnPointIter;

    // Variable Declarations
    actor lv_alarmDoodad;
    region lv_alarmSpawnRegion;
    point lv_alarmSpawnPoint;

    // Automatic Variable Declarations
    int autoF02ABD2B_val;

    // Variable Initialization

    // Implementation
    autoF02ABD2B_val = lp_spawnPointIter;
    if (autoF02ABD2B_val == 1) {
        lv_alarmDoodad = ActorFromDoodad(DoodadFromId(1489175407));
        lv_alarmSpawnRegion = RegionFromId(137);
        lv_alarmSpawnPoint = PointFromId(1081463495);
    }
    else if (autoF02ABD2B_val == 2) {
        lv_alarmDoodad = ActorFromDoodad(DoodadFromId(368340067));
        lv_alarmSpawnRegion = RegionFromId(139);
        lv_alarmSpawnPoint = PointFromId(246026389);
    }
    else {
    }
    while (!((((lp_spawnPointIter == 1) && (gv_s3_AlarmBotSpawnBusy01 == false)) || ((lp_spawnPointIter == 2) && (gv_s3_AlarmBotSpawnBusy02 == false))))) {
        Wait(1.0, c_timeGame);
    }
    ActorSend(lv_alarmDoodad, "AnimGroupRemove Unpowered");
    SoundPlayForPlayer(SoundLink("Evevnt_Nova_AlarmBot_Spawn_Alarm_2D", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    while (!((UnitGroupCount(UnitGroup("NovaAlarmBot", gv_pLAYER_04_DEFENDERS, lv_alarmSpawnRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
        Wait(0.0625, c_timeGame);
    }
    ActorSend(lv_alarmDoodad, "AnimGroupApply Unpowered");
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "NovaAlarmBot", 0, gv_pLAYER_04_DEFENDERS, lv_alarmSpawnPoint);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(1.0, c_timeGame);
    libNtve_gf_PauseUnit(UnitLastCreated(), false);
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
        return true;
    }

    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(131), UnitLastCreated(), lv_alarmSpawnPoint);
    if ((lp_spawnPointIter == 1)) {
        libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitLastCreated(), PointFromId(1425208549), PointFromId(1160309722), PointFromId(1399392562), PointFromId(441750620), 2.0);
    }
    else {
        libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitLastCreated(), PointFromId(1399392562), PointFromId(441750620), PointFromId(1425208549), PointFromId(1160309722), 2.0);
    }
    return true;
}

void gf_S3StoneCastsDefensiveMatrix () {
    // Automatic Variable Declarations
    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_Casting);
    UnitIssueOrder(gv_stone, Order(AbilityCommand("GhostHoldFire", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_stone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    while (!((libNtve_gf_UnitIsVisibleToPlayer(gv_stone, gv_pLAYER_01_USER) == true))) {
        Wait(0.0625, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        UnitIssueOrder(gv_stone, Order(AbilityCommand("NovaStoneDefensiveMatrix", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_stone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        Wait(2.0, c_timeGame);
    }

    libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_NotCasting);
}

void gf_S3StoneCastsSnipe (unit lp_snipeTargetUnit) {
    // Variable Declarations
    unit lv_snipeMissedTargetUnit;

    // Automatic Variable Declarations
    fixed auto806857E4_at;

    // Variable Initialization

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_Casting);
    UnitIssueOrder(gv_stone, OrderTargetingUnit(AbilityCommand("NovaStoneTargetEnemy", 0), lp_snipeTargetUnit), c_orderQueueReplace);
    auto806857E4_at = 0;
    while (!(((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (libNtve_gf_UnitIsVisibleToPlayer(lp_snipeTargetUnit, gv_pLAYER_05_DEFENDERS) == false))) && auto806857E4_at <= libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 3.0, 2.0)) {
        Wait(0.0625, c_timeGame);
        auto806857E4_at = auto806857E4_at + 0.0625;
    }
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_stone) == true)) {
        if ((UnitIsAlive(lp_snipeTargetUnit) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lp_snipeTargetUnit, gv_pLAYER_05_DEFENDERS) == true)) {
            UnitIssueOrder(gv_stone, OrderTargetingUnit(AbilityCommand("NovaSnipeStone", 0), lp_snipeTargetUnit), c_orderQueueReplace);
            UnitIssueOrder(gv_stone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            TimerStart(gv_s3_SnipeTimer, gv_s3_SnipeCooldown, false, c_timeAI);
            Wait(2.0, c_timeGame);
        }
        else {
            lv_snipeMissedTargetUnit = UnitGroupClosestToPoint(gv_s3_SnipeMissedTargets, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_snipeTargetUnit), (DistanceBetweenPoints(UnitGetPosition(lp_snipeTargetUnit), UnitGetPosition(gv_stone)) / 4.0), UnitGetPosition(gv_stone)));
            UnitIssueOrder(gv_stone, OrderTargetingUnit(AbilityCommand("NovaSnipeStone", 0), lv_snipeMissedTargetUnit), c_orderQueueReplace);
            UnitIssueOrder(gv_stone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            Wait(2.0, c_timeGame);
        }
    }

    libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_NotCasting);
}

void gf_S3StoneCastsEMP (point lp_eMPTargetPoint) {
    // Automatic Variable Declarations
    fixed auto4096FF8B_at;

    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_Casting);
    UnitIssueOrder(gv_stone, OrderTargetingPoint(AbilityCommand("NovaStoneTargetEMP", 0), lp_eMPTargetPoint), c_orderQueueReplace);
    auto4096FF8B_at = 0;
    while (!(((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || ((UnitTestState(gv_nova, c_unitStateCloaked) == false) && (UnitGroupCount(gv_s3_PlayerHoloDecoyTargetsGroup, c_unitCountAlive) == 0)))) && auto4096FF8B_at <= libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 2.0, 2.0)) {
        Wait(0.0625, c_timeGame);
        auto4096FF8B_at = auto4096FF8B_at + 0.0625;
    }
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_stone) == true) && (UnitIsAlive(gv_nova) == true) && ((UnitTestState(gv_nova, c_unitStateCloaked) == true) || (UnitGroupCount(gv_s3_PlayerHoloDecoyTargetsGroup, c_unitCountAlive) > 0))) {
        UnitIssueOrder(gv_stone, OrderTargetingPoint(AbilityCommand("NovaEMPStone", 0), lp_eMPTargetPoint), c_orderQueueReplace);
        UnitIssueOrder(gv_stone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        TimerStart(gv_s3_EMPTimer, gv_s3_EMPCooldown, false, c_timeAI);
        Wait(2.0, c_timeGame);
    }
    else {
        UnitIssueOrder(gv_stone, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_NotCasting);
}

void gf_S3StoneCastsBlink (point lp_blinkTargetPoint) {
    // Automatic Variable Declarations
    // Implementation
    libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_Casting);
    TimerStart(gv_s3_BlinkTimer, gv_s3_BlinkCooldown, false, c_timeGame);
    UnitIssueOrder(gv_stone, OrderTargetingPoint(AbilityCommand("NovaArmorBlinkSuitBlinkStone", 0), lp_blinkTargetPoint), c_orderQueueReplace);
    libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_NotCasting);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_InitializeNovaMission("Nova07");
    TriggerExecute(gt_Init01Technology, true, false);
    libNovC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_BriefingQ, true, true);
        ConsoleCommand("exit", true, true);
    }

    TriggerExecute(gt_StartGameCleanup, true, true);
    TriggerExecute(gt_StartGame01IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC1FA5239_g;
    int autoC1FA5239_u;
    unit autoC1FA5239_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNovC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    autoC1FA5239_g = UnitGroup("HellionTank", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC1FA5239_u = UnitGroupCount(autoC1FA5239_g, c_unitCountAll);
    for (;; autoC1FA5239_u -= 1) {
        autoC1FA5239_var = UnitGroupUnitFromEnd(autoC1FA5239_g, autoC1FA5239_u);
        if (autoC1FA5239_var == null) { break; }
        UnitAbilityEnable(autoC1FA5239_var, "MorphToHellion", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto31595226_g;
    int auto31595226_var;
    playergroup auto479B18F8_g;
    int auto479B18F8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_allyPlayerGroup, gv_pLAYER_02_NOVASUPPORT);
    PlayerGroupAdd(gv_allyPlayerGroup, gv_pLAYER_03_DOMINION);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_04_DEFENDERS);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_05_DEFENDERS);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_06_DEFENDERS_TRIPWIRES);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_NOVASUPPORT, "BlackOps", 1);
    auto31595226_g = gv_allyPlayerGroup;
    auto31595226_var = -1;
    while (true) {
        auto31595226_var = PlayerGroupNextPlayer(auto31595226_g, auto31595226_var);
        if (auto31595226_var < 0) { break; }
        libNtve_gf_SetAlliance(auto31595226_var, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(auto31595226_var, gv_pLAYER_02_NOVASUPPORT, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(auto31595226_var, gv_pLAYER_03_DOMINION, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(auto31595226_var, gv_pLAYER_04_DEFENDERS, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto31595226_var, gv_pLAYER_05_DEFENDERS, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto31595226_var, gv_pLAYER_06_DEFENDERS_TRIPWIRES, libNtve_ge_AllianceSetting_Enemy);
        PlayerModifyPropertyInt(auto31595226_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(auto31595226_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(auto31595226_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    }
    auto479B18F8_g = gv_enemyPlayerGroup;
    auto479B18F8_var = -1;
    while (true) {
        auto479B18F8_var = PlayerGroupNextPlayer(auto479B18F8_g, auto479B18F8_var);
        if (auto479B18F8_var < 0) { break; }
        libNtve_gf_SetAlliance(auto479B18F8_var, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto479B18F8_var, gv_pLAYER_02_NOVASUPPORT, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto479B18F8_var, gv_pLAYER_03_DOMINION, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto479B18F8_var, gv_pLAYER_04_DEFENDERS, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(auto479B18F8_var, gv_pLAYER_05_DEFENDERS, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(auto479B18F8_var, gv_pLAYER_06_DEFENDERS_TRIPWIRES, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(auto479B18F8_var, gv_pLAYER_07_ANTI_CLOAK, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto479B18F8_var, gv_pLAYER_08_ANTI_JETPACK, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        if ((auto479B18F8_var != gv_pLAYER_06_DEFENDERS_TRIPWIRES)) {
            PlayerSetColorIndex(auto479B18F8_var, 1, true);
        }

        TechTreeUpgradeAddLevel(auto479B18F8_var, "DOM", 1);
        PlayerModifyPropertyInt(auto479B18F8_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(auto479B18F8_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(auto479B18F8_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    }
    PlayerSetState(gv_pLAYER_04_DEFENDERS, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_05_DEFENDERS, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_06_DEFENDERS_TRIPWIRES, c_playerStateFidgetingEnabled, false);
    libNCMI_gf_NM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto64E06907_g;
    int auto64E06907_u;
    unit auto64E06907_var;
    unitgroup autoABA93249_g;
    int autoABA93249_u;
    unit autoABA93249_var;
    unitgroup auto0100172E_g;
    int auto0100172E_u;
    unit auto0100172E_var;
    unitgroup auto4DF28387_g;
    int auto4DF28387_u;
    unit auto4DF28387_var;
    unitgroup autoB092D20A_g;
    int autoB092D20A_u;
    unit autoB092D20A_var;
    unitgroup autoE202AA42_g;
    int autoE202AA42_u;
    unit autoE202AA42_var;
    unitgroup autoF5D81D2A_g;
    int autoF5D81D2A_u;
    unit autoF5D81D2A_var;
    unitgroup auto383ABAE1_g;
    int auto383ABAE1_u;
    unit auto383ABAE1_var;
    unitgroup auto66951002_g;
    int auto66951002_u;
    unit auto66951002_var;
    unitgroup auto68951EDD_g;
    int auto68951EDD_u;
    unit auto68951EDD_var;
    unitgroup auto8127B9A9_g;
    int auto8127B9A9_u;
    unit auto8127B9A9_var;
    unitgroup autoBB21E2E9_g;
    int autoBB21E2E9_u;
    unit autoBB21E2E9_var;
    unitgroup auto682B698F_g;
    int auto682B698F_u;
    unit auto682B698F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNCUI_gf_SetHeroPanelUnit(1, gv_nova);
    UnitSetState(gv_nova, c_unitStateFidget, false);
    libNCMI_gf_SetNovaHeroUnit(gv_nova);
    libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup(gv_nova);
    libNCMI_gf_EnableDisableHeroReviveSystem(false, gv_pLAYER_01_USER);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1301252867), null, StringExternal("Param/Value/CC16E97A"), null);
    UnitSetOwner(UnitFromId(1301252867), gv_pLAYER_03_DOMINION, false);
    auto64E06907_g = UnitGroup(null, c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto64E06907_u = UnitGroupCount(auto64E06907_g, c_unitCountAll);
    for (;; auto64E06907_u -= 1) {
        auto64E06907_var = UnitGroupUnitFromEnd(auto64E06907_g, auto64E06907_u);
        if (auto64E06907_var == null) { break; }
        libNtve_gf_PauseUnit(auto64E06907_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto64E06907_var, true);
    }
    libNtve_gf_MakeUnitInvulnerable(gv_davis, true);
    UnitAbilityEnable(gv_davis, "attack", false);
    libNCMI_gf_SetUnitInfoTextCampaign(gv_davis, null, StringExternal("Param/Value/99C56B43"), null);
    libNtve_gf_ShowHideUnit(gv_stone, false);
    libNtve_gf_PauseUnit(gv_stone, true);
    libNCMI_gf_SetUnitInfoTextCampaign(gv_stone, null, StringExternal("Param/Value/77A2F515"), null);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1297533678), true);
    UnitIssueOrder(UnitFromId(1297533678), Order(AbilityCommand("GhostHoldFire", 0)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(UnitFromId(1297533678), true);
    if ((libNCMI_gf_CharacterIsAlive("Pierce") == true)) {
        libNtve_gf_MakeUnitInvulnerable(gv_pierce, true);
        UnitIssueOrder(gv_pierce, Order(AbilityCommand("GhostHoldFire", 0)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(gv_pierce, true);
        libNCMI_gf_SetUnitInfoTextCampaign(gv_pierce, null, StringExternal("Param/Value/1650EC42"), null);
    }
    else {
        UnitRemove(gv_pierce);
    }
    if ((libNCMI_gf_CharacterIsAlive("Delta") == true)) {
        libNtve_gf_MakeUnitInvulnerable(gv_delta, true);
        UnitIssueOrder(gv_delta, Order(AbilityCommand("GhostHoldFire", 0)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(gv_delta, true);
        libNCMI_gf_SetUnitInfoTextCampaign(gv_delta, null, StringExternal("Param/Value/BD1F3A26"), null);
    }
    else {
        UnitRemove(gv_delta);
    }
    autoABA93249_g = UnitGroup("CompoundSewers_Vent_Destructible", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoABA93249_u = UnitGroupCount(autoABA93249_g, c_unitCountAll);
    for (;; autoABA93249_u -= 1) {
        autoABA93249_var = UnitGroupUnitFromEnd(autoABA93249_g, autoABA93249_u);
        if (autoABA93249_var == null) { break; }
        UnitSetState(autoABA93249_var, c_unitStateHighlightable, true);
        UnitSetState(autoABA93249_var, c_unitStateTooltipable, true);
        UnitSetState(autoABA93249_var, c_unitStateSelectable, true);
        libNCMI_gf_SetUnitInfoTextCampaign(autoABA93249_var, null, StringExternal("Param/Value/663A16B8"), StringExternal("Param/Value/EE50AE90"));
    }
    UnitSetTeamColorIndex(UnitFromId(881756395), 1);
    libNtve_gf_PauseUnit(UnitFromId(881756395), true);
    libNtve_gf_PauseUnit(UnitFromId(1989364861), true);
    libNtve_gf_PauseUnit(UnitFromId(663612544), true);
    libNtve_gf_PauseUnit(UnitFromId(1823752462), true);
    libNtve_gf_PauseUnit(UnitFromId(1656760710), true);
    auto0100172E_g = UnitGroup(null, c_playerAny, RegionFromId(124), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0100172E_u = UnitGroupCount(auto0100172E_g, c_unitCountAll);
    for (;; auto0100172E_u -= 1) {
        auto0100172E_var = UnitGroupUnitFromEnd(auto0100172E_g, auto0100172E_u);
        if (auto0100172E_var == null) { break; }
        UnitBehaviorAddPlayer(auto0100172E_var, "Harmless", gv_pLAYER_04_DEFENDERS, 1);
        UnitGroupAdd(gv_scientistsGroup, auto0100172E_var);
        libNtve_gf_SendActorMessageToUnit(auto0100172E_var, "AnimGroupApply Unpowered Stand,Unpowered,Start Stand,Unpowered,End");
    }
    auto4DF28387_g = UnitGroup("Scientist", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4DF28387_u = UnitGroupCount(auto4DF28387_g, c_unitCountAll);
    for (;; auto4DF28387_u -= 1) {
        auto4DF28387_var = UnitGroupUnitFromEnd(auto4DF28387_g, auto4DF28387_u);
        if (auto4DF28387_var == null) { break; }
        UnitBehaviorAddPlayer(auto4DF28387_var, "Harmless", gv_pLAYER_04_DEFENDERS, 1);
        UnitGroupAdd(gv_scientistsGroup, auto4DF28387_var);
    }
    autoB092D20A_g = UnitGroup("DOMScientist", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB092D20A_u = UnitGroupCount(autoB092D20A_g, c_unitCountAll);
    for (;; autoB092D20A_u -= 1) {
        autoB092D20A_var = UnitGroupUnitFromEnd(autoB092D20A_g, autoB092D20A_u);
        if (autoB092D20A_var == null) { break; }
        UnitBehaviorAddPlayer(autoB092D20A_var, "Harmless", gv_pLAYER_04_DEFENDERS, 1);
        UnitGroupAdd(gv_scientistsGroup, autoB092D20A_var);
    }
    autoE202AA42_g = UnitGroup("ScientistOfficer", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE202AA42_u = UnitGroupCount(autoE202AA42_g, c_unitCountAll);
    for (;; autoE202AA42_u -= 1) {
        autoE202AA42_var = UnitGroupUnitFromEnd(autoE202AA42_g, autoE202AA42_u);
        if (autoE202AA42_var == null) { break; }
        UnitBehaviorAddPlayer(autoE202AA42_var, "Harmless", gv_pLAYER_04_DEFENDERS, 1);
        UnitGroupAdd(gv_scientistsGroup, autoE202AA42_var);
    }
    gv_s1_ThorFriend = UnitFromId(958512770);
    TriggerExecute(gt_Init03aStage01Sewers, true, true);
    TriggerExecute(gt_Init03bStage02Facility, true, true);
    UnitBehaviorAdd(gv_s1_TripWire_Critter, "Harmless", gv_s1_TripWire_Critter, 1);
    UnitSetHeight(UnitFromId(1280085036), 0.2, 0.0);
    UnitSetHeight(UnitFromId(313096150), 0.2, 0.0);
    UnitSetHeight(UnitFromId(1229665133), 0.2, 0.0);
    UnitSetHeight(UnitFromId(1936979417), 0.2, 0.0);
    UnitIssueOrder(UnitFromId(1280085036), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1280085036)), 1.0, 315.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(313096150), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(313096150)), 1.0, 225.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1229665133), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1229665133)), 1.0, 45.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1936979417), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1936979417)), 1.0, 315.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1226547672), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1226547672)), 1.0, 225.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1567000892), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1567000892)), 1.0, 315.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1436445978), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1436445978)), 1.0, 135.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(626557602), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(626557602)), 1.0, 225.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2037754646), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(2037754646)), 1.0, 225.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(331074353), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(331074353)), 1.0, 225.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1795030305), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1795030305)), 1.0, 135.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(828708926), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(828708926)), 1.0, 315.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(498629523), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(498629523)), 1.0, 90.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1020475925), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1020475925)), 1.0, 225.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1175529313), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1175529313)), 1.0, 315.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(169416149), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(169416149)), 1.0, 225.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1639389075), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1639389075)), 1.0, 315.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(221582272), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(221582272)), 1.0, 270.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(13236855), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(13236855)), 1.0, 0.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(162897768), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(162897768)), 1.0, 180.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2126507237), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(2126507237)), 1.0, 0.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1142591608), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(1142591608)), 1.0, 225.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(193076581), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(193076581)), 1.0, 45.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(909583235), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(909583235)), 1.0, 225.0)), c_orderQueueReplace);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        UnitIssueOrder(UnitFromId(449910981), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(449910981)), 1.0, 135.0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(429896153), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(429896153)), 1.0, 315.0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(779004688), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(779004688)), 1.0, 315.0)), c_orderQueueReplace);
    }

    UnitBehaviorAddPlayer(UnitFromId(528388140), "Harmless", 0, 1);
    autoF5D81D2A_g = UnitGroup(null, 0, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF5D81D2A_u = UnitGroupCount(autoF5D81D2A_g, c_unitCountAll);
    for (;; autoF5D81D2A_u -= 1) {
        autoF5D81D2A_var = UnitGroupUnitFromEnd(autoF5D81D2A_g, autoF5D81D2A_u);
        if (autoF5D81D2A_var == null) { break; }
        libNtve_gf_PauseUnit(autoF5D81D2A_var, true);
        libNtve_gf_SendActorMessageToUnit(autoF5D81D2A_var, "AnimGroupApply Victory");
    }
    auto383ABAE1_g = UnitGroup("NovaResupplyCrate", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto383ABAE1_u = UnitGroupCount(auto383ABAE1_g, c_unitCountAll);
    for (;; auto383ABAE1_u -= 1) {
        auto383ABAE1_var = UnitGroupUnitFromEnd(auto383ABAE1_g, auto383ABAE1_u);
        if (auto383ABAE1_var == null) { break; }
        UnitGroupAdd(gv_gearSwapCrates, auto383ABAE1_var);
    }
    auto66951002_g = UnitGroup("Beacon_Nova", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto66951002_u = UnitGroupCount(auto66951002_g, c_unitCountAll);
    for (;; auto66951002_u -= 1) {
        auto66951002_var = UnitGroupUnitFromEnd(auto66951002_g, auto66951002_u);
        if (auto66951002_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto66951002_var, "SetMinimapVisibility");
        if ((auto66951002_var != UnitFromId(1448970569))) {
            libNCMI_gf_SetUnitInfoTextCampaign(auto66951002_var, null, StringExternal("Param/Value/2FB734A5"), null);
        }

    }
    auto68951EDD_g = UnitGroup("Beacon_NovaSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto68951EDD_u = UnitGroupCount(auto68951EDD_g, c_unitCountAll);
    for (;; auto68951EDD_u -= 1) {
        auto68951EDD_var = UnitGroupUnitFromEnd(auto68951EDD_g, auto68951EDD_u);
        if (auto68951EDD_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto68951EDD_var, "SetMinimapVisibility");
        libNCMI_gf_SetUnitInfoTextCampaign(auto68951EDD_var, null, StringExternal("Param/Value/3D062456"), null);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(2010177382), false);
    libNtve_gf_PauseUnit(UnitFromId(1989364861), true);
    libNtve_gf_PauseUnit(UnitFromId(663612544), true);
    libNtve_gf_PauseUnit(UnitFromId(1823752462), true);
    libNtve_gf_PauseUnit(UnitFromId(1656760710), true);
    auto8127B9A9_g = UnitGroup(null, c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8127B9A9_u = UnitGroupCount(auto8127B9A9_g, c_unitCountAll);
    for (;; auto8127B9A9_u -= 1) {
        auto8127B9A9_var = UnitGroupUnitFromEnd(auto8127B9A9_g, auto8127B9A9_u);
        if (auto8127B9A9_var == null) { break; }
        libNtve_gf_PauseUnit(auto8127B9A9_var, true);
        UnitGroupAdd(gv_stage2PausedUnits, auto8127B9A9_var);
    }
    autoBB21E2E9_g = UnitGroup("InvisibleTargetDummy", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB21E2E9_u = UnitGroupCount(autoBB21E2E9_g, c_unitCountAll);
    for (;; autoBB21E2E9_u -= 1) {
        autoBB21E2E9_var = UnitGroupUnitFromEnd(autoBB21E2E9_g, autoBB21E2E9_u);
        if (autoBB21E2E9_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(autoBB21E2E9_var, true, gv_pLAYER_05_DEFENDERS);
        UnitGroupAdd(gv_s3_SnipeMissedTargets, autoBB21E2E9_var);
        libNtve_gf_PauseUnit(autoBB21E2E9_var, true);
    }
    auto682B698F_g = UnitGroup("DOMHealthDispenser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto682B698F_u = UnitGroupCount(auto682B698F_g, c_unitCountAll);
    for (;; auto682B698F_u -= 1) {
        auto682B698F_var = UnitGroupUnitFromEnd(auto682B698F_g, auto682B698F_u);
        if (auto682B698F_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto682B698F_var, true);
        UnitStatusBarClearOverride(auto682B698F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03a Stage 01 Sewers
//--------------------------------------------------------------------------------------------------
bool gt_Init03aStage01Sewers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE9DFBB7C_g;
    int autoE9DFBB7C_u;
    unit autoE9DFBB7C_var;
    unitgroup autoCE91DCD9_g;
    int autoCE91DCD9_u;
    unit autoCE91DCD9_var;
    unitgroup auto21B68DB9_g;
    int auto21B68DB9_u;
    unit auto21B68DB9_var;
    unitgroup auto8895B6DE_g;
    int auto8895B6DE_u;
    unit auto8895B6DE_var;
    unitgroup auto61853CBC_g;
    int auto61853CBC_u;
    unit auto61853CBC_var;
    unitgroup auto5D1B8ADE_g;
    int auto5D1B8ADE_u;
    unit auto5D1B8ADE_var;
    unitgroup auto03AA6409_g;
    int auto03AA6409_u;
    unit auto03AA6409_var;
    unitgroup autoA5C3EB7D_g;
    int autoA5C3EB7D_u;
    unit autoA5C3EB7D_var;
    unitgroup auto605390EF_g;
    int auto605390EF_u;
    unit auto605390EF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(64), gv_pLAYER_04_DEFENDERS);
    autoE9DFBB7C_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE9DFBB7C_u = UnitGroupCount(autoE9DFBB7C_g, c_unitCountAll);
    for (;; autoE9DFBB7C_u -= 1) {
        autoE9DFBB7C_var = UnitGroupUnitFromEnd(autoE9DFBB7C_g, autoE9DFBB7C_u);
        if (autoE9DFBB7C_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(64), autoE9DFBB7C_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoE9DFBB7C_var), UnitGetFacing(autoE9DFBB7C_var)));
        if ((libNtve_gf_UnitIsHidden(autoE9DFBB7C_var) == true)) {
            libNtve_gf_PauseUnit(autoE9DFBB7C_var, true);
        }

    }
    libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(1296623386), 300.0, 240.0, libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 4.0));
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(100), gv_pLAYER_05_DEFENDERS);
    autoCE91DCD9_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCE91DCD9_u = UnitGroupCount(autoCE91DCD9_g, c_unitCountAll);
    for (;; autoCE91DCD9_u -= 1) {
        autoCE91DCD9_var = UnitGroupUnitFromEnd(autoCE91DCD9_g, autoCE91DCD9_u);
        if (autoCE91DCD9_var == null) { break; }
        if ((autoCE91DCD9_var != UnitFromId(2092018656)) && (autoCE91DCD9_var != UnitFromId(1192155122))) {
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(100), autoCE91DCD9_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoCE91DCD9_var), UnitGetFacing(autoCE91DCD9_var)));
        }

    }
    libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(836005186), 144.0, 100.0, libLotv_gf_DifficultyValueFixed2(6.0, 6.0, 4.0, 4.0));
    libNtve_gf_ShowHideUnit(UnitFromId(958512770), false);
    libNtve_gf_PauseUnit(UnitFromId(958512770), true);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(65), gv_pLAYER_05_DEFENDERS);
    auto21B68DB9_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto21B68DB9_u = UnitGroupCount(auto21B68DB9_g, c_unitCountAll);
    for (;; auto21B68DB9_u -= 1) {
        auto21B68DB9_var = UnitGroupUnitFromEnd(auto21B68DB9_g, auto21B68DB9_u);
        if (auto21B68DB9_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(65), auto21B68DB9_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto21B68DB9_var), UnitGetFacing(auto21B68DB9_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(66), gv_pLAYER_04_DEFENDERS);
    auto8895B6DE_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8895B6DE_u = UnitGroupCount(auto8895B6DE_g, c_unitCountAll);
    for (;; auto8895B6DE_u -= 1) {
        auto8895B6DE_var = UnitGroupUnitFromEnd(auto8895B6DE_g, auto8895B6DE_u);
        if (auto8895B6DE_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(66), auto8895B6DE_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto8895B6DE_var), UnitGetFacing(auto8895B6DE_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(112), gv_pLAYER_04_DEFENDERS);
    auto61853CBC_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(112), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto61853CBC_u = UnitGroupCount(auto61853CBC_g, c_unitCountAll);
    for (;; auto61853CBC_u -= 1) {
        auto61853CBC_var = UnitGroupUnitFromEnd(auto61853CBC_g, auto61853CBC_u);
        if (auto61853CBC_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(112), auto61853CBC_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto61853CBC_var), UnitGetFacing(auto61853CBC_var)));
    }
    auto5D1B8ADE_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5D1B8ADE_u = UnitGroupCount(auto5D1B8ADE_g, c_unitCountAll);
    for (;; auto5D1B8ADE_u -= 1) {
        auto5D1B8ADE_var = UnitGroupUnitFromEnd(auto5D1B8ADE_g, auto5D1B8ADE_u);
        if (auto5D1B8ADE_var == null) { break; }
        UnitGroupAdd(gv_s1_MarauderGankGroup, auto5D1B8ADE_var);
        libNtve_gf_ShowHideUnit(auto5D1B8ADE_var, false);
        libNtve_gf_PauseUnit(auto5D1B8ADE_var, true);
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(59), gv_pLAYER_04_DEFENDERS);
    auto03AA6409_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto03AA6409_u = UnitGroupCount(auto03AA6409_g, c_unitCountAll);
    for (;; auto03AA6409_u -= 1) {
        auto03AA6409_var = UnitGroupUnitFromEnd(auto03AA6409_g, auto03AA6409_u);
        if (auto03AA6409_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(59), auto03AA6409_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto03AA6409_var), UnitGetFacing(auto03AA6409_var)));
    }
    libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(617012190), 340.0, 250.0, libNtve_gf_DifficultyValueFixed(8.0, 8.0, 6.0, 6.0));
    libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(364682024), 250.0, 130.0, libNtve_gf_DifficultyValueFixed(8.0, 8.0, 6.0, 6.0));
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(69), gv_pLAYER_04_DEFENDERS);
    autoA5C3EB7D_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA5C3EB7D_u = UnitGroupCount(autoA5C3EB7D_g, c_unitCountAll);
    for (;; autoA5C3EB7D_u -= 1) {
        autoA5C3EB7D_var = UnitGroupUnitFromEnd(autoA5C3EB7D_g, autoA5C3EB7D_u);
        if (autoA5C3EB7D_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(69), autoA5C3EB7D_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoA5C3EB7D_var), UnitGetFacing(autoA5C3EB7D_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(138), gv_pLAYER_04_DEFENDERS);
    auto605390EF_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(138), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto605390EF_u = UnitGroupCount(auto605390EF_g, c_unitCountAll);
    for (;; auto605390EF_u -= 1) {
        auto605390EF_var = UnitGroupUnitFromEnd(auto605390EF_g, auto605390EF_u);
        if (auto605390EF_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(138), auto605390EF_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto605390EF_var), UnitGetFacing(auto605390EF_var)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03aStage01Sewers_Init () {
    gt_Init03aStage01Sewers = TriggerCreate("gt_Init03aStage01Sewers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03b Stage 02 Facility
//--------------------------------------------------------------------------------------------------
bool gt_Init03bStage02Facility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto32EB2423_g;
    int auto32EB2423_u;
    unit auto32EB2423_var;
    unitgroup auto13C4019B_g;
    int auto13C4019B_u;
    unit auto13C4019B_var;
    unitgroup autoC9551740_g;
    int autoC9551740_u;
    unit autoC9551740_var;
    unitgroup auto81F018B0_g;
    int auto81F018B0_u;
    unit auto81F018B0_var;
    unitgroup autoBE73DCD0_g;
    int autoBE73DCD0_u;
    unit autoBE73DCD0_var;
    unitgroup auto26DCC2F5_g;
    int auto26DCC2F5_u;
    unit auto26DCC2F5_var;
    unitgroup auto4B0417DD_g;
    int auto4B0417DD_u;
    unit auto4B0417DD_var;
    unitgroup autoE6B271EA_g;
    int autoE6B271EA_u;
    unit autoE6B271EA_var;
    unitgroup autoD721D283_g;
    int autoD721D283_u;
    unit autoD721D283_var;
    unitgroup autoBC8C112F_g;
    int autoBC8C112F_u;
    unit autoBC8C112F_var;
    unitgroup auto0D6D800A_g;
    int auto0D6D800A_u;
    unit auto0D6D800A_var;
    unitgroup auto8F10237E_g;
    int auto8F10237E_u;
    unit auto8F10237E_var;
    unitgroup autoD46AC6B0_g;
    int autoD46AC6B0_u;
    unit autoD46AC6B0_var;
    unitgroup auto4AD4C7D9_g;
    int auto4AD4C7D9_u;
    unit auto4AD4C7D9_var;
    unitgroup autoE5C4E2A0_g;
    int autoE5C4E2A0_u;
    unit autoE5C4E2A0_var;
    unitgroup auto85110BBD_g;
    int auto85110BBD_u;
    unit auto85110BBD_var;
    unitgroup auto4E7ABDFE_g;
    int auto4E7ABDFE_u;
    unit auto4E7ABDFE_var;
    unitgroup auto4A124814_g;
    int auto4A124814_u;
    unit auto4A124814_var;
    unitgroup auto5B753C5E_g;
    int auto5B753C5E_u;
    unit auto5B753C5E_var;
    unitgroup auto2D4EB4EB_g;
    int auto2D4EB4EB_u;
    unit auto2D4EB4EB_var;
    unitgroup auto65B1A250_g;
    int auto65B1A250_u;
    unit auto65B1A250_var;
    unitgroup autoA99FA3CE_g;
    int autoA99FA3CE_u;
    unit autoA99FA3CE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(61), gv_pLAYER_04_DEFENDERS);
    auto32EB2423_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto32EB2423_u = UnitGroupCount(auto32EB2423_g, c_unitCountAll);
    for (;; auto32EB2423_u -= 1) {
        auto32EB2423_var = UnitGroupUnitFromEnd(auto32EB2423_g, auto32EB2423_u);
        if (auto32EB2423_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(61), auto32EB2423_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto32EB2423_var), UnitGetFacing(auto32EB2423_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(60), gv_pLAYER_05_DEFENDERS);
    auto13C4019B_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto13C4019B_u = UnitGroupCount(auto13C4019B_g, c_unitCountAll);
    for (;; auto13C4019B_u -= 1) {
        auto13C4019B_var = UnitGroupUnitFromEnd(auto13C4019B_g, auto13C4019B_u);
        if (auto13C4019B_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(60), auto13C4019B_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto13C4019B_var), UnitGetFacing(auto13C4019B_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(24), gv_pLAYER_05_DEFENDERS);
    autoC9551740_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC9551740_u = UnitGroupCount(autoC9551740_g, c_unitCountAll);
    for (;; autoC9551740_u -= 1) {
        autoC9551740_var = UnitGroupUnitFromEnd(autoC9551740_g, autoC9551740_u);
        if (autoC9551740_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(24), autoC9551740_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoC9551740_var), UnitGetFacing(autoC9551740_var)));
    }
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(1491649738), PointFromId(347198239), PointFromId(2068511072), PointFromId(347198239), PointFromId(2068511072), 8.0);
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(384533514), PointFromId(1207602457), PointFromId(1443056931), PointFromId(1207602457), PointFromId(1443056931), 8.0);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(38), gv_pLAYER_04_DEFENDERS);
    auto81F018B0_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81F018B0_u = UnitGroupCount(auto81F018B0_g, c_unitCountAll);
    for (;; auto81F018B0_u -= 1) {
        auto81F018B0_var = UnitGroupUnitFromEnd(auto81F018B0_g, auto81F018B0_u);
        if (auto81F018B0_var == null) { break; }
        if ((auto81F018B0_var != UnitFromId(1491649738)) && (auto81F018B0_var != UnitFromId(384533514))) {
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(38), auto81F018B0_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto81F018B0_var), UnitGetFacing(auto81F018B0_var)));
        }

    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(75), gv_pLAYER_04_DEFENDERS);
    autoBE73DCD0_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBE73DCD0_u = UnitGroupCount(autoBE73DCD0_g, c_unitCountAll);
    for (;; autoBE73DCD0_u -= 1) {
        autoBE73DCD0_var = UnitGroupUnitFromEnd(autoBE73DCD0_g, autoBE73DCD0_u);
        if (autoBE73DCD0_var == null) { break; }
        if ((autoBE73DCD0_var != UnitFromId(1491649738)) && (autoBE73DCD0_var != UnitFromId(384533514))) {
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(75), autoBE73DCD0_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoBE73DCD0_var), UnitGetFacing(autoBE73DCD0_var)));
        }

    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(87), gv_pLAYER_05_DEFENDERS);
    auto26DCC2F5_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(87), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto26DCC2F5_u = UnitGroupCount(auto26DCC2F5_g, c_unitCountAll);
    for (;; auto26DCC2F5_u -= 1) {
        auto26DCC2F5_var = UnitGroupUnitFromEnd(auto26DCC2F5_g, auto26DCC2F5_u);
        if (auto26DCC2F5_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(87), auto26DCC2F5_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto26DCC2F5_var), UnitGetFacing(auto26DCC2F5_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(73), gv_pLAYER_04_DEFENDERS);
    auto4B0417DD_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(73), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B0417DD_u = UnitGroupCount(auto4B0417DD_g, c_unitCountAll);
    for (;; auto4B0417DD_u -= 1) {
        auto4B0417DD_var = UnitGroupUnitFromEnd(auto4B0417DD_g, auto4B0417DD_u);
        if (auto4B0417DD_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(73), auto4B0417DD_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto4B0417DD_var), UnitGetFacing(auto4B0417DD_var)));
    }
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(1392476521), PointFromId(451078505), PointFromId(2134877690), PointFromId(451078505), PointFromId(2134877690), 8.0);
    libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(1447231864), 135.0, 225.0, 5.0);
    libNCMI_gf_StealthAIMakeSonarDronePatrol4Points(UnitFromId(1092224849), PointFromId(1467628256), PointFromId(868080112), PointFromId(589539549), PointFromId(1501552562), 3.0);
    libNCMI_gf_StealthAIMakeSonarDronePatrol4Points(UnitFromId(450794949), PointFromId(589539549), PointFromId(1501552562), PointFromId(1467628256), PointFromId(868080112), 3.0);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(127), gv_pLAYER_05_DEFENDERS);
    autoE6B271EA_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(127), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE6B271EA_u = UnitGroupCount(autoE6B271EA_g, c_unitCountAll);
    for (;; autoE6B271EA_u -= 1) {
        autoE6B271EA_var = UnitGroupUnitFromEnd(autoE6B271EA_g, autoE6B271EA_u);
        if (autoE6B271EA_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(127), autoE6B271EA_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoE6B271EA_var), UnitGetFacing(autoE6B271EA_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(79), gv_pLAYER_05_DEFENDERS);
    autoD721D283_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD721D283_u = UnitGroupCount(autoD721D283_g, c_unitCountAll);
    for (;; autoD721D283_u -= 1) {
        autoD721D283_var = UnitGroupUnitFromEnd(autoD721D283_g, autoD721D283_u);
        if (autoD721D283_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(79), autoD721D283_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoD721D283_var), UnitGetFacing(autoD721D283_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(80), gv_pLAYER_05_DEFENDERS);
    autoBC8C112F_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(80), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC8C112F_u = UnitGroupCount(autoBC8C112F_g, c_unitCountAll);
    for (;; autoBC8C112F_u -= 1) {
        autoBC8C112F_var = UnitGroupUnitFromEnd(autoBC8C112F_g, autoBC8C112F_u);
        if (autoBC8C112F_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(80), autoBC8C112F_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoBC8C112F_var), UnitGetFacing(autoBC8C112F_var)));
    }
    libNCMI_gf_StealthAIMakeSonarDronePatrol4Points(UnitFromId(1805968285), PointFromId(567487896), PointFromId(1642880071), PointFromId(567487896), PointFromId(1642880071), 6.0);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(81), gv_pLAYER_05_DEFENDERS);
    auto0D6D800A_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(81), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0D6D800A_u = UnitGroupCount(auto0D6D800A_g, c_unitCountAll);
    for (;; auto0D6D800A_u -= 1) {
        auto0D6D800A_var = UnitGroupUnitFromEnd(auto0D6D800A_g, auto0D6D800A_u);
        if (auto0D6D800A_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(81), auto0D6D800A_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto0D6D800A_var), UnitGetFacing(auto0D6D800A_var)));
    }
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(60637747), PointFromId(953001675), PointFromId(349519421), PointFromId(823038141), PointFromId(1581142991), 4.0);
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(447145529), PointFromId(823038141), PointFromId(1581142991), PointFromId(953001675), PointFromId(349519421), 4.0);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(152), gv_pLAYER_05_DEFENDERS);
    auto8F10237E_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(152), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F10237E_u = UnitGroupCount(auto8F10237E_g, c_unitCountAll);
    for (;; auto8F10237E_u -= 1) {
        auto8F10237E_var = UnitGroupUnitFromEnd(auto8F10237E_g, auto8F10237E_u);
        if (auto8F10237E_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(152), auto8F10237E_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto8F10237E_var), UnitGetFacing(auto8F10237E_var)));
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(465486690), 180.0, 135.0, 5.0);
        libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(1896115578), 90.0, 135.0, 5.0);
    }

    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(101), gv_pLAYER_04_DEFENDERS);
    autoD46AC6B0_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(101), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD46AC6B0_u = UnitGroupCount(autoD46AC6B0_g, c_unitCountAll);
    for (;; autoD46AC6B0_u -= 1) {
        autoD46AC6B0_var = UnitGroupUnitFromEnd(autoD46AC6B0_g, autoD46AC6B0_u);
        if (autoD46AC6B0_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(101), autoD46AC6B0_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoD46AC6B0_var), UnitGetFacing(autoD46AC6B0_var)));
    }
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(1946696115), PointFromId(1799408776), PointFromId(322931436), PointFromId(1799408776), PointFromId(322931436), 8.0);
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(1509122167), PointFromId(322931436), PointFromId(1799408776), PointFromId(322931436), PointFromId(1799408776), 8.0);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(105), gv_pLAYER_04_DEFENDERS);
    auto4AD4C7D9_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(105), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4AD4C7D9_u = UnitGroupCount(auto4AD4C7D9_g, c_unitCountAll);
    for (;; auto4AD4C7D9_u -= 1) {
        auto4AD4C7D9_var = UnitGroupUnitFromEnd(auto4AD4C7D9_g, auto4AD4C7D9_u);
        if (auto4AD4C7D9_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(105), auto4AD4C7D9_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto4AD4C7D9_var), UnitGetFacing(auto4AD4C7D9_var)));
    }
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(105), UnitFromId(1443114434), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitFromId(1443114434)), UnitGetFacing(UnitFromId(1443114434))));
    libNCMI_gf_StealthAIMakeSonarDronePatrol4Points(UnitFromId(1443114434), PointFromId(822240971), PointFromId(795533530), PointFromId(822240971), PointFromId(795533530), 3.0);
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(430018627), PointFromId(774514589), PointFromId(1679928955), PointFromId(774514589), PointFromId(1679928955), 8.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(1850492113), 90.0, 180.0, 8.0);
    }

    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(113), gv_pLAYER_05_DEFENDERS);
    autoE5C4E2A0_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(113), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE5C4E2A0_u = UnitGroupCount(autoE5C4E2A0_g, c_unitCountAll);
    for (;; autoE5C4E2A0_u -= 1) {
        autoE5C4E2A0_var = UnitGroupUnitFromEnd(autoE5C4E2A0_g, autoE5C4E2A0_u);
        if (autoE5C4E2A0_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(113), autoE5C4E2A0_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoE5C4E2A0_var), UnitGetFacing(autoE5C4E2A0_var)));
    }
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(1910062294), PointFromId(805878628), PointFromId(1770789920), PointFromId(424265562), PointFromId(2135583151), 3.0);
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(49372891), PointFromId(424265562), PointFromId(2135583151), PointFromId(805878628), PointFromId(1770789920), 3.0);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(106), gv_pLAYER_04_DEFENDERS);
    auto85110BBD_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(106), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto85110BBD_u = UnitGroupCount(auto85110BBD_g, c_unitCountAll);
    for (;; auto85110BBD_u -= 1) {
        auto85110BBD_var = UnitGroupUnitFromEnd(auto85110BBD_g, auto85110BBD_u);
        if (auto85110BBD_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(106), auto85110BBD_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto85110BBD_var), UnitGetFacing(auto85110BBD_var)));
    }
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(142191120), PointFromId(394811913), PointFromId(483108228), PointFromId(394811913), PointFromId(483108228), 3.0);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(115), gv_pLAYER_05_DEFENDERS);
    auto4E7ABDFE_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(115), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E7ABDFE_u = UnitGroupCount(auto4E7ABDFE_g, c_unitCountAll);
    for (;; auto4E7ABDFE_u -= 1) {
        auto4E7ABDFE_var = UnitGroupUnitFromEnd(auto4E7ABDFE_g, auto4E7ABDFE_u);
        if (auto4E7ABDFE_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(115), auto4E7ABDFE_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto4E7ABDFE_var), UnitGetFacing(auto4E7ABDFE_var)));
    }
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(1531885460), PointFromId(1020750902), PointFromId(1902574879), PointFromId(1020750902), PointFromId(1902574879), 3.0);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(9), gv_pLAYER_04_DEFENDERS);
    auto4A124814_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4A124814_u = UnitGroupCount(auto4A124814_g, c_unitCountAll);
    for (;; auto4A124814_u -= 1) {
        auto4A124814_var = UnitGroupUnitFromEnd(auto4A124814_g, auto4A124814_u);
        if (auto4A124814_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(9), auto4A124814_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto4A124814_var), UnitGetFacing(auto4A124814_var)));
    }
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(1125768730), PointFromId(903448297), PointFromId(1748619806), PointFromId(1789517363), PointFromId(858509024), 3.0);
    auto5B753C5E_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(82), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5B753C5E_u = UnitGroupCount(auto5B753C5E_g, c_unitCountAll);
    for (;; auto5B753C5E_u -= 1) {
        auto5B753C5E_var = UnitGroupUnitFromEnd(auto5B753C5E_g, auto5B753C5E_u);
        if (auto5B753C5E_var == null) { break; }
        UnitGroupAdd(gv_s2_TargetPracticeGuys, auto5B753C5E_var);
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(68), gv_pLAYER_05_DEFENDERS);
    auto2D4EB4EB_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D4EB4EB_u = UnitGroupCount(auto2D4EB4EB_g, c_unitCountAll);
    for (;; auto2D4EB4EB_u -= 1) {
        auto2D4EB4EB_var = UnitGroupUnitFromEnd(auto2D4EB4EB_g, auto2D4EB4EB_u);
        if (auto2D4EB4EB_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(68), auto2D4EB4EB_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto2D4EB4EB_var), UnitGetFacing(auto2D4EB4EB_var)));
    }
    libNCMI_gf_StealthAIMakeSonarDronePatrol4Points(UnitFromId(1812539140), PointFromId(530020765), PointFromId(1231480524), PointFromId(530020765), PointFromId(1231480524), 3.0);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(71), gv_pLAYER_05_DEFENDERS);
    auto65B1A250_g = UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto65B1A250_u = UnitGroupCount(auto65B1A250_g, c_unitCountAll);
    for (;; auto65B1A250_u -= 1) {
        auto65B1A250_var = UnitGroupUnitFromEnd(auto65B1A250_g, auto65B1A250_u);
        if (auto65B1A250_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(71), auto65B1A250_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto65B1A250_var), UnitGetFacing(auto65B1A250_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(72), gv_pLAYER_04_DEFENDERS);
    autoA99FA3CE_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(72), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA99FA3CE_u = UnitGroupCount(autoA99FA3CE_g, c_unitCountAll);
    for (;; autoA99FA3CE_u -= 1) {
        autoA99FA3CE_var = UnitGroupUnitFromEnd(autoA99FA3CE_g, autoA99FA3CE_u);
        if (autoA99FA3CE_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(72), autoA99FA3CE_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoA99FA3CE_var), UnitGetFacing(autoA99FA3CE_var)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03bStage02Facility_Init () {
    gt_Init03bStage02Facility = TriggerCreate("gt_Init03bStage02Facility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "nDLC_Music_Nova07_Intro";
    gv_mapMusicTrack4 = "nDLC_Music_Nova07_Mid";
    gv_mapMusicTrack2 = "nDLC_Music_Nova07_Main";
    gv_mapMusicTrack3 = "nDLC_Music_Nova07_BossFight";
    gv_mapMusicTrack5 = "nDLC_Music_Nova07_Outro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack2, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, gv_ambienceSound_Sewers, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    GameSetLighting(gv_lighting_Sewers, 0.0);
    libLbty_gf_AutoRevealRegion(RegionFromId(98), RegionFromId(98), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(125), RegionFromId(93), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(97), RegionFromId(97), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(67), RegionFromId(67), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(77), RegionFromId(77), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(88), RegionFromId(88), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(109), RegionFromId(109), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(111), RegionFromId(111), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(84), RegionFromId(84), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(136), RegionFromId(136), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(28), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(29), RegionFromId(29), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(30), RegionFromId(30), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(31), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(32), RegionFromId(32), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(33), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(34), RegionFromId(34), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(35), RegionFromId(35), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(36), RegionFromId(36), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(37), RegionFromId(37), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(144), RegionFromId(144), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(39), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(40), RegionFromId(40), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(41), RegionFromId(41), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(43), RegionFromId(43), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(45), RegionFromId(45), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(46), RegionFromId(46), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(48), RegionFromId(48), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(49), RegionFromId(49), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(50), RegionFromId(50), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(51), RegionFromId(51), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(52), RegionFromId(52), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(53), RegionFromId(53), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(54), RegionFromId(54), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(55), RegionFromId(55), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(56), RegionFromId(56), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(145), RegionFromId(145), gv_pLAYER_01_USER);
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupApply Unpowered", "AlarmLight", RegionEntireMap());
    libNCMI_gf_SendActorMessageToDoodadsInRegion("Signal AlarmOff", "NovaUmojanLabWallCap", RegionEntireMap());
    ActorSend(ActorFromDoodad(DoodadFromId(357491218)), "SetOpacity 1.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto055721F8_g;
    int auto055721F8_u;
    unit auto055721F8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_04_DEFENDERS, "PersonalCloaking", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_DEFENDERS, "PersonalCloaking", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_DEFENDERS, "ReaperD8Charge", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_DEFENDERS, "HighCapacityBarrels", 1);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        auto055721F8_g = UnitGroup(null, c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto055721F8_u = UnitGroupCount(auto055721F8_g, c_unitCountAll);
        for (;; auto055721F8_u -= 1) {
            auto055721F8_var = UnitGroupUnitFromEnd(auto055721F8_g, auto055721F8_u);
            if (auto055721F8_var == null) { break; }
            if (((UnitGetOwner(auto055721F8_var) == gv_pLAYER_04_DEFENDERS) || (UnitGetOwner(auto055721F8_var) == gv_pLAYER_05_DEFENDERS)) && ((UnitGetType(auto055721F8_var) == "Ghost") || (UnitGetType(auto055721F8_var) == "GhostAlternate") || (UnitGetType(auto055721F8_var) == "GhostDetectorCone") || (UnitGetType(auto055721F8_var) == "GhostAlternateDetectorCone"))) {
                UnitBehaviorAdd(auto055721F8_var, "PersonalCloakingFree", auto055721F8_var, 1);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_AddMissionTipCampaign("(PH) Hold Fire");
    libComC_gf_AddUnitTypeToUnitHelpPanel("Separatist", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Marauder", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ghost", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("GhostAlternate", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Reaper", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Goliath", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("WarHound", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("HellionTank", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Cyclone", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Thor", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("RotatingTurretActiveSCW", gv_pLAYER_01_USER);
    libNCMI_gf_AddMissionCheat("Stage2", "Skip to the second mission stage", gt_DebugStage2, libNCMI_ge_MissionCheatType_Stage, libNCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug -  Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingQ, true, true);
    ConsoleCommand("exit", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugIntro_Init () {
    gt_DebugIntro = TriggerCreate("gt_DebugIntro_Func");
    TriggerAddEventChatMessage(gt_DebugIntro, 1, "Intro", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(1, StringExternal("Param/Value/BF0EF1B8"), true);
    libNCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    UnitRemove(UnitFromId(1840974833));
    TriggerExecute(gt_S1NovaEntersFacilityEntranceBeacon, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6D3C8290_g;
    int auto6D3C8290_u;
    unit auto6D3C8290_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(1, StringExternal("Param/Value/351F2FCC"), true);
    libNCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    TriggerExecute(gt_S1CleanUpSection01, true, true);
    auto6D3C8290_g = gv_stage2PausedUnits;
    auto6D3C8290_u = UnitGroupCount(auto6D3C8290_g, c_unitCountAll);
    for (;; auto6D3C8290_u -= 1) {
        auto6D3C8290_var = UnitGroupUnitFromEnd(auto6D3C8290_g, auto6D3C8290_u);
        if (auto6D3C8290_var == null) { break; }
        libNtve_gf_PauseUnit(auto6D3C8290_var, false);
    }
    TriggerExecute(gt_S2NovaEntersStoneEncounter, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage3_Init () {
    gt_DebugStage3 = TriggerCreate("gt_DebugStage3_Func");
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "S3", true);
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "Stage3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Allow All Nova Tech
//--------------------------------------------------------------------------------------------------
bool gt_DebugAllowAllNovaTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(1, StringExternal("Param/Value/E539C7C4"), true);
    libNCMI_gf_UnlockAllMissedNovaEquipment();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugAllowAllNovaTech_Init () {
    gt_DebugAllowAllNovaTech = TriggerCreate("gt_DebugAllowAllNovaTech_Func");
    TriggerAddEventChatMessage(gt_DebugAllowAllNovaTech, c_playerAny, "alltech", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Open Nova Tech Screen
//--------------------------------------------------------------------------------------------------
bool gt_DebugOpenNovaTechScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gearSwapScreenOpen = true;
    libNtve_gf_MakeUnitInvulnerable(gv_nova, true);
    libNtve_gf_MakeUnitUncommandable(gv_nova, true);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNCMI_gf_OpenNovaEquipmentScreen();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugOpenNovaTechScreen_Init () {
    gt_DebugOpenNovaTechScreen = TriggerCreate("gt_DebugOpenNovaTechScreen_Func");
    TriggerAddEventChatMessage(gt_DebugOpenNovaTechScreen, c_playerAny, "opentech", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Hit By Sonar
//--------------------------------------------------------------------------------------------------
bool gt_NovaHitBySonar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventPlayerEffectUsedUnitImpact()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventPlayerEffectUsedUnitImpact(), EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventPlayerEffectUsedUnitImpact(), "DetectorConeDetected") == false)) {
        UnitBehaviorAdd(EventPlayerEffectUsedUnitImpact(), "DetectorConeDetected", EventPlayerEffectUsedUnitLaunch(), 1);
        gf_S2TrackUnitHitBySonar(EventPlayerEffectUsedUnitImpact());
    }
    else {
        UnitBehaviorAdd(EventPlayerEffectUsedUnitImpact(), "DetectorConeDetected", EventPlayerEffectUsedUnitLaunch(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaHitBySonar_Init () {
    gt_NovaHitBySonar = TriggerCreate("gt_NovaHitBySonar_Func");
    TriggerAddEventPlayerEffectUsed(gt_NovaHitBySonar, c_playerAny, "NovaSonarPingSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Picks Up Restoration Charge
//--------------------------------------------------------------------------------------------------
bool gt_NovaPicksUpRestorationCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnitImpact() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((EventPlayerEffectUsed() == "HealthDispenserLife500")) {
        SoundPlayOnUnitForPlayer(SoundLink("HeroNovaMP1_Health_Pickup", -1), c_maxPlayers, PlayerGroupAll(), gv_nova, 0.0, 100.0, 0.0);
    }
    else if ((EventPlayerEffectUsed() == "HealthDispenserEnergy500")) {
        SoundPlayOnUnitForPlayer(SoundLink("HeroNovaMP1_Energy_Pickup", -1), c_maxPlayers, PlayerGroupAll(), gv_nova, 0.0, 100.0, 0.0);
    }
    else if (true) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaPicksUpRestorationCharge_Init () {
    gt_NovaPicksUpRestorationCharge = TriggerCreate("gt_NovaPicksUpRestorationCharge_Func");
    TriggerAddEventPlayerEffectUsed(gt_NovaPicksUpRestorationCharge, c_playerAny, "HealthDispenserLife500");
    TriggerAddEventPlayerEffectUsed(gt_NovaPicksUpRestorationCharge, c_playerAny, "HealthDispenserEnergy500");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Enters Gear Swap
//--------------------------------------------------------------------------------------------------
bool gt_NovaEntersGearSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9617DBB6_g;
    int auto9617DBB6_u;
    unit auto9617DBB6_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gearSwapPausedUnits = UnitGroupEmpty();
    gv_gearSwapScreenOpen = true;
    gv_gearSwapCurrentHead = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotHelmet");
    gv_gearSwapCurrentSuit = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotSuit");
    gv_gearSwapCurrentGadget = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotGadget");
    gv_gearSwapCurrentWeapon = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotWeapon");
    libNtve_gf_MakeUnitInvulnerable(gv_nova, true);
    libNtve_gf_MakeUnitUncommandable(gv_nova, true);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    auto9617DBB6_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9617DBB6_u = UnitGroupCount(auto9617DBB6_g, c_unitCountAll);
    for (;; auto9617DBB6_u -= 1) {
        auto9617DBB6_var = UnitGroupUnitFromEnd(auto9617DBB6_g, auto9617DBB6_u);
        if (auto9617DBB6_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto9617DBB6_var) == false)) {
            UnitGroupAdd(gv_gearSwapPausedUnits, auto9617DBB6_var);
        }

    }
    UnitGroupPauseAll(gv_gearSwapPausedUnits, true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    libNCMI_gf_OpenNovaEquipmentScreen();
    libComC_gf_PauseAITimeCampaign(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaEntersGearSwap_Init () {
    gt_NovaEntersGearSwap = TriggerCreate("gt_NovaEntersGearSwap_Func");
    TriggerAddEventUnitRegion(gt_NovaEntersGearSwap, UnitRefFromVariable("gv_nova"), RegionFromId(74), true);
    TriggerAddEventUnitRegion(gt_NovaEntersGearSwap, UnitRefFromVariable("gv_nova"), RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_NovaEntersGearSwap, UnitRefFromVariable("gv_nova"), RegionFromId(20), true);
    TriggerAddEventUnitRegion(gt_NovaEntersGearSwap, UnitRefFromVariable("gv_nova"), RegionFromId(25), true);
    TriggerAddEventUnitRegion(gt_NovaEntersGearSwap, UnitRefFromVariable("gv_nova"), RegionFromId(58), true);
    TriggerAddEventUnitRegion(gt_NovaEntersGearSwap, UnitRefFromVariable("gv_nova"), RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Exits Gear Swap Screen
//--------------------------------------------------------------------------------------------------
bool gt_NovaExitsGearSwapScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotHelmet") != gv_gearSwapCurrentHead) || (libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotSuit") != gv_gearSwapCurrentSuit) || (libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotGadget") != gv_gearSwapCurrentGadget) || (libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotWeapon") != gv_gearSwapCurrentWeapon))) {
        gv_statGearSwapCount += 1;
    }

    gv_gearSwapCurrentHead = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotHelmet");
    gv_gearSwapCurrentSuit = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotSuit");
    gv_gearSwapCurrentGadget = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotGadget");
    gv_gearSwapCurrentWeapon = libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotWeapon");
    gv_gearSwapScreenOpen = false;
    libNtve_gf_MakeUnitInvulnerable(gv_nova, false);
    libNtve_gf_MakeUnitUncommandable(gv_nova, false);
    UnitGroupPauseAll(gv_gearSwapPausedUnits, false);
    CameraLockInput(gv_pLAYER_01_USER, false);
    libComC_gf_PauseAITimeCampaign(false);
    if ((libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotHelmet") != "EQPHelmetItem5")) {
        GameDestroyEffects(UnitGetPosition(gv_nova), 8.0, 0, "NovaDominationPersistent");
        if ((gv_dominatedBuddyUnit != null) && (UnitIsAlive(gv_dominatedBuddyUnit) == true)) {
            GameDestroyEffects(UnitGetPosition(gv_dominatedBuddyUnit), 8.0, 0, "NovaDominationPersistent");
        }

    }

    if ((TimerGetRemaining(gv_autoSaveTimer) == 0.0) && (gv_currentStage < 3)) {
        libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/215D708E"));
        TimerStart(gv_autoSaveTimer, gv_autoSaveTimerCooldown, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaExitsGearSwapScreen_Init () {
    gt_NovaExitsGearSwapScreen = TriggerCreate("gt_NovaExitsGearSwapScreen_Func");
    gf_NovaEquipmentScreenCloses(gt_NovaExitsGearSwapScreen);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Near Gear Swaps
//--------------------------------------------------------------------------------------------------
bool gt_NovaNearGearSwaps_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7C479111_g;
    int auto7C479111_u;
    unit auto7C479111_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7C479111_g = gv_gearSwapCrates;
    auto7C479111_u = UnitGroupCount(auto7C479111_g, c_unitCountAll);
    for (;; auto7C479111_u -= 1) {
        auto7C479111_var = UnitGroupUnitFromEnd(auto7C479111_g, auto7C479111_u);
        if (auto7C479111_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(auto7C479111_var), UnitGetPosition(gv_nova)) <= 10.0)) {
            if ((UnitGetCustomValue(auto7C479111_var, 88) == 0.0)) {
                UnitSetCustomValue(auto7C479111_var, 88, 1.0);
                libNtve_gf_SendActorMessageToUnit(auto7C479111_var, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
            }

        }
        else {
            UnitSetCustomValue(auto7C479111_var, 88, 0.0);
            libNtve_gf_SendActorMessageToUnit(auto7C479111_var, "AnimBracketStop StandWork");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaNearGearSwaps_Init () {
    gt_NovaNearGearSwaps = TriggerCreate("gt_NovaNearGearSwaps_Func");
    TriggerAddEventTimePeriodic(gt_NovaNearGearSwaps, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Kills DOM Unit In Defend Region
//--------------------------------------------------------------------------------------------------
bool gt_NovaKillsDOMUnitInDefendRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_triggeringUnitDefendRegion;
    point lv_triggeringUnitPoint;
    unitgroup lv_nearbyEnemies;
    unit lv_speaker;

    // Automatic Variable Declarations
    unitgroup autoCC75373A_g;
    int autoCC75373A_u;
    unit autoCC75373A_var;

    // Variable Initialization
    lv_triggeringUnitPoint = UnitGetPosition(EventUnit());
    lv_nearbyEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_04_DEFENDERS) || (EventPlayer() == gv_pLAYER_05_DEFENDERS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnitDefendRegion = libNCMI_gf_StealthAIGetDefendRegionOfUnit(EventUnit());
    if ((lv_triggeringUnitDefendRegion != null)) {
        autoCC75373A_g = UnitGroup(null, EventPlayer(), RegionCircle(lv_triggeringUnitPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCC75373A_u = UnitGroupCount(autoCC75373A_g, c_unitCountAll);
        for (;; autoCC75373A_u -= 1) {
            autoCC75373A_var = UnitGroupUnitFromEnd(autoCC75373A_g, autoCC75373A_u);
            if (autoCC75373A_var == null) { break; }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1) && (UnitHasBehavior2(autoCC75373A_var, "DOMGhostPersonalDefensiveMatrix") == false) && ((UnitGetType(autoCC75373A_var) == "Ghost") || (UnitGetType(autoCC75373A_var) == "GhostDetectorCone") || (UnitGetType(autoCC75373A_var) == "GhostAlternate") || (UnitGetType(autoCC75373A_var) == "GhostAlternateDetectorCone"))) {
                UnitIssueOrder(autoCC75373A_var, Order(AbilityCommand("DOMGhostPersonalDefensiveMatrix", 0)), c_orderQueueReplace);
            }

            if ((libNCMI_gf_StealthAIGetStealthAIUnitState(autoCC75373A_var) == libNCMI_ge_StealthAIUnitState_Idle) && (libNCMI_gf_StealthAIGetStealthAIGhostJob(autoCC75373A_var) == libNCMI_ge_StealthAIGhostJob_Floating) && (libNtve_gf_UnitInRegion(autoCC75373A_var, lv_triggeringUnitDefendRegion) == true) && (UnitTestState(autoCC75373A_var, c_unitStateStunned) == false)) {
                UnitGroupAdd(lv_nearbyEnemies, autoCC75373A_var);
            }

        }
        if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
            libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_nearbyEnemies, lv_triggeringUnitPoint);
            if ((TimerGetRemaining(gv_unitInvestigateTransmissionCooldownTimer) == 0.0)) {
                gf_DOMUnitsInvestigateTransmissionsQ(lv_nearbyEnemies, lv_triggeringUnitPoint);
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaKillsDOMUnitInDefendRegion_Init () {
    gt_NovaKillsDOMUnitInDefendRegion = TriggerCreate("gt_NovaKillsDOMUnitInDefendRegion_Func");
    TriggerAddEventUnitDied(gt_NovaKillsDOMUnitInDefendRegion, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Attacks DOM Unit In Defend Region
//--------------------------------------------------------------------------------------------------
bool gt_NovaAttacksDOMUnitInDefendRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_triggeringUnitDefendRegion;
    point lv_triggeringUnitPoint;
    unitgroup lv_nearbyEnemies;
    unit lv_speaker;

    // Automatic Variable Declarations
    unitgroup auto7B8E2BA6_g;
    int auto7B8E2BA6_u;
    unit auto7B8E2BA6_var;

    // Variable Initialization
    lv_triggeringUnitPoint = UnitGetPosition(EventUnit());
    lv_nearbyEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_04_DEFENDERS) || (EventPlayer() == gv_pLAYER_05_DEFENDERS)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnitDefendRegion = libNCMI_gf_StealthAIGetDefendRegionOfUnit(EventUnit());
    if ((lv_triggeringUnitDefendRegion != null)) {
        auto7B8E2BA6_g = UnitGroup(null, EventPlayer(), RegionCircle(lv_triggeringUnitPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7B8E2BA6_u = UnitGroupCount(auto7B8E2BA6_g, c_unitCountAll);
        for (;; auto7B8E2BA6_u -= 1) {
            auto7B8E2BA6_var = UnitGroupUnitFromEnd(auto7B8E2BA6_g, auto7B8E2BA6_u);
            if (auto7B8E2BA6_var == null) { break; }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1) && (UnitHasBehavior2(auto7B8E2BA6_var, "DOMGhostPersonalDefensiveMatrix") == false) && ((UnitGetType(auto7B8E2BA6_var) == "Ghost") || (UnitGetType(auto7B8E2BA6_var) == "GhostDetectorCone") || (UnitGetType(auto7B8E2BA6_var) == "GhostAlternate") || (UnitGetType(auto7B8E2BA6_var) == "GhostAlternateDetectorCone"))) {
                UnitIssueOrder(auto7B8E2BA6_var, Order(AbilityCommand("DOMGhostPersonalDefensiveMatrix", 0)), c_orderQueueReplace);
            }

            if ((libNCMI_gf_StealthAIGetStealthAIUnitState(auto7B8E2BA6_var) == libNCMI_ge_StealthAIUnitState_Idle) && (libNCMI_gf_StealthAIGetStealthAIGhostJob(auto7B8E2BA6_var) == libNCMI_ge_StealthAIGhostJob_Floating) && (libNtve_gf_UnitInRegion(auto7B8E2BA6_var, lv_triggeringUnitDefendRegion) == true) && (UnitTestState(auto7B8E2BA6_var, c_unitStateStunned) == false)) {
                UnitGroupAdd(lv_nearbyEnemies, auto7B8E2BA6_var);
            }

        }
        if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
            libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_nearbyEnemies, lv_triggeringUnitPoint);
            if ((TimerGetRemaining(gv_unitInvestigateTransmissionCooldownTimer) == 0.0)) {
                gf_DOMUnitsInvestigateTransmissionsQ(lv_nearbyEnemies, lv_triggeringUnitPoint);
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaAttacksDOMUnitInDefendRegion_Init () {
    gt_NovaAttacksDOMUnitInDefendRegion = TriggerCreate("gt_NovaAttacksDOMUnitInDefendRegion_Func");
    TriggerAddEventUnitAttacked2(gt_NovaAttacksDOMUnitInDefendRegion, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Flashbangs Unit In Defend Region
//--------------------------------------------------------------------------------------------------
bool gt_NovaFlashbangsUnitInDefendRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_flashbangImpactPoint;
    region lv_flashbangImpactDefendRegion;
    unitgroup lv_nearbyEnemies;
    unit lv_speaker;

    // Automatic Variable Declarations
    unitgroup autoB3722446_g;
    int autoB3722446_u;
    unit autoB3722446_var;

    // Variable Initialization
    lv_flashbangImpactPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_nearbyEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.125, c_timeGame);
    if ((RegionContainsPoint(RegionFromId(64), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(64);
    }
    else if ((RegionContainsPoint(RegionFromId(100), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(100);
    }
    else if ((RegionContainsPoint(RegionFromId(65), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(65);
    }
    else if ((RegionContainsPoint(RegionFromId(66), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(66);
    }
    else if ((RegionContainsPoint(RegionFromId(112), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(112);
    }
    else if ((RegionContainsPoint(RegionFromId(59), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(59);
    }
    else if ((RegionContainsPoint(RegionFromId(69), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(69);
    }
    else if ((RegionContainsPoint(RegionFromId(61), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(61);
    }
    else if ((RegionContainsPoint(RegionFromId(60), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(60);
    }
    else if ((RegionContainsPoint(RegionFromId(24), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(24);
    }
    else if ((RegionContainsPoint(RegionFromId(38), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(38);
    }
    else if ((RegionContainsPoint(RegionFromId(75), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(75);
    }
    else if ((RegionContainsPoint(RegionFromId(87), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(87);
    }
    else if ((RegionContainsPoint(RegionFromId(73), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(73);
    }
    else if ((RegionContainsPoint(RegionFromId(79), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(79);
    }
    else if ((RegionContainsPoint(RegionFromId(80), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(80);
    }
    else if ((RegionContainsPoint(RegionFromId(81), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(81);
    }
    else if ((RegionContainsPoint(RegionFromId(101), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(101);
    }
    else if ((RegionContainsPoint(RegionFromId(105), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(105);
    }
    else if ((RegionContainsPoint(RegionFromId(113), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(113);
    }
    else if ((RegionContainsPoint(RegionFromId(106), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(106);
    }
    else if ((RegionContainsPoint(RegionFromId(115), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(115);
    }
    else if ((RegionContainsPoint(RegionFromId(9), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(9);
    }
    else if ((RegionContainsPoint(RegionFromId(68), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(68);
    }
    else if ((RegionContainsPoint(RegionFromId(71), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(71);
    }
    else if ((RegionContainsPoint(RegionFromId(72), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(72);
    }
    else if ((RegionContainsPoint(RegionFromId(131), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(131);
    }
    else if (true) {
        return true;
    }
    autoB3722446_g = UnitGroup(null, EventPlayer(), RegionCircle(lv_flashbangImpactPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB3722446_u = UnitGroupCount(autoB3722446_g, c_unitCountAll);
    for (;; autoB3722446_u -= 1) {
        autoB3722446_var = UnitGroupUnitFromEnd(autoB3722446_g, autoB3722446_u);
        if (autoB3722446_var == null) { break; }
        if ((UnitHasBehavior2(autoB3722446_var, "FlashBangGrenade") == false) && (libNCMI_gf_StealthAIGetStealthAIUnitState(autoB3722446_var) == libNCMI_ge_StealthAIUnitState_Idle) && (libNtve_gf_UnitInRegion(autoB3722446_var, lv_flashbangImpactDefendRegion) == true) && (UnitGetType(autoB3722446_var) != "GhostDetectorCone") && (UnitGetType(autoB3722446_var) != "GhostAlternateDetectorCone") && (UnitTestState(autoB3722446_var, c_unitStateStunned) == false)) {
            UnitGroupAdd(lv_nearbyEnemies, autoB3722446_var);
        }

    }
    if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
        libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_nearbyEnemies, lv_flashbangImpactPoint);
        if ((TimerGetRemaining(gv_unitInvestigateTransmissionCooldownTimer) == 0.0)) {
            gf_DOMUnitsInvestigateTransmissionsQ(lv_nearbyEnemies, lv_flashbangImpactPoint);
        }

    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaFlashbangsUnitInDefendRegion_Init () {
    gt_NovaFlashbangsUnitInDefendRegion = TriggerCreate("gt_NovaFlashbangsUnitInDefendRegion_Func");
    TriggerAddEventPlayerEffectUsed(gt_NovaFlashbangsUnitInDefendRegion, gv_pLAYER_01_USER, "NovaGadgetFlashBangGrenadeSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DOM Units Engaging Target Transmissions Q
//--------------------------------------------------------------------------------------------------
bool gt_DOMUnitsEngagingTargetTransmissionsQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;
    unit lv_engagingUnit;
    bool lv_engagedUnitIsNova;

    // Automatic Variable Declarations
    int auto64AD0E97_val;
    int auto1287CD41_val;
    int auto404312A9_val;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_engagingUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_engagingTargetTransmissionCooldownTimer) == 0.0))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(lv_engagingUnit, gv_pLAYER_01_USER) == true))) {
            return false;
        }

        if (!((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(lv_engagingUnit) == gv_pLAYER_04_DEFENDERS) || (UnitGetOwner(lv_engagingUnit) == gv_pLAYER_05_DEFENDERS) || (UnitGetOwner(lv_engagingUnit) == gv_pLAYER_06_DEFENDERS_TRIPWIRES)))) {
            return false;
        }

        if (!((OrderGetTargetUnit(UnitOrder(lv_engagingUnit, 0)) != gv_s1_TripWire_Critter))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((OrderGetTargetUnit(UnitOrder(lv_engagingUnit, 0)) != gv_dominatedBuddyUnit)) {
        lv_engagedUnitIsNova = true;
    }

    gv_combatLastKnownPosition = UnitGetPosition(EventUnit());
    TimerStart(lv_talkTimer, 2.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_nova) == false) || (UnitIsAlive(lv_engagingUnit) == false) || (UnitTestState(lv_engagingUnit, c_unitStateStunned) == true) || (libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if (((UnitGetType(lv_engagingUnit) == "Ghost") || (UnitGetType(lv_engagingUnit) == "GhostDetectorCone"))) {
        TimerStart(gv_engagingTargetTransmissionCooldownTimer, gv_eNGAGINGTARGET_TRANSMISSIONCOOLDOWN, false, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (gv_engagingTargetTransmissionCycleGhost >= 3) {
            gv_engagingTargetTransmissionCycleGhost = 1;
        }
        else {
            gv_engagingTargetTransmissionCycleGhost = gv_engagingTargetTransmissionCycleGhost + 1;
        }
        if ((OrderGetTargetUnit(UnitOrder(lv_engagingUnit, 0)) != gv_dominatedBuddyUnit)) {
            auto64AD0E97_val = gv_engagingTargetTransmissionCycleGhost;
            if (auto64AD0E97_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova07|Line00135", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto64AD0E97_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova03|Line00124", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto64AD0E97_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova03|Line00125", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova03|Line00125", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (((UnitGetType(lv_engagingUnit) == "GhostAlternate") || (UnitGetType(lv_engagingUnit) == "GhostAlternateDetectorCone"))) {
        TimerStart(gv_engagingTargetTransmissionCooldownTimer, gv_eNGAGINGTARGET_TRANSMISSIONCOOLDOWN, false, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (gv_engagingTargetTransmissionCycleGhost >= 4) {
            gv_engagingTargetTransmissionCycleGhost = 1;
        }
        else {
            gv_engagingTargetTransmissionCycleGhost = gv_engagingTargetTransmissionCycleGhost + 1;
        }
        if ((OrderGetTargetUnit(UnitOrder(lv_engagingUnit, 0)) != gv_dominatedBuddyUnit)) {
            auto1287CD41_val = gv_engagingTargetTransmissionCycleGhost;
            if (auto1287CD41_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova07|Line00136", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto1287CD41_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova03|Line00126", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto1287CD41_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova03|Line00127", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto1287CD41_val == 4) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova03|Line00128", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova03|Line00127", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if ((UnitGetType(lv_engagingUnit) == "Separatist")) {
        TimerStart(gv_engagingTargetTransmissionCooldownTimer, gv_eNGAGINGTARGET_TRANSMISSIONCOOLDOWN, false, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (gv_engagingTargetTransmissionCycleTrooper >= 3) {
            gv_engagingTargetTransmissionCycleTrooper = 1;
        }
        else {
            gv_engagingTargetTransmissionCycleTrooper = gv_engagingTargetTransmissionCycleTrooper + 1;
        }
        if ((OrderGetTargetUnit(UnitOrder(lv_engagingUnit, 0)) != gv_dominatedBuddyUnit)) {
            auto404312A9_val = gv_engagingTargetTransmissionCycleTrooper;
            if (auto404312A9_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova07|Line00127", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto404312A9_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova07|Line00133", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto404312A9_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova07|Line00134", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(lv_engagingUnit, "Mission_Nova07|Line00127", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    Wait(2.0, c_timeGame);
    if ((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == true) && (lv_engagedUnitIsNova == true)) {
        TriggerEnable(gt_NovaReCloaksTransmissionQ, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DOMUnitsEngagingTargetTransmissionsQ_Init () {
    gt_DOMUnitsEngagingTargetTransmissionsQ = TriggerCreate("gt_DOMUnitsEngagingTargetTransmissionsQ_Func");
    TriggerAddEventUnitStartedAttack2(gt_DOMUnitsEngagingTargetTransmissionsQ, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Loses DetectorConeDetected - Still Cloaked Q
//--------------------------------------------------------------------------------------------------
bool gt_NovaLosesDetectorConeDetectedStillCloakedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;
    unit lv_detectingUnit;

    // Automatic Variable Declarations
    fixed autoF7FF22ED_at;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_detectingUnit = UnitBehaviorEffectUnit(gv_nova, "DetectorConeDetected", c_effectUnitCaster, 0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoF7FF22ED_at = 0;
    while (!((UnitHasBehavior2(gv_nova, "DetectorConeDetected") == false)) && autoF7FF22ED_at <= 3.0) {
        Wait(0.0625, c_timeAI);
        autoF7FF22ED_at = autoF7FF22ED_at + 0.0625;
    }
    Wait(0.5, c_timeAI);
    TimerStart(lv_talkTimer, 2.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_nova) == false) || (UnitIsAlive(lv_detectingUnit) == false) || (UnitTestState(lv_detectingUnit, c_unitStateStunned) == true) || (UnitHasBehavior2(libNCMI_gf_NovaHeroUnit(), "DOMEMPDecloak") == true))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if (((UnitGetType(lv_detectingUnit) == "Ghost") || (UnitGetType(lv_detectingUnit) == "GhostDetectorCone"))) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova03|Line00133", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (((UnitGetType(lv_detectingUnit) == "GhostAlternate") || (UnitGetType(lv_detectingUnit) == "GhostAlternateDetectorCone"))) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova03|Line00134", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(15.0, c_timeAI);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaLosesDetectorConeDetectedStillCloakedQ_Init () {
    gt_NovaLosesDetectorConeDetectedStillCloakedQ = TriggerCreate("gt_NovaLosesDetectorConeDetectedStillCloakedQ_Func");
    TriggerAddEventUnitBehaviorChange(gt_NovaLosesDetectorConeDetectedStillCloakedQ, UnitRefFromVariable("gv_nova"), "DetectorConeDetected", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Re-Cloaks Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_NovaReCloaksTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;
    unitgroup lv_nearbyEnemies;
    unit lv_speaker;

    // Automatic Variable Declarations
    int auto761639B1_val;
    int auto865322CA_val;
    int auto063A660F_val;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_nearbyEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_novaReCloaksTransmissionCooldownTimer) == 0.0))) {
            return false;
        }

        if (!((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_unitInvestigateTransmissionCooldownTimer, gv_uNITINVESTIGATE_TRANSMISSIONCOOLDOWN, false, c_timeGame);
    TimerStart(lv_talkTimer, 1.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_nova) == false) || (libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == true) || ((libNtve_gf_UnitIsVisibleToPlayer(gv_nova, gv_pLAYER_04_DEFENDERS) == true) || (libNtve_gf_UnitIsVisibleToPlayer(gv_nova, gv_pLAYER_05_DEFENDERS) == true)))) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_nearbyEnemies, UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionCircle(gv_combatLastKnownPosition, 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0));
    UnitGroupAddUnitGroup(lv_nearbyEnemies, UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionCircle(gv_combatLastKnownPosition, 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0));
    if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TimerStart(gv_novaReCloaksTransmissionCooldownTimer, gv_nOVARECLOAKS_TRANSMISSIONCOOLDOWN, false, c_timeGame);
        lv_speaker = UnitGroupClosestToPoint(lv_nearbyEnemies, gv_combatLastKnownPosition);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (((UnitGetType(lv_speaker) == "Ghost") || (UnitGetType(lv_speaker) == "GhostDetectorCone"))) {
            if (gv_novaReCloaksTransmissionCycleGhost >= 3) {
                gv_novaReCloaksTransmissionCycleGhost = 1;
            }
            else {
                gv_novaReCloaksTransmissionCycleGhost = gv_novaReCloaksTransmissionCycleGhost + 1;
            }
            auto761639B1_val = gv_novaReCloaksTransmissionCycleGhost;
            if (auto761639B1_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00139", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto761639B1_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00129", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto761639B1_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00130", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else if (((UnitGetType(lv_speaker) == "GhostAlternate") || (UnitGetType(lv_speaker) == "GhostAlternateDetectorCone"))) {
            if (gv_novaReCloaksTransmissionCycleGhost >= 3) {
                gv_novaReCloaksTransmissionCycleGhost = 1;
            }
            else {
                gv_novaReCloaksTransmissionCycleGhost = gv_novaReCloaksTransmissionCycleGhost + 1;
            }
            auto865322CA_val = gv_novaReCloaksTransmissionCycleGhost;
            if (auto865322CA_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00140", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto865322CA_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00131", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto865322CA_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else if ((UnitGetType(lv_speaker) == "Separatist")) {
            if (gv_novaReCloaksTransmissionCycleTrooper >= 7) {
                gv_novaReCloaksTransmissionCycleTrooper = 1;
            }
            else {
                gv_novaReCloaksTransmissionCycleTrooper = gv_novaReCloaksTransmissionCycleTrooper + 1;
            }
            auto063A660F_val = gv_novaReCloaksTransmissionCycleTrooper;
            if (auto063A660F_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00128", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto063A660F_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00137", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto063A660F_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova07|Line00138", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto063A660F_val == 4) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00139", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto063A660F_val == 5) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00140", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto063A660F_val == 6) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00141", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto063A660F_val == 7) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00142", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaReCloaksTransmissionQ_Init () {
    gt_NovaReCloaksTransmissionQ = TriggerCreate("gt_NovaReCloaksTransmissionQ_Func");
    TriggerEnable(gt_NovaReCloaksTransmissionQ, false);
    TriggerAddEventTimePeriodic(gt_NovaReCloaksTransmissionQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientists Get Scurred
//--------------------------------------------------------------------------------------------------
bool gt_ScientistsGetScurred_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scientistGroupPassedOverCount;
    unit lv_scientistUnitIter;

    // Automatic Variable Declarations
    unitgroup autoD272B6B6_g;
    int autoD272B6B6_u;
    unitgroup auto0D4CDB03_g;
    int auto0D4CDB03_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD272B6B6_g = gv_scientistsGroup;
    autoD272B6B6_u = UnitGroupCount(autoD272B6B6_g, c_unitCountAll);
    for (;; autoD272B6B6_u -= 1) {
        lv_scientistUnitIter = UnitGroupUnitFromEnd(autoD272B6B6_g, autoD272B6B6_u);
        if (lv_scientistUnitIter == null) { break; }
        if ((UnitIsAlive(lv_scientistUnitIter) == true) && (UnitHasBehavior2(lv_scientistUnitIter, "ScientistScared") == false) && (libNtve_gf_UnitIsVisibleToPlayer(lv_scientistUnitIter, gv_pLAYER_01_USER) == true) && (((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_scientistUnitIter), 12.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) || ((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_04_DEFENDERS) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionCircle(UnitGetPosition(lv_scientistUnitIter), 12.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) || ((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_05_DEFENDERS) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_05_DEFENDERS, RegionCircle(UnitGetPosition(lv_scientistUnitIter), 12.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)))) {
            UnitBehaviorAdd(lv_scientistUnitIter, "ScientistScared", lv_scientistUnitIter, 1);
            Wait(RandomFixed(0.0, 0.125), c_timeGame);
        }

    }
    auto0D4CDB03_g = gv_scientistsGroup;
    auto0D4CDB03_u = UnitGroupCount(auto0D4CDB03_g, c_unitCountAll);
    for (;; auto0D4CDB03_u -= 1) {
        lv_scientistUnitIter = UnitGroupUnitFromEnd(auto0D4CDB03_g, auto0D4CDB03_u);
        if (lv_scientistUnitIter == null) { break; }
        if (((UnitIsAlive(lv_scientistUnitIter) == false) || (UnitHasBehavior2(lv_scientistUnitIter, "Scared") == true))) {
            lv_scientistGroupPassedOverCount += 1;
        }

    }
    if ((UnitGroupCount(gv_scientistsGroup, c_unitCountAlive) == lv_scientistGroupPassedOverCount)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScientistsGetScurred_Init () {
    gt_ScientistsGetScurred = TriggerCreate("gt_ScientistsGetScurred_Func");
    TriggerAddEventTimePeriodic(gt_ScientistsGetScurred, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Unit Crosses Trip Wire Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitCrossesTripWireQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;
    region lv_triggeringUnitDefendRegion;
    point lv_triggeringUnitPoint;
    unitgroup lv_nearbyEnemies;
    int lv_tripWireResponsePlayer;

    // Automatic Variable Declarations
    unitgroup autoE0D1A855_g;
    int autoE0D1A855_u;
    unit autoE0D1A855_var;
    string auto83D20D0E_val;
    int auto00D05ECE_val;
    int autoE9C6ADD4_val;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_triggeringUnitPoint = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_nearbyEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_StealthAIIsUnitInStealthAIEnemyUnitGroup(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(66)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(59)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(73)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(105)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(113)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(106)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(9)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(72)) == true))) {
        lv_tripWireResponsePlayer = gv_pLAYER_04_DEFENDERS;
    }
    else {
        lv_tripWireResponsePlayer = gv_pLAYER_05_DEFENDERS;
    }
    autoE0D1A855_g = UnitGroup(null, lv_tripWireResponsePlayer, RegionCircle(lv_triggeringUnitPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    autoE0D1A855_u = UnitGroupCount(autoE0D1A855_g, c_unitCountAll);
    for (;; autoE0D1A855_u -= 1) {
        autoE0D1A855_var = UnitGroupUnitFromEnd(autoE0D1A855_g, autoE0D1A855_u);
        if (autoE0D1A855_var == null) { break; }
        if ((libNCMI_gf_StealthAIGetStealthAIUnitState(autoE0D1A855_var) == libNCMI_ge_StealthAIUnitState_Idle) && (libNCMI_gf_StealthAIGetStealthAIGhostJob(autoE0D1A855_var) == libNCMI_ge_StealthAIGhostJob_Floating)) {
            UnitGroupAdd(lv_nearbyEnemies, autoE0D1A855_var);
        }

    }
    if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
        libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_nearbyEnemies, lv_triggeringUnitPoint);
        if ((TimerGetRemaining(gv_tripWire_FriendlyTrip_TransmissionTimer) == 0) && (libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false) && (UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_nearbyEnemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
            TriggerQueueEnter();
            if ((TimerGetRemaining(lv_talkTimer) > 0.0) && (DistanceBetweenPoints(CameraGetTarget(gv_pLAYER_01_USER), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilter("Separatist", c_playerAny, lv_nearbyEnemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))))) <= 12.0)) {
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
                auto83D20D0E_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
                if (auto83D20D0E_val == "Thor") {
                    if ((UnitGroupCount(UnitGroupFilter("Separatist", c_playerAny, lv_nearbyEnemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                        TimerStart(gv_tripWire_FriendlyTrip_TransmissionTimer, gv_tripWire_FriendlyTrip_TransmissionCooldown, false, c_timeGame);
                        libNCMI_gf_SendTransmissionCampaign(UnitGroupClosestToPoint(UnitGroupFilter("Separatist", c_playerAny, lv_nearbyEnemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))), "Mission_Nova07|Line00037", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    }

                }
                else if (auto83D20D0E_val == "Separatist") {
                    TimerStart(gv_tripWire_FriendlyTrip_TransmissionTimer, gv_tripWire_FriendlyTrip_TransmissionCooldown, false, c_timeGame);
                    if (gv_tripWire_FriendlyTrip_TransmissionIter_Trooper >= 3) {
                        gv_tripWire_FriendlyTrip_TransmissionIter_Trooper = 1;
                    }
                    else {
                        gv_tripWire_FriendlyTrip_TransmissionIter_Trooper = gv_tripWire_FriendlyTrip_TransmissionIter_Trooper + 1;
                    }
                    autoE9C6ADD4_val = gv_tripWire_FriendlyTrip_TransmissionIter_Trooper;
                    if (autoE9C6ADD4_val == 1) {
                        libNCMI_gf_SendTransmissionCampaign(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Mission_Nova07|Line00038", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    }
                    else if (autoE9C6ADD4_val == 2) {
                        libNCMI_gf_SendTransmissionCampaign(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Mission_Nova07|Line00039", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    }
                    else if (autoE9C6ADD4_val == 3) {
                        libNCMI_gf_SendTransmissionCampaign(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Mission_Nova07|Line00040", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    }
                    else {
                    }
                }
                else {
                    if ((UnitGroupCount(UnitGroupFilter("Separatist", c_playerAny, lv_nearbyEnemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                        TimerStart(gv_tripWire_FriendlyTrip_TransmissionTimer, gv_tripWire_FriendlyTrip_TransmissionCooldown, false, c_timeGame);
                        if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) == gv_s1_TripWire_Critter)) {
                            if ((UnitGetCustomValue(gv_s1_TripWire_Critter, 0) == 0.0)) {
                                UnitSetCustomValue(gv_s1_TripWire_Critter, 0, 1.0);
                                libNCMI_gf_SendTransmissionCampaign(UnitGroupClosestToPoint(UnitGroup("Separatist", gv_pLAYER_05_DEFENDERS, RegionFromId(120), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(493020495)), "Mission_Nova07|Line00034", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                                libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup(gv_s1_TripWire_Critter);
                            }

                        }
                        else {
                            if (gv_tripWire_FriendlyTrip_TransmissionIter_Generic >= 2) {
                                gv_tripWire_FriendlyTrip_TransmissionIter_Generic = 1;
                            }
                            else {
                                gv_tripWire_FriendlyTrip_TransmissionIter_Generic = gv_tripWire_FriendlyTrip_TransmissionIter_Generic + 1;
                            }
                            auto00D05ECE_val = gv_tripWire_FriendlyTrip_TransmissionIter_Generic;
                            if (auto00D05ECE_val == 1) {
                                libNCMI_gf_SendTransmissionCampaign(UnitGroupClosestToPoint(UnitGroupFilter("Separatist", c_playerAny, lv_nearbyEnemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))), "Mission_Nova07|Line00101", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                            }
                            else if (auto00D05ECE_val == 2) {
                                libNCMI_gf_SendTransmissionCampaign(UnitGroupClosestToPoint(UnitGroupFilter("Separatist", c_playerAny, lv_nearbyEnemies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))), "Mission_Nova07|Line00102", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                            }
                            else {
                            }
                        }
                    }

                }
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            }

            TriggerQueueExit();
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitCrossesTripWireQ_Init () {
    gt_PlayerUnitCrossesTripWireQ = TriggerCreate("gt_PlayerUnitCrossesTripWireQ_Func");
    TriggerAddEventPlayerEffectUsed(gt_PlayerUnitCrossesTripWireQ, c_playerAny, "NovaCreateTripWireSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undominated Scientist Crosses Trip Wire
//--------------------------------------------------------------------------------------------------
bool gt_UndominatedScientistCrossesTripWire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto45FF7DA1_at;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "NovaDomination") == false))) {
            return false;
        }

        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "Scientist") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "DOMScientist") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "ScientistOfficer")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto45FF7DA1_at = 0;
    while (!((UnitTestState(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitStateStunned) == false)) && auto45FF7DA1_at <= 5.0) {
        Wait(0.0625, c_timeGame);
        auto45FF7DA1_at = auto45FF7DA1_at + 0.0625;
    }
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 1.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndominatedScientistCrossesTripWire_Init () {
    gt_UndominatedScientistCrossesTripWire = TriggerCreate("gt_UndominatedScientistCrossesTripWire_Func");
    TriggerAddEventPlayerEffectUsed(gt_UndominatedScientistCrossesTripWire, c_playerAny, "NovaCreateTripWireSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Is Dominated
//--------------------------------------------------------------------------------------------------
bool gt_UnitIsDominated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_stone))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statDominationsCount += 1;
    gv_dominatedBuddyUnit = EventUnit();
    libNCMI_gf_StealthAISetStealthAIUnitState(EventUnit(), libNCMI_ge_StealthAIUnitState_Unavailable);
    UnitBehaviorAdd(EventUnit(), "Harmless", gv_nova, 1);
    UnitAbilityEnable(EventUnit(), "NovaAlarmBotToggleDetectionVisionMode", false);
    UnitAbilityShow(EventUnit(), "NovaAlarmBotToggleDetectionVisionMode", false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && ((UnitGetType(EventUnit()) == "Ghost") || (UnitGetType(EventUnit()) == "GhostAlternate") || (UnitGetType(EventUnit()) == "GhostDetectorCone") || (UnitGetType(EventUnit()) == "GhostAlternateDetectorCone"))) {
        UnitBehaviorRemove(EventUnit(), "PersonalCloakingFree", 1);
    }

    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(EventUnit()) == true) && ((UnitGetType(EventUnit()) == "GhostDetectorCone") || (UnitGetType(EventUnit()) == "GhostAlternateDetectorCone"))) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("GhostDetetorConeExit", 0)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("GhostAlternateDetetorConeExit", 0)), c_orderQueueReplace);
        UnitAbilityEnable(EventUnit(), "GhostDetetorConeEnter", false);
        UnitAbilityEnable(EventUnit(), "GhostAlternateDetetorConeEnter", false);
        UnitAbilityShow(EventUnit(), "GhostDetetorConeEnter", false);
        UnitAbilityShow(EventUnit(), "GhostAlternateDetetorConeEnter", false);
        UnitBehaviorRemove(EventUnit(), "DetectorCone9", 1);
        Wait(0.0625, c_timeAI);
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    while (!(((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(EventUnit()) == false) || (UnitHasBehavior2(EventUnit(), "NovaDomination") == false)))) {
        Wait(0.25, c_timeGame);
    }
    UISetButtonFaceHighlighted(PlayerGroupAll(), "NovaDomination", false);
    if ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("GhostCloak", 1)), c_orderQueueReplace);
        UnitAbilityEnable(EventUnit(), "GhostDetetorConeEnter", true);
        UnitAbilityEnable(EventUnit(), "GhostAlternateDetetorConeEnter", true);
        UnitAbilityEnable(EventUnit(), "NovaAlarmBotToggleDetectionVisionMode", true);
        UnitAbilityShow(EventUnit(), "GhostDetetorConeEnter", true);
        UnitAbilityShow(EventUnit(), "GhostAlternateDetetorConeEnter", true);
        UnitAbilityShow(EventUnit(), "NovaAlarmBotToggleDetectionVisionMode", true);
        libNCMI_gf_StealthAISetStealthAIUnitState(EventUnit(), libNCMI_ge_StealthAIUnitState_Reacting);
        libNCMI_gf_StealthAIRemoveUnitStealthAIEnemyUnitGroup(EventUnit());
        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(2)) == true) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && ((UnitGetType(EventUnit()) == "Ghost") || (UnitGetType(EventUnit()) == "GhostAlternate") || (UnitGetType(EventUnit()) == "GhostDetectorCone") || (UnitGetType(EventUnit()) == "GhostAlternateDetectorCone"))) {
            UnitBehaviorAdd(EventUnit(), "PersonalCloakingFree", EventUnit(), 1);
        }

        if ((UnitGetType(EventUnit()) == "Separatist")) {
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimGroupApply Work");
        }

        Wait(2.0, c_timeGame);
        libNCMI_gf_StealthAISetStealthAIUnitState(EventUnit(), libNCMI_ge_StealthAIUnitState_Idle);
        if ((UnitGetType(EventUnit()) == "Separatist") && (UnitIsAlive(EventUnit()) == true)) {
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimGroupRemove Work");
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitIsDominated_Init () {
    gt_UnitIsDominated = TriggerCreate("gt_UnitIsDominated_Func");
    TriggerAddEventUnitBehaviorChange(gt_UnitIsDominated, null, "NovaDomination", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominated Unit Attacks
//--------------------------------------------------------------------------------------------------
bool gt_DominatedUnitAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitTarget(), "NovaDomination") == true))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnitTarget(), gv_cUSTOMVALUEINDEX_DOMINATEDUNIT) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(EventUnitTarget()) == true) && (UnitGetCustomValue(EventUnitTarget(), gv_cUSTOMVALUEINDEX_DOMINATEDUNIT) == 0.0)) {
        TriggerExecute(gt_DominatedUnitGoesHostileToDOM, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominatedUnitAttacks_Init () {
    gt_DominatedUnitAttacks = TriggerCreate("gt_DominatedUnitAttacks_Func");
    TriggerAddEventUnitAttacked2(gt_DominatedUnitAttacks, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominated Unit Given Attack Order
//--------------------------------------------------------------------------------------------------
bool gt_DominatedUnitGivenAttackOrder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NovaDomination") == true))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), gv_cUSTOMVALUEINDEX_DOMINATEDUNIT) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true) && (UnitGetCustomValue(EventUnit(), gv_cUSTOMVALUEINDEX_DOMINATEDUNIT) == 0.0)) {
        TriggerExecute(gt_DominatedUnitGoesHostileToDOM, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominatedUnitGivenAttackOrder_Init () {
    gt_DominatedUnitGivenAttackOrder = TriggerCreate("gt_DominatedUnitGivenAttackOrder_Func");
    TriggerAddEventUnitOrder(gt_DominatedUnitGivenAttackOrder, null, AbilityCommand("attack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominated Unit Uses Ability
//--------------------------------------------------------------------------------------------------
bool gt_DominatedUnitUsesAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NovaDomination") == true))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), gv_cUSTOMVALUEINDEX_DOMINATEDUNIT) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true) && (UnitGetCustomValue(EventUnit(), gv_cUSTOMVALUEINDEX_DOMINATEDUNIT) == 0.0)) {
        TriggerExecute(gt_DominatedUnitGoesHostileToDOM, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominatedUnitUsesAbility_Init () {
    gt_DominatedUnitUsesAbility = TriggerCreate("gt_DominatedUnitUsesAbility_Func");
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("BuildAutoTurret", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("SeekerMissile", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("PlacePointDefenseDrone", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("DOMSnipe", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("Snipe", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("DOMEMP", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("EMP", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("GhostCloak", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("NovaAlarmBotEMP", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("SonarDroneEMP", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("Blink", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DominatedUnitUsesAbility, null, AbilityCommand("LockOn", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Attacked While Having Harmless Dominated Buddy
//--------------------------------------------------------------------------------------------------
bool gt_NovaAttackedWhileHavingHarmlessDominatedBuddy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_dominatedBuddyUnit != null))) {
            return false;
        }

        if (!((UnitGetOwner(gv_dominatedBuddyUnit) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DominatedUnitGoesHostileToDOM, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaAttackedWhileHavingHarmlessDominatedBuddy_Init () {
    gt_NovaAttackedWhileHavingHarmlessDominatedBuddy = TriggerCreate("gt_NovaAttackedWhileHavingHarmlessDominatedBuddy_Func");
    TriggerAddEventUnitAttacked2(gt_NovaAttackedWhileHavingHarmlessDominatedBuddy, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominated Unit Goes Hostile To DOM
//--------------------------------------------------------------------------------------------------
bool gt_DominatedUnitGoesHostileToDOM_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetCustomValue(gv_dominatedBuddyUnit, gv_cUSTOMVALUEINDEX_DOMINATEDUNIT) == 0.0))) {
            return false;
        }

        if (!((UnitGetType(gv_dominatedBuddyUnit) != "Scientist"))) {
            return false;
        }

        if (!((UnitGetType(gv_dominatedBuddyUnit) != "DOMScientist"))) {
            return false;
        }

        if (!((UnitGetType(gv_dominatedBuddyUnit) != "ScientistOfficer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_dominatedBuddyUnit, 1));
    libNtve_gf_AttachModelToUnitInheritVisibility(gv_dominatedBuddyUnit, "BeaconAttack", "Ref_Origin");
    libHots_gf_StoreActorForUnit(gv_dominatedBuddyUnit, 1, libNtve_gf_ActorLastCreated());
    UnitSetCustomValue(gv_dominatedBuddyUnit, gv_cUSTOMVALUEINDEX_DOMINATEDUNIT, 1.0);
    UnitBehaviorRemove(gv_dominatedBuddyUnit, "Harmless", 1);
    libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup(gv_dominatedBuddyUnit);
    while (!((UnitTestState(gv_dominatedBuddyUnit, c_unitStateCloaked) == false) && ((libNCMI_gf_GameIsOver() == true) || (UnitHasBehavior2(gv_dominatedBuddyUnit, "NovaDomination") == false) || (libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false)))) {
        Wait(0.0625, c_timeAI);
    }
    if ((UnitHasBehavior2(gv_dominatedBuddyUnit, "NovaDomination") == true)) {
        Wait(3.0, c_timeGame);
    }

    if ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_dominatedBuddyUnit) == true)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_dominatedBuddyUnit, 1));
        libNCMI_gf_StealthAIRemoveUnitStealthAIEnemyUnitGroup(gv_dominatedBuddyUnit);
        UnitSetCustomValue(gv_dominatedBuddyUnit, gv_cUSTOMVALUEINDEX_DOMINATEDUNIT, 0.0);
        UnitBehaviorAdd(gv_dominatedBuddyUnit, "Harmless", gv_nova, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominatedUnitGoesHostileToDOM_Init () {
    gt_DominatedUnitGoesHostileToDOM = TriggerCreate("gt_DominatedUnitGoesHostileToDOM_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holo Decoy Is Created
//--------------------------------------------------------------------------------------------------
bool gt_HoloDecoyIsCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "NovaHoloDecoy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup(EventUnitCreatedUnit());
    UnitGroupAdd(gv_holoDecoyUnits, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoloDecoyIsCreated_Init () {
    gt_HoloDecoyIsCreated = TriggerCreate("gt_HoloDecoyIsCreated_Func");
    TriggerAddEventUnitCreated(gt_HoloDecoyIsCreated, UnitRefFromVariable("gv_nova"), null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_StartGameCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UnitBehaviorAdd(gv_nova, "WalkSlow", gv_nova, 1);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1689566583)), c_orderQueueReplace);
    libNCMI_gf_CinematicModeCampaign(true, 0.0625, true);
    libNCMI_gf_CinematicModeCampaign(false, 1.5, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    CameraSetData(PlayerGroupAll(), "Dflt2");
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (CameraInfoGetValue(CameraInfoFromId(1995034044), c_cameraValueDistance) + 8.0), CameraInfoGetValue(CameraInfoFromId(1995034044), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), 1.5);
    gv_currentStage = 1;
    UnitSelect(gv_nova, gv_pLAYER_01_USER, true);
    RegionPlayableMapSet(RegionFromId(1));
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    SoundSetReverbForPlayers(PlayerGroupAll(), "Reverb_Nova07", 1.0, true, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_mapStage = 1;
    TriggerExecute(gt_StartAI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameCleanup_Init () {
    gt_StartGameCleanup = TriggerCreate("gt_StartGameCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game 01 - Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGame01IntroQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sensorDroneUnits;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E1252EB6"), null, UnitGetPosition(gv_nova));
    TimerStart(gv_achievementMasteryTimer, gv_achievementMasteryTime, false, c_timeGame);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(64), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(100), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(65), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(66), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(59), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(69), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(138), libNCMI_ge_StealthAIDefendRegionState_Active);
    Wait(0.5, c_timeReal);
    UnitBehaviorRemove(gv_nova, "WalkSlow", 1);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveInfiltrateTheFacilityCreate, true, true);
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, true);
    libNtve_gf_ShowHideUnit(gv_s1_FacilityEntrance, true);
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(1448970569)), StringExternal("Param/Value/240CBFA8"));
    libHots_gf_StorePingForUnit(UnitFromId(1448970569), 1, PingLastCreated());
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_StartGameTeachingHoldFire, true, false);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(70)) == true)) {
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00003", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00009", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_startGameTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        if ((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(70)) == true)) {
            libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00010", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_startGameTransmission = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
        }

    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame01IntroQ_Init () {
    gt_StartGame01IntroQ = TriggerCreate("gt_StartGame01IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game 02 - Main Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGame02MainQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sensorDroneUnits;

    // Automatic Variable Declarations
    unitgroup auto05D910E8_g;
    int auto05D910E8_u;
    unit auto05D910E8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/36C4442B"));
    TimerStart(gv_autoSaveTimer, gv_autoSaveTimerCooldown, false, c_timeGame);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/49BD262C"), null, UnitGetPosition(gv_nova));
    SoundPlayOnUnitForPlayer(SoundLink("Emitter_Nova07_CrowdSmallCheering", -1), c_maxPlayers, PlayerGroupAll(), UnitFromId(537678267), 0.0, 100.0, 0.0);
    gv_civilian_Cheers_01 = SoundLastPlayed();
    SoundPlayOnUnitForPlayer(SoundLink("Emitter_Nova07_CrowdSmallDiscussion", -1), c_maxPlayers, PlayerGroupAll(), UnitFromId(851297348), 0.0, 100.0, 0.0);
    gv_civilian_Cheers_02 = SoundLastPlayed();
    SoundPlayOnUnitForPlayer(SoundLink("Emitter_Nova07_CrowdJeers_01", -1), c_maxPlayers, PlayerGroupAll(), UnitFromId(1098427410), 0.0, 100.0, 0.0);
    gv_civilian_Cheers_03 = SoundLastPlayed();
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(61), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(60), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(24), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(38), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(75), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(87), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(73), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(127), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(79), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(80), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(81), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(152), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(101), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(105), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(113), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(106), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(115), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(9), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(68), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(71), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(72), libNCMI_ge_StealthAIDefendRegionState_Active);
    gf_S2HandleScientistRespawn(UnitFromId(1935130023), PointFromId(1425797233));
    gf_S2HandleScientistRespawn(UnitFromId(1942077880), PointFromId(1425797233));
    gf_S2HandleScientistRespawn(UnitFromId(988977763), PointFromId(1425797233));
    gf_S2HandleScientistRespawn(UnitFromId(475239654), PointFromId(1425797233));
    gf_S2HandleScientistRespawn(UnitFromId(160764304), PointFromId(343892335));
    gf_S2HandleScientistRespawn(UnitFromId(2130800919), PointFromId(343892335));
    gf_S2HandleScientistRespawn(UnitFromId(1452490751), PointFromId(343892335));
    gf_S2HandleScientistRespawn(UnitFromId(1755263121), PointFromId(343892335));
    auto05D910E8_g = gv_s2_TargetPracticeGuys;
    auto05D910E8_u = UnitGroupCount(auto05D910E8_g, c_unitCountAll);
    for (;; auto05D910E8_u -= 1) {
        auto05D910E8_var = UnitGroupUnitFromEnd(auto05D910E8_g, auto05D910E8_u);
        if (auto05D910E8_var == null) { break; }
        libNCMI_gf_StealthAISetStealthAIUnitState(auto05D910E8_var, libNCMI_ge_StealthAIUnitState_Unavailable);
        UnitIssueOrder(auto05D910E8_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1259633150)), c_orderQueueReplace);
    }
    UnitIssueOrder(UnitFromId(1449459379), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(139116447)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(UnitFromId(1394879743), true);
    libNtve_gf_PauseUnit(UnitFromId(583675857), true);
    libNtve_gf_PauseUnit(UnitFromId(1659311099), true);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveUnlockDoorToDavisCreate, true, false);
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, true);
    ObjectiveShow(gv_objectiveDestroyZergBase, PlayerGroupAll(), true);
    ObjectiveSetLast(gv_objectiveDestroyZergBase);
    libNCMI_gf_CreateObjectivePing(true, PointFromId(1976367658), StringExternal("Param/Value/3DC4E8DA"));
    libHots_gf_StorePingForUnit(UnitFromId(676453319), 1, PingLastCreated());
    Wait(0.25, c_timeGame);
    libNCMI_gf_CreateObjectivePing(true, PointFromId(1414274923), StringExternal("Param/Value/436248BB"));
    libHots_gf_StorePingForUnit(UnitFromId(1961113430), 1, PingLastCreated());
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00019", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00020", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    Wait(8.0, c_timeGame);
    TriggerExecute(gt_S2IntroduceBonusObjectivesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame02MainQ_Init () {
    gt_StartGame02MainQ = TriggerCreate("gt_StartGame02MainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game 03 - Stone Fight Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGame03StoneFightQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sensorDroneUnits;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/AC892487"), null, UnitGetPosition(gv_nova));
    UnitGroupAdd(gv_s3_PlayerUnitGroup, gv_nova);
    TriggerExecute(gt_S3StoneAI, true, false);
    TriggerExecute(gt_S3TurnOnAlarmBotPatrols, true, false);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(131), gv_pLAYER_04_DEFENDERS);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(131), libNCMI_ge_StealthAIDefendRegionState_Active);
    if ((gv_dominatedBuddyUnit != null) && (UnitIsAlive(gv_dominatedBuddyUnit) == true)) {
        UnitGroupAdd(gv_s3_PlayerUnitGroup, gv_dominatedBuddyUnit);
    }

    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDefeatStoneCreate, true, false);
    TriggerExecute(gt_ObjectiveArrestGeneralDavisCreate, true, false);
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, true);
    ObjectiveShow(gv_objectiveDestroyZergBase7, PlayerGroupAll(), true);
    ObjectiveSetLast(gv_objectiveDestroyZergBase7);
    ObjectiveShow(gv_objectiveDestroyZergBase, PlayerGroupAll(), true);
    ObjectiveSetLast(gv_objectiveDestroyZergBase);
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_stone), StringExternal("Param/Value/C770A345"));
    PingSetUnit(PingLastCreated(), gv_stone);
    libHots_gf_StorePingForUnit(gv_stone, 1, PingLastCreated());
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00120", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00121", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(15.0, c_timeReal);
    TriggerExecute(gt_S3StoneConversationTransmissionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame03StoneFightQ_Init () {
    gt_StartGame03StoneFightQ = TriggerCreate("gt_StartGame03StoneFightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Teaching Hold Fire
//--------------------------------------------------------------------------------------------------
bool gt_StartGameTeachingHoldFire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCUI_gf_DisplayCampaignDirective(StringExternal("Param/Value/4F532449"));
    UISetButtonFaceHighlighted(PlayerGroupAll(), "GhostHoldFire", true);
    while (!(((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(150)) == false) || (gv_holdFireActivated == true)))) {
        Wait(1.0, c_timeGame);
    }
    libNCUI_gf_HideCampaignDirective();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "GhostHoldFire", false);
    TriggerEnable(gt_MonitorHoldFireActivation, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameTeachingHoldFire_Init () {
    gt_StartGameTeachingHoldFire = TriggerCreate("gt_StartGameTeachingHoldFire_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Hold Fire Activation
//--------------------------------------------------------------------------------------------------
bool gt_MonitorHoldFireActivation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_holdFireActivated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorHoldFireActivation_Init () {
    gt_MonitorHoldFireActivation = TriggerCreate("gt_MonitorHoldFireActivation_Func");
    TriggerAddEventButtonPressed(gt_MonitorHoldFireActivation, c_playerAny, "GhostHoldFire");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Stage 02 Ambiences
//--------------------------------------------------------------------------------------------------
bool gt_SetupStage02Ambiences_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    gv_ambienceRegion_Facility_Outside = RegionFromId(86);
    ActorRegionCreate(null, "Nova07AmbientSoundRegionOutside", gv_ambienceRegion_Facility_Outside);
    gv_ambienceActor_Facility_Outside = libNtve_gf_ActorLastCreated();
    gv_ambienceRegion_Facility_Inside = RegionFromId(91);
    ActorRegionCreate(null, "Nova07AmbientSoundRegionInside", gv_ambienceRegion_Facility_Inside);
    gv_ambienceActor_Facility_Inside = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupStage02Ambiences_Init () {
    gt_SetupStage02Ambiences = TriggerCreate("gt_SetupStage02Ambiences_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Fires Plasma Shot
//--------------------------------------------------------------------------------------------------
bool gt_NovaFiresPlasmaShot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "NovaPlasmaPuddleLarge") || (UnitGetType(EventUnitCreatedUnit()) == "NovaPlasmaPuddleSmall") || (UnitGetType(EventUnitCreatedUnit()) == "NovaPlasmaPuddle") || (UnitGetType(EventUnitCreatedUnit()) == "NovaWeaponPlasmaBlastNewLaunchMissile")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_plasmaPuddleUnitGroup, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaFiresPlasmaShot_Init () {
    gt_NovaFiresPlasmaShot = TriggerCreate("gt_NovaFiresPlasmaShot_Func");
    TriggerAddEventUnitCreated(gt_NovaFiresPlasmaShot, UnitRefFromVariable("gv_nova"), "NovaWeaponPlasmaBlastNew", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Plasma Puddle/Shot If In Unpathable
//--------------------------------------------------------------------------------------------------
bool gt_DestroyPlasmaPuddleShotIfInUnpathable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto55E94B5C_g;
    int auto55E94B5C_u;
    unit auto55E94B5C_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto55E94B5C_g = gv_plasmaPuddleUnitGroup;
    auto55E94B5C_u = UnitGroupCount(auto55E94B5C_g, c_unitCountAll);
    for (;; auto55E94B5C_u -= 1) {
        auto55E94B5C_var = UnitGroupUnitFromEnd(auto55E94B5C_g, auto55E94B5C_u);
        if (auto55E94B5C_var == null) { break; }
        if (((CliffLevel(UnitGetPosition(auto55E94B5C_var)) > 2) || (PathingType(UnitGetPosition(auto55E94B5C_var)) == c_pathingBuilding))) {
            UnitRemove(auto55E94B5C_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyPlasmaPuddleShotIfInUnpathable_Init () {
    gt_DestroyPlasmaPuddleShotIfInUnpathable = TriggerCreate("gt_DestroyPlasmaPuddleShotIfInUnpathable_Func");
    TriggerAddEventTimePeriodic(gt_DestroyPlasmaPuddleShotIfInUnpathable, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Set Sewer Reverb on Load
//--------------------------------------------------------------------------------------------------
bool gt_S1SetSewerReverbonLoad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_mapStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundSetReverbForPlayers(PlayerGroupAll(), "Reverb_Nova07", 1.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1SetSewerReverbonLoad_Init () {
    gt_S1SetSewerReverbonLoad = TriggerCreate("gt_S1SetSewerReverbonLoad_Func");
    TriggerAddEventLoadGameDone(gt_S1SetSewerReverbonLoad);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Nova Enters Dead End Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S1NovaEntersDeadEndTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/540F3CB3"), null, RegionGetCenter(RegionFromId(15)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(15)), 4.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00021", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1NovaEntersDeadEndTransmissionQ_Init () {
    gt_S1NovaEntersDeadEndTransmissionQ = TriggerCreate("gt_S1NovaEntersDeadEndTransmissionQ_Func");
    TriggerAddEventTimePeriodic(gt_S1NovaEntersDeadEndTransmissionQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Combat In Defend Regions Controller
//--------------------------------------------------------------------------------------------------
bool gt_S1CombatInDefendRegionsController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_04_DEFENDERS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_DEFENDERS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_06_DEFENDERS_TRIPWIRES)))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(64)) == true)) {
        TriggerExecute(gt_S1CombatInInitialEncounter, true, false);
    }
    else if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(133)) == true)) {
        TriggerExecute(gt_S1CombatInMarauderGank, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1CombatInDefendRegionsController_Init () {
    gt_S1CombatInDefendRegionsController = TriggerCreate("gt_S1CombatInDefendRegionsController_Func");
    TriggerAddEventUnitAttacked2(gt_S1CombatInDefendRegionsController, null, null);
    TriggerAddEventUnitDamaged(gt_S1CombatInDefendRegionsController, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitStartedAttack2(gt_S1CombatInDefendRegionsController, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Combat In Initial Encounter
//--------------------------------------------------------------------------------------------------
bool gt_S1CombatInInitialEncounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_advancingGroup;

    // Automatic Variable Declarations
    unitgroup auto110D9D1C_g;
    int auto110D9D1C_u;
    unit auto110D9D1C_var;
    unitgroup auto9E5D4CD5_g;
    int auto9E5D4CD5_u;
    unit auto9E5D4CD5_var;

    // Variable Initialization
    lv_advancingGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupRemove Unpowered", "AlarmLight", RegionFromId(64));
    TriggerExecute(gt_S1CombatInInitialEncounterTransmissionQ, true, false);
    UnitIssueOrder(UnitFromId(868981264), Order(AbilityCommand("CompoundSewers_Door_Thin_NWLowered", 0)), c_orderQueueReplace);
    auto110D9D1C_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(117), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto110D9D1C_u = UnitGroupCount(auto110D9D1C_g, c_unitCountAll);
    for (;; auto110D9D1C_u -= 1) {
        auto110D9D1C_var = UnitGroupUnitFromEnd(auto110D9D1C_g, auto110D9D1C_u);
        if (auto110D9D1C_var == null) { break; }
        UnitGroupAdd(lv_advancingGroup, auto110D9D1C_var);
        Wait(RandomFixed(0.1, 0.5), c_timeGame);
    }
    Wait(libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 2.0, 0.0), c_timeGame);
    auto9E5D4CD5_g = lv_advancingGroup;
    auto9E5D4CD5_u = UnitGroupCount(auto9E5D4CD5_g, c_unitCountAll);
    for (;; auto9E5D4CD5_u -= 1) {
        auto9E5D4CD5_var = UnitGroupUnitFromEnd(auto9E5D4CD5_g, auto9E5D4CD5_u);
        if (auto9E5D4CD5_var == null) { break; }
        libNtve_gf_PauseUnit(auto9E5D4CD5_var, false);
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(64), auto9E5D4CD5_var, libNtve_gf_PointFacingAngle(gf_RandomPointinRegionSharedbyGroup(RegionFromId(116), UnitGroupEmpty()), 315.0));
        if (((UnitGetType(auto9E5D4CD5_var) == "GhostAlternate") || (UnitGetType(auto9E5D4CD5_var) == "Ghost"))) {
            UnitIssueOrder(auto9E5D4CD5_var, Order(AbilityCommand("GhostAlternateDetetorConeEnter", 0)), c_orderQueueAddToEnd);
            UnitIssueOrder(auto9E5D4CD5_var, Order(AbilityCommand("GhostDetetorConeEnter", 0)), c_orderQueueAddToEnd);
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
                UnitIssueOrder(auto9E5D4CD5_var, Order(AbilityCommand("DOMGhostPersonalDefensiveMatrix", 0)), c_orderQueueReplace);
            }

        }

        Wait(RandomFixed(0.1, 0.5), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1CombatInInitialEncounter_Init () {
    gt_S1CombatInInitialEncounter = TriggerCreate("gt_S1CombatInInitialEncounter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Combat In Initial Encounter Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S1CombatInInitialEncounterTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("Separatist", gv_pLAYER_04_DEFENDERS, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupClosestToPoint(UnitGroup("Separatist", gv_pLAYER_04_DEFENDERS, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(RegionFromId(64))), "Mission_Nova07|Line00099", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1CombatInInitialEncounterTransmissionQ_Init () {
    gt_S1CombatInInitialEncounterTransmissionQ = TriggerCreate("gt_S1CombatInInitialEncounterTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - All Detectors Dead In Initial Encounter
//--------------------------------------------------------------------------------------------------
bool gt_S1AllDetectorsDeadInInitialEncounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE2B60B49_g;
    int autoE2B60B49_u;
    unit autoE2B60B49_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(2106086601)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1296623386)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(2139795836)) == false))) {
            return false;
        }

        if (!((UnitTestState(gv_nova, c_unitStateCloaked) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1AllDetectorsDeadInInitialEncounterTransmissionQ, true, false);
    autoE2B60B49_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE2B60B49_u = UnitGroupCount(autoE2B60B49_g, c_unitCountAll);
    for (;; autoE2B60B49_u -= 1) {
        autoE2B60B49_var = UnitGroupUnitFromEnd(autoE2B60B49_g, autoE2B60B49_u);
        if (autoE2B60B49_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(100), autoE2B60B49_var, libNtve_gf_PointFacingAngle(gf_RandomPointinRegionSharedbyGroup(RegionFromId(118), UnitGroupEmpty()), 225.0));
        Wait(RandomFixed(0.1, 0.5), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AllDetectorsDeadInInitialEncounter_Init () {
    gt_S1AllDetectorsDeadInInitialEncounter = TriggerCreate("gt_S1AllDetectorsDeadInInitialEncounter_Func");
    TriggerAddEventTimePeriodic(gt_S1AllDetectorsDeadInInitialEncounter, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - All Detectors Dead In Initial Encounter Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S1AllDetectorsDeadInInitialEncounterTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("Separatist", gv_pLAYER_04_DEFENDERS, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupClosestToPoint(UnitGroup("Separatist", gv_pLAYER_04_DEFENDERS, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(RegionFromId(64))), "Mission_Nova03|Line00078", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AllDetectorsDeadInInitialEncounterTransmissionQ_Init () {
    gt_S1AllDetectorsDeadInInitialEncounterTransmissionQ = TriggerCreate("gt_S1AllDetectorsDeadInInitialEncounterTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Nova Finds Shortcut Q
//--------------------------------------------------------------------------------------------------
bool gt_S1NovaFindsShortcutQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(94), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00022", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1NovaFindsShortcutQ_Init () {
    gt_S1NovaFindsShortcutQ = TriggerCreate("gt_S1NovaFindsShortcutQ_Func");
    TriggerAddEventTimePeriodic(gt_S1NovaFindsShortcutQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Nova Finds Shortcut From Wrong Side
//--------------------------------------------------------------------------------------------------
bool gt_S1NovaFindsShortcutFromWrongSide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(85), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1NovaFindsShortcutQ, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1NovaFindsShortcutFromWrongSide_Init () {
    gt_S1NovaFindsShortcutFromWrongSide = TriggerCreate("gt_S1NovaFindsShortcutFromWrongSide_Func");
    TriggerAddEventTimePeriodic(gt_S1NovaFindsShortcutFromWrongSide, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Reigel Detects Side Room Q
//--------------------------------------------------------------------------------------------------
bool gt_S1ReigelDetectsSideRoomQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(715084408), 2.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9FDA3D13"), null, PointFromId(715084408));
    TriggerExecute(gt_ObjectiveInvestigatePowerSignalCreate, true, false);
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(186430256)), StringExternal("Param/Value/57FDD77A"));
    libHots_gf_StorePingForUnit(UnitFromId(186430256), 1, PingLastCreated());
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00023", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ReigelDetectsSideRoomQ_Init () {
    gt_S1ReigelDetectsSideRoomQ = TriggerCreate("gt_S1ReigelDetectsSideRoomQ_Func");
    TriggerAddEventTimePeriodic(gt_S1ReigelDetectsSideRoomQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Scientist Leaves To Go Home Q
//--------------------------------------------------------------------------------------------------
bool gt_S1ScientistLeavesToGoHomeQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeAI);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(89), 12.0, true);
    UnitIssueOrder(UnitFromId(2026360167), Order(AbilityCommand("CompoundSewers_Door_Thin_NWLowered", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    if ((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == true)) {
        TriggerEnable(gt_S1Scientist2SeesNovaQ, false);
        if ((UnitHasBehavior2(UnitFromId(2092018656), "ScientistScared") == false)) {
            UnitBehaviorAdd(UnitFromId(2092018656), "ScientistScared", UnitFromId(2092018656), 1);
        }

        UnitIssueOrder(UnitFromId(2092018656), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1441500450)), c_orderQueueReplace);
        if ((UnitHasBehavior2(UnitFromId(1192155122), "ScientistScared") == false)) {
            UnitBehaviorAdd(UnitFromId(1192155122), "ScientistScared", UnitFromId(1192155122), 1);
        }

        UnitIssueOrder(UnitFromId(1192155122), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1945572160)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
        TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
        TriggerQueueEnter();
        if ((TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitIsAlive(UnitFromId(2092018656)) == true)) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(UnitFromId(2092018656), "Mission_Nova07|Line00024", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s1_VisorTransmission01 = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }

        TriggerQueueExit();
    }
    else {
        UnitIssueOrder(UnitFromId(2092018656), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(317543181)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(2092018656), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(996389302)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitFromId(2092018656), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(871889618)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
        TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
        TriggerQueueEnter();
        if ((TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitIsAlive(UnitFromId(2092018656)) == true)) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(UnitFromId(2092018656), "Mission_Nova07|Line00025", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s1_VisorTransmission01 = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }

        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ScientistLeavesToGoHomeQ_Init () {
    gt_S1ScientistLeavesToGoHomeQ = TriggerCreate("gt_S1ScientistLeavesToGoHomeQ_Func");
    TriggerAddEventTimePeriodic(gt_S1ScientistLeavesToGoHomeQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Scientist 2 Sees Nova Q
//--------------------------------------------------------------------------------------------------
bool gt_S1Scientist2SeesNovaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitTestState(gv_nova, c_unitStateCloaked) == false)) {
        UnitIssueOrder(UnitFromId(1192155122), OrderTargetingUnit(AbilityCommand("move", 4), gv_nova), c_orderQueueReplace);
        Wait(0.5, c_timeAI);
        TriggerQueueEnter();
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitIsAlive(UnitFromId(1192155122)) == true)) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(UnitFromId(1192155122), "Mission_Nova07|Line00026", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s1_VisorTransmission02 = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }

        TriggerQueueExit();
        UnitBehaviorRemovePlayer(UnitFromId(1192155122), "Harmless", gv_pLAYER_04_DEFENDERS, 1);
        UnitIssueOrder(UnitFromId(1192155122), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1537618867)), c_orderQueueReplace);
    }
    else {
        Wait(0.5, c_timeAI);
        TriggerQueueEnter();
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitIsAlive(UnitFromId(1192155122)) == true)) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(UnitFromId(1192155122), "Mission_Nova07|Line00027", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s1_VisorTransmission02 = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }

        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1Scientist2SeesNovaQ_Init () {
    gt_S1Scientist2SeesNovaQ = TriggerCreate("gt_S1Scientist2SeesNovaQ_Func");
    TriggerAddEventTimePeriodic(gt_S1Scientist2SeesNovaQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Nova Picks Up Domination Visor Q
//--------------------------------------------------------------------------------------------------
bool gt_S1NovaPicksUpDominationVisorQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(186430256), 1));
    TriggerExecute(gt_ObjectiveInvestigatePowerSignalComplete, true, false);
    libNCMI_gf_LockUnlockNovaEquipment(false, "EQPHelmetItem5");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotHelmet");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPHelmetItem5");
    TriggerEnable(gt_S1NovaSeesThorBuddyQ, true);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClear(gv_s1_VisorTransmission01);
    TransmissionClear(gv_s1_VisorTransmission02);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "NovaDomination", true);
    libNCMI_gf_AddMissionTipCampaign("Domination Visor");
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00028", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s1_VisorTransmission01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00029", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s1_VisorTransmission01 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "NovaDomination", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1NovaPicksUpDominationVisorQ_Init () {
    gt_S1NovaPicksUpDominationVisorQ = TriggerCreate("gt_S1NovaPicksUpDominationVisorQ_Func");
    TriggerAddEventUnitAbility(gt_S1NovaPicksUpDominationVisorQ, UnitRefFromUnit(UnitFromId(186430256)), AbilityCommand("PickupNovaEquipment", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Nova Sees Thor Buddy Q
//--------------------------------------------------------------------------------------------------
bool gt_S1NovaSeesThorBuddyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(119), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideUnit(gv_s1_ThorFriend, true);
    libNtve_gf_PauseUnit(gv_s1_ThorFriend, false);
    UnitBehaviorAddPlayer(gv_s1_ThorFriend, "Harmless", gv_pLAYER_04_DEFENDERS, 1);
    UnitIssueOrder(UnitFromId(203581826), Order(AbilityCommand("CompoundSewers_Door_Thin_NELowered", 0)), c_orderQueueReplace);
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(100), UnitFromId(958512770), PointFromId(1050462979));
    Wait(2.0, c_timeAI);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClear(gv_s1_VisorTransmission01);
    TransmissionClear(gv_s1_VisorTransmission02);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(gv_s1_ThorFriend) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(119), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(958512770), "Mission_Nova07|Line00030", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s1_ThorTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitIsAlive(UnitFromId(1780283857)) == true)) {
            libNCMI_gf_SendTransmissionCampaign(UnitFromId(1780283857), "Mission_Nova07|Line00031", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s1_ThorTransmission = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
        }

    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1NovaSeesThorBuddyQ_Init () {
    gt_S1NovaSeesThorBuddyQ = TriggerCreate("gt_S1NovaSeesThorBuddyQ_Func");
    TriggerEnable(gt_S1NovaSeesThorBuddyQ, false);
    TriggerAddEventTimePeriodic(gt_S1NovaSeesThorBuddyQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Thor Damaged - Remove Harmless
//--------------------------------------------------------------------------------------------------
bool gt_S1ThorDamagedRemoveHarmless_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorRemovePlayer(gv_s1_ThorFriend, "Harmless", gv_pLAYER_04_DEFENDERS, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ThorDamagedRemoveHarmless_Init () {
    gt_S1ThorDamagedRemoveHarmless = TriggerCreate("gt_S1ThorDamagedRemoveHarmless_Func");
    TriggerAddEventUnitDamaged(gt_S1ThorDamagedRemoveHarmless, UnitRefFromVariable("gv_s1_ThorFriend"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Thor Can't Proceed Q
//--------------------------------------------------------------------------------------------------
bool gt_S1ThorCantProceedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Thor", gv_pLAYER_01_USER, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00032", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ThorCantProceedQ_Init () {
    gt_S1ThorCantProceedQ = TriggerCreate("gt_S1ThorCantProceedQ_Func");
    TriggerAddEventTimePeriodic(gt_S1ThorCantProceedQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Intro Trip Wires Q
//--------------------------------------------------------------------------------------------------
bool gt_S1IntroTripWiresQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(76), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(1280085036)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6543A068"), null, UnitGetPosition(UnitFromId(1280085036)));
    libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranEnemy, libNCMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/40507853"), UnitFromId(1280085036), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(1280085036), 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(UnitFromId(1280085036), 1, TextTagLastCreated());
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClear(gv_s1_VisorTransmission01);
    TransmissionClear(gv_s1_VisorTransmission02);
    TransmissionClear(gv_s1_ThorTransmission);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00033", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_s1_TripWireTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    if ((libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotGadget") == "EQPGadgetItem4")) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00141", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s1_TripWireTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00100", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s1_TripWireTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1IntroTripWiresQ_Init () {
    gt_S1IntroTripWiresQ = TriggerCreate("gt_S1IntroTripWiresQ_Func");
    TriggerAddEventTimePeriodic(gt_S1IntroTripWiresQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Trip Wires Tripped Q
//--------------------------------------------------------------------------------------------------
bool gt_S1TripWiresTrippedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1280085036), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1280085036), 1));
    TriggerEnable(gt_S1TripWiresFlashbangedQ, false);
    TransmissionClear(gv_s1_VisorTransmission01);
    TransmissionClear(gv_s1_VisorTransmission02);
    TransmissionClear(gv_s1_ThorTransmission);
    TransmissionClear(gv_s1_TripWireTransmission);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "NovaDomination") == true)) {
        if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) != gv_s1_TripWire_Critter)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00104", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

    }
    else {
        if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) == gv_nova)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00105", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TripWiresTrippedQ_Init () {
    gt_S1TripWiresTrippedQ = TriggerCreate("gt_S1TripWiresTrippedQ_Func");
    TriggerAddEventPlayerEffectUsed(gt_S1TripWiresTrippedQ, c_playerAny, "NovaCreateTripWireSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Trip Wires Flashbanged Q
//--------------------------------------------------------------------------------------------------
bool gt_S1TripWiresFlashbangedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1TripWiresTrippedQ, false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1280085036), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1280085036), 1));
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClear(gv_s1_VisorTransmission01);
    TransmissionClear(gv_s1_VisorTransmission02);
    TransmissionClear(gv_s1_ThorTransmission);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00106", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TripWiresFlashbangedQ_Init () {
    gt_S1TripWiresFlashbangedQ = TriggerCreate("gt_S1TripWiresFlashbangedQ_Func");
    TriggerAddEventPlayerEffectUsed(gt_S1TripWiresFlashbangedQ, c_playerAny, "NovaGadgetFlashBangGrenadeTripmineApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Nova Encounters Widow Mine Q
//--------------------------------------------------------------------------------------------------
bool gt_S1NovaEncountersWidowMineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(108), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1WidowMineBurrowsDamage, true);
    TriggerEnable(gt_S1WidowMineBurrowsDistance, true);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(1762166324)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/34BD6D67"), null, UnitGetPosition(UnitFromId(1762166324)));
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00041", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00042", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1NovaEncountersWidowMineQ_Init () {
    gt_S1NovaEncountersWidowMineQ = TriggerCreate("gt_S1NovaEncountersWidowMineQ_Func");
    TriggerAddEventTimePeriodic(gt_S1NovaEncountersWidowMineQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Widow Mine Burrows (Damage)
//--------------------------------------------------------------------------------------------------
bool gt_S1WidowMineBurrowsDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "WidowMine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1WidowMineBurrowsDistance, false);
    UnitIssueOrder(UnitFromId(1762166324), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(820790165)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1762166324), Order(AbilityCommand("WidowMineBurrow", 0)), c_orderQueueAddToEnd);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        UnitIssueOrder(UnitFromId(556845855), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1584728913)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(556845855), Order(AbilityCommand("WidowMineBurrow", 0)), c_orderQueueAddToEnd);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1WidowMineBurrowsDamage_Init () {
    gt_S1WidowMineBurrowsDamage = TriggerCreate("gt_S1WidowMineBurrowsDamage_Func");
    TriggerEnable(gt_S1WidowMineBurrowsDamage, false);
    TriggerAddEventUnitDamaged(gt_S1WidowMineBurrowsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Widow Mine Burrows (Distance)
//--------------------------------------------------------------------------------------------------
bool gt_S1WidowMineBurrowsDistance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_nova), UnitGetPosition(UnitFromId(1762166324))) <= 8.0))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_nova), UnitGetPosition(UnitFromId(556845855))) <= 8.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1WidowMineBurrowsDamage, false);
    UnitIssueOrder(UnitFromId(1762166324), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(820790165)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1762166324), Order(AbilityCommand("WidowMineBurrow", 0)), c_orderQueueAddToEnd);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        UnitIssueOrder(UnitFromId(556845855), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1584728913)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(556845855), Order(AbilityCommand("WidowMineBurrow", 0)), c_orderQueueAddToEnd);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1WidowMineBurrowsDistance_Init () {
    gt_S1WidowMineBurrowsDistance = TriggerCreate("gt_S1WidowMineBurrowsDistance_Func");
    TriggerEnable(gt_S1WidowMineBurrowsDistance, false);
    TriggerAddEventTimePeriodic(gt_S1WidowMineBurrowsDistance, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - All Detectors Dead In Trip Wire Practice
//--------------------------------------------------------------------------------------------------
bool gt_S1AllDetectorsDeadInTripWirePractice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto566DE3CE_g;
    int auto566DE3CE_u;
    unit auto566DE3CE_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(415014070)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1139451711)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(380952003)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1403245109)) == false))) {
            return false;
        }

        if (!((UnitTestState(gv_nova, c_unitStateCloaked) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1AllDetectorsDeadInTripWirePracticeTransmissionQ, true, false);
    auto566DE3CE_g = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto566DE3CE_u = UnitGroupCount(auto566DE3CE_g, c_unitCountAll);
    for (;; auto566DE3CE_u -= 1) {
        auto566DE3CE_var = UnitGroupUnitFromEnd(auto566DE3CE_g, auto566DE3CE_u);
        if (auto566DE3CE_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(59), auto566DE3CE_var, libNtve_gf_PointFacingAngle(gf_RandomPointinRegionSharedbyGroup(RegionFromId(126), UnitGroupEmpty()), 225.0));
        Wait(RandomFixed(0.1, 0.5), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AllDetectorsDeadInTripWirePractice_Init () {
    gt_S1AllDetectorsDeadInTripWirePractice = TriggerCreate("gt_S1AllDetectorsDeadInTripWirePractice_Func");
    TriggerAddEventTimePeriodic(gt_S1AllDetectorsDeadInTripWirePractice, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - All Detectors Dead In Trip Wire Practice Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S1AllDetectorsDeadInTripWirePracticeTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("Separatist", gv_pLAYER_04_DEFENDERS, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupClosestToPoint(UnitGroup("Separatist", gv_pLAYER_04_DEFENDERS, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(RegionFromId(66))), "Mission_Nova07|Line00131", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AllDetectorsDeadInTripWirePracticeTransmissionQ_Init () {
    gt_S1AllDetectorsDeadInTripWirePracticeTransmissionQ = TriggerCreate("gt_S1AllDetectorsDeadInTripWirePracticeTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Combat In Marauder Gank
//--------------------------------------------------------------------------------------------------
bool gt_S1CombatInMarauderGank_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7BC24B00_g;
    int auto7BC24B00_u;
    unit auto7BC24B00_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupRemove Unpowered", "AlarmLight", RegionFromId(112));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("Signal AlarmOn", "NovaUmojanLabWallCap", RegionFromId(112));
    UnitIssueOrder(UnitFromId(693895773), Order(AbilityCommand("CompoundSewers_Door_Thin_NELowered", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    auto7BC24B00_g = gv_s1_MarauderGankGroup;
    auto7BC24B00_u = UnitGroupCount(auto7BC24B00_g, c_unitCountAll);
    for (;; auto7BC24B00_u -= 1) {
        auto7BC24B00_var = UnitGroupUnitFromEnd(auto7BC24B00_g, auto7BC24B00_u);
        if (auto7BC24B00_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto7BC24B00_var, true);
        libNtve_gf_PauseUnit(auto7BC24B00_var, false);
    }
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(112), UnitFromId(439308676), PointFromId(1915258294));
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(112), UnitFromId(1578150517), PointFromId(1372421999));
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(112), UnitFromId(304369772), PointFromId(1675461827));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(112), UnitFromId(1931703997), PointFromId(1689864610));
        UnitIssueOrder(UnitFromId(304369772), Order(AbilityCommand("DOMGhostPersonalDefensiveMatrix", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1CombatInMarauderGank_Init () {
    gt_S1CombatInMarauderGank = TriggerCreate("gt_S1CombatInMarauderGank_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Nova Enters Alarm Bot Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_S1NovaEntersAlarmBotIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(133), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(112), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAIMakeGhostPatrol4Points(UnitFromId(1607133511), PointFromId(1584409587), PointFromId(989615918), PointFromId(58260935), PointFromId(1055296919), 5.0);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/74310351"), null, UnitGetPosition(UnitFromId(1607133511)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(1607133511)), 2.0, Color(100.00, 0.00, 0.00));
    libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranEnemy, libNCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/DCBF41FA"), UnitFromId(1607133511), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(1607133511), 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(UnitFromId(1607133511), 1, TextTagLastCreated());
    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(1607133511)) == true) && (libNtve_gf_UnitInRegion(gv_nova, RegionFromId(133)) == true)) {
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00043", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1NovaEntersAlarmBotIntroQ_Init () {
    gt_S1NovaEntersAlarmBotIntroQ = TriggerCreate("gt_S1NovaEntersAlarmBotIntroQ_Func");
    TriggerAddEventTimePeriodic(gt_S1NovaEntersAlarmBotIntroQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Intro Alarm Bot Dies
//--------------------------------------------------------------------------------------------------
bool gt_S1IntroAlarmBotDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage > 1))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1607133511)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1607133511), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1607133511), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1IntroAlarmBotDies_Init () {
    gt_S1IntroAlarmBotDies = TriggerCreate("gt_S1IntroAlarmBotDies_Func");
    TriggerAddEventTimePeriodic(gt_S1IntroAlarmBotDies, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Gear Swap Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_S1GearSwapIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_autoSaveTimer, gv_autoSaveTimerCooldown, false, c_timeGame);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/6F6039FF"));
    libNtve_gf_ShareVisionofUnit(UnitFromId(194091956), true, gv_pLAYER_01_USER);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(194091956)), 2.0), 2.0, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Beacon_Nova", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(2010177382)));
    UnitKill(UnitLastCreated());
    libNtve_gf_ShowHideUnit(UnitFromId(2010177382), true);
    TextTagShow(libHots_gf_TextTagForUnit(UnitFromId(2010177382), 1), PlayerGroupAll(), true);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00017", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00018", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1GearSwapIntroQ_Init () {
    gt_S1GearSwapIntroQ = TriggerCreate("gt_S1GearSwapIntroQ_Func");
    TriggerAddEventTimePeriodic(gt_S1GearSwapIntroQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Unit Attacked In Ghost Alley
//--------------------------------------------------------------------------------------------------
bool gt_S1UnitAttackedInGhostAlley_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0E490DAF_g;
    int auto0E490DAF_u;
    unit auto0E490DAF_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(59)) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupRemove Unpowered", "AlarmLight", RegionFromId(59));
    TimerStart(gv_s1_GhostAlleyCooldownTimer, 20.0, false, c_timeGame);
    auto0E490DAF_g = UnitGroup("GunTurretUnderground", gv_pLAYER_04_DEFENDERS, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0E490DAF_u = UnitGroupCount(auto0E490DAF_g, c_unitCountAll);
    for (;; auto0E490DAF_u -= 1) {
        auto0E490DAF_var = UnitGroupUnitFromEnd(auto0E490DAF_g, auto0E490DAF_u);
        if (auto0E490DAF_var == null) { break; }
        UnitIssueOrder(auto0E490DAF_var, Order(AbilityCommand("GunTurretUnburrow", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1UnitAttackedInGhostAlley_Init () {
    gt_S1UnitAttackedInGhostAlley = TriggerCreate("gt_S1UnitAttackedInGhostAlley_Func");
    TriggerAddEventUnitDamaged(gt_S1UnitAttackedInGhostAlley, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Ghost Alley Timer Ends
//--------------------------------------------------------------------------------------------------
bool gt_S1GhostAlleyTimerEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1BB7DE4A_g;
    int auto1BB7DE4A_u;
    unit auto1BB7DE4A_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_SendActorMessageToDoodadsInRegion("Signal AlarmOff", "NovaUmojanLabWallCap", RegionFromId(59));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupApply Unpowered", "AlarmLight", RegionFromId(59));
    auto1BB7DE4A_g = UnitGroup("GunTurret", gv_pLAYER_04_DEFENDERS, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1BB7DE4A_u = UnitGroupCount(auto1BB7DE4A_g, c_unitCountAll);
    for (;; auto1BB7DE4A_u -= 1) {
        auto1BB7DE4A_var = UnitGroupUnitFromEnd(auto1BB7DE4A_g, auto1BB7DE4A_u);
        if (auto1BB7DE4A_var == null) { break; }
        UnitIssueOrder(auto1BB7DE4A_var, Order(AbilityCommand("GunTurretBurrow", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1GhostAlleyTimerEnds_Init () {
    gt_S1GhostAlleyTimerEnds = TriggerCreate("gt_S1GhostAlleyTimerEnds_Func");
    TriggerAddEventTimer(gt_S1GhostAlleyTimerEnds, gv_s1_GhostAlleyCooldownTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Trip Wire Last Encounter Crossed
//--------------------------------------------------------------------------------------------------
bool gt_S1TripWireLastEncounterCrossed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_reactPoint;

    // Automatic Variable Declarations
    unitgroup auto2FDE795F_g;
    int auto2FDE795F_u;
    unit auto2FDE795F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == UnitFromId(1936979417)))) {
            return false;
        }

        if (!((libNCMI_gf_StealthAIIsUnitInStealthAIEnemyUnitGroup(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Raven_PointDefenseDroneAttackImpact", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupRemove Unpowered", "AlarmLight", RegionFromId(112));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("Signal AlarmOn", "NovaUmojanLabWallCap", RegionFromId(112));
    TimerStart(gv_s1_LastEncounterAreaCooldownTimer, 20.0, false, c_timeGame);
    lv_reactPoint = UnitGetPosition(gv_nova);
    Wait(2.0, c_timeGame);
    libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionCircle(lv_reactPoint, 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_reactPoint);
    auto2FDE795F_g = UnitGroup("GunTurretUnderground", gv_pLAYER_04_DEFENDERS, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2FDE795F_u = UnitGroupCount(auto2FDE795F_g, c_unitCountAll);
    for (;; auto2FDE795F_u -= 1) {
        auto2FDE795F_var = UnitGroupUnitFromEnd(auto2FDE795F_g, auto2FDE795F_u);
        if (auto2FDE795F_var == null) { break; }
        UnitIssueOrder(auto2FDE795F_var, Order(AbilityCommand("GunTurretUnburrow", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TripWireLastEncounterCrossed_Init () {
    gt_S1TripWireLastEncounterCrossed = TriggerCreate("gt_S1TripWireLastEncounterCrossed_Func");
    TriggerAddEventPlayerEffectUsed(gt_S1TripWireLastEncounterCrossed, c_playerAny, "NovaCreateTripWireSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Trip Wire Last Encounter Timer Ends
//--------------------------------------------------------------------------------------------------
bool gt_S1TripWireLastEncounterTimerEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto26CC107F_g;
    int auto26CC107F_u;
    unit auto26CC107F_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_SendActorMessageToDoodadsInRegion("Signal AlarmOff", "NovaUmojanLabWallCap", RegionFromId(69));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupApply Unpowered", "AlarmLight", RegionFromId(69));
    auto26CC107F_g = UnitGroup("GunTurret", gv_pLAYER_04_DEFENDERS, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto26CC107F_u = UnitGroupCount(auto26CC107F_g, c_unitCountAll);
    for (;; auto26CC107F_u -= 1) {
        auto26CC107F_var = UnitGroupUnitFromEnd(auto26CC107F_g, auto26CC107F_u);
        if (auto26CC107F_var == null) { break; }
        UnitIssueOrder(auto26CC107F_var, Order(AbilityCommand("GunTurretBurrow", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TripWireLastEncounterTimerEnds_Init () {
    gt_S1TripWireLastEncounterTimerEnds = TriggerCreate("gt_S1TripWireLastEncounterTimerEnds_Func");
    TriggerAddEventTimer(gt_S1TripWireLastEncounterTimerEnds, gv_s1_LastEncounterAreaCooldownTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Thor Nears Mechanic Room
//--------------------------------------------------------------------------------------------------
bool gt_S1ThorNearsMechanicRoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitIsAlive(gv_s1_ThorFriend) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_s1_ThorFriend, RegionFromId(134)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(582105191), Order(AbilityCommand("CompoundSewers_Door_Thin_NWLowered", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ThorNearsMechanicRoom_Init () {
    gt_S1ThorNearsMechanicRoom = TriggerCreate("gt_S1ThorNearsMechanicRoom_Func");
    TriggerAddEventTimePeriodic(gt_S1ThorNearsMechanicRoom, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Thor Enters Mechanic Room Q 
//--------------------------------------------------------------------------------------------------
bool gt_S1ThorEntersMechanicRoomQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitIsAlive(gv_s1_ThorFriend) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_s1_ThorFriend, RegionFromId(135)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libComC_gf_CampaignAwardAchievement("Nova07_3", gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_s1_ThorFriend, true, gv_pLAYER_01_USER);
    UnitBehaviorAdd(gv_s1_ThorFriend, "Harmless", gv_s1_ThorFriend, 1);
    libNtve_gf_MakeUnitUncommandable(gv_s1_ThorFriend, true);
    libNtve_gf_PauseUnit(gv_s1_ThorFriend, true);
    libNCMI_gf_StealthAIRemoveUnitFromAllStealthAIDefendRegions(gv_s1_ThorFriend);
    libNCMI_gf_StealthAIRemoveUnitStealthAIEnemyUnitGroup(gv_s1_ThorFriend);
    GameDestroyEffects(UnitGetPosition(gv_nova), 8.0, 0, "NovaDominationPersistent");
    GameDestroyEffects(UnitGetPosition(gv_s1_ThorFriend), 8.0, 0, "NovaDominationPersistent");
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(gv_s1_ThorFriend) == true)) {
        libNCMI_gf_SendTransmissionCampaign(gv_s1_ThorFriend, "Mission_Nova07|Line00107", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ThorEntersMechanicRoomQ_Init () {
    gt_S1ThorEntersMechanicRoomQ = TriggerCreate("gt_S1ThorEntersMechanicRoomQ_Func");
    TriggerAddEventTimePeriodic(gt_S1ThorEntersMechanicRoomQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Nova Sees Facility Entrance Q
//--------------------------------------------------------------------------------------------------
bool gt_S1NovaSeesFacilityEntranceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1448970569)), 6.0), 8.0, false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0A4C5C71"), null, UnitGetPosition(UnitFromId(1448970569)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(1448970569)), 6.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00044", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1NovaSeesFacilityEntranceQ_Init () {
    gt_S1NovaSeesFacilityEntranceQ = TriggerCreate("gt_S1NovaSeesFacilityEntranceQ_Func");
    TriggerAddEventTimePeriodic(gt_S1NovaSeesFacilityEntranceQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Nova Enters Facility Entrance Beacon
//--------------------------------------------------------------------------------------------------
bool gt_S1NovaEntersFacilityEntranceBeacon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(63)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_mapStage = 2;
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_MakeUnitUncommandable(gv_nova, true);
    UnitKill(gv_s1_FacilityEntrance);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_s1_FacilityEntrance, 1));
    TriggerExecute(gt_ObjectiveInfiltrateTheFacilityComplete, true, false);
    TriggerExecute(gt_S1CleanUpSection01, true, true);
    TriggerExecute(gt_MidQ, true, true);
    TriggerExecute(gt_StartGame02MainQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1NovaEntersFacilityEntranceBeacon_Init () {
    gt_S1NovaEntersFacilityEntranceBeacon = TriggerCreate("gt_S1NovaEntersFacilityEntranceBeacon_Func");
    TriggerAddEventTimePeriodic(gt_S1NovaEntersFacilityEntranceBeacon, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Clean Up Section 01
//--------------------------------------------------------------------------------------------------
bool gt_S1CleanUpSection01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto87D24918_g;
    int auto87D24918_u;
    unit auto87D24918_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_LockUnlockNovaEquipment(false, "EQPHelmetItem5");
    auto87D24918_g = UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87D24918_u = UnitGroupCount(auto87D24918_g, c_unitCountAll);
    for (;; auto87D24918_u -= 1) {
        auto87D24918_var = UnitGroupUnitFromEnd(auto87D24918_g, auto87D24918_u);
        if (auto87D24918_var == null) { break; }
        libNtve_gf_PauseUnit(auto87D24918_var, true);
    }
    TriggerEnable(gt_S1GearSwapIntroQ, false);
    TriggerStop(gt_StartGame01IntroQ);
    TriggerStop(gt_S1ReigelDetectsSideRoomQ);
    TriggerStop(gt_S1GearSwapIntroQ);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(64), libNCMI_ge_StealthAIDefendRegionState_Inactive);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(100), libNCMI_ge_StealthAIDefendRegionState_Inactive);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(65), libNCMI_ge_StealthAIDefendRegionState_Inactive);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(66), libNCMI_ge_StealthAIDefendRegionState_Inactive);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(112), libNCMI_ge_StealthAIDefendRegionState_Inactive);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(69), libNCMI_ge_StealthAIDefendRegionState_Inactive);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libNCMI_gf_HideCampaignTransmissionPortrait();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1CleanUpSection01_Init () {
    gt_S1CleanUpSection01 = TriggerCreate("gt_S1CleanUpSection01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Combat In Defend Regions Controller
//--------------------------------------------------------------------------------------------------
bool gt_S2CombatInDefendRegionsController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(62)) == true)) {
        TriggerExecute(gt_S2CheckpointCiviliansFlee, true, false);
    }
    else if ((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(38)) == true)) {
        TriggerExecute(gt_S2CombatInHallway02, true, false);
    }
    else if ((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(75)) == true)) {
        TriggerExecute(gt_S2CombatInHallway03, true, false);
    }
    else if ((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(9)) == true)) {
        TriggerExecute(gt_S2TargetPracticeGuysInterrupted, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2CombatInDefendRegionsController_Init () {
    gt_S2CombatInDefendRegionsController = TriggerCreate("gt_S2CombatInDefendRegionsController_Func");
    TriggerAddEventUnitAttacked2(gt_S2CombatInDefendRegionsController, null, null);
    TriggerAddEventUnitDamaged(gt_S2CombatInDefendRegionsController, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitStartedAttack2(gt_S2CombatInDefendRegionsController, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Compound Wing Checkpoints
//--------------------------------------------------------------------------------------------------
bool gt_S2CompoundWingCheckpoints_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_autoSaveTimer) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_autoSaveTimer, gv_autoSaveTimerCooldown, false, c_timeGame);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/73C9D24A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2CompoundWingCheckpoints_Init () {
    gt_S2CompoundWingCheckpoints = TriggerCreate("gt_S2CompoundWingCheckpoints_Func");
    TriggerAddEventUnitRegion(gt_S2CompoundWingCheckpoints, UnitRefFromVariable("gv_nova"), RegionFromId(149), true);
    TriggerAddEventUnitRegion(gt_S2CompoundWingCheckpoints, UnitRefFromVariable("gv_nova"), RegionFromId(148), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Enters Door Control Region
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaEntersDoorControlRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9AD9F7A6_g;
    int auto9AD9F7A6_u;
    unit auto9AD9F7A6_var;
    region autoC83E9AEE_val;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "Scientist") || (UnitGetType(EventUnit()) == "DOMScientist") || (UnitGetType(EventUnit()) == "ScientistOfficer") || (EventUnit() == gv_nova))) {
        auto9AD9F7A6_g = UnitGroup("Beacon_NovaSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9AD9F7A6_u = UnitGroupCount(auto9AD9F7A6_g, c_unitCountAll);
        for (;; auto9AD9F7A6_u -= 1) {
            auto9AD9F7A6_var = UnitGroupUnitFromEnd(auto9AD9F7A6_g, auto9AD9F7A6_u);
            if (auto9AD9F7A6_var == null) { break; }
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto9AD9F7A6_var, 1));
            TextTagDestroy(libHots_gf_TextTagForUnit(auto9AD9F7A6_var, 1));
        }
        if ((EventUnit() != gv_nova) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
            gf_S2DominatedUnitOpensDoorQ(EventUnit());
        }

        autoC83E9AEE_val = EventUnitRegion();
        if (autoC83E9AEE_val == RegionFromId(11)) {
            if ((UnitIsAlive(UnitFromId(1142031826)) == true)) {
                UnitKill(UnitFromId(1142031826));
                UnitIssueOrder(UnitFromId(1338300440), Order(AbilityCommand("CompoundMansion_DoorNWLowered", 0)), c_orderQueueReplace);
            }

        }
        else if (autoC83E9AEE_val == RegionFromId(22)) {
            if ((UnitIsAlive(UnitFromId(1565431000)) == true)) {
                UnitKill(UnitFromId(1565431000));
                UnitIssueOrder(UnitFromId(1187488370), Order(AbilityCommand("CompoundMansion_DoorNWLowered", 0)), c_orderQueueReplace);
                UnitRemove(UnitFromId(1305397238));
                UnitRemove(UnitFromId(2078937239));
            }

        }
        else if (autoC83E9AEE_val == RegionFromId(7)) {
            if ((UnitIsAlive(UnitFromId(264450817)) == true)) {
                UnitKill(UnitFromId(264450817));
                UnitIssueOrder(UnitFromId(49086192), Order(AbilityCommand("CompoundMansion_DoorNELowered", 0)), c_orderQueueReplace);
            }

        }
        else if (autoC83E9AEE_val == RegionFromId(26)) {
            if ((UnitIsAlive(UnitFromId(1380740374)) == true)) {
                UnitKill(UnitFromId(1380740374));
                UnitIssueOrder(UnitFromId(741498091), Order(AbilityCommand("CompoundMansion_DoorNELowered", 0)), c_orderQueueReplace);
            }

        }
        else {
        }
        if ((UnitIsAlive(UnitFromId(1142031826)) == false) && (UnitIsAlive(UnitFromId(1565431000)) == false) && (UnitIsAlive(UnitFromId(264450817)) == false) && (UnitIsAlive(UnitFromId(1380740374)) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }

    }
    else {
        gf_S2DominatedUnitCantOpenDoorQ(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaEntersDoorControlRegion_Init () {
    gt_S2NovaEntersDoorControlRegion = TriggerCreate("gt_S2NovaEntersDoorControlRegion_Func");
    TriggerAddEventUnitRegion(gt_S2NovaEntersDoorControlRegion, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_S2NovaEntersDoorControlRegion, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_S2NovaEntersDoorControlRegion, null, RegionFromId(7), true);
    TriggerAddEventUnitRegion(gt_S2NovaEntersDoorControlRegion, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Sees Door Beacon
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaSeesDoorBeacon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1925BA68_g;
    int auto1925BA68_u;
    unit auto1925BA68_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libNtve_gf_UnitIsVisibleToPlayer(UnitFromId(1142031826), gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitIsVisibleToPlayer(UnitFromId(1565431000), gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitIsVisibleToPlayer(UnitFromId(264450817), gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitIsVisibleToPlayer(UnitFromId(1380740374), gv_pLAYER_01_USER) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto1925BA68_g = UnitGroup("Beacon_NovaSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1925BA68_u = UnitGroupCount(auto1925BA68_g, c_unitCountAll);
    for (;; auto1925BA68_u -= 1) {
        auto1925BA68_var = UnitGroupUnitFromEnd(auto1925BA68_g, auto1925BA68_u);
        if (auto1925BA68_var == null) { break; }
        if ((auto1925BA68_var != UnitFromId(676453319)) && (auto1925BA68_var != UnitFromId(1961113430))) {
            libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranMainObjective, libNCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/4420BD4F"), auto1925BA68_var, "Ref_Origin");
            libHots_gf_StoreActorForUnit(auto1925BA68_var, 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(auto1925BA68_var, 1, TextTagLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaSeesDoorBeacon_Init () {
    gt_S2NovaSeesDoorBeacon = TriggerCreate("gt_S2NovaSeesDoorBeacon_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaSeesDoorBeacon, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Enters Sonar Drone Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaEntersSonarDroneIntroQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestSonarDrone;

    // Automatic Variable Declarations
    unitgroup autoBF0CD52D_g;
    int autoBF0CD52D_u;
    unit autoBF0CD52D_var;
    region autoA43DCE93_val;
    unitgroup autoC37234BC_g;
    int autoC37234BC_u;
    unit autoC37234BC_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoBF0CD52D_g = UnitGroup("NovaSonarDrone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBF0CD52D_u = UnitGroupCount(autoBF0CD52D_g, c_unitCountAll);
    for (;; autoBF0CD52D_u -= 1) {
        autoBF0CD52D_var = UnitGroupUnitFromEnd(autoBF0CD52D_g, autoBF0CD52D_u);
        if (autoBF0CD52D_var == null) { break; }
        libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranEnemy, libNCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/FB96F14B"), autoBF0CD52D_var, "Ref_Center");
        libHots_gf_StoreActorForUnit(autoBF0CD52D_var, 1, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(autoBF0CD52D_var, 1, TextTagLastCreated());
    }
    autoA43DCE93_val = EventUnitRegion();
    if (autoA43DCE93_val == RegionFromId(57)) {
        lv_closestSonarDrone = UnitGroupClosestToPoint(UnitGroup("NovaSonarDrone", c_playerAny, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_nova));
    }
    else if (autoA43DCE93_val == RegionFromId(12)) {
        lv_closestSonarDrone = UnitGroupClosestToPoint(UnitGroup("NovaSonarDrone", c_playerAny, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_nova));
    }
    else if (autoA43DCE93_val == RegionFromId(83)) {
        lv_closestSonarDrone = UnitGroupClosestToPoint(UnitGroup("NovaSonarDrone", c_playerAny, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_nova));
    }
    else {
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8E4B6D93"), null, UnitGetPosition(lv_closestSonarDrone));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_closestSonarDrone), 8.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00062", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00063", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(gt_S2RemoveSonarDroneReticles, false);
    autoC37234BC_g = UnitGroup("NovaSonarDrone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC37234BC_u = UnitGroupCount(autoC37234BC_g, c_unitCountAll);
    for (;; autoC37234BC_u -= 1) {
        autoC37234BC_var = UnitGroupUnitFromEnd(autoC37234BC_g, autoC37234BC_u);
        if (autoC37234BC_var == null) { break; }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoC37234BC_var, 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(autoC37234BC_var, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaEntersSonarDroneIntroQ_Init () {
    gt_S2NovaEntersSonarDroneIntroQ = TriggerCreate("gt_S2NovaEntersSonarDroneIntroQ_Func");
    TriggerAddEventUnitRegion(gt_S2NovaEntersSonarDroneIntroQ, UnitRefFromVariable("gv_nova"), RegionFromId(57), true);
    TriggerAddEventUnitRegion(gt_S2NovaEntersSonarDroneIntroQ, UnitRefFromVariable("gv_nova"), RegionFromId(12), true);
    TriggerAddEventUnitRegion(gt_S2NovaEntersSonarDroneIntroQ, UnitRefFromVariable("gv_nova"), RegionFromId(83), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Remove Sonar Drone Reticles
//--------------------------------------------------------------------------------------------------
bool gt_S2RemoveSonarDroneReticles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto84690239_g;
    int auto84690239_u;
    unit auto84690239_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NovaSonarDrone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto84690239_g = UnitGroup("NovaSonarDrone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto84690239_u = UnitGroupCount(auto84690239_g, c_unitCountAll);
    for (;; auto84690239_u -= 1) {
        auto84690239_var = UnitGroupUnitFromEnd(auto84690239_g, auto84690239_u);
        if (auto84690239_var == null) { break; }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto84690239_var, 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(auto84690239_var, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2RemoveSonarDroneReticles_Init () {
    gt_S2RemoveSonarDroneReticles = TriggerCreate("gt_S2RemoveSonarDroneReticles_Func");
    TriggerAddEventUnitDied(gt_S2RemoveSonarDroneReticles, null);
    TriggerAddEventUnitAttacked2(gt_S2RemoveSonarDroneReticles, null, null);
    TriggerAddEventUnitDamaged(gt_S2RemoveSonarDroneReticles, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitBehaviorChange(gt_S2RemoveSonarDroneReticles, null, "FlashBangGrenade", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Overhears Conversations 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaOverhearsConversations01Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker01;
    unit lv_speaker02;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speaker01 = UnitFromId(1176660379);
    lv_speaker02 = UnitFromId(1393519190);
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(121), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitIsAlive(lv_speaker01) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_speaker02) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false) && (TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(121), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitIsAlive(lv_speaker01) == true) && (UnitIsAlive(lv_speaker02) == true) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lv_speaker01) == libNCMI_ge_StealthAIUnitState_Idle) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lv_speaker02) == libNCMI_ge_StealthAIUnitState_Idle)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker01, "Mission_Nova07|Line00108", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker02, "Mission_Nova07|Line00109", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaOverhearsConversations01Q_Init () {
    gt_S2NovaOverhearsConversations01Q = TriggerCreate("gt_S2NovaOverhearsConversations01Q_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaOverhearsConversations01Q, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Overhears Conversations 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaOverhearsConversations02Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker01;
    unit lv_speaker02;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speaker01 = UnitFromId(129532347);
    lv_speaker02 = UnitFromId(120611427);
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(122), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitIsAlive(lv_speaker01) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_speaker02) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false) && (TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(122), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitIsAlive(lv_speaker01) == true) && (UnitIsAlive(lv_speaker02) == true) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lv_speaker01) == libNCMI_ge_StealthAIUnitState_Idle) && (libNCMI_gf_StealthAIGetStealthAIUnitState(lv_speaker02) == libNCMI_ge_StealthAIUnitState_Idle)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker01, "Mission_Nova07|Line00110", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker02, "Mission_Nova07|Line00111", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaOverhearsConversations02Q_Init () {
    gt_S2NovaOverhearsConversations02Q = TriggerCreate("gt_S2NovaOverhearsConversations02Q_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaOverhearsConversations02Q, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Overhears Conversations 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaOverhearsConversations03Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker01;
    unit lv_speaker02;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speaker01 = UnitFromId(1357994556);
    lv_speaker02 = UnitFromId(1751901905);
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(123), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitIsAlive(lv_speaker01) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_speaker02) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false) && (TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(123), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitIsAlive(lv_speaker01) == true) && (UnitIsAlive(lv_speaker02) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker01, "Mission_Nova07|Line00112", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker02, "Mission_Nova07|Line00113", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker01, "Mission_Nova07|Line00114", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaOverhearsConversations03Q_Init () {
    gt_S2NovaOverhearsConversations03Q = TriggerCreate("gt_S2NovaOverhearsConversations03Q_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaOverhearsConversations03Q, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Overhears Conversations 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaOverhearsConversations04Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker01;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speaker01 = UnitFromId(1594987261);
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(124), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitIsAlive(lv_speaker01) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((libCMMI_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false) && (TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(124), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitIsAlive(lv_speaker01) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker01, "UI_VO|Line00009", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s2_OverheardConversationTransmission04 = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaOverhearsConversations04Q_Init () {
    gt_S2NovaOverhearsConversations04Q = TriggerCreate("gt_S2NovaOverhearsConversations04Q_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaOverhearsConversations04Q, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Checkpoint Civilians Flee
//--------------------------------------------------------------------------------------------------
bool gt_S2CheckpointCiviliansFlee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_fleeGroup;

    // Automatic Variable Declarations
    unitgroup autoF7E94ED2_g;
    int autoF7E94ED2_u;
    unit autoF7E94ED2_var;

    // Variable Initialization
    lv_fleeGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupAddUnitGroup(lv_fleeGroup, UnitGroup("Civilian", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_fleeGroup, UnitGroup("CivilianFemale", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoF7E94ED2_g = lv_fleeGroup;
    autoF7E94ED2_u = UnitGroupCount(autoF7E94ED2_g, c_unitCountAll);
    for (;; autoF7E94ED2_u -= 1) {
        autoF7E94ED2_var = UnitGroupUnitFromEnd(autoF7E94ED2_g, autoF7E94ED2_u);
        if (autoF7E94ED2_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoF7E94ED2_var, "AnimGroupRemove Victory");
        SoundPlayAtPointForPlayer(SoundLink("Emitter_Nova07_Crowd_PanicRun", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1689098593), 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("Emitter_Nova07_Crowd_Gasp", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(365787882), 0.0, 100.0, 0.0);
        SoundStop(gv_civilian_Cheers_01, true);
        SoundStop(gv_civilian_Cheers_02, true);
        SoundStop(gv_civilian_Cheers_03, true);
        UnitBehaviorAdd(autoF7E94ED2_var, "ScientistScared", autoF7E94ED2_var, 1);
        UnitIssueOrder(autoF7E94ED2_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(154))), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2CheckpointCiviliansFlee_Init () {
    gt_S2CheckpointCiviliansFlee = TriggerCreate("gt_S2CheckpointCiviliansFlee_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Sees Locked Door Still Locked Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaSeesLockedDoorStillLockedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((ObjectiveGetState(gv_objectiveDestroyZergBase8) == c_objectiveStateActive))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/80C8FB65"), null, PointFromId(662280969));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(662280969), 8.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00064", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaSeesLockedDoorStillLockedQ_Init () {
    gt_S2NovaSeesLockedDoorStillLockedQ = TriggerCreate("gt_S2NovaSeesLockedDoorStillLockedQ_Func");
    TriggerAddEventUnitRegion(gt_S2NovaSeesLockedDoorStillLockedQ, UnitRefFromVariable("gv_nova"), RegionFromId(97), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Pre-Stone Checkpoint
//--------------------------------------------------------------------------------------------------
bool gt_S2PreStoneCheckpoint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_S2DoorToDavisUnlockedQ) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/993F8352"));
    TimerStart(gv_autoSaveTimer, gv_autoSaveTimerCooldown, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2PreStoneCheckpoint_Init () {
    gt_S2PreStoneCheckpoint = TriggerCreate("gt_S2PreStoneCheckpoint_Func");
    TriggerAddEventUnitRegion(gt_S2PreStoneCheckpoint, UnitRefFromVariable("gv_nova"), RegionFromId(146), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Enters Stone Encounter
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaEntersStoneEncounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_nova, RegionFromId(18)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    UnitIssueOrder(UnitFromId(1572013542), Order(AbilityCommand("CompoundMansion_DoorNE", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(68933075), Order(AbilityCommand("CompoundMansion_DoorNE", 0)), c_orderQueueReplace);
    TriggerExecute(gt_Mid2Q, true, true);
    TriggerExecute(gt_StartGame03StoneFightQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaEntersStoneEncounter_Init () {
    gt_S2NovaEntersStoneEncounter = TriggerCreate("gt_S2NovaEntersStoneEncounter_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaEntersStoneEncounter, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Sees Pierce And/Or Delta Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaSeesPierceAndOrDeltaQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_transmissionVersion;

    // Automatic Variable Declarations
    int autoB548651B_val;
    int autoCB615E37_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libNCMI_gf_CharacterIsAlive("Pierce") == true) || (libNCMI_gf_CharacterIsAlive("Delta") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNCMI_gf_CharacterIsAlive("Pierce") == true) && (libNCMI_gf_CharacterIsAlive("Delta") == true)) {
        lv_transmissionVersion = 1;
    }
    else if ((libNCMI_gf_CharacterIsAlive("Pierce") == true)) {
        lv_transmissionVersion = 2;
    }
    else if ((libNCMI_gf_CharacterIsAlive("Delta") == true)) {
        lv_transmissionVersion = 3;
    }
    else if (true) {
        return true;
    }
    TriggerQueueEnter();
    autoB548651B_val = lv_transmissionVersion;
    if (autoB548651B_val == 1) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C80E9141"), null, PointFromId(1579263942));
    }
    else if (autoB548651B_val == 2) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D2DCB408"), null, PointFromId(1579263942));
    }
    else if (autoB548651B_val == 3) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/74337E0D"), null, PointFromId(1579263942));
    }
    else {
    }
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1579263942), 8.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    autoCB615E37_val = lv_transmissionVersion;
    if (autoCB615E37_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00065", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00066", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00067", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoCB615E37_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00068", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00069", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoCB615E37_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00070", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00071", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00072", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00073", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaSeesPierceAndOrDeltaQ_Init () {
    gt_S2NovaSeesPierceAndOrDeltaQ = TriggerCreate("gt_S2NovaSeesPierceAndOrDeltaQ_Func");
    TriggerAddEventUnitRegion(gt_S2NovaSeesPierceAndOrDeltaQ, UnitRefFromVariable("gv_nova"), RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Combat In Hallway 02
//--------------------------------------------------------------------------------------------------
bool gt_S2CombatInHallway02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_hallwayUnits;

    // Automatic Variable Declarations
    unitgroup auto1182DA67_g;
    int auto1182DA67_u;
    unit auto1182DA67_var;

    // Variable Initialization
    lv_hallwayUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_hallwayUnits = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(142), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1182DA67_g = lv_hallwayUnits;
    auto1182DA67_u = UnitGroupCount(auto1182DA67_g, c_unitCountAll);
    for (;; auto1182DA67_u -= 1) {
        auto1182DA67_var = UnitGroupUnitFromEnd(auto1182DA67_g, auto1182DA67_u);
        if (auto1182DA67_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(38), auto1182DA67_var, gf_RandomPointinRegionSharedbyGroup(RegionFromId(140), lv_hallwayUnits));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2CombatInHallway02_Init () {
    gt_S2CombatInHallway02 = TriggerCreate("gt_S2CombatInHallway02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Combat In Hallway 03
//--------------------------------------------------------------------------------------------------
bool gt_S2CombatInHallway03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_hallwayUnits;

    // Automatic Variable Declarations
    unitgroup autoD16F9BBD_g;
    int autoD16F9BBD_u;
    unit autoD16F9BBD_var;

    // Variable Initialization
    lv_hallwayUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_hallwayUnits = UnitGroup(null, gv_pLAYER_04_DEFENDERS, RegionFromId(143), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD16F9BBD_g = lv_hallwayUnits;
    autoD16F9BBD_u = UnitGroupCount(autoD16F9BBD_g, c_unitCountAll);
    for (;; autoD16F9BBD_u -= 1) {
        autoD16F9BBD_var = UnitGroupUnitFromEnd(autoD16F9BBD_g, autoD16F9BBD_u);
        if (autoD16F9BBD_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(75), autoD16F9BBD_var, gf_RandomPointinRegionSharedbyGroup(RegionFromId(141), lv_hallwayUnits));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2CombatInHallway03_Init () {
    gt_S2CombatInHallway03 = TriggerCreate("gt_S2CombatInHallway03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Target Practice Guys Interrupted
//--------------------------------------------------------------------------------------------------
bool gt_S2TargetPracticeGuysInterrupted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD60B379E_g;
    int autoD60B379E_u;
    unit autoD60B379E_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD60B379E_g = gv_s2_TargetPracticeGuys;
    autoD60B379E_u = UnitGroupCount(autoD60B379E_g, c_unitCountAll);
    for (;; autoD60B379E_u -= 1) {
        autoD60B379E_var = UnitGroupUnitFromEnd(autoD60B379E_g, autoD60B379E_u);
        if (autoD60B379E_var == null) { break; }
        libNCMI_gf_StealthAISetStealthAIUnitState(autoD60B379E_var, libNCMI_ge_StealthAIUnitState_Idle);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2TargetPracticeGuysInterrupted_Init () {
    gt_S2TargetPracticeGuysInterrupted = TriggerCreate("gt_S2TargetPracticeGuysInterrupted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Sees Security Room 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaSeesSecurityRoom01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto132B8947_val;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(676453319), 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(676453319), 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(676453319), 2));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(676453319), 2));
    libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranMainObjective, libNCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/D0950663"), UnitFromId(676453319), "Ref_Origin");
    libHots_gf_StoreActorForUnit(UnitFromId(676453319), 2, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(UnitFromId(676453319), 2, TextTagLastCreated());
    TriggerQueueEnter();
    if ((TriggerIsEnabled(gt_S2DoorGuyOpensDoor01Q) == true)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2802FF84"), null, PointFromId(1976367658));
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1976367658), 8.0, Color(0.00, 100.00, 0.00));
        Wait(2.0, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        auto132B8947_val = gv_objectiveUnlockDoorToDavisCount;
        if (auto132B8947_val == 0) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00074", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s2_SecurityRoomTransmission = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
            if ((TriggerIsEnabled(gt_S2DoorGuyOpensDoor01Q) == true)) {
                libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00075", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                gv_s2_SecurityRoomTransmission = TransmissionLastSent();
                TransmissionWait(TransmissionLastSent(), 0.0);
            }

        }
        else if (auto132B8947_val == 1) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00076", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s2_SecurityRoomTransmission = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
        }
        else {
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaSeesSecurityRoom01Q_Init () {
    gt_S2NovaSeesSecurityRoom01Q = TriggerCreate("gt_S2NovaSeesSecurityRoom01Q_Func");
    TriggerAddEventUnitRegion(gt_S2NovaSeesSecurityRoom01Q, UnitRefFromVariable("gv_nova"), RegionFromId(96), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Sees Security Room 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaSeesSecurityRoom02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF51D1A36_val;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1961113430), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1961113430), 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1961113430), 2));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1961113430), 2));
    libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranMainObjective, libNCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/DAF6A8F0"), UnitFromId(1961113430), "Ref_Origin");
    libHots_gf_StoreActorForUnit(UnitFromId(1961113430), 2, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(UnitFromId(1961113430), 2, TextTagLastCreated());
    TriggerQueueEnter();
    if ((TriggerIsEnabled(gt_S2DoorGuyOpensDoor02Q) == true)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/63DC7731"), null, PointFromId(1414274923));
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1414274923), 8.0, Color(0.00, 100.00, 0.00));
        Wait(2.0, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        autoF51D1A36_val = gv_objectiveUnlockDoorToDavisCount;
        if (autoF51D1A36_val == 0) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00074", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s2_SecurityRoomTransmission = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
            if ((TriggerIsEnabled(gt_S2DoorGuyOpensDoor02Q) == true)) {
                libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00075", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                gv_s2_SecurityRoomTransmission = TransmissionLastSent();
                TransmissionWait(TransmissionLastSent(), 0.0);
            }

        }
        else if (autoF51D1A36_val == 1) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00076", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            gv_s2_SecurityRoomTransmission = TransmissionLastSent();
            TransmissionWait(TransmissionLastSent(), 0.0);
        }
        else {
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaSeesSecurityRoom02Q_Init () {
    gt_S2NovaSeesSecurityRoom02Q = TriggerCreate("gt_S2NovaSeesSecurityRoom02Q_Func");
    TriggerAddEventUnitRegion(gt_S2NovaSeesSecurityRoom02Q, UnitRefFromVariable("gv_nova"), RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Door Guy Opens Door 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2DoorGuyOpensDoor01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Scientist") || (UnitGetType(EventUnit()) == "DOMScientist") || (UnitGetType(EventUnit()) == "ScientistOfficer") || (EventUnit() == gv_nova)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/C00F0647"));
    TimerStart(gv_s2_AutoSaveAfterDoorOpenedTimer, 120.0, false, c_timeGame);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(676453319), 1));
    UnitKill(UnitFromId(676453319));
    UnitIssueOrder(UnitFromId(1641165157), Order(AbilityCommand("CompoundMansion_DoorNWLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1419282183), Order(AbilityCommand("CompoundMansion_DoorNELowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1572013542), Order(AbilityCommand("CompoundMansion_DoorNELowered", 0)), c_orderQueueReplace);
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(676453319), 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(676453319), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(676453319), 2));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(676453319), 2));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(147), 6.0, false);
    gv_objectiveUnlockDoorToDavisCount += 1;
    TriggerExecute(gt_ObjectiveUnlockDoorToDavisUpdate, true, false);
    TransmissionClear(gv_s2_SecurityRoomTransmission);
    if ((gv_objectiveUnlockDoorToDavisCount == gv_objectiveUnlockDoorToDavisMax)) {
        TriggerExecute(gt_S2DoorToDavisUnlockedQ, true, false);
    }
    else {
        TriggerQueueEnter();
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/839A29BA"), null, PointFromId(662280969));
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(662280969), 6.0, Color(0.00, 100.00, 0.00));
        Wait(2.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("UI_Nova07_SecurityRoom_ControlPanelSet", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00077", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s2_SecurityRoomTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DoorGuyOpensDoor01Q_Init () {
    gt_S2DoorGuyOpensDoor01Q = TriggerCreate("gt_S2DoorGuyOpensDoor01Q_Func");
    TriggerAddEventUnitRegion(gt_S2DoorGuyOpensDoor01Q, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Door Guy Opens Door 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2DoorGuyOpensDoor02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Scientist") || (UnitGetType(EventUnit()) == "DOMScientist") || (UnitGetType(EventUnit()) == "ScientistOfficer") || (EventUnit() == gv_nova)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/0BC12BC8"));
    TimerStart(gv_s2_AutoSaveAfterDoorOpenedTimer, 120.0, false, c_timeGame);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(1961113430), 1));
    UnitKill(UnitFromId(1961113430));
    UnitIssueOrder(UnitFromId(927630855), Order(AbilityCommand("CompoundMansion_DoorNWLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(68933075), Order(AbilityCommand("CompoundMansion_DoorNELowered", 0)), c_orderQueueReplace);
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1961113430), 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1961113430), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(1961113430), 2));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(1961113430), 2));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(147), 6.0, false);
    gv_objectiveUnlockDoorToDavisCount += 1;
    TriggerExecute(gt_ObjectiveUnlockDoorToDavisUpdate, true, false);
    if ((gv_objectiveUnlockDoorToDavisCount == gv_objectiveUnlockDoorToDavisMax)) {
        TriggerExecute(gt_S2DoorToDavisUnlockedQ, true, false);
    }
    else {
        TriggerQueueEnter();
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FD82DF6B"), null, PointFromId(662280969));
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(662280969), 6.0, Color(0.00, 100.00, 0.00));
        Wait(2.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("UI_Nova07_SecurityRoom_ControlPanelSet", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00077", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s2_SecurityRoomTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DoorGuyOpensDoor02Q_Init () {
    gt_S2DoorGuyOpensDoor02Q = TriggerCreate("gt_S2DoorGuyOpensDoor02Q_Func");
    TriggerAddEventUnitRegion(gt_S2DoorGuyOpensDoor02Q, null, RegionFromId(95), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Door To Davis Unlocked Q
//--------------------------------------------------------------------------------------------------
bool gt_S2DoorToDavisUnlockedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveUnlockDoorToDavisComplete, true, false);
    Wait(2.0, c_timeGame);
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_davis), StringExternal("Param/Value/AE9E9568"));
    libHots_gf_StorePingForUnit(gv_davis, 1, PingLastCreated());
    TransmissionClear(gv_s2_SecurityRoomTransmission);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BC4AA4F1"), null, PointFromId(662280969));
    TriggerExecute(gt_ObjectiveArrestGeneralDavisCreate, true, false);
    ObjectiveSetLast(gv_objectiveDestroyZergBase);
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00078", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00079", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DoorToDavisUnlockedQ_Init () {
    gt_S2DoorToDavisUnlockedQ = TriggerCreate("gt_S2DoorToDavisUnlockedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Introduce Bonus Objectives Q
//--------------------------------------------------------------------------------------------------
bool gt_S2IntroduceBonusObjectivesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveObtainBlinkSuitCreate, true, false);
    TriggerExecute(gt_ObjectiveObtainArmyTechCreate, true, false);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5509B27F"), null, UnitFromId(1394879743));
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(1394879743)), StringExternal("Param/Value/E3A0DED2"));
    libHots_gf_StorePingForUnit(UnitFromId(1394879743), 1, PingLastCreated());
    Wait(0.5, c_timeGame);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/864F257E"), null, UnitFromId(583675857));
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(583675857)), StringExternal("Param/Value/BDB7C465"));
    libHots_gf_StorePingForUnit(UnitFromId(583675857), 1, PingLastCreated());
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00080", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00081", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2IntroduceBonusObjectivesQ_Init () {
    gt_S2IntroduceBonusObjectivesQ = TriggerCreate("gt_S2IntroduceBonusObjectivesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Introduce Bonus Objective Blink Suit Q
//--------------------------------------------------------------------------------------------------
bool gt_S2IntroduceBonusObjectiveBlinkSuitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BDE293FE"), null, UnitFromId(1394879743));
    TriggerExecute(gt_ObjectiveObtainBlinkSuitCreate, true, false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(1394879743), 1));
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(1394879743)), StringExternal("Param/Value/63AA1184"));
    libHots_gf_StorePingForUnit(UnitFromId(1394879743), 1, PingLastCreated());
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00083", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00082", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2IntroduceBonusObjectiveBlinkSuitQ_Init () {
    gt_S2IntroduceBonusObjectiveBlinkSuitQ = TriggerCreate("gt_S2IntroduceBonusObjectiveBlinkSuitQ_Func");
    TriggerAddEventTimePeriodic(gt_S2IntroduceBonusObjectiveBlinkSuitQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Introduce Bonus Objective Army Technology Q
//--------------------------------------------------------------------------------------------------
bool gt_S2IntroduceBonusObjectiveArmyTechnologyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F55F9781"), null, UnitFromId(583675857));
    TriggerExecute(gt_ObjectiveObtainArmyTechCreate, true, false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(583675857), 1));
    libNCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(583675857)), StringExternal("Param/Value/02960A1F"));
    libHots_gf_StorePingForUnit(UnitFromId(583675857), 1, PingLastCreated());
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00086", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00087", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2IntroduceBonusObjectiveArmyTechnologyQ_Init () {
    gt_S2IntroduceBonusObjectiveArmyTechnologyQ = TriggerCreate("gt_S2IntroduceBonusObjectiveArmyTechnologyQ_Func");
    TriggerAddEventTimePeriodic(gt_S2IntroduceBonusObjectiveArmyTechnologyQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Acquires Blink Suit Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaAcquiresBlinkSuitQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitPoint = UnitGetPosition(UnitFromId(1394879743));

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_nova), UnitGetPosition(UnitFromId(1394879743))) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(UnitFromId(1394879743), false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(1394879743), 1));
    libNCMI_gf_LockUnlockNovaEquipment(false, "EQPSuitItem5");
    TriggerExecute(gt_ObjectiveObtainBlinkSuitComplete, true, false);
    libNCMI_gf_AddMissionTipCampaign("Blink Suit");
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/803EA958"), null, lv_unitPoint);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_unitPoint, 6.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00084", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00085", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaAcquiresBlinkSuitQ_Init () {
    gt_S2NovaAcquiresBlinkSuitQ = TriggerCreate("gt_S2NovaAcquiresBlinkSuitQ_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaAcquiresBlinkSuitQ, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Acquires Army Technology Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaAcquiresArmyTechnologyQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitPoint = UnitGetPosition(UnitFromId(583675857));

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_nova), UnitGetPosition(UnitFromId(583675857))) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(UnitFromId(583675857), false);
    PingDestroy(libHots_gf_PingStoredForUnit(UnitFromId(583675857), 1));
    TriggerExecute(gt_ObjectiveObtainArmyTechComplete, true, false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D988795B"), null, lv_unitPoint);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_unitPoint, 6.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00088", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00089", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaAcquiresArmyTechnologyQ_Init () {
    gt_S2NovaAcquiresArmyTechnologyQ = TriggerCreate("gt_S2NovaAcquiresArmyTechnologyQ_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaAcquiresArmyTechnologyQ, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Acquires Experimental Weapon Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaAcquiresExperimentalWeaponQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitPoint = UnitGetPosition(UnitFromId(1659311099));

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(gv_nova), UnitGetPosition(UnitFromId(1659311099))) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(UnitFromId(1659311099), false);
    libNCMI_gf_LockUnlockNovaEquipment(false, "EQPWeaponItem5");
    TriggerExecute(gt_ObjectiveObtainExperimentalWeaponComplete, true, false);
    libNCMI_gf_AddMissionTipCampaign("Blazefire Gunblade");
    TransmissionClear(gv_s2_OverheardConversationTransmission04);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E7F33B2A"), null, lv_unitPoint);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_unitPoint, 6.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00090", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaAcquiresExperimentalWeaponQ_Init () {
    gt_S2NovaAcquiresExperimentalWeaponQ = TriggerCreate("gt_S2NovaAcquiresExperimentalWeaponQ_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaAcquiresExperimentalWeaponQ, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Secret Room Locked Door Hint Q
//--------------------------------------------------------------------------------------------------
bool gt_S2SecretRoomLockedDoorHintQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(UnitFromId(1187488370)) == "Tarsonis_DoorNW"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00117", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2SecretRoomLockedDoorHintQ_Init () {
    gt_S2SecretRoomLockedDoorHintQ = TriggerCreate("gt_S2SecretRoomLockedDoorHintQ_Func");
    TriggerAddEventUnitRegion(gt_S2SecretRoomLockedDoorHintQ, UnitRefFromVariable("gv_nova"), RegionFromId(128), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Secret Room Blink Gap Hint Q
//--------------------------------------------------------------------------------------------------
bool gt_S2SecretRoomBlinkGapHintQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNovC_gf_NovaActiveEquipmentInSlot("EQPSlotSuit") != "EQPSuitItem5"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00118", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2SecretRoomBlinkGapHintQ_Init () {
    gt_S2SecretRoomBlinkGapHintQ = TriggerCreate("gt_S2SecretRoomBlinkGapHintQ_Func");
    TriggerAddEventUnitRegion(gt_S2SecretRoomBlinkGapHintQ, UnitRefFromVariable("gv_nova"), RegionFromId(129), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Stone AI
//--------------------------------------------------------------------------------------------------
bool gt_S3StoneAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyTargetGroup;
    unit lv_closestEnemyTargetUnit;
    string lv_movePointString;
    point lv_movePoint;
    int lv_movePointIter;

    // Automatic Variable Declarations
    unitgroup auto0123F39B_g;
    int auto0123F39B_u;
    unit auto0123F39B_var;
    const int auto928839BD_ae = 5;
    const int auto928839BD_ai = 1;

    // Variable Initialization
    lv_enemyTargetGroup = UnitGroupEmpty();
    lv_movePointString = "S3 - Stone Move Target 0";

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_nova) == true) && (UnitIsAlive(gv_stone) == true)) {
        lv_enemyTargetGroup = UnitGroupEmpty();
        auto0123F39B_g = gv_s3_PlayerUnitGroup;
        auto0123F39B_u = UnitGroupCount(auto0123F39B_g, c_unitCountAll);
        for (;; auto0123F39B_u -= 1) {
            auto0123F39B_var = UnitGroupUnitFromEnd(auto0123F39B_g, auto0123F39B_u);
            if (auto0123F39B_var == null) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(auto0123F39B_var, gv_pLAYER_05_DEFENDERS) == true)) {
                UnitGroupAdd(lv_enemyTargetGroup, auto0123F39B_var);
            }

        }
        if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) > 0)) {
            lv_closestEnemyTargetUnit = UnitGroupClosestToPoint(lv_enemyTargetGroup, UnitGetPosition(gv_stone));
            if ((DistanceBetweenPoints(UnitGetPosition(lv_closestEnemyTargetUnit), UnitGetPosition(gv_stone)) <= 10.0) && (TimerGetRemaining(gv_s3_SnipeTimer) == 0.0)) {
                gf_S3StoneCastsSnipe(lv_closestEnemyTargetUnit);
            }
            else {
                if ((TimerGetRemaining(gv_s3_EMPTimer) == 0.0) && (UnitGroupCount(gv_s3_PlayerHoloDecoyTargetsGroup, c_unitCountAlive) > 0)) {
                    lv_closestEnemyTargetUnit = UnitGroupClosestToPoint(gv_s3_PlayerHoloDecoyTargetsGroup, UnitGetPosition(gv_stone));
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_closestEnemyTargetUnit), UnitGetPosition(gv_stone)) <= 10.0)) {
                        gf_S3StoneCastsEMP(UnitGetPosition(lv_closestEnemyTargetUnit));
                    }

                }
                else {
                    if ((libNCMI_gf_StealthAIGetStealthAIUnitCasting(gv_stone) == libNCMI_ge_StealthAIUnitCasting_NotCasting)) {
                        UnitIssueOrder(gv_stone, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_closestEnemyTargetUnit)), c_orderQueueReplace);
                    }

                }
            }
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_nova), UnitGetPosition(gv_stone)) <= 10.0) && (VisIsVisibleForPlayer(gv_pLAYER_05_DEFENDERS, UnitGetPosition(gv_nova)) == true) && (TimerGetRemaining(gv_s3_EMPTimer) == 0.0) && (UnitTestState(gv_nova, c_unitStateCloaked) == true)) {
                gf_S3StoneCastsEMP(UnitGetPosition(gv_nova));
            }
            else {
                lv_enemyTargetGroup = UnitGroupEmpty();
                UnitGroupAddUnitGroup(lv_enemyTargetGroup, UnitGroupFilter(null, c_playerAny, gv_s3_PlayerUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                lv_closestEnemyTargetUnit = UnitGroupClosestToPoint(lv_enemyTargetGroup, UnitGetPosition(gv_stone));
                if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) > 0) && (lv_closestEnemyTargetUnit != null)) {
                    if ((PointPathingCost(UnitGetPosition(gv_stone), UnitGetPosition(lv_closestEnemyTargetUnit)) > 3) && (VisIsVisibleForPlayer(gv_pLAYER_05_DEFENDERS, UnitGetPosition(lv_closestEnemyTargetUnit)) == true)) {
                        lv_movePoint = UnitGetPosition(gv_stone);
                    }
                    else {
                        lv_movePoint = PointFromId(598453928);
                    }
                    lv_movePointIter = 1;
                    for ( ; ( (auto928839BD_ai >= 0 && lv_movePointIter <= auto928839BD_ae) || (auto928839BD_ai < 0 && lv_movePointIter >= auto928839BD_ae) ) ; lv_movePointIter += auto928839BD_ai ) {
                        if ((PointPathingCost(PointFromName((lv_movePointString + IntToString(lv_movePointIter))), UnitGetPosition(lv_closestEnemyTargetUnit)) == FixedToInt(DistanceBetweenPoints(PointFromName((lv_movePointString + IntToString(lv_movePointIter))), UnitGetPosition(lv_closestEnemyTargetUnit)))) && (PointPathingCost(PointFromName((lv_movePointString + IntToString(lv_movePointIter))), UnitGetPosition(lv_closestEnemyTargetUnit)) < PointPathingCost(lv_movePoint, UnitGetPosition(lv_closestEnemyTargetUnit)))) {
                            lv_movePoint = PointFromName((lv_movePointString + IntToString(lv_movePointIter)));
                        }

                    }
                    if ((TimerGetRemaining(gv_s3_BlinkTimer) == 0.0)) {
                        gf_S3StoneCastsBlink(lv_movePoint);
                    }

                    if ((libNCMI_gf_StealthAIGetStealthAIUnitCasting(gv_stone) == libNCMI_ge_StealthAIUnitCasting_NotCasting)) {
                        UnitIssueOrder(gv_stone, OrderTargetingPoint(AbilityCommand("attack", 0), lv_movePoint), c_orderQueueReplace);
                        UnitIssueOrder(gv_stone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                    }

                }

            }
        }
        Wait(0.0625, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3StoneAI_Init () {
    gt_S3StoneAI = TriggerCreate("gt_S3StoneAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Stone Blinks To Safety To Use Defensive Matrix
//--------------------------------------------------------------------------------------------------
bool gt_S3StoneBlinksToSafetyToUseDefensiveMatrix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyTargetGroup;
    unit lv_closestEnemyTargetUnit;
    string lv_movePointString;
    point lv_movePoint;
    int lv_movePointIter;

    // Automatic Variable Declarations
    unitgroup auto42D7683A_g;
    int auto42D7683A_u;
    unit auto42D7683A_var;

    // Variable Initialization
    lv_enemyTargetGroup = UnitGroupEmpty();
    lv_movePointString = "S3 - Stone Move Target 0";

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_stone, c_unitPropShields, c_unitPropCurrent) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 2.0, 1.0), c_timeAI);
    if ((UnitGetPropertyFixed(gv_stone, c_unitPropShields, c_unitPropCurrent) == 0.0)) {
        lv_enemyTargetGroup = UnitGroupEmpty();
        auto42D7683A_g = gv_s3_PlayerUnitGroup;
        auto42D7683A_u = UnitGroupCount(auto42D7683A_g, c_unitCountAll);
        for (;; auto42D7683A_u -= 1) {
            auto42D7683A_var = UnitGroupUnitFromEnd(auto42D7683A_g, auto42D7683A_u);
            if (auto42D7683A_var == null) { break; }
            UnitGroupAdd(lv_enemyTargetGroup, auto42D7683A_var);
        }
        lv_closestEnemyTargetUnit = UnitGroupClosestToPoint(lv_enemyTargetGroup, UnitGetPosition(gv_stone));
        if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) > 0) && (lv_closestEnemyTargetUnit != null)) {
            if ((libNtve_gf_UnitInRegion(lv_closestEnemyTargetUnit, RegionFromId(99)) == true)) {
                lv_movePoint = PointFromId(175469557);
            }
            else if ((libNtve_gf_UnitInRegion(lv_closestEnemyTargetUnit, RegionFromId(102)) == true)) {
                lv_movePoint = PointFromId(598453928);
            }
            else if ((libNtve_gf_UnitInRegion(lv_closestEnemyTargetUnit, RegionFromId(130)) == true)) {
                lv_movePoint = PointFromId(1536467895);
            }
            else if ((libNtve_gf_UnitInRegion(lv_closestEnemyTargetUnit, RegionFromId(132)) == true)) {
                lv_movePoint = PointFromId(1310305091);
            }
            gf_S3StoneCastsBlink(lv_movePoint);
            libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_Casting);
            while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (DistanceBetweenPoints(UnitGetPosition(gv_stone), lv_movePoint) >= 1)) {
                UnitIssueOrder(gv_stone, OrderTargetingPoint(AbilityCommand("move", 0), lv_movePoint), c_orderQueueReplace);
                UnitIssueOrder(gv_stone, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                Wait(0.0625, c_timeAI);
            }
            libNCMI_gf_StealthAISetStealthAIUnitCasting(gv_stone, libNCMI_ge_StealthAIUnitCasting_NotCasting);
            gf_S3StoneCastsDefensiveMatrix();
        }

    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3StoneBlinksToSafetyToUseDefensiveMatrix_Init () {
    gt_S3StoneBlinksToSafetyToUseDefensiveMatrix = TriggerCreate("gt_S3StoneBlinksToSafetyToUseDefensiveMatrix_Func");
    TriggerAddEventTimePeriodic(gt_S3StoneBlinksToSafetyToUseDefensiveMatrix, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Stone Dominated
//--------------------------------------------------------------------------------------------------
bool gt_S3StoneDominated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_stone, "NovaDominationStoneBehavior", gv_nova, 1);
    Wait(1.0, c_timeAI);
    TriggerExecute(gt_S3StoneDominationBrokenTransmissionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3StoneDominated_Init () {
    gt_S3StoneDominated = TriggerCreate("gt_S3StoneDominated_Func");
    TriggerAddEventUnitBehaviorChange(gt_S3StoneDominated, UnitRefFromVariable("gv_stone"), "NovaDomination", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Stone Domination Broken Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3StoneDominationBrokenTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00123", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3StoneDominationBrokenTransmissionQ_Init () {
    gt_S3StoneDominationBrokenTransmissionQ = TriggerCreate("gt_S3StoneDominationBrokenTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Stone Conversation Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3StoneConversationTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_stone, "Mission_Nova07|Line00142", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00143", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_stone, "Mission_Nova07|Line00144", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3StoneConversationTransmissionQ_Init () {
    gt_S3StoneConversationTransmissionQ = TriggerCreate("gt_S3StoneConversationTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Turn On Alarm Bot Patrols
//--------------------------------------------------------------------------------------------------
bool gt_S3TurnOnAlarmBotPatrols_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC89A3AC2_n;
    int autoC89A3AC2_i;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((UnitGetPropertyFixed(gv_stone, c_unitPropLifePercent, c_unitPropCurrent) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    autoC89A3AC2_n = libLotv_gf_DifficultyValueInt2(2, 2, 4, 4);
    for (autoC89A3AC2_i = 1; autoC89A3AC2_i <= autoC89A3AC2_n; autoC89A3AC2_i += 1) {
        if (gv_s3_AlarmBotSpawnPointIter >= 2) {
            gv_s3_AlarmBotSpawnPointIter = 1;
        }
        else {
            gv_s3_AlarmBotSpawnPointIter = gv_s3_AlarmBotSpawnPointIter + 1;
        }
        gf_S3SpawnAlarmBotPatrol(gv_s3_AlarmBotSpawnPointIter);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3TurnOnAlarmBotPatrols_Init () {
    gt_S3TurnOnAlarmBotPatrols = TriggerCreate("gt_S3TurnOnAlarmBotPatrols_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Alarm Bot Patrol Dies
//--------------------------------------------------------------------------------------------------
bool gt_S3AlarmBotPatrolDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NovaAlarmBot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_s3_PlayerUnitGroup, EventUnit());
    libNCMI_gf_StealthAIRemoveUnitFromAllStealthAIDefendRegions(EventUnit());
    Wait(libLotv_gf_DifficultyValueFixed2(15.0, 15.0, 12.0, 10.0), c_timeGame);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        if (gv_s3_AlarmBotSpawnPointIter >= 2) {
            gv_s3_AlarmBotSpawnPointIter = 1;
        }
        else {
            gv_s3_AlarmBotSpawnPointIter = gv_s3_AlarmBotSpawnPointIter + 1;
        }
        gf_S3SpawnAlarmBotPatrol(gv_s3_AlarmBotSpawnPointIter);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3AlarmBotPatrolDies_Init () {
    gt_S3AlarmBotPatrolDies = TriggerCreate("gt_S3AlarmBotPatrolDies_Func");
    TriggerAddEventUnitDied(gt_S3AlarmBotPatrolDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Stone Defeated
//--------------------------------------------------------------------------------------------------
bool gt_S3StoneDefeated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto97D00B01_g;
    int auto97D00B01_u;
    unit auto97D00B01_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }

        if (!((UnitHasBehavior2(gv_stone, "NovaStoneIncapacitated") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S3StoneDominated, false);
    TriggerStop(gt_S3StoneDominated);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_stone, 1));
    auto97D00B01_g = UnitGroup("NovaAlarmBot", c_playerAny, RegionFromId(131), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97D00B01_u = UnitGroupCount(auto97D00B01_g, c_unitCountAll);
    for (;; auto97D00B01_u -= 1) {
        auto97D00B01_var = UnitGroupUnitFromEnd(auto97D00B01_g, auto97D00B01_u);
        if (auto97D00B01_var == null) { break; }
        UnitKill(auto97D00B01_var);
    }
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_stone, 1));
    UnitBehaviorAdd(gv_stone, "SuppressCloak", gv_stone, 1);
    GameDestroyEffects(UnitGetPosition(gv_nova), 8.0, 0, "NovaDominationPersistent");
    GameDestroyEffects(UnitGetPosition(gv_stone), 8.0, 0, "NovaDominationPersistent");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3StoneDefeated_Init () {
    gt_S3StoneDefeated = TriggerCreate("gt_S3StoneDefeated_Func");
    TriggerAddEventTimePeriodic(gt_S3StoneDefeated, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Unit Is Dominated
//--------------------------------------------------------------------------------------------------
bool gt_S3UnitIsDominated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_stone))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_s3_PlayerUnitGroup, EventUnit());
    while (!(((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(EventUnit()) == false) || (UnitHasBehavior2(EventUnit(), "NovaDomination") == false)))) {
        Wait(0.25, c_timeGame);
    }
    if ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(EventUnit()) == true)) {
        UnitGroupRemove(gv_s3_PlayerUnitGroup, EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3UnitIsDominated_Init () {
    gt_S3UnitIsDominated = TriggerCreate("gt_S3UnitIsDominated_Func");
    TriggerAddEventUnitBehaviorChange(gt_S3UnitIsDominated, null, "NovaDomination", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Holo Decoy Is Created
//--------------------------------------------------------------------------------------------------
bool gt_S3HoloDecoyIsCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "NovaHoloDecoy"))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_s3_PlayerUnitGroup, EventUnitCreatedUnit());
    Wait(2.0, c_timeGame);
    UnitGroupAdd(gv_s3_PlayerHoloDecoyTargetsGroup, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3HoloDecoyIsCreated_Init () {
    gt_S3HoloDecoyIsCreated = TriggerCreate("gt_S3HoloDecoyIsCreated_Func");
    TriggerAddEventUnitCreated(gt_S3HoloDecoyIsCreated, UnitRefFromVariable("gv_nova"), null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Nova Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatNovaDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/71863E15"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatNovaDies_Init () {
    gt_DefeatNovaDies = TriggerCreate("gt_DefeatNovaDies_Func");
    TriggerAddEventUnitDied(gt_DefeatNovaDies, UnitRefFromVariable("gv_nova"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveNovaMustSurviveFailed, true, false);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/186600BA"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Arrest General Davis Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryArrestGeneralDavisCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }

        if (!((UnitHasBehavior2(gv_stone, "NovaStoneIncapacitated") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryArrestGeneralDavisCompleted_Init () {
    gt_VictoryArrestGeneralDavisCompleted = TriggerCreate("gt_VictoryArrestGeneralDavisCompleted_Func");
    TriggerAddEventTimePeriodic(gt_VictoryArrestGeneralDavisCompleted, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_ChangeUnitDamage(libNCMI_gf_NovaHeroUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    if ((TimerGetRemaining(gv_achievementMasteryTimer) > 0.0) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova07_Mastery", gv_pLAYER_01_USER);
    }

    Wait(2.0, c_timeGame);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    TriggerExecute(gt_ObjectiveDefeatStoneComplete, true, false);
    TriggerExecute(gt_ObjectiveArrestGeneralDavisComplete, true, false);
    TriggerExecute(gt_ObjectiveNovaMustSurviveComplete, true, true);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libNCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyZergBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateCompleted)) {
        libComC_gf_CampaignAwardAchievement("PHNova07", gv_pLAYER_01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievement_UnitKills < 20)) {
        libComC_gf_CampaignAwardAchievement("Anniversary_Nova07", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3F41B413"), IntToText(gv_achievementDominationKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/0BCBA2C3"), IntToText(gv_statDominationsCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/14DB7BB6"), IntToText(gv_statGearSwapCount));
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Dominations
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDominations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitHasBehavior2(libNtve_gf_KillingUnit(), "NovaDomination") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementDominationKills += 1;
    AchievementTermQuantitySet(gv_pLAYER_01_USER, "Nova07_2", gv_achievementDominationKills);
    if ((gv_achievementDominationKills == gv_achievementDominationKillsRequired)) {
        libComC_gf_CampaignAwardAchievement("Nova07_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDominations_Init () {
    gt_AchievementDominations = TriggerCreate("gt_AchievementDominations_Func");
    TriggerAddEventUnitDied(gt_AchievementDominations, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Kill fewer than 20 units
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKillfewerthan20units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievement_UnitKills += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKillfewerthan20units_Init () {
    gt_AchievementKillfewerthan20units = TriggerCreate("gt_AchievementKillfewerthan20units_Func");
    TriggerAddEventUnitDied(gt_AchievementKillfewerthan20units, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNCMI_gf_DisplayMissionTip();
    Wait(libNCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Nova Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNovaMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova07Primary02");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNovaMustSurviveCreate_Init () {
    gt_ObjectiveNovaMustSurviveCreate = TriggerCreate("gt_ObjectiveNovaMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Nova Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNovaMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary02", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNovaMustSurviveComplete_Init () {
    gt_ObjectiveNovaMustSurviveComplete = TriggerCreate("gt_ObjectiveNovaMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Nova Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNovaMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary02", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNovaMustSurviveFailed_Init () {
    gt_ObjectiveNovaMustSurviveFailed = TriggerCreate("gt_ObjectiveNovaMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infiltrate The Facility Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfiltrateTheFacilityCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova07Primary01");
    gv_objectiveDestroyZergBase5 = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfiltrateTheFacilityCreate_Init () {
    gt_ObjectiveInfiltrateTheFacilityCreate = TriggerCreate("gt_ObjectiveInfiltrateTheFacilityCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infiltrate The Facility Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfiltrateTheFacilityComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveInfiltrateTheFacilityCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfiltrateTheFacilityComplete_Init () {
    gt_ObjectiveInfiltrateTheFacilityComplete = TriggerCreate("gt_ObjectiveInfiltrateTheFacilityComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Infiltrate The Facility Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInfiltrateTheFacilityFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveInfiltrateTheFacilityCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInfiltrateTheFacilityFailed_Init () {
    gt_ObjectiveInfiltrateTheFacilityFailed = TriggerCreate("gt_ObjectiveInfiltrateTheFacilityFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Unlock Door To Davis Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUnlockDoorToDavisCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova07Primary03");
    gv_objectiveDestroyZergBase8 = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUnlockDoorToDavisCreate_Init () {
    gt_ObjectiveUnlockDoorToDavisCreate = TriggerCreate("gt_ObjectiveUnlockDoorToDavisCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Unlock Door To Davis Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUnlockDoorToDavisComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveUnlockDoorToDavisCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary03", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUnlockDoorToDavisComplete_Init () {
    gt_ObjectiveUnlockDoorToDavisComplete = TriggerCreate("gt_ObjectiveUnlockDoorToDavisComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Unlock Door To Davis Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUnlockDoorToDavisUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveUnlockDoorToDavisCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova07Primary03", gv_objectiveUnlockDoorToDavisCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUnlockDoorToDavisUpdate_Init () {
    gt_ObjectiveUnlockDoorToDavisUpdate = TriggerCreate("gt_ObjectiveUnlockDoorToDavisUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Unlock Door To Davis Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUnlockDoorToDavisFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveUnlockDoorToDavisCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary03", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUnlockDoorToDavisFailed_Init () {
    gt_ObjectiveUnlockDoorToDavisFailed = TriggerCreate("gt_ObjectiveUnlockDoorToDavisFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defeat Stone Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefeatStoneCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova07Primary05");
    gv_objectiveDestroyZergBase9 = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefeatStoneCreate_Init () {
    gt_ObjectiveDefeatStoneCreate = TriggerCreate("gt_ObjectiveDefeatStoneCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defeat Stone Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefeatStoneComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDefeatStoneCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary05", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefeatStoneComplete_Init () {
    gt_ObjectiveDefeatStoneComplete = TriggerCreate("gt_ObjectiveDefeatStoneComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defeat Stone Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefeatStoneFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDefeatStoneCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary05", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefeatStoneFailed_Init () {
    gt_ObjectiveDefeatStoneFailed = TriggerCreate("gt_ObjectiveDefeatStoneFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Arrest General Davis Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArrestGeneralDavisCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova07Primary04");
    gv_objectiveDestroyZergBase7 = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArrestGeneralDavisCreate_Init () {
    gt_ObjectiveArrestGeneralDavisCreate = TriggerCreate("gt_ObjectiveArrestGeneralDavisCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Arrest General Davis Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArrestGeneralDavisComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveArrestGeneralDavisCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary04", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArrestGeneralDavisComplete_Init () {
    gt_ObjectiveArrestGeneralDavisComplete = TriggerCreate("gt_ObjectiveArrestGeneralDavisComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Arrest General Davis Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArrestGeneralDavisFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveArrestGeneralDavisCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Primary04", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArrestGeneralDavisFailed_Init () {
    gt_ObjectiveArrestGeneralDavisFailed = TriggerCreate("gt_ObjectiveArrestGeneralDavisFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Investigate Power Signal Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInvestigatePowerSignalCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova07Bonus04");
    gv_objectiveDestroyZergBase6 = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInvestigatePowerSignalCreate_Init () {
    gt_ObjectiveInvestigatePowerSignalCreate = TriggerCreate("gt_ObjectiveInvestigatePowerSignalCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Investigate Power Signal Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInvestigatePowerSignalComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveInvestigatePowerSignalCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Bonus04", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInvestigatePowerSignalComplete_Init () {
    gt_ObjectiveInvestigatePowerSignalComplete = TriggerCreate("gt_ObjectiveInvestigatePowerSignalComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Investigate Power Signal Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveInvestigatePowerSignalFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveInvestigatePowerSignalCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Bonus04", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveInvestigatePowerSignalFailed_Init () {
    gt_ObjectiveInvestigatePowerSignalFailed = TriggerCreate("gt_ObjectiveInvestigatePowerSignalFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Obtain Blink Suit Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveObtainBlinkSuitCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCMMI_gf_CreateObjectiveCampaign("Nova07Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveObtainBlinkSuitCreate_Init () {
    gt_ObjectiveObtainBlinkSuitCreate = TriggerCreate("gt_ObjectiveObtainBlinkSuitCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Obtain Blink Suit Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveObtainBlinkSuitComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveObtainBlinkSuitCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Bonus01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveObtainBlinkSuitComplete_Init () {
    gt_ObjectiveObtainBlinkSuitComplete = TriggerCreate("gt_ObjectiveObtainBlinkSuitComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Obtain Blink Suit Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveObtainBlinkSuitFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveObtainBlinkSuitCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Bonus01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveObtainBlinkSuitFailed_Init () {
    gt_ObjectiveObtainBlinkSuitFailed = TriggerCreate("gt_ObjectiveObtainBlinkSuitFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Obtain Army Tech Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveObtainArmyTechCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCMMI_gf_CreateObjectiveCampaign("Nova07Bonus02");
    gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveObtainArmyTechCreate_Init () {
    gt_ObjectiveObtainArmyTechCreate = TriggerCreate("gt_ObjectiveObtainArmyTechCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Obtain Army Tech Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveObtainArmyTechComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveObtainArmyTechCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Bonus02", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveObtainArmyTechComplete_Init () {
    gt_ObjectiveObtainArmyTechComplete = TriggerCreate("gt_ObjectiveObtainArmyTechComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Obtain Army Tech Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveObtainArmyTechFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveObtainArmyTechCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Bonus02", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveObtainArmyTechFailed_Init () {
    gt_ObjectiveObtainArmyTechFailed = TriggerCreate("gt_ObjectiveObtainArmyTechFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Obtain Experimental Weapon Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveObtainExperimentalWeaponCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCMMI_gf_CreateObjectiveCampaign("Nova07Bonus03");
    gv_objectiveRescueStalkers3 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveObtainExperimentalWeaponCreate_Init () {
    gt_ObjectiveObtainExperimentalWeaponCreate = TriggerCreate("gt_ObjectiveObtainExperimentalWeaponCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Obtain Experimental Weapon Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveObtainExperimentalWeaponComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveObtainExperimentalWeaponCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Bonus03", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveObtainExperimentalWeaponComplete_Init () {
    gt_ObjectiveObtainExperimentalWeaponComplete = TriggerCreate("gt_ObjectiveObtainExperimentalWeaponComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Obtain Experimental Weapon Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveObtainExperimentalWeaponFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveObtainExperimentalWeaponCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova07Bonus03", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveObtainExperimentalWeaponFailed_Init () {
    gt_ObjectiveObtainExperimentalWeaponFailed = TriggerCreate("gt_ObjectiveObtainExperimentalWeaponFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame01IntroQ);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene01, true, true);
    TriggerExecute(gt_BriefingScene02, true, true);
    TriggerExecute(gt_BriefingScene03, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8F55E0E4_g;
    int auto8F55E0E4_u;
    unit auto8F55E0E4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8F55E0E4_g = UnitGroup(null, c_playerAny, RegionFromId(156), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F55E0E4_u = UnitGroupCount(auto8F55E0E4_g, c_unitCountAll);
    for (;; auto8F55E0E4_u -= 1) {
        auto8F55E0E4_var = UnitGroupUnitFromEnd(auto8F55E0E4_g, auto8F55E0E4_u);
        if (auto8F55E0E4_var == null) { break; }
        UnitCreate(1, UnitGetType(auto8F55E0E4_var), c_unitCreateIgnorePlacement, UnitGetOwner(auto8F55E0E4_var), UnitGetPosition(auto8F55E0E4_var), UnitGetFacing(auto8F55E0E4_var));
        UnitRemove(auto8F55E0E4_var);
    }
    UnitCreate(1, "NovaTripWire", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, UnitGetPosition(UnitFromId(1567000892)), UnitGetFacing(UnitFromId(1567000892)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 1.0, 315.0)), c_orderQueueReplace);
    UnitRemove(UnitFromId(1567000892));
    UnitCreate(1, "NovaTripWire", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, UnitGetPosition(UnitFromId(1436445978)), UnitGetFacing(UnitFromId(1436445978)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireSmall", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 1.0, 135.0)), c_orderQueueReplace);
    UnitRemove(UnitFromId(1436445978));
    UnitCreate(1, "NovaTripWire", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, UnitGetPosition(UnitFromId(449910981)), UnitGetFacing(UnitFromId(449910981)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 1.0, 135.0)), c_orderQueueReplace);
    UnitRemove(UnitFromId(449910981));
    UnitCreate(1, "NovaTripWire", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, UnitGetPosition(UnitFromId(429896153)), UnitGetFacing(UnitFromId(429896153)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("NovaCreateTripWireMedium", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 1.0, 315.0)), c_orderQueueReplace);
    UnitRemove(UnitFromId(429896153));
    UnitCreate(1, "HellionTank", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, UnitGetPosition(UnitFromId(1009849234)), UnitGetFacing(UnitFromId(1009849234)));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(92834476)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(1049663334)), c_orderQueueAddToEnd);
    UnitRemove(UnitFromId(1009849234));
    GameSetLighting(gv_lighting_Facility, 0.0);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2106314389), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1284399941), 15.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova07_01");
    Wait(15.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01_Init () {
    gt_BriefingScene01 = TriggerCreate("gt_BriefingScene01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "GeneralDavis", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(263049184), 135.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply Slow");
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.8);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetWalkAnimMoveSpeed 0.6992");
    UnitRemove(UnitFromId(582148282));
    GameSetLighting(gv_lighting_Facility, 0.0);
    Wait(2.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.0, 0.0, 10.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(770047202), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova07_02");
    Wait(3.0, c_timeReal);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1863115017)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(34359069), 0.5, 75.0, 10, true);
    Wait(8.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02_Init () {
    gt_BriefingScene02 = TriggerCreate("gt_BriefingScene02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting(gv_lighting_Sewers, 0.0);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_BriefingScene03Setup, true, false);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.0, 0.0, 10.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(19475926), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(58011438), 10.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova07_03");
    Wait(12.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03_Init () {
    gt_BriefingScene03 = TriggerCreate("gt_BriefingScene03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03 - Setup
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03Setup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Separatist", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(533878966));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 20.0, PointGetFacing(PointFromId(533878966)))), c_orderQueueReplace);
    UnitBehaviorAdd(UnitLastCreated(), "WalkSlow", UnitLastCreated(), 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "Separatist", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(2005310110));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 20.0, PointGetFacing(PointFromId(2005310110)))), c_orderQueueReplace);
    UnitBehaviorAdd(UnitLastCreated(), "WalkSlow", UnitLastCreated(), 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "Separatist", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(1914428685));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 20.0, PointGetFacing(PointFromId(1914428685)))), c_orderQueueReplace);
    UnitBehaviorAdd(UnitLastCreated(), "WalkSlow", UnitLastCreated(), 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(39620412));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 20.0, PointGetFacing(PointFromId(39620412)))), c_orderQueueReplace);
    UnitBehaviorAdd(UnitLastCreated(), "WalkSlow", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03Setup_Init () {
    gt_BriefingScene03Setup = TriggerCreate("gt_BriefingScene03Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4EB42572_g;
    int auto4EB42572_u;
    unit auto4EB42572_var;
    unitgroup autoE8C2506F_g;
    int autoE8C2506F_u;
    unit autoE8C2506F_var;
    unitgroup autoF37DE096_g;
    int autoF37DE096_u;
    unit autoF37DE096_var;
    unitgroup auto4E7061AF_g;
    int auto4E7061AF_u;
    unit auto4E7061AF_var;
    unitgroup auto30CF1C5B_g;
    int auto30CF1C5B_u;
    unit auto30CF1C5B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    SoundSetReverbForPlayers(PlayerGroupAll(), "Off", 1.0, true, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionEntireMap());
    UnitRemove(gv_dominatedBuddyUnit);
    auto4EB42572_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4EB42572_u = UnitGroupCount(auto4EB42572_g, c_unitCountAll);
    for (;; auto4EB42572_u -= 1) {
        auto4EB42572_var = UnitGroupUnitFromEnd(auto4EB42572_g, auto4EB42572_u);
        if (auto4EB42572_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto4EB42572_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto4EB42572_var);
            libNtve_gf_PauseUnit(auto4EB42572_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoE8C2506F_g = gv_cinematicHiddenUnits;
    autoE8C2506F_u = UnitGroupCount(autoE8C2506F_g, c_unitCountAll);
    for (;; autoE8C2506F_u -= 1) {
        autoE8C2506F_var = UnitGroupUnitFromEnd(autoE8C2506F_g, autoE8C2506F_u);
        if (autoE8C2506F_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE8C2506F_var, false);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(578590398));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    gv_midCinematicNova = UnitLastCreated();
    UnitSetPosition(gv_midCinematicNova, PointFromId(727873911), false);
    UnitSetFacing(gv_midCinematicNova, 275.0, 0.0);
    autoF37DE096_g = UnitGroup(null, c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF37DE096_u = UnitGroupCount(autoF37DE096_g, c_unitCountAll);
    for (;; autoF37DE096_u -= 1) {
        autoF37DE096_var = UnitGroupUnitFromEnd(autoF37DE096_g, autoF37DE096_u);
        if (autoF37DE096_var == null) { break; }
        if ((autoF37DE096_var == UnitFromId(582148282))) {
            continue;
        }
        else {
            libNtve_gf_ShowHideUnit(autoF37DE096_var, true);
        }
    }
    auto4E7061AF_g = UnitGroup(null, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4E7061AF_u = UnitGroupCount(auto4E7061AF_g, c_unitCountAll);
    for (;; auto4E7061AF_u -= 1) {
        auto4E7061AF_var = UnitGroupUnitFromEnd(auto4E7061AF_g, auto4E7061AF_u);
        if (auto4E7061AF_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4E7061AF_var, true);
    }
    auto30CF1C5B_g = UnitGroup(null, c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto30CF1C5B_u = UnitGroupCount(auto30CF1C5B_g, c_unitCountAll);
    for (;; auto30CF1C5B_u -= 1) {
        auto30CF1C5B_var = UnitGroupUnitFromEnd(auto30CF1C5B_g, auto30CF1C5B_u);
        if (auto30CF1C5B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto30CF1C5B_var, true);
    }
    libNtve_gf_ShowHideUnit(gv_nova, false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "GeneralDavis", c_unitCreateIgnorePlacement, gv_pLAYER_05_DEFENDERS, PointFromId(828419171));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_midDavis = UnitLastCreated();
    ActorSend(libNtve_gf_MainActorofUnit(gv_midDavis), "AnimGroupApply Slow");
    UnitSetPropertyFixed(gv_midDavis, c_unitPropMovementSpeed, 0.8);
    ActorSend(libNtve_gf_MainActorofUnit(gv_midDavis), "SetWalkAnimMoveSpeed 0.6992");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1890738550), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    GameSetLighting(gv_lighting_Facility, 0.0);
    TriggerExecute(gt_SetupStage02Ambiences, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1708297641), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova07|Line00051", true), c_soundIndexAny)) + 3.0), -1, 50.0, true);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(gv_midCinematicNova, "Mission_Nova07|Line00051", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_MidDavis, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(82805868), 0.0, 50.0, 10, true);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_CS_CrowdCheering_OneShot", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(682325875), 8.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00052", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.0, 0.0, 8.0);
    TriggerExecute(gt_MidGuardRoomAnimate1, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1381733451), 0.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00053", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_MidGuardRoomAnimate2, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(286829518), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1916552106), 5.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00054", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_midCinematicNova, "Mission_Nova07|Line00055", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraShakeStop(gv_pLAYER_01_USER);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto543BD75D_g;
    int auto543BD75D_u;
    unit auto543BD75D_var;
    unitgroup autoE5DC8749_g;
    int autoE5DC8749_u;
    unit autoE5DC8749_var;
    unitgroup auto4E718302_g;
    int auto4E718302_u;
    unit auto4E718302_var;
    unitgroup auto97D2504F_g;
    int auto97D2504F_u;
    unit auto97D2504F_var;
    unitgroup auto0E311648_g;
    int auto0E311648_u;
    unit auto0E311648_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    auto543BD75D_g = gv_cinematicTempUnits;
    auto543BD75D_u = UnitGroupCount(auto543BD75D_g, c_unitCountAll);
    for (;; auto543BD75D_u -= 1) {
        auto543BD75D_var = UnitGroupUnitFromEnd(auto543BD75D_g, auto543BD75D_u);
        if (auto543BD75D_var == null) { break; }
        UnitRemove(auto543BD75D_var);
    }
    autoE5DC8749_g = gv_cinematicHiddenUnits;
    autoE5DC8749_u = UnitGroupCount(autoE5DC8749_g, c_unitCountAll);
    for (;; autoE5DC8749_u -= 1) {
        autoE5DC8749_var = UnitGroupUnitFromEnd(autoE5DC8749_g, autoE5DC8749_u);
        if (autoE5DC8749_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE5DC8749_var, true);
    }
    auto4E718302_g = gv_cinematicPausedUnits;
    auto4E718302_u = UnitGroupCount(auto4E718302_g, c_unitCountAll);
    for (;; auto4E718302_u -= 1) {
        auto4E718302_var = UnitGroupUnitFromEnd(auto4E718302_g, auto4E718302_u);
        if (auto4E718302_var == null) { break; }
        libNtve_gf_PauseUnit(auto4E718302_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    TriggerExecute(gt_SetupStage02Ambiences, true, false);
    CameraShakeStop(gv_pLAYER_01_USER);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    ObjectiveShow(gv_objectiveDestroyZergBase5, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyZergBase, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyZergBase6, PlayerGroupAll(), false);
    RegionPlayableMapSet(RegionFromId(2));
    GameSetLighting(gv_lighting_Facility, 0.0);
    gv_currentStage = 2;
    UnitSetPosition(gv_nova, PointFromId(881011215), false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPropertyFixed(gv_nova, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_nova, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_nova, c_unitPropShieldsPercent, 100.0);
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitUncommandable(gv_nova, false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(2046454341)), 0.0);
    UnitSelect(gv_nova, gv_pLAYER_01_USER, true);
    libNtve_gf_PauseUnit(gv_nova, false);
    libNtve_gf_ShowHideUnit(UnitFromId(808444997), true);
    libNtve_gf_ShowHideUnit(UnitFromId(2038392585), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1056440834), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1886407), true);
    libNtve_gf_ShowHideUnit(UnitFromId(951241160), true);
    auto97D2504F_g = UnitGroup("NovaResupplyCrate", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97D2504F_u = UnitGroupCount(auto97D2504F_g, c_unitCountAll);
    for (;; auto97D2504F_u -= 1) {
        auto97D2504F_var = UnitGroupUnitFromEnd(auto97D2504F_g, auto97D2504F_u);
        if (auto97D2504F_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto97D2504F_var, true, gv_pLAYER_01_USER);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto97D2504F_var), 2.0), 2.0, false);
    }
    auto0E311648_g = gv_stage2PausedUnits;
    auto0E311648_u = UnitGroupCount(auto0E311648_g, c_unitCountAll);
    for (;; auto0E311648_u -= 1) {
        auto0E311648_var = UnitGroupUnitFromEnd(auto0E311648_g, auto0E311648_u);
        if (auto0E311648_var == null) { break; }
        libNtve_gf_PauseUnit(auto0E311648_var, false);
    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (CameraInfoGetValue(CameraInfoFromId(1775932060), c_cameraValueDistance) + 8.0), CameraInfoGetValue(CameraInfoFromId(1775932060), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1775932060)), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Davis
//--------------------------------------------------------------------------------------------------
bool gt_MidDavis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_midDavis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(684433951)), c_orderQueueReplace);
    UnitIssueOrder(gv_midDavis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(828419171)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidDavis_Init () {
    gt_MidDavis = TriggerCreate("gt_MidDavis_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Guard Room Animate 1
//--------------------------------------------------------------------------------------------------
bool gt_MidGuardRoomAnimate1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[3] lv_scientists;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "ScientistOfficer", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(1326065923));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_scientists[1] = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "DOMScientist", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(1902300242));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_scientists[2] = UnitLastCreated();
    UnitIssueOrder(lv_scientists[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2074246820)), c_orderQueueReplace);
    Wait(1.2, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(lv_scientists[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(120153383)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidGuardRoomAnimate1_Init () {
    gt_MidGuardRoomAnimate1 = TriggerCreate("gt_MidGuardRoomAnimate1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Guard Room Animate 2
//--------------------------------------------------------------------------------------------------
bool gt_MidGuardRoomAnimate2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scientists;
    unit[3] lv_ghost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "ScientistOfficer", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(1963346807));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_scientists = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(1420184213));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_ghost[1] = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_04_DEFENDERS, PointFromId(1802507886));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_ghost[2] = UnitLastCreated();
    Wait(1.35, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        UnitIssueOrder(lv_ghost[1], Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    }

    Wait(1.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(lv_scientists, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(822477415)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        UnitIssueOrder(lv_ghost[2], Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidGuardRoomAnimate2_Init () {
    gt_MidGuardRoomAnimate2 = TriggerCreate("gt_MidGuardRoomAnimate2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_Mid2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_Mid2Setup, true, true);
    TriggerExecute(gt_Mid2Cinematic, true, true);
    TriggerExecute(gt_Mid2CinematicEnd, true, true);
    TriggerExecute(gt_Mid2Cleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mid2Q_Init () {
    gt_Mid2Q = TriggerCreate("gt_Mid2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid 2 Setup
//--------------------------------------------------------------------------------------------------
bool gt_Mid2Setup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9EF0EF8F_g;
    int auto9EF0EF8F_u;
    unit auto9EF0EF8F_var;
    unitgroup autoD70BEA13_g;
    int autoD70BEA13_u;
    unit autoD70BEA13_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionEntireMap());
    GameSetLighting(gv_lighting_Facility, 0.0);
    if ((UnitIsAlive(gv_dominatedBuddyUnit) == true) && (libNtve_gf_UnitInRegion(gv_dominatedBuddyUnit, RegionFromId(131)) == false)) {
        UnitRemove(gv_dominatedBuddyUnit);
    }

    auto9EF0EF8F_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9EF0EF8F_u = UnitGroupCount(auto9EF0EF8F_g, c_unitCountAll);
    for (;; auto9EF0EF8F_u -= 1) {
        auto9EF0EF8F_var = UnitGroupUnitFromEnd(auto9EF0EF8F_g, auto9EF0EF8F_u);
        if (auto9EF0EF8F_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto9EF0EF8F_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto9EF0EF8F_var);
            libNtve_gf_PauseUnit(auto9EF0EF8F_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoD70BEA13_g = gv_cinematicHiddenUnits;
    autoD70BEA13_u = UnitGroupCount(autoD70BEA13_g, c_unitCountAll);
    for (;; autoD70BEA13_u -= 1) {
        autoD70BEA13_var = UnitGroupUnitFromEnd(autoD70BEA13_g, autoD70BEA13_u);
        if (autoD70BEA13_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD70BEA13_var, false);
    }
    libNtve_gf_ShowHideUnit(gv_nova, true);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_nova, PointFromId(2046454341), false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(2046454341)), 0.0);
    UnitBehaviorAdd(gv_nova, "SuppressCloak", gv_nova, 1);
    UnitBehaviorAdd(gv_stone, "PermanentlyCloaked", gv_stone, 1);
    UnitBehaviorAdd(gv_stone, "Harmless", gv_stone, 1);
    libNtve_gf_ShowHideUnit(gv_stone, true);
    libNtve_gf_ShowHideUnit(UnitFromId(671356996), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1572013542), true);
    libNtve_gf_ShowHideUnit(UnitFromId(68933075), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_05_DEFENDERS, PointFromId(548500903));
    gv_cinematicTargetDummy = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetHeight(UnitLastCreated(), 1.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mid2Setup_Init () {
    gt_Mid2Setup = TriggerCreate("gt_Mid2Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid 2 Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_Mid2Cinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1267491924), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitIssueOrder(gv_stone, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1867072098)), c_orderQueueReplace);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00091", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitBehaviorRemove(gv_stone, "PermanentlyCloaked", 1);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(887839416), 5.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00092", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_stone, "Mission_Nova07|Line00093", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00094", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_PauseUnit(gv_stone, false);
    UnitIssueOrder(gv_stone, Order(AbilityCommand("NovaStoneDefensiveMatrix", 0)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_stone, true);
    Wait(2.0, c_timeGame);
    libNCMI_gf_SendTransmissionCampaign(gv_stone, "Mission_Nova07|Line00095", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    libNtve_gf_PauseUnit(gv_stone, false);
    UnitIssueOrder(gv_stone, OrderTargetingUnit(AbilityCommand("NovaStoneTargetEnemy", 0), gv_nova), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_nova, false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("NovaHoldFire", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1764172113)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(1764172113), 1.0, PointGetFacing(PointFromId(1764172113)))), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1308675827), 4.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_stone, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_stone, OrderTargetingUnit(AbilityCommand("NovaSnipeStone", 0), gv_cinematicTargetDummy), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_stone, Order(AbilityCommand("GhostHoldFire", 0)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00119", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mid2Cinematic_Init () {
    gt_Mid2Cinematic = TriggerCreate("gt_Mid2Cinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid 2 Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_Mid2CinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        lv_fadeDuration = 0.5;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mid2CinematicEnd_Init () {
    gt_Mid2CinematicEnd = TriggerCreate("gt_Mid2CinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid 2 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_Mid2Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoE9B6826A_g;
    int autoE9B6826A_u;
    unit autoE9B6826A_var;
    unitgroup autoCC922B99_g;
    int autoCC922B99_u;
    unit autoCC922B99_var;
    unitgroup auto8A83772A_g;
    int auto8A83772A_u;
    unit auto8A83772A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    autoE9B6826A_g = gv_cinematicTempUnits;
    autoE9B6826A_u = UnitGroupCount(autoE9B6826A_g, c_unitCountAll);
    for (;; autoE9B6826A_u -= 1) {
        autoE9B6826A_var = UnitGroupUnitFromEnd(autoE9B6826A_g, autoE9B6826A_u);
        if (autoE9B6826A_var == null) { break; }
        UnitRemove(autoE9B6826A_var);
    }
    autoCC922B99_g = gv_cinematicHiddenUnits;
    autoCC922B99_u = UnitGroupCount(autoCC922B99_g, c_unitCountAll);
    for (;; autoCC922B99_u -= 1) {
        autoCC922B99_var = UnitGroupUnitFromEnd(autoCC922B99_g, autoCC922B99_u);
        if (autoCC922B99_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCC922B99_var, true);
    }
    auto8A83772A_g = gv_cinematicPausedUnits;
    auto8A83772A_u = UnitGroupCount(auto8A83772A_g, c_unitCountAll);
    for (;; auto8A83772A_u -= 1) {
        auto8A83772A_var = UnitGroupUnitFromEnd(auto8A83772A_g, auto8A83772A_u);
        if (auto8A83772A_var == null) { break; }
        libNtve_gf_PauseUnit(auto8A83772A_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(14), 0.0, false);
    ObjectiveShow(gv_objectiveDestroyZergBase5, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyZergBase8, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyZergBase, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyZergBase7, PlayerGroupAll(), false);
    RegionPlayableMapSet(RegionFromId(114));
    GameSetLighting(gv_lighting_Facility, 0.0);
    gv_currentStage = 3;
    UnitSetPropertyFixed(gv_nova, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_nova, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_nova, c_unitPropShieldsPercent, 100.0);
    UnitSetPosition(gv_nova, PointFromId(1764172113), false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(1764172113)), 0.0);
    libNtve_gf_PauseUnit(gv_nova, false);
    UnitBehaviorRemove(gv_nova, "SuppressCloak", 1);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("NovaWeaponsFree", 0)), c_orderQueueReplace);
    UnitBehaviorRemove(gv_stone, "PermanentlyCloaked", 1);
    UnitBehaviorRemove(gv_stone, "Harmless", 1);
    libNtve_gf_ShowHideUnit(gv_stone, true);
    UnitSelect(gv_nova, gv_pLAYER_01_USER, true);
    libNtve_gf_PauseUnit(gv_stone, false);
    UnitIssueOrder(gv_stone, Order(AbilityCommand("NovaStoneDefensiveMatrix", 0)), c_orderQueueReplace);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1308675827), 0.0, -1, 10, true);
    }
    else {
        lv_fadeDuration = 1.0;
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (CameraInfoGetValue(CameraInfoFromId(1308675827), c_cameraValueDistance) + 8.0), CameraInfoGetValue(CameraInfoFromId(1308675827), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1308675827)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mid2Cleanup_Init () {
    gt_Mid2Cleanup = TriggerCreate("gt_Mid2Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack5, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova07|Line00124", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova07|Line00125", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(UnitFromId(671356996), Order(AbilityCommand("CompoundMansion_DoorNELowered", 0)), c_orderQueueReplace);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto280A986B_g;
    int auto280A986B_u;
    unit auto280A986B_var;
    unitgroup auto6D3A3282_g;
    int auto6D3A3282_u;
    unit auto6D3A3282_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    SoundSetReverbForPlayers(PlayerGroupAll(), "Off", 1.0, true, true);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto280A986B_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto280A986B_u = UnitGroupCount(auto280A986B_g, c_unitCountAll);
    for (;; auto280A986B_u -= 1) {
        auto280A986B_var = UnitGroupUnitFromEnd(auto280A986B_g, auto280A986B_u);
        if (auto280A986B_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto280A986B_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto280A986B_var);
            libNtve_gf_PauseUnit(auto280A986B_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto6D3A3282_g = gv_cinematicHiddenUnits;
    auto6D3A3282_u = UnitGroupCount(auto6D3A3282_g, c_unitCountAll);
    for (;; auto6D3A3282_u -= 1) {
        auto6D3A3282_var = UnitGroupUnitFromEnd(auto6D3A3282_g, auto6D3A3282_u);
        if (auto6D3A3282_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto6D3A3282_var, RegionFromId(155)) != true) && (auto6D3A3282_var != UnitFromId(671356996))) {
            libNtve_gf_ShowHideUnit(auto6D3A3282_var, false);
        }

    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(91450351));
    gv_victoryNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "GeneralDavis", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(195178616));
    gv_victoryDavis = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1862992417), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(599847899), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova07|Line00048", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova07|Line00049", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova07|Line00050", true), c_soundIndexAny))), -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    UnitIssueOrder(gv_victoryNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(325645652)), c_orderQueueReplace);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(gv_victoryNova, "Mission_Nova07|Line00048", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_victoryDavis, "Mission_Nova07|Line00049", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_victoryNova, "Mission_Nova07|Line00050", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init03aStage01Sewers_Init();
    gt_Init03bStage02Facility_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugIntro_Init();
    gt_DebugStage2_Init();
    gt_DebugStage3_Init();
    gt_DebugAllowAllNovaTech_Init();
    gt_DebugOpenNovaTechScreen_Init();
    gt_NovaHitBySonar_Init();
    gt_NovaPicksUpRestorationCharge_Init();
    gt_NovaEntersGearSwap_Init();
    gt_NovaExitsGearSwapScreen_Init();
    gt_NovaNearGearSwaps_Init();
    gt_NovaKillsDOMUnitInDefendRegion_Init();
    gt_NovaAttacksDOMUnitInDefendRegion_Init();
    gt_NovaFlashbangsUnitInDefendRegion_Init();
    gt_DOMUnitsEngagingTargetTransmissionsQ_Init();
    gt_NovaLosesDetectorConeDetectedStillCloakedQ_Init();
    gt_NovaReCloaksTransmissionQ_Init();
    gt_ScientistsGetScurred_Init();
    gt_PlayerUnitCrossesTripWireQ_Init();
    gt_UndominatedScientistCrossesTripWire_Init();
    gt_UnitIsDominated_Init();
    gt_DominatedUnitAttacks_Init();
    gt_DominatedUnitGivenAttackOrder_Init();
    gt_DominatedUnitUsesAbility_Init();
    gt_NovaAttackedWhileHavingHarmlessDominatedBuddy_Init();
    gt_DominatedUnitGoesHostileToDOM_Init();
    gt_HoloDecoyIsCreated_Init();
    gt_StartGameCleanup_Init();
    gt_StartGame01IntroQ_Init();
    gt_StartGame02MainQ_Init();
    gt_StartGame03StoneFightQ_Init();
    gt_StartGameTeachingHoldFire_Init();
    gt_MonitorHoldFireActivation_Init();
    gt_SetupStage02Ambiences_Init();
    gt_NovaFiresPlasmaShot_Init();
    gt_DestroyPlasmaPuddleShotIfInUnpathable_Init();
    gt_S1SetSewerReverbonLoad_Init();
    gt_S1NovaEntersDeadEndTransmissionQ_Init();
    gt_S1CombatInDefendRegionsController_Init();
    gt_S1CombatInInitialEncounter_Init();
    gt_S1CombatInInitialEncounterTransmissionQ_Init();
    gt_S1AllDetectorsDeadInInitialEncounter_Init();
    gt_S1AllDetectorsDeadInInitialEncounterTransmissionQ_Init();
    gt_S1NovaFindsShortcutQ_Init();
    gt_S1NovaFindsShortcutFromWrongSide_Init();
    gt_S1ReigelDetectsSideRoomQ_Init();
    gt_S1ScientistLeavesToGoHomeQ_Init();
    gt_S1Scientist2SeesNovaQ_Init();
    gt_S1NovaPicksUpDominationVisorQ_Init();
    gt_S1NovaSeesThorBuddyQ_Init();
    gt_S1ThorDamagedRemoveHarmless_Init();
    gt_S1ThorCantProceedQ_Init();
    gt_S1IntroTripWiresQ_Init();
    gt_S1TripWiresTrippedQ_Init();
    gt_S1TripWiresFlashbangedQ_Init();
    gt_S1NovaEncountersWidowMineQ_Init();
    gt_S1WidowMineBurrowsDamage_Init();
    gt_S1WidowMineBurrowsDistance_Init();
    gt_S1AllDetectorsDeadInTripWirePractice_Init();
    gt_S1AllDetectorsDeadInTripWirePracticeTransmissionQ_Init();
    gt_S1CombatInMarauderGank_Init();
    gt_S1NovaEntersAlarmBotIntroQ_Init();
    gt_S1IntroAlarmBotDies_Init();
    gt_S1GearSwapIntroQ_Init();
    gt_S1UnitAttackedInGhostAlley_Init();
    gt_S1GhostAlleyTimerEnds_Init();
    gt_S1TripWireLastEncounterCrossed_Init();
    gt_S1TripWireLastEncounterTimerEnds_Init();
    gt_S1ThorNearsMechanicRoom_Init();
    gt_S1ThorEntersMechanicRoomQ_Init();
    gt_S1NovaSeesFacilityEntranceQ_Init();
    gt_S1NovaEntersFacilityEntranceBeacon_Init();
    gt_S1CleanUpSection01_Init();
    gt_S2CombatInDefendRegionsController_Init();
    gt_S2CompoundWingCheckpoints_Init();
    gt_S2NovaEntersDoorControlRegion_Init();
    gt_S2NovaSeesDoorBeacon_Init();
    gt_S2NovaEntersSonarDroneIntroQ_Init();
    gt_S2RemoveSonarDroneReticles_Init();
    gt_S2NovaOverhearsConversations01Q_Init();
    gt_S2NovaOverhearsConversations02Q_Init();
    gt_S2NovaOverhearsConversations03Q_Init();
    gt_S2NovaOverhearsConversations04Q_Init();
    gt_S2CheckpointCiviliansFlee_Init();
    gt_S2NovaSeesLockedDoorStillLockedQ_Init();
    gt_S2PreStoneCheckpoint_Init();
    gt_S2NovaEntersStoneEncounter_Init();
    gt_S2NovaSeesPierceAndOrDeltaQ_Init();
    gt_S2CombatInHallway02_Init();
    gt_S2CombatInHallway03_Init();
    gt_S2TargetPracticeGuysInterrupted_Init();
    gt_S2NovaSeesSecurityRoom01Q_Init();
    gt_S2NovaSeesSecurityRoom02Q_Init();
    gt_S2DoorGuyOpensDoor01Q_Init();
    gt_S2DoorGuyOpensDoor02Q_Init();
    gt_S2DoorToDavisUnlockedQ_Init();
    gt_S2IntroduceBonusObjectivesQ_Init();
    gt_S2IntroduceBonusObjectiveBlinkSuitQ_Init();
    gt_S2IntroduceBonusObjectiveArmyTechnologyQ_Init();
    gt_S2NovaAcquiresBlinkSuitQ_Init();
    gt_S2NovaAcquiresArmyTechnologyQ_Init();
    gt_S2NovaAcquiresExperimentalWeaponQ_Init();
    gt_S2SecretRoomLockedDoorHintQ_Init();
    gt_S2SecretRoomBlinkGapHintQ_Init();
    gt_S3StoneAI_Init();
    gt_S3StoneBlinksToSafetyToUseDefensiveMatrix_Init();
    gt_S3StoneDominated_Init();
    gt_S3StoneDominationBrokenTransmissionQ_Init();
    gt_S3StoneConversationTransmissionQ_Init();
    gt_S3TurnOnAlarmBotPatrols_Init();
    gt_S3AlarmBotPatrolDies_Init();
    gt_S3StoneDefeated_Init();
    gt_S3UnitIsDominated_Init();
    gt_S3HoloDecoyIsCreated_Init();
    gt_DefeatNovaDies_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryArrestGeneralDavisCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementDominations_Init();
    gt_AchievementKillfewerthan20units_Init();
    gt_StartAI_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveNovaMustSurviveCreate_Init();
    gt_ObjectiveNovaMustSurviveComplete_Init();
    gt_ObjectiveNovaMustSurviveFailed_Init();
    gt_ObjectiveInfiltrateTheFacilityCreate_Init();
    gt_ObjectiveInfiltrateTheFacilityComplete_Init();
    gt_ObjectiveInfiltrateTheFacilityFailed_Init();
    gt_ObjectiveUnlockDoorToDavisCreate_Init();
    gt_ObjectiveUnlockDoorToDavisComplete_Init();
    gt_ObjectiveUnlockDoorToDavisUpdate_Init();
    gt_ObjectiveUnlockDoorToDavisFailed_Init();
    gt_ObjectiveDefeatStoneCreate_Init();
    gt_ObjectiveDefeatStoneComplete_Init();
    gt_ObjectiveDefeatStoneFailed_Init();
    gt_ObjectiveArrestGeneralDavisCreate_Init();
    gt_ObjectiveArrestGeneralDavisComplete_Init();
    gt_ObjectiveArrestGeneralDavisFailed_Init();
    gt_ObjectiveInvestigatePowerSignalCreate_Init();
    gt_ObjectiveInvestigatePowerSignalComplete_Init();
    gt_ObjectiveInvestigatePowerSignalFailed_Init();
    gt_ObjectiveObtainBlinkSuitCreate_Init();
    gt_ObjectiveObtainBlinkSuitComplete_Init();
    gt_ObjectiveObtainBlinkSuitFailed_Init();
    gt_ObjectiveObtainArmyTechCreate_Init();
    gt_ObjectiveObtainArmyTechComplete_Init();
    gt_ObjectiveObtainArmyTechFailed_Init();
    gt_ObjectiveObtainExperimentalWeaponCreate_Init();
    gt_ObjectiveObtainExperimentalWeaponComplete_Init();
    gt_ObjectiveObtainExperimentalWeaponFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene01_Init();
    gt_BriefingScene02_Init();
    gt_BriefingScene03_Init();
    gt_BriefingScene03Setup_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidDavis_Init();
    gt_MidGuardRoomAnimate1_Init();
    gt_MidGuardRoomAnimate2_Init();
    gt_Mid2Q_Init();
    gt_Mid2Setup_Init();
    gt_Mid2Cinematic_Init();
    gt_Mid2CinematicEnd_Init();
    gt_Mid2Cleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
