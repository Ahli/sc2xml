//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Dark Skies
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibComC"
include "LibCMMI"
include "LibNovC"
include "LibNCMI"
include "LibNCUI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libComC_InitLib();
    libCMMI_InitLib();
    libNovC_InitLib();
    libNCMI_InitLib();
    libNCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION3 = 4;
const int gv_pLAYER_02_DOMINION4 = 5;
const int gv_pLAYER_02_DOMINION5 = 6;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_GorgonDialog {
    int lv_dialog;
    int lv_gorgon1;
    int lv_gorgon2;
    int lv_gorgon3;
    int lv_button1;
    int lv_button2;
    int lv_button3;
    int lv_timeLabel1;
    int lv_timeLabel2;
    int lv_timeLabel3;
    timer lv_gorgonTimer1;
    timer lv_gorgonTimer2;
    timer lv_gorgonTimer3;
};

struct gs_RECORD_ObserverBully {
    unit lv_obvserver;
    point lv_homePoint;
    region lv_spawnRegion;
    timer lv_respawnTimer;
    timer lv_aggroTimer;
    bool lv_alive;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
string gv_mapMusicTrack2;
unit gv_nova;
gs_RECORD_GorgonDialog gv_gorgonDialog;
timer gv_battlecruiser1Timer;
timer gv_battlecruiser2Timer;
int gv_scienceFacilityPing;
int[32] gv_trackedArrowPings;
gs_RECORD_ObserverBully[32] gv_observerBullies;
int gv_observerBullyCount;
unitgroup gv_observerWave;
int gv_deathFleetLeaderboard;
int gv_enemyUnitsRemaining;
int gv_currentEnemyUnits;
unitgroup[4] gv_enemyGroups;
unit gv_jinaraMothership1;
unit gv_jinaraMothership2;
bool[8] gv_laneActive;
unit gv_currentDominatedUnit;
int gv_gorgonKills;
int gv_yamatoKills;
int gv_novaKills;
int gv_gorgonsSummoned;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unitgroup gv_introDefenders;
unit gv_victoryCinematicNova;

void InitGlobals () {
    int init_i;

    gv_gorgonDialog.lv_dialog = c_invalidDialogId;
    gv_gorgonDialog.lv_gorgon1 = c_invalidDialogControlId;
    gv_gorgonDialog.lv_gorgon2 = c_invalidDialogControlId;
    gv_gorgonDialog.lv_gorgon3 = c_invalidDialogControlId;
    gv_gorgonDialog.lv_button1 = c_invalidDialogControlId;
    gv_gorgonDialog.lv_button2 = c_invalidDialogControlId;
    gv_gorgonDialog.lv_button3 = c_invalidDialogControlId;
    gv_gorgonDialog.lv_timeLabel1 = c_invalidDialogControlId;
    gv_gorgonDialog.lv_timeLabel2 = c_invalidDialogControlId;
    gv_gorgonDialog.lv_timeLabel3 = c_invalidDialogControlId;
    gv_gorgonDialog.lv_gorgonTimer1 = TimerCreate();
    gv_gorgonDialog.lv_gorgonTimer2 = TimerCreate();
    gv_gorgonDialog.lv_gorgonTimer3 = TimerCreate();
    gv_battlecruiser1Timer = TimerCreate();
    gv_battlecruiser2Timer = TimerCreate();
    gv_scienceFacilityPing = c_invalidPingId;
    for (init_i = 0; init_i <= 31; init_i += 1) {
        gv_trackedArrowPings[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 31; init_i += 1) {
        gv_observerBullies[init_i].lv_respawnTimer = TimerCreate();
        gv_observerBullies[init_i].lv_aggroTimer = TimerCreate();
        gv_observerBullies[init_i].lv_alive = true;
    }
    gv_observerWave = UnitGroupEmpty();
    gv_deathFleetLeaderboard = c_boardNone;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_enemyGroups[init_i] = UnitGroupEmpty();
    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introDefenders = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_GorgonHyperjump (unit lp_gorgon, point lp_target);
void gf_CreateArrowPings (int lp_lane, fixed lp_delay, fixed lp_direction);
region gf_SpawnRegionforPosition (point lp_position);
void gf_CreateAttackWavePing (unitgroup lp_waveUnitGroup, text lp_tooltip);
void gf_TrackUnitforLeaderboard (unit lp_unit, int lp_lane);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugIntro;
trigger gt_DebugStage2;
trigger gt_StartGameQ;
trigger gt_DefenderSideBasesOnlineQ;
trigger gt_DefenderBasesMaintainDefenseQ;
trigger gt_BattlecruisersOnlineQ;
trigger gt_MoreBattlecruisersOnlineQ;
trigger gt_DominionBaseLeftDies;
trigger gt_DominionBaseMidDies;
trigger gt_DominionBaseRightDies;
trigger gt_GorgonDialog;
trigger gt_GorgonButtonPressed;
trigger gt_GorgonHoverPingsEnter;
trigger gt_GorgonHoverPingsExit;
trigger gt_SummonGorgonLeft;
trigger gt_SummonGorgonMiddle;
trigger gt_SummonGorgonRight;
trigger gt_SCVDespawn;
trigger gt_BarracksConstruction;
trigger gt_ScienceFacilityDiesQ;
trigger gt_BaseKilledQ;
trigger gt_Mid1BaseKilled;
trigger gt_Mid2BaseKilled;
trigger gt_Mid3BaseKilled;
trigger gt_DeathFleetCounter;
trigger gt_ProtossUnitDies;
trigger gt_ProtossUnitDominated;
trigger gt_ProtossUnitReleased;
trigger gt_JinaraDies1Q;
trigger gt_JinaraDies2;
trigger gt_Observers;
trigger gt_DespawnObservers;
trigger gt_DefeatBaseDead;
trigger gt_VictoryDefeattheDeathFleetCompleted;
trigger gt_VictoryDefeattheDeathFleetQ;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_GorgonsKills;
trigger gt_YamatoKills;
trigger gt_NovaKills;
trigger gt_StartAI;
trigger gt_AIUpgradeCasualNormal;
trigger gt_AIUpgradeHardBrutal;
trigger gt_AIGiveResources;
trigger gt_BullyActivationSequence;
trigger gt_AmbientWaves1;
trigger gt_AmbientWaves2;
trigger gt_AmbientWaves3;
trigger gt_AmbientWaves4;
trigger gt_SpecialWave1ImmortalsCenterQ;
trigger gt_SpecialWave2VoidRaysLeftQ;
trigger gt_SpecialWave3VoidRaysRightQ;
trigger gt_SpecialWave4ImmortalsCenterBigQ;
trigger gt_SpecialWave5WrathwalkersLeftQ;
trigger gt_SpecialWave6WrathwalkersRightQ;
trigger gt_SpecialWave7JinaraQ;
trigger gt_SpecialWave8VoidRaysLowerLeftQ;
trigger gt_SpecialWave9VoidRaysLowerRightQ;
trigger gt_SpecialWave10ImmortalsTripleQ;
trigger gt_SpecialWave11VoidRaysDoubleQ;
trigger gt_FinalSpecialWaveJinaraQ;
trigger gt_ObjectiveDefeattheDeathFleetCreate;
trigger gt_ObjectiveDefeattheDeathFleetComplete;
trigger gt_ObjectiveScienceFacilityCreate;
trigger gt_ObjectiveScienceFacilityComplete;
trigger gt_ObjectiveScienceFacilityFailed;
trigger gt_BriefingQ;
trigger gt_BriefingSurrounded01;
trigger gt_BriefingSurrounded02;
trigger gt_BriefingSurroundedActions01;
trigger gt_BriefingSurroundedActions02;
trigger gt_BriefingDefenders01;
trigger gt_BriefingDefendersActions;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroAttacks;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryMedivacScene;
trigger gt_VictoryBattlecruiserControl;
trigger gt_FlyInGriffin;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_GorgonHyperjump (unit lp_gorgon, point lp_target) {
    // Variable Declarations
    actor lv_jumpEffect;
    actor lv_impactEffect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitIssueOrder(lp_gorgon, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(lp_gorgon, true);
    UnitSetState(lp_gorgon, c_unitStateInvulnerable, true);
    SoundPlayAtPointForPlayer(SoundLink("Nova_HyperionJumpOut_Far", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_gorgon), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(lp_gorgon, "SetOpacity 0.000000 0.330000");
    libNtve_gf_AttachModelToUnit(lp_gorgon, "HyperjumpLaunch", "Ref_Center");
    lv_jumpEffect = libNtve_gf_ActorLastCreated();
    ActorSend(lv_jumpEffect, "SetScale 1.550000,2.370000,1.000000");
    Wait(0.67, c_timeGame);
    libNtve_gf_KillModel(lv_jumpEffect);
    if ((UnitIsAlive(lp_gorgon) == false)) {
        return ;
    }

    UnitSetPosition(lp_gorgon, lp_target, false);
    SoundPlayAtPointForPlayer(SoundLink("Nova_HyperionJumpIn_Far", -1), c_maxPlayers, PlayerGroupAll(), lp_target, 0.0, 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(lp_gorgon, "HyperjumpImpact", "Ref_Center");
    lv_impactEffect = libNtve_gf_ActorLastCreated();
    ActorSend(lv_impactEffect, "SetScale 1.550000,2.370000,1.000000");
    Wait(0.33, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lp_gorgon, "SetOpacity 1.000000 0.340000");
    ActorSend(lv_impactEffect, "SetOpacity 0.000000 0.340000");
    Wait(0.34, c_timeGame);
    libNtve_gf_KillModel(lv_impactEffect);
    libNtve_gf_PauseUnit(lp_gorgon, false);
    UnitSetState(lp_gorgon, c_unitStateInvulnerable, false);
}

trigger auto_gf_CreateArrowPings_Trigger = null;
int auto_gf_CreateArrowPings_lp_lane;
fixed auto_gf_CreateArrowPings_lp_delay;
fixed auto_gf_CreateArrowPings_lp_direction;

void gf_CreateArrowPings (int lp_lane, fixed lp_delay, fixed lp_direction) {
    auto_gf_CreateArrowPings_lp_lane = lp_lane;
    auto_gf_CreateArrowPings_lp_delay = lp_delay;
    auto_gf_CreateArrowPings_lp_direction = lp_direction;

    if (auto_gf_CreateArrowPings_Trigger == null) {
        auto_gf_CreateArrowPings_Trigger = TriggerCreate("auto_gf_CreateArrowPings_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateArrowPings_Trigger, false, false);
}

bool auto_gf_CreateArrowPings_TriggerFunc (bool testConds, bool runActions) {
    int lp_lane = auto_gf_CreateArrowPings_lp_lane;
    fixed lp_delay = auto_gf_CreateArrowPings_lp_delay;
    fixed lp_direction = auto_gf_CreateArrowPings_lp_direction;

    // Variable Declarations
    color lv_color;
    point lv_startPoint;
    point lv_endPoint;
    point lv_currentPoint;
    bool lv_track;
    int lv_currentTrackIndex;

    // Automatic Variable Declarations
    int auto14BB5400_val;
    int auto85B835E6_val;

    // Variable Initialization
    lv_color = Color(100.00, 0.00, 0.00);

    // Implementation
    if ((lp_direction > 0.0) && (lp_direction < 90.0)) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_track = true;
        auto85B835E6_val = lp_lane;
        if (auto85B835E6_val == 2) {
            lv_startPoint = PointWithOffsetPolar(RegionGetCenter(RegionFromId(28)), 10.0, 45.0);
            lv_endPoint = RegionGetCenter(RegionFromId(33));
        }
        else if (auto85B835E6_val == 4) {
            lv_startPoint = PointWithOffsetPolar(RegionGetCenter(RegionFromId(29)), 10.0, 45.0);
            lv_endPoint = RegionGetCenter(RegionFromId(35));
        }
        else if (auto85B835E6_val == 6) {
            lv_startPoint = PointWithOffsetPolar(RegionGetCenter(RegionFromId(30)), 10.0, 45.0);
            lv_endPoint = RegionGetCenter(RegionFromId(37));
        }
        else {
            return true;
        }
    }
    else {
        auto14BB5400_val = lp_lane;
        if (auto14BB5400_val == 1) {
            lv_startPoint = RegionGetCenter(RegionFromId(31));
            lv_endPoint = RegionGetCenter(RegionFromId(1));
        }
        else if (auto14BB5400_val == 2) {
            lv_startPoint = RegionGetCenter(RegionFromId(33));
            lv_endPoint = RegionGetCenter(RegionFromId(2));
        }
        else if (auto14BB5400_val == 3) {
            lv_startPoint = RegionGetCenter(RegionFromId(34));
            lv_endPoint = RegionGetCenter(RegionFromId(3));
        }
        else if (auto14BB5400_val == 4) {
            lv_startPoint = RegionGetCenter(RegionFromId(35));
            lv_endPoint = RegionGetCenter(RegionFromId(4));
        }
        else if (auto14BB5400_val == 5) {
            lv_startPoint = RegionGetCenter(RegionFromId(36));
            lv_endPoint = RegionGetCenter(RegionFromId(5));
        }
        else if (auto14BB5400_val == 6) {
            lv_startPoint = RegionGetCenter(RegionFromId(37));
            lv_endPoint = RegionGetCenter(RegionFromId(7));
        }
        else if (auto14BB5400_val == 7) {
            lv_startPoint = RegionGetCenter(RegionFromId(39));
            lv_endPoint = RegionGetCenter(RegionFromId(6));
        }
        else {
            return true;
        }
    }
    lv_currentPoint = lv_startPoint;
    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return true;
        }

        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_currentPoint, lv_color, 5.0, lp_direction);
        PingSetScale(PingLastCreated(), 0.5);
        if ((lv_track == true)) {
            gv_trackedArrowPings[lv_currentTrackIndex] = PingLastCreated();
            lv_currentTrackIndex += 1;
            if ((lv_currentTrackIndex > 31)) {
                return true;
            }

        }

        if ((lp_delay > 0.0)) {
            Wait(lp_delay, c_timeReal);
        }

        lv_currentPoint = PointWithOffsetPolar(lv_currentPoint, 10.0, AngleBetweenPoints(lv_currentPoint, lv_endPoint));
        if ((DistanceBetweenPoints(lv_currentPoint, lv_startPoint) > DistanceBetweenPoints(lv_endPoint, lv_startPoint))) {
            return true;
        }

    }
    return true;
}

region gf_SpawnRegionforPosition (point lp_position) {
    // Automatic Variable Declarations
    // Implementation
    if ((RegionContainsPoint(RegionFromId(42), lp_position) == true)) {
        return RegionFromId(31);
    }

    if ((RegionContainsPoint(RegionFromId(43), lp_position) == true)) {
        return RegionFromId(32);
    }

    if ((RegionContainsPoint(RegionFromId(44), lp_position) == true)) {
        return RegionFromId(33);
    }

    if ((RegionContainsPoint(RegionFromId(45), lp_position) == true)) {
        return RegionFromId(34);
    }

    if ((RegionContainsPoint(RegionFromId(46), lp_position) == true)) {
        return RegionFromId(35);
    }

    if ((RegionContainsPoint(RegionFromId(47), lp_position) == true)) {
        return RegionFromId(36);
    }

    if ((RegionContainsPoint(RegionFromId(50), lp_position) == true)) {
        return RegionFromId(39);
    }

    if ((RegionContainsPoint(RegionFromId(49), lp_position) == true)) {
        return RegionFromId(38);
    }

    if ((RegionContainsPoint(RegionFromId(48), lp_position) == true)) {
        return RegionFromId(37);
    }

    return RegionFromId(35);
}

trigger auto_gf_CreateAttackWavePing_Trigger = null;
unitgroup auto_gf_CreateAttackWavePing_lp_waveUnitGroup;
text auto_gf_CreateAttackWavePing_lp_tooltip;

void gf_CreateAttackWavePing (unitgroup lp_waveUnitGroup, text lp_tooltip) {
    auto_gf_CreateAttackWavePing_lp_waveUnitGroup = lp_waveUnitGroup;
    auto_gf_CreateAttackWavePing_lp_tooltip = lp_tooltip;

    if (auto_gf_CreateAttackWavePing_Trigger == null) {
        auto_gf_CreateAttackWavePing_Trigger = TriggerCreate("auto_gf_CreateAttackWavePing_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateAttackWavePing_Trigger, false, false);
}

bool auto_gf_CreateAttackWavePing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_waveUnitGroup = auto_gf_CreateAttackWavePing_lp_waveUnitGroup;
    text lp_tooltip = auto_gf_CreateAttackWavePing_lp_tooltip;

    // Variable Declarations
    int lv_ping;
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    unitgroup autoA210821A_g;
    int autoA210821A_u;
    unit autoA210821A_var;

    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    lv_unitGroup = lp_waveUnitGroup;
    if ((libNtve_gf_UnitGroupIsDead(lv_unitGroup) == true)) {
        return true;
    }

    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_unitGroup), 5.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGroupCenterOfGroup(lv_unitGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetScale(lv_ping, 0.7);
    PingSetTooltip(lv_ping, lp_tooltip);
    while (true) {
        Wait(0.0625, c_timeAI);
        autoA210821A_g = lv_unitGroup;
        autoA210821A_u = UnitGroupCount(autoA210821A_g, c_unitCountAll);
        for (;; autoA210821A_u -= 1) {
            autoA210821A_var = UnitGroupUnitFromEnd(autoA210821A_g, autoA210821A_u);
            if (autoA210821A_var == null) { break; }
            if ((UnitGetOwner(autoA210821A_var) == gv_pLAYER_01_USER)) {
                UnitGroupRemove(lv_unitGroup, autoA210821A_var);
            }

        }
        if ((libNtve_gf_UnitGroupIsDead(lv_unitGroup) == true)) {
            PingDestroy(lv_ping);
            return true;
        }
        else {
            PingSetPosition(lv_ping, UnitGroupCenterOfGroup(lp_waveUnitGroup));
        }
    }
    return true;
}

void gf_TrackUnitforLeaderboard (unit lp_unit, int lp_lane) {
    // Automatic Variable Declarations
    // Implementation
    gv_currentEnemyUnits += 1;
    UnitGroupAdd(gv_enemyGroups[0], lp_unit);
    if ((lp_lane >= 1) && (lp_lane <= 3)) {
        UnitGroupAdd(gv_enemyGroups[lp_lane], lp_unit);
    }

}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_InitializeNovaMission("Nova08");
    TriggerExecute(gt_Init01Technology, true, false);
    libNovC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_BriefingQ, true, true);
        ConsoleCommand("exit", true, true);
    }

    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNovC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libComC_gf_EnableCampaignTechUnit(true, "Battlecruiser", gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "DOM", 1);
    TechTreeUnitAllow(gv_pLAYER_02_DOMINION, "Bunker", true);
    TechTreeUnitAllow(gv_pLAYER_02_DOMINION, "Separatist", true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "TerranBuildingArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "NeosteelFrame", 1);
    CatalogFieldValueSet(c_gameCatalogUnit, "Bunker", "LifeMax", gv_pLAYER_02_DOMINION, "550");
    CatalogFieldValueSet(c_gameCatalogUnit, "Bunker", "LifeStart", gv_pLAYER_02_DOMINION, "550");
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION4, "DOM", 1);
    TechTreeUnitAllow(gv_pLAYER_02_DOMINION4, "Bunker", true);
    TechTreeUnitAllow(gv_pLAYER_02_DOMINION4, "Separatist", true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "TerranBuildingArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "NeosteelFrame", 1);
    CatalogFieldValueSet(c_gameCatalogUnit, "Bunker", "LifeMax", gv_pLAYER_02_DOMINION4, "550");
    CatalogFieldValueSet(c_gameCatalogUnit, "Bunker", "LifeStart", gv_pLAYER_02_DOMINION4, "550");
    CatalogFieldValueSet(c_gameCatalogAbil, "BarracksAddOns", "InfoArray[" + IntToString(1) + "].Time", gv_pLAYER_02_DOMINION4, "15");
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION5, "DOM", 1);
    TechTreeUnitAllow(gv_pLAYER_02_DOMINION5, "Bunker", true);
    TechTreeUnitAllow(gv_pLAYER_02_DOMINION5, "Separatist", true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "TerranBuildingArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "NeosteelFrame", 1);
    CatalogFieldValueSet(c_gameCatalogUnit, "Bunker", "LifeMax", gv_pLAYER_02_DOMINION5, "550");
    CatalogFieldValueSet(c_gameCatalogUnit, "Bunker", "LifeStart", gv_pLAYER_02_DOMINION5, "550");
    CatalogFieldValueSet(c_gameCatalogAbil, "BarracksAddOns", "InfoArray[" + IntToString(1) + "].Time", gv_pLAYER_02_DOMINION5, "15");
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "Dominion", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "NeoSteelFrame", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "FortifiedBunkerCarapace", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "CombatShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "StabilizerMedPacks", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "TerranShipWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "TerranShipArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "TerranBuildingArmor", 1);
    CatalogFieldValueSet(c_gameCatalogAbil, "StarportTrain", "InfoArray[" + IntToString(3) + "].Time", gv_pLAYER_02_DOMINION, "30");
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "DarkProtoss", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION4, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateFoodIgnored, true);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_02_DOMINION2, c_playerStateFoodIgnored, true);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_02_DOMINION3, c_playerStateFoodIgnored, true);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_02_DOMINION4, c_playerStateFoodIgnored, true);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_02_DOMINION5, c_playerStateFoodIgnored, true);
    libNCMI_gf_NM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_tempPoint;

    // Automatic Variable Declarations
    unitgroup auto18F4B303_g;
    int auto18F4B303_u;
    unit auto18F4B303_var;
    unitgroup auto6865111F_g;
    int auto6865111F_u;
    unit auto6865111F_var;
    unitgroup auto04953FBD_g;
    int auto04953FBD_u;
    unit auto04953FBD_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "NovaHero", 0, gv_pLAYER_01_USER, PointFromId(1));
    gv_nova = UnitLastCreated();
    libNCUI_gf_SetHeroPanelUnit(1, gv_nova);
    libNCMI_gf_SetNovaHeroUnit(gv_nova);
    libNCMI_gf_EnableDisableHeroReviveSystem(true, gv_pLAYER_01_USER);
    libNCMI_gf_SetAllWorkerRallyPointsForPlayer(1);
    if ((TechTreeUpgradeCount(gv_pLAYER_01_USER, "InternalizedTechModuleSiegeTank", c_techCountQueuedOrBetter) > 0)) {
        lv_tempPoint = UnitGetPosition(UnitFromId(140));
        UnitRemove(UnitFromId(140));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FactoryReactor", 0, gv_pLAYER_01_USER, lv_tempPoint);
    }
    else {
        libNtve_gf_ShowHideUnit(UnitFromId(140), false);
        Wait(0.0625, c_timeGame);
        libNtve_gf_ShowHideUnit(UnitFromId(140), true);
    }
    auto18F4B303_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto18F4B303_u = UnitGroupCount(auto18F4B303_g, c_unitCountAll);
    for (;; auto18F4B303_u -= 1) {
        auto18F4B303_var = UnitGroupUnitFromEnd(auto18F4B303_g, auto18F4B303_u);
        if (auto18F4B303_var == null) { break; }
        UnitCargoCreate(auto18F4B303_var, "Separatist", 6);
    }
    auto6865111F_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6865111F_u = UnitGroupCount(auto6865111F_g, c_unitCountAll);
    for (;; auto6865111F_u -= 1) {
        auto6865111F_var = UnitGroupUnitFromEnd(auto6865111F_g, auto6865111F_u);
        if (auto6865111F_var == null) { break; }
        UnitCargoCreate(auto6865111F_var, "Marine", 6);
    }
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(2044729735), null, StringExternal("Param/Value/A3B18D4E"), null);
    UnitSetTeamColorIndex(UnitFromId(2044729735), 0);
    Wait(1.0, c_timeGame);
    auto04953FBD_g = UnitGroup("SubwayEntranceSW", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04953FBD_u = UnitGroupCount(auto04953FBD_g, c_unitCountAll);
    for (;; auto04953FBD_u -= 1) {
        auto04953FBD_var = UnitGroupUnitFromEnd(auto04953FBD_g, auto04953FBD_u);
        if (auto04953FBD_var == null) { break; }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconScoutPing", UnitGetPosition(auto04953FBD_var), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.6);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5C5003E5"));
        libNCMI_gf_SetUnitInfoTextCampaign(auto04953FBD_var, null, StringExternal("Param/Value/AF4CFB4A"), StringExternal("Param/Value/887B800F"));
        UnitIssueOrder(auto04953FBD_var, Order(AbilityCommand("SubwayEntrancePower", 1)), c_orderQueueReplace);
    }
    UnitIssueOrder(UnitFromId(715671586), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(149227638)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(1152639895), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(477801473)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(1791469075), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1712219478)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(1234078970), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(667678767)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(868342737), OrderTargetingPoint(AbilityCommand("Rally", 0), PointFromId(1941874495)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "nDLC_Music_Nova08_Main";
    gv_mapMusicTrack2 = "nDLC_Music_Nova08_Main_Intense";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_enemyUnitsRemaining = libNtve_gf_DifficultyValueInt(1750, 1750, 2250, 2500);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossShieldsLevel1", 1);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ObserverGraviticBooster", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_AddMissionTipCampaign("(PH) Battlecruiser Tactical Jump");
    libComC_gf_AddUnitTypeToUnitHelpPanel("Zealot", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Stalker", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Immortal", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("ColossusTaldarim", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Monitor", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Carrier", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Observer", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Medic", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Separatist", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingQ, true, true);
    ConsoleCommand("exit", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugIntro_Init () {
    gt_DebugIntro = TriggerCreate("gt_DebugIntro_Func");
    TriggerAddEventChatMessage(gt_DebugIntro, 1, "Intro", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BattlecruisersOnlineQ, true, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto52A88B9B_g;
    int auto52A88B9B_u;
    unit auto52A88B9B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 0.0625, true);
    libNCMI_gf_CinematicModeCampaign(false, 1.5, false);
    TriggerExecute(gt_StartAI, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E57F7048"), null, PointFromId(154));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_pLAYER_01_USER);
    auto52A88B9B_g = UnitGroup("SubwayEntranceSW", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto52A88B9B_u = UnitGroupCount(auto52A88B9B_g, c_unitCountAll);
    for (;; auto52A88B9B_u -= 1) {
        auto52A88B9B_var = UnitGroupUnitFromEnd(auto52A88B9B_g, auto52A88B9B_u);
        if (auto52A88B9B_var == null) { break; }
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto52A88B9B_var), 6.0), 0.0, false);
    }
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDefeattheDeathFleetCreate, true, true);
    TriggerExecute(gt_DeathFleetCounter, true, false);
    Wait(4.0, c_timeReal);
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00053", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    SoundPlayForPlayer(SoundLink("PingSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(3)), 5.0, Color(100.00, 0.00, 0.00));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(4)), 5.0, Color(100.00, 0.00, 0.00));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(5)), 5.0, Color(100.00, 0.00, 0.00));
    gf_CreateArrowPings(3, 0.0625, 225.0);
    gf_CreateArrowPings(4, 0.0625, 225.0);
    gf_CreateArrowPings(5, 0.0625, 225.0);
    Wait(2.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00052", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00054", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00002", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00003", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova08|Line00004", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defender Side Bases Online Q
//--------------------------------------------------------------------------------------------------
bool gt_DefenderSideBasesOnlineQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(350.0, c_timeAI);
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("PingSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(1)), 5.0, Color(0.00, 100.00, 0.00));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(2)), 5.0, Color(0.00, 100.00, 0.00));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(6)), 5.0, Color(0.00, 100.00, 0.00));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(7)), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00042", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00048", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    SoundPlayForPlayer(SoundLink("PingSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(1)), 5.0, Color(100.00, 0.00, 0.00));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(2)), 5.0, Color(100.00, 0.00, 0.00));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(6)), 5.0, Color(100.00, 0.00, 0.00));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(7)), 5.0, Color(100.00, 0.00, 0.00));
    gf_CreateArrowPings(1, 0.0625, 315.0);
    gf_CreateArrowPings(2, 0.0625, 225.0);
    gf_CreateArrowPings(6, 0.0625, 225.0);
    gf_CreateArrowPings(7, 0.0625, 135.0);
    Wait(2.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova08|Line00044", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenderSideBasesOnlineQ_Init () {
    gt_DefenderSideBasesOnlineQ = TriggerCreate("gt_DefenderSideBasesOnlineQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defender Bases Maintain Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_DefenderBasesMaintainDefenseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(500.0, c_timeAI);
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00005", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00006", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((UnitIsAlive(UnitFromId(2044729735)) == true)) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00045", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        if ((UnitIsAlive(UnitFromId(2044729735)) == true)) {
            MinimapPing(PlayerGroupAll(), PointFromId(793064925), 5.0, Color(0.00, 100.00, 0.00));
            libNCMI_gf_CreateObjectivePing(false, PointFromId(793064925), StringExternal("Param/Value/12C36EC5"));
            gv_scienceFacilityPing = PingLastCreated();
        }

        Wait(2.0, c_timeReal);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00046", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerExecute(gt_ObjectiveScienceFacilityCreate, true, true);
    }
    else {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenderBasesMaintainDefenseQ_Init () {
    gt_DefenderBasesMaintainDefenseQ = TriggerCreate("gt_DefenderBasesMaintainDefenseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruisers Online Q
//--------------------------------------------------------------------------------------------------
bool gt_BattlecruisersOnlineQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_spotValid;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(182)) == true)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(22), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION4, RegionCircle(PointFromId(929702535), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(8), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION4, RegionCircle(PointFromId(48665747), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(10), true);
    }

    if ((UnitIsAlive(UnitFromId(171)) == true)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(24), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION, RegionCircle(PointFromId(1691027196), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(12), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION, RegionCircle(PointFromId(1568815281), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(14), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION, RegionCircle(PointFromId(124031490), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(16), true);
    }

    if ((UnitIsAlive(UnitFromId(193)) == true)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(26), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION5, RegionCircle(PointFromId(193599702), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(18), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION5, RegionCircle(PointFromId(1086760803), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(20), true);
    }

    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00008", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00009", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00010", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_AddMissionTipCampaign(" Dominion Fleet");
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_GorgonDialog, true, false);
    Wait(2.0, c_timeReal);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/CD8B32E2"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlecruisersOnlineQ_Init () {
    gt_BattlecruisersOnlineQ = TriggerCreate("gt_BattlecruisersOnlineQ_Func");
    TriggerAddEventTimer(gt_BattlecruisersOnlineQ, gv_battlecruiser1Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: More Battlecruisers Online Q
//--------------------------------------------------------------------------------------------------
bool gt_MoreBattlecruisersOnlineQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_spotValid;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(182)) == true)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(23), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION4, RegionCircle(PointFromId(929702535), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(9), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION4, RegionCircle(PointFromId(48665747), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(11), true);
    }

    if ((UnitIsAlive(UnitFromId(171)) == true)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(25), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION, RegionCircle(PointFromId(1691027196), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(13), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION, RegionCircle(PointFromId(1568815281), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(15), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION, RegionCircle(PointFromId(124031490), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(17), true);
    }

    if ((UnitIsAlive(UnitFromId(193)) == true)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(27), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION5, RegionCircle(PointFromId(193599702), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(19), true);
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_pLAYER_02_DOMINION5, RegionCircle(PointFromId(1086760803), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_spotValid = true;
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(21), true);
    }

    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (UnitGroupCount(UnitGroup("PlanetaryFortress", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00011", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00012", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00055", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00014", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if (((UnitIsAlive(gv_jinaraMothership1) == true) || (UnitIsAlive(gv_jinaraMothership2) == true))) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    }

    Wait(2.0, c_timeReal);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/636230E3"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoreBattlecruisersOnlineQ_Init () {
    gt_MoreBattlecruisersOnlineQ = TriggerCreate("gt_MoreBattlecruisersOnlineQ_Func");
    TriggerAddEventTimer(gt_MoreBattlecruisersOnlineQ, gv_battlecruiser2Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Base Left Dies
//--------------------------------------------------------------------------------------------------
bool gt_DominionBaseLeftDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(28), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionBaseLeftDies_Init () {
    gt_DominionBaseLeftDies = TriggerCreate("gt_DominionBaseLeftDies_Func");
    TriggerAddEventUnitDied(gt_DominionBaseLeftDies, UnitRefFromUnit(UnitFromId(182)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Base Mid Dies
//--------------------------------------------------------------------------------------------------
bool gt_DominionBaseMidDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(29), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionBaseMidDies_Init () {
    gt_DominionBaseMidDies = TriggerCreate("gt_DominionBaseMidDies_Func");
    TriggerAddEventUnitDied(gt_DominionBaseMidDies, UnitRefFromUnit(UnitFromId(171)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Base Right Dies
//--------------------------------------------------------------------------------------------------
bool gt_DominionBaseRightDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(30), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionBaseRightDies_Init () {
    gt_DominionBaseRightDies = TriggerCreate("gt_DominionBaseRightDies_Func");
    TriggerAddEventUnitDied(gt_DominionBaseRightDies, UnitRefFromUnit(UnitFromId(193)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Dialog
//--------------------------------------------------------------------------------------------------
bool gt_GorgonDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(296, 129, c_anchorTop, 0, -17, false);
    gv_gorgonDialog.lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 68, 68, c_anchorLeft, 40, 2, StringToText(""), "Assets\\Textures\\btn-unit-terran-gorgonbattlecruiser.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_gorgonDialog.lv_gorgon1 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(gv_gorgonDialog.lv_gorgon1, false, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 68, 68, c_anchorLeft, 120, 2, StringToText(""), "Assets\\Textures\\btn-unit-terran-gorgonbattlecruiser.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_gorgonDialog.lv_gorgon2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(gv_gorgonDialog.lv_gorgon2, false, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 68, 68, c_anchorLeft, 200, 2, StringToText(""), "Assets\\Textures\\btn-unit-terran-gorgonbattlecruiser.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_gorgonDialog.lv_gorgon3 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(gv_gorgonDialog.lv_gorgon3, false, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/8B406251", "A", FixedToText(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 240.0, 300.0), c_fixedPrecisionAny));
    libNtve_gf_CreateDialogItemButton(gv_gorgonDialog.lv_dialog, 80, 80, c_anchorLeft, 28, 2, TextExpressionAssemble("Param/Expression/8B406251"), StringToText(""), "Assets\\Textures\\ui_heroicons_frame_normaloverpressedover_terran.dds");
    gv_gorgonDialog.lv_button1 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_gorgonDialog.lv_button1, "Assets\\Textures\\ui_heroicons_frame_normalpressed_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_gorgonDialog.lv_button1, c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetEnabled(gv_gorgonDialog.lv_button1, PlayerGroupAll(), true);
    TextExpressionSetToken("Param/Expression/88FF0399", "A", FixedToText(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 240.0, 300.0), c_fixedPrecisionAny));
    libNtve_gf_CreateDialogItemButton(gv_gorgonDialog.lv_dialog, 80, 80, c_anchorLeft, 108, 2, TextExpressionAssemble("Param/Expression/88FF0399"), StringToText(""), "Assets\\Textures\\ui_heroicons_frame_normaloverpressedover_terran.dds");
    gv_gorgonDialog.lv_button2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_gorgonDialog.lv_button2, "Assets\\Textures\\ui_heroicons_frame_normalpressed_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_gorgonDialog.lv_button2, c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetEnabled(gv_gorgonDialog.lv_button2, PlayerGroupAll(), true);
    TextExpressionSetToken("Param/Expression/F8FE1F29", "A", FixedToText(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 240.0, 300.0), c_fixedPrecisionAny));
    libNtve_gf_CreateDialogItemButton(gv_gorgonDialog.lv_dialog, 80, 80, c_anchorLeft, 188, 2, TextExpressionAssemble("Param/Expression/F8FE1F29"), StringToText(""), "Assets\\Textures\\ui_heroicons_frame_normaloverpressedover_terran.dds");
    gv_gorgonDialog.lv_button3 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_gorgonDialog.lv_button3, "Assets\\Textures\\ui_heroicons_frame_normalpressed_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_gorgonDialog.lv_button3, c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetEnabled(gv_gorgonDialog.lv_button3, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(gv_gorgonDialog.lv_dialog, 68, 68, c_anchorLeft, 35, 2, FixedToText(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 240.0, 300.0), c_fixedPrecisionAny), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_gorgonDialog.lv_timeLabel1 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_gorgonDialog.lv_timeLabel1, "GorgonTimerText", PlayerGroupAll());
    DialogControlSetVisible(gv_gorgonDialog.lv_timeLabel1, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(gv_gorgonDialog.lv_dialog, 68, 68, c_anchorLeft, 115, 2, FixedToText(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 240.0, 300.0), c_fixedPrecisionAny), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_gorgonDialog.lv_timeLabel2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_gorgonDialog.lv_timeLabel2, "GorgonTimerText", PlayerGroupAll());
    DialogControlSetVisible(gv_gorgonDialog.lv_timeLabel2, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(gv_gorgonDialog.lv_dialog, 68, 68, c_anchorLeft, 195, 2, FixedToText(libNtve_gf_DifficultyValueFixed(180.0, 180.0, 240.0, 300.0), c_fixedPrecisionAny), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_gorgonDialog.lv_timeLabel3 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_gorgonDialog.lv_timeLabel3, "GorgonTimerText", PlayerGroupAll());
    DialogControlSetVisible(gv_gorgonDialog.lv_timeLabel3, PlayerGroupAll(), false);
    DialogSetVisible(gv_gorgonDialog.lv_dialog, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("LeaderboardPop", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((DialogControlIsEnabled(gv_gorgonDialog.lv_button1, gv_pLAYER_01_USER) == false)) {
            if ((TimerGetRemaining(gv_gorgonDialog.lv_gorgonTimer1) < 0.1)) {
                DialogControlSetVisible(gv_gorgonDialog.lv_timeLabel1, PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_gorgonDialog.lv_button1, PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemAcceptMouse(gv_gorgonDialog.lv_button1, true, PlayerGroupAll());
                DialogControlSetEnabled(gv_gorgonDialog.lv_gorgon1, PlayerGroupAll(), true);
            }
            else {
                libNtve_gf_SetDialogItemText(gv_gorgonDialog.lv_timeLabel1, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(gv_gorgonDialog.lv_gorgonTimer1))), PlayerGroupAll());
            }
        }

        if ((DialogControlIsEnabled(gv_gorgonDialog.lv_button2, gv_pLAYER_01_USER) == false)) {
            if ((TimerGetRemaining(gv_gorgonDialog.lv_gorgonTimer2) < 0.1)) {
                DialogControlSetVisible(gv_gorgonDialog.lv_timeLabel2, PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_gorgonDialog.lv_button2, PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemAcceptMouse(gv_gorgonDialog.lv_button2, true, PlayerGroupAll());
                DialogControlSetEnabled(gv_gorgonDialog.lv_gorgon2, PlayerGroupAll(), true);
            }
            else {
                libNtve_gf_SetDialogItemText(gv_gorgonDialog.lv_timeLabel2, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(gv_gorgonDialog.lv_gorgonTimer2))), PlayerGroupAll());
            }
        }

        if ((DialogControlIsEnabled(gv_gorgonDialog.lv_button3, gv_pLAYER_01_USER) == false)) {
            if ((TimerGetRemaining(gv_gorgonDialog.lv_gorgonTimer3) < 0.1)) {
                DialogControlSetVisible(gv_gorgonDialog.lv_timeLabel3, PlayerGroupAll(), false);
                DialogControlSetEnabled(gv_gorgonDialog.lv_button3, PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemAcceptMouse(gv_gorgonDialog.lv_button3, true, PlayerGroupAll());
                DialogControlSetEnabled(gv_gorgonDialog.lv_gorgon3, PlayerGroupAll(), true);
            }
            else {
                libNtve_gf_SetDialogItemText(gv_gorgonDialog.lv_timeLabel3, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(gv_gorgonDialog.lv_gorgonTimer3))), PlayerGroupAll());
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonDialog_Init () {
    gt_GorgonDialog = TriggerCreate("gt_GorgonDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_GorgonButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoB95A768C_ae = 31;
    const int autoB95A768C_ai = 1;
    int auto2D8BCD80_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_gorgonDialog.lv_button1) || (EventDialogControl() == gv_gorgonDialog.lv_button2) || (EventDialogControl() == gv_gorgonDialog.lv_button3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("GorgonButton", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_gorgonsSummoned += 1;
    lv_i = 0;
    for ( ; ( (autoB95A768C_ai >= 0 && lv_i <= autoB95A768C_ae) || (autoB95A768C_ai < 0 && lv_i >= autoB95A768C_ae) ) ; lv_i += autoB95A768C_ai ) {
        PingDestroy(gv_trackedArrowPings[lv_i]);
    }
    auto2D8BCD80_val = EventDialogControl();
    if (auto2D8BCD80_val == gv_gorgonDialog.lv_button1) {
        DialogControlSetEnabled(gv_gorgonDialog.lv_button1, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_gorgonDialog.lv_gorgon1, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemAcceptMouse(gv_gorgonDialog.lv_button1, false, PlayerGroupAll());
        TimerStart(gv_gorgonDialog.lv_gorgonTimer1, libNtve_gf_DifficultyValueFixed(180.0, 180.0, 240.0, 300.0), false, c_timeAI);
        libNtve_gf_SetDialogItemText(gv_gorgonDialog.lv_timeLabel1, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(gv_gorgonDialog.lv_gorgonTimer1))), PlayerGroupAll());
        DialogControlSetVisible(gv_gorgonDialog.lv_timeLabel1, PlayerGroupAll(), true);
        TriggerExecute(gt_SummonGorgonLeft, true, false);
    }
    else if (auto2D8BCD80_val == gv_gorgonDialog.lv_button2) {
        DialogControlSetEnabled(gv_gorgonDialog.lv_button2, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_gorgonDialog.lv_gorgon2, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemAcceptMouse(gv_gorgonDialog.lv_button2, false, PlayerGroupAll());
        TimerStart(gv_gorgonDialog.lv_gorgonTimer2, libNtve_gf_DifficultyValueFixed(180.0, 180.0, 240.0, 300.0), false, c_timeAI);
        libNtve_gf_SetDialogItemText(gv_gorgonDialog.lv_timeLabel2, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(gv_gorgonDialog.lv_gorgonTimer2))), PlayerGroupAll());
        DialogControlSetVisible(gv_gorgonDialog.lv_timeLabel2, PlayerGroupAll(), true);
        TriggerExecute(gt_SummonGorgonMiddle, true, false);
    }
    else if (auto2D8BCD80_val == gv_gorgonDialog.lv_button3) {
        DialogControlSetEnabled(gv_gorgonDialog.lv_button3, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_gorgonDialog.lv_gorgon3, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemAcceptMouse(gv_gorgonDialog.lv_button3, false, PlayerGroupAll());
        TimerStart(gv_gorgonDialog.lv_gorgonTimer3, libNtve_gf_DifficultyValueFixed(180.0, 180.0, 240.0, 300.0), false, c_timeAI);
        libNtve_gf_SetDialogItemText(gv_gorgonDialog.lv_timeLabel3, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(gv_gorgonDialog.lv_gorgonTimer3))), PlayerGroupAll());
        DialogControlSetVisible(gv_gorgonDialog.lv_timeLabel3, PlayerGroupAll(), true);
        TriggerExecute(gt_SummonGorgonRight, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonButtonPressed_Init () {
    gt_GorgonButtonPressed = TriggerCreate("gt_GorgonButtonPressed_Func");
    TriggerAddEventDialogControl(gt_GorgonButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Hover Pings Enter
//--------------------------------------------------------------------------------------------------
bool gt_GorgonHoverPingsEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto10A46168_ae = 31;
    const int auto10A46168_ai = 1;
    int autoAAC0D89C_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_gorgonDialog.lv_button1) || (EventDialogControl() == gv_gorgonDialog.lv_button2) || (EventDialogControl() == gv_gorgonDialog.lv_button3)))) {
            return false;
        }

        if (!((DialogControlIsEnabled(EventDialogControl(), 1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_GorgonHoverPingsExit);
    lv_i = 0;
    for ( ; ( (auto10A46168_ai >= 0 && lv_i <= auto10A46168_ae) || (auto10A46168_ai < 0 && lv_i >= auto10A46168_ae) ) ; lv_i += auto10A46168_ai ) {
        PingDestroy(gv_trackedArrowPings[lv_i]);
    }
    autoAAC0D89C_val = EventDialogControl();
    if (autoAAC0D89C_val == gv_gorgonDialog.lv_button1) {
        gf_CreateArrowPings(2, 0.0, 45.0);
    }
    else if (autoAAC0D89C_val == gv_gorgonDialog.lv_button2) {
        gf_CreateArrowPings(4, 0.0, 45.0);
    }
    else if (autoAAC0D89C_val == gv_gorgonDialog.lv_button3) {
        gf_CreateArrowPings(6, 0.0, 45.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonHoverPingsEnter_Init () {
    gt_GorgonHoverPingsEnter = TriggerCreate("gt_GorgonHoverPingsEnter_Func");
    TriggerAddEventDialogControl(gt_GorgonHoverPingsEnter, 1, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Hover Pings Exit
//--------------------------------------------------------------------------------------------------
bool gt_GorgonHoverPingsExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto92643E2A_ae = 31;
    const int auto92643E2A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_gorgonDialog.lv_button1) || (EventDialogControl() == gv_gorgonDialog.lv_button2) || (EventDialogControl() == gv_gorgonDialog.lv_button3)))) {
            return false;
        }

        if (!((DialogControlIsEnabled(EventDialogControl(), 1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    lv_i = 0;
    for ( ; ( (auto92643E2A_ai >= 0 && lv_i <= auto92643E2A_ae) || (auto92643E2A_ai < 0 && lv_i >= auto92643E2A_ae) ) ; lv_i += auto92643E2A_ai ) {
        PingDestroy(gv_trackedArrowPings[lv_i]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonHoverPingsExit_Init () {
    gt_GorgonHoverPingsExit = TriggerCreate("gt_GorgonHoverPingsExit_Func");
    TriggerAddEventDialogControl(gt_GorgonHoverPingsExit, 1, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Summon Gorgon Left
//--------------------------------------------------------------------------------------------------
bool gt_SummonGorgonLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    unit lv_gorgon;
    int lv_gorgonPing;
    point[5] lv_waypoint;
    int lv_currentWaypoint;
    bool lv_jumpCheckReached;
    point[6] lv_nukePoints;
    timer lv_nukeCooldown;
    int lv_i;

    // Automatic Variable Declarations
    const int autoAFB8B461_ae = 5;
    const int autoAFB8B461_ai = 1;

    // Variable Initialization
    lv_gorgonPing = c_invalidPingId;
    lv_nukeCooldown = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waypoint[0] = PointFromId(403441445);
    lv_waypoint[1] = PointFromId(469131676);
    lv_waypoint[2] = PointFromId(59295952);
    lv_waypoint[3] = PointFromId(552785957);
    lv_waypoint[4] = PointFromId(1848890021);
    lv_nukePoints[1] = PointFromId(1030426914);
    lv_nukePoints[2] = PointFromId(1210590171);
    lv_nukePoints[3] = PointFromId(1855756309);
    lv_nukePoints[4] = PointFromId(1880728590);
    lv_nukePoints[5] = PointFromId(434561813);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        lv_spawnLocation = PointFromId(1125163957);
        lv_currentWaypoint = 0;
    }
    else {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            lv_spawnLocation = PointFromId(403441445);
            lv_currentWaypoint = 1;
        }
        else {
            lv_currentWaypoint = 2;
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_spawnLocation = PointFromId(1979165915);
            }
            else {
                lv_spawnLocation = PointFromId(2059086251);
            }
        }
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "GehennaCruiser", 0, 0, lv_spawnLocation);
    lv_gorgon = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_gorgon, false);
    UnitSetTeamColorIndex(lv_gorgon, 2);
    UnitIssueOrder(lv_gorgon, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetHeight(lv_gorgon, 12.0, 0.0);
    UnitSetState(lv_gorgon, c_unitStateInvulnerable, true);
    UnitSetState(lv_gorgon, c_unitStateSelectable, false);
    UnitSetState(lv_gorgon, c_unitStateCursorable, false);
    UnitSetState(lv_gorgon, c_unitStateTargetable, false);
    UnitSetState(lv_gorgon, c_unitStateTooltipable, false);
    UnitSetState(lv_gorgon, c_unitStateStatusBar, false);
    Wait(0.0625, c_timeGame);
    if ((UnitIsAlive(lv_gorgon) == false)) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", lv_spawnLocation, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    lv_gorgonPing = PingLastCreated();
    PingSetTooltip(lv_gorgonPing, StringExternal("Param/Value/D23E2078"));
    PingSetScale(lv_gorgonPing, 0.7);
    PingSetUnit(lv_gorgonPing, lv_gorgon);
    SoundPlayAtPointForPlayer(SoundLink("GorgonArrives", 0), c_maxPlayers, PlayerGroupAll(), lv_spawnLocation, 0.0, 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Nova_GorgonSpawn_AlarmTrigger_2D", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_ShowHideUnit(lv_gorgon, true);
    libNtve_gf_ShareVisionofUnit(lv_gorgon, true, gv_pLAYER_01_USER);
    UnitSetHeight(lv_gorgon, 6.0, 2.0);
    Wait(2.0, c_timeGame);
    UnitSetState(lv_gorgon, c_unitStateInvulnerable, false);
    UnitSetState(lv_gorgon, c_unitStateSelectable, true);
    UnitSetState(lv_gorgon, c_unitStateCursorable, true);
    UnitSetState(lv_gorgon, c_unitStateTargetable, true);
    UnitSetState(lv_gorgon, c_unitStateTooltipable, true);
    UnitSetState(lv_gorgon, c_unitStateStatusBar, true);
    UnitSetOwner(lv_gorgon, gv_pLAYER_02_DOMINION2, true);
    AISetUnitScriptControlled(lv_gorgon, true);
    while (true) {
        if ((UnitIsAlive(lv_gorgon) == false)) {
            PingDestroy(lv_gorgonPing);
            return true;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((lv_jumpCheckReached == false)) {
            if ((libNtve_gf_UnitInRegion(lv_gorgon, RegionCircle(PointFromId(42862931), 2.0)) == true)) {
                lv_jumpCheckReached = true;
                if ((UnitIsAlive(UnitFromId(446)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 16) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > (2 * UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)))) {
                    lv_currentWaypoint = 4;
                    gf_GorgonHyperjump(lv_gorgon, lv_waypoint[3]);
                    if ((UnitIsAlive(lv_gorgon) == false)) {
                        PingDestroy(lv_gorgonPing);
                        return true;
                    }

                }

            }

        }

        lv_i = 1;
        for ( ; ( (autoAFB8B461_ai >= 0 && lv_i <= autoAFB8B461_ae) || (autoAFB8B461_ai < 0 && lv_i >= autoAFB8B461_ae) ) ; lv_i += autoAFB8B461_ai ) {
            if ((TimerGetRemaining(lv_nukeCooldown) < 0.1) && (DistanceBetweenPoints(UnitGetPosition(lv_gorgon), lv_nukePoints[lv_i]) < 19.0) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(lv_nukePoints[lv_i], 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 3)) {
                TimerStart(lv_nukeCooldown, 15.0, false, c_timeAI);
                UnitIssueOrder(lv_gorgon, OrderTargetingPoint(AbilityCommand("Apocalypse", 0), lv_nukePoints[lv_i]), c_orderQueueAddToFront);
                Wait(1.0, c_timeAI);
                if ((UnitIsAlive(lv_gorgon) == false)) {
                    PingDestroy(lv_gorgonPing);
                    return true;
                }

                break;
            }

        }
        if ((libNtve_gf_UnitInRegion(lv_gorgon, RegionCircle(lv_waypoint[lv_currentWaypoint], 1.0)) == true)) {
            lv_currentWaypoint += 1;
            if ((lv_currentWaypoint > 4)) {
                UnitRemove(lv_gorgon);
                PingDestroy(lv_gorgonPing);
                return true;
            }

        }
        else {
            UnitIssueOrder(lv_gorgon, OrderTargetingPoint(AbilityCommand("move", 0), lv_waypoint[lv_currentWaypoint]), c_orderQueueReplace);
            UnitIssueOrder(lv_gorgon, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SummonGorgonLeft_Init () {
    gt_SummonGorgonLeft = TriggerCreate("gt_SummonGorgonLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Summon Gorgon Middle
//--------------------------------------------------------------------------------------------------
bool gt_SummonGorgonMiddle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    unit lv_gorgon;
    int lv_gorgonPing;
    point lv_waypoint;
    bool lv_jumpCheck1Reached;
    bool lv_jumpCheck2Reached;
    bool lv_jumpCheck3Reached;
    bool lv_highMode;
    point[6] lv_nukePoints;
    timer lv_nukeCooldown;
    int lv_i;

    // Automatic Variable Declarations
    const int autoC8D5DDB9_ae = 5;
    const int autoC8D5DDB9_ai = 1;

    // Variable Initialization
    lv_gorgonPing = c_invalidPingId;
    lv_nukeCooldown = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waypoint = PointFromId(2065466641);
    lv_nukePoints[1] = PointFromId(976762140);
    lv_nukePoints[2] = PointFromId(784448203);
    lv_nukePoints[3] = PointFromId(12081422);
    lv_nukePoints[4] = PointFromId(413750362);
    lv_nukePoints[5] = PointFromId(955374671);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(68), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        lv_spawnLocation = PointFromId(782694821);
    }
    else {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(53), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            lv_spawnLocation = PointFromId(489810957);
        }
        else {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(54), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_spawnLocation = PointFromId(1135613313);
            }
            else {
                lv_spawnLocation = PointFromId(549773815);
            }
        }
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "GehennaCruiser", 0, 0, lv_spawnLocation);
    lv_gorgon = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_gorgon, false);
    UnitSetTeamColorIndex(lv_gorgon, 2);
    UnitIssueOrder(lv_gorgon, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetHeight(lv_gorgon, 12.0, 0.0);
    UnitSetState(lv_gorgon, c_unitStateInvulnerable, true);
    UnitSetState(lv_gorgon, c_unitStateSelectable, false);
    UnitSetState(lv_gorgon, c_unitStateCursorable, false);
    UnitSetState(lv_gorgon, c_unitStateTargetable, false);
    UnitSetState(lv_gorgon, c_unitStateTooltipable, false);
    UnitSetState(lv_gorgon, c_unitStateStatusBar, false);
    Wait(0.0625, c_timeGame);
    if ((UnitIsAlive(lv_gorgon) == false)) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", lv_spawnLocation, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    lv_gorgonPing = PingLastCreated();
    PingSetTooltip(lv_gorgonPing, StringExternal("Param/Value/6F9500A4"));
    PingSetScale(lv_gorgonPing, 0.7);
    PingSetUnit(lv_gorgonPing, lv_gorgon);
    SoundPlayAtPointForPlayer(SoundLink("GorgonArrives", 0), c_maxPlayers, PlayerGroupAll(), lv_spawnLocation, 0.0, 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Nova_GorgonSpawn_AlarmTrigger_2D", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_ShowHideUnit(lv_gorgon, true);
    libNtve_gf_ShareVisionofUnit(lv_gorgon, true, gv_pLAYER_01_USER);
    UnitSetHeight(lv_gorgon, 6.0, 2.0);
    Wait(2.0, c_timeGame);
    UnitSetState(lv_gorgon, c_unitStateInvulnerable, false);
    UnitSetState(lv_gorgon, c_unitStateSelectable, true);
    UnitSetState(lv_gorgon, c_unitStateCursorable, true);
    UnitSetState(lv_gorgon, c_unitStateTargetable, true);
    UnitSetState(lv_gorgon, c_unitStateTooltipable, true);
    UnitSetState(lv_gorgon, c_unitStateStatusBar, true);
    UnitSetOwner(lv_gorgon, gv_pLAYER_02_DOMINION2, true);
    AISetUnitScriptControlled(lv_gorgon, true);
    while (true) {
        if ((UnitIsAlive(lv_gorgon) == false)) {
            PingDestroy(lv_gorgonPing);
            return true;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((lv_jumpCheck1Reached == false)) {
            if ((libNtve_gf_UnitInRegion(lv_gorgon, RegionCircle(PointFromId(974849459), 2.0)) == true)) {
                lv_jumpCheck1Reached = true;
                if ((UnitIsAlive(UnitFromId(434)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 16)) {
                    lv_waypoint = PointFromId(1733544732);
                    gf_GorgonHyperjump(lv_gorgon, PointFromId(2058338590));
                }
                else {
                    if ((UnitIsAlive(UnitFromId(430)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 16)) {
                        lv_waypoint = PointFromId(893641366);
                        gf_GorgonHyperjump(lv_gorgon, PointFromId(1176072038));
                        lv_jumpCheck2Reached = true;
                    }
                    else {
                        if ((UnitIsAlive(UnitFromId(432)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 16)) {
                            lv_waypoint = PointFromId(2065466641);
                            gf_GorgonHyperjump(lv_gorgon, PointFromId(1912722027));
                            lv_jumpCheck3Reached = true;
                        }

                    }
                }
            }

        }

        if ((lv_jumpCheck2Reached == false)) {
            if ((libNtve_gf_UnitInRegion(lv_gorgon, RegionCircle(PointFromId(716450712), 2.0)) == true)) {
                lv_jumpCheck2Reached = true;
                if ((UnitIsAlive(UnitFromId(430)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 16)) {
                    lv_waypoint = PointFromId(893641366);
                    gf_GorgonHyperjump(lv_gorgon, PointFromId(1176072038));
                }
                else {
                    if ((UnitIsAlive(UnitFromId(432)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 16)) {
                        lv_waypoint = PointFromId(2065466641);
                        gf_GorgonHyperjump(lv_gorgon, PointFromId(1912722027));
                        lv_jumpCheck3Reached = true;
                    }

                }
            }

        }

        if ((lv_jumpCheck3Reached == false)) {
            if ((libNtve_gf_UnitInRegion(lv_gorgon, RegionCircle(PointFromId(387578856), 2.0)) == true)) {
                lv_jumpCheck3Reached = true;
                if ((UnitIsAlive(UnitFromId(432)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 16)) {
                    lv_waypoint = PointFromId(2065466641);
                    gf_GorgonHyperjump(lv_gorgon, PointFromId(1912722027));
                }

            }

        }

        if ((UnitIsAlive(lv_gorgon) == false)) {
            PingDestroy(lv_gorgonPing);
            return true;
        }

        if ((lv_highMode == false)) {
            if ((UnitGroupCount(UnitGroup("NovaMothership", gv_pLAYER_02_DOMINION3, RegionCircle(UnitGetPosition(lv_gorgon), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                lv_highMode = true;
                UnitSetHeight(lv_gorgon, 8.0, 3.0);
            }

        }
        else {
            if ((UnitGroupCount(UnitGroup("NovaMothership", gv_pLAYER_02_DOMINION3, RegionCircle(UnitGetPosition(lv_gorgon), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                lv_highMode = false;
                UnitSetHeight(lv_gorgon, 6.0, 3.0);
            }

        }
        lv_i = 1;
        for ( ; ( (autoC8D5DDB9_ai >= 0 && lv_i <= autoC8D5DDB9_ae) || (autoC8D5DDB9_ai < 0 && lv_i >= autoC8D5DDB9_ae) ) ; lv_i += autoC8D5DDB9_ai ) {
            if ((TimerGetRemaining(lv_nukeCooldown) < 0.1) && (DistanceBetweenPoints(UnitGetPosition(lv_gorgon), lv_nukePoints[lv_i]) < 17.0) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(lv_nukePoints[lv_i], 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 3)) {
                TimerStart(lv_nukeCooldown, 15.0, false, c_timeAI);
                UnitIssueOrder(lv_gorgon, OrderTargetingPoint(AbilityCommand("Apocalypse", 0), lv_nukePoints[lv_i]), c_orderQueueAddToFront);
                Wait(1.0, c_timeAI);
                if ((UnitIsAlive(lv_gorgon) == false)) {
                    PingDestroy(lv_gorgonPing);
                    return true;
                }

                break;
            }

        }
        if ((libNtve_gf_UnitInRegion(lv_gorgon, RegionCircle(lv_waypoint, 1.0)) == true)) {
            UnitRemove(lv_gorgon);
            PingDestroy(lv_gorgonPing);
            return true;
        }
        else {
            UnitIssueOrder(lv_gorgon, OrderTargetingPoint(AbilityCommand("move", 0), lv_waypoint), c_orderQueueReplace);
            UnitIssueOrder(lv_gorgon, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SummonGorgonMiddle_Init () {
    gt_SummonGorgonMiddle = TriggerCreate("gt_SummonGorgonMiddle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Summon Gorgon Right
//--------------------------------------------------------------------------------------------------
bool gt_SummonGorgonRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    unit lv_gorgon;
    int lv_gorgonPing;
    point[5] lv_waypoint;
    int lv_currentWaypoint;
    bool lv_jumpCheckReached;
    point[6] lv_nukePoints;
    timer lv_nukeCooldown;
    int lv_i;

    // Automatic Variable Declarations
    const int auto3E341087_ae = 5;
    const int auto3E341087_ai = 1;

    // Variable Initialization
    lv_gorgonPing = c_invalidPingId;
    lv_nukeCooldown = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waypoint[0] = PointFromId(1855747680);
    lv_waypoint[1] = PointFromId(1019488526);
    lv_waypoint[2] = PointFromId(358908165);
    lv_waypoint[3] = PointFromId(29277217);
    lv_waypoint[4] = PointFromId(58634108);
    lv_nukePoints[1] = PointFromId(455922536);
    lv_nukePoints[2] = PointFromId(1562238813);
    lv_nukePoints[3] = PointFromId(1542110139);
    lv_nukePoints[4] = PointFromId(1909278822);
    lv_nukePoints[5] = PointFromId(304243255);
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        lv_spawnLocation = PointFromId(856551277);
        lv_currentWaypoint = 0;
    }
    else {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            lv_spawnLocation = PointFromId(1855747680);
            lv_currentWaypoint = 1;
        }
        else {
            lv_currentWaypoint = 2;
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_spawnLocation = PointFromId(413678409);
            }
            else {
                lv_spawnLocation = PointFromId(166587240);
            }
        }
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "GehennaCruiser", 0, 0, lv_spawnLocation);
    lv_gorgon = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_gorgon, false);
    UnitSetTeamColorIndex(lv_gorgon, 2);
    UnitIssueOrder(lv_gorgon, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetHeight(lv_gorgon, 12.0, 0.0);
    UnitSetState(lv_gorgon, c_unitStateInvulnerable, true);
    UnitSetState(lv_gorgon, c_unitStateSelectable, false);
    UnitSetState(lv_gorgon, c_unitStateCursorable, false);
    UnitSetState(lv_gorgon, c_unitStateTargetable, false);
    UnitSetState(lv_gorgon, c_unitStateTooltipable, false);
    UnitSetState(lv_gorgon, c_unitStateStatusBar, false);
    Wait(0.0625, c_timeGame);
    if ((UnitIsAlive(lv_gorgon) == false)) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", lv_spawnLocation, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    lv_gorgonPing = PingLastCreated();
    PingSetTooltip(lv_gorgonPing, StringExternal("Param/Value/30D49896"));
    PingSetScale(lv_gorgonPing, 0.7);
    PingSetUnit(lv_gorgonPing, lv_gorgon);
    SoundPlayAtPointForPlayer(SoundLink("GorgonArrives", 0), c_maxPlayers, PlayerGroupAll(), lv_spawnLocation, 0.0, 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Nova_GorgonSpawn_AlarmTrigger_2D", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_ShowHideUnit(lv_gorgon, true);
    libNtve_gf_ShareVisionofUnit(lv_gorgon, true, gv_pLAYER_01_USER);
    UnitSetHeight(lv_gorgon, 6.0, 2.0);
    Wait(2.0, c_timeGame);
    UnitSetState(lv_gorgon, c_unitStateInvulnerable, false);
    UnitSetState(lv_gorgon, c_unitStateSelectable, true);
    UnitSetState(lv_gorgon, c_unitStateCursorable, true);
    UnitSetState(lv_gorgon, c_unitStateTargetable, true);
    UnitSetState(lv_gorgon, c_unitStateTooltipable, true);
    UnitSetState(lv_gorgon, c_unitStateStatusBar, true);
    UnitSetOwner(lv_gorgon, gv_pLAYER_02_DOMINION2, true);
    AISetUnitScriptControlled(lv_gorgon, true);
    while (true) {
        if ((UnitIsAlive(lv_gorgon) == false)) {
            PingDestroy(lv_gorgonPing);
            return true;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((lv_jumpCheckReached == false)) {
            if ((libNtve_gf_UnitInRegion(lv_gorgon, RegionCircle(PointFromId(276584802), 2.0)) == true)) {
                lv_jumpCheckReached = true;
                if ((UnitIsAlive(UnitFromId(428)) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 16) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > (2 * UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)))) {
                    lv_currentWaypoint = 4;
                    gf_GorgonHyperjump(lv_gorgon, lv_waypoint[3]);
                    if ((UnitIsAlive(lv_gorgon) == false)) {
                        PingDestroy(lv_gorgonPing);
                        return true;
                    }

                }

            }

        }

        lv_i = 1;
        for ( ; ( (auto3E341087_ai >= 0 && lv_i <= auto3E341087_ae) || (auto3E341087_ai < 0 && lv_i >= auto3E341087_ae) ) ; lv_i += auto3E341087_ai ) {
            if ((TimerGetRemaining(lv_nukeCooldown) < 0.1) && (DistanceBetweenPoints(UnitGetPosition(lv_gorgon), lv_nukePoints[lv_i]) < 19.0) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(lv_nukePoints[lv_i], 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 3)) {
                TimerStart(lv_nukeCooldown, 15.0, false, c_timeAI);
                UnitIssueOrder(lv_gorgon, OrderTargetingPoint(AbilityCommand("Apocalypse", 0), lv_nukePoints[lv_i]), c_orderQueueAddToFront);
                Wait(1.0, c_timeAI);
                if ((UnitIsAlive(lv_gorgon) == false)) {
                    PingDestroy(lv_gorgonPing);
                    return true;
                }

                break;
            }

        }
        if ((libNtve_gf_UnitInRegion(lv_gorgon, RegionCircle(lv_waypoint[lv_currentWaypoint], 1.0)) == true)) {
            lv_currentWaypoint += 1;
            if ((lv_currentWaypoint > 4)) {
                UnitRemove(lv_gorgon);
                PingDestroy(lv_gorgonPing);
                return true;
            }

        }
        else {
            UnitIssueOrder(lv_gorgon, OrderTargetingPoint(AbilityCommand("move", 0), lv_waypoint[lv_currentWaypoint]), c_orderQueueReplace);
            UnitIssueOrder(lv_gorgon, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SummonGorgonRight_Init () {
    gt_SummonGorgonRight = TriggerCreate("gt_SummonGorgonRight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV Despawn
//--------------------------------------------------------------------------------------------------
bool gt_SCVDespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_despawn;
    point lv_despawnPoint;
    unit lv_sCV;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION4) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION5)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Barracks") || (UnitGetType(EventUnitProgressUnit()) == "Bunker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(2)) == true)) {
        lv_despawn = true;
        lv_despawnPoint = PointFromId(534485768);
        lv_sCV = EventUnit();
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(7)) == true)) {
        lv_despawn = true;
        lv_despawnPoint = PointFromId(345606986);
        lv_sCV = EventUnit();
    }

    if ((lv_despawn == false)) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lv_sCV) == false) || (libNCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(lv_sCV, RegionCircle(lv_despawnPoint, 1.0)) == true)) {
            UnitRemove(lv_sCV);
            return true;
        }
        else {
            UnitIssueOrder(lv_sCV, OrderTargetingPoint(AbilityCommand("move", 0), lv_despawnPoint), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVDespawn_Init () {
    gt_SCVDespawn = TriggerCreate("gt_SCVDespawn_Func");
    TriggerAddEventUnitConstructProgress(gt_SCVDespawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barracks Construction
//--------------------------------------------------------------------------------------------------
bool gt_BarracksConstruction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_barracks;
    region lv_region;

    // Automatic Variable Declarations
    region auto68FDEA7D_val;
    region autoE2F66629_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION4) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION5)))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Barracks"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barracks = EventUnitProgressUnit();
    if ((libNtve_gf_UnitInRegion(lv_barracks, RegionFromId(1)) == true)) {
        lv_region = RegionFromId(1);
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(70), true);
    }

    if ((libNtve_gf_UnitInRegion(lv_barracks, RegionFromId(2)) == true)) {
        lv_region = RegionFromId(2);
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(71), true);
    }

    if ((libNtve_gf_UnitInRegion(lv_barracks, RegionFromId(6)) == true)) {
        lv_region = RegionFromId(6);
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(76), true);
    }

    if ((libNtve_gf_UnitInRegion(lv_barracks, RegionFromId(7)) == true)) {
        lv_region = RegionFromId(7);
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(75), true);
    }

    UnitIssueOrder(lv_barracks, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_barracks, OrderTargetingPoint(AbilityCommand("BarracksAddOns", 1), UnitGetPosition(lv_barracks)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeAI);
    AISetUnitScriptControlled(lv_barracks, false);
    if (((lv_region == RegionFromId(1)) || (lv_region == RegionFromId(6)))) {
        Wait(120.0, c_timeAI);
    }
    else {
        Wait(60.0, c_timeAI);
    }
    if ((UnitIsAlive(lv_barracks) == true)) {
        auto68FDEA7D_val = lv_region;
        if (auto68FDEA7D_val == RegionFromId(1)) {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(70), true);
        }
        else if (auto68FDEA7D_val == RegionFromId(2)) {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(71), true);
        }
        else if (auto68FDEA7D_val == RegionFromId(6)) {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(76), true);
        }
        else if (auto68FDEA7D_val == RegionFromId(7)) {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(75), true);
        }
        else {
        }
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((UnitIsAlive(lv_barracks) == false)) {
            autoE2F66629_val = lv_region;
            if (autoE2F66629_val == RegionFromId(1)) {
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(1), false);
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(1), false);
            }
            else if (autoE2F66629_val == RegionFromId(2)) {
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(2), false);
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(2), false);
            }
            else if (autoE2F66629_val == RegionFromId(6)) {
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(6), false);
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(6), false);
            }
            else if (autoE2F66629_val == RegionFromId(7)) {
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(7), false);
                AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(7), false);
            }
            else {
            }
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarracksConstruction_Init () {
    gt_BarracksConstruction = TriggerCreate("gt_BarracksConstruction_Func");
    TriggerAddEventUnitConstructProgress(gt_BarracksConstruction, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Science Facility Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_ScienceFacilityDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_scienceFacilityPing != c_invalidPingId)) {
        PingDestroy(gv_scienceFacilityPing);
    }

    TriggerExecute(gt_ObjectiveScienceFacilityCreate, true, true);
    TriggerExecute(gt_ObjectiveScienceFacilityFailed, true, false);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("PingSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(793064925), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00047", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScienceFacilityDiesQ_Init () {
    gt_ScienceFacilityDiesQ = TriggerCreate("gt_ScienceFacilityDiesQ_Func");
    TriggerAddEventUnitDied(gt_ScienceFacilityDiesQ, UnitRefFromUnit(UnitFromId(2044729735)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Killed Q
//--------------------------------------------------------------------------------------------------
bool gt_BaseKilledQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pingPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Barracks"))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_02_DOMINION3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_pingPoint = UnitGetPosition(EventUnit());
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00051", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseKilledQ_Init () {
    gt_BaseKilledQ = TriggerCreate("gt_BaseKilledQ_Func");
    TriggerAddEventUnitDied(gt_BaseKilledQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid 1 Base Killed
//--------------------------------------------------------------------------------------------------
bool gt_Mid1BaseKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(3), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(3), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mid1BaseKilled_Init () {
    gt_Mid1BaseKilled = TriggerCreate("gt_Mid1BaseKilled_Func");
    TriggerAddEventUnitDied(gt_Mid1BaseKilled, UnitRefFromUnit(UnitFromId(434)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid 2 Base Killed
//--------------------------------------------------------------------------------------------------
bool gt_Mid2BaseKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(4), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(4), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mid2BaseKilled_Init () {
    gt_Mid2BaseKilled = TriggerCreate("gt_Mid2BaseKilled_Func");
    TriggerAddEventUnitDied(gt_Mid2BaseKilled, UnitRefFromUnit(UnitFromId(432)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid 3 Base Killed
//--------------------------------------------------------------------------------------------------
bool gt_Mid3BaseKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(5), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(5), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mid3BaseKilled_Init () {
    gt_Mid3BaseKilled = TriggerCreate("gt_Mid3BaseKilled_Func");
    TriggerAddEventUnitDied(gt_Mid3BaseKilled, UnitRefFromUnit(UnitFromId(430)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Fleet Counter
//--------------------------------------------------------------------------------------------------
bool gt_DeathFleetCounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("LeaderboardPop", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    BoardCreate(2, 1, StringExternal("Param/Value/BE3694D1"), Color(100.00, 100.00, 100.00));
    gv_deathFleetLeaderboard = BoardLastCreated();
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardMinimizeShow(BoardLastCreated(), PlayerGroupAll(), false);
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowHeader, true);
    BoardItemSetAlignment(BoardLastCreated(), 1, c_boardRowHeader, c_alignLeft);
    BoardItemSetAlignment(BoardLastCreated(), 1, 1, c_alignLeft);
    BoardItemSetFontSize(BoardLastCreated(), 1, c_boardRowHeader, 16);
    BoardItemSetFontSize(BoardLastCreated(), 1, 1, 16);
    BoardItemSetText(BoardLastCreated(), 1, c_boardRowHeader, StringExternal("Param/Value/9E3C4977"));
    BoardItemSetText(BoardLastCreated(), 1, 1, StringExternal("Param/Value/F4003D96"));
    BoardItemSetText(BoardLastCreated(), 2, 1, IntToText(gv_enemyUnitsRemaining));
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowing, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathFleetCounter_Init () {
    gt_DeathFleetCounter = TriggerCreate("gt_DeathFleetCounter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_ProtossUnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_enemyGroups[0], EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enemyUnitsRemaining -= 1;
    gv_currentEnemyUnits -= 1;
    if ((gv_enemyUnitsRemaining > 0)) {
        BoardItemSetText(gv_deathFleetLeaderboard, 2, 1, IntToText(gv_enemyUnitsRemaining));
    }

    if ((gv_enemyUnitsRemaining <= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ProtossUnitDominated, false);
        TriggerEnable(gt_ProtossUnitReleased, false);
        BoardItemSetText(gv_deathFleetLeaderboard, 2, 1, StringExternal("Param/Value/B3F7DA07"));
        TriggerExecute(gt_VictoryDefeattheDeathFleetCompleted, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossUnitDies_Init () {
    gt_ProtossUnitDies = TriggerCreate("gt_ProtossUnitDies_Func");
    TriggerAddEventUnitDied(gt_ProtossUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Unit Dominated
//--------------------------------------------------------------------------------------------------
bool gt_ProtossUnitDominated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_enemyGroups[0], EventUnitTargetUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enemyUnitsRemaining -= 1;
    gv_currentEnemyUnits -= 1;
    UnitGroupRemove(gv_enemyGroups[0], EventUnitTargetUnit());
    UnitGroupRemove(gv_enemyGroups[1], EventUnitTargetUnit());
    UnitGroupRemove(gv_enemyGroups[2], EventUnitTargetUnit());
    UnitGroupRemove(gv_enemyGroups[3], EventUnitTargetUnit());
    gv_currentDominatedUnit = EventUnitTargetUnit();
    if ((gv_enemyUnitsRemaining > 0)) {
        BoardItemSetText(gv_deathFleetLeaderboard, 2, 1, IntToText(gv_enemyUnitsRemaining));
    }

    if ((gv_enemyUnitsRemaining <= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ProtossUnitDies, false);
        TriggerEnable(gt_ProtossUnitReleased, false);
        BoardItemSetText(gv_deathFleetLeaderboard, 2, 1, StringExternal("Param/Value/2D8D023B"));
        TriggerExecute(gt_VictoryDefeattheDeathFleetCompleted, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossUnitDominated_Init () {
    gt_ProtossUnitDominated = TriggerCreate("gt_ProtossUnitDominated_Func");
    TriggerAddEventUnitAbility(gt_ProtossUnitDominated, UnitRefFromVariable("gv_nova"), AbilityCommand("NovaHelmetDomination", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Unit Released
//--------------------------------------------------------------------------------------------------
bool gt_ProtossUnitReleased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_currentDominatedUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enemyUnitsRemaining += 1;
    gv_currentEnemyUnits += 1;
    UnitGroupAdd(gv_enemyGroups[0], gv_currentDominatedUnit);
    AISetUnitSuicide(gv_currentDominatedUnit, true);
    if ((gv_enemyUnitsRemaining > 0)) {
        BoardItemSetText(gv_deathFleetLeaderboard, 2, 1, IntToText(gv_enemyUnitsRemaining));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossUnitReleased_Init () {
    gt_ProtossUnitReleased = TriggerCreate("gt_ProtossUnitReleased_Func");
    TriggerAddEventUnitAbility(gt_ProtossUnitReleased, UnitRefFromVariable("gv_nova"), AbilityCommand("NovaReleaseMinion", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ji'nara Dies 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_JinaraDies1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack2, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (gv_enemyUnitsRemaining < 150))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova08|Line00035", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00036", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JinaraDies1Q_Init () {
    gt_JinaraDies1Q = TriggerCreate("gt_JinaraDies1Q_Func");
    TriggerAddEventUnitDied(gt_JinaraDies1Q, UnitRefFromVariable("gv_jinaraMothership1"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ji'nara Dies 2
//--------------------------------------------------------------------------------------------------
bool gt_JinaraDies2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto892ED817_g;
    int auto892ED817_u;
    unit auto892ED817_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeAI);
    gv_enemyUnitsRemaining = 0;
    Wait(0.0625, c_timeAI);
    auto892ED817_g = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto892ED817_u = UnitGroupCount(auto892ED817_g, c_unitCountAll);
    for (;; auto892ED817_u -= 1) {
        auto892ED817_var = UnitGroupUnitFromEnd(auto892ED817_g, auto892ED817_u);
        if (auto892ED817_var == null) { break; }
        UnitKill(auto892ED817_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JinaraDies2_Init () {
    gt_JinaraDies2 = TriggerCreate("gt_JinaraDies2_Func");
    TriggerAddEventUnitDied(gt_JinaraDies2, UnitRefFromVariable("gv_jinaraMothership2"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Observers
//--------------------------------------------------------------------------------------------------
bool gt_Observers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_validAggroTargets;

    // Automatic Variable Declarations
    unitgroup autoDCACEFD4_g;
    int autoDCACEFD4_u;
    unit autoDCACEFD4_var;
    int auto9ECE584D_ae;
    const int auto9ECE584D_ai = 1;

    // Variable Initialization
    lv_validAggroTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoDCACEFD4_g = UnitGroup("Observer", gv_pLAYER_02_DOMINION3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDCACEFD4_u = UnitGroupCount(autoDCACEFD4_g, c_unitCountAll);
    for (;; autoDCACEFD4_u -= 1) {
        autoDCACEFD4_var = UnitGroupUnitFromEnd(autoDCACEFD4_g, autoDCACEFD4_u);
        if (autoDCACEFD4_var == null) { break; }
        lv_i += 1;
        if ((lv_i >= 32)) {
            lv_i = 31;
            break;
        }

        gv_observerBullies[lv_i].lv_obvserver = autoDCACEFD4_var;
        gv_observerBullies[lv_i].lv_homePoint = UnitGetPosition(autoDCACEFD4_var);
        gv_observerBullies[lv_i].lv_spawnRegion = gf_SpawnRegionforPosition(gv_observerBullies[lv_i].lv_homePoint);
    }
    gv_observerBullyCount = lv_i;
    while (true) {
        Wait(1.0, c_timeAI);
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        auto9ECE584D_ae = gv_observerBullyCount;
        lv_i = 1;
        for ( ; ( (auto9ECE584D_ai >= 0 && lv_i <= auto9ECE584D_ae) || (auto9ECE584D_ai < 0 && lv_i >= auto9ECE584D_ae) ) ; lv_i += auto9ECE584D_ai ) {
            if ((UnitIsAlive(gv_observerBullies[lv_i].lv_obvserver) == false) && (gv_observerBullies[lv_i].lv_alive == true)) {
                gv_observerBullies[lv_i].lv_alive = false;
                TimerStart(gv_observerBullies[lv_i].lv_respawnTimer, 10.0, false, c_timeAI);
            }

            if ((gv_observerBullies[lv_i].lv_alive == false) && (TimerGetRemaining(gv_observerBullies[lv_i].lv_respawnTimer) < 0.1)) {
                gv_observerBullies[lv_i].lv_alive = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(gv_observerBullies[lv_i].lv_spawnRegion));
                gv_observerBullies[lv_i].lv_obvserver = UnitLastCreated();
                UnitIssueOrder(gv_observerBullies[lv_i].lv_obvserver, OrderTargetingPoint(AbilityCommand("move", 0), gv_observerBullies[lv_i].lv_homePoint), c_orderQueueReplace);
                TimerStart(gv_observerBullies[lv_i].lv_aggroTimer, 5.0, false, c_timeAI);
            }

            lv_validAggroTargets = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(gv_observerBullies[lv_i].lv_homePoint, 11.0), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((TimerGetRemaining(gv_observerBullies[lv_i].lv_aggroTimer) < 0.1) && (UnitGroupCount(lv_validAggroTargets, c_unitCountAlive) > 0)) {
                UnitIssueOrder(gv_observerBullies[lv_i].lv_obvserver, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_validAggroTargets, gv_observerBullies[lv_i].lv_homePoint))), c_orderQueueReplace);
                TimerStart(gv_observerBullies[lv_i].lv_aggroTimer, 5.0, false, c_timeAI);
            }

            if ((UnitGroupCount(lv_validAggroTargets, c_unitCountAlive) == 0)) {
                UnitIssueOrder(gv_observerBullies[lv_i].lv_obvserver, OrderTargetingPoint(AbilityCommand("move", 0), gv_observerBullies[lv_i].lv_homePoint), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Observers_Init () {
    gt_Observers = TriggerCreate("gt_Observers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Despawn Observers
//--------------------------------------------------------------------------------------------------
bool gt_DespawnObservers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7266809E_g;
    int auto7266809E_u;
    unit auto7266809E_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7266809E_g = gv_observerWave;
    auto7266809E_u = UnitGroupCount(auto7266809E_g, c_unitCountAll);
    for (;; auto7266809E_u -= 1) {
        auto7266809E_var = UnitGroupUnitFromEnd(auto7266809E_g, auto7266809E_u);
        if (auto7266809E_var == null) { break; }
        if (((libNtve_gf_UnitInRegion(auto7266809E_var, RegionFromId(80)) == true))) {
            UnitRemove(auto7266809E_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DespawnObservers_Init () {
    gt_DespawnObservers = TriggerCreate("gt_DespawnObservers_Func");
    TriggerAddEventTimePeriodic(gt_DespawnObservers, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/F751082E"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Defeat the Death Fleet - Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDefeattheDeathFleetCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDefeattheDeathFleetCompleted_Init () {
    gt_VictoryDefeattheDeathFleetCompleted = TriggerCreate("gt_VictoryDefeattheDeathFleetCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Defeat the Death Fleet Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDefeattheDeathFleetQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    TriggerQueueEnter();
    Wait(0.25, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00037", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDefeattheDeathFleetQ_Init () {
    gt_VictoryDefeattheDeathFleetQ = TriggerCreate("gt_VictoryDefeattheDeathFleetQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_ChangeUnitDamage(libNCMI_gf_NovaHeroUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    if ((gv_gorgonDialog.lv_dialog != c_invalidDialogId)) {
        DialogSetVisible(gv_gorgonDialog.lv_dialog, PlayerGroupAll(), false);
    }

    libNtve_gf_ShowHideLeaderboard(gv_deathFleetLeaderboard, false, PlayerGroupAll());
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_jinaraMothership1) == true)) {
        UnitKill(gv_jinaraMothership1);
    }

    if ((UnitIsAlive(gv_jinaraMothership2) == true)) {
        UnitKill(gv_jinaraMothership2);
    }

    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDefeattheDeathFleetComplete, true, true);
    if ((UnitIsAlive(UnitFromId(2044729735)) == true)) {
        TriggerExecute(gt_ObjectiveScienceFacilityComplete, true, true);
    }
    else {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerExecute(gt_VictoryDefeattheDeathFleetQ, true, true);
    libNCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libComC_gf_CampaignAwardAchievement("Nova08_1", gv_pLAYER_01_USER);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_gorgonsSummoned <= 0)) {
        libComC_gf_CampaignAwardAchievement("Anniversary_Nova08", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/CA08D661"), IntToText(gv_gorgonKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/87A5BB4C"), IntToText(gv_yamatoKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B81D7391"), FixedToText(UnitGetPropertyFixed(gv_nova, c_unitPropKills, c_unitPropCurrent), 0));
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgons Kills
//--------------------------------------------------------------------------------------------------
bool gt_GorgonsKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "GehennaCruiser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gorgonKills += 1;
    if ((gv_gorgonKills <= 300)) {
        AchievementTermQuantityAdd(gv_pLAYER_01_USER, "Nova08_2", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonsKills_Init () {
    gt_GorgonsKills = TriggerCreate("gt_GorgonsKills_Func");
    TriggerAddEventUnitDied(gt_GorgonsKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yamato Kills
//--------------------------------------------------------------------------------------------------
bool gt_YamatoKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_yamatoKills += 1;
    if ((gv_yamatoKills <= 15)) {
        AchievementTermQuantityAdd(gv_pLAYER_01_USER, "Nova08_3", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YamatoKills_Init () {
    gt_YamatoKills = TriggerCreate("gt_YamatoKills_Func");
    TriggerAddEventUnitDamaged(gt_YamatoKills, null, c_unitDamageTypeAny, c_unitDamageFatal, "YamatoU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Kills
//--------------------------------------------------------------------------------------------------
bool gt_NovaKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() == gv_nova))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_novaKills += 1;
    if ((gv_novaKills <= 333)) {
        AchievementTermQuantityAdd(gv_pLAYER_01_USER, "Nova08_Mastery", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaKills_Init () {
    gt_NovaKills = TriggerCreate("gt_NovaKills_Func");
    TriggerAddEventUnitDied(gt_NovaKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers();
    if ((libNtve_gf_DifficultyValueInt(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradeCasualNormal, true, false);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_AIUpgradeHardBrutal, true, false);
    }

    TriggerExecute(gt_BullyActivationSequence, true, false);
    TimerStart(gv_battlecruiser1Timer, 600.0, false, c_timeAI);
    TimerStart(gv_battlecruiser2Timer, 1080.0, false, c_timeAI);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Terr", false);
    TriggerExecute(gt_DefenderSideBasesOnlineQ, true, false);
    TriggerExecute(gt_DefenderBasesMaintainDefenseQ, true, false);
    TriggerExecute(gt_Observers, true, false);
    gv_laneActive[3] = true;
    gv_laneActive[4] = true;
    gv_laneActive[5] = true;
    TriggerExecute(gt_AmbientWaves1, true, false);
    TriggerExecute(gt_FinalSpecialWaveJinaraQ, true, false);
    Wait(180.0, c_timeAI);
    TriggerExecute(gt_SpecialWave1ImmortalsCenterQ, true, false);
    Wait(200.0, c_timeAI);
    TriggerExecute(gt_SpecialWave2VoidRaysLeftQ, true, false);
    Wait(60.0, c_timeAI);
    gv_laneActive[1] = true;
    gv_laneActive[2] = true;
    gv_laneActive[6] = true;
    gv_laneActive[7] = true;
    Wait(115.0, c_timeAI);
    TriggerExecute(gt_SpecialWave3VoidRaysRightQ, true, false);
    Wait(135.0, c_timeAI);
    TriggerExecute(gt_SpecialWave4ImmortalsCenterBigQ, true, false);
    Wait(210.0, c_timeAI);
    TriggerExecute(gt_SpecialWave5WrathwalkersLeftQ, true, false);
    Wait(120.0, c_timeAI);
    TriggerExecute(gt_SpecialWave6WrathwalkersRightQ, true, false);
    Wait(180.0, c_timeAI);
    TriggerExecute(gt_SpecialWave7JinaraQ, true, false);
    Wait(240.0, c_timeAI);
    TriggerExecute(gt_SpecialWave8VoidRaysLowerLeftQ, true, false);
    Wait(120.0, c_timeAI);
    TriggerExecute(gt_SpecialWave9VoidRaysLowerRightQ, true, false);
    Wait(180.0, c_timeAI);
    TriggerExecute(gt_SpecialWave10ImmortalsTripleQ, true, false);
    Wait(180.0, c_timeAI);
    TriggerExecute(gt_SpecialWave11VoidRaysDoubleQ, true, false);
    while (true) {
        Wait(120.0, c_timeAI);
        TriggerExecute(gt_SpecialWave10ImmortalsTripleQ, true, false);
        Wait(120.0, c_timeAI);
        TriggerExecute(gt_SpecialWave11VoidRaysDoubleQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossGroundWeaponsLevel1", 1);
    Wait(600.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossShieldsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeCasualNormal_Init () {
    gt_AIUpgradeCasualNormal = TriggerCreate("gt_AIUpgradeCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossGroundWeaponsLevel2", 1);
    Wait(600.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "ProtossShieldsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeHardBrutal_Init () {
    gt_AIUpgradeHardBrutal = TriggerCreate("gt_AIUpgradeHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bully Activation Sequence
//--------------------------------------------------------------------------------------------------
bool gt_BullyActivationSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeAI);
    AINearestTownBullyRebuild(gv_pLAYER_02_DOMINION, true);
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_DOMINION, RegionGetCenter(RegionFromId(3)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_DOMINION, RegionGetCenter(RegionFromId(4)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_DOMINION, RegionGetCenter(RegionFromId(5)));
    AINearestTownBullyRebuild(gv_pLAYER_02_DOMINION2, true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(72), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(73), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(74), true);
    Wait(209.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCV", 0, gv_pLAYER_02_DOMINION4, PointFromId(1855620408));
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCV", 0, gv_pLAYER_02_DOMINION5, PointFromId(6083815));
    AINearestTownBullyRebuild(gv_pLAYER_02_DOMINION4, true);
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_DOMINION4, RegionGetCenter(RegionFromId(1)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_DOMINION4, RegionGetCenter(RegionFromId(2)));
    AINearestTownBullyRebuild(gv_pLAYER_02_DOMINION5, true);
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_DOMINION5, RegionGetCenter(RegionFromId(6)));
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_DOMINION5, RegionGetCenter(RegionFromId(7)));
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(1), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(70), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(6), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(76), false);
    Wait(45.0, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(2), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION4, RegionFromId(71), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(7), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(75), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BullyActivationSequence_Init () {
    gt_BullyActivationSequence = TriggerCreate("gt_BullyActivationSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient Waves 1
//--------------------------------------------------------------------------------------------------
bool gt_AmbientWaves1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region[8] lv_spawnRegions;
    point[8] lv_firstWaypoints;
    point[8] lv_secondWaypoints;
    int[8] lv_laneIndexes;
    int[8] lv_laneCaps;
    int lv_i;
    unitgroup lv_currentWave;

    // Automatic Variable Declarations
    int auto20A62084_n;
    int auto20A62084_i;
    const int autoE2745ADD_ae = 7;
    const int autoE2745ADD_ai = 1;
    int auto15126CCF_n;
    int auto15126CCF_i;
    int auto6EE662B3_n;
    int auto6EE662B3_i;
    int autoCA1DF801_n;
    int autoCA1DF801_i;
    const int auto4DC49D7E_ae = 7;
    const int auto4DC49D7E_ai = 1;
    int autoC0E732EB_n;
    int autoC0E732EB_i;
    int auto552CD140_n;
    int auto552CD140_i;
    int auto772E53FB_n;
    int auto772E53FB_i;
    const int autoBADEEBFD_ae = 7;
    const int autoBADEEBFD_ai = 1;
    int auto709A3E79_n;
    int auto709A3E79_i;
    int auto34A78E73_n;
    int auto34A78E73_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegions[1] = RegionFromId(31);
    lv_spawnRegions[2] = RegionFromId(33);
    lv_spawnRegions[3] = RegionFromId(34);
    lv_spawnRegions[4] = RegionFromId(35);
    lv_spawnRegions[5] = RegionFromId(36);
    lv_spawnRegions[6] = RegionFromId(37);
    lv_spawnRegions[7] = RegionFromId(39);
    lv_firstWaypoints[1] = RegionGetCenter(RegionFromId(1));
    lv_firstWaypoints[2] = RegionGetCenter(RegionFromId(2));
    lv_firstWaypoints[3] = RegionGetCenter(RegionFromId(3));
    lv_firstWaypoints[4] = RegionGetCenter(RegionFromId(4));
    lv_firstWaypoints[5] = RegionGetCenter(RegionFromId(5));
    lv_firstWaypoints[6] = RegionGetCenter(RegionFromId(7));
    lv_firstWaypoints[7] = RegionGetCenter(RegionFromId(6));
    lv_secondWaypoints[1] = PointFromId(1548);
    lv_secondWaypoints[2] = PointFromId(1548);
    lv_secondWaypoints[3] = PointFromId(1549);
    lv_secondWaypoints[4] = PointFromId(1549);
    lv_secondWaypoints[5] = PointFromId(1549);
    lv_secondWaypoints[6] = PointFromId(1550);
    lv_secondWaypoints[7] = PointFromId(1550);
    lv_laneIndexes[1] = 1;
    lv_laneIndexes[2] = 1;
    lv_laneIndexes[3] = 2;
    lv_laneIndexes[4] = 2;
    lv_laneIndexes[5] = 2;
    lv_laneIndexes[6] = 3;
    lv_laneIndexes[7] = 3;
    lv_laneCaps[1] = libNtve_gf_DifficultyValueInt(15, 15, 18, 21);
    lv_laneCaps[2] = libNtve_gf_DifficultyValueInt(15, 15, 18, 21);
    lv_laneCaps[3] = libNtve_gf_DifficultyValueInt(25, 25, 30, 35);
    lv_laneCaps[4] = libNtve_gf_DifficultyValueInt(25, 25, 30, 35);
    lv_laneCaps[5] = libNtve_gf_DifficultyValueInt(25, 25, 30, 35);
    lv_laneCaps[6] = libNtve_gf_DifficultyValueInt(15, 15, 18, 21);
    lv_laneCaps[7] = libNtve_gf_DifficultyValueInt(15, 15, 18, 21);
    auto20A62084_n = libNtve_gf_DifficultyValueInt(8, 8, 8, 10);
    for (auto20A62084_i = 1; auto20A62084_i <= auto20A62084_n; auto20A62084_i += 1) {
        lv_i = 1;
        for ( ; ( (autoE2745ADD_ai >= 0 && lv_i <= autoE2745ADD_ae) || (autoE2745ADD_ai < 0 && lv_i >= autoE2745ADD_ae) ) ; lv_i += autoE2745ADD_ai ) {
            if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                return true;
            }

            while (!((UnitGroupCount(gv_enemyGroups[0], c_unitCountAlive) < libNtve_gf_DifficultyValueInt(150, 150, 175, 200)))) {
                Wait(1.0, c_timeAI);
            }
            if ((gv_laneActive[lv_i] == true) && (UnitGroupCount(gv_enemyGroups[lv_laneIndexes[lv_i]], c_unitCountAlive) <= lv_laneCaps[lv_i])) {
                lv_currentWave = UnitGroupEmpty();
                auto15126CCF_n = libNtve_gf_DifficultyValueInt(2, 2, 2, 2);
                for (auto15126CCF_i = 1; auto15126CCF_i <= auto15126CCF_n; auto15126CCF_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto6EE662B3_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (auto6EE662B3_i = 1; auto6EE662B3_i <= auto6EE662B3_n; auto6EE662B3_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
                AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(lv_spawnRegions[lv_i]));
                AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_firstWaypoints[lv_i], false);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_secondWaypoints[lv_i], false);
                AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            }

        }
        Wait(libNtve_gf_DifficultyValueInt(25, 25, 25, 20), c_timeAI);
    }
    autoCA1DF801_n = libNtve_gf_DifficultyValueInt(8, 8, 8, 10);
    for (autoCA1DF801_i = 1; autoCA1DF801_i <= autoCA1DF801_n; autoCA1DF801_i += 1) {
        lv_i = 1;
        for ( ; ( (auto4DC49D7E_ai >= 0 && lv_i <= auto4DC49D7E_ae) || (auto4DC49D7E_ai < 0 && lv_i >= auto4DC49D7E_ae) ) ; lv_i += auto4DC49D7E_ai ) {
            if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                return true;
            }

            while (!((UnitGroupCount(gv_enemyGroups[0], c_unitCountAlive) < libNtve_gf_DifficultyValueInt(150, 150, 175, 200)))) {
                Wait(1.0, c_timeAI);
            }
            if ((gv_laneActive[lv_i] == true) && (UnitGroupCount(gv_enemyGroups[lv_laneIndexes[lv_i]], c_unitCountAlive) <= lv_laneCaps[lv_i])) {
                lv_currentWave = UnitGroupEmpty();
                autoC0E732EB_n = libNtve_gf_DifficultyValueInt(3, 3, 4, 4);
                for (autoC0E732EB_i = 1; autoC0E732EB_i <= autoC0E732EB_n; autoC0E732EB_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto552CD140_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 2);
                for (auto552CD140_i = 1; auto552CD140_i <= auto552CD140_n; auto552CD140_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
                AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(lv_spawnRegions[lv_i]));
                AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_firstWaypoints[lv_i], false);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_secondWaypoints[lv_i], false);
                AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            }

        }
        Wait(libNtve_gf_DifficultyValueInt(25, 25, 25, 20), c_timeAI);
    }
    auto772E53FB_n = libNtve_gf_DifficultyValueInt(8, 8, 8, 10);
    for (auto772E53FB_i = 1; auto772E53FB_i <= auto772E53FB_n; auto772E53FB_i += 1) {
        lv_i = 1;
        for ( ; ( (autoBADEEBFD_ai >= 0 && lv_i <= autoBADEEBFD_ae) || (autoBADEEBFD_ai < 0 && lv_i >= autoBADEEBFD_ae) ) ; lv_i += autoBADEEBFD_ai ) {
            if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                return true;
            }

            while (!((UnitGroupCount(gv_enemyGroups[0], c_unitCountAlive) < libNtve_gf_DifficultyValueInt(150, 150, 175, 200)))) {
                Wait(1.0, c_timeAI);
            }
            if ((gv_laneActive[lv_i] == true) && (UnitGroupCount(gv_enemyGroups[lv_laneIndexes[lv_i]], c_unitCountAlive) <= lv_laneCaps[lv_i])) {
                lv_currentWave = UnitGroupEmpty();
                auto709A3E79_n = libNtve_gf_DifficultyValueInt(3, 3, 4, 4);
                for (auto709A3E79_i = 1; auto709A3E79_i <= auto709A3E79_n; auto709A3E79_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto34A78E73_n = libNtve_gf_DifficultyValueInt(2, 2, 2, 3);
                for (auto34A78E73_i = 1; auto34A78E73_i <= auto34A78E73_n; auto34A78E73_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
                AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(lv_spawnRegions[lv_i]));
                AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_firstWaypoints[lv_i], false);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_secondWaypoints[lv_i], false);
                AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            }

        }
        Wait(libNtve_gf_DifficultyValueInt(25, 25, 25, 20), c_timeAI);
    }
    TriggerExecute(gt_AmbientWaves2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientWaves1_Init () {
    gt_AmbientWaves1 = TriggerCreate("gt_AmbientWaves1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient Waves 2
//--------------------------------------------------------------------------------------------------
bool gt_AmbientWaves2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region[8] lv_spawnRegions;
    point[8] lv_firstWaypoints;
    point[8] lv_secondWaypoints;
    int[8] lv_laneIndexes;
    int[8] lv_laneCaps;
    int lv_i;
    unitgroup lv_currentWave;

    // Automatic Variable Declarations
    int autoEAED437A_n;
    int autoEAED437A_i;
    const int auto1A9A4CE2_ae = 7;
    const int auto1A9A4CE2_ai = 1;
    int auto12598A9B_n;
    int auto12598A9B_i;
    int autoF6FEAB76_n;
    int autoF6FEAB76_i;
    int auto1152CBB5_n;
    int auto1152CBB5_i;
    int autoB7069A69_n;
    int autoB7069A69_i;
    const int auto3C06C541_ae = 7;
    const int auto3C06C541_ai = 1;
    int autoFE29E73E_n;
    int autoFE29E73E_i;
    int auto227CCFBE_n;
    int auto227CCFBE_i;
    int autoAB4C831D_n;
    int autoAB4C831D_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegions[1] = RegionFromId(31);
    lv_spawnRegions[2] = RegionFromId(33);
    lv_spawnRegions[3] = RegionFromId(34);
    lv_spawnRegions[4] = RegionFromId(35);
    lv_spawnRegions[5] = RegionFromId(36);
    lv_spawnRegions[6] = RegionFromId(37);
    lv_spawnRegions[7] = RegionFromId(39);
    lv_firstWaypoints[1] = RegionGetCenter(RegionFromId(28));
    lv_firstWaypoints[2] = RegionGetCenter(RegionFromId(28));
    lv_firstWaypoints[3] = RegionGetCenter(RegionFromId(3));
    lv_firstWaypoints[4] = RegionGetCenter(RegionFromId(4));
    lv_firstWaypoints[5] = RegionGetCenter(RegionFromId(5));
    lv_firstWaypoints[6] = RegionGetCenter(RegionFromId(30));
    lv_firstWaypoints[7] = RegionGetCenter(RegionFromId(30));
    lv_secondWaypoints[1] = PointFromId(1548);
    lv_secondWaypoints[2] = PointFromId(1548);
    lv_secondWaypoints[3] = PointFromId(1549);
    lv_secondWaypoints[4] = PointFromId(1549);
    lv_secondWaypoints[5] = PointFromId(1549);
    lv_secondWaypoints[6] = PointFromId(1550);
    lv_secondWaypoints[7] = PointFromId(1550);
    lv_laneIndexes[1] = 1;
    lv_laneIndexes[2] = 1;
    lv_laneIndexes[3] = 2;
    lv_laneIndexes[4] = 2;
    lv_laneIndexes[5] = 2;
    lv_laneIndexes[6] = 3;
    lv_laneIndexes[7] = 3;
    lv_laneCaps[1] = libNtve_gf_DifficultyValueInt(21, 21, 24, 27);
    lv_laneCaps[2] = libNtve_gf_DifficultyValueInt(21, 21, 24, 27);
    lv_laneCaps[3] = libNtve_gf_DifficultyValueInt(35, 35, 40, 45);
    lv_laneCaps[4] = libNtve_gf_DifficultyValueInt(35, 35, 40, 45);
    lv_laneCaps[5] = libNtve_gf_DifficultyValueInt(35, 35, 40, 45);
    lv_laneCaps[6] = libNtve_gf_DifficultyValueInt(21, 21, 24, 27);
    lv_laneCaps[7] = libNtve_gf_DifficultyValueInt(21, 21, 24, 27);
    autoEAED437A_n = libNtve_gf_DifficultyValueInt(6, 6, 6, 6);
    for (autoEAED437A_i = 1; autoEAED437A_i <= autoEAED437A_n; autoEAED437A_i += 1) {
        lv_i = 1;
        for ( ; ( (auto1A9A4CE2_ai >= 0 && lv_i <= auto1A9A4CE2_ae) || (auto1A9A4CE2_ai < 0 && lv_i >= auto1A9A4CE2_ae) ) ; lv_i += auto1A9A4CE2_ai ) {
            if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                return true;
            }

            while (!((UnitGroupCount(gv_enemyGroups[0], c_unitCountAlive) < libNtve_gf_DifficultyValueInt(150, 150, 175, 200)))) {
                Wait(1.0, c_timeAI);
            }
            if ((gv_laneActive[lv_i] == true) && (UnitGroupCount(gv_enemyGroups[lv_laneIndexes[lv_i]], c_unitCountAlive) <= lv_laneCaps[lv_i])) {
                lv_currentWave = UnitGroupEmpty();
                auto12598A9B_n = libNtve_gf_DifficultyValueInt(3, 3, 4, 4);
                for (auto12598A9B_i = 1; auto12598A9B_i <= auto12598A9B_n; auto12598A9B_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                autoF6FEAB76_n = libNtve_gf_DifficultyValueInt(2, 2, 2, 3);
                for (autoF6FEAB76_i = 1; autoF6FEAB76_i <= autoF6FEAB76_n; autoF6FEAB76_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto1152CBB5_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (auto1152CBB5_i = 1; auto1152CBB5_i <= auto1152CBB5_n; auto1152CBB5_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Monitor", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
                AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(lv_spawnRegions[lv_i]));
                AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_firstWaypoints[lv_i], false);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_secondWaypoints[lv_i], false);
                AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            }

        }
        Wait(libNtve_gf_DifficultyValueInt(30, 30, 30, 30), c_timeAI);
    }
    autoB7069A69_n = libNtve_gf_DifficultyValueInt(6, 6, 6, 6);
    for (autoB7069A69_i = 1; autoB7069A69_i <= autoB7069A69_n; autoB7069A69_i += 1) {
        lv_i = 1;
        for ( ; ( (auto3C06C541_ai >= 0 && lv_i <= auto3C06C541_ae) || (auto3C06C541_ai < 0 && lv_i >= auto3C06C541_ae) ) ; lv_i += auto3C06C541_ai ) {
            if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                return true;
            }

            while (!((UnitGroupCount(gv_enemyGroups[0], c_unitCountAlive) < libNtve_gf_DifficultyValueInt(150, 150, 175, 200)))) {
                Wait(1.0, c_timeAI);
            }
            if ((gv_laneActive[lv_i] == true) && (UnitGroupCount(gv_enemyGroups[lv_laneIndexes[lv_i]], c_unitCountAlive) <= lv_laneCaps[lv_i])) {
                lv_currentWave = UnitGroupEmpty();
                autoFE29E73E_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 5);
                for (autoFE29E73E_i = 1; autoFE29E73E_i <= autoFE29E73E_n; autoFE29E73E_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto227CCFBE_n = libNtve_gf_DifficultyValueInt(2, 2, 2, 3);
                for (auto227CCFBE_i = 1; auto227CCFBE_i <= auto227CCFBE_n; auto227CCFBE_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                autoAB4C831D_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (autoAB4C831D_i = 1; autoAB4C831D_i <= autoAB4C831D_n; autoAB4C831D_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Monitor", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
                AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(lv_spawnRegions[lv_i]));
                AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_firstWaypoints[lv_i], false);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_secondWaypoints[lv_i], false);
                AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            }

        }
        Wait(libNtve_gf_DifficultyValueInt(30, 30, 30, 30), c_timeAI);
    }
    TriggerExecute(gt_AmbientWaves3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientWaves2_Init () {
    gt_AmbientWaves2 = TriggerCreate("gt_AmbientWaves2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient Waves 3
//--------------------------------------------------------------------------------------------------
bool gt_AmbientWaves3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region[8] lv_spawnRegions;
    point[8] lv_firstWaypoints;
    point[8] lv_secondWaypoints;
    int[8] lv_laneIndexes;
    int[8] lv_laneCaps;
    int lv_i;
    unitgroup lv_currentWave;

    // Automatic Variable Declarations
    int auto4993A17A_n;
    int auto4993A17A_i;
    const int autoF6567E2D_ae = 7;
    const int autoF6567E2D_ai = 1;
    int autoCDB96ABD_n;
    int autoCDB96ABD_i;
    int auto2079E33F_n;
    int auto2079E33F_i;
    int auto4DF51E96_n;
    int auto4DF51E96_i;
    int autoB46827F0_n;
    int autoB46827F0_i;
    int auto6317F557_n;
    int auto6317F557_i;
    int auto870539A4_n;
    int auto870539A4_i;
    const int auto99D26EC3_ae = 7;
    const int auto99D26EC3_ai = 1;
    int auto7104A70A_n;
    int auto7104A70A_i;
    int auto4CA5AF4F_n;
    int auto4CA5AF4F_i;
    int autoE47B83AA_n;
    int autoE47B83AA_i;
    int auto9BC2DD38_n;
    int auto9BC2DD38_i;
    int auto4919B5FE_n;
    int auto4919B5FE_i;
    int auto20206771_n;
    int auto20206771_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegions[1] = RegionFromId(31);
    lv_spawnRegions[2] = RegionFromId(33);
    lv_spawnRegions[3] = RegionFromId(34);
    lv_spawnRegions[4] = RegionFromId(35);
    lv_spawnRegions[5] = RegionFromId(36);
    lv_spawnRegions[6] = RegionFromId(37);
    lv_spawnRegions[7] = RegionFromId(39);
    lv_firstWaypoints[1] = RegionGetCenter(RegionFromId(28));
    lv_firstWaypoints[2] = RegionGetCenter(RegionFromId(28));
    lv_firstWaypoints[3] = RegionGetCenter(RegionFromId(3));
    lv_firstWaypoints[4] = RegionGetCenter(RegionFromId(4));
    lv_firstWaypoints[5] = RegionGetCenter(RegionFromId(5));
    lv_firstWaypoints[6] = RegionGetCenter(RegionFromId(30));
    lv_firstWaypoints[7] = RegionGetCenter(RegionFromId(30));
    lv_secondWaypoints[1] = PointFromId(1548);
    lv_secondWaypoints[2] = PointFromId(1548);
    lv_secondWaypoints[3] = PointFromId(1549);
    lv_secondWaypoints[4] = PointFromId(1549);
    lv_secondWaypoints[5] = PointFromId(1549);
    lv_secondWaypoints[6] = PointFromId(1550);
    lv_secondWaypoints[7] = PointFromId(1550);
    lv_laneIndexes[1] = 1;
    lv_laneIndexes[2] = 1;
    lv_laneIndexes[3] = 2;
    lv_laneIndexes[4] = 2;
    lv_laneIndexes[5] = 2;
    lv_laneIndexes[6] = 3;
    lv_laneIndexes[7] = 3;
    lv_laneCaps[1] = libNtve_gf_DifficultyValueInt(27, 27, 30, 33);
    lv_laneCaps[2] = libNtve_gf_DifficultyValueInt(27, 27, 30, 33);
    lv_laneCaps[3] = libNtve_gf_DifficultyValueInt(45, 45, 50, 55);
    lv_laneCaps[4] = libNtve_gf_DifficultyValueInt(45, 45, 50, 55);
    lv_laneCaps[5] = libNtve_gf_DifficultyValueInt(45, 45, 50, 55);
    lv_laneCaps[6] = libNtve_gf_DifficultyValueInt(27, 27, 30, 33);
    lv_laneCaps[7] = libNtve_gf_DifficultyValueInt(27, 27, 30, 33);
    auto4993A17A_n = libNtve_gf_DifficultyValueInt(6, 6, 6, 6);
    for (auto4993A17A_i = 1; auto4993A17A_i <= auto4993A17A_n; auto4993A17A_i += 1) {
        lv_i = 1;
        for ( ; ( (autoF6567E2D_ai >= 0 && lv_i <= autoF6567E2D_ae) || (autoF6567E2D_ai < 0 && lv_i >= autoF6567E2D_ae) ) ; lv_i += autoF6567E2D_ai ) {
            if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                return true;
            }

            while (!((UnitGroupCount(gv_enemyGroups[0], c_unitCountAlive) < libNtve_gf_DifficultyValueInt(150, 150, 175, 200)))) {
                Wait(1.0, c_timeAI);
            }
            if ((gv_laneActive[lv_i] == true) && (UnitGroupCount(gv_enemyGroups[lv_laneIndexes[lv_i]], c_unitCountAlive) <= lv_laneCaps[lv_i])) {
                lv_currentWave = UnitGroupEmpty();
                autoCDB96ABD_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 5);
                for (autoCDB96ABD_i = 1; autoCDB96ABD_i <= autoCDB96ABD_n; autoCDB96ABD_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto2079E33F_n = libNtve_gf_DifficultyValueInt(2, 2, 2, 3);
                for (auto2079E33F_i = 1; auto2079E33F_i <= auto2079E33F_n; auto2079E33F_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto4DF51E96_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (auto4DF51E96_i = 1; auto4DF51E96_i <= auto4DF51E96_n; auto4DF51E96_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Monitor", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                autoB46827F0_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (autoB46827F0_i = 1; autoB46827F0_i <= autoB46827F0_n; autoB46827F0_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto6317F557_n = libNtve_gf_DifficultyValueInt(0, 0, 0, 1);
                for (auto6317F557_i = 1; auto6317F557_i <= auto6317F557_n; auto6317F557_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Observer", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    UnitGroupAdd(gv_observerWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
                AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(lv_spawnRegions[lv_i]));
                AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_firstWaypoints[lv_i], false);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_secondWaypoints[lv_i], false);
                AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            }

        }
        Wait(libNtve_gf_DifficultyValueInt(30, 30, 30, 30), c_timeAI);
    }
    auto870539A4_n = libNtve_gf_DifficultyValueInt(6, 6, 6, 6);
    for (auto870539A4_i = 1; auto870539A4_i <= auto870539A4_n; auto870539A4_i += 1) {
        lv_i = 1;
        for ( ; ( (auto99D26EC3_ai >= 0 && lv_i <= auto99D26EC3_ae) || (auto99D26EC3_ai < 0 && lv_i >= auto99D26EC3_ae) ) ; lv_i += auto99D26EC3_ai ) {
            if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                return true;
            }

            while (!((UnitGroupCount(gv_enemyGroups[0], c_unitCountAlive) < libNtve_gf_DifficultyValueInt(150, 150, 175, 200)))) {
                Wait(1.0, c_timeAI);
            }
            if ((gv_laneActive[lv_i] == true) && (UnitGroupCount(gv_enemyGroups[lv_laneIndexes[lv_i]], c_unitCountAlive) <= lv_laneCaps[lv_i])) {
                lv_currentWave = UnitGroupEmpty();
                auto7104A70A_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 5);
                for (auto7104A70A_i = 1; auto7104A70A_i <= auto7104A70A_n; auto7104A70A_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto4CA5AF4F_n = libNtve_gf_DifficultyValueInt(2, 2, 2, 3);
                for (auto4CA5AF4F_i = 1; auto4CA5AF4F_i <= auto4CA5AF4F_n; auto4CA5AF4F_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                autoE47B83AA_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (autoE47B83AA_i = 1; autoE47B83AA_i <= autoE47B83AA_n; autoE47B83AA_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Monitor", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto9BC2DD38_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (auto9BC2DD38_i = 1; auto9BC2DD38_i <= auto9BC2DD38_n; auto9BC2DD38_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto4919B5FE_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (auto4919B5FE_i = 1; auto4919B5FE_i <= auto4919B5FE_n; auto4919B5FE_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto20206771_n = libNtve_gf_DifficultyValueInt(0, 0, 0, 1);
                for (auto20206771_i = 1; auto20206771_i <= auto20206771_n; auto20206771_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Observer", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    UnitGroupAdd(gv_observerWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
                AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(lv_spawnRegions[lv_i]));
                AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_firstWaypoints[lv_i], false);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_secondWaypoints[lv_i], false);
                AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            }

        }
        Wait(libNtve_gf_DifficultyValueInt(30, 30, 30, 30), c_timeAI);
    }
    TriggerExecute(gt_AmbientWaves4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientWaves3_Init () {
    gt_AmbientWaves3 = TriggerCreate("gt_AmbientWaves3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient Waves 4
//--------------------------------------------------------------------------------------------------
bool gt_AmbientWaves4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region[8] lv_spawnRegions;
    point[8] lv_firstWaypoints;
    point[8] lv_secondWaypoints;
    int[8] lv_laneIndexes;
    int[8] lv_laneCaps;
    int lv_i;
    unitgroup lv_currentWave;

    // Automatic Variable Declarations
    const int auto06B1D129_ae = 7;
    const int auto06B1D129_ai = 1;
    int auto19F4816D_n;
    int auto19F4816D_i;
    int auto02F8A20D_n;
    int auto02F8A20D_i;
    int autoCAF5EEE3_n;
    int autoCAF5EEE3_i;
    int auto26C5CB40_n;
    int auto26C5CB40_i;
    int autoF29DA77F_n;
    int autoF29DA77F_i;
    int auto0B4A0467_n;
    int auto0B4A0467_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegions[1] = RegionFromId(31);
    lv_spawnRegions[2] = RegionFromId(33);
    lv_spawnRegions[3] = RegionFromId(34);
    lv_spawnRegions[4] = RegionFromId(35);
    lv_spawnRegions[5] = RegionFromId(36);
    lv_spawnRegions[6] = RegionFromId(37);
    lv_spawnRegions[7] = RegionFromId(39);
    lv_firstWaypoints[1] = RegionGetCenter(RegionFromId(28));
    lv_firstWaypoints[2] = RegionGetCenter(RegionFromId(28));
    lv_firstWaypoints[3] = RegionGetCenter(RegionFromId(3));
    lv_firstWaypoints[4] = RegionGetCenter(RegionFromId(4));
    lv_firstWaypoints[5] = RegionGetCenter(RegionFromId(5));
    lv_firstWaypoints[6] = RegionGetCenter(RegionFromId(30));
    lv_firstWaypoints[7] = RegionGetCenter(RegionFromId(30));
    lv_secondWaypoints[1] = PointFromId(1548);
    lv_secondWaypoints[2] = PointFromId(1548);
    lv_secondWaypoints[3] = PointFromId(1549);
    lv_secondWaypoints[4] = PointFromId(1549);
    lv_secondWaypoints[5] = PointFromId(1549);
    lv_secondWaypoints[6] = PointFromId(1550);
    lv_secondWaypoints[7] = PointFromId(1550);
    lv_laneIndexes[1] = 1;
    lv_laneIndexes[2] = 1;
    lv_laneIndexes[3] = 2;
    lv_laneIndexes[4] = 2;
    lv_laneIndexes[5] = 2;
    lv_laneIndexes[6] = 3;
    lv_laneIndexes[7] = 3;
    lv_laneCaps[1] = libNtve_gf_DifficultyValueInt(30, 30, 36, 39);
    lv_laneCaps[2] = libNtve_gf_DifficultyValueInt(30, 30, 36, 39);
    lv_laneCaps[3] = libNtve_gf_DifficultyValueInt(50, 50, 60, 65);
    lv_laneCaps[4] = libNtve_gf_DifficultyValueInt(50, 50, 60, 65);
    lv_laneCaps[5] = libNtve_gf_DifficultyValueInt(50, 50, 60, 65);
    lv_laneCaps[6] = libNtve_gf_DifficultyValueInt(30, 30, 36, 39);
    lv_laneCaps[7] = libNtve_gf_DifficultyValueInt(30, 30, 36, 39);
    while (true) {
        lv_i = 1;
        for ( ; ( (auto06B1D129_ai >= 0 && lv_i <= auto06B1D129_ae) || (auto06B1D129_ai < 0 && lv_i >= auto06B1D129_ae) ) ; lv_i += auto06B1D129_ai ) {
            if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                return true;
            }

            while (!((UnitGroupCount(gv_enemyGroups[0], c_unitCountAlive) < libNtve_gf_DifficultyValueInt(150, 150, 175, 200)))) {
                Wait(1.0, c_timeAI);
            }
            if ((gv_laneActive[lv_i] == true) && (UnitGroupCount(gv_enemyGroups[lv_laneIndexes[lv_i]], c_unitCountAlive) <= lv_laneCaps[lv_i])) {
                lv_currentWave = UnitGroupEmpty();
                auto19F4816D_n = libNtve_gf_DifficultyValueInt(4, 4, 6, 6);
                for (auto19F4816D_i = 1; auto19F4816D_i <= auto19F4816D_n; auto19F4816D_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto02F8A20D_n = libNtve_gf_DifficultyValueInt(3, 3, 3, 4);
                for (auto02F8A20D_i = 1; auto02F8A20D_i <= auto02F8A20D_n; auto02F8A20D_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                autoCAF5EEE3_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (autoCAF5EEE3_i = 1; autoCAF5EEE3_i <= autoCAF5EEE3_n; autoCAF5EEE3_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Monitor", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto26C5CB40_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (auto26C5CB40_i = 1; auto26C5CB40_i <= auto26C5CB40_n; auto26C5CB40_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                autoF29DA77F_n = libNtve_gf_DifficultyValueInt(1, 1, 1, 1);
                for (autoF29DA77F_i = 1; autoF29DA77F_i <= autoF29DA77F_n; autoF29DA77F_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    gf_TrackUnitforLeaderboard(UnitLastCreated(), lv_laneIndexes[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                auto0B4A0467_n = libNtve_gf_DifficultyValueInt(0, 0, 0, 1);
                for (auto0B4A0467_i = 1; auto0B4A0467_i <= auto0B4A0467_n; auto0B4A0467_i += 1) {
                    if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
                        break;
                    }

                    if ((libNCMI_gf_GameIsOver() == true)) {
                        return true;
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, "Observer", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(lv_spawnRegions[lv_i]), lv_firstWaypoints[lv_i]);
                    UnitGroupAdd(lv_currentWave, UnitLastCreated());
                    UnitGroupAdd(gv_observerWave, UnitLastCreated());
                    Wait(0.0625, c_timeAI);
                }
                AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
                AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(lv_spawnRegions[lv_i]));
                AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_firstWaypoints[lv_i], false);
                AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, lv_secondWaypoints[lv_i], false);
                AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
            }

        }
        Wait(libNtve_gf_DifficultyValueInt(30, 30, 30, 30), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientWaves4_Init () {
    gt_AmbientWaves4 = TriggerCreate("gt_AmbientWaves4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 1 - Immortals Center Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave1ImmortalsCenterQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int auto74598674_n;
    int auto74598674_i;
    int autoFF80C768_n;
    int autoFF80C768_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto74598674_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
    for (auto74598674_i = 1; auto74598674_i <= auto74598674_n; auto74598674_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    autoFF80C768_n = libNtve_gf_DifficultyValueInt(4, 4, 4, 6);
    for (autoFF80C768_i = 1; autoFF80C768_i <= autoFF80C768_n; autoFF80C768_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave, StringExternal("Param/Value/B4474521"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00015", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova08|Line00016", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(35)), 16.0, 225.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1549), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave1ImmortalsCenterQ_Init () {
    gt_SpecialWave1ImmortalsCenterQ = TriggerCreate("gt_SpecialWave1ImmortalsCenterQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 2 - Void Rays Left Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave2VoidRaysLeftQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int auto9F736863_n;
    int auto9F736863_i;
    int autoB39B7D59_n;
    int autoB39B7D59_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F736863_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
    for (auto9F736863_i = 1; auto9F736863_i <= auto9F736863_n; auto9F736863_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(33)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 1);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    autoB39B7D59_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
    for (autoB39B7D59_i = 1; autoB39B7D59_i <= autoB39B7D59_n; autoB39B7D59_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(33)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 1);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave, StringExternal("Param/Value/A7446D7B"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00017", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova08|Line00018", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(33)), 16.0, 315.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(2)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(28)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1548), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave2VoidRaysLeftQ_Init () {
    gt_SpecialWave2VoidRaysLeftQ = TriggerCreate("gt_SpecialWave2VoidRaysLeftQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 3 - Void Rays Right Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave3VoidRaysRightQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int autoAA671230_n;
    int autoAA671230_i;
    int auto82A1EC4A_n;
    int auto82A1EC4A_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA671230_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
    for (autoAA671230_i = 1; autoAA671230_i <= autoAA671230_n; autoAA671230_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(37)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 3);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    auto82A1EC4A_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 3);
    for (auto82A1EC4A_i = 1; auto82A1EC4A_i <= auto82A1EC4A_n; auto82A1EC4A_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(37)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 3);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave, StringExternal("Param/Value/D7B3380E"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00019", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00024", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova08|Line00025", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(37)), 16.0, 135.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(7)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(30)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1550), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave3VoidRaysRightQ_Init () {
    gt_SpecialWave3VoidRaysRightQ = TriggerCreate("gt_SpecialWave3VoidRaysRightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 4 - Immortals Center Big Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave4ImmortalsCenterBigQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int autoFD6029B7_n;
    int autoFD6029B7_i;
    int auto9A5BA239_n;
    int auto9A5BA239_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFD6029B7_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
    for (autoFD6029B7_i = 1; autoFD6029B7_i <= autoFD6029B7_n; autoFD6029B7_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    auto9A5BA239_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
    for (auto9A5BA239_i = 1; auto9A5BA239_i <= auto9A5BA239_n; auto9A5BA239_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave, StringExternal("Param/Value/377AA6E5"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00020", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(35)), 16.0, 225.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(4)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1549), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave4ImmortalsCenterBigQ_Init () {
    gt_SpecialWave4ImmortalsCenterBigQ = TriggerCreate("gt_SpecialWave4ImmortalsCenterBigQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 5 - Wrathwalkers Left Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave5WrathwalkersLeftQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int auto5C1D4DBD_n;
    int auto5C1D4DBD_i;
    int autoE9378816_n;
    int autoE9378816_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5C1D4DBD_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
    for (auto5C1D4DBD_i = 1; auto5C1D4DBD_i <= auto5C1D4DBD_n; auto5C1D4DBD_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "ColossusTaldarim", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(31)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 1);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 315.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    autoE9378816_n = libNtve_gf_DifficultyValueInt(4, 4, 6, 6);
    for (autoE9378816_i = 1; autoE9378816_i <= autoE9378816_n; autoE9378816_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(31)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 1);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 315.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave, StringExternal("Param/Value/A5F0A0AD"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00022", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(31)), 16.0, 315.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(1)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(28)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1548), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave5WrathwalkersLeftQ_Init () {
    gt_SpecialWave5WrathwalkersLeftQ = TriggerCreate("gt_SpecialWave5WrathwalkersLeftQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 6 - Wrathwalkers Right Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave6WrathwalkersRightQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int auto48BBABCB_n;
    int auto48BBABCB_i;
    int autoA16C08E5_n;
    int autoA16C08E5_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto48BBABCB_n = libNtve_gf_DifficultyValueInt(4, 4, 5, 6);
    for (auto48BBABCB_i = 1; auto48BBABCB_i <= auto48BBABCB_n; auto48BBABCB_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "ColossusTaldarim", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(39)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 3);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 135.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    autoA16C08E5_n = libNtve_gf_DifficultyValueInt(4, 4, 6, 6);
    for (autoA16C08E5_i = 1; autoA16C08E5_i <= autoA16C08E5_n; autoA16C08E5_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(39)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 3);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 135.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave, StringExternal("Param/Value/AF36888B"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00049", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(39)), 16.0, 135.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(6)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(30)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1550), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave6WrathwalkersRightQ_Init () {
    gt_SpecialWave6WrathwalkersRightQ = TriggerCreate("gt_SpecialWave6WrathwalkersRightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 7 - Ji'nara Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave7JinaraQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;

    // Automatic Variable Declarations
    int auto7B267D64_n;
    int auto7B267D64_i;
    int auto0EA76181_n;
    int auto0EA76181_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "NovaMothership", 0, gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(35)), PointFromId(1549));
    gv_jinaraMothership1 = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(UnitLastCreated(), "Detector12", UnitLastCreated(), 1);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/95F490D1"), null);
    gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
    gv_enemyUnitsRemaining += 1;
    UnitGroupAdd(lv_currentWave, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
    Wait(0.0625, c_timeAI);
    auto7B267D64_n = libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
    for (auto7B267D64_i = 1; auto7B267D64_i <= auto7B267D64_n; auto7B267D64_i += 1) {
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        gv_enemyUnitsRemaining += 1;
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    auto0EA76181_n = libNtve_gf_DifficultyValueInt(4, 4, 4, 6);
    for (auto0EA76181_i = 1; auto0EA76181_i <= auto0EA76181_n; auto0EA76181_i += 1) {
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        gv_enemyUnitsRemaining += 1;
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((UnitIsAlive(gv_jinaraMothership1) == false)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(libNtve_gf_ConvertUnitToUnitGroup(gv_jinaraMothership1), StringExternal("Param/Value/03E63D8D"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00026", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova08|Line00056", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(35)), 16.0, 225.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1549), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova08_Mothership", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave7JinaraQ_Init () {
    gt_SpecialWave7JinaraQ = TriggerCreate("gt_SpecialWave7JinaraQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 8 - Void Rays Lower Left Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave8VoidRaysLowerLeftQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int auto0C09E40F_n;
    int auto0C09E40F_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0C09E40F_n = libNtve_gf_DifficultyValueInt(6, 6, 8, 10);
    for (auto0C09E40F_i = 1; auto0C09E40F_i <= auto0C09E40F_n; auto0C09E40F_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(40)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 1);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 315.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave, StringExternal("Param/Value/D65D259D"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00027", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova08|Line00028", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if (((UnitIsAlive(gv_jinaraMothership1) == true) || (UnitIsAlive(gv_jinaraMothership2) == true))) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    }

    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(40)), 16.0, 315.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(28)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1548), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave8VoidRaysLowerLeftQ_Init () {
    gt_SpecialWave8VoidRaysLowerLeftQ = TriggerCreate("gt_SpecialWave8VoidRaysLowerLeftQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 9 - Void Rays Lower Right Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave9VoidRaysLowerRightQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int autoBF1FBF95_n;
    int autoBF1FBF95_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBF1FBF95_n = libNtve_gf_DifficultyValueInt(6, 6, 8, 10);
    for (autoBF1FBF95_i = 1; autoBF1FBF95_i <= autoBF1FBF95_n; autoBF1FBF95_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(41)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 3);
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 135.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave, StringExternal("Param/Value/32BC40EA"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00029", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if (((UnitIsAlive(gv_jinaraMothership1) == true) || (UnitIsAlive(gv_jinaraMothership2) == true))) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    }

    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(41)), 16.0, 135.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(30)), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1550), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave9VoidRaysLowerRightQ_Init () {
    gt_SpecialWave9VoidRaysLowerRightQ = TriggerCreate("gt_SpecialWave9VoidRaysLowerRightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 10 - Immortals Triple Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave10ImmortalsTripleQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave1;
    unitgroup lv_currentWave2;
    unitgroup lv_currentWave3;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int auto71FC616F_n;
    int auto71FC616F_i;
    int auto1840745A_n;
    int auto1840745A_i;
    int auto03533E9A_n;
    int auto03533E9A_i;
    int auto249D4BB9_n;
    int auto249D4BB9_i;
    int auto6FBB50BA_n;
    int auto6FBB50BA_i;
    int autoA7577F82_n;
    int autoA7577F82_i;

    // Variable Initialization
    lv_currentWave1 = UnitGroupEmpty();
    lv_currentWave2 = UnitGroupEmpty();
    lv_currentWave3 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto71FC616F_n = libNtve_gf_DifficultyValueInt(6, 6, 8, 10);
    for (auto71FC616F_i = 1; auto71FC616F_i <= auto71FC616F_n; auto71FC616F_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(33)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 1);
        UnitGroupAdd(lv_currentWave1, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    auto1840745A_n = libNtve_gf_DifficultyValueInt(4, 4, 4, 6);
    for (auto1840745A_i = 1; auto1840745A_i <= auto1840745A_n; auto1840745A_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(33)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 1);
        UnitGroupAdd(lv_currentWave1, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    auto03533E9A_n = libNtve_gf_DifficultyValueInt(3, 3, 4, 4);
    for (auto03533E9A_i = 1; auto03533E9A_i <= auto03533E9A_n; auto03533E9A_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        UnitGroupAdd(lv_currentWave2, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    auto249D4BB9_n = libNtve_gf_DifficultyValueInt(4, 4, 4, 6);
    for (auto249D4BB9_i = 1; auto249D4BB9_i <= auto249D4BB9_n; auto249D4BB9_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        UnitGroupAdd(lv_currentWave2, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    auto6FBB50BA_n = libNtve_gf_DifficultyValueInt(3, 3, 4, 4);
    for (auto6FBB50BA_i = 1; auto6FBB50BA_i <= auto6FBB50BA_n; auto6FBB50BA_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Immortal", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(37)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 3);
        UnitGroupAdd(lv_currentWave3, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    autoA7577F82_n = libNtve_gf_DifficultyValueInt(4, 4, 4, 6);
    for (autoA7577F82_i = 1; autoA7577F82_i <= autoA7577F82_n; autoA7577F82_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(37)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 3);
        UnitGroupAdd(lv_currentWave3, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || ((libNtve_gf_UnitGroupIsDead(lv_currentWave1) == true) && (libNtve_gf_UnitGroupIsDead(lv_currentWave2) == true) && (libNtve_gf_UnitGroupIsDead(lv_currentWave3) == true)))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave1, StringExternal("Param/Value/787AE1CF"));
    gf_CreateAttackWavePing(lv_currentWave2, StringExternal("Param/Value/E3E11A02"));
    gf_CreateAttackWavePing(lv_currentWave3, StringExternal("Param/Value/025ED4FA"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00030", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if (((UnitIsAlive(gv_jinaraMothership1) == true) || (UnitIsAlive(gv_jinaraMothership2) == true))) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    }

    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if ((libNtve_gf_UnitGroupIsDead(lv_currentWave1) == false)) {
        AISetGroupScriptControlled(lv_currentWave1, false);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(33)), 16.0, 225.0));
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave1);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(1)), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1548), false);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    }

    Wait(libNtve_gf_DifficultyValueFixed(15.0, 10.0, 5.0, 0.0), c_timeAI);
    if ((libNtve_gf_UnitGroupIsDead(lv_currentWave2) == false)) {
        AISetGroupScriptControlled(lv_currentWave2, false);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(35)), 16.0, 225.0));
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave2);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(4)), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1549), false);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    }

    Wait(libNtve_gf_DifficultyValueFixed(15.0, 10.0, 5.0, 0.0), c_timeAI);
    if ((libNtve_gf_UnitGroupIsDead(lv_currentWave3) == false)) {
        AISetGroupScriptControlled(lv_currentWave3, false);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(37)), 16.0, 225.0));
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave3);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(6)), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1550), false);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave10ImmortalsTripleQ_Init () {
    gt_SpecialWave10ImmortalsTripleQ = TriggerCreate("gt_SpecialWave10ImmortalsTripleQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Wave 11 - Void Rays Double Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialWave11VoidRaysDoubleQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave1;
    unitgroup lv_currentWave2;
    bool lv_skipTransmission;

    // Automatic Variable Declarations
    int auto2121870A_n;
    int auto2121870A_i;
    int autoEE9541FE_n;
    int autoEE9541FE_i;

    // Variable Initialization
    lv_currentWave1 = UnitGroupEmpty();
    lv_currentWave2 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentEnemyUnits < gv_enemyUnitsRemaining))) {
            return false;
        }

        if (!((gv_enemyUnitsRemaining >= 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2121870A_n = libNtve_gf_DifficultyValueInt(6, 6, 8, 10);
    for (auto2121870A_i = 1; auto2121870A_i <= auto2121870A_n; auto2121870A_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(40)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 1);
        UnitGroupAdd(lv_currentWave1, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 315.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    autoEE9541FE_n = libNtve_gf_DifficultyValueInt(6, 6, 8, 10);
    for (autoEE9541FE_i = 1; autoEE9541FE_i <= autoEE9541FE_n; autoEE9541FE_i += 1) {
        if ((gv_currentEnemyUnits >= gv_enemyUnitsRemaining)) {
            lv_skipTransmission = true;
            break;
        }

        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(41)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 3);
        UnitGroupAdd(lv_currentWave2, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 135.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || ((libNtve_gf_UnitGroupIsDead(lv_currentWave1) == true) && (libNtve_gf_UnitGroupIsDead(lv_currentWave2) == true)))) {
        return true;
    }

    if ((lv_skipTransmission == true)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(lv_currentWave1, StringExternal("Param/Value/ED82DD79"));
    gf_CreateAttackWavePing(lv_currentWave2, StringExternal("Param/Value/539E283C"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00031", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if (((UnitIsAlive(gv_jinaraMothership1) == true) || (UnitIsAlive(gv_jinaraMothership2) == true))) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    }

    TriggerQueueExit();
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 25.0, 20.0, 15.0), c_timeAI);
    if ((libNtve_gf_UnitGroupIsDead(lv_currentWave1) == false)) {
        AISetGroupScriptControlled(lv_currentWave1, false);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(40)), 16.0, 225.0));
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave1);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(28)), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1548), false);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    }

    Wait(libNtve_gf_DifficultyValueFixed(15.0, 10.0, 5.0, 0.0), c_timeAI);
    if ((libNtve_gf_UnitGroupIsDead(lv_currentWave2) == false)) {
        AISetGroupScriptControlled(lv_currentWave2, false);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(41)), 16.0, 225.0));
        AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave2);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(30)), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1550), false);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialWave11VoidRaysDoubleQ_Init () {
    gt_SpecialWave11VoidRaysDoubleQ = TriggerCreate("gt_SpecialWave11VoidRaysDoubleQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Special Wave - Ji'nara Q
//--------------------------------------------------------------------------------------------------
bool gt_FinalSpecialWaveJinaraQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentWave;

    // Automatic Variable Declarations
    int autoD2427E45_n;
    int autoD2427E45_i;
    int autoC8E20003_n;
    int autoC8E20003_i;
    int autoE33D3FB8_n;
    int autoE33D3FB8_i;

    // Variable Initialization
    lv_currentWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((gv_enemyUnitsRemaining <= 100)) {
            break;
        }

    }
    TriggerEnable(gt_SpecialWave7JinaraQ, false);
    if ((UnitIsAlive(gv_jinaraMothership1) == true)) {
        UnitKill(gv_jinaraMothership1);
    }

    Wait(1.0, c_timeAI);
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "NovaMothership", 0, gv_pLAYER_02_DOMINION3, RegionGetCenter(RegionFromId(35)), PointFromId(1549));
    gv_jinaraMothership2 = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/BEEF651B"), null);
    gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
    gv_enemyUnitsRemaining += 1;
    UnitGroupAdd(lv_currentWave, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
    Wait(0.0625, c_timeAI);
    autoD2427E45_n = libNtve_gf_DifficultyValueInt(3, 3, 4, 4);
    for (autoD2427E45_i = 1; autoD2427E45_i <= autoD2427E45_n; autoD2427E45_i += 1) {
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        gv_enemyUnitsRemaining += 1;
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    autoC8E20003_n = libNtve_gf_DifficultyValueInt(0, 0, 1, 2);
    for (autoC8E20003_i = 1; autoC8E20003_i <= autoC8E20003_n; autoC8E20003_i += 1) {
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Carrier", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        gv_enemyUnitsRemaining += 1;
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    autoE33D3FB8_n = libNtve_gf_DifficultyValueInt(6, 6, 6, 8);
    for (autoE33D3FB8_i = 1; autoE33D3FB8_i <= autoE33D3FB8_n; autoE33D3FB8_i += 1) {
        if ((libNCMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(35)), PointFromId(1549));
        gf_TrackUnitforLeaderboard(UnitLastCreated(), 2);
        gv_enemyUnitsRemaining += 1;
        UnitGroupAdd(lv_currentWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 16.0, 225.0)), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    if ((UnitIsAlive(gv_jinaraMothership2) == false)) {

    }

    SoundPlayForPlayer(SoundLink("AttackWarning", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateAttackWavePing(libNtve_gf_ConvertUnitToUnitGroup(gv_jinaraMothership2), StringExternal("Param/Value/9CAB031F"));
    Wait(1.0, c_timeReal);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00032", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00033", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova08|Line00050", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if (((libNCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_currentWave) == true))) {
        return true;
    }

    AISetGroupScriptControlled(lv_currentWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION3, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointWithOffsetPolar(RegionGetCenter(RegionFromId(35)), 16.0, 225.0));
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION3, lv_currentWave);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(1549), false);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION3, 0, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova08_Mothership", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalSpecialWaveJinaraQ_Init () {
    gt_FinalSpecialWaveJinaraQ = TriggerCreate("gt_FinalSpecialWaveJinaraQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defeat the Death Fleet - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefeattheDeathFleetCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova08Primary01");
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefeattheDeathFleetCreate_Init () {
    gt_ObjectiveDefeattheDeathFleetCreate = TriggerCreate("gt_ObjectiveDefeattheDeathFleetCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defeat the Death Fleet - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefeattheDeathFleetComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDefeattheDeathFleetCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova08Primary01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefeattheDeathFleetComplete_Init () {
    gt_ObjectiveDefeattheDeathFleetComplete = TriggerCreate("gt_ObjectiveDefeattheDeathFleetComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Science Facility - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveScienceFacilityCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova08Bonus01");
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveScienceFacilityCreate_Init () {
    gt_ObjectiveScienceFacilityCreate = TriggerCreate("gt_ObjectiveScienceFacilityCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Science Facility - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveScienceFacilityComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveScienceFacilityCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova08Bonus01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveScienceFacilityComplete_Init () {
    gt_ObjectiveScienceFacilityComplete = TriggerCreate("gt_ObjectiveScienceFacilityComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Science Facility - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveScienceFacilityFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveScienceFacilityCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova08Bonus01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveScienceFacilityFailed_Init () {
    gt_ObjectiveScienceFacilityFailed = TriggerCreate("gt_ObjectiveScienceFacilityFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDC659AEB_g;
    int autoDC659AEB_u;
    unit autoDC659AEB_var;
    unitgroup auto472EFD2D_g;
    int auto472EFD2D_u;
    unit auto472EFD2D_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameQ);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    autoDC659AEB_g = UnitGroup("SCV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC659AEB_u = UnitGroupCount(autoDC659AEB_g, c_unitCountAll);
    for (;; autoDC659AEB_u -= 1) {
        autoDC659AEB_var = UnitGroupUnitFromEnd(autoDC659AEB_g, autoDC659AEB_u);
        if (autoDC659AEB_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoDC659AEB_var, false);
    }
    TriggerQueueEnter();
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    auto472EFD2D_g = UnitGroup("PalletMinerals", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto472EFD2D_u = UnitGroupCount(auto472EFD2D_g, c_unitCountAll);
    for (;; auto472EFD2D_u -= 1) {
        auto472EFD2D_var = UnitGroupUnitFromEnd(auto472EFD2D_g, auto472EFD2D_u);
        if (auto472EFD2D_var == null) { break; }
        UnitRemove(auto472EFD2D_var);
    }
    TriggerExecute(gt_BriefingSurrounded01, true, true);
    TriggerExecute(gt_BriefingSurrounded02, true, true);
    TriggerExecute(gt_BriefingDefenders01, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Surrounded 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingSurrounded01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    TriggerExecute(gt_BriefingSurroundedActions01, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1268121028), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(946986296), (SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova08|Line00001", true), c_soundIndexAny)) * 1.5), -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova08_00a");
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova08|Line00001", true), c_soundIndexAny)) * 1.5), c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingSurrounded01_Init () {
    gt_BriefingSurrounded01 = TriggerCreate("gt_BriefingSurrounded01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Surrounded 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingSurrounded02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    TriggerExecute(gt_BriefingSurroundedActions02, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(453498138), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(909407402), (SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova08|Line00001", true), c_soundIndexAny)) * 1.5), -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova08_00b");
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova08|Line00001", true), c_soundIndexAny)) * 1.5), c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingSurrounded02_Init () {
    gt_BriefingSurrounded02 = TriggerCreate("gt_BriefingSurrounded02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Surrounded Actions 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingSurroundedActions01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;

    // Automatic Variable Declarations
    const int autoF575F647_n = 5;
    int autoF575F647_i;
    const int auto9E316ECF_n = 7;
    int auto9E316ECF_i;
    const int auto105BE911_n = 3;
    int auto105BE911_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iter = 0;
    for (autoF575F647_i = 1; autoF575F647_i <= autoF575F647_n; autoF575F647_i += 1) {
        lv_iter += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, PointFromName(("Briefing - 01 - Zealot 0" + IntToString(lv_iter))));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 50.0, PointGetFacing(PointFromName(("Briefing - 01 - Zealot 0" + IntToString(lv_iter)))))), c_orderQueueReplace);
    }
    lv_iter = 0;
    for (auto9E316ECF_i = 1; auto9E316ECF_i <= auto9E316ECF_n; auto9E316ECF_i += 1) {
        lv_iter += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, PointFromName(("Briefing - 01 - Stalker 0" + IntToString(lv_iter))));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 50.0, PointGetFacing(PointFromName(("Briefing - 01 - Stalker 0" + IntToString(lv_iter)))))), c_orderQueueReplace);
    }
    lv_iter = 0;
    for (auto105BE911_i = 1; auto105BE911_i <= auto105BE911_n; auto105BE911_i += 1) {
        lv_iter += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, PointFromName(("Briefing - 01 - Stalker 0" + IntToString(lv_iter))));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 50.0, PointGetFacing(PointFromName(("Briefing - 01 - Stalker 0" + IntToString(lv_iter)))))), c_orderQueueReplace);
    }
    lv_iter = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingSurroundedActions01_Init () {
    gt_BriefingSurroundedActions01 = TriggerCreate("gt_BriefingSurroundedActions01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Surrounded Actions 02
//--------------------------------------------------------------------------------------------------
bool gt_BriefingSurroundedActions02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;

    // Automatic Variable Declarations
    const int auto00128DD8_n = 5;
    int auto00128DD8_i;
    const int autoE47FA237_n = 5;
    int autoE47FA237_i;
    const int auto76163A90_n = 4;
    int auto76163A90_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iter = 0;
    for (auto00128DD8_i = 1; auto00128DD8_i <= auto00128DD8_n; auto00128DD8_i += 1) {
        lv_iter += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, PointFromName(("Briefing - 02 - Zealot 0" + IntToString(lv_iter))));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 50.0, PointGetFacing(PointFromName(("Briefing - 02 - Zealot 0" + IntToString(lv_iter)))))), c_orderQueueReplace);
    }
    lv_iter = 0;
    for (autoE47FA237_i = 1; autoE47FA237_i <= autoE47FA237_n; autoE47FA237_i += 1) {
        lv_iter += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, PointFromName(("Briefing - 02 - Stalker 0" + IntToString(lv_iter))));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 50.0, PointGetFacing(PointFromName(("Briefing - 02 - Stalker 0" + IntToString(lv_iter)))))), c_orderQueueReplace);
    }
    lv_iter = 0;
    for (auto76163A90_i = 1; auto76163A90_i <= auto76163A90_n; auto76163A90_i += 1) {
        lv_iter += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRay", 0, gv_pLAYER_02_DOMINION3, PointFromName(("Briefing - 02 - Stalker 0" + IntToString(lv_iter))));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 50.0, PointGetFacing(PointFromName(("Briefing - 02 - Stalker 0" + IntToString(lv_iter)))))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingSurroundedActions02_Init () {
    gt_BriefingSurroundedActions02 = TriggerCreate("gt_BriefingSurroundedActions02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Defenders 01
//--------------------------------------------------------------------------------------------------
bool gt_BriefingDefenders01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1335315521), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BriefingDefendersActions, true, false);
    MovieStartRecording("Briefing_Video_Nova08_01");
    Wait(8.0, c_timeGame);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingDefenders01_Init () {
    gt_BriefingDefenders01 = TriggerCreate("gt_BriefingDefenders01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing - Defenders Actions
//--------------------------------------------------------------------------------------------------
bool gt_BriefingDefendersActions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3EF51943_n = 2;
    int auto3EF51943_i;
    const int autoC95D5461_n = 2;
    int autoC95D5461_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto3EF51943_i = 1; auto3EF51943_i <= auto3EF51943_n; auto3EF51943_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(77)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(77)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return true;
        }

        for (autoC95D5461_i = 1; autoC95D5461_i <= autoC95D5461_n; autoC95D5461_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(64)));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(4))), c_orderQueueReplace);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(64)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(4))), c_orderQueueReplace);
        Wait(15.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingDefendersActions_Init () {
    gt_BriefingDefendersActions = TriggerCreate("gt_BriefingDefendersActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCB5DD996_g;
    int autoCB5DD996_u;
    unit autoCB5DD996_var;
    unitgroup auto7ACC3787_g;
    int auto7ACC3787_u;
    unit auto7ACC3787_var;
    unitgroup autoD4A5D62A_g;
    int autoD4A5D62A_u;
    unit autoD4A5D62A_var;
    unitgroup auto893CB46F_g;
    int auto893CB46F_u;
    unit auto893CB46F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    autoCB5DD996_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCB5DD996_u = UnitGroupCount(autoCB5DD996_g, c_unitCountAll);
    for (;; autoCB5DD996_u -= 1) {
        autoCB5DD996_var = UnitGroupUnitFromEnd(autoCB5DD996_g, autoCB5DD996_u);
        if (autoCB5DD996_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, autoCB5DD996_var);
        libNtve_gf_ShowHideUnit(autoCB5DD996_var, false);
    }
    auto7ACC3787_g = gv_cinematicHiddenUnits;
    auto7ACC3787_u = UnitGroupCount(auto7ACC3787_g, c_unitCountAll);
    for (;; auto7ACC3787_u -= 1) {
        auto7ACC3787_var = UnitGroupUnitFromEnd(auto7ACC3787_g, auto7ACC3787_u);
        if (auto7ACC3787_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto7ACC3787_var), c_unitAttributeStructure) == false)) {
            UnitCreate(1, UnitGetType(auto7ACC3787_var), 0, gv_pLAYER_02_DOMINION2, RegionRandomPoint(RegionFromId(66)), 130.0);
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(auto7ACC3787_var)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(auto7ACC3787_var), 1.0, 45.0)), c_orderQueueAddToEnd);
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(auto7ACC3787_var), c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, UnitGetPosition(auto7ACC3787_var));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            if ((UnitGetType(auto7ACC3787_var) == "Barracks")) {
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BarracksTrain", 0)), c_orderQueueReplace);
            }

        }
    }
    autoD4A5D62A_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD4A5D62A_u = UnitGroupCount(autoD4A5D62A_g, c_unitCountAll);
    for (;; autoD4A5D62A_u -= 1) {
        autoD4A5D62A_var = UnitGroupUnitFromEnd(autoD4A5D62A_g, autoD4A5D62A_u);
        if (autoD4A5D62A_var == null) { break; }
        UnitGroupAdd(gv_introDefenders, autoD4A5D62A_var);
        libNtve_gf_ChangeUnitDamage(autoD4A5D62A_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    auto893CB46F_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto893CB46F_u = UnitGroupCount(auto893CB46F_g, c_unitCountAll);
    for (;; auto893CB46F_u -= 1) {
        auto893CB46F_var = UnitGroupUnitFromEnd(auto893CB46F_g, auto893CB46F_u);
        if (auto893CB46F_var == null) { break; }
        UnitGroupAdd(gv_introDefenders, auto893CB46F_var);
        libNtve_gf_ChangeUnitDamage(auto893CB46F_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    TriggerExecute(gt_IntroAttacks, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1356528718), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1981050315), (SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova08|Line00001", true), c_soundIndexAny)) + 2.0), -1, 10.0, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova08_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova08|Line00001", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(707881391), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(753041214), 16.0, -1, 10.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova08|Line00002", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova08|Line00003", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Briefing_Nova08|Line00005", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1800624846), 8.0, -1, 10.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova08|Line00006", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Briefing_Nova08|Line00007", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto3FEAFE7F_g;
    int auto3FEAFE7F_u;
    unit auto3FEAFE7F_var;
    unitgroup autoAB37A320_g;
    int autoAB37A320_u;
    unit autoAB37A320_var;
    unitgroup auto081E46D4_g;
    int auto081E46D4_u;
    unit auto081E46D4_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3FEAFE7F_g = gv_cinematicTempUnits;
    auto3FEAFE7F_u = UnitGroupCount(auto3FEAFE7F_g, c_unitCountAll);
    for (;; auto3FEAFE7F_u -= 1) {
        auto3FEAFE7F_var = UnitGroupUnitFromEnd(auto3FEAFE7F_g, auto3FEAFE7F_u);
        if (auto3FEAFE7F_var == null) { break; }
        UnitRemove(auto3FEAFE7F_var);
    }
    autoAB37A320_g = gv_cinematicHiddenUnits;
    autoAB37A320_u = UnitGroupCount(autoAB37A320_g, c_unitCountAll);
    for (;; autoAB37A320_u -= 1) {
        autoAB37A320_var = UnitGroupUnitFromEnd(autoAB37A320_g, autoAB37A320_u);
        if (autoAB37A320_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoAB37A320_var, true);
    }
    auto081E46D4_g = gv_introDefenders;
    auto081E46D4_u = UnitGroupCount(auto081E46D4_g, c_unitCountAll);
    for (;; auto081E46D4_u -= 1) {
        auto081E46D4_var = UnitGroupUnitFromEnd(auto081E46D4_g, auto081E46D4_u);
        if (auto081E46D4_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto081E46D4_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerStop(gt_IntroAttacks);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    Wait(0.1, c_timeGame);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.4, c_timeGame);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Attacks
//--------------------------------------------------------------------------------------------------
bool gt_IntroAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto22509C2E_n = 2;
    int auto22509C2E_i;
    const int autoB0971379_n = 2;
    int autoB0971379_i;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    for (auto22509C2E_i = 1; auto22509C2E_i <= auto22509C2E_n; auto22509C2E_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(77)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(77)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return true;
        }

        for (autoB0971379_i = 1; autoB0971379_i <= autoB0971379_n; autoB0971379_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(64)));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(4))), c_orderQueueReplace);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(64)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(4))), c_orderQueueReplace);
        Wait(15.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroAttacks_Init () {
    gt_IntroAttacks = TriggerCreate("gt_IntroAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3F4B6F62_g;
    int auto3F4B6F62_u;
    unit auto3F4B6F62_var;
    unitgroup autoE8260DAE_g;
    int autoE8260DAE_u;
    unit autoE8260DAE_var;
    unitgroup auto65D2E4E0_g;
    int auto65D2E4E0_u;
    unit auto65D2E4E0_var;
    unitgroup auto716D6BF2_g;
    int auto716D6BF2_u;
    unit auto716D6BF2_var;
    unitgroup autoF0B8365B_g;
    int autoF0B8365B_u;
    unit autoF0B8365B_var;
    unitgroup auto0BFFA031_g;
    int auto0BFFA031_u;
    unit auto0BFFA031_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    auto3F4B6F62_g = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3F4B6F62_u = UnitGroupCount(auto3F4B6F62_g, c_unitCountAll);
    for (;; auto3F4B6F62_u -= 1) {
        auto3F4B6F62_var = UnitGroupUnitFromEnd(auto3F4B6F62_g, auto3F4B6F62_u);
        if (auto3F4B6F62_var == null) { break; }
        UnitRemove(auto3F4B6F62_var);
    }
    autoE8260DAE_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8260DAE_u = UnitGroupCount(autoE8260DAE_g, c_unitCountAll);
    for (;; autoE8260DAE_u -= 1) {
        autoE8260DAE_var = UnitGroupUnitFromEnd(autoE8260DAE_g, autoE8260DAE_u);
        if (autoE8260DAE_var == null) { break; }
        UnitRemove(autoE8260DAE_var);
    }
    auto65D2E4E0_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(82), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto65D2E4E0_u = UnitGroupCount(auto65D2E4E0_g, c_unitCountAll);
    for (;; auto65D2E4E0_u -= 1) {
        auto65D2E4E0_var = UnitGroupUnitFromEnd(auto65D2E4E0_g, auto65D2E4E0_u);
        if (auto65D2E4E0_var == null) { break; }
        UnitRemove(auto65D2E4E0_var);
    }
    auto716D6BF2_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(82), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto716D6BF2_u = UnitGroupCount(auto716D6BF2_g, c_unitCountAll);
    for (;; auto716D6BF2_u -= 1) {
        auto716D6BF2_var = UnitGroupUnitFromEnd(auto716D6BF2_g, auto716D6BF2_u);
        if (auto716D6BF2_var == null) { break; }
        UnitRemove(auto716D6BF2_var);
    }
    autoF0B8365B_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF0B8365B_u = UnitGroupCount(autoF0B8365B_g, c_unitCountAll);
    for (;; autoF0B8365B_u -= 1) {
        autoF0B8365B_var = UnitGroupUnitFromEnd(autoF0B8365B_g, autoF0B8365B_u);
        if (autoF0B8365B_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoF0B8365B_var) == false) && (UnitGetType(autoF0B8365B_var) != "SubwayEntranceNE") && (UnitGetType(autoF0B8365B_var) != "SubwayEntranceSW")) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoF0B8365B_var);
            UnitGroupAdd(gv_cinematicHiddenUnits, autoF0B8365B_var);
            libNtve_gf_PauseUnit(autoF0B8365B_var, true);
        }

    }
    auto0BFFA031_g = gv_cinematicHiddenUnits;
    auto0BFFA031_u = UnitGroupCount(auto0BFFA031_g, c_unitCountAll);
    for (;; auto0BFFA031_u -= 1) {
        auto0BFFA031_var = UnitGroupUnitFromEnd(auto0BFFA031_g, auto0BFFA031_u);
        if (auto0BFFA031_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0BFFA031_var, false);
    }
    TriggerExecute(gt_VictoryBattlecruiserControl, true, false);
    TriggerExecute(gt_VictoryMedivacScene, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2021395740), 0.0, -1, 10.0, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.0, 0.0, 25.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova08_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00038", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00057", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_FlyInGriffin, true, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2061724522));
    gv_victoryCinematicNova = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1202961687)), c_orderQueueReplace);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(200316837), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(244524711), 20.0, -1, 10.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00040", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova08|Line00041", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Medivac Scene
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMedivacScene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac1;
    unit lv_medivac2;
    unit[7] lv_marine;
    unit lv_marauder;
    unit[3] lv_medics;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2024463732));
    lv_marine[1] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 10.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(1159022545));
    lv_marine[2] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 10.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(498835273));
    lv_marine[3] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 10.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(268182666));
    lv_marine[4] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 10.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(1949078664));
    lv_marauder = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 10.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(1446333814));
    lv_medics[1] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(493282323));
    lv_medics[2] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(2.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(280927805));
    lv_medivac1 = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 14.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 6.0, 3.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(1.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Medivac", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2092583508));
    lv_medivac2 = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 14.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 6.0, 3.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(3.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(lv_marine[1], OrderTargetingUnit(null, lv_medivac1), c_orderQueueReplace);
    UnitIssueOrder(lv_marine[2], OrderTargetingUnit(null, lv_medivac1), c_orderQueueReplace);
    UnitIssueOrder(lv_marine[3], OrderTargetingUnit(null, lv_medivac1), c_orderQueueReplace);
    UnitIssueOrder(lv_medics[2], OrderTargetingUnit(null, lv_medivac1), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(lv_marine[4], OrderTargetingUnit(null, lv_medivac2), c_orderQueueReplace);
    UnitIssueOrder(lv_marauder, OrderTargetingUnit(null, lv_medivac2), c_orderQueueReplace);
    UnitIssueOrder(lv_medics[1], OrderTargetingUnit(null, lv_medivac2), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(lv_medivac1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(154)), c_orderQueueReplace);
    UnitIssueOrder(lv_medivac2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(154)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(lv_medivac1, Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_medivac2, Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMedivacScene_Init () {
    gt_VictoryMedivacScene = TriggerCreate("gt_VictoryMedivacScene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Battlecruiser Control
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBattlecruiserControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[4] lv_battlecruisers;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "Battlecruiser", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(1991594971), 45.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.4);
    UnitSetHeight(UnitLastCreated(), 30.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 20.0, UnitGetFacing(UnitLastCreated()))), c_orderQueueReplace);
    lv_battlecruisers[1] = UnitLastCreated();
    UnitCreate(1, "Battlecruiser", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(1828399861), 45.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.4);
    UnitSetHeight(UnitLastCreated(), 30.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 20.0, UnitGetFacing(UnitLastCreated()))), c_orderQueueReplace);
    lv_battlecruisers[2] = UnitLastCreated();
    UnitCreate(1, "Battlecruiser", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(670661737), 45.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.4);
    UnitSetHeight(UnitLastCreated(), 30.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 20.0, UnitGetFacing(UnitLastCreated()))), c_orderQueueReplace);
    lv_battlecruisers[3] = UnitLastCreated();
    Wait(5.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(lv_battlecruisers[1], OrderTargetingPoint(AbilityCommand("Hyperjump", 0), PointFromId(1337441087)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(lv_battlecruisers[2], OrderTargetingPoint(AbilityCommand("Hyperjump", 0), PointFromId(1337441087)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(lv_battlecruisers[3], OrderTargetingPoint(AbilityCommand("Hyperjump", 0), PointFromId(1337441087)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1806929250), 3.0, -1, 10.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBattlecruiserControl_Init () {
    gt_VictoryBattlecruiserControl = TriggerCreate("gt_VictoryBattlecruiserControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fly In Griffin
//--------------------------------------------------------------------------------------------------
bool gt_FlyInGriffin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localGriffin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "NovaShip", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2131153447));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_localGriffin = UnitLastCreated();
    UnitSetHeight(lv_localGriffin, 14.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_localGriffin), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_NovaShipStandWork", -1), PlayerGroupAll(), 30.0, 0.0);
    UnitBehaviorAdd(lv_localGriffin, "PermanentlyCloaked", lv_localGriffin, 1);
    Wait(3.0, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitBehaviorAdd(lv_localGriffin, "SuppressCloak", lv_localGriffin, 1);
    Wait(3.5, c_timeGame);
    if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_ShowHideUnit(gv_victoryCinematicNova, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlyInGriffin_Init () {
    gt_FlyInGriffin = TriggerCreate("gt_FlyInGriffin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugIntro_Init();
    gt_DebugStage2_Init();
    gt_StartGameQ_Init();
    gt_DefenderSideBasesOnlineQ_Init();
    gt_DefenderBasesMaintainDefenseQ_Init();
    gt_BattlecruisersOnlineQ_Init();
    gt_MoreBattlecruisersOnlineQ_Init();
    gt_DominionBaseLeftDies_Init();
    gt_DominionBaseMidDies_Init();
    gt_DominionBaseRightDies_Init();
    gt_GorgonDialog_Init();
    gt_GorgonButtonPressed_Init();
    gt_GorgonHoverPingsEnter_Init();
    gt_GorgonHoverPingsExit_Init();
    gt_SummonGorgonLeft_Init();
    gt_SummonGorgonMiddle_Init();
    gt_SummonGorgonRight_Init();
    gt_SCVDespawn_Init();
    gt_BarracksConstruction_Init();
    gt_ScienceFacilityDiesQ_Init();
    gt_BaseKilledQ_Init();
    gt_Mid1BaseKilled_Init();
    gt_Mid2BaseKilled_Init();
    gt_Mid3BaseKilled_Init();
    gt_DeathFleetCounter_Init();
    gt_ProtossUnitDies_Init();
    gt_ProtossUnitDominated_Init();
    gt_ProtossUnitReleased_Init();
    gt_JinaraDies1Q_Init();
    gt_JinaraDies2_Init();
    gt_Observers_Init();
    gt_DespawnObservers_Init();
    gt_DefeatBaseDead_Init();
    gt_VictoryDefeattheDeathFleetCompleted_Init();
    gt_VictoryDefeattheDeathFleetQ_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_GorgonsKills_Init();
    gt_YamatoKills_Init();
    gt_NovaKills_Init();
    gt_StartAI_Init();
    gt_AIUpgradeCasualNormal_Init();
    gt_AIUpgradeHardBrutal_Init();
    gt_AIGiveResources_Init();
    gt_BullyActivationSequence_Init();
    gt_AmbientWaves1_Init();
    gt_AmbientWaves2_Init();
    gt_AmbientWaves3_Init();
    gt_AmbientWaves4_Init();
    gt_SpecialWave1ImmortalsCenterQ_Init();
    gt_SpecialWave2VoidRaysLeftQ_Init();
    gt_SpecialWave3VoidRaysRightQ_Init();
    gt_SpecialWave4ImmortalsCenterBigQ_Init();
    gt_SpecialWave5WrathwalkersLeftQ_Init();
    gt_SpecialWave6WrathwalkersRightQ_Init();
    gt_SpecialWave7JinaraQ_Init();
    gt_SpecialWave8VoidRaysLowerLeftQ_Init();
    gt_SpecialWave9VoidRaysLowerRightQ_Init();
    gt_SpecialWave10ImmortalsTripleQ_Init();
    gt_SpecialWave11VoidRaysDoubleQ_Init();
    gt_FinalSpecialWaveJinaraQ_Init();
    gt_ObjectiveDefeattheDeathFleetCreate_Init();
    gt_ObjectiveDefeattheDeathFleetComplete_Init();
    gt_ObjectiveScienceFacilityCreate_Init();
    gt_ObjectiveScienceFacilityComplete_Init();
    gt_ObjectiveScienceFacilityFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingSurrounded01_Init();
    gt_BriefingSurrounded02_Init();
    gt_BriefingSurroundedActions01_Init();
    gt_BriefingSurroundedActions02_Init();
    gt_BriefingDefenders01_Init();
    gt_BriefingDefendersActions_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroAttacks_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryMedivacScene_Init();
    gt_VictoryBattlecruiserControl_Init();
    gt_FlyInGriffin_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
