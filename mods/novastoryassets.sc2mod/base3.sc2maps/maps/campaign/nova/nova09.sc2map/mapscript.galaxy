//==================================================================================================
// 
// Generated Map Script
// 
// Name:   End Game
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "LibComC"
include "LibCMMI"
include "LibCMUI"
include "LibNovC"
include "LibNCMI"
include "LibNCUI"
include "ai13916457"
include "ai7A223D14"
include "aiA28EB252"
include "aiB1488BFF"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libComC_InitLib();
    libCMMI_InitLib();
    libCMUI_InitLib();
    libNovC_InitLib();
    libNCMI_InitLib();
    libNCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DEFENDERSWEST = 2;
const int gv_pLAYER_03_DEFENDERSEAST = 3;
const int gv_pLAYER_04_XANTHOS = 4;
const int gv_pLAYER_05_GORGONS = 5;
const int gv_pLAYER_06_DEFENDERSNORTH = 6;
const int gv_pLAYER_07_DOMINION = 7;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESETTurretState_Active = 0;
const int ge_PRESETTurretState_Inactive = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
string gv_mapMusicTrack2;
string gv_mapMusicTrack3;
string gv_mapMusicTrack5;
string gv_mapMusicTrack4;
string gv_mapMusicTrack6;
unit gv_nova;
playergroup gv_defendersPlayerGroup;
unit[6] gv_dominionGorgons;
int gv_interruptibleTransmission;
int gv_xanthosAttackRunNumber;
unit gv_xanthos;
unit gv_xanthosTargetGorgon;
unit[8] gv_xanthosTurretUnits;
int gv_xanthosMinimapPing;
timer gv_xanthosTimer;
fixed gv_xanthosRepairTime;
int gv_xanthosMinimapPathDisplay;
bool gv_xanthosFinalFightTriggered;
timer gv_xanthosTimeoutTimer;
unit gv_hyperion;
int gv_hyperionAttackRunCount;
int gv_hyperionMinimapIcon;
int gv_hyperionMinimapPathDisplay;
int gv_defenderWaveTargetLane;
int gv_defenderWaveEscalation;
int gv_nukesLaunched;
int gv_nukesDetonated;
unitgroup gv_activeNukers;
unit gv_s2_Davis;
int gv_s2DavisTransmission;
point gv_lastXanthosLocation;
int gv_objectiveDestroyZergBase;
int gv_objectiveProtectFleetCount;
int gv_objectiveDestroyZergBase2;
int gv_objectiveDestroyZergBase3;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
actor gv_holo_CC;
actor gv_holo_Barracks;
actor gv_holo_Starport;
unit gv_midCineXanthos;
unit gv_midCineNova;
unitgroup gv_midDropPodCleanup;

void InitGlobals () {
    gv_defendersPlayerGroup = PlayerGroupEmpty();
    gv_interruptibleTransmission = c_invalidTransmissionId;
    gv_xanthosMinimapPing = c_invalidPingId;
    gv_xanthosTimer = TimerCreate();
    gv_xanthosRepairTime = libNtve_gf_DifficultyValueFixed(240.0, 240.0, 210.0, 180.0);
    gv_xanthosTimeoutTimer = TimerCreate();
    gv_hyperionMinimapIcon = c_invalidPingId;
    gv_activeNukers = UnitGroupEmpty();
    gv_s2DavisTransmission = c_invalidTransmissionId;
    gv_lastXanthosLocation = Point(0.0, 0.0);
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveProtectFleetCount = 5;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_midDropPodCleanup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetTurretState (unit lp_turretUnit, int lp_turretState);
bool gf_AllActiveTurretsDisabled ();
void gf_XanthosAttachTurrets ();
void gf_AttachTurretToXanthos (unit lp_attachingUnit, fixed lp_offsetAngle, fixed lp_offsetDistance);
void gf_AttachTurretToXanthosLocalXYOffset (unit lp_attachingUnit, fixed lp_localOffsetX, fixed lp_localOffsetY);
void gf_SetLegLookAtToXanthos (unit lp_attachingUnit);
void gf_XanthosRocketBarrageController (unit lp_rocketBarrageUnit);
void gf_CreateHyperionMinimapIcon ();
void gf_HyperionMinimapPathDisplay (unit lp_pathDisplayUnit, string lp_pathDisplayID, int lp_startingIndex);
void gf_AttackWavePing (unitgroup lp_waveUnitGroup);
void gf_SendDefenderWave (int lp_escalation, int lp_lane);
void gf_AIGhost (int lp_owner, unit lp_ghost, unitgroup lp_nearbyUnits);
void gf_AIGhostAcademy (int lp_owner, unit lp_ghostAcademy, unitgroup lp_nearbyUnits);
void gf_AIXanthosFinalForm (int lp_owner, unit lp_xanthos, unitgroup lp_nearbyUnits);
void gf_AIHyperion (int lp_owner, unit lp_hyperion, unitgroup lp_nearbyUnits);
void gf_AIBattlecruiser (int lp_owner, unit lp_battlecruiser, unitgroup lp_nearbyUnits);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_DebugXanthos;
trigger gt_StartGame;
trigger gt_StartingTransmissionsQ;
trigger gt_StartGame02KillDavis;
trigger gt_CleanUpSection01;
trigger gt_XanthosInit;
trigger gt_XanthosBeginAttack;
trigger gt_XanthosAttacksSoonTransmissionQ;
trigger gt_XanthosAttackQ;
trigger gt_XanthosTurretDestroyed;
trigger gt_XanthosJumpsToSafetyTransmissionQ;
trigger gt_XanthosJumpsToSafety;
trigger gt_XanthosTimeoutSafety;
trigger gt_XanthosFinalFight;
trigger gt_XanthosFinalFightPlayerWipe;
trigger gt_XanthosFinalFightTriggeredQ;
trigger gt_XanthosFinalFormReinforcements1;
trigger gt_XanthosFinalFormReinforcements1Q;
trigger gt_XanthosFinalFormReinforcements2;
trigger gt_XanthosFinalFormReinforcements2Q;
trigger gt_XanthosFinalFormReinforcements3;
trigger gt_XanthosFinalFormReinforcements3Q;
trigger gt_XanthosDies;
trigger gt_XanthosUICreate;
trigger gt_XanthosUIUpdate;
trigger gt_SendHyperionRetaliation;
trigger gt_SendHyperionRetaliationQ;
trigger gt_HyperionFallsBack;
trigger gt_HyperionFallsBackQ;
trigger gt_HyperionMinimapIcon;
trigger gt_CreateGorgonPings;
trigger gt_GorgonDies;
trigger gt_GorgonDiesTransmissionQ;
trigger gt_AttackWaveUnitGroup;
trigger gt_SendDefenderWaves;
trigger gt_DoMFlavorLineP02BaseQ;
trigger gt_DoMFlavorLineP03BaseQ;
trigger gt_DoMFlavorLineP06BaseQ;
trigger gt_DoMFlavorLineP06OutpostQ;
trigger gt_NukePingStart;
trigger gt_NukePingStop;
trigger gt_NukeLaunchedCounter;
trigger gt_NukeDetonatedCounter;
trigger gt_GhostDies;
trigger gt_S2DavisDiesQ;
trigger gt_S2StartQ;
trigger gt_S2Room1Q;
trigger gt_S2Room2Q;
trigger gt_S2Room3Q;
trigger gt_S2RoomTrigger1;
trigger gt_S2RoomTrigger2;
trigger gt_S2RoomTrigger3;
trigger gt_S2DavisFacesNova;
trigger gt_DoMEscapeRegion;
trigger gt_S2ExplosionCameraShake;
trigger gt_StartAI;
trigger gt_AIUpgradeCasualNormal;
trigger gt_AIUpgradeHardBrutal;
trigger gt_AIGiveResources;
trigger gt_XanthosController;
trigger gt_AntiNukeLogic;
trigger gt_FirstGhostTransmissionQ;
trigger gt_FirstAttackTransmissionQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatDominionFleetDestroyed;
trigger gt_DefeatNovaDead;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipReadyQ;
trigger gt_ObjectiveProtectFleetCreate;
trigger gt_ObjectiveProtectFleetComplete;
trigger gt_ObjectiveProtectFleetUpdate;
trigger gt_ObjectiveProtectFleetFailed;
trigger gt_ObjectiveDestroyXanthosCreate;
trigger gt_ObjectiveDestroyXanthosComplete;
trigger gt_ObjectiveDestroyXanthosFailed;
trigger gt_ObjectiveKillDavisCreate;
trigger gt_ObjectiveKillDavisComplete;
trigger gt_ObjectiveKillDavisFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene00RepairYards;
trigger gt_BriefingScene01Xanthos;
trigger gt_BriefingScene02XanthosWeapons;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai13916457") { ai13916457_start(p); }
    if (cai_playerAI[p] == "ai7A223D14") { ai7A223D14_start(p); }
    if (cai_playerAI[p] == "aiA28EB252") { aiA28EB252_start(p); }
    if (cai_playerAI[p] == "aiB1488BFF") { aiB1488BFF_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai13916457") { ai13916457_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai7A223D14") { ai7A223D14_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiA28EB252") { aiA28EB252_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiB1488BFF") { aiB1488BFF_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai13916457") { return ai13916457_getCustomData(p); }
    if (cai_playerAI[p] == "ai7A223D14") { return ai7A223D14_getCustomData(p); }
    if (cai_playerAI[p] == "aiA28EB252") { return aiA28EB252_getCustomData(p); }
    if (cai_playerAI[p] == "aiB1488BFF") { return aiB1488BFF_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai13916457") { return ai13916457_getLastWave(p); }
    if (cai_playerAI[p] == "ai7A223D14") { return ai7A223D14_getLastWave(p); }
    if (cai_playerAI[p] == "aiA28EB252") { return aiA28EB252_getLastWave(p); }
    if (cai_playerAI[p] == "aiB1488BFF") { return aiB1488BFF_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai13916457") { ai13916457_waves_run(p, target); }
    if (cai_playerAI[p] == "ai7A223D14") { ai7A223D14_waves_run(p, target); }
    if (cai_playerAI[p] == "aiA28EB252") { aiA28EB252_waves_run(p, target); }
    if (cai_playerAI[p] == "aiB1488BFF") { aiB1488BFF_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai13916457") { ai13916457_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai7A223D14") { ai7A223D14_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiA28EB252") { aiA28EB252_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiB1488BFF") { aiB1488BFF_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai13916457") { ai13916457_waves_stop(); }
    if (ai == "ai7A223D14") { ai7A223D14_waves_stop(); }
    if (ai == "aiA28EB252") { aiA28EB252_waves_stop(); }
    if (ai == "aiB1488BFF") { aiB1488BFF_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai13916457") { ai13916457_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai7A223D14") { ai7A223D14_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiA28EB252") { aiA28EB252_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiB1488BFF") { aiB1488BFF_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai13916457") { ai13916457_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai7A223D14") { ai7A223D14_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiA28EB252") { aiA28EB252_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiB1488BFF") { aiB1488BFF_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai13916457") { return ai13916457_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai7A223D14") { return ai7A223D14_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiA28EB252") { return aiA28EB252_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiB1488BFF") { return aiB1488BFF_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai13916457") { return ai13916457_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai7A223D14") { return ai7A223D14_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiA28EB252") { return aiA28EB252_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiB1488BFF") { return aiB1488BFF_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai13916457") { return ai13916457_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai7A223D14") { return ai7A223D14_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiA28EB252") { return aiA28EB252_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiB1488BFF") { return aiB1488BFF_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai13916457", 3);
    cai_start("ai7A223D14", 2);
    cai_start("aiA28EB252", 6);
    cai_start("aiB1488BFF", 4);
    AICampaignStart(5);
    AICampaignStart(7);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(6, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 5);
    cai_waves_run(4, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetTurretState (unit lp_turretUnit, int lp_turretState) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_turretState == ge_PRESETTurretState_Active)) {
        if ((UnitHasBehavior2(lp_turretUnit, "XanthosTurretInactive") == true)) {
            UnitBehaviorRemove(lp_turretUnit, "XanthosTurretInactive", 1);
        }

    }
    else {
        if ((UnitHasBehavior2(lp_turretUnit, "XanthosTurretInactive") == false)) {
            UnitBehaviorAdd(lp_turretUnit, "XanthosTurretInactive", lp_turretUnit, 1);
        }

    }
}

bool gf_AllActiveTurretsDisabled () {
    // Variable Declarations
    int lv_turretIter;

    // Automatic Variable Declarations
    const int autoE12D1947_ae = 6;
    const int autoE12D1947_ai = 1;

    // Variable Initialization

    // Implementation
    lv_turretIter = 1;
    for ( ; ( (autoE12D1947_ai >= 0 && lv_turretIter <= autoE12D1947_ae) || (autoE12D1947_ai < 0 && lv_turretIter >= autoE12D1947_ae) ) ; lv_turretIter += autoE12D1947_ai ) {
        if ((UnitIsAlive(gv_xanthosTurretUnits[lv_turretIter]) == true) && (UnitHasBehavior2(gv_xanthosTurretUnits[lv_turretIter], "NovaXThosCovered") == false) && (UnitHasBehavior2(gv_xanthosTurretUnits[lv_turretIter], "XanthosTurretInactive") == false)) {
            return false;
        }

    }
    return true;
}

void gf_XanthosAttachTurrets () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(gv_xanthosTurretUnits[1]) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaXanthosFlameTurret", 0, gv_pLAYER_04_XANTHOS, UnitGetPosition(gv_xanthos));
        gv_xanthosTurretUnits[1] = UnitLastCreated();
        gf_SetTurretState(UnitLastCreated(), ge_PRESETTurretState_Inactive);
        libNCMI_gf_AttachUnitModelToUnit(UnitLastCreated(), gv_xanthos, "Ref_Hardpoint 01", 0.0, 0.0, 0.0, "");
        gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), -2.0, 0.25);
    }

    if ((UnitIsAlive(gv_xanthosTurretUnits[2]) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaXanthosRailGunTurret", 0, gv_pLAYER_04_XANTHOS, UnitGetPosition(gv_xanthos));
        gv_xanthosTurretUnits[2] = UnitLastCreated();
        gf_SetTurretState(UnitLastCreated(), ge_PRESETTurretState_Inactive);
        libNCMI_gf_AttachUnitModelToUnit(UnitLastCreated(), gv_xanthos, "Ref_Hardpoint 02", 0.0, 0.0, 0.0, "");
        gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), 2.0, 0.25);
    }

    if ((UnitIsAlive(gv_xanthosTurretUnits[3]) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaXThosFighterLaunchBayUnit", 0, gv_pLAYER_04_XANTHOS, UnitGetPosition(gv_xanthos));
        gv_xanthosTurretUnits[3] = UnitLastCreated();
        gf_SetTurretState(UnitLastCreated(), ge_PRESETTurretState_Inactive);
        libNCMI_gf_AttachUnitModelToUnit(UnitLastCreated(), gv_xanthos, "Ref_Hardpoint 03", 0.0, 0.0, 0.0, "");
        gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), 0.0, -0.78);
    }

    if ((UnitIsAlive(gv_xanthosTurretUnits[4]) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaXanthosRocketBarrage", 0, gv_pLAYER_04_XANTHOS, UnitGetPosition(gv_xanthos));
        gv_xanthosTurretUnits[4] = UnitLastCreated();
        gf_SetTurretState(UnitLastCreated(), ge_PRESETTurretState_Inactive);
        libNCMI_gf_AttachUnitModelToUnit(UnitLastCreated(), gv_xanthos, "Ref_Hardpoint", 0.0, 0.0, 0.0, "");
        gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), 0.0, -2.13);
        gf_XanthosRocketBarrageController(UnitLastCreated());
    }

}

trigger auto_gf_AttachTurretToXanthos_Trigger = null;
unit auto_gf_AttachTurretToXanthos_lp_attachingUnit;
fixed auto_gf_AttachTurretToXanthos_lp_offsetAngle;
fixed auto_gf_AttachTurretToXanthos_lp_offsetDistance;

void gf_AttachTurretToXanthos (unit lp_attachingUnit, fixed lp_offsetAngle, fixed lp_offsetDistance) {
    auto_gf_AttachTurretToXanthos_lp_attachingUnit = lp_attachingUnit;
    auto_gf_AttachTurretToXanthos_lp_offsetAngle = lp_offsetAngle;
    auto_gf_AttachTurretToXanthos_lp_offsetDistance = lp_offsetDistance;

    if (auto_gf_AttachTurretToXanthos_Trigger == null) {
        auto_gf_AttachTurretToXanthos_Trigger = TriggerCreate("auto_gf_AttachTurretToXanthos_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttachTurretToXanthos_Trigger, false, false);
}

bool auto_gf_AttachTurretToXanthos_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attachingUnit = auto_gf_AttachTurretToXanthos_lp_attachingUnit;
    fixed lp_offsetAngle = auto_gf_AttachTurretToXanthos_lp_offsetAngle;
    fixed lp_offsetDistance = auto_gf_AttachTurretToXanthos_lp_offsetDistance;

    // Automatic Variable Declarations
    // Implementation
    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(gv_xanthos) == true)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            UnitIssueOrder(lp_attachingUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_xanthos), lp_offsetDistance, (UnitGetFacing(gv_xanthos) + lp_offsetAngle))), c_orderQueueReplace);
            UnitSetFacing(lp_attachingUnit, UnitGetFacing(gv_xanthos), 0.0);
            if ((AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(gv_xanthos, 0))) == "NovaXanthosJump")) {
                libNtve_gf_MakeUnitInvulnerable(lp_attachingUnit, true);
            }
            else {
                libNtve_gf_MakeUnitInvulnerable(lp_attachingUnit, false);
            }
        }

        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(gv_xanthos) == false)) {
        UnitKill(lp_attachingUnit);
    }

    return true;
}

trigger auto_gf_AttachTurretToXanthosLocalXYOffset_Trigger = null;
unit auto_gf_AttachTurretToXanthosLocalXYOffset_lp_attachingUnit;
fixed auto_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetX;
fixed auto_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetY;

void gf_AttachTurretToXanthosLocalXYOffset (unit lp_attachingUnit, fixed lp_localOffsetX, fixed lp_localOffsetY) {
    auto_gf_AttachTurretToXanthosLocalXYOffset_lp_attachingUnit = lp_attachingUnit;
    auto_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetX = lp_localOffsetX;
    auto_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetY = lp_localOffsetY;

    if (auto_gf_AttachTurretToXanthosLocalXYOffset_Trigger == null) {
        auto_gf_AttachTurretToXanthosLocalXYOffset_Trigger = TriggerCreate("auto_gf_AttachTurretToXanthosLocalXYOffset_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttachTurretToXanthosLocalXYOffset_Trigger, false, false);
}

bool auto_gf_AttachTurretToXanthosLocalXYOffset_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attachingUnit = auto_gf_AttachTurretToXanthosLocalXYOffset_lp_attachingUnit;
    fixed lp_localOffsetX = auto_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetX;
    fixed lp_localOffsetY = auto_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetY;

    // Variable Declarations
    point lv_mainBodyCenterPoint;
    fixed lv_mainBodyFacing;
    point lv_targetPoint;
    fixed lv_polarOffsetDegreeX;
    point lv_currentPoint;
    fixed lv_distance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(gv_xanthos) == true)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            lv_mainBodyCenterPoint = UnitGetPosition(gv_xanthos);
            lv_mainBodyFacing = UnitGetFacing(gv_xanthos);
            lv_polarOffsetDegreeX = (lv_mainBodyFacing - 90.0);
            lv_targetPoint = PointWithOffsetPolar(lv_mainBodyCenterPoint, lp_localOffsetY, lv_mainBodyFacing);
            lv_targetPoint = PointWithOffsetPolar(lv_targetPoint, lp_localOffsetX, lv_polarOffsetDegreeX);
            lv_currentPoint = UnitGetPosition(lp_attachingUnit);
            lv_distance = DistanceBetweenPoints(lv_targetPoint, lv_currentPoint);
            if ((lv_distance < 1)) {
                if ((lv_distance > 0.0)) {
                    UnitCreateEffectUnit(lp_attachingUnit, "RemoveMoveOrder", lp_attachingUnit);
                    UnitSetPosition(lp_attachingUnit, lv_targetPoint, false);
                }

            }
            else {
                UnitIssueOrder(lp_attachingUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
            }
            UnitSetFacing(lp_attachingUnit, UnitGetFacing(gv_xanthos), 0.0);
            if ((AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(gv_xanthos, 0))) == "NovaXanthosJump")) {
                libNtve_gf_MakeUnitInvulnerable(lp_attachingUnit, true);
            }
            else {
                libNtve_gf_MakeUnitInvulnerable(lp_attachingUnit, false);
            }
        }

        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(gv_xanthos) == false)) {
        UnitKill(lp_attachingUnit);
    }

    return true;
}

trigger auto_gf_SetLegLookAtToXanthos_Trigger = null;
unit auto_gf_SetLegLookAtToXanthos_lp_attachingUnit;

void gf_SetLegLookAtToXanthos (unit lp_attachingUnit) {
    auto_gf_SetLegLookAtToXanthos_lp_attachingUnit = lp_attachingUnit;

    if (auto_gf_SetLegLookAtToXanthos_Trigger == null) {
        auto_gf_SetLegLookAtToXanthos_Trigger = TriggerCreate("auto_gf_SetLegLookAtToXanthos_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetLegLookAtToXanthos_Trigger, false, false);
}

bool auto_gf_SetLegLookAtToXanthos_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attachingUnit = auto_gf_SetLegLookAtToXanthos_lp_attachingUnit;

    // Variable Declarations
    fixed lv_lastFacingMain;
    fixed lv_lastFacingLeg;
    fixed lv_currectFacingMain;
    const fixed lv_offset = 5.0;
    fixed lv_nextFacingLeg;
    const fixed lv_delta = 2.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lastFacingMain = UnitGetFacing(gv_xanthos);
    lv_lastFacingLeg = UnitGetFacing(gv_xanthos);

    // Implementation
    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(gv_xanthos) == true)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            lv_currectFacingMain = UnitGetFacing(gv_xanthos);
            if (((lv_currectFacingMain - lv_lastFacingLeg) > lv_delta)) {
                lv_nextFacingLeg = (lv_currectFacingMain + lv_delta);
            }
            else if (((lv_lastFacingLeg - lv_currectFacingMain) > lv_delta)) {
                lv_nextFacingLeg = (lv_currectFacingMain - lv_delta);
            }
            else if (true) {
                lv_nextFacingLeg = lv_currectFacingMain;
            }
            UnitSetPosition(lp_attachingUnit, PointWithOffsetPolar(UnitGetPosition(gv_xanthos), lv_offset, lv_nextFacingLeg), true);
            lv_lastFacingLeg = lv_nextFacingLeg;
        }

        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(gv_xanthos) == false)) {
        UnitKill(lp_attachingUnit);
    }

    return true;
}

trigger auto_gf_XanthosRocketBarrageController_Trigger = null;
unit auto_gf_XanthosRocketBarrageController_lp_rocketBarrageUnit;

void gf_XanthosRocketBarrageController (unit lp_rocketBarrageUnit) {
    auto_gf_XanthosRocketBarrageController_lp_rocketBarrageUnit = lp_rocketBarrageUnit;

    if (auto_gf_XanthosRocketBarrageController_Trigger == null) {
        auto_gf_XanthosRocketBarrageController_Trigger = TriggerCreate("auto_gf_XanthosRocketBarrageController_TriggerFunc");
    }

    TriggerExecute(auto_gf_XanthosRocketBarrageController_Trigger, false, false);
}

bool auto_gf_XanthosRocketBarrageController_TriggerFunc (bool testConds, bool runActions) {
    unit lp_rocketBarrageUnit = auto_gf_XanthosRocketBarrageController_lp_rocketBarrageUnit;

    // Variable Declarations
    unitgroup lv_nearbyValidUnits;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyValidUnits = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_rocketBarrageUnit) == true)) {
        if ((UnitHasBehavior2(lp_rocketBarrageUnit, "NovaXThosCovered") == false)) {
            lv_nearbyValidUnits = UnitGroupEmpty();
            UnitGroupAddUnitGroup(lv_nearbyValidUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_rocketBarrageUnit), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_nearbyValidUnits, UnitGroup(null, gv_pLAYER_07_DOMINION, RegionCircle(UnitGetPosition(lp_rocketBarrageUnit), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            if ((UnitGroupCount(lv_nearbyValidUnits, c_unitCountAlive) > 0)) {
                lv_targetPoint = AIBestTargetPoint(lv_nearbyValidUnits, 0, 200, 0.0, 5.0, UnitGetPosition(lp_rocketBarrageUnit), 14.0, 0);
                UnitIssueOrder(lp_rocketBarrageUnit, OrderTargetingPoint(AbilityCommand("NovaXanthosRocketBarrage", 0), lv_targetPoint), c_orderQueueReplace);
            }

        }

        Wait(2.0, c_timeAI);
    }
    return true;
}

void gf_CreateHyperionMinimapIcon () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "HyperionKorhal", UnitGetPosition(gv_xanthos), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    gv_hyperionMinimapIcon = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_hyperion);
    PingSetScale(PingLastCreated(), 0.05);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/476805E8"));
    TriggerExecute(gt_HyperionMinimapIcon, true, false);
}

trigger auto_gf_HyperionMinimapPathDisplay_Trigger = null;
unit auto_gf_HyperionMinimapPathDisplay_lp_pathDisplayUnit;
string auto_gf_HyperionMinimapPathDisplay_lp_pathDisplayID;
int auto_gf_HyperionMinimapPathDisplay_lp_startingIndex;

void gf_HyperionMinimapPathDisplay (unit lp_pathDisplayUnit, string lp_pathDisplayID, int lp_startingIndex) {
    auto_gf_HyperionMinimapPathDisplay_lp_pathDisplayUnit = lp_pathDisplayUnit;
    auto_gf_HyperionMinimapPathDisplay_lp_pathDisplayID = lp_pathDisplayID;
    auto_gf_HyperionMinimapPathDisplay_lp_startingIndex = lp_startingIndex;

    if (auto_gf_HyperionMinimapPathDisplay_Trigger == null) {
        auto_gf_HyperionMinimapPathDisplay_Trigger = TriggerCreate("auto_gf_HyperionMinimapPathDisplay_TriggerFunc");
    }

    TriggerExecute(auto_gf_HyperionMinimapPathDisplay_Trigger, false, false);
}

bool auto_gf_HyperionMinimapPathDisplay_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pathDisplayUnit = auto_gf_HyperionMinimapPathDisplay_lp_pathDisplayUnit;
    string lp_pathDisplayID = auto_gf_HyperionMinimapPathDisplay_lp_pathDisplayID;
    int lp_startingIndex = auto_gf_HyperionMinimapPathDisplay_lp_startingIndex;

    // Variable Declarations
    int lv_i;
    int lv_waypointCount;

    // Automatic Variable Declarations
    int auto83F9FE22_ae;
    int auto83F9FE22_var;
    int autoD85986E0_ae;
    int autoD85986E0_var;

    // Variable Initialization

    // Implementation
    while ((PointFromName((lp_pathDisplayID + "-" + IntToString((lp_startingIndex + lv_waypointCount + 1)))) != null)) {
        lv_waypointCount += 1;
    }
    PathDestroy(gv_hyperionMinimapPathDisplay);
    PathCreateForUnit(PlayerGroupAll(), lp_pathDisplayUnit);
    gv_hyperionMinimapPathDisplay = PathLastCreated();
    PathSetVisible(PathLastCreated(), c_pathLocationMinimap, true);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetDestinationPoint(PathLastCreated(), PointFromName((lp_pathDisplayID + "-" + IntToString((lp_startingIndex + lv_waypointCount)))));
    PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(12.55, 12.55, 100.00));
    if ((lv_waypointCount > 1)) {
        auto83F9FE22_ae = (lp_startingIndex + (lv_waypointCount - 1));
        auto83F9FE22_var = (lp_startingIndex + 1);
        for ( ; auto83F9FE22_var <= auto83F9FE22_ae; auto83F9FE22_var += 1 ) {
            PathAddWayPoint(PathLastCreated(), PointFromName((lp_pathDisplayID + "-" + IntToString(auto83F9FE22_var))));
        }
        lv_i = lp_startingIndex;
        while ((PointFromName((lp_pathDisplayID + "-" + IntToString((lv_i + 1)))) != null) && (libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (libNtve_gf_UnitIsHidden(gv_hyperion) == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_pathDisplayUnit), PointFromName((lp_pathDisplayID + "-" + IntToString((lv_i + 1))))) < DistanceBetweenPoints(PointFromName((lp_pathDisplayID + "-" + IntToString(lv_i))), PointFromName((lp_pathDisplayID + "-" + IntToString((lv_i + 1))))))) {
                lv_i += 1;
                PathClearWayPoints(gv_hyperionMinimapPathDisplay);
                autoD85986E0_ae = (lp_startingIndex + (lv_waypointCount - 1));
                autoD85986E0_var = lv_i;
                for ( ; autoD85986E0_var <= autoD85986E0_ae; autoD85986E0_var += 1 ) {
                    PathAddWayPoint(gv_hyperionMinimapPathDisplay, PointFromName((lp_pathDisplayID + "-" + IntToString(autoD85986E0_var))));
                }
            }

            Wait(0.25, c_timeGame);
        }
    }

    PathDestroy(gv_hyperionMinimapPathDisplay);
    return true;
}

trigger auto_gf_AttackWavePing_Trigger = null;
unitgroup auto_gf_AttackWavePing_lp_waveUnitGroup;

void gf_AttackWavePing (unitgroup lp_waveUnitGroup) {
    auto_gf_AttackWavePing_lp_waveUnitGroup = lp_waveUnitGroup;

    if (auto_gf_AttackWavePing_Trigger == null) {
        auto_gf_AttackWavePing_Trigger = TriggerCreate("auto_gf_AttackWavePing_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackWavePing_Trigger, false, false);
}

bool auto_gf_AttackWavePing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_waveUnitGroup = auto_gf_AttackWavePing_lp_waveUnitGroup;

    // Variable Declarations
    int lv_ping;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoCA04CA7E_g;
    int autoCA04CA7E_u;
    unit autoCA04CA7E_var;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGroupCenterOfGroup(lp_waveUnitGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitGroupRemoveUnitGroup(lp_waveUnitGroup, UnitGroupFilter("Medic", c_playerAny, lp_waveUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    lv_ping = PingLastCreated();
    PingSetScale(lv_ping, 0.7);
    while ((libNtve_gf_UnitGroupIsDead(lp_waveUnitGroup) == false)) {
        PingSetPosition(lv_ping, UnitGroupCenterOfGroup(lp_waveUnitGroup));
        Wait(0.0625, c_timeAI);
        autoCA04CA7E_g = lp_waveUnitGroup;
        autoCA04CA7E_u = UnitGroupCount(autoCA04CA7E_g, c_unitCountAll);
        for (;; autoCA04CA7E_u -= 1) {
            autoCA04CA7E_var = UnitGroupUnitFromEnd(autoCA04CA7E_g, autoCA04CA7E_u);
            if (autoCA04CA7E_var == null) { break; }
            if (((UnitHasBehavior2(autoCA04CA7E_var, "NovaDomination") == true) || (UnitIsAlive(autoCA04CA7E_var) == false))) {
                UnitGroupRemove(lp_waveUnitGroup, autoCA04CA7E_var);
            }

        }
    }
    PingDestroy(lv_ping);
    return true;
}

trigger auto_gf_SendDefenderWave_Trigger = null;
int auto_gf_SendDefenderWave_lp_escalation;
int auto_gf_SendDefenderWave_lp_lane;

void gf_SendDefenderWave (int lp_escalation, int lp_lane) {
    auto_gf_SendDefenderWave_lp_escalation = lp_escalation;
    auto_gf_SendDefenderWave_lp_lane = lp_lane;

    if (auto_gf_SendDefenderWave_Trigger == null) {
        auto_gf_SendDefenderWave_Trigger = TriggerCreate("auto_gf_SendDefenderWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendDefenderWave_Trigger, false, false);
}

bool auto_gf_SendDefenderWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_escalation = auto_gf_SendDefenderWave_lp_escalation;
    int lp_lane = auto_gf_SendDefenderWave_lp_lane;

    // Automatic Variable Declarations
    int auto5D95E7F0_val;
    int auto9AD177C6_val;
    int auto5E304511_val;
    int auto6A3F6554_val;
    int autoE8466CC3_val;

    // Implementation
    auto5D95E7F0_val = lp_lane;
    if (auto5D95E7F0_val == 1) {
        auto9AD177C6_val = lp_escalation;
        if (auto9AD177C6_val == 1) {
            cai_wave_enable(1, gv_pLAYER_03_DEFENDERSEAST, true);
            cai_wave_run(1, gv_pLAYER_03_DEFENDERSEAST, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (auto9AD177C6_val == 2) {
            cai_wave_enable(2, gv_pLAYER_03_DEFENDERSEAST, true);
            cai_wave_run(2, gv_pLAYER_03_DEFENDERSEAST, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (auto9AD177C6_val == 3) {
            cai_wave_enable(3, gv_pLAYER_03_DEFENDERSEAST, true);
            cai_wave_run(3, gv_pLAYER_03_DEFENDERSEAST, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (auto9AD177C6_val == 4) {
            cai_wave_enable(4, gv_pLAYER_03_DEFENDERSEAST, true);
            cai_wave_run(4, gv_pLAYER_03_DEFENDERSEAST, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else {
        }
    }
    else if (auto5D95E7F0_val == 2) {
        auto5E304511_val = lp_escalation;
        if (auto5E304511_val == 1) {
            cai_wave_enable(3, gv_pLAYER_02_DEFENDERSWEST, true);
            cai_wave_run(3, gv_pLAYER_02_DEFENDERSWEST, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (auto5E304511_val == 2) {
            cai_wave_enable(1, gv_pLAYER_02_DEFENDERSWEST, true);
            cai_wave_run(1, gv_pLAYER_02_DEFENDERSWEST, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (auto5E304511_val == 3) {
            cai_wave_enable(2, gv_pLAYER_02_DEFENDERSWEST, true);
            cai_wave_run(2, gv_pLAYER_02_DEFENDERSWEST, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (auto5E304511_val == 4) {
            cai_wave_enable(4, gv_pLAYER_02_DEFENDERSWEST, true);
            cai_wave_run(4, gv_pLAYER_02_DEFENDERSWEST, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else {
        }
    }
    else if (auto5D95E7F0_val == 3) {
        auto6A3F6554_val = lp_escalation;
        if (auto6A3F6554_val == 1) {
            cai_wave_enable(2, gv_pLAYER_06_DEFENDERSNORTH, true);
            cai_wave_run(2, gv_pLAYER_06_DEFENDERSNORTH, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (auto6A3F6554_val == 2) {
            cai_wave_enable(6, gv_pLAYER_06_DEFENDERSNORTH, true);
            cai_wave_run(6, gv_pLAYER_06_DEFENDERSNORTH, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (auto6A3F6554_val == 3) {
            cai_wave_enable(7, gv_pLAYER_06_DEFENDERSNORTH, true);
            cai_wave_run(7, gv_pLAYER_06_DEFENDERSNORTH, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (auto6A3F6554_val == 4) {
            cai_wave_enable(8, gv_pLAYER_06_DEFENDERSNORTH, true);
            cai_wave_run(8, gv_pLAYER_06_DEFENDERSNORTH, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else {
        }
    }
    else if (auto5D95E7F0_val == 4) {
        autoE8466CC3_val = lp_escalation;
        if (autoE8466CC3_val == 1) {
            cai_wave_enable(1, gv_pLAYER_06_DEFENDERSNORTH, true);
            cai_wave_run(1, gv_pLAYER_06_DEFENDERSNORTH, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (autoE8466CC3_val == 2) {
            cai_wave_enable(3, gv_pLAYER_06_DEFENDERSNORTH, true);
            cai_wave_run(3, gv_pLAYER_06_DEFENDERSNORTH, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (autoE8466CC3_val == 3) {
            cai_wave_enable(4, gv_pLAYER_06_DEFENDERSNORTH, true);
            cai_wave_run(4, gv_pLAYER_06_DEFENDERSNORTH, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else if (autoE8466CC3_val == 4) {
            cai_wave_enable(5, gv_pLAYER_06_DEFENDERSNORTH, true);
            cai_wave_run(5, gv_pLAYER_06_DEFENDERSNORTH, PlayerGroupSingle(gv_pLAYER_01_USER), false);
        }
        else {
        }
    }
    else {
    }
    return true;
}

trigger auto_gf_AIGhost_Trigger = null;
int auto_gf_AIGhost_lp_owner;
unit auto_gf_AIGhost_lp_ghost;
unitgroup auto_gf_AIGhost_lp_nearbyUnits;

void gf_AIGhost (int lp_owner, unit lp_ghost, unitgroup lp_nearbyUnits) {
    auto_gf_AIGhost_lp_owner = lp_owner;
    auto_gf_AIGhost_lp_ghost = lp_ghost;
    auto_gf_AIGhost_lp_nearbyUnits = lp_nearbyUnits;

    if (auto_gf_AIGhost_Trigger == null) {
        auto_gf_AIGhost_Trigger = TriggerCreate("auto_gf_AIGhost_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIGhost_Trigger, false, false);
}

bool auto_gf_AIGhost_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_AIGhost_lp_owner;
    unit lp_ghost = auto_gf_AIGhost_lp_ghost;
    unitgroup lp_nearbyUnits = auto_gf_AIGhost_lp_nearbyUnits;

    // Variable Declarations
    unitgroup lv_nearbyValidUnits;
    unit lv_bestUnit;
    fixed lv_bestScore;
    unit lv_u;
    fixed lv_score;

    // Automatic Variable Declarations
    unitgroup autoF2815E76_g;
    int autoF2815E76_u;
    unit autoF2815E76_var;
    unitgroup autoABC0EFE4_g;
    int autoABC0EFE4_u;

    // Variable Initialization
    lv_nearbyValidUnits = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_nearbyValidUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_ghost), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((TechTreeUpgradeCount(lp_owner, "PersonalCloaking", c_techCountQueuedOrBetter) > 0) && (UnitGroupCount(lv_nearbyValidUnits, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lp_ghost, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitHasBehavior2(lp_ghost, "GhostCloak") == false)) {
        libNtve_gf_AICast(lp_ghost, Order(AbilityCommand("GhostCloak", 0)));
    }
    else if ((UnitGroupCount(lv_nearbyValidUnits, c_unitCountAlive) >= 4) && (UnitGroupCount(UnitGroup("Nuke", UnitGetOwner(lp_ghost), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) > 0)) {
        if ((TriggerIsEnabled(gt_FirstGhostTransmissionQ) == true)) {
            TriggerExecute(gt_FirstGhostTransmissionQ, false, false);
        }

        autoF2815E76_g = lv_nearbyValidUnits;
        autoF2815E76_u = UnitGroupCount(autoF2815E76_g, c_unitCountAll);
        for (;; autoF2815E76_u -= 1) {
            autoF2815E76_var = UnitGroupUnitFromEnd(autoF2815E76_g, autoF2815E76_u);
            if (autoF2815E76_var == null) { break; }
            lv_score = 0.0;
            autoABC0EFE4_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(autoF2815E76_var), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoABC0EFE4_u = UnitGroupCount(autoABC0EFE4_g, c_unitCountAll);
            for (;; autoABC0EFE4_u -= 1) {
                lv_u = UnitGroupUnitFromEnd(autoABC0EFE4_g, autoABC0EFE4_u);
                if (lv_u == null) { break; }
                if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_ghost), UnitGetOwner(lv_u), libNtve_ge_PlayerRelation_Ally) == true)) {
                    lv_score -= UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent);
                }
                else if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_ghost), UnitGetOwner(lv_u), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    lv_score += UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent);
                }
            }
            if ((lv_score > lv_bestScore)) {
                lv_bestScore = lv_score;
                lv_bestUnit = autoF2815E76_var;
            }

        }
        if ((lv_bestScore > 750.0)) {
            TriggerQueueEnter();
            if ((UnitIsAlive(lp_ghost) == true)) {
                libNtve_gf_AICast(lp_ghost, OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), UnitGetPosition(lv_bestUnit)));
            }

            TriggerQueueExit();
        }

    }
    return true;
}

trigger auto_gf_AIGhostAcademy_Trigger = null;
int auto_gf_AIGhostAcademy_lp_owner;
unit auto_gf_AIGhostAcademy_lp_ghostAcademy;
unitgroup auto_gf_AIGhostAcademy_lp_nearbyUnits;

void gf_AIGhostAcademy (int lp_owner, unit lp_ghostAcademy, unitgroup lp_nearbyUnits) {
    auto_gf_AIGhostAcademy_lp_owner = lp_owner;
    auto_gf_AIGhostAcademy_lp_ghostAcademy = lp_ghostAcademy;
    auto_gf_AIGhostAcademy_lp_nearbyUnits = lp_nearbyUnits;

    if (auto_gf_AIGhostAcademy_Trigger == null) {
        auto_gf_AIGhostAcademy_Trigger = TriggerCreate("auto_gf_AIGhostAcademy_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIGhostAcademy_Trigger, false, false);
}

bool auto_gf_AIGhostAcademy_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_AIGhostAcademy_lp_owner;
    unit lp_ghostAcademy = auto_gf_AIGhostAcademy_lp_ghostAcademy;
    unitgroup lp_nearbyUnits = auto_gf_AIGhostAcademy_lp_nearbyUnits;

    // Variable Declarations
    unitgroup lv_nearbyValidUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyValidUnits = UnitGroupEmpty();

    // Implementation
    if ((UnitOrderIsValid(lp_ghostAcademy, Order(AbilityCommand("ArmSiloWithNuke", 0))) == true)) {
        libNtve_gf_AICast(lp_ghostAcademy, Order(AbilityCommand("ArmSiloWithNuke", 0)));
    }

    return true;
}

trigger auto_gf_AIXanthosFinalForm_Trigger = null;
int auto_gf_AIXanthosFinalForm_lp_owner;
unit auto_gf_AIXanthosFinalForm_lp_xanthos;
unitgroup auto_gf_AIXanthosFinalForm_lp_nearbyUnits;

void gf_AIXanthosFinalForm (int lp_owner, unit lp_xanthos, unitgroup lp_nearbyUnits) {
    auto_gf_AIXanthosFinalForm_lp_owner = lp_owner;
    auto_gf_AIXanthosFinalForm_lp_xanthos = lp_xanthos;
    auto_gf_AIXanthosFinalForm_lp_nearbyUnits = lp_nearbyUnits;

    if (auto_gf_AIXanthosFinalForm_Trigger == null) {
        auto_gf_AIXanthosFinalForm_Trigger = TriggerCreate("auto_gf_AIXanthosFinalForm_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIXanthosFinalForm_Trigger, false, false);
}

bool auto_gf_AIXanthosFinalForm_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_AIXanthosFinalForm_lp_owner;
    unit lp_xanthos = auto_gf_AIXanthosFinalForm_lp_xanthos;
    unitgroup lp_nearbyUnits = auto_gf_AIXanthosFinalForm_lp_nearbyUnits;

    // Variable Declarations
    unitgroup lv_nearbyValidUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyValidUnits = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_nearbyValidUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_xanthos), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_nearbyValidUnits, UnitGroup(null, gv_pLAYER_07_DOMINION, RegionCircle(UnitGetPosition(lp_xanthos), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((UnitHasBehavior2(gv_xanthos, "NovaXanthosRepairMode") == true)) {
        libNtve_gf_AICast(lp_xanthos, Order(AbilityCommand("NovaXanthosToggleRepairMode", 1)));
    }
    else {
        if ((UnitGroupCount(lv_nearbyValidUnits, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_xanthos, OrderTargetingPoint(AbilityCommand("NovaXanthosDeathLaser", 0), AIBestTargetPoint(lv_nearbyValidUnits, 0, 250, 0.0, 2.5, UnitGetPosition(lp_xanthos), 10.0, 0)));
        }

    }
    return true;
}

trigger auto_gf_AIHyperion_Trigger = null;
int auto_gf_AIHyperion_lp_owner;
unit auto_gf_AIHyperion_lp_hyperion;
unitgroup auto_gf_AIHyperion_lp_nearbyUnits;

void gf_AIHyperion (int lp_owner, unit lp_hyperion, unitgroup lp_nearbyUnits) {
    auto_gf_AIHyperion_lp_owner = lp_owner;
    auto_gf_AIHyperion_lp_hyperion = lp_hyperion;
    auto_gf_AIHyperion_lp_nearbyUnits = lp_nearbyUnits;

    if (auto_gf_AIHyperion_Trigger == null) {
        auto_gf_AIHyperion_Trigger = TriggerCreate("auto_gf_AIHyperion_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIHyperion_Trigger, false, false);
}

bool auto_gf_AIHyperion_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_AIHyperion_lp_owner;
    unit lp_hyperion = auto_gf_AIHyperion_lp_hyperion;
    unitgroup lp_nearbyUnits = auto_gf_AIHyperion_lp_nearbyUnits;

    // Variable Declarations
    unitgroup lv_nearbyHighPriorityTargets;
    unitgroup lv_nearbyStructures;
    unitgroup lv_nearbyUnits;

    // Automatic Variable Declarations
    unitgroup autoD54B6219_g;
    int autoD54B6219_u;
    unit autoD54B6219_var;

    // Variable Initialization
    lv_nearbyHighPriorityTargets = UnitGroupEmpty();
    lv_nearbyStructures = UnitGroupEmpty();
    lv_nearbyUnits = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_nearbyUnits, UnitGroup(null, gv_pLAYER_02_DEFENDERSWEST, RegionCircle(UnitGetPosition(lp_hyperion), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_nearbyUnits, UnitGroup(null, gv_pLAYER_03_DEFENDERSEAST, RegionCircle(UnitGetPosition(lp_hyperion), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_nearbyUnits, UnitGroup(null, gv_pLAYER_06_DEFENDERSNORTH, RegionCircle(UnitGetPosition(lp_hyperion), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoD54B6219_g = lv_nearbyUnits;
    autoD54B6219_u = UnitGroupCount(autoD54B6219_g, c_unitCountAll);
    for (;; autoD54B6219_u -= 1) {
        autoD54B6219_var = UnitGroupUnitFromEnd(autoD54B6219_g, autoD54B6219_u);
        if (autoD54B6219_var == null) { break; }
        if (((UnitGetType(autoD54B6219_var) == "Battlecruiser") || (UnitGetType(autoD54B6219_var) == "SiegeTankSieged") || (UnitGetType(autoD54B6219_var) == "VikingFighter") || (UnitGetType(autoD54B6219_var) == "Goliath") || (UnitGetType(autoD54B6219_var) == "MissileTurret") || (UnitGetType(autoD54B6219_var) == "Bunker")) && (UnitGetPropertyFixed(autoD54B6219_var, c_unitPropLifePercent, c_unitPropCurrent) >= 75.0)) {
            UnitGroupAdd(lv_nearbyHighPriorityTargets, autoD54B6219_var);
        }
        else if ((UnitTypeTestAttribute(UnitGetType(autoD54B6219_var), c_unitAttributeStructure) == true) && (UnitGetPropertyFixed(autoD54B6219_var, c_unitPropLifePercent, c_unitPropCurrent) >= 75.0)) {
            UnitGroupAdd(lv_nearbyStructures, autoD54B6219_var);
        }
    }
    if ((UnitGroupCount(lv_nearbyHighPriorityTargets, c_unitCountAlive) >= 1)) {
        libNtve_gf_AICast(lp_hyperion, OrderTargetingUnit(AbilityCommand("NovaHyperionYamato", 0), UnitGroupRandomUnit(lv_nearbyHighPriorityTargets, c_unitCountAlive)));
    }
    else if ((UnitGroupCount(lv_nearbyStructures, c_unitCountAlive) >= 1)) {
        libNtve_gf_AICast(lp_hyperion, OrderTargetingUnit(AbilityCommand("NovaHyperionYamato", 0), UnitGroupRandomUnit(lv_nearbyStructures, c_unitCountAlive)));
    }
    return true;
}

trigger auto_gf_AIBattlecruiser_Trigger = null;
int auto_gf_AIBattlecruiser_lp_owner;
unit auto_gf_AIBattlecruiser_lp_battlecruiser;
unitgroup auto_gf_AIBattlecruiser_lp_nearbyUnits;

void gf_AIBattlecruiser (int lp_owner, unit lp_battlecruiser, unitgroup lp_nearbyUnits) {
    auto_gf_AIBattlecruiser_lp_owner = lp_owner;
    auto_gf_AIBattlecruiser_lp_battlecruiser = lp_battlecruiser;
    auto_gf_AIBattlecruiser_lp_nearbyUnits = lp_nearbyUnits;

    if (auto_gf_AIBattlecruiser_Trigger == null) {
        auto_gf_AIBattlecruiser_Trigger = TriggerCreate("auto_gf_AIBattlecruiser_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIBattlecruiser_Trigger, false, false);
}

bool auto_gf_AIBattlecruiser_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_AIBattlecruiser_lp_owner;
    unit lp_battlecruiser = auto_gf_AIBattlecruiser_lp_battlecruiser;
    unitgroup lp_nearbyUnits = auto_gf_AIBattlecruiser_lp_nearbyUnits;

    // Variable Declarations
    unitgroup lv_nearbyUnits;
    unitgroup lv_nearbyHighPriorityTargets;
    unitgroup lv_nearbyStructures;

    // Automatic Variable Declarations
    unitgroup autoC8F1DEF6_g;
    int autoC8F1DEF6_u;
    unit autoC8F1DEF6_var;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_nearbyHighPriorityTargets = UnitGroupEmpty();
    lv_nearbyStructures = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_nearbyUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_battlecruiser), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_nearbyUnits, UnitGroup(null, gv_pLAYER_07_DOMINION, RegionCircle(UnitGetPosition(lp_battlecruiser), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoC8F1DEF6_g = lv_nearbyUnits;
    autoC8F1DEF6_u = UnitGroupCount(autoC8F1DEF6_g, c_unitCountAll);
    for (;; autoC8F1DEF6_u -= 1) {
        autoC8F1DEF6_var = UnitGroupUnitFromEnd(autoC8F1DEF6_g, autoC8F1DEF6_u);
        if (autoC8F1DEF6_var == null) { break; }
        if (((UnitGetType(autoC8F1DEF6_var) == "Battlecruiser") || (UnitGetType(autoC8F1DEF6_var) == "SiegeTankSieged") || (UnitGetType(autoC8F1DEF6_var) == "VikingFighter") || (UnitGetType(autoC8F1DEF6_var) == "Goliath") || (UnitGetType(autoC8F1DEF6_var) == "MissileTurret") || (UnitGetType(autoC8F1DEF6_var) == "Bunker")) && (UnitGetPropertyFixed(autoC8F1DEF6_var, c_unitPropLifePercent, c_unitPropCurrent) >= 50.0)) {
            UnitGroupAdd(lv_nearbyHighPriorityTargets, autoC8F1DEF6_var);
        }
        else if ((UnitTypeTestAttribute(UnitGetType(autoC8F1DEF6_var), c_unitAttributeStructure) == true) && (UnitGetPropertyFixed(autoC8F1DEF6_var, c_unitPropLifePercent, c_unitPropCurrent) >= 75.0)) {
            UnitGroupAdd(lv_nearbyStructures, autoC8F1DEF6_var);
        }
    }
    if ((UnitGroupCount(lv_nearbyHighPriorityTargets, c_unitCountAlive) >= 1)) {
        libNtve_gf_AICast(lp_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupRandomUnit(lv_nearbyHighPriorityTargets, c_unitCountAlive)));
    }
    else if ((UnitGroupCount(lv_nearbyStructures, c_unitCountAlive) >= 1)) {
        libNtve_gf_AICast(lp_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupRandomUnit(lv_nearbyStructures, c_unitCountAlive)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_InitializeNovaMission("Nova09");
    TriggerExecute(gt_Init01Technology, true, false);
    libNovC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_BriefingQ, true, true);
        ConsoleCommand("exit", true, true);
    }

    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNovC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeAbilityAllow(gv_pLAYER_03_DEFENDERSEAST, AbilityCommand("ArmSiloWithNuke", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_03_DEFENDERSEAST, AbilityCommand("HeroArmNuke", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_02_DEFENDERSWEST, AbilityCommand("ArmSiloWithNuke", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_02_DEFENDERSWEST, AbilityCommand("HeroArmNuke", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_06_DEFENDERSNORTH, AbilityCommand("ArmSiloWithNuke", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_06_DEFENDERSNORTH, AbilityCommand("HeroArmNuke", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoF04F56FE_g;
    int autoF04F56FE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_defendersPlayerGroup, gv_pLAYER_02_DEFENDERSWEST);
    PlayerGroupAdd(gv_defendersPlayerGroup, gv_pLAYER_03_DEFENDERSEAST);
    PlayerGroupAdd(gv_defendersPlayerGroup, gv_pLAYER_06_DEFENDERSNORTH);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackUnitAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupSingle(gv_pLAYER_01_USER), "AttackTownAlly_Terr", false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DEFENDERSWEST, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_DEFENDERSEAST, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_XANTHOS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_GORGONS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_DEFENDERSNORTH, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_04_XANTHOS, gv_pLAYER_05_GORGONS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_04_XANTHOS, gv_pLAYER_07_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_05_GORGONS, gv_pLAYER_07_DOMINION, libNtve_ge_AllianceSetting_Ally);
    autoF04F56FE_g = gv_defendersPlayerGroup;
    autoF04F56FE_var = -1;
    while (true) {
        autoF04F56FE_var = PlayerGroupNextPlayer(autoF04F56FE_g, autoF04F56FE_var);
        if (autoF04F56FE_var < 0) { break; }
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_02_DEFENDERSWEST, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_03_DEFENDERSEAST, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_04_XANTHOS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_05_GORGONS, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_07_DOMINION, libNtve_ge_AllianceSetting_Enemy);
        PlayerModifyPropertyInt(autoF04F56FE_var, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(autoF04F56FE_var, c_playerPropVespene, c_playerPropOperSetTo, 10000);
        PlayerSetState(autoF04F56FE_var, c_playerStateFoodIgnored, true);
        PlayerModifyPropertyInt(autoF04F56FE_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 1000);
        PlayerModifyPropertyInt(autoF04F56FE_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
    }
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_07_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_07_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    libNCMI_gf_NM_DetectionUpgradesApply();
    PlayerSetColorIndex(gv_pLAYER_02_DEFENDERSWEST, 1, true);
    PlayerSetColorIndex(gv_pLAYER_03_DEFENDERSEAST, 1, true);
    PlayerSetColorIndex(gv_pLAYER_04_XANTHOS, 1, true);
    PlayerSetColorIndex(gv_pLAYER_05_GORGONS, 2, true);
    PlayerSetColorIndex(gv_pLAYER_06_DEFENDERSNORTH, 1, true);
    PlayerSetColorIndex(gv_pLAYER_07_DOMINION, 2, true);
    PlayerSetState(gv_pLAYER_06_DEFENDERSNORTH, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_02_DEFENDERSWEST, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_03_DEFENDERSEAST, c_playerStateFidgetingEnabled, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto50032268_g;
    int auto50032268_u;
    unit auto50032268_var;
    unitgroup auto2D79FB7E_g;
    int auto2D79FB7E_u;
    unit auto2D79FB7E_var;
    unitgroup autoF9671EC1_g;
    int autoF9671EC1_u;
    unit autoF9671EC1_var;
    unitgroup auto46227018_g;
    int auto46227018_u;
    unit auto46227018_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_s2_Davis = UnitFromId(530);
    UnitBehaviorAdd(gv_s2_Davis, "Benign", gv_s2_Davis, 1);
    UnitWeaponRemove(gv_s2_Davis, "OfficersPistol");
    UnitSetPropertyFixed(UnitFromId(605109900), c_unitPropLife, 30.0);
    UnitSetPropertyFixed(UnitFromId(641606793), c_unitPropLife, 17.0);
    UnitSetPropertyFixed(UnitFromId(405092255), c_unitPropLife, 10.0);
    UnitSetPropertyFixed(UnitFromId(1310821756), c_unitPropLife, 29.0);
    gv_hyperion = UnitFromId(532671117);
    UnitIssueOrder(gv_hyperion, Order(AbilityCommand("NovaHyperionJump", 0)), c_orderQueueReplace);
    libNtve_gf_ShowHideUnit(gv_hyperion, false);
    UnitSetState(gv_hyperion, c_unitStateTargetable, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryOther, true);
    gv_nova = UnitFromId(588);
    libNCUI_gf_SetHeroPanelUnit(1, gv_nova);
    libNCMI_gf_SetNovaHeroUnit(gv_nova);
    libNCMI_gf_EnableDisableHeroReviveSystem(true, gv_pLAYER_01_USER);
    libNCMI_gf_SetAllWorkerRallyPointsForPlayer(gv_pLAYER_01_USER);
    TriggerExecute(gt_XanthosInit, true, false);
    gv_dominionGorgons[1] = UnitFromId(453805648);
    gv_dominionGorgons[2] = UnitFromId(203501953);
    gv_dominionGorgons[3] = UnitFromId(645177614);
    gv_dominionGorgons[4] = UnitFromId(2050031511);
    gv_dominionGorgons[5] = UnitFromId(1248730856);
    UnitSetCustomValue(gv_dominionGorgons[1], 0, 0.0);
    UnitSetCustomValue(gv_dominionGorgons[2], 0, 0.0);
    UnitSetCustomValue(gv_dominionGorgons[3], 0, 0.0);
    UnitSetCustomValue(gv_dominionGorgons[4], 0, 0.0);
    UnitSetCustomValue(gv_dominionGorgons[5], 0, 0.0);
    auto50032268_g = UnitGroup("Bunker", gv_pLAYER_02_DEFENDERSWEST, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto50032268_u = UnitGroupCount(auto50032268_g, c_unitCountAll);
    for (;; auto50032268_u -= 1) {
        auto50032268_var = UnitGroupUnitFromEnd(auto50032268_g, auto50032268_u);
        if (auto50032268_var == null) { break; }
        UnitCargoCreate(auto50032268_var, "Separatist", 4);
    }
    auto2D79FB7E_g = UnitGroup("Bunker", gv_pLAYER_03_DEFENDERSEAST, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2D79FB7E_u = UnitGroupCount(auto2D79FB7E_g, c_unitCountAll);
    for (;; auto2D79FB7E_u -= 1) {
        auto2D79FB7E_var = UnitGroupUnitFromEnd(auto2D79FB7E_g, auto2D79FB7E_u);
        if (auto2D79FB7E_var == null) { break; }
        UnitCargoCreate(auto2D79FB7E_var, "Separatist", 4);
    }
    autoF9671EC1_g = UnitGroup("Bunker", gv_pLAYER_06_DEFENDERSNORTH, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF9671EC1_u = UnitGroupCount(autoF9671EC1_g, c_unitCountAll);
    for (;; autoF9671EC1_u -= 1) {
        autoF9671EC1_var = UnitGroupUnitFromEnd(autoF9671EC1_g, autoF9671EC1_u);
        if (autoF9671EC1_var == null) { break; }
        UnitCargoCreate(autoF9671EC1_var, "Separatist", 4);
    }
    auto46227018_g = UnitGroup("Bunker", gv_pLAYER_07_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto46227018_u = UnitGroupCount(auto46227018_g, c_unitCountAll);
    for (;; auto46227018_u -= 1) {
        auto46227018_var = UnitGroupUnitFromEnd(auto46227018_g, auto46227018_u);
        if (auto46227018_var == null) { break; }
        UnitCargoCreate(auto46227018_var, "Marine", 4);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "nDLC_Music_Nova09_Main";
    gv_mapMusicTrack2 = "nDLC_Music_Nova09_Intro";
    gv_mapMusicTrack5 = "nDLC_Music_Nova09_Mid";
    gv_mapMusicTrack4 = "nDLC_Music_Nova09_Outro";
    gv_mapMusicTrack3 = "nDLC_Music_Nova09_BossFight";
    gv_mapMusicTrack6 = "nDLC_Music_Nova09_Main_Intense";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "Smoke_Battle");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "Korhal_SiegeTank_Destroyed");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "SmokePillarsTall");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "SmokePillar_Tall_Generic");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "GenericFire_Medium_Area");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "FireMedium");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto60B674C5_g;
    int auto60B674C5_var;
    const int autoFD766A59_ae = 7;
    const int autoFD766A59_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto60B674C5_g = gv_defendersPlayerGroup;
    auto60B674C5_var = -1;
    while (true) {
        auto60B674C5_var = PlayerGroupNextPlayer(auto60B674C5_g, auto60B674C5_var);
        if (auto60B674C5_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto60B674C5_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "TerranVehicleAndShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "TerranVehicleAndShipArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "ShieldWall", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "UnfriendlyNukeIndicator", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto60B674C5_var, "PersonalCloaking", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto60B674C5_var, "BattlecruiserEnableSpecializations", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "TerranVehicleAndShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "TerranVehicleAndShipArmorsLevel1", 1);
            CatalogFieldValueSet(c_gameCatalogBehavior, "NovaHyperionTimedLife", "Duration", gv_pLAYER_07_DOMINION, IntToString(libNtve_gf_DifficultyValueInt(180, 180, 150, 120)));
            CatalogFieldValueSet(c_gameCatalogAbil, "FighterHanger", "InfoArray[" + IntToString(0) + "].Time", gv_pLAYER_04_XANTHOS, "2");
            lv_i = 1;
            for ( ; ( (autoFD766A59_ai >= 0 && lv_i <= autoFD766A59_ae) || (autoFD766A59_ai < 0 && lv_i >= autoFD766A59_ae) ) ; lv_i += autoFD766A59_ai ) {
                CatalogFieldValueModify(c_gameCatalogAbil, "BarracksTrain", "InfoArray[" + IntToString(lv_i) + "].Time", auto60B674C5_var, "25", c_upgradeOperationSet);
                CatalogFieldValueModify(c_gameCatalogAbil, "FactoryTrain", "InfoArray[" + IntToString(lv_i) + "].Time", auto60B674C5_var, "25", c_upgradeOperationSet);
                CatalogFieldValueModify(c_gameCatalogAbil, "StarportTrain", "InfoArray[" + IntToString(lv_i) + "].Time", auto60B674C5_var, "30", c_upgradeOperationSet);
            }
        }
        else {
            TechTreeUpgradeAddLevel(auto60B674C5_var, "ScannerSweepCooldown", 1);
        }
    }
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        CatalogFieldValueSet(c_gameCatalogUnit, "NovaXanthosRocketBarrageMissile", "Mover", gv_pLAYER_04_XANTHOS, "NovaXanthosRocketBarrageEasy");
        CatalogFieldValueSet(c_gameCatalogEffect, "NovaXanthosRocketBarrageIndicator", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_pLAYER_04_XANTHOS, "6");
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXanthosRailGunTurret", "LifeStart", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(1000, 1000, 1500, 1750)));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXanthosRailGunTurret", "LifeMax", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(1000, 1000, 1500, 1750)));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXanthosFlameTurret", "LifeStart", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(1000, 1000, 1500, 1750)));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXanthosFlameTurret", "LifeMax", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(1000, 1000, 1500, 1750)));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXThosFighterLaunchBayUnit", "LifeStart", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(1000, 1000, 1500, 1750)));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXThosFighterLaunchBayUnit", "LifeMax", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(1000, 1000, 1500, 1750)));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXanthosRocketBarrage", "LifeStart", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(1000, 1000, 1500, 1750)));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXanthosRocketBarrage", "LifeMax", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(1000, 1000, 1500, 1750)));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXThosFighter", "LifeStart", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(100, 100, 150, 150)));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaXThosFighter", "LifeMax", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(100, 100, 150, 150)));
    CatalogFieldValueSet(c_gameCatalogBehavior, "NovaXanthosRepair", "Modification.VitalRegenArray[" + IntToString(0) + "]", gv_pLAYER_04_XANTHOS, FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "NovaXanthosFlameTurret", "LifeMax", gv_pLAYER_04_XANTHOS) / gv_xanthosRepairTime), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "NovaXanthosDeathLaserInitial", "ExpireDelay", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(8, 8, 6, 4)));
    CatalogFieldValueSet(c_gameCatalogEffect, "NovaXanthosAssaultGunDamage", "Amount", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(23, 23, 27, 31)));
    CatalogFieldValueSet(c_gameCatalogEffect, "NovaXanthosFlameTurretDamage", "Amount", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(10, 10, 20, 20)));
    CatalogFieldValueSet(c_gameCatalogEffect, "NovaXanthosFlameTurretDamage", "AttributeBonus[" + IntToString(0) + "]", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(10, 10, 20, 20)));
    CatalogFieldValueSet(c_gameCatalogEffect, "NovaXanthosRailGunTurretDamage", "Amount", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(50, 50, 75, 80)));
    CatalogFieldValueSet(c_gameCatalogEffect, "NovaXanthosRailGunTurretDamage", "AttributeBonus[" + IntToString(1) + "]", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(50, 50, 75, 80)));
    CatalogFieldValueSet(c_gameCatalogEffect, "NovaXThosFighterAGDamage", "Amount", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(5, 5, 10, 10)));
    CatalogFieldValueSet(c_gameCatalogEffect, "NovaXThosFighterDamage", "Amount", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(5, 5, 10, 10)));
    CatalogFieldValueSet(c_gameCatalogEffect, "NovaXThosFighterDamage", "AttributeBonus[" + IntToString(1) + "]", gv_pLAYER_04_XANTHOS, IntToString(libNtve_gf_DifficultyValueInt(5, 5, 10, 10)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_AddMissionTipCampaign("(PH) Gorgon Repair Bay");
    libNCMI_gf_AddMissionTipCampaign("(PH) Xanthos");
    libNCMI_gf_AddMissionTipCampaign("(PH) Flame Turret");
    libNCMI_gf_AddMissionTipCampaign("(PH) Rail Gun");
    libNCMI_gf_AddMissionTipCampaign("(PH) Fighter Bay");
    libNCMI_gf_AddMissionTipCampaign("(PH) Nuke Launcher");
    libComC_gf_AddUnitTypeToUnitHelpPanel("Marine", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Marauder", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ghost", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Separatist", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Medic", gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libComC_gf_AddUnitTypeToUnitHelpPanel("MengskBC", gv_pLAYER_01_USER);
    }

    libNCMI_gf_AddMissionCheat("Stage2", "Skip to the second mission stage", gt_DebugStage2, libNCMI_ge_MissionCheatType_Stage, libNCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_XanthosDies, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Xanthos
//--------------------------------------------------------------------------------------------------
bool gt_DebugXanthos_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaXanthosAssault", 0, 0, PointFromId(1892087478));
    Wait(0.1, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Signal DeathAnim");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugXanthos_Init () {
    gt_DebugXanthos = TriggerCreate("gt_DebugXanthos_Func");
    TriggerAddEventChatMessage(gt_DebugXanthos, c_playerAny, "xanthosdeath", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 0.0625, true);
    libNCMI_gf_CinematicModeCampaign(false, 1.5, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerEnable(gt_DefeatBaseDead, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(11), true, false);
    RegionPlayableMapSet(RegionFromId(9));
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), 1.5);
    CinematicFade(true, 1.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C0A0938F"), null, PointFromId(154));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(13), gv_pLAYER_01_USER);
    Wait(3.0, c_timeReal);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryOther, false);
    TriggerExecute(gt_StartingTransmissionsQ, true, false);
    TriggerExecute(gt_ObjectiveDestroyXanthosCreate, true, true);
    libNCMI_gf_CreateObjectivePing(true, PointFromId(599), StringExternal("Param/Value/7A95B693"));
    PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    gv_xanthosMinimapPing = PingLastCreated();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveProtectFleetCreate, true, true);
    TriggerExecute(gt_CreateGorgonPings, true, true);
    TriggerExecute(gt_XanthosUICreate, true, false);
    TriggerExecute(gt_TipReadyQ, true, false);
    TimerStart(gv_xanthosTimer, gv_xanthosRepairTime, false, c_timeAI);
    gf_SendDefenderWave(1, 1);
    Wait(60.0, c_timeAI);
    gf_SendDefenderWave(1, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starting Transmissions Q
//--------------------------------------------------------------------------------------------------
bool gt_StartingTransmissionsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00047", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00001", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00002", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartingTransmissionsQ_Init () {
    gt_StartingTransmissionsQ = TriggerCreate("gt_StartingTransmissionsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game 02 - Kill Davis
//--------------------------------------------------------------------------------------------------
bool gt_StartGame02KillDavis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto24CB8523_g;
    int auto24CB8523_u;
    unit auto24CB8523_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_TarsonisCityUnderground_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/19AE4D6E"), null, PointFromId(528));
    TriggerEnable(gt_DefeatNovaDead, true);
    libNCMI_gf_EnableDisableHeroReviveSystem(false, gv_pLAYER_01_USER);
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/DDE68672"));
    auto24CB8523_g = UnitGroup("DOMScientist", c_playerAny, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto24CB8523_u = UnitGroupCount(auto24CB8523_g, c_unitCountAll);
    for (;; auto24CB8523_u -= 1) {
        auto24CB8523_var = UnitGroupUnitFromEnd(auto24CB8523_g, auto24CB8523_u);
        if (auto24CB8523_var == null) { break; }
        UnitBehaviorAdd(auto24CB8523_var, "Run", auto24CB8523_var, 1);
    }
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_ObjectiveKillDavisCreate, true, true);
    libNCMI_gf_CreateObjectivePing(true, PointFromId(529), StringExternal("Param/Value/BA4ED583"));
    PingSetUnit(PingLastCreated(), gv_s2_Davis);
    libHots_gf_StorePingForUnit(gv_s2_Davis, 1, PingLastCreated());
    TriggerExecute(gt_S2StartQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame02KillDavis_Init () {
    gt_StartGame02KillDavis = TriggerCreate("gt_StartGame02KillDavis_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clean Up Section 01
//--------------------------------------------------------------------------------------------------
bool gt_CleanUpSection01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_nova) == false)) {
        libNCMI_gf_ReviveHeroInstantly(gv_nova, false);
    }

    UnitAbilityEnable(gv_nova, "NovaNukeTimer", false);
    UnitAbilityEnable(gv_nova, "HeroNuclearStrike", false);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("NovaReleaseMinion", 0)), c_orderQueueReplace);
    cai_waves_stop("ai7A223D14");
    cai_waves_stop("ai13916457");
    cai_waves_stop("aiA28EB252");
    AIAttackWaveCancel(cai_getLastWave(gv_pLAYER_02_DEFENDERSWEST));
    AIAttackWaveCancel(cai_getLastWave(gv_pLAYER_03_DEFENDERSEAST));
    AIAttackWaveCancel(cai_getLastWave(gv_pLAYER_06_DEFENDERSNORTH));
    TriggerEnable(gt_XanthosFinalFightPlayerWipe, false);
    TriggerStop(gt_StartGame);
    TriggerStop(gt_StartingTransmissionsQ);
    TriggerStop(gt_XanthosJumpsToSafety);
    TriggerStop(gt_XanthosJumpsToSafetyTransmissionQ);
    TriggerStop(gt_XanthosAttacksSoonTransmissionQ);
    TriggerStop(gt_XanthosAttackQ);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libNCMI_gf_HideCampaignTransmissionPortrait();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleanUpSection01_Init () {
    gt_CleanUpSection01 = TriggerCreate("gt_CleanUpSection01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Init
//--------------------------------------------------------------------------------------------------
bool gt_XanthosInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_xanthos = UnitFromId(326109289);
    libNtve_gf_SendActorMessageToUnit(gv_xanthos, "SetMinimapVisibility");
    UnitBehaviorAdd(gv_xanthos, "ConjoinedTrainCar", gv_xanthos, 1);
    gf_XanthosAttachTurrets();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaXThosExposedWeaknessUnit", 0, gv_pLAYER_04_XANTHOS, UnitGetPosition(gv_xanthos));
    gv_xanthosTurretUnits[7] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "ConjoinedTrainCar", UnitLastCreated(), 1);
    UnitSetCustomValue(UnitLastCreated(), 0, 0.0);
    libNCMI_gf_AttachUnitModelToUnit(UnitLastCreated(), gv_xanthos, "Ref_Hardpoint 05", 0.0, 0.0, 0.0, "");
    gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), 0.0, 1.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "RefSet ::global.XanthosCore ::Self");
    libNtve_gf_SendActorMessageToUnit(gv_xanthos, "RefSet ::actor.XanthosCore ::global.XanthosCore");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosInit_Init () {
    gt_XanthosInit = TriggerCreate("gt_XanthosInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Begin Attack
//--------------------------------------------------------------------------------------------------
bool gt_XanthosBeginAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_leastAttackedGorgon;

    // Automatic Variable Declarations
    int autoCA76D407_val;
    const int auto23921C12_ae = 5;
    int auto23921C12_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_xanthosAttackRunNumber += 1;
    TriggerEnable(gt_XanthosTurretDestroyed, true);
    if ((gv_xanthosMinimapPing != c_invalidPingId)) {
        PingDestroy(gv_xanthosMinimapPing);
        gv_xanthosMinimapPing = c_invalidPingId;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_xanthos), Color(100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_xanthos);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D480F4DA"));
    gv_xanthosMinimapPing = PingLastCreated();
    gf_SetTurretState(gv_xanthosTurretUnits[7], ge_PRESETTurretState_Inactive);
    autoCA76D407_val = gv_xanthosAttackRunNumber;
    if (autoCA76D407_val == 1) {
        gf_SetTurretState(gv_xanthosTurretUnits[1], ge_PRESETTurretState_Active);
        gf_SetTurretState(gv_xanthosTurretUnits[2], ge_PRESETTurretState_Active);
    }
    else if (autoCA76D407_val == 2) {
        gf_SetTurretState(gv_xanthosTurretUnits[3], ge_PRESETTurretState_Active);
    }
    else if (autoCA76D407_val == 3) {
        gf_SetTurretState(gv_xanthosTurretUnits[4], ge_PRESETTurretState_Active);
    }
    else {
    }
    if ((UnitIsAlive(gv_xanthosTargetGorgon) == false)) {
        auto23921C12_var = 1;
        for ( ; auto23921C12_var <= auto23921C12_ae; auto23921C12_var += 1 ) {
            if ((UnitIsAlive(gv_dominionGorgons[auto23921C12_var]) == true) && (lv_leastAttackedGorgon == null)) {
                lv_leastAttackedGorgon = gv_dominionGorgons[auto23921C12_var];
            }
            else if ((UnitIsAlive(gv_dominionGorgons[auto23921C12_var]) == true) && (UnitGetCustomValue(gv_dominionGorgons[auto23921C12_var], 0) < UnitGetCustomValue(lv_leastAttackedGorgon, 0))) {
                lv_leastAttackedGorgon = gv_dominionGorgons[auto23921C12_var];
            }
        }
        UnitSetCustomValue(lv_leastAttackedGorgon, 0, (UnitGetCustomValue(lv_leastAttackedGorgon, 0) + 1.0));
        gv_xanthosTargetGorgon = lv_leastAttackedGorgon;
    }

    PathDestroy(gv_xanthosMinimapPathDisplay);
    PathCreateForUnit(PlayerGroupAll(), gv_xanthos);
    gv_xanthosMinimapPathDisplay = PathLastCreated();
    PathSetVisible(PathLastCreated(), c_pathLocationMinimap, true);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetDestinationPoint(PathLastCreated(), UnitGetPosition(gv_xanthosTargetGorgon));
    PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(100.00, 0.00, 0.00));
    libNCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    TriggerExecute(gt_XanthosAttackQ, true, false);
    TimerStart(gv_xanthosTimeoutTimer, 300.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosBeginAttack_Init () {
    gt_XanthosBeginAttack = TriggerCreate("gt_XanthosBeginAttack_Func");
    TriggerAddEventTimer(gt_XanthosBeginAttack, gv_xanthosTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Attacks Soon Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_XanthosAttacksSoonTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_davisBGSound;

    // Automatic Variable Declarations
    int autoF6BD4507_val;
    int autoBAD66C59_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_xanthosFinalFightTriggered == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Nova_Warning_XanthosAttack", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    lv_davisBGSound = SoundLastPlayed();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    autoF6BD4507_val = gv_xanthosAttackRunNumber;
    if (autoF6BD4507_val == 0) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00048", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoF6BD4507_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00050", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoF6BD4507_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00049", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        autoBAD66C59_val = RandomInt(1, 3);
        if (autoBAD66C59_val == 1) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00048", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoBAD66C59_val == 2) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00049", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoBAD66C59_val == 3) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00050", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosAttacksSoonTransmissionQ_Init () {
    gt_XanthosAttacksSoonTransmissionQ = TriggerCreate("gt_XanthosAttacksSoonTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_XanthosAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto180DEDFB_val;
    int auto4AE13CBD_val;

    // Conditions
    if (testConds) {
        if (!((gv_xanthosFinalFightTriggered == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    auto180DEDFB_val = gv_xanthosAttackRunNumber;
    if (auto180DEDFB_val == 1) {
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00052", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00055", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto180DEDFB_val == 2) {
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00053", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00056", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto180DEDFB_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00083", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00054", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        auto4AE13CBD_val = RandomInt(1, 3);
        if (auto4AE13CBD_val == 1) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00083", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00052", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto4AE13CBD_val == 2) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00082", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00053", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto4AE13CBD_val == 3) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00051", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00054", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosAttackQ_Init () {
    gt_XanthosAttackQ = TriggerCreate("gt_XanthosAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Turret Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_XanthosTurretDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_xanthos) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropLife, 1.0);
    if ((gf_AllActiveTurretsDisabled() == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_XanthosJumpsToSafety, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosTurretDestroyed_Init () {
    gt_XanthosTurretDestroyed = TriggerCreate("gt_XanthosTurretDestroyed_Func");
    TriggerAddEventPlayerEffectUsed(gt_XanthosTurretDestroyed, gv_pLAYER_04_XANTHOS, "NovaXanthosTurretFatalOrder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Jumps To Safety Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_XanthosJumpsToSafetyTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_davisBGSound;

    // Automatic Variable Declarations
    int auto7CF84CAB_val;
    int auto286558B6_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Nova_Warning_XanthosRetreat", -1), c_maxPlayers, PlayerGroupAll(), 33.0, 0.0);
    lv_davisBGSound = SoundLastPlayed();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    auto7CF84CAB_val = gv_xanthosAttackRunNumber;
    if (auto7CF84CAB_val == 1) {
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00062", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00060", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto7CF84CAB_val == 2) {
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00061", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto7CF84CAB_val == 3) {
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00084", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto7CF84CAB_val == 4) {
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00059", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        auto286558B6_val = RandomInt(1, 3);
        if (auto286558B6_val == 1) {
            SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00085", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto286558B6_val == 2) {
            SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00086", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto286558B6_val == 3) {
            SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00087", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
        }
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosJumpsToSafetyTransmissionQ_Init () {
    gt_XanthosJumpsToSafetyTransmissionQ = TriggerCreate("gt_XanthosJumpsToSafetyTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Jumps To Safety
//--------------------------------------------------------------------------------------------------
bool gt_XanthosJumpsToSafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopTimer(gv_xanthosTimeoutTimer);
    PathDestroy(gv_xanthosMinimapPathDisplay);
    TriggerExecute(gt_XanthosJumpsToSafetyTransmissionQ, true, false);
    PingDestroy(gv_xanthosMinimapPing);
    gv_xanthosMinimapPing = c_invalidPingId;
    libNCMI_gf_CreateObjectivePing(true, PointFromId(599), StringExternal("Param/Value/1B9CF865"));
    PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    gv_xanthosMinimapPing = PingLastCreated();
    gv_xanthosTargetGorgon = null;
    while (!((UnitHasBehavior2(gv_xanthos, "NovaXanthosRepairMode") == true))) {
        Wait(0.5, c_timeAI);
    }
    gf_SetTurretState(gv_xanthosTurretUnits[7], ge_PRESETTurretState_Active);
    TimerStart(gv_xanthosTimer, gv_xanthosRepairTime, false, c_timeAI);
    TriggerEnable(gt_XanthosAttacksSoonTransmissionQ, true);
    TriggerExecute(gt_SendDefenderWaves, true, false);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_SendHyperionRetaliation, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosJumpsToSafety_Init () {
    gt_XanthosJumpsToSafety = TriggerCreate("gt_XanthosJumpsToSafety_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Timeout Safety
//--------------------------------------------------------------------------------------------------
bool gt_XanthosTimeoutSafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_XanthosTurretDestroyed, false);
    TriggerExecute(gt_XanthosJumpsToSafety, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosTimeoutSafety_Init () {
    gt_XanthosTimeoutSafety = TriggerCreate("gt_XanthosTimeoutSafety_Func");
    TriggerAddEventTimer(gt_XanthosTimeoutSafety, gv_xanthosTimeoutTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Final Fight
//--------------------------------------------------------------------------------------------------
bool gt_XanthosFinalFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_XanthosBeginAttack, false);
    gv_xanthosFinalFightTriggered = true;
    libNtve_gf_StopTimer(gv_xanthosTimer);
    libCMUI_gf_ShowHideProgressBar(false);
    if ((gv_xanthosMinimapPing != c_invalidPingId)) {
        PingDestroy(gv_xanthosMinimapPing);
        gv_xanthosMinimapPing = c_invalidPingId;
    }

    gf_SetTurretState(gv_xanthosTurretUnits[7], ge_PRESETTurretState_Inactive);
    gf_SetTurretState(gv_xanthosTurretUnits[1], ge_PRESETTurretState_Inactive);
    gf_SetTurretState(gv_xanthosTurretUnits[2], ge_PRESETTurretState_Inactive);
    gf_SetTurretState(gv_xanthosTurretUnits[3], ge_PRESETTurretState_Inactive);
    gf_SetTurretState(gv_xanthosTurretUnits[4], ge_PRESETTurretState_Inactive);
    TriggerEnable(gt_XanthosController, false);
    UnitBehaviorAdd(gv_xanthos, "NovaXanthosFinalMode", gv_xanthos, 1);
    UnitBehaviorAdd(gv_xanthosTurretUnits[1], "NovaXanthosTurretFinalMode", gv_xanthosTurretUnits[1], 1);
    UnitBehaviorAdd(gv_xanthosTurretUnits[2], "NovaXanthosTurretFinalMode", gv_xanthosTurretUnits[2], 1);
    UnitBehaviorAdd(gv_xanthosTurretUnits[3], "NovaXanthosTurretFinalMode", gv_xanthosTurretUnits[3], 1);
    UnitBehaviorAdd(gv_xanthosTurretUnits[4], "NovaXanthosTurretFinalMode", gv_xanthosTurretUnits[4], 1);
    UnitBehaviorAdd(gv_xanthosTurretUnits[7], "NovaXanthosTurretFinalMode", gv_xanthosTurretUnits[7], 1);
    TriggerExecute(gt_XanthosFinalFightTriggeredQ, true, true);
    gf_SetTurretState(gv_xanthosTurretUnits[7], ge_PRESETTurretState_Active);
    AISetUnitScriptControlled(gv_xanthos, false);
    AISetUnitSuicide(gv_xanthos, true);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_04_XANTHOS, "NovaXanthosAssault", "AIXanthosFinalForm", false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_xanthos), Color(100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_xanthos);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4969CC1C"));
    gv_xanthosMinimapPing = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosFinalFight_Init () {
    gt_XanthosFinalFight = TriggerCreate("gt_XanthosFinalFight_Func");
    TriggerAddEventUnitDamaged(gt_XanthosFinalFight, UnitRefFromVariable("gv_xanthosTurretUnits[7]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Final Fight Player Wipe
//--------------------------------------------------------------------------------------------------
bool gt_XanthosFinalFightPlayerWipe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_xanthos), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack6, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosFinalFightPlayerWipe_Init () {
    gt_XanthosFinalFightPlayerWipe = TriggerCreate("gt_XanthosFinalFightPlayerWipe_Func");
    TriggerEnable(gt_XanthosFinalFightPlayerWipe, false);
    TriggerAddEventTimePeriodic(gt_XanthosFinalFightPlayerWipe, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Final Fight Triggered Q
//--------------------------------------------------------------------------------------------------
bool gt_XanthosFinalFightTriggeredQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00094", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00096", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack3, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerEnable(gt_XanthosFinalFightPlayerWipe, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosFinalFightTriggeredQ_Init () {
    gt_XanthosFinalFightTriggeredQ = TriggerCreate("gt_XanthosFinalFightTriggeredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Final Form Reinforcements 1
//--------------------------------------------------------------------------------------------------
bool gt_XanthosFinalFormReinforcements1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_podGroup;
    point lv_dropPoint;
    unitgroup lv_allReinforcements;

    // Automatic Variable Declarations
    const int auto96F91D99_ae = 6;
    int auto96F91D99_var;
    int autoFADDF74A_val;

    // Variable Initialization
    lv_podGroup = UnitGroupEmpty();
    lv_allReinforcements = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_XanthosFinalFormReinforcements1Q, true, false);
    auto96F91D99_var = 1;
    for ( ; auto96F91D99_var <= auto96F91D99_ae; auto96F91D99_var += 1 ) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == true)) {
            return true;
        }

        lv_podGroup = UnitGroupEmpty();
        autoFADDF74A_val = auto96F91D99_var;
        if (autoFADDF74A_val == 1) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) + 30.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Separatist", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medic", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (autoFADDF74A_val == 2) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) - 150.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Reaper", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (autoFADDF74A_val == 3) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 5.0, (UnitGetFacing(gv_xanthos) - 90.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Separatist", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (autoFADDF74A_val == 4) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) + 150.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Separatist", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (autoFADDF74A_val == 5) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) - 30.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Separatist", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medic", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (autoFADDF74A_val == 6) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 5.0, (UnitGetFacing(gv_xanthos) + 90.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Separatist", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Medic", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, true, gv_pLAYER_06_DEFENDERSNORTH);
            AISetGroupScriptControlled(lv_allReinforcements, false);
            AISetGroupSuicide(lv_allReinforcements, true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosFinalFormReinforcements1_Init () {
    gt_XanthosFinalFormReinforcements1 = TriggerCreate("gt_XanthosFinalFormReinforcements1_Func");
    TriggerAddEventUnitDamaged(gt_XanthosFinalFormReinforcements1, UnitRefFromVariable("gv_xanthosTurretUnits[7]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Final Form Reinforcements 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_XanthosFinalFormReinforcements1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00097", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosFinalFormReinforcements1Q_Init () {
    gt_XanthosFinalFormReinforcements1Q = TriggerCreate("gt_XanthosFinalFormReinforcements1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Final Form Reinforcements 2
//--------------------------------------------------------------------------------------------------
bool gt_XanthosFinalFormReinforcements2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_podGroup;
    point lv_dropPoint;
    unitgroup lv_allReinforcements;

    // Automatic Variable Declarations
    const int auto43EE0E9B_ae = 6;
    int auto43EE0E9B_var;
    int auto648D85C7_val;

    // Variable Initialization
    lv_podGroup = UnitGroupEmpty();
    lv_allReinforcements = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 40.0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_XanthosFinalFormReinforcements2Q, true, false);
    auto43EE0E9B_var = 1;
    for ( ; auto43EE0E9B_var <= auto43EE0E9B_ae; auto43EE0E9B_var += 1 ) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == true)) {
            return true;
        }

        lv_podGroup = UnitGroupEmpty();
        auto648D85C7_val = auto43EE0E9B_var;
        if (auto648D85C7_val == 1) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) + 30.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HellionTank", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (auto648D85C7_val == 2) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) - 150.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (auto648D85C7_val == 3) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 5.0, (UnitGetFacing(gv_xanthos) - 90.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (auto648D85C7_val == 4) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) + 150.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (auto648D85C7_val == 5) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) - 30.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HellionTank", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            Wait(0.75, c_timeGame);
        }
        else if (auto648D85C7_val == 6) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 5.0, (UnitGetFacing(gv_xanthos) + 90.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(lv_allReinforcements, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_midDropPodCleanup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, true, gv_pLAYER_06_DEFENDERSNORTH);
            AISetGroupScriptControlled(lv_allReinforcements, false);
            AISetGroupSuicide(lv_allReinforcements, true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosFinalFormReinforcements2_Init () {
    gt_XanthosFinalFormReinforcements2 = TriggerCreate("gt_XanthosFinalFormReinforcements2_Func");
    TriggerAddEventUnitDamaged(gt_XanthosFinalFormReinforcements2, UnitRefFromVariable("gv_xanthosTurretUnits[7]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Final Form Reinforcements 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_XanthosFinalFormReinforcements2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00098", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosFinalFormReinforcements2Q_Init () {
    gt_XanthosFinalFormReinforcements2Q = TriggerCreate("gt_XanthosFinalFormReinforcements2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Final Form Reinforcements 3
//--------------------------------------------------------------------------------------------------
bool gt_XanthosFinalFormReinforcements3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_podGroup;
    point lv_dropPoint;
    unitgroup lv_allReinforcements;

    // Automatic Variable Declarations
    const int auto559BD9F5_ae = 7;
    int auto559BD9F5_var;
    int auto005B9E45_val;

    // Variable Initialization
    lv_podGroup = UnitGroupEmpty();
    lv_allReinforcements = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 20.0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_XanthosFinalFormReinforcements3Q, true, false);
    auto559BD9F5_var = 1;
    for ( ; auto559BD9F5_var <= auto559BD9F5_ae; auto559BD9F5_var += 1 ) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == true)) {
            return true;
        }

        lv_podGroup = UnitGroupEmpty();
        auto005B9E45_val = auto559BD9F5_var;
        if (auto005B9E45_val == 1) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) + 30.0));
            UnitCreate(1, "VikingFighter", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint, UnitGetFacing(gv_xanthos));
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.750000");
            UnitBehaviorAdd(UnitLastCreated(), "MercAirDrop", UnitLastCreated(), 1);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.75, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create VikingMercenaryFighterReentry");
        }
        else if (auto005B9E45_val == 2) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) - 150.0));
            UnitCreate(1, "Battlecruiser", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint, UnitGetFacing(gv_xanthos));
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.750000");
            UnitBehaviorAdd(UnitLastCreated(), "MercAirDrop", UnitLastCreated(), 1);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.75, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create BattlecruiserLokiReentry");
        }
        else if (auto005B9E45_val == 3) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 5.0, (UnitGetFacing(gv_xanthos) - 90.0));
            UnitCreate(1, "VikingFighter", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint, UnitGetFacing(gv_xanthos));
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.750000");
            UnitBehaviorAdd(UnitLastCreated(), "MercAirDrop", UnitLastCreated(), 1);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.75, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create VikingMercenaryFighterReentry");
        }
        else if (auto005B9E45_val == 4) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) + 150.0));
            UnitCreate(1, "Battlecruiser", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint, UnitGetFacing(gv_xanthos));
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.750000");
            UnitBehaviorAdd(UnitLastCreated(), "MercAirDrop", UnitLastCreated(), 1);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.75, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create BattlecruiserLokiReentry");
        }
        else if (auto005B9E45_val == 5) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 4.0, (UnitGetFacing(gv_xanthos) - 30.0));
            UnitCreate(1, "VikingFighter", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint, UnitGetFacing(gv_xanthos));
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.750000");
            UnitBehaviorAdd(UnitLastCreated(), "MercAirDrop", UnitLastCreated(), 1);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.75, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create VikingMercenaryFighterReentry");
        }
        else if (auto005B9E45_val == 6) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 5.0, (UnitGetFacing(gv_xanthos) + 90.0));
            UnitCreate(1, "VikingFighter", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint, UnitGetFacing(gv_xanthos));
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 0.750000");
            UnitBehaviorAdd(UnitLastCreated(), "MercAirDrop", UnitLastCreated(), 1);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.75, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create VikingMercenaryFighterReentry");
        }
        else if (auto005B9E45_val == 7) {
            lv_dropPoint = PointWithOffsetPolar(UnitGetPosition(gv_xanthos), 5.0, (UnitGetFacing(gv_xanthos) - 180.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghost", 0, gv_pLAYER_06_DEFENDERSNORTH, lv_dropPoint);
            UnitGroupAddUnitGroup(lv_podGroup, UnitLastCreatedGroup());
            libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, lv_dropPoint, lv_podGroup, false, gv_pLAYER_06_DEFENDERSNORTH);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AISetUnitSuicide(UnitLastCreated(), true);
            Wait(0.75, c_timeGame);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosFinalFormReinforcements3_Init () {
    gt_XanthosFinalFormReinforcements3 = TriggerCreate("gt_XanthosFinalFormReinforcements3_Func");
    TriggerAddEventUnitDamaged(gt_XanthosFinalFormReinforcements3, UnitRefFromVariable("gv_xanthosTurretUnits[7]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Final Form Reinforcements 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_XanthosFinalFormReinforcements3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00099", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosFinalFormReinforcements3Q_Init () {
    gt_XanthosFinalFormReinforcements3Q = TriggerCreate("gt_XanthosFinalFormReinforcements3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Dies
//--------------------------------------------------------------------------------------------------
bool gt_XanthosDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_XanthosFinalFightPlayerWipe, false);
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerExecute(gt_ObjectiveDestroyXanthosComplete, true, true);
    TriggerExecute(gt_ObjectiveProtectFleetComplete, true, true);
    TriggerExecute(gt_CleanUpSection01, true, true);
    UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    Wait(0.0625, c_timeAI);
    TriggerExecute(gt_MidQ, true, true);
    TriggerExecute(gt_StartGame02KillDavis, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosDies_Init () {
    gt_XanthosDies = TriggerCreate("gt_XanthosDies_Func");
    TriggerAddEventUnitDied(gt_XanthosDies, UnitRefFromVariable("gv_xanthos"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos UI Create
//--------------------------------------------------------------------------------------------------
bool gt_XanthosUICreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCMUI_gf_DisplayProgressBar(StringExternal("Param/Value/5FF0032B"), 0, FixedToInt(gv_xanthosRepairTime));
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/ProgressFrameTemplate/BarImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_lotv_bossbarframe_fill.dds", PlayerGroupAll());
    TriggerEnable(gt_XanthosUIUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosUICreate_Init () {
    gt_XanthosUICreate = TriggerCreate("gt_XanthosUICreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos UI Update
//--------------------------------------------------------------------------------------------------
bool gt_XanthosUIUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_xanthosTimer) <= 0.0)) {
        if ((gf_AllActiveTurretsDisabled() == true)) {
            libCMUI_gf_SetProgressBarProgress(0);
            libCMUI_gf_SetProgressBarLabel(StringExternal("Param/Value/D52AB2C6"));
            libCMUI_gf_SetProgressBarColor(Color(2.35, 67.45, 46.27));
        }
        else {
            libCMUI_gf_SetProgressBarProgress(FixedToInt(TimerGetElapsed(gv_xanthosTimer)));
            libCMUI_gf_SetProgressBarLabel(StringExternal("Param/Value/E3CB01B6"));
            libCMUI_gf_SetProgressBarColor(Color(100.00, 43.53, 0.00));
        }
    }
    else {
        libCMUI_gf_SetProgressBarProgress(FixedToInt(TimerGetElapsed(gv_xanthosTimer)));
        if ((gv_xanthosAttackRunNumber == 0)) {
            libCMUI_gf_SetProgressBarLabel(StringExternal("Param/Value/19AF0318"));
        }
        else {
            libCMUI_gf_SetProgressBarLabel(StringExternal("Param/Value/344679F4"));
        }
        libCMUI_gf_SetProgressBarColor(Color(2.35, 67.45, 46.27));
    }
    if ((TimerGetRemaining(gv_xanthosTimer) <= 30.0)) {
        TriggerExecute(gt_XanthosAttacksSoonTransmissionQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosUIUpdate_Init () {
    gt_XanthosUIUpdate = TriggerCreate("gt_XanthosUIUpdate_Func");
    TriggerEnable(gt_XanthosUIUpdate, false);
    TriggerAddEventTimePeriodic(gt_XanthosUIUpdate, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Hyperion Retaliation
//--------------------------------------------------------------------------------------------------
bool gt_SendHyperionRetaliation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_startPoint;
    string lv_startLane;
    int lv_startIndex;
    int lv_waypointCount;

    // Automatic Variable Declarations
    int auto12338B45_val;
    int auto0448254E_ae;
    int auto0448254E_var;
    int auto44C5C169_ae;
    int auto44C5C169_var;

    // Variable Initialization
    lv_startLane = "";

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libNtve_gf_UnitIsHidden(gv_hyperion) == true) || (gv_hyperion == null)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hyperionAttackRunCount += 1;
    TriggerExecute(gt_SendHyperionRetaliationQ, true, false);
    auto12338B45_val = gv_hyperionAttackRunCount;
    if (auto12338B45_val == 1) {
        lv_startLane = "Hyperion1";
    }
    else if (auto12338B45_val == 2) {
        lv_startLane = "Hyperion2";
    }
    else if (auto12338B45_val == 3) {
        lv_startLane = "Hyperion3";
    }
    else if (auto12338B45_val == 4) {
        lv_startLane = "Hyperion4";
    }
    else {
        lv_startLane = ("Hyperion" + IntToString(RandomInt(1, 4)));
    }
    while ((PointFromName((lv_startLane + "-" + IntToString((lv_waypointCount + 1)))) != null)) {
        lv_waypointCount += 1;
    }
    auto0448254E_ae = lv_waypointCount;
    auto0448254E_var = 1;
    for ( ; auto0448254E_var <= auto0448254E_ae; auto0448254E_var += 1 ) {
        if ((lv_startIndex == 0) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DEFENDERSWEST, RegionCircle(PointFromName((lv_startLane + "-" + IntToString(auto0448254E_var))), 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_DEFENDERSEAST, RegionCircle(PointFromName((lv_startLane + "-" + IntToString(auto0448254E_var))), 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_06_DEFENDERSNORTH, RegionCircle(PointFromName((lv_startLane + "-" + IntToString(auto0448254E_var))), 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            if ((auto0448254E_var == 1)) {
                lv_startIndex = auto0448254E_var;
            }
            else {
                lv_startIndex = (auto0448254E_var - 1);
            }
        }

        if ((auto0448254E_var == lv_waypointCount) && (lv_startIndex == 0)) {
            lv_startIndex = auto0448254E_var;
        }

    }
    lv_waypointCount -= lv_startIndex;
    if ((gv_hyperionMinimapIcon == c_invalidPingId)) {
        gf_CreateHyperionMinimapIcon();
    }

    libNtve_gf_ShowHideUnit(gv_hyperion, true);
    UnitSetPosition(gv_hyperion, PointFromName((lv_startLane + "-" + IntToString(lv_startIndex))), false);
    UnitSetFacing(gv_hyperion, PointGetFacing(PointFromName((lv_startLane + "-" + IntToString(lv_startIndex)))), 0.0);
    UnitIssueOrder(gv_hyperion, Order(AbilityCommand("NovaHyperionJump", 1)), c_orderQueueReplace);
    AIAttackWaveUseUnit(gv_pLAYER_07_DOMINION, gv_hyperion);
    AIAttackWaveSetGatherPoint(gv_pLAYER_07_DOMINION, PointFromName((lv_startLane + "-" + IntToString(lv_startIndex))));
    AIAttackWaveSetTargetPoint(gv_pLAYER_07_DOMINION, PointFromName((lv_startLane + "-" + IntToString((lv_startIndex + lv_waypointCount)))));
    auto44C5C169_ae = (lv_startIndex + lv_waypointCount);
    auto44C5C169_var = lv_startIndex;
    for ( ; auto44C5C169_var <= auto44C5C169_ae; auto44C5C169_var += 1 ) {
        AIAttackWaveAddWaypoint(gv_pLAYER_07_DOMINION, PointFromName((lv_startLane + "-" + IntToString(auto44C5C169_var))), false);
    }
    gf_HyperionMinimapPathDisplay(gv_hyperion, lv_startLane, lv_startIndex);
    AIAttackWaveSend(gv_pLAYER_07_DOMINION, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendHyperionRetaliation_Init () {
    gt_SendHyperionRetaliation = TriggerCreate("gt_SendHyperionRetaliation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Hyperion Retaliation Q
//--------------------------------------------------------------------------------------------------
bool gt_SendHyperionRetaliationQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8243C8BB_val;
    int auto776E8715_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    auto8243C8BB_val = gv_hyperionAttackRunCount;
    if (auto8243C8BB_val == 1) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00063", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00064", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto8243C8BB_val == 2) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00065", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto8243C8BB_val == 3) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00066", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto8243C8BB_val == 4) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00067", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto8243C8BB_val == 5) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00068", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
        auto776E8715_val = RandomInt(1, 4);
        if (auto776E8715_val == 1) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00065", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }
        else if (auto776E8715_val == 2) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00066", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }
        else if (auto776E8715_val == 3) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00067", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }
        else if (auto776E8715_val == 4) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00068", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }
        else {
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendHyperionRetaliationQ_Init () {
    gt_SendHyperionRetaliationQ = TriggerCreate("gt_SendHyperionRetaliationQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Falls Back
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFallsBack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(gv_hyperion) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PathDestroy(gv_hyperionMinimapPathDisplay);
    TriggerExecute(gt_HyperionFallsBackQ, true, false);
    Wait(3.0, c_timeGame);
    UnitSetPropertyFixed(gv_hyperion, c_unitPropLifePercent, 100.0);
    libNtve_gf_ShowHideUnit(gv_hyperion, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFallsBack_Init () {
    gt_HyperionFallsBack = TriggerCreate("gt_HyperionFallsBack_Func");
    TriggerAddEventUnitBehaviorChange(gt_HyperionFallsBack, null, "NovaHyperionJump", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Falls Back Q
//--------------------------------------------------------------------------------------------------
bool gt_HyperionFallsBackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5099935E_val;
    int autoE02BBF44_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    auto5099935E_val = gv_hyperionAttackRunCount;
    if (auto5099935E_val == 1) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Nova_HyperionJumpOut_Far", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00069", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto5099935E_val == 2) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Nova_HyperionJumpOut_Far", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00070", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto5099935E_val == 3) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Nova_HyperionJumpOut_Far", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00071", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto5099935E_val == 4) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Nova_HyperionJumpOut_Far", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00072", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
        autoE02BBF44_val = RandomInt(1, 4);
        if (autoE02BBF44_val == 1) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            SoundPlayForPlayer(SoundLink("Nova_HyperionJumpOut_Far", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00069", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }
        else if (autoE02BBF44_val == 2) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            SoundPlayForPlayer(SoundLink("Nova_HyperionJumpOut_Far", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00070", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }
        else if (autoE02BBF44_val == 3) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            SoundPlayForPlayer(SoundLink("Nova_HyperionJumpOut_Far", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00071", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }
        else if (autoE02BBF44_val == 4) {
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            SoundPlayForPlayer(SoundLink("Nova_HyperionJumpOut_Far", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00072", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }
        else {
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionFallsBackQ_Init () {
    gt_HyperionFallsBackQ = TriggerCreate("gt_HyperionFallsBackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hyperion Minimap Icon
//--------------------------------------------------------------------------------------------------
bool gt_HyperionMinimapIcon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(gv_hyperion) == false))) {
            PingDestroy(gv_hyperionMinimapIcon);
            return true;
        }

        if ((libNtve_gf_UnitIsHidden(gv_hyperion) == true)) {
            PingSetVisible(gv_hyperionMinimapIcon, false);
        }
        else {
            PingSetVisible(gv_hyperionMinimapIcon, true);
        }
        PingSetRotation(gv_hyperionMinimapIcon, UnitGetFacing(gv_hyperion));
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HyperionMinimapIcon_Init () {
    gt_HyperionMinimapIcon = TriggerCreate("gt_HyperionMinimapIcon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Gorgon Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateGorgonPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_dominionGorgons[1]), StringExternal("Param/Value/8C5317BD"));
    PingSetScale(PingLastCreated(), 0.75);
    libHots_gf_StorePingForUnit(gv_dominionGorgons[1], 1, PingLastCreated());
    libNtve_gf_ShareVisionofUnit(gv_dominionGorgons[1], true, gv_pLAYER_01_USER);
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_dominionGorgons[2]), StringExternal("Param/Value/D409C511"));
    PingSetScale(PingLastCreated(), 0.75);
    libHots_gf_StorePingForUnit(gv_dominionGorgons[2], 1, PingLastCreated());
    libNtve_gf_ShareVisionofUnit(gv_dominionGorgons[2], true, gv_pLAYER_01_USER);
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_dominionGorgons[3]), StringExternal("Param/Value/A2B79107"));
    PingSetScale(PingLastCreated(), 0.75);
    libHots_gf_StorePingForUnit(gv_dominionGorgons[3], 1, PingLastCreated());
    libNtve_gf_ShareVisionofUnit(gv_dominionGorgons[3], true, gv_pLAYER_01_USER);
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_dominionGorgons[4]), StringExternal("Param/Value/0B515100"));
    PingSetScale(PingLastCreated(), 0.75);
    libHots_gf_StorePingForUnit(gv_dominionGorgons[4], 1, PingLastCreated());
    libNtve_gf_ShareVisionofUnit(gv_dominionGorgons[4], true, gv_pLAYER_01_USER);
    libNCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_dominionGorgons[5]), StringExternal("Param/Value/60BF1B6F"));
    PingSetScale(PingLastCreated(), 0.75);
    libHots_gf_StorePingForUnit(gv_dominionGorgons[5], 1, PingLastCreated());
    libNtve_gf_ShareVisionofUnit(gv_dominionGorgons[5], true, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateGorgonPings_Init () {
    gt_CreateGorgonPings = TriggerCreate("gt_CreateGorgonPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Dies
//--------------------------------------------------------------------------------------------------
bool gt_GorgonDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_gorgonGroup;

    // Automatic Variable Declarations
    const int auto98BFBCFD_ae = 5;
    int auto98BFBCFD_var;

    // Variable Initialization
    lv_gorgonGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    libNCMI_gf_SendActorMessageToDoodadsInRegion("Signal DoodadDead", "BattleStation_ConstructionRobot", RegionCircle(UnitGetPosition(EventUnit()), 5.0));
    gv_objectiveProtectFleetCount -= 1;
    TriggerExecute(gt_ObjectiveProtectFleetUpdate, true, false);
    if ((gv_objectiveProtectFleetCount == 0)) {
        TriggerExecute(gt_DefeatDominionFleetDestroyed, true, false);
    }
    else {
        TriggerExecute(gt_GorgonDiesTransmissionQ, true, false);
    }
    if ((EventUnit() == gv_xanthosTargetGorgon)) {
        auto98BFBCFD_var = 1;
        for ( ; auto98BFBCFD_var <= auto98BFBCFD_ae; auto98BFBCFD_var += 1 ) {
            if ((UnitIsAlive(gv_dominionGorgons[auto98BFBCFD_var]) == true)) {
                UnitGroupAdd(lv_gorgonGroup, gv_dominionGorgons[auto98BFBCFD_var]);
            }

        }
        gv_xanthosTargetGorgon = UnitGroupClosestToPoint(lv_gorgonGroup, UnitGetPosition(gv_xanthos));
        PathDestroy(gv_xanthosMinimapPathDisplay);
        PathCreateForUnit(PlayerGroupAll(), gv_xanthos);
        gv_xanthosMinimapPathDisplay = PathLastCreated();
        PathSetVisible(PathLastCreated(), c_pathLocationMinimap, true);
        PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
        PathSetDestinationPoint(PathLastCreated(), UnitGetPosition(gv_xanthosTargetGorgon));
        PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(100.00, 0.00, 0.00));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonDies_Init () {
    gt_GorgonDies = TriggerCreate("gt_GorgonDies_Func");
    TriggerAddEventUnitDied(gt_GorgonDies, UnitRefFromVariable("gv_dominionGorgons[1]"));
    TriggerAddEventUnitDied(gt_GorgonDies, UnitRefFromVariable("gv_dominionGorgons[2]"));
    TriggerAddEventUnitDied(gt_GorgonDies, UnitRefFromVariable("gv_dominionGorgons[3]"));
    TriggerAddEventUnitDied(gt_GorgonDies, UnitRefFromVariable("gv_dominionGorgons[4]"));
    TriggerAddEventUnitDied(gt_GorgonDies, UnitRefFromVariable("gv_dominionGorgons[5]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gorgon Dies Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_GorgonDiesTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto7B574907_val;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B574907_val = gv_objectiveProtectFleetCount;
    if (auto7B574907_val == 4) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00073", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto7B574907_val == 3) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00074", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto7B574907_val == 2) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00075", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto7B574907_val == 1) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Nova_Xanthos_Online", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00076", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GorgonDiesTransmissionQ_Init () {
    gt_GorgonDiesTransmissionQ = TriggerCreate("gt_GorgonDiesTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Unit Group
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveUnitGroup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libLotv_gf_DifficultyValueInt2(1, 1, 1, 0) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_02_DEFENDERSWEST) || (EventPlayer() == gv_pLAYER_03_DEFENDERSEAST) || (EventPlayer() == gv_pLAYER_06_DEFENDERSNORTH)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitGroup = AIWaveGetUnits(EventPlayerWave());
    gf_AttackWavePing(lv_unitGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveUnitGroup_Init () {
    gt_AttackWaveUnitGroup = TriggerCreate("gt_AttackWaveUnitGroup_Func");
    TriggerAddEventPlayerAIWave(gt_AttackWaveUnitGroup, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Defender Waves
//--------------------------------------------------------------------------------------------------
bool gt_SendDefenderWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5AF725D8_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_defenderWaveTargetLane += 1;
    if ((gv_defenderWaveTargetLane > 4)) {
        gv_defenderWaveTargetLane = 1;
    }

    if ((gv_defenderWaveEscalation < 4)) {
        gv_defenderWaveEscalation += 1;
    }

    gf_SendDefenderWave(gv_defenderWaveEscalation, gv_defenderWaveTargetLane);
    Wait(90.0, c_timeAI);
    auto5AF725D8_val = gv_defenderWaveTargetLane;
    if (auto5AF725D8_val == 1) {
        gf_SendDefenderWave(gv_defenderWaveEscalation, 3);
    }
    else if (auto5AF725D8_val == 2) {
        gf_SendDefenderWave(gv_defenderWaveEscalation, 4);
    }
    else if (auto5AF725D8_val == 3) {
        gf_SendDefenderWave(gv_defenderWaveEscalation, 1);
    }
    else if (auto5AF725D8_val == 4) {
        gf_SendDefenderWave(gv_defenderWaveEscalation, 2);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendDefenderWaves_Init () {
    gt_SendDefenderWaves = TriggerCreate("gt_SendDefenderWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Flavor Line P02 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_DoMFlavorLineP02BaseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyTroopers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyTroopers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(20)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DEFENDERSWEST))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nearbyTroopers = UnitGroup("Separatist", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_nearbyTroopers, c_unitCountAlive) >= 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupRandomUnit(lv_nearbyTroopers, c_unitCountAlive), "Mission_Nova09|Line00092", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMFlavorLineP02BaseQ_Init () {
    gt_DoMFlavorLineP02BaseQ = TriggerCreate("gt_DoMFlavorLineP02BaseQ_Func");
    TriggerAddEventUnitDied(gt_DoMFlavorLineP02BaseQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Flavor Line P03 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_DoMFlavorLineP03BaseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyTroopers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyTroopers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(19)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_DEFENDERSEAST))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nearbyTroopers = UnitGroup("Separatist", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_nearbyTroopers, c_unitCountAlive) >= 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupRandomUnit(lv_nearbyTroopers, c_unitCountAlive), "Mission_Nova09|Line00090", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMFlavorLineP03BaseQ_Init () {
    gt_DoMFlavorLineP03BaseQ = TriggerCreate("gt_DoMFlavorLineP03BaseQ_Func");
    TriggerAddEventUnitDied(gt_DoMFlavorLineP03BaseQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Flavor Line P06 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_DoMFlavorLineP06BaseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyTroopers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyTroopers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(18)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_DEFENDERSNORTH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nearbyTroopers = UnitGroup("Separatist", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_nearbyTroopers, c_unitCountAlive) >= 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupRandomUnit(lv_nearbyTroopers, c_unitCountAlive), "Mission_Nova09|Line00093", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMFlavorLineP06BaseQ_Init () {
    gt_DoMFlavorLineP06BaseQ = TriggerCreate("gt_DoMFlavorLineP06BaseQ_Func");
    TriggerAddEventUnitDied(gt_DoMFlavorLineP06BaseQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Flavor Line P06 Outpost Q
//--------------------------------------------------------------------------------------------------
bool gt_DoMFlavorLineP06OutpostQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyTroopers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyTroopers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(23)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_DEFENDERSNORTH))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nearbyTroopers = UnitGroup("Separatist", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_nearbyTroopers, c_unitCountAlive) >= 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupRandomUnit(lv_nearbyTroopers, c_unitCountAlive), "Mission_Nova09|Line00091", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMFlavorLineP06OutpostQ_Init () {
    gt_DoMFlavorLineP06OutpostQ = TriggerCreate("gt_DoMFlavorLineP06OutpostQ_Func");
    TriggerAddEventUnitDied(gt_DoMFlavorLineP06OutpostQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Ping Start
//--------------------------------------------------------------------------------------------------
bool gt_NukePingStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_activeNukers, EventUnit());
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/59CCE34C"), null, EventUnitTargetPoint());
        if ((libHots_gf_PingStoredForUnit(EventUnit(), 1) == c_invalidPingId)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_01_USER), "PingNuke", EventUnitTargetPoint(), Color(100.00, 100.00, 100.00), 0.0, 270.0);
            PingSetScale(PingLastCreated(), 0.66);
            libHots_gf_StorePingForUnit(EventUnit(), 1, PingLastCreated());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukePingStart_Init () {
    gt_NukePingStart = TriggerCreate("gt_NukePingStart_Func");
    TriggerAddEventUnitAbility(gt_NukePingStart, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Ping Stop
//--------------------------------------------------------------------------------------------------
bool gt_NukePingStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_activeNukers, EventUnit());
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        if ((libHots_gf_PingStoredForUnit(EventUnit(), 1) != c_invalidPingId)) {
            PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
            libHots_gf_StorePingForUnit(EventUnit(), 1, c_invalidPingId);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukePingStop_Init () {
    gt_NukePingStop = TriggerCreate("gt_NukePingStop_Func");
    TriggerAddEventUnitAbility(gt_NukePingStop, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_NukePingStop, null, AbilityCommand("TacNukeStrike", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Launched Counter
//--------------------------------------------------------------------------------------------------
bool gt_NukeLaunchedCounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nukesLaunched += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeLaunchedCounter_Init () {
    gt_NukeLaunchedCounter = TriggerCreate("gt_NukeLaunchedCounter_Func");
    TriggerAddEventUnitAbility(gt_NukeLaunchedCounter, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuke Detonated Counter
//--------------------------------------------------------------------------------------------------
bool gt_NukeDetonatedCounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nukesDetonated += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NukeDetonatedCounter_Init () {
    gt_NukeDetonatedCounter = TriggerCreate("gt_NukeDetonatedCounter_Func");
    TriggerAddEventUnitAbility(gt_NukeDetonatedCounter, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Dies
//--------------------------------------------------------------------------------------------------
bool gt_GhostDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_activeNukers, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libComC_gf_CampaignAwardAchievement("Nova09_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostDies_Init () {
    gt_GhostDies = TriggerCreate("gt_GhostDies_Func");
    TriggerAddEventUnitDied(gt_GhostDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Davis Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_S2DavisDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClear(gv_s2DavisTransmission);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack4, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_ObjectiveDestroyXanthosComplete, true, false);
    TriggerExecute(gt_ObjectiveProtectFleetComplete, true, false);
    TriggerExecute(gt_ObjectiveKillDavisComplete, true, true);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00039", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00045", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_VictorySequence, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DavisDiesQ_Init () {
    gt_S2DavisDiesQ = TriggerCreate("gt_S2DavisDiesQ_Func");
    TriggerAddEventUnitDied(gt_S2DavisDiesQ, UnitRefFromVariable("gv_s2_Davis"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 Start Q
//--------------------------------------------------------------------------------------------------
bool gt_S2StartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00033", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova09|Line00034", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2StartQ_Init () {
    gt_S2StartQ = TriggerCreate("gt_S2StartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 Room 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2Room1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_s2_Davis, "Mission_Nova09|Line00035", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova09|Line00036", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2Room1Q_Init () {
    gt_S2Room1Q = TriggerCreate("gt_S2Room1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 Room 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2Room2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitIsAlive(gv_s2_Davis) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_s2_Davis, "Mission_Nova09|Line00037", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s2DavisTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2Room2Q_Init () {
    gt_S2Room2Q = TriggerCreate("gt_S2Room2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 Room 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_S2Room3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitIsAlive(gv_s2_Davis) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_s2_Davis, "Mission_Nova09|Line00038", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s2DavisTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    if ((UnitIsAlive(gv_s2_Davis) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_s2_Davis, "Mission_Nova09|Line00079", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_s2DavisTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2Room3Q_Init () {
    gt_S2Room3Q = TriggerCreate("gt_S2Room3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 Room Trigger 1
//--------------------------------------------------------------------------------------------------
bool gt_S2RoomTrigger1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2Room1Q, true, false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_06_DEFENDERSNORTH, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(1))), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitKill(UnitFromId(1725033984));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2RoomTrigger1_Init () {
    gt_S2RoomTrigger1 = TriggerCreate("gt_S2RoomTrigger1_Func");
    TriggerAddEventUnitRegion(gt_S2RoomTrigger1, UnitRefFromVariable("gv_nova"), RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 Room Trigger 2
//--------------------------------------------------------------------------------------------------
bool gt_S2RoomTrigger2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2Room2Q, true, false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_06_DEFENDERSNORTH, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(1))), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitKill(UnitFromId(217492398));
    ActorSend(ActorFromDoodad(DoodadFromId(777551143)), "Signal DoodadDeath");
    Wait(3.0, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(1171132922)), "Signal DoodadDeath");
    Wait(0.25, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(2139658585)), "Signal DoodadDeath");
    Wait(1.0, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(229688456)), "Signal DoodadDeath");
    Wait(0.5, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(549644400)), "Signal DoodadDeath");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2RoomTrigger2_Init () {
    gt_S2RoomTrigger2 = TriggerCreate("gt_S2RoomTrigger2_Func");
    TriggerAddEventUnitRegion(gt_S2RoomTrigger2, UnitRefFromVariable("gv_nova"), RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 Room Trigger 3
//--------------------------------------------------------------------------------------------------
bool gt_S2RoomTrigger3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2DavisFacesNova, true);
    TriggerExecute(gt_S2Room3Q, true, false);
    UnitIssueOrder(UnitFromId(2019091813), Order(AbilityCommand("MoebiusLabDoorsWideLeftLowered", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitGroupIssueOrder(UnitGroup("Separatist", gv_pLAYER_06_DEFENDERSNORTH, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(620788261)), c_orderQueueReplace);
    if ((libNtve_gf_UnitIsVisibleToPlayer(gv_nova, gv_pLAYER_06_DEFENDERSNORTH) == false)) {
        CatalogFieldValueSet(c_gameCatalogUnit, "InvisibleTargetDummy", "LifeStart", gv_pLAYER_01_USER, "20");
        CatalogFieldValueSet(c_gameCatalogUnit, "InvisibleTargetDummy", "LifeMax", gv_pLAYER_01_USER, "20");
        CatalogFieldValueSet(c_gameCatalogUnit, "InvisibleTargetDummy", "LifeRegenRate", gv_pLAYER_01_USER, "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "InvisibleTargetDummy", "LifeArmor", gv_pLAYER_01_USER, "0");
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(160020133));
        UnitBehaviorRemove(UnitLastCreated(), "ImmuneToDamage", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1843194380));
        UnitBehaviorRemove(UnitLastCreated(), "ImmuneToDamage", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1379701247));
        UnitBehaviorRemove(UnitLastCreated(), "ImmuneToDamage", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1299721095));
        UnitBehaviorRemove(UnitLastCreated(), "ImmuneToDamage", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2RoomTrigger3_Init () {
    gt_S2RoomTrigger3 = TriggerCreate("gt_S2RoomTrigger3_Func");
    TriggerAddEventUnitRegion(gt_S2RoomTrigger3, UnitRefFromVariable("gv_nova"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 Davis Faces Nova
//--------------------------------------------------------------------------------------------------
bool gt_S2DavisFacesNova_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_s2_Davis) == true))) {
            return false;
        }

        if (!((AbsF((UnitGetFacing(gv_s2_Davis) - AngleBetweenPoints(UnitGetPosition(gv_s2_Davis), UnitGetPosition(gv_nova)))) > 15.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_s2_Davis, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_nova)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2DavisFacesNova_Init () {
    gt_S2DavisFacesNova = TriggerCreate("gt_S2DavisFacesNova_Func");
    TriggerEnable(gt_S2DavisFacesNova, false);
    TriggerAddEventTimePeriodic(gt_S2DavisFacesNova, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DoM Escape Region
//--------------------------------------------------------------------------------------------------
bool gt_DoMEscapeRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_DEFENDERSNORTH))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoMEscapeRegion_Init () {
    gt_DoMEscapeRegion = TriggerCreate("gt_DoMEscapeRegion_Func");
    TriggerAddEventUnitRegion(gt_DoMEscapeRegion, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 ExplosionCameraShake
//--------------------------------------------------------------------------------------------------
bool gt_S2ExplosionCameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cameraPosition[0] = PointGetX(CameraGetTarget(1));
    lv_cameraPosition[1] = (PointGetY(CameraGetTarget(1))-(Cos(CameraGetPitch(1))*CameraGetDistance(1)));
    lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, CameraGetTarget(1))+(Sin(CameraGetPitch(1))*CameraGetDistance(1)));
    lv_effectPosition[0] = PointGetX(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_effectPosition[1] = PointGetY(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 2.5, 100.0, 0.15);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2ExplosionCameraShake_Init () {
    gt_S2ExplosionCameraShake = TriggerCreate("gt_S2ExplosionCameraShake_Func");
    TriggerAddEventPlayerEffectUsed(gt_S2ExplosionCameraShake, c_playerAny, "NovaCrashingDebrisDeathSearchDamage");
    TriggerAddEventPlayerEffectUsed(gt_S2ExplosionCameraShake, c_playerAny, "NovaExplodingMachineryDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8953B216_g;
    int auto8953B216_var;

    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers();
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DEFENDERSWEST, "Ghost", "AIGhost", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DEFENDERSWEST, "GhostAcademy", "AIGhostAcademy", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_03_DEFENDERSEAST, "Ghost", "AIGhost", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_03_DEFENDERSEAST, "GhostAcademy", "AIGhostAcademy", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_06_DEFENDERSNORTH, "Ghost", "AIGhost", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_06_DEFENDERSNORTH, "GhostAcademy", "AIGhostAcademy", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_07_DOMINION, "NovaHyperion", "AIHyperion", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DEFENDERSWEST, "Battlecruiser", "AIBattlecruiser", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_03_DEFENDERSEAST, "Battlecruiser", "AIBattlecruiser", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_06_DEFENDERSNORTH, "Battlecruiser", "AIBattlecruiser", false);
    libNtve_gf_DeclareNextTown(gv_pLAYER_06_DEFENDERSNORTH, PointFromId(647084373));
    auto8953B216_g = gv_defendersPlayerGroup;
    auto8953B216_var = -1;
    while (true) {
        auto8953B216_var = PlayerGroupNextPlayer(auto8953B216_g, auto8953B216_var);
        if (auto8953B216_var < 0) { break; }
        AINearestTownBullyRebuild(auto8953B216_var, true);
    }
    cai_runall();
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_AIUpgradeHardBrutal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradeCasualNormal, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6BE12AA9_g;
    int auto6BE12AA9_var;
    playergroup auto387F0939_g;
    int auto387F0939_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto6BE12AA9_g = gv_defendersPlayerGroup;
    auto6BE12AA9_var = -1;
    while (true) {
        auto6BE12AA9_var = PlayerGroupNextPlayer(auto6BE12AA9_g, auto6BE12AA9_var);
        if (auto6BE12AA9_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6BE12AA9_var, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto6BE12AA9_var, "TerranVehicleAndShipWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    auto387F0939_g = gv_defendersPlayerGroup;
    auto387F0939_var = -1;
    while (true) {
        auto387F0939_var = PlayerGroupNextPlayer(auto387F0939_g, auto387F0939_var);
        if (auto387F0939_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto387F0939_var, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto387F0939_var, "TerranVehicleAndShipArmorsLevel1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto387F0939_var, "PersonalCloaking", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeCasualNormal_Init () {
    gt_AIUpgradeCasualNormal = TriggerCreate("gt_AIUpgradeCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2C2010B0_g;
    int auto2C2010B0_var;
    playergroup auto1CFAEDD8_g;
    int auto1CFAEDD8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto2C2010B0_g = gv_defendersPlayerGroup;
    auto2C2010B0_var = -1;
    while (true) {
        auto2C2010B0_var = PlayerGroupNextPlayer(auto2C2010B0_g, auto2C2010B0_var);
        if (auto2C2010B0_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2C2010B0_var, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C2010B0_var, "TerranVehicleAndShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C2010B0_var, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C2010B0_var, "TerranVehicleAndShipArmorsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    auto1CFAEDD8_g = gv_defendersPlayerGroup;
    auto1CFAEDD8_var = -1;
    while (true) {
        auto1CFAEDD8_var = PlayerGroupNextPlayer(auto1CFAEDD8_g, auto1CFAEDD8_var);
        if (auto1CFAEDD8_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto1CFAEDD8_var, "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto1CFAEDD8_var, "TerranVehicleAndShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto1CFAEDD8_var, "TerranInfantryArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(auto1CFAEDD8_var, "TerranVehicleAndShipArmorsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeHardBrutal_Init () {
    gt_AIUpgradeHardBrutal = TriggerCreate("gt_AIUpgradeHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DEFENDERSWEST, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DEFENDERSWEST, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_DEFENDERSEAST, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_DEFENDERSEAST, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_DEFENDERSNORTH, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_DEFENDERSNORTH, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_07_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_07_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Controller
//--------------------------------------------------------------------------------------------------
bool gt_XanthosController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyHostileUnits;
    fixed lv_engageRadius;

    // Automatic Variable Declarations
    unitgroup auto9C6660B8_g;
    int auto9C6660B8_u;
    unit auto9C6660B8_var;

    // Variable Initialization
    lv_nearbyHostileUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_xanthos) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_xanthosTargetGorgon == null)) {
        if ((DistanceBetweenPoints(UnitGetPosition(gv_xanthos), PointFromId(599)) != 0.0)) {
            if ((UnitHasBehavior2(gv_xanthos, "NovaXanthosTravelMode") == false)) {
                UnitIssueOrder(gv_xanthos, Order(AbilityCommand("NovaXanthosToggleTravelMode", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_xanthos, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(599)), c_orderQueueReplace);
                if ((DistanceBetweenPoints(UnitGetPosition(gv_xanthos), gv_lastXanthosLocation) == 0.0)) {
                    auto9C6660B8_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_xanthos), 5.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto9C6660B8_u = UnitGroupCount(auto9C6660B8_g, c_unitCountAll);
                    for (;; auto9C6660B8_u -= 1) {
                        auto9C6660B8_var = UnitGroupUnitFromEnd(auto9C6660B8_g, auto9C6660B8_u);
                        if (auto9C6660B8_var == null) { break; }
                        UnitKill(auto9C6660B8_var);
                    }
                }

                gv_lastXanthosLocation = UnitGetPosition(gv_xanthos);
            }
        }
        else {
            if ((AbsF((PointGetFacing(PointFromId(599)) - UnitGetFacing(gv_xanthos))) > 5.0)) {
                UnitIssueOrder(gv_xanthos, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(599), 1.0, Round(PointGetFacing(PointFromId(599))))), c_orderQueueReplace);
            }
            else {
                if ((UnitHasBehavior2(gv_xanthos, "NovaXanthosTravelMode") == true)) {
                    UnitIssueOrder(gv_xanthos, Order(AbilityCommand("NovaXanthosToggleTravelMode", 1)), c_orderQueueReplace);
                }
                else {
                    if ((UnitHasBehavior2(gv_xanthos, "NovaXanthosRepairMode") == false)) {
                        UnitIssueOrder(gv_xanthos, Order(AbilityCommand("NovaXanthosToggleRepairMode", 0)), c_orderQueueReplace);
                    }

                }
            }
        }
    }
    else {
        if ((UnitHasBehavior2(gv_xanthos, "NovaXanthosTravelMode") == true)) {
            lv_engageRadius = 10.0;
        }
        else {
            lv_engageRadius = 20.0;
        }
        UnitGroupAddUnitGroup(lv_nearbyHostileUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_xanthos), lv_engageRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nearbyHostileUnits, UnitGroup(null, gv_pLAYER_07_DOMINION, RegionCircle(UnitGetPosition(gv_xanthos), lv_engageRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nearbyHostileUnits, UnitGroup(null, gv_pLAYER_05_GORGONS, RegionCircle(UnitGetPosition(gv_xanthos), lv_engageRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        if ((UnitHasBehavior2(gv_xanthos, "NovaXanthosRepairMode") == true)) {
            UnitIssueOrder(gv_xanthos, Order(AbilityCommand("NovaXanthosToggleRepairMode", 1)), c_orderQueueReplace);
        }
        else {
            if ((UnitGroupCount(lv_nearbyHostileUnits, c_unitCountAlive) == 0)) {
                if ((UnitHasBehavior2(gv_xanthos, "NovaXanthosTravelMode") == false)) {
                    UnitIssueOrder(gv_xanthos, Order(AbilityCommand("NovaXanthosToggleTravelMode", 0)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(gv_xanthos, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_xanthosTargetGorgon)), c_orderQueueReplace);
                }
            }
            else {
                if ((UnitHasBehavior2(gv_xanthos, "NovaXanthosTravelMode") == true)) {
                    UnitIssueOrder(gv_xanthos, Order(AbilityCommand("NovaXanthosToggleTravelMode", 1)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(gv_xanthos, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_xanthosTargetGorgon)), c_orderQueueReplace);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XanthosController_Init () {
    gt_XanthosController = TriggerCreate("gt_XanthosController_Func");
    TriggerAddEventTimePeriodic(gt_XanthosController, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti Nuke Logic
//--------------------------------------------------------------------------------------------------
bool gt_AntiNukeLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyDefenderForces;
    unitgroup lv_availableOrbitalCommands;

    // Automatic Variable Declarations
    unitgroup auto3691BA6B_g;
    int auto3691BA6B_u;
    unit auto3691BA6B_var;
    unitgroup autoE26E977B_g;
    int autoE26E977B_u;
    unit autoE26E977B_var;

    // Variable Initialization
    lv_nearbyDefenderForces = UnitGroupEmpty();
    lv_availableOrbitalCommands = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_nearbyDefenderForces, UnitGroup(null, gv_pLAYER_02_DEFENDERSWEST, RegionCircle(UnitGetPosition(gv_nova), 18.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_nearbyDefenderForces, UnitGroup(null, gv_pLAYER_03_DEFENDERSEAST, RegionCircle(UnitGetPosition(gv_nova), 18.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_nearbyDefenderForces, UnitGroup(null, gv_pLAYER_06_DEFENDERSNORTH, RegionCircle(UnitGetPosition(gv_nova), 18.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto3691BA6B_g = lv_nearbyDefenderForces;
    auto3691BA6B_u = UnitGroupCount(auto3691BA6B_g, c_unitCountAll);
    for (;; auto3691BA6B_u -= 1) {
        auto3691BA6B_var = UnitGroupUnitFromEnd(auto3691BA6B_g, auto3691BA6B_u);
        if (auto3691BA6B_var == null) { break; }
        libNtve_gf_AICast(auto3691BA6B_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_nova)));
    }
    if ((libNtve_gf_UnitIsVisibleToPlayer(gv_nova, gv_pLAYER_06_DEFENDERSNORTH) == false)) {
        autoE26E977B_g = UnitGroup("OrbitalCommand", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE26E977B_u = UnitGroupCount(autoE26E977B_g, c_unitCountAll);
        for (;; autoE26E977B_u -= 1) {
            autoE26E977B_var = UnitGroupUnitFromEnd(autoE26E977B_g, autoE26E977B_u);
            if (autoE26E977B_var == null) { break; }
            if (((UnitGetOwner(autoE26E977B_var) == gv_pLAYER_02_DEFENDERSWEST) || (UnitGetOwner(autoE26E977B_var) == gv_pLAYER_03_DEFENDERSEAST) || (UnitGetOwner(autoE26E977B_var) == gv_pLAYER_06_DEFENDERSNORTH)) && (UnitGetPropertyFixed(autoE26E977B_var, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                UnitGroupAdd(lv_availableOrbitalCommands, autoE26E977B_var);
            }

        }
        if ((UnitGroupCount(lv_availableOrbitalCommands, c_unitCountAlive) >= 1)) {
            while ((libNtve_gf_UnitIsVisibleToPlayer(gv_nova, gv_pLAYER_06_DEFENDERSNORTH) == false)) {
                libNtve_gf_AICast(UnitGroupRandomUnit(lv_availableOrbitalCommands, c_unitCountAlive), OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), UnitGetPosition(gv_nova)));
                Wait(0.25, c_timeGame);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiNukeLogic_Init () {
    gt_AntiNukeLogic = TriggerCreate("gt_AntiNukeLogic_Func");
    TriggerAddEventUnitAbility(gt_AntiNukeLogic, UnitRefFromVariable("gv_nova"), AbilityCommand("HeroNuclearStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Ghost Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstGhostTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupFilter("Ghost", c_playerAny, AIWaveGetUnits(EventPlayerWave()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Nova_Warning_NuclearArsenal", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00080", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00081", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstGhostTransmissionQ_Init () {
    gt_FirstGhostTransmissionQ = TriggerCreate("gt_FirstGhostTransmissionQ_Func");
    TriggerAddEventPlayerAIWave(gt_FirstGhostTransmissionQ, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00003", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00004", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackTransmissionQ_Init () {
    gt_FirstAttackTransmissionQ = TriggerCreate("gt_FirstAttackTransmissionQ_Func");
    TriggerAddEventPlayerAIWave(gt_FirstAttackTransmissionQ, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/BA4FA2ED"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Dominion Fleet Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatDominionFleetDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyXanthosFailed, true, false);
    TriggerExecute(gt_ObjectiveProtectFleetFailed, true, false);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7C3FF7DB"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatDominionFleetDestroyed_Init () {
    gt_DefeatDominionFleetDestroyed = TriggerCreate("gt_DefeatDominionFleetDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Nova Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatNovaDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/103BEBCD"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatNovaDead_Init () {
    gt_DefeatNovaDead = TriggerCreate("gt_DefeatNovaDead_Func");
    TriggerEnable(gt_DefeatNovaDead, false);
    TriggerAddEventUnitDied(gt_DefeatNovaDead, UnitRefFromVariable("gv_nova"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyZergBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyZergBase3) == c_objectiveStateCompleted)) {
        libComC_gf_CampaignAwardAchievement("Nova09_1", gv_pLAYER_01_USER);
    }

    if ((gv_objectiveProtectFleetCount == 5) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova09_3", gv_pLAYER_01_USER);
    }

    if ((gv_xanthosAttackRunNumber < 3) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova09_Mastery", gv_pLAYER_01_USER);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() <= 1260.0)) {
        libComC_gf_CampaignAwardAchievement("Anniversary_Nova09", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/69B8D28E"), IntToText(gv_nukesLaunched));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/72F23243"), IntToText(gv_nukesDetonated));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/C3C11B3B"), IntToText((5 - gv_objectiveProtectFleetCount)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D528CE02"), IntToText(gv_xanthosAttackRunNumber));
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNCMI_gf_DisplayMissionTip();
    Wait(libNCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect Fleet Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtectFleetCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova09Primary01");
    libCMMI_gf_SetMissionObjectiveProgress("Nova09Primary01", gv_objectiveProtectFleetCount);
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtectFleetCreate_Init () {
    gt_ObjectiveProtectFleetCreate = TriggerCreate("gt_ObjectiveProtectFleetCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect Fleet Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtectFleetComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveProtectFleetCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova09Primary01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtectFleetComplete_Init () {
    gt_ObjectiveProtectFleetComplete = TriggerCreate("gt_ObjectiveProtectFleetComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect Fleet Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtectFleetUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveProtectFleetCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova09Primary01", gv_objectiveProtectFleetCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtectFleetUpdate_Init () {
    gt_ObjectiveProtectFleetUpdate = TriggerCreate("gt_ObjectiveProtectFleetUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Protect Fleet Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtectFleetFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveProtectFleetCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova09Primary01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtectFleetFailed_Init () {
    gt_ObjectiveProtectFleetFailed = TriggerCreate("gt_ObjectiveProtectFleetFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Xanthos Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyXanthosCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova09Primary03");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyXanthosCreate_Init () {
    gt_ObjectiveDestroyXanthosCreate = TriggerCreate("gt_ObjectiveDestroyXanthosCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Xanthos Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyXanthosComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyXanthosCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova09Primary03", libComC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyXanthosComplete_Init () {
    gt_ObjectiveDestroyXanthosComplete = TriggerCreate("gt_ObjectiveDestroyXanthosComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Xanthos Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyXanthosFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyXanthosCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova09Primary03", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyXanthosFailed_Init () {
    gt_ObjectiveDestroyXanthosFailed = TriggerCreate("gt_ObjectiveDestroyXanthosFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Davis Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillDavisCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova09Primary04");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillDavisCreate_Init () {
    gt_ObjectiveKillDavisCreate = TriggerCreate("gt_ObjectiveKillDavisCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Davis Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillDavisComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillDavisCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova09Primary04", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillDavisComplete_Init () {
    gt_ObjectiveKillDavisComplete = TriggerCreate("gt_ObjectiveKillDavisComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Davis Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillDavisFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillDavisCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova09Primary04", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillDavisFailed_Init () {
    gt_ObjectiveKillDavisFailed = TriggerCreate("gt_ObjectiveKillDavisFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    TriggerExecute(gt_BriefingScene00RepairYards, true, true);
    TriggerExecute(gt_BriefingScene01Xanthos, true, true);
    TriggerExecute(gt_BriefingScene02XanthosWeapons, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 - Repair Yards
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00RepairYards_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto92490F47_g;
    int auto92490F47_u;
    unit auto92490F47_var;
    unitgroup autoF377DF20_g;
    int autoF377DF20_u;
    unit autoF377DF20_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto92490F47_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto92490F47_u = UnitGroupCount(auto92490F47_g, c_unitCountAll);
    for (;; auto92490F47_u -= 1) {
        auto92490F47_var = UnitGroupUnitFromEnd(auto92490F47_g, auto92490F47_u);
        if (auto92490F47_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto92490F47_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto92490F47_var);
            libNtve_gf_PauseUnit(auto92490F47_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoF377DF20_g = gv_cinematicHiddenUnits;
    autoF377DF20_u = UnitGroupCount(autoF377DF20_g, c_unitCountAll);
    for (;; autoF377DF20_u -= 1) {
        autoF377DF20_var = UnitGroupUnitFromEnd(autoF377DF20_g, autoF377DF20_u);
        if (autoF377DF20_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF377DF20_var, false);
    }
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(11), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(96317961), 11.0, -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.0, 0.0, 12.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova09_00");
    Wait(12.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00RepairYards_Init () {
    gt_BriefingScene00RepairYards = TriggerCreate("gt_BriefingScene00RepairYards_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 - Xanthos
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01Xanthos_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6FB61C73_g;
    int auto6FB61C73_u;
    unit auto6FB61C73_var;
    unitgroup auto8B4C56C1_g;
    int auto8B4C56C1_u;
    unit auto8B4C56C1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6FB61C73_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto6FB61C73_u = UnitGroupCount(auto6FB61C73_g, c_unitCountAll);
    for (;; auto6FB61C73_u -= 1) {
        auto6FB61C73_var = UnitGroupUnitFromEnd(auto6FB61C73_g, auto6FB61C73_u);
        if (auto6FB61C73_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto6FB61C73_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto6FB61C73_var);
            libNtve_gf_PauseUnit(auto6FB61C73_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto8B4C56C1_g = gv_cinematicHiddenUnits;
    auto8B4C56C1_u = UnitGroupCount(auto8B4C56C1_g, c_unitCountAll);
    for (;; auto8B4C56C1_u -= 1) {
        auto8B4C56C1_var = UnitGroupUnitFromEnd(auto8B4C56C1_g, auto8B4C56C1_u);
        if (auto8B4C56C1_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8B4C56C1_var, false);
    }
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(595), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(102566339), 10.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova09_01");
    Wait(12.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01Xanthos_Init () {
    gt_BriefingScene01Xanthos = TriggerCreate("gt_BriefingScene01Xanthos_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02 - Xanthos Weapons
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02XanthosWeapons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFC6578C1_g;
    int autoFC6578C1_u;
    unit autoFC6578C1_var;
    unitgroup auto461D183C_g;
    int auto461D183C_u;
    unit auto461D183C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFC6578C1_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoFC6578C1_u = UnitGroupCount(autoFC6578C1_g, c_unitCountAll);
    for (;; autoFC6578C1_u -= 1) {
        autoFC6578C1_var = UnitGroupUnitFromEnd(autoFC6578C1_g, autoFC6578C1_u);
        if (autoFC6578C1_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoFC6578C1_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoFC6578C1_var);
            libNtve_gf_PauseUnit(autoFC6578C1_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto461D183C_g = gv_cinematicHiddenUnits;
    auto461D183C_u = UnitGroupCount(auto461D183C_g, c_unitCountAll);
    for (;; auto461D183C_u -= 1) {
        auto461D183C_var = UnitGroupUnitFromEnd(auto461D183C_g, auto461D183C_u);
        if (auto461D183C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto461D183C_var, false);
    }
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(339461584), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(208786291), 7.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova09_02");
    Wait(6.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(770841095), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1680485165), 6.0, -1, 10, true);
    Wait(6.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02XanthosWeapons_Init () {
    gt_BriefingScene02XanthosWeapons = TriggerCreate("gt_BriefingScene02XanthosWeapons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto11B21E61_g;
    int auto11B21E61_u;
    unit auto11B21E61_var;
    unitgroup auto5ADB5797_g;
    int auto5ADB5797_u;
    unit auto5ADB5797_var;
    unitgroup auto756DD7AE_g;
    int auto756DD7AE_u;
    unit auto756DD7AE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto11B21E61_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto11B21E61_u = UnitGroupCount(auto11B21E61_g, c_unitCountAll);
    for (;; auto11B21E61_u -= 1) {
        auto11B21E61_var = UnitGroupUnitFromEnd(auto11B21E61_g, auto11B21E61_u);
        if (auto11B21E61_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto11B21E61_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto11B21E61_var);
            libNtve_gf_PauseUnit(auto11B21E61_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto5ADB5797_g = UnitGroup("MineralField", 0, null, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5ADB5797_u = UnitGroupCount(auto5ADB5797_g, c_unitCountAll);
    for (;; auto5ADB5797_u -= 1) {
        auto5ADB5797_var = UnitGroupUnitFromEnd(auto5ADB5797_g, auto5ADB5797_u);
        if (auto5ADB5797_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5ADB5797_var, true);
    }
    auto756DD7AE_g = UnitGroup("VespeneGeyser", 0, null, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto756DD7AE_u = UnitGroupCount(auto756DD7AE_g, c_unitCountAll);
    for (;; auto756DD7AE_u -= 1) {
        auto756DD7AE_var = UnitGroupUnitFromEnd(auto756DD7AE_g, auto756DD7AE_u);
        if (auto756DD7AE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto756DD7AE_var, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack2, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto32F11588_g;
    int auto32F11588_u;
    unit auto32F11588_var;
    unitgroup auto82529B02_g;
    int auto82529B02_u;
    unit auto82529B02_var;
    unitgroup autoE7CE1573_g;
    int autoE7CE1573_u;
    unit autoE7CE1573_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    auto32F11588_g = gv_cinematicTempUnits;
    auto32F11588_u = UnitGroupCount(auto32F11588_g, c_unitCountAll);
    for (;; auto32F11588_u -= 1) {
        auto32F11588_var = UnitGroupUnitFromEnd(auto32F11588_g, auto32F11588_u);
        if (auto32F11588_var == null) { break; }
        UnitRemove(auto32F11588_var);
    }
    auto82529B02_g = gv_cinematicHiddenUnits;
    auto82529B02_u = UnitGroupCount(auto82529B02_g, c_unitCountAll);
    for (;; auto82529B02_u -= 1) {
        auto82529B02_var = UnitGroupUnitFromEnd(auto82529B02_g, auto82529B02_u);
        if (auto82529B02_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto82529B02_var, true);
    }
    autoE7CE1573_g = gv_cinematicPausedUnits;
    autoE7CE1573_u = UnitGroupCount(autoE7CE1573_g, c_unitCountAll);
    for (;; autoE7CE1573_u -= 1) {
        autoE7CE1573_var = UnitGroupUnitFromEnd(autoE7CE1573_g, autoE7CE1573_u);
        if (autoE7CE1573_var == null) { break; }
        libNtve_gf_PauseUnit(autoE7CE1573_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(11), true, false);
    RegionPlayableMapSet(RegionFromId(9));
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    TriggerEnable(gt_DefeatBaseDead, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD16F8588_g;
    int autoD16F8588_u;
    unit autoD16F8588_var;
    unitgroup autoB34ACD26_g;
    int autoB34ACD26_u;
    unit autoB34ACD26_var;
    unitgroup auto877ECE92_g;
    int auto877ECE92_u;
    unit auto877ECE92_var;
    unitgroup autoD6DFD6FD_g;
    int autoD6DFD6FD_u;
    unit autoD6DFD6FD_var;
    unitgroup auto23ABEE13_g;
    int auto23ABEE13_u;
    unit auto23ABEE13_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    autoD16F8588_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD16F8588_u = UnitGroupCount(autoD16F8588_g, c_unitCountAll);
    for (;; autoD16F8588_u -= 1) {
        autoD16F8588_var = UnitGroupUnitFromEnd(autoD16F8588_g, autoD16F8588_u);
        if (autoD16F8588_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoD16F8588_var) == false) && (autoD16F8588_var != gv_xanthos)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoD16F8588_var);
            libNtve_gf_PauseUnit(autoD16F8588_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoB34ACD26_g = gv_cinematicHiddenUnits;
    autoB34ACD26_u = UnitGroupCount(autoB34ACD26_g, c_unitCountAll);
    for (;; autoB34ACD26_u -= 1) {
        autoB34ACD26_var = UnitGroupUnitFromEnd(autoB34ACD26_g, autoB34ACD26_u);
        if (autoB34ACD26_var == null) { break; }
        if ((autoB34ACD26_var != gv_xanthos)) {
            libNtve_gf_ShowHideUnit(autoB34ACD26_var, false);
        }

    }
    auto877ECE92_g = UnitGroup("TerranDropPod", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto877ECE92_u = UnitGroupCount(auto877ECE92_g, c_unitCountAll);
    for (;; auto877ECE92_u -= 1) {
        auto877ECE92_var = UnitGroupUnitFromEnd(auto877ECE92_g, auto877ECE92_u);
        if (auto877ECE92_var == null) { break; }
        UnitRemove(auto877ECE92_var);
    }
    autoD6DFD6FD_g = gv_midDropPodCleanup;
    autoD6DFD6FD_u = UnitGroupCount(autoD6DFD6FD_g, c_unitCountAll);
    for (;; autoD6DFD6FD_u -= 1) {
        autoD6DFD6FD_var = UnitGroupUnitFromEnd(autoD6DFD6FD_g, autoD6DFD6FD_u);
        if (autoD6DFD6FD_var == null) { break; }
        UnitRemove(autoD6DFD6FD_var);
    }
    if ((UnitIsAlive(gv_xanthos) == true)) {
        UnitKill(gv_xanthos);
    }

    UnitSetPosition(gv_xanthos, PointFromId(1892087478), false);
    UnitSetFacing(gv_xanthos, 246.17, 0.0);
    UnitSetOwner(gv_xanthos, 0, false);
    UnitGroupAdd(gv_cinematicTempUnits, gv_xanthos);
    ActorSend(libNtve_gf_MainActorofUnit(gv_xanthos), "Signal DeathAnim");
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1813872834));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_midCineNova = UnitLastCreated();
    auto23ABEE13_g = UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto23ABEE13_u = UnitGroupCount(auto23ABEE13_g, c_unitCountAll);
    for (;; auto23ABEE13_u -= 1) {
        auto23ABEE13_var = UnitGroupUnitFromEnd(auto23ABEE13_g, auto23ABEE13_u);
        if (auto23ABEE13_var == null) { break; }
        libNtve_gf_CreateUnitsAtPoint2(1, UnitGetType(auto23ABEE13_var), c_unitCreateIgnorePlacement, gv_pLAYER_06_DEFENDERSNORTH, UnitGetPosition(auto23ABEE13_var));
        UnitSetOwner(UnitLastCreated(), 0, false);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 5.0);
        UnitDamage(UnitLastCreated(), "GuassRifle", UnitLastCreated(), 5.0);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
    }
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(7), "Smoke_Battle");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(7), "Korhal_SiegeTank_Destroyed");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(7), "SmokePillarsTall");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(7), "SmokePillar_Tall_Generic");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(7), "GenericFire_Medium_Area");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(7), "FireMedium");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1686628030), 0.0, -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Shake", 0.0, 5.0, 7.0);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack5, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    ActorSend(libNtve_gf_MainActorofUnit(gv_midCineXanthos), "Signal DeathAnim");
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00029", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(582274510), 5.0, -1, 10, true);
    Wait(3.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Shake", 0.0, 0.7, 2.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00030", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 4.0);
    UnitIssueOrder(gv_midCineNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(411957462)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_ShowHideUnit(gv_nova, true);
    UnitSetPosition(gv_nova, PointFromId(528), false);
    UnitSetFacing(gv_nova, PointGetFacing(PointFromId(528)), 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_nova, "RefSet ::global.Attachee ::Self");
    ActorSend(ActorFromDoodad(DoodadFromId(149909154)), "Signal AttachToRamp");
    ActorSend(ActorFromDoodad(DoodadFromId(149909154)), "AnimBracketStart Cover Cover,Start Cover Cover,End 0 8.500000 AsDuration");
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(475552139), 0.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova09|Line00031", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova09|Line00032", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    AnimWait(ActorFromDoodad(DoodadFromId(149909154)), "Cover", 0.0, c_animationOffsetEnd);
    Wait(0.5, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(149909154)), "Signal DetachFromRamp");
    UnitSetPosition(gv_nova, PointFromId(528), false);
    libNtve_gf_PauseUnit(gv_nova, false);
    UnitBehaviorRemove(gv_nova, "SuppressMoving", 1);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(430367632)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(475552139), 0.0, -1, 10, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto7CD582BA_g;
    int auto7CD582BA_u;
    unit auto7CD582BA_var;
    unitgroup auto87CE9169_g;
    int auto87CE9169_u;
    unit auto87CE9169_var;
    unitgroup autoBA1A447E_g;
    int autoBA1A447E_u;
    unit autoBA1A447E_var;
    unitgroup auto24AF580A_g;
    int auto24AF580A_u;
    unit auto24AF580A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    auto7CD582BA_g = gv_cinematicTempUnits;
    auto7CD582BA_u = UnitGroupCount(auto7CD582BA_g, c_unitCountAll);
    for (;; auto7CD582BA_u -= 1) {
        auto7CD582BA_var = UnitGroupUnitFromEnd(auto7CD582BA_g, auto7CD582BA_u);
        if (auto7CD582BA_var == null) { break; }
        UnitRemove(auto7CD582BA_var);
    }
    auto87CE9169_g = gv_cinematicHiddenUnits;
    auto87CE9169_u = UnitGroupCount(auto87CE9169_g, c_unitCountAll);
    for (;; auto87CE9169_u -= 1) {
        auto87CE9169_var = UnitGroupUnitFromEnd(auto87CE9169_g, auto87CE9169_u);
        if (auto87CE9169_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto87CE9169_var, true);
    }
    autoBA1A447E_g = gv_cinematicPausedUnits;
    autoBA1A447E_u = UnitGroupCount(autoBA1A447E_g, c_unitCountAll);
    for (;; autoBA1A447E_u -= 1) {
        autoBA1A447E_var = UnitGroupUnitFromEnd(autoBA1A447E_g, autoBA1A447E_u);
        if (autoBA1A447E_var == null) { break; }
        libNtve_gf_PauseUnit(autoBA1A447E_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    RegionPlayableMapSet(RegionFromId(10));
    CameraSetData(PlayerGroupAll(), "Dflt2");
    TriggerEnable(gt_DefeatBaseDead, false);
    libNtve_gf_PauseUnit(gv_nova, false);
    if ((gv_cinematicCompleted == false)) {
        UnitSetPosition(gv_nova, PointFromId(528), false);
        UnitSetFacing(gv_nova, PointGetFacing(PointFromId(528)), 0.0);
        ActorSend(ActorFromDoodad(DoodadFromId(149909154)), "AnimBracketStop Cover Instant");
        ActorSend(ActorFromDoodad(DoodadFromId(149909154)), "AnimBracketStart Cover Cover,Start Cover Cover,End Instant");
        ActorSend(ActorFromDoodad(DoodadFromId(149909154)), "Signal DetachFromRamp");
        UnitSetPosition(gv_nova, PointFromId(528), false);
        UnitBehaviorRemove(gv_nova, "SuppressMoving", 1);
        UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(430367632)), c_orderQueueReplace);
    }

    ActorSend(ActorFromDoodad(DoodadFromId(599605978)), "Signal DoodadDeath");
    ActorSend(ActorFromDoodad(DoodadFromId(1629458597)), "Signal DoodadDeath");
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_01_USER), gv_pLAYER_01_USER, false);
    UnitSelect(gv_nova, gv_pLAYER_01_USER, true);
    ObjectiveShow(gv_objectiveDestroyZergBase2, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyZergBase, PlayerGroupAll(), false);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "Smoke_Battle");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "Korhal_SiegeTank_Destroyed");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "SmokePillarsTall");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "SmokePillar_Tall_Generic");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "GenericFire_Medium_Area");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(7), "FireMedium");
    auto24AF580A_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto24AF580A_u = UnitGroupCount(auto24AF580A_g, c_unitCountAll);
    for (;; auto24AF580A_u -= 1) {
        auto24AF580A_var = UnitGroupUnitFromEnd(auto24AF580A_g, auto24AF580A_u);
        if (auto24AF580A_var == null) { break; }
        if ((auto24AF580A_var != gv_nova) && (libNtve_gf_UnitInRegion(auto24AF580A_var, RegionFromId(9)) == true)) {
            UnitRemove(auto24AF580A_var);
        }

    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 15.0, 24.0, CameraInfoGetTarget(CameraInfoFromId(475552139)), 3.0);
        libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, 32.0, 24.0, CameraInfoGetTarget(CameraInfoFromId(475552139)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto726B61FC_g;
    int auto726B61FC_u;
    unit auto726B61FC_var;
    unitgroup auto5B06091C_g;
    int auto5B06091C_u;
    unit auto5B06091C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto726B61FC_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto726B61FC_u = UnitGroupCount(auto726B61FC_g, c_unitCountAll);
    for (;; auto726B61FC_u -= 1) {
        auto726B61FC_var = UnitGroupUnitFromEnd(auto726B61FC_g, auto726B61FC_u);
        if (auto726B61FC_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto726B61FC_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto726B61FC_var);
            libNtve_gf_PauseUnit(auto726B61FC_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto5B06091C_g = gv_cinematicHiddenUnits;
    auto5B06091C_u = UnitGroupCount(auto5B06091C_g, c_unitCountAll);
    for (;; auto5B06091C_u -= 1) {
        auto5B06091C_var = UnitGroupUnitFromEnd(auto5B06091C_g, auto5B06091C_u);
        if (auto5B06091C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5B06091C_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_DebugXanthos_Init();
    gt_StartGame_Init();
    gt_StartingTransmissionsQ_Init();
    gt_StartGame02KillDavis_Init();
    gt_CleanUpSection01_Init();
    gt_XanthosInit_Init();
    gt_XanthosBeginAttack_Init();
    gt_XanthosAttacksSoonTransmissionQ_Init();
    gt_XanthosAttackQ_Init();
    gt_XanthosTurretDestroyed_Init();
    gt_XanthosJumpsToSafetyTransmissionQ_Init();
    gt_XanthosJumpsToSafety_Init();
    gt_XanthosTimeoutSafety_Init();
    gt_XanthosFinalFight_Init();
    gt_XanthosFinalFightPlayerWipe_Init();
    gt_XanthosFinalFightTriggeredQ_Init();
    gt_XanthosFinalFormReinforcements1_Init();
    gt_XanthosFinalFormReinforcements1Q_Init();
    gt_XanthosFinalFormReinforcements2_Init();
    gt_XanthosFinalFormReinforcements2Q_Init();
    gt_XanthosFinalFormReinforcements3_Init();
    gt_XanthosFinalFormReinforcements3Q_Init();
    gt_XanthosDies_Init();
    gt_XanthosUICreate_Init();
    gt_XanthosUIUpdate_Init();
    gt_SendHyperionRetaliation_Init();
    gt_SendHyperionRetaliationQ_Init();
    gt_HyperionFallsBack_Init();
    gt_HyperionFallsBackQ_Init();
    gt_HyperionMinimapIcon_Init();
    gt_CreateGorgonPings_Init();
    gt_GorgonDies_Init();
    gt_GorgonDiesTransmissionQ_Init();
    gt_AttackWaveUnitGroup_Init();
    gt_SendDefenderWaves_Init();
    gt_DoMFlavorLineP02BaseQ_Init();
    gt_DoMFlavorLineP03BaseQ_Init();
    gt_DoMFlavorLineP06BaseQ_Init();
    gt_DoMFlavorLineP06OutpostQ_Init();
    gt_NukePingStart_Init();
    gt_NukePingStop_Init();
    gt_NukeLaunchedCounter_Init();
    gt_NukeDetonatedCounter_Init();
    gt_GhostDies_Init();
    gt_S2DavisDiesQ_Init();
    gt_S2StartQ_Init();
    gt_S2Room1Q_Init();
    gt_S2Room2Q_Init();
    gt_S2Room3Q_Init();
    gt_S2RoomTrigger1_Init();
    gt_S2RoomTrigger2_Init();
    gt_S2RoomTrigger3_Init();
    gt_S2DavisFacesNova_Init();
    gt_DoMEscapeRegion_Init();
    gt_S2ExplosionCameraShake_Init();
    gt_StartAI_Init();
    gt_AIUpgradeCasualNormal_Init();
    gt_AIUpgradeHardBrutal_Init();
    gt_AIGiveResources_Init();
    gt_XanthosController_Init();
    gt_AntiNukeLogic_Init();
    gt_FirstGhostTransmissionQ_Init();
    gt_FirstAttackTransmissionQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatDominionFleetDestroyed_Init();
    gt_DefeatNovaDead_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveProtectFleetCreate_Init();
    gt_ObjectiveProtectFleetComplete_Init();
    gt_ObjectiveProtectFleetUpdate_Init();
    gt_ObjectiveProtectFleetFailed_Init();
    gt_ObjectiveDestroyXanthosCreate_Init();
    gt_ObjectiveDestroyXanthosComplete_Init();
    gt_ObjectiveDestroyXanthosFailed_Init();
    gt_ObjectiveKillDavisCreate_Init();
    gt_ObjectiveKillDavisComplete_Init();
    gt_ObjectiveKillDavisFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00RepairYards_Init();
    gt_BriefingScene01Xanthos_Init();
    gt_BriefingScene02XanthosWeapons_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
