//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Events
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiEF2D481E_defGather;
string[17] aiEF2D481E_customData;
wave[17] aiEF2D481E_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: Break Time 1
//--------------------------------------------------------------------------------------------------
bool[17] aiEF2D481E_wave1_enabled;
wave[17] aiEF2D481E_wave1_lastWave;
trigger aiEF2D481E_wave1_trigger = null;
int aiEF2D481E_wave1_runPlayer;
playergroup aiEF2D481E_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEF2D481E_wave1_enabled[init_i] = true;
        aiEF2D481E_wave1_lastWave[init_i] = null;
    }

    aiEF2D481E_wave1_trigger = TriggerCreate("aiEF2D481E_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEF2D481E_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEF2D481E_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEF2D481E_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEF2D481E_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave1_runFunc (bool c, bool a) {
    int p = aiEF2D481E_wave1_runPlayer;
    playergroup target = aiEF2D481E_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEF2D481E_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEF2D481E_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    if (d == 1) { tg = 1; }
    if (d == 2) { tg = 1; }
    if (d == 3) { tg = 1; }
    if (d == 4) { tg = 1; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiEF2D481E_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_BreakTime1Q_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave1_run (int p, playergroup target, bool wait) {
    aiEF2D481E_wave1_runPlayer = p;
    aiEF2D481E_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEF2D481E_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Break Time 2 (Bonus Obj 1, Auto Save)
//--------------------------------------------------------------------------------------------------
bool[17] aiEF2D481E_wave5_enabled;
wave[17] aiEF2D481E_wave5_lastWave;
trigger aiEF2D481E_wave5_trigger = null;
int aiEF2D481E_wave5_runPlayer;
playergroup aiEF2D481E_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEF2D481E_wave5_enabled[init_i] = true;
        aiEF2D481E_wave5_lastWave[init_i] = null;
    }

    aiEF2D481E_wave5_trigger = TriggerCreate("aiEF2D481E_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEF2D481E_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEF2D481E_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEF2D481E_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEF2D481E_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave5_runFunc (bool c, bool a) {
    int p = aiEF2D481E_wave5_runPlayer;
    playergroup target = aiEF2D481E_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEF2D481E_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEF2D481E_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 195; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 165; }
    if (d == 4) { ta = 165; }
    tg = 0;
    if (d == 1) { tg = 1; }
    if (d == 2) { tg = 1; }
    if (d == 3) { tg = 1; }
    if (d == 4) { tg = 1; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiEF2D481E_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_BreakTime2_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave5_run (int p, playergroup target, bool wait) {
    aiEF2D481E_wave5_runPlayer = p;
    aiEF2D481E_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEF2D481E_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Break Time 3 (Lane Fortification)
//--------------------------------------------------------------------------------------------------
bool[17] aiEF2D481E_wave6_enabled;
wave[17] aiEF2D481E_wave6_lastWave;
trigger aiEF2D481E_wave6_trigger = null;
int aiEF2D481E_wave6_runPlayer;
playergroup aiEF2D481E_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEF2D481E_wave6_enabled[init_i] = true;
        aiEF2D481E_wave6_lastWave[init_i] = null;
    }

    aiEF2D481E_wave6_trigger = TriggerCreate("aiEF2D481E_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEF2D481E_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEF2D481E_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEF2D481E_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEF2D481E_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave6_runFunc (bool c, bool a) {
    int p = aiEF2D481E_wave6_runPlayer;
    playergroup target = aiEF2D481E_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEF2D481E_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEF2D481E_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 210; }
    if (d == 2) { ta = 210; }
    if (d == 3) { ta = 195; }
    if (d == 4) { ta = 195; }
    tg = 0;
    if (d == 1) { tg = 1; }
    if (d == 2) { tg = 1; }
    if (d == 3) { tg = 1; }
    if (d == 4) { tg = 1; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiEF2D481E_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_BreakTime3Q_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave6_run (int p, playergroup target, bool wait) {
    aiEF2D481E_wave6_runPlayer = p;
    aiEF2D481E_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEF2D481E_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Break Time 4 (Bonus Obj 2, Auto Save, Lane Fortification)
//--------------------------------------------------------------------------------------------------
bool[17] aiEF2D481E_wave7_enabled;
wave[17] aiEF2D481E_wave7_lastWave;
trigger aiEF2D481E_wave7_trigger = null;
int aiEF2D481E_wave7_runPlayer;
playergroup aiEF2D481E_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEF2D481E_wave7_enabled[init_i] = true;
        aiEF2D481E_wave7_lastWave[init_i] = null;
    }

    aiEF2D481E_wave7_trigger = TriggerCreate("aiEF2D481E_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEF2D481E_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEF2D481E_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEF2D481E_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEF2D481E_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave7_runFunc (bool c, bool a) {
    int p = aiEF2D481E_wave7_runPlayer;
    playergroup target = aiEF2D481E_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEF2D481E_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEF2D481E_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 210; }
    if (d == 2) { ta = 195; }
    if (d == 3) { ta = 195; }
    if (d == 4) { ta = 195; }
    tg = 0;
    if (d == 1) { tg = 1; }
    if (d == 2) { tg = 1; }
    if (d == 3) { tg = 1; }
    if (d == 4) { tg = 1; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiEF2D481E_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_BreakTime4_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave7_run (int p, playergroup target, bool wait) {
    aiEF2D481E_wave7_runPlayer = p;
    aiEF2D481E_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEF2D481E_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Heavy Lane Fortification
//--------------------------------------------------------------------------------------------------
bool[17] aiEF2D481E_wave8_enabled;
wave[17] aiEF2D481E_wave8_lastWave;
trigger aiEF2D481E_wave8_trigger = null;
int aiEF2D481E_wave8_runPlayer;
playergroup aiEF2D481E_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEF2D481E_wave8_enabled[init_i] = true;
        aiEF2D481E_wave8_lastWave[init_i] = null;
    }

    aiEF2D481E_wave8_trigger = TriggerCreate("aiEF2D481E_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEF2D481E_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEF2D481E_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEF2D481E_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEF2D481E_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave8_runFunc (bool c, bool a) {
    int p = aiEF2D481E_wave8_runPlayer;
    playergroup target = aiEF2D481E_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEF2D481E_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEF2D481E_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 165; }
    if (d == 2) { ta = 165; }
    if (d == 3) { ta = 165; }
    if (d == 4) { ta = 150; }
    tg = 0;
    if (d == 1) { tg = 1; }
    if (d == 2) { tg = 1; }
    if (d == 3) { tg = 1; }
    if (d == 4) { tg = 1; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiEF2D481E_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_BreakTime5Q_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave8_run (int p, playergroup target, bool wait) {
    aiEF2D481E_wave8_runPlayer = p;
    aiEF2D481E_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEF2D481E_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Break Time 6 (Banshees, Auto Save)
//--------------------------------------------------------------------------------------------------
bool[17] aiEF2D481E_wave9_enabled;
wave[17] aiEF2D481E_wave9_lastWave;
trigger aiEF2D481E_wave9_trigger = null;
int aiEF2D481E_wave9_runPlayer;
playergroup aiEF2D481E_wave9_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave9_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiEF2D481E_wave9_enabled[init_i] = true;
        aiEF2D481E_wave9_lastWave[init_i] = null;
    }

    aiEF2D481E_wave9_trigger = TriggerCreate("aiEF2D481E_wave9_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave9_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEF2D481E_wave9_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave9_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiEF2D481E_wave9_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEF2D481E_wave9_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEF2D481E_wave9_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave9_runFunc (bool c, bool a) {
    int p = aiEF2D481E_wave9_runPlayer;
    playergroup target = aiEF2D481E_wave9_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiEF2D481E_wave9_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiEF2D481E_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 210; }
    if (d == 2) { ta = 210; }
    if (d == 3) { ta = 210; }
    if (d == 4) { ta = 210; }
    tg = 0;
    if (d == 1) { tg = 1; }
    if (d == 2) { tg = 1; }
    if (d == 3) { tg = 1; }
    if (d == 4) { tg = 1; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiEF2D481E_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_BreakTime6Q_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave9_run (int p, playergroup target, bool wait) {
    aiEF2D481E_wave9_runPlayer = p;
    aiEF2D481E_wave9_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEF2D481E_wave9_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiEF2D481E_wave1_enable(p, val); }
    if (w == 5) { aiEF2D481E_wave5_enable(p, val); }
    if (w == 6) { aiEF2D481E_wave6_enable(p, val); }
    if (w == 7) { aiEF2D481E_wave7_enable(p, val); }
    if (w == 8) { aiEF2D481E_wave8_enable(p, val); }
    if (w == 9) { aiEF2D481E_wave9_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiEF2D481E_wave1_isEnabled(p); }
    if (w == 5) { return aiEF2D481E_wave5_isEnabled(p); }
    if (w == 6) { return aiEF2D481E_wave6_isEnabled(p); }
    if (w == 7) { return aiEF2D481E_wave7_isEnabled(p); }
    if (w == 8) { return aiEF2D481E_wave8_isEnabled(p); }
    if (w == 9) { return aiEF2D481E_wave9_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiEF2D481E_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiEF2D481E_wave_createdWave (int w, int p) {
    if (w == 1) { return aiEF2D481E_wave1_createdWave(p); }
    if (w == 5) { return aiEF2D481E_wave5_createdWave(p); }
    if (w == 6) { return aiEF2D481E_wave6_createdWave(p); }
    if (w == 7) { return aiEF2D481E_wave7_createdWave(p); }
    if (w == 8) { return aiEF2D481E_wave8_createdWave(p); }
    if (w == 9) { return aiEF2D481E_wave9_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiEF2D481E_wave1_run(p, target, wait); }
    if (w == 5) { aiEF2D481E_wave5_run(p, target, wait); }
    if (w == 6) { aiEF2D481E_wave6_run(p, target, wait); }
    if (w == 7) { aiEF2D481E_wave7_run(p, target, wait); }
    if (w == 8) { aiEF2D481E_wave8_run(p, target, wait); }
    if (w == 9) { aiEF2D481E_wave9_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiEF2D481E_waves_trigger = null;
int aiEF2D481E_waves_runPlayer;
playergroup aiEF2D481E_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_waves_init () {
    aiEF2D481E_waves_trigger = TriggerCreate("aiEF2D481E_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_waves_runFunc (bool c, bool a) {
    int p = aiEF2D481E_waves_runPlayer;
    playergroup target = aiEF2D481E_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiEF2D481E_wave1_run(p, target, true);
    aiEF2D481E_wave5_run(p, target, true);
    aiEF2D481E_wave6_run(p, target, true);
    aiEF2D481E_wave7_run(p, target, true);
    aiEF2D481E_wave8_run(p, target, true);
    aiEF2D481E_wave9_run(p, target, true);

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_waves_run (int p, playergroup target) {
    aiEF2D481E_waves_runPlayer = p;
    aiEF2D481E_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiEF2D481E_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiEF2D481E_wave1_enable(p, val);
    aiEF2D481E_wave5_enable(p, val);
    aiEF2D481E_wave6_enable(p, val);
    aiEF2D481E_wave7_enable(p, val);
    aiEF2D481E_wave8_enable(p, val);
    aiEF2D481E_wave9_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_waves_stop () {
    TriggerStop(aiEF2D481E_waves_trigger);

    TriggerStop(aiEF2D481E_wave1_trigger);
    TriggerStop(aiEF2D481E_wave5_trigger);
    TriggerStop(aiEF2D481E_wave6_trigger);
    TriggerStop(aiEF2D481E_wave7_trigger);
    TriggerStop(aiEF2D481E_wave8_trigger);
    TriggerStop(aiEF2D481E_wave9_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiEF2D481E_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiEF2D481E_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiEF2D481E_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEF2D481E_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiEF2D481E_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiEF2D481E_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiEF2D481E_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiEF2D481E_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiEF2D481E_initialized) {
        aiEF2D481E_wave1_init();
        aiEF2D481E_wave5_init();
        aiEF2D481E_wave6_init();
        aiEF2D481E_wave7_init();
        aiEF2D481E_wave8_init();
        aiEF2D481E_wave9_init();
        aiEF2D481E_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiEF2D481E_defGather[init_i] = PointFromId(0);
        }

        aiEF2D481E_initialized = true;
    }

    AICampaignStart(p);
}
