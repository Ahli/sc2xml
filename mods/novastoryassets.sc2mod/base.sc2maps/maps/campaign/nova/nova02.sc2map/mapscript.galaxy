//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Sudden Strike
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/VoidLib"
include "LibComC"
include "LibCMMI"
include "LibNovC"
include "LibNCMI"
include "LibNCUI"
include "ai5073BA0A"
include "ai8BAF88E7"
include "aiEF2D481E"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLotv_InitLib();
    libComC_InitLib();
    libCMMI_InitLib();
    libNovC_InitLib();
    libNCMI_InitLib();
    libNCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION5 = 3;
const int gv_pLAYER_02_DOMINION2 = 4;
const int gv_pLAYER_02_DOMINION3 = 5;
const int gv_pLAYER_02_DOMINION4 = 6;
const int gv_pLAYER_02_DOMINION6 = 7;
const int gv_pLAYER_02_DOMINION7 = 10;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_brutaliskLife;
int gv_brutaliskDamage;
int gv_bonusObjNorthZerglingCount;
int gv_bonusObjNorthBanelingCount;
int gv_bonusObjSouthRoachCount;
int gv_bonusObjSouthRavagerCount;
int gv_islandFortificationZerglingCount;
int gv_islandFortificationRoachCount;
int gv_islandFortificationHydraliskCount;
playergroup gv_dominionPlayerGroup;
playergroup gv_zergPlayerGroup;
unit gv_nova;
string gv_mapMusicTrack;
timer gv_missionTimer;
timer gv_doMArrivalTimer;
fixed gv_missionDuration;
timer gv_fakeMissionTimer;
unitgroup gv_outerBunkers;
unitgroup gv_innerBunkers;
int gv_missionTimerWindow;
int gv_bonusObjProgress;
unitgroup gv_enemyEventZerglings;
unitgroup gv_enemyEventHydralisks;
int gv_bonusObjNorthPing;
int gv_bonusObjSouthPing;
unitgroup gv_bonusObjSouthRavagers;
int gv_spiderMineKills;
int gv_alliedStructuresLost;
int gv_alliedUnitsLost;
int gv_achievement_SpiderMineKills;
int gv_anniversaryAchievementTermSpiderMineKills;
int gv_attackWavesActive;
point[16] gv_lastWaypointsNorth;
point[16] gv_lastWaypointsEast;
int gv_northWaveCount;
bool gv_finalWaveTriggered;
int gv_eastWaveCount;
int gv_objectiveDestroyZergBase;
int gv_objectiveRescueStalkers;
int gv_objectiveRescueStalkers2;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
int[5] gv_cinematicTempPathDisplays;
unitgroup gv_zergUnits_Briefing00;
unit gv_introCineNova;
int[5] gv_introMinerals;
int gv_introGas;
unit gv_introCommandCenter;
unitgroup gv_introReapers;
unitgroup gv_introSCVs;
bool gv_introStopSCVSpawning;
unit gv_introSupplyDepot;
unitgroup gv_victoryBattleCruisers;
unit gv_victoryTransmittingCruiser;

void InitGlobals () {
    gv_dominionPlayerGroup = PlayerGroupEmpty();
    gv_zergPlayerGroup = PlayerGroupEmpty();
    gv_missionTimer = TimerCreate();
    gv_doMArrivalTimer = TimerCreate();
    gv_fakeMissionTimer = TimerCreate();
    gv_outerBunkers = UnitGroupEmpty();
    gv_innerBunkers = UnitGroupEmpty();
    gv_missionTimerWindow = c_timerWindowNone;
    gv_enemyEventZerglings = UnitGroupEmpty();
    gv_enemyEventHydralisks = UnitGroupEmpty();
    gv_bonusObjNorthPing = c_invalidPingId;
    gv_bonusObjSouthPing = c_invalidPingId;
    gv_bonusObjSouthRavagers = UnitGroupEmpty();
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_zergUnits_Briefing00 = UnitGroupEmpty();
    gv_introReapers = UnitGroupEmpty();
    gv_introSCVs = UnitGroupEmpty();
    gv_victoryBattleCruisers = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_GoToRegionandDespawn (unit lp_unit, region lp_despawnRegion);
bool gf_UnitIsArmyUnit (unit lp_unit);
void gf_SpawnNydusWorm (point lp_spawnPoint, point lp_targetPoint);
void gf_UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, int lp_maxCount, point lp_targetPoint);
void gf_UnloadNorthDefensesFromNydusWorm (unit lp_nydusWorm, int lp_spineCrawlerCount, int lp_banelingCount, int lp_zerglingCount);
void gf_UnloadSouthDefensesFromNydusWorm (unit lp_nydusWorm, int lp_spineCrawlerCount, int lp_ravagerCount, int lp_roachCount);
void gf_ZergIslandFortification (int lp_overlordCount);
point gf_AIGetRavagerTargetPoint (region lp_ravagerShotTargetRegion);
void gf_MaintainForwardAttackMomentum (unit lp_assaultUnit);
void gf_MedivacPickupEvacUnits (unit lp_evacUnit, unit lp_medivac);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGameQ;
trigger gt_BonusObjectiveNorthRevealQ;
trigger gt_BonusObjNorthWarningQ;
trigger gt_BonusObjNorthSavedQ;
trigger gt_BonusObjNorthLostQ;
trigger gt_BonusObjNorthSpawn;
trigger gt_BonusObjNorthZergKilled;
trigger gt_BonusObjNorthRescue;
trigger gt_BonusObjNorthWormKilled;
trigger gt_BonusObjNorthFacilityKilled;
trigger gt_BonusObjNorthCrawlerMorph;
trigger gt_BonusObjectiveSouthRevealQ;
trigger gt_BonusObjSouthWarningQ;
trigger gt_BonusObjSouthSavedQ;
trigger gt_BonusObjSouthLostQ;
trigger gt_BonusObjSouthSpawn;
trigger gt_BonusObjSouthZergKilled;
trigger gt_BonusObjSouthRescue;
trigger gt_BonusObjSouthWormKilled;
trigger gt_BonusObjSouthFacilityKilled;
trigger gt_BonusObjSouthCrawlerMorph;
trigger gt_BonusObjSouthRavagerShots;
trigger gt_Wave1WaveIncomingQ;
trigger gt_Wave2WaveIncomingQ;
trigger gt_Wave3BanelingsIncomingQ;
trigger gt_Wave4WaveIncomingQ;
trigger gt_Wave5RavagersIncomingQ;
trigger gt_Wave6WaveIncomingQ;
trigger gt_Wave7DefilersIncomingQ;
trigger gt_Wave8WaveIncomingQ;
trigger gt_Wave910DoubleWaveQ;
trigger gt_Wave11UltralisksIncomingQ;
trigger gt_Wave12BossWaveIncomingQ;
trigger gt_Wave1314FinalWaveQ;
trigger gt_BreakTime1Q;
trigger gt_BreakTime2;
trigger gt_BreakTime3Q;
trigger gt_BreakTime4;
trigger gt_BreakTime5Q;
trigger gt_BreakTime6Q;
trigger gt_OuterDefensesQ;
trigger gt_InnerDefensesQ;
trigger gt_DontGoToEnemyBaseQ;
trigger gt_ZergFortificationTumorBullies;
trigger gt_HoldoutTimerQ;
trigger gt_DefendersofManArrivalQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatHornersBaseDestroyed;
trigger gt_VictoryDefendHornersBaseCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_SpiderMineKillTracker;
trigger gt_SpiderMineUnlockAchievement;
trigger gt_AlliedStructuresLostTracker;
trigger gt_AlliedUnitsLostTracker;
trigger gt_AchievementKillenemyunitswithSpiderMines;
trigger gt_TipReadyQ;
trigger gt_StartAI;
trigger gt_AIUpgradeCasualNormal;
trigger gt_AIUpgradeHardBrutal;
trigger gt_SetWaypointsNorth;
trigger gt_SetFinalTrickleWaypointsNorth;
trigger gt_SetWaypointsEast;
trigger gt_SetFinalTrickleWaypointsEast;
trigger gt_AttackWaveManager;
trigger gt_AIAttackWaveRavagerShots;
trigger gt_AIAttackWaveDarkSwarm;
trigger gt_DefilerEnergy;
trigger gt_ObjectiveDefendHornersBaseCreate;
trigger gt_ObjectiveDefendHornersBaseComplete;
trigger gt_ObjectiveDefendHornersBaseFailed;
trigger gt_ObjectiveSecureArmyTechCreate;
trigger gt_ObjectiveSecureArmyTechComplete;
trigger gt_ObjectiveSecureArmyTechFailed;
trigger gt_ObjectiveSecureNovaTechCreate;
trigger gt_ObjectiveSecureNovaTechComplete;
trigger gt_ObjectiveSecureNovaTechFailed;
trigger gt_BriefingQ;
trigger gt_BriefingSceneHive;
trigger gt_BriefingSceneReapers;
trigger gt_BriefingSceneReapersCamera;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroSpawnSCVs;
trigger gt_IntroBuildSupplyDepot;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryBattlecruiserAssault;
trigger gt_VictoryDropPodAssault;
trigger gt_VictoryDOMLander01;
trigger gt_VictoryDOMLander02;
trigger gt_VictoryMedivacs;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai5073BA0A") { ai5073BA0A_start(p); }
    if (cai_playerAI[p] == "ai8BAF88E7") { ai8BAF88E7_start(p); }
    if (cai_playerAI[p] == "aiEF2D481E") { aiEF2D481E_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { ai5073BA0A_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai8BAF88E7") { ai8BAF88E7_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiEF2D481E") { aiEF2D481E_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { return ai5073BA0A_getCustomData(p); }
    if (cai_playerAI[p] == "ai8BAF88E7") { return ai8BAF88E7_getCustomData(p); }
    if (cai_playerAI[p] == "aiEF2D481E") { return aiEF2D481E_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { return ai5073BA0A_getLastWave(p); }
    if (cai_playerAI[p] == "ai8BAF88E7") { return ai8BAF88E7_getLastWave(p); }
    if (cai_playerAI[p] == "aiEF2D481E") { return aiEF2D481E_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { ai5073BA0A_waves_run(p, target); }
    if (cai_playerAI[p] == "ai8BAF88E7") { ai8BAF88E7_waves_run(p, target); }
    if (cai_playerAI[p] == "aiEF2D481E") { aiEF2D481E_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { ai5073BA0A_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai8BAF88E7") { ai8BAF88E7_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiEF2D481E") { aiEF2D481E_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai5073BA0A") { ai5073BA0A_waves_stop(); }
    if (ai == "ai8BAF88E7") { ai8BAF88E7_waves_stop(); }
    if (ai == "aiEF2D481E") { aiEF2D481E_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { ai5073BA0A_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai8BAF88E7") { ai8BAF88E7_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiEF2D481E") { aiEF2D481E_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { ai5073BA0A_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai8BAF88E7") { ai8BAF88E7_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiEF2D481E") { aiEF2D481E_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { return ai5073BA0A_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai8BAF88E7") { return ai8BAF88E7_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiEF2D481E") { return aiEF2D481E_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { return ai5073BA0A_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai8BAF88E7") { return ai8BAF88E7_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiEF2D481E") { return aiEF2D481E_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai5073BA0A") { return ai5073BA0A_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai8BAF88E7") { return ai8BAF88E7_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiEF2D481E") { return aiEF2D481E_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai5073BA0A", 4);
    cai_start("ai8BAF88E7", 5);
    cai_start("aiEF2D481E", 6);
    AICampaignStart(2);
    AICampaignStart(3);
    AICampaignStart(7);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 2);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 2);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(6, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_GoToRegionandDespawn_Trigger = null;
unit auto_gf_GoToRegionandDespawn_lp_unit;
region auto_gf_GoToRegionandDespawn_lp_despawnRegion;

void gf_GoToRegionandDespawn (unit lp_unit, region lp_despawnRegion) {
    auto_gf_GoToRegionandDespawn_lp_unit = lp_unit;
    auto_gf_GoToRegionandDespawn_lp_despawnRegion = lp_despawnRegion;

    if (auto_gf_GoToRegionandDespawn_Trigger == null) {
        auto_gf_GoToRegionandDespawn_Trigger = TriggerCreate("auto_gf_GoToRegionandDespawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_GoToRegionandDespawn_Trigger, false, false);
}

bool auto_gf_GoToRegionandDespawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_GoToRegionandDespawn_lp_unit;
    region lp_despawnRegion = auto_gf_GoToRegionandDespawn_lp_despawnRegion;

    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lp_despawnRegion)), c_orderQueueAddToEnd);
    while ((UnitIsAlive(lp_unit) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lp_despawnRegion)) > 1)) {
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(lp_unit) == true)) {
        UnitRemove(lp_unit);
    }

    return true;
}

bool gf_UnitIsArmyUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), (("FlagArray[" + "ArmySelect" + "]")), c_playerAny) == "1")) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_SpawnNydusWorm_Trigger = null;
point auto_gf_SpawnNydusWorm_lp_spawnPoint;
point auto_gf_SpawnNydusWorm_lp_targetPoint;

void gf_SpawnNydusWorm (point lp_spawnPoint, point lp_targetPoint) {
    auto_gf_SpawnNydusWorm_lp_spawnPoint = lp_spawnPoint;
    auto_gf_SpawnNydusWorm_lp_targetPoint = lp_targetPoint;

    if (auto_gf_SpawnNydusWorm_Trigger == null) {
        auto_gf_SpawnNydusWorm_Trigger = TriggerCreate("auto_gf_SpawnNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnNydusWorm_Trigger, false, false);
}

bool auto_gf_SpawnNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_SpawnNydusWorm_lp_spawnPoint;
    point lp_targetPoint = auto_gf_SpawnNydusWorm_lp_targetPoint;

    // Variable Declarations
    timer lv_rampUpTimer;
    unit lv_nydusWorm;
    int lv_nydusWormPing;
    unitgroup lv_cargoUnits;
    int lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rampUpTimer = TimerCreate();
    lv_nydusWormPing = c_invalidPingId;
    lv_cargoUnits = UnitGroupEmpty();

    // Implementation
    if ((libNCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_02_DOMINION4, lp_spawnPoint);
    lv_nydusWorm = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    Wait(8.0, c_timeAI);
    if ((RegionContainsPoint(RegionFromId(17), lp_spawnPoint) == true)) {
        gf_UnloadNorthDefensesFromNydusWorm(lv_nydusWorm, 1, gv_bonusObjNorthBanelingCount, gv_bonusObjNorthZerglingCount);
    }

    if ((RegionContainsPoint(RegionFromId(19), lp_spawnPoint) == true)) {
        gf_UnloadSouthDefensesFromNydusWorm(lv_nydusWorm, 1, gv_bonusObjSouthRavagerCount, gv_bonusObjSouthRoachCount);
    }

    TimerStart(lv_rampUpTimer, 120.0, false, c_timeGame);
    lv_cooldown = 6;
    while ((TimerGetRemaining(lv_rampUpTimer) > 0.0)) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lv_nydusWorm) == false) || (UnitGroupCount(UnitGroup("SnowRefinery_Terran_BaseRefinery", c_playerAny, RegionCircle(lp_targetPoint, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            PingDestroy(lv_nydusWormPing);
            return true;
        }

        if ((lv_cooldown == 0)) {
            gf_UnloadUnitsFromNydusWorm(6, "Zergling", lv_nydusWorm, 6, lp_targetPoint);
            gf_UnloadUnitsFromNydusWorm(2, "Hydralisk", lv_nydusWorm, 2, lp_targetPoint);
            lv_cooldown = 5;
        }
        else {
            lv_cooldown -= 1;
        }
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lv_nydusWorm) == false) || (UnitGroupCount(UnitGroup("SnowRefinery_Terran_BaseRefinery", c_playerAny, RegionCircle(lp_targetPoint, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            PingDestroy(lv_nydusWormPing);
            return true;
        }

        if ((lv_cooldown == 0)) {
            gf_UnloadUnitsFromNydusWorm(8, "Zergling", lv_nydusWorm, 8, lp_targetPoint);
            gf_UnloadUnitsFromNydusWorm(4, "Hydralisk", lv_nydusWorm, 4, lp_targetPoint);
            lv_cooldown = 6;
        }
        else {
            lv_cooldown -= 1;
        }
    }
    return true;
}

void gf_UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, int lp_maxCount, point lp_targetPoint) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto8405D998_ae;
    const int auto8405D998_ai = 1;
    string auto6605A740_val;

    // Variable Initialization

    // Implementation
    auto8405D998_ae = lp_count;
    lv_i = 1;
    for ( ; ( (auto8405D998_ai >= 0 && lv_i <= auto8405D998_ae) || (auto8405D998_ai < 0 && lv_i >= auto8405D998_ae) ) ; lv_i += auto8405D998_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true) && (((lp_unitType == "Zergling") && (UnitGroupCount(gv_enemyEventZerglings, c_unitCountAlive) < lp_maxCount)) || ((lp_unitType == "Hydralisk") && (UnitGroupCount(gv_enemyEventHydralisks, c_unitCountAlive) < lp_maxCount)))) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, gv_pLAYER_02_DOMINION4, PointWithOffsetPolar(UnitGetPosition(lp_nydusWorm), 1.0, AngleBetweenPoints(UnitGetPosition(lp_nydusWorm), lp_targetPoint)));
            UnitBehaviorAdd(UnitLastCreated(), "CritterWander", UnitLastCreated(), 1);
            auto6605A740_val = lp_unitType;
            if (auto6605A740_val == "Zergling") {
                UnitGroupAddUnitGroup(gv_enemyEventZerglings, UnitLastCreatedGroup());
            }
            else if (auto6605A740_val == "Hydralisk") {
                UnitGroupAddUnitGroup(gv_enemyEventHydralisks, UnitLastCreatedGroup());
            }
            else {
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueReplace);
            Wait(0.65, c_timeGame);
        }

    }
}

void gf_UnloadNorthDefensesFromNydusWorm (unit lp_nydusWorm, int lp_spineCrawlerCount, int lp_banelingCount, int lp_zerglingCount) {
    // Variable Declarations
    int lv_i;
    int lv_banelingPointIter;
    int lv_zerglingPointIter;
    int lv_spineCrawlerPointIter;

    // Automatic Variable Declarations
    int auto783D612F_ae;
    const int auto783D612F_ai = 1;
    int autoC50A52F3_ae;
    const int autoC50A52F3_ai = 1;
    int auto43A62E1A_ae;
    const int auto43A62E1A_ai = 1;

    // Variable Initialization

    // Implementation
    auto783D612F_ae = lp_banelingCount;
    lv_i = 1;
    for ( ; ( (auto783D612F_ai >= 0 && lv_i <= auto783D612F_ae) || (auto783D612F_ai < 0 && lv_i >= auto783D612F_ae) ) ; lv_i += auto783D612F_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling", 0, gv_pLAYER_02_DOMINION4, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            AISetUnitScriptControlled(UnitLastCreated(), true);
            if (lv_banelingPointIter >= 4) {
                lv_banelingPointIter = 1;
            }
            else {
                lv_banelingPointIter = lv_banelingPointIter + 1;
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Bonus Obj North Baneling " + IntToString(lv_banelingPointIter)))), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }

    }
    autoC50A52F3_ae = lp_zerglingCount;
    lv_i = 1;
    for ( ; ( (autoC50A52F3_ai >= 0 && lv_i <= autoC50A52F3_ae) || (autoC50A52F3_ai < 0 && lv_i >= autoC50A52F3_ae) ) ; lv_i += autoC50A52F3_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            AISetUnitScriptControlled(UnitLastCreated(), true);
            if (lv_zerglingPointIter >= 8) {
                lv_zerglingPointIter = 1;
            }
            else {
                lv_zerglingPointIter = lv_zerglingPointIter + 1;
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Bonus Obj North Zergling " + IntToString(lv_zerglingPointIter)))), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }

    }
    auto43A62E1A_ae = lp_spineCrawlerCount;
    lv_i = 1;
    for ( ; ( (auto43A62E1A_ai >= 0 && lv_i <= auto43A62E1A_ae) || (auto43A62E1A_ai < 0 && lv_i >= auto43A62E1A_ae) ) ; lv_i += auto43A62E1A_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION4, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            AISetUnitScriptControlled(UnitLastCreated(), true);
            CreepModify(PointFromName(("Bonus Obj North Spine Crawler " + IntToString(lv_i))), 1.0, true, false);
            if (lv_spineCrawlerPointIter >= 1) {
                lv_spineCrawlerPointIter = 1;
            }
            else {
                lv_spineCrawlerPointIter = lv_spineCrawlerPointIter + 1;
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ZergBuild", 14), PointFromName(("Bonus Obj North Spine Crawler " + IntToString(lv_spineCrawlerPointIter)))), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }

    }
}

void gf_UnloadSouthDefensesFromNydusWorm (unit lp_nydusWorm, int lp_spineCrawlerCount, int lp_ravagerCount, int lp_roachCount) {
    // Variable Declarations
    int lv_i;
    int lv_ravagerPointIter;
    int lv_roachPointIter;
    int lv_spineCrawlerPointIter;

    // Automatic Variable Declarations
    int auto110EEEEB_ae;
    const int auto110EEEEB_ai = 1;
    int auto47EBB28A_ae;
    const int auto47EBB28A_ai = 1;
    int autoC7E372CE_ae;
    const int autoC7E372CE_ai = 1;

    // Variable Initialization

    // Implementation
    auto110EEEEB_ae = lp_ravagerCount;
    lv_i = 1;
    for ( ; ( (auto110EEEEB_ai >= 0 && lv_i <= auto110EEEEB_ae) || (auto110EEEEB_ai < 0 && lv_i >= auto110EEEEB_ae) ) ; lv_i += auto110EEEEB_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ravager", 0, gv_pLAYER_02_DOMINION4, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            UnitGroupAdd(gv_bonusObjSouthRavagers, UnitLastCreated());
            AISetUnitScriptControlled(UnitLastCreated(), true);
            if (lv_ravagerPointIter >= 4) {
                lv_ravagerPointIter = 1;
            }
            else {
                lv_ravagerPointIter = lv_ravagerPointIter + 1;
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Bonus Obj South Ravager " + IntToString(lv_ravagerPointIter)))), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }

    }
    auto47EBB28A_ae = lp_roachCount;
    lv_i = 1;
    for ( ; ( (auto47EBB28A_ai >= 0 && lv_i <= auto47EBB28A_ae) || (auto47EBB28A_ai < 0 && lv_i >= auto47EBB28A_ae) ) ; lv_i += auto47EBB28A_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION4, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            AISetUnitScriptControlled(UnitLastCreated(), true);
            if (lv_roachPointIter >= 4) {
                lv_roachPointIter = 1;
            }
            else {
                lv_roachPointIter = lv_roachPointIter + 1;
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Bonus Obj South Roach " + IntToString(lv_roachPointIter)))), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }

    }
    autoC7E372CE_ae = lp_spineCrawlerCount;
    lv_i = 1;
    for ( ; ( (autoC7E372CE_ai >= 0 && lv_i <= autoC7E372CE_ae) || (autoC7E372CE_ai < 0 && lv_i >= autoC7E372CE_ae) ) ; lv_i += autoC7E372CE_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION4, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            AISetUnitScriptControlled(UnitLastCreated(), true);
            CreepModify(PointFromName(("Bonus Obj South Spine Crawler " + IntToString(lv_i))), 1.0, true, false);
            if (lv_spineCrawlerPointIter >= 1) {
                lv_spineCrawlerPointIter = 1;
            }
            else {
                lv_spineCrawlerPointIter = lv_spineCrawlerPointIter + 1;
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ZergBuild", 14), PointFromName(("Bonus Obj South Spine Crawler " + IntToString(lv_spineCrawlerPointIter)))), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }

    }
}

trigger auto_gf_ZergIslandFortification_Trigger = null;
int auto_gf_ZergIslandFortification_lp_overlordCount;

void gf_ZergIslandFortification (int lp_overlordCount) {
    auto_gf_ZergIslandFortification_lp_overlordCount = lp_overlordCount;

    if (auto_gf_ZergIslandFortification_Trigger == null) {
        auto_gf_ZergIslandFortification_Trigger = TriggerCreate("auto_gf_ZergIslandFortification_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZergIslandFortification_Trigger, false, false);
}

bool auto_gf_ZergIslandFortification_TriggerFunc (bool testConds, bool runActions) {
    int lp_overlordCount = auto_gf_ZergIslandFortification_lp_overlordCount;

    // Variable Declarations
    int lv_i;
    int lv_overlordsSent;

    // Automatic Variable Declarations
    const int auto8D60F510_ae = 5;
    const int auto8D60F510_ai = 1;
    unitgroup auto5CBA7A64_g;
    int auto5CBA7A64_u;
    unit auto5CBA7A64_var;
    unitgroup autoAEE4C3E0_g;
    int autoAEE4C3E0_u;
    unit autoAEE4C3E0_var;
    unitgroup auto7B3D1514_g;
    int auto7B3D1514_u;
    unit auto7B3D1514_var;
    unitgroup autoFBD1277E_g;
    int autoFBD1277E_u;
    unit autoFBD1277E_var;
    unitgroup auto8B1A6252_g;
    int auto8B1A6252_u;
    unit auto8B1A6252_var;
    unitgroup autoC3C1E45D_g;
    int autoC3C1E45D_u;
    unit autoC3C1E45D_var;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto8D60F510_ai >= 0 && lv_i <= auto8D60F510_ae) || (auto8D60F510_ai < 0 && lv_i >= auto8D60F510_ae) ) ; lv_i += auto8D60F510_ai ) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromName(("North Zerg Island " + IntToString(lv_i))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (lp_overlordCount > lv_overlordsSent)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_pLAYER_02_DOMINION2, PointFromId(98));
            AISetUnitScriptControlled(UnitLastCreated(), true);
            if ((gv_islandFortificationZerglingCount > 0)) {
                UnitCargoCreate(UnitLastCreated(), "Zergling", gv_islandFortificationZerglingCount);
                auto5CBA7A64_g = UnitCargoLastCreatedGroup();
                auto5CBA7A64_u = UnitGroupCount(auto5CBA7A64_g, c_unitCountAll);
                for (;; auto5CBA7A64_u -= 1) {
                    auto5CBA7A64_var = UnitGroupUnitFromEnd(auto5CBA7A64_g, auto5CBA7A64_u);
                    if (auto5CBA7A64_var == null) { break; }
                    AISetUnitScriptControlled(auto5CBA7A64_var, true);
                    UnitBehaviorAdd(auto5CBA7A64_var, "CritterWander", auto5CBA7A64_var, 1);
                }
            }

            if ((gv_islandFortificationRoachCount > 0)) {
                UnitCargoCreate(UnitLastCreated(), "Roach", gv_islandFortificationRoachCount);
                autoAEE4C3E0_g = UnitCargoLastCreatedGroup();
                autoAEE4C3E0_u = UnitGroupCount(autoAEE4C3E0_g, c_unitCountAll);
                for (;; autoAEE4C3E0_u -= 1) {
                    autoAEE4C3E0_var = UnitGroupUnitFromEnd(autoAEE4C3E0_g, autoAEE4C3E0_u);
                    if (autoAEE4C3E0_var == null) { break; }
                    AISetUnitScriptControlled(autoAEE4C3E0_var, true);
                    UnitBehaviorAdd(autoAEE4C3E0_var, "CritterWander", autoAEE4C3E0_var, 1);
                }
            }

            if ((gv_islandFortificationHydraliskCount > 0)) {
                UnitCargoCreate(UnitLastCreated(), "Hydralisk", gv_islandFortificationHydraliskCount);
                auto7B3D1514_g = UnitCargoLastCreatedGroup();
                auto7B3D1514_u = UnitGroupCount(auto7B3D1514_g, c_unitCountAll);
                for (;; auto7B3D1514_u -= 1) {
                    auto7B3D1514_var = UnitGroupUnitFromEnd(auto7B3D1514_g, auto7B3D1514_u);
                    if (auto7B3D1514_var == null) { break; }
                    AISetUnitScriptControlled(auto7B3D1514_var, true);
                    UnitBehaviorAdd(auto7B3D1514_var, "CritterWander", auto7B3D1514_var, 1);
                }
            }

            UnitBehaviorAdd(UnitLastCreated(), "MercAirDrop", UnitLastCreated(), 1);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(237)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionGetCenter(RegionFromName(("North Zerg Island " + IntToString(lv_i))))), c_orderQueueAddToEnd);
            gf_GoToRegionandDespawn(UnitLastCreated(), RegionFromId(1));
            lv_overlordsSent += 1;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromName(("East Zerg Island " + IntToString(lv_i))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (lp_overlordCount > lv_overlordsSent)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_pLAYER_02_DOMINION3, PointFromId(101));
            AISetUnitScriptControlled(UnitLastCreated(), true);
            if ((gv_islandFortificationZerglingCount > 0)) {
                UnitCargoCreate(UnitLastCreated(), "Zergling", gv_islandFortificationZerglingCount);
                autoFBD1277E_g = UnitCargoLastCreatedGroup();
                autoFBD1277E_u = UnitGroupCount(autoFBD1277E_g, c_unitCountAll);
                for (;; autoFBD1277E_u -= 1) {
                    autoFBD1277E_var = UnitGroupUnitFromEnd(autoFBD1277E_g, autoFBD1277E_u);
                    if (autoFBD1277E_var == null) { break; }
                    AISetUnitScriptControlled(autoFBD1277E_var, true);
                    UnitBehaviorAdd(autoFBD1277E_var, "CritterWander", autoFBD1277E_var, 1);
                }
            }

            if ((gv_islandFortificationRoachCount > 0)) {
                UnitCargoCreate(UnitLastCreated(), "Roach", gv_islandFortificationRoachCount);
                auto8B1A6252_g = UnitCargoLastCreatedGroup();
                auto8B1A6252_u = UnitGroupCount(auto8B1A6252_g, c_unitCountAll);
                for (;; auto8B1A6252_u -= 1) {
                    auto8B1A6252_var = UnitGroupUnitFromEnd(auto8B1A6252_g, auto8B1A6252_u);
                    if (auto8B1A6252_var == null) { break; }
                    AISetUnitScriptControlled(auto8B1A6252_var, true);
                    UnitBehaviorAdd(auto8B1A6252_var, "CritterWander", auto8B1A6252_var, 1);
                }
            }

            if ((gv_islandFortificationHydraliskCount > 0)) {
                UnitCargoCreate(UnitLastCreated(), "Hydralisk", gv_islandFortificationHydraliskCount);
                autoC3C1E45D_g = UnitCargoLastCreatedGroup();
                autoC3C1E45D_u = UnitGroupCount(autoC3C1E45D_g, c_unitCountAll);
                for (;; autoC3C1E45D_u -= 1) {
                    autoC3C1E45D_var = UnitGroupUnitFromEnd(autoC3C1E45D_g, autoC3C1E45D_u);
                    if (autoC3C1E45D_var == null) { break; }
                    AISetUnitScriptControlled(autoC3C1E45D_var, true);
                    UnitBehaviorAdd(autoC3C1E45D_var, "CritterWander", autoC3C1E45D_var, 1);
                }
            }

            UnitBehaviorAdd(UnitLastCreated(), "MercAirDrop", UnitLastCreated(), 1);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(224)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionGetCenter(RegionFromName(("East Zerg Island " + IntToString(lv_i))))), c_orderQueueAddToEnd);
            gf_GoToRegionandDespawn(UnitLastCreated(), RegionFromId(1));
            lv_overlordsSent += 1;
        }

    }
    return true;
}

point gf_AIGetRavagerTargetPoint (region lp_ravagerShotTargetRegion) {
    // Variable Declarations
    point lv_ravagerTargetPoint;

    // Automatic Variable Declarations
    const int auto15AD87D2_n = 50;
    int auto15AD87D2_i;

    // Variable Initialization

    // Implementation
    for (auto15AD87D2_i = 1; auto15AD87D2_i <= auto15AD87D2_n; auto15AD87D2_i += 1) {
        lv_ravagerTargetPoint = RegionRandomPoint(lp_ravagerShotTargetRegion);
        if ((CliffLevel(lv_ravagerTargetPoint) == CliffLevel(RegionGetCenter(lp_ravagerShotTargetRegion)))) {
            return lv_ravagerTargetPoint;
        }

    }
    return RegionGetCenter(lp_ravagerShotTargetRegion);
}

trigger auto_gf_MaintainForwardAttackMomentum_Trigger = null;
unit auto_gf_MaintainForwardAttackMomentum_lp_assaultUnit;

void gf_MaintainForwardAttackMomentum (unit lp_assaultUnit) {
    auto_gf_MaintainForwardAttackMomentum_lp_assaultUnit = lp_assaultUnit;

    if (auto_gf_MaintainForwardAttackMomentum_Trigger == null) {
        auto_gf_MaintainForwardAttackMomentum_Trigger = TriggerCreate("auto_gf_MaintainForwardAttackMomentum_TriggerFunc");
    }

    TriggerExecute(auto_gf_MaintainForwardAttackMomentum_Trigger, false, false);
}

bool auto_gf_MaintainForwardAttackMomentum_TriggerFunc (bool testConds, bool runActions) {
    unit lp_assaultUnit = auto_gf_MaintainForwardAttackMomentum_lp_assaultUnit;

    // Automatic Variable Declarations
    string auto4F06BE00_val;

    // Implementation
    while ((libNCMI_gf_PlayerInCinematicModeCampaign() == true) && (UnitIsAlive(lp_assaultUnit) == true)) {
        auto4F06BE00_val = UnitGetType(lp_assaultUnit);
        if (auto4F06BE00_val == "Hercules") {
            UnitIssueOrder(lp_assaultUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_assaultUnit), 30.0, PointGetFacing(PointFromId(1079)))), c_orderQueueReplace);
            Wait(0.25, c_timeGame);
        }
        else if (auto4F06BE00_val == "Battlecruiser") {
            libNtve_gf_ChangeUnitDamage(lp_assaultUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
            libNtve_gf_ChangeUnitDamage(lp_assaultUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            UnitSetPropertyFixed(lp_assaultUnit, c_unitPropMovementSpeed, (UnitGetPropertyFixed(lp_assaultUnit, c_unitPropMovementSpeed, c_unitPropNormal) / 1.3));
            UnitIssueOrder(lp_assaultUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_assaultUnit), 30.0, PointGetFacing(PointFromId(1079)))), c_orderQueueReplace);
            Wait(0.25, c_timeGame);
        }
        else {
            UnitIssueOrder(lp_assaultUnit, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lp_assaultUnit), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_assaultUnit))), c_orderQueueAddToEnd);
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_MedivacPickupEvacUnits_Trigger = null;
unit auto_gf_MedivacPickupEvacUnits_lp_evacUnit;
unit auto_gf_MedivacPickupEvacUnits_lp_medivac;

void gf_MedivacPickupEvacUnits (unit lp_evacUnit, unit lp_medivac) {
    auto_gf_MedivacPickupEvacUnits_lp_evacUnit = lp_evacUnit;
    auto_gf_MedivacPickupEvacUnits_lp_medivac = lp_medivac;

    if (auto_gf_MedivacPickupEvacUnits_Trigger == null) {
        auto_gf_MedivacPickupEvacUnits_Trigger = TriggerCreate("auto_gf_MedivacPickupEvacUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_MedivacPickupEvacUnits_Trigger, false, false);
}

bool auto_gf_MedivacPickupEvacUnits_TriggerFunc (bool testConds, bool runActions) {
    unit lp_evacUnit = auto_gf_MedivacPickupEvacUnits_lp_evacUnit;
    unit lp_medivac = auto_gf_MedivacPickupEvacUnits_lp_medivac;

    // Automatic Variable Declarations
    // Implementation
    while (!(((libNtve_gf_UnitInRegion(lp_evacUnit, RegionCircle(UnitGetPosition(lp_medivac), 2.4)) == true) || (UnitIsAlive(lp_evacUnit) == false)))) {
        Wait(0.2, c_timeGame);
    }
    if ((UnitIsAlive(lp_evacUnit) == false)) {
        return true;
    }
    else {
        UnitIssueOrder(lp_medivac, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), lp_evacUnit), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_InitializeNovaMission("Nova02");
    TriggerExecute(gt_Init01Technology, true, false);
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_BriefingQ, true, true);
        ConsoleCommand("exit", true, true);
    }

    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNovC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "ReaperSpiderMines", 1);
    libComC_gf_EnableCampaignTechUnit(true, "Marine", gv_pLAYER_01_USER);
    libComC_gf_EnableCampaignTechUnit(true, "Marauder", gv_pLAYER_01_USER);
    libComC_gf_EnableCampaignTechUnit(true, "Reaper", gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(1, "NovaVoice2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB1D1D29A_g;
    int autoB1D1D29A_var;
    playergroup auto055A1A82_g;
    int auto055A1A82_var;
    playergroup auto82B07CD2_g;
    int auto82B07CD2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_dominionPlayerGroup, gv_pLAYER_02_DOMINION5);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(gv_zergPlayerGroup, gv_pLAYER_02_DOMINION4);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    autoB1D1D29A_g = gv_dominionPlayerGroup;
    autoB1D1D29A_var = -1;
    while (true) {
        autoB1D1D29A_var = PlayerGroupNextPlayer(autoB1D1D29A_g, autoB1D1D29A_var);
        if (autoB1D1D29A_var < 0) { break; }
        PlayerSetState(autoB1D1D29A_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(autoB1D1D29A_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(autoB1D1D29A_var, c_playerStateFoodIgnored, true);
    }
    auto055A1A82_g = gv_zergPlayerGroup;
    auto055A1A82_var = -1;
    while (true) {
        auto055A1A82_var = PlayerGroupNextPlayer(auto055A1A82_g, auto055A1A82_var);
        if (auto055A1A82_var < 0) { break; }
        PlayerSetState(auto055A1A82_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(auto055A1A82_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(auto055A1A82_var, c_playerStateFoodIgnored, true);
    }
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "FireSuppressionSystems", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "FasterLarvaSpawn", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "FasterLarvaSpawn", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "overlordtransport", 1);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(1), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(1), true);
    auto82B07CD2_g = PlayerGroupAll();
    auto82B07CD2_var = -1;
    while (true) {
        auto82B07CD2_var = PlayerGroupNextPlayer(auto82B07CD2_g, auto82B07CD2_var);
        if (auto82B07CD2_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto82B07CD2_var, "SnowVisual", 1);
    }
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION6, "DOM", 1);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION2, 6, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION3, 6, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION4, 6, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION6, 1, true);
    libNCMI_gf_NM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_cinematicSceneSettingUnits;

    // Automatic Variable Declarations
    unitgroup autoB5C31E77_g;
    int autoB5C31E77_u;
    unit autoB5C31E77_var;
    unitgroup autoD0A35DB7_g;
    int autoD0A35DB7_u;
    unit autoD0A35DB7_var;
    unitgroup autoBBAC101C_g;
    int autoBBAC101C_u;
    unit autoBBAC101C_var;

    // Variable Initialization
    lv_cinematicSceneSettingUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nova = UnitFromId(395);
    libNCMI_gf_SetNovaHeroUnit(gv_nova);
    libNCMI_gf_EnableDisableHeroReviveSystem(true, gv_pLAYER_01_USER);
    libNCUI_gf_SetHeroPanelUnit(1, gv_nova);
    UnitAbilityShow(gv_nova, "HeroNuclearStrike", false);
    libNCMI_gf_SetAllWorkerRallyPointsForPlayer(gv_pLAYER_01_USER);
    UnitGroupAdd(gv_outerBunkers, UnitFromId(340));
    UnitGroupAdd(gv_outerBunkers, UnitFromId(363));
    UnitGroupAdd(gv_outerBunkers, UnitFromId(333));
    UnitGroupAdd(gv_outerBunkers, UnitFromId(364));
    UnitGroupAdd(gv_innerBunkers, UnitFromId(16));
    UnitGroupAdd(gv_innerBunkers, UnitFromId(7));
    UnitGroupAdd(gv_innerBunkers, UnitFromId(6));
    UnitGroupAdd(gv_innerBunkers, UnitFromId(206));
    autoB5C31E77_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB5C31E77_u = UnitGroupCount(autoB5C31E77_g, c_unitCountAll);
    for (;; autoB5C31E77_u -= 1) {
        autoB5C31E77_var = UnitGroupUnitFromEnd(autoB5C31E77_g, autoB5C31E77_u);
        if (autoB5C31E77_var == null) { break; }
        UnitCargoCreate(autoB5C31E77_var, "Marine", 4);
    }
    autoD0A35DB7_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD0A35DB7_u = UnitGroupCount(autoD0A35DB7_g, c_unitCountAll);
    for (;; autoD0A35DB7_u -= 1) {
        autoD0A35DB7_var = UnitGroupUnitFromEnd(autoD0A35DB7_g, autoD0A35DB7_u);
        if (autoD0A35DB7_var == null) { break; }
        UnitCargoCreate(autoD0A35DB7_var, "Marine", 4);
        AISetGroupScriptControlled(UnitCargoLastCreatedGroup(), true);
    }
    autoBBAC101C_g = UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBBAC101C_u = UnitGroupCount(autoBBAC101C_g, c_unitCountAll);
    for (;; autoBBAC101C_u -= 1) {
        autoBBAC101C_var = UnitGroupUnitFromEnd(autoBBAC101C_g, autoBBAC101C_u);
        if (autoBBAC101C_var == null) { break; }
        libNtve_gf_PauseUnit(autoBBAC101C_var, true);
        libNtve_gf_ShowHideUnit(autoBBAC101C_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "nDLC_Music_Nova02_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAB9E6788_g;
    int autoAB9E6788_u;
    unit autoAB9E6788_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    UnitBehaviorAdd(UnitFromId(703), "InstantMorph", UnitFromId(703), 1);
    UnitIssueOrder(UnitFromId(703), Order(AbilityCommand("SnowRefinery_Terran_ExtendingBridgeNWShort8", 0)), c_orderQueueReplace);
    UnitBehaviorAdd(UnitFromId(710), "InstantMorph", UnitFromId(710), 1);
    UnitIssueOrder(UnitFromId(710), Order(AbilityCommand("MoebiusLabDoorsWideRight", 0)), c_orderQueueReplace);
    autoAB9E6788_g = UnitGroup("Medivac", gv_pLAYER_02_DOMINION5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB9E6788_u = UnitGroupCount(autoAB9E6788_g, c_unitCountAll);
    for (;; autoAB9E6788_u -= 1) {
        autoAB9E6788_var = UnitGroupUnitFromEnd(autoAB9E6788_g, autoAB9E6788_u);
        if (autoAB9E6788_var == null) { break; }
        UnitSetHeight(autoAB9E6788_var, 0.5, 0.0);
        libNtve_gf_SendActorMessageToUnit(autoAB9E6788_var, "AnimSetPausedAll");
        UnitSetState(autoAB9E6788_var, c_unitStateMoveSuppressed, false);
        UnitSetState(autoAB9E6788_var, c_unitStateTurnSuppressed, false);
        UnitSetState(autoAB9E6788_var, c_unitStateInvulnerable, true);
    }
    UnitBehaviorAdd(UnitFromId(1174), "PermanentlyCloaked", UnitFromId(1174), 1);
    UnitBehaviorAdd(UnitFromId(1174), "CritterWanderLeash", UnitFromId(1174), 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaOutdoorSounds", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9D29F838_g;
    int auto9D29F838_var;
    playergroup auto22BE63E6_g;
    int auto22BE63E6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_missionDuration = libLotv_gf_DifficultyValueFixed2(1370.0, 1350.0, 1330.0, 1310.0);
    gv_brutaliskLife = libLotv_gf_DifficultyValueInt2(3000, 3000, 4500, 7000);
    gv_brutaliskDamage = libLotv_gf_DifficultyValueInt2(75, 75, 150, 300);
    gv_bonusObjNorthZerglingCount = libLotv_gf_DifficultyValueInt2(4, 4, 8, 12);
    gv_bonusObjNorthBanelingCount = libLotv_gf_DifficultyValueInt2(2, 2, 4, 8);
    gv_bonusObjSouthRoachCount = libLotv_gf_DifficultyValueInt2(2, 2, 4, 6);
    gv_bonusObjSouthRavagerCount = libLotv_gf_DifficultyValueInt2(2, 2, 4, 4);
    gv_islandFortificationZerglingCount = libLotv_gf_DifficultyValueInt2(4, 4, 6, 4);
    gv_islandFortificationRoachCount = libLotv_gf_DifficultyValueInt2(0, 0, 1, 1);
    gv_islandFortificationHydraliskCount = libLotv_gf_DifficultyValueInt2(0, 0, 0, 1);
    CatalogFieldValueSet(c_gameCatalogUnit, "Brutalisk", "LifeMax", gv_pLAYER_02_DOMINION2, IntToString(gv_brutaliskLife));
    CatalogFieldValueSet(c_gameCatalogUnit, "Brutalisk", "LifeStart", gv_pLAYER_02_DOMINION2, IntToString(gv_brutaliskLife));
    CatalogFieldValueSet(c_gameCatalogUnit, "Brutalisk", "LifeMax", gv_pLAYER_02_DOMINION3, IntToString(gv_brutaliskLife));
    CatalogFieldValueSet(c_gameCatalogUnit, "Brutalisk", "LifeStart", gv_pLAYER_02_DOMINION3, IntToString(gv_brutaliskLife));
    CatalogFieldValueSet(c_gameCatalogEffect, "BrutalizeDamage", "Amount", gv_pLAYER_02_DOMINION2, IntToString(gv_brutaliskDamage));
    CatalogFieldValueSet(c_gameCatalogEffect, "BrutalizeDamage", "Amount", gv_pLAYER_02_DOMINION3, IntToString(gv_brutaliskDamage));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        auto9D29F838_g = gv_dominionPlayerGroup;
        auto9D29F838_var = -1;
        while (true) {
            auto9D29F838_var = PlayerGroupNextPlayer(auto9D29F838_g, auto9D29F838_var);
            if (auto9D29F838_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto9D29F838_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto9D29F838_var, "TerranVehicleAndShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto9D29F838_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto9D29F838_var, "TerranVehicleAndShipArmorsLevel1", 1);
        }
        auto22BE63E6_g = gv_zergPlayerGroup;
        auto22BE63E6_var = -1;
        while (true) {
            auto22BE63E6_var = PlayerGroupNextPlayer(auto22BE63E6_g, auto22BE63E6_var);
            if (auto22BE63E6_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto22BE63E6_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto22BE63E6_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto22BE63E6_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto22BE63E6_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto22BE63E6_var, "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto22BE63E6_var, "zerglingattackspeed", 1);
            TechTreeUpgradeAddLevel(auto22BE63E6_var, "CentrificalHooks", 1);
            TechTreeUpgradeAddLevel(auto22BE63E6_var, "GlialReconstitution", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_AddMissionTipCampaign("High Ground");
    libNCMI_gf_AddMissionTipCampaign("Reaper");
    libNCMI_gf_AddMissionTipCampaign("Spider Mine");
    libNCMI_gf_AddMissionTipCampaign("Nova Respawn");
    libComC_gf_AddUnitTypeToUnitHelpPanel("Zergling", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Roach", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Baneling", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ravager", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("DefilerMP", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Brutalisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Overlord", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("NydusCanal", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Queen", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/373365A9"), null, PointFromId(114));
    TimerStart(gv_missionTimer, gv_missionDuration, false, c_timeAI);
    TimerStart(gv_doMArrivalTimer, (gv_missionDuration - 20.0), false, c_timeAI);
    TimerStart(gv_fakeMissionTimer, (gv_missionDuration + 180.0), false, c_timeAI);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_HoldoutTimerQ, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDefendHornersBaseCreate, true, true);
    libNCUI_gf_TimerWindowCreate(gv_fakeMissionTimer, StringExternal("Param/Value/AF0A987B"), true, false);
    gv_missionTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_missionTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    Wait(2.0, c_timeAI);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective North Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveNorthRevealQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00105", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00106", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00039", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveNorthRevealQ_Init () {
    gt_BonusObjectiveNorthRevealQ = TriggerCreate("gt_BonusObjectiveNorthRevealQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj North Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjNorthWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00107", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjNorthWarningQ_Init () {
    gt_BonusObjNorthWarningQ = TriggerCreate("gt_BonusObjNorthWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj North Saved Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjNorthSavedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00108", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00109", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjNorthSavedQ_Init () {
    gt_BonusObjNorthSavedQ = TriggerCreate("gt_BonusObjNorthSavedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj North Lost Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjNorthLostQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00110", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjNorthLostQ_Init () {
    gt_BonusObjNorthLostQ = TriggerCreate("gt_BonusObjNorthLostQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj North Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjNorthSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3D2E3470_g;
    int auto3D2E3470_u;
    unit auto3D2E3470_var;
    unitgroup auto6CE5BEFA_g;
    int auto6CE5BEFA_u;
    unit auto6CE5BEFA_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjNorthZergKilled, true);
    TriggerEnable(gt_BonusObjNorthWormKilled, true);
    gf_SpawnNydusWorm(PointFromId(445), UnitGetPosition(UnitFromId(945)));
    Wait(4.0, c_timeAI);
    UnitIssueOrder(UnitFromId(703), Order(AbilityCommand("SnowRefinery_Terran_ExtendingBridgeNWShort8Out", 0)), c_orderQueueReplace);
    auto3D2E3470_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto3D2E3470_u = UnitGroupCount(auto3D2E3470_g, c_unitCountAll);
    for (;; auto3D2E3470_u -= 1) {
        auto3D2E3470_var = UnitGroupUnitFromEnd(auto3D2E3470_g, auto3D2E3470_u);
        if (auto3D2E3470_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto3D2E3470_var, true, gv_pLAYER_01_USER);
    }
    auto6CE5BEFA_g = UnitGroup("NydusCanal", gv_pLAYER_02_DOMINION4, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto6CE5BEFA_u = UnitGroupCount(auto6CE5BEFA_g, c_unitCountAll);
    for (;; auto6CE5BEFA_u -= 1) {
        auto6CE5BEFA_var = UnitGroupUnitFromEnd(auto6CE5BEFA_g, auto6CE5BEFA_u);
        if (auto6CE5BEFA_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto6CE5BEFA_var, true, gv_pLAYER_01_USER);
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(445), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_bonusObjNorthPing = PingLastCreated();
    PingSetTooltip(gv_bonusObjNorthPing, StringExternal("Param/Value/C2A4FFEA"));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B1A62AF0"), null, PointFromId(445));
    TriggerExecute(gt_BonusObjectiveNorthRevealQ, true, false);
    TriggerExecute(gt_ObjectiveSecureArmyTechCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjNorthSpawn_Init () {
    gt_BonusObjNorthSpawn = TriggerCreate("gt_BonusObjNorthSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj North Zerg Killed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjNorthZergKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION4))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_bonusObjNorthPing);
    gv_bonusObjProgress += 1;
    TriggerExecute(gt_ObjectiveSecureArmyTechComplete, true, false);
    TriggerExecute(gt_BonusObjNorthSavedQ, true, false);
    TriggerExecute(gt_BonusObjNorthRescue, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjNorthZergKilled_Init () {
    gt_BonusObjNorthZergKilled = TriggerCreate("gt_BonusObjNorthZergKilled_Func");
    TriggerEnable(gt_BonusObjNorthZergKilled, false);
    TriggerAddEventUnitDied(gt_BonusObjNorthZergKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj North Rescue
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjNorthRescue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto94736E19_n = 4;
    int auto94736E19_i;
    unitgroup auto3F9CFA05_g;
    int auto3F9CFA05_u;
    unit auto3F9CFA05_var;
    unitgroup auto87CF0754_g;
    int auto87CF0754_u;
    unit auto87CF0754_var;
    unitgroup auto56BDD4A6_g;
    int auto56BDD4A6_u;
    unit auto56BDD4A6_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    for (auto94736E19_i = 1; auto94736E19_i <= auto94736E19_n; auto94736E19_i += 1) {
        UnitCreate(2, "Scientist", 0, gv_pLAYER_02_DOMINION5, PointFromId(673), PointGetFacing(PointFromId(673)));
        auto3F9CFA05_g = UnitLastCreatedGroup();
        auto3F9CFA05_u = UnitGroupCount(auto3F9CFA05_g, c_unitCountAll);
        for (;; auto3F9CFA05_u -= 1) {
            auto3F9CFA05_var = UnitGroupUnitFromEnd(auto3F9CFA05_g, auto3F9CFA05_u);
            if (auto3F9CFA05_var == null) { break; }
            UnitBehaviorAdd(auto3F9CFA05_var, "Scared", auto3F9CFA05_var, 1);
            UnitIssueOrder(auto3F9CFA05_var, OrderTargetingUnit(null, UnitFromId(661)), c_orderQueueReplace);
        }
        Wait(0.5, c_timeAI);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupNovaTechnology", 0, 0, PointWithOffset(PointFromId(673), -2.0, -2.0));
    Wait(1.5, c_timeAI);
    UnitIssueOrder(UnitFromId(247), OrderTargetingUnit(AbilityCommand("Rally", 0), UnitFromId(680)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(247), Order(AbilityCommand("BunkerTransport", 1)), c_orderQueueReplace);
    Wait(1.0, c_timeAI);
    UnitIssueOrder(UnitFromId(242), OrderTargetingUnit(AbilityCommand("Rally", 0), UnitFromId(680)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(242), Order(AbilityCommand("BunkerTransport", 1)), c_orderQueueReplace);
    Wait(1.0, c_timeAI);
    while (((UnitGroupCount(UnitGroup("Marine", gv_pLAYER_02_DOMINION5, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Scientist", gv_pLAYER_02_DOMINION5, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        UnitGroupIssueOrder(UnitGroup("Marine", gv_pLAYER_02_DOMINION5, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(null, UnitFromId(680)), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroup("Scientist", gv_pLAYER_02_DOMINION5, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(null, UnitFromId(661)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    UnitCreateEffectUnit(UnitLastCreated(), "PickupNovaTechnologySet", UnitLastCreated());
    auto87CF0754_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto87CF0754_u = UnitGroupCount(auto87CF0754_g, c_unitCountAll);
    for (;; auto87CF0754_u -= 1) {
        auto87CF0754_var = UnitGroupUnitFromEnd(auto87CF0754_g, auto87CF0754_u);
        if (auto87CF0754_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto87CF0754_var, false, gv_pLAYER_01_USER);
    }
    auto56BDD4A6_g = UnitGroup("Medivac", gv_pLAYER_02_DOMINION5, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto56BDD4A6_u = UnitGroupCount(auto56BDD4A6_g, c_unitCountAll);
    for (;; auto56BDD4A6_u -= 1) {
        auto56BDD4A6_var = UnitGroupUnitFromEnd(auto56BDD4A6_g, auto56BDD4A6_u);
        if (auto56BDD4A6_var == null) { break; }
        UnitSetHeight(auto56BDD4A6_var, 4.0, 3.0);
        libNtve_gf_SendActorMessageToUnit(auto56BDD4A6_var, "AnimSetPausedAll 0");
        UnitSetState(auto56BDD4A6_var, c_unitStateMoveSuppressed, true);
        UnitSetState(auto56BDD4A6_var, c_unitStateTurnSuppressed, true);
        gf_GoToRegionandDespawn(auto56BDD4A6_var, RegionFromId(23));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjNorthRescue_Init () {
    gt_BonusObjNorthRescue = TriggerCreate("gt_BonusObjNorthRescue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj North Worm Killed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjNorthWormKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC2987B0D_g;
    int autoC2987B0D_u;
    unit autoC2987B0D_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION4))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NydusCanal"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(17)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        autoC2987B0D_g = UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC2987B0D_u = UnitGroupCount(autoC2987B0D_g, c_unitCountAll);
        for (;; autoC2987B0D_u -= 1) {
            autoC2987B0D_var = UnitGroupUnitFromEnd(autoC2987B0D_g, autoC2987B0D_u);
            if (autoC2987B0D_var == null) { break; }
            if ((UnitGetType(autoC2987B0D_var) == "SpineCrawler") && (DistanceBetweenPoints(UnitGetPosition(autoC2987B0D_var), PointFromId(218)) < 1)) {
                UnitIssueOrder(autoC2987B0D_var, Order(AbilityCommand("SpineCrawlerUproot", 0)), c_orderQueueReplace);
            }
            else if ((UnitGetType(autoC2987B0D_var) == "SpineCrawlerUprooted")) {
                UnitIssueOrder(autoC2987B0D_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(112)), c_orderQueueReplace);
                UnitIssueOrder(autoC2987B0D_var, OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(112)), c_orderQueueAddToEnd);
            }
            else if (true) {
                UnitIssueOrder(autoC2987B0D_var, libNtve_gf_ReviveOrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(945)), EventUnit()), c_orderQueueReplace);
            }
        }
        Wait(2.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjNorthWormKilled_Init () {
    gt_BonusObjNorthWormKilled = TriggerCreate("gt_BonusObjNorthWormKilled_Func");
    TriggerEnable(gt_BonusObjNorthWormKilled, false);
    TriggerAddEventUnitDied(gt_BonusObjNorthWormKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj North Facility Killed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjNorthFacilityKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD72280F7_g;
    int autoD72280F7_u;
    unit autoD72280F7_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjNorthZergKilled, false);
    TriggerEnable(gt_BonusObjNorthWormKilled, false);
    PingDestroy(gv_bonusObjNorthPing);
    autoD72280F7_g = UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD72280F7_u = UnitGroupCount(autoD72280F7_g, c_unitCountAll);
    for (;; autoD72280F7_u -= 1) {
        autoD72280F7_var = UnitGroupUnitFromEnd(autoD72280F7_g, autoD72280F7_u);
        if (autoD72280F7_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(autoD72280F7_var, false, gv_pLAYER_01_USER);
    }
    TriggerExecute(gt_ObjectiveSecureArmyTechFailed, true, false);
    TriggerExecute(gt_BonusObjNorthLostQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjNorthFacilityKilled_Init () {
    gt_BonusObjNorthFacilityKilled = TriggerCreate("gt_BonusObjNorthFacilityKilled_Func");
    TriggerAddEventUnitDied(gt_BonusObjNorthFacilityKilled, UnitRefFromUnit(UnitFromId(945)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj North Crawler Morph
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjNorthCrawlerMorph_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "SpineCrawler"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(17)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 60);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjNorthCrawlerMorph_Init () {
    gt_BonusObjNorthCrawlerMorph = TriggerCreate("gt_BonusObjNorthCrawlerMorph_Func");
    TriggerAddEventUnitConstructProgress(gt_BonusObjNorthCrawlerMorph, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective South Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveSouthRevealQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00111", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00112", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveSouthRevealQ_Init () {
    gt_BonusObjectiveSouthRevealQ = TriggerCreate("gt_BonusObjectiveSouthRevealQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventUnit() == gv_nova))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(642)) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00113", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthWarningQ_Init () {
    gt_BonusObjSouthWarningQ = TriggerCreate("gt_BonusObjSouthWarningQ_Func");
    TriggerAddEventUnitRegion(gt_BonusObjSouthWarningQ, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Saved Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthSavedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_bonusObjProgress == 2)) {
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00114", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00115", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00116", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00117", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthSavedQ_Init () {
    gt_BonusObjSouthSavedQ = TriggerCreate("gt_BonusObjSouthSavedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Lost Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthLostQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_bonusObjProgress == 0)) {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00118", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00119", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthLostQ_Init () {
    gt_BonusObjSouthLostQ = TriggerCreate("gt_BonusObjSouthLostQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9F670569_g;
    int auto9F670569_u;
    unit auto9F670569_var;
    unitgroup autoBB15191D_g;
    int autoBB15191D_u;
    unit autoBB15191D_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjSouthZergKilled, true);
    TriggerEnable(gt_BonusObjSouthWormKilled, true);
    gv_enemyEventHydralisks = UnitGroupEmpty();
    gv_enemyEventZerglings = UnitGroupEmpty();
    gf_SpawnNydusWorm(PointFromId(251), UnitGetPosition(UnitFromId(642)));
    Wait(4.0, c_timeAI);
    UnitIssueOrder(UnitFromId(710), Order(AbilityCommand("MoebiusLabDoorsWideRightLowered", 0)), c_orderQueueReplace);
    auto9F670569_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9F670569_u = UnitGroupCount(auto9F670569_g, c_unitCountAll);
    for (;; auto9F670569_u -= 1) {
        auto9F670569_var = UnitGroupUnitFromEnd(auto9F670569_g, auto9F670569_u);
        if (auto9F670569_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto9F670569_var, true, gv_pLAYER_01_USER);
    }
    autoBB15191D_g = UnitGroup("NydusCanal", gv_pLAYER_02_DOMINION4, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoBB15191D_u = UnitGroupCount(autoBB15191D_g, c_unitCountAll);
    for (;; autoBB15191D_u -= 1) {
        autoBB15191D_var = UnitGroupUnitFromEnd(autoBB15191D_g, autoBB15191D_u);
        if (autoBB15191D_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(autoBB15191D_var, true, gv_pLAYER_01_USER);
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(251), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_bonusObjSouthPing = PingLastCreated();
    PingSetTooltip(gv_bonusObjSouthPing, StringExternal("Param/Value/A328851B"));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/19409116"), null, PointFromId(251));
    TriggerExecute(gt_BonusObjectiveSouthRevealQ, true, false);
    TriggerExecute(gt_ObjectiveSecureNovaTechCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthSpawn_Init () {
    gt_BonusObjSouthSpawn = TriggerCreate("gt_BonusObjSouthSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Zerg Killed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthZergKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION4))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_bonusObjSouthPing);
    gv_bonusObjProgress += 1;
    TriggerExecute(gt_ObjectiveSecureNovaTechComplete, true, false);
    TriggerExecute(gt_BonusObjSouthSavedQ, true, false);
    TriggerExecute(gt_BonusObjSouthRescue, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthZergKilled_Init () {
    gt_BonusObjSouthZergKilled = TriggerCreate("gt_BonusObjSouthZergKilled_Func");
    TriggerEnable(gt_BonusObjSouthZergKilled, false);
    TriggerAddEventUnitDied(gt_BonusObjSouthZergKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Rescue
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthRescue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto725FFBBF_n = 4;
    int auto725FFBBF_i;
    unitgroup autoF17037E7_g;
    int autoF17037E7_u;
    unit autoF17037E7_var;
    unitgroup auto942FBE42_g;
    int auto942FBE42_u;
    unit auto942FBE42_var;
    unitgroup auto16E82C10_g;
    int auto16E82C10_u;
    unit auto16E82C10_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    for (auto725FFBBF_i = 1; auto725FFBBF_i <= auto725FFBBF_n; auto725FFBBF_i += 1) {
        UnitCreate(2, "Scientist", 0, gv_pLAYER_02_DOMINION5, PointFromId(1161), PointGetFacing(PointFromId(673)));
        autoF17037E7_g = UnitLastCreatedGroup();
        autoF17037E7_u = UnitGroupCount(autoF17037E7_g, c_unitCountAll);
        for (;; autoF17037E7_u -= 1) {
            autoF17037E7_var = UnitGroupUnitFromEnd(autoF17037E7_g, autoF17037E7_u);
            if (autoF17037E7_var == null) { break; }
            UnitBehaviorAdd(autoF17037E7_var, "Scared", autoF17037E7_var, 1);
            UnitIssueOrder(autoF17037E7_var, OrderTargetingUnit(null, UnitFromId(1159)), c_orderQueueReplace);
        }
        Wait(0.5, c_timeAI);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupNovaEquipment", 0, 0, PointWithOffset(PointFromId(1161), -2.0, -2.0));
    Wait(1.5, c_timeAI);
    UnitIssueOrder(UnitFromId(79), OrderTargetingUnit(AbilityCommand("Rally", 0), UnitFromId(1160)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(79), Order(AbilityCommand("BunkerTransport", 1)), c_orderQueueReplace);
    Wait(1.0, c_timeAI);
    UnitIssueOrder(UnitFromId(83), OrderTargetingUnit(AbilityCommand("Rally", 0), UnitFromId(1160)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(83), Order(AbilityCommand("BunkerTransport", 1)), c_orderQueueReplace);
    Wait(1.0, c_timeAI);
    while (((UnitGroupCount(UnitGroup("Marine", gv_pLAYER_02_DOMINION5, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Scientist", gv_pLAYER_02_DOMINION5, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        UnitGroupIssueOrder(UnitGroup("Marine", gv_pLAYER_02_DOMINION5, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(null, UnitFromId(1160)), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroup("Scientist", gv_pLAYER_02_DOMINION5, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(null, UnitFromId(1159)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    UnitCreateEffectUnit(UnitLastCreated(), "PickupNovaEquipmentSet", UnitLastCreated());
    auto942FBE42_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto942FBE42_u = UnitGroupCount(auto942FBE42_g, c_unitCountAll);
    for (;; auto942FBE42_u -= 1) {
        auto942FBE42_var = UnitGroupUnitFromEnd(auto942FBE42_g, auto942FBE42_u);
        if (auto942FBE42_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto942FBE42_var, false, gv_pLAYER_01_USER);
    }
    auto16E82C10_g = UnitGroup("Medivac", gv_pLAYER_02_DOMINION5, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto16E82C10_u = UnitGroupCount(auto16E82C10_g, c_unitCountAll);
    for (;; auto16E82C10_u -= 1) {
        auto16E82C10_var = UnitGroupUnitFromEnd(auto16E82C10_g, auto16E82C10_u);
        if (auto16E82C10_var == null) { break; }
        UnitSetHeight(auto16E82C10_var, 4.0, 3.0);
        libNtve_gf_SendActorMessageToUnit(auto16E82C10_var, "AnimSetPausedAll 0");
        UnitSetState(auto16E82C10_var, c_unitStateMoveSuppressed, true);
        UnitSetState(auto16E82C10_var, c_unitStateTurnSuppressed, true);
        gf_GoToRegionandDespawn(auto16E82C10_var, RegionFromId(27));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthRescue_Init () {
    gt_BonusObjSouthRescue = TriggerCreate("gt_BonusObjSouthRescue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Worm Killed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthWormKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDCF73225_g;
    int autoDCF73225_u;
    unit autoDCF73225_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION4))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NydusCanal"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(19)) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        autoDCF73225_g = UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDCF73225_u = UnitGroupCount(autoDCF73225_g, c_unitCountAll);
        for (;; autoDCF73225_u -= 1) {
            autoDCF73225_var = UnitGroupUnitFromEnd(autoDCF73225_g, autoDCF73225_u);
            if (autoDCF73225_var == null) { break; }
            if ((UnitGetType(autoDCF73225_var) == "SpineCrawler") && (DistanceBetweenPoints(UnitGetPosition(autoDCF73225_var), PointFromId(252)) < 1)) {
                UnitIssueOrder(autoDCF73225_var, Order(AbilityCommand("SpineCrawlerUproot", 0)), c_orderQueueReplace);
            }
            else if ((UnitGetType(autoDCF73225_var) == "SpineCrawlerUprooted")) {
                UnitIssueOrder(autoDCF73225_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(111)), c_orderQueueReplace);
                UnitIssueOrder(autoDCF73225_var, OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), PointFromId(111)), c_orderQueueAddToEnd);
            }
            else if (true) {
                UnitIssueOrder(autoDCF73225_var, libNtve_gf_ReviveOrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(642)), EventUnit()), c_orderQueueReplace);
            }
        }
        Wait(2.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthWormKilled_Init () {
    gt_BonusObjSouthWormKilled = TriggerCreate("gt_BonusObjSouthWormKilled_Func");
    TriggerEnable(gt_BonusObjSouthWormKilled, false);
    TriggerAddEventUnitDied(gt_BonusObjSouthWormKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Facility Killed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthFacilityKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto009C4088_g;
    int auto009C4088_u;
    unit auto009C4088_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjSouthZergKilled, false);
    TriggerEnable(gt_BonusObjSouthWormKilled, false);
    PingDestroy(gv_bonusObjSouthPing);
    auto009C4088_g = UnitGroup(null, gv_pLAYER_02_DOMINION4, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto009C4088_u = UnitGroupCount(auto009C4088_g, c_unitCountAll);
    for (;; auto009C4088_u -= 1) {
        auto009C4088_var = UnitGroupUnitFromEnd(auto009C4088_g, auto009C4088_u);
        if (auto009C4088_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto009C4088_var, false, gv_pLAYER_01_USER);
    }
    TriggerExecute(gt_ObjectiveSecureNovaTechFailed, true, false);
    TriggerExecute(gt_BonusObjSouthLostQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthFacilityKilled_Init () {
    gt_BonusObjSouthFacilityKilled = TriggerCreate("gt_BonusObjSouthFacilityKilled_Func");
    TriggerAddEventUnitDied(gt_BonusObjSouthFacilityKilled, UnitRefFromUnit(UnitFromId(642)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Crawler Morph
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthCrawlerMorph_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "SpineCrawler"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(19)) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 60);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthCrawlerMorph_Init () {
    gt_BonusObjSouthCrawlerMorph = TriggerCreate("gt_BonusObjSouthCrawlerMorph_Func");
    TriggerAddEventUnitConstructProgress(gt_BonusObjSouthCrawlerMorph, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Obj South Ravager Shots
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjSouthRavagerShots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_02_DOMINION4))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(19)) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_bonusObjSouthRavagers, c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(gv_bonusObjSouthRavagers, OrderTargetingPoint(AbilityCommand("RavagerCorrosiveBile", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    Wait(0.25, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjSouthRavagerShots_Init () {
    gt_BonusObjSouthRavagerShots = TriggerCreate("gt_BonusObjSouthRavagerShots_Func");
    TriggerAddEventUnitDamaged(gt_BonusObjSouthRavagerShots, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 1) Wave Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave1WaveIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00085", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave1WaveIncomingQ_Init () {
    gt_Wave1WaveIncomingQ = TriggerCreate("gt_Wave1WaveIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 2) Wave Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave2WaveIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00086", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave2WaveIncomingQ_Init () {
    gt_Wave2WaveIncomingQ = TriggerCreate("gt_Wave2WaveIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 3) Banelings Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave3BanelingsIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00087", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave3BanelingsIncomingQ_Init () {
    gt_Wave3BanelingsIncomingQ = TriggerCreate("gt_Wave3BanelingsIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 4) Wave Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave4WaveIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00013", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave4WaveIncomingQ_Init () {
    gt_Wave4WaveIncomingQ = TriggerCreate("gt_Wave4WaveIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 5) Ravagers Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave5RavagersIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00088", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave5RavagersIncomingQ_Init () {
    gt_Wave5RavagersIncomingQ = TriggerCreate("gt_Wave5RavagersIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 6) Wave Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave6WaveIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00017", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave6WaveIncomingQ_Init () {
    gt_Wave6WaveIncomingQ = TriggerCreate("gt_Wave6WaveIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 7) Defilers Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave7DefilersIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00089", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave7DefilersIncomingQ_Init () {
    gt_Wave7DefilersIncomingQ = TriggerCreate("gt_Wave7DefilersIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 8) Wave Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave8WaveIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00019", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave8WaveIncomingQ_Init () {
    gt_Wave8WaveIncomingQ = TriggerCreate("gt_Wave8WaveIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 9/10) Double Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave910DoubleWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00020", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave910DoubleWaveQ_Init () {
    gt_Wave910DoubleWaveQ = TriggerCreate("gt_Wave910DoubleWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 11) Ultralisks Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave11UltralisksIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00090", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave11UltralisksIncomingQ_Init () {
    gt_Wave11UltralisksIncomingQ = TriggerCreate("gt_Wave11UltralisksIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 12) Boss Wave Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave12BossWaveIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00091", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave12BossWaveIncomingQ_Init () {
    gt_Wave12BossWaveIncomingQ = TriggerCreate("gt_Wave12BossWaveIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: (Wave 13/14) Final Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_Wave1314FinalWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_finalWaveTriggered = true;
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00021", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave1314FinalWaveQ_Init () {
    gt_Wave1314FinalWaveQ = TriggerCreate("gt_Wave1314FinalWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Break Time 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_BreakTime1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeAI);
    while (!((gv_attackWavesActive == 0))) {
        Wait(0.5, c_timeAI);
    }
    Wait(3.0, c_timeAI);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00024", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00094", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitGroupCount(UnitGroup("SpiderMineBurrowed", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00028", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreakTime1Q_Init () {
    gt_BreakTime1Q = TriggerCreate("gt_BreakTime1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Break Time 2
//--------------------------------------------------------------------------------------------------
bool gt_BreakTime2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeAI);
    while (!((gv_attackWavesActive == 0))) {
        Wait(0.5, c_timeAI);
    }
    libNCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    TriggerExecute(gt_BonusObjNorthSpawn, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(14), true);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(16), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreakTime2_Init () {
    gt_BreakTime2 = TriggerCreate("gt_BreakTime2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Break Time 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_BreakTime3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeAI);
    while (!((gv_attackWavesActive == 0))) {
        Wait(0.5, c_timeAI);
    }
    gf_ZergIslandFortification(2);
    Wait(3.0, c_timeAI);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00023", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(RegionFromId(7)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
    PingSetScale(PingLastCreated(), 0.66);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2BBB6E4E"), null, RegionGetCenter(RegionFromId(7)));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(RegionFromId(2)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
    PingSetScale(PingLastCreated(), 0.66);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/32356DE3"), null, RegionGetCenter(RegionFromId(2)));
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00092", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitGroupCount(UnitGroup("Bunker", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 2)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00093", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00030", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreakTime3Q_Init () {
    gt_BreakTime3Q = TriggerCreate("gt_BreakTime3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Break Time 4
//--------------------------------------------------------------------------------------------------
bool gt_BreakTime4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeAI);
    while (!((gv_attackWavesActive == 0))) {
        Wait(0.5, c_timeAI);
    }
    libNCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    TriggerExecute(gt_BonusObjSouthSpawn, true, false);
    Wait(3.0, c_timeAI);
    gf_ZergIslandFortification(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreakTime4_Init () {
    gt_BreakTime4 = TriggerCreate("gt_BreakTime4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Break Time 5 Q
//--------------------------------------------------------------------------------------------------
bool gt_BreakTime5Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeAI);
    while (!((gv_attackWavesActive == 0))) {
        Wait(0.5, c_timeAI);
    }
    gf_ZergIslandFortification(4);
    Wait(3.0, c_timeAI);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00062", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreakTime5Q_Init () {
    gt_BreakTime5Q = TriggerCreate("gt_BreakTime5Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Break Time 6 Q
//--------------------------------------------------------------------------------------------------
bool gt_BreakTime6Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeAI);
    while (!((gv_attackWavesActive == 0))) {
        Wait(0.5, c_timeAI);
    }
    gf_ZergIslandFortification(4);
    Wait(3.0, c_timeAI);
    libNCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00025", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00074", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreakTime6Q_Init () {
    gt_BreakTime6Q = TriggerCreate("gt_BreakTime6Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Outer Defenses Q
//--------------------------------------------------------------------------------------------------
bool gt_OuterDefensesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }

        if (!((UnitGroupCount(gv_outerBunkers, c_unitCountAlive) <= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00050", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OuterDefensesQ_Init () {
    gt_OuterDefensesQ = TriggerCreate("gt_OuterDefensesQ_Func");
    TriggerAddEventUnitDied(gt_OuterDefensesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inner Defenses Q
//--------------------------------------------------------------------------------------------------
bool gt_InnerDefensesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }

        if (!((UnitGroupCount(gv_innerBunkers, c_unitCountAlive) <= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00051", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InnerDefensesQ_Init () {
    gt_InnerDefensesQ = TriggerCreate("gt_InnerDefensesQ_Func");
    TriggerAddEventUnitDied(gt_InnerDefensesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Don't Go To Enemy Base Q
//--------------------------------------------------------------------------------------------------
bool gt_DontGoToEnemyBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00095", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DontGoToEnemyBaseQ_Init () {
    gt_DontGoToEnemyBaseQ = TriggerCreate("gt_DontGoToEnemyBaseQ_Func");
    TriggerAddEventUnitRegion(gt_DontGoToEnemyBaseQ, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Fortification Tumor Bullies
//--------------------------------------------------------------------------------------------------
bool gt_ZergFortificationTumorBullies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoC1FB2790_ae = 5;
    const int autoC1FB2790_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoC1FB2790_ai >= 0 && lv_i <= autoC1FB2790_ae) || (autoC1FB2790_ai < 0 && lv_i >= autoC1FB2790_ae) ) ; lv_i += autoC1FB2790_ai ) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromName(("North Zerg Island " + IntToString(lv_i))), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromName(("North Tumor Bullies " + IntToString(lv_i))), false);
        }
        else {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromName(("North Tumor Bullies " + IntToString(lv_i))), true);
        }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromName(("East Zerg Island " + IntToString(lv_i))), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromName(("East Tumor Bullies " + IntToString(lv_i))), false);
        }
        else {
            AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromName(("East Tumor Bullies " + IntToString(lv_i))), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergFortificationTumorBullies_Init () {
    gt_ZergFortificationTumorBullies = TriggerCreate("gt_ZergFortificationTumorBullies_Func");
    TriggerAddEventTimePeriodic(gt_ZergFortificationTumorBullies, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout Timer Q
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutTimerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00054", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutTimerQ_Init () {
    gt_HoldoutTimerQ = TriggerCreate("gt_HoldoutTimerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defenders of Man Arrival Q
//--------------------------------------------------------------------------------------------------
bool gt_DefendersofManArrivalQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowShow(gv_missionTimerWindow, PlayerGroupAll(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00096", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00097", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefendersofManArrivalQ_Init () {
    gt_DefendersofManArrivalQ = TriggerCreate("gt_DefendersofManArrivalQ_Func");
    TriggerAddEventTimer(gt_DefendersofManArrivalQ, gv_doMArrivalTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/6EDFDE50"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Horner's Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatHornersBaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDefendHornersBaseFailed, true, false);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D41A9ED5"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatHornersBaseDestroyed_Init () {
    gt_DefeatHornersBaseDestroyed = TriggerCreate("gt_DefeatHornersBaseDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatHornersBaseDestroyed, UnitRefFromUnit(UnitFromId(164)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Defend Horner's Base Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDefendHornersBaseCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto8048C945_g;
    int auto8048C945_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    auto8048C945_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8048C945_u = UnitGroupCount(auto8048C945_g, c_unitCountAll);
    for (;; auto8048C945_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto8048C945_g, auto8048C945_u);
        if (lv_u == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_u, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDefendHornersBaseCompleted_Init () {
    gt_VictoryDefendHornersBaseCompleted = TriggerCreate("gt_VictoryDefendHornersBaseCompleted_Func");
    TriggerAddEventTimer(gt_VictoryDefendHornersBaseCompleted, gv_missionTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerExecute(gt_ObjectiveDefendHornersBaseComplete, true, true);
    libNCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_nova, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libComC_gf_CampaignAwardAchievement("Nova02_1", gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_alliedStructuresLost <= 5)) {
        libComC_gf_CampaignAwardAchievement("Nova02_3", gv_pLAYER_01_USER);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_alliedStructuresLost == 0)) {
        libComC_gf_CampaignAwardAchievement("Nova02_Mastery", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/394B112E"), IntToText(gv_spiderMineKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/FE76F69E"), IntToText(gv_alliedStructuresLost));
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider Mine Kill Tracker
//--------------------------------------------------------------------------------------------------
bool gt_SpiderMineKillTracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_02_DOMINION2) || (EventPlayer() == gv_pLAYER_02_DOMINION3) || (EventPlayer() == gv_pLAYER_02_DOMINION4)))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "SpiderMine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spiderMineKills += 1;
    if ((gv_spiderMineKills >= 30)) {
        TriggerExecute(gt_SpiderMineUnlockAchievement, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiderMineKillTracker_Init () {
    gt_SpiderMineKillTracker = TriggerCreate("gt_SpiderMineKillTracker_Func");
    TriggerAddEventUnitDied(gt_SpiderMineKillTracker, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider Mine Unlock Achievement
//--------------------------------------------------------------------------------------------------
bool gt_SpiderMineUnlockAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libComC_gf_CampaignAwardAchievement("Nova02_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiderMineUnlockAchievement_Init () {
    gt_SpiderMineUnlockAchievement = TriggerCreate("gt_SpiderMineUnlockAchievement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied Structures Lost Tracker
//--------------------------------------------------------------------------------------------------
bool gt_AlliedStructuresLostTracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_02_DOMINION)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alliedStructuresLost += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlliedStructuresLostTracker_Init () {
    gt_AlliedStructuresLostTracker = TriggerCreate("gt_AlliedStructuresLostTracker_Func");
    TriggerAddEventUnitDied(gt_AlliedStructuresLostTracker, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied Units Lost Tracker
//--------------------------------------------------------------------------------------------------
bool gt_AlliedUnitsLostTracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_02_DOMINION) || (EventPlayer() == gv_pLAYER_02_DOMINION5)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alliedUnitsLost += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlliedUnitsLostTracker_Init () {
    gt_AlliedUnitsLostTracker = TriggerCreate("gt_AlliedUnitsLostTracker_Func");
    TriggerAddEventUnitDied(gt_AlliedUnitsLostTracker, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Kill enemy units with Spider Mines
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKillenemyunitswithSpiderMines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((EventUnitDamageEffect() == "VultureSpiderMinesDamage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_anniversaryAchievementTermSpiderMineKills = (gv_anniversaryAchievementTermSpiderMineKills + 1);
    AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_Nova02", gv_anniversaryAchievementTermSpiderMineKills);
    TextExpressionSetToken("Param/Expression/4CAD1DDE", "A", IntToText(gv_anniversaryAchievementTermSpiderMineKills));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/4CAD1DDE"), false);
    gv_achievement_SpiderMineKills += 1;
    if ((gv_achievement_SpiderMineKills >= 200)) {
        libComC_gf_CampaignAwardAchievement("Anniversary_Nova02", gv_pLAYER_01_USER);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKillenemyunitswithSpiderMines_Init () {
    gt_AchievementKillenemyunitswithSpiderMines = TriggerCreate("gt_AchievementKillenemyunitswithSpiderMines_Func");
    TriggerAddEventUnitDied(gt_AchievementKillenemyunitswithSpiderMines, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNCMI_gf_DisplayMissionTip();
    Wait(libNCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers();
    cai_runall();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradeCasualNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradeHardBrutal, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC29C5FAD_g;
    int autoC29C5FAD_var;
    playergroup autoABB3F479_g;
    int autoABB3F479_var;
    playergroup autoF219FA2E_g;
    int autoF219FA2E_var;
    playergroup autoF57FD395_g;
    int autoF57FD395_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    autoC29C5FAD_g = gv_dominionPlayerGroup;
    autoC29C5FAD_var = -1;
    while (true) {
        autoC29C5FAD_var = PlayerGroupNextPlayer(autoC29C5FAD_g, autoC29C5FAD_var);
        if (autoC29C5FAD_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC29C5FAD_var, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC29C5FAD_var, "TerranVehicleAndShipWeaponsLevel1", 1);
    }
    autoABB3F479_g = gv_zergPlayerGroup;
    autoABB3F479_var = -1;
    while (true) {
        autoABB3F479_var = PlayerGroupNextPlayer(autoABB3F479_g, autoABB3F479_var);
        if (autoABB3F479_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoABB3F479_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoABB3F479_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoABB3F479_var, "ZergMissileWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    autoF219FA2E_g = gv_dominionPlayerGroup;
    autoF219FA2E_var = -1;
    while (true) {
        autoF219FA2E_var = PlayerGroupNextPlayer(autoF219FA2E_g, autoF219FA2E_var);
        if (autoF219FA2E_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF219FA2E_var, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoF219FA2E_var, "TerranVehicleAndShipArmorsLevel1", 1);
    }
    autoF57FD395_g = gv_zergPlayerGroup;
    autoF57FD395_var = -1;
    while (true) {
        autoF57FD395_var = PlayerGroupNextPlayer(autoF57FD395_g, autoF57FD395_var);
        if (autoF57FD395_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF57FD395_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoF57FD395_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeCasualNormal_Init () {
    gt_AIUpgradeCasualNormal = TriggerCreate("gt_AIUpgradeCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrade Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradeHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE8471AB6_g;
    int autoE8471AB6_var;
    playergroup auto04EE1A78_g;
    int auto04EE1A78_var;
    playergroup auto7D5E75C9_g;
    int auto7D5E75C9_var;
    playergroup autoE00581CC_g;
    int autoE00581CC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    autoE8471AB6_g = gv_dominionPlayerGroup;
    autoE8471AB6_var = -1;
    while (true) {
        autoE8471AB6_var = PlayerGroupNextPlayer(autoE8471AB6_g, autoE8471AB6_var);
        if (autoE8471AB6_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoE8471AB6_var, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoE8471AB6_var, "TerranVehicleAndShipWeaponsLevel2", 1);
    }
    auto04EE1A78_g = gv_zergPlayerGroup;
    auto04EE1A78_var = -1;
    while (true) {
        auto04EE1A78_var = PlayerGroupNextPlayer(auto04EE1A78_g, auto04EE1A78_var);
        if (auto04EE1A78_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto04EE1A78_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto04EE1A78_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto04EE1A78_var, "ZergMissileWeaponsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    auto7D5E75C9_g = gv_dominionPlayerGroup;
    auto7D5E75C9_var = -1;
    while (true) {
        auto7D5E75C9_var = PlayerGroupNextPlayer(auto7D5E75C9_g, auto7D5E75C9_var);
        if (auto7D5E75C9_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7D5E75C9_var, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto7D5E75C9_var, "TerranVehicleAndShipArmorsLevel2", 1);
    }
    autoE00581CC_g = gv_zergPlayerGroup;
    autoE00581CC_var = -1;
    while (true) {
        autoE00581CC_var = PlayerGroupNextPlayer(autoE00581CC_g, autoE00581CC_var);
        if (autoE00581CC_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoE00581CC_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoE00581CC_var, "ZergFlyerArmorsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradeHardBrutal_Init () {
    gt_AIUpgradeHardBrutal = TriggerCreate("gt_AIUpgradeHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Waypoints North
//--------------------------------------------------------------------------------------------------
bool gt_SetWaypointsNorth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto39A334BC_val;
    const int auto414E4E86_ae = 15;
    int auto414E4E86_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_northWaveCount += 1;
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, PointFromId(100));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION2, PointFromId(151));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION2, PointFromId(98), false);
    auto39A334BC_val = gv_northWaveCount;
    if (auto39A334BC_val == 1) {
        gv_lastWaypointsNorth[1] = PointFromId(36);
        gv_lastWaypointsNorth[2] = PointFromId(156);
        gv_lastWaypointsNorth[3] = PointFromId(157);
        gv_lastWaypointsNorth[4] = PointFromId(158);
        gv_lastWaypointsNorth[5] = PointFromId(159);
        gv_lastWaypointsNorth[6] = PointFromId(160);
        gv_lastWaypointsNorth[7] = PointFromId(161);
        gv_lastWaypointsNorth[8] = PointFromId(162);
        gv_lastWaypointsNorth[9] = PointFromId(377);
        gv_lastWaypointsNorth[10] = null;
        gv_lastWaypointsNorth[11] = null;
        gv_lastWaypointsNorth[12] = null;
        gv_lastWaypointsNorth[13] = null;
        gv_lastWaypointsNorth[14] = null;
        gv_lastWaypointsNorth[15] = null;
    }
    else if (auto39A334BC_val == 2) {
        gv_lastWaypointsNorth[1] = PointFromId(345);
        gv_lastWaypointsNorth[2] = PointFromId(378);
        gv_lastWaypointsNorth[3] = PointFromId(396);
        gv_lastWaypointsNorth[4] = PointFromId(397);
        gv_lastWaypointsNorth[5] = PointFromId(467);
        gv_lastWaypointsNorth[6] = PointFromId(468);
        gv_lastWaypointsNorth[7] = PointFromId(473);
        gv_lastWaypointsNorth[8] = PointFromId(484);
        gv_lastWaypointsNorth[9] = PointFromId(906);
        gv_lastWaypointsNorth[10] = PointFromId(1513);
        gv_lastWaypointsNorth[11] = PointFromId(1514);
        gv_lastWaypointsNorth[12] = null;
        gv_lastWaypointsNorth[13] = null;
        gv_lastWaypointsNorth[14] = null;
        gv_lastWaypointsNorth[15] = null;
    }
    else if (auto39A334BC_val == 3) {
        gv_lastWaypointsNorth[1] = PointFromId(49);
        gv_lastWaypointsNorth[2] = PointFromId(341);
        gv_lastWaypointsNorth[3] = PointFromId(342);
        gv_lastWaypointsNorth[4] = PointFromId(344);
        gv_lastWaypointsNorth[5] = PointFromId(379);
        gv_lastWaypointsNorth[6] = PointFromId(380);
        gv_lastWaypointsNorth[7] = PointFromId(385);
        gv_lastWaypointsNorth[8] = PointFromId(386);
        gv_lastWaypointsNorth[9] = PointFromId(1515);
        gv_lastWaypointsNorth[10] = PointFromId(1516);
        gv_lastWaypointsNorth[11] = null;
        gv_lastWaypointsNorth[12] = null;
        gv_lastWaypointsNorth[13] = null;
        gv_lastWaypointsNorth[14] = null;
        gv_lastWaypointsNorth[15] = null;
    }
    else if (auto39A334BC_val == 4) {
        gv_lastWaypointsNorth[1] = PointFromId(58);
        gv_lastWaypointsNorth[2] = PointFromId(1519);
        gv_lastWaypointsNorth[3] = PointFromId(1520);
        gv_lastWaypointsNorth[4] = PointFromId(1521);
        gv_lastWaypointsNorth[5] = PointFromId(1522);
        gv_lastWaypointsNorth[6] = PointFromId(1523);
        gv_lastWaypointsNorth[7] = PointFromId(1524);
        gv_lastWaypointsNorth[8] = PointFromId(1525);
        gv_lastWaypointsNorth[9] = PointFromId(1526);
        gv_lastWaypointsNorth[10] = PointFromId(1527);
        gv_lastWaypointsNorth[11] = PointFromId(1528);
        gv_lastWaypointsNorth[12] = null;
        gv_lastWaypointsNorth[13] = null;
        gv_lastWaypointsNorth[14] = null;
        gv_lastWaypointsNorth[15] = null;
    }
    else if (auto39A334BC_val == 5) {
        gv_lastWaypointsNorth[1] = PointFromId(36);
        gv_lastWaypointsNorth[2] = PointFromId(156);
        gv_lastWaypointsNorth[3] = PointFromId(157);
        gv_lastWaypointsNorth[4] = PointFromId(158);
        gv_lastWaypointsNorth[5] = PointFromId(159);
        gv_lastWaypointsNorth[6] = PointFromId(160);
        gv_lastWaypointsNorth[7] = PointFromId(161);
        gv_lastWaypointsNorth[8] = PointFromId(162);
        gv_lastWaypointsNorth[9] = PointFromId(377);
        gv_lastWaypointsNorth[10] = null;
        gv_lastWaypointsNorth[11] = null;
        gv_lastWaypointsNorth[12] = null;
        gv_lastWaypointsNorth[13] = null;
        gv_lastWaypointsNorth[14] = null;
        gv_lastWaypointsNorth[15] = null;
    }
    else if (auto39A334BC_val == 6) {
        gv_lastWaypointsNorth[1] = PointFromId(58);
        gv_lastWaypointsNorth[2] = PointFromId(1519);
        gv_lastWaypointsNorth[3] = PointFromId(1520);
        gv_lastWaypointsNorth[4] = PointFromId(1521);
        gv_lastWaypointsNorth[5] = PointFromId(1522);
        gv_lastWaypointsNorth[6] = PointFromId(1523);
        gv_lastWaypointsNorth[7] = PointFromId(1524);
        gv_lastWaypointsNorth[8] = PointFromId(1525);
        gv_lastWaypointsNorth[9] = PointFromId(1526);
        gv_lastWaypointsNorth[10] = PointFromId(1527);
        gv_lastWaypointsNorth[11] = PointFromId(1528);
        gv_lastWaypointsNorth[12] = null;
        gv_lastWaypointsNorth[13] = null;
        gv_lastWaypointsNorth[14] = null;
        gv_lastWaypointsNorth[15] = null;
    }
    else if (auto39A334BC_val == 7) {
        gv_lastWaypointsNorth[1] = PointFromId(345);
        gv_lastWaypointsNorth[2] = PointFromId(378);
        gv_lastWaypointsNorth[3] = PointFromId(396);
        gv_lastWaypointsNorth[4] = PointFromId(397);
        gv_lastWaypointsNorth[5] = PointFromId(467);
        gv_lastWaypointsNorth[6] = PointFromId(468);
        gv_lastWaypointsNorth[7] = PointFromId(473);
        gv_lastWaypointsNorth[8] = PointFromId(484);
        gv_lastWaypointsNorth[9] = PointFromId(906);
        gv_lastWaypointsNorth[10] = PointFromId(1513);
        gv_lastWaypointsNorth[11] = PointFromId(1514);
        gv_lastWaypointsNorth[12] = null;
        gv_lastWaypointsNorth[13] = null;
        gv_lastWaypointsNorth[14] = null;
        gv_lastWaypointsNorth[15] = null;
    }
    else {
    }
    auto414E4E86_var = 1;
    for ( ; auto414E4E86_var <= auto414E4E86_ae; auto414E4E86_var += 1 ) {
        if ((gv_lastWaypointsNorth[auto414E4E86_var] != null)) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION2, gv_lastWaypointsNorth[auto414E4E86_var], false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetWaypointsNorth_Init () {
    gt_SetWaypointsNorth = TriggerCreate("gt_SetWaypointsNorth_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Final Trickle Waypoints North
//--------------------------------------------------------------------------------------------------
bool gt_SetFinalTrickleWaypointsNorth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto5189EC17_ae = 15;
    int auto5189EC17_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_AttackWaveManager, false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, PointFromId(100));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION2, PointFromId(151));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION2, PointFromId(98), false);
    auto5189EC17_var = 1;
    for ( ; auto5189EC17_var <= auto5189EC17_ae; auto5189EC17_var += 1 ) {
        if ((gv_lastWaypointsNorth[auto5189EC17_var] != null)) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION2, gv_lastWaypointsNorth[auto5189EC17_var], false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetFinalTrickleWaypointsNorth_Init () {
    gt_SetFinalTrickleWaypointsNorth = TriggerCreate("gt_SetFinalTrickleWaypointsNorth_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Waypoints East
//--------------------------------------------------------------------------------------------------
bool gt_SetWaypointsEast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5B235E8C_val;
    const int autoCBFA6E77_ae = 15;
    int autoCBFA6E77_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_eastWaveCount += 1;
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION3, PointFromId(103));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointFromId(624));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(101), false);
    auto5B235E8C_val = gv_eastWaveCount;
    if (auto5B235E8C_val == 1) {
        gv_lastWaypointsEast[1] = PointFromId(1537);
        gv_lastWaypointsEast[2] = PointFromId(1538);
        gv_lastWaypointsEast[3] = PointFromId(1539);
        gv_lastWaypointsEast[4] = PointFromId(1540);
        gv_lastWaypointsEast[5] = PointFromId(1541);
        gv_lastWaypointsEast[6] = PointFromId(1542);
        gv_lastWaypointsEast[7] = PointFromId(1543);
        gv_lastWaypointsEast[8] = PointFromId(1544);
        gv_lastWaypointsEast[9] = PointFromId(1545);
        gv_lastWaypointsEast[10] = PointFromId(1546);
        gv_lastWaypointsEast[11] = null;
        gv_lastWaypointsEast[12] = null;
        gv_lastWaypointsEast[13] = null;
        gv_lastWaypointsEast[14] = null;
        gv_lastWaypointsEast[15] = null;
    }
    else if (auto5B235E8C_val == 2) {
        gv_lastWaypointsEast[1] = PointFromId(1517);
        gv_lastWaypointsEast[2] = PointFromId(1518);
        gv_lastWaypointsEast[3] = PointFromId(1529);
        gv_lastWaypointsEast[4] = PointFromId(1530);
        gv_lastWaypointsEast[5] = PointFromId(1531);
        gv_lastWaypointsEast[6] = PointFromId(1532);
        gv_lastWaypointsEast[7] = PointFromId(1533);
        gv_lastWaypointsEast[8] = PointFromId(1534);
        gv_lastWaypointsEast[9] = PointFromId(1535);
        gv_lastWaypointsEast[10] = null;
        gv_lastWaypointsEast[11] = null;
        gv_lastWaypointsEast[12] = null;
        gv_lastWaypointsEast[13] = null;
        gv_lastWaypointsEast[14] = null;
        gv_lastWaypointsEast[15] = null;
    }
    else if (auto5B235E8C_val == 3) {
        gv_lastWaypointsEast[1] = PointFromId(1547);
        gv_lastWaypointsEast[2] = PointFromId(1548);
        gv_lastWaypointsEast[3] = PointFromId(1549);
        gv_lastWaypointsEast[4] = PointFromId(1550);
        gv_lastWaypointsEast[5] = PointFromId(1551);
        gv_lastWaypointsEast[6] = PointFromId(1552);
        gv_lastWaypointsEast[7] = PointFromId(1553);
        gv_lastWaypointsEast[8] = PointFromId(1554);
        gv_lastWaypointsEast[9] = PointFromId(1556);
        gv_lastWaypointsEast[10] = PointFromId(1557);
        gv_lastWaypointsEast[11] = PointFromId(1558);
        gv_lastWaypointsEast[12] = null;
        gv_lastWaypointsEast[13] = null;
        gv_lastWaypointsEast[14] = null;
        gv_lastWaypointsEast[15] = null;
    }
    else if (auto5B235E8C_val == 4) {
        gv_lastWaypointsEast[1] = PointFromId(1559);
        gv_lastWaypointsEast[2] = PointFromId(1560);
        gv_lastWaypointsEast[3] = PointFromId(1561);
        gv_lastWaypointsEast[4] = PointFromId(1562);
        gv_lastWaypointsEast[5] = PointFromId(1563);
        gv_lastWaypointsEast[6] = PointFromId(1564);
        gv_lastWaypointsEast[7] = PointFromId(1565);
        gv_lastWaypointsEast[8] = PointFromId(1566);
        gv_lastWaypointsEast[9] = PointFromId(1567);
        gv_lastWaypointsEast[10] = PointFromId(1568);
        gv_lastWaypointsEast[11] = PointFromId(1569);
        gv_lastWaypointsEast[12] = null;
        gv_lastWaypointsEast[13] = null;
        gv_lastWaypointsEast[14] = null;
        gv_lastWaypointsEast[15] = null;
    }
    else if (auto5B235E8C_val == 5) {
        gv_lastWaypointsEast[1] = PointFromId(1547);
        gv_lastWaypointsEast[2] = PointFromId(1548);
        gv_lastWaypointsEast[3] = PointFromId(1549);
        gv_lastWaypointsEast[4] = PointFromId(1550);
        gv_lastWaypointsEast[5] = PointFromId(1551);
        gv_lastWaypointsEast[6] = PointFromId(1552);
        gv_lastWaypointsEast[7] = PointFromId(1553);
        gv_lastWaypointsEast[8] = PointFromId(1554);
        gv_lastWaypointsEast[9] = PointFromId(1556);
        gv_lastWaypointsEast[10] = PointFromId(1557);
        gv_lastWaypointsEast[11] = PointFromId(1558);
        gv_lastWaypointsEast[12] = null;
        gv_lastWaypointsEast[13] = null;
        gv_lastWaypointsEast[14] = null;
        gv_lastWaypointsEast[15] = null;
    }
    else if (auto5B235E8C_val == 6) {
        gv_lastWaypointsEast[1] = PointFromId(1537);
        gv_lastWaypointsEast[2] = PointFromId(1538);
        gv_lastWaypointsEast[3] = PointFromId(1539);
        gv_lastWaypointsEast[4] = PointFromId(1540);
        gv_lastWaypointsEast[5] = PointFromId(1541);
        gv_lastWaypointsEast[6] = PointFromId(1542);
        gv_lastWaypointsEast[7] = PointFromId(1543);
        gv_lastWaypointsEast[8] = PointFromId(1544);
        gv_lastWaypointsEast[9] = PointFromId(1545);
        gv_lastWaypointsEast[10] = PointFromId(1546);
        gv_lastWaypointsEast[11] = null;
        gv_lastWaypointsEast[12] = null;
        gv_lastWaypointsEast[13] = null;
        gv_lastWaypointsEast[14] = null;
        gv_lastWaypointsEast[15] = null;
    }
    else if (auto5B235E8C_val == 7) {
        gv_lastWaypointsEast[1] = PointFromId(1517);
        gv_lastWaypointsEast[2] = PointFromId(1518);
        gv_lastWaypointsEast[3] = PointFromId(1529);
        gv_lastWaypointsEast[4] = PointFromId(1530);
        gv_lastWaypointsEast[5] = PointFromId(1531);
        gv_lastWaypointsEast[6] = PointFromId(1532);
        gv_lastWaypointsEast[7] = PointFromId(1533);
        gv_lastWaypointsEast[8] = PointFromId(1534);
        gv_lastWaypointsEast[9] = PointFromId(1535);
        gv_lastWaypointsEast[10] = null;
        gv_lastWaypointsEast[11] = null;
        gv_lastWaypointsEast[12] = null;
        gv_lastWaypointsEast[13] = null;
        gv_lastWaypointsEast[14] = null;
        gv_lastWaypointsEast[15] = null;
    }
    else {
    }
    autoCBFA6E77_var = 1;
    for ( ; autoCBFA6E77_var <= autoCBFA6E77_ae; autoCBFA6E77_var += 1 ) {
        if ((gv_lastWaypointsEast[autoCBFA6E77_var] != null)) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, gv_lastWaypointsEast[autoCBFA6E77_var], false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetWaypointsEast_Init () {
    gt_SetWaypointsEast = TriggerCreate("gt_SetWaypointsEast_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Final Trickle Waypoints East
//--------------------------------------------------------------------------------------------------
bool gt_SetFinalTrickleWaypointsEast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoC361AC60_ae = 15;
    int autoC361AC60_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_AttackWaveManager, false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION3, PointFromId(103));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION3, PointFromId(624));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, PointFromId(101), false);
    autoC361AC60_var = 1;
    for ( ; autoC361AC60_var <= autoC361AC60_ae; autoC361AC60_var += 1 ) {
        if ((gv_lastWaypointsEast[autoC361AC60_var] != null)) {
            AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION3, gv_lastWaypointsEast[autoC361AC60_var], false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetFinalTrickleWaypointsEast_Init () {
    gt_SetFinalTrickleWaypointsEast = TriggerCreate("gt_SetFinalTrickleWaypointsEast_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Manager
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveManager_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup lv_waveGroup;
    int lv_attackWavePlayer;
    point lv_gatherPoint;
    point lv_targetPoint;
    int lv_targetWaypointIndex;
    point[16] lv_targetWaypoints;
    unitgroup lv_validTargets;
    int[16] lv_telegraphPings;
    int lv_waveGroupPing;
    fixed lv_m;
    fixed lv_b;

    // Automatic Variable Declarations
    int autoD843421D_val;
    const int auto48375123_ae = 15;
    int auto48375123_var;
    const int auto77B61292_ae = 15;
    int auto77B61292_var;
    const int autoD95C684D_ae = 15;
    int autoD95C684D_var;
    unitgroup auto2433F59F_g;
    int auto2433F59F_u;
    unit auto2433F59F_var;
    unitgroup autoD685A609_g;
    int autoD685A609_u;
    unit autoD685A609_var;
    const int autoC0BD83D8_ae = 15;
    int autoC0BD83D8_var;

    // Variable Initialization
    lv_waveGroup = UnitGroupEmpty();
    lv_targetWaypointIndex = 1;
    lv_validTargets = UnitGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_telegraphPings[init_i] = c_invalidPingId;
    }
    lv_waveGroupPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackWavesActive += 1;
    lv_waveGroup = AIWaveGetUnits(EventPlayerWave());
    lv_attackWavePlayer = UnitGetOwner(UnitGroupUnit(lv_waveGroup, 1));
    autoD843421D_val = lv_attackWavePlayer;
    if (autoD843421D_val == gv_pLAYER_02_DOMINION2) {
        lv_gatherPoint = PointFromId(98);
        lv_targetPoint = PointFromId(100);
        auto48375123_var = 1;
        for ( ; auto48375123_var <= auto48375123_ae; auto48375123_var += 1 ) {
            if ((gv_lastWaypointsNorth[auto48375123_var] != null)) {
                lv_targetWaypoints[auto48375123_var] = gv_lastWaypointsNorth[auto48375123_var];
            }

        }
    }
    else if (autoD843421D_val == gv_pLAYER_02_DOMINION3) {
        lv_gatherPoint = PointFromId(101);
        lv_targetPoint = PointFromId(103);
        auto77B61292_var = 1;
        for ( ; auto77B61292_var <= auto77B61292_ae; auto77B61292_var += 1 ) {
            if ((gv_lastWaypointsEast[auto77B61292_var] != null)) {
                lv_targetWaypoints[auto77B61292_var] = gv_lastWaypointsEast[auto77B61292_var];
            }

        }
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", lv_gatherPoint, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_waveGroupPing = PingLastCreated();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        autoD95C684D_var = 1;
        for ( ; autoD95C684D_var <= autoD95C684D_ae; autoD95C684D_var += 1 ) {
            if ((lv_targetWaypoints[autoD95C684D_var] != null)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_targetWaypoints[autoD95C684D_var], Color(100.00, 0.00, 0.00), 0.0, PointGetFacing(lv_targetWaypoints[autoD95C684D_var]));
                PingSetScale(PingLastCreated(), 0.5);
                lv_telegraphPings[autoD95C684D_var] = PingLastCreated();
                Wait(0.5, c_timeAI);
            }

        }
    }

    while (!((DistanceBetweenPoints(UnitGroupCenterOfGroup(lv_waveGroup), lv_targetPoint) < DistanceBetweenPoints(lv_gatherPoint, lv_targetPoint)))) {
        Wait(0.5, c_timeAI);
    }
    while ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_waveGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        PingSetPosition(lv_waveGroupPing, UnitGroupCenterOfGroup(lv_waveGroup));
        if ((lv_targetWaypoints[lv_targetWaypointIndex] != lv_targetPoint) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(lv_waveGroup), lv_targetWaypoints[lv_targetWaypointIndex]) < 6.0)) {
            if ((gv_finalWaveTriggered == false)) {
                PingDestroy(lv_telegraphPings[lv_targetWaypointIndex]);
                lv_telegraphPings[lv_targetWaypointIndex] = c_invalidPingId;
            }

            lv_targetWaypointIndex += 1;
            if ((lv_targetWaypoints[lv_targetWaypointIndex] == null)) {
                lv_targetWaypoints[lv_targetWaypointIndex] = lv_targetPoint;
            }

        }

        lv_validTargets = UnitGroupEmpty();
        lv_m = Tan((PointGetFacing(lv_targetWaypoints[lv_targetWaypointIndex]) + 90.0));
        lv_b = (PointGetY(UnitGroupCenterOfGroup(lv_waveGroup))-(lv_m*PointGetX(UnitGroupCenterOfGroup(lv_waveGroup))));
        auto2433F59F_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lv_attackWavePlayer, c_unitAllianceEnemy, RegionCircle(UnitGroupCenterOfGroup(lv_waveGroup), 15.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2433F59F_u = UnitGroupCount(auto2433F59F_g, c_unitCountAll);
        for (;; auto2433F59F_u -= 1) {
            auto2433F59F_var = UnitGroupUnitFromEnd(auto2433F59F_g, auto2433F59F_u);
            if (auto2433F59F_var == null) { break; }
            if ((PointPathingCost(UnitGetPosition(auto2433F59F_var), UnitGroupCenterOfGroup(lv_waveGroup)) < 20)) {
                if ((DistanceBetweenPoints(UnitGetPosition(auto2433F59F_var), UnitGroupCenterOfGroup(lv_waveGroup)) < 3.0)) {
                    UnitGroupAdd(lv_validTargets, auto2433F59F_var);
                }
                else if ((((PointGetFacing(lv_targetWaypoints[lv_targetWaypointIndex]) > 0.0) && (PointGetY(UnitGetPosition(auto2433F59F_var)) > ((lv_m*PointGetX(UnitGetPosition(auto2433F59F_var)))+lv_b))) || ((PointGetFacing(lv_targetWaypoints[lv_targetWaypointIndex]) < 0.0) && (PointGetY(UnitGetPosition(auto2433F59F_var)) < ((lv_m*PointGetX(UnitGetPosition(auto2433F59F_var)))+lv_b))))) {
                    UnitGroupAdd(lv_validTargets, auto2433F59F_var);
                }
            }

        }
        if ((UnitGetType(UnitGroupUnit(lv_waveGroup, 1)) == "Brutalisk")) {
            if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) > 0)) {
                UnitGroupIssueOrder(lv_waveGroup, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_validTargets, UnitGroupCenterOfGroup(lv_waveGroup))), c_orderQueueReplace);
            }
            else {
                UnitGroupIssueOrder(lv_waveGroup, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetWaypoints[lv_targetWaypointIndex]), c_orderQueueReplace);
            }
        }
        else {
            if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) > 0)) {
                UnitGroupIssueOrder(lv_waveGroup, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupClosestToPoint(lv_validTargets, UnitGroupCenterOfGroup(lv_waveGroup))), 2.0, UnitGroupCenterOfGroup(lv_waveGroup))), c_orderQueueReplace);
            }
            else {
                autoD685A609_g = lv_waveGroup;
                autoD685A609_u = UnitGroupCount(autoD685A609_g, c_unitCountAll);
                for (;; autoD685A609_u -= 1) {
                    autoD685A609_var = UnitGroupUnitFromEnd(autoD685A609_g, autoD685A609_u);
                    if (autoD685A609_var == null) { break; }
                    if ((DistanceBetweenPoints(UnitGetPosition(autoD685A609_var), lv_targetWaypoints[lv_targetWaypointIndex]) > 6.0)) {
                        UnitIssueOrder(autoD685A609_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetWaypoints[lv_targetWaypointIndex]), c_orderQueueReplace);
                    }

                }
            }
        }
        Wait(0.25, c_timeAI);
    }
    PingDestroy(lv_waveGroupPing);
    autoC0BD83D8_var = 1;
    for ( ; autoC0BD83D8_var <= autoC0BD83D8_ae; autoC0BD83D8_var += 1 ) {
        if ((lv_telegraphPings[autoC0BD83D8_var] != c_invalidPingId)) {
            PingDestroy(lv_telegraphPings[autoC0BD83D8_var]);
            lv_telegraphPings[autoC0BD83D8_var] = c_invalidPingId;
        }

    }
    gv_attackWavesActive -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveManager_Init () {
    gt_AttackWaveManager = TriggerCreate("gt_AttackWaveManager_Func");
    TriggerAddEventPlayerAIWave(gt_AttackWaveManager, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Wave Ravager Shots
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaveRavagerShots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyRavagers;
    unit lv_closestValidRavager;
    region lv_ravagerShotTargetRegion;
    point lv_ravagerShotTargetPoint;

    // Automatic Variable Declarations
    unitgroup auto6284706C_g;
    int auto6284706C_u;
    unit auto6284706C_var;

    // Variable Initialization
    lv_nearbyRavagers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == gv_pLAYER_02_DOMINION2) || (EventPlayer() == gv_pLAYER_02_DOMINION3)))) {
            return false;
        }

        if (!(((EventUnitDamageSourcePlayer() == gv_pLAYER_01_USER) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_DOMINION)))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "SpiderMine"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nearbyRavagers = UnitGroup("Ravager", EventPlayer(), RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_ravagerShotTargetRegion = RegionCircle(EventUnitDamageSourcePoint(), 1.5);
    auto6284706C_g = lv_nearbyRavagers;
    auto6284706C_u = UnitGroupCount(auto6284706C_g, c_unitCountAll);
    for (;; auto6284706C_u -= 1) {
        auto6284706C_var = UnitGroupUnitFromEnd(auto6284706C_g, auto6284706C_u);
        if (auto6284706C_var == null) { break; }
        if ((UnitAbilityGetCooldown(auto6284706C_var, "RavagerCorrosiveBile", "Abil/RavagerCorrosiveBile") > 0.0)) {
            UnitGroupRemove(lv_nearbyRavagers, auto6284706C_var);
        }

    }
    if ((UnitGroupCount(lv_nearbyRavagers, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        lv_ravagerShotTargetPoint = gf_AIGetRavagerTargetPoint(lv_ravagerShotTargetRegion);
        UnitGroupIssueOrder(lv_nearbyRavagers, OrderTargetingPoint(AbilityCommand("RavagerCorrosiveBile", 0), lv_ravagerShotTargetPoint), c_orderQueueAddToFront);
        Wait(1.0, c_timeAI);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaveRavagerShots_Init () {
    gt_AIAttackWaveRavagerShots = TriggerCreate("gt_AIAttackWaveRavagerShots_Func");
    TriggerAddEventUnitDamaged(gt_AIAttackWaveRavagerShots, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Wave Dark Swarm
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaveDarkSwarm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyDefilers;
    unit lv_closestValidDefiler;

    // Automatic Variable Declarations
    unitgroup auto63648FA4_g;
    int auto63648FA4_u;
    unit auto63648FA4_var;

    // Variable Initialization
    lv_nearbyDefilers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == gv_pLAYER_02_DOMINION2) || (EventPlayer() == gv_pLAYER_02_DOMINION3)))) {
            return false;
        }

        if (!(((EventUnitDamageSourcePlayer() == gv_pLAYER_01_USER) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_DOMINION)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nearbyDefilers = UnitGroup("DefilerMP", EventPlayer(), RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63648FA4_g = lv_nearbyDefilers;
    auto63648FA4_u = UnitGroupCount(auto63648FA4_g, c_unitCountAll);
    for (;; auto63648FA4_u -= 1) {
        auto63648FA4_var = UnitGroupUnitFromEnd(auto63648FA4_g, auto63648FA4_u);
        if (auto63648FA4_var == null) { break; }
        if ((UnitGetPropertyFixed(auto63648FA4_var, c_unitPropEnergy, c_unitPropCurrent) < 100.0)) {
            UnitGroupRemove(lv_nearbyDefilers, auto63648FA4_var);
        }

    }
    if ((UnitGroupCount(lv_nearbyDefilers, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitGroupIssueOrder(lv_nearbyDefilers, OrderTargetingPoint(AbilityCommand("DefilerMPDarkSwarm", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, UnitGetFacing(EventUnit()))), c_orderQueueAddToFront);
        Wait(4.0, c_timeAI);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaveDarkSwarm_Init () {
    gt_AIAttackWaveDarkSwarm = TriggerCreate("gt_AIAttackWaveDarkSwarm_Func");
    TriggerAddEventUnitDamaged(gt_AIAttackWaveDarkSwarm, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defiler Energy
//--------------------------------------------------------------------------------------------------
bool gt_DefilerEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "DefilerMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropEnergyPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefilerEnergy_Init () {
    gt_DefilerEnergy = TriggerCreate("gt_DefilerEnergy_Func");
    TriggerAddEventUnitCreated(gt_DefilerEnergy, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Horner's Base Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendHornersBaseCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova02Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendHornersBaseCreate_Init () {
    gt_ObjectiveDefendHornersBaseCreate = TriggerCreate("gt_ObjectiveDefendHornersBaseCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Horner's Base Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendHornersBaseComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDefendHornersBaseCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyZergBase, c_objectiveStateCompleted);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendHornersBaseComplete_Init () {
    gt_ObjectiveDefendHornersBaseComplete = TriggerCreate("gt_ObjectiveDefendHornersBaseComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defend Horner's Base Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendHornersBaseFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDefendHornersBaseCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyZergBase, c_objectiveStateFailed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendHornersBaseFailed_Init () {
    gt_ObjectiveDefendHornersBaseFailed = TriggerCreate("gt_ObjectiveDefendHornersBaseFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure Army Tech Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureArmyTechCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCMMI_gf_CreateObjectiveCampaign("Nova02Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureArmyTechCreate_Init () {
    gt_ObjectiveSecureArmyTechCreate = TriggerCreate("gt_ObjectiveSecureArmyTechCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure Army Tech Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureArmyTechComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjNorthFacilityKilled, false);
    TriggerExecute(gt_ObjectiveSecureArmyTechCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova02Bonus01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureArmyTechComplete_Init () {
    gt_ObjectiveSecureArmyTechComplete = TriggerCreate("gt_ObjectiveSecureArmyTechComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure Army Tech Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureArmyTechFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSecureArmyTechCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova02Bonus01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureArmyTechFailed_Init () {
    gt_ObjectiveSecureArmyTechFailed = TriggerCreate("gt_ObjectiveSecureArmyTechFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure Nova Tech Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureNovaTechCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCMMI_gf_CreateObjectiveCampaign("Nova02Bonus02");
    gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureNovaTechCreate_Init () {
    gt_ObjectiveSecureNovaTechCreate = TriggerCreate("gt_ObjectiveSecureNovaTechCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure Nova Tech Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureNovaTechComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjSouthFacilityKilled, false);
    TriggerExecute(gt_ObjectiveSecureNovaTechCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova02Bonus02", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureNovaTechComplete_Init () {
    gt_ObjectiveSecureNovaTechComplete = TriggerCreate("gt_ObjectiveSecureNovaTechComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Secure Nova Tech Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureNovaTechFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSecureNovaTechCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova02Bonus02", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureNovaTechFailed_Init () {
    gt_ObjectiveSecureNovaTechFailed = TriggerCreate("gt_ObjectiveSecureNovaTechFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto57464411_g;
    int auto57464411_u;
    unit auto57464411_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameQ);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    auto57464411_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto57464411_u = UnitGroupCount(auto57464411_g, c_unitCountAll);
    for (;; auto57464411_u -= 1) {
        auto57464411_var = UnitGroupUnitFromEnd(auto57464411_g, auto57464411_u);
        if (auto57464411_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto57464411_var, false);
    }
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova02_JessicaHall_002.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova02_Horner_006.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Mission_Nova02_Horner_076.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Mission_Nova02_Horner_121.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Mission_Nova02_Nova_077.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Mission_Nova02_Horner_078.ogg", false);
    TriggerExecute(gt_BriefingSceneHive, true, true);
    TriggerExecute(gt_BriefingSceneReapers, true, true);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene - Hive
//--------------------------------------------------------------------------------------------------
bool gt_BriefingSceneHive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unitgroup lv_dropPodUnits;

    // Automatic Variable Declarations
    unitgroup auto8511184C_g;
    int auto8511184C_u;
    unit auto8511184C_var;
    unitgroup auto7B40238F_g;
    int auto7B40238F_u;
    unit auto7B40238F_var;
    unitgroup auto002AA10B_g;
    int auto002AA10B_u;
    unit auto002AA10B_var;
    unitgroup autoA5D85E35_g;
    int autoA5D85E35_u;
    unit autoA5D85E35_var;
    unitgroup auto359564D5_g;
    int auto359564D5_u;
    unit auto359564D5_var;

    // Variable Initialization
    lv_dropPodUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(UnitFromId(1174), true);
    libNtve_gf_PauseUnit(UnitFromId(1174), false);
    auto8511184C_g = UnitGroup("MineralField", c_playerAny, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8511184C_u = UnitGroupCount(auto8511184C_g, c_unitCountAll);
    for (;; auto8511184C_u -= 1) {
        auto8511184C_var = UnitGroupUnitFromEnd(auto8511184C_g, auto8511184C_u);
        if (auto8511184C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8511184C_var, true);
    }
    auto7B40238F_g = UnitGroup("Extractor", c_playerAny, RegionFromId(1), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto7B40238F_u = UnitGroupCount(auto7B40238F_g, c_unitCountAll);
    for (;; auto7B40238F_u -= 1) {
        auto7B40238F_var = UnitGroupUnitFromEnd(auto7B40238F_g, auto7B40238F_u);
        if (auto7B40238F_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VespeneGeyser", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto7B40238F_var));
    }
    CreepModify(RegionGetCenter(RegionFromId(1)), 30.0, false, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, UnitGetPosition(UnitFromId(22)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, UnitGetPosition(UnitFromId(23)));
    Wait(6.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION4, PointFromId(371));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("ZergBuild", 2), UnitGroupUnit(UnitGroup("VespeneGeyser", c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(173)), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Drone", 0, gv_pLAYER_02_DOMINION4, PointFromId(371));
    auto002AA10B_g = UnitLastCreatedGroup();
    auto002AA10B_u = UnitGroupCount(auto002AA10B_g, c_unitCountAll);
    for (;; auto002AA10B_u -= 1) {
        auto002AA10B_var = UnitGroupUnitFromEnd(auto002AA10B_g, auto002AA10B_u);
        if (auto002AA10B_var == null) { break; }
        lv_i += 1;
        UnitIssueOrder(auto002AA10B_var, OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupUnit(UnitGroup("MineralField", c_playerAny, RegionCircle(PointFromId(371), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_i)), c_orderQueueReplace);
    }
    lv_i = 0;
    lv_dropPodUnits = UnitGroupEmpty();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION4, PointFromId(391));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("ZergBuild", 2), UnitGroupUnit(UnitGroup("VespeneGeyser", c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(171)), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Drone", 0, gv_pLAYER_02_DOMINION4, PointFromId(391));
    autoA5D85E35_g = UnitLastCreatedGroup();
    autoA5D85E35_u = UnitGroupCount(autoA5D85E35_g, c_unitCountAll);
    for (;; autoA5D85E35_u -= 1) {
        autoA5D85E35_var = UnitGroupUnitFromEnd(autoA5D85E35_g, autoA5D85E35_u);
        if (autoA5D85E35_var == null) { break; }
        lv_i += 1;
        UnitIssueOrder(autoA5D85E35_var, OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupUnit(UnitGroup("MineralField", c_playerAny, RegionCircle(PointFromId(391), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_i)), c_orderQueueReplace);
    }
    lv_i = 0;
    lv_dropPodUnits = UnitGroupEmpty();
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(239), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(240), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova02|Line00075", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova02|Line00076", true), c_soundIndexAny))), -1, 10, true);
    MovieStartRecording("Briefing_Video_Nova02_00");
    Wait(0.63, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromId(392));
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION4, PointFromId(392));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ZergBuild", 0), UnitGetPosition(UnitFromId(39))), c_orderQueueReplace);
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointFromId(392));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Roach", 0, gv_pLAYER_02_DOMINION4, PointFromId(392));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Zerg, PointFromId(392), lv_dropPodUnits, false, gv_pLAYER_02_DOMINION4);
    lv_dropPodUnits = UnitGroupEmpty();
    Wait(0.89, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromId(393));
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_pLAYER_02_DOMINION4, PointFromId(393));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ZergBuild", 0), UnitGetPosition(UnitFromId(51))), c_orderQueueReplace);
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointFromId(393));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(99)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Hydralisk", 0, gv_pLAYER_02_DOMINION4, PointFromId(393));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(99)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Zerg, PointFromId(393), lv_dropPodUnits, false, gv_pLAYER_02_DOMINION4);
    lv_dropPodUnits = UnitGroupEmpty();
    Wait(0.52, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromId(394));
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Baneling", 0, gv_pLAYER_02_DOMINION4, PointFromId(394));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointFromId(394));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Zerg, PointFromId(394), lv_dropPodUnits, false, gv_pLAYER_02_DOMINION4);
    lv_dropPodUnits = UnitGroupEmpty();
    Wait(0.9, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromId(421));
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Baneling", 0, gv_pLAYER_02_DOMINION4, PointFromId(421));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(99)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointFromId(421));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(99)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Zerg, PointFromId(421), lv_dropPodUnits, false, gv_pLAYER_02_DOMINION4);
    lv_dropPodUnits = UnitGroupEmpty();
    Wait(0.56, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromId(422));
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Baneling", 0, gv_pLAYER_02_DOMINION4, PointFromId(422));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointFromId(422));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Zerg, PointFromId(422), lv_dropPodUnits, false, gv_pLAYER_02_DOMINION4);
    lv_dropPodUnits = UnitGroupEmpty();
    Wait(0.69, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromId(423));
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Baneling", 0, gv_pLAYER_02_DOMINION4, PointFromId(423));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(99)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointFromId(423));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(99)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Zerg, PointFromId(423), lv_dropPodUnits, false, gv_pLAYER_02_DOMINION4);
    lv_dropPodUnits = UnitGroupEmpty();
    Wait(0.64, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromId(424));
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Baneling", 0, gv_pLAYER_02_DOMINION4, PointFromId(424));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(99)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointFromId(424));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(99)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Zerg, PointFromId(424), lv_dropPodUnits, false, gv_pLAYER_02_DOMINION4);
    lv_dropPodUnits = UnitGroupEmpty();
    Wait(0.69, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION4, PointFromId(481));
    UnitGroupAdd(lv_dropPodUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Baneling", 0, gv_pLAYER_02_DOMINION4, PointFromId(481));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointFromId(481));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Zerg, PointFromId(481), lv_dropPodUnits, false, gv_pLAYER_02_DOMINION4);
    lv_dropPodUnits = UnitGroupEmpty();
    Wait(10.0, c_timeGame);
    MovieStopRecording();
    auto359564D5_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto359564D5_u = UnitGroupCount(auto359564D5_g, c_unitCountAll);
    for (;; auto359564D5_u -= 1) {
        auto359564D5_var = UnitGroupUnitFromEnd(auto359564D5_g, auto359564D5_u);
        if (auto359564D5_var == null) { break; }
        UnitRemove(auto359564D5_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingSceneHive_Init () {
    gt_BriefingSceneHive = TriggerCreate("gt_BriefingSceneHive_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene - Reapers
//--------------------------------------------------------------------------------------------------
bool gt_BriefingSceneReapers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_reapers;
    unitgroup lv_zergUnits;

    // Automatic Variable Declarations
    const int autoAB8DB817_ae = 3;
    int autoAB8DB817_var;
    unitgroup autoC99697E6_g;
    int autoC99697E6_u;
    unit autoC99697E6_var;
    fixed autoE7B4E19C_at;
    unitgroup auto35D158B2_g;
    int auto35D158B2_u;
    unit auto35D158B2_var;
    fixed auto6C5180EB_at;

    // Variable Initialization
    lv_reapers = UnitGroupEmpty();
    lv_zergUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Reaper", 0, gv_pLAYER_01_USER, PointFromId(429));
    UnitGroupAddUnitGroup(lv_reapers, UnitLastCreatedGroup());
    autoAB8DB817_var = 1;
    for ( ; autoAB8DB817_var <= autoAB8DB817_ae; autoAB8DB817_var += 1 ) {
        UnitIssueOrder(UnitGroupUnit(UnitLastCreatedGroup(), autoAB8DB817_var), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Intro Cinematic Reaper Attack Point " + IntToString(autoAB8DB817_var)))), c_orderQueueReplace);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, gv_pLAYER_02_DOMINION4, PointFromId(201));
    UnitGroupAddUnitGroup(lv_zergUnits, UnitLastCreatedGroup());
    autoC99697E6_g = lv_zergUnits;
    autoC99697E6_u = UnitGroupCount(autoC99697E6_g, c_unitCountAll);
    for (;; autoC99697E6_u -= 1) {
        autoC99697E6_var = UnitGroupUnitFromEnd(autoC99697E6_g, autoC99697E6_u);
        if (autoC99697E6_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoC99697E6_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    }
    UnitGroupIssueOrder(lv_zergUnits, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(29)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_zergUnits, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(227)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_zergUnits, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(47)), c_orderQueueAddToEnd);
    TriggerExecute(gt_BriefingSceneReapersCamera, true, false);
    MovieStartRecording("Briefing_Video_Nova02_01");
    autoE7B4E19C_at = 0;
    while (!((UnitGroupCount(lv_zergUnits, c_unitCountAlive) == 0)) && autoE7B4E19C_at <= 20.0) {
        Wait(0.125, c_timeGame);
        autoE7B4E19C_at = autoE7B4E19C_at + 0.125;
    }
    UnitGroupIssueOrder(lv_reapers, OrderTargetingPoint(AbilityCommand("ReaperSpiderMines", 0), PointFromId(438)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_reapers, OrderTargetingPoint(AbilityCommand("ReaperSpiderMines", 0), PointFromId(439)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_reapers, OrderTargetingPoint(AbilityCommand("ReaperSpiderMines", 0), PointFromId(440)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_reapers, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(46)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeReal);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION4, "HydraliskSpeedUpgrade", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskBurrowed", 0, gv_pLAYER_02_DOMINION4, PointFromId(194));
    UnitGroupAddUnitGroup(lv_zergUnits, UnitLastCreatedGroup());
    UnitGroupIssueOrder(lv_zergUnits, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitGroupIssueOrder(lv_zergUnits, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(47)), c_orderQueueAddToEnd);
    auto35D158B2_g = lv_zergUnits;
    auto35D158B2_u = UnitGroupCount(auto35D158B2_g, c_unitCountAll);
    for (;; auto35D158B2_u -= 1) {
        auto35D158B2_var = UnitGroupUnitFromEnd(auto35D158B2_g, auto35D158B2_u);
        if (auto35D158B2_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto35D158B2_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    }
    auto6C5180EB_at = 0;
    while (!((UnitGroupCount(lv_zergUnits, c_unitCountAlive) == 0)) && auto6C5180EB_at <= 20.0) {
        Wait(0.125, c_timeGame);
        auto6C5180EB_at = auto6C5180EB_at + 0.125;
    }
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingSceneReapers_Init () {
    gt_BriefingSceneReapers = TriggerCreate("gt_BriefingSceneReapers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene - Reapers Camera
//--------------------------------------------------------------------------------------------------
bool gt_BriefingSceneReapersCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(336), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(337), SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova02|Line00006", true), c_soundIndexAny)), -1, 10, true);
    Wait((SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova02|Line00006", true), c_soundIndexAny)) - 1.0), c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.0, 0.0, 20.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1235), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingSceneReapersCamera_Init () {
    gt_BriefingSceneReapersCamera = TriggerCreate("gt_BriefingSceneReapersCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9C3AB5DE_g;
    int auto9C3AB5DE_u;
    unit auto9C3AB5DE_var;
    unitgroup auto9DC65465_g;
    int auto9DC65465_u;
    unit auto9DC65465_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 0.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto9C3AB5DE_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9C3AB5DE_u = UnitGroupCount(auto9C3AB5DE_g, c_unitCountAll);
    for (;; auto9C3AB5DE_u -= 1) {
        auto9C3AB5DE_var = UnitGroupUnitFromEnd(auto9C3AB5DE_g, auto9C3AB5DE_u);
        if (auto9C3AB5DE_var == null) { break; }
        if ((auto9C3AB5DE_var != gv_nova) && (auto9C3AB5DE_var != UnitFromId(292)) && (auto9C3AB5DE_var != UnitFromId(62)) && (UnitGetType(auto9C3AB5DE_var) != "MineralField") && (libNtve_gf_UnitIsPaused(auto9C3AB5DE_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto9C3AB5DE_var);
            libNtve_gf_PauseUnit(auto9C3AB5DE_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto9DC65465_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9DC65465_u = UnitGroupCount(auto9DC65465_g, c_unitCountAll);
    for (;; auto9DC65465_u -= 1) {
        auto9DC65465_var = UnitGroupUnitFromEnd(auto9DC65465_g, auto9DC65465_u);
        if (auto9DC65465_var == null) { break; }
        if ((auto9DC65465_var != gv_nova) && (auto9DC65465_var != UnitFromId(292)) && (auto9DC65465_var != UnitFromId(62)) && (UnitGetType(auto9DC65465_var) != "MineralField")) {
            UnitGroupAdd(gv_cinematicHiddenUnits, auto9DC65465_var);
            libNtve_gf_ShowHideUnit(auto9DC65465_var, false);
        }

    }
    TriggerExecute(gt_IntroBuildSupplyDepot, true, false);
    gv_introCommandCenter = UnitFromId(62);
    libNtve_gf_UnitCreateFacingPoint(1, "BarracksFlying", 0, gv_pLAYER_01_USER, PointWithOffset(UnitGetPosition(UnitFromId(64)), -6.0, -3.0), UnitGetPosition(UnitFromId(64)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BarracksLand", 0), UnitGetPosition(UnitFromId(64))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, gv_pLAYER_01_USER, PointFromId(1175));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introReapers, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, gv_pLAYER_01_USER, PointFromId(1176));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introReapers, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, gv_pLAYER_01_USER, PointFromId(1177));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introReapers, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, gv_pLAYER_01_USER, PointFromId(1178));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introReapers, UnitLastCreated());
    UnitIssueOrder(gv_nova, Order(AbilityCommand("NovaBasicCloak", 0)), c_orderQueueReplace);
    gv_introMinerals[1] = libNtve_gf_UnitGetPropertyResources(UnitFromId(65), c_unitPropCurrent);
    gv_introMinerals[2] = libNtve_gf_UnitGetPropertyResources(UnitFromId(68), c_unitPropCurrent);
    gv_introMinerals[3] = libNtve_gf_UnitGetPropertyResources(UnitFromId(67), c_unitPropCurrent);
    gv_introMinerals[4] = libNtve_gf_UnitGetPropertyResources(UnitFromId(66), c_unitPropCurrent);
    gv_introGas = libNtve_gf_UnitGetPropertyResources(UnitFromId(292), c_unitPropCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_jumpsuitPickup;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(428), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1180), 10.0, -1, 10, true);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova02_Main", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(427)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_introReapers, 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(260)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_introReapers, 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(482)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_introReapers, 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(483)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_introReapers, 4), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(485)), c_orderQueueReplace);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, true);
    libNtve_gf_KillDoodadsInRegion(RegionEntireMap(), "SnowBase_Fog_Mountain_Upper");
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00081", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_IntroSpawnSCVs, true, false);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00082", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova02_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00083", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, PointFromId(259), UnitGroupEmpty(), true, gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1181), SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova02|Line00083", true), c_soundIndexAny)), -1, 10, true);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupNovaJetPack", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(60));
    lv_jumpsuitPickup = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(gv_nova, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_jumpsuitPickup)), c_orderQueueReplace);
    Wait(1.4, c_timeGame);
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotSuit");
    UnitKill(lv_jumpsuitPickup);
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPSuitItem2");
    libNCMI_gf_SendTransmissionCampaign(gv_nova, "Mission_Nova02|Line00084", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_introStopSCVSpawning = true;
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoBA33F819_g;
    int autoBA33F819_u;
    unit autoBA33F819_var;
    unitgroup auto22A6AB69_g;
    int auto22A6AB69_u;
    unit auto22A6AB69_var;
    unitgroup auto86047D57_g;
    int auto86047D57_u;
    unit auto86047D57_var;
    unitgroup auto06C07B92_g;
    int auto06C07B92_u;
    unit auto06C07B92_var;
    unitgroup autoBDD2E56F_g;
    int autoBDD2E56F_u;
    unit autoBDD2E56F_var;
    unitgroup auto7B3BB2E0_g;
    int auto7B3BB2E0_u;
    unit auto7B3BB2E0_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    if ((gv_cinematicCompleted == true)) {
        autoBA33F819_g = gv_introReapers;
        autoBA33F819_u = UnitGroupCount(autoBA33F819_g, c_unitCountAll);
        for (;; autoBA33F819_u -= 1) {
            autoBA33F819_var = UnitGroupUnitFromEnd(autoBA33F819_g, autoBA33F819_u);
            if (autoBA33F819_var == null) { break; }
            UnitGroupRemove(gv_cinematicTempUnits, autoBA33F819_var);
        }
        auto22A6AB69_g = gv_introSCVs;
        auto22A6AB69_u = UnitGroupCount(auto22A6AB69_g, c_unitCountAll);
        for (;; auto22A6AB69_u -= 1) {
            auto22A6AB69_var = UnitGroupUnitFromEnd(auto22A6AB69_g, auto22A6AB69_u);
            if (auto22A6AB69_var == null) { break; }
            UnitGroupRemove(gv_cinematicTempUnits, auto22A6AB69_var);
        }
        UnitRemove(UnitFromId(148));
        UnitRemove(UnitFromId(147));
        UnitRemove(UnitFromId(152));
        UnitRemove(UnitFromId(149));
        UnitRemove(UnitFromId(63));
        UnitRemove(UnitFromId(140));
        UnitRemove(UnitFromId(141));
        UnitRemove(UnitFromId(138));
        UnitRemove(UnitFromId(137));
        UnitRemove(UnitFromId(139));
        UnitRemove(UnitFromId(142));
        UnitGroupRemove(gv_cinematicTempUnits, gv_introSupplyDepot);
        UnitRemove(UnitFromId(146));
    }
    else {
        libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotSuit");
    }
    auto86047D57_g = gv_cinematicTempUnits;
    auto86047D57_u = UnitGroupCount(auto86047D57_g, c_unitCountAll);
    for (;; auto86047D57_u -= 1) {
        auto86047D57_var = UnitGroupUnitFromEnd(auto86047D57_g, auto86047D57_u);
        if (auto86047D57_var == null) { break; }
        UnitRemove(auto86047D57_var);
    }
    auto06C07B92_g = gv_cinematicHiddenUnits;
    auto06C07B92_u = UnitGroupCount(auto06C07B92_g, c_unitCountAll);
    for (;; auto06C07B92_u -= 1) {
        auto06C07B92_var = UnitGroupUnitFromEnd(auto06C07B92_g, auto06C07B92_u);
        if (auto06C07B92_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto06C07B92_var, true);
    }
    autoBDD2E56F_g = gv_cinematicPausedUnits;
    autoBDD2E56F_u = UnitGroupCount(autoBDD2E56F_g, c_unitCountAll);
    for (;; autoBDD2E56F_u -= 1) {
        autoBDD2E56F_var = UnitGroupUnitFromEnd(autoBDD2E56F_g, autoBDD2E56F_u);
        if (autoBDD2E56F_var == null) { break; }
        libNtve_gf_PauseUnit(autoBDD2E56F_var, false);
    }
    auto7B3BB2E0_g = UnitGroup("TerranDropPod", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7B3BB2E0_u = UnitGroupCount(auto7B3BB2E0_g, c_unitCountAll);
    for (;; auto7B3BB2E0_u -= 1) {
        auto7B3BB2E0_var = UnitGroupUnitFromEnd(auto7B3BB2E0_g, auto7B3BB2E0_u);
        if (auto7B3BB2E0_var == null) { break; }
        UnitRemove(auto7B3BB2E0_var);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    UnitSetPropertyFixed(UnitFromId(65), c_unitPropResources, gv_introMinerals[1]);
    UnitSetPropertyFixed(UnitFromId(68), c_unitPropResources, gv_introMinerals[2]);
    UnitSetPropertyFixed(UnitFromId(67), c_unitPropResources, gv_introMinerals[3]);
    UnitSetPropertyFixed(UnitFromId(66), c_unitPropResources, gv_introMinerals[4]);
    UnitSetPropertyFixed(UnitFromId(292), c_unitPropResources, gv_introGas);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPSuitItem2");
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == false)) {
        libNCMI_gf_StartingWorkersAutoHarvest(RegionFromId(11), null);
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10, false);
    }
    else {
        UnitIssueOrder(gv_nova, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_nova, PointFromId(427), false);
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(426), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Spawn SCVs
//--------------------------------------------------------------------------------------------------
bool gt_IntroSpawnSCVs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sCV;
    int lv_sCVCount;

    // Automatic Variable Declarations
    int auto19EB672A_ae;
    const int auto19EB672A_ai = 1;

    // Variable Initialization
    lv_sCVCount = 6;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!(((UnitOrderCount(gv_introCommandCenter) == 0) || (gv_introStopSCVSpawning == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == false)))) {
        Wait(0.25, c_timeGame);
    }
    auto19EB672A_ae = lv_sCVCount;
    lv_sCV = 1;
    for ( ; ( (auto19EB672A_ai >= 0 && lv_sCV <= auto19EB672A_ae) || (auto19EB672A_ai < 0 && lv_sCV >= auto19EB672A_ae) ) ; lv_sCV += auto19EB672A_ai ) {
        Wait(1.0, c_timeGame);
        if ((UnitOrderCount(gv_introCommandCenter) == 0) && (libNCMI_gf_PlayerInCinematicModeCampaign() == true) && (gv_introStopSCVSpawning == false)) {
            UnitCreate(1, "SCV", 0, gv_pLAYER_01_USER, PointFromId(1183), 56.0);
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitGroupAdd(gv_introSCVs, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralField", c_playerAny, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSpawnSCVs_Init () {
    gt_IntroSpawnSCVs = TriggerCreate("gt_IntroSpawnSCVs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Build Supply Depot
//--------------------------------------------------------------------------------------------------
bool gt_IntroBuildSupplyDepot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(146)));
    gv_introSupplyDepot = UnitLastCreated();
    UnitSetProgressComplete(gv_introSupplyDepot, 1, 55);
    UnitGroupAdd(gv_cinematicTempUnits, gv_introSupplyDepot);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(146)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introSCVs, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(null, gv_introSupplyDepot), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralField", c_playerAny, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroBuildSupplyDepot_Init () {
    gt_IntroBuildSupplyDepot = TriggerCreate("gt_IntroBuildSupplyDepot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_battleCruiserHeight;

    // Automatic Variable Declarations
    unitgroup auto17EFCFDF_g;
    int auto17EFCFDF_u;
    unit auto17EFCFDF_var;
    unitgroup auto31DEA79F_g;
    int auto31DEA79F_u;
    unit auto31DEA79F_var;
    unitgroup autoE52A7418_g;
    int autoE52A7418_u;
    unit autoE52A7418_var;
    unitgroup auto0A1B104E_g;
    int auto0A1B104E_u;
    unit auto0A1B104E_var;
    unitgroup auto77897087_g;
    int auto77897087_u;
    unit auto77897087_var;
    unitgroup auto7FBFB3D1_g;
    int auto7FBFB3D1_u;
    unit auto7FBFB3D1_var;
    unitgroup auto405AF883_g;
    int auto405AF883_u;
    unit auto405AF883_var;

    // Variable Initialization
    lv_battleCruiserHeight = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto17EFCFDF_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto17EFCFDF_u = UnitGroupCount(auto17EFCFDF_g, c_unitCountAll);
    for (;; auto17EFCFDF_u -= 1) {
        auto17EFCFDF_var = UnitGroupUnitFromEnd(auto17EFCFDF_g, auto17EFCFDF_u);
        if (auto17EFCFDF_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto17EFCFDF_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto17EFCFDF_var);
            libNtve_gf_PauseUnit(auto17EFCFDF_var, true);
        }

    }
    auto31DEA79F_g = UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31DEA79F_u = UnitGroupCount(auto31DEA79F_g, c_unitCountAll);
    for (;; auto31DEA79F_u -= 1) {
        auto31DEA79F_var = UnitGroupUnitFromEnd(auto31DEA79F_g, auto31DEA79F_u);
        if (auto31DEA79F_var == null) { break; }
        if ((UnitGetType(auto31DEA79F_var) != "CreepTumorBurrowed") && ((UnitGetOwner(auto31DEA79F_var) == gv_pLAYER_02_DOMINION2) || (UnitGetOwner(auto31DEA79F_var) == gv_pLAYER_02_DOMINION3))) {
            if ((UnitGetType(auto31DEA79F_var) == "SporeCrawler") && (libNtve_gf_UnitInRegion(auto31DEA79F_var, RegionFromId(12)) == true)) {
                UnitRemove(auto31DEA79F_var);
                continue;
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(auto31DEA79F_var), c_unitCreateIgnorePlacement, UnitGetOwner(auto31DEA79F_var), UnitGetPosition(auto31DEA79F_var));
                UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
                UnitRemove(auto31DEA79F_var);
            }
        }

    }
    autoE52A7418_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE52A7418_u = UnitGroupCount(autoE52A7418_g, c_unitCountAll);
    for (;; autoE52A7418_u -= 1) {
        autoE52A7418_var = UnitGroupUnitFromEnd(autoE52A7418_g, autoE52A7418_u);
        if (autoE52A7418_var == null) { break; }
        if (((UnitGetOwner(autoE52A7418_var) == gv_pLAYER_02_DOMINION2) || (UnitGetOwner(autoE52A7418_var) == gv_pLAYER_02_DOMINION3))) {
            UnitRemove(autoE52A7418_var);
        }

    }
    auto0A1B104E_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
    auto0A1B104E_u = UnitGroupCount(auto0A1B104E_g, c_unitCountAll);
    for (;; auto0A1B104E_u -= 1) {
        auto0A1B104E_var = UnitGroupUnitFromEnd(auto0A1B104E_g, auto0A1B104E_u);
        if (auto0A1B104E_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto0A1B104E_var, "ModelFlagsClear OutlineOccluder");
    }
    auto77897087_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto77897087_u = UnitGroupCount(auto77897087_g, c_unitCountAll);
    for (;; auto77897087_u -= 1) {
        auto77897087_var = UnitGroupUnitFromEnd(auto77897087_g, auto77897087_u);
        if (auto77897087_var == null) { break; }
        if ((UnitGetOwner(auto77897087_var) == gv_pLAYER_01_USER)) {
            UnitGroupAdd(gv_cinematicHiddenUnits, auto77897087_var);
        }
        else {
            if (((UnitGetOwner(auto77897087_var) == gv_pLAYER_02_DOMINION) || (UnitGetOwner(auto77897087_var) == gv_pLAYER_02_DOMINION5)) && (UnitTypeTestAttribute(UnitGetType(auto77897087_var), c_unitAttributeStructure) == false)) {
                UnitGroupAdd(gv_cinematicHiddenUnits, auto77897087_var);
            }

        }
    }
    auto7FBFB3D1_g = gv_cinematicHiddenUnits;
    auto7FBFB3D1_u = UnitGroupCount(auto7FBFB3D1_g, c_unitCountAll);
    for (;; auto7FBFB3D1_u -= 1) {
        auto7FBFB3D1_var = UnitGroupUnitFromEnd(auto7FBFB3D1_g, auto7FBFB3D1_u);
        if (auto7FBFB3D1_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto7FBFB3D1_var, false);
    }
    UnitCreate(1, "Battlecruiser", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(1079), PointGetFacing(PointFromId(1079)));
    gv_victoryTransmittingCruiser = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_victoryTransmittingCruiser);
    UnitSetHeight(gv_victoryTransmittingCruiser, 13.0, 0.0);
    UnitIssueOrder(gv_victoryTransmittingCruiser, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(488)), c_orderQueueReplace);
    libNtve_gf_ChangeUnitDamage(gv_victoryTransmittingCruiser, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(gv_victoryTransmittingCruiser, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_victoryTransmittingCruiser, c_unitPropMovementSpeed, c_unitPropNormal) / 1.5));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1638));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1639));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1640));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1641));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1642));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1643));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1644));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1645));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1657));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1658));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1659));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION3, PointFromId(1660));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION3, PointFromId(1646));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION3, PointFromId(1647));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION3, PointFromId(1648));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION3, PointFromId(1649));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION3, PointFromId(1650));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION3, PointFromId(1651));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION3, PointFromId(1652));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION3, PointFromId(1653));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, gv_pLAYER_02_DOMINION3, PointFromId(1654));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, gv_pLAYER_02_DOMINION3, PointFromId(1655));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, gv_pLAYER_02_DOMINION3, PointFromId(1656));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, gv_pLAYER_02_DOMINION3, PointFromId(1661));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, gv_pLAYER_02_DOMINION3, PointFromId(1662));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_pLAYER_02_DOMINION2, RegionRandomPoint(RegionFromId(35)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_pLAYER_02_DOMINION2, RegionRandomPoint(RegionFromId(36)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_pLAYER_02_DOMINION2, RegionRandomPoint(RegionFromId(37)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_pLAYER_02_DOMINION2, RegionRandomPoint(RegionFromId(38)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(39)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(40)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_pLAYER_02_DOMINION3, RegionRandomPoint(RegionFromId(41)));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    auto405AF883_g = UnitGroupAlliance(gv_pLAYER_02_DOMINION6, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto405AF883_u = UnitGroupCount(auto405AF883_g, c_unitCountAll);
    for (;; auto405AF883_u -= 1) {
        auto405AF883_var = UnitGroupUnitFromEnd(auto405AF883_g, auto405AF883_u);
        if (auto405AF883_var == null) { break; }
        if ((UnitGetOwner(auto405AF883_var) != gv_pLAYER_01_USER)) {
            libNtve_gf_ChangeUnitDamage(auto405AF883_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
            if ((UnitGetType(auto405AF883_var) == "Ultralisk")) {
                UnitSetPropertyFixed(auto405AF883_var, c_unitPropLifePercent, 50.0);
            }

        }

        if ((UnitTypeTestAttribute(UnitGetType(auto405AF883_var), c_unitAttributeStructure) != true) && (UnitGetOwner(auto405AF883_var) != gv_pLAYER_01_USER) && (UnitGetOwner(auto405AF883_var) != gv_pLAYER_02_DOMINION) && (UnitGetOwner(auto405AF883_var) != gv_pLAYER_02_DOMINION5) && (UnitGetType(auto405AF883_var) != "Drone")) {
            UnitBehaviorAdd(auto405AF883_var, "InstallationZergWander", auto405AF883_var, 1);
        }

        if ((UnitGetType(auto405AF883_var) == "Drone")) {
            UnitIssueOrder(auto405AF883_var, OrderTargetingUnit(null, UnitGroupClosestToPoint(UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto405AF883_var))), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_battlecruisers;

    // Automatic Variable Declarations
    unitgroup auto33BD1170_g;
    int auto33BD1170_u;
    unit auto33BD1170_var;

    // Variable Initialization
    lv_battlecruisers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1213), 0.0, -1, 10, true);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, 25.5, 0.0, -1, 10.0);
    CameraPan(gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(gv_victoryTransmittingCruiser), 50.0, PointGetFacing(PointFromId(1079))), 56.0, -1, 10.0, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova02_Final", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 30.0, 1.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00098", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova02|Line00098", true), c_soundIndexAny)) / 2.0));
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerExecute(gt_VictoryBattlecruiserAssault, true, false);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, 34.0, 3.5, -1, 10.0);
    libNCMI_gf_SendTransmissionCampaign(gv_victoryTransmittingCruiser, "Mission_Nova02|Line00099", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_victoryTransmittingCruiser, "Mission_Nova02|Line00100", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova02|Line00100", true), c_soundIndexAny)) / 2.0));
    TriggerExecute(gt_VictoryDropPodAssault, true, false);
    UnitSetHeight(gv_victoryTransmittingCruiser, 8.0, 0.0);
    auto33BD1170_g = gv_victoryBattleCruisers;
    auto33BD1170_u = UnitGroupCount(auto33BD1170_g, c_unitCountAll);
    for (;; auto33BD1170_u -= 1) {
        auto33BD1170_var = UnitGroupUnitFromEnd(auto33BD1170_g, auto33BD1170_u);
        if (auto33BD1170_var == null) { break; }
        UnitRemove(auto33BD1170_var);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1230), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1233), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova02|Line00101", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova02|Line00102", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova02|Line00103", true), c_soundIndexAny))), -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.0, 0.0, 20.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00101", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00102", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_victoryTransmittingCruiser, "Mission_Nova02|Line00103", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00104", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova02|Line00122", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_VictoryMedivacs, true, false);
    Wait(0.125, c_timeGame);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 2.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1231), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1232), 10.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(4.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Battlecruiser Assault
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBattlecruiserAssault_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnitGroup;
    unit lv_defenderUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION6, "BattlecruiserEnableAttackWhileMoving", 1);
    UnitCreate(1, "Battlecruiser", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(957), PointGetFacing(PointFromId(957)));
    UnitGroupAdd(gv_victoryBattleCruisers, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(UnitLastCreated(), "BattleCruiserFastJump", UnitLastCreated(), 1);
    gf_MaintainForwardAttackMomentum(UnitLastCreated());
    Wait(1.0, c_timeGame);
    UnitCreate(1, "Battlecruiser", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(981), PointGetFacing(PointFromId(981)));
    UnitGroupAdd(gv_victoryBattleCruisers, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(UnitLastCreated(), "BattleCruiserFastJump", UnitLastCreated(), 1);
    gf_MaintainForwardAttackMomentum(UnitLastCreated());
    TriggerExecute(gt_VictoryDOMLander01, true, false);
    TriggerExecute(gt_VictoryDOMLander02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBattlecruiserAssault_Init () {
    gt_VictoryBattlecruiserAssault = TriggerCreate("gt_VictoryBattlecruiserAssault_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Drop Pod Assault
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDropPodAssault_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnitGroup;
    unit lv_defenderUnit;

    // Automatic Variable Declarations
    unitgroup auto4E528D73_g;
    int auto4E528D73_u;
    unitgroup auto2CEA3011_g;
    int auto2CEA3011_u;
    unitgroup autoEE084E77_g;
    int autoEE084E77_u;

    // Variable Initialization
    lv_dropPodUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HellionTank", 0, gv_pLAYER_02_DOMINION6, PointFromId(1089));
    UnitGroupAddUnitGroup(lv_dropPodUnitGroup, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Separatist", 0, gv_pLAYER_02_DOMINION6, PointFromId(1089));
    UnitGroupAddUnitGroup(lv_dropPodUnitGroup, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, PointFromId(1089), lv_dropPodUnitGroup, false, gv_pLAYER_02_DOMINION6);
    auto4E528D73_g = lv_dropPodUnitGroup;
    auto4E528D73_u = UnitGroupCount(auto4E528D73_g, c_unitCountAll);
    for (;; auto4E528D73_u -= 1) {
        lv_defenderUnit = UnitGroupUnitFromEnd(auto4E528D73_g, auto4E528D73_u);
        if (lv_defenderUnit == null) { break; }
        gf_MaintainForwardAttackMomentum(lv_defenderUnit);
    }
    Wait(2.0, c_timeGame);
    lv_dropPodUnitGroup = UnitGroupEmpty();
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Medic", 0, gv_pLAYER_02_DOMINION6, PointFromId(1219));
    UnitGroupAddUnitGroup(lv_dropPodUnitGroup, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Separatist", 0, gv_pLAYER_02_DOMINION6, PointFromId(1219));
    UnitGroupAddUnitGroup(lv_dropPodUnitGroup, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, PointFromId(1219), lv_dropPodUnitGroup, false, gv_pLAYER_02_DOMINION6);
    auto2CEA3011_g = lv_dropPodUnitGroup;
    auto2CEA3011_u = UnitGroupCount(auto2CEA3011_g, c_unitCountAll);
    for (;; auto2CEA3011_u -= 1) {
        lv_defenderUnit = UnitGroupUnitFromEnd(auto2CEA3011_g, auto2CEA3011_u);
        if (lv_defenderUnit == null) { break; }
        gf_MaintainForwardAttackMomentum(lv_defenderUnit);
    }
    Wait(2.0, c_timeGame);
    lv_dropPodUnitGroup = UnitGroupEmpty();
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HellionTank", 0, gv_pLAYER_02_DOMINION6, PointFromId(1220));
    UnitGroupAddUnitGroup(lv_dropPodUnitGroup, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Separatist", 0, gv_pLAYER_02_DOMINION6, PointFromId(1220));
    UnitGroupAddUnitGroup(lv_dropPodUnitGroup, UnitLastCreatedGroup());
    libNCMI_gf_CreateDropPod(libNCMI_ge_DropPodRace_Terran, PointFromId(1220), lv_dropPodUnitGroup, false, gv_pLAYER_02_DOMINION6);
    autoEE084E77_g = lv_dropPodUnitGroup;
    autoEE084E77_u = UnitGroupCount(autoEE084E77_g, c_unitCountAll);
    for (;; autoEE084E77_u -= 1) {
        lv_defenderUnit = UnitGroupUnitFromEnd(autoEE084E77_g, autoEE084E77_u);
        if (lv_defenderUnit == null) { break; }
        gf_MaintainForwardAttackMomentum(lv_defenderUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDropPodAssault_Init () {
    gt_VictoryDropPodAssault = TriggerCreate("gt_VictoryDropPodAssault_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory DOM Lander 01
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDOMLander01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_movementAngleIncrement;
    unit lv_landerUnit;

    // Automatic Variable Declarations
    const int autoFB95F2FA_n = 6;
    int autoFB95F2FA_i;
    const int auto52377FBA_n = 2;
    int auto52377FBA_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "HerculesLanderFlying", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(1078), PointGetFacing(PointFromId(1078)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropNormal) / 1.4));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    lv_landerUnit = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(lv_landerUnit, OrderTargetingPoint(AbilityCommand("HerculesLand", 0), PointFromId(1570)), c_orderQueueReplace);
    while (!((UnitGetType(lv_landerUnit) == "HerculesLander"))) {
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    for (autoFB95F2FA_i = 1; autoFB95F2FA_i <= autoFB95F2FA_n; autoFB95F2FA_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Separatist", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(1608));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(1608), 3.0, (270.0 + lv_movementAngleIncrement))), c_orderQueueReplace);
        lv_movementAngleIncrement += 22.5;
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
        Wait(0.65, c_timeGame);
        gf_MaintainForwardAttackMomentum(UnitLastCreated());
    }
    Wait(4.0, c_timeGame);
    lv_movementAngleIncrement = 0.0;
    for (auto52377FBA_i = 1; auto52377FBA_i <= auto52377FBA_n; auto52377FBA_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HellionTank", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(1608));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(1608), 3.0, (270.0 + lv_movementAngleIncrement))), c_orderQueueReplace);
        lv_movementAngleIncrement += 22.5;
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
        Wait(0.65, c_timeGame);
        gf_MaintainForwardAttackMomentum(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDOMLander01_Init () {
    gt_VictoryDOMLander01 = TriggerCreate("gt_VictoryDOMLander01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory DOM Lander 02
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDOMLander02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_movementAngleIncrement;
    unit lv_landerUnit;

    // Automatic Variable Declarations
    const int auto807BBBA3_n = 6;
    int auto807BBBA3_i;
    const int auto518411F2_n = 2;
    int auto518411F2_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "HerculesLanderFlying", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(1229), PointGetFacing(PointFromId(1229)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, c_unitPropNormal) / 1.4));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    lv_landerUnit = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(lv_landerUnit, OrderTargetingPoint(AbilityCommand("HerculesLand", 0), PointFromId(1571)), c_orderQueueReplace);
    while (!((UnitGetType(lv_landerUnit) == "HerculesLander"))) {
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    for (auto807BBBA3_i = 1; auto807BBBA3_i <= auto807BBBA3_n; auto807BBBA3_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Separatist", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(1204));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(1204), 3.0, (270.0 + lv_movementAngleIncrement))), c_orderQueueReplace);
        lv_movementAngleIncrement += 22.5;
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
        Wait(0.65, c_timeGame);
        gf_MaintainForwardAttackMomentum(UnitLastCreated());
    }
    Wait(4.0, c_timeGame);
    lv_movementAngleIncrement = 0.0;
    for (auto518411F2_i = 1; auto518411F2_i <= auto518411F2_n; auto518411F2_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HellionTank", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION6, PointFromId(1204));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(1204), 3.0, (270.0 + lv_movementAngleIncrement))), c_orderQueueReplace);
        lv_movementAngleIncrement += 22.5;
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
        Wait(0.65, c_timeGame);
        gf_MaintainForwardAttackMomentum(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDOMLander02_Init () {
    gt_VictoryDOMLander02 = TriggerCreate("gt_VictoryDOMLander02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Medivacs
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMedivacs_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup lv_dominionEvacUnits;
    unitgroup[3] lv_playerEvacUnits;

    // Automatic Variable Declarations
    unitgroup auto81C21A7B_g;
    int auto81C21A7B_u;
    unit auto81C21A7B_var;
    unitgroup auto17FA9572_g;
    int auto17FA9572_u;
    unit auto17FA9572_var;
    unitgroup autoF68613B4_g;
    int autoF68613B4_u;
    unit autoF68613B4_var;

    // Variable Initialization
    lv_dominionEvacUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_playerEvacUnits[init_i] = UnitGroupEmpty();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(UnitFromId(491), 2.5, 0.0);
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1237));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1238));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1239));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1240));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1243));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1244));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1246));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1247));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1241));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1242));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1245));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(1248));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(492));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(496));
    UnitGroupAdd(lv_dominionEvacUnits, UnitFromId(491));
    auto81C21A7B_g = lv_dominionEvacUnits;
    auto81C21A7B_u = UnitGroupCount(auto81C21A7B_g, c_unitCountAll);
    for (;; auto81C21A7B_u -= 1) {
        auto81C21A7B_var = UnitGroupUnitFromEnd(auto81C21A7B_g, auto81C21A7B_u);
        if (auto81C21A7B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto81C21A7B_var, true);
        libNtve_gf_PauseUnit(auto81C21A7B_var, false);
        UnitSetOwner(auto81C21A7B_var, gv_pLAYER_02_DOMINION, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1249));
    UnitGroupAdd(lv_playerEvacUnits[1], UnitLastCreated());
    UnitGroupAdd(lv_playerEvacUnits[1], UnitFromId(500));
    UnitGroupAdd(lv_playerEvacUnits[1], UnitFromId(499));
    UnitGroupAdd(lv_playerEvacUnits[1], UnitFromId(501));
    UnitGroupAdd(lv_playerEvacUnits[1], UnitFromId(1236));
    auto17FA9572_g = lv_playerEvacUnits[1];
    auto17FA9572_u = UnitGroupCount(auto17FA9572_g, c_unitCountAll);
    for (;; auto17FA9572_u -= 1) {
        auto17FA9572_var = UnitGroupUnitFromEnd(auto17FA9572_g, auto17FA9572_u);
        if (auto17FA9572_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto17FA9572_var, true);
        libNtve_gf_PauseUnit(auto17FA9572_var, false);
        UnitSetOwner(auto17FA9572_var, gv_pLAYER_01_USER, true);
        libNtve_gf_ChangeUnitDamage(auto17FA9572_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitSetOwner(UnitFromId(491), gv_pLAYER_01_USER, false);
    Wait(0.6, c_timeGame);
    autoF68613B4_g = lv_playerEvacUnits[1];
    autoF68613B4_u = UnitGroupCount(autoF68613B4_g, c_unitCountAll);
    for (;; autoF68613B4_u -= 1) {
        autoF68613B4_var = UnitGroupUnitFromEnd(autoF68613B4_g, autoF68613B4_u);
        if (autoF68613B4_var == null) { break; }
        UnitIssueOrder(autoF68613B4_var, OrderTargetingUnit(AbilityCommand("move", 0), UnitFromId(491)), c_orderQueueReplace);
        if ((UnitGetType(autoF68613B4_var) != "NovaHero")) {
            UnitSetPropertyFixed(autoF68613B4_var, c_unitPropMovementSpeed, (UnitGetPropertyFixed(autoF68613B4_var, c_unitPropMovementSpeed, c_unitPropNormal) / 1.2));
        }

        gf_MedivacPickupEvacUnits(autoF68613B4_var, UnitFromId(491));
    }
    Wait(6.0, c_timeGame);
    UnitSetHeight(UnitFromId(491), UnitGetPropertyFixed(UnitFromId(491), c_unitPropHeight, c_unitPropNormal), 2.0);
    UnitIssueOrder(UnitFromId(491), Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(492), Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    UnitIssueOrder(UnitFromId(496), Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    Wait(0.8, c_timeGame);
    UnitIssueOrder(UnitFromId(491), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(955)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(492), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(955)), c_orderQueueAddToEnd);
    Wait(0.2, c_timeGame);
    UnitIssueOrder(UnitFromId(496), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(956)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMedivacs_Init () {
    gt_VictoryMedivacs = TriggerCreate("gt_VictoryMedivacs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGameQ_Init();
    gt_BonusObjectiveNorthRevealQ_Init();
    gt_BonusObjNorthWarningQ_Init();
    gt_BonusObjNorthSavedQ_Init();
    gt_BonusObjNorthLostQ_Init();
    gt_BonusObjNorthSpawn_Init();
    gt_BonusObjNorthZergKilled_Init();
    gt_BonusObjNorthRescue_Init();
    gt_BonusObjNorthWormKilled_Init();
    gt_BonusObjNorthFacilityKilled_Init();
    gt_BonusObjNorthCrawlerMorph_Init();
    gt_BonusObjectiveSouthRevealQ_Init();
    gt_BonusObjSouthWarningQ_Init();
    gt_BonusObjSouthSavedQ_Init();
    gt_BonusObjSouthLostQ_Init();
    gt_BonusObjSouthSpawn_Init();
    gt_BonusObjSouthZergKilled_Init();
    gt_BonusObjSouthRescue_Init();
    gt_BonusObjSouthWormKilled_Init();
    gt_BonusObjSouthFacilityKilled_Init();
    gt_BonusObjSouthCrawlerMorph_Init();
    gt_BonusObjSouthRavagerShots_Init();
    gt_Wave1WaveIncomingQ_Init();
    gt_Wave2WaveIncomingQ_Init();
    gt_Wave3BanelingsIncomingQ_Init();
    gt_Wave4WaveIncomingQ_Init();
    gt_Wave5RavagersIncomingQ_Init();
    gt_Wave6WaveIncomingQ_Init();
    gt_Wave7DefilersIncomingQ_Init();
    gt_Wave8WaveIncomingQ_Init();
    gt_Wave910DoubleWaveQ_Init();
    gt_Wave11UltralisksIncomingQ_Init();
    gt_Wave12BossWaveIncomingQ_Init();
    gt_Wave1314FinalWaveQ_Init();
    gt_BreakTime1Q_Init();
    gt_BreakTime2_Init();
    gt_BreakTime3Q_Init();
    gt_BreakTime4_Init();
    gt_BreakTime5Q_Init();
    gt_BreakTime6Q_Init();
    gt_OuterDefensesQ_Init();
    gt_InnerDefensesQ_Init();
    gt_DontGoToEnemyBaseQ_Init();
    gt_ZergFortificationTumorBullies_Init();
    gt_HoldoutTimerQ_Init();
    gt_DefendersofManArrivalQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatHornersBaseDestroyed_Init();
    gt_VictoryDefendHornersBaseCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_SpiderMineKillTracker_Init();
    gt_SpiderMineUnlockAchievement_Init();
    gt_AlliedStructuresLostTracker_Init();
    gt_AlliedUnitsLostTracker_Init();
    gt_AchievementKillenemyunitswithSpiderMines_Init();
    gt_TipReadyQ_Init();
    gt_StartAI_Init();
    gt_AIUpgradeCasualNormal_Init();
    gt_AIUpgradeHardBrutal_Init();
    gt_SetWaypointsNorth_Init();
    gt_SetFinalTrickleWaypointsNorth_Init();
    gt_SetWaypointsEast_Init();
    gt_SetFinalTrickleWaypointsEast_Init();
    gt_AttackWaveManager_Init();
    gt_AIAttackWaveRavagerShots_Init();
    gt_AIAttackWaveDarkSwarm_Init();
    gt_DefilerEnergy_Init();
    gt_ObjectiveDefendHornersBaseCreate_Init();
    gt_ObjectiveDefendHornersBaseComplete_Init();
    gt_ObjectiveDefendHornersBaseFailed_Init();
    gt_ObjectiveSecureArmyTechCreate_Init();
    gt_ObjectiveSecureArmyTechComplete_Init();
    gt_ObjectiveSecureArmyTechFailed_Init();
    gt_ObjectiveSecureNovaTechCreate_Init();
    gt_ObjectiveSecureNovaTechComplete_Init();
    gt_ObjectiveSecureNovaTechFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingSceneHive_Init();
    gt_BriefingSceneReapers_Init();
    gt_BriefingSceneReapersCamera_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroSpawnSCVs_Init();
    gt_IntroBuildSupplyDepot_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryBattlecruiserAssault_Init();
    gt_VictoryDropPodAssault_Init();
    gt_VictoryDOMLander01_Init();
    gt_VictoryDOMLander02_Init();
    gt_VictoryMedivacs_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
