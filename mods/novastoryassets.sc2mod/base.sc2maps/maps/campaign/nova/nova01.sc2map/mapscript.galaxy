//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Escape
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidLib"
include "LibComC"
include "LibCMMI"
include "LibNovC"
include "LibNCMI"
include "LibNCUI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libLotv_InitLib();
    libComC_InitLib();
    libCMMI_InitLib();
    libNovC_InitLib();
    libNCMI_InitLib();
    libNCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION3 = 4;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_ResearchBayDefenders {
    unit lv_unit;
    point lv_position;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_LeftRight_Left = 0;
const int ge_PRESET_LeftRight_Right = 1;
const int ge_PRESET_BMT_Bottom = 0;
const int ge_PRESET_BMT_Middle = 1;
const int ge_PRESET_BMT_Top = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
unit gv_artanis;
unit gv_riflePickup;
unit gv_grenadePickup;
unitgroup gv_flameTurretGroup;
int gv_currentSection;
actor gv_breakNeckReticle;
int gv_breakNeckTextTag;
unitgroup gv_patrolTroopers;
int gv_riflePing;
actor gv_snipeReticle;
int gv_snipeTextTag;
int gv_snipeHallReaperCount1;
int gv_snipeHallReaperRespawnCount1;
unitgroup gv_snipeHallReapers1A;
unitgroup gv_snipeHallReapers1B;
unitgroup gv_snipeHallTroopers1;
int gv_snipeHallReaperCount2;
int gv_snipeHallReaperRespawnCount2;
unitgroup gv_snipeHallReapers2A;
unitgroup gv_snipeHallReapers2B;
unitgroup gv_snipeHallTroopers2;
unitgroup gv_snipeHallTroopers3;
gs_RECORD_ResearchBayDefenders[32] gv_researchBayDefenders;
int gv_researchBayDefenderCount;
unitgroup gv_researchBayDefenderGroup;
int gv_pulseGrenadePing;
actor gv_pulseGrenadeReticle;
int gv_pulseGrenadeTextTag;
bool gv_pulseGrenadesTaught;
int gv_escapePing;
unit[4] gv_rescuedGhosts;
int gv_ghostsRescuedCount;
int[4] gv_friendlyGhostPings;
bool[4] gv_friendlyGhostsRescued;
gs_RECORD_ResearchBayDefenders[64] gv_hallDefenders;
int gv_hallDefenderCount;
int[16] gv_sideAreasTriggered;
int gv_sideAreasCount;
bool gv_destruction4Triggered;
int gv_friendlyGhostsKilled;
bool[4] gv_rescuedUnitsAlive;
bool gv_finalBattleStarted;
unitgroup gv_turretHallDefenderGroup;
unitgroup gv_pierceTurretDefenderGroup;
unitgroup gv_roadUnits;
unit gv_stoneVulture;
bool gv_stoneVultureDestroyed;
int gv_vultureSequencePhase;
unit gv_warhawk;
fixed gv_warhawkMaxLife;
fixed gv_vultureMedKitCooldown;
fixed gv_remainingMedkitCooldown;
bool gv_vultureMedKitMissed;
timer gv_stoneBarrageTimer;
bool gv_barrageTransitionLeft;
bool gv_barrageTransitionRight;
int gv_vultureDistanceLabel;
int gv_vultureDistanceDialog;
fixed gv_vultureStageDuration;
fixed gv_vultureStageDistance;
timer gv_anniversaryAchievementMissionTimer;
int gv_statSnipeKills;
int gv_statFlameTurretHits;
int gv_statCivilianCollisions;
fixed gv_statNovaDamageFromWarhawk;
int gv_objectiveDestroyZergBase;
bool gv_objective_RifleComplete;
int gv_objectiveDestroyZergBase5;
bool gv_objective_GrenadesComplete;
int gv_objectiveDestroyZergBase2;
bool gv_objective_EscapeComplete;
int gv_objectiveDestroyZergBase4;
bool gv_objective_SpaceportComplete;
int gv_objectiveDestroyZergBase3;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_introCineStone;
unit gv_midCineStone;
unit gv_midCineDelta;
unit gv_midCinePierce;
unit gv_victoryStone;
unit gv_victoryNova;
unit gv_victoryLander;

void InitGlobals () {
    int init_i;

    gv_artanis = UnitFromId(122);
    gv_riflePickup = UnitFromId(2231);
    gv_grenadePickup = UnitFromId(2230);
    gv_flameTurretGroup = UnitGroupEmpty();
    gv_currentSection = 1;
    gv_breakNeckTextTag = c_textTagNone;
    gv_patrolTroopers = UnitGroupEmpty();
    gv_riflePing = c_invalidPingId;
    gv_snipeTextTag = c_textTagNone;
    gv_snipeHallReapers1A = UnitGroupEmpty();
    gv_snipeHallReapers1B = UnitGroupEmpty();
    gv_snipeHallTroopers1 = UnitGroupEmpty();
    gv_snipeHallReapers2A = UnitGroupEmpty();
    gv_snipeHallReapers2B = UnitGroupEmpty();
    gv_snipeHallTroopers2 = UnitGroupEmpty();
    gv_snipeHallTroopers3 = UnitGroupEmpty();
    gv_researchBayDefenderGroup = UnitGroupEmpty();
    gv_pulseGrenadePing = c_invalidPingId;
    gv_pulseGrenadeTextTag = c_textTagNone;
    gv_escapePing = c_invalidPingId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_friendlyGhostPings[init_i] = c_invalidPingId;
    }
    gv_turretHallDefenderGroup = UnitGroupEmpty();
    gv_pierceTurretDefenderGroup = UnitGroupEmpty();
    gv_roadUnits = UnitGroupEmpty();
    gv_vultureSequencePhase = 1;
    gv_stoneBarrageTimer = TimerCreate();
    gv_vultureDistanceLabel = c_invalidDialogControlId;
    gv_vultureDistanceDialog = c_invalidDialogId;
    gv_anniversaryAchievementMissionTimer = TimerCreate();
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase5 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase4 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_victoryLander = UnitFromId(2318);
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_WatchMedkit (unit lp_medkit);
point gf_RandomPointinRegionSharedbyGroup (region lp_region, unitgroup lp_unitGroup);
bool gf_AFriendlyGhostisinRegion (region lp_region);
void gf_HealTurret (unit lp_turret);
bool gf_PointisValidforDebris (point lp_point, fixed lp_radius, region lp_region);
void gf_DestroyArea (int lp_area);
void gf_CreateDoMExplosion (int lp_size, point lp_point);
void gf_SpawnUnitonRoad (int lp_side, int lp_position, string lp_unitType, int lp_player);
void gf_ActivateCivilianVehicleRoadAI (unit lp_roadUnit, int lp_side);
void gf_ActivateMedkitRoadAI (unit lp_roadUnit, int lp_side);
void gf_ActivateEnemyGhostRoadAI (unit lp_roadUnit);
void gf_ActivateEnemyHellionRoadAI (unit lp_roadUnit);
void gf_ActivateEnemyBansheeRoadAI (unit lp_roadUnit);
void gf_ActivateFriendlyGhostRoadAI (unit lp_roadUnit);
void gf_ActivateWarhawkRoadAI ();
void gf_IssueWarhawkTransitionOrders (int lp_side);
void gf_ExecuteWarhawkMissileBarragePattern (int lp_index);
bool gf_NovaisinBarragePatternRegion (int lp_index);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_DebugStage3;
trigger gt_NovaLosesDetectorConeDetectedEMPedQ;
trigger gt_NovaLosesDetectorConeDetectedStillCloakedQ;
trigger gt_NovaReCloaksTransmissionQ;
trigger gt_HealerbotRecharging;
trigger gt_HealerbotReady;
trigger gt_HealerbotMouseoverTip;
trigger gt_NovaPicksUpRestorationCharge;
trigger gt_StartGameQ;
trigger gt_StartGameVultureQ;
trigger gt_CleanupSection1;
trigger gt_FirstRoomTeachBreakNeck;
trigger gt_FirstRoomTeachBreakNeckCleanup;
trigger gt_FirstRoomNovaStoneQ;
trigger gt_FirstRoomReptileCrateQ;
trigger gt_NovaEntersGhostMaze;
trigger gt_CatwalkTrooperWhatsThatSoundQ;
trigger gt_CatwalkTrooperPatrolLoop;
trigger gt_BackWayGuardsHearSomethingQ;
trigger gt_BackWayGuardsStealthKill;
trigger gt_TerminalGuardsStaySharpQ;
trigger gt_TerminalGuardsStealthKill;
trigger gt_MainPathGuardsStealthKill;
trigger gt_MainPathGuardsStealthKillQ;
trigger gt_TrooperFindsNovaQ;
trigger gt_SendTrooperPatrol;
trigger gt_TrooperPatrolQ;
trigger gt_TrooperPatrolStealthKill;
trigger gt_NovaEntersArmoryHall;
trigger gt_DeadEndGuardsMaxwellConfirmedDeadQ;
trigger gt_DeadEndGuardsStealthKill;
trigger gt_ObtainRifleQ;
trigger gt_TeachSnipeQ;
trigger gt_TeachSnipeCleanup;
trigger gt_SnipeHallInit;
trigger gt_SnipeHallReaperFindsNovaQ;
trigger gt_SnipeHallReaperDespawn;
trigger gt_SnipeHallPart1GhostDies;
trigger gt_SnipeHallPart1ReaperRespawn;
trigger gt_SnipeHallPart1ReaperRetreatQ;
trigger gt_SnipeHallPart2GhostsDie;
trigger gt_SnipeHallPart2ReaperRespawn;
trigger gt_SnipeHallPart2ReaperRetreatQ;
trigger gt_ObtainGrenadesQ;
trigger gt_TeachGrenades;
trigger gt_TeachGrenadeCleanupUseAbility;
trigger gt_TeachGrenadeCleanupMarineClusterDies;
trigger gt_ResearchBayDefendersRespawnQ;
trigger gt_ResearchBayDefenders;
trigger gt_ResearchBayDefenseQ;
trigger gt_PulseGrenadesNearbyQ;
trigger gt_ResearchBayClearQ;
trigger gt_ResearchBayClearAltQ;
trigger gt_FacilityDestruction;
trigger gt_DestructionSoundsandCameraShake;
trigger gt_EscapeTerminationQ;
trigger gt_EscapeInitStealthAI;
trigger gt_EscapeFriendlyGhostEMPTargeting;
trigger gt_EscapeRescueGhostPings;
trigger gt_EscapeGunTurretHallDefenders;
trigger gt_EscapeFlameTurrets;
trigger gt_EscapeRescuedGhostAI;
trigger gt_EscapeDeltaRescue;
trigger gt_EscapeExecuteDeltaQ;
trigger gt_EscapeDeltaRescueSuccessQ;
trigger gt_EscapePierceRescue;
trigger gt_EscapePierceNearbyQ;
trigger gt_EscapePierceRescueSuccessQ;
trigger gt_EscapeDestruction103Trigger;
trigger gt_EscapeCliffMaraudersLeft;
trigger gt_EscapeCliffMaraudersRight;
trigger gt_EscapeFinalBattle;
trigger gt_EscapeStoneRescue;
trigger gt_EscapeStoneRescueQ;
trigger gt_EscapeFriendlyGhostDiesQ;
trigger gt_EscapeComplete;
trigger gt_VultureDistanceCounter;
trigger gt_StonesVultureDestroyed;
trigger gt_StonesVultureDestroyedQ;
trigger gt_RoadSpawns1;
trigger gt_RoadSpawns2;
trigger gt_RoadSpawns3;
trigger gt_WarhawkSpawns;
trigger gt_WarhawkRepulsorMove2;
trigger gt_RoadCollisionDamage;
trigger gt_EnemyVultureQ;
trigger gt_EnemyHellionQ;
trigger gt_EnemyBansheeQ;
trigger gt_WarhawkQ;
trigger gt_DefeatNovaDies;
trigger gt_VictoryReachSpaceportCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StartAI;
trigger gt_StatSnipeKills;
trigger gt_AchievementSnipeKills;
trigger gt_StatNovaHitbyFlameTurret;
trigger gt_StatNovaDamagedbyWarhawk;
trigger gt_ObjectiveRifleCreate;
trigger gt_ObjectiveRifleComplete;
trigger gt_ObjectiveGrenadesCreate;
trigger gt_ObjectiveGrenadesComplete;
trigger gt_ObjectiveEscapeCreate;
trigger gt_ObjectiveEscapeComplete;
trigger gt_ObjectiveSpaceportCreate;
trigger gt_ObjectiveSpaceportComplete;
trigger gt_ObjectiveSurviveCreate;
trigger gt_ObjectiveSurviveComplete;
trigger gt_ObjectiveSurviveFailed;
trigger gt_ObjectiveRescueGhostsCreate;
trigger gt_ObjectiveRescueGhostsComplete;
trigger gt_ObjectiveRescueGhostsUpdate;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroCinematicMoveStone;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_WatchMedkit_Trigger = null;
unit auto_gf_WatchMedkit_lp_medkit;

void gf_WatchMedkit (unit lp_medkit) {
    auto_gf_WatchMedkit_lp_medkit = lp_medkit;

    if (auto_gf_WatchMedkit_Trigger == null) {
        auto_gf_WatchMedkit_Trigger = TriggerCreate("auto_gf_WatchMedkit_TriggerFunc");
    }

    TriggerExecute(auto_gf_WatchMedkit_Trigger, false, false);
}

bool auto_gf_WatchMedkit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_medkit = auto_gf_WatchMedkit_lp_medkit;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoD81677EB_ae = 3;
    const int autoD81677EB_ai = 1;
    const int auto774700A0_ae = 3;
    const int auto774700A0_ai = 1;

    // Variable Initialization

    // Implementation
    while (true) {
        Wait(0.25, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(lp_medkit) == false) || (UnitIsAlive(gv_artanis) == false))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(lp_medkit), 1.5)) == true)) {
            UnitKill(lp_medkit);
            UnitSetPropertyFixed(gv_artanis, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(gv_artanis, c_unitPropEnergyPercent, 100.0);
            SoundPlayForPlayer(SoundLink("MedkitSound", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("UI_Pickup_VultureCube", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            PlayerCreateEffectUnit(1, "PickupHealthFullVulturePathDummySet", gv_artanis);
            if ((gv_currentSection == 1)) {
                lv_i = 1;
                for ( ; ( (autoD81677EB_ai >= 0 && lv_i <= autoD81677EB_ae) || (autoD81677EB_ai < 0 && lv_i >= autoD81677EB_ae) ) ; lv_i += autoD81677EB_ai ) {
                    if ((UnitIsAlive(gv_rescuedGhosts[lv_i]) == true)) {
                        UnitSetPropertyFixed(gv_rescuedGhosts[lv_i], c_unitPropLifePercent, 100.0);
                        UnitSetPropertyFixed(gv_rescuedGhosts[lv_i], c_unitPropEnergyPercent, 100.0);
                    }

                }
            }

            if ((gv_currentSection == 2)) {
                lv_i = 1;
                for ( ; ( (auto774700A0_ai >= 0 && lv_i <= auto774700A0_ae) || (auto774700A0_ai < 0 && lv_i >= auto774700A0_ae) ) ; lv_i += auto774700A0_ai ) {
                    if ((UnitIsAlive(gv_stoneVulture) == true)) {
                        UnitSetPropertyFixed(gv_stoneVulture, c_unitPropLifePercent, 100.0);
                    }

                }
            }

            return true;
        }

    }
    return true;
}

point gf_RandomPointinRegionSharedbyGroup (region lp_region, unitgroup lp_unitGroup) {
    // Variable Declarations
    point lv_currentPoint;
    int lv_unitIndex;
    bool lv_pointIsValid;

    // Automatic Variable Declarations
    const int autoFA459980_n = 50;
    int autoFA459980_i;
    int auto33EE2838_ae;
    const int auto33EE2838_ai = 1;

    // Variable Initialization

    // Implementation
    for (autoFA459980_i = 1; autoFA459980_i <= autoFA459980_n; autoFA459980_i += 1) {
        lv_currentPoint = RegionRandomPoint(lp_region);
        lv_pointIsValid = true;
        auto33EE2838_ae = UnitGroupCount(lp_unitGroup, c_unitCountAlive);
        lv_unitIndex = 1;
        for ( ; ( (auto33EE2838_ai >= 0 && lv_unitIndex <= auto33EE2838_ae) || (auto33EE2838_ai < 0 && lv_unitIndex >= auto33EE2838_ae) ) ; lv_unitIndex += auto33EE2838_ai ) {
            if ((DistanceBetweenPoints(libNCMI_gf_StealthAIGetHomePointOfUnit(UnitGroupUnit(lp_unitGroup, lv_unitIndex)), lv_currentPoint) < 1.0)) {
                lv_pointIsValid = false;
                break;
            }

        }
        if ((lv_pointIsValid == true)) {
            break;
        }

    }
    return lv_currentPoint;
}

bool gf_AFriendlyGhostisinRegion (region lp_region) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto6AD83163_ae = 3;
    const int auto6AD83163_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto6AD83163_ai >= 0 && lv_i <= auto6AD83163_ae) || (auto6AD83163_ai < 0 && lv_i >= auto6AD83163_ae) ) ; lv_i += auto6AD83163_ai ) {
        if ((gv_rescuedGhosts[lv_i] != null) && (UnitIsAlive(gv_rescuedGhosts[lv_i]) == true) && (libNtve_gf_UnitInRegion(gv_rescuedGhosts[lv_i], lp_region) == true)) {
            return true;
        }

    }
    return false;
}

trigger auto_gf_HealTurret_Trigger = null;
unit auto_gf_HealTurret_lp_turret;

void gf_HealTurret (unit lp_turret) {
    auto_gf_HealTurret_lp_turret = lp_turret;

    if (auto_gf_HealTurret_Trigger == null) {
        auto_gf_HealTurret_Trigger = TriggerCreate("auto_gf_HealTurret_TriggerFunc");
    }

    TriggerExecute(auto_gf_HealTurret_Trigger, false, false);
}

bool auto_gf_HealTurret_TriggerFunc (bool testConds, bool runActions) {
    unit lp_turret = auto_gf_HealTurret_lp_turret;

    // Variable Declarations
    actor lv_healModel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitIsAlive(lp_turret) == false) || (UnitGetPropertyFixed(lp_turret, c_unitPropLifePercent, c_unitPropCurrent) > 99.0) || (libNCMI_gf_GameIsOver() == true))) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("XelNagaHealingShrineBuffModel", UnitGetPosition(lp_turret));
    lv_healModel = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(lv_healModel, c_animNameDefault, "Birth", c_animFlagPlayForever, c_animTimeDefault);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lp_turret) == false) || (libNCMI_gf_GameIsOver() == true) || (UnitGetType(lp_turret) == "FlameTurretFCW") || (UnitGetType(lp_turret) == "FlameTurretFCCW") || (UnitGetType(lp_turret) == "FlameTurretSCW") || (UnitGetType(lp_turret) == "FlameTurretSCCW"))) {
            libNtve_gf_KillModel(lv_healModel);
            return true;
        }

        if ((UnitGetPropertyFixed(lp_turret, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
            if ((UnitGetPropertyFixed(lp_turret, c_unitPropLifePercent, c_unitPropCurrent) > 90.0)) {
                UnitSetPropertyFixed(lp_turret, c_unitPropLifePercent, 100.0);
            }
            else {
                UnitSetPropertyFixed(lp_turret, c_unitPropLifePercent, (UnitGetPropertyFixed(lp_turret, c_unitPropLifePercent, c_unitPropCurrent) + 10.0));
            }
        }
        else {
            libNtve_gf_KillModel(lv_healModel);
            return true;
        }
    }
    return true;
}

bool gf_PointisValidforDebris (point lp_point, fixed lp_radius, region lp_region) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto26597EAC_ae = 7;
    const int auto26597EAC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 0;
    for ( ; ( (auto26597EAC_ai >= 0 && lv_i <= auto26597EAC_ae) || (auto26597EAC_ai < 0 && lv_i >= auto26597EAC_ae) ) ; lv_i += auto26597EAC_ai ) {
        if (((WorldHeight(c_heightMapGround, PointWithOffsetPolar(lp_point, lp_radius, (lv_i * 45.0))) < 6.0) || (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, lp_radius, (lv_i * 45.0))) == false))) {
            return false;
        }

    }
    return true;
}

trigger auto_gf_DestroyArea_Trigger = null;
int auto_gf_DestroyArea_lp_area;

void gf_DestroyArea (int lp_area) {
    auto_gf_DestroyArea_lp_area = lp_area;

    if (auto_gf_DestroyArea_Trigger == null) {
        auto_gf_DestroyArea_Trigger = TriggerCreate("auto_gf_DestroyArea_TriggerFunc");
    }

    TriggerExecute(auto_gf_DestroyArea_Trigger, false, false);
}

bool auto_gf_DestroyArea_TriggerFunc (bool testConds, bool runActions) {
    int lp_area = auto_gf_DestroyArea_lp_area;

    // Variable Declarations
    int lv_i;
    int lv_explosionCount;
    point lv_randomPoint;

    // Automatic Variable Declarations
    unitgroup auto7B31C2B8_g;
    int auto7B31C2B8_u;
    unit auto7B31C2B8_var;
    unitgroup autoF76618F5_g;
    int autoF76618F5_u;
    unit autoF76618F5_var;
    unitgroup auto2BB32C0B_g;
    int auto2BB32C0B_u;
    unit auto2BB32C0B_var;
    const int auto6AA13C46_ae = 3;
    const int auto6AA13C46_ai = 1;
    const int auto5BD4F465_ae = 3;
    const int auto5BD4F465_ai = 1;
    const int auto08E884F6_ae = 13;
    const int auto08E884F6_ai = 1;
    const int auto643A5791_n = 2;
    int auto643A5791_i;
    const int auto8F2270D8_n = 20;
    int auto8F2270D8_i;

    // Variable Initialization
    lv_explosionCount = 12;

    // Implementation
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (gv_currentSection != 1))) {
        return true;
    }

    VisRevealArea(gv_pLAYER_01_USER, RegionFromName(("Destruction " + IntToString(lp_area))), 0.0, false);
    auto7B31C2B8_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromName(("Destruction " + IntToString(lp_area))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7B31C2B8_u = UnitGroupCount(auto7B31C2B8_g, c_unitCountAll);
    for (;; auto7B31C2B8_u -= 1) {
        auto7B31C2B8_var = UnitGroupUnitFromEnd(auto7B31C2B8_g, auto7B31C2B8_u);
        if (auto7B31C2B8_var == null) { break; }
        UnitKill(auto7B31C2B8_var);
    }
    autoF76618F5_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromName(("Destruction " + IntToString(lp_area))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF76618F5_u = UnitGroupCount(autoF76618F5_g, c_unitCountAll);
    for (;; autoF76618F5_u -= 1) {
        autoF76618F5_var = UnitGroupUnitFromEnd(autoF76618F5_g, autoF76618F5_u);
        if (autoF76618F5_var == null) { break; }
        UnitKill(autoF76618F5_var);
    }
    if ((lp_area == 4)) {
        auto2BB32C0B_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(114), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2BB32C0B_u = UnitGroupCount(auto2BB32C0B_g, c_unitCountAll);
        for (;; auto2BB32C0B_u -= 1) {
            auto2BB32C0B_var = UnitGroupUnitFromEnd(auto2BB32C0B_g, auto2BB32C0B_u);
            if (auto2BB32C0B_var == null) { break; }
            UnitKill(auto2BB32C0B_var);
        }
    }

    if ((lp_area == 5)) {
        lv_i = 1;
        for ( ; ( (auto5BD4F465_ai >= 0 && lv_i <= auto5BD4F465_ae) || (auto5BD4F465_ai < 0 && lv_i >= auto5BD4F465_ae) ) ; lv_i += auto5BD4F465_ai ) {
            if ((PointFromName(("Pathing Blocker " + IntToString(lp_area) + "-" + IntToString(lv_i))) != null)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker16x16", c_unitCreateIgnorePlacement, 0, PointFromName(("Pathing Blocker " + IntToString(lp_area) + "-" + IntToString(lv_i))));
            }

        }
    }
    else {
        lv_i = 1;
        for ( ; ( (auto6AA13C46_ai >= 0 && lv_i <= auto6AA13C46_ae) || (auto6AA13C46_ai < 0 && lv_i >= auto6AA13C46_ae) ) ; lv_i += auto6AA13C46_ai ) {
            if ((PointFromName(("Pathing Blocker " + IntToString(lp_area) + "-" + IntToString(lv_i))) != null)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker16x16Diagonal", c_unitCreateIgnorePlacement, 0, PointFromName(("Pathing Blocker " + IntToString(lp_area) + "-" + IntToString(lv_i))));
            }

        }
    }
    lv_i = 1;
    for ( ; ( (auto08E884F6_ai >= 0 && lv_i <= auto08E884F6_ae) || (auto08E884F6_ai < 0 && lv_i >= auto08E884F6_ae) ) ; lv_i += auto08E884F6_ai ) {
        if ((PointFromName(("Destruction Fire " + IntToString(lp_area) + "-" + IntToString(lv_i))) != null)) {
            libNtve_gf_CreateActorAtPoint("DOM_Fire_Large_Long", PointFromName(("Destruction Fire " + IntToString(lp_area) + "-" + IntToString(lv_i))));
            gf_CreateDoMExplosion(libNtve_ge_ExplosionSize_Large, PointFromName(("Destruction Fire " + IntToString(lp_area) + "-" + IntToString(lv_i))));
            if ((ModI(lv_i, 2) == 1)) {
                if ((RandomInt(1, 2) == 1)) {
                    PlayerCreateEffectPoint(1, "FX_DOM_CeilingDebris_Beams", PointFromName(("Destruction Fire " + IntToString(lp_area) + "-" + IntToString(lv_i))));
                }
                else {
                    PlayerCreateEffectPoint(1, "FX_DOM_CeilingDebris_Concrete", PointFromName(("Destruction Fire " + IntToString(lp_area) + "-" + IntToString(lv_i))));
                }
            }

            for (auto643A5791_i = 1; auto643A5791_i <= auto643A5791_n; auto643A5791_i += 1) {
                lv_randomPoint = RegionRandomPoint(RegionFromName(("Destruction " + IntToString(lp_area))));
                if ((gf_PointisValidforDebris(lv_randomPoint, 2.0, RegionFromName(("Destruction " + IntToString(lp_area)))) == true)) {
                    libNtve_gf_CreateActorAtPoint("DOM_Fire_Large", lv_randomPoint);
                    gf_CreateDoMExplosion(libNtve_ge_ExplosionSize_Small, lv_randomPoint);
                }
                else {
                    lv_randomPoint = RegionRandomPoint(RegionFromName(("Destruction " + IntToString(lp_area))));
                    if ((gf_PointisValidforDebris(lv_randomPoint, 2.0, RegionFromName(("Destruction " + IntToString(lp_area)))) == true)) {
                        libNtve_gf_CreateActorAtPoint("DOM_Fire_Large", lv_randomPoint);
                        gf_CreateDoMExplosion(libNtve_ge_ExplosionSize_Small, lv_randomPoint);
                    }

                }
            }
            Wait(0.1, c_timeGame);
            if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (gv_currentSection != 1))) {
                return true;
            }

        }
        else {
            break;
        }
    }
    if ((lp_area == 4)) {
        for (auto8F2270D8_i = 1; auto8F2270D8_i <= auto8F2270D8_n; auto8F2270D8_i += 1) {
            lv_randomPoint = RegionRandomPoint(RegionFromName(("Destruction " + IntToString(lp_area))));
            if ((gf_PointisValidforDebris(lv_randomPoint, 3.0, RegionFromName(("Destruction " + IntToString(lp_area)))) == true)) {
                libNtve_gf_CreateActorAtPoint("DOM_Fire_Large_Long", lv_randomPoint);
                gf_CreateDoMExplosion(libNtve_ge_ExplosionSize_Large, lv_randomPoint);
            }

            lv_randomPoint = RegionRandomPoint(RegionFromName(("Destruction " + IntToString(lp_area))));
            if ((gf_PointisValidforDebris(lv_randomPoint, 2.0, RegionFromName(("Destruction " + IntToString(lp_area)))) == true)) {
                libNtve_gf_CreateActorAtPoint("DOM_Fire_Large", lv_randomPoint);
                gf_CreateDoMExplosion(libNtve_ge_ExplosionSize_Small, lv_randomPoint);
            }

            lv_randomPoint = RegionRandomPoint(RegionFromName(("Destruction " + IntToString(lp_area))));
            if ((gf_PointisValidforDebris(lv_randomPoint, 2.0, RegionFromName(("Destruction " + IntToString(lp_area)))) == true)) {
                libNtve_gf_CreateActorAtPoint("DOM_Fire_Large", lv_randomPoint);
                gf_CreateDoMExplosion(libNtve_ge_ExplosionSize_Small, lv_randomPoint);
            }

            if ((RandomInt(1, 2) == 1)) {
                PlayerCreateEffectPoint(1, "FX_DOM_CeilingDebris_Beams", RegionRandomPoint(RegionFromName(("Destruction " + IntToString(lp_area)))));
            }
            else {
                PlayerCreateEffectPoint(1, "FX_DOM_CeilingDebris_Concrete", RegionRandomPoint(RegionFromName(("Destruction " + IntToString(lp_area)))));
            }
            Wait(0.1, c_timeGame);
            if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (gv_currentSection != 1))) {
                return true;
            }

        }
    }

    return true;
}

trigger auto_gf_CreateDoMExplosion_Trigger = null;
int auto_gf_CreateDoMExplosion_lp_size;
point auto_gf_CreateDoMExplosion_lp_point;

void gf_CreateDoMExplosion (int lp_size, point lp_point) {
    auto_gf_CreateDoMExplosion_lp_size = lp_size;
    auto_gf_CreateDoMExplosion_lp_point = lp_point;

    if (auto_gf_CreateDoMExplosion_Trigger == null) {
        auto_gf_CreateDoMExplosion_Trigger = TriggerCreate("auto_gf_CreateDoMExplosion_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateDoMExplosion_Trigger, false, false);
}

bool auto_gf_CreateDoMExplosion_TriggerFunc (bool testConds, bool runActions) {
    int lp_size = auto_gf_CreateDoMExplosion_lp_size;
    point lp_point = auto_gf_CreateDoMExplosion_lp_point;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_size == libNtve_ge_ExplosionSize_Large)) {
        PlayerCreateEffectPoint(1, "FX_DOM_Explosion_Large", lp_point);
        SoundPlayAtPointForPlayer(SoundLink("Explosion_Psi_Explosion", -1), c_maxPlayers, PlayerGroupAll(), lp_point, 0.0, 80.0, 0.0);
    }
    else {
        PlayerCreateEffectPoint(1, "FX_DOM_Explosion_Medium", lp_point);
        SoundPlayAtPointForPlayer(SoundLink("General_Explosion_Debris", -1), c_maxPlayers, PlayerGroupAll(), lp_point, 0.0, 80.0, 0.0);
    }
    return true;
}

trigger auto_gf_SpawnUnitonRoad_Trigger = null;
int auto_gf_SpawnUnitonRoad_lp_side;
int auto_gf_SpawnUnitonRoad_lp_position;
string auto_gf_SpawnUnitonRoad_lp_unitType;
int auto_gf_SpawnUnitonRoad_lp_player;

void gf_SpawnUnitonRoad (int lp_side, int lp_position, string lp_unitType, int lp_player) {
    auto_gf_SpawnUnitonRoad_lp_side = lp_side;
    auto_gf_SpawnUnitonRoad_lp_position = lp_position;
    auto_gf_SpawnUnitonRoad_lp_unitType = lp_unitType;
    auto_gf_SpawnUnitonRoad_lp_player = lp_player;

    if (auto_gf_SpawnUnitonRoad_Trigger == null) {
        auto_gf_SpawnUnitonRoad_Trigger = TriggerCreate("auto_gf_SpawnUnitonRoad_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnUnitonRoad_Trigger, false, false);
}

bool auto_gf_SpawnUnitonRoad_TriggerFunc (bool testConds, bool runActions) {
    int lp_side = auto_gf_SpawnUnitonRoad_lp_side;
    int lp_position = auto_gf_SpawnUnitonRoad_lp_position;
    string lp_unitType = auto_gf_SpawnUnitonRoad_lp_unitType;
    int lp_player = auto_gf_SpawnUnitonRoad_lp_player;

    // Variable Declarations
    unit lv_spawnedUnit;
    fixed lv_facingAngle;

    // Automatic Variable Declarations
    int auto3F03A549_val;
    int autoCE383032_val;
    string auto2968CE10_val;

    // Variable Initialization

    // Implementation
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 2))) {
        return true;
    }

    if ((lp_unitType == "Banshee") && (lp_side == ge_PRESET_LeftRight_Right)) {
        lv_facingAngle = 180.0;
    }
    else {
        lv_facingAngle = 0.0;
    }
    if ((lp_side == ge_PRESET_LeftRight_Left)) {
        autoCE383032_val = lp_position;
        if (autoCE383032_val == ge_PRESET_BMT_Bottom) {
            UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(RegionGetCenter(RegionFromId(116)), 1.0, 270.0), lv_facingAngle);
        }
        else if (autoCE383032_val == ge_PRESET_BMT_Top) {
            UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(RegionGetCenter(RegionFromId(116)), 1.0, 90.0), lv_facingAngle);
        }
        else {
            UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, RegionGetCenter(RegionFromId(116)), lv_facingAngle);
        }
    }
    else {
        auto3F03A549_val = lp_position;
        if (auto3F03A549_val == ge_PRESET_BMT_Bottom) {
            UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(RegionGetCenter(RegionFromId(117)), 1.0, 270.0), lv_facingAngle);
        }
        else if (auto3F03A549_val == ge_PRESET_BMT_Top) {
            UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(RegionGetCenter(RegionFromId(117)), 1.0, 90.0), lv_facingAngle);
        }
        else {
            UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, RegionGetCenter(RegionFromId(117)), lv_facingAngle);
        }
    }
    lv_spawnedUnit = UnitLastCreated();
    UnitSetPropertyFixed(lv_spawnedUnit, c_unitPropEnergyPercent, 100.0);
    UnitGroupAdd(gv_roadUnits, lv_spawnedUnit);
    if (((lp_unitType == "CargoTruckUnitBarrelsVulturePath") || (lp_unitType == "CargoTruckUnitFlatbedVulturePath") || (lp_unitType == "CargoTruckUnitTrailerVulturePath"))) {
        UnitSetState(lv_spawnedUnit, c_unitStateTargetable, false);
        UnitSetState(lv_spawnedUnit, c_unitStateStatusBar, false);
        UnitSetState(lv_spawnedUnit, c_unitStateHighlightable, false);
    }

    if ((lp_unitType == "CruiserBikeVulturePath")) {
        UnitSetState(lv_spawnedUnit, c_unitStateTargetable, false);
        UnitSetState(lv_spawnedUnit, c_unitStateStatusBar, false);
        UnitSetState(lv_spawnedUnit, c_unitStateHighlightable, false);
    }

    if ((lp_unitType == "PickupHealthFullVulturePath")) {
        gf_WatchMedkit(lv_spawnedUnit);
        UnitGroupRemove(gv_roadUnits, lv_spawnedUnit);
    }

    if ((lp_unitType == "Banshee")) {
        UnitSetState(lv_spawnedUnit, c_unitStateHighlightable, false);
        UnitAbilityEnable(lv_spawnedUnit, "attack", false);
        libNtve_gf_ShowHideUnit(lv_spawnedUnit, false);
        if ((lp_side == ge_PRESET_LeftRight_Left)) {
            UnitBehaviorAddPlayer(lv_spawnedUnit, "BansheeFlyInLeft", gv_pLAYER_02_DOMINION, 1);
            UnitSetPosition(lv_spawnedUnit, PointWithOffsetPolar(UnitGetPosition(lv_spawnedUnit), 6.0, 0.0), false);
            Wait(0.1, c_timeGame);
        }
        else {
            UnitBehaviorAddPlayer(lv_spawnedUnit, "BansheeFlyInRight", gv_pLAYER_02_DOMINION, 1);
            UnitSetPosition(lv_spawnedUnit, PointWithOffsetPolar(UnitGetPosition(lv_spawnedUnit), 6.0, 180.0), false);
            Wait(0.1, c_timeGame);
        }
        libNtve_gf_ShowHideUnit(lv_spawnedUnit, true);
        Wait(3.9, c_timeGame);
        UnitSetState(lv_spawnedUnit, c_unitStateHighlightable, true);
        UnitIssueOrder(lv_spawnedUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_spawnedUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitAbilityEnable(lv_spawnedUnit, "attack", true);
    }

    if ((lp_unitType == "SkyTank")) {
        gv_warhawk = lv_spawnedUnit;
        TriggerEnable(gt_StatNovaDamagedbyWarhawk, true);
        libNtve_gf_SendActorMessageToUnit(gv_warhawk, "Signal FlyIn");
        UnitSetPosition(gv_warhawk, PointFromId(905), false);
        UnitSetPropertyFixed(gv_warhawk, c_unitPropLifeMax, gv_warhawkMaxLife);
        UnitSetPropertyFixed(gv_warhawk, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_warhawk, c_unitPropMovementSpeed, 1.0);
        UnitSetState(gv_warhawk, c_unitStateInvulnerable, true);
        UnitSetState(gv_warhawk, c_unitStateTargetable, false);
        UnitSetState(gv_warhawk, c_unitStateStatusBar, false);
        UnitSetState(gv_warhawk, c_unitStateCursorable, false);
        UnitSetState(gv_warhawk, c_unitStateSelectable, false);
    }

    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lv_spawnedUnit) == false) || (gv_currentSection != 2))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(lv_spawnedUnit, RegionFromId(121)) == false)) {
            if ((lp_side == ge_PRESET_LeftRight_Left)) {
                UnitIssueOrder(lv_spawnedUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_spawnedUnit), 6.0, 0.0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_spawnedUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_spawnedUnit), 6.0, 180.0)), c_orderQueueReplace);
            }
        }
        else {
            break;
        }
        Wait(1.0, c_timeAI);
    }
    if (((UnitGetType(lv_spawnedUnit) == "CargoTruckUnitBarrelsVulturePath") || (UnitGetType(lv_spawnedUnit) == "CargoTruckUnitFlatbedVulturePath") || (UnitGetType(lv_spawnedUnit) == "CargoTruckUnitTrailerVulturePath") || (UnitGetType(lv_spawnedUnit) == "CruiserBike"))) {
        gf_ActivateCivilianVehicleRoadAI(lv_spawnedUnit, lp_side);
    }

    auto2968CE10_val = UnitGetType(lv_spawnedUnit);
    if (auto2968CE10_val == "GhostVulture") {
        gf_ActivateEnemyGhostRoadAI(lv_spawnedUnit);
    }
    else if (auto2968CE10_val == "HellionVulturePath") {
        gf_ActivateEnemyHellionRoadAI(lv_spawnedUnit);
    }
    else if (auto2968CE10_val == "Banshee") {
        gf_ActivateEnemyBansheeRoadAI(lv_spawnedUnit);
    }
    else if (auto2968CE10_val == "SkyTank") {
        gf_ActivateWarhawkRoadAI();
    }
    else if (auto2968CE10_val == "PickupHealthFullVulturePath") {
        gf_ActivateMedkitRoadAI(lv_spawnedUnit, lp_side);
    }
    else {
        gf_ActivateCivilianVehicleRoadAI(lv_spawnedUnit, lp_side);
    }
    return true;
}

trigger auto_gf_ActivateCivilianVehicleRoadAI_Trigger = null;
unit auto_gf_ActivateCivilianVehicleRoadAI_lp_roadUnit;
int auto_gf_ActivateCivilianVehicleRoadAI_lp_side;

void gf_ActivateCivilianVehicleRoadAI (unit lp_roadUnit, int lp_side) {
    auto_gf_ActivateCivilianVehicleRoadAI_lp_roadUnit = lp_roadUnit;
    auto_gf_ActivateCivilianVehicleRoadAI_lp_side = lp_side;

    if (auto_gf_ActivateCivilianVehicleRoadAI_Trigger == null) {
        auto_gf_ActivateCivilianVehicleRoadAI_Trigger = TriggerCreate("auto_gf_ActivateCivilianVehicleRoadAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateCivilianVehicleRoadAI_Trigger, false, false);
}

bool auto_gf_ActivateCivilianVehicleRoadAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_roadUnit = auto_gf_ActivateCivilianVehicleRoadAI_lp_roadUnit;
    int lp_side = auto_gf_ActivateCivilianVehicleRoadAI_lp_side;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((lp_side == ge_PRESET_LeftRight_Left)) {
            if ((libNtve_gf_UnitInRegion(lp_roadUnit, RegionFromId(122)) == false)) {
                UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_roadUnit), 4.0, 0.0)), c_orderQueueReplace);
            }
            else {
                UnitRemove(lp_roadUnit);
                return true;
            }
        }
        else {
            if ((libNtve_gf_UnitInRegion(lp_roadUnit, RegionFromId(111)) == false)) {
                UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_roadUnit), 4.0, 180.0)), c_orderQueueReplace);
            }
            else {
                UnitRemove(lp_roadUnit);
                return true;
            }
        }
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lp_roadUnit) == false) || (gv_currentSection != 2))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_ActivateMedkitRoadAI_Trigger = null;
unit auto_gf_ActivateMedkitRoadAI_lp_roadUnit;
int auto_gf_ActivateMedkitRoadAI_lp_side;

void gf_ActivateMedkitRoadAI (unit lp_roadUnit, int lp_side) {
    auto_gf_ActivateMedkitRoadAI_lp_roadUnit = lp_roadUnit;
    auto_gf_ActivateMedkitRoadAI_lp_side = lp_side;

    if (auto_gf_ActivateMedkitRoadAI_Trigger == null) {
        auto_gf_ActivateMedkitRoadAI_Trigger = TriggerCreate("auto_gf_ActivateMedkitRoadAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateMedkitRoadAI_Trigger, false, false);
}

bool auto_gf_ActivateMedkitRoadAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_roadUnit = auto_gf_ActivateMedkitRoadAI_lp_roadUnit;
    int lp_side = auto_gf_ActivateMedkitRoadAI_lp_side;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((lp_side == ge_PRESET_LeftRight_Left)) {
            if ((libNtve_gf_UnitInRegion(lp_roadUnit, RegionFromId(122)) == false)) {
                UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_roadUnit), 6.0, 0.0)), c_orderQueueReplace);
            }
            else {
                gv_vultureMedKitMissed = true;
                UnitRemove(lp_roadUnit);
                return true;
            }
        }
        else {
            if ((libNtve_gf_UnitInRegion(lp_roadUnit, RegionFromId(111)) == false)) {
                UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_roadUnit), 6.0, 180.0)), c_orderQueueReplace);
            }
            else {
                gv_vultureMedKitMissed = true;
                UnitRemove(lp_roadUnit);
                return true;
            }
        }
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lp_roadUnit) == false) || (gv_currentSection != 2))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_ActivateEnemyGhostRoadAI_Trigger = null;
unit auto_gf_ActivateEnemyGhostRoadAI_lp_roadUnit;

void gf_ActivateEnemyGhostRoadAI (unit lp_roadUnit) {
    auto_gf_ActivateEnemyGhostRoadAI_lp_roadUnit = lp_roadUnit;

    if (auto_gf_ActivateEnemyGhostRoadAI_Trigger == null) {
        auto_gf_ActivateEnemyGhostRoadAI_Trigger = TriggerCreate("auto_gf_ActivateEnemyGhostRoadAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateEnemyGhostRoadAI_Trigger, false, false);
}

bool auto_gf_ActivateEnemyGhostRoadAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_roadUnit = auto_gf_ActivateEnemyGhostRoadAI_lp_roadUnit;

    // Variable Declarations
    unitgroup lv_civilianUnits;
    timer lv_attackOrderCooldown;
    timer lv_evasionOrderCooldown;
    timer lv_snipeCooldown;
    unit lv_closestUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_civilianUnits = UnitGroupEmpty();
    lv_attackOrderCooldown = TimerCreate();
    lv_evasionOrderCooldown = TimerCreate();
    lv_snipeCooldown = TimerCreate();

    // Implementation
    UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
    TimerStart(lv_attackOrderCooldown, 3.0, false, c_timeAI);
    TimerStart(lv_evasionOrderCooldown, 0.5, false, c_timeAI);
    TimerStart(lv_snipeCooldown, libLotv_gf_DifficultyValueFixed2(5.0, 5.0, 2.5, 1.5), false, c_timeAI);
    while (true) {
        if ((TimerGetRemaining(lv_attackOrderCooldown) < 1)) {
            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
            TimerStart(lv_attackOrderCooldown, 3.0, false, c_timeAI);
        }

        if ((TimerGetRemaining(lv_evasionOrderCooldown) < 1)) {
            lv_civilianUnits = UnitGroup(null, 0, RegionRect((PointGetX(UnitGetPosition(lp_roadUnit)) - 3.0), (PointGetY(UnitGetPosition(lp_roadUnit)) - 1.7), (PointGetX(UnitGetPosition(lp_roadUnit)) + 3.0), (PointGetY(UnitGetPosition(lp_roadUnit)) + 1.7)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_civilianUnits, c_unitCountAlive) > 0)) {
                lv_closestUnit = UnitGroupClosestToPoint(lv_civilianUnits, UnitGetPosition(lp_roadUnit));
                if ((PointGetY(UnitGetPosition(lv_closestUnit)) > 156.5)) {
                    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_roadUnit), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                        UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point(PointGetX(UnitGetPosition(lp_roadUnit)), RandomFixed(154.6, 155.5))), c_orderQueueReplace);
                    }
                    else {
                        if ((PointGetX(UnitGetPosition(gv_artanis)) > PointGetX(UnitGetPosition(lp_roadUnit)))) {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(lp_roadUnit)) + 2.0), RandomFixed(154.6, 155.5))), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(lp_roadUnit)) - 2.0), RandomFixed(154.6, 155.5))), c_orderQueueReplace);
                        }
                    }
                }
                else {
                    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_roadUnit), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                        UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point(PointGetX(UnitGetPosition(lp_roadUnit)), RandomFixed(157.5, 158.4))), c_orderQueueReplace);
                    }
                    else {
                        if ((PointGetX(UnitGetPosition(gv_artanis)) > PointGetX(UnitGetPosition(lp_roadUnit)))) {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(lp_roadUnit)) + 2.0), RandomFixed(157.5, 158.4))), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(lp_roadUnit)) - 2.0), RandomFixed(157.5, 158.4))), c_orderQueueReplace);
                        }
                    }
                }
                UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueAddToEnd);
                TimerStart(lv_attackOrderCooldown, (TimerGetRemaining(lv_attackOrderCooldown) + 1.0), false, c_timeAI);
                TimerStart(lv_evasionOrderCooldown, 2.0, false, c_timeAI);
            }

        }

        if ((UnitGetPropertyFixed(lp_roadUnit, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) && (TimerGetRemaining(lv_snipeCooldown) < 1) && (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(lp_roadUnit), 8.0)) == true)) {
            UnitIssueOrder(lp_roadUnit, OrderTargetingUnit(AbilityCommand("SnipeVulture", 0), gv_artanis), c_orderQueueAddToFront);
            TimerStart(lv_snipeCooldown, libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 4.0), false, c_timeAI);
        }

        Wait(0.0625, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lp_roadUnit) == false) || (gv_currentSection != 2))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_ActivateEnemyHellionRoadAI_Trigger = null;
unit auto_gf_ActivateEnemyHellionRoadAI_lp_roadUnit;

void gf_ActivateEnemyHellionRoadAI (unit lp_roadUnit) {
    auto_gf_ActivateEnemyHellionRoadAI_lp_roadUnit = lp_roadUnit;

    if (auto_gf_ActivateEnemyHellionRoadAI_Trigger == null) {
        auto_gf_ActivateEnemyHellionRoadAI_Trigger = TriggerCreate("auto_gf_ActivateEnemyHellionRoadAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateEnemyHellionRoadAI_Trigger, false, false);
}

bool auto_gf_ActivateEnemyHellionRoadAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_roadUnit = auto_gf_ActivateEnemyHellionRoadAI_lp_roadUnit;

    // Variable Declarations
    unitgroup lv_civilianUnits;
    timer lv_attackOrderCooldown;
    timer lv_evasionOrderCooldown;
    unit lv_closestUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_civilianUnits = UnitGroupEmpty();
    lv_attackOrderCooldown = TimerCreate();
    lv_evasionOrderCooldown = TimerCreate();

    // Implementation
    UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
    TimerStart(lv_attackOrderCooldown, 3.0, false, c_timeAI);
    TimerStart(lv_evasionOrderCooldown, 0.5, false, c_timeAI);
    while (true) {
        if ((TimerGetRemaining(lv_attackOrderCooldown) < 1)) {
            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
            TimerStart(lv_attackOrderCooldown, 3.0, false, c_timeAI);
        }

        if ((TimerGetRemaining(lv_evasionOrderCooldown) < 1)) {
            lv_civilianUnits = UnitGroup(null, 0, RegionRect((PointGetX(UnitGetPosition(lp_roadUnit)) - 2.0), (PointGetY(UnitGetPosition(lp_roadUnit)) - 1.7), (PointGetX(UnitGetPosition(lp_roadUnit)) + 4.0), (PointGetY(UnitGetPosition(lp_roadUnit)) + 1.7)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_civilianUnits, c_unitCountAlive) > 0)) {
                lv_closestUnit = UnitGroupClosestToPoint(lv_civilianUnits, UnitGetPosition(lp_roadUnit));
                if ((PointGetY(UnitGetPosition(lv_closestUnit)) > 156.5)) {
                    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_roadUnit), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                        UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point(PointGetX(UnitGetPosition(lp_roadUnit)), RandomFixed(154.6, 155.5))), c_orderQueueReplace);
                    }
                    else {
                        if ((PointGetX(UnitGetPosition(gv_artanis)) > PointGetX(UnitGetPosition(lp_roadUnit)))) {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(lp_roadUnit)) + 2.0), RandomFixed(154.6, 155.5))), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(lp_roadUnit)) - 2.0), RandomFixed(154.6, 155.5))), c_orderQueueReplace);
                        }
                    }
                }
                else {
                    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_roadUnit), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                        UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point(PointGetX(UnitGetPosition(lp_roadUnit)), RandomFixed(157.5, 158.4))), c_orderQueueReplace);
                    }
                    else {
                        if ((PointGetX(UnitGetPosition(gv_artanis)) > PointGetX(UnitGetPosition(lp_roadUnit)))) {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(lp_roadUnit)) + 2.0), RandomFixed(157.5, 158.4))), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(lp_roadUnit)) - 2.0), RandomFixed(157.5, 158.4))), c_orderQueueReplace);
                        }
                    }
                }
                UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueAddToEnd);
                TimerStart(lv_attackOrderCooldown, (TimerGetRemaining(lv_attackOrderCooldown) + 1.0), false, c_timeAI);
                TimerStart(lv_evasionOrderCooldown, 2.0, false, c_timeAI);
            }

        }

        Wait(0.0625, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lp_roadUnit) == false) || (gv_currentSection != 2))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_ActivateEnemyBansheeRoadAI_Trigger = null;
unit auto_gf_ActivateEnemyBansheeRoadAI_lp_roadUnit;

void gf_ActivateEnemyBansheeRoadAI (unit lp_roadUnit) {
    auto_gf_ActivateEnemyBansheeRoadAI_lp_roadUnit = lp_roadUnit;

    if (auto_gf_ActivateEnemyBansheeRoadAI_Trigger == null) {
        auto_gf_ActivateEnemyBansheeRoadAI_Trigger = TriggerCreate("auto_gf_ActivateEnemyBansheeRoadAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateEnemyBansheeRoadAI_Trigger, false, false);
}

bool auto_gf_ActivateEnemyBansheeRoadAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_roadUnit = auto_gf_ActivateEnemyBansheeRoadAI_lp_roadUnit;

    // Variable Declarations
    unitgroup lv_civilianUnits;
    timer lv_attackOrderCooldown;
    unit lv_closestUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_civilianUnits = UnitGroupEmpty();
    lv_attackOrderCooldown = TimerCreate();

    // Implementation
    if ((UnitIsAlive(lp_roadUnit) == false)) {
        return true;
    }

    UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
    TimerStart(lv_attackOrderCooldown, 3.0, false, c_timeAI);
    while (true) {
        if ((TimerGetRemaining(lv_attackOrderCooldown) < 1)) {
            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
            TimerStart(lv_attackOrderCooldown, 3.0, false, c_timeAI);
        }

        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lp_roadUnit) == false) || (gv_currentSection != 2))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_ActivateFriendlyGhostRoadAI_Trigger = null;
unit auto_gf_ActivateFriendlyGhostRoadAI_lp_roadUnit;

void gf_ActivateFriendlyGhostRoadAI (unit lp_roadUnit) {
    auto_gf_ActivateFriendlyGhostRoadAI_lp_roadUnit = lp_roadUnit;

    if (auto_gf_ActivateFriendlyGhostRoadAI_Trigger == null) {
        auto_gf_ActivateFriendlyGhostRoadAI_Trigger = TriggerCreate("auto_gf_ActivateFriendlyGhostRoadAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateFriendlyGhostRoadAI_Trigger, false, false);
}

bool auto_gf_ActivateFriendlyGhostRoadAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_roadUnit = auto_gf_ActivateFriendlyGhostRoadAI_lp_roadUnit;

    // Variable Declarations
    unitgroup lv_civilianUnits;
    timer lv_attackOrderCooldown;
    timer lv_evasionOrderCooldown;
    timer lv_snipeCooldown;
    unit lv_closestUnit;
    unitgroup lv_enemyUnits;

    // Automatic Variable Declarations
    unit autoE4DFBCFB_val;

    // Variable Initialization
    lv_civilianUnits = UnitGroupEmpty();
    lv_attackOrderCooldown = TimerCreate();
    lv_evasionOrderCooldown = TimerCreate();
    lv_snipeCooldown = TimerCreate();
    lv_enemyUnits = UnitGroupEmpty();

    // Implementation
    TimerStart(gv_stoneBarrageTimer, 0.1, false, c_timeAI);
    TimerStart(lv_attackOrderCooldown, 3.0, false, c_timeAI);
    TimerStart(lv_evasionOrderCooldown, 0.5, false, c_timeAI);
    TimerStart(lv_snipeCooldown, 8.0, false, c_timeAI);
    while (true) {
        lv_enemyUnits = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(119), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((TimerGetRemaining(lv_attackOrderCooldown) < 1) && (TimerGetRemaining(gv_stoneBarrageTimer) < 1)) {
            if ((UnitGroupCount(lv_enemyUnits, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyUnits, UnitGetPosition(lp_roadUnit)))), c_orderQueueReplace);
            }
            else {
                autoE4DFBCFB_val = lp_roadUnit;
                if (autoE4DFBCFB_val == gv_stoneVulture) {
                    if (((gv_vultureSequencePhase == 2) || (gv_vultureSequencePhase == 3) || ((UnitIsAlive(gv_warhawk) == true) && ((UnitGetPropertyFixed(gv_warhawk, c_unitPropLifePercent, c_unitPropCurrent) >= 35) && (UnitGetPropertyFixed(gv_warhawk, c_unitPropLifePercent, c_unitPropCurrent) <= 60))))) {
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionFromId(131), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(902)), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(576)), c_orderQueueReplace);
                        }
                    }
                    else {
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionFromId(130), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(569)), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(577)), c_orderQueueReplace);
                        }
                    }
                }
                else {
                }
            }
            TimerStart(lv_attackOrderCooldown, 3.0, false, c_timeAI);
        }

        if ((TimerGetRemaining(lv_evasionOrderCooldown) < 1)) {
            lv_civilianUnits = UnitGroup(null, 0, RegionRect((PointGetX(UnitGetPosition(lp_roadUnit)) - 3.0), (PointGetY(UnitGetPosition(lp_roadUnit)) - 1.7), (PointGetX(UnitGetPosition(lp_roadUnit)) + 3.5), (PointGetY(UnitGetPosition(lp_roadUnit)) + 1.7)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_civilianUnits, c_unitCountAlive) > 0)) {
                lv_closestUnit = UnitGroupClosestToPoint(lv_civilianUnits, UnitGetPosition(lp_roadUnit));
                if ((PointGetY(UnitGetPosition(lv_closestUnit)) > 156.5)) {
                    UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point(PointGetX(UnitGetPosition(lp_roadUnit)), RandomFixed(154.6, 155.5))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("move", 0), Point(PointGetX(UnitGetPosition(lp_roadUnit)), RandomFixed(157.5, 158.4))), c_orderQueueReplace);
                }
                if ((UnitGroupCount(lv_enemyUnits, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(lp_roadUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyUnits, UnitGetPosition(lp_roadUnit)))), c_orderQueueAddToEnd);
                }

                TimerStart(lv_attackOrderCooldown, (TimerGetRemaining(lv_attackOrderCooldown) + 1.0), false, c_timeAI);
                TimerStart(lv_evasionOrderCooldown, 2.0, false, c_timeAI);
            }

        }

        if ((UnitGetPropertyFixed(lp_roadUnit, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) && (TimerGetRemaining(lv_snipeCooldown) < 1) && (UnitGroupCount(UnitGroupFilterRegion(lv_enemyUnits, RegionCircle(UnitGetPosition(lp_roadUnit), 8.0), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(lp_roadUnit, OrderTargetingUnit(AbilityCommand("SnipeVulture", 0), UnitGroupClosestToPoint(lv_enemyUnits, UnitGetPosition(lp_roadUnit))), c_orderQueueAddToFront);
            TimerStart(lv_snipeCooldown, 8.0, false, c_timeAI);
        }

        Wait(0.0625, c_timeAI);
        if (((gv_stoneVultureDestroyed == true) || (libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lp_roadUnit) == false) || (gv_currentSection != 2))) {
            return true;
        }

    }
    return true;
}

trigger auto_gf_ActivateWarhawkRoadAI_Trigger = null;

void gf_ActivateWarhawkRoadAI () {
    if (auto_gf_ActivateWarhawkRoadAI_Trigger == null) {
        auto_gf_ActivateWarhawkRoadAI_Trigger = TriggerCreate("auto_gf_ActivateWarhawkRoadAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateWarhawkRoadAI_Trigger, false, false);
}

bool auto_gf_ActivateWarhawkRoadAI_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_barrageCooldown;
    int[8] lv_validBarragePatterns;
    int lv_i;
    int lv_validBarrageCount;
    int lv_randomInt;
    bool lv_rammingEnabled;
    bool lv_phase2EnterStart;
    bool lv_phase2EnterEnd;
    bool lv_phase3EnterStart;
    bool lv_phase3EnterEnd;
    bool lv_phase4Enter;
    timer lv_laserCooldown;
    bool lv_laserModeLeft;
    bool lv_laserModeRight;
    unit lv_lookAtHelper;
    int lv_laserRegion;
    int lv_leftTransitionReadyCounter;
    int lv_rightTransitionReadyCounter;

    // Automatic Variable Declarations
    const int auto3DEF810D_ae = 7;
    const int auto3DEF810D_ai = 1;

    // Variable Initialization
    lv_barrageCooldown = TimerCreate();
    lv_rammingEnabled = true;
    lv_laserCooldown = TimerCreate();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, MidPoint(PointFromId(2232), PointFromId(905)));
    lv_lookAtHelper = UnitLastCreated();
    UnitSetState(lv_lookAtHelper, c_unitStateInvulnerable, true);
    UnitSetPropertyFixed(lv_lookAtHelper, c_unitPropHeight, 0.5);
    UnitIssueOrder(gv_warhawk, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(4.767, c_timeGame);
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 2))) {
        return true;
    }

    if ((UnitIsAlive(gv_warhawk) == false)) {
        TriggerExecute(gt_VictoryReachSpaceportCompleted, true, false);
        return true;
    }

    UnitSetState(gv_warhawk, c_unitStateInvulnerable, false);
    UnitSetState(gv_warhawk, c_unitStateTargetable, true);
    UnitSetState(gv_warhawk, c_unitStateStatusBar, true);
    UnitSetState(gv_warhawk, c_unitStateCursorable, true);
    UnitSetState(gv_warhawk, c_unitStateSelectable, true);
    UnitBehaviorAdd(gv_warhawk, "SkyTankKnockback", gv_warhawk, 1);
    libNCUI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\btn-unit-terran-dominiontrain-fast.dds", StringExternal("Param/Value/8324ACCB"), 100);
    libNCUI_gf_SetSingularBossBarBossVoidCampaign(gv_warhawk, true);
    libNCUI_gf_ShowHideSingularBossBarVoidCampaign(true);
    Wait(3.0, c_timeGame);
    TimerStart(lv_barrageCooldown, 2.0, false, c_timeAI);
    while (true) {
        Wait(0.5, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 2))) {
            return true;
        }

        if ((UnitIsAlive(gv_warhawk) == false)) {
            libNCUI_gf_ShowHideSingularBossBarVoidCampaign(false);
            TriggerExecute(gt_VictoryReachSpaceportCompleted, true, false);
            return true;
        }

        if ((lv_phase2EnterStart == false) && (UnitGetPropertyFixed(gv_warhawk, c_unitPropLifePercent, c_unitPropCurrent) < 75.0) && (TimerGetRemaining(lv_barrageCooldown) < 3.5) && (TimerGetRemaining(lv_barrageCooldown) >= 1.5)) {
            lv_phase2EnterStart = true;
            lv_rammingEnabled = false;
            libNtve_gf_SendActorMessageToUnit(gv_warhawk, libNtve_gf_Signal("TurnModeEnter"));
            UnitSetPropertyFixed(gv_warhawk, c_unitPropMovementSpeed, 2.0);
            UnitCreateEffectUnit(gv_warhawk, "SkyTankLookAtStart", lv_lookAtHelper);
            UnitSetPosition(UnitFromId(819), PointFromId(1961), false);
        }

        if ((lv_phase2EnterStart == true) && (lv_phase2EnterEnd == false)) {
            if ((libNtve_gf_UnitInRegion(gv_warhawk, RegionCircle(PointFromId(2232), 0.5)) == true) && (UnitGetPropertyFixed(gv_warhawk, c_unitPropHeight, c_unitPropCurrent) < 1.6)) {
                lv_leftTransitionReadyCounter += 1;
            }

            if ((lv_leftTransitionReadyCounter >= 2)) {
                lv_phase2EnterEnd = true;
                lv_laserModeLeft = true;
                UnitSetPropertyFixed(gv_warhawk, c_unitPropMovementSpeed, 1.0);
                UnitCreateEffectUnit(gv_warhawk, "SkyTankLookAtStop", lv_lookAtHelper);
                TimerStart(lv_laserCooldown, 2.0, false, c_timeAI);
                UnitSetPosition(UnitFromId(817), PointFromId(1776), false);
            }
            else {
                gf_IssueWarhawkTransitionOrders(ge_PRESET_LeftRight_Left);
            }
        }

        if ((lv_phase2EnterEnd == true) && (lv_phase3EnterStart == false) && (UnitGetPropertyFixed(gv_warhawk, c_unitPropLifePercent, c_unitPropCurrent) < 40.0) && (TimerGetRemaining(lv_laserCooldown) < 0.1)) {
            lv_phase3EnterStart = true;
            lv_laserModeLeft = false;
            UnitSetPropertyFixed(gv_warhawk, c_unitPropMovementSpeed, 2.0);
            libNtve_gf_SendActorMessageToUnit(gv_warhawk, libNtve_gf_Signal("TurnModeEnter"));
            UnitCreateEffectUnit(gv_warhawk, "SkyTankLookAtStart", lv_lookAtHelper);
            libNtve_gf_SendActorMessageToUnit(gv_warhawk, "Signal LaserModeExit");
            UnitSetPosition(UnitFromId(817), PointFromId(1775), false);
        }

        if ((lv_phase3EnterStart == true) && (lv_phase3EnterEnd == false)) {
            if ((libNtve_gf_UnitInRegion(gv_warhawk, RegionCircle(PointFromId(905), 0.5)) == true) && (UnitGetPropertyFixed(gv_warhawk, c_unitPropHeight, c_unitPropCurrent) < 1.6)) {
                lv_rightTransitionReadyCounter += 1;
            }

            if ((lv_rightTransitionReadyCounter >= 2)) {
                lv_phase3EnterEnd = true;
                lv_rammingEnabled = true;
                UnitSetPropertyFixed(gv_warhawk, c_unitPropMovementSpeed, 1.0);
                UnitCreateEffectUnit(gv_warhawk, "SkyTankLookAtStop", lv_lookAtHelper);
                TimerStart(lv_barrageCooldown, 3.0, false, c_timeAI);
                UnitSetPosition(UnitFromId(819), PointFromId(1385), false);
            }
            else {
                gf_IssueWarhawkTransitionOrders(ge_PRESET_LeftRight_Right);
            }
        }

        if ((lv_phase3EnterStart == true) && (lv_phase4Enter == false) && (UnitGetPropertyFixed(gv_warhawk, c_unitPropLifePercent, c_unitPropCurrent) < 10.0) && (TimerGetRemaining(lv_barrageCooldown) < 3.5) && (TimerGetRemaining(lv_barrageCooldown) >= 1.5)) {
            lv_phase4Enter = true;
            lv_rammingEnabled = false;
            lv_laserModeRight = true;
            UnitSetPropertyFixed(gv_warhawk, c_unitPropMovementSpeed, 2.0);
            TimerStart(lv_laserCooldown, 2.0, false, c_timeAI);
            libNtve_gf_SendActorMessageToUnit(gv_warhawk, "Signal LaserModeEnter");
        }

        if ((lv_rammingEnabled == true)) {
            if ((libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(150)) == true)) {
                UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
                UnitIssueOrder(gv_warhawk, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }
            else {
                if ((libNtve_gf_UnitInRegion(gv_warhawk, RegionCircle(PointFromId(905), 1.0)) == false)) {
                    UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(905)), c_orderQueueReplace);
                    UnitIssueOrder(gv_warhawk, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                }

            }
        }

        lv_laserRegion = 0;
        if ((lv_laserModeLeft == true) && (TimerGetRemaining(lv_laserCooldown) < 0.1)) {
            TimerStart(lv_laserCooldown, 6.0, false, c_timeAI);
            if ((libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(7)) == true)) {
                lv_laserRegion = 2;
                UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(2232), 1.25, 90.0)), c_orderQueueReplace);
            }
            else {
                lv_laserRegion = 1;
                UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(2232), 1.25, 270.0)), c_orderQueueReplace);
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
                UnitIssueOrder(gv_warhawk, Order(AbilityCommand("SkyTankLaserBeamFast", 0)), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(gv_warhawk, Order(AbilityCommand("SkyTankLaserBeamSlow", 0)), c_orderQueueAddToEnd);
            }
            UnitIssueOrder(gv_warhawk, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }

        if ((lv_laserModeRight == true) && (TimerGetRemaining(lv_laserCooldown) < 0.1)) {
            TimerStart(lv_laserCooldown, 4.0, false, c_timeAI);
            if ((libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(7)) == true)) {
                lv_laserRegion = 2;
                UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(905), 1.25, 90.0)), c_orderQueueReplace);
            }
            else {
                lv_laserRegion = 1;
                UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(905), 1.25, 270.0)), c_orderQueueReplace);
            }
            if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                UnitIssueOrder(gv_warhawk, Order(AbilityCommand("SkyTankLaserBeamFast", 0)), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(gv_warhawk, Order(AbilityCommand("SkyTankLaserBeamSlow", 0)), c_orderQueueAddToEnd);
            }
            UnitIssueOrder(gv_warhawk, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }

        if ((lv_laserRegion == 1) && (UnitIsAlive(gv_stoneVulture) == true) && (gv_stoneVultureDestroyed == false)) {
            UnitIssueOrder(gv_stoneVulture, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2233)), c_orderQueueReplace);
            UnitIssueOrder(gv_stoneVulture, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            TimerStart(gv_stoneBarrageTimer, 3.5, false, c_timeAI);
        }

        if ((lv_laserRegion == 2) && (UnitIsAlive(gv_stoneVulture) == true) && (gv_stoneVultureDestroyed == false)) {
            UnitIssueOrder(gv_stoneVulture, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2234)), c_orderQueueReplace);
            UnitIssueOrder(gv_stoneVulture, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            TimerStart(gv_stoneBarrageTimer, 3.5, false, c_timeAI);
        }

        if ((TimerGetRemaining(lv_barrageCooldown) < 1.4) && (TimerGetRemaining(lv_barrageCooldown) > 0.6) && (lv_rammingEnabled == true)) {
            libNtve_gf_SendActorMessageToUnit(gv_warhawk, "Signal MissileModeEnter");
        }

        if ((TimerGetRemaining(lv_barrageCooldown) < 0.1) && (libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(150)) == false) && (lv_rammingEnabled == true)) {
            TimerStart(lv_barrageCooldown, 5.0, false, c_timeAI);
            lv_validBarrageCount = 0;
            lv_i = 1;
            for ( ; ( (auto3DEF810D_ai >= 0 && lv_i <= auto3DEF810D_ae) || (auto3DEF810D_ai < 0 && lv_i >= auto3DEF810D_ae) ) ; lv_i += auto3DEF810D_ai ) {
                if ((gf_NovaisinBarragePatternRegion(lv_i) == true)) {
                    lv_validBarrageCount += 1;
                    lv_validBarragePatterns[lv_validBarrageCount] = lv_i;
                }

            }
            if ((lv_validBarrageCount > 0)) {
                lv_randomInt = RandomInt(1, lv_validBarrageCount);
            }
            else {
                lv_randomInt = RandomInt(1, 7);
            }
            gf_ExecuteWarhawkMissileBarragePattern(lv_validBarragePatterns[lv_randomInt]);
            if ((UnitIsAlive(gv_stoneVulture) == true) && (gv_stoneVultureDestroyed == false)) {
                UnitIssueOrder(gv_stoneVulture, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Missile Barrage Safe " + IntToString(lv_validBarragePatterns[lv_randomInt])))), c_orderQueueReplace);
                UnitIssueOrder(gv_stoneVulture, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                TimerStart(gv_stoneBarrageTimer, 3.5, false, c_timeAI);
            }

        }

    }
    return true;
}

trigger auto_gf_IssueWarhawkTransitionOrders_Trigger = null;
int auto_gf_IssueWarhawkTransitionOrders_lp_side;

void gf_IssueWarhawkTransitionOrders (int lp_side) {
    auto_gf_IssueWarhawkTransitionOrders_lp_side = lp_side;

    if (auto_gf_IssueWarhawkTransitionOrders_Trigger == null) {
        auto_gf_IssueWarhawkTransitionOrders_Trigger = TriggerCreate("auto_gf_IssueWarhawkTransitionOrders_TriggerFunc");
    }

    TriggerExecute(auto_gf_IssueWarhawkTransitionOrders_Trigger, false, false);
}

bool auto_gf_IssueWarhawkTransitionOrders_TriggerFunc (bool testConds, bool runActions) {
    int lp_side = auto_gf_IssueWarhawkTransitionOrders_lp_side;

    // Variable Declarations
    fixed lv_currentRadius;
    point lv_midpoint;
    fixed lv_distance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_warhawk) == false)) {
        return true;
    }

    lv_midpoint = MidPoint(PointFromId(2232), PointFromId(905));
    lv_distance = DistanceBetweenPoints(lv_midpoint, PointFromId(905));
    lv_currentRadius = AngleBetweenPoints(lv_midpoint, UnitGetPosition(gv_warhawk));
    if ((lv_currentRadius < 0.0)) {
        lv_currentRadius += 360.0;
    }

    if ((lp_side == ge_PRESET_LeftRight_Left)) {
        if (((lv_currentRadius > 270.0) || (lv_currentRadius < 140.0))) {
            UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_midpoint, (lv_distance - (2.0 * Sin((lv_currentRadius + 30.0)))), (lv_currentRadius + 30.0))), c_orderQueueReplace);
            UnitSetHeight(gv_warhawk, ((Sin((lv_currentRadius + 30.0))*2.0) + 1.5), 0.5);
        }
        else {
            UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2232)), c_orderQueueReplace);
            UnitIssueOrder(gv_warhawk, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            UnitSetHeight(gv_warhawk, 1.5, 0.5);
        }
    }
    else {
        if ((lv_currentRadius > 40.0)) {
            UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_midpoint, (lv_distance - (2.0 * Sin((lv_currentRadius - 30.0)))), (lv_currentRadius - 30.0))), c_orderQueueReplace);
            UnitSetHeight(gv_warhawk, ((Sin((lv_currentRadius - 30.0))*2.0) + 1.5), 0.5);
        }
        else {
            UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(905)), c_orderQueueReplace);
            UnitIssueOrder(gv_warhawk, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            UnitSetHeight(gv_warhawk, 1.5, 0.5);
        }
    }
    if ((lp_side == ge_PRESET_LeftRight_Left)) {
        if ((gv_barrageTransitionLeft == false) && (lv_currentRadius > 30.0)) {
            gv_barrageTransitionLeft = true;
            libNtve_gf_SendActorMessageToUnit(gv_warhawk, "Signal MissileModeEnter");
            Wait(1.0, c_timeAI);
            gf_ExecuteWarhawkMissileBarragePattern(8);
            if ((UnitIsAlive(gv_stoneVulture) == true) && (gv_stoneVultureDestroyed == false)) {
                UnitIssueOrder(gv_stoneVulture, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Missile Barrage Safe " + IntToString(8)))), c_orderQueueReplace);
                UnitIssueOrder(gv_stoneVulture, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                TimerStart(gv_stoneBarrageTimer, 3.5, false, c_timeAI);
            }

            Wait(3.0, c_timeAI);
            libNtve_gf_SendActorMessageToUnit(gv_warhawk, "Signal LaserModeEnter");
        }

    }
    else {
        if ((gv_barrageTransitionRight == false) && (lv_currentRadius < 150.0)) {
            gv_barrageTransitionRight = true;
            libNtve_gf_SendActorMessageToUnit(gv_warhawk, "Signal MissileModeEnter");
            Wait(1.0, c_timeAI);
            gf_ExecuteWarhawkMissileBarragePattern(8);
            if ((UnitIsAlive(gv_stoneVulture) == true) && (gv_stoneVultureDestroyed == false)) {
                UnitIssueOrder(gv_stoneVulture, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Missile Barrage Safe " + IntToString(8)))), c_orderQueueReplace);
                UnitIssueOrder(gv_stoneVulture, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                TimerStart(gv_stoneBarrageTimer, 3.5, false, c_timeAI);
            }

        }

    }
    return true;
}

trigger auto_gf_ExecuteWarhawkMissileBarragePattern_Trigger = null;
int auto_gf_ExecuteWarhawkMissileBarragePattern_lp_index;

void gf_ExecuteWarhawkMissileBarragePattern (int lp_index) {
    auto_gf_ExecuteWarhawkMissileBarragePattern_lp_index = lp_index;

    if (auto_gf_ExecuteWarhawkMissileBarragePattern_Trigger == null) {
        auto_gf_ExecuteWarhawkMissileBarragePattern_Trigger = TriggerCreate("auto_gf_ExecuteWarhawkMissileBarragePattern_TriggerFunc");
    }

    TriggerExecute(auto_gf_ExecuteWarhawkMissileBarragePattern_Trigger, false, false);
}

bool auto_gf_ExecuteWarhawkMissileBarragePattern_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_ExecuteWarhawkMissileBarragePattern_lp_index;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto65D75D4C_ae = 12;
    const int auto65D75D4C_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_warhawk) == false)) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto65D75D4C_ai >= 0 && lv_i <= auto65D75D4C_ae) || (auto65D75D4C_ai < 0 && lv_i >= auto65D75D4C_ae) ) ; lv_i += auto65D75D4C_ai ) {
        if ((RegionFromName(("Missile Barrage " + IntToString(lp_index) + "-" + IntToString(lv_i))) != null)) {
            UnitIssueOrder(gv_warhawk, OrderTargetingPoint(AbilityCommand("SkyTankMissileBarrage", 0), RegionGetCenter(RegionFromName(("Missile Barrage " + IntToString(lp_index) + "-" + IntToString(lv_i))))), c_orderQueueAddToFront);
            if ((lp_index == 8)) {
                Wait(0.1, c_timeAI);
            }
            else {
                Wait(0.2, c_timeAI);
            }
            if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(gv_warhawk) == false))) {
                return true;
            }

        }
        else {
            break;
        }
    }
    Wait(0.5, c_timeAI);
    libNtve_gf_SendActorMessageToUnit(gv_warhawk, "Signal MissileModeExit");
    return true;
}

bool gf_NovaisinBarragePatternRegion (int lp_index) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto1FAD3CF4_ae = 6;
    const int auto1FAD3CF4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_artanis) == false)) {
        return false;
    }

    lv_i = 1;
    for ( ; ( (auto1FAD3CF4_ai >= 0 && lv_i <= auto1FAD3CF4_ae) || (auto1FAD3CF4_ai < 0 && lv_i >= auto1FAD3CF4_ae) ) ; lv_i += auto1FAD3CF4_ai ) {
        if ((RegionFromName(("Missile Barrage " + IntToString(lp_index) + "-" + IntToString(lv_i))) != null)) {
            if ((libNtve_gf_UnitInRegion(gv_artanis, RegionFromName(("Missile Barrage " + IntToString(lp_index) + "-" + IntToString(lv_i)))) == true)) {
                return true;
            }

        }

    }
    return false;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_InitializeNovaMission("Nova01");
    TriggerExecute(gt_Init01Technology, true, false);
    libNovC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNovC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNCMI_gf_EnableDisableHeroReviveSystem(false, gv_pLAYER_01_USER);
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotWeapon");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotGadget");
    UnitAbilityShow(gv_artanis, "HeroNuclearStrike", false);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaSilentkill", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "DOM", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "PunisherGrenades", 1);
    CatalogFieldValueSet(c_gameCatalogUnit, "Ghost", "StationaryTurningRate", gv_pLAYER_02_DOMINION, "200");
    CatalogFieldValueSet(c_gameCatalogUnit, "Ghost", "TurningRate", gv_pLAYER_02_DOMINION, "200");
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "Dominion", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NovaVoice1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Ally);
    PlayerSetAlliance(gv_pLAYER_01_USER, c_allianceIdVision, gv_pLAYER_02_DOMINION2, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Neutral);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateFoodIgnored, true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "DOM", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "TerranInfantryArmorsLevel1", 1);
    libNCMI_gf_NM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoFECF5F7A_g;
    int autoFECF5F7A_u;
    unit autoFECF5F7A_var;
    unitgroup autoB937CDEF_g;
    int autoB937CDEF_u;
    unit autoB937CDEF_var;
    unitgroup autoFE8D3DF0_g;
    int autoFE8D3DF0_u;
    unit autoFE8D3DF0_var;
    unitgroup auto357D31E5_g;
    int auto357D31E5_u;
    unit auto357D31E5_var;
    string auto27C7F5AD_val;
    unitgroup auto37E2568F_g;
    int auto37E2568F_u;
    unit auto37E2568F_var;
    unitgroup autoDA3CD45F_g;
    int autoDA3CD45F_u;
    unit autoDA3CD45F_var;
    unitgroup autoAC3A7BB6_g;
    int autoAC3A7BB6_u;
    unit autoAC3A7BB6_var;
    unitgroup auto8FA98C48_g;
    int auto8FA98C48_u;
    unit auto8FA98C48_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1380), true);
    libNCMI_gf_SetNovaHeroUnit(gv_artanis);
    libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup(gv_artanis);
    libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup(UnitFromId(2030));
    libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup(UnitFromId(1089));
    libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup(UnitFromId(1147));
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(6), gv_pLAYER_02_DOMINION);
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(6), UnitFromId(128), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitFromId(128)), UnitGetFacing(UnitFromId(128))));
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(23), gv_pLAYER_02_DOMINION);
    autoFECF5F7A_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(23), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFECF5F7A_u = UnitGroupCount(autoFECF5F7A_g, c_unitCountAll);
    for (;; autoFECF5F7A_u -= 1) {
        autoFECF5F7A_var = UnitGroupUnitFromEnd(autoFECF5F7A_g, autoFECF5F7A_u);
        if (autoFECF5F7A_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(23), autoFECF5F7A_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoFECF5F7A_var), UnitGetFacing(autoFECF5F7A_var)));
    }
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(81), gv_pLAYER_02_DOMINION);
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(81), UnitFromId(2059), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitFromId(2059)), UnitGetFacing(UnitFromId(2059))));
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(82), gv_pLAYER_02_DOMINION);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(172), gv_pLAYER_02_DOMINION);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(78), gv_pLAYER_02_DOMINION);
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(28), gv_pLAYER_02_DOMINION);
    autoB937CDEF_g = UnitGroup("Ghost", gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB937CDEF_u = UnitGroupCount(autoB937CDEF_g, c_unitCountAll);
    for (;; autoB937CDEF_u -= 1) {
        autoB937CDEF_var = UnitGroupUnitFromEnd(autoB937CDEF_g, autoB937CDEF_u);
        if (autoB937CDEF_var == null) { break; }
        UnitSetPropertyFixed(autoB937CDEF_var, c_unitPropLifeMax, 400.0);
        UnitSetPropertyFixed(autoB937CDEF_var, c_unitPropLifePercent, 100.0);
        UnitSetState(autoB937CDEF_var, c_unitStateTargetable, false);
        UnitBehaviorAdd(autoB937CDEF_var, "PermanentlyCloaked", autoB937CDEF_var, 1);
        UnitSetPropertyFixed(autoB937CDEF_var, c_unitPropEnergyPercent, 100.0);
        AISetUnitScriptControlled(autoB937CDEF_var, true);
    }
    autoFE8D3DF0_g = UnitGroup("GhostAlternate", gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFE8D3DF0_u = UnitGroupCount(autoFE8D3DF0_g, c_unitCountAll);
    for (;; autoFE8D3DF0_u -= 1) {
        autoFE8D3DF0_var = UnitGroupUnitFromEnd(autoFE8D3DF0_g, autoFE8D3DF0_u);
        if (autoFE8D3DF0_var == null) { break; }
        UnitSetPropertyFixed(autoFE8D3DF0_var, c_unitPropLifeMax, 400.0);
        UnitSetPropertyFixed(autoFE8D3DF0_var, c_unitPropLifePercent, 100.0);
        UnitSetState(autoFE8D3DF0_var, c_unitStateTargetable, false);
        UnitBehaviorAdd(autoFE8D3DF0_var, "PermanentlyCloaked", autoFE8D3DF0_var, 1);
        UnitSetPropertyFixed(autoFE8D3DF0_var, c_unitPropEnergyPercent, 100.0);
        AISetUnitScriptControlled(autoFE8D3DF0_var, true);
    }
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(2030), StringExternal("Param/Value/C405C803"), StringExternal("Param/Value/92039262"), null);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1089), StringExternal("Param/Value/6691626D"), StringExternal("Param/Value/98BB3B1B"), null);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1147), StringExternal("Param/Value/F222D370"), StringExternal("Param/Value/60BB5C81"), null);
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1088), null, StringExternal("Param/Value/1078E0F5"), null);
    auto357D31E5_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto357D31E5_u = UnitGroupCount(auto357D31E5_g, c_unitCountAll);
    for (;; auto357D31E5_u -= 1) {
        auto357D31E5_var = UnitGroupUnitFromEnd(auto357D31E5_g, auto357D31E5_u);
        if (auto357D31E5_var == null) { break; }
        auto27C7F5AD_val = UnitGetType(auto357D31E5_var);
        if (auto27C7F5AD_val == "GhostDetectorCone") {
            libNCMI_gf_SetUnitInfoTextCampaign(auto357D31E5_var, null, StringExternal("Param/Value/89C7D388"), null);
            UnitSetPropertyFixed(auto357D31E5_var, c_unitPropEnergyPercent, 100.0);
            AISetUnitScriptControlled(auto357D31E5_var, true);
            UnitSetState(auto357D31E5_var, c_unitStateFidget, false);
        }
        else if (auto27C7F5AD_val == "GhostAlternateDetectorCone") {
            libNCMI_gf_SetUnitInfoTextCampaign(auto357D31E5_var, null, StringExternal("Param/Value/5BF5C64D"), null);
            UnitSetPropertyFixed(auto357D31E5_var, c_unitPropEnergyPercent, 100.0);
            AISetUnitScriptControlled(auto357D31E5_var, true);
            UnitSetState(auto357D31E5_var, c_unitStateFidget, false);
        }
        else if (auto27C7F5AD_val == "Separatist") {
            libNCMI_gf_SetUnitInfoTextCampaign(auto357D31E5_var, null, StringExternal("Param/Value/EE90A735"), null);
        }
        else if (auto27C7F5AD_val == "Reaper") {
            libNCMI_gf_SetUnitInfoTextCampaign(auto357D31E5_var, null, StringExternal("Param/Value/56DC25D2"), null);
        }
        else if (auto27C7F5AD_val == "Marauder") {
            libNCMI_gf_SetUnitInfoTextCampaign(auto357D31E5_var, null, StringExternal("Param/Value/7AB61E9B"), null);
        }
        else if (auto27C7F5AD_val == "SCV") {
            libNCMI_gf_SetUnitInfoTextCampaign(auto357D31E5_var, null, StringExternal("Param/Value/D8AD5C30"), null);
        }
        else if (auto27C7F5AD_val == "MissileTurret") {
            libNCMI_gf_SetUnitInfoTextCampaign(auto357D31E5_var, null, StringExternal("Param/Value/E6CB2AFA"), null);
        }
        else if (auto27C7F5AD_val == "GunTurret") {
            UnitSetState(auto357D31E5_var, c_unitStateInvulnerable, true);
            UnitSetState(auto357D31E5_var, c_unitStateTargetable, false);
            UnitSetState(auto357D31E5_var, c_unitStateHighlightable, false);
            UnitSetState(auto357D31E5_var, c_unitStateStatusBar, false);
            libNCMI_gf_SetUnitInfoTextCampaign(auto357D31E5_var, null, StringExternal("Param/Value/A765A166"), null);
        }
        else {
        }
    }
    auto37E2568F_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto37E2568F_u = UnitGroupCount(auto37E2568F_g, c_unitCountAll);
    for (;; auto37E2568F_u -= 1) {
        auto37E2568F_var = UnitGroupUnitFromEnd(auto37E2568F_g, auto37E2568F_u);
        if (auto37E2568F_var == null) { break; }
        if (((UnitGetType(auto37E2568F_var) == "FlameTurretFCW") || (UnitGetType(auto37E2568F_var) == "FlameTurretFCCW") || (UnitGetType(auto37E2568F_var) == "FlameTurretSCW") || (UnitGetType(auto37E2568F_var) == "FlameTurretSCCW"))) {
            UnitGroupAdd(gv_flameTurretGroup, auto37E2568F_var);
            UnitSetState(auto37E2568F_var, c_unitStateInvulnerable, true);
            UnitSetState(auto37E2568F_var, c_unitStateTargetable, false);
            UnitSetState(auto37E2568F_var, c_unitStateHighlightable, false);
            UnitSetState(auto37E2568F_var, c_unitStateStatusBar, false);
            libNCMI_gf_SetUnitInfoTextCampaign(auto37E2568F_var, null, StringExternal("Param/Value/7CC31B50"), null);
        }

    }
    libNCMI_gf_SetUnitInfoTextCampaignDetailed(gv_riflePickup, StringExternal("Param/Value/5AF1C45A"), StringExternal("Param/Value/C4DA8745"), null);
    libNCMI_gf_SetUnitInfoTextCampaignDetailed(gv_grenadePickup, null, StringExternal("Param/Value/2614D9DA"), null);
    autoDA3CD45F_g = UnitGroup("DOMHealthDispenser", gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA3CD45F_u = UnitGroupCount(autoDA3CD45F_g, c_unitCountAll);
    for (;; autoDA3CD45F_u -= 1) {
        autoDA3CD45F_var = UnitGroupUnitFromEnd(autoDA3CD45F_g, autoDA3CD45F_u);
        if (autoDA3CD45F_var == null) { break; }
        UnitSetState(autoDA3CD45F_var, c_unitStateHighlightable, false);
        UnitSetState(autoDA3CD45F_var, c_unitStateHighlighted, false);
        UnitSetState(autoDA3CD45F_var, c_unitStateTooltipable, false);
        UnitSetState(autoDA3CD45F_var, c_unitStateTargetable, false);
        UnitSetState(autoDA3CD45F_var, c_unitStateStatusBar, false);
        UnitSetState(autoDA3CD45F_var, c_unitStateSelectable, false);
        UnitSetState(autoDA3CD45F_var, c_unitStateCursorable, false);
        UnitSetState(autoDA3CD45F_var, c_unitStateInvulnerable, true);
    }
    autoAC3A7BB6_g = UnitGroup("VultureDOMParked", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAC3A7BB6_u = UnitGroupCount(autoAC3A7BB6_g, c_unitCountAll);
    for (;; autoAC3A7BB6_u -= 1) {
        autoAC3A7BB6_var = UnitGroupUnitFromEnd(autoAC3A7BB6_g, autoAC3A7BB6_u);
        if (autoAC3A7BB6_var == null) { break; }
        UnitIssueOrder(autoAC3A7BB6_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(autoAC3A7BB6_var, true);
        UnitSetState(autoAC3A7BB6_var, c_unitStateSelectable, false);
        UnitSetState(autoAC3A7BB6_var, c_unitStateStatusBar, false);
        UnitSetState(autoAC3A7BB6_var, c_unitStateTargetable, false);
        UnitSetState(autoAC3A7BB6_var, c_unitStateTooltipable, false);
    }
    libNCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1200), StringExternal("Param/Value/F8BC641E"), StringExternal("Param/Value/5CC7FADE"), null);
    UnitRemove(UnitFromId(54));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(817), "SetOpacity");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(819), "SetOpacity");
    UnitSetTeamColorIndex(UnitFromId(1141), 1);
    UnitSetTeamColorIndex(UnitFromId(2286), 14);
    auto8FA98C48_g = UnitGroup("VultureDOMParked", c_playerAny, RegionFromId(85), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8FA98C48_u = UnitGroupCount(auto8FA98C48_g, c_unitCountAll);
    for (;; auto8FA98C48_u -= 1) {
        auto8FA98C48_var = UnitGroupUnitFromEnd(auto8FA98C48_g, auto8FA98C48_u);
        if (auto8FA98C48_var == null) { break; }
        UnitSetState(auto8FA98C48_var, c_unitStateFidget, false);
        libNtve_gf_MakeUnitInvulnerable(auto8FA98C48_var, true);
        UnitSetTeamColorIndex(auto8FA98C48_var, 14);
        UnitSetState(auto8FA98C48_var, c_unitStateHighlightable, false);
        UnitSetState(auto8FA98C48_var, c_unitStateTargetable, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "nDLC_Music_Nova01_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    RegionPlayableMapSet(RegionFromId(120));
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(3), RegionFromId(3), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(1), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(22), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(27), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(38), RegionFromId(38), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(42), RegionFromId(42), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(52), RegionFromId(53), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(57), RegionFromId(58), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(60), RegionFromId(60), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(70), RegionFromId(70), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(68), RegionFromId(71), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(79), RegionFromId(79), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(101), RegionFromId(101), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(69), RegionFromId(69), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(102), RegionFromId(102), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(87), RegionFromId(87), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(93), RegionFromId(93), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(88), RegionFromId(74), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(90), RegionFromId(90), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(91), RegionFromId(75), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(127), RegionFromId(128), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(109), RegionFromId(109), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(110), RegionFromId(110), gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaIndoorSounds", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_warhawkMaxLife = libNtve_gf_DifficultyValueFixed(3000.0, 3000.0, 4200.0, 5400.0);
    gv_vultureMedKitCooldown = libLotv_gf_DifficultyValueFixed2(12.0, 12.0, 18.0, 24.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "SkyTankMissileBarrageDamage", "Amount", gv_pLAYER_02_DOMINION, "75");
        CatalogFieldValueSet(c_gameCatalogEffect, "SkyTankLaserBeamDamage", "Amount", gv_pLAYER_02_DOMINION, "125");
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "SkyTankMissileBarrageDamage", "Amount", gv_pLAYER_02_DOMINION, "100");
        CatalogFieldValueSet(c_gameCatalogEffect, "SkyTankLaserBeamDamage", "Amount", gv_pLAYER_02_DOMINION, "150");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_AddMissionTipCampaign("Break Neck");
    libNCMI_gf_AddMissionTipCampaign("Cloak");
    libNCMI_gf_AddMissionTipCampaign("EMP Decloak");
    libComC_gf_AddUnitTypeToUnitHelpPanel("Separatist", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Marauder", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Reaper", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Cyclone", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("GunTurret", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("FlameTurretSCW", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ghost", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5CDEDCA8_g;
    int auto5CDEDCA8_u;
    unit auto5CDEDCA8_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((gv_objective_GrenadesComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGameQ);
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    auto5CDEDCA8_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CDEDCA8_u = UnitGroupCount(auto5CDEDCA8_g, c_unitCountAll);
    for (;; auto5CDEDCA8_u -= 1) {
        auto5CDEDCA8_var = UnitGroupUnitFromEnd(auto5CDEDCA8_g, auto5CDEDCA8_u);
        if (auto5CDEDCA8_var == null) { break; }
        UnitRemove(auto5CDEDCA8_var);
    }
    libNtve_gf_KillModel(gv_breakNeckReticle);
    TextTagDestroy(gv_breakNeckTextTag);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaSilentkill", 0), false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "NovaSilentkill", 0);
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPWeaponItem1");
    PingDestroy(gv_riflePing);
    libNtve_gf_KillModel(gv_snipeReticle);
    TextTagDestroy(gv_snipeTextTag);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaWeaponCanisterRifleSnipe", 0), false);
    TriggerExecute(gt_ObjectiveRifleComplete, true, false);
    TriggerEnable(gt_ObtainRifleQ, false);
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPGadgetItem1");
    PingDestroy(gv_pulseGrenadePing);
    libNtve_gf_KillModel(gv_pulseGrenadeReticle);
    TextTagDestroy(gv_pulseGrenadeTextTag);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaGadgetPulseGrenades", 0), false);
    gv_pulseGrenadesTaught = true;
    TriggerExecute(gt_ObjectiveGrenadesComplete, true, false);
    TriggerEnable(gt_ResearchBayDefenseQ, false);
    TriggerEnable(gt_ObtainGrenadesQ, false);
    TriggerEnable(gt_ResearchBayClearQ, false);
    UnitIssueOrder(UnitFromId(682), Order(AbilityCommand("GunTurretBurrow", 0)), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(52), 2.0, false);
    UnitIssueOrder(gv_artanis, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_artanis, PointFromId(787), false);
    UnitSetFacing(gv_artanis, 315.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(787), 0.0, -1, 10.0, false);
    UnitIssueOrder(UnitFromId(389), Order(AbilityCommand("MoebiusLabDoorsWideRight", 0)), c_orderQueueReplace);
    ObjectiveShow(gv_objectiveDestroyZergBase, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveDestroyZergBase5, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveEscapeCreate, true, false);
    if ((gv_objective_EscapeComplete == false) && (gv_escapePing == c_invalidPingId)) {
        libNCMI_gf_CreateObjectivePing(true, PointFromId(675), StringExternal("Param/Value/E152CDD4"));
        gv_escapePing = PingLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((gv_objective_EscapeComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DebugStage2, false);
    gv_currentSection = 2;
    gv_rescuedGhosts[3] = UnitFromId(1147);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage3_Init () {
    gt_DebugStage3 = TriggerCreate("gt_DebugStage3_Func");
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "S3", true);
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "Stage3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Loses DetectorConeDetected - EMPed Q
//--------------------------------------------------------------------------------------------------
bool gt_NovaLosesDetectorConeDetectedEMPedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;
    unit lv_detectingUnit;

    // Automatic Variable Declarations
    fixed autoA8B85268_at;
    int auto91FF3ACE_val;
    int auto19F3BBD7_val;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_detectingUnit = UnitBehaviorEffectUnit(gv_artanis, "DetectorConeDetected", c_effectUnitCaster, 0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoA8B85268_at = 0;
    while (!((UnitHasBehavior2(gv_artanis, "DetectorConeDetected") == false)) && autoA8B85268_at <= 3.0) {
        Wait(0.0625, c_timeAI);
        autoA8B85268_at = autoA8B85268_at + 0.0625;
    }
    TimerStart(lv_talkTimer, 2.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lv_detectingUnit) == false))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if ((UnitHasBehavior2(gv_artanis, "DOMEMPDecloak") == true)) {
        if (((UnitGetType(lv_detectingUnit) == "Ghost") || (UnitGetType(lv_detectingUnit) == "GhostDetectorCone"))) {
            auto19F3BBD7_val = RandomInt(1, 2);
            if (auto19F3BBD7_val == 1) {
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
                libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova01|Line00087", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            }
            else if (auto19F3BBD7_val == 2) {
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
                libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova01|Line00088", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            }
            else {
            }
        }
        else {
            auto91FF3ACE_val = RandomInt(1, 2);
            if (auto91FF3ACE_val == 1) {
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
                libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova01|Line00089", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            }
            else if (auto91FF3ACE_val == 2) {
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
                libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova01|Line00090", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            }
            else {
            }
        }
    }

    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaLosesDetectorConeDetectedEMPedQ_Init () {
    gt_NovaLosesDetectorConeDetectedEMPedQ = TriggerCreate("gt_NovaLosesDetectorConeDetectedEMPedQ_Func");
    TriggerAddEventUnitBehaviorChange(gt_NovaLosesDetectorConeDetectedEMPedQ, UnitRefFromVariable("gv_artanis"), "DetectorConeDetected", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Loses DetectorConeDetected - Still Cloaked Q
//--------------------------------------------------------------------------------------------------
bool gt_NovaLosesDetectorConeDetectedStillCloakedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;
    unit lv_detectingUnit;

    // Automatic Variable Declarations
    fixed autoCD30929C_at;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_detectingUnit = UnitBehaviorEffectUnit(gv_artanis, "DetectorConeDetected", c_effectUnitCaster, 0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoCD30929C_at = 0;
    while (!((UnitHasBehavior2(gv_artanis, "DetectorConeDetected") == false)) && autoCD30929C_at <= 3.0) {
        Wait(0.0625, c_timeAI);
        autoCD30929C_at = autoCD30929C_at + 0.0625;
    }
    Wait(0.5, c_timeAI);
    TimerStart(lv_talkTimer, 2.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lv_detectingUnit) == false) || (UnitHasBehavior2(libNCMI_gf_NovaHeroUnit(), "DOMEMPDecloak") == true))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if (((UnitGetType(lv_detectingUnit) == "Ghost") || (UnitGetType(lv_detectingUnit) == "GhostDetectorCone"))) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova01|Line00122", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (((UnitGetType(lv_detectingUnit) == "GhostAlternate") || (UnitGetType(lv_detectingUnit) == "GhostAlternateDetectorCone"))) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova01|Line00123", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(15.0, c_timeAI);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaLosesDetectorConeDetectedStillCloakedQ_Init () {
    gt_NovaLosesDetectorConeDetectedStillCloakedQ = TriggerCreate("gt_NovaLosesDetectorConeDetectedStillCloakedQ_Func");
    TriggerAddEventUnitBehaviorChange(gt_NovaLosesDetectorConeDetectedStillCloakedQ, UnitRefFromVariable("gv_artanis"), "DetectorConeDetected", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Re-Cloaks Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_NovaReCloaksTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;
    unitgroup lv_nearbyEnemies;
    unit lv_speaker;
    unit lv_caster;

    // Automatic Variable Declarations
    fixed autoB2A23D62_at;
    int autoF85D0F2C_val;
    int auto4B8D128A_val;
    int auto1EC6DAD1_val;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_nearbyEnemies = UnitGroupEmpty();
    lv_caster = UnitBehaviorEffectUnit(gv_artanis, "DOMEMPDecloak", c_effectUnitCaster, 0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB2A23D62_at = 0;
    while (!((UnitHasBehavior2(gv_artanis, "DOMEMPDecloak") == false)) && autoB2A23D62_at <= 15.0) {
        Wait(0.0625, c_timeAI);
        autoB2A23D62_at = autoB2A23D62_at + 0.0625;
    }
    TimerStart(lv_talkTimer, 1.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_artanis) == false) || (UnitIsAlive(lv_caster) == false) || (libNtve_gf_UnitIsVisibleToPlayer(gv_artanis, gv_pLAYER_02_DOMINION) == true))) {
        return true;
    }

    lv_nearbyEnemies = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_artanis), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
        lv_speaker = UnitGroupClosestToPoint(lv_nearbyEnemies, UnitGetPosition(gv_artanis));
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (((UnitGetType(lv_speaker) == "Ghost") || (UnitGetType(lv_speaker) == "GhostDetectorCone"))) {
            autoF85D0F2C_val = RandomInt(1, 2);
            if (autoF85D0F2C_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00114", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (autoF85D0F2C_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00115", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else if (((UnitGetType(lv_speaker) == "GhostAlternate") || (UnitGetType(lv_speaker) == "GhostAlternateDetectorCone"))) {
            auto4B8D128A_val = RandomInt(1, 2);
            if (auto4B8D128A_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00116", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto4B8D128A_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00117", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else if (true) {
            auto1EC6DAD1_val = RandomInt(1, 4);
            if (auto1EC6DAD1_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00118", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto1EC6DAD1_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00119", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto1EC6DAD1_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00120", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto1EC6DAD1_val == 4) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00121", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaReCloaksTransmissionQ_Init () {
    gt_NovaReCloaksTransmissionQ = TriggerCreate("gt_NovaReCloaksTransmissionQ_Func");
    TriggerAddEventUnitBehaviorChange(gt_NovaReCloaksTransmissionQ, UnitRefFromVariable("gv_artanis"), "DOMEMPDecloak", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healerbot Recharging
//--------------------------------------------------------------------------------------------------
bool gt_HealerbotRecharging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DOMHealthDispenser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnit(SoundLink("Protoss_PowerDownSmall", -1), PlayerGroupAll(), EventUnit(), 8.0, 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/2C94DA3D"), 22, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealerbotRecharging_Init () {
    gt_HealerbotRecharging = TriggerCreate("gt_HealerbotRecharging_Func");
    TriggerEnable(gt_HealerbotRecharging, false);
    TriggerAddEventUnitAbility(gt_HealerbotRecharging, null, AbilityCommand("HealthDispenser", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healerbot Ready
//--------------------------------------------------------------------------------------------------
bool gt_HealerbotReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DOMHealthDispenser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnit(SoundLink("ScavengingSystemsHealSound", -1), PlayerGroupAll(), EventUnit(), 8.0, 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/87FDA9C8"), 22, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealerbotReady_Init () {
    gt_HealerbotReady = TriggerCreate("gt_HealerbotReady_Func");
    TriggerEnable(gt_HealerbotReady, false);
    TriggerAddEventUnitAbility(gt_HealerbotReady, null, AbilityCommand("HealthDispenser", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healerbot Mouseover Tip
//--------------------------------------------------------------------------------------------------
bool gt_HealerbotMouseoverTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HealthDispenserPickup"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetInfoTip(EventUnit(), UnitTypeGetName(UnitGetType(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealerbotMouseoverTip_Init () {
    gt_HealerbotMouseoverTip = TriggerCreate("gt_HealerbotMouseoverTip_Func");
    TriggerAddEventUnitRegion(gt_HealerbotMouseoverTip, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Picks Up Restoration Charge
//--------------------------------------------------------------------------------------------------
bool gt_NovaPicksUpRestorationCharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnitImpact() == gv_artanis))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((EventPlayerEffectUsed() == "HealthDispenserLife500")) {
        SoundPlayOnUnitForPlayer(SoundLink("HeroNovaMP1_Health_Pickup", -1), c_maxPlayers, PlayerGroupAll(), gv_artanis, 0.0, 100.0, 0.0);
    }
    else if ((EventPlayerEffectUsed() == "HealthDispenserEnergy500")) {
        SoundPlayOnUnitForPlayer(SoundLink("HeroNovaMP1_Energy_Pickup", -1), c_maxPlayers, PlayerGroupAll(), gv_artanis, 0.0, 100.0, 0.0);
    }
    else if (true) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaPicksUpRestorationCharge_Init () {
    gt_NovaPicksUpRestorationCharge = TriggerCreate("gt_NovaPicksUpRestorationCharge_Func");
    TriggerAddEventPlayerEffectUsed(gt_NovaPicksUpRestorationCharge, c_playerAny, "HealthDispenserLife500");
    TriggerAddEventPlayerEffectUsed(gt_NovaPicksUpRestorationCharge, c_playerAny, "HealthDispenserEnergy500");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_anniversaryAchievementMissionTimer, 300.0, false, c_timeGame);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova01_Main", c_soundtrackCueAny, c_soundtrackIndexAny);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_ResearchBayDefenders, true, false);
    TriggerExecute(gt_EscapeGunTurretHallDefenders, true, false);
    TriggerExecute(gt_EscapeFlameTurrets, true, false);
    TriggerExecute(gt_EscapeRescuedGhostAI, true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(2), true, false);
    libNCUI_gf_SetHeroPanelUnit(1, gv_artanis);
    UnitSelect(gv_artanis, gv_pLAYER_01_USER, true);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(6), libNCMI_ge_StealthAIDefendRegionState_Active);
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00054", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    SoundPlayForPlayer(SoundLink("Ping", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(127), 5.0, Color(0.00, 100.00, 0.00));
    libNCMI_gf_CreateObjectivePing(true, PointFromId(127), StringExternal("Param/Value/B446D391"));
    gv_riflePing = PingLastCreated();
    TriggerExecute(gt_ObjectiveRifleCreate, true, false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, true);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_currentSection == 1) && (UnitIsAlive(UnitFromId(128)) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00002", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((gv_currentSection == 1) && (UnitIsAlive(UnitFromId(128)) == true)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00055", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            if ((gv_currentSection == 1) && (UnitIsAlive(UnitFromId(128)) == true)) {
                libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00057", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }

        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_FirstRoomNovaStoneQ, true, false);
    Wait(35.0, c_timeGame);
    TriggerExecute(gt_FirstRoomReptileCrateQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Vulture Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameVultureQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_02_DOMINION2, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Neutral);
    UnitSelect(gv_artanis, gv_pLAYER_01_USER, true);
    PlayerSetAlliance(gv_pLAYER_01_USER, c_allianceIdPushable, 0, true);
    TriggerEnable(gt_RoadCollisionDamage, true);
    TriggerExecute(gt_RoadSpawns1, true, false);
    if ((UnitIsAlive(gv_stoneVulture) == true)) {
        UnitGroupAdd(gv_roadUnits, gv_stoneVulture);
        UnitBehaviorAddPlayer(gv_stoneVulture, "StoneDontDie", gv_pLAYER_02_DOMINION2, 1);
        TriggerEnable(gt_StonesVultureDestroyed, true);
        gf_ActivateFriendlyGhostRoadAI(gv_stoneVulture);
    }

    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (TimerGetElapsed(gv_anniversaryAchievementMissionTimer) < 300.0)) {
        libComC_gf_CampaignAwardAchievement("Anniversary_Nova01", gv_pLAYER_01_USER);
    }

    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3E6BE0ED"));
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_objective_SpaceportComplete == false) && (gv_currentSection == 2)) {
        TriggerExecute(gt_ObjectiveSpaceportCreate, true, false);
        Wait(2.0, c_timeReal);
    }

    if ((gv_objective_SpaceportComplete == false) && (gv_currentSection == 2)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00040", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    TriggerExecute(gt_VultureDistanceCounter, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameVultureQ_Init () {
    gt_StartGameVultureQ = TriggerCreate("gt_StartGameVultureQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanup Section 1
//--------------------------------------------------------------------------------------------------
bool gt_CleanupSection1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto66316B4A_g;
    int auto66316B4A_u;
    unit auto66316B4A_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_anniversaryAchievementMissionTimer, true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    TriggerEnable(gt_CatwalkTrooperWhatsThatSoundQ, false);
    TriggerEnable(gt_TrooperFindsNovaQ, false);
    TriggerEnable(gt_SnipeHallReaperFindsNovaQ, false);
    TriggerEnable(gt_NovaLosesDetectorConeDetectedEMPedQ, false);
    TriggerEnable(gt_NovaLosesDetectorConeDetectedStillCloakedQ, false);
    TriggerEnable(gt_NovaReCloaksTransmissionQ, false);
    TriggerEnable(gt_SendTrooperPatrol, false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "NovaSilentkill", 0);
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPWeaponItem1");
    PingDestroy(gv_riflePing);
    libNtve_gf_KillModel(gv_snipeReticle);
    TextTagDestroy(gv_snipeTextTag);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaWeaponCanisterRifleSnipe", 0), false);
    TriggerExecute(gt_ObjectiveRifleComplete, true, false);
    ObjectiveShow(gv_objectiveDestroyZergBase, PlayerGroupAll(), false);
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPGadgetItem1");
    PingDestroy(gv_pulseGrenadePing);
    libNtve_gf_KillModel(gv_pulseGrenadeReticle);
    TextTagDestroy(gv_pulseGrenadeTextTag);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaGadgetPulseGrenades", 0), false);
    gv_pulseGrenadesTaught = true;
    TriggerExecute(gt_ObjectiveGrenadesComplete, true, false);
    ObjectiveShow(gv_objectiveDestroyZergBase5, PlayerGroupAll(), false);
    PingDestroy(gv_escapePing);
    PingDestroy(gv_friendlyGhostPings[1]);
    PingDestroy(gv_friendlyGhostPings[2]);
    PingDestroy(gv_friendlyGhostPings[3]);
    TriggerExecute(gt_ObjectiveEscapeComplete, true, false);
    ObjectiveShow(gv_objectiveDestroyZergBase2, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveRescueStalkers, PlayerGroupAll(), false);
    if ((UnitIsAlive(gv_rescuedGhosts[1]) == true) && (gv_rescuedGhosts[1] == UnitFromId(2030))) {
        gv_rescuedUnitsAlive[1] = true;
    }

    if ((UnitIsAlive(gv_rescuedGhosts[2]) == true) && (gv_rescuedGhosts[2] == UnitFromId(1089))) {
        gv_rescuedUnitsAlive[2] = true;
    }

    if ((UnitIsAlive(gv_rescuedGhosts[3]) == true) && (gv_rescuedGhosts[3] == UnitFromId(1147))) {
        gv_rescuedUnitsAlive[3] = true;
    }

    auto66316B4A_g = UnitGroup(null, c_playerAny, RegionFromId(120), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto66316B4A_u = UnitGroupCount(auto66316B4A_g, c_unitCountAll);
    for (;; auto66316B4A_u -= 1) {
        auto66316B4A_var = UnitGroupUnitFromEnd(auto66316B4A_g, auto66316B4A_u);
        if (auto66316B4A_var == null) { break; }
        if ((UnitGetType(auto66316B4A_var) != "VultureDOMParked")) {
            UnitRemove(auto66316B4A_var);
        }

    }
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(120), "DOM_Fire_Large_Long");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(120), "DOM_Fire_Large");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleanupSection1_Init () {
    gt_CleanupSection1 = TriggerCreate("gt_CleanupSection1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Room - Teach Break Neck
//--------------------------------------------------------------------------------------------------
bool gt_FirstRoomTeachBreakNeck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranEnemy, libNCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/E50B2E9B"), UnitFromId(128), "Ref_Center");
    gv_breakNeckReticle = libNtve_gf_ActorLastCreated();
    gv_breakNeckTextTag = TextTagLastCreated();
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaSilentkill", 0), true);
    TriggerEnable(gt_FirstRoomTeachBreakNeckCleanup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstRoomTeachBreakNeck_Init () {
    gt_FirstRoomTeachBreakNeck = TriggerCreate("gt_FirstRoomTeachBreakNeck_Func");
    TriggerAddEventUnitRegion(gt_FirstRoomTeachBreakNeck, UnitRefFromVariable("gv_artanis"), RegionFromId(62), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Room - Teach Break Neck Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_FirstRoomTeachBreakNeckCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_breakNeckReticle);
    TextTagDestroy(gv_breakNeckTextTag);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaSilentkill", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstRoomTeachBreakNeckCleanup_Init () {
    gt_FirstRoomTeachBreakNeckCleanup = TriggerCreate("gt_FirstRoomTeachBreakNeckCleanup_Func");
    TriggerEnable(gt_FirstRoomTeachBreakNeckCleanup, false);
    TriggerAddEventUnitDied(gt_FirstRoomTeachBreakNeckCleanup, UnitRefFromUnit(UnitFromId(128)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Room - Nova & Stone Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstRoomNovaStoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(44)) == true) && (TriggerIsEnabled(gt_NovaEntersGhostMaze) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00129", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(44)) == true) && (TriggerIsEnabled(gt_NovaEntersGhostMaze) == true)) {
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00130", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            if ((libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(44)) == true) && (TriggerIsEnabled(gt_NovaEntersGhostMaze) == true)) {
                libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00131", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }

        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstRoomNovaStoneQ_Init () {
    gt_FirstRoomNovaStoneQ = TriggerCreate("gt_FirstRoomNovaStoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Room - Reptile Crate Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstRoomReptileCrateQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reptileCrateUnit;
    timer lv_transmissionTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reptileCrateUnit = UnitFromId(1380);
    lv_transmissionTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(lv_reptileCrateUnit) == true) && (libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(44)) == true)) {
        UnitIssueOrder(UnitFromId(1380), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2315)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        TimerStart(lv_transmissionTimer, 2.0, false, c_timeGame);
        TriggerQueueEnter();
        if (((UnitIsAlive(UnitFromId(128)) == false) || (UnitIsAlive(lv_reptileCrateUnit) == false) || (gv_currentSection != 1) || (TimerGetRemaining(lv_transmissionTimer) == 0.0))) {
            return true;
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Event_BoxAlert", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(128), "Mission_Nova01|Line00122", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        Wait(2.0, c_timeGame);
        if (((UnitIsAlive(lv_reptileCrateUnit) == true))) {
            UnitIssueOrder(UnitFromId(1380), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1970)), c_orderQueueReplace);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstRoomReptileCrateQ_Init () {
    gt_FirstRoomReptileCrateQ = TriggerCreate("gt_FirstRoomReptileCrateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Enters Ghost Maze
//--------------------------------------------------------------------------------------------------
bool gt_NovaEntersGhostMaze_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FirstRoomTeachBreakNeck, false);
    TriggerExecute(gt_FirstRoomTeachBreakNeckCleanup, true, false);
    TriggerEnable(gt_FirstRoomNovaStoneQ, false);
    TriggerEnable(gt_FirstRoomReptileCrateQ, false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(23), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(2241), 225.0, 280.0, 4.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaEntersGhostMaze_Init () {
    gt_NovaEntersGhostMaze = TriggerCreate("gt_NovaEntersGhostMaze_Func");
    TriggerAddEventUnitRegion(gt_NovaEntersGhostMaze, UnitRefFromVariable("gv_artanis"), RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Catwalk Trooper - What's That Sound Q
//--------------------------------------------------------------------------------------------------
bool gt_CatwalkTrooperWhatsThatSoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1291)) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CatwalkTrooperPatrolLoop, true, false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(1291)) == true) && (UnitTestState(gv_artanis, c_unitStateCloaked) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(1291), "Mission_Nova01|Line00125", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CatwalkTrooperWhatsThatSoundQ_Init () {
    gt_CatwalkTrooperWhatsThatSoundQ = TriggerCreate("gt_CatwalkTrooperWhatsThatSoundQ_Func");
    TriggerAddEventUnitRegion(gt_CatwalkTrooperWhatsThatSoundQ, UnitRefFromVariable("gv_artanis"), RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Catwalk Trooper - Patrol Loop
//--------------------------------------------------------------------------------------------------
bool gt_CatwalkTrooperPatrolLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_patrolPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1291)) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patrolPoint = 1;
    while ((UnitIsAlive(UnitFromId(1291)) == true) && (gv_currentSection == 1) && (libNCMI_gf_GameIsOver() == false)) {
        if ((lv_patrolPoint == 2)) {
            lv_patrolPoint = 1;
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(23), UnitFromId(1291), PointFromId(1352));
        }
        else {
            lv_patrolPoint = 2;
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(23), UnitFromId(1291), PointFromId(2247));
        }
        Wait(6.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CatwalkTrooperPatrolLoop_Init () {
    gt_CatwalkTrooperPatrolLoop = TriggerCreate("gt_CatwalkTrooperPatrolLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back Way Guards - Hear Something Q
//--------------------------------------------------------------------------------------------------
bool gt_BackWayGuardsHearSomethingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(2240)) == true) && (UnitTestState(gv_artanis, c_unitStateCloaked) == true) && (TriggerIsEnabled(gt_BackWayGuardsStealthKill) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(2240), "Mission_Nova01|Line00080", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackWayGuardsHearSomethingQ_Init () {
    gt_BackWayGuardsHearSomethingQ = TriggerCreate("gt_BackWayGuardsHearSomethingQ_Func");
    TriggerAddEventUnitRegion(gt_BackWayGuardsHearSomethingQ, UnitRefFromVariable("gv_artanis"), RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back Way Guards - Stealth Kill
//--------------------------------------------------------------------------------------------------
bool gt_BackWayGuardsStealthKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_reactionGroup;
    point lv_reactionPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reactionGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitTestState(gv_artanis, c_unitStateCloaked) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_reactionGroup = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(47), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_reactionPoint = UnitGetPosition(EventUnit());
    libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_reactionGroup, lv_reactionPoint);
    Wait(libNCMI_gv_nM_StealthAI_UnitReactionTime, c_timeAI);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BackWayGuardsStealthKill_Init () {
    gt_BackWayGuardsStealthKill = TriggerCreate("gt_BackWayGuardsStealthKill_Func");
    TriggerAddEventUnitDied(gt_BackWayGuardsStealthKill, UnitRefFromUnit(UnitFromId(2240)));
    TriggerAddEventUnitDied(gt_BackWayGuardsStealthKill, UnitRefFromUnit(UnitFromId(2239)));
    TriggerAddEventUnitDied(gt_BackWayGuardsStealthKill, UnitRefFromUnit(UnitFromId(2246)));
    TriggerAddEventUnitDied(gt_BackWayGuardsStealthKill, UnitRefFromUnit(UnitFromId(2464)));
    TriggerAddEventUnitDied(gt_BackWayGuardsStealthKill, UnitRefFromUnit(UnitFromId(2467)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terminal Guards - Stay Sharp Q
//--------------------------------------------------------------------------------------------------
bool gt_TerminalGuardsStaySharpQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(1294)) == true) && (UnitTestState(gv_artanis, c_unitStateCloaked) == true) && (TriggerIsEnabled(gt_TerminalGuardsStealthKill) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(1294), "Mission_Nova01|Line00081", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerminalGuardsStaySharpQ_Init () {
    gt_TerminalGuardsStaySharpQ = TriggerCreate("gt_TerminalGuardsStaySharpQ_Func");
    TriggerAddEventUnitRange(gt_TerminalGuardsStaySharpQ, UnitRefFromVariable("gv_artanis"), UnitFromId(1294), 8.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terminal Guards - Stealth Kill
//--------------------------------------------------------------------------------------------------
bool gt_TerminalGuardsStealthKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_reactionGroup;
    point lv_reactionPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reactionGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitTestState(gv_artanis, c_unitStateCloaked) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_reactionGroup = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(54), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_reactionPoint = UnitGetPosition(EventUnit());
    libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_reactionGroup, lv_reactionPoint);
    Wait(libNCMI_gv_nM_StealthAI_UnitReactionTime, c_timeAI);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerminalGuardsStealthKill_Init () {
    gt_TerminalGuardsStealthKill = TriggerCreate("gt_TerminalGuardsStealthKill_Func");
    TriggerAddEventUnitDied(gt_TerminalGuardsStealthKill, UnitRefFromUnit(UnitFromId(1294)));
    TriggerAddEventUnitDied(gt_TerminalGuardsStealthKill, UnitRefFromUnit(UnitFromId(1292)));
    TriggerAddEventUnitDied(gt_TerminalGuardsStealthKill, UnitRefFromUnit(UnitFromId(1293)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Path Guards - Stealth Kill
//--------------------------------------------------------------------------------------------------
bool gt_MainPathGuardsStealthKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_reactionGroup;
    point lv_reactionPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reactionGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitTestState(gv_artanis, c_unitStateCloaked) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_reactionGroup = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(50), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    TriggerExecute(gt_MainPathGuardsStealthKillQ, true, false);
    lv_reactionPoint = UnitGetPosition(EventUnit());
    libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_reactionGroup, lv_reactionPoint);
    Wait(libNCMI_gv_nM_StealthAI_UnitReactionTime, c_timeAI);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainPathGuardsStealthKill_Init () {
    gt_MainPathGuardsStealthKill = TriggerCreate("gt_MainPathGuardsStealthKill_Func");
    TriggerAddEventUnitDied(gt_MainPathGuardsStealthKill, UnitRefFromUnit(UnitFromId(2245)));
    TriggerAddEventUnitDied(gt_MainPathGuardsStealthKill, UnitRefFromUnit(UnitFromId(2242)));
    TriggerAddEventUnitDied(gt_MainPathGuardsStealthKill, UnitRefFromUnit(UnitFromId(2243)));
    TriggerAddEventUnitDied(gt_MainPathGuardsStealthKill, UnitRefFromUnit(UnitFromId(2244)));
    TriggerAddEventUnitDied(gt_MainPathGuardsStealthKill, UnitRefFromUnit(UnitFromId(2463)));
    TriggerAddEventUnitDied(gt_MainPathGuardsStealthKill, UnitRefFromUnit(UnitFromId(2465)));
    TriggerAddEventUnitDied(gt_MainPathGuardsStealthKill, UnitRefFromUnit(UnitFromId(2466)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Path Guards - Stealth Kill Q
//--------------------------------------------------------------------------------------------------
bool gt_MainPathGuardsStealthKillQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_reactionGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reactionGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_reactionGroup = UnitGroup("Separatist", gv_pLAYER_02_DOMINION, RegionFromId(50), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) > 0)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupRandomUnit(lv_reactionGroup, c_unitCountAlive), "Mission_Nova03|Line00077", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else {
        return true;
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainPathGuardsStealthKillQ_Init () {
    gt_MainPathGuardsStealthKillQ = TriggerCreate("gt_MainPathGuardsStealthKillQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trooper Finds Nova Q
//--------------------------------------------------------------------------------------------------
bool gt_TrooperFindsNovaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Separatist"))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((UnitIsAlive(EventUnitTarget()) == false) || (gv_objective_RifleComplete == true) || (gv_currentSection != 1))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(EventUnitTarget(), "Mission_Nova01|Line00082", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrooperFindsNovaQ_Init () {
    gt_TrooperFindsNovaQ = TriggerCreate("gt_TrooperFindsNovaQ_Func");
    TriggerAddEventUnitStartedAttack2(gt_TrooperFindsNovaQ, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Trooper Patrol
//--------------------------------------------------------------------------------------------------
bool gt_SendTrooperPatrol_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE910D140_g;
    int autoE910D140_u;
    unit autoE910D140_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TrooperPatrolStealthKill, true);
    gv_patrolTroopers = UnitGroup("Separatist", gv_pLAYER_02_DOMINION, RegionFromId(123), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE910D140_g = gv_patrolTroopers;
    autoE910D140_u = UnitGroupCount(autoE910D140_g, c_unitCountAll);
    for (;; autoE910D140_u -= 1) {
        autoE910D140_var = UnitGroupUnitFromEnd(autoE910D140_g, autoE910D140_u);
        if (autoE910D140_var == null) { break; }
        libNCMI_gf_StealthAISetStealthAIUnitState(autoE910D140_var, libNCMI_ge_StealthAIUnitState_Idle);
    }
    UnitGroupIssueOrder(gv_patrolTroopers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1299)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_patrolTroopers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1300)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_patrolTroopers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1301)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_patrolTroopers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1302)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_patrolTroopers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1303)), c_orderQueueAddToEnd);
    TriggerExecute(gt_TrooperPatrolQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendTrooperPatrol_Init () {
    gt_SendTrooperPatrol = TriggerCreate("gt_SendTrooperPatrol_Func");
    TriggerAddEventUnitRegion(gt_SendTrooperPatrol, UnitRefFromVariable("gv_artanis"), RegionFromId(124), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trooper Patrol Q
//--------------------------------------------------------------------------------------------------
bool gt_TrooperPatrolQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(UnitFromId(1298), "Mission_Nova01|Line00083", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrooperPatrolQ_Init () {
    gt_TrooperPatrolQ = TriggerCreate("gt_TrooperPatrolQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trooper Patrol - Stealth Kill
//--------------------------------------------------------------------------------------------------
bool gt_TrooperPatrolStealthKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_reactionGroup;
    point lv_reactionPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reactionGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Separatist"))) {
            return false;
        }

        if (!((UnitTestState(gv_artanis, c_unitStateCloaked) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_reactionGroup = gv_patrolTroopers;
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_reactionPoint = UnitGetPosition(EventUnit());
    libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_reactionGroup, lv_reactionPoint);
    Wait(libNCMI_gv_nM_StealthAI_UnitReactionTime, c_timeAI);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    UnitGroupIssueOrder(lv_reactionGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1303)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrooperPatrolStealthKill_Init () {
    gt_TrooperPatrolStealthKill = TriggerCreate("gt_TrooperPatrolStealthKill_Func");
    TriggerEnable(gt_TrooperPatrolStealthKill, false);
    TriggerAddEventUnitDied(gt_TrooperPatrolStealthKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Enters Armory Hall
//--------------------------------------------------------------------------------------------------
bool gt_NovaEntersArmoryHall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(81), libNCMI_ge_StealthAIDefendRegionState_Active);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaEntersArmoryHall_Init () {
    gt_NovaEntersArmoryHall = TriggerCreate("gt_NovaEntersArmoryHall_Func");
    TriggerAddEventUnitRegion(gt_NovaEntersArmoryHall, UnitRefFromVariable("gv_artanis"), RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead End Guards - Maxwell Confirmed Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_DeadEndGuardsMaxwellConfirmedDeadQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(2058)) == true) && (UnitTestState(gv_artanis, c_unitStateCloaked) == true) && (TriggerIsEnabled(gt_DeadEndGuardsStealthKill) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(2058), "Mission_Nova01|Line00011", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadEndGuardsMaxwellConfirmedDeadQ_Init () {
    gt_DeadEndGuardsMaxwellConfirmedDeadQ = TriggerCreate("gt_DeadEndGuardsMaxwellConfirmedDeadQ_Func");
    TriggerAddEventUnitRegion(gt_DeadEndGuardsMaxwellConfirmedDeadQ, UnitRefFromVariable("gv_artanis"), RegionFromId(95), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead End Guards - Stealth Kill
//--------------------------------------------------------------------------------------------------
bool gt_DeadEndGuardsStealthKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_reactionGroup;
    point lv_reactionPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reactionGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitTestState(gv_artanis, c_unitStateCloaked) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_reactionGroup = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(95), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_reactionPoint = UnitGetPosition(EventUnit());
    libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_reactionGroup, lv_reactionPoint);
    Wait(libNCMI_gv_nM_StealthAI_UnitReactionTime, c_timeAI);
    if ((UnitGroupCount(lv_reactionGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadEndGuardsStealthKill_Init () {
    gt_DeadEndGuardsStealthKill = TriggerCreate("gt_DeadEndGuardsStealthKill_Func");
    TriggerAddEventUnitDied(gt_DeadEndGuardsStealthKill, UnitRefFromUnit(UnitFromId(2058)));
    TriggerAddEventUnitDied(gt_DeadEndGuardsStealthKill, UnitRefFromUnit(UnitFromId(2237)));
    TriggerAddEventUnitDied(gt_DeadEndGuardsStealthKill, UnitRefFromUnit(UnitFromId(2238)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Obtain Rifle Q
//--------------------------------------------------------------------------------------------------
bool gt_ObtainRifleQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((gv_objective_RifleComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_riflePing);
    TriggerExecute(gt_ObjectiveRifleComplete, true, false);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "NovaSilentkill", 0);
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPWeaponItem1");
    TriggerEnable(gt_DeadEndGuardsMaxwellConfirmedDeadQ, false);
    TriggerEnable(gt_DeadEndGuardsStealthKill, false);
    UnitRemove(UnitFromId(2058));
    UnitRemove(UnitFromId(2237));
    UnitRemove(UnitFromId(2238));
    UnitIssueOrder(UnitFromId(208), Order(AbilityCommand("MoebiusLabDoorsWideLeftLowered", 0)), c_orderQueueReplace);
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(81), UnitFromId(2059), libNtve_gf_PointFacingAngle(PointFromId(2023), PointGetFacing(PointFromId(2023))));
    libNCMI_gf_AddMissionTipCampaign("Nova Snipe");
    TriggerEnable(gt_TeachSnipeQ, true);
    TriggerEnable(gt_SnipeHallReaperFindsNovaQ, true);
    TriggerExecute(gt_SnipeHallInit, true, false);
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(39), gv_pLAYER_01_USER);
    Wait(2.0, c_timeReal);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/007C13A8"));
    TriggerQueueEnter();
    if ((gv_objective_GrenadesComplete == false) && (gv_currentSection == 1)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00008", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((gv_objective_GrenadesComplete == false) && (gv_currentSection == 1)) {
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00058", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova01_Main", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    if ((gv_objective_GrenadesComplete == false) && (gv_currentSection == 1)) {
        TriggerExecute(gt_ObjectiveGrenadesCreate, true, false);
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(282), 5.0, Color(0.00, 100.00, 0.00));
        libNCMI_gf_CreateObjectivePing(true, PointFromId(282), StringExternal("Param/Value/93C985D4"));
        gv_pulseGrenadePing = PingLastCreated();
        Wait(2.0, c_timeReal);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObtainRifleQ_Init () {
    gt_ObtainRifleQ = TriggerCreate("gt_ObtainRifleQ_Func");
    TriggerAddEventUnitAbility(gt_ObtainRifleQ, UnitRefFromVariable("gv_riflePickup"), AbilityCommand("PickupNovaSniperRifle", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Snipe Q
//--------------------------------------------------------------------------------------------------
bool gt_TeachSnipeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(175), Order(AbilityCommand("MoebiusLabDoorsWideRight", 0)), c_orderQueueReplace);
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(23), UnitFromId(166), libNtve_gf_PointFacingAngle(PointFromId(2060), PointGetFacing(PointFromId(2060))));
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(23), UnitFromId(174), libNtve_gf_PointFacingAngle(PointFromId(2061), PointGetFacing(PointFromId(2061))));
    if ((UnitIsAlive(UnitFromId(2059)) == true)) {
        SoundPlayForPlayer(SoundLink("ReticleAppears", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranEnemy, libNCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/60106611"), UnitFromId(2059), "Ref_Center");
        gv_snipeReticle = libNtve_gf_ActorLastCreated();
        gv_snipeTextTag = TextTagLastCreated();
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaWeaponCanisterRifleSnipe", 0), true);
        TriggerEnable(gt_TeachSnipeCleanup, true);
        TriggerQueueEnter();
        if ((UnitIsAlive(gv_artanis) == true) && (UnitIsAlive(UnitFromId(2059)) == true) && (gv_currentSection == 1)) {
            libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(2059)), 5.0, Color(100.00, 0.00, 0.00));
            Wait(1.0, c_timeReal);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00013", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00059", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        }

        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachSnipeQ_Init () {
    gt_TeachSnipeQ = TriggerCreate("gt_TeachSnipeQ_Func");
    TriggerEnable(gt_TeachSnipeQ, false);
    TriggerAddEventUnitRegion(gt_TeachSnipeQ, UnitRefFromVariable("gv_artanis"), RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Snipe Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_TeachSnipeCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_snipeReticle);
    TextTagDestroy(gv_snipeTextTag);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaWeaponCanisterRifleSnipe", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachSnipeCleanup_Init () {
    gt_TeachSnipeCleanup = TriggerCreate("gt_TeachSnipeCleanup_Func");
    TriggerEnable(gt_TeachSnipeCleanup, false);
    TriggerAddEventUnitAbility(gt_TeachSnipeCleanup, UnitRefFromVariable("gv_artanis"), AbilityCommand("NovaWeaponCanisterRifleSnipe", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitDied(gt_TeachSnipeCleanup, UnitRefFromUnit(UnitFromId(174)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Hall Init
//--------------------------------------------------------------------------------------------------
bool gt_SnipeHallInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoAF28959D_n = 2;
    int autoAF28959D_i;
    const int autoF7C9440A_n = 2;
    int autoF7C9440A_i;
    const int autoC618B07C_n = 3;
    int autoC618B07C_i;
    const int autoB46C432C_n = 3;
    int autoB46C432C_i;
    unitgroup auto08CFAC4E_g;
    int auto08CFAC4E_u;
    unit auto08CFAC4E_var;
    unitgroup auto995DBBC5_g;
    int auto995DBBC5_u;
    unit auto995DBBC5_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    for (autoAF28959D_i = 1; autoAF28959D_i <= autoAF28959D_n; autoAF28959D_i += 1) {
        UnitCreate(1, "Reaper", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(20)), 215.0);
        UnitGroupAdd(gv_snipeHallReapers1A, UnitLastCreated());
    }
    for (autoF7C9440A_i = 1; autoF7C9440A_i <= autoF7C9440A_n; autoF7C9440A_i += 1) {
        UnitCreate(1, "Reaper", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(171)), 215.0);
        UnitGroupAdd(gv_snipeHallReapers1B, UnitLastCreated());
    }
    for (autoC618B07C_i = 1; autoC618B07C_i <= autoC618B07C_n; autoC618B07C_i += 1) {
        UnitCreate(1, "Reaper", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(174)), 225.0);
        UnitGroupAdd(gv_snipeHallReapers2A, UnitLastCreated());
    }
    for (autoB46C432C_i = 1; autoB46C432C_i <= autoB46C432C_n; autoB46C432C_i += 1) {
        UnitCreate(1, "Reaper", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(173)), 225.0);
        UnitGroupAdd(gv_snipeHallReapers2B, UnitLastCreated());
    }
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(82), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(82), UnitFromId(587), PointFromId(2024));
    auto08CFAC4E_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(94), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto08CFAC4E_u = UnitGroupCount(auto08CFAC4E_g, c_unitCountAll);
    for (;; auto08CFAC4E_u -= 1) {
        auto08CFAC4E_var = UnitGroupUnitFromEnd(auto08CFAC4E_g, auto08CFAC4E_u);
        if (auto08CFAC4E_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(82), auto08CFAC4E_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto08CFAC4E_var), 215.0));
        if (((UnitGetType(auto08CFAC4E_var) == "Separatist") || (UnitGetType(auto08CFAC4E_var) == "Marauder"))) {
            UnitGroupAdd(gv_snipeHallTroopers1, auto08CFAC4E_var);
        }

    }
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(172), libNCMI_ge_StealthAIDefendRegionState_Active);
    auto995DBBC5_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(176), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto995DBBC5_u = UnitGroupCount(auto995DBBC5_g, c_unitCountAll);
    for (;; auto995DBBC5_u -= 1) {
        auto995DBBC5_var = UnitGroupUnitFromEnd(auto995DBBC5_g, auto995DBBC5_u);
        if (auto995DBBC5_var == null) { break; }
        if (((UnitGetType(auto995DBBC5_var) == "GhostDetectorCone") || (UnitGetType(auto995DBBC5_var) == "GhostAlternateDetectorCone"))) {
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(172), auto995DBBC5_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto995DBBC5_var), UnitGetFacing(auto995DBBC5_var)));
        }
        else {
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(172), auto995DBBC5_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto995DBBC5_var), 225.0));
            if (((UnitGetType(auto995DBBC5_var) == "Separatist") || (UnitGetType(auto995DBBC5_var) == "Marauder"))) {
                UnitGroupAdd(gv_snipeHallTroopers2, auto995DBBC5_var);
            }

        }
    }
    TriggerEnable(gt_SnipeHallPart1GhostDies, true);
    TriggerEnable(gt_SnipeHallPart1ReaperRespawn, true);
    TriggerEnable(gt_SnipeHallPart2GhostsDie, true);
    TriggerEnable(gt_SnipeHallPart2ReaperRespawn, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeHallInit_Init () {
    gt_SnipeHallInit = TriggerCreate("gt_SnipeHallInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Hall - Reaper Finds Nova Q
//--------------------------------------------------------------------------------------------------
bool gt_SnipeHallReaperFindsNovaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Reaper"))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((UnitIsAlive(EventUnitTarget()) == false) || (gv_objective_GrenadesComplete == true) || (gv_currentSection != 1))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(EventUnitTarget(), "Mission_Nova01|Line00084", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeHallReaperFindsNovaQ_Init () {
    gt_SnipeHallReaperFindsNovaQ = TriggerCreate("gt_SnipeHallReaperFindsNovaQ_Func");
    TriggerEnable(gt_SnipeHallReaperFindsNovaQ, false);
    TriggerAddEventUnitStartedAttack2(gt_SnipeHallReaperFindsNovaQ, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Hall - Reaper Despawn
//--------------------------------------------------------------------------------------------------
bool gt_SnipeHallReaperDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Reaper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeHallReaperDespawn_Init () {
    gt_SnipeHallReaperDespawn = TriggerCreate("gt_SnipeHallReaperDespawn_Func");
    TriggerAddEventUnitRegion(gt_SnipeHallReaperDespawn, null, RegionFromId(30), true);
    TriggerAddEventUnitRegion(gt_SnipeHallReaperDespawn, null, RegionFromId(29), true);
    TriggerAddEventUnitRegion(gt_SnipeHallReaperDespawn, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Hall Part 1 - Ghost Dies
//--------------------------------------------------------------------------------------------------
bool gt_SnipeHallPart1GhostDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_transmissionSafetyTimer;

    // Automatic Variable Declarations
    fixed auto756B4562_at;
    unitgroup auto019306CE_g;
    int auto019306CE_u;
    unit auto019306CE_var;
    unitgroup autoCDE1D71D_g;
    int autoCDE1D71D_u;
    unit autoCDE1D71D_var;
    unitgroup autoD39D61ED_g;
    int autoD39D61ED_u;
    unit autoD39D61ED_var;

    // Variable Initialization
    lv_transmissionSafetyTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SnipeHallPart1ReaperRespawn, false);
    TimerStart(lv_transmissionSafetyTimer, 10.0, false, c_timeGame);
    if ((UnitTestState(gv_artanis, c_unitStateCloaked) == false)) {
        auto756B4562_at = 0;
        while (!((UnitTestState(gv_artanis, c_unitStateCloaked) == true)) && auto756B4562_at <= 10.0) {
            Wait(0.5, c_timeGame);
            auto756B4562_at = auto756B4562_at + 0.5;
        }
    }

    if ((TimerGetRemaining(lv_transmissionSafetyTimer) > 0.0)) {
        TriggerExecute(gt_SnipeHallPart1ReaperRetreatQ, true, false);
    }
    else {
        TriggerEnable(gt_SnipeHallPart1ReaperRetreatQ, false);
    }
    auto019306CE_g = gv_snipeHallReapers1A;
    auto019306CE_u = UnitGroupCount(auto019306CE_g, c_unitCountAll);
    for (;; auto019306CE_u -= 1) {
        auto019306CE_var = UnitGroupUnitFromEnd(auto019306CE_g, auto019306CE_u);
        if (auto019306CE_var == null) { break; }
        libNCMI_gf_StealthAISetStealthAIUnitState(auto019306CE_var, libNCMI_ge_StealthAIUnitState_Unavailable);
        UnitIssueOrder(auto019306CE_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(30))), c_orderQueueReplace);
    }
    autoCDE1D71D_g = gv_snipeHallReapers1B;
    autoCDE1D71D_u = UnitGroupCount(autoCDE1D71D_g, c_unitCountAll);
    for (;; autoCDE1D71D_u -= 1) {
        autoCDE1D71D_var = UnitGroupUnitFromEnd(autoCDE1D71D_g, autoCDE1D71D_u);
        if (autoCDE1D71D_var == null) { break; }
        libNCMI_gf_StealthAISetStealthAIUnitState(autoCDE1D71D_var, libNCMI_ge_StealthAIUnitState_Unavailable);
        UnitIssueOrder(autoCDE1D71D_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(30))), c_orderQueueReplace);
    }
    autoD39D61ED_g = gv_snipeHallTroopers1;
    autoD39D61ED_u = UnitGroupCount(autoD39D61ED_g, c_unitCountAll);
    for (;; autoD39D61ED_u -= 1) {
        autoD39D61ED_var = UnitGroupUnitFromEnd(autoD39D61ED_g, autoD39D61ED_u);
        if (autoD39D61ED_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(172), autoD39D61ED_var, gf_RandomPointinRegionSharedbyGroup(RegionFromId(175), gv_snipeHallTroopers1));
        UnitGroupAdd(gv_snipeHallTroopers2, autoD39D61ED_var);
    }
    UnitGroupClear(gv_snipeHallTroopers1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeHallPart1GhostDies_Init () {
    gt_SnipeHallPart1GhostDies = TriggerCreate("gt_SnipeHallPart1GhostDies_Func");
    TriggerEnable(gt_SnipeHallPart1GhostDies, false);
    TriggerAddEventUnitDied(gt_SnipeHallPart1GhostDies, UnitRefFromUnit(UnitFromId(587)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Hall Part 1 - Reaper Respawn
//--------------------------------------------------------------------------------------------------
bool gt_SnipeHallPart1ReaperRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Reaper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_snipeHallReapers1A, EventUnit()) == true)) {
        gv_snipeHallReaperRespawnCount1 += 1;
        UnitGroupRemove(gv_snipeHallReapers1A, EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, gv_pLAYER_02_DOMINION, PointFromId(2252));
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(82), UnitLastCreated(), libNtve_gf_PointFacingAngle(gf_RandomPointinRegionSharedbyGroup(RegionFromId(20), gv_snipeHallReapers1A), 215.0));
        UnitGroupAdd(gv_snipeHallReapers1A, UnitLastCreated());
    }
    else if ((UnitGroupHasUnit(gv_snipeHallReapers1B, EventUnit()) == true)) {
        gv_snipeHallReaperRespawnCount1 += 1;
        UnitGroupRemove(gv_snipeHallReapers1B, EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, gv_pLAYER_02_DOMINION, PointFromId(2252));
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(82), UnitLastCreated(), libNtve_gf_PointFacingAngle(gf_RandomPointinRegionSharedbyGroup(RegionFromId(171), gv_snipeHallReapers1B), 215.0));
        UnitGroupAdd(gv_snipeHallReapers1B, UnitLastCreated());
    }
    if ((gv_snipeHallReaperRespawnCount1 > 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeHallPart1ReaperRespawn_Init () {
    gt_SnipeHallPart1ReaperRespawn = TriggerCreate("gt_SnipeHallPart1ReaperRespawn_Func");
    TriggerEnable(gt_SnipeHallPart1ReaperRespawn, false);
    TriggerAddEventUnitDied(gt_SnipeHallPart1ReaperRespawn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Hall Part 1 - Reaper Retreat Q
//--------------------------------------------------------------------------------------------------
bool gt_SnipeHallPart1ReaperRetreatQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitGroupCount(gv_snipeHallReapers1B, c_unitCountAlive) > 0)) {
        lv_speaker = UnitGroupRandomUnit(gv_snipeHallReapers1B, c_unitCountAlive);
    }
    else {
        lv_speaker = UnitGroupRandomUnit(gv_snipeHallReapers1A, c_unitCountAlive);
    }
    if ((UnitIsAlive(lv_speaker) == true) && (UnitIsAlive(gv_artanis) == true) && (gv_currentSection == 1)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00086", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeHallPart1ReaperRetreatQ_Init () {
    gt_SnipeHallPart1ReaperRetreatQ = TriggerCreate("gt_SnipeHallPart1ReaperRetreatQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Hall Part 2 - Ghosts Die
//--------------------------------------------------------------------------------------------------
bool gt_SnipeHallPart2GhostsDie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_transmissionSafetyTimer;

    // Automatic Variable Declarations
    fixed autoD9213375_at;
    unitgroup auto1AC13729_g;
    int auto1AC13729_u;
    unit auto1AC13729_var;
    unitgroup autoCAA11BB6_g;
    int autoCAA11BB6_u;
    unit autoCAA11BB6_var;
    unitgroup autoC0D92884_g;
    int autoC0D92884_u;
    unit autoC0D92884_var;
    unitgroup autoBB74AB46_g;
    int autoBB74AB46_u;
    unit autoBB74AB46_var;

    // Variable Initialization
    lv_transmissionSafetyTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(540)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(281)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (UnitIsAlive(UnitFromId(2477)) == true)) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(172), UnitFromId(2477), PointFromId(2478));
        return true;
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_SnipeHallPart2ReaperRespawn, false);
    }
    TimerStart(lv_transmissionSafetyTimer, 10.0, false, c_timeGame);
    if ((UnitTestState(gv_artanis, c_unitStateCloaked) == false)) {
        autoD9213375_at = 0;
        while (!((UnitTestState(gv_artanis, c_unitStateCloaked) == true)) && autoD9213375_at <= 10.0) {
            Wait(0.5, c_timeGame);
            autoD9213375_at = autoD9213375_at + 0.5;
        }
    }

    if ((TimerGetRemaining(lv_transmissionSafetyTimer) > 0.0)) {
        TriggerExecute(gt_SnipeHallPart2ReaperRetreatQ, true, false);
    }
    else {
        TriggerEnable(gt_SnipeHallPart2ReaperRetreatQ, false);
    }
    auto1AC13729_g = gv_snipeHallReapers2A;
    auto1AC13729_u = UnitGroupCount(auto1AC13729_g, c_unitCountAll);
    for (;; auto1AC13729_u -= 1) {
        auto1AC13729_var = UnitGroupUnitFromEnd(auto1AC13729_g, auto1AC13729_u);
        if (auto1AC13729_var == null) { break; }
        libNCMI_gf_StealthAISetStealthAIUnitState(auto1AC13729_var, libNCMI_ge_StealthAIUnitState_Unavailable);
        UnitIssueOrder(auto1AC13729_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(29))), c_orderQueueReplace);
    }
    autoCAA11BB6_g = gv_snipeHallReapers2B;
    autoCAA11BB6_u = UnitGroupCount(autoCAA11BB6_g, c_unitCountAll);
    for (;; autoCAA11BB6_u -= 1) {
        autoCAA11BB6_var = UnitGroupUnitFromEnd(autoCAA11BB6_g, autoCAA11BB6_u);
        if (autoCAA11BB6_var == null) { break; }
        libNCMI_gf_StealthAISetStealthAIUnitState(autoCAA11BB6_var, libNCMI_ge_StealthAIUnitState_Unavailable);
        UnitIssueOrder(autoCAA11BB6_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(31))), c_orderQueueReplace);
    }
    autoC0D92884_g = gv_snipeHallTroopers2;
    autoC0D92884_u = UnitGroupCount(autoC0D92884_g, c_unitCountAll);
    for (;; autoC0D92884_u -= 1) {
        autoC0D92884_var = UnitGroupUnitFromEnd(autoC0D92884_g, autoC0D92884_u);
        if (autoC0D92884_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(172), autoC0D92884_var, gf_RandomPointinRegionSharedbyGroup(RegionFromId(177), gv_snipeHallTroopers2));
        if ((UnitGetType(autoC0D92884_var) == "Separatist")) {
            libNtve_gf_SendActorMessageToUnit(autoC0D92884_var, "AnimGroupApply Work");
        }

    }
    Wait(8.0, c_timeGame);
    autoBB74AB46_g = gv_snipeHallTroopers2;
    autoBB74AB46_u = UnitGroupCount(autoBB74AB46_g, c_unitCountAll);
    for (;; autoBB74AB46_u -= 1) {
        autoBB74AB46_var = UnitGroupUnitFromEnd(autoBB74AB46_g, autoBB74AB46_u);
        if (autoBB74AB46_var == null) { break; }
        libNCMI_gf_StealthAISetStealthAIUnitState(autoBB74AB46_var, libNCMI_ge_StealthAIUnitState_Reacting);
        if ((UnitGetType(autoBB74AB46_var) == "Separatist")) {
            UnitBehaviorAddPlayer(autoBB74AB46_var, "ColonistWander", gv_pLAYER_02_DOMINION, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeHallPart2GhostsDie_Init () {
    gt_SnipeHallPart2GhostsDie = TriggerCreate("gt_SnipeHallPart2GhostsDie_Func");
    TriggerEnable(gt_SnipeHallPart2GhostsDie, false);
    TriggerAddEventUnitDied(gt_SnipeHallPart2GhostsDie, UnitRefFromUnit(UnitFromId(540)));
    TriggerAddEventUnitDied(gt_SnipeHallPart2GhostsDie, UnitRefFromUnit(UnitFromId(281)));
    TriggerAddEventUnitDied(gt_SnipeHallPart2GhostsDie, UnitRefFromUnit(UnitFromId(2477)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Hall Part 2 - Reaper Respawn
//--------------------------------------------------------------------------------------------------
bool gt_SnipeHallPart2ReaperRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Reaper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_snipeHallReapers2A, EventUnit()) == true)) {
        gv_snipeHallReaperRespawnCount2 += 1;
        UnitGroupRemove(gv_snipeHallReapers2A, EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, gv_pLAYER_02_DOMINION, PointFromId(2253));
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(172), UnitLastCreated(), libNtve_gf_PointFacingAngle(gf_RandomPointinRegionSharedbyGroup(RegionFromId(174), gv_snipeHallReapers2A), 225.0));
        UnitGroupAdd(gv_snipeHallReapers2A, UnitLastCreated());
    }
    else if ((UnitGroupHasUnit(gv_snipeHallReapers2B, EventUnit()) == true)) {
        gv_snipeHallReaperRespawnCount2 += 1;
        UnitGroupRemove(gv_snipeHallReapers2B, EventUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, gv_pLAYER_02_DOMINION, PointFromId(2254));
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(172), UnitLastCreated(), libNtve_gf_PointFacingAngle(gf_RandomPointinRegionSharedbyGroup(RegionFromId(173), gv_snipeHallReapers2B), 225.0));
        UnitGroupAdd(gv_snipeHallReapers2B, UnitLastCreated());
    }
    if ((gv_snipeHallReaperRespawnCount2 > 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeHallPart2ReaperRespawn_Init () {
    gt_SnipeHallPart2ReaperRespawn = TriggerCreate("gt_SnipeHallPart2ReaperRespawn_Func");
    TriggerEnable(gt_SnipeHallPart2ReaperRespawn, false);
    TriggerAddEventUnitDied(gt_SnipeHallPart2ReaperRespawn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Hall Part 2 - Reaper Retreat Q
//--------------------------------------------------------------------------------------------------
bool gt_SnipeHallPart2ReaperRetreatQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitGroupCount(gv_snipeHallReapers2A, c_unitCountAlive) > 0)) {
        lv_speaker = UnitGroupRandomUnit(gv_snipeHallReapers2A, c_unitCountAlive);
    }
    else {
        lv_speaker = UnitGroupRandomUnit(gv_snipeHallReapers2B, c_unitCountAlive);
    }
    if ((UnitIsAlive(lv_speaker) == true) && (UnitIsAlive(gv_artanis) == true) && (gv_currentSection == 1)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00085", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeHallPart2ReaperRetreatQ_Init () {
    gt_SnipeHallPart2ReaperRetreatQ = TriggerCreate("gt_SnipeHallPart2ReaperRetreatQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Obtain Grenades Q
//--------------------------------------------------------------------------------------------------
bool gt_ObtainGrenadesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((gv_objective_GrenadesComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_pulseGrenadePing);
    TriggerExecute(gt_ObjectiveGrenadesComplete, true, false);
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPGadgetItem1");
    UnitIssueOrder(UnitFromId(208), Order(AbilityCommand("MoebiusLabDoorsWideLeft", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(389), Order(AbilityCommand("MoebiusLabDoorsWideRightLowered", 0)), c_orderQueueReplace);
    libNCMI_gf_AddMissionTipCampaign("Pulse Grenade");
    TriggerExecute(gt_TeachGrenades, true, false);
    Wait(2.0, c_timeReal);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/865D2FDB"));
    TriggerQueueEnter();
    if ((gv_objective_EscapeComplete == false) && (gv_currentSection == 1)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00020", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    if ((gv_objective_EscapeComplete == false) && (gv_currentSection == 1)) {
        ObjectiveShow(gv_objectiveDestroyZergBase, PlayerGroupAll(), false);
        ObjectiveShow(gv_objectiveDestroyZergBase5, PlayerGroupAll(), false);
        TriggerExecute(gt_ObjectiveEscapeCreate, true, false);
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(675), 5.0, Color(0.00, 100.00, 0.00));
        libNCMI_gf_CreateObjectivePing(true, PointFromId(675), StringExternal("Param/Value/E368F1AD"));
        gv_escapePing = PingLastCreated();
        Wait(2.0, c_timeReal);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObtainGrenadesQ_Init () {
    gt_ObtainGrenadesQ = TriggerCreate("gt_ObtainGrenadesQ_Func");
    TriggerAddEventUnitAbility(gt_ObtainGrenadesQ, UnitRefFromVariable("gv_grenadePickup"), AbilityCommand("PickupNovaPulseGrenade", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Grenades
//--------------------------------------------------------------------------------------------------
bool gt_TeachGrenades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4FB098EF_g;
    int auto4FB098EF_u;
    unit auto4FB098EF_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (gv_currentSection != 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 4) || (UnitIsAlive(gv_artanis) == false))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(51)) == true)) {
            break;
        }

    }
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(48)), 5.0, Color(100.00, 0.00, 0.00));
    SoundPlayForPlayer(SoundLink("ReticleAppears", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_CreateReticleEffectAndTextTagAtPoint(libNCMI_ge_CampaginReticleType_TerranEnemy, libNCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/37531E68"), RegionGetCenter(RegionFromId(48)));
    gv_pulseGrenadeReticle = libNtve_gf_ActorLastCreated();
    gv_pulseGrenadeTextTag = TextTagLastCreated();
    TextTagSetPosition(gv_pulseGrenadeTextTag, RegionGetCenter(RegionFromId(48)), 0.0);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaGadgetPulseGrenades", 0), true);
    auto4FB098EF_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4FB098EF_u = UnitGroupCount(auto4FB098EF_g, c_unitCountAll);
    for (;; auto4FB098EF_u -= 1) {
        auto4FB098EF_var = UnitGroupUnitFromEnd(auto4FB098EF_g, auto4FB098EF_u);
        if (auto4FB098EF_var == null) { break; }
        UnitIssueOrder(auto4FB098EF_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(282)), c_orderQueueReplace);
    }
    TriggerEnable(gt_TeachGrenadeCleanupUseAbility, true);
    TriggerExecute(gt_TeachGrenadeCleanupMarineClusterDies, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachGrenades_Init () {
    gt_TeachGrenades = TriggerCreate("gt_TeachGrenades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Grenade Cleanup - Use Ability
//--------------------------------------------------------------------------------------------------
bool gt_TeachGrenadeCleanupUseAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((gv_pulseGrenadesTaught == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionFromId(37), EventUnitTargetPoint()) == true) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) - UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(EventUnitTargetPoint(), 3.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) <= 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_pulseGrenadesTaught = true;
        libNtve_gf_KillModel(gv_pulseGrenadeReticle);
        TextTagDestroy(gv_pulseGrenadeTextTag);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaGadgetPulseGrenades", 0), false);
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(EventUnitTargetPoint(), 3.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 8)) {
            TriggerExecute(gt_ResearchBayClearQ, true, false);
        }
        else {
            TriggerExecute(gt_ResearchBayClearAltQ, true, false);
        }
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachGrenadeCleanupUseAbility_Init () {
    gt_TeachGrenadeCleanupUseAbility = TriggerCreate("gt_TeachGrenadeCleanupUseAbility_Func");
    TriggerEnable(gt_TeachGrenadeCleanupUseAbility, false);
    TriggerAddEventUnitAbility(gt_TeachGrenadeCleanupUseAbility, UnitRefFromVariable("gv_artanis"), AbilityCommand("NovaGadgetPulseGrenades", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Grenade Cleanup - Marine Cluster Dies
//--------------------------------------------------------------------------------------------------
bool gt_TeachGrenadeCleanupMarineClusterDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(0.5, c_timeAI);
        if (((UnitIsAlive(gv_artanis) == false) || (libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (gv_currentSection != 1) || (gv_pulseGrenadesTaught == true))) {
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 4)) {
            gv_pulseGrenadesTaught = true;
            libNtve_gf_KillModel(gv_pulseGrenadeReticle);
            TextTagDestroy(gv_pulseGrenadeTextTag);
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NovaGadgetPulseGrenades", 0), false);
            TriggerExecute(gt_ResearchBayClearAltQ, true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachGrenadeCleanupMarineClusterDies_Init () {
    gt_TeachGrenadeCleanupMarineClusterDies = TriggerCreate("gt_TeachGrenadeCleanupMarineClusterDies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Bay - Defenders Respawn Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchBayDefendersRespawnQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_objective_GrenadesComplete == false) && (gv_currentSection == 1)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00018", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchBayDefendersRespawnQ_Init () {
    gt_ResearchBayDefendersRespawnQ = TriggerCreate("gt_ResearchBayDefendersRespawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Bay Defenders
//--------------------------------------------------------------------------------------------------
bool gt_ResearchBayDefenders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_researchBayTurret;
    int lv_i;
    bool lv_spawningDisabled;
    int lv_respawnCount;

    // Automatic Variable Declarations
    unitgroup autoA2C4C7B0_g;
    int autoA2C4C7B0_u;
    unit autoA2C4C7B0_var;
    int autoAE743FA4_ae;
    const int autoAE743FA4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_researchBayTurret = UnitFromId(682);
    autoA2C4C7B0_g = UnitGroup("Separatist", gv_pLAYER_02_DOMINION, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA2C4C7B0_u = UnitGroupCount(autoA2C4C7B0_g, c_unitCountAll);
    for (;; autoA2C4C7B0_u -= 1) {
        autoA2C4C7B0_var = UnitGroupUnitFromEnd(autoA2C4C7B0_g, autoA2C4C7B0_u);
        if (autoA2C4C7B0_var == null) { break; }
        lv_i += 1;
        if ((lv_i <= 31)) {
            gv_researchBayDefenders[lv_i].lv_unit = autoA2C4C7B0_var;
            gv_researchBayDefenders[lv_i].lv_position = UnitGetPosition(autoA2C4C7B0_var);
            UnitGroupAdd(gv_researchBayDefenderGroup, autoA2C4C7B0_var);
        }
        else {
            lv_i = 31;
        }
    }
    gv_researchBayDefenderCount = lv_i;
    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 1))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_researchBayDefenderGroup) == true)) {
            UnitIssueOrder(lv_researchBayTurret, Order(AbilityCommand("GunTurretBurrow", 0)), c_orderQueueReplace);
            return true;
        }

        lv_respawnCount = 0;
        autoAE743FA4_ae = gv_researchBayDefenderCount;
        lv_i = 1;
        for ( ; ( (autoAE743FA4_ai >= 0 && lv_i <= autoAE743FA4_ae) || (autoAE743FA4_ai < 0 && lv_i >= autoAE743FA4_ae) ) ; lv_i += autoAE743FA4_ai ) {
            if ((UnitIsAlive(gv_researchBayDefenders[lv_i].lv_unit) == true)) {
                if ((libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(RegionGetCenter(RegionFromId(37)), 9.0)) == true)) {
                    if ((UnitIsAlive(lv_researchBayTurret) == true)) {
                        UnitIssueOrder(gv_researchBayDefenders[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
                    }

                }
                else {
                    if ((lv_spawningDisabled == false)) {
                        if ((libNtve_gf_UnitInRegion(gv_researchBayDefenders[lv_i].lv_unit, RegionCircle(gv_researchBayDefenders[lv_i].lv_position, 1.0)) == false)) {
                            UnitIssueOrder(gv_researchBayDefenders[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_researchBayDefenders[lv_i].lv_position), c_orderQueueReplace);
                        }

                    }
                    else {
                        if ((libNtve_gf_UnitInRegion(gv_researchBayDefenders[lv_i].lv_unit, RegionFromId(48)) == false)) {
                            UnitIssueOrder(gv_researchBayDefenders[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(46))), c_orderQueueReplace);
                        }

                    }
                }
            }
            else {
                lv_respawnCount += 1;
                if ((lv_spawningDisabled == false) && (lv_respawnCount <= 3)) {
                    UnitCreate(1, "Separatist", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(41)), 45.0);
                    gv_researchBayDefenders[lv_i].lv_unit = UnitLastCreated();
                    UnitGroupAdd(gv_researchBayDefenderGroup, UnitLastCreated());
                    UnitIssueOrder(gv_researchBayDefenders[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_researchBayDefenders[lv_i].lv_position), c_orderQueueReplace);
                    libNCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/3A1C0ED2"), null);
                    TriggerExecute(gt_ResearchBayDefendersRespawnQ, true, false);
                }

            }
        }
        if ((lv_spawningDisabled == false) && (libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(45)) == true)) {
            lv_spawningDisabled = true;
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchBayDefenders_Init () {
    gt_ResearchBayDefenders = TriggerCreate("gt_ResearchBayDefenders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Bay Defense Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchBayDefenseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_objective_GrenadesComplete == false) && (gv_currentSection == 1)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00017", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00060", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchBayDefenseQ_Init () {
    gt_ResearchBayDefenseQ = TriggerCreate("gt_ResearchBayDefenseQ_Func");
    TriggerAddEventUnitRegion(gt_ResearchBayDefenseQ, UnitRefFromVariable("gv_artanis"), RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulse Grenades Nearby Q
//--------------------------------------------------------------------------------------------------
bool gt_PulseGrenadesNearbyQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_objective_GrenadesComplete == false) && (gv_currentSection == 1)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00019", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PulseGrenadesNearbyQ_Init () {
    gt_PulseGrenadesNearbyQ = TriggerCreate("gt_PulseGrenadesNearbyQ_Func");
    TriggerAddEventUnitRegion(gt_PulseGrenadesNearbyQ, UnitRefFromVariable("gv_artanis"), RegionFromId(112), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Bay Clear Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchBayClearQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    timer lv_timerCheck;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timerCheck = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ResearchBayClearAltQ, false);
    TimerStart(lv_timerCheck, 6.0, false, c_timeReal);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    if (((gv_objective_EscapeComplete == true) || (gv_currentSection != 1))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((TimerGetRemaining(lv_timerCheck) >= 1)) {
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00021", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    if (((gv_objective_EscapeComplete == true) || (gv_currentSection != 1))) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00061", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if (((gv_objective_EscapeComplete == true) || (gv_currentSection != 1))) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00062", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if (((gv_objective_EscapeComplete == true) || (gv_currentSection != 1))) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRescueGhostsCreate, true, false);
    TriggerExecute(gt_EscapeRescueGhostPings, true, true);
    if (((gv_objective_EscapeComplete == true) || (gv_currentSection != 1))) {
        return true;
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchBayClearQ_Init () {
    gt_ResearchBayClearQ = TriggerCreate("gt_ResearchBayClearQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Bay Clear Alt Q
//--------------------------------------------------------------------------------------------------
bool gt_ResearchBayClearAltQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ResearchBayClearQ, false);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    if (((gv_objective_EscapeComplete == true) || (gv_currentSection != 1))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00061", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if (((gv_objective_EscapeComplete == true) || (gv_currentSection != 1))) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00062", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    if (((gv_objective_EscapeComplete == true) || (gv_currentSection != 1))) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRescueGhostsCreate, true, false);
    TriggerExecute(gt_EscapeRescueGhostPings, true, true);
    if (((gv_objective_EscapeComplete == true) || (gv_currentSection != 1))) {
        return true;
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResearchBayClearAltQ_Init () {
    gt_ResearchBayClearAltQ = TriggerCreate("gt_ResearchBayClearAltQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Facility Destruction
//--------------------------------------------------------------------------------------------------
bool gt_FacilityDestruction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[16] lv_areasTriggered;
    region[16] lv_areas;
    int lv_currentArea;
    int lv_finalArea;
    bool lv_areaTriggered;
    int lv_i;

    // Automatic Variable Declarations
    int auto7F139D60_ae;
    const int auto7F139D60_ai = 1;
    int auto35E5FEC8_ae;
    const int auto35E5FEC8_ai = 1;
    int auto9322F861_ae;
    const int auto9322F861_ai = 1;
    int autoAAB2829A_ae;
    const int autoAAB2829A_ai = 1;
    int autoFB3164C5_ae;
    const int autoFB3164C5_ai = 1;
    int autoDE66320F_ae;
    const int autoDE66320F_ai = 1;

    // Variable Initialization
    lv_currentArea = 1;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_sideAreasCount = 3;
    lv_finalArea = 5;
    auto7F139D60_ae = (lv_finalArea + 1);
    lv_i = 1;
    for ( ; ( (auto7F139D60_ai >= 0 && lv_i <= auto7F139D60_ae) || (auto7F139D60_ai < 0 && lv_i >= auto7F139D60_ae) ) ; lv_i += auto7F139D60_ai ) {
        lv_areas[lv_i] = RegionFromName(("Destruction " + IntToString(lv_i)));
    }
    while (true) {
        if (((UnitIsAlive(gv_artanis) == false) || (libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (gv_currentSection != 1))) {
            return true;
        }

        lv_areaTriggered = false;
        auto35E5FEC8_ae = lv_finalArea;
        lv_i = lv_currentArea;
        for ( ; ( (auto35E5FEC8_ai >= 0 && lv_i <= auto35E5FEC8_ae) || (auto35E5FEC8_ai < 0 && lv_i >= auto35E5FEC8_ae) ) ; lv_i += auto35E5FEC8_ai ) {
            if ((libNtve_gf_UnitInRegion(gv_artanis, lv_areas[(lv_i + 1)]) == true) && (gf_AFriendlyGhostisinRegion(lv_areas[lv_i]) == false)) {
                lv_currentArea = (lv_i + 1);
                lv_areaTriggered = true;
            }

        }
        auto9322F861_ae = gv_sideAreasCount;
        lv_i = 1;
        for ( ; ( (auto9322F861_ai >= 0 && lv_i <= auto9322F861_ae) || (auto9322F861_ai < 0 && lv_i >= auto9322F861_ae) ) ; lv_i += auto9322F861_ai ) {
            if ((gv_sideAreasTriggered[lv_i] == 1) && (libNtve_gf_UnitInRegion(gv_artanis, RegionFromName(("Destruction " + IntToString((lv_i + 100))))) == false) && (gf_AFriendlyGhostisinRegion(RegionFromName(("Destruction " + IntToString((lv_i + 100))))) == false)) {
                lv_areaTriggered = true;
            }

        }
        if ((lv_areaTriggered == true)) {
            TriggerExecute(gt_DestructionSoundsandCameraShake, true, false);
            autoAAB2829A_ae = (lv_currentArea - 1);
            lv_i = 1;
            for ( ; ( (autoAAB2829A_ai >= 0 && lv_i <= autoAAB2829A_ae) || (autoAAB2829A_ai < 0 && lv_i >= autoAAB2829A_ae) ) ; lv_i += autoAAB2829A_ai ) {
                if ((lv_areasTriggered[lv_i] == false)) {
                    lv_areasTriggered[lv_i] = true;
                    gf_DestroyArea(lv_i);
                }

                if ((lv_i == 4) && (gv_destruction4Triggered == false)) {
                    gv_destruction4Triggered = true;
                    if ((gv_sideAreasTriggered[1] == 0)) {
                        gv_sideAreasTriggered[1] = 3;
                    }

                    if ((gv_sideAreasTriggered[2] == 0)) {
                        gv_sideAreasTriggered[2] = 3;
                    }

                    if ((gv_sideAreasTriggered[3] == 0)) {
                        gv_sideAreasTriggered[3] = 3;
                    }

                }

            }
            autoFB3164C5_ae = gv_sideAreasCount;
            lv_i = 1;
            for ( ; ( (autoFB3164C5_ai >= 0 && lv_i <= autoFB3164C5_ae) || (autoFB3164C5_ai < 0 && lv_i >= autoFB3164C5_ae) ) ; lv_i += autoFB3164C5_ai ) {
                if ((gv_sideAreasTriggered[lv_i] == 1) && (libNtve_gf_UnitInRegion(gv_artanis, RegionFromName(("Destruction " + IntToString((lv_i + 100))))) == false) && (gf_AFriendlyGhostisinRegion(RegionFromName(("Destruction " + IntToString((lv_i + 100))))) == false)) {
                    gv_sideAreasTriggered[lv_i] = 2;
                    gf_DestroyArea((lv_i + 100));
                }

            }
            autoDE66320F_ae = gv_sideAreasCount;
            lv_i = 1;
            for ( ; ( (autoDE66320F_ai >= 0 && lv_i <= autoDE66320F_ae) || (autoDE66320F_ai < 0 && lv_i >= autoDE66320F_ae) ) ; lv_i += autoDE66320F_ai ) {
                if ((gv_sideAreasTriggered[lv_i] == 3) && (libNtve_gf_UnitInRegion(gv_artanis, RegionFromName(("Destruction " + IntToString((lv_i + 100))))) == false)) {
                    gv_sideAreasTriggered[lv_i] = 2;
                    gf_DestroyArea((lv_i + 100));
                }

            }
            Wait(2.0, c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FacilityDestruction_Init () {
    gt_FacilityDestruction = TriggerCreate("gt_FacilityDestruction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destruction Sounds and Camera Shake
//--------------------------------------------------------------------------------------------------
bool gt_DestructionSoundsandCameraShake_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("GiantExplosion", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    SoundPlayForPlayer(SoundLink("GiantExplosion_Add", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
    Wait(1.0, c_timeReal);
    if ((gv_currentSection == 1) && (libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        SoundPlayForPlayer(SoundLink("GiantExplosionBackground", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestructionSoundsandCameraShake_Init () {
    gt_DestructionSoundsandCameraShake = TriggerCreate("gt_DestructionSoundsandCameraShake_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Termination Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeTerminationQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(389), Order(AbilityCommand("MoebiusLabDoorsWideRight", 0)), c_orderQueueReplace);
    TriggerExecute(gt_EscapeInitStealthAI, true, false);
    TriggerQueueEnter();
    if ((gv_currentSection == 1)) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova01_Mid", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Event_Nova01_Facility_Alarm_Klaxon", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        SoundPlayForPlayer(SoundLink("Event_Nova01_Facility_Alarm_TechFire", 0), c_maxPlayers, PlayerGroupAll(), 70.0, 0.0);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00025", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    TriggerExecute(gt_FacilityDestruction, true, false);
    Wait(4.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_currentSection == 1)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00027", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00063", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00064", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeTerminationQ_Init () {
    gt_EscapeTerminationQ = TriggerCreate("gt_EscapeTerminationQ_Func");
    TriggerAddEventUnitRegion(gt_EscapeTerminationQ, UnitRefFromVariable("gv_artanis"), RegionFromId(61), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Init Stealth AI
//--------------------------------------------------------------------------------------------------
bool gt_EscapeInitStealthAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1C2471DE_g;
    int auto1C2471DE_u;
    unit auto1C2471DE_var;
    unitgroup autoFA5A46CA_g;
    int autoFA5A46CA_u;
    unit autoFA5A46CA_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(78), libNCMI_ge_StealthAIDefendRegionState_Active);
    auto1C2471DE_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(72), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1C2471DE_u = UnitGroupCount(auto1C2471DE_g, c_unitCountAll);
    for (;; auto1C2471DE_u -= 1) {
        auto1C2471DE_var = UnitGroupUnitFromEnd(auto1C2471DE_g, auto1C2471DE_u);
        if (auto1C2471DE_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(78), auto1C2471DE_var, libNtve_gf_PointFacingAngle(UnitGetPosition(auto1C2471DE_var), UnitGetFacing(auto1C2471DE_var)));
    }
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(28), libNCMI_ge_StealthAIDefendRegionState_Active);
    autoFA5A46CA_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFA5A46CA_u = UnitGroupCount(autoFA5A46CA_g, c_unitCountAll);
    for (;; autoFA5A46CA_u -= 1) {
        autoFA5A46CA_var = UnitGroupUnitFromEnd(autoFA5A46CA_g, autoFA5A46CA_u);
        if (autoFA5A46CA_var == null) { break; }
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(28), autoFA5A46CA_var, libNtve_gf_PointFacingAngle(UnitGetPosition(autoFA5A46CA_var), UnitGetFacing(autoFA5A46CA_var)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeInitStealthAI_Init () {
    gt_EscapeInitStealthAI = TriggerCreate("gt_EscapeInitStealthAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Friendly Ghost EMP Targeting
//--------------------------------------------------------------------------------------------------
bool gt_EscapeFriendlyGhostEMPTargeting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_casterGhost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterGhost = UnitBehaviorEffectUnit(EventUnit(), "DetectorConeDetected", c_effectUnitCaster, 0);
    Wait(1.0, c_timeAI);
    while ((UnitHasBehavior2(EventUnit(), "DetectorConeDetected") == true) && (UnitHasBehavior2(gv_artanis, "DetectorConeDetected") == true) && (UnitIsAlive(lv_casterGhost) == true)) {
        Wait(1.0, c_timeAI);
    }
    if ((UnitHasBehavior2(EventUnit(), "DetectorConeDetected") == true) && (UnitIsAlive(lv_casterGhost) == true)) {
        libNCMI_gf_StealthAISetStealthAIGhostJob(lv_casterGhost, libNCMI_ge_StealthAIGhostJob_Floating);
        UnitIssueOrder(lv_casterGhost, OrderTargetingPoint(AbilityCommand("DOMEMP", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
        libNCMI_gf_StealthAISetStealthAIGhostJob(lv_casterGhost, libNCMI_ge_StealthAIGhostJob_Scanning);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeFriendlyGhostEMPTargeting_Init () {
    gt_EscapeFriendlyGhostEMPTargeting = TriggerCreate("gt_EscapeFriendlyGhostEMPTargeting_Func");
    TriggerAddEventUnitBehaviorChange(gt_EscapeFriendlyGhostEMPTargeting, UnitRefFromUnit(UnitFromId(2030)), "DetectorConeDetected", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_EscapeFriendlyGhostEMPTargeting, UnitRefFromUnit(UnitFromId(1089)), "DetectorConeDetected", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_EscapeFriendlyGhostEMPTargeting, UnitRefFromUnit(UnitFromId(1147)), "DetectorConeDetected", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Rescue Ghost Pings
//--------------------------------------------------------------------------------------------------
bool gt_EscapeRescueGhostPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateActive) && (libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentSection == 1)) {
        SoundPlayForPlayer(SoundLink("Ping", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((gv_friendlyGhostsRescued[1] == false) && (UnitIsAlive(UnitFromId(2030)) == true)) {
            libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(802), 5.0, Color(100.00, 100.00, 0.00));
            libNCMI_gf_CreateObjectivePing(false, PointFromId(802), StringExternal("Param/Value/E55F989D"));
            gv_friendlyGhostPings[1] = PingLastCreated();
            libNtve_gf_ShareVisionofUnit(UnitFromId(2030), true, 1);
        }

        if ((gv_friendlyGhostsRescued[2] == false) && (UnitIsAlive(UnitFromId(1089)) == true)) {
            libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(803), 5.0, Color(100.00, 100.00, 0.00));
            libNCMI_gf_CreateObjectivePing(false, PointFromId(803), StringExternal("Param/Value/52C6FC4B"));
            gv_friendlyGhostPings[2] = PingLastCreated();
            libNtve_gf_ShareVisionofUnit(UnitFromId(1089), true, 1);
        }

        if ((gv_friendlyGhostsRescued[3] == false) && (UnitIsAlive(UnitFromId(1147)) == true)) {
            libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(804), 5.0, Color(100.00, 100.00, 0.00));
            libNCMI_gf_CreateObjectivePing(false, PointFromId(804), StringExternal("Param/Value/9A51B079"));
            gv_friendlyGhostPings[3] = PingLastCreated();
            libNtve_gf_ShareVisionofUnit(UnitFromId(1147), true, 1);
        }

        Wait(2.0, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeRescueGhostPings_Init () {
    gt_EscapeRescueGhostPings = TriggerCreate("gt_EscapeRescueGhostPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Gun Turret Hall Defenders
//--------------------------------------------------------------------------------------------------
bool gt_EscapeGunTurretHallDefenders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto5B559C52_g;
    int auto5B559C52_u;
    unit auto5B559C52_var;
    int autoCE89A1AB_ae;
    const int autoCE89A1AB_ai = 1;
    int auto5F65BCF8_ae;
    const int auto5F65BCF8_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto5B559C52_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5B559C52_u = UnitGroupCount(auto5B559C52_g, c_unitCountAll);
    for (;; auto5B559C52_u -= 1) {
        auto5B559C52_var = UnitGroupUnitFromEnd(auto5B559C52_g, auto5B559C52_u);
        if (auto5B559C52_var == null) { break; }
        lv_i += 1;
        if ((lv_i <= 63)) {
            gv_hallDefenders[lv_i].lv_unit = auto5B559C52_var;
            gv_hallDefenders[lv_i].lv_position = UnitGetPosition(auto5B559C52_var);
            UnitGroupAdd(gv_turretHallDefenderGroup, auto5B559C52_var);
        }
        else {
            lv_i = 63;
        }
    }
    gv_hallDefenderCount = lv_i;
    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 1))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_turretHallDefenderGroup) == true)) {
            if ((UnitIsAlive(UnitFromId(727)) == true) && (libNtve_gf_UnitGroupIsDead(gv_turretHallDefenderGroup) == true)) {
                UnitIssueOrder(UnitFromId(727), Order(AbilityCommand("GunTurretBurrow", 0)), c_orderQueueReplace);
            }

            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(RegionGetCenter(RegionFromId(55)), 9.0)) == true)) {
            auto5F65BCF8_ae = gv_hallDefenderCount;
            lv_i = 1;
            for ( ; ( (auto5F65BCF8_ai >= 0 && lv_i <= auto5F65BCF8_ae) || (auto5F65BCF8_ai < 0 && lv_i >= auto5F65BCF8_ae) ) ; lv_i += auto5F65BCF8_ai ) {
                if ((UnitIsAlive(gv_hallDefenders[lv_i].lv_unit) == true)) {
                    if ((UnitIsAlive(UnitFromId(727)) == true)) {
                        UnitIssueOrder(gv_hallDefenders[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
                    }

                }

            }
        }
        else {
            autoCE89A1AB_ae = gv_hallDefenderCount;
            lv_i = 1;
            for ( ; ( (autoCE89A1AB_ai >= 0 && lv_i <= autoCE89A1AB_ae) || (autoCE89A1AB_ai < 0 && lv_i >= autoCE89A1AB_ae) ) ; lv_i += autoCE89A1AB_ai ) {
                if ((UnitIsAlive(gv_hallDefenders[lv_i].lv_unit) == true)) {
                    if ((libNtve_gf_UnitInRegion(gv_hallDefenders[lv_i].lv_unit, RegionCircle(gv_hallDefenders[lv_i].lv_position, 1.0)) == false)) {
                        UnitIssueOrder(gv_hallDefenders[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_hallDefenders[lv_i].lv_position), c_orderQueueReplace);
                    }

                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeGunTurretHallDefenders_Init () {
    gt_EscapeGunTurretHallDefenders = TriggerCreate("gt_EscapeGunTurretHallDefenders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Flame Turrets
//--------------------------------------------------------------------------------------------------
bool gt_EscapeFlameTurrets_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7122EEB3_g;
    int auto7122EEB3_u;
    unit auto7122EEB3_var;
    string autoDF58B7B7_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 1) || (libNtve_gf_UnitGroupIsDead(gv_flameTurretGroup) == true))) {
            return true;
        }

        auto7122EEB3_g = gv_flameTurretGroup;
        auto7122EEB3_u = UnitGroupCount(auto7122EEB3_g, c_unitCountAll);
        for (;; auto7122EEB3_u -= 1) {
            auto7122EEB3_var = UnitGroupUnitFromEnd(auto7122EEB3_g, auto7122EEB3_u);
            if (auto7122EEB3_var == null) { break; }
            autoDF58B7B7_val = UnitGetType(auto7122EEB3_var);
            if (autoDF58B7B7_val == "FlameTurretFCWUnderground") {
                if ((UnitGetPropertyFixed(auto7122EEB3_var, c_unitPropLifePercent, c_unitPropCurrent) > 99.0) && (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(auto7122EEB3_var), 12.0)) == true) && (gf_AFriendlyGhostisinRegion(RegionCircle(UnitGetPosition(auto7122EEB3_var), 6.0)) == false)) {
                    UnitIssueOrder(auto7122EEB3_var, Order(AbilityCommand("FlameTurretFCW", 0)), c_orderQueueReplace);
                }

            }
            else if (autoDF58B7B7_val == "FlameTurretFCCWUnderground") {
                if ((UnitGetPropertyFixed(auto7122EEB3_var, c_unitPropLifePercent, c_unitPropCurrent) > 99.0) && (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(auto7122EEB3_var), 12.0)) == true) && (gf_AFriendlyGhostisinRegion(RegionCircle(UnitGetPosition(auto7122EEB3_var), 6.0)) == false)) {
                    UnitIssueOrder(auto7122EEB3_var, Order(AbilityCommand("FlameTurretFCCW", 0)), c_orderQueueReplace);
                }

            }
            else if (autoDF58B7B7_val == "FlameTurretSCWUnderground") {
                if ((UnitGetPropertyFixed(auto7122EEB3_var, c_unitPropLifePercent, c_unitPropCurrent) > 99.0) && (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(auto7122EEB3_var), 12.0)) == true) && (gf_AFriendlyGhostisinRegion(RegionCircle(UnitGetPosition(auto7122EEB3_var), 6.0)) == false)) {
                    UnitIssueOrder(auto7122EEB3_var, Order(AbilityCommand("FlameTurretSCW", 0)), c_orderQueueReplace);
                }

            }
            else if (autoDF58B7B7_val == "FlameTurretSCCWUnderground") {
                if ((UnitGetPropertyFixed(auto7122EEB3_var, c_unitPropLifePercent, c_unitPropCurrent) > 99.0) && (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(auto7122EEB3_var), 12.0)) == true) && (gf_AFriendlyGhostisinRegion(RegionCircle(UnitGetPosition(auto7122EEB3_var), 6.0)) == false)) {
                    UnitIssueOrder(auto7122EEB3_var, Order(AbilityCommand("FlameTurretSCCW", 0)), c_orderQueueReplace);
                }

            }
            else if (autoDF58B7B7_val == "FlameTurretFCW") {
                if (((UnitGetPropertyFixed(auto7122EEB3_var, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(auto7122EEB3_var), 12.0)) == false))) {
                    UnitIssueOrder(auto7122EEB3_var, Order(AbilityCommand("FlameTurretFCWUnderground", 0)), c_orderQueueReplace);
                    gf_HealTurret(auto7122EEB3_var);
                }

            }
            else if (autoDF58B7B7_val == "FlameTurretFCCW") {
                if (((UnitGetPropertyFixed(auto7122EEB3_var, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(auto7122EEB3_var), 12.0)) == false))) {
                    UnitIssueOrder(auto7122EEB3_var, Order(AbilityCommand("FlameTurretFCCWUnderground", 0)), c_orderQueueReplace);
                    gf_HealTurret(auto7122EEB3_var);
                }

            }
            else if (autoDF58B7B7_val == "FlameTurretSCW") {
                if (((UnitGetPropertyFixed(auto7122EEB3_var, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(auto7122EEB3_var), 12.0)) == false))) {
                    UnitIssueOrder(auto7122EEB3_var, Order(AbilityCommand("FlameTurretSCWUnderground", 0)), c_orderQueueReplace);
                    gf_HealTurret(auto7122EEB3_var);
                }

            }
            else if (autoDF58B7B7_val == "FlameTurretSCCW") {
                if (((UnitGetPropertyFixed(auto7122EEB3_var, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(auto7122EEB3_var), 12.0)) == false))) {
                    UnitIssueOrder(auto7122EEB3_var, Order(AbilityCommand("FlameTurretSCCWUnderground", 0)), c_orderQueueReplace);
                    gf_HealTurret(auto7122EEB3_var);
                }

            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeFlameTurrets_Init () {
    gt_EscapeFlameTurrets = TriggerCreate("gt_EscapeFlameTurrets_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Rescued Ghost AI
//--------------------------------------------------------------------------------------------------
bool gt_EscapeRescuedGhostAI_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup lv_validEnemies;
    int lv_i;
    timer[4] lv_snipeCooldowns;
    bool lv_ghostAlive;

    // Automatic Variable Declarations
    const int autoA837FD34_ae = 3;
    const int autoA837FD34_ai = 1;
    const int auto3781ECFC_ae = 3;
    const int auto3781ECFC_ai = 1;
    unitgroup autoE5D8D64A_g;
    int autoE5D8D64A_u;
    unit autoE5D8D64A_var;
    const int auto1D41EDEF_ae = 3;
    const int auto1D41EDEF_ai = 1;
    int auto2F8E550A_val;
    int autoC419F925_val;
    int autoA4512F01_val;
    const int autoB0AEC1BB_ae = 3;
    const int autoB0AEC1BB_ai = 1;
    unitgroup auto34B424B5_g;
    int auto34B424B5_u;
    unit auto34B424B5_var;

    // Variable Initialization
    lv_validEnemies = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_snipeCooldowns[init_i] = TimerCreate();
    }

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_i = 1;
    for ( ; ( (autoA837FD34_ai >= 0 && lv_i <= autoA837FD34_ae) || (autoA837FD34_ai < 0 && lv_i >= autoA837FD34_ae) ) ; lv_i += autoA837FD34_ai ) {
        TimerStart(lv_snipeCooldowns[lv_i], 1.0, false, c_timeAI);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 1))) {
            return true;
        }

        lv_ghostAlive = false;
        lv_i = 1;
        for ( ; ( (auto3781ECFC_ai >= 0 && lv_i <= auto3781ECFC_ae) || (auto3781ECFC_ai < 0 && lv_i >= auto3781ECFC_ae) ) ; lv_i += auto3781ECFC_ai ) {
            if ((gv_rescuedGhosts[lv_i] != null) && (UnitIsAlive(gv_rescuedGhosts[lv_i]) == true)) {
                lv_ghostAlive = true;
                break;
            }

        }
        if ((lv_ghostAlive == false)) {
            continue;
        }

        lv_validEnemies = UnitGroupEmpty();
        autoE5D8D64A_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_artanis), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoE5D8D64A_u = UnitGroupCount(autoE5D8D64A_g, c_unitCountAll);
        for (;; autoE5D8D64A_u -= 1) {
            autoE5D8D64A_var = UnitGroupUnitFromEnd(autoE5D8D64A_g, autoE5D8D64A_u);
            if (autoE5D8D64A_var == null) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(autoE5D8D64A_var, gv_pLAYER_01_USER) == true)) {
                UnitGroupAdd(lv_validEnemies, autoE5D8D64A_var);
            }

        }
        lv_i = 1;
        for ( ; ( (auto1D41EDEF_ai >= 0 && lv_i <= auto1D41EDEF_ae) || (auto1D41EDEF_ai < 0 && lv_i >= auto1D41EDEF_ae) ) ; lv_i += auto1D41EDEF_ai ) {
            if ((gv_rescuedGhosts[lv_i] != null) && (UnitIsAlive(gv_rescuedGhosts[lv_i]) == true)) {
                if (((libNtve_gf_UnitInRegion(gv_rescuedGhosts[lv_i], RegionFromId(67)) == true) || (libNtve_gf_UnitInRegion(gv_rescuedGhosts[lv_i], RegionFromId(74)) == true) || (libNtve_gf_UnitInRegion(gv_rescuedGhosts[lv_i], RegionFromId(75)) == true) || (libNtve_gf_UnitInRegion(gv_rescuedGhosts[lv_i], RegionFromId(76)) == true))) {
                    if (((libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(67)) == true) || (libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(74)) == true) || (libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(75)) == true) || (libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(76)) == true))) {
                        if ((libNtve_gf_UnitInRegion(gv_rescuedGhosts[lv_i], RegionCircle(UnitGetPosition(gv_artanis), 2.5)) == false)) {
                            auto2F8E550A_val = lv_i;
                            if (auto2F8E550A_val == 1) {
                                UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_artanis), RandomFixed(1.5, 2.0), AngleBetweenPoints(UnitGetPosition(gv_artanis), UnitGetPosition(gv_rescuedGhosts[lv_i])))), c_orderQueueReplace);
                            }
                            else if (auto2F8E550A_val == 2) {
                                UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_artanis), RandomFixed(1.5, 2.0), (AngleBetweenPoints(UnitGetPosition(gv_artanis), UnitGetPosition(gv_rescuedGhosts[lv_i])) + 20.0))), c_orderQueueReplace);
                            }
                            else if (auto2F8E550A_val == 3) {
                                UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_artanis), RandomFixed(1.5, 2.0), (AngleBetweenPoints(UnitGetPosition(gv_artanis), UnitGetPosition(gv_rescuedGhosts[lv_i])) - 20.0))), c_orderQueueReplace);
                            }
                            else {
                            }
                        }

                    }
                    else {
                        autoC419F925_val = lv_i;
                        if (autoC419F925_val == 1) {
                            UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_artanis), RandomFixed(-1.5, -2.0), AngleBetweenPoints(UnitGetPosition(gv_artanis), UnitGetPosition(gv_rescuedGhosts[lv_i])))), c_orderQueueReplace);
                        }
                        else if (autoC419F925_val == 2) {
                            UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_artanis), RandomFixed(-1.5, -2.0), (AngleBetweenPoints(UnitGetPosition(gv_artanis), UnitGetPosition(gv_rescuedGhosts[lv_i])) + 20.0))), c_orderQueueReplace);
                        }
                        else if (autoC419F925_val == 3) {
                            UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_artanis), RandomFixed(-1.5, -2.0), (AngleBetweenPoints(UnitGetPosition(gv_artanis), UnitGetPosition(gv_rescuedGhosts[lv_i])) - 20.0))), c_orderQueueReplace);
                        }
                        else {
                        }
                    }
                }
                else {
                    if ((UnitGroupCount(lv_validEnemies, c_unitCountAlive) > 0)) {
                        UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_validEnemies, UnitGetPosition(gv_rescuedGhosts[lv_i])))), c_orderQueueReplace);
                    }
                    else {
                        if ((libNtve_gf_UnitInRegion(gv_rescuedGhosts[lv_i], RegionCircle(UnitGetPosition(gv_artanis), 4.0)) == false)) {
                            autoA4512F01_val = lv_i;
                            if (autoA4512F01_val == 1) {
                                UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_artanis), RandomFixed(2.0, 3.0), AngleBetweenPoints(UnitGetPosition(gv_artanis), UnitGetPosition(gv_rescuedGhosts[lv_i])))), c_orderQueueReplace);
                            }
                            else if (autoA4512F01_val == 2) {
                                UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_artanis), RandomFixed(2.0, 3.0), (AngleBetweenPoints(UnitGetPosition(gv_artanis), UnitGetPosition(gv_rescuedGhosts[lv_i])) + 20.0))), c_orderQueueReplace);
                            }
                            else if (autoA4512F01_val == 3) {
                                UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_artanis), RandomFixed(2.0, 3.0), (AngleBetweenPoints(UnitGetPosition(gv_artanis), UnitGetPosition(gv_rescuedGhosts[lv_i])) - 20.0))), c_orderQueueReplace);
                            }
                            else {
                            }
                        }

                    }
                }
            }

        }
        lv_i = 1;
        for ( ; ( (autoB0AEC1BB_ai >= 0 && lv_i <= autoB0AEC1BB_ae) || (autoB0AEC1BB_ai < 0 && lv_i >= autoB0AEC1BB_ae) ) ; lv_i += autoB0AEC1BB_ai ) {
            if ((gv_rescuedGhosts[lv_i] != null) && (UnitIsAlive(gv_rescuedGhosts[lv_i]) == true) && (TimerGetRemaining(lv_snipeCooldowns[lv_i]) < 1) && (UnitGetPropertyFixed(gv_rescuedGhosts[lv_i], c_unitPropEnergy, c_unitPropCurrent) >= 25.0)) {
                lv_validEnemies = UnitGroupEmpty();
                auto34B424B5_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(gv_rescuedGhosts[lv_i]), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                auto34B424B5_u = UnitGroupCount(auto34B424B5_g, c_unitCountAll);
                for (;; auto34B424B5_u -= 1) {
                    auto34B424B5_var = UnitGroupUnitFromEnd(auto34B424B5_g, auto34B424B5_u);
                    if (auto34B424B5_var == null) { break; }
                    if ((libNtve_gf_UnitIsVisibleToPlayer(auto34B424B5_var, gv_pLAYER_02_DOMINION2) == true)) {
                        UnitGroupAdd(lv_validEnemies, auto34B424B5_var);
                    }

                }
                if ((UnitGroupCount(lv_validEnemies, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(gv_rescuedGhosts[lv_i], OrderTargetingUnit(AbilityCommand("Snipe", 0), UnitGroupClosestToPoint(lv_validEnemies, UnitGetPosition(gv_rescuedGhosts[lv_i]))), c_orderQueueAddToFront);
                    TimerStart(lv_snipeCooldowns[lv_i], 8.0, false, c_timeAI);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeRescuedGhostAI_Init () {
    gt_EscapeRescuedGhostAI = TriggerCreate("gt_EscapeRescuedGhostAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Delta Rescue
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDeltaRescue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_trooperGroup;
    unit lv_friendlyGhost;
    unit lv_enemyGhost;
    timer lv_friendlySnipeCooldown;
    bool lv_failed;
    bool lv_ghostReady;

    // Automatic Variable Declarations
    unitgroup auto6C36E68B_g;
    int auto6C36E68B_u;
    unit auto6C36E68B_var;
    unitgroup auto4A1408B0_g;
    int auto4A1408B0_u;
    unit auto4A1408B0_var;

    // Variable Initialization
    lv_trooperGroup = UnitGroupEmpty();
    lv_friendlySnipeCooldown = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueGhostsCreate, true, false);
    TriggerExecute(gt_EscapeRescueGhostPings, true, false);
    TriggerExecute(gt_EscapeExecuteDeltaQ, true, false);
    lv_friendlyGhost = UnitFromId(2030);
    lv_enemyGhost = UnitFromId(889);
    lv_trooperGroup = UnitGroup("Separatist", gv_pLAYER_02_DOMINION, RegionFromId(72), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TimerStart(lv_friendlySnipeCooldown, 1.0, false, c_timeAI);
    if ((UnitIsAlive(lv_friendlyGhost) == true) && (UnitIsAlive(lv_enemyGhost) == true)) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(78), lv_enemyGhost, PointFromId(327));
        auto6C36E68B_g = lv_trooperGroup;
        auto6C36E68B_u = UnitGroupCount(auto6C36E68B_g, c_unitCountAll);
        for (;; auto6C36E68B_u -= 1) {
            auto6C36E68B_var = UnitGroupUnitFromEnd(auto6C36E68B_g, auto6C36E68B_u);
            if (auto6C36E68B_var == null) { break; }
            libNCMI_gf_StealthAISetStealthAIUnitState(auto6C36E68B_var, libNCMI_ge_StealthAIUnitState_Unavailable);
            UnitIssueOrder(auto6C36E68B_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(PointFromId(327), 3.0))), c_orderQueueReplace);
        }
    }

    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 1) || (gv_destruction4Triggered == true))) {
            PingDestroy(gv_friendlyGhostPings[1]);
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_trooperGroup) == true) && (UnitIsAlive(lv_enemyGhost) == false) && (UnitIsAlive(lv_friendlyGhost) == false)) {
            PingDestroy(gv_friendlyGhostPings[1]);
            if ((gv_sideAreasTriggered[1] == 0)) {
                gv_sideAreasTriggered[1] = 1;
            }

            return true;
        }

        if ((lv_failed == false) && (gv_friendlyGhostsRescued[1] == false) && (UnitIsAlive(lv_friendlyGhost) == false)) {
            lv_failed = true;
            PingDestroy(gv_friendlyGhostPings[1]);
            if ((gv_sideAreasTriggered[1] == 0)) {
                gv_sideAreasTriggered[1] = 1;
            }

            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(78), lv_enemyGhost, PointFromId(2325));
            auto4A1408B0_g = lv_trooperGroup;
            auto4A1408B0_u = UnitGroupCount(auto4A1408B0_g, c_unitCountAll);
            for (;; auto4A1408B0_u -= 1) {
                auto4A1408B0_var = UnitGroupUnitFromEnd(auto4A1408B0_g, auto4A1408B0_u);
                if (auto4A1408B0_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto4A1408B0_var, "AnimGroupApply Work");
                libNCMI_gf_StealthAISetStealthAIUnitState(auto4A1408B0_var, libNCMI_ge_StealthAIUnitState_Idle);
            }
        }

        if ((lv_ghostReady == false) && (UnitIsAlive(lv_friendlyGhost) == true) && (UnitIsAlive(gv_artanis) == true) && (UnitIsAlive(lv_enemyGhost) == false)) {
            lv_ghostReady = true;
            UnitIssueOrder(lv_friendlyGhost, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1272)), c_orderQueueReplace);
            UnitIssueOrder(lv_friendlyGhost, OrderTargetingUnit(AbilityCommand("move", 4), gv_artanis), c_orderQueueAddToEnd);
        }

        if ((gv_friendlyGhostsRescued[1] == false) && (lv_failed == false) && (UnitIsAlive(lv_friendlyGhost) == true) && (UnitIsAlive(lv_enemyGhost) == false) && (libNtve_gf_UnitGroupIsDead(lv_trooperGroup) == true) && (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(lv_friendlyGhost), 12.0)) == true)) {
            gv_friendlyGhostsRescued[1] = true;
            SoundPlayForPlayer(SoundLink("GhostRescued", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            UnitFlashSelection(lv_friendlyGhost, 5.0);
            PingDestroy(gv_friendlyGhostPings[1]);
            gv_ghostsRescuedCount += 1;
            gv_rescuedGhosts[1] = lv_friendlyGhost;
            UnitSetPropertyFixed(gv_rescuedGhosts[1], c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(gv_rescuedGhosts[1], c_unitPropEnergyPercent, 100.0);
            TriggerExecute(gt_ObjectiveRescueGhostsUpdate, true, false);
            TriggerExecute(gt_EscapeDeltaRescueSuccessQ, true, false);
            if ((gv_sideAreasTriggered[1] == 0)) {
                gv_sideAreasTriggered[1] = 1;
            }

            return true;
        }

        if ((UnitIsAlive(lv_friendlyGhost) == true) && (UnitGetPropertyFixed(lv_friendlyGhost, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) && (TimerGetRemaining(lv_friendlySnipeCooldown) < 1) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(lv_friendlyGhost), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_friendlyGhost, OrderTargetingUnit(AbilityCommand("Snipe", 0), UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(lv_friendlyGhost), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_friendlyGhost))), c_orderQueueAddToFront);
            TimerStart(lv_friendlySnipeCooldown, 8.0, false, c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDeltaRescue_Init () {
    gt_EscapeDeltaRescue = TriggerCreate("gt_EscapeDeltaRescue_Func");
    TriggerAddEventUnitRegion(gt_EscapeDeltaRescue, UnitRefFromVariable("gv_artanis"), RegionFromId(73), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Execute Delta Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeExecuteDeltaQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(889)) == true) && (UnitIsAlive(UnitFromId(2030)) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(889), "Mission_Nova01|Line00096", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeExecuteDeltaQ_Init () {
    gt_EscapeExecuteDeltaQ = TriggerCreate("gt_EscapeExecuteDeltaQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Delta Rescue Success Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDeltaRescueSuccessQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    if ((gv_currentSection == 1) && (UnitIsAlive(gv_rescuedGhosts[1]) == true) && (UnitIsAlive(gv_artanis) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_rescuedGhosts[1], "Mission_Nova01|Line00035", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00031", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_rescuedGhosts[1], "Mission_Nova01|Line00099", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDeltaRescueSuccessQ_Init () {
    gt_EscapeDeltaRescueSuccessQ = TriggerCreate("gt_EscapeDeltaRescueSuccessQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Pierce Rescue
//--------------------------------------------------------------------------------------------------
bool gt_EscapePierceRescue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_RECORD_ResearchBayDefenders[16] lv_enemyUnits;
    int lv_enemyUnitsCount;
    unit lv_friendlyGhost;
    timer lv_friendlySnipeCooldown;
    bool lv_failed;
    int lv_i;
    bool lv_ghostReady;

    // Automatic Variable Declarations
    unitgroup auto0DD5783E_g;
    int auto0DD5783E_u;
    unit auto0DD5783E_var;
    unitgroup auto1F5E68FA_g;
    int auto1F5E68FA_u;
    unit auto1F5E68FA_var;
    int autoB2A740E1_ae;
    const int autoB2A740E1_ai = 1;
    int autoA0A4D936_ae;
    const int autoA0A4D936_ai = 1;

    // Variable Initialization
    lv_friendlySnipeCooldown = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueGhostsCreate, true, false);
    TriggerExecute(gt_EscapeRescueGhostPings, true, false);
    TriggerExecute(gt_EscapePierceNearbyQ, true, false);
    lv_friendlyGhost = UnitFromId(1089);
    auto0DD5783E_g = UnitGroup("Separatist", gv_pLAYER_02_DOMINION, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0DD5783E_u = UnitGroupCount(auto0DD5783E_g, c_unitCountAll);
    for (;; auto0DD5783E_u -= 1) {
        auto0DD5783E_var = UnitGroupUnitFromEnd(auto0DD5783E_g, auto0DD5783E_u);
        if (auto0DD5783E_var == null) { break; }
        lv_enemyUnitsCount += 1;
        if ((lv_enemyUnitsCount <= 15)) {
            lv_enemyUnits[lv_enemyUnitsCount].lv_unit = auto0DD5783E_var;
            lv_enemyUnits[lv_enemyUnitsCount].lv_position = UnitGetPosition(auto0DD5783E_var);
            UnitGroupAdd(gv_pierceTurretDefenderGroup, auto0DD5783E_var);
        }
        else {
            lv_enemyUnitsCount = 15;
        }
    }
    auto1F5E68FA_g = UnitGroup("Marauder", gv_pLAYER_02_DOMINION, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1F5E68FA_u = UnitGroupCount(auto1F5E68FA_g, c_unitCountAll);
    for (;; auto1F5E68FA_u -= 1) {
        auto1F5E68FA_var = UnitGroupUnitFromEnd(auto1F5E68FA_g, auto1F5E68FA_u);
        if (auto1F5E68FA_var == null) { break; }
        lv_enemyUnitsCount += 1;
        if ((lv_enemyUnitsCount <= 15)) {
            lv_enemyUnits[lv_enemyUnitsCount].lv_unit = auto1F5E68FA_var;
            lv_enemyUnits[lv_enemyUnitsCount].lv_position = UnitGetPosition(auto1F5E68FA_var);
            UnitGroupAdd(gv_pierceTurretDefenderGroup, auto1F5E68FA_var);
        }
        else {
            lv_enemyUnitsCount = 15;
        }
    }
    TimerStart(lv_friendlySnipeCooldown, 1.0, false, c_timeAI);
    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 1) || (gv_destruction4Triggered == true))) {
            PingDestroy(gv_friendlyGhostPings[2]);
            return true;
        }

        if ((UnitIsAlive(UnitFromId(1088)) == true) && (libNtve_gf_UnitGroupIsDead(gv_pierceTurretDefenderGroup) == true)) {
            UnitIssueOrder(UnitFromId(1088), Order(AbilityCommand("GunTurretBurrow", 0)), c_orderQueueReplace);
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_pierceTurretDefenderGroup) == true) && (UnitIsAlive(lv_friendlyGhost) == false)) {
            PingDestroy(gv_friendlyGhostPings[2]);
            if ((gv_sideAreasTriggered[2] == 0)) {
                gv_sideAreasTriggered[2] = 1;
            }

            return true;
        }

        if ((lv_failed == false) && (gv_friendlyGhostsRescued[2] == false) && (UnitIsAlive(lv_friendlyGhost) == false)) {
            lv_failed = true;
            PingDestroy(gv_friendlyGhostPings[2]);
            if ((gv_sideAreasTriggered[2] == 0)) {
                gv_sideAreasTriggered[2] = 1;
            }

        }

        if ((lv_ghostReady == false) && (UnitIsAlive(lv_friendlyGhost) == true) && (UnitIsAlive(gv_artanis) == true) && ((libNtve_gf_UnitGroupIsDead(gv_pierceTurretDefenderGroup) == true) || (UnitIsAlive(UnitFromId(1088)) == false))) {
            lv_ghostReady = true;
            UnitIssueOrder(lv_friendlyGhost, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1271)), c_orderQueueReplace);
            UnitIssueOrder(lv_friendlyGhost, OrderTargetingUnit(AbilityCommand("move", 4), gv_artanis), c_orderQueueAddToEnd);
        }

        if ((gv_friendlyGhostsRescued[2] == false) && (lv_failed == false) && (UnitIsAlive(lv_friendlyGhost) == true) && (libNtve_gf_UnitGroupIsDead(gv_pierceTurretDefenderGroup) == true) && (libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(lv_friendlyGhost), 12.0)) == true)) {
            gv_friendlyGhostsRescued[2] = true;
            SoundPlayForPlayer(SoundLink("GhostRescued", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            UnitFlashSelection(lv_friendlyGhost, 5.0);
            PingDestroy(gv_friendlyGhostPings[2]);
            gv_ghostsRescuedCount += 1;
            gv_rescuedGhosts[2] = lv_friendlyGhost;
            UnitSetPropertyFixed(gv_rescuedGhosts[2], c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(gv_rescuedGhosts[2], c_unitPropEnergyPercent, 100.0);
            TriggerExecute(gt_ObjectiveRescueGhostsUpdate, true, false);
            TriggerExecute(gt_EscapePierceRescueSuccessQ, true, false);
            if ((gv_sideAreasTriggered[2] == 0)) {
                gv_sideAreasTriggered[2] = 1;
            }

            return true;
        }

        if ((libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(100)) == true)) {
            autoA0A4D936_ae = lv_enemyUnitsCount;
            lv_i = 1;
            for ( ; ( (autoA0A4D936_ai >= 0 && lv_i <= autoA0A4D936_ae) || (autoA0A4D936_ai < 0 && lv_i >= autoA0A4D936_ae) ) ; lv_i += autoA0A4D936_ai ) {
                if ((UnitIsAlive(lv_enemyUnits[lv_i].lv_unit) == true)) {
                    UnitIssueOrder(lv_enemyUnits[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
                }

            }
        }
        else {
            autoB2A740E1_ae = lv_enemyUnitsCount;
            lv_i = 1;
            for ( ; ( (autoB2A740E1_ai >= 0 && lv_i <= autoB2A740E1_ae) || (autoB2A740E1_ai < 0 && lv_i >= autoB2A740E1_ae) ) ; lv_i += autoB2A740E1_ai ) {
                if ((UnitIsAlive(lv_enemyUnits[lv_i].lv_unit) == true)) {
                    if ((libNtve_gf_UnitInRegion(lv_enemyUnits[lv_i].lv_unit, RegionFromId(76)) == true)) {
                        UnitIssueOrder(lv_enemyUnits[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_enemyUnits[lv_i].lv_position), c_orderQueueReplace);
                    }
                    else {
                        if ((libNtve_gf_UnitInRegion(lv_enemyUnits[lv_i].lv_unit, RegionCircle(lv_enemyUnits[lv_i].lv_position, 1.0)) == false) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_enemyUnits[lv_i].lv_unit), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                            UnitIssueOrder(lv_enemyUnits[lv_i].lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_enemyUnits[lv_i].lv_position), c_orderQueueReplace);
                        }

                    }
                }

            }
        }
        if ((UnitIsAlive(lv_friendlyGhost) == true) && (UnitGetPropertyFixed(lv_friendlyGhost, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) && (TimerGetRemaining(lv_friendlySnipeCooldown) < 1) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(lv_friendlyGhost), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_friendlyGhost, OrderTargetingUnit(AbilityCommand("Snipe", 0), UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(lv_friendlyGhost), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_friendlyGhost))), c_orderQueueAddToFront);
            TimerStart(lv_friendlySnipeCooldown, 8.0, false, c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapePierceRescue_Init () {
    gt_EscapePierceRescue = TriggerCreate("gt_EscapePierceRescue_Func");
    TriggerAddEventUnitRegion(gt_EscapePierceRescue, UnitRefFromVariable("gv_artanis"), RegionFromId(99), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Pierce Nearby Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapePierceNearbyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(1089)) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(1089), "Mission_Nova01|Line00067", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapePierceNearbyQ_Init () {
    gt_EscapePierceNearbyQ = TriggerCreate("gt_EscapePierceNearbyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Pierce Rescue Success Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapePierceRescueSuccessQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    if ((gv_currentSection == 1) && (UnitIsAlive(gv_rescuedGhosts[2]) == true) && (UnitIsAlive(gv_artanis) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_rescuedGhosts[2], "Mission_Nova01|Line00032", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00033", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapePierceRescueSuccessQ_Init () {
    gt_EscapePierceRescueSuccessQ = TriggerCreate("gt_EscapePierceRescueSuccessQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Destruction 103 Trigger
//--------------------------------------------------------------------------------------------------
bool gt_EscapeDestruction103Trigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_sideAreasTriggered[3] == 0))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_sideAreasTriggered[3] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeDestruction103Trigger_Init () {
    gt_EscapeDestruction103Trigger = TriggerCreate("gt_EscapeDestruction103Trigger_Func");
    TriggerAddEventUnitRegion(gt_EscapeDestruction103Trigger, UnitRefFromVariable("gv_artanis"), RegionFromId(125), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Cliff Marauders Left
//--------------------------------------------------------------------------------------------------
bool gt_EscapeCliffMaraudersLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_02_DOMINION, PointFromId(2437));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1012)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_02_DOMINION, PointFromId(2438));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1018)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }

    Wait(1.5, c_timeAI);
    libLbty_gf_AutoRevealRegion(RegionFromId(86), RegionFromId(96), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeCliffMaraudersLeft_Init () {
    gt_EscapeCliffMaraudersLeft = TriggerCreate("gt_EscapeCliffMaraudersLeft_Func");
    TriggerAddEventUnitRegion(gt_EscapeCliffMaraudersLeft, UnitRefFromVariable("gv_artanis"), RegionFromId(74), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Cliff Marauders Right
//--------------------------------------------------------------------------------------------------
bool gt_EscapeCliffMaraudersRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_02_DOMINION, PointFromId(2439));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1013)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_02_DOMINION, PointFromId(2440));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1019)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }

    Wait(1.5, c_timeAI);
    libLbty_gf_AutoRevealRegion(RegionFromId(178), RegionFromId(181), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeCliffMaraudersRight_Init () {
    gt_EscapeCliffMaraudersRight = TriggerCreate("gt_EscapeCliffMaraudersRight_Func");
    TriggerAddEventUnitRegion(gt_EscapeCliffMaraudersRight, UnitRefFromVariable("gv_artanis"), RegionFromId(75), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Final Battle
//--------------------------------------------------------------------------------------------------
bool gt_EscapeFinalBattle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB016F35A_g;
    int autoB016F35A_u;
    unit autoB016F35A_var;
    unitgroup autoE10407F1_g;
    int autoE10407F1_u;
    unit autoE10407F1_var;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_finalBattleStarted == false)) {
        gv_finalBattleStarted = true;
        if ((UnitIsAlive(UnitFromId(1148)) == true)) {
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(28), UnitFromId(1148), PointFromId(2067));
        }

        if ((UnitIsAlive(UnitFromId(1221)) == true)) {
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(28), UnitFromId(1221), PointFromId(2288));
        }

        if ((UnitIsAlive(UnitFromId(1220)) == true)) {
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(28), UnitFromId(1220), PointFromId(2289));
        }

    }

    if ((UnitIsAlive(UnitFromId(1148)) == false) && (UnitIsAlive(UnitFromId(1221)) == false) && (UnitIsAlive(UnitFromId(1220)) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(0.5, c_timeGame);
        while (!(((UnitTestState(gv_artanis, c_unitStateCloaked) == true) || (libNCMI_gf_GameIsOver() == true) || (gv_currentSection != 1)))) {
            Wait(1.0, c_timeGame);
        }
        if ((gv_currentSection == 1) && (libNCMI_gf_GameIsOver() == false)) {
            autoB016F35A_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(28), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB016F35A_u = UnitGroupCount(autoB016F35A_g, c_unitCountAll);
            for (;; autoB016F35A_u -= 1) {
                autoB016F35A_var = UnitGroupUnitFromEnd(autoB016F35A_g, autoB016F35A_u);
                if (autoB016F35A_var == null) { break; }
                libNCMI_gf_StealthAISetStealthAIUnitState(autoB016F35A_var, libNCMI_ge_StealthAIUnitState_Unavailable);
                libNtve_gf_SendActorMessageToUnit(autoB016F35A_var, "AnimGroupApply Work");
            }
            Wait(3.0, c_timeGame);
            autoE10407F1_g = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(28), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoE10407F1_u = UnitGroupCount(autoE10407F1_g, c_unitCountAll);
            for (;; autoE10407F1_u -= 1) {
                autoE10407F1_var = UnitGroupUnitFromEnd(autoE10407F1_g, autoE10407F1_u);
                if (autoE10407F1_var == null) { break; }
                if ((UnitGetType(autoE10407F1_var) == "Separatist")) {
                    UnitBehaviorAddPlayer(autoE10407F1_var, "ColonistWander", gv_pLAYER_02_DOMINION, 1);
                }

            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeFinalBattle_Init () {
    gt_EscapeFinalBattle = TriggerCreate("gt_EscapeFinalBattle_Func");
    TriggerAddEventUnitAbility(gt_EscapeFinalBattle, UnitRefFromUnit(UnitFromId(1148)), AbilityCommand("DOMEMP", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_EscapeFinalBattle, UnitRefFromUnit(UnitFromId(1221)), AbilityCommand("DOMEMP", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_EscapeFinalBattle, UnitRefFromUnit(UnitFromId(1220)), AbilityCommand("DOMEMP", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitDied(gt_EscapeFinalBattle, UnitRefFromUnit(UnitFromId(1148)));
    TriggerAddEventUnitDied(gt_EscapeFinalBattle, UnitRefFromUnit(UnitFromId(1221)));
    TriggerAddEventUnitDied(gt_EscapeFinalBattle, UnitRefFromUnit(UnitFromId(1220)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Stone Rescue
//--------------------------------------------------------------------------------------------------
bool gt_EscapeStoneRescue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_friendlyGhost;
    timer lv_friendlySnipeCooldown;
    bool lv_failed;
    int lv_i;
    timer lv_snipeCooldown;
    bool lv_ghostReady;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_friendlySnipeCooldown = TimerCreate();
    lv_snipeCooldown = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueGhostsCreate, true, false);
    TriggerExecute(gt_EscapeRescueGhostPings, true, false);
    lv_friendlyGhost = UnitFromId(1147);
    while (true) {
        if (((libNCMI_gf_GameIsOver() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 1))) {
            PingDestroy(gv_friendlyGhostPings[3]);
            return true;
        }

        if ((UnitIsAlive(lv_friendlyGhost) == false)) {
            PingDestroy(gv_friendlyGhostPings[3]);
            return true;
        }

        if ((gv_friendlyGhostsRescued[3] == true)) {
            return true;
        }

        if ((lv_failed == false) && (gv_friendlyGhostsRescued[3] == false) && (UnitIsAlive(lv_friendlyGhost) == false)) {
            lv_failed = true;
            PingDestroy(gv_friendlyGhostPings[3]);
        }

        if ((lv_ghostReady == false) && (UnitIsAlive(lv_friendlyGhost) == true) && (UnitIsAlive(gv_artanis) == true)) {
            lv_ghostReady = true;
            UnitIssueOrder(lv_friendlyGhost, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1270)), c_orderQueueReplace);
            UnitIssueOrder(lv_friendlyGhost, OrderTargetingUnit(AbilityCommand("move", 4), gv_artanis), c_orderQueueAddToEnd);
        }

        if ((gv_friendlyGhostsRescued[3] == false) && (lv_failed == false) && (UnitIsAlive(lv_friendlyGhost) == true) && ((libNtve_gf_UnitInRegion(gv_artanis, RegionCircle(UnitGetPosition(lv_friendlyGhost), 12.0)) == true) || (libNtve_gf_UnitInRegion(gv_artanis, RegionFromId(105)) == true))) {
            gv_friendlyGhostsRescued[3] = true;
            SoundPlayForPlayer(SoundLink("GhostRescued", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            UnitFlashSelection(lv_friendlyGhost, 5.0);
            PingDestroy(gv_friendlyGhostPings[3]);
            gv_ghostsRescuedCount += 1;
            gv_rescuedGhosts[3] = lv_friendlyGhost;
            UnitSetPropertyFixed(gv_rescuedGhosts[3], c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(gv_rescuedGhosts[3], c_unitPropEnergyPercent, 100.0);
            TriggerExecute(gt_ObjectiveRescueGhostsUpdate, true, false);
            TriggerExecute(gt_EscapeStoneRescueQ, true, false);
        }

        if ((UnitIsAlive(lv_friendlyGhost) == true) && (UnitGetPropertyFixed(lv_friendlyGhost, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) && (TimerGetRemaining(lv_friendlySnipeCooldown) < 1) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(lv_friendlyGhost), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_friendlyGhost, OrderTargetingUnit(AbilityCommand("Snipe", 0), UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(UnitGetPosition(lv_friendlyGhost), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_friendlyGhost))), c_orderQueueAddToFront);
            TimerStart(lv_friendlySnipeCooldown, 8.0, false, c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeStoneRescue_Init () {
    gt_EscapeStoneRescue = TriggerCreate("gt_EscapeStoneRescue_Func");
    TriggerAddEventUnitRegion(gt_EscapeStoneRescue, UnitRefFromVariable("gv_artanis"), RegionFromId(104), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Stone Rescue Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeStoneRescueQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    if ((gv_currentSection == 1) && (UnitIsAlive(gv_rescuedGhosts[3]) == true) && (UnitIsAlive(gv_artanis) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (((UnitIsAlive(gv_rescuedGhosts[1]) == true) || (UnitIsAlive(gv_rescuedGhosts[2]) == true))) {
            libNCMI_gf_SendTransmissionCampaign(gv_rescuedGhosts[3], "Mission_Nova01|Line00030", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            if ((UnitIsAlive(gv_rescuedGhosts[1]) == true) && (UnitIsAlive(gv_rescuedGhosts[2]) == true)) {
                libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00034", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
                libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00100", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(gv_rescuedGhosts[3], "Mission_Nova01|Line00101", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00102", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeStoneRescueQ_Init () {
    gt_EscapeStoneRescueQ = TriggerCreate("gt_EscapeStoneRescueQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Friendly Ghost Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeFriendlyGhostDiesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyGhostsKilled_LOCAL;
    point lv_killedGhostPosition;
    timer lv_timerCheck;

    // Automatic Variable Declarations
    int autoBA9D4BC4_val;

    // Variable Initialization
    lv_timerCheck = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Ghost") || (UnitGetType(EventUnit()) == "GhostAlternate")))) {
            return false;
        }

        if (!((gv_friendlyGhostsKilled < 3))) {
            return false;
        }

        if (!((UnitIsAlive(gv_artanis) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_friendlyGhostsKilled += 1;
    lv_friendlyGhostsKilled_LOCAL = gv_friendlyGhostsKilled;
    lv_killedGhostPosition = UnitGetPosition(EventUnit());
    TimerStart(lv_timerCheck, 6.0, false, c_timeReal);
    TriggerQueueEnter();
    if (((UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 1) || (lv_friendlyGhostsKilled_LOCAL != gv_friendlyGhostsKilled) || (DistanceBetweenPoints(UnitGetPosition(gv_artanis), lv_killedGhostPosition) > 15.0) || (TimerGetRemaining(lv_timerCheck) < 1))) {
        return true;
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    autoBA9D4BC4_val = lv_friendlyGhostsKilled_LOCAL;
    if (autoBA9D4BC4_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00069", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBA9D4BC4_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00070", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBA9D4BC4_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00072", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeFriendlyGhostDiesQ_Init () {
    gt_EscapeFriendlyGhostDiesQ = TriggerCreate("gt_EscapeFriendlyGhostDiesQ_Func");
    TriggerAddEventUnitDied(gt_EscapeFriendlyGhostDiesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Complete
//--------------------------------------------------------------------------------------------------
bool gt_EscapeComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }

        if (!((gv_objective_EscapeComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_objective_EscapeComplete = true;
    PingDestroy(gv_escapePing);
    TriggerExecute(gt_ObjectiveEscapeComplete, true, false);
    UnitKill(UnitFromId(1200));
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeComplete_Init () {
    gt_EscapeComplete = TriggerCreate("gt_EscapeComplete_Func");
    TriggerAddEventUnitRegion(gt_EscapeComplete, UnitRefFromVariable("gv_artanis"), RegionFromId(108), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vulture Distance Counter
//--------------------------------------------------------------------------------------------------
bool gt_VultureDistanceCounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberOfTicks;
    fixed lv_tickAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vultureStageDistance = 3840.0;
    gv_vultureStageDuration = (libLotv_gf_DifficultyValueFixed2(238.0, 240.0, 254.0, 268.0) / 60.0);
    lv_numberOfTicks = FixedToInt((gv_vultureStageDuration * (60 * 16)));
    lv_tickAmount = (gv_vultureStageDistance / lv_numberOfTicks);
    DialogCreate(270, 90, c_anchorTopRight, 10, 110, false);
    gv_vultureDistanceDialog = DialogLastCreated();
    DialogSetImageVisible(gv_vultureDistanceDialog, false);
    libNtve_gf_CreateDialogItemImage(gv_vultureDistanceDialog, 200, 80, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame_terr.dds", c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogSetVisible(gv_vultureDistanceDialog, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(gv_vultureDistanceDialog, 260, 45, c_anchorTop, 0, 10, StringExternal("Param/Value/5B8ECC81"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Nova01DistanceMeterTitle", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    TextExpressionSetToken("Param/Expression/C759D4AC", "A", FixedToText(gv_vultureStageDistance, 0));
    libNtve_gf_CreateDialogItemLabel(gv_vultureDistanceDialog, 500, 25, c_anchorBottom, 0, 10, TextExpressionAssemble("Param/Expression/C759D4AC"), Color(100,100,100), false, 2.0);
    gv_vultureDistanceLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_vultureDistanceLabel, "TimerTextBottom", PlayerGroupAll());
    DialogControlSetVisible(gv_vultureDistanceLabel, PlayerGroupAll(), true);
    while ((gv_vultureStageDistance > 0.0)) {
        gv_vultureStageDistance -= lv_tickAmount;
        if ((gv_vultureStageDistance <= 0.0)) {
            gv_vultureStageDistance = 0.0;
            DialogSetVisible(gv_vultureDistanceDialog, PlayerGroupAll(), false);
        }

        TextExpressionSetToken("Param/Expression/4C5B636A", "A", FixedToText(gv_vultureStageDistance, 0));
        libNtve_gf_SetDialogItemText(gv_vultureDistanceLabel, TextExpressionAssemble("Param/Expression/4C5B636A"), PlayerGroupAll());
        Wait(0.0625, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VultureDistanceCounter_Init () {
    gt_VultureDistanceCounter = TriggerCreate("gt_VultureDistanceCounter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stone's Vulture Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_StonesVultureDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_friendlyGhostsKilled += 1;
    gv_stoneVultureDestroyed = true;
    TriggerExecute(gt_StonesVultureDestroyedQ, true, false);
    UnitSetState(gv_stoneVulture, c_unitStateHighlightable, false);
    UnitSetState(gv_stoneVulture, c_unitStateTargetable, false);
    UnitSetState(gv_stoneVulture, c_unitStateStatusBar, false);
    UnitAbilityEnable(gv_stoneVulture, "attack", false);
    UnitSetOwner(gv_stoneVulture, 0, false);
    Wait(1.25, c_timeGame);
    UnitIssueOrder(gv_stoneVulture, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(111))), c_orderQueueReplace);
    while (!(((libNtve_gf_UnitInRegion(gv_stoneVulture, RegionFromId(111)) == true) || (libNCMI_gf_GameIsOver() == true)))) {
        Wait(0.5, c_timeGame);
    }
    if ((libNCMI_gf_GameIsOver() == false)) {
        UnitRemove(gv_stoneVulture);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StonesVultureDestroyed_Init () {
    gt_StonesVultureDestroyed = TriggerCreate("gt_StonesVultureDestroyed_Func");
    TriggerEnable(gt_StonesVultureDestroyed, false);
    TriggerAddEventPlayerEffectUsed(gt_StonesVultureDestroyed, gv_pLAYER_02_DOMINION2, "StoneLowHP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stone's Vulture Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_StonesVultureDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_artanis) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova01|Line00103", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00104", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StonesVultureDestroyedQ_Init () {
    gt_StonesVultureDestroyedQ = TriggerCreate("gt_StonesVultureDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Road Spawns 1
//--------------------------------------------------------------------------------------------------
bool gt_RoadSpawns1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lane;
    string lv_unitType;
    timer lv_civilianVehicleCooldown;
    timer lv_medkitCooldown;
    timer lv_enemyCooldown;
    int lv_medkitSpawnLane;
    int lv_pickupCarCount;
    int lv_medkitSpawnCountup;
    int lv_currentWave;
    int[16] lv_waveVultureCounts;
    int lv_waveMax;

    // Automatic Variable Declarations
    int auto04CABE38_val;

    // Variable Initialization
    lv_civilianVehicleCooldown = TimerCreate();
    lv_medkitCooldown = TimerCreate();
    lv_enemyCooldown = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 0;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 1;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 2;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 3;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 6);
    TimerStart(lv_enemyCooldown, 10.0, false, c_timeAI);
    TimerStart(lv_civilianVehicleCooldown, RandomFixed(3.0, 6.0), false, c_timeAI);
    TimerStart(lv_medkitCooldown, gv_vultureMedKitCooldown, false, c_timeAI);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 2))) {
            return true;
        }

        if ((TimerGetRemaining(lv_civilianVehicleCooldown) < 0.5) && (UnitGroupCount(gv_roadUnits, c_unitCountAlive) < 20)) {
            if ((lv_pickupCarCount > 0)) {
                lv_pickupCarCount -= 1;
                if ((lv_pickupCarCount == 0) && ((UnitGetPropertyFixed(gv_artanis, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || ((UnitIsAlive(gv_stoneVulture) == true) && (UnitGetPropertyFixed(gv_stoneVulture, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)))) {
                    lv_medkitSpawnCountup = 1;
                }

                if ((lv_medkitSpawnLane == ge_PRESET_BMT_Bottom)) {
                    lv_lane = ge_PRESET_BMT_Top;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
            }
            else {
                if ((RandomInt(1, 2) == 1)) {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Top;
                }
            }
            auto04CABE38_val = RandomInt(1, 5);
            if (auto04CABE38_val == 1) {
                lv_unitType = "CargoTruckUnitBarrelsVulturePath";
            }
            else if (auto04CABE38_val == 2) {
                lv_unitType = "CargoTruckUnitFlatbedVulturePath";
            }
            else if (auto04CABE38_val == 3) {
                lv_unitType = "CruiserBikeVulturePath";
            }
            else if (auto04CABE38_val == 4) {
                lv_unitType = "CargoTruckUnitTrailerVulturePath";
            }
            else if (auto04CABE38_val == 5) {
                lv_unitType = "CruiserBikeVulturePath";
            }
            else {
                lv_unitType = "CruiserBikeVulturePath";
            }
            gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_lane, lv_unitType, 0);
            TimerStart(lv_civilianVehicleCooldown, RandomFixed(4.0, 6.0), false, c_timeAI);
            if ((TimerGetRemaining(lv_enemyCooldown) < 2.0)) {
                TimerStart(lv_enemyCooldown, 2.0, false, c_timeAI);
            }

        }

        if (((TimerGetRemaining(lv_medkitCooldown) < 0.5) || (gv_vultureMedKitMissed == true)) && ((UnitGetPropertyFixed(gv_artanis, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || ((UnitIsAlive(gv_stoneVulture) == true) && (UnitGetPropertyFixed(gv_stoneVulture, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)))) {
            if ((RandomInt(1, 2) == 1)) {
                lv_medkitSpawnLane = ge_PRESET_BMT_Bottom;
            }
            else {
                lv_medkitSpawnLane = ge_PRESET_BMT_Top;
            }
            lv_pickupCarCount = 2;
            gv_vultureMedKitMissed = false;
            TimerStart(lv_medkitCooldown, gv_vultureMedKitCooldown, false, c_timeAI);
        }

        if ((lv_medkitSpawnCountup > 0)) {
            lv_medkitSpawnCountup += 1;
        }

        if ((lv_medkitSpawnCountup >= 2)) {
            lv_medkitSpawnCountup = 0;
            gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_medkitSpawnLane, "PickupHealthFullVulturePath", 0);
        }

        if ((TimerGetRemaining(lv_enemyCooldown) < 0.5) && (UnitGroupCount(gv_roadUnits, c_unitCountAlive) < 20)) {
            if ((lv_waveVultureCounts[lv_currentWave] == 0)) {
                lv_currentWave += 1;
            }

            if ((lv_currentWave > lv_waveMax)) {
                gv_remainingMedkitCooldown = TimerGetRemaining(lv_medkitCooldown);
                TriggerExecute(gt_RoadSpawns2, true, false);
                return true;
            }

            if ((lv_waveVultureCounts[lv_currentWave] > 0)) {
                if ((lv_lane == ge_PRESET_BMT_Bottom)) {
                    lv_lane = ge_PRESET_BMT_Top;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
                gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_lane, "GhostVulture", gv_pLAYER_02_DOMINION);
                lv_waveVultureCounts[lv_currentWave] -= 1;
            }

            if ((lv_waveVultureCounts[lv_currentWave] == 0)) {
                TimerStart(lv_enemyCooldown, 9.0, false, c_timeAI);
            }
            else {
                if ((lv_waveVultureCounts[lv_currentWave] >= 2)) {
                    TimerStart(lv_enemyCooldown, 1.0, false, c_timeAI);
                }
                else {
                    TimerStart(lv_enemyCooldown, 2.0, false, c_timeAI);
                }
            }
        }

        if ((lv_currentWave == 2)) {
            TriggerExecute(gt_EnemyVultureQ, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadSpawns1_Init () {
    gt_RoadSpawns1 = TriggerCreate("gt_RoadSpawns1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Road Spawns 2
//--------------------------------------------------------------------------------------------------
bool gt_RoadSpawns2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lane;
    string lv_unitType;
    timer lv_civilianVehicleCooldown;
    timer lv_medkitCooldown;
    timer lv_enemyCooldown;
    timer lv_hellionCooldown;
    int lv_medkitSpawnLane;
    int lv_pickupCarCount;
    int lv_medkitSpawnCountup;
    int lv_currentWave;
    int[16] lv_waveVultureCounts;
    int[16] lv_waveHellionCounts;
    int lv_waveMax;

    // Automatic Variable Declarations
    int auto3DCC1B12_val;

    // Variable Initialization
    lv_civilianVehicleCooldown = TimerCreate();
    lv_medkitCooldown = TimerCreate();
    lv_enemyCooldown = TimerCreate();
    lv_hellionCooldown = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EnemyHellionQ, true, false);
    gv_vultureSequencePhase = 2;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 0;
    lv_waveHellionCounts[lv_waveMax] = 1;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 0;
    lv_waveHellionCounts[lv_waveMax] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    lv_waveHellionCounts[lv_waveMax] = 0;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 2;
    lv_waveHellionCounts[lv_waveMax] = 2;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    lv_waveHellionCounts[lv_waveMax] = 3;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    lv_waveHellionCounts[lv_waveMax] = 4;
    TimerStart(lv_enemyCooldown, (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova01|Line00079", true), c_soundIndexAny)) + 2.0), false, c_timeReal);
    TimerStart(lv_hellionCooldown, 0.5, false, c_timeGame);
    TimerStart(lv_civilianVehicleCooldown, RandomFixed(3.0, 6.0), false, c_timeAI);
    TimerStart(lv_medkitCooldown, gv_remainingMedkitCooldown, false, c_timeAI);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/1D7C41D8"));
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 2))) {
            return true;
        }

        if ((TimerGetRemaining(lv_civilianVehicleCooldown) < 0.5) && (UnitGroupCount(gv_roadUnits, c_unitCountAlive) < 20)) {
            if ((lv_pickupCarCount > 0)) {
                lv_pickupCarCount -= 1;
                if ((lv_pickupCarCount == 0) && ((UnitGetPropertyFixed(gv_artanis, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || ((UnitIsAlive(gv_stoneVulture) == true) && (UnitGetPropertyFixed(gv_stoneVulture, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)))) {
                    lv_medkitSpawnCountup = 1;
                }

                if ((lv_medkitSpawnLane == ge_PRESET_BMT_Bottom)) {
                    lv_lane = ge_PRESET_BMT_Top;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
            }
            else {
                if ((RandomInt(1, 2) == 1)) {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Top;
                }
            }
            auto3DCC1B12_val = RandomInt(1, 5);
            if (auto3DCC1B12_val == 1) {
                lv_unitType = "CargoTruckUnitBarrelsVulturePath";
            }
            else if (auto3DCC1B12_val == 2) {
                lv_unitType = "CargoTruckUnitFlatbedVulturePath";
            }
            else if (auto3DCC1B12_val == 3) {
                lv_unitType = "CruiserBikeVulturePath";
            }
            else if (auto3DCC1B12_val == 4) {
                lv_unitType = "CargoTruckUnitTrailerVulturePath";
            }
            else if (auto3DCC1B12_val == 5) {
                lv_unitType = "CruiserBikeVulturePath";
            }
            else {
                lv_unitType = "CruiserBikeVulturePath";
            }
            gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_lane, lv_unitType, 0);
            TimerStart(lv_civilianVehicleCooldown, RandomFixed(4.0, 6.0), false, c_timeAI);
            if ((TimerGetRemaining(lv_enemyCooldown) < 2.0)) {
                TimerStart(lv_enemyCooldown, 2.0, false, c_timeAI);
            }

        }

        if (((TimerGetRemaining(lv_medkitCooldown) < 0.5) || (gv_vultureMedKitMissed == true)) && ((UnitGetPropertyFixed(gv_artanis, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || ((UnitIsAlive(gv_stoneVulture) == true) && (UnitGetPropertyFixed(gv_stoneVulture, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)))) {
            if ((RandomInt(1, 2) == 1)) {
                lv_medkitSpawnLane = ge_PRESET_BMT_Bottom;
            }
            else {
                lv_medkitSpawnLane = ge_PRESET_BMT_Top;
            }
            lv_pickupCarCount = 2;
            gv_vultureMedKitMissed = false;
            TimerStart(lv_medkitCooldown, gv_vultureMedKitCooldown, false, c_timeAI);
        }

        if ((lv_medkitSpawnCountup > 0)) {
            lv_medkitSpawnCountup += 1;
        }

        if ((lv_medkitSpawnCountup >= 2)) {
            lv_medkitSpawnCountup = 0;
            gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_medkitSpawnLane, "PickupHealthFullVulturePath", 0);
        }

        if ((TimerGetRemaining(lv_enemyCooldown) < 0.5) && (UnitGroupCount(gv_roadUnits, c_unitCountAlive) < 20)) {
            if ((lv_waveVultureCounts[lv_currentWave] == 0) && (lv_waveHellionCounts[lv_currentWave] == 0)) {
                lv_currentWave += 1;
            }

            if ((lv_currentWave > lv_waveMax)) {
                TriggerExecute(gt_RoadSpawns3, true, false);
                return true;
            }

            if ((lv_waveVultureCounts[lv_currentWave] > 0)) {
                if ((lv_lane == ge_PRESET_BMT_Bottom)) {
                    lv_lane = ge_PRESET_BMT_Top;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
                gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_lane, "GhostVulture", gv_pLAYER_02_DOMINION);
                lv_waveVultureCounts[lv_currentWave] -= 1;
            }

            if ((lv_waveHellionCounts[lv_currentWave] > 0) && (TimerGetRemaining(lv_hellionCooldown) < 0.5)) {
                TimerStart(lv_hellionCooldown, 2.0, false, c_timeAI);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionFromId(129), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    lv_lane = ge_PRESET_BMT_Top;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
                gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Left, lv_lane, "HellionVulturePath", gv_pLAYER_02_DOMINION);
                lv_waveHellionCounts[lv_currentWave] -= 1;
            }

            if ((lv_waveVultureCounts[lv_currentWave] == 0) && (lv_waveHellionCounts[lv_currentWave] == 0)) {
                TimerStart(lv_enemyCooldown, 10.0, false, c_timeAI);
            }
            else {
                if ((lv_waveVultureCounts[lv_currentWave] >= 2)) {
                    TimerStart(lv_enemyCooldown, 1.0, false, c_timeAI);
                }
                else {
                    TimerStart(lv_enemyCooldown, 2.0, false, c_timeAI);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadSpawns2_Init () {
    gt_RoadSpawns2 = TriggerCreate("gt_RoadSpawns2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Road Spawns 3
//--------------------------------------------------------------------------------------------------
bool gt_RoadSpawns3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lane;
    string lv_unitType;
    timer lv_civilianVehicleCooldown;
    timer lv_medkitCooldown;
    timer lv_enemyCooldown;
    timer lv_hellionCooldown;
    timer lv_bansheeCooldown;
    int lv_medkitSpawnLane;
    int lv_pickupCarCount;
    int lv_medkitSpawnCountup;
    int lv_currentWave;
    int[16] lv_waveVultureCounts;
    int[16] lv_waveHellionCounts;
    int[16] lv_waveBansheeCounts;
    int lv_bansheeFlip;
    int lv_waveMax;

    // Automatic Variable Declarations
    int auto6A5CB146_val;

    // Variable Initialization
    lv_civilianVehicleCooldown = TimerCreate();
    lv_medkitCooldown = TimerCreate();
    lv_enemyCooldown = TimerCreate();
    lv_hellionCooldown = TimerCreate();
    lv_bansheeCooldown = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EnemyBansheeQ, true, false);
    ActorSend(ActorFromDoodad(DoodadFromId(1248)), "Signal Swap");
    gv_vultureSequencePhase = 3;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 0;
    lv_waveHellionCounts[lv_waveMax] = 0;
    lv_waveBansheeCounts[lv_waveMax] = 1;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = libNtve_gf_DifficultyValueInt(2, 2, 3, 4);
    lv_waveHellionCounts[lv_waveMax] = 0;
    lv_waveBansheeCounts[lv_waveMax] = 1;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 0;
    lv_waveHellionCounts[lv_waveMax] = 2;
    lv_waveBansheeCounts[lv_waveMax] = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 0;
    lv_waveHellionCounts[lv_waveMax] = 0;
    lv_waveBansheeCounts[lv_waveMax] = 2;
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = 2;
    lv_waveHellionCounts[lv_waveMax] = 2;
    lv_waveBansheeCounts[lv_waveMax] = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
    lv_waveMax += 1;
    lv_waveVultureCounts[lv_waveMax] = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
    lv_waveHellionCounts[lv_waveMax] = 1;
    lv_waveBansheeCounts[lv_waveMax] = libNtve_gf_DifficultyValueInt(2, 2, 2, 3);
    TimerStart(lv_enemyCooldown, (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova01|Line00044", true), c_soundIndexAny)) + 2.0), false, c_timeReal);
    TimerStart(lv_hellionCooldown, 0.5, false, c_timeGame);
    TimerStart(lv_bansheeCooldown, 0.5, false, c_timeGame);
    TimerStart(lv_civilianVehicleCooldown, RandomFixed(4.0, 7.0), false, c_timeAI);
    TimerStart(lv_medkitCooldown, gv_remainingMedkitCooldown, false, c_timeAI);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D1D0407F"));
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 2))) {
            return true;
        }

        if ((TimerGetRemaining(lv_civilianVehicleCooldown) < 0.5) && (UnitGroupCount(gv_roadUnits, c_unitCountAlive) < 20)) {
            if ((lv_pickupCarCount > 0)) {
                lv_pickupCarCount -= 1;
                if ((lv_pickupCarCount == 0) && ((UnitGetPropertyFixed(gv_artanis, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || ((UnitIsAlive(gv_stoneVulture) == true) && (UnitGetPropertyFixed(gv_stoneVulture, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)))) {
                    lv_medkitSpawnCountup = 1;
                }

                if ((lv_medkitSpawnLane == ge_PRESET_BMT_Bottom)) {
                    lv_lane = ge_PRESET_BMT_Top;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
            }
            else {
                if ((RandomInt(1, 2) == 1)) {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Top;
                }
            }
            auto6A5CB146_val = RandomInt(1, 5);
            if (auto6A5CB146_val == 1) {
                lv_unitType = "CargoTruckUnitBarrelsVulturePath";
            }
            else if (auto6A5CB146_val == 2) {
                lv_unitType = "CargoTruckUnitFlatbedVulturePath";
            }
            else if (auto6A5CB146_val == 3) {
                lv_unitType = "CruiserBikeVulturePath";
            }
            else if (auto6A5CB146_val == 4) {
                lv_unitType = "CargoTruckUnitTrailerVulturePath";
            }
            else if (auto6A5CB146_val == 5) {
                lv_unitType = "CruiserBikeVulturePath";
            }
            else {
                lv_unitType = "CruiserBikeVulturePath";
            }
            gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_lane, lv_unitType, 0);
            TimerStart(lv_civilianVehicleCooldown, RandomFixed(4.0, 6.0), false, c_timeAI);
            if ((TimerGetRemaining(lv_enemyCooldown) < 2.0)) {
                TimerStart(lv_enemyCooldown, 2.0, false, c_timeAI);
            }

        }

        if (((TimerGetRemaining(lv_medkitCooldown) < 0.5) || (gv_vultureMedKitMissed == true)) && ((UnitGetPropertyFixed(gv_artanis, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || ((UnitIsAlive(gv_stoneVulture) == true) && (UnitGetPropertyFixed(gv_stoneVulture, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)))) {
            if ((RandomInt(1, 2) == 1)) {
                lv_medkitSpawnLane = ge_PRESET_BMT_Bottom;
            }
            else {
                lv_medkitSpawnLane = ge_PRESET_BMT_Top;
            }
            lv_pickupCarCount = 2;
            gv_vultureMedKitMissed = false;
            TimerStart(lv_medkitCooldown, gv_vultureMedKitCooldown, false, c_timeAI);
        }

        if ((lv_medkitSpawnCountup > 0)) {
            lv_medkitSpawnCountup += 1;
        }

        if ((lv_medkitSpawnCountup >= 2)) {
            lv_medkitSpawnCountup = 0;
            gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_medkitSpawnLane, "PickupHealthFullVulturePath", 0);
        }

        if ((TimerGetRemaining(lv_enemyCooldown) < 0.5) && (UnitGroupCount(gv_roadUnits, c_unitCountAlive) < 20)) {
            if ((lv_waveVultureCounts[lv_currentWave] == 0) && (lv_waveHellionCounts[lv_currentWave] == 0) && (lv_waveBansheeCounts[lv_currentWave] == 0)) {
                lv_currentWave += 1;
            }

            if ((lv_currentWave > lv_waveMax)) {
                TriggerExecute(gt_WarhawkSpawns, true, false);
                return true;
            }

            if ((lv_waveVultureCounts[lv_currentWave] > 0)) {
                if ((lv_lane == ge_PRESET_BMT_Bottom)) {
                    lv_lane = ge_PRESET_BMT_Top;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
                gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_lane, "GhostVulture", gv_pLAYER_02_DOMINION);
                lv_waveVultureCounts[lv_currentWave] -= 1;
            }

            if ((lv_waveHellionCounts[lv_currentWave] > 0) && (TimerGetRemaining(lv_hellionCooldown) < 0.5)) {
                TimerStart(lv_hellionCooldown, 2.0, false, c_timeAI);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionFromId(129), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    lv_lane = ge_PRESET_BMT_Top;
                }
                else {
                    lv_lane = ge_PRESET_BMT_Bottom;
                }
                gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Left, lv_lane, "HellionVulturePath", gv_pLAYER_02_DOMINION);
                lv_waveHellionCounts[lv_currentWave] -= 1;
            }

            if ((lv_waveBansheeCounts[lv_currentWave] > 0) && (TimerGetRemaining(lv_bansheeCooldown) < 0.5)) {
                TimerStart(lv_bansheeCooldown, 2.0, false, c_timeAI);
                if ((lv_bansheeFlip == 0)) {
                    lv_bansheeFlip = 1;
                    gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, ge_PRESET_BMT_Middle, "Banshee", gv_pLAYER_02_DOMINION);
                }
                else {
                    lv_bansheeFlip = 0;
                    gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Left, ge_PRESET_BMT_Middle, "Banshee", gv_pLAYER_02_DOMINION);
                }
                lv_waveBansheeCounts[lv_currentWave] -= 1;
            }

            if ((lv_waveVultureCounts[lv_currentWave] == 0) && (lv_waveHellionCounts[lv_currentWave] == 0) && (lv_waveBansheeCounts[lv_currentWave] == 0)) {
                TimerStart(lv_enemyCooldown, 10.0, false, c_timeAI);
            }
            else {
                if ((lv_waveVultureCounts[lv_currentWave] >= 2)) {
                    TimerStart(lv_enemyCooldown, 1.0, false, c_timeAI);
                }
                else {
                    TimerStart(lv_enemyCooldown, 2.0, false, c_timeAI);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadSpawns3_Init () {
    gt_RoadSpawns3 = TriggerCreate("gt_RoadSpawns3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warhawk Spawns
//--------------------------------------------------------------------------------------------------
bool gt_WarhawkSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_medkitCooldown;
    int lv_medkitSpawnLane;
    bool lv_banshee1Spawned;
    bool lv_banshee2Spawned;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medkitCooldown = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_vultureDistanceDialog, PlayerGroupAll(), false);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/57553CA5"));
    gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, ge_PRESET_BMT_Middle, "SkyTank", gv_pLAYER_02_DOMINION);
    TriggerExecute(gt_WarhawkRepulsorMove2, true, false);
    TriggerExecute(gt_WarhawkQ, true, false);
    gv_vultureSequencePhase = 4;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova01_BossFight", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova01|Line00046", true), c_soundIndexAny)), c_timeReal);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    if ((TimerGetRemaining(lv_medkitCooldown) > 8.0)) {
        TimerStart(lv_medkitCooldown, gv_remainingMedkitCooldown, false, c_timeAI);
    }
    else {
        TimerStart(lv_medkitCooldown, 8.0, false, c_timeAI);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (UnitIsAlive(gv_artanis) == false) || (gv_currentSection != 2))) {
            return true;
        }

        if (((TimerGetRemaining(lv_medkitCooldown) < 0.5) || (gv_vultureMedKitMissed == true)) && ((UnitGetPropertyFixed(gv_artanis, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) || ((UnitIsAlive(gv_stoneVulture) == true) && (UnitGetPropertyFixed(gv_stoneVulture, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)))) {
            if ((RandomInt(1, 2) == 1)) {
                lv_medkitSpawnLane = ge_PRESET_BMT_Bottom;
            }
            else {
                lv_medkitSpawnLane = ge_PRESET_BMT_Top;
            }
            gv_vultureMedKitMissed = false;
            gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Right, lv_medkitSpawnLane, "PickupHealthFullVulturePath", 0);
            TimerStart(lv_medkitCooldown, gv_vultureMedKitCooldown, false, c_timeAI);
        }

        if ((UnitIsAlive(gv_warhawk) == true)) {
            if ((UnitGetPropertyFixed(gv_warhawk, c_unitPropLifePercent, c_unitPropCurrent) < 30.0) && (lv_banshee1Spawned == false)) {
                lv_banshee1Spawned = true;
                gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Left, ge_PRESET_BMT_Middle, "Banshee", gv_pLAYER_02_DOMINION);
            }

            if ((UnitGetPropertyFixed(gv_warhawk, c_unitPropLifePercent, c_unitPropCurrent) < 20.0) && (lv_banshee1Spawned == true) && (lv_banshee2Spawned == false)) {
                lv_banshee2Spawned = true;
                gf_SpawnUnitonRoad(ge_PRESET_LeftRight_Left, ge_PRESET_BMT_Middle, "Banshee", gv_pLAYER_02_DOMINION);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarhawkSpawns_Init () {
    gt_WarhawkSpawns = TriggerCreate("gt_WarhawkSpawns_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warhawk Repulsor Move 2
//--------------------------------------------------------------------------------------------------
bool gt_WarhawkRepulsorMove2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    UnitSetPosition(UnitFromId(819), PointFromId(1385), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarhawkRepulsorMove2_Init () {
    gt_WarhawkRepulsorMove2 = TriggerCreate("gt_WarhawkRepulsorMove2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Road Collision Damage
//--------------------------------------------------------------------------------------------------
bool gt_RoadCollisionDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto422937A2_g;
    int auto422937A2_u;
    unit auto422937A2_var;
    unitgroup auto470F1267_g;
    int auto470F1267_u;
    unitgroup auto2E5AEF57_g;
    int auto2E5AEF57_u;
    unit auto2E5AEF57_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_artanis) == true))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto422937A2_g = gv_roadUnits;
    auto422937A2_u = UnitGroupCount(auto422937A2_g, c_unitCountAll);
    for (;; auto422937A2_u -= 1) {
        auto422937A2_var = UnitGroupUnitFromEnd(auto422937A2_g, auto422937A2_u);
        if (auto422937A2_var == null) { break; }
        if ((auto422937A2_var == gv_warhawk) && (UnitTestState(auto422937A2_var, c_unitStateInvulnerable) == false)) {
            if ((libNtve_gf_UnitInRegion(gv_artanis, RegionRect((PointGetX(UnitGetPosition(auto422937A2_var)) - 2.5), (PointGetY(UnitGetPosition(auto422937A2_var)) - 2.0), (PointGetX(UnitGetPosition(auto422937A2_var)) + 2.5), (PointGetY(UnitGetPosition(auto422937A2_var)) + 2.0))) == true) && (UnitGetPropertyFixed(gv_warhawk, c_unitPropHeight, c_unitPropCurrent) < 2.0)) {
                UnitCreateEffectUnit(auto422937A2_var, "VultureSectionCollisionDamage", gv_artanis);
            }

        }
        else {
            if ((UnitGetOwner(auto422937A2_var) != gv_pLAYER_02_DOMINION2) && (UnitGetType(auto422937A2_var) != "Banshee") && (UnitTestState(auto422937A2_var, c_unitStateInvulnerable) == false) && (libNtve_gf_UnitInRegion(gv_artanis, RegionRect((PointGetX(UnitGetPosition(auto422937A2_var)) - 2.0), (PointGetY(UnitGetPosition(auto422937A2_var)) - 1.4), (PointGetX(UnitGetPosition(auto422937A2_var)) + 2.0), (PointGetY(UnitGetPosition(auto422937A2_var)) + 1.4))) == true)) {
                UnitCreateEffectUnit(gv_artanis, "VultureSectionCollisionDamage", auto422937A2_var);
                UnitCreateEffectUnit(auto422937A2_var, "VultureSectionCollisionDamage", gv_artanis);
                if ((UnitGetOwner(auto422937A2_var) == 0)) {
                    gv_statCivilianCollisions += 1;
                }

            }

        }
    }
    auto470F1267_g = gv_roadUnits;
    auto470F1267_u = UnitGroupCount(auto470F1267_g, c_unitCountAll);
    for (;; auto470F1267_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto470F1267_g, auto470F1267_u);
        if (lv_currentUnit == null) { break; }
        auto2E5AEF57_g = gv_roadUnits;
        auto2E5AEF57_u = UnitGroupCount(auto2E5AEF57_g, c_unitCountAll);
        for (;; auto2E5AEF57_u -= 1) {
            auto2E5AEF57_var = UnitGroupUnitFromEnd(auto2E5AEF57_g, auto2E5AEF57_u);
            if (auto2E5AEF57_var == null) { break; }
            if ((UnitGetType(auto2E5AEF57_var) != "Banshee") && (UnitTestState(auto2E5AEF57_var, c_unitStateInvulnerable) == false) && (((UnitGetOwner(auto2E5AEF57_var) == gv_pLAYER_02_DOMINION) && (UnitGetOwner(lv_currentUnit) == 0)) || ((UnitGetOwner(auto2E5AEF57_var) == gv_pLAYER_02_DOMINION) && (UnitGetOwner(lv_currentUnit) == gv_pLAYER_02_DOMINION2)) || ((UnitGetOwner(auto2E5AEF57_var) == 0) && (UnitGetOwner(lv_currentUnit) == gv_pLAYER_02_DOMINION2)))) {
                if ((auto2E5AEF57_var == gv_warhawk)) {
                    if ((libNtve_gf_UnitInRegion(lv_currentUnit, RegionRect((PointGetX(UnitGetPosition(auto2E5AEF57_var)) - 2.5), (PointGetY(UnitGetPosition(auto2E5AEF57_var)) - 2.0), (PointGetX(UnitGetPosition(auto2E5AEF57_var)) + 2.5), (PointGetY(UnitGetPosition(auto2E5AEF57_var)) + 2.0))) == true)) {
                        UnitCreateEffectUnit(auto2E5AEF57_var, "VultureSectionCollisionDamage", lv_currentUnit);
                    }

                }
                else {
                    if ((libNtve_gf_UnitInRegion(lv_currentUnit, RegionRect((PointGetX(UnitGetPosition(auto2E5AEF57_var)) - 2.0), (PointGetY(UnitGetPosition(auto2E5AEF57_var)) - 1.4), (PointGetX(UnitGetPosition(auto2E5AEF57_var)) + 2.0), (PointGetY(UnitGetPosition(auto2E5AEF57_var)) + 1.4))) == true)) {
                        UnitCreateEffectUnit(lv_currentUnit, "VultureSectionCollisionDamage", auto2E5AEF57_var);
                        UnitCreateEffectUnit(auto2E5AEF57_var, "VultureSectionCollisionDamage", lv_currentUnit);
                    }

                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadCollisionDamage_Init () {
    gt_RoadCollisionDamage = TriggerCreate("gt_RoadCollisionDamage_Func");
    TriggerEnable(gt_RoadCollisionDamage, false);
    TriggerAddEventTimePeriodic(gt_RoadCollisionDamage, 0.7, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Vulture Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyVultureQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeGame);
    TriggerQueueEnter();
    if ((gv_objective_SpaceportComplete == false) && (gv_currentSection == 2)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        lv_speaker = UnitGroupUnit(UnitGroup("GhostVulture", gv_pLAYER_02_DOMINION, RegionFromId(119), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        if ((UnitIsAlive(lv_speaker) == true)) {
            libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova01|Line00042", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        if ((UnitIsAlive(lv_speaker) == true)) {
            libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00043", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyVultureQ_Init () {
    gt_EnemyVultureQ = TriggerCreate("gt_EnemyVultureQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Hellion Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyHellionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_objective_SpaceportComplete == false) && (gv_currentSection == 2)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if ((UnitIsAlive(gv_stoneVulture) == true)) {
            libNCMI_gf_SendTransmissionCampaign(gv_stoneVulture, "Mission_Nova01|Line00079", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_stoneVulture, "Mission_Nova01|Line00041", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(gv_stoneVulture, "Mission_Nova01|Line00076", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyHellionQ_Init () {
    gt_EnemyHellionQ = TriggerCreate("gt_EnemyHellionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Banshee Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyBansheeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeGame);
    TriggerQueueEnter();
    if ((gv_objective_SpaceportComplete == false) && (gv_currentSection == 2)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00044", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    SoundPlayForPlayer(SoundLink("Event_Nova01_Vulture_BansheesOverhead_Quad", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyBansheeQ_Init () {
    gt_EnemyBansheeQ = TriggerCreate("gt_EnemyBansheeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warhawk Q
//--------------------------------------------------------------------------------------------------
bool gt_WarhawkQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_objective_SpaceportComplete == false) && (gv_currentSection == 2)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00046", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(1.0, c_timeAI);
    TriggerQueueEnter();
    if ((gv_objective_SpaceportComplete == false) && (gv_currentSection == 2)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(gv_warhawk, "Mission_Nova01|Line00047", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarhawkQ_Init () {
    gt_WarhawkQ = TriggerCreate("gt_WarhawkQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Nova Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatNovaDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/659E4026"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatNovaDies_Init () {
    gt_DefeatNovaDies = TriggerCreate("gt_DefeatNovaDies_Func");
    TriggerAddEventUnitDied(gt_DefeatNovaDies, UnitRefFromVariable("gv_artanis"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Reach Spaceport - Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryReachSpaceportCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryReachSpaceportCompleted_Init () {
    gt_VictoryReachSpaceportCompleted = TriggerCreate("gt_VictoryReachSpaceportCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSpaceportComplete, true, true);
    TriggerExecute(gt_ObjectiveSurviveComplete, true, true);
    libNCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_artanis, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libComC_gf_CampaignAwardAchievement("Nova01_1", gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_statFlameTurretHits == 0)) {
        libComC_gf_CampaignAwardAchievement("Nova01_3", gv_pLAYER_01_USER);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_statNovaDamageFromWarhawk == 0)) {
        libComC_gf_CampaignAwardAchievement("Nova01_Mastery", gv_pLAYER_01_USER);
    }

    if ((gv_friendlyGhostsRescued[1] == true) && (gv_rescuedUnitsAlive[1] == true)) {
        libNCMI_gf_SetCharacterIsAliveStatus("Delta", true);
    }

    if ((gv_friendlyGhostsRescued[2] == true) && (gv_rescuedUnitsAlive[2] == true)) {
        libNCMI_gf_SetCharacterIsAliveStatus("Pierce", true);
    }

    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4305A802"), IntToText(gv_statSnipeKills));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/277D6F54"), IntToText(gv_friendlyGhostsKilled));
    TextExpressionSetToken("Param/Expression/F9AE609D", "A", IntToText(gv_statFlameTurretHits));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/698FA5CD"), TextExpressionAssemble("Param/Expression/F9AE609D"));
    TextExpressionSetToken("Param/Expression/08CDD58E", "A", IntToText(gv_statCivilianCollisions));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/85769C28"), TextExpressionAssemble("Param/Expression/08CDD58E"));
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Snipe Kills
//--------------------------------------------------------------------------------------------------
bool gt_StatSnipeKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() == gv_artanis))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statSnipeKills += 1;
    if ((gv_statSnipeKills >= 20)) {
        TriggerExecute(gt_AchievementSnipeKills, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatSnipeKills_Init () {
    gt_StatSnipeKills = TriggerCreate("gt_StatSnipeKills_Func");
    TriggerAddEventUnitDamaged(gt_StatSnipeKills, null, c_unitDamageTypeAny, c_unitDamageFatal, "NovaWeaponCanisterRifleSnipe");
    TriggerAddEventUnitDamaged(gt_StatSnipeKills, null, c_unitDamageTypeAny, c_unitDamageFatal, "NovaVultureWeaponCanisterRifleSnipe");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Snipe Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementSnipeKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libComC_gf_CampaignAwardAchievement("Nova01_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementSnipeKills_Init () {
    gt_AchievementSnipeKills = TriggerCreate("gt_AchievementSnipeKills_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Nova Hit by Flame Turret
//--------------------------------------------------------------------------------------------------
bool gt_StatNovaHitbyFlameTurret_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_artanis) == true))) {
            return false;
        }

        if (!((gv_currentSection == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statFlameTurretHits += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatNovaHitbyFlameTurret_Init () {
    gt_StatNovaHitbyFlameTurret = TriggerCreate("gt_StatNovaHitbyFlameTurret_Func");
    TriggerAddEventUnitDamaged(gt_StatNovaHitbyFlameTurret, UnitRefFromVariable("gv_artanis"), c_unitDamageTypeAny, c_unitDamageEither, "FlameTurretFireDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Nova Damaged by Warhawk
//--------------------------------------------------------------------------------------------------
bool gt_StatNovaDamagedbyWarhawk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() == gv_warhawk))) {
            return false;
        }

        if (!((UnitIsAlive(gv_artanis) == true))) {
            return false;
        }

        if (!((gv_currentSection == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statNovaDamageFromWarhawk += EventUnitDamageAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatNovaDamagedbyWarhawk_Init () {
    gt_StatNovaDamagedbyWarhawk = TriggerCreate("gt_StatNovaDamagedbyWarhawk_Func");
    TriggerEnable(gt_StatNovaDamagedbyWarhawk, false);
    TriggerAddEventUnitDamaged(gt_StatNovaDamagedbyWarhawk, UnitRefFromVariable("gv_artanis"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rifle - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRifleCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova01Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRifleCreate_Init () {
    gt_ObjectiveRifleCreate = TriggerCreate("gt_ObjectiveRifleCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rifle - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRifleComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRifleCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova01Primary01", libComC_ge_MissionObjectiveState_Completed);
    gv_objective_RifleComplete = true;
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRifleComplete_Init () {
    gt_ObjectiveRifleComplete = TriggerCreate("gt_ObjectiveRifleComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Grenades - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGrenadesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova01Primary02");
    gv_objectiveDestroyZergBase5 = ObjectiveLastCreated();
    ObjectiveSetBefore(gv_objectiveDestroyZergBase5, gv_objectiveDestroyZergBase3);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGrenadesCreate_Init () {
    gt_ObjectiveGrenadesCreate = TriggerCreate("gt_ObjectiveGrenadesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Grenades - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGrenadesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGrenadesCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova01Primary02", libComC_ge_MissionObjectiveState_Completed);
    gv_objective_GrenadesComplete = true;
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGrenadesComplete_Init () {
    gt_ObjectiveGrenadesComplete = TriggerCreate("gt_ObjectiveGrenadesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Escape - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova01Primary03");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    ObjectiveSetBefore(gv_objectiveDestroyZergBase2, gv_objectiveDestroyZergBase3);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeCreate_Init () {
    gt_ObjectiveEscapeCreate = TriggerCreate("gt_ObjectiveEscapeCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Escape - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscapeComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscapeCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova01Primary03", libComC_ge_MissionObjectiveState_Completed);
    gv_objective_EscapeComplete = true;
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscapeComplete_Init () {
    gt_ObjectiveEscapeComplete = TriggerCreate("gt_ObjectiveEscapeComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Spaceport - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSpaceportCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova01Primary04");
    gv_objectiveDestroyZergBase4 = ObjectiveLastCreated();
    ObjectiveSetBefore(gv_objectiveDestroyZergBase4, gv_objectiveDestroyZergBase3);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSpaceportCreate_Init () {
    gt_ObjectiveSpaceportCreate = TriggerCreate("gt_ObjectiveSpaceportCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Spaceport - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSpaceportComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSpaceportCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova01Primary04", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSpaceportComplete_Init () {
    gt_ObjectiveSpaceportComplete = TriggerCreate("gt_ObjectiveSpaceportComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova01Primary05");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveCreate_Init () {
    gt_ObjectiveSurviveCreate = TriggerCreate("gt_ObjectiveSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova01Primary05", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveComplete_Init () {
    gt_ObjectiveSurviveComplete = TriggerCreate("gt_ObjectiveSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova01Primary05", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveFailed_Init () {
    gt_ObjectiveSurviveFailed = TriggerCreate("gt_ObjectiveSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rescue Ghosts - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueGhostsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCMMI_gf_CreateObjectiveCampaign("Nova01Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueGhostsCreate_Init () {
    gt_ObjectiveRescueGhostsCreate = TriggerCreate("gt_ObjectiveRescueGhostsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rescue Ghosts - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueGhostsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueGhostsCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova01Bonus01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueGhostsComplete_Init () {
    gt_ObjectiveRescueGhostsComplete = TriggerCreate("gt_ObjectiveRescueGhostsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rescue Ghosts - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueGhostsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRescueGhostsCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova01Bonus01", gv_ghostsRescuedCount);
    if ((gv_ghostsRescuedCount >= 3)) {
        TriggerExecute(gt_ObjectiveRescueGhostsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueGhostsUpdate_Init () {
    gt_ObjectiveRescueGhostsUpdate = TriggerCreate("gt_ObjectiveRescueGhostsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_GlobalCinematicSetting(true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libComC_gf_PlayCinematic("MP01_010", false);
    UISetWorldVisible(PlayerGroupAll(), true);
    libNtve_gf_GlobalCinematicSetting(false);
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto19139987_g;
    int auto19139987_u;
    unit auto19139987_var;
    unitgroup auto810198DD_g;
    int auto810198DD_u;
    unit auto810198DD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova01_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    auto19139987_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto19139987_u = UnitGroupCount(auto19139987_g, c_unitCountAll);
    for (;; auto19139987_u -= 1) {
        auto19139987_var = UnitGroupUnitFromEnd(auto19139987_g, auto19139987_u);
        if (auto19139987_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto19139987_var) == false) && (libNtve_gf_UnitInRegion(auto19139987_var, RegionFromId(179)) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto19139987_var);
            libNtve_gf_PauseUnit(auto19139987_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto810198DD_g = gv_cinematicHiddenUnits;
    auto810198DD_u = UnitGroupCount(auto810198DD_g, c_unitCountAll);
    for (;; auto810198DD_u -= 1) {
        auto810198DD_var = UnitGroupUnitFromEnd(auto810198DD_g, auto810198DD_u);
        if (auto810198DD_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto810198DD_var, RegionFromId(179)) == false)) {
            libNtve_gf_ShowHideUnit(auto810198DD_var, false);
        }
        else {
            UnitGroupRemove(gv_cinematicHiddenUnits, auto810198DD_var);
        }
    }
    UnitBehaviorAddPlayer(UnitFromId(1147), "SuppressCloak", gv_pLAYER_02_DOMINION2, 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2313));
    gv_introCineStone = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetState(gv_introCineStone, c_unitStateFidget, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1936), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2229), 8.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    UnitIssueOrder(gv_artanis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1)), c_orderQueueReplace);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00001", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault, "Stand Dialogue Start", 0, c_animTimeDefault);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault, "Stand Dialogue Custom", c_animFlagPlayForever, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerExecute(gt_IntroCinematicMoveStone, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1143), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2310), SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova01|Line00051", true), c_soundIndexAny)), -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(gv_introCineStone, "Mission_Nova01|Line00051", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2229), 0.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00127", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault, "Stand Dialogue End", c_animFlagPlayForever, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2317), SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova01|Line00128", true), c_soundIndexAny)), -1, 10.0, true);
    libNCMI_gf_SendTransmissionCampaign(gv_introCineStone, "Mission_Nova01|Line00128", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto93C9A874_g;
    int auto93C9A874_u;
    unit auto93C9A874_var;
    unitgroup auto88F70344_g;
    int auto88F70344_u;
    unit auto88F70344_var;
    unitgroup auto357023EF_g;
    int auto357023EF_u;
    unit auto357023EF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    auto93C9A874_g = gv_cinematicTempUnits;
    auto93C9A874_u = UnitGroupCount(auto93C9A874_g, c_unitCountAll);
    for (;; auto93C9A874_u -= 1) {
        auto93C9A874_var = UnitGroupUnitFromEnd(auto93C9A874_g, auto93C9A874_u);
        if (auto93C9A874_var == null) { break; }
        UnitRemove(auto93C9A874_var);
    }
    auto88F70344_g = gv_cinematicHiddenUnits;
    auto88F70344_u = UnitGroupCount(auto88F70344_g, c_unitCountAll);
    for (;; auto88F70344_u -= 1) {
        auto88F70344_var = UnitGroupUnitFromEnd(auto88F70344_g, auto88F70344_u);
        if (auto88F70344_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto88F70344_var, true);
    }
    auto357023EF_g = gv_cinematicPausedUnits;
    auto357023EF_u = UnitGroupCount(auto357023EF_g, c_unitCountAll);
    for (;; auto357023EF_u -= 1) {
        auto357023EF_var = UnitGroupUnitFromEnd(auto357023EF_g, auto357023EF_u);
        if (auto357023EF_var == null) { break; }
        libNtve_gf_PauseUnit(auto357023EF_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault);
    UnitBehaviorRemovePlayer(UnitFromId(1147), "SuppressCloak", gv_pLAYER_02_DOMINION2, 1);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    if ((gv_cinematicCompleted == true)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2317), lv_fadeDuration, -1, 10.0, true);
    }
    else {
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic - Move Stone
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicMoveStone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoE8E81C30_at;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_introCineStone, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1145)), c_orderQueueReplace);
    autoE8E81C30_at = 0;
    while (!(((UnitOrderCount(gv_introCineStone) == 0) || (gv_introCineStone == null))) && autoE8E81C30_at <= 3.0) {
        Wait(0.125, c_timeGame);
        autoE8E81C30_at = autoE8E81C30_at + 0.125;
    }
    if ((gv_introCineStone == null)) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introCineStone), c_animNameDefault, "Stand Start", c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicMoveStone_Init () {
    gt_IntroCinematicMoveStone = TriggerCreate("gt_IntroCinematicMoveStone_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerExecute(gt_StartGameVultureQ, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    TriggerExecute(gt_CleanupSection1, true, false);
    gv_currentSection = 2;
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitCreate(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2319), 180.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_artanis = UnitLastCreated();
    UnitSetState(gv_artanis, c_unitStateFidget, false);
    if ((gv_rescuedUnitsAlive[3] == true)) {
        UnitCreate(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2447), 315.0);
        gv_midCineStone = UnitLastCreated();
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    }

    if ((gv_rescuedUnitsAlive[1] == true) && (gv_rescuedUnitsAlive[2] == true)) {
        UnitCreate(1, "GhostAlternate", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2446), 0.0);
        gv_midCineDelta = UnitLastCreated();
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
        UnitCreate(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2445), 0.0);
        gv_midCinePierce = UnitLastCreated();
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    }
    else {
        if ((gv_rescuedUnitsAlive[1] == true) && (gv_rescuedUnitsAlive[2] == false)) {
            UnitCreate(1, "GhostAlternate", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2446), 0.0);
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            gv_midCineDelta = UnitLastCreated();
            UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
        }
        else {
            if ((gv_rescuedUnitsAlive[1] == false) && (gv_rescuedUnitsAlive[2] == true)) {
                UnitCreate(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2445), 0.0);
                UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
                gv_midCinePierce = UnitLastCreated();
                UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2448), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2323), 4.0, -1, 10, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova01_VultureEscape", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    UnitIssueOrder(gv_artanis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2442)), c_orderQueueReplace);
    if ((gv_rescuedUnitsAlive[1] == true)) {
        UnitIssueOrder(gv_midCineDelta, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2321)), c_orderQueueReplace);
    }

    if ((gv_rescuedUnitsAlive[2] == true)) {
        UnitIssueOrder(gv_midCinePierce, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2322)), c_orderQueueReplace);
    }

    if ((gv_rescuedUnitsAlive[3] == true)) {
        UnitIssueOrder(gv_midCineStone, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2320)), c_orderQueueReplace);
    }

    UnitBehaviorAdd(gv_artanis, "SuppressCloak", gv_artanis, 1);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundPlayForPlayer(SoundLink("Event_CSMid_Nova01_VultureLab_BG", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00036", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    if ((gv_rescuedUnitsAlive[1] == true)) {
        UnitBehaviorRemove(gv_midCineDelta, "PermanentlyCloaked", 1);
    }

    Wait(0.5, c_timeGame);
    if ((gv_rescuedUnitsAlive[2] == true)) {
        UnitBehaviorRemove(gv_midCinePierce, "PermanentlyCloaked", 1);
    }

    Wait(0.25, c_timeGame);
    if ((gv_rescuedUnitsAlive[3] == true)) {
        UnitBehaviorRemove(gv_midCineStone, "PermanentlyCloaked", 1);
    }

    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2443), 3.0, -1, 10, true);
    UnitIssueOrder(gv_artanis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2444)), c_orderQueueReplace);
    libNCMI_gf_SendTransmissionCampaign(gv_midCineStone, "Mission_Nova01|Line00037", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_midCineStone, "Mission_Nova01|Line00038", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2449), 3.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    if (((gv_rescuedUnitsAlive[1] == true) || (gv_rescuedUnitsAlive[2] == true))) {
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00105", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((gv_rescuedUnitsAlive[1] == true) && (gv_rescuedUnitsAlive[2] == true)) {
            libNCMI_gf_SendTransmissionCampaign(gv_midCineDelta, "Mission_Nova01|Line00106", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            UnitIssueOrder(gv_midCineDelta, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2450)), c_orderQueueReplace);
            UnitIssueOrder(gv_midCinePierce, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2451)), c_orderQueueReplace);
        }
        else {
            if ((gv_rescuedUnitsAlive[1] == true) && (gv_rescuedUnitsAlive[2] == false)) {
                libNCMI_gf_SendTransmissionCampaign(gv_midCineDelta, "Mission_Nova01|Line00107", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                UnitIssueOrder(gv_midCineDelta, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2450)), c_orderQueueReplace);
            }
            else {
                if ((gv_rescuedUnitsAlive[1] == false) && (gv_rescuedUnitsAlive[2] == true)) {
                    libNCMI_gf_SendTransmissionCampaign(gv_midCinePierce, "Mission_Nova01|Line00109", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    UnitIssueOrder(gv_midCinePierce, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2451)), c_orderQueueReplace);
                }

            }
        }
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00108", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova01|Line00108", true), c_soundIndexAny)) / 2.0));
        UnitIssueOrder(gv_artanis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2453)), c_orderQueueReplace);
        UnitIssueOrder(gv_midCineStone, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2452)), c_orderQueueReplace);
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    else {
        libNCMI_gf_SendTransmissionCampaign(gv_artanis, "Mission_Nova01|Line00039", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova01|Line00039", true), c_soundIndexAny)) / 2.0));
        UnitIssueOrder(gv_artanis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2453)), c_orderQueueReplace);
        UnitIssueOrder(gv_midCineStone, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2452)), c_orderQueueReplace);
        TransmissionWait(TransmissionLastSent(), 0.0);
    }
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_cinematicCompleted == true)) {
        libNCMI_gf_PlaySoundCinematic(SoundLink("Vulture_Movement", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.5, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoA6360EBE_g;
    int autoA6360EBE_u;
    unit autoA6360EBE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_City_Nova01_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitCreate(1, "NovaVulture", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(116)), 0.0);
    gv_artanis = UnitLastCreated();
    libNCUI_gf_SetHeroPanelUnit(1, gv_artanis);
    autoA6360EBE_g = gv_cinematicTempUnits;
    autoA6360EBE_u = UnitGroupCount(autoA6360EBE_g, c_unitCountAll);
    for (;; autoA6360EBE_u -= 1) {
        autoA6360EBE_var = UnitGroupUnitFromEnd(autoA6360EBE_g, autoA6360EBE_u);
        if (autoA6360EBE_var == null) { break; }
        UnitRemove(autoA6360EBE_var);
    }
    UnitIssueOrder(gv_artanis, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_artanis, PointFromId(816), false);
    UnitSetFacing(gv_artanis, 0.0, 0.0);
    libNtve_gf_ShowHideUnit(UnitFromId(817), true);
    if ((gv_rescuedUnitsAlive[3] == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GhostVulture", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(569));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 300.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        libNCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/FE74AAF3"), null);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        gv_stoneVulture = UnitLastCreated();
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova01_VultureRide", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    RegionPlayableMapSet(RegionFromId(119));
    GameSetLighting("BlackopsLab_B", 0.0);
    UnitRemove(UnitFromId(2274));
    UnitRemove(UnitFromId(2275));
    UnitRemove(UnitFromId(2277));
    UnitRemove(UnitFromId(2276));
    lv_fadeDuration = 2.0;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(818), 1.0, -1, 10.0, true);
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    GameSetSpeedValue(c_gameSpeedFaster);
    GameSetSpeedLocked(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(118));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC0E8E170_g;
    int autoC0E8E170_u;
    unit autoC0E8E170_var;
    unitgroup auto779C83B4_g;
    int auto779C83B4_u;
    unit auto779C83B4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    gv_currentSection = 3;
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    DialogSetVisible(gv_vultureDistanceDialog, PlayerGroupAll(), false);
    if ((gv_vultureSequencePhase >= 4)) {
        libNCUI_gf_ShowHideSingularBossBarVoidCampaign(false);
    }

    autoC0E8E170_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC0E8E170_u = UnitGroupCount(autoC0E8E170_g, c_unitCountAll);
    for (;; autoC0E8E170_u -= 1) {
        autoC0E8E170_var = UnitGroupUnitFromEnd(autoC0E8E170_g, autoC0E8E170_u);
        if (autoC0E8E170_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoC0E8E170_var) == false) && (autoC0E8E170_var != gv_victoryLander) && (libNtve_gf_UnitInRegion(autoC0E8E170_var, RegionFromId(85)) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoC0E8E170_var);
            libNtve_gf_PauseUnit(autoC0E8E170_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto779C83B4_g = gv_cinematicHiddenUnits;
    auto779C83B4_u = UnitGroupCount(auto779C83B4_g, c_unitCountAll);
    for (;; auto779C83B4_u -= 1) {
        auto779C83B4_var = UnitGroupUnitFromEnd(auto779C83B4_g, auto779C83B4_u);
        if (auto779C83B4_var == null) { break; }
        if ((auto779C83B4_var != gv_victoryLander) && (libNtve_gf_UnitInRegion(auto779C83B4_var, RegionFromId(85)) == false)) {
            libNtve_gf_ShowHideUnit(auto779C83B4_var, false);
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaHero", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2457));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1557)), c_orderQueueReplace);
    gv_victoryNova = UnitLastCreated();
    UnitBehaviorAdd(gv_victoryNova, "SuppressCloak", gv_victoryNova, 1);
    if ((UnitIsAlive(gv_stoneVulture) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghost", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION2, PointFromId(2458));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2085)), c_orderQueueReplace);
        gv_victoryStone = UnitLastCreated();
        UnitIssueOrder(gv_victoryNova, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2085)), c_orderQueueAddToEnd);
    }
    else {
        libNtve_gf_ShowHideUnit(UnitFromId(2461), false);
    }
    UnitSetOwner(gv_victoryLander, gv_pLAYER_02_DOMINION2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoEBA7BA74_at;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2324), 0.0, -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.0, 0.0, 120.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova01_FinalEscape", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((UnitIsAlive(gv_stoneVulture) == true)) {
        libNCMI_gf_SendTransmissionCampaign(gv_victoryStone, "Mission_Nova01|Line00110", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_victoryNova, "Mission_Nova01|Line00111", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2456), SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova01|Line00112", true), c_soundIndexAny)), -1, 10, true);
        libNCMI_gf_SendTransmissionCampaign(gv_victoryStone, "Mission_Nova01|Line00112", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_victoryNova, "Mission_Nova01|Line00113", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2456), SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova01|Line00048", true), c_soundIndexAny)), -1, 10, true);
        libNCMI_gf_SendTransmissionCampaign(gv_victoryNova, "Mission_Nova01|Line00048", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2459), 4.0, -1, 10, true);
    CameraFollowUnitGroup(gv_pLAYER_01_USER, libNtve_gf_ConvertUnitToUnitGroup(gv_victoryLander), true, false);
    UnitIssueOrder(gv_victoryNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2455)), c_orderQueueReplace);
    autoEBA7BA74_at = 0;
    while (!((UnitOrderCount(gv_victoryNova) == 0)) && autoEBA7BA74_at <= 2.0) {
        Wait(0.25, c_timeGame);
        autoEBA7BA74_at = autoEBA7BA74_at + 0.25;
    }
    libNtve_gf_ShowHideUnit(gv_victoryNova, false);
    UnitIssueOrder(gv_victoryLander, Order(AbilityCommand("HerculesLiftOff", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitSetHeight(gv_victoryLander, 14.0, 7.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 1.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_01_USER);
    libNCMI_gf_StopCinematicSounds();
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_DebugStage3_Init();
    gt_NovaLosesDetectorConeDetectedEMPedQ_Init();
    gt_NovaLosesDetectorConeDetectedStillCloakedQ_Init();
    gt_NovaReCloaksTransmissionQ_Init();
    gt_HealerbotRecharging_Init();
    gt_HealerbotReady_Init();
    gt_HealerbotMouseoverTip_Init();
    gt_NovaPicksUpRestorationCharge_Init();
    gt_StartGameQ_Init();
    gt_StartGameVultureQ_Init();
    gt_CleanupSection1_Init();
    gt_FirstRoomTeachBreakNeck_Init();
    gt_FirstRoomTeachBreakNeckCleanup_Init();
    gt_FirstRoomNovaStoneQ_Init();
    gt_FirstRoomReptileCrateQ_Init();
    gt_NovaEntersGhostMaze_Init();
    gt_CatwalkTrooperWhatsThatSoundQ_Init();
    gt_CatwalkTrooperPatrolLoop_Init();
    gt_BackWayGuardsHearSomethingQ_Init();
    gt_BackWayGuardsStealthKill_Init();
    gt_TerminalGuardsStaySharpQ_Init();
    gt_TerminalGuardsStealthKill_Init();
    gt_MainPathGuardsStealthKill_Init();
    gt_MainPathGuardsStealthKillQ_Init();
    gt_TrooperFindsNovaQ_Init();
    gt_SendTrooperPatrol_Init();
    gt_TrooperPatrolQ_Init();
    gt_TrooperPatrolStealthKill_Init();
    gt_NovaEntersArmoryHall_Init();
    gt_DeadEndGuardsMaxwellConfirmedDeadQ_Init();
    gt_DeadEndGuardsStealthKill_Init();
    gt_ObtainRifleQ_Init();
    gt_TeachSnipeQ_Init();
    gt_TeachSnipeCleanup_Init();
    gt_SnipeHallInit_Init();
    gt_SnipeHallReaperFindsNovaQ_Init();
    gt_SnipeHallReaperDespawn_Init();
    gt_SnipeHallPart1GhostDies_Init();
    gt_SnipeHallPart1ReaperRespawn_Init();
    gt_SnipeHallPart1ReaperRetreatQ_Init();
    gt_SnipeHallPart2GhostsDie_Init();
    gt_SnipeHallPart2ReaperRespawn_Init();
    gt_SnipeHallPart2ReaperRetreatQ_Init();
    gt_ObtainGrenadesQ_Init();
    gt_TeachGrenades_Init();
    gt_TeachGrenadeCleanupUseAbility_Init();
    gt_TeachGrenadeCleanupMarineClusterDies_Init();
    gt_ResearchBayDefendersRespawnQ_Init();
    gt_ResearchBayDefenders_Init();
    gt_ResearchBayDefenseQ_Init();
    gt_PulseGrenadesNearbyQ_Init();
    gt_ResearchBayClearQ_Init();
    gt_ResearchBayClearAltQ_Init();
    gt_FacilityDestruction_Init();
    gt_DestructionSoundsandCameraShake_Init();
    gt_EscapeTerminationQ_Init();
    gt_EscapeInitStealthAI_Init();
    gt_EscapeFriendlyGhostEMPTargeting_Init();
    gt_EscapeRescueGhostPings_Init();
    gt_EscapeGunTurretHallDefenders_Init();
    gt_EscapeFlameTurrets_Init();
    gt_EscapeRescuedGhostAI_Init();
    gt_EscapeDeltaRescue_Init();
    gt_EscapeExecuteDeltaQ_Init();
    gt_EscapeDeltaRescueSuccessQ_Init();
    gt_EscapePierceRescue_Init();
    gt_EscapePierceNearbyQ_Init();
    gt_EscapePierceRescueSuccessQ_Init();
    gt_EscapeDestruction103Trigger_Init();
    gt_EscapeCliffMaraudersLeft_Init();
    gt_EscapeCliffMaraudersRight_Init();
    gt_EscapeFinalBattle_Init();
    gt_EscapeStoneRescue_Init();
    gt_EscapeStoneRescueQ_Init();
    gt_EscapeFriendlyGhostDiesQ_Init();
    gt_EscapeComplete_Init();
    gt_VultureDistanceCounter_Init();
    gt_StonesVultureDestroyed_Init();
    gt_StonesVultureDestroyedQ_Init();
    gt_RoadSpawns1_Init();
    gt_RoadSpawns2_Init();
    gt_RoadSpawns3_Init();
    gt_WarhawkSpawns_Init();
    gt_WarhawkRepulsorMove2_Init();
    gt_RoadCollisionDamage_Init();
    gt_EnemyVultureQ_Init();
    gt_EnemyHellionQ_Init();
    gt_EnemyBansheeQ_Init();
    gt_WarhawkQ_Init();
    gt_DefeatNovaDies_Init();
    gt_VictoryReachSpaceportCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StartAI_Init();
    gt_StatSnipeKills_Init();
    gt_AchievementSnipeKills_Init();
    gt_StatNovaHitbyFlameTurret_Init();
    gt_StatNovaDamagedbyWarhawk_Init();
    gt_ObjectiveRifleCreate_Init();
    gt_ObjectiveRifleComplete_Init();
    gt_ObjectiveGrenadesCreate_Init();
    gt_ObjectiveGrenadesComplete_Init();
    gt_ObjectiveEscapeCreate_Init();
    gt_ObjectiveEscapeComplete_Init();
    gt_ObjectiveSpaceportCreate_Init();
    gt_ObjectiveSpaceportComplete_Init();
    gt_ObjectiveSurviveCreate_Init();
    gt_ObjectiveSurviveComplete_Init();
    gt_ObjectiveSurviveFailed_Init();
    gt_ObjectiveRescueGhostsCreate_Init();
    gt_ObjectiveRescueGhostsComplete_Init();
    gt_ObjectiveRescueGhostsUpdate_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroCinematicMoveStone_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
