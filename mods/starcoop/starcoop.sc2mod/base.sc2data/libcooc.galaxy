include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibCOUI_h"
include "LibCOMU_h"
include "LibCOMI_h"

include "LibCOOC_h"

//--------------------------------------------------------------------------------------------------
// Library: Core (COOP)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCOOC_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    libCOMI_InitVariables();
}

// Variable Initialization
bool libCOOC_InitVariables_completed = false;

void libCOOC_InitVariables () {
    int init_i;
    int init_j;

    if (libCOOC_InitVariables_completed) {
        return;
    }

    libCOOC_InitVariables_completed = true;

    libCOOC_gv_cCC_MAXMISSIONSCORE = 250000;
    libCOOC_gv_cC_DebugDefeatMultiplierOverride = -1.0;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCOOC_gv_cC_EventParameter[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOOC_gv_cC_PlayerMasteryEnabled[init_i] = true;
    }
    libCOOC_gv_cC_ContestDefaultCommander1 = "TerranRaynor";
    libCOOC_gv_cC_ContestDefaultCommander2 = "ZergKerrigan";
    libCOOC_gv_cC_CoopBankName = "COCampaign";
    libCOOC_gv_cC_ScoreVorazunBHGroup = UnitGroupEmpty();
    libCOOC_gv_pC_StatEventLastCampaign = -1;
    libCOOC_gv_cC_WorldCoverDlg = c_invalidDialogId;
    libCOOC_gv__FadeDialog = c_invalidDialogId;
    libCOOC_gv__FadeImage = c_invalidDialogControlId;
    libCOOC_gv_cC_NoSpawnRegion = RegionEmpty();
    libCOOC_gv_cC_HumanPlayerGroup = PlayerGroupEmpty();
}

// Presets
// Functions
void libCOOC_gf_SetMissionScore (string lp_scoreType, int lp_score, int lp_player) {
    // Variable Declarations
    int lv_scoreSearchIndex;
    int lv_scoreIndex;
    int lv_totalScore;

    // Automatic Variable Declarations
    const int auto994D9B54_ae = libCOOC_gv_cCC_MAXMISSIONSCORETYPES;
    const int auto994D9B54_ai = 1;
    const int auto2FA9DFCF_ae = libCOOC_gv_cCC_MAXMISSIONSCORETYPES;
    const int auto2FA9DFCF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_scoreSearchIndex = 1;
    for ( ; ( (auto994D9B54_ai >= 0 && lv_scoreSearchIndex <= auto994D9B54_ae) || (auto994D9B54_ai < 0 && lv_scoreSearchIndex >= auto994D9B54_ae) ) ; lv_scoreSearchIndex += auto994D9B54_ai ) {
        if ((libCOOC_gv_cC_MissionScoreTypes[lv_scoreSearchIndex] == lp_scoreType)) {
            lv_scoreIndex = lv_scoreSearchIndex;
            break;
        }

        if ((libCOOC_gv_cC_MissionScoreTypes[lv_scoreSearchIndex] == null)) {
            libCOOC_gv_cC_MissionScoreTypes[lv_scoreSearchIndex] = lp_scoreType;
            lv_scoreIndex = lv_scoreSearchIndex;
            break;
        }

    }
    if ((lv_scoreIndex == 0)) {
        TextExpressionSetToken("Param/Expression/lib_COOC_69E020DC", "A", StringToText((lp_scoreType)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_69E020DC"), true);
        return ;
    }

    lv_scoreSearchIndex = 1;
    for ( ; ( (auto2FA9DFCF_ai >= 0 && lv_scoreSearchIndex <= auto2FA9DFCF_ae) || (auto2FA9DFCF_ai < 0 && lv_scoreSearchIndex >= auto2FA9DFCF_ae) ) ; lv_scoreSearchIndex += auto2FA9DFCF_ai ) {
        if ((lv_scoreSearchIndex == lv_scoreIndex)) {
            lv_totalScore += lp_score;
        }
        else {
            lv_totalScore += libCOOC_gv_cC_MissionScoreValues[lv_scoreSearchIndex][lp_player];
        }
    }
    if ((lv_totalScore > libCOOC_gv_cCC_MAXMISSIONSCORE)) {
        TextExpressionSetToken("Param/Expression/lib_COOC_E363AA3F", "A", StringToText((lp_scoreType)));
        TextExpressionSetToken("Param/Expression/lib_COOC_E363AA3F", "B", IntToText(lp_score));
        TextExpressionSetToken("Param/Expression/lib_COOC_E363AA3F", "C", IntToText(lv_totalScore));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_E363AA3F"), true);
        libCOOC_gv_cC_MissionScoreValues[lv_scoreIndex][lp_player] = (lp_score-(lv_totalScore-libCOOC_gv_cCC_MAXMISSIONSCORE));
        lv_totalScore = libCOOC_gv_cCC_MAXMISSIONSCORE;
    }
    else {
        libCOOC_gv_cC_MissionScoreValues[lv_scoreIndex][lp_player] = lp_score;
    }
    PlayerScoreValueSetFromInt(lp_player, lp_scoreType, FixedToInt((libCOOC_gv_cC_MissionScoreValues[lv_scoreIndex][lp_player] * libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 1.0, 1.2, 1.5, 2.0, 2.0, 2.0))));
    PlayerScoreValueSetFromInt(lp_player, "TotalMissionScore", FixedToInt((lv_totalScore * libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 1.0, 1.2, 1.5, 2.0, 2.0, 2.0))));
}

string libCOOC_gf_CC_MissionScoreType (int lp_index, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cC_MissionScoreTypes[lp_index];
}

int libCOOC_gf_CC_MissionScoreValue (int lp_index, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return PlayerScoreValueGetAsInt(lp_player, libCOOC_gv_cC_MissionScoreTypes[lp_index]);
}

string libCOOC_gf_CC_AIPersonalityRace (string lp_personality) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("CoopAICommanders", lp_personality, "Race", 1);
}

bool libCOOC_gf_CoopDebugModeIsOn (string lp_mode, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return GameIsDebugOptionSet((lp_mode), lp_player);
}

void libCOOC_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cC_TechLimitsCallback = lp_callbackTrigger;
}

void libCOOC_gf_PurchaseStorymodeTech () {
    // Variable Declarations
    string lv_indexMission;
    string lv_armyCategory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsTransitionMap() == true)) {
        return ;
    }

    TriggerExecute(libCOOC_gv_cC_TechLimitsCallback, true, false);
}

bool libCOOC_gf_CC_PlaytestModeEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cC_DebugPlaytestMode;
}

void libCOOC_gf_CC_AchievementToggleTimeStop (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        TriggerEnable(libCOOC_gt_CC_AchievementVorazunTimeStop, true);
    }
    else {
        TriggerEnable(libCOOC_gt_CC_AchievementVorazunTimeStop, false);
    }
}

void libCOOC_gf_CC_AchievementToggleSuperChrono (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        TriggerEnable(libCOOC_gt_CC_ScoreKaraxChronoProduction, true);
    }
    else {
        TriggerEnable(libCOOC_gt_CC_ScoreKaraxChronoProduction, false);
    }
}

int libCOOC_gf_CC_DifficultyIndex (int lp_difficulty) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto35BA92F5_val;

    // Variable Initialization

    // Implementation
    auto35BA92F5_val = lp_difficulty;
    if (auto35BA92F5_val == 1) {
        return 1;
    }
    else if (auto35BA92F5_val == 2) {
        return 2;
    }
    else if (auto35BA92F5_val == 3) {
        return 3;
    }
    else if (auto35BA92F5_val == 4) {
        return 4;
    }
    else if (auto35BA92F5_val == 5) {
        return 5;
    }
    else if (auto35BA92F5_val == 6) {
        return 6;
    }
    else {
        return 0;
    }
}

int libCOOC_gf_CC_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int auto3A457F69_val;

    // Implementation
    auto3A457F69_val = lp_index;
    if (auto3A457F69_val == libCOOC_gf_CC_DifficultyIndex(1)) {
        return 1;
    }
    else if (auto3A457F69_val == libCOOC_gf_CC_DifficultyIndex(2)) {
        return 2;
    }
    else if (auto3A457F69_val == libCOOC_gf_CC_DifficultyIndex(3)) {
        return 3;
    }
    else if (auto3A457F69_val == libCOOC_gf_CC_DifficultyIndex(4)) {
        return 4;
    }
    else {
        return 2;
    }
}

void libCOOC_gf_DispatchCampaignEvent (int lp_event, string lp_param1, string lp_param2, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_EventCallback[(lp_event)] != null)) {
        libCOOC_gv_cC_EventParameter[(lp_event)][1] = lp_param1;
        libCOOC_gv_cC_EventParameter[(lp_event)][2] = lp_param2;
        libCOOC_gv_cC_EventIsRunning = true;
        TriggerExecute(libCOOC_gv_cC_EventCallback[(lp_event)], true, lp_waitOption);
        libCOOC_gv_cC_EventIsRunning = false;
    }

}

void libCOOC_gf_RegisterCampaignEvent (int lp_event, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cC_EventCallback[(lp_event)] = lp_callback;
}

string libCOOC_gf_CampaignEventParameter (int lp_event, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index < 1) || (lp_index > 2))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COOC_6F26B79B"), true);
        return "<Error>";
    }

    return libCOOC_gv_cC_EventParameter[(lp_event)][lp_index];
}

string libCOOC_gf_CC_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cC_CurrentMap;
}

bool libCOOC_gf_CC_CampaignMapTypeCheck (string lp_map, int lp_mapType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return false;
    }

    return (CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_map), "Kind", libCOOC_gv_cCC_DISREGARDPLAYER) == (lp_mapType));
}

string libCOOC_gf_CC_MapAchievementTerm (string lp_map, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return null;
    }

    return UserDataGetGameLink("Maps", libCOOC_gf_CC_MapUserDataInstance(lp_map), "CompletionAchievementTerms", libCOOC_gf_CC_DifficultyIndex(lp_difficulty));
}

string libCOOC_gf_CC_CampaignMapFile (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "";
    }

    return CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "File", libCOOC_gv_cCC_DISREGARDPLAYER);
}

text libCOOC_gf_CC_CampaignMapName (string lp_map, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_COOC_C28FFE1C");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", lp_player));
}

string libCOOC_gf_CC_MapScoreStatistic (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libCOOC_gf_CC_MapUserDataInstance(lp_map), "ScoreStatistic", 1);
}

string libCOOC_gf_CC_MapUserDataInstance (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", libCOOC_gv_cCC_DISREGARDPLAYER));
}

void libCOOC_gf_SetCurrentMap (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cC_CurrentMap = lp_map;
}

void libCOOC_gf_CC_ObjectiveRegister (string lp_objective) {
    // Variable Declarations
    int lv_objectiveIndex;

    // Automatic Variable Declarations
    const int auto1D771153_ae = libCOOC_gv_cCC_OBJECTIVESMAX;
    const int auto1D771153_ai = 1;

    // Variable Initialization

    // Implementation
    lv_objectiveIndex = 1;
    for ( ; ( (auto1D771153_ai >= 0 && lv_objectiveIndex <= auto1D771153_ae) || (auto1D771153_ai < 0 && lv_objectiveIndex >= auto1D771153_ae) ) ; lv_objectiveIndex += auto1D771153_ai ) {
        if ((libCOOC_gv_cC_ObjectivesCreated[lv_objectiveIndex] == null)) {
            libCOOC_gv_cC_ObjectivesCreated[lv_objectiveIndex] = lp_objective;
        }

        if ((libCOOC_gv_cC_ObjectivesCreated[lv_objectiveIndex] == lp_objective)) {
            return ;
        }

    }
}

void libCOOC_gf_ZS_SetObjectiveProgressData (string lp_objective, int lp_progress) {
    // Variable Declarations
    int lv_levelBefore;
    int lv_increase;
    int lv_currentXPLevel;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto63B2ED91_g;

    // Variable Initialization

    // Implementation
    if ((libCOOC_gf_CS_ObjectiveCountsDown(lp_objective) == true)) {
        lp_progress = (libCOOC_gf_MissionObjectiveItemCount(lp_objective) - lp_progress);
    }

    lv_increase = (lp_progress - libCOOC_gf_MissionObjectiveProgress(lp_objective));
    UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Progress", 1, lp_progress);
    if (((libCOOC_gf_MissionObjectiveIsPrimary(lp_objective) == true) || (lv_increase <= 0))) {
        return ;
    }

    auto63B2ED91_g = libCOOC_gf_NondefeatedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto63B2ED91_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_CC_PlayerSetXPScores(c_gameOverDefeat, lv_indexPlayer);
    }
}

text libCOOC_gf_MissionObjectiveDescription (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Description", c_playerAny));
}

bool libCOOC_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 1) && (lp_state == libCOOC_ge_MissionObjectiveState_Available)) {
        return true;
    }

    if ((UserDataGetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 1) && (lp_state == libCOOC_ge_MissionObjectiveState_Completed)) {
        return true;
    }

    if ((lp_state == libCOOC_ge_MissionObjectiveState_Undiscovered) && (UserDataGetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 0) && (UserDataGetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 0)) {
        return true;
    }

    return false;
}

bool libCOOC_gf_MissionObjectiveIsPrimary (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gf_CS_GetObjectiveTypeInteger(lp_objective) == c_objectiveTypePrimary);
}

text libCOOC_gf_MissionObjectiveName (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Name", c_playerAny));
}

int libCOOC_gf_MissionObjectiveItemCount (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "RequiredCount", c_playerAny);
}

int libCOOC_gf_MissionObjectiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
}

int libCOOC_gf_MissionRewardTotalEarned2 (string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    int auto1CAF10CF_ai;

    // Variable Initialization

    // Implementation
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true) && (libCOOC_gv_cC_DebugDefeatMultiplierOverride >= 0.0)) {
        return UserDataGetInt("Experience", "GameValues", "BonusObjExperience", 1);
    }

    auto1CAF10CF_ai = 1;
    while (auto1CAF10CF_ai <= libCOOC_gv_cCC_OBJECTIVESMAX) {    
        lv_objective = libCOOC_gv_cC_ObjectivesCreated[auto1CAF10CF_ai];
        auto1CAF10CF_ai = auto1CAF10CF_ai + 1;
        if( lv_objective == null ) {
            break;
        }
        lv_count += libCOOC_gf_MissionObjectiveRewardsEarned(lv_objective, lp_type);

    }
    return lv_count;
}

int libCOOC_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_rewards;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOOC_gf_MissionObjectiveIsPrimary(lp_objective) == true)) {
        return 0;
    }

    lv_rewards = FixedToInt(Round(((IntToFixed(libCOOC_gf_MissionObjectiveProgress(lp_objective))*IntToFixed(UserDataGetInt("Experience", "GameValues", "BonusObjExperience", 1))*UserDataGetFixed("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "XPMultiplier", 1))/IntToFixed(libCOOC_gf_MissionObjectiveItemCount(lp_objective)))));
    return lv_rewards;
}

int libCOOC_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_rewards;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOOC_gf_MissionObjectiveIsPrimary(lp_objective) == true)) {
        return 0;
    }

    return UserDataGetInt("Experience", "GameValues", "BonusObjExperience", 1);
}

int libCOOC_gf_MissionRewardTotalEarned3 (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    int auto67D0D1EA_ai;

    // Variable Initialization

    // Implementation
    auto67D0D1EA_ai = 1;
    while (auto67D0D1EA_ai <= libCOOC_gv_cCC_OBJECTIVESMAX) {    
        lv_objective = libCOOC_gv_cC_ObjectivesCreated[auto67D0D1EA_ai];
        auto67D0D1EA_ai = auto67D0D1EA_ai + 1;
        if( lv_objective == null ) {
            break;
        }
        lv_count += libCOOC_gf_MissionObjectiveRewardsAvailable2(lv_objective, lp_type);

    }
    return lv_count;
}

int libCOOC_gf_MissionObjectiveRewards (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    string auto270C1A28_val;

    // Variable Initialization

    // Implementation
    auto270C1A28_val = lp_type;
    if (auto270C1A28_val == "Experience") {
        return FixedToInt((UserDataGetInt("Experience", "GameValues", "BonusObjExperience", 1) / libCOOC_gf_MissionObjectiveItemCount(lp_objective)));
    }
    else {
    }
    return 0;
}

int libCOOC_gf_MissionObjectiveRewards2 (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    string auto4CF502E0_val;

    // Variable Initialization

    // Implementation
    auto4CF502E0_val = lp_type;
    if (auto4CF502E0_val == "Experience") {
        return UserDataGetInt("Experience", "GameValues", "BonusObjExperience", 1);
    }
    else {
    }
    return 0;
}

text libCOOC_gf_CS_CampaignObjectiveBonusText (string lp_objective) {
    // Variable Declarations
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bonusText = UserDataGetText("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "RewardText", 1);
    if (((lv_bonusText != null) == false) && (libCOOC_gf_MissionObjectiveIsPrimary(lp_objective) == false)) {
        if ((libCOOC_gf_MissionObjectiveRewards2(lp_objective, "Experience") > 0)) {
            lv_bonusText = StringExternal("Param/Value/lib_COOC_5E424D25");
        }

    }

    return lv_bonusText;
}

int libCOOC_gf_CS_GetObjectiveForData (string lp_objectiveData) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objectiveData));
}

string libCOOC_gf_CS_ObjectiveUserDataInstance (string lp_objective) {
    // Variable Declarations
    string lv_objectiveInstance;
    int lv_index;

    // Automatic Variable Declarations
    int autoFCDD7321_ae;
    const int autoFCDD7321_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = DataTableGetInt(true, ("PObjIndex_" + (lp_objective)));
    if ((lv_index == 0)) {
        lv_objectiveInstance = UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "UserReference", libCOOC_gv_cCC_DISREGARDPLAYER));
        autoFCDD7321_ae = UserDataInstanceCount("MissionObjective");
        lv_index = 1;
        for ( ; ( (autoFCDD7321_ai >= 0 && lv_index <= autoFCDD7321_ae) || (autoFCDD7321_ai < 0 && lv_index >= autoFCDD7321_ae) ) ; lv_index += autoFCDD7321_ai ) {
            if ((UserDataInstance("MissionObjective", lv_index) == lv_objectiveInstance)) {
                DataTableSetInt(true, ("PObjIndex_" + (lp_objective)), lv_index);
                break;
            }

        }
    }
    else {
        lv_objectiveInstance = UserDataInstance("MissionObjective", lv_index);
    }
    return lv_objectiveInstance;
}

int libCOOC_gf_CS_MissionObjectivePreviousProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("ZC_PrvObj_" + (lp_objective)));
}

int libCOOC_gf_CS_MissionObjectiveArchiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("ZC_ArchiveObj_" + (lp_objective)));
}

int libCOOC_gf_CS_GetObjectiveTypeInteger (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return c_objectiveTypePrimary;
    }
    else {
        return c_objectiveTypeOptional;
    }
}

bool libCOOC_gf_CS_GetObjectiveTypeBoolean (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return true;
    }
    else {
        return false;
    }
}

string libCOOC_gf_CS_ObjectiveTableString (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return ("CS_Obj_" + (lp_objective));
}

bool libCOOC_gf_CS_ObjectiveCountsDown (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "CountDown", 1) == 1);
}

int libCOOC_gf_CC_PlayerMasteryLevel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cCX_PlayerMasteryLevel[lp_player];
}

int libCOOC_gf_CC_PlayerMasteryCategory (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MasteryUpgrades", lp_masteryUpgrade, "Category", 1);
}

int libCOOC_gf_CC_PlayerMasteryCategoryPointsAtLevel (int lp_player, int lp_categoryIndex, int lp_level) {
    // Variable Declarations
    int lv_categoryPoints;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_categoryPoints = (lp_level / libCOOC_gv_cCC_MASTERY_CATEGORIES);
    if ((ModI(lp_level, libCOOC_gv_cCC_MASTERY_CATEGORIES) >= lp_categoryIndex)) {
        lv_categoryPoints += 1;
    }

    return lv_categoryPoints;
}

int libCOOC_gf_CC_PlayerMasteryCategoryPointsSpent (int lp_player, int lp_categoryIndex) {
    // Variable Declarations
    int lv_pointsSpent;
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto9A82478A_ai;
    int auto9A82478A_ae;
    int auto9A82478A_ac;

    // Variable Initialization

    // Implementation
    auto9A82478A_ai = 0;
    auto9A82478A_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto9A82478A_ai < auto9A82478A_ae) {
        auto9A82478A_ai = auto9A82478A_ai+1;
        auto9A82478A_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto9A82478A_ai), "Category", 1);
        if( auto9A82478A_ac == lp_categoryIndex &&
        libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto9A82478A_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto9A82478A_ai);
            lv_pointsSpent += libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade);
        }    
    }
    return lv_pointsSpent;
}

int libCOOC_gf_CC_PlayerMasteryCategoryPointsAvailable (int lp_player, int lp_categoryIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gf_CC_PlayerMasteryCategoryPointsAtLevel(lp_player, lp_categoryIndex, 0) - libCOOC_gf_CC_PlayerMasteryCategoryPointsSpent(lp_player, lp_categoryIndex));
}

int libCOOC_gf_CC_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOOC_gf_CC_CommanderInternalIndex(libCOOC_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOOC_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)];
}

string libCOOC_gf_CC_PlayerMasteryCommander (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("MasteryUpgrades", lp_masteryUpgrade, "Commander", 1);
}

string libCOOC_gf_CC_PlayerMasteryUpgradeData (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUpgrade("MasteryUpgrades", lp_masteryUpgrade, "Upgrade", 1);
}

string libCOOC_gf_CC_PlayerMasteryTalent (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("MasteryUpgrades", lp_masteryUpgrade, "TalentData", 1);
}

int libCOOC_gf_CC_PlayerMasteryInternalIndex (string lp_masteryUpgrade) {
    // Variable Declarations
    int lv_internalIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    int autoB4700BC6_ae;
    const int autoB4700BC6_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_masteryUpgrade == null)) {
        return 0;
    }

    lv_internalIndex = UserDataGetInt("MasteryUpgrades", lp_masteryUpgrade, "InternalIndex", 1);
    if ((lv_internalIndex == 0)) {
        autoB4700BC6_ae = (CatalogFieldValueCount(c_gameCatalogCommander, libCOOC_gf_CC_CommanderData(libCOOC_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade)), "MasteryTalentArray", c_playerAny)-1);
        lv_talentIndex = 0;
        for ( ; ( (autoB4700BC6_ai >= 0 && lv_talentIndex <= autoB4700BC6_ae) || (autoB4700BC6_ai < 0 && lv_talentIndex >= autoB4700BC6_ae) ) ; lv_talentIndex += autoB4700BC6_ai ) {
            lv_internalIndex += 1;
            if (((CatalogFieldValueGet(c_gameCatalogCommander, libCOOC_gf_CC_CommanderData(libCOOC_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade)), "MasteryTalentArray[" + IntToString(lv_talentIndex) + "].Talent", c_playerAny)) == libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade))) {
                UserDataSetInt("MasteryUpgrades", lp_masteryUpgrade, "InternalIndex", 1, lv_internalIndex);
                return lv_internalIndex;
                break;
            }

        }
    }
    else {
        return lv_internalIndex;
    }
    return 0;
}

text libCOOC_gf_CC_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Name", c_playerAny));
}

text libCOOC_gf_CC_PlayerMasteryTooltip (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOOC_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Tooltip", c_playerAny));
}

text libCOOC_gf_CC_PlayerMasteryValueFormat (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("MasteryUpgrades", lp_masteryUpgrade, "ValueFormat", 1);
}

fixed libCOOC_gf_CC_PlayerMasteryValueIncrement (string lp_masteryUpgrade, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetFixed("MasteryUpgrades", lp_masteryUpgrade, "PointIncrement", lp_index);
}

bool libCOOC_gf_CC_PlayerMasteryEnabled (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cC_PlayerMasteryEnabled[lp_player];
}

void libCOOC_gf_CC_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOOC_gf_CC_CommanderInternalIndex(libCOOC_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOOC_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)] = lp_level;
    libCOOC_gf_CC_ScoreValueSet(lp_player, (("MasteryPoints" + IntToString(libCOOC_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)))), lp_level);
}

void libCOOC_gf_CC_PlayerMasteryLevelSet (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cCX_PlayerMasteryLevel[lp_player] = lp_level;
}

void libCOOC_gf_CC_PlayerMasteryEnabledSet (int lp_player, bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cC_PlayerMasteryEnabled[lp_player] = lp_enabled;
}

void libCOOC_gf_CC_ApplyMasteryTech (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto37349ADB_ai;
    int auto37349ADB_ae;
    int auto37349ADB_ac;

    // Variable Initialization

    // Implementation
    if ((libCOOC_gv_cC_PlayerMasteryEnabled[lp_player] == false)) {
        return ;
    }

    auto37349ADB_ai = 0;
    auto37349ADB_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto37349ADB_ai < auto37349ADB_ae) {
        auto37349ADB_ai = auto37349ADB_ai+1;
        auto37349ADB_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto37349ADB_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto37349ADB_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto37349ADB_ai);
            if ((libCOOC_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade) != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOOC_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade), libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade));
            }

        }    
    }
}

void libCOOC_gf_CC_SaveMasteryToBank (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto984C9716_ai;
    int auto984C9716_ae;

    // Variable Initialization

    // Implementation
    libCOOC_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, "MasteryLevel", libCOOC_gf_CC_PlayerMasteryLevel(lp_player), 0);
    auto984C9716_ai = 0;
    auto984C9716_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto984C9716_ai < auto984C9716_ae) {
        auto984C9716_ai = auto984C9716_ai+1;
        lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto984C9716_ai);
        libCOOC_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexMasteryUpgrade), libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade), 0);
    }
}

void libCOOC_gf_CC_LoadMasteryFromBank (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto64BE67B0_ai;
    int auto64BE67B0_ae;

    // Variable Initialization

    // Implementation
    libCOOC_gv_cCX_PlayerMasteryLevel[lp_player] = libCOOC_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, "MasteryLevel", 0);
    auto64BE67B0_ai = 0;
    auto64BE67B0_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto64BE67B0_ai < auto64BE67B0_ae) {
        auto64BE67B0_ai = auto64BE67B0_ai+1;
        lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto64BE67B0_ai);
        libCOOC_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOOC_gf_CC_CommanderInternalIndex(libCOOC_gf_CC_PlayerMasteryCommander(lv_indexMasteryUpgrade))][libCOOC_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade)] = libCOOC_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexMasteryUpgrade), 0);
        libCOOC_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexMasteryUpgrade), libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade), 0);
    }
}

string libCOOC_gf_CC_CommanderPrestigeIndexFace (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOOC_gv_cCC_PLAYERPRESTIGEMAXRANK)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "PrestigeArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "PrestigeArray[" + IntToString((lp_index - 1)) + "]", c_playerAny);
        if ((CatalogEntryIsValid(c_gameCatalogButton, lv_prestigefacestring) == true)) {
            return (lv_prestigefacestring);
        }

    }

    return "CommanderPrestige";
}

int libCOOC_gf_CC_PlayerActivePrestigeIndex (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cCX_PlayerPrestigeIndex[lp_player];
}

string libCOOC_gf_CC_PlayerActivePrestigeInstance (int lp_player) {
    // Variable Declarations
    string lv_commander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commander = libCOOC_gf_ActiveCommanderForPlayer(lp_player);

    // Implementation
    if ((lv_commander != null)) {
        return UserDataGetUserInstance("PlayerCommanders", lv_commander, "Prestige", libCOOC_gf_CC_PlayerActivePrestigeIndex(lp_player));
    }

    return null;
}

string libCOOC_gf_CC_PrestigeCommanderBankKey (string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return ("PRESTIGE" + "_" + (lp_commander));
}

string libCOOC_gf_CC_PrestigeCommanderTableKey (string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return ("PRESTIGE" + "_" + IntToString(lp_player) + "_" + (lp_commander));
}

bool libCOOC_gf_CC_PrestigeSuppressed (int lp_player, string lp_suppressionType) {
    // Variable Declarations
    string lv_prestige;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestige = libCOOC_gf_CC_PlayerActivePrestigeInstance(lp_player);

    // Implementation
    if ((UserDataGetInt("PlayerPrestige", lv_prestige, lp_suppressionType, 1) == 1)) {
        return true;
    }

    return false;
}

void libCOOC_gf_CC_SetPlayerPrestigeIndex (int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COOC_36223CF3", "A", IntToText(lp_index));
    TextExpressionSetToken("Param/Expression/lib_COOC_36223CF3", "B", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_36223CF3"), false);
    libCOOC_gv_cCX_PlayerPrestigeIndex[lp_player] = libNtve_gf_ArithmeticIntClamp(lp_index, 0, libCOOC_gv_cCC_PLAYERPRESTIGEMAXRANK);
}

void libCOOC_gf_CC_ApplyUpgradeSupplemental (int lp_player, string lp_upgradeSupplemental) {
    // Variable Declarations
    string lv_upgrade;
    string lv_supplement;
    string lv_script;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_upgrade = UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "Upgrade", 1);
    lv_supplement = UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "Supplement", 1);
    lv_script = "";

    // Implementation
    if ((lp_upgradeSupplemental != null) && (CatalogEntryIsValid(c_gameCatalogUpgrade, lv_upgrade) == true) && (CatalogEntryIsValid(c_gameCatalogUpgrade, lv_supplement) == true) && (TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_supplement, TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountCompleteOnly));
        lv_script = UserDataGetString("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "PostScript", 1);
        if ((lv_script != "")) {
            libNtve_gf_TriggerExecuteByName((lv_script + "_Func"), false, true);
        }

    }

}

void libCOOC_gf_CC_PlayerPrestigeEnable (int lp_player, string lp_prestige) {
    // Variable Declarations
    int lv_index;
    string lv_upgrade;
    string lv_script;
    int lv_ally;

    // Automatic Variable Declarations
    int autoFFFE3F17_ae;
    const int autoFFFE3F17_ai = 1;
    int auto2AF6D99E_ae;
    const int auto2AF6D99E_ai = 1;
    int auto8173B652_ae;
    const int auto8173B652_ai = 1;
    int autoEDDDFDDA_ae;
    const int autoEDDDFDDA_ai = 1;
    playergroup autoED32D43C_g;
    int autoA8942F1B_ae;
    const int autoA8942F1B_ai = 1;
    int autoAF2781D7_ae;
    const int autoAF2781D7_ai = 1;
    int auto232467FB_ae;
    const int auto232467FB_ai = 1;
    int autoF8F85F68_ae;
    const int autoF8F85F68_ai = 1;
    playergroup autoC788CC8D_g;
    int autoE6A4272A_ae;
    const int autoE6A4272A_ai = 1;

    // Variable Initialization
    lv_script = "";

    // Implementation
    if ((lp_prestige == null)) {
        return ;
    }

    autoFFFE3F17_ae = UserDataFieldValueCount("PlayerPrestige", "DisableAbil");
    lv_index = 1;
    for ( ; ( (autoFFFE3F17_ai >= 0 && lv_index <= autoFFFE3F17_ae) || (autoFFFE3F17_ai < 0 && lv_index >= autoFFFE3F17_ae) ) ; lv_index += autoFFFE3F17_ai ) {
        TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("PlayerPrestige", lp_prestige, "DisableAbil", lv_index), false);
    }
    auto2AF6D99E_ae = UserDataFieldValueCount("PlayerPrestige", "EnableAbil");
    lv_index = 1;
    for ( ; ( (auto2AF6D99E_ai >= 0 && lv_index <= auto2AF6D99E_ae) || (auto2AF6D99E_ai < 0 && lv_index >= auto2AF6D99E_ae) ) ; lv_index += auto2AF6D99E_ai ) {
        TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("PlayerPrestige", lp_prestige, "EnableAbil", lv_index), true);
    }
    auto8173B652_ae = UserDataFieldValueCount("PlayerPrestige", "SuppressUpgrade");
    lv_index = 1;
    for ( ; ( (auto8173B652_ai >= 0 && lv_index <= auto8173B652_ae) || (auto8173B652_ai < 0 && lv_index >= auto8173B652_ae) ) ; lv_index += auto8173B652_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetGameLink("PlayerPrestige", lp_prestige, "SuppressUpgrade", lv_index), 0);
    }
    autoEDDDFDDA_ae = UserDataFieldValueCount("PlayerPrestige", "SuppressUpgradeShared");
    lv_index = 1;
    for ( ; ( (autoEDDDFDDA_ai >= 0 && lv_index <= autoEDDDFDDA_ae) || (autoEDDDFDDA_ai < 0 && lv_index >= autoEDDDFDDA_ae) ) ; lv_index += autoEDDDFDDA_ai ) {
        autoED32D43C_g = libCOOC_gf_CommanderPlayers();
        lv_ally = -1;
        while (true) {
            lv_ally = PlayerGroupNextPlayer(autoED32D43C_g, lv_ally);
            if (lv_ally < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_ally, UserDataGetGameLink("PlayerPrestige", lp_prestige, "SuppressUpgradeShared", lv_index), 0);
        }
    }
    autoA8942F1B_ae = UserDataFieldValueCount("PlayerPrestige", "DisableUnit");
    lv_index = 1;
    for ( ; ( (autoA8942F1B_ai >= 0 && lv_index <= autoA8942F1B_ae) || (autoA8942F1B_ai < 0 && lv_index >= autoA8942F1B_ae) ) ; lv_index += autoA8942F1B_ai ) {
        TechTreeUnitAllow(lp_player, UserDataGetUnit("PlayerPrestige", lp_prestige, "DisableUnit", lv_index), false);
    }
    autoAF2781D7_ae = UserDataFieldValueCount("PlayerPrestige", "UpgradeSupplements");
    lv_index = 1;
    for ( ; ( (autoAF2781D7_ai >= 0 && lv_index <= autoAF2781D7_ae) || (autoAF2781D7_ai < 0 && lv_index >= autoAF2781D7_ae) ) ; lv_index += autoAF2781D7_ai ) {
        libCOOC_gf_CC_ApplyUpgradeSupplemental(lp_player, UserDataGetUserInstance("PlayerPrestige", lp_prestige, "UpgradeSupplements", lv_index));
    }
    lv_upgrade = UserDataGetGameLink("PlayerPrestige", lp_prestige, "PrimaryUpgrade", 1);
    if ((lv_upgrade != null)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 1);
    }

    lv_script = UserDataGetString("PlayerPrestige", lp_prestige, "ScriptName", 1);
    if ((lv_script != "")) {
        libNtve_gf_TriggerExecuteByName((lv_script + "_Func"), true, true);
    }

    auto232467FB_ae = UserDataFieldValueCount("PlayerPrestige", "SecondaryUpgradesSelf");
    lv_index = 1;
    for ( ; ( (auto232467FB_ai >= 0 && lv_index <= auto232467FB_ae) || (auto232467FB_ai < 0 && lv_index >= auto232467FB_ae) ) ; lv_index += auto232467FB_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetGameLink("PlayerPrestige", lp_prestige, "SecondaryUpgradesSelf", lv_index), 1);
    }
    autoF8F85F68_ae = UserDataFieldValueCount("PlayerPrestige", "SecondaryUpgradesShared");
    lv_index = 1;
    for ( ; ( (autoF8F85F68_ai >= 0 && lv_index <= autoF8F85F68_ae) || (autoF8F85F68_ai < 0 && lv_index >= autoF8F85F68_ae) ) ; lv_index += autoF8F85F68_ai ) {
        autoC788CC8D_g = libCOOC_gf_CommanderPlayers();
        lv_ally = -1;
        while (true) {
            lv_ally = PlayerGroupNextPlayer(autoC788CC8D_g, lv_ally);
            if (lv_ally < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_ally, UserDataGetGameLink("PlayerPrestige", lp_prestige, "SecondaryUpgradesShared", lv_index), 1);
        }
    }
    autoE6A4272A_ae = UserDataFieldValueCount("PlayerPrestige", "PlayerResponses");
    lv_index = 1;
    for ( ; ( (autoE6A4272A_ai >= 0 && lv_index <= autoE6A4272A_ae) || (autoE6A4272A_ai < 0 && lv_index >= autoE6A4272A_ae) ) ; lv_index += autoE6A4272A_ai ) {
        libCOOC_gf_CC_PlayerResponseEnable(lp_player, UserDataGetUserInstance("PlayerPrestige", lp_prestige, "PlayerResponses", lv_index), true);
    }
    PlayerApplySkin(lp_player, UserDataGetGameLink("PlayerPrestige", lp_prestige, "Skin", 1), true);
}

void libCOOC_gf_CC_ApplyPrestigeTech (int lp_player) {
    // Variable Declarations
    string lv_upgrade;
    string lv_button;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COOC_BCBD5063", "A", IntToText(libCOOC_gf_CC_PlayerActivePrestigeIndex(lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COOC_BCBD5063", "B", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_BCBD5063"), false);
    libCOOC_gf_CC_PlayerPrestigeEnable(lp_player, libCOOC_gf_CC_PlayerActivePrestigeInstance(lp_player));
}

void libCOOC_gf_CC_SaveChampionToBank3 (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCommander;
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto78F1F722_ai;
    int auto78F1F722_ae;

    // Variable Initialization

    // Implementation
    auto78F1F722_ai = 1;
    auto78F1F722_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto78F1F722_ai < auto78F1F722_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto78F1F722_ai);
        auto78F1F722_ai = auto78F1F722_ai+1;
        libCOOC_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, libCOOC_gf_CC_PrestigeCommanderBankKey(lv_indexCommander, lp_player), DataTableGetInt(true, libCOOC_gf_CC_PrestigeCommanderTableKey(lv_indexCommander, lp_player)), 0);
    }
}

void libCOOC_gf_CC_LoadChampionFromBank3 (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexPerk;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int auto8D8097E9_ai;
    int auto8D8097E9_ae;

    // Variable Initialization

    // Implementation
    auto8D8097E9_ai = 1;
    auto8D8097E9_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto8D8097E9_ai < auto8D8097E9_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto8D8097E9_ai);
        auto8D8097E9_ai = auto8D8097E9_ai+1;
        DataTableSetInt(true, libCOOC_gf_CC_PrestigeCommanderTableKey(lv_indexCommander, lp_player), libCOOC_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, libCOOC_gf_CC_PrestigeCommanderBankKey(lv_indexCommander, lp_player), 0));
    }
}

string libCOOC_gf_ActiveCommanderForPlayer (int lp_player) {
    // Variable Declarations
    string lv_commanderInstance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commanderInstance = libCOOC_gv_cCX_PlayerCommander[lp_player];

    // Implementation
    return libCOOC_gv_cCX_PlayerCommander[lp_player];
}

int libCOOC_gf_CC_CommanderLevel (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cC_PlayerLevel[lp_player][libCOOC_gf_CC_CommanderInternalIndex(lp_commander)];
}

string libCOOC_gf_CC_PlayerLevelCommander (string lp_playerLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("PlayerLevels", lp_playerLevel, "Commander", 1);
}

int libCOOC_gf_CC_PlayerLevelValue (string lp_playerLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("PlayerLevels", lp_playerLevel, "Level", 1);
}

int libCOOC_gf_CC_PlayerExperience (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_cCX_PlayerExperience[lp_player][libCOOC_gf_CC_CommanderInternalIndex(lp_commander)];
}

void libCOOC_gf_SetMissionEffort (fixed lp_percentEffort) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoCB6C4A03_g;

    // Variable Initialization

    // Implementation
    libCOOC_gv_cC_PlayerExperienceEffortPct = lp_percentEffort;
    autoCB6C4A03_g = libCOOC_gf_NondefeatedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoCB6C4A03_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_CC_PlayerSetXPScores(c_gameOverDefeat, lv_indexPlayer);
    }
}

fixed libCOOC_gf_CC_PlayerExperienceResultModifier (int lp_result) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true) && (libCOOC_gv_cC_DebugDefeatMultiplierOverride >= 0.0)) {
        return libCOOC_gv_cC_DebugDefeatMultiplierOverride;
    }

    if ((lp_result == c_gameOverVictory)) {
        return 1.0;
    }

    return UserDataGetFixed("Experience", "GameValues", "LossMaxMultiplier", 1);
}

fixed libCOOC_gf_CC_PlayerExperienceInLevelPct (int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_xPStart;
    int lv_xPInLevel;
    int lv_currentLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentLevel = libCOOC_gf_CC_CommanderLevel(lp_player, lp_commander);
    if ((lv_currentLevel == libCOOC_gv_cCC_PLAYERLEVELMAX)) {
        return 100.0;
    }

    lv_xPStart = libCOOC_gf_CC_PlayerLevelExperienceNeededTotal(lv_currentLevel);
    lv_xPInLevel = (libCOOC_gf_CC_PlayerExperience(lp_player, lp_commander)-lv_xPStart);
    return (IntToFixed(lv_xPInLevel) / IntToFixed(libCOOC_gf_CC_PlayerLevelExperienceNeededDelta((lv_currentLevel+1))));
}

int libCOOC_gf_CC_PlayerExperienceToNextLevel (int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_xPStart;
    int lv_xPInLevel;
    int lv_currentLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentLevel = libCOOC_gf_CC_CommanderLevel(lp_player, lp_commander);
    if ((lv_currentLevel == libCOOC_gv_cCC_PLAYERLEVELMAX)) {
        return 0;
    }

    return (libCOOC_gf_CC_PlayerLevelExperienceNeededTotal((lv_currentLevel+1))-libCOOC_gf_CC_PlayerExperience(lp_player, lp_commander));
}

int libCOOC_gf_CC_PlayerLevelExperienceNeededDelta (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level == 0)) {
        return 0;
    }

    return UserDataGetInt("Experience", "GameValues", "ExperienceToLevel", lp_level);
}

int libCOOC_gf_CC_PlayerLevelExperienceNeededTotal (int lp_level) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_maxLevel;
    int lv_xPTotal;

    // Automatic Variable Declarations
    int auto20668AF4_ae;
    const int auto20668AF4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_maxLevel = MinI(lp_level, libCOOC_gv_cCC_PLAYERLEVELMAX);
    auto20668AF4_ae = lv_maxLevel;
    lv_levelIndex = 1;
    for ( ; ( (auto20668AF4_ai >= 0 && lv_levelIndex <= auto20668AF4_ae) || (auto20668AF4_ai < 0 && lv_levelIndex >= auto20668AF4_ae) ) ; lv_levelIndex += auto20668AF4_ai ) {
        lv_xPTotal += libCOOC_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex);
    }
    return lv_xPTotal;
}

int libCOOC_gf_CC_PlayerLevelFromExperience (int lp_experience) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_xPRemaining;

    // Automatic Variable Declarations
    const int auto9EE10D1C_ae = libCOOC_gv_cCC_PLAYERLEVELMAX;
    const int auto9EE10D1C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_xPRemaining = lp_experience;
    lv_levelIndex = 1;
    for ( ; ( (auto9EE10D1C_ai >= 0 && lv_levelIndex <= auto9EE10D1C_ae) || (auto9EE10D1C_ai < 0 && lv_levelIndex >= auto9EE10D1C_ae) ) ; lv_levelIndex += auto9EE10D1C_ai ) {
        if ((lv_xPRemaining < libCOOC_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex))) {
            return (lv_levelIndex-1);
        }

        lv_xPRemaining -= libCOOC_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex);
    }
    return libCOOC_gv_cCC_PLAYERLEVELMAX;
}

bool libCOOC_gf_CC_PlayerAllyGivesAbility (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(lp_player)) == "TerranSwann")) {
        return true;
    }
    else if ((libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(lp_player)) == "TerranRaynor")) {
        return true;
    }
    return false;
}

int libCOOC_gf_CC_PlayerAlly (int lp_player) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lp_player);

    // Implementation
    PlayerGroupRemove(lv_group, lp_player);
    if ((PlayerGroupCount(lv_group) > 0)) {
        return PlayerGroupPlayer(lv_group, 1);
    }

    if ((lp_player == 1)) {
        return 2;
    }
    else {
        return 1;
    }
}

int libCOOC_gf_CC_PlayerAllyNew (int lp_player) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lp_player);

    // Implementation
    PlayerGroupRemove(lv_group, lp_player);
    return PlayerGroupPlayer(lv_group, 1);
}

int libCOOC_gf_CC_MissionExperienceReward () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Experience", "GameValues", "WinExperience", 1);
}

fixed libCOOC_gf_CC_MissionExperienceDifficultyBonus (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetFixed("Experience", "GameValues", "DifficultyModifier", libCOOC_gf_CC_DifficultyIndex(lp_difficulty))+libCOMU_gf_CT_GetRandomMutatorXPModifier());
}

string libCOOC_gf_CC_CommanderUserInstance (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == false)) {
        return null;
    }

    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogCommander, (lp_commander), "UserReference", libCOOC_gv_cCC_DISREGARDPLAYER));
}

string libCOOC_gf_CC_CommanderData (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "CommanderData", 1);
}

string libCOOC_gf_CC_CommanderRace (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "Race", 1);
}

string libCOOC_gf_CC_CommanderSpawnRace (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "SpawnRace", 1);
}

int libCOOC_gf_CC_CommanderInternalIndex (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("PlayerCommanders", lp_commander, "UniqueIndex", 1);
}

bool libCOOC_gf_CC_CommanderShowInUI (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("PlayerCommanders", lp_commander, "ShowInUI", 1) == 1);
}

string libCOOC_gf_CC_CommanderConversationLink (string lp_characterInstance) {
    // Automatic Variable Declarations
    string autoBAA82F24_val;

    // Implementation
    autoBAA82F24_val = lp_characterInstance;
    if (autoBAA82F24_val == "TerranRaynor") {
        return "char_Raynor";
    }
    else if (autoBAA82F24_val == "TerranSwann") {
        return "char_Swann";
    }
    else if (autoBAA82F24_val == "ZergKerrigan") {
        return "char_Kerrigan";
    }
    else if (autoBAA82F24_val == "ZergZagara") {
        return "char_Zagara";
    }
    else if (autoBAA82F24_val == "ProtossArtanis") {
        return "char_Artanis";
    }
    else if (autoBAA82F24_val == "ProtossVorazun") {
        return "char_Vorazun";
    }
    else if (autoBAA82F24_val == "ProtossKarax") {
        return "char_Karax";
    }
    else if (autoBAA82F24_val == "ZergAbathur") {
        return "char_Abathur";
    }
    else if (autoBAA82F24_val == "ProtossAlarak") {
        return "char_Alarak";
    }
    else if (autoBAA82F24_val == "TerranNova") {
        return "char_Nova";
    }
    else if (autoBAA82F24_val == "ZergStukov") {
        return "char_Stukov";
    }
    else if (autoBAA82F24_val == "ProtossFenix") {
        return "char_ProtossAI";
    }
    else if (autoBAA82F24_val == "ZergDehaka") {
        return "char_Dehaka";
    }
    else if (autoBAA82F24_val == "TerranHorner") {
        return "char_Horner";
    }
    else if (autoBAA82F24_val == "TerranTychus") {
        return "char_Tychus";
    }
    else if (autoBAA82F24_val == "ProtossZeratul") {
        return "char_ZeratulAC";
    }
    else if (autoBAA82F24_val == "ZergStetmann") {
        return "char_BelshirScientist";
    }
    else if (autoBAA82F24_val == "TerranMengsk") {
        return "char_MengskCommander";
    }
    else {
    }
    return "char_TerranAdjutant";
}

string libCOOC_gf_CC_CommanderPortraitModel (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetModel("PlayerCommanders", lp_commander, "PortraitModel", 1);
}

string libCOOC_gf_CC_CommanderPortraitActor (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "PortraitActor", 1);
}

string libCOOC_gf_CC_CommanderCustomImage (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("PlayerCommanders", lp_commander, "CustomImage", 1);
}

text libCOOC_gf_CC_CommanderName (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("PlayerCommanders", lp_commander, "Name", 1);
}

int libCOOC_gf_CC_CommanderGender (string lp_commander) {
    // Variable Declarations
    int lv_genderIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_genderIndex = UserDataGetInt("PlayerCommanders", lp_commander, "Gender", 1);
    return lv_genderIndex;
}

text libCOOC_gf_CC_CommanderDescription (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("PlayerCommanders", lp_commander, "Description", 1);
}

string libCOOC_gf_CC_CommanderDefaultVoicePack (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "DefaultVoicePack", 1);
}

text libCOOC_gf_CC_CommanderInfoDetails (string lp_commander, int lp_detailIndex) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("PlayerCommanders", lp_commander, "InfoDetails", lp_detailIndex);
}

string libCOOC_gf_CC_CommanderSelectCutscene (string lp_commander) {
    // Variable Declarations
    string lv_sceneName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sceneName = "";

    // Implementation
    lv_sceneName = UserDataGetString("PlayerCommanders", lp_commander, "SelectionScene", 1);
    return "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
}

string libCOOC_gf_CC_CommanderConvoTag (string lp_commander) {
    // Automatic Variable Declarations
    string auto7BF4C060_val;

    // Implementation
    auto7BF4C060_val = lp_commander;
    if (auto7BF4C060_val == "ProtossArtanis") {
        return "Artanis";
    }
    else if (auto7BF4C060_val == "ProtossVorazun") {
        return "Vorazun";
    }
    else if (auto7BF4C060_val == "ZergKerrigan") {
        return "Kerrigan";
    }
    else if (auto7BF4C060_val == "ZergZagara") {
        return "Zagara";
    }
    else if (auto7BF4C060_val == "TerranRaynor") {
        return "Raynor";
    }
    else if (auto7BF4C060_val == "TerranSwann") {
        return "Swann";
    }
    else if (auto7BF4C060_val == "ZergAbathur") {
        return "Abathur";
    }
    else if (auto7BF4C060_val == "ProtossFenix") {
        return "Fenix";
    }
    else if (auto7BF4C060_val == "ZergDehaka") {
        return "Dehaka";
    }
    else if (auto7BF4C060_val == "TerranHorner") {
        return "Horner";
    }
    else if (auto7BF4C060_val == "TerranTychus") {
        return "Tychus";
    }
    else if (auto7BF4C060_val == "ProtossZeratul") {
        return "Zeratul";
    }
    else if (auto7BF4C060_val == "ZergStetmann") {
        return "Stetmann";
    }
    else if (auto7BF4C060_val == "TerranMengsk") {
        return "Mengsk";
    }
    else {
    }
    return "Raynor";
}

string libCOOC_gf_CC_CommanderScoreCoopStatistic (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "ScoreStatisticCoop", 1);
}

string libCOOC_gf_CC_CommanderScoreSelfStatistic (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "ScoreStatisticSelf", 1);
}

int libCOOC_gf_CC_CommanderUserFieldInt (string lp_commander, string lp_userType, string lp_userInstance, string lp_userField) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto0D63B996_ae;
    const int auto0D63B996_ai = 1;

    // Variable Initialization

    // Implementation
    auto0D63B996_ae = UserDataFieldValueCount(lp_userType, "Commander");
    lv_index = 1;
    for ( ; ( (auto0D63B996_ai >= 0 && lv_index <= auto0D63B996_ae) || (auto0D63B996_ai < 0 && lv_index >= auto0D63B996_ae) ) ; lv_index += auto0D63B996_ai ) {
        if ((UserDataGetUserInstance(lp_userType, lp_userInstance, "Commander", lv_index) == lp_commander)) {
            return UserDataGetInt(lp_userType, lp_userInstance, lp_userField, lv_index);
        }

    }
    return -1;
}

string libCOOC_gf_CC_CommanderHeroUnitType (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroUnit", 1);
}

string libCOOC_gf_CC_CommanderHeroStructureType (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroStructure", 1);
}

abilcmd libCOOC_gf_CC_CommanderHeroReviveCommand (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetAbilCmd("PlayerCommanders", lp_commander, "ReviveAbilityCommand", 1);
}

string libCOOC_gf_CC_CommanderHeroReviveUnitType (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroReviveUnit", 1);
}

string libCOOC_gf_CC_CommanderHeroReviveLink (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("PlayerCommanders", lp_commander, "HeroReviveLink", 1);
}

string libCOOC_gf_CC_CommanderHeroFirstReviveBehavior (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroUnitFirstReviveBehavior", 1);
}

string libCOOC_gf_CC_CommanderHeroNormalReviveBehavior (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroUnitNormalReviveBehavior", 1);
}

string libCOOC_gf_CC_CommanderHeroReviverExtraBehavior (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroReviverExtraReviveBehavior", 1);
}

bool libCOOC_gf_CC_CommanderInGame (string lp_commander) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoA2669A99_g;

    // Variable Initialization

    // Implementation
    autoA2669A99_g = libCOOC_gf_CommanderPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoA2669A99_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_player) == lp_commander)) {
            return true;
        }

    }
    return false;
}

string libCOOC_gf_CC_CommanderGlobalCastUnitType (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "GlobalCastUnit", 1);
}

soundlink libCOOC_gf_CC_CommanderVOLine (string lp_commander, int lp_line) {
    // Variable Declarations
    string lv_vOSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_vOSound = UserDataGetSound("PlayerCommanders", lp_commander, "StandardVO", (lp_line));
    if ((lv_vOSound == null)) {
        return null;
    }

    return SoundLink(lv_vOSound, c_soundIndexAny);
}

text libCOOC_gf_CC_CommanderGeneralTipTitle (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("GeneralTips", lp_tipID, "TipTitle", 1);
}

text libCOOC_gf_CC_CommanderGeneralTipDetails (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("GeneralTips", lp_tipID, "TipDetails", 1);
}

string libCOOC_gf_CC_CommanderGeneralTipIcon (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("GeneralTips", lp_tipID, "TipIcon", 1);
}

int libCOOC_gf_CC_CommanderPlayer (string lp_commander) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto88E6462B_g;

    // Variable Initialization

    // Implementation
    auto88E6462B_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto88E6462B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commander)) {
            return lv_indexPlayer;
        }

    }
    return c_playerAny;
}

int libCOOC_gf_CC_PlayerOfCommanderInGroupFirst (string lp_commander, playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto172C663B_g;

    // Variable Initialization

    // Implementation
    auto172C663B_g = lp_playerGroup;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto172C663B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commander)) {
            return lv_indexPlayer;
        }

    }
    return c_playerAny;
}

playergroup libCOOC_gf_CC_PlayersOfCommander (string lp_commander) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup autoE93E4C9C_g;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    autoE93E4C9C_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE93E4C9C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commander)) {
            PlayerGroupAdd(lv_playerGroup, lv_indexPlayer);
        }

    }
    return lv_playerGroup;
}

string libCOOC_gf_CC_CommanderSkin (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "CommanderSkin", 1);
}

void libCOOC_gf_CC_PlayerAwardMissionXP (int lp_result, int lp_player) {
    // Variable Declarations
    int lv_baseXP;
    int lv_objectiveXP;
    int lv_totalXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    if ((GameIsOnline() == true)) {
        libCOOC_gf_CC_PlayerSetXPScores(lp_result, lp_player);
    }
    else {
        lv_baseXP = FixedToInt((libCOOC_gf_CC_MissionExperienceReward()*libCOOC_gf_CC_PlayerExperienceResultModifier(lp_result)*libCOOC_gf_CC_MissionExperienceDifficultyBonus(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player))));
        lv_objectiveXP = FixedToInt((libCOOC_gf_MissionRewardTotalEarned2("Experience")*libCOOC_gf_CC_PlayerExperienceResultModifier(lp_result)*libCOOC_gf_CC_MissionExperienceDifficultyBonus(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player))));
        lv_totalXP = (lv_totalXP + lv_objectiveXP);
        libCOOC_gf_CC_PlayerExperienceAdd(lp_player, lv_totalXP);
        libCOOC_gf_CC_UpdatePlayerLevel(lp_player);
    }
}

void libCOOC_gf_CC_PlayerSetXPScores (int lp_result, int lp_player) {
    // Variable Declarations
    int lv_baseXP;
    int lv_objectiveXP;
    int lv_totalXP;
    int lv_objectiveXPGained;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsOnline() == false)) {
        return ;
    }

    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    lv_baseXP = FixedToInt(Ceiling((IntToFixed(libCOOC_gf_CC_MissionExperienceReward())*libCOOC_gf_CC_PlayerExperienceResultModifier(lp_result))));
    lv_objectiveXP = FixedToInt(Ceiling((IntToFixed(libCOOC_gf_MissionRewardTotalEarned2("Experience"))*libCOOC_gf_CC_PlayerExperienceResultModifier(lp_result))));
    if ((lp_result == c_gameOverDefeat)) {
        lv_baseXP = FixedToInt((lv_baseXP / 100.0));
        lv_baseXP = FixedToInt(Ceiling((IntToFixed(lv_baseXP)*libCOOC_gv_cC_PlayerExperienceEffortPct)));
        lv_objectiveXP = FixedToInt((lv_objectiveXP / 100.0));
        lv_objectiveXP = FixedToInt(Ceiling((IntToFixed(lv_objectiveXP)*libCOOC_gv_cC_PlayerExperienceEffortPct)));
    }

    lv_totalXP = (lv_baseXP + lv_objectiveXP);
    if ((lv_objectiveXP > PlayerScoreValueGetAsInt(lp_player, "BonusObjectiveXP"))) {
        lv_objectiveXPGained = (lv_objectiveXP-PlayerScoreValueGetAsInt(lp_player, "BonusObjectiveXP"));
        AchievementTermQuantityAdd(lp_player, "CommanderRecruitXPBonus25", lv_objectiveXPGained);
        AchievementTermQuantityAdd(lp_player, "CommanderRecruitXPBonus50", lv_objectiveXPGained);
        AchievementTermQuantityAdd(lp_player, "CommanderRecruitXPBonus100", lv_objectiveXPGained);
        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 2) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 4))) {
            AchievementTermQuantityAdd(lp_player, "CommanderSoldierXPBonus25", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderSoldierXPBonus50", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderSoldierXPBonus100", lv_objectiveXPGained);
        }

        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 4))) {
            AchievementTermQuantityAdd(lp_player, "CommanderVeteranXPBonus25", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderVeteranXPBonus50", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderVeteranXPBonus100", lv_objectiveXPGained);
        }

        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 4)) {
            AchievementTermQuantityAdd(lp_player, "CommanderCommanderXPBonus25", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderCommanderXPBonus50", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderCommanderXPBonus100", lv_objectiveXPGained);
        }

    }

    PlayerScoreValueSetFromInt(lp_player, "MetaExperience", lv_totalXP);
    PlayerScoreValueSetFromInt(lp_player, "BonusObjectiveXP", lv_objectiveXP);
    PlayerScoreValueSetFromInt(lp_player, "MissionXP", lv_baseXP);
    PlayerScoreValueSetFromInt(lp_player, "UnitsKilledPoints", 0);
    PlayerScoreValueSetFromInt(lp_player, "UnitsMadePoints", 0);
    PlayerScoreValueSetFromInt(lp_player, "TechnologyPoints", 0);
    PlayerScoreValueSetFromInt(lp_player, "StructuresKilledPoints", 0);
    PlayerScoreValueSetFromInt(lp_player, "StructuresMadePoints", 0);
}

void libCOOC_gf_CC_PlayerCommanderSet (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_DevStart_Forced == false) && (GameMapIsBlizzard() == false) && (lp_commander != "TerranRaynor") && (lp_commander != "ZergKerrigan") && (lp_commander != "ProtossArtanis")) {
        libCOOC_gf_CC_PlayerCommanderSet(lp_player, "TerranRaynor");
        return ;
    }

    if ((PlayerCommander(lp_player) != libCOOC_gf_CC_CommanderData(lp_commander))) {
        PlayerSetCommander(lp_player, libCOOC_gf_CC_CommanderData(lp_commander));
    }

    libCOOC_gv_cCX_PlayerCommander[lp_player] = lp_commander;
}

void libCOOC_gf_CC_UpdatePlayerLevel (int lp_player) {
    // Variable Declarations
    string lv_indexCommander;

    // Automatic Variable Declarations
    int auto872D825B_ai;
    int auto872D825B_ae;

    // Variable Initialization

    // Implementation
    if ((libCOOC_gv_cC_DevStart_Forced == false) && (GameIsOnline() == true)) {
        return ;
    }

    auto872D825B_ai = 1;
    auto872D825B_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto872D825B_ai < auto872D825B_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto872D825B_ai);
        auto872D825B_ai = auto872D825B_ai+1;
        libCOOC_gf_CC_PlayerLevelSet(lp_player, libCOOC_gf_CC_PlayerLevelFromExperience(libCOOC_gf_CC_PlayerExperience(lp_player, lv_indexCommander)), lv_indexCommander);
    }
}

void libCOOC_gf_CC_PlayerExperienceSet (int lp_player, int lp_experience, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cCX_PlayerExperience[lp_player][libCOOC_gf_CC_CommanderInternalIndex(lp_commander)] = lp_experience;
}

void libCOOC_gf_CC_PlayerLevelSet (int lp_player, int lp_level, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cC_PlayerLevel[lp_player][libCOOC_gf_CC_CommanderInternalIndex(lp_commander)] = MinI(lp_level, libCOOC_gv_cCC_PLAYERLEVELMAX);
}

void libCOOC_gf_CC_PlayerExperienceAdd (int lp_player, int lp_experience) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gf_CC_PlayerExperienceSet(lp_player, (libCOOC_gf_CC_PlayerExperience(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player))+lp_experience), libCOOC_gf_ActiveCommanderForPlayer(lp_player));
}

void libCOOC_gf_CC_PlayerExperienceSetToLevel (int lp_player, int lp_level, string lp_commander) {
    // Variable Declarations
    int lv_levelCount;
    int lv_xPCount;
    string lv_indexLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOOC_gf_CC_PlayerExperienceSet(lp_player, libCOOC_gf_CC_PlayerLevelExperienceNeededTotal(lp_level), lp_commander);
}

void libCOOC_gf_CC_LoadCommandersFromBank (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    int lv_commanderIndex;
    int lv_selectedCommanderIndex;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int auto4BF3AD5B_ai;
    int auto4BF3AD5B_ae;

    // Variable Initialization

    // Implementation
    lv_selectedCommanderIndex = libCOOC_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, "ActiveCommander", 0);
    auto4BF3AD5B_ai = 1;
    auto4BF3AD5B_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto4BF3AD5B_ai < auto4BF3AD5B_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto4BF3AD5B_ai);
        auto4BF3AD5B_ai = auto4BF3AD5B_ai+1;
        lv_commanderIndex = libCOOC_gf_CC_CommanderInternalIndex(lv_indexCommander);
        if ((lv_selectedCommanderIndex == lv_commanderIndex)) {
            libCOOC_gv_cCX_PlayerCommander[lp_player] = lv_indexCommander;
        }

        libCOOC_gv_cCX_PlayerExperience[lp_player][lv_commanderIndex] = libCOOC_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexCommander), 0);
    }
}

void libCOOC_gf_CC_SaveCommandersToBank (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    int lv_commanderIndex;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int autoF6E85F3C_ai;
    int autoF6E85F3C_ae;

    // Variable Initialization

    // Implementation
    libCOOC_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, "ActiveCommander", libCOOC_gf_CC_CommanderInternalIndex(libCOOC_gv_cCX_PlayerCommander[lp_player]), 0);
    autoF6E85F3C_ai = 1;
    autoF6E85F3C_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (autoF6E85F3C_ai < autoF6E85F3C_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", autoF6E85F3C_ai);
        autoF6E85F3C_ai = autoF6E85F3C_ai+1;
        lv_commanderIndex = libCOOC_gf_CC_CommanderInternalIndex(lv_indexCommander);
        libCOOC_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexCommander), libCOOC_gv_cCX_PlayerExperience[lp_player][lv_commanderIndex], 0);
    }
}

void libCOOC_gf_CC_ResetCurrency (int lp_player) {
    // Variable Declarations
    int lv_raceIndex;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int autoB7DB4A72_ai;
    int autoB7DB4A72_ae;

    // Variable Initialization

    // Implementation
    autoB7DB4A72_ai = 1;
    autoB7DB4A72_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (autoB7DB4A72_ai < autoB7DB4A72_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", autoB7DB4A72_ai);
        autoB7DB4A72_ai = autoB7DB4A72_ai+1;
        libCOOC_gf_CC_PlayerExperienceSetToLevel(lp_player, 0, lv_indexCommander);
    }
}

void libCOOC_gf_CC_ApplyCommanderTech (int lp_player) {
    // Variable Declarations
    int lv_indexTech;
    string lv_playerCommander;

    // Automatic Variable Declarations
    int autoDA1B9A8E_ae;
    const int autoDA1B9A8E_ai = 1;
    int autoC7DFFF31_ae;
    const int autoC7DFFF31_ai = 1;
    string autoF7D954DE_val;

    // Variable Initialization

    // Implementation
    lv_playerCommander = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    autoDA1B9A8E_ae = UserDataFieldValueCount("PlayerCommanders", "DefaultAbilityCommands");
    lv_indexTech = 1;
    for ( ; ( (autoDA1B9A8E_ai >= 0 && lv_indexTech <= autoDA1B9A8E_ae) || (autoDA1B9A8E_ai < 0 && lv_indexTech >= autoDA1B9A8E_ae) ) ; lv_indexTech += autoDA1B9A8E_ai ) {
        if ((UserDataGetAbilCmd("PlayerCommanders", lv_playerCommander, "DefaultAbilityCommands", lv_indexTech) != null)) {
            TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("PlayerCommanders", lv_playerCommander, "DefaultAbilityCommands", lv_indexTech), true);
        }

    }
    autoC7DFFF31_ae = UserDataFieldValueCount("PlayerCommanders", "DefaultUpgrades");
    lv_indexTech = 1;
    for ( ; ( (autoC7DFFF31_ai >= 0 && lv_indexTech <= autoC7DFFF31_ae) || (autoC7DFFF31_ai < 0 && lv_indexTech >= autoC7DFFF31_ae) ) ; lv_indexTech += autoC7DFFF31_ai ) {
        if ((UserDataGetUpgrade("PlayerCommanders", lv_playerCommander, "DefaultUpgrades", lv_indexTech) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("PlayerCommanders", lv_playerCommander, "DefaultUpgrades", lv_indexTech), 1);
        }

    }
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderLevel", libCOOC_gv_cC_PlayerLevel[lp_player][libCOOC_gf_CC_CommanderInternalIndex(lv_playerCommander)]);
    PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, (UserDataGetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(lp_player), "SuppliesMax", 1) + UserDataGetInt("PlayerPrestige", libCOOC_gf_CC_PlayerActivePrestigeInstance(lp_player), "SuppliesMax", 1)));
    PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesMade, c_playerPropOperSetTo, (UserDataGetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(lp_player), "SuppliesMade", 1) + UserDataGetInt("PlayerPrestige", libCOOC_gf_CC_PlayerActivePrestigeInstance(lp_player), "SuppliesMade", 1)));
    autoF7D954DE_val = lv_playerCommander;
    if (autoF7D954DE_val == "ProtossZeratul") {
        libCOOC_gf_CC_ApplyCommanderTechZeratul(lp_player);
    }
    else {
    }
    libCOOC_gf_CC_ApplyMasteryTech(lp_player);
    if ((libCOOC_gf_CC_CommanderSkin(lv_playerCommander) != "")) {
        PlayerApplySkin(lp_player, libCOOC_gf_CC_CommanderSkin(lv_playerCommander), true);
    }

}

void libCOOC_gf_CC_ApplyCommanderTechZeratul (int lp_player) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itAllyAspect;
    bool lv_itAllyAspectStateAB;
    bool lv_itAllyAspectStateBA;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itAllyAspect = c_allianceIdPassive;
    lv_itAllyAspectStateAB = true;
    lv_itAllyAspectStateBA = true;

    // Implementation
    TechTreeUnitAllow(lp_player, "Assimilator", false);
    TechTreeUnitAllow(lp_player, "AutomatedAssimilator", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 7), false);
    TechTreeUnitAllow(lp_player, "AutomatedAssimilatorZeratul", true);
    TechTreeUnitAllow(lp_player, "ZeratulRoboticsFacility", true);
    TechTreeUnitAllow(lp_player, "ZeratulRoboticsBay", true);
    TechTreeUnitAllow(lp_player, "ZeratulGateway", true);
    TechTreeUnitAllow(lp_player, "ZeratulCyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "ZeratulDarkShrine", true);
    TechTreeUnitAllow(lp_player, "ZeratulPhotonCannon", true);
}

void libCOOC_gf_CC_UpdateProtossStates (int lp_player) {
    // Automatic Variable Declarations
}

void libCOOC_gf_CC_UpdateTerranStates (int lp_player) {
    // Automatic Variable Declarations
}

void libCOOC_gf_CC_ApplyRaceTechTerran (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        libCOUI_gf_CU_GPShowHide(true, lp_player, c_transitionDurationImmediate);
        libCOUI_gf_CU_GPVisibilityAutoUpdate(false, lp_player, c_transitionDurationImmediate);
    }
    else {
        libCOUI_gf_CU_GPShowHide(true, lp_player, c_transitionDurationDefault);
    }
    if ((TechTreeUpgradeCount(lp_player, "SuperiorCommand", c_techCountQueuedOrBetter) == 1)) {
        PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 225);
    }

    if (((libCOOC_gf_CampaignTechUnitIsEnabled("Medivac", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Viking", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Wraith", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Liberator", lp_player) == true))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 1), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 3), true);
    }
    else {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 1), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 3), false);
    }
    if (((libCOOC_gf_CampaignTechUnitIsEnabled("Marine", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Medic", lp_player) == true))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 1), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 3), true);
    }
    else {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 1), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 3), false);
    }
    if (((libCOOC_gf_CampaignTechUnitIsEnabled("Hellion", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Vulture", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Goliath", lp_player) == true))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 1), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 3), true);
    }
    else {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 1), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 3), false);
    }
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypePylonButton, false);
}

void libCOOC_gf_CC_ApplyRaceTechZerg (int lp_player) {
    // Variable Declarations
    int lv_spawnCreepRadius;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnCreepRadius = UserDataGetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(lp_player), "SpawnCreep", 1);

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        libCOUI_gf_CU_GPShowHide(true, lp_player, c_transitionDurationImmediate);
        libCOUI_gf_CU_GPVisibilityAutoUpdate(false, lp_player, c_transitionDurationImmediate);
    }
    else {
        libCOUI_gf_CU_GPShowHide(true, lp_player, c_transitionDurationDefault);
    }
    libCOOC_gf_CC_KerriganApplyModelUpgrades(lp_player);
    libCOOC_gf_CC_ZergHeroApplyStatBonuses(lp_player, libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
    if ((lv_spawnCreepRadius > 0)) {
        CreepModify(PlayerStartLocation(lp_player), IntToFixed(lv_spawnCreepRadius), true, false);
    }

    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypePylonButton, false);
}

void libCOOC_gf_CC_ApplyRaceTechProtoss (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        libCOUI_gf_CU_GPShowHide(true, lp_player, c_transitionDurationImmediate);
        libCOUI_gf_CU_GPVisibilityAutoUpdate(false, lp_player, c_transitionDurationImmediate);
    }
    else {
        libCOUI_gf_CU_GPShowHide(true, lp_player, c_transitionDurationDefault);
    }
}

void libCOOC_gf_CC_ApplyRaceTechInfestedTerran (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        libCOUI_gf_CU_GPShowHide(true, lp_player, c_transitionDurationImmediate);
        libCOUI_gf_CU_GPVisibilityAutoUpdate(false, lp_player, c_transitionDurationImmediate);
    }
    else {
        libCOUI_gf_CU_GPShowHide(true, lp_player, c_transitionDurationDefault);
    }
    CreepModify(PlayerStartLocation(lp_player), 11.0, true, false);
}

int libCOOC_gf_CC_RaceIndex (string lp_race) {
    // Automatic Variable Declarations
    string autoB45F95F3_val;

    // Implementation
    autoB45F95F3_val = lp_race;
    if (autoB45F95F3_val == "Terr") {
        return 1;
    }
    else if (autoB45F95F3_val == "Zerg") {
        return 2;
    }
    else if (autoB45F95F3_val == "Prot") {
        return 3;
    }
    else {
    }
    return 0;
}

int libCOOC_gf_CC_ZergHeroBonusLife (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_totalLife;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto7EBF509E_ai;
    int auto7EBF509E_ae;
    int auto7EBF509E_al;

    // Variable Initialization

    // Implementation
    auto7EBF509E_ai = 1;
    auto7EBF509E_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto7EBF509E_ai < auto7EBF509E_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto7EBF509E_ai);
        auto7EBF509E_ai = auto7EBF509E_ai+1;
        auto7EBF509E_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto7EBF509E_al >= lp_startLevel && auto7EBF509E_al <= lp_endLevel ) {
            lv_totalLife += UserDataGetInt("PlayerLevels", lv_indexLevel, "Life", 1);
        }
    }
    return lv_totalLife;
}

int libCOOC_gf_CC_ZergHeroBonusEnergy (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_totalEnergy;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int autoEE6697D5_ai;
    int autoEE6697D5_ae;
    int autoEE6697D5_al;

    // Variable Initialization

    // Implementation
    autoEE6697D5_ai = 1;
    autoEE6697D5_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (autoEE6697D5_ai < autoEE6697D5_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", autoEE6697D5_ai);
        autoEE6697D5_ai = autoEE6697D5_ai+1;
        autoEE6697D5_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        autoEE6697D5_al >= lp_startLevel && autoEE6697D5_al <= lp_endLevel ) {
            lv_totalEnergy += UserDataGetInt("PlayerLevels", lv_indexLevel, "Energy", 1);
        }
    }
    return lv_totalEnergy;
}

int libCOOC_gf_CC_ZergHeroBonusArmor (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_totalArmor;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto5910C5B8_ai;
    int auto5910C5B8_ae;
    int auto5910C5B8_al;

    // Variable Initialization

    // Implementation
    auto5910C5B8_ai = 1;
    auto5910C5B8_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto5910C5B8_ai < auto5910C5B8_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto5910C5B8_ai);
        auto5910C5B8_ai = auto5910C5B8_ai+1;
        auto5910C5B8_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto5910C5B8_al >= lp_startLevel && auto5910C5B8_al <= lp_endLevel ) {
            lv_totalArmor += UserDataGetInt("PlayerLevels", lv_indexLevel, "Armor", 1);
        }
    }
    return lv_totalArmor;
}

int libCOOC_gf_CC_ZergHeroBonusDamage (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_totalDamage;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto55085A2A_ai;
    int auto55085A2A_ae;
    int auto55085A2A_al;

    // Variable Initialization

    // Implementation
    auto55085A2A_ai = 1;
    auto55085A2A_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto55085A2A_ai < auto55085A2A_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto55085A2A_ai);
        auto55085A2A_ai = auto55085A2A_ai+1;
        auto55085A2A_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto55085A2A_al >= lp_startLevel && auto55085A2A_al <= lp_endLevel ) {
            lv_totalDamage += UserDataGetInt("PlayerLevels", lv_indexLevel, "Damage", 1);
        }
    }
    return lv_totalDamage;
}

void libCOOC_gf_CC_KerriganApplyModelUpgrades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerRace(lp_player) != "Zerg")) {
        return ;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerusSounds", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostLabSounds", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerus", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganGhostCosmetic", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganInfestedCosmetic", 1);
}

void libCOOC_gf_CC_ZergHeroApplyStatBonuses (int lp_player, int lp_level) {
    // Variable Declarations
    int lv_life;
    int lv_energy;
    int lv_damage;
    int lv_armor;
    int lv_index;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto238FCE8E_ai;
    int auto238FCE8E_ae;
    int auto238FCE8E_al;

    // Variable Initialization

    // Implementation
    auto238FCE8E_ai = 1;
    auto238FCE8E_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto238FCE8E_ai < auto238FCE8E_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto238FCE8E_ai);
        auto238FCE8E_ai = auto238FCE8E_ai+1;
        auto238FCE8E_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto238FCE8E_al >= 1 && auto238FCE8E_al <= lp_level ) {
            lv_life += UserDataGetInt("PlayerLevels", lv_indexLevel, "Life", 1);
            lv_energy += UserDataGetInt("PlayerLevels", lv_indexLevel, "Energy", 1);
            lv_damage += UserDataGetInt("PlayerLevels", lv_indexLevel, "Damage", 1);
            lv_armor += UserDataGetInt("PlayerLevels", lv_indexLevel, "Armor", 1);
        }
    }
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeEnergy", ModI(lv_energy, 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeHealth", ModI(lv_life, 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeEnergy10", (lv_energy / 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeHealth10", (lv_life / 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeDamage", lv_damage);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeArmor", lv_armor);
}

string libCOOC_gf_CC_ChampResAbility (string lp_champion) {
    // Variable Declarations
    string lv_indexChampion;

    // Automatic Variable Declarations
    string auto1EC13B9D_val;

    // Variable Initialization

    // Implementation
    auto1EC13B9D_val = lp_champion;
    if (auto1EC13B9D_val == "Kerrigan") {
        return "Abil/KerriganRevive";
    }
    else {
    }
    return "";
}

void libCOOC_gf_CC_ArmyCategoryStateSet (string lp_armyCategory, int lp_state, int lp_player, string lp_commander) {
    // Variable Declarations
    string lv_indexUpgrade;
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto747E98B0_ae;
    int auto747E98B0_ai;
    int auto28EE512E_ae;
    int auto28EE512E_ai;

    // Variable Initialization

    // Implementation
    if ((libCOOC_gf_CC_ArmyCategoryState(lp_armyCategory, lp_player, lp_commander) == lp_state)) {
        return ;
    }

    DataTableSetInt(true, libCOOC_gf_CC_ArmyCategoryStateKey(lp_armyCategory, lp_commander, lp_player), (lp_state));
    if ((lp_state == c_armyUnitStateLocked)) {
        auto747E98B0_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray", 1);
        auto747E98B0_ai = 1;
        while (auto747E98B0_ai <= auto747E98B0_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray["+IntToString(auto747E98B0_ai-1)+"]", 1);
            auto747E98B0_ai = auto747E98B0_ai + 1;
            libCOOC_gf_CC_ArmyUpgradeStateSet(lv_indexUpgrade, c_armyUpgradeStateLocked, lp_commander, lp_player);
        }
        auto28EE512E_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
        auto28EE512E_ai = 1;
        while (auto28EE512E_ai <= auto28EE512E_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto28EE512E_ai-1)+"]", 1);
            auto28EE512E_ai = auto28EE512E_ai + 1;
            libCOOC_gf_CC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked, lp_commander, lp_player);
        }
    }

}

void libCOOC_gf_CC_UpdateArmyCategoryStates (int lp_player) {
    // Variable Declarations
    string lv_playerCommander;
    string lv_indexCategory;
    int lv_requiredLevel;

    // Automatic Variable Declarations
    int autoC8E789DF_ae;
    int autoC8E789DF_ai;

    // Variable Initialization

    // Implementation
    lv_playerCommander = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    autoC8E789DF_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoC8E789DF_ai = 1;
    while (autoC8E789DF_ai <= autoC8E789DF_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoC8E789DF_ai);
        autoC8E789DF_ai = autoC8E789DF_ai + 1;
        if ((libCOOC_gf_CC_ArmyCategoryUnlocksExternal(lv_indexCategory) == true)) {
            continue;
        }

        if ((libCOOC_gf_CC_ArmyCategoryCommanderValid(lv_indexCategory, lv_playerCommander) == true)) {
            lv_requiredLevel = libCOOC_gf_CC_ArmyCategoryRequiredLevel(lv_indexCategory, lv_playerCommander);
            if ((lv_requiredLevel <= libCOOC_gf_CC_CommanderLevel(lp_player, lv_playerCommander))) {
                libCOOC_gf_CC_ArmyCategoryStateSet(lv_indexCategory, c_armyUnitStatePurchased, lp_player, lv_playerCommander);
            }
            else {
                libCOOC_gf_CC_ArmyCategoryStateSet(lv_indexCategory, c_armyUnitStateLocked, lp_player, lv_playerCommander);
            }
        }
        else {
            libCOOC_gf_CC_ArmyCategoryStateSet(lv_indexCategory, c_armyUnitStateLocked, lp_player, lv_playerCommander);
        }
    }
}

string libCOOC_gf_CC_TechUnitOfArmyCategory (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "UserReference", libCOOC_gv_cCC_DISREGARDPLAYER));
}

string libCOOC_gf_CC_ArmyCategoryOfTechUnit (string lp_techUnit) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto0502DF11_ae;
    int auto0502DF11_ai;

    // Variable Initialization

    // Implementation
    auto0502DF11_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto0502DF11_ai = 1;
    while (auto0502DF11_ai <= auto0502DF11_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto0502DF11_ai);
        auto0502DF11_ai = auto0502DF11_ai + 1;
        if ((libCOOC_gf_CC_TechUnitOfArmyCategory(lv_indexCategory) == lp_techUnit)) {
            return lv_indexCategory;
        }

    }
    return null;
}

int libCOOC_gf_CC_ArmyCategoryRequiredLevel (string lp_armyCategory, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gf_CC_CommanderUserFieldInt(lp_commander, "TechUnit", libCOOC_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "RequiredLevel");
}

text libCOOC_gf_CC_ArmyCategoryName (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Name", libCOOC_gv_cCC_DISREGARDPLAYER));
}

text libCOOC_gf_CC_ArmyCategoryName2 (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Title", libCOOC_gv_cCC_DISREGARDPLAYER));
}

text libCOOC_gf_CC_ArmyCategoryUnitDescription (string lp_armyCategory) {
    // Variable Declarations
    string lv_unitLink;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitLink = (CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "Unit", libCOOC_gv_cCC_DISREGARDPLAYER));
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, (lv_unitLink), "Description", libCOOC_gv_cCC_DISREGARDPLAYER));
}

text libCOOC_gf_CC_ArmyCategoryDescription (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Description", libCOOC_gv_cCC_DISREGARDPLAYER));
}

string libCOOC_gf_CC_ArmyCategoryIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Icon", c_playerAny));
}

string libCOOC_gf_CC_ArmyCategoryEvolutionIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("TechUnit", libCOOC_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "EvolutionMissionIcon", 1);
}

string libCOOC_gf_CC_ArmyCategoryUnitType (string lp_armyCategory) {
    // Variable Declarations
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    if ((lp_armyCategory == null)) {
        return null;
    }

    lv_value = CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Unit", libCOOC_gv_cCC_DISREGARDPLAYER);
    return (lv_value);
}

text libCOOC_gf_StoryArmyUnitTooltip2 (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libCOOC_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "TechnologyTooltip", 1);
}

bool libCOOC_gf_CC_ArmyCategoryCommanderValid (string lp_armyCategory, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_ArmyCategoryRequiredLevel(lp_armyCategory, lp_commander) == -1)) {
        return false;
    }

    return true;
}

int libCOOC_gf_CC_ArmyCategoryState (string lp_armyCategory, int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, libCOOC_gf_CC_ArmyCategoryStateKey(lp_armyCategory, lp_commander, lp_player));
    return lv_value;
}

string libCOOC_gf_CC_ArmyCategoryPurchasedUnit (string lp_armyCategory, int lp_player) {
    // Variable Declarations
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto0014DDD3_ae;
    int auto0014DDD3_ai;

    // Variable Initialization

    // Implementation
    auto0014DDD3_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    auto0014DDD3_ai = 1;
    while (auto0014DDD3_ai <= auto0014DDD3_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto0014DDD3_ai-1)+"]", 1);
        auto0014DDD3_ai = auto0014DDD3_ai + 1;
        if ((libCOOC_gf_CC_StoryArmyUnitState(lv_indexArmyUnit, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player) == c_armyUnitStatePurchased)) {
            return lv_indexArmyUnit;
        }

    }
    return null;
}

bool libCOOC_gf_CC_ArmyCategoryCanUpgrade (string lp_armyCategory, int lp_player) {
    // Variable Declarations
    string lv_indexArmyUpgrade;

    // Automatic Variable Declarations
    int autoC5A195B0_ae;
    int autoC5A195B0_ai;

    // Variable Initialization

    // Implementation
    autoC5A195B0_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray", 1);
    autoC5A195B0_ai = 1;
    while (autoC5A195B0_ai <= autoC5A195B0_ae) {
        lv_indexArmyUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray["+IntToString(autoC5A195B0_ai-1)+"]", 1);
        autoC5A195B0_ai = autoC5A195B0_ai + 1;
        if ((libCOOC_gf_CC_ArmyUpgradeStateCheck(lv_indexArmyUpgrade, c_armyUpgradeStateLocked, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player) == false)) {
            return true;
        }

    }
    return false;
}

bool libCOOC_gf_ArmyCategoryStateCheck (string lp_armyCategory, int lp_state, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gf_CC_ArmyCategoryState(lp_armyCategory, lp_player, lp_commander) == lp_state);
}

bool libCOOC_gf_CC_ArmyCategoryUsedInUI (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Flags[Hidden]", libCOOC_gv_cCC_DISREGARDPLAYER) == "0");
}

int libCOOC_gf_CC_ArmyCategoryUIOrder (string lp_armyCategory, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gf_CC_CommanderUserFieldInt(lp_commander, "TechUnit", libCOOC_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "UIOrder");
}

bool libCOOC_gf_CC_ArmyCategoryToastShown (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_armyCategory == null)) {
        return false;
    }

    return (UserDataGetInt("TechUnit", libCOOC_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "IsNew", 1) > 0);
}

bool libCOOC_gf_CC_ArmyCategoryUnlocksExternal (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libCOOC_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "UnlocksExternal", 1) != 0);
}

string libCOOC_gf_CC_ArmyCategoryStateKey (string lp_category, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gv_pCC_ArmyCategoryStateKey + "_" + IntToString(lp_player) + "_" + (lp_commander) + "_" + (lp_category));
}

bool libCOOC_gf_CC_ArmyHasUnusedTech () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexUnit;
    bool lv_categoryFilled;

    // Automatic Variable Declarations
    int auto06F724AF_ae;
    int auto06F724AF_ai;

    // Variable Initialization

    // Implementation
    auto06F724AF_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto06F724AF_ai = 1;
    while (auto06F724AF_ai <= auto06F724AF_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto06F724AF_ai);
        auto06F724AF_ai = auto06F724AF_ai + 1;
    }
    return false;
}

void libCOOC_gf_CC_UpdateArmyUpgradeStates (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    int lv_requiredLevel;

    // Automatic Variable Declarations
    int autoA4FA1EF9_ae;
    int autoA4FA1EF9_ai;
    int autoC90FEDD0_ae;
    int autoC90FEDD0_ai;
    int auto8AA71F09_ae;
    int auto8AA71F09_ai;

    // Variable Initialization

    // Implementation
    autoA4FA1EF9_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoA4FA1EF9_ai = 1;
    while (autoA4FA1EF9_ai <= autoA4FA1EF9_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoA4FA1EF9_ai);
        autoA4FA1EF9_ai = autoA4FA1EF9_ai + 1;
        if ((libCOOC_gf_CC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            if ((libCOOC_gf_CC_ArmyCategoryState(lv_indexCategory, lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player)) != c_armyUnitStateLocked)) {
                auto8AA71F09_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                auto8AA71F09_ai = 1;
                while (auto8AA71F09_ai <= auto8AA71F09_ae) {
                    lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto8AA71F09_ai-1)+"]", 1);
                    auto8AA71F09_ai = auto8AA71F09_ai + 1;
                    lv_requiredLevel = libCOOC_gf_CC_ArmyUpgradeRequiredLevel(lv_indexUpgrade, libCOOC_gf_ActiveCommanderForPlayer(lp_player));
                    if ((lv_requiredLevel != -1) && (lv_requiredLevel <= libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player)))) {
                        if ((libCOOC_gf_CC_ArmyUpgradeState(lv_indexUpgrade, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player) != c_armyUpgradeStatePurchased)) {
                            libCOOC_gf_CC_ArmyUpgradeStateSet(lv_indexUpgrade, c_armyUpgradeStateUnlocked, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                        }

                    }
                    else {
                        libCOOC_gf_CC_ArmyUpgradeStateSet(lv_indexUpgrade, c_armyUpgradeStateLocked, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                    }
                }
            }
            else {
                autoC90FEDD0_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                autoC90FEDD0_ai = 1;
                while (autoC90FEDD0_ai <= autoC90FEDD0_ae) {
                    lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(autoC90FEDD0_ai-1)+"]", 1);
                    autoC90FEDD0_ai = autoC90FEDD0_ai + 1;
                    libCOOC_gf_CC_ArmyUpgradeStateSet(lv_indexUpgrade, c_armyUpgradeStateLocked, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                }
            }
        }

    }
}

int libCOOC_gf_CC_ArmyUpgradeState (string lp_upgrade, string lp_commander, int lp_player) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, libCOOC_gf_CC_ArmyUpgradeStateKey(lp_upgrade, lp_commander, lp_player));
    return lv_value;
}

bool libCOOC_gf_CC_ArmyUpgradeStateCheck (string lp_upgrade, int lp_state, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gf_CC_ArmyUpgradeState(lp_upgrade, lp_commander, lp_player) == lp_state);
}

int libCOOC_gf_CC_ArmyUpgradeRequiredLevel (string lp_upgrade, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gf_CC_CommanderUserFieldInt(lp_commander, "ArmyUpgrade", libCOOC_gf_CC_ArmyUpgradeUserData(lp_upgrade), "LevelRequired");
}

void libCOOC_gf_CC_ArmyUpgradeStateSet (string lp_armyUpgrade, int lp_state, string lp_commander, int lp_player) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOOC_gf_CC_ArmyUpgradeState(lp_armyUpgrade, lp_commander, lp_player) == lp_state)) {
        return ;
    }

    DataTableSetInt(true, libCOOC_gf_CC_ArmyUpgradeStateKey(lp_armyUpgrade, lp_commander, lp_player), (lp_state));
}

text libCOOC_gf_CC_ArmyUpgradeName (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Name", libCOOC_gv_cCC_DISREGARDPLAYER));
}

text libCOOC_gf_CC_ArmyUpgradeDescription (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Description", libCOOC_gv_cCC_DISREGARDPLAYER));
}

text libCOOC_gf_CC_ArmyUpgradeDescription2 (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("ArmyUpgrade", libCOOC_gf_CC_ArmyUpgradeUserData(lp_armyUpgrade), "Results", 1);
}

string libCOOC_gf_CC_ArmyUpgradeIcon (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Icon", libCOOC_gv_cCC_DISREGARDPLAYER));
}

string libCOOC_gf_CC_ArmyUpgradeMovie (string lp_armyUpgrade) {
    // Variable Declarations
    string lv_moviePath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_moviePath = "";

    // Implementation
    lv_moviePath = CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Movie", libCOOC_gv_cCC_DISREGARDPLAYER);
    return (lv_moviePath);
}

string libCOOC_gf_CC_ArmyUpgradeCategory (string lp_armyUpgrade) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto23F3793C_ae;
    int auto23F3793C_ai;
    int auto1EC70D71_ae;
    int auto1EC70D71_ai;

    // Variable Initialization

    // Implementation
    auto23F3793C_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto23F3793C_ai = 1;
    while (auto23F3793C_ai <= auto23F3793C_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto23F3793C_ai);
        auto23F3793C_ai = auto23F3793C_ai + 1;
        auto1EC70D71_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
        auto1EC70D71_ai = 1;
        while (auto1EC70D71_ai <= auto1EC70D71_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto1EC70D71_ai-1)+"]", 1);
            auto1EC70D71_ai = auto1EC70D71_ai + 1;
            if ((lv_indexUpgrade == lp_armyUpgrade)) {
                return lv_indexCategory;
            }

        }
    }
    return null;
}

int libCOOC_gf_CC_ArmyUpgradeCost (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGetAsInt(c_gameCatalogArmyUpgrade, lp_armyUpgrade, "Cost", c_playerAny);
}

text libCOOC_gf_CC_ArmyUpgradeTooltip (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Tooltip", libCOOC_gv_cCC_DISREGARDPLAYER));
}

text libCOOC_gf_CC_ArmyUpgradeTooltip2 (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("ArmyUpgradeCategories", lp_armyUpgrade, "Name", libCOOC_gv_cCC_PLAYERNYI);
}

string libCOOC_gf_CC_ArmyUpgradeUserData (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "UserReference", libCOOC_gv_cCC_DISREGARDPLAYER));
}

string libCOOC_gf_CC_ArmyUpgradeStateKey (string lp_upgrade, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gv_pCC_ArmyUpgradeStateKey + "_" + IntToString(lp_player) + "_" + (lp_commander) + "_" + (lp_upgrade));
}

string libCOOC_gf_CC_StoryArmyUnitUnitType (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Unit", libCOOC_gv_cCC_DISREGARDPLAYER));
}

string libCOOC_gf_CC_ArmyUnitOfTechUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;

    // Automatic Variable Declarations
    int auto08EA5277_ae;
    int auto08EA5277_ai;
    int auto53287F0D_ae;
    int auto53287F0D_ai;

    // Variable Initialization

    // Implementation
    auto08EA5277_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto08EA5277_ai = 1;
    while (auto08EA5277_ai <= auto08EA5277_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto08EA5277_ai);
        auto08EA5277_ai = auto08EA5277_ai + 1;
        auto53287F0D_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto53287F0D_ai = 1;
        while (auto53287F0D_ai <= auto53287F0D_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto53287F0D_ai-1)+"]", 1);
            auto53287F0D_ai = auto53287F0D_ai + 1;
            if ((libCOOC_gf_CC_TechUnitOfArmyUnit(lv_indexUnit) == lp_armyUnit)) {
                return lv_indexUnit;
            }

        }
    }
    return null;
}

string libCOOC_gf_CC_TechUnitOfArmyUnit (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "UserReference", libCOOC_gv_cCC_DISREGARDPLAYER));
}

string libCOOC_gf_StoryArmyUnitInCategory (string lp_category, int lp_index) {
    // Variable Declarations
    string lv_armyUnitString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_armyUnitString = "";

    // Implementation
    lv_armyUnitString = libCOOC_gf_CC_CatalogGetFieldArrayValue(c_gameCatalogArmyCategory, (lp_category), "ArmyUnitArray", lp_index, libCOOC_gv_cCC_DISREGARDPLAYER);
    return (lv_armyUnitString);
}

text libCOOC_gf_CC_ArmyUnitDescription (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Description", libCOOC_gv_cCC_DISREGARDPLAYER));
}

text libCOOC_gf_StoryArmyUnitTooltip (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libCOOC_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "TechnologyTooltip", libCOOC_gv_cCC_DISREGARDPLAYER);
}

string libCOOC_gf_CC_ArmyUnitIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyCategory), "Icon", libCOOC_gv_cCC_DISREGARDPLAYER));
}

bool libCOOC_gf_CC_ArmyUnitStartsLocked (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libCOOC_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "UnlocksExternal", 1) == 1);
}

int libCOOC_gf_CC_ArmyUnitRequiredLevel (string lp_armyUnit, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gf_CC_CommanderUserFieldInt(lp_commander, "TechUnit", libCOOC_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "RequiredLevel");
}

string libCOOC_gf_CC_ArmyCategoryOfArmyUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexUnit;
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoCE15C86D_ae;
    int autoCE15C86D_ai;
    int auto43B42A5A_ae;
    int auto43B42A5A_ai;

    // Variable Initialization

    // Implementation
    autoCE15C86D_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoCE15C86D_ai = 1;
    while (autoCE15C86D_ai <= autoCE15C86D_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoCE15C86D_ai);
        autoCE15C86D_ai = autoCE15C86D_ai + 1;
        auto43B42A5A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto43B42A5A_ai = 1;
        while (auto43B42A5A_ai <= auto43B42A5A_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto43B42A5A_ai-1)+"]", 1);
            auto43B42A5A_ai = auto43B42A5A_ai + 1;
            if ((lv_indexUnit == lp_armyUnit)) {
                return lv_indexCategory;
            }

        }
    }
    return null;
}

string libCOOC_gf_CC_ArmyUnitSkin (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyCategory, "Skin", c_playerAny));
}

int libCOOC_gf_CC_StoryArmyUnitState (string lp_armyUnit, string lp_commander, int lp_player) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, libCOOC_gf_CC_ArmyUnitStateKey(lp_armyUnit, lp_commander, lp_player));
    return lv_value;
}

bool libCOOC_gf_CC_StoryArmyUnitState2 (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libCOOC_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1) == 1);
}

string libCOOC_gf_CC_ArmyUnitStateKey (string lp_armyUnit, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gv_pCC_ArmyUnitStateKey + "_" + IntToString(lp_player) + "_" + (lp_commander) + "_" + (lp_armyUnit));
}

string libCOOC_gf_CC_ArmyUnitEnableButton (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "EnableButton", c_playerAny);
}

void libCOOC_gf_CC_SetArmyUnitState (string lp_armyUnit, int lp_state, string lp_commander, int lp_player) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DataTableSetInt(true, libCOOC_gf_CC_ArmyUnitStateKey(lp_armyUnit, lp_commander, lp_player), (lp_state));
}

void libCOOC_gf_CC_ArmyUnitSetNew (string lp_armyUnit, bool lp_new) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("TechUnit", libCOOC_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1, BoolToInt(lp_new));
}

void libCOOC_gf_CC_UpdateArmyUnitStates (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexArmyUnit;
    int lv_requiredLevel;

    // Automatic Variable Declarations
    int auto6B214DBC_ae;
    int auto6B214DBC_ai;
    int auto2852A76A_ae;
    int auto2852A76A_ai;

    // Variable Initialization

    // Implementation
    auto6B214DBC_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto6B214DBC_ai = 1;
    while (auto6B214DBC_ai <= auto6B214DBC_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto6B214DBC_ai);
        auto6B214DBC_ai = auto6B214DBC_ai + 1;
        if ((libCOOC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyUnitStateLocked, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player) == false)) {
            auto2852A76A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto2852A76A_ai = 1;
            while (auto2852A76A_ai <= auto2852A76A_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto2852A76A_ai-1)+"]", 1);
                auto2852A76A_ai = auto2852A76A_ai + 1;
                lv_requiredLevel = libCOOC_gf_CC_ArmyUnitRequiredLevel(lv_indexArmyUnit, libCOOC_gf_ActiveCommanderForPlayer(lp_player));
                if ((lv_requiredLevel != -1) && (lv_requiredLevel <= libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player)))) {
                    if ((libCOOC_gf_CC_StoryArmyUnitState(lv_indexArmyUnit, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player) != c_armyUnitStatePurchased)) {
                        libCOOC_gf_CC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateUnlocked, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                    }

                }
                else {
                    libCOOC_gf_CC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                }
            }
        }

    }
}

void libCOOC_gf_CC_ApplyArmyTech (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexCategory2;
    string lv_indexUpgrade;
    string lv_playerCommander;
    bool lv_categoryEnableDisable;
    bool lv_upgradeEnableDisable;

    // Automatic Variable Declarations
    int auto9EF57A55_ae;
    int auto9EF57A55_ai;
    int auto7AD1A88C_ae;
    int auto7AD1A88C_ai;
    int auto1D234705_ae;
    int auto1D234705_ai;
    int auto28454F4F_ae;
    int auto28454F4F_ai;
    int autoA7240716_ae;
    int autoA7240716_ai;

    // Variable Initialization
    lv_categoryEnableDisable = true;
    lv_upgradeEnableDisable = true;

    // Implementation
    lv_playerCommander = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    auto9EF57A55_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto9EF57A55_ai = 1;
    while (auto9EF57A55_ai <= auto9EF57A55_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto9EF57A55_ai);
        auto9EF57A55_ai = auto9EF57A55_ai + 1;
        libCOOC_gf_EnableCampaignTechUnit(false, libCOOC_gf_CC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        auto7AD1A88C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto7AD1A88C_ai = 1;
        while (auto7AD1A88C_ai <= auto7AD1A88C_ae) {
            lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto7AD1A88C_ai-1)+"]", 1);
            auto7AD1A88C_ai = auto7AD1A88C_ai + 1;
            libCOOC_gf_EnableCampaignTechUnit(false, libCOOC_gf_CC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
        }
    }
    auto1D234705_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto1D234705_ai = 1;
    while (auto1D234705_ai <= auto1D234705_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto1D234705_ai);
        auto1D234705_ai = auto1D234705_ai + 1;
        if ((libCOOC_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyUnitStatePurchased, lv_playerCommander, lp_player) == true)) {
            lv_categoryEnableDisable = true;
            auto28454F4F_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
            auto28454F4F_ai = 1;
            while (auto28454F4F_ai <= auto28454F4F_ae) {
                lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto28454F4F_ai-1)+"]", 1);
                auto28454F4F_ai = auto28454F4F_ai + 1;
                if ((libCOOC_gf_CC_ArmyUpgradeStateCheck(lv_indexUpgrade, c_armyUpgradeStatePurchased, lv_playerCommander, lp_player) == true)) {
                    libCOOC_gf_CC_EnableUpgradeAndAbilityCommandForTech(true, c_gameCatalogArmyUpgrade, (lv_indexUpgrade), null, null, lp_player);
                }
                else {
                    libCOOC_gf_CC_EnableUpgradeAndAbilityCommandForTech(false, c_gameCatalogArmyUpgrade, (lv_indexUpgrade), null, null, lp_player);
                }
            }
            autoA7240716_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            autoA7240716_ai = 1;
            while (autoA7240716_ai <= autoA7240716_ae) {
                lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(autoA7240716_ai-1)+"]", 1);
                autoA7240716_ai = autoA7240716_ai + 1;
                if ((libCOOC_gf_CC_StoryArmyUnitState(lv_indexCategory2, lv_playerCommander, lp_player) == c_armyUnitStatePurchased)) {
                    libCOOC_gf_EnableCampaignTechUnit(true, libCOOC_gf_CC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
                    lv_categoryEnableDisable = false;
                }

            }
        }
        else {
            lv_categoryEnableDisable = false;
        }
        if ((lv_categoryEnableDisable == true)) {
            libCOOC_gf_EnableCampaignTechUnit(true, libCOOC_gf_CC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        }

    }
}

void libCOOC_gf_CC_ResetArmyTech (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int auto4595FC43_ai;
    int auto4595FC43_ae;
    int auto7517AB57_ae;
    int auto7517AB57_ai;

    // Variable Initialization

    // Implementation
    auto4595FC43_ai = 1;
    auto4595FC43_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto4595FC43_ai < auto4595FC43_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto4595FC43_ai);
        auto4595FC43_ai = auto4595FC43_ai+1;
        auto7517AB57_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        auto7517AB57_ai = 1;
        while (auto7517AB57_ai <= auto7517AB57_ae) {
            lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto7517AB57_ai);
            auto7517AB57_ai = auto7517AB57_ai + 1;
            libCOOC_gf_CC_ArmyCategoryStateSet(lv_indexCategory, c_armyUnitStateLocked, lp_player, lv_indexCommander);
        }
    }
}

void libCOOC_gf_CC_PerkStateSet (string lp_perk, int lp_perkState, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOOC_gf_CC_PerkStateKey(lp_perk, lp_commander, lp_player), (lp_perkState));
    if ((libCOOC_gv_cC_DebugTechSpam == true)) {
        TextExpressionSetToken("Param/Expression/lib_COOC_0ED55655", "A", StringToText((lp_perk)));
        TextExpressionSetToken("Param/Expression/lib_COOC_0ED55655", "B", IntToText((lp_perkState)));
        TextExpressionSetToken("Param/Expression/lib_COOC_0ED55655", "C", StringToText((lp_commander)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_0ED55655"), true);
    }

}

string libCOOC_gf_CC_PerkStateKey (string lp_campaignPerk, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gv_cCC_PerkStateKey + "_" + IntToString(lp_player) + "_" + (lp_commander) + "_" + (lp_campaignPerk));
}

bool libCOOC_gf_CC_PerkStateCheck (string lp_campaignPerk, int lp_perkState, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gf_CC_PerkState(lp_campaignPerk, lp_commander, lp_player) == lp_perkState);
}

int libCOOC_gf_CC_PerkState (string lp_upgrade, string lp_commander, int lp_player) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, libCOOC_gf_CC_PerkStateKey(lp_upgrade, lp_commander, lp_player));
    return lv_value;
}

void libCOOC_gf_EnableDisableCampaignPerk (bool lp_enableDisable, string lp_perk, int lp_player) {
    // Variable Declarations
    int lv_indexTech;
    bool lv_allowDisallow;
    int lv_upgradeLevel;

    // Automatic Variable Declarations
    int auto4087A5D1_ae;
    const int auto4087A5D1_ai = 1;
    int auto788D5897_ae;
    const int auto788D5897_ai = 1;
    int autoBE1AED9F_ae;
    const int autoBE1AED9F_ai = 1;

    // Variable Initialization
    lv_allowDisallow = true;

    // Implementation
    if ((lp_enableDisable == true)) {
        lv_allowDisallow = true;
        lv_upgradeLevel = 1;
        if ((UserDataGetGameLink("CampaignPerk", lp_perk, "CampaignPerkSkin", 1) != "")) {
            PlayerApplySkin(lp_player, UserDataGetGameLink("CampaignPerk", lp_perk, "CampaignPerkSkin", 1), true);
        }

    }
    else {
        lv_allowDisallow = false;
        lv_upgradeLevel = 0;
    }
    auto4087A5D1_ae = UserDataFieldValueCount("CampaignPerk", "AbilityCommand");
    lv_indexTech = 1;
    for ( ; ( (auto4087A5D1_ai >= 0 && lv_indexTech <= auto4087A5D1_ae) || (auto4087A5D1_ai < 0 && lv_indexTech >= auto4087A5D1_ae) ) ; lv_indexTech += auto4087A5D1_ai ) {
        if ((UserDataGetAbilCmd("CampaignPerk", lp_perk, "AbilityCommand", lv_indexTech) != null)) {
            TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("CampaignPerk", lp_perk, "AbilityCommand", lv_indexTech), lv_allowDisallow);
            if ((libCOOC_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_COOC_94AB0648", "A", StringToText((AbilityCommandGetAbility(UserDataGetAbilCmd("CampaignPerk", lp_perk, "AbilityCommand", lv_indexTech)))));
                TextExpressionSetToken("Param/Expression/lib_COOC_94AB0648", "B", libNtve_gf_ConvertBooleanToText(lv_allowDisallow));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_94AB0648"), true);
            }

        }

    }
    auto788D5897_ae = UserDataFieldValueCount("CampaignPerk", "Upgrade");
    lv_indexTech = 1;
    for ( ; ( (auto788D5897_ai >= 0 && lv_indexTech <= auto788D5897_ae) || (auto788D5897_ai < 0 && lv_indexTech >= auto788D5897_ae) ) ; lv_indexTech += auto788D5897_ai ) {
        if ((UserDataGetUpgrade("CampaignPerk", lp_perk, "Upgrade", lv_indexTech) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("CampaignPerk", lp_perk, "Upgrade", lv_indexTech), lv_upgradeLevel);
            if ((libCOOC_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_COOC_5DED9532", "A", StringToText((UserDataGetUpgrade("CampaignPerk", lp_perk, "Upgrade", lv_indexTech))));
                TextExpressionSetToken("Param/Expression/lib_COOC_5DED9532", "B", IntToText(lv_upgradeLevel));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_5DED9532"), true);
            }

        }

    }
    autoBE1AED9F_ae = UserDataFieldValueCount("CampaignPerk", "UpgradeOff");
    lv_indexTech = 1;
    for ( ; ( (autoBE1AED9F_ai >= 0 && lv_indexTech <= autoBE1AED9F_ae) || (autoBE1AED9F_ai < 0 && lv_indexTech >= autoBE1AED9F_ae) ) ; lv_indexTech += autoBE1AED9F_ai ) {
        if ((UserDataGetUpgrade("CampaignPerk", lp_perk, "UpgradeOff", lv_indexTech) != null)) {
            if ((lp_enableDisable == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("CampaignPerk", lp_perk, "UpgradeOff", lv_indexTech), 0);
            }

            if ((libCOOC_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_COOC_B56724DE", "A", StringToText((UserDataGetUpgrade("CampaignPerk", lp_perk, "UpgradeOff", lv_indexTech))));
                TextExpressionSetToken("Param/Expression/lib_COOC_B56724DE", "B", IntToText(lv_upgradeLevel));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_B56724DE"), true);
            }

        }

    }
}

void libCOOC_gf_EnableDisableActivePerks (bool lp_enableDisable, int lp_player) {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto66E3F101_ai;
    int auto66E3F101_ae;

    // Variable Initialization

    // Implementation
    auto66E3F101_ai = 1;
    auto66E3F101_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto66E3F101_ai < auto66E3F101_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto66E3F101_ai);
        auto66E3F101_ai = auto66E3F101_ai+1;
        if ((libCOOC_gf_CC_PerkStateCheck(lv_indexPerk, libCOOC_ge_CC_PerkState_Active, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player) == true)) {
            libCOOC_gf_EnableDisableCampaignPerk(lp_enableDisable, lv_indexPerk, lp_player);
        }

    }
}

fixed libCOOC_gf_CostOfAbility (string lp_ability, string lp_costType) {
    // Variable Declarations
    string lv_value;
    string lv_field;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";
    lv_field = "";

    // Implementation
    if (((lp_costType == "Minerals") || (lp_costType == "Gas"))) {
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "Cost") == false)) {
            if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "InfoArray") == false)) {
                return 0.0;
            }

            lv_field = ("InfoArray[Build1].Resource[" + lp_costType + "]");
        }
        else {
            lv_field = ("Cost." + lp_costType);
        }
    }
    else if (((lp_costType == "Energy") || (lp_costType == "Life") || (lp_costType == "Shields"))) {
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "Cost") == false)) {
            if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "InfoArray") == false)) {
                return 0.0;
            }

            lv_field = ("InfoArray[Build1].Vital[" + lp_costType + "]");
        }
        else {
            lv_field = ("Cost[0].Vital[" + lp_costType + "]");
        }
    }
    lv_value = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, (lv_field), c_playerAny);
    return StringToFixed(lv_value);
}

string libCOOC_gf_CC_PerkIcon (string lp_campaignPerk) {
    // Variable Declarations
    string lv_icon;
    string lv_perkButton;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_perkButton = UserDataGetGameLink("CampaignPerk", lp_campaignPerk, "Button", 1);
    if ((lv_perkButton == null)) {
        lv_icon = "Assets\\Textures\\btn-missing-kaeo.dds";
    }
    else {
        lv_icon = (CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Icon", c_playerAny));
    }
    if ((lv_icon == null)) {
        lv_icon = "Assets\\Textures\\btn-missing-kaeo.dds";
    }

    return lv_icon;
}

string libCOOC_gf_CC_PerkMovie (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetMovie("CampaignPerk", lp_campaignPerk, "Movie", 1);
}

text libCOOC_gf_CC_PerkTooltip (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COOC_DBBF1BAA", "NAME", libCOOC_gf_CC_PerkName(lp_campaignPerk));
    TextExpressionSetToken("Param/Expression/lib_COOC_DBBF1BAA", "DESCRIPTION", libCOOC_gf_CC_PerkDescription(lp_campaignPerk));
    return TextExpressionAssemble("Param/Expression/lib_COOC_DBBF1BAA");
}

text libCOOC_gf_CC_PerkDescription (string lp_campaignPerk) {
    // Variable Declarations
    string lv_perkButton;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_perkButton = UserDataGetGameLink("CampaignPerk", lp_campaignPerk, "Button", 1);
    if ((lv_perkButton == null)) {
        return StringExternal("Param/Value/lib_COOC_2D4B7E4E");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("CampaignPerk", lp_campaignPerk, "Button", 1), "Tooltip", c_playerAny));
}

text libCOOC_gf_CC_PerkName (string lp_power) {
    // Variable Declarations
    string lv_perkButton;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_perkButton = UserDataGetGameLink("CampaignPerk", lp_power, "Button", 1);
    if ((lv_perkButton == null)) {
        return StringExternal("Param/Value/lib_COOC_ED0D7115");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("CampaignPerk", lp_power, "Button", 1), "Name", c_playerAny));
}

int libCOOC_gf_CC_PerkUIOrder (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerk", lp_campaignPerk, "UISlot", 1);
}

int libCOOC_gf_CC_PerkCost (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_campaignPerk == null)) {
        return 0;
    }

    return UserDataGetInt("CampaignPerk", lp_campaignPerk, "Cost", 1);
}

string libCOOC_gf_CC_PerkLevel (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("CampaignPerk", lp_campaignPerk, "Level", 1);
}

void libCOOC_gf_CC_SaveChampionToBank2 (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCommander;
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto7561B490_ai;
    int auto7561B490_ae;
    int auto9178BF88_ai;
    int auto9178BF88_ae;

    // Variable Initialization

    // Implementation
    auto7561B490_ai = 1;
    auto7561B490_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto7561B490_ai < auto7561B490_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto7561B490_ai);
        auto7561B490_ai = auto7561B490_ai+1;
        auto9178BF88_ai = 1;
        auto9178BF88_ae = UserDataInstanceCount("PlayerCommander")+1;
        while (auto9178BF88_ai < auto9178BF88_ae) {
            lv_indexCommander = UserDataInstance("PlayerCommander", auto9178BF88_ai);
            auto9178BF88_ai = auto9178BF88_ai+1;
            libCOOC_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, libCOOC_gf_CC_BankMIssionDifficultyKey6(lv_indexPerk, lv_indexCommander), (libCOOC_gf_CC_PerkState(lv_indexPerk, lv_indexCommander, lp_player)), 0);
        }
    }
}

void libCOOC_gf_CC_LoadChampionFromBank2 (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexPerk;
    string lv_indexCommander;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int autoC1CFEEB3_ai;
    int autoC1CFEEB3_ae;
    int auto78A60F32_ai;
    int auto78A60F32_ae;

    // Variable Initialization

    // Implementation
    autoC1CFEEB3_ai = 1;
    autoC1CFEEB3_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoC1CFEEB3_ai < autoC1CFEEB3_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoC1CFEEB3_ai);
        autoC1CFEEB3_ai = autoC1CFEEB3_ai+1;
        auto78A60F32_ai = 1;
        auto78A60F32_ae = UserDataInstanceCount("PlayerCommander")+1;
        while (auto78A60F32_ai < auto78A60F32_ae) {
            lv_indexCommander = UserDataInstance("PlayerCommander", auto78A60F32_ai);
            auto78A60F32_ai = auto78A60F32_ai+1;
            lv_stateInt = libCOOC_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, libCOOC_gf_CC_BankMIssionDifficultyKey6(lv_indexPerk, lv_indexCommander), 0);
            lv_state = lv_stateInt;
            libCOOC_gf_CC_PerkStateSet(lv_indexPerk, lv_state, lv_indexCommander, lp_player);
        }
    }
}

void libCOOC_gf_CC_UpdatePerkStates (int lp_player) {
    // Variable Declarations
    int lv_categoryIndex;
    string lv_indexPerk;
    string lv_perkLevel;
    string lv_playerCommander;

    // Automatic Variable Declarations
    int autoA35B6D87_ai;
    int autoA35B6D87_ae;
    int auto6EC5CFF6_ae;
    const int auto6EC5CFF6_ai = 1;
    int autoDF590B06_ae;
    const int autoDF590B06_ai = 1;

    // Variable Initialization

    // Implementation
    lv_playerCommander = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    autoA35B6D87_ai = 1;
    autoA35B6D87_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoA35B6D87_ai < autoA35B6D87_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoA35B6D87_ai);
        autoA35B6D87_ai = autoA35B6D87_ai+1;
        lv_perkLevel = libCOOC_gf_CC_PerkLevel(lv_indexPerk);
        if ((libCOOC_gf_CC_PlayerLevelCommander(lv_perkLevel) != lv_playerCommander)) {
            continue;
        }

        if ((libCOOC_gf_CC_PlayerLevelValue(lv_perkLevel) <= libCOOC_gf_CC_CommanderLevel(lp_player, lv_playerCommander))) {
            libCOOC_gf_CC_PerkStateSet(lv_indexPerk, libCOOC_ge_CC_PerkState_Active, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player);
        }
        else {
            libCOOC_gf_CC_PerkStateSet(lv_indexPerk, libCOOC_ge_CC_PerkState_Locked, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player);
        }
        auto6EC5CFF6_ae = UserDataFieldValueCount("CampaignPerk", "ArmyCategoryOn");
        lv_categoryIndex = 1;
        for ( ; ( (auto6EC5CFF6_ai >= 0 && lv_categoryIndex <= auto6EC5CFF6_ae) || (auto6EC5CFF6_ai < 0 && lv_categoryIndex >= auto6EC5CFF6_ae) ) ; lv_categoryIndex += auto6EC5CFF6_ai ) {
            if ((UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOn", lv_categoryIndex) != null)) {
                if ((libCOOC_gf_CC_PerkStateCheck(lv_indexPerk, libCOOC_ge_CC_PerkState_Active, lv_playerCommander, lp_player) == true)) {
                    libCOOC_gf_CC_ArmyCategoryStateSet(UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOn", lv_categoryIndex), c_armyUnitStatePurchased, lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player));
                }
                else {
                    libCOOC_gf_CC_ArmyCategoryStateSet(UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOn", lv_categoryIndex), c_armyUnitStateLocked, lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player));
                }
            }

        }
        if ((libCOOC_gf_CC_PerkStateCheck(lv_indexPerk, libCOOC_ge_CC_PerkState_Active, lv_playerCommander, lp_player) == true)) {
            autoDF590B06_ae = UserDataFieldValueCount("CampaignPerk", "ArmyCategoryOff");
            lv_categoryIndex = 1;
            for ( ; ( (autoDF590B06_ai >= 0 && lv_categoryIndex <= autoDF590B06_ae) || (autoDF590B06_ai < 0 && lv_categoryIndex >= autoDF590B06_ae) ) ; lv_categoryIndex += autoDF590B06_ai ) {
                if ((UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOff", lv_categoryIndex) != null)) {
                    libCOOC_gf_CC_ArmyCategoryStateSet(UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOff", lv_categoryIndex), c_armyUnitStateLocked, lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player));
                }

            }
        }

    }
}

void libCOOC_gf_CC_ApplyPerkTech (int lp_player) {
    // Variable Declarations
    string lv_indexPerk;
    int lv_techIndex;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int autoCB423F7F_ai;
    int autoCB423F7F_ae;
    int auto3C2BFC5E_ai;
    int auto3C2BFC5E_ae;

    // Variable Initialization

    // Implementation
    autoCB423F7F_ai = 1;
    autoCB423F7F_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoCB423F7F_ai < autoCB423F7F_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoCB423F7F_ai);
        autoCB423F7F_ai = autoCB423F7F_ai+1;
        libCOOC_gf_EnableDisableCampaignPerk(false, lv_indexPerk, lp_player);
    }
    if ((libCOOC_gv_cC_DebugTechSpam == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COOC_461395D8"), true);
    }

    auto3C2BFC5E_ai = 1;
    auto3C2BFC5E_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto3C2BFC5E_ai < auto3C2BFC5E_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto3C2BFC5E_ai);
        auto3C2BFC5E_ai = auto3C2BFC5E_ai+1;
        if ((libCOOC_gf_CC_PerkStateCheck(lv_indexPerk, libCOOC_ge_CC_PerkState_Active, libCOOC_gf_ActiveCommanderForPlayer(lp_player), lp_player) == true)) {
            if ((libCOOC_gv_cC_DebugTechSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_COOC_0DBFF5F9", "A", StringToText((lv_indexPerk)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_0DBFF5F9"), true);
            }

            libCOOC_gf_EnableDisableCampaignPerk(true, lv_indexPerk, lp_player);
        }

    }
}

void libCOOC_gf_CC_ResetPerkTech (int lp_player) {
    // Variable Declarations
    string lv_indexPerk;
    string lv_indexCommander;
    int lv_defaultPerkState;

    // Automatic Variable Declarations
    int autoB734568F_ai;
    int autoB734568F_ae;
    int auto6AA3767C_ai;
    int auto6AA3767C_ae;

    // Variable Initialization

    // Implementation
    autoB734568F_ai = 1;
    autoB734568F_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (autoB734568F_ai < autoB734568F_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", autoB734568F_ai);
        autoB734568F_ai = autoB734568F_ai+1;
        auto6AA3767C_ai = 1;
        auto6AA3767C_ae = UserDataInstanceCount("CampaignPerk")+1;
        while (auto6AA3767C_ai < auto6AA3767C_ae) {
            lv_indexPerk = UserDataInstance("CampaignPerk", auto6AA3767C_ai);
            auto6AA3767C_ai = auto6AA3767C_ai+1;
            libCOOC_gf_CC_PerkStateSet(lv_indexPerk, libCOOC_ge_CC_PerkState_Locked, lv_indexCommander, lp_player);
        }
    }
}

void libCOOC_gf_CC_SharedUpgradesEnable () {
    // Variable Declarations
    string lv_indexSharedUpgrade;

    // Automatic Variable Declarations
    int auto8FFB0F01_ai;
    int auto8FFB0F01_ae;

    // Variable Initialization

    // Implementation
    auto8FFB0F01_ai = 1;
    auto8FFB0F01_ae = UserDataInstanceCount("SharedUpgrades")+1;
    while (auto8FFB0F01_ai < auto8FFB0F01_ae) {
        lv_indexSharedUpgrade = UserDataInstance("SharedUpgrades", auto8FFB0F01_ai);
        auto8FFB0F01_ai = auto8FFB0F01_ai+1;
        if ((UserDataGetUpgrade("SharedUpgrades", lv_indexSharedUpgrade, "Upgrade", 1) != null)) {
            libCOOC_gf_CC_SharedUpgradesCheckAndApply(UserDataGetUpgrade("SharedUpgrades", lv_indexSharedUpgrade, "Upgrade", 1));
        }

    }
}

void libCOOC_gf_CC_SharedUpgradesCheckAndApply (string lp_checkUpgrade) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itPlayerApplyTarget;

    // Automatic Variable Declarations
    playergroup auto401F0935_g;
    playergroup autoD8A6477E_g;

    // Variable Initialization

    // Implementation
    auto401F0935_g = libCOOC_gf_CommanderPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto401F0935_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly) >= 1)) {
            autoD8A6477E_g = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_itPlayer);
            lv_itPlayerApplyTarget = -1;
            while (true) {
                lv_itPlayerApplyTarget = PlayerGroupNextPlayer(autoD8A6477E_g, lv_itPlayerApplyTarget);
                if (lv_itPlayerApplyTarget < 0) { break; }
                if ((TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly) > TechTreeUpgradeCount(lv_itPlayerApplyTarget, lp_checkUpgrade, c_techCountCompleteOnly))) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayerApplyTarget, lp_checkUpgrade, TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly));
                }

            }
        }

    }
}

void libCOOC_gf_CC_PlayerResponseEnable (int lp_player, string lp_response, bool lp_enforceMinLvl) {
    // Variable Declarations
    int lv_ally;
    playergroup lv_allygroup;

    // Automatic Variable Declarations
    playergroup auto9B0ABC36_g;

    // Variable Initialization
    lv_allygroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_enforceMinLvl == true) && (libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player)) < UserDataGetInt("PlayerResponse", lp_response, "MinLvl", 1))) {
        return ;
    }

    if ((UserDataGetInt("PlayerResponse", lp_response, "Self", 1) == 1)) {
        PlayerAddResponse(lp_player, UserDataGetGameLink("PlayerResponse", lp_response, "Response", 1));
    }

    if ((UserDataGetInt("PlayerResponse", lp_response, "Ally", 1) == 1)) {
        lv_allygroup = libCOOC_gf_CommanderPlayers();
        PlayerGroupRemove(lv_allygroup, lp_player);
        auto9B0ABC36_g = lv_allygroup;
        lv_ally = -1;
        while (true) {
            lv_ally = PlayerGroupNextPlayer(auto9B0ABC36_g, lv_ally);
            if (lv_ally < 0) { break; }
            PlayerAddResponse(lv_ally, UserDataGetGameLink("PlayerResponse", lp_response, "Response", 1));
        }
    }

}

void libCOOC_gf_CC_ApplyTech (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_index;
    string lv_indexTechUnit;

    // Automatic Variable Declarations
    string auto87F16805_val;
    playergroup autoE52C82E9_g;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COOC_0105F2B8", "A", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_0105F2B8"), false);
    libCOOC_gv_cC_ApplyingCampaignTech = true;
    TechTreeRestrictionsEnable(lp_player, true);
    libCOOC_gf_CC_UpdateTechStates(lp_player);
    libCOOC_gf_CC_ApplyArmyTech(lp_player);
    libCOOC_gf_CC_ApplyCommanderTech(lp_player);
    libCOOC_gf_CC_ApplyPerkTech(lp_player);
    auto87F16805_val = PlayerRace(lp_player);
    if (auto87F16805_val == "Terr") {
        libCOOC_gf_CC_ApplyRaceTechTerran(lp_player);
    }
    else if (auto87F16805_val == "Zerg") {
        libCOOC_gf_CC_ApplyRaceTechZerg(lp_player);
    }
    else if (auto87F16805_val == "Prot") {
        libCOOC_gf_CC_ApplyRaceTechProtoss(lp_player);
    }
    else if (auto87F16805_val == "InfT") {
        libCOOC_gf_CC_ApplyRaceTechInfestedTerran(lp_player);
    }
    else {
    }
    libCOOC_gf_CC_ApplyPrestigeTech(lp_player);
    libCOOC_gf_CC_ApplyTechPostPrestige(lp_player);
    libCOOC_gv_cC_ApplyingCampaignTech = false;
    libCOOC_gv_cC_CampaignTechApplied = true;
    autoE52C82E9_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE52C82E9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser) && (PlayerStatus(lv_indexPlayer) == c_playerStatusActive)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "HunterSeeker", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "YamatoCannon", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "HatcheryLarvaDeath", 1);
        }

    }
    libCOOC_gf_CC_SharedUpgradesEnable();
    libCOMI_gf_CM_DetectionUpgradesApply();
    libCOMI_gf_SetPlayerColors();
    PlayerSetColorIndex(1, libCOMI_gf_HumanPlayerColor(1), true);
    PlayerSetColorIndex(2, libCOMI_gf_HumanPlayerColor(2), true);
}

void libCOOC_gf_CC_ApplyTechPostPrestige (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganArmyGasCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasterySwannImmortalityProtocol", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKaraxUnitVital", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList3(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganResearchSpeedandCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganResearchSpeedCost(lp_player);
    }

    TechTreeBehaviorAllow(lp_player, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, false);
    if ((TechTreeUpgradeCount(lp_player, "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryZagraRoachLifeIncrease(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryFenixReducedResearchCosts", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryResearchCostReduction(lp_player, "MasteryFenixReducedResearchCosts", 1.0);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryStetmannStetzoneBonuses", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryStetmannUpgradeCost(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryMengskRoyalGuardCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryMengskRoyalGuardCostList(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_Nova_IterateExistingBuildings(lp_player);
    }

}

void libCOOC_gf_CC_UpdateTechStates (int lp_player) {
    // Automatic Variable Declarations
    string auto511843A2_val;

    // Implementation
    libCOOC_gf_CC_UpdatePlayerLevel(lp_player);
    libCOOC_gf_CC_UpdateArmyCategoryStates(lp_player);
    libCOOC_gf_CC_UpdateArmyUnitStates(lp_player);
    libCOOC_gf_CC_UpdateArmyUpgradeStates(lp_player);
    libCOOC_gf_CC_UpdatePerkStates(lp_player);
    auto511843A2_val = PlayerRace(lp_player);
    if (auto511843A2_val == "Terr") {
        libCOOC_gf_CC_UpdateTerranStates(lp_player);
    }
    else if (auto511843A2_val == "Zerg") {
    }
    else if (auto511843A2_val == "Prot") {
        libCOOC_gf_CC_UpdateProtossStates(lp_player);
    }
    else {
    }
}

void libCOOC_gf_CC_ResetTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gf_CC_ResetCurrency(lp_player);
    libCOOC_gf_CC_ResetArmyTech(lp_player);
    libCOOC_gf_CC_ResetPerkTech(lp_player);
}

void libCOOC_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;
    text lv_debugMessage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_player) == false)) {
        TextExpressionSetToken("Param/Expression/lib_COOC_16BFF05B", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_16BFF05B"), true);
        return ;
    }

    if ((lp_enableDisable == true)) {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 1);
        lv_debugMessage = StringExternal("Param/Value/lib_COOC_39184915");
    }
    else {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 0);
        lv_debugMessage = StringExternal("Param/Value/lib_COOC_8773302A");
    }
    lv_armyCategory = libCOOC_gf_CC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        libCOOC_gf_CC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyCategory, (lv_armyCategory), null, null, lp_player);
        CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libCOOC_gf_CC_ArmyCategoryUnitType(lv_armyCategory)), (libCOOC_gf_CC_ArmyCategoryUnitType(lv_armyCategory)));
    }

    lv_armyCategory2 = libCOOC_gf_CC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        libCOOC_gf_CC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyUnit, (lv_armyCategory2), null, null, lp_player);
        if ((lp_enableDisable == true)) {
            CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libCOOC_gf_CC_ArmyCategoryUnitType(libCOOC_gf_CC_ArmyCategoryOfArmyUnit(lv_armyCategory2))), (libCOOC_gf_CC_StoryArmyUnitUnitType(lv_armyCategory2)));
            PlayerApplySkin(lp_player, libCOOC_gf_CC_ArmyUnitSkin(lv_armyCategory2), true);
        }

    }

    libCOOC_gf_CC_UpdateWeaponArmorUpgrades(lp_player);
}

bool libCOOC_gf_CampaignTechUnitIsEnabled (string lp_techUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", lp_techUnit, "Enabled", lp_player) > 0);
}

string libCOOC_gf_CC_CampaignTechUnitType (string lp_techUnit) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_armyCategory = libCOOC_gf_CC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        return libCOOC_gf_CC_ArmyCategoryUnitType(lv_armyCategory);
    }

    lv_armyCategory2 = libCOOC_gf_CC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        return libCOOC_gf_CC_StoryArmyUnitUnitType(lv_armyCategory2);
    }

    return null;
}

void libCOOC_gf_CC_UpdateWeaponArmorUpgrades (int lp_player) {
    // Variable Declarations
    bool lv_groundWeapon4;
    bool lv_groundWeapon5;
    bool lv_groundWeapon7;
    bool lv_groundWeapon6;
    bool lv_groundWeapon1;
    bool lv_groundArmor1;
    bool lv_airWeapon1;
    bool lv_airArmor1;
    bool lv_airArmor2;
    bool lv_airArmor3;
    bool lv_airArmor4;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groundWeapon4 = true;
    lv_groundWeapon5 = true;
    lv_groundWeapon7 = true;
    lv_groundWeapon6 = true;
    lv_groundWeapon1 = true;
    lv_groundArmor1 = true;
    lv_airWeapon1 = true;
    lv_airArmor1 = true;
    lv_airArmor2 = true;
    lv_airArmor3 = true;
    lv_airArmor4 = true;

    // Implementation
    if ((PlayerRace(lp_player) == "Terr")) {
        lv_groundWeapon6 = false;
        lv_groundWeapon7 = false;
        lv_groundWeapon4 = false;
        lv_groundWeapon5 = false;
        if (((libCOOC_gf_CampaignTechUnitIsEnabled("Banshee", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Battlecruiser", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("ScienceVessel", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Viking", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Wraith", lp_player) == true))) {
            lv_groundWeapon7 = true;
        }

        if (((libCOOC_gf_CampaignTechUnitIsEnabled("Banshee", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Battlecruiser", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Viking", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Wraith", lp_player) == true))) {
            lv_groundWeapon6 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 11), lv_groundWeapon6);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 12), lv_groundWeapon6);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 13), lv_groundWeapon6);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 8), lv_groundWeapon7);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 9), lv_groundWeapon7);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 10), lv_groundWeapon7);
        if (((libCOOC_gf_CampaignTechUnitIsEnabled("Diamondback", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Goliath", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Hellion", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Siege Tank", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Thor", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Vulture", lp_player) == true))) {
            lv_groundWeapon4 = true;
            lv_groundWeapon5 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 5), lv_groundWeapon5);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 6), lv_groundWeapon5);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 7), lv_groundWeapon5);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 2), lv_groundWeapon4);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 3), lv_groundWeapon4);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 4), lv_groundWeapon4);
    }
    else if ((PlayerRace(lp_player) == "Prot") && (libCOOC_gf_ActiveCommanderForPlayer(lp_player) == "ProtossZeratul")) {
    }
    else if ((PlayerRace(lp_player) == "Prot") && (PlayerCommander(lp_player) == "Alarak")) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 17), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 18), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 19), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 20), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 21), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 22), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), true);
    }
    else if ((PlayerRace(lp_player) == "Prot")) {
        lv_airArmor1 = false;
        lv_airWeapon1 = false;
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 3), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 4), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 5), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 0), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 1), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 2), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), true);
        if (((libCOOC_gf_CampaignTechUnitIsEnabled("Carrier", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("CarrierTaldarim", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("CarrierAiur", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("CarrierPurifier", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("PhoenixAiur", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("PhoenixShakuras", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Phoenix", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("PhoenixPurifier", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("VoidRayAiur", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("VoidRayShakuras", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Void Ray", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("VoidRayTaldarim", lp_player) == true))) {
            lv_airWeapon1 = true;
            lv_airArmor1 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 3), lv_airArmor1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 4), lv_airArmor1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 5), lv_airArmor1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 0), lv_airWeapon1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 1), lv_airWeapon1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 2), lv_airWeapon1);
    }
    else if ((PlayerRace(lp_player) == "Zerg")) {
        lv_airArmor4 = false;
        lv_airArmor3 = false;
        lv_airArmor2 = false;
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 3), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 4), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 5), true);
        if (((libCOOC_gf_CampaignTechUnitIsEnabled("HydraliskImpaler", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("HydraliskLurker", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Hydralisk", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("RoachCorpser", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Roach", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("RoachVile", lp_player) == true))) {
            lv_airArmor4 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 6), lv_airArmor4);
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 7), lv_airArmor4);
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 8), lv_airArmor4);
        if (((libCOOC_gf_CampaignTechUnitIsEnabled("MutaliskBroodlord", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Scourge", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Mutalisk", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("MutaliskViper", lp_player) == true))) {
            lv_airArmor2 = true;
            lv_airArmor3 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 3), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 4), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 5), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 0), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 1), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 2), lv_airArmor2);
    }
}

bool libCOOC_gf_CC_AirUnitsEnabled (int lp_player) {
    // Automatic Variable Declarations
    string auto5ED752A3_val;

    // Implementation
    auto5ED752A3_val = PlayerRace(lp_player);
    if (auto5ED752A3_val == "Prot") {
        if (((libCOOC_gf_CampaignTechUnitIsEnabled("Void Ray", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("VoidRayTaldarim", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("VoidRayShakuras", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("VoidRayAiur", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Phoenix", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("PhoenixPurifier", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("PhoenixShakuras", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("PhoenixAiur", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Carrier", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("CarrierPurifier", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("CarrierTaldarim", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("CarrierAiur", lp_player) == true))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto5ED752A3_val == "Zerg") {
        if (((libCOOC_gf_CampaignTechUnitIsEnabled("Mutalisk", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("MutaliskViper", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("MutaliskBroodlord", lp_player) == true))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto5ED752A3_val == "Terr") {
        if (((libCOOC_gf_CampaignTechUnitIsEnabled("Banshee", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Battlecruiser", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Medivac", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("ScienceVessel", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Wraith", lp_player) == true) || (libCOOC_gf_CampaignTechUnitIsEnabled("Viking", lp_player) == true))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
    }
    return false;
}

void libCOOC_gf_CC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_indexUpgrade;
    int lv_index;
    int lv_unitIndex;
    string lv_upgrade;
    abilcmd lv_abilityCommand;
    string lv_uField;
    string lv_aField;

    // Automatic Variable Declarations
    int autoE9D8EB4A_ae;
    const int autoE9D8EB4A_ai = 1;
    int auto1BF728AC_ae;
    const int auto1BF728AC_ai = 1;

    // Variable Initialization
    lv_uField = "";
    lv_aField = "";

    // Implementation
    if ((lp_upgradeField == null)) {
        lv_uField = "UpgradeArray";
    }
    else {
        lv_uField = lp_upgradeField;
    }
    if ((lp_abilCommandField == null)) {
        lv_aField = "AbilCommandArray";
    }
    else {
        lv_aField = lp_abilCommandField;
    }
    autoE9D8EB4A_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_uField, lp_player);
    lv_index = 1;
    for ( ; ( (autoE9D8EB4A_ai >= 0 && lv_index <= autoE9D8EB4A_ae) || (autoE9D8EB4A_ai < 0 && lv_index >= autoE9D8EB4A_ae) ) ; lv_index += autoE9D8EB4A_ai ) {
        lv_upgrade = (libCOOC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_uField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 0);
        }
    }
    auto1BF728AC_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_aField, lp_player);
    lv_index = 1;
    for ( ; ( (auto1BF728AC_ai >= 0 && lv_index <= auto1BF728AC_ae) || (auto1BF728AC_ai < 0 && lv_index >= auto1BF728AC_ae) ) ; lv_index += auto1BF728AC_ai ) {
        lv_abilityCommand = StringToAbilCmd(libCOOC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            if ((libCOOC_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_COOC_0692D816", "A", StringToText((AbilityCommandGetAbility(StringToAbilCmd(libCOOC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player))))));
                TextExpressionSetToken("Param/Expression/lib_COOC_0692D816", "B", libNtve_gf_ConvertBooleanToText(true));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_0692D816"), true);
            }

            TechTreeAbilityAllow(lp_player, lv_abilityCommand, true);
        }
        else {
            if ((libCOOC_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_COOC_3030B119", "A", StringToText((AbilityCommandGetAbility(StringToAbilCmd(libCOOC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player))))));
                TextExpressionSetToken("Param/Expression/lib_COOC_3030B119", "B", libNtve_gf_ConvertBooleanToText(false));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_3030B119"), true);
            }

            TechTreeAbilityAllow(lp_player, lv_abilityCommand, false);
        }
    }
}

void libCOOC_gf_EnableArcadeContestMode () {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cC_InContestMap = true;
}

bool libCOOC_gf_GameIsContestLocalTest () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameIsOnline() == false) && (GameIsTestMap(false) == true) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false) && (GameMapIsBlizzard() == false)) {
        libCOOC_gv_cC_InContestMap = true;
        return true;
    }
    else {
        return false;
    }
}

void libCOOC_gf_SetDefaultCommandersForContestLocalTest (string lp_player1Commnader, string lp_player2Commnader) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_GameIsContestLocalTest() == true)) {
        libCOOC_gv_cC_ContestDefaultCommander1 = ((lp_player1Commnader));
        libCOOC_gv_cC_ContestDefaultCommander2 = ((lp_player2Commnader));
    }

}

void libCOOC_gf_LoadAlliedCommandersData (string lp_map, trigger lp_startTrigger) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto53EAE17D_g;
    playergroup auto421010EF_g;
    playergroup autoF5A711DE_g;
    playergroup autoB8689056_g;
    playergroup auto3AAE9A5E_g;
    playergroup auto9C50883C_g;

    // Variable Initialization

    // Implementation
    libCOOC_gv_cC_DebugPlaytestMode = GameIsOnline();
    TriggerDebugSetTypeFile(1, "StoryModeDebug.txt");
    TriggerDebugSetTypeFile(13, "ACStats.txt");
    TriggerDebugSetTypeFile(14, "ACScores.txt");
    if ((libCOOC_gv_cC_DevStart_Forced == false) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        TriggerDebugOutputEnable(false);
    }

    libCOOC_gf_SetCurrentMap(lp_map);
    UserDataSetInt("Maps", libCOOC_gf_CC_MapUserDataInstance(libCOOC_gv_cC_CurrentMap), "IsCurrent", 1, 1);
    if ((libCOOC_gv_cC_InContestMap == false)) {
        AchievementPanelSetCategory(PlayerGroupAll(), "DifficultyRecruit1");
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COOC_0DC23CE3"), false);
    auto53EAE17D_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto53EAE17D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_CC_LoadAllTransitionData(lv_indexPlayer);
    }
    libCOOC_gf_CC_CampaignPreload();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COOC_DD3C0FEA"), false);
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    auto421010EF_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto421010EF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COOC_44175D41"), false);
    libCOOC_gf_CC_InitNonDefeatedPlayers();
    autoF5A711DE_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF5A711DE_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
    }
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
    autoB8689056_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB8689056_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "PlayerCommander", 1);
    }
    if ((libCOOC_gv_cC_DevStart_Forced == false) && ((GameIsOnline() == true) || (libCOOC_gf_GameIsContestLocalTest() == true))) {
        libCOOC_gf_CC_LoadDefaultCommanderForContestLocalTest();
        libCOOC_gf_CC_ScoreInit();
        auto3AAE9A5E_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto3AAE9A5E_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOOC_gf_CC_ApplyTech(lv_indexPlayer);
        }
        TriggerEnable(libCOOC_gt_CC_PrestigeUpgradeSupplement, true);
        libCOUI_gf_CU_PrestigeBriefInit(1, 2);
        if ((libCOMU_gf_CT_MutatorInCustom() == true)) {
            libCOOC_gv_cC_StartupMissionTrigger = lp_startTrigger;
            libCOOC_gf_CC_CustomStartupBegin();
        }
        else {
            TriggerExecute(lp_startTrigger, true, false);
        }
    }
    else {
        libCOOC_gv_cC_StartupMissionTrigger = lp_startTrigger;
        libCOOC_gf_CC_DevStartupBegin();
    }
    auto9C50883C_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto9C50883C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "PlayerCommander", 1);
    }
}

void libCOOC_gf_CC_LoadDefaultCommanderForContestLocalTest () {
    // Variable Declarations
    string lv_commander1;
    string lv_commander2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commander1 = libCOOC_gv_cC_ContestDefaultCommander1;
    lv_commander2 = libCOOC_gv_cC_ContestDefaultCommander2;

    // Implementation
    if ((libCOOC_gf_GameIsContestLocalTest() == true)) {
        PlayerSetCommander(1, UserDataGetGameLink("PlayerCommanders", lv_commander1, "CommanderData", 1));
        libCOOC_gf_CC_PlayerCommanderSet(1, lv_commander1);
        PlayerSetRace(1, libCOOC_gf_CC_CommanderRace(lv_commander1));
        PlayerSetCommander(2, UserDataGetGameLink("PlayerCommanders", lv_commander2, "CommanderData", 1));
        libCOOC_gf_CC_PlayerCommanderSet(2, lv_commander2);
        PlayerSetRace(2, libCOOC_gf_CC_CommanderRace(lv_commander2));
    }

}

void libCOOC_gf_CC_CampaignPreload () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_CampaignMapTypeCheck(libCOOC_gf_CC_CurrentMap(), c_mapKindMission) == true)) {
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_Start", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_BreathLoop", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_HeartBeatLoop", false);
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_BreathLoop", -1));
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1));
    }

}

void libCOOC_gf_CC_SaveAllTransitionData (bool lp_resultFromDefeat, int lp_player) {
    // Variable Declarations
    int lv_saveType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsOnline() == true)) {
        libCOOC_gf_CC_SaveBNetChoices(lp_player);
        return ;
    }

    libCOOC_gf_CC_OpenCoopBank(lp_player);
    libCOOC_gf_CC_SaveTransitionVars(lp_player, libCOOC_gv_cC_CoopBank[lp_player], lp_resultFromDefeat);
    libCOOC_gf_CC_SaveCoopBank(lp_player);
}

void libCOOC_gf_CC_LoadAllTransitionData (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_DevStart_Forced == false) && (GameIsOnline() == true)) {
        libCOOC_gf_CC_LoadBNetChoices(lp_player);
        return ;
    }

    if ((libCOOC_gf_CC_CoopBankExists(lp_player) == false)) {
        TextExpressionSetToken("Param/Expression/lib_COOC_253EB9C4", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_253EB9C4"), false);
        libCOOC_gf_ResetCampaignData(lp_player);
        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COOC_6670EA63"), false);
    libCOOC_gf_CC_OpenCoopBank(lp_player);
    libCOOC_gf_CC_LoadTransitionVars(lp_player, libCOOC_gv_cC_CoopBank[lp_player]);
    if ((libCOOC_gv_cCX_PlayerBankVersion[lp_player] < libCOOC_gv_cCC_BankVersion)) {
        TextExpressionSetToken("Param/Expression/lib_COOC_6DCBB62D", "A", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_COOC_6DCBB62D", "B", IntToText(libCOOC_gv_cCX_PlayerBankVersion[lp_player]));
        TextExpressionSetToken("Param/Expression/lib_COOC_6DCBB62D", "C", IntToText(libCOOC_gv_cCC_BankVersion));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_6DCBB62D"), false);
        libCOOC_gf_ResetCampaignData(lp_player);
        return ;
    }

}

void libCOOC_gf_CC_LoadBNetChoices (int lp_player) {
    // Variable Declarations
    string lv_chosenCommander;
    string lv_indexMasteryUpgrade;
    int lv_currentLevel;

    // Automatic Variable Declarations
    int auto01FD1831_ai;
    int auto01FD1831_ae;
    int auto01FD1831_ac;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COOC_D5B22955", "A", IntToText(lp_player));
    TextExpressionSetToken("Param/Expression/lib_COOC_D5B22955", "B", PlayerName(lp_player));
    TextExpressionSetToken("Param/Expression/lib_COOC_D5B22955", "C", StringToText((PlayerCommander(lp_player))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_D5B22955"), false);
    lv_chosenCommander = libCOOC_gf_CC_CommanderUserInstance(PlayerCommander(lp_player));
    libCOOC_gf_CC_PlayerCommanderSet(lp_player, lv_chosenCommander);
    if ((PlayerRace(lp_player) != libCOOC_gf_CC_CommanderRace(lv_chosenCommander))) {
        PlayerSetRace(lp_player, libCOOC_gf_CC_CommanderRace(lv_chosenCommander));
    }

    if ((libCOOC_gv_cC_InContestMap == true)) {
        lv_currentLevel = 15;
    }
    else {
        lv_currentLevel = PlayerCommanderLevel(lp_player);
    }
    libCOOC_gf_CC_PlayerLevelSet(lp_player, lv_currentLevel, lv_chosenCommander);
    libCOOC_gf_CC_SetPlayerPrestigeIndex(lp_player, PlayerCommanderSelectedPrestige(lp_player));
    libCOOC_gf_CC_PlayerMasteryLevelSet(lp_player, PlayerCommanderMasteryLevel(lp_player));
    auto01FD1831_ai = 0;
    auto01FD1831_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto01FD1831_ai < auto01FD1831_ae) {
        auto01FD1831_ai = auto01FD1831_ai+1;
        auto01FD1831_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto01FD1831_ai), "Category", 1);
        if( libCOOC_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto01FD1831_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto01FD1831_ai);
            TextExpressionSetToken("Param/Expression/lib_COOC_039E4FF2", "A", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_COOC_039E4FF2", "B", IntToText(libCOOC_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade)));
            TextExpressionSetToken("Param/Expression/lib_COOC_039E4FF2", "C", IntToText(PlayerCommanderMasteryTalentRank(lp_player, libCOOC_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade))));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_039E4FF2"), false);
            libCOOC_gf_CC_PlayerMasteryUpgradeLevelSet(lp_player, lv_indexMasteryUpgrade, PlayerCommanderMasteryTalentRank(lp_player, libCOOC_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade)));
        }    
    }
}

void libCOOC_gf_CC_SaveBNetChoices (int lp_player) {
    // Automatic Variable Declarations
}

void libCOOC_gf_CC_SaveTransitionVars (int lp_player, bank lp_targetBank, bool lp_resultFromDefeat) {
    // Variable Declarations
    string lv__SectionName;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lv__SectionName = libCOOC_gf_CC_BankSectionName("CampaignSetting");
    libCOOC_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("Bank Version"), libCOOC_gv_cCX_PlayerBankVersion[lp_player], 0);
    lv__SectionName = libCOOC_gf_CC_BankSectionName("CampaignCurrency");
    libCOOC_gf_CC_SaveCommandersToBank(lp_player, lp_targetBank, lv__SectionName);
    libCOOC_gf_CC_SaveChampionToBank3(lp_player, lp_targetBank, lv__SectionName);
    libCOOC_gf_CC_SaveMasteryToBank(lp_player, lp_targetBank, lv__SectionName);
    lv__SectionName = libCOOC_gf_CC_BankSectionName("CampaignPerks");
    BankSectionCreate(lp_targetBank, lv__SectionName);
    libCOOC_gf_CC_SaveChampionToBank2(lp_player, lp_targetBank, lv__SectionName);
}

void libCOOC_gf_CC_LoadTransitionVars (int lp_player, bank lp_sourceBank) {
    // Variable Declarations
    string lv__SectionName;
    int lv_count;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lv__SectionName = libCOOC_gf_CC_BankSectionName("CampaignCurrency");
    libCOOC_gf_CC_LoadCommandersFromBank(lp_player, lp_sourceBank, lv__SectionName);
    libCOOC_gf_CC_LoadChampionFromBank3(lp_player, lp_sourceBank, lv__SectionName);
    libCOOC_gf_CC_LoadMasteryFromBank(lp_player, lp_sourceBank, lv__SectionName);
    lv__SectionName = libCOOC_gf_CC_BankSectionName("CampaignSetting");
    libCOOC_gv_cCX_PlayerBankVersion[lp_player] = libCOOC_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("Bank Version"), 0);
    lv__SectionName = libCOOC_gf_CC_BankSectionName("CampaignPerks");
    libCOOC_gf_CC_LoadChampionFromBank2(lp_player, lp_sourceBank, lv__SectionName);
}

void libCOOC_gf_ResetCampaignData (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cCX_PlayerBankVersion[lp_player] = libCOOC_gv_cCC_BankVersion;
    libCOOC_gf_CC_ResetTech(lp_player);
    libCOOC_gf_CC_UpdateTechStates(lp_player);
    libCOOC_gf_DispatchCampaignEvent(libCOOC_ge_CC_Event_CampaignDataReset, "", "", false);
}

void libCOOC_gf_CC_CustomStartupBegin () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto2C0024A3_g;

    // Variable Initialization

    // Implementation
    GameSetMissionTimePaused(true);
    AITimePause(true);
    UnitPauseAll(true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, false);
    auto2C0024A3_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto2C0024A3_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeNone)) {
            PlayerSetDifficulty(lv_indexPlayer, 2);
        }

        libCOOC_gf_ShowHideWorldCover(true, 0.0, lv_indexPlayer);
    }
    libCOUI_gf_CU_CustomMutatorDisplay();
}

void libCOOC_gf_CC_CustomStartupLaunch () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB65BD54E_g;

    // Variable Initialization

    // Implementation
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    GameSetMissionTimePaused(false);
    AITimePause(false);
    UnitPauseAll(false);
    autoB65BD54E_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB65BD54E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_ShowHideWorldCover(false, 0.0, lv_indexPlayer);
    }
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    TriggerExecute(libCOOC_gv_cC_StartupMissionTrigger, true, false);
}

void libCOOC_gf_CC_ForceDevStartup () {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gv_cC_DevStart_Forced = true;
}

void libCOOC_gf_CC_DevStartupBegin () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto5E0D8A40_g;
    playergroup autoD84D30F6_g;

    // Variable Initialization

    // Implementation
    GameSetMissionTimePaused(true);
    AITimePause(true);
    UnitPauseAll(true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    if ((libCOOC_gv_cC_DevStart_Forced == false) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        TriggerEnable(libCOOC_gt_CC_DevStartupDevForceQuit, true);
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, null, StringExternal("Param/Value/lib_COOC_2E34F462"), true);
        return ;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, false);
    auto5E0D8A40_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto5E0D8A40_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeNone)) {
            PlayerSetDifficulty(lv_indexPlayer, 2);
        }

        libCOOC_gf_ShowHideWorldCover(true, 0.0, lv_indexPlayer);
    }
    if ((libCOOC_gf_CoopDebugModeIsOn("CustomMutators", 1) == true)) {
        libCOOC_gf_CC_PlayerCommanderSet(1, "TerranRaynor");
        PlayerSetRace(1, libCOOC_gf_CC_CommanderRace("TerranRaynor"));
        libCOOC_gf_CC_PlayerCommanderSet(2, "ZergKerrigan");
        PlayerSetRace(2, libCOOC_gf_CC_CommanderRace("ZergKerrigan"));
        autoD84D30F6_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoD84D30F6_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOOC_gf_CC_UpdateTechStates(lv_indexPlayer);
            libCOOC_gf_CC_ApplyTech(lv_indexPlayer);
        }
        TriggerEnable(libCOOC_gt_CC_PrestigeUpgradeSupplement, true);
        libCOMU_gf_EnableMutatorCustomMode();
        libCOUI_gf_CU_CustomMutatorDisplay();
    }
    else {
        libCOUI_gf_CU_CommanderDisplay();
    }
}

void libCOOC_gf_CC_DevStartupFinish () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoF82E849A_g;
    playergroup auto47F80522_g;

    // Variable Initialization

    // Implementation
    autoF82E849A_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF82E849A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_CC_SaveAllTransitionData(false, 1);
        libCOOC_gf_CC_ApplyTech(lv_indexPlayer);
    }
    TriggerEnable(libCOOC_gt_CC_PrestigeUpgradeSupplement, true);
    libCOUI_gf_CU_PrestigeBriefInit(1, 2);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    GameSetMissionTimePaused(false);
    AITimePause(false);
    UnitPauseAll(false);
    auto47F80522_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto47F80522_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_ShowHideWorldCover(false, 0.0, lv_indexPlayer);
    }
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    libCOOC_gf_CC_ScoreInit();
    TriggerExecute(libCOOC_gv_cC_StartupMissionTrigger, true, false);
}

void libCOOC_gf_CC_OpenCoopBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_CoopBank[lp_player] != null)) {
        return ;
    }

    BankLoad(libCOOC_gv_cC_CoopBankName, lp_player);
    libCOOC_gv_cC_CoopBank[lp_player] = BankLastCreated();
}

bool libCOOC_gf_CC_CoopBankExists (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return BankExists(libCOOC_gv_cC_CoopBankName, lp_player);
}

void libCOOC_gf_CC_SaveCoopBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_CoopBank[lp_player] == null)) {
        return ;
    }

    BankSave(libCOOC_gv_cC_CoopBank[lp_player]);
}

string libCOOC_gf_CC_BankMIssionDifficultyKey6 (string lp_campaignPerk, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_commander) + "_" + (lp_campaignPerk));
}

string libCOOC_gf_CC_BankSectionName (string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    return ("CCampaign" + "|" + (lp_section));
}

int libCOOC_gf_CC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libCOOC_gf_CC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libCOOC_gf_CC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libCOOC_gf_CC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCOOC_gf_CC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCOOC_gf_CC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCOOC_gf_CC_ScoreInit () {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexCommander;
    string lv_indexMission;

    // Automatic Variable Declarations
    playergroup auto02AA62F0_g;
    playergroup auto70F92B54_g;
    string auto03D684D9_val;

    // Variable Initialization

    // Implementation
    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    auto02AA62F0_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto02AA62F0_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerScoreValueSetFromInt(lv_indexPlayer, "CommanderOneScorePrimary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCOOC_gf_CC_CommanderScoreCoopStatistic(libCOOC_gf_ActiveCommanderForPlayer(1)), "UniqueTag", c_playerAny));
        PlayerScoreValueSetFromInt(lv_indexPlayer, "CommanderOneScoreSecondary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCOOC_gf_CC_CommanderScoreSelfStatistic(libCOOC_gf_ActiveCommanderForPlayer(1)), "UniqueTag", c_playerAny));
        PlayerScoreValueSetFromInt(lv_indexPlayer, "CommanderTwoScorePrimary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCOOC_gf_CC_CommanderScoreCoopStatistic(libCOOC_gf_ActiveCommanderForPlayer(2)), "UniqueTag", c_playerAny));
        if ((libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossArtanis", libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_indexPlayer)) != c_playerAny) && (libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossKarax", libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_indexPlayer)) != c_playerAny)) {
        }
        else {
            PlayerScoreValueSetFromInt(lv_indexPlayer, "CommanderTwoScoreSecondary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCOOC_gf_CC_CommanderScoreSelfStatistic(libCOOC_gf_ActiveCommanderForPlayer(2)), "UniqueTag", c_playerAny));
        }
        PlayerScoreValueSetFromInt(lv_indexPlayer, "MissionScore", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCOOC_gf_CC_MapScoreStatistic(libCOOC_gf_CC_CurrentMap()), "UniqueTag", c_playerAny));
        PlayerScoreValueSetFromInt(lv_indexPlayer, "MetaExperience", 0);
        PlayerScoreValueSetFromInt(lv_indexPlayer, "MissionXP", 0);
        PlayerScoreValueSetFromInt(lv_indexPlayer, "BonusObjectiveXP", 0);
    }
    auto70F92B54_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto70F92B54_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto03D684D9_val = libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer);
        if (auto03D684D9_val == "ProtossArtanis") {
            TriggerEnable(libCOOC_gt_CC_ScoreArtanisAbsorb, true);
            TriggerEnable(libCOOC_gt_CC_ScoreArtanisBombardment, true);
            TriggerEnable(libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike, true);
        }
        else if (auto03D684D9_val == "ProtossVorazun") {
            TriggerEnable(libCOOC_gt_CC_ScoreVorazunBHDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreVorazunBHManageGroup, true);
            TriggerEnable(libCOOC_gt_CC_ScoreVorazunCloakDmg, true);
        }
        else if (auto03D684D9_val == "ProtossKarax") {
            TriggerEnable(libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike, true);
            TriggerEnable(libCOOC_gt_CC_ScoreKaraxSolarLance, true);
            TriggerEnable(libCOOC_gt_CC_ScoreKaraxPurifierBeam, true);
        }
        else if (auto03D684D9_val == "ZergKerrigan") {
            TriggerEnable(libCOOC_gt_CC_ScoreKerriganResources, true);
            TriggerEnable(libCOOC_gt_CC_ScoreKerriganDmg, true);
        }
        else if (auto03D684D9_val == "ZergZagara") {
            TriggerEnable(libCOOC_gt_CC_ScoreZagaraFrenzyDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreZagaraSuicideDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreZagaraBanelingBarrage, true);
        }
        else if (auto03D684D9_val == "TerranRaynor") {
            TriggerEnable(libCOOC_gt_CC_ScoreRaynorMedicHeal, true);
            TriggerEnable(libCOOC_gt_CC_ScoreRaynorHyperionDmg, true);
        }
        else if (auto03D684D9_val == "TerranSwann") {
            TriggerEnable(libCOOC_gt_CC_ScoreSwannSVHeal, true);
            TriggerEnable(libCOOC_gt_CC_ScoreSwannDrillDmg, true);
        }
        else if (auto03D684D9_val == "ZergAbathur") {
            TriggerEnable(libCOOC_gt_CC_ScoreAbathurMonsterDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreAbathurHealing, true);
        }
        else if (auto03D684D9_val == "ProtossAlarak") {
            TriggerEnable(libCOOC_gt_CC_ScoreAlarakDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreAlarakHeal, true);
            TriggerEnable(libCOOC_gt_CC_ScoreAlarakSacrificeHeal, true);
        }
        else if (auto03D684D9_val == "TerranNova") {
            TriggerEnable(libCOOC_gt_CC_ScoreNovaDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreNovaHeal, true);
            TriggerEnable(libCOOC_gt_CC_ScoreNovaAbsorb, true);
        }
        else if (auto03D684D9_val == "ZergStukov") {
            TriggerEnable(libCOOC_gt_CC_ScoreStukovInfestedDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreStukovMonstrosityDmg, true);
        }
        else if (auto03D684D9_val == "ProtossFenix") {
            TriggerEnable(libCOOC_gt_CC_ScoreFenixChampionDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreFenixSuitDmg, true);
        }
        else if (auto03D684D9_val == "ZergDehaka") {
            TriggerEnable(libCOOC_gt_CC_ScoreDehakaDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreDehakaConsumeSupply, true);
        }
        else if (auto03D684D9_val == "TerranHorner") {
            TriggerEnable(libCOOC_gt_CC_ScoreHornerMagMineDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreHornerScrapPickup, true);
        }
        else if (auto03D684D9_val == "TerranTychus") {
            TriggerEnable(libCOOC_gt_CC_ScoreTychusFirebatOilDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusGhostDominatedDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusGrenadeDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusHERCImpactDuration, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusMarauderHeal, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusMedicAbsorb, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusMedicHeal, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusMedicHealAoE, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusOdinDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusReaperBombDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusSpectrePulseDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreTychusWarhoundTurretDmg, true);
        }
        else if (auto03D684D9_val == "ProtossZeratul") {
            TriggerEnable(libCOOC_gt_CC_ScoreZeratulDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreZeratulShieldRestore, true);
        }
        else if (auto03D684D9_val == "ZergStetmann") {
            TriggerEnable(libCOOC_gt_CC_ScoreStetmannGaryDmg, true);
            TriggerEnable(libCOOC_gt_CC_ScoreStetmannOverload, true);
        }
        else if (auto03D684D9_val == "TerranMengsk") {
            TriggerEnable(libCOOC_gt_CC_ScoreMengskDamage, true);
        }
        else {
        }
    }
}

void libCOOC_gf_CC_SetTychusScoreUnit (int lp_tychusPlayer, string lp_unitType, bool lp_primary) {
    // Variable Declarations
    trigger lv_scoretrigger;
    string lv_scoregamelink;
    int lv_player;

    // Automatic Variable Declarations
    string autoCFA06AB6_val;
    int auto21B3BDD7_val;
    playergroup autoB020442D_g;
    playergroup autoE5B836DD_g;

    // Variable Initialization

    // Implementation
    autoCFA06AB6_val = lp_unitType;
    if (autoCFA06AB6_val == "TychusCoop") {
        lv_scoregamelink = "TychusGrenadeDamage";
    }
    else if (autoCFA06AB6_val == "TychusReaper") {
        lv_scoregamelink = "TychusReaperBombDamage";
    }
    else if (autoCFA06AB6_val == "TychusWarhound") {
        lv_scoregamelink = "TychusWarhoundTurretDamage";
    }
    else if (autoCFA06AB6_val == "TychusFirebat") {
        lv_scoregamelink = "TychusFirebatOilDamage";
    }
    else if (autoCFA06AB6_val == "TychusHERC") {
        lv_scoregamelink = "TychusHERCImpactDuration";
    }
    else if (autoCFA06AB6_val == "TychusMarauder") {
        lv_scoregamelink = "TychusMarauderHeal";
    }
    else if (autoCFA06AB6_val == "TychusGhost") {
        lv_scoregamelink = "TychusGhostDominatedDamage";
    }
    else if (autoCFA06AB6_val == "TychusSpectre") {
        lv_scoregamelink = "TychusSpectrePulseDamage";
    }
    else if (autoCFA06AB6_val == "TychusMedic") {
        lv_scoregamelink = "TychusMedicHeal";
    }
    else {
        lv_scoregamelink = "TychusOdinDamage";
    }
    if ((lp_primary == true)) {
        UserDataSetGameLink("PlayerCommanders", "TerranTychus", "ScoreStatisticCoop", 1, lv_scoregamelink);
    }
    else {
        UserDataSetGameLink("PlayerCommanders", "TerranTychus", "ScoreStatisticSelf", 1, lv_scoregamelink);
    }
    auto21B3BDD7_val = lp_tychusPlayer;
    if (auto21B3BDD7_val == 1) {
        autoB020442D_g = libCOOC_gf_CommanderPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoB020442D_g, lv_player);
            if (lv_player < 0) { break; }
            PlayerScoreValueSetFromInt(lv_player, "CommanderOneScorePrimary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCOOC_gf_CC_CommanderScoreCoopStatistic("TerranTychus"), "UniqueTag", c_playerAny));
            PlayerScoreValueSetFromInt(lv_player, "CommanderOneScoreSecondary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCOOC_gf_CC_CommanderScoreSelfStatistic("TerranTychus"), "UniqueTag", c_playerAny));
        }
    }
    else if (auto21B3BDD7_val == 2) {
        autoE5B836DD_g = libCOOC_gf_CommanderPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoE5B836DD_g, lv_player);
            if (lv_player < 0) { break; }
            PlayerScoreValueSetFromInt(lv_player, "CommanderTwoScorePrimary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCOOC_gf_CC_CommanderScoreCoopStatistic("TerranTychus"), "UniqueTag", c_playerAny));
            PlayerScoreValueSetFromInt(lv_player, "CommanderTwoScoreSecondary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCOOC_gf_CC_CommanderScoreSelfStatistic("TerranTychus"), "UniqueTag", c_playerAny));
        }
    }
    else {
    }
}

void libCOOC_gf_TrackUnitDamageTakenForScoreScreen (bool lp_enableDisable, unit lp_trackedUnit, string lp_scoreType) {
    // Variable Declarations
    unitgroup lv_scoreGroup;
    int lv_scoreIndex;

    // Automatic Variable Declarations
    int auto73B3DFB4_ae;
    const int auto73B3DFB4_ai = 1;
    int auto824015EC_ae;
    const int auto824015EC_ai = 1;

    // Variable Initialization
    lv_scoreGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_enableDisable == false)) {
        auto73B3DFB4_ae = libCOOC_gv_cC_ScoreTrackedDmgTakenCount;
        lv_scoreIndex = 1;
        for ( ; ( (auto73B3DFB4_ai >= 0 && lv_scoreIndex <= auto73B3DFB4_ae) || (auto73B3DFB4_ai < 0 && lv_scoreIndex >= auto73B3DFB4_ae) ) ; lv_scoreIndex += auto73B3DFB4_ai ) {
            if ((DataTableGetString(true, ("CC_ScoreType_" + IntToString(lv_scoreIndex))) == (lp_scoreType))) {
                lv_scoreGroup = DataTableGetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(lv_scoreIndex)));
                UnitGroupRemove(lv_scoreGroup, lp_trackedUnit);
                return ;
            }

        }
        return ;
    }

    auto824015EC_ae = libCOOC_gv_cC_ScoreTrackedDmgTakenCount;
    lv_scoreIndex = 1;
    for ( ; ( (auto824015EC_ai >= 0 && lv_scoreIndex <= auto824015EC_ae) || (auto824015EC_ai < 0 && lv_scoreIndex >= auto824015EC_ae) ) ; lv_scoreIndex += auto824015EC_ai ) {
        if ((DataTableGetString(true, ("CC_ScoreType_" + IntToString(lv_scoreIndex))) == (lp_scoreType))) {
            lv_scoreGroup = DataTableGetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(lv_scoreIndex)));
            UnitGroupAdd(lv_scoreGroup, lp_trackedUnit);
            return ;
        }

    }
    libCOOC_gv_cC_ScoreTrackedDmgTakenCount += 1;
    UnitGroupAdd(lv_scoreGroup, lp_trackedUnit);
    DataTableSetString(true, ("CC_ScoreType_" + IntToString(libCOOC_gv_cC_ScoreTrackedDmgTakenCount)), (lp_scoreType));
    DataTableSetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(libCOOC_gv_cC_ScoreTrackedDmgTakenCount)), lv_scoreGroup);
    TriggerEnable(libCOOC_gt_CC_ScoreDynDmgTaken, true);
}

void libCOOC_gf_CC_ScoreValueSet (int lp_player, string lp_scoreType, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    TextExpressionSetToken("Param/Expression/lib_COOC_FEA65122", "A", StringToText((lp_scoreType)));
    TextExpressionSetToken("Param/Expression/lib_COOC_FEA65122", "B", IntToText(lp_value));
    TextExpressionSetToken("Param/Expression/lib_COOC_FEA65122", "C", IntToText(lp_player));
    TriggerDebugOutput(14, TextExpressionAssemble("Param/Expression/lib_COOC_FEA65122"), false);
    PlayerScoreValueSetFromInt(lp_player, lp_scoreType, lp_value);
}

int libCOOC_gf_CC_StatEventLast () {
    // Automatic Variable Declarations
    // Implementation
    return libCOOC_gv_pC_StatEventLastCampaign;
}

void libCOOC_gf_CC_StatEventCreate (string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    StatEventCreate(lp_name);
    TriggerDebugOutput(13, StringToText(lp_name), false);
    libCOOC_gv_pC_StatEventLastCampaign = StatEventLastCreated();
}

void libCOOC_gf_CC_StatEventAddStr (string lp_key, string lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    TextExpressionSetToken("Param/Expression/lib_COOC_DB7366EF", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_COOC_DB7366EF", "B", StringToText(lp_value));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COOC_DB7366EF"), false);
    StatEventAddDataString(lp_event, lp_key, lp_value);
}

void libCOOC_gf_CC_StatEventAddInt (string lp_key, int lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    TextExpressionSetToken("Param/Expression/lib_COOC_257AA7EE", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_COOC_257AA7EE", "B", IntToText(lp_value));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COOC_257AA7EE"), false);
    StatEventAddDataInt(lp_event, lp_key, lp_value);
}

void libCOOC_gf_CC_StatEventAddReal (string lp_key, fixed lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    TextExpressionSetToken("Param/Expression/lib_COOC_06D1E9EA", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_COOC_06D1E9EA", "B", FixedToText(lp_value, c_fixedPrecisionAny));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COOC_06D1E9EA"), false);
    StatEventAddDataFixed(lp_event, lp_key, lp_value);
}

void libCOOC_gf_CC_StatEventDone (int lp_statEvent) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    TriggerDebugOutput(13, StringToText(""), false);
    StatEventSend(lp_statEvent);
    if ((lp_statEvent == libCOOC_gv_pC_StatEventLastCampaign)) {
        libCOOC_gv_pC_StatEventLastCampaign = -1;
    }

}

void libCOOC_gf_CC_StatRecordMapStart () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto2CDBB139_g;

    // Variable Initialization

    // Implementation
    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    libCOOC_gf_CC_StatEventCreate("ACMapStart");
    libCOOC_gf_CC_StatEventAddInt("Version", libCOOC_gv_pCC_StatVersion, libCOOC_gf_CC_StatEventLast());
    libCOOC_gf_CC_StatEventDone(libCOOC_gf_CC_StatEventLast());
    auto2CDBB139_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto2CDBB139_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            continue;
        }

        libCOOC_gf_CC_ScoreValueSet(lv_indexPlayer, "CommanderLevel", libCOOC_gf_CC_CommanderLevel(lv_indexPlayer, libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)));
        libCOOC_gf_CC_ScoreValueSet(lv_indexPlayer, "CommanderSelection", libCOOC_gf_CC_CommanderInternalIndex(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)));
        libCOOC_gf_CC_ScoreValueSet(lv_indexPlayer, "Difficulty", libCOOC_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer)));
        libCOOC_gf_CC_ScoreValueSet(lv_indexPlayer, "MasteryLevel", libCOOC_gf_CC_PlayerMasteryLevel(lv_indexPlayer));
        libCOOC_gf_CC_StatEventCreate("PlayerInfo");
        libCOOC_gf_CC_StatEventAddInt("PlayerIndex", lv_indexPlayer, libCOOC_gf_CC_StatEventLast());
        if ((GameIsOnline() == true)) {
            libCOOC_gf_CC_StatEventAddStr("PlayerHandle", PlayerHandle(lv_indexPlayer), libCOOC_gf_CC_StatEventLast());
        }

        libCOOC_gf_CC_StatEventAddInt("PlayerDifficulty", libCOOC_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer)), libCOOC_gf_CC_StatEventLast());
        libCOOC_gf_CC_StatEventAddStr("Commander", (libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)), libCOOC_gf_CC_StatEventLast());
        libCOOC_gf_CC_StatEventAddInt("CommanderLevel", libCOOC_gf_CC_CommanderLevel(lv_indexPlayer, libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)), libCOOC_gf_CC_StatEventLast());
        libCOOC_gf_CC_StatEventDone(libCOOC_gf_CC_StatEventLast());
    }
}

bool libCOOC_gf_PlayerIsCommander (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerCommander(lp_player) != null)) {
        return true;
    }

    if ((TechTreeUpgradeCount(lp_player, "PlayerCommander", c_techCountCompleteOnly) > 0)) {
        return true;
    }

    return false;
}

playergroup libCOOC_gf_CommanderPlayers () {
    // Variable Declarations
    int lv_player;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup autoED88D6E0_g;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    autoED88D6E0_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoED88D6E0_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOOC_gf_PlayerIsCommander(lv_player) == true)) {
            PlayerGroupAdd(lv_playerGroup, lv_player);
        }

    }
    return lv_playerGroup;
}

playergroup libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf (int lp_player) {
    // Variable Declarations
    playergroup lv_playerGroup;
    playergroup lv_playerGroupAllies;
    playergroup lv_playerGroupCommnaders;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroupAllies = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, lp_player);
    lv_playerGroupCommnaders = libCOOC_gf_CommanderPlayers();

    // Implementation
    lv_playerGroup = libNtve_gf_IntersectionOfPlayerGroups(lv_playerGroupAllies, lv_playerGroupCommnaders);
    return lv_playerGroup;
}

void libCOOC_gf_PauseAITimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    AITimePause(lp_pauseUnpause);
    libCOOC_gv_cC_TimeAIPaused = lp_pauseUnpause;
}

void libCOOC_gf_CC_TimeAITemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = libCOOC_gv_cC_TimeAIPaused;
    libCOOC_gf_PauseAITimeCampaign(lp_pauseUnpause);
    libCOOC_gv_cC_TimeAIPaused = lv_originalPauseState;
}

void libCOOC_gf_CC_TimeAITemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gf_PauseAITimeCampaign(libCOOC_gv_cC_TimeAIPaused);
}

void libCOOC_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    GameSetMissionTimePaused(lp_pauseUnpause);
    libCOOC_gv_cC_TimeMissionPaused = lp_pauseUnpause;
}

void libCOOC_gf_CC_TimeMissionTemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = libCOOC_gv_cC_TimeMissionPaused;
    libCOOC_gf_PauseMissionTimeCampaign(lp_pauseUnpause);
    libCOOC_gv_cC_TimeMissionPaused = lv_originalPauseState;
}

void libCOOC_gf_CC_TimeMissionTemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gf_PauseMissionTimeCampaign(libCOOC_gv_cC_TimeMissionPaused);
}

void libCOOC_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency, int lp_player) {
    // Variable Declarations
    playergroup lv_coverPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coverPlayers = PlayerGroupEmpty();

    // Implementation
    lv_coverPlayers = PlayerGroupSingle(lp_player);
    if ((libCOOC_gv_cC_WorldCoverDlg == c_invalidDialogId)) {
        if ((lp_showHide == true)) {
            DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
            libCOOC_gv_cC_WorldCoverDlg = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
        }
        else {
            return ;
        }
    }

    if ((lp_showHide == true)) {
        DialogSetTransparency(libCOOC_gv_cC_WorldCoverDlg, lp_transparency);
    }

    DialogSetVisible(libCOOC_gv_cC_WorldCoverDlg, lv_coverPlayers, lp_showHide);
}

void libCOOC_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_waitUntilDone == true)) {
        libCOOC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    }
    else {
        libCOOC_gf_CinematicFade4(lp_fadeIn, lp_duration, lp_color);
    }
}

void libCOOC_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeIn == true)) {
        if ((libCOOC_gv__FadeImage != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libCOOC_gv__FadeImage, lp_color, PlayerGroupAll());
            DialogControlFadeTransparency(libCOOC_gv__FadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    else {
        libCOOC_gf__FadeCreateDialog();
        libNtve_gf_SetDialogItemColor(libCOOC_gv__FadeImage, lp_color, PlayerGroupAll());
        DialogControlFadeTransparency(libCOOC_gv__FadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(libCOOC_gv__FadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeGame);
    }

}

trigger auto_libCOOC_gf_CinematicFade4_Trigger = null;
bool auto_libCOOC_gf_CinematicFade4_lp_fadeIn;
fixed auto_libCOOC_gf_CinematicFade4_lp_duration;
color auto_libCOOC_gf_CinematicFade4_lp_color;

void libCOOC_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    auto_libCOOC_gf_CinematicFade4_lp_fadeIn = lp_fadeIn;
    auto_libCOOC_gf_CinematicFade4_lp_duration = lp_duration;
    auto_libCOOC_gf_CinematicFade4_lp_color = lp_color;

    if (auto_libCOOC_gf_CinematicFade4_Trigger == null) {
        auto_libCOOC_gf_CinematicFade4_Trigger = TriggerCreate("auto_libCOOC_gf_CinematicFade4_TriggerFunc");
    }

    TriggerExecute(auto_libCOOC_gf_CinematicFade4_Trigger, false, false);
}

bool auto_libCOOC_gf_CinematicFade4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_libCOOC_gf_CinematicFade4_lp_fadeIn;
    fixed lp_duration = auto_libCOOC_gf_CinematicFade4_lp_duration;
    color lp_color = auto_libCOOC_gf_CinematicFade4_lp_color;

    // Automatic Variable Declarations
    // Implementation
    libCOOC_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    return true;
}

void libCOOC_gf__FadeCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gv__FadeDialog != c_invalidDialogId)) {
        DialogDestroy(libCOOC_gv__FadeDialog);
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libCOOC_gv__FadeDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libCOOC_gv__FadeImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void libCOOC_gf_PreventSpawningInRegion (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    RegionAddRegion(libCOOC_gv_cC_NoSpawnRegion, lp_region);
}

bool libCOOC_gf_CC_SpawnAllowedAtPoint (point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    return !(RegionContainsPoint(libCOOC_gv_cC_NoSpawnRegion, lp_spawnPoint));
}

actor libCOOC_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint) {
    // Variable Declarations
    actorscope lv_scope;
    actor lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Deprecated
    return libNtve_gf_AttachModelToUnitInheritVisibility(lp_unit, lp_model, lp_attachPoint);
}

void libCOOC_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_AnimClear(lp_identifier, lp_blendTime));
}

string libCOOC_gf_CC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player) {
    // Variable Declarations
    string lv_fieldPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fieldPath = "";

    // Implementation
    lv_fieldPath = (lp_field + "[" + IntToString((lp_index - 1)) + "]");
    return CatalogFieldValueGet(lp_catalog, lp_entry, lv_fieldPath, lp_player);
}

string libCOOC_gf_CC_GetDataIDFromUIID (int lp_type, int lp_uIItemID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libCOOC_gf_CC_StoryDataTableName(lp_type, ("U" + IntToString(lp_uIItemID)));
    return DataTableGetString(true, lv_name);
}

int libCOOC_gf_CC_GetUIIDFromDataID (int lp_type, string lp_dataID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libCOOC_gf_CC_StoryDataTableName(lp_type, ("D" + lp_dataID));
    return DataTableGetInt(true, lv_name);
}

void libCOOC_gf_CC_StoreDataUIIDIntoDataTable (int lp_type, string lp_dataID, int lp_uIItemID) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = libCOOC_gf_CC_StoryDataTableName(lp_type, ("D" + lp_dataID));
    DataTableSetInt(true, lv_name, lp_uIItemID);
    lv_name = libCOOC_gf_CC_StoryDataTableName(lp_type, ("U" + IntToString(lp_uIItemID)));
    DataTableSetString(true, lv_name, lp_dataID);
}

string libCOOC_gf_CC_StoryDataTableName (int lp_type, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    return ("SS_" + IntToString((lp_type)) + libCOOC_gv_cC_GameUIDataTableConnector + lp_name);
}

playergroup libCOOC_gf_HumanPlayers () {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_aHumanPlayer;
    playergroup lv_humanPlayersCopy;

    // Automatic Variable Declarations
    const int autoD44F0722_ae = libCOOC_gv_cCC_MAXPLAYERS;
    const int autoD44F0722_ai = 1;

    // Variable Initialization
    lv_humanPlayersCopy = PlayerGroupEmpty();

    // Implementation
    if ((PlayerGroupCount(libCOOC_gv_cC_HumanPlayerGroup) == 0)) {
        lv_indexPlayer = 1;
        for ( ; ( (autoD44F0722_ai >= 0 && lv_indexPlayer <= autoD44F0722_ae) || (autoD44F0722_ai < 0 && lv_indexPlayer >= autoD44F0722_ae) ) ; lv_indexPlayer += autoD44F0722_ai ) {
            if (((lv_indexPlayer == 1) || (lv_indexPlayer == 2) || (PlayerType(lv_indexPlayer) == c_playerTypeUser))) {
                PlayerGroupAdd(libCOOC_gv_cC_HumanPlayerGroup, lv_indexPlayer);
            }

        }
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOOC_gv_cC_HumanPlayerGroup, lv_humanPlayersCopy);
    return lv_humanPlayersCopy;
}

playergroup libCOOC_gf_NondefeatedPlayers () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOOC_gv_cC_NondefeatedPlayerGroup == null)) {
        libCOOC_gf_CC_InitNonDefeatedPlayers();
    }

    return libCOOC_gv_cC_NondefeatedPlayerGroup;
}

void libCOOC_gf_CC_InitNonDefeatedPlayers () {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_commanderPlayers;
    int lv_commanderPlayersCount;

    // Automatic Variable Declarations
    playergroup auto0E6D29CC_g;

    // Variable Initialization
    lv_commanderPlayers = libCOOC_gf_CommanderPlayers();
    lv_commanderPlayersCount = PlayerGroupCount(lv_commanderPlayers);

    // Implementation
    if ((lv_commanderPlayersCount == 0)) {
        return ;
    }

    libCOOC_gv_cC_NondefeatedPlayerGroup = PlayerGroupEmpty();
    auto0E6D29CC_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0E6D29CC_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusActive) && (libCOOC_gf_PlayerIsCommander(lv_indexPlayer) == true)) {
            PlayerGroupAdd(libCOOC_gv_cC_NondefeatedPlayerGroup, lv_indexPlayer);
        }

    }
}

void libCOOC_gf_CC_SetPlayerDefeated (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupRemove(libCOOC_gv_cC_NondefeatedPlayerGroup, lp_player);
}

bool libCOOC_gf_CC_UnitIsInternal (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "ACHeroSpawnPlacement") || (UnitGetType(lp_unit) == libCOOC_gf_CC_CommanderGlobalCastUnitType(libCOOC_gf_ActiveCommanderForPlayer(UnitGetOwner(lp_unit)))) || (UnitGetType(lp_unit) == libCOOC_gf_CC_CommanderHeroReviveUnitType(libCOOC_gf_ActiveCommanderForPlayer(UnitGetOwner(lp_unit)))))) {
        return true;
    }

    return false;
}

text libCOOC_gf_FormatTimeCampaign (int lp_second) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_second < 3600)) {
        return TextTimeFormat(StringExternal("Param/Value/lib_COOC_A4F1A203"), lp_second);
    }
    else {
        return TextTimeFormat(StringExternal("Param/Value/lib_COOC_4E67BE7A"), lp_second);
    }
}

unitgroup libCOOC_gf_CC_TownHallsForPlayer (int lp_player) {
    // Variable Declarations
    unitgroup lv_townHallGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_townHallGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup(null, lp_player, null, UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return lv_townHallGroup;
}

bool libCOOC_gf_CC_UnitTypeIsTownHall (string lp_unitType) {
    // Variable Declarations
    string lv_townHallIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "FlagArray[" + IntToString(16) + "]", c_playerAny) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

int libCOOC_gf_CC_RaceToInt (string lp_race) {
    // Automatic Variable Declarations
    string auto5A4CF0D6_val;

    // Implementation
    auto5A4CF0D6_val = lp_race;
    if (auto5A4CF0D6_val == "Prot") {
        return 1349676916;
    }
    else if (auto5A4CF0D6_val == "Terr") {
        return 1415934578;
    }
    else if (auto5A4CF0D6_val == "Zerg") {
        return 1516597863;
    }
    else {
        return 0;
    }
}

string libCOOC_gf_CC_IntToRace (int lp_fourCCInt) {
    // Automatic Variable Declarations
    int autoD66B80C1_val;

    // Implementation
    autoD66B80C1_val = lp_fourCCInt;
    if (autoD66B80C1_val == libCOOC_gf_CC_RaceToInt("Prot")) {
        return "Prot";
    }
    else if (autoD66B80C1_val == libCOOC_gf_CC_RaceToInt("Terr")) {
        return "Terr";
    }
    else if (autoD66B80C1_val == libCOOC_gf_CC_RaceToInt("Zerg")) {
        return "Zerg";
    }
    else {
        return null;
    }
}

string libCOOC_gf_CC_AICommanderByUniqueIndex (int lp_uniqueIndex) {
    // Variable Declarations
    string lv_aicommanderinstance;

    // Automatic Variable Declarations
    string auto8E36BD2D_userType;
    int auto8E36BD2D_i;

    // Variable Initialization

    // Implementation
    auto8E36BD2D_userType = "CoopAICommanders";
    auto8E36BD2D_i = 1;
    for ( ; auto8E36BD2D_i <= UserDataInstanceCount(auto8E36BD2D_userType) ; auto8E36BD2D_i += 1 ) {
        lv_aicommanderinstance = UserDataInstance(auto8E36BD2D_userType, auto8E36BD2D_i);
        if ((UserDataGetInt("CoopAICommanders", lv_aicommanderinstance, "UniqueIndex", 1) == lp_uniqueIndex)) {
            return lv_aicommanderinstance;
        }

    }
    return null;
}

string libCOOC_gf_IIF (bool lp_condition, string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

text libCOOC_gf_TooltipTextofButton (int lp_player, string lp_button) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COOC_25D89385", "NAME", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lp_button, "Name", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COOC_25D89385", "DESCRIPTION", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lp_button, "Tooltip", lp_player)));
    return TextExpressionAssemble("Param/Expression/lib_COOC_25D89385");
}

void libCOOC_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    int auto2970F052_val;

    // Implementation
    auto2970F052_val = lp_mode;
    if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_Cinematic) {
        libLbty_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll());
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_Game) {
        libCOOC_gv_cC_VolumeChannelModeInSpeech = false;
        if ((libCOOC_gv_cC_VolumeChannelModeInLowHP == true)) {
            libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_LowHealthBegin);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libCOOC_gv_cC_VolumeChannelModeInLowHP = true;
        if ((libCOOC_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libCOOC_gv_cC_VolumeChannelModeInLowHP = false;
        if ((libCOOC_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_Speech) {
        libCOOC_gv_cC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_Victory) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto2970F052_val == libCOOC_ge_VolumeChannelModeCampaign_EvolutionUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
    }
    else {
    }
}

void libCOOC_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign (int lp_mode, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    int auto694613C6_val;

    // Implementation
    auto694613C6_val = lp_mode;
    if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_Cinematic) {
        libLbty_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, lp_playerGroup);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_Game) {
        libCOOC_gv_cC_VolumeChannelModeInSpeech = false;
        if ((libCOOC_gv_cC_VolumeChannelModeInLowHP == true)) {
            libCOOC_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOOC_ge_VolumeChannelModeCampaign_LowHealthBegin, lp_playerGroup);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 0.25);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libCOOC_gv_cC_VolumeChannelModeInLowHP = true;
        if ((libCOOC_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOOC_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech, lp_playerGroup);
            return ;
        }

        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libCOOC_gv_cC_VolumeChannelModeInLowHP = false;
        if ((libCOOC_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOOC_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech, lp_playerGroup);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 1.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_Speech) {
        libCOOC_gv_cC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, lp_playerGroup, 2.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_Victory) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto694613C6_val == libCOOC_ge_VolumeChannelModeCampaign_EvolutionUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 100.0, 0.5);
    }
    else {
    }
}

void libCOOC_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAlert, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAmbient, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryBuild, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryCombat, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDeath, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDialogue, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDoodad, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFlames, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFoley, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryGather, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryME, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMission, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovement, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovie, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMusic, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryOther, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryReady, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySAmbient, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySEmitters, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySPieces, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySpell, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryTV, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryUI, lp_ignoredChannel, lp_players);
    libCOOC_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryVoice, lp_ignoredChannel, lp_players);
}

void libCOOC_gf_CC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_muteChannel != lp_ignoredChannel)) {
        SoundChannelMute(lp_players, lp_muteChannel, lp_muteUnmute);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: CC_DebugDefeatMultiplier
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_DebugDefeatMultiplier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_DebugDefeatMultiplierOverride = StringToFixed(StringWord(EventChatMessage(false), 2));
    if ((libCOOC_gv_cC_DebugDefeatMultiplierOverride < 0.0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COOC_55583EAD"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COOC_1F1F5B04", "A", FixedToText(libCOOC_gv_cC_DebugDefeatMultiplierOverride, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_1F1F5B04"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_DebugDefeatMultiplier_Init () {
    libCOOC_gt_CC_DebugDefeatMultiplier = TriggerCreate("libCOOC_gt_CC_DebugDefeatMultiplier_Func");
    TriggerAddEventChatMessage(libCOOC_gt_CC_DebugDefeatMultiplier, c_playerAny, "-xpmult", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DebugToggleTechSpam
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_DebugToggleTechSpam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_DebugTechSpam = !(libCOOC_gv_cC_DebugTechSpam);
    TextExpressionSetToken("Param/Expression/lib_COOC_346FD6AB", "A", libNtve_gf_ConvertBooleanToText(libCOOC_gv_cC_DebugTechSpam));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_346FD6AB"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_DebugToggleTechSpam_Init () {
    libCOOC_gt_CC_DebugToggleTechSpam = TriggerCreate("libCOOC_gt_CC_DebugToggleTechSpam_Func");
    TriggerAddEventChatMessage(libCOOC_gt_CC_DebugToggleTechSpam, c_playerAny, "techspam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DebugToggleTechSuperSpam
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_DebugToggleTechSuperSpam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_DebugTechSuperSpam = !(libCOOC_gv_cC_DebugTechSuperSpam);
    TextExpressionSetToken("Param/Expression/lib_COOC_94BD8027", "A", libNtve_gf_ConvertBooleanToText(libCOOC_gv_cC_DebugTechSuperSpam));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_94BD8027"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_DebugToggleTechSuperSpam_Init () {
    libCOOC_gt_CC_DebugToggleTechSuperSpam = TriggerCreate("libCOOC_gt_CC_DebugToggleTechSuperSpam_Func");
    TriggerAddEventChatMessage(libCOOC_gt_CC_DebugToggleTechSuperSpam, c_playerAny, "techsuperspam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DebugUpdateTech
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_DebugUpdateTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gf_CC_UpdateTechStates(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_DebugUpdateTech_Init () {
    libCOOC_gt_CC_DebugUpdateTech = TriggerCreate("libCOOC_gt_CC_DebugUpdateTech_Func");
    TriggerAddEventChatMessage(libCOOC_gt_CC_DebugUpdateTech, c_playerAny, "techupdate", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_AchievementVorazunTimeStop
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_AchievementVorazunTimeStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }

        if (!((lv_killer <= 15))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lv_killer) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_killer, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((libCOOC_gf_ActiveCommanderForPlayer(lv_killer) != "ProtossVorazun"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(libCOOC_gf_CC_PlayerAlly(lv_killer), "CommanderVorazunYourTurn", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_AchievementVorazunTimeStop_Init () {
    libCOOC_gt_CC_AchievementVorazunTimeStop = TriggerCreate("libCOOC_gt_CC_AchievementVorazunTimeStop_Func");
    TriggerEnable(libCOOC_gt_CC_AchievementVorazunTimeStop, false);
    TriggerAddEventUnitDied(libCOOC_gt_CC_AchievementVorazunTimeStop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_PrestigeUpgradeSupplement
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_PrestigeUpgradeSupplement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_prestige;
    string lv_supplemental;
    int lv_index;

    // Automatic Variable Declarations
    int autoECD82AAC_ae;
    const int autoECD82AAC_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), lv_player) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_prestige = libCOOC_gf_CC_PlayerActivePrestigeInstance(lv_player);
    if ((lv_prestige == null)) {
        return true;
    }

    autoECD82AAC_ae = UserDataFieldValueCount("PlayerPrestige", "UpgradeSupplements");
    lv_index = 1;
    for ( ; ( (autoECD82AAC_ai >= 0 && lv_index <= autoECD82AAC_ae) || (autoECD82AAC_ai < 0 && lv_index >= autoECD82AAC_ae) ) ; lv_index += autoECD82AAC_ai ) {
        lv_supplemental = UserDataGetUserInstance("PlayerPrestige", lv_prestige, "UpgradeSupplements", lv_index);
        if ((UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lv_supplemental, "Upgrade", 1) == EventUpgradeName())) {
            libCOOC_gf_CC_ApplyUpgradeSupplemental(lv_player, lv_supplemental);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_PrestigeUpgradeSupplement_Init () {
    libCOOC_gt_CC_PrestigeUpgradeSupplement = TriggerCreate("libCOOC_gt_CC_PrestigeUpgradeSupplement_Func");
    TriggerEnable(libCOOC_gt_CC_PrestigeUpgradeSupplement, false);
    TriggerAddEventUpgradeLevelChanged(libCOOC_gt_CC_PrestigeUpgradeSupplement, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_SharedUpgradesRecheck
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_SharedUpgradesRecheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gf_CC_SharedUpgradesEnable();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_SharedUpgradesRecheck_Init () {
    libCOOC_gt_CC_SharedUpgradesRecheck = TriggerCreate("libCOOC_gt_CC_SharedUpgradesRecheck_Func");
    TriggerAddEventUnitResearchProgress(libCOOC_gt_CC_SharedUpgradesRecheck, null, c_unitProgressStageComplete);
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_SharedUpgradesRecheck, c_playerAny, "RefreshSharedUpgrades");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_CustomStartupSelectLaunch
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_CustomStartupSelectLaunch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_CU_CustomMutatorClose();
    libCOOC_gf_CC_CustomStartupLaunch();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_CustomStartupSelectLaunch_Init () {
    libCOOC_gt_CC_CustomStartupSelectLaunch = TriggerCreate("libCOOC_gt_CC_CustomStartupSelectLaunch_Func");
    libCOUI_gf_CU_CustomMutatorStartGame(libCOOC_gt_CC_CustomStartupSelectLaunch);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DevStartupDevForceQuit
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_DevStartupDevForceQuit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(1, c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_DevStartupDevForceQuit_Init () {
    libCOOC_gt_CC_DevStartupDevForceQuit = TriggerCreate("libCOOC_gt_CC_DevStartupDevForceQuit_Func");
    TriggerEnable(libCOOC_gt_CC_DevStartupDevForceQuit, false);
    TriggerAddEventCustomDialogDismissed(libCOOC_gt_CC_DevStartupDevForceQuit, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DevStartupCommSelectExit
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_DevStartupCommSelectExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB32A003A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB32A003A_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB32A003A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOUI_gf_CU_CommanderClose(lv_indexPlayer);
    }
    libCOOC_gf_CC_DevStartupFinish();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_DevStartupCommSelectExit_Init () {
    libCOOC_gt_CC_DevStartupCommSelectExit = TriggerCreate("libCOOC_gt_CC_DevStartupCommSelectExit_Func");
    libCOUI_gf_CU_CommanderClosed(libCOOC_gt_CC_DevStartupCommSelectExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreArtanisAbsorb
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreArtanisAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())] += EventUnitDamageAbsorbed();
    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "ArtanisShieldAbsorb", FixedToInt(libCOOC_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())]));
    if ((libCOOC_gf_ActiveCommanderForPlayer(UnitGetOwner(EventUnit())) != "ProtossArtanis")) {
        if ((libCOOC_gv_cC_InContestMap == false) && ((FixedToInt(libCOOC_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())]) - FixedToInt(libCOOC_gv_cC_ScoreArtanisAbsorbLast[UnitGetOwner(EventUnit())])) > 5)) {
            AchievementTermQuantityAdd(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), "CommanderArtanisSolalright", (FixedToInt(libCOOC_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())]) - FixedToInt(libCOOC_gv_cC_ScoreArtanisAbsorbLast[UnitGetOwner(EventUnit())])));
            libCOOC_gv_cC_ScoreArtanisAbsorbLast[UnitGetOwner(EventUnit())] = libCOOC_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())];
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreArtanisAbsorb_Init () {
    libCOOC_gt_CC_ScoreArtanisAbsorb = TriggerCreate("libCOOC_gt_CC_ScoreArtanisAbsorb_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreArtanisAbsorb, false);
    TriggerAddEventUnitDamageAbsorbed(libCOOC_gt_CC_ScoreArtanisAbsorb, null, "SOASuperShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreArtanisKaraxOrbitalStrike
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCOOC_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike_Init () {
    libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike = TriggerCreate("libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAOrbitalStrikeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreArtanisBombardment
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreArtanisBombardment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCOOC_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreArtanisBombardment_Init () {
    libCOOC_gt_CC_ScoreArtanisBombardment = TriggerCreate("libCOOC_gt_CC_ScoreArtanisBombardment_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreArtanisBombardment, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreArtanisBombardment, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAStrafeAttackDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreVorazunBHManageGroup
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreVorazunBHManageGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitGroupAdd(libCOOC_gv_cC_ScoreVorazunBHGroup, EventUnit());
    }
    else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
        UnitGroupRemove(libCOOC_gv_cC_ScoreVorazunBHGroup, EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreVorazunBHManageGroup_Init () {
    libCOOC_gt_CC_ScoreVorazunBHManageGroup = TriggerCreate("libCOOC_gt_CC_ScoreVorazunBHManageGroup_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreVorazunBHManageGroup, false);
    TriggerAddEventUnitBehaviorChange(libCOOC_gt_CC_ScoreVorazunBHManageGroup, null, "VoidSentryBlackHole", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreVorazunBHDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreVorazunBHDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOOC_gv_cC_ScoreVorazunBHGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreVorazunBHDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "VorazunBlackHoleDamage", FixedToInt(libCOOC_gv_cC_ScoreVorazunBHDmg[EventUnitDamageSourcePlayer()]));
    if ((libCOOC_gv_cC_InContestMap == false) && ((libCOMI_gf_DifficultyLevelForPlayerCoop(EventUnitDamageSourcePlayer()) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(EventUnitDamageSourcePlayer()) == 4)) && (UnitIsAlive(EventUnit()) == false) && (libCOOC_gf_ActiveCommanderForPlayer(EventUnitDamageSourcePlayer()) == "ProtossVorazun")) {
        AchievementTermQuantityAdd(EventUnitDamageSourcePlayer(), "CommanderVorazun1Shot15Kills", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreVorazunBHDmg_Init () {
    libCOOC_gt_CC_ScoreVorazunBHDmg = TriggerCreate("libCOOC_gt_CC_ScoreVorazunBHDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreVorazunBHDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreVorazunBHDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreVorazunCloakDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreVorazunCloakDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnitDamageSourceUnit()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitDamageSourceUnit(), 1, UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreVorazunCloakDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "VorazunCloakedDamage", FixedToInt(libCOOC_gv_cC_ScoreVorazunCloakDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreVorazunCloakDmg_Init () {
    libCOOC_gt_CC_ScoreVorazunCloakDmg = TriggerCreate("libCOOC_gt_CC_ScoreVorazunCloakDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreVorazunCloakDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreVorazunCloakDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKaraxSolarLance
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreKaraxSolarLance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCOOC_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreKaraxSolarLance_Init () {
    libCOOC_gt_CC_ScoreKaraxSolarLance = TriggerCreate("libCOOC_gt_CC_ScoreKaraxSolarLance_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreKaraxSolarLance, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreKaraxSolarLance, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAThermalLanceDamage");
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreKaraxSolarLance, null, c_unitDamageTypeAny, c_unitDamageEither, "ThermalLancesFireBeamDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKaraxPurifierBeam
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreKaraxPurifierBeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCOOC_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreKaraxPurifierBeam_Init () {
    libCOOC_gt_CC_ScoreKaraxPurifierBeam = TriggerCreate("libCOOC_gt_CC_ScoreKaraxPurifierBeam_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreKaraxPurifierBeam, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreKaraxPurifierBeam, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAPurifierBeamDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKaraxChronoProduction
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreKaraxChronoProduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnit(), "SOAMapWideChrono") == true) || (UnitGetType(EventUnit()) == "Larva")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()) != "ProtossKarax")) {
        AchievementTermQuantityAdd(libCOOC_gf_CC_PlayerAlly(EventPlayer()), "CommanderKaraxSuperChrono", 1);
    }

    PlayerScoreValueSetFromInt(EventPlayer(), "KaraxChronoCoop", (PlayerScoreValueGetAsInt(EventPlayer(), "KaraxChronoCoop") + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreKaraxChronoProduction_Init () {
    libCOOC_gt_CC_ScoreKaraxChronoProduction = TriggerCreate("libCOOC_gt_CC_ScoreKaraxChronoProduction_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreKaraxChronoProduction, false);
    TriggerAddEventUnitTrainProgress(libCOOC_gt_CC_ScoreKaraxChronoProduction, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(libCOOC_gt_CC_ScoreKaraxChronoProduction, null, c_unitProgressStageComplete);
    TriggerAddEventUnitAbility(libCOOC_gt_CC_ScoreKaraxChronoProduction, null, null, c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreRaynorMedicHeal
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreRaynorMedicHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "TerranRaynor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreRaynorHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "RaynorMedicHealing", FixedToInt(libCOOC_gv_cC_ScoreRaynorHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreRaynorMedicHeal_Init () {
    libCOOC_gt_CC_ScoreRaynorMedicHeal = TriggerCreate("libCOOC_gt_CC_ScoreRaynorMedicHeal_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreRaynorMedicHeal, false);
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreRaynorMedicHeal, null, c_unitVitalLife, "heal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreRaynorHyperionDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreRaynorHyperionDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "HyperionVoidCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreRaynorHyperionDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "RaynorHyperionDamage", FixedToInt(libCOOC_gv_cC_ScoreRaynorHyperionDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreRaynorHyperionDmg_Init () {
    libCOOC_gt_CC_ScoreRaynorHyperionDmg = TriggerCreate("libCOOC_gt_CC_ScoreRaynorHyperionDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreRaynorHyperionDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreRaynorHyperionDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreSwannSVHeal
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreSwannSVHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "TerranSwann"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitHealLaunchUnit()) == "ScienceVessel"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreSwannHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "SwannMechHealing", FixedToInt(libCOOC_gv_cC_ScoreSwannHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreSwannSVHeal_Init () {
    libCOOC_gt_CC_ScoreSwannSVHeal = TriggerCreate("libCOOC_gt_CC_ScoreSwannSVHeal_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreSwannSVHeal, false);
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreSwannSVHeal, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreSwannDrillDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreSwannDrillDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreSwannDrillDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "SwannDrillDamage", FixedToInt(libCOOC_gv_cC_ScoreSwannDrillDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreSwannDrillDmg_Init () {
    libCOOC_gt_CC_ScoreSwannDrillDmg = TriggerCreate("libCOOC_gt_CC_ScoreSwannDrillDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreSwannDrillDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreSwannDrillDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKerriganResources
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreKerriganResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto520F5319_val;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto520F5319_val = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    if (auto520F5319_val == "KerriganVoidCoopEconDropLT1") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+5));
    }
    else if (auto520F5319_val == "KerriganVoidCoopEconDrop1") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+10));
    }
    else if (auto520F5319_val == "KerriganVoidCoopEconDrop2") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+15));
    }
    else if (auto520F5319_val == "KerriganVoidCoopEconDrop3") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+30));
    }
    else if (auto520F5319_val == "KerriganVoidCoopEconDrop4") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+60));
    }
    else if (auto520F5319_val == "KerriganVoidCoopEconDrop5") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+75));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreKerriganResources_Init () {
    libCOOC_gt_CC_ScoreKerriganResources = TriggerCreate("libCOOC_gt_CC_ScoreKerriganResources_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreKerriganResources, false);
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreKerriganResources, 1, "VoidPickupRemoveDelay");
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreKerriganResources, 2, "VoidPickupRemoveDelay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKerriganDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreKerriganDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "K5Kerrigan"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreKerriganDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "KerriganDamage", FixedToInt(libCOOC_gv_cC_ScoreKerriganDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreKerriganDmg_Init () {
    libCOOC_gt_CC_ScoreKerriganDmg = TriggerCreate("libCOOC_gt_CC_ScoreKerriganDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreKerriganDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreKerriganDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZagaraFrenzyDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreZagaraFrenzyDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "ZagaraVoidCoopMassFrenzyTarget") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZagaraFrenzyDamage", FixedToInt(libCOOC_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()]));
    if ((libCOOC_gf_ActiveCommanderForPlayer(EventUnitDamageSourcePlayer()) != "ZergZagara")) {
        if (((FixedToInt(libCOOC_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()]) - FixedToInt(libCOOC_gv_cC_ScoreZagaraFrenzyDmgLast[EventUnitDamageSourcePlayer()])) > 5)) {
            if ((libCOOC_gv_cC_InContestMap == false)) {
                AchievementTermQuantityAdd(libCOOC_gf_CC_PlayerAlly(EventUnitDamageSourcePlayer()), "CommanderZagaraFrenzy4Everyone", (FixedToInt(libCOOC_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()]) - FixedToInt(libCOOC_gv_cC_ScoreZagaraFrenzyDmgLast[EventUnitDamageSourcePlayer()])));
            }

            libCOOC_gv_cC_ScoreZagaraFrenzyDmgLast[EventUnitDamageSourcePlayer()] = libCOOC_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()];
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreZagaraFrenzyDmg_Init () {
    libCOOC_gt_CC_ScoreZagaraFrenzyDmg = TriggerCreate("libCOOC_gt_CC_ScoreZagaraFrenzyDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreZagaraFrenzyDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreZagaraFrenzyDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZagaraSuicideDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreZagaraSuicideDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "Baneling") || (UnitGetType(EventUnitDamageSourceUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSHunterBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSHunter") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingBigBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingBig") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingMediumBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingMedium") || (UnitGetType(EventUnitDamageSourceUnit()) == "Scourge") || (UnitGetType(EventUnitDamageSourceUnit()) == "BanelingStetmann") || (UnitGetType(EventUnitDamageSourceUnit()) == "BanelingStetmannBurrowed")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZagaraSuicideDamage", FixedToInt(libCOOC_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreZagaraSuicideDmg_Init () {
    libCOOC_gt_CC_ScoreZagaraSuicideDmg = TriggerCreate("libCOOC_gt_CC_ScoreZagaraSuicideDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreZagaraSuicideDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreZagaraSuicideDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZagaraBanelingBarrage
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreZagaraBanelingBarrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZagaraSuicideDamage", FixedToInt(libCOOC_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreZagaraBanelingBarrage_Init () {
    libCOOC_gt_CC_ScoreZagaraBanelingBarrage = TriggerCreate("libCOOC_gt_CC_ScoreZagaraBanelingBarrage_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreZagaraBanelingBarrage, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreZagaraBanelingBarrage, null, c_unitDamageTypeAny, c_unitDamageEither, "ZagaraVoidCoopBanelingBarrageExplodeSearchUnit");
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreZagaraBanelingBarrage, null, c_unitDamageTypeAny, c_unitDamageEither, "ZagaraVoidCoopBanelingBarrageExplodeSearchStructure");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAbathurHealing
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreAbathurHealing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "ZergAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreAbathurHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "AbathurHealingReceived", FixedToInt(libCOOC_gv_cC_ScoreAbathurHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreAbathurHealing_Init () {
    libCOOC_gt_CC_ScoreAbathurHealing = TriggerCreate("libCOOC_gt_CC_ScoreAbathurHealing_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreAbathurHealing, false);
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreAbathurHealing, null, c_unitVitalAny, "AbathurMendInitialHealer");
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreAbathurHealing, null, c_unitVitalAny, "AbathurMendSecondaryHealer");
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreAbathurHealing, null, c_unitVitalAny, "QueenBurstHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAbathurMonsterDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreAbathurMonsterDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "Brutalisk") || (UnitGetType(EventUnitDamageSourceUnit()) == "AbathurSymbioteBrutalisk") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSLeviathan") || (UnitGetType(EventUnitDamageSourceUnit()) == "AbathurSymbioteLeviathan")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreAbathurMonsterDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "AbathurMonsterDamage", FixedToInt(libCOOC_gv_cC_ScoreAbathurMonsterDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreAbathurMonsterDmg_Init () {
    libCOOC_gt_CC_ScoreAbathurMonsterDmg = TriggerCreate("libCOOC_gt_CC_ScoreAbathurMonsterDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreAbathurMonsterDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreAbathurMonsterDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAlarakDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreAlarakDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "AlarakCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreAlarakDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "AlarakDamage", FixedToInt(libCOOC_gv_cC_ScoreAlarakDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreAlarakDmg_Init () {
    libCOOC_gt_CC_ScoreAlarakDmg = TriggerCreate("libCOOC_gt_CC_ScoreAlarakDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreAlarakDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreAlarakDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAlarakHeal
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreAlarakHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "ProtossAlarak"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreAlarakHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "AlarakSelfHeals", FixedToInt(libCOOC_gv_cC_ScoreAlarakHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreAlarakHeal_Init () {
    libCOOC_gt_CC_ScoreAlarakHeal = TriggerCreate("libCOOC_gt_CC_ScoreAlarakHeal_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreAlarakHeal, false);
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreAlarakHeal, null, c_unitVitalAny, "SoulAbsorptionMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAlarakSacrificeHeal
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreAlarakSacrificeHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "ProtossAlarak"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AlarakCoop"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitHealLaunchUnit()) != "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreAlarakHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "AlarakSelfHeals", FixedToInt(libCOOC_gv_cC_ScoreAlarakHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreAlarakSacrificeHeal_Init () {
    libCOOC_gt_CC_ScoreAlarakSacrificeHeal = TriggerCreate("libCOOC_gt_CC_ScoreAlarakSacrificeHeal_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreAlarakSacrificeHeal, false);
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreAlarakSacrificeHeal, null, c_unitVitalAny, "AlarakTheStrongestSurviveStealLife");
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreAlarakSacrificeHeal, null, c_unitVitalAny, "AlarakTheStrongestSurviveStealShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreNovaDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreNovaDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "NovaCoop") || (UnitGetType(EventUnitDamageSourceUnit()) == "NovaCoopDecoy") || (UnitGetType(EventUnitDamageSourceUnit()) == "NovaBoombotBurrowed")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreNovaDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "NovaDamage", FixedToInt(libCOOC_gv_cC_ScoreNovaDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreNovaDmg_Init () {
    libCOOC_gt_CC_ScoreNovaDmg = TriggerCreate("libCOOC_gt_CC_ScoreNovaDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreNovaDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreNovaDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreNovaHeal
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreNovaHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "TerranNova"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreNovaHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "NovaHealandAbsorb", FixedToInt(libCOOC_gv_cC_ScoreNovaHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreNovaHeal_Init () {
    libCOOC_gt_CC_ScoreNovaHeal = TriggerCreate("libCOOC_gt_CC_ScoreNovaHeal_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreNovaHeal, false);
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreNovaHeal, null, c_unitVitalAny, "HealingDroneHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreNovaAbsorb
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreNovaAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreNovaHeal[UnitGetOwner(EventUnit())] += EventUnitDamageAbsorbed();
    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "NovaHealandAbsorb", FixedToInt(libCOOC_gv_cC_ScoreNovaHeal[UnitGetOwner(EventUnit())]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreNovaAbsorb_Init () {
    libCOOC_gt_CC_ScoreNovaAbsorb = TriggerCreate("libCOOC_gt_CC_ScoreNovaAbsorb_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreNovaAbsorb, false);
    TriggerAddEventUnitDamageAbsorbed(libCOOC_gt_CC_ScoreNovaAbsorb, null, "NovaCoopCasterDefensiveMatrix");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStukovInfestedDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreStukovInfestedDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "SIInfestedCivilian") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIInfestedMarine") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIInfestedTrooper") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIVolatileInfested") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIVolatileInfestedBurrowed")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreStukovInfestedDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "StukovInfestedDamage", FixedToInt(libCOOC_gv_cC_ScoreStukovInfestedDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreStukovInfestedDmg_Init () {
    libCOOC_gt_CC_ScoreStukovInfestedDmg = TriggerCreate("libCOOC_gt_CC_ScoreStukovInfestedDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreStukovInfestedDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreStukovInfestedDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStukovMonstrosityDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreStukovMonstrosityDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "StukovAleksander") || (UnitGetType(EventUnitDamageSourceUnit()) == "StukovAleksanderCrashed") || (UnitGetType(EventUnitDamageSourceUnit()) == "StukovApocalisk")))) {
            return false;
        }

        if (!(((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true) || (UnitHasBehavior2(EventUnit(), "StukovAleksanderAirMindControl") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreStukovMonstrosityDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "StukovMonstrosityDamage", FixedToInt(libCOOC_gv_cC_ScoreStukovMonstrosityDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreStukovMonstrosityDmg_Init () {
    libCOOC_gt_CC_ScoreStukovMonstrosityDmg = TriggerCreate("libCOOC_gt_CC_ScoreStukovMonstrosityDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreStukovMonstrosityDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreStukovMonstrosityDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreFenixChampionDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreFenixChampionDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "FenixKaldalisZealot") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixTalisAdept") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixTalisAdeptPhaseShift") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixTaldarinImmortal") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixWarbringerColossus") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixMojoScout") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixClolarionCarrier") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixClolarionInterceptor") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixClolarionBomber")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreFenixChampionDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "FenixChampionDamage", FixedToInt(libCOOC_gv_cC_ScoreFenixChampionDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreFenixChampionDmg_Init () {
    libCOOC_gt_CC_ScoreFenixChampionDmg = TriggerCreate("libCOOC_gt_CC_ScoreFenixChampionDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreFenixChampionDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreFenixChampionDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreFenixSuitDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreFenixSuitDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "FenixArbiter") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixCoop") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixDragoon")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreFenixSuitDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "FenixSuitDamage", FixedToInt(libCOOC_gv_cC_ScoreFenixSuitDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreFenixSuitDmg_Init () {
    libCOOC_gt_CC_ScoreFenixSuitDmg = TriggerCreate("libCOOC_gt_CC_ScoreFenixSuitDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreFenixSuitDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreFenixSuitDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDehakaDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreDehakaDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreDehakaDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "DehakaDamage", FixedToInt(libCOOC_gv_cC_ScoreDehakaDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreDehakaDmg_Init () {
    libCOOC_gt_CC_ScoreDehakaDmg = TriggerCreate("libCOOC_gt_CC_ScoreDehakaDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreDehakaDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreDehakaDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDehakaConsumeSupply
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreDehakaConsumeSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeEat) == true))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreDehakaConsumeSupply[EventUnitDamageSourcePlayer()] += UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropNormal);
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "DehakaConsume", FixedToInt(libCOOC_gv_cC_ScoreDehakaConsumeSupply[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreDehakaConsumeSupply_Init () {
    libCOOC_gt_CC_ScoreDehakaConsumeSupply = TriggerCreate("libCOOC_gt_CC_ScoreDehakaConsumeSupply_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreDehakaConsumeSupply, false);
    TriggerAddEventUnitDied(libCOOC_gt_CC_ScoreDehakaConsumeSupply, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreHornerMagMineDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreHornerMagMineDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreHornerMagMineDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "HornerMagMineDamage", FixedToInt(libCOOC_gv_cC_ScoreHornerMagMineDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreHornerMagMineDmg_Init () {
    libCOOC_gt_CC_ScoreHornerMagMineDmg = TriggerCreate("libCOOC_gt_CC_ScoreHornerMagMineDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreHornerMagMineDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreHornerMagMineDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "HHMagneticMineWeaponSearchDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreHornerScrapPickup
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreHornerScrapPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_vespene;
    int lv_totalResources;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minerals = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 62));
    lv_vespene = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_totalResources = (lv_minerals + lv_vespene);
    libCOOC_gv_cC_ScoreHornerScrapResources[EventPlayer()] += lv_totalResources;
    PlayerScoreValueSetFromInt(EventPlayer(), "HornerScrapCollected", FixedToInt(libCOOC_gv_cC_ScoreHornerScrapResources[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreHornerScrapPickup_Init () {
    libCOOC_gt_CC_ScoreHornerScrapPickup = TriggerCreate("libCOOC_gt_CC_ScoreHornerScrapPickup_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreHornerScrapPickup, false);
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreHornerScrapPickup, c_playerAny, "HHScrapPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusGrenadeDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusGrenadeDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusGrenadeDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusGrenadeDamage", FixedToInt(libCOOC_gv_cC_ScoreTychusGrenadeDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusGrenadeDmg_Init () {
    libCOOC_gt_CC_ScoreTychusGrenadeDmg = TriggerCreate("libCOOC_gt_CC_ScoreTychusGrenadeDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusGrenadeDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreTychusGrenadeDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusShredderGrenadeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusReaperBombDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusReaperBombDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusReaperBombDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusReaperBombDamage", FixedToInt(libCOOC_gv_cC_ScoreTychusReaperBombDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusReaperBombDmg_Init () {
    libCOOC_gt_CC_ScoreTychusReaperBombDmg = TriggerCreate("libCOOC_gt_CC_ScoreTychusReaperBombDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusReaperBombDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreTychusReaperBombDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusReaperBombU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusWarhoundTurretDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusWarhoundTurretDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "TychusWarhoundAutoTurret"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusWarhoundTurretDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusWarhoundTurretDamage", FixedToInt(libCOOC_gv_cC_ScoreTychusWarhoundTurretDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusWarhoundTurretDmg_Init () {
    libCOOC_gt_CC_ScoreTychusWarhoundTurretDmg = TriggerCreate("libCOOC_gt_CC_ScoreTychusWarhoundTurretDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusWarhoundTurretDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreTychusWarhoundTurretDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusFirebatOilDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusFirebatOilDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusFirebatOilDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusFirebatOilDamage", FixedToInt(libCOOC_gv_cC_ScoreTychusFirebatOilDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusFirebatOilDmg_Init () {
    libCOOC_gt_CC_ScoreTychusFirebatOilDmg = TriggerCreate("libCOOC_gt_CC_ScoreTychusFirebatOilDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusFirebatOilDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreTychusFirebatOilDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusFireBatOilFireDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusHERCImpactDuration
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusHERCImpactDuration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusHERCImpactDuration[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "TychusHercGrappleImpactStun", "Duration", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TychusHERCImpactDuration", FixedToInt(libCOOC_gv_cC_ScoreTychusHERCImpactDuration[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusHERCImpactDuration_Init () {
    libCOOC_gt_CC_ScoreTychusHERCImpactDuration = TriggerCreate("libCOOC_gt_CC_ScoreTychusHERCImpactDuration_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusHERCImpactDuration, false);
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreTychusHERCImpactDuration, c_playerAny, "TychusHercGrappleLaunchCasterStunAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMarauderHeal
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusMarauderHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusMarauderHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] += (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, EventPlayerEffectUsed(), "VitalArray[" + IntToString(0) + "].ChangeFraction", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TychusMarauderHeal", FixedToInt(libCOOC_gv_cC_ScoreTychusMarauderHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusMarauderHeal_Init () {
    libCOOC_gt_CC_ScoreTychusMarauderHeal = TriggerCreate("libCOOC_gt_CC_ScoreTychusMarauderHeal_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusMarauderHeal, false);
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreTychusMarauderHeal, c_playerAny, "TychusMarauderHealingWardMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusGhostDominatedDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusGhostDominatedDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "TychusGhostDominate") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "TychusGhostDominateUpgraded") == true)))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusGhostDominatedDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusGhostDominatedDamage", FixedToInt(libCOOC_gv_cC_ScoreTychusGhostDominatedDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusGhostDominatedDmg_Init () {
    libCOOC_gt_CC_ScoreTychusGhostDominatedDmg = TriggerCreate("libCOOC_gt_CC_ScoreTychusGhostDominatedDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusGhostDominatedDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreTychusGhostDominatedDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusSpectrePulseDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusSpectrePulseDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusSpectrePulseDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusSpectrePulseDamage", FixedToInt(libCOOC_gv_cC_ScoreTychusSpectrePulseDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusSpectrePulseDmg_Init () {
    libCOOC_gt_CC_ScoreTychusSpectrePulseDmg = TriggerCreate("libCOOC_gt_CC_ScoreTychusSpectrePulseDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusSpectrePulseDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreTychusSpectrePulseDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusSpectreUltrasonicDamageLv1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMedicHeal
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusMedicHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOOC_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "TerranTychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusMedicHeal[EventUnitHealLaunchPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventUnitHealLaunchPlayer(), "TychusMedicHeal", FixedToInt(libCOOC_gv_cC_ScoreTychusMedicHeal[EventUnitHealLaunchPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusMedicHeal_Init () {
    libCOOC_gt_CC_ScoreTychusMedicHeal = TriggerCreate("libCOOC_gt_CC_ScoreTychusMedicHeal_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusMedicHeal, false);
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreTychusMedicHeal, null, c_unitVitalAny, "TychusMedicHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMedicHealAoE
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusMedicHealAoE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, EventPlayerEffectUsed(), "VitalArray[" + IntToString(0) + "].Change", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TychusMedicHeal", FixedToInt(libCOOC_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusMedicHealAoE_Init () {
    libCOOC_gt_CC_ScoreTychusMedicHealAoE = TriggerCreate("libCOOC_gt_CC_ScoreTychusMedicHealAoE_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusMedicHealAoE, false);
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreTychusMedicHealAoE, c_playerAny, "TychusMedicAoEHoTHeal");
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreTychusMedicHealAoE, c_playerAny, "TychusMedicAoESearchAlliance");
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreTychusMedicHealAoE, c_playerAny, "TychusMedivacHealModifyTargetLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMedicAbsorb
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusMedicAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventUnit())] += EventUnitDamageAbsorbed();
    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "TychusMedicHeal", FixedToInt(libCOOC_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventUnit())]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusMedicAbsorb_Init () {
    libCOOC_gt_CC_ScoreTychusMedicAbsorb = TriggerCreate("libCOOC_gt_CC_ScoreTychusMedicAbsorb_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusMedicAbsorb, false);
    TriggerAddEventUnitDamageAbsorbed(libCOOC_gt_CC_ScoreTychusMedicAbsorb, null, "TychusMedicDefensiveMatrix");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusOdinDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreTychusOdinDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "TychusOdin"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreTychusOdinDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusOdinDamage", FixedToInt(libCOOC_gv_cC_ScoreTychusOdinDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreTychusOdinDmg_Init () {
    libCOOC_gt_CC_ScoreTychusOdinDmg = TriggerCreate("libCOOC_gt_CC_ScoreTychusOdinDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreTychusOdinDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreTychusOdinDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZeratulDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreZeratulDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "ZeratulCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreZeratulDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZeratulDamage", FixedToInt(libCOOC_gv_cC_ScoreZeratulDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreZeratulDmg_Init () {
    libCOOC_gt_CC_ScoreZeratulDmg = TriggerCreate("libCOOC_gt_CC_ScoreZeratulDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreZeratulDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreZeratulDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZeratulShieldRestore
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreZeratulShieldRestore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreZeratulShieldRestore[EventUnitHealLaunchPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventUnitHealLaunchPlayer(), "ZeratulShieldRestore", FixedToInt(libCOOC_gv_cC_ScoreZeratulShieldRestore[EventUnitHealLaunchPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreZeratulShieldRestore_Init () {
    libCOOC_gt_CC_ScoreZeratulShieldRestore = TriggerCreate("libCOOC_gt_CC_ScoreZeratulShieldRestore_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreZeratulShieldRestore, false);
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreZeratulShieldRestore, null, c_unitVitalAny, "VoidSentryShieldRepair");
    TriggerAddEventUnitHealed(libCOOC_gt_CC_ScoreZeratulShieldRestore, null, c_unitVitalAny, "ShieldBatteryRechargeChanneled");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStetmannGaryDmg
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreStetmannGaryDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "GaryStetmann") || (UnitGetType(EventUnitDamageSourceUnit()) == "SuperGaryStetmann")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreStetmannGaryDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "StetmannGaryDamage", FixedToInt(libCOOC_gv_cC_ScoreStetmannGaryDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreStetmannGaryDmg_Init () {
    libCOOC_gt_CC_ScoreStetmannGaryDmg = TriggerCreate("libCOOC_gt_CC_ScoreStetmannGaryDmg_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreStetmannGaryDmg, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreStetmannGaryDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStetmannOverload
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreStetmannOverload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gv_cC_ScoreStetmannOverload[EventPlayer()] += 1;
    PlayerScoreValueSetFromInt(EventPlayer(), "StetmannUnitsOverloaded", libCOOC_gv_cC_ScoreStetmannOverload[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreStetmannOverload_Init () {
    libCOOC_gt_CC_ScoreStetmannOverload = TriggerCreate("libCOOC_gt_CC_ScoreStetmannOverload_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreStetmannOverload, false);
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreStetmannOverload, c_playerAny, "FASTOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreStetmannOverload, c_playerAny, "HUGSOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCOOC_gt_CC_ScoreStetmannOverload, c_playerAny, "JUICEOverloadStetmannAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreMengskDamage
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreMengskDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((PlayerCommander(EventUnitDamageSourcePlayer()) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengskImproved") || (UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengskFlamethrower") || (UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengskAA") || (UnitGetType(EventUnitDamageSourceUnit()) == "SCVMengsk"))) {
        libCOOC_gv_cC_ScoreMengskTrooperDamage[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
        PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "MengskTrooperDamage", FixedToInt(libCOOC_gv_cC_ScoreMengskTrooperDamage[EventUnitDamageSourcePlayer()]));
    }
    else if ((UnitGroupHasUnit(libCOMI_gv_cM_Mengsk_VeteranUnits, EventUnitDamageSourceUnit()) == true)) {
        libCOOC_gv_cC_ScoreMengskRoyalGuardDamage[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
        PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "MengskRoyalGuardDamage", FixedToInt(libCOOC_gv_cC_ScoreMengskRoyalGuardDamage[EventUnitDamageSourcePlayer()]));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreMengskDamage_Init () {
    libCOOC_gt_CC_ScoreMengskDamage = TriggerCreate("libCOOC_gt_CC_ScoreMengskDamage_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreMengskDamage, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreMengskDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDebugDisplay
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreDebugDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_scorePlayer;

    // Automatic Variable Declarations
    playergroup auto2583385A_g;
    playergroup auto63653B04_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2583385A_g = libCOOC_gf_HumanPlayers();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(auto2583385A_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        auto63653B04_g = libCOOC_gf_HumanPlayers();
        lv_scorePlayer = -1;
        while (true) {
            lv_scorePlayer = PlayerGroupNextPlayer(auto63653B04_g, lv_scorePlayer);
            if (lv_scorePlayer < 0) { break; }
            TextExpressionSetToken("Param/Expression/lib_COOC_8B8A68D1", "A", StringToText((libCOOC_gf_CC_CommanderScoreSelfStatistic(libCOOC_gf_ActiveCommanderForPlayer(lv_humanPlayer)))));
            TextExpressionSetToken("Param/Expression/lib_COOC_8B8A68D1", "B", IntToText(PlayerScoreValueGetAsInt(lv_scorePlayer, libCOOC_gf_CC_CommanderScoreSelfStatistic(libCOOC_gf_ActiveCommanderForPlayer(lv_humanPlayer)))));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_8B8A68D1"), true);
            TextExpressionSetToken("Param/Expression/lib_COOC_D0741390", "A", StringToText((libCOOC_gf_CC_CommanderScoreCoopStatistic(libCOOC_gf_ActiveCommanderForPlayer(lv_humanPlayer)))));
            TextExpressionSetToken("Param/Expression/lib_COOC_D0741390", "B", IntToText(PlayerScoreValueGetAsInt(lv_scorePlayer, libCOOC_gf_CC_CommanderScoreCoopStatistic(libCOOC_gf_ActiveCommanderForPlayer(lv_humanPlayer)))));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COOC_D0741390"), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreDebugDisplay_Init () {
    libCOOC_gt_CC_ScoreDebugDisplay = TriggerCreate("libCOOC_gt_CC_ScoreDebugDisplay_Func");
    TriggerAddEventChatMessage(libCOOC_gt_CC_ScoreDebugDisplay, c_playerAny, "scores", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreEnemiesKilled
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreEnemiesKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_NondefeatedPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromInt(libNtve_gf_KillingPlayer(), "UnitsStructuresKilled", (PlayerScoreValueGetAsInt(libNtve_gf_KillingPlayer(), "UnitsStructuresKilled")+1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreEnemiesKilled_Init () {
    libCOOC_gt_CC_ScoreEnemiesKilled = TriggerCreate("libCOOC_gt_CC_ScoreEnemiesKilled_Func");
    TriggerAddEventUnitDied(libCOOC_gt_CC_ScoreEnemiesKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDynDmgTaken
//--------------------------------------------------------------------------------------------------
bool libCOOC_gt_CC_ScoreDynDmgTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scoreIndex;
    fixed lv_newScore;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int autoE0A82FF9_ae;
    const int autoE0A82FF9_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE0A82FF9_ae = libCOOC_gv_cC_ScoreTrackedDmgTakenCount;
    lv_scoreIndex = 1;
    for ( ; ( (autoE0A82FF9_ai >= 0 && lv_scoreIndex <= autoE0A82FF9_ae) || (autoE0A82FF9_ai < 0 && lv_scoreIndex >= autoE0A82FF9_ae) ) ; lv_scoreIndex += autoE0A82FF9_ai ) {
        if ((UnitGroupHasUnit(DataTableGetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(lv_scoreIndex))), EventUnit()) == true) && (PlayerGroupHasPlayer(libCOOC_gf_NondefeatedPlayers(), EventUnitDamageSourcePlayer()) == true)) {
            lv_newScore = (DataTableGetFixed(true, ("CC_ScoreVal_" + IntToString(lv_scoreIndex) + "_" + IntToString(EventUnitDamageSourcePlayer()))) + EventUnitDamageAmount());
            DataTableSetFixed(true, ("CC_ScoreVal_" + IntToString(lv_scoreIndex) + "_" + IntToString(EventUnitDamageSourcePlayer())), lv_newScore);
            PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), (DataTableGetString(true, ("CC_ScoreType_" + IntToString(lv_scoreIndex)))), FixedToInt(lv_newScore));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOOC_gt_CC_ScoreDynDmgTaken_Init () {
    libCOOC_gt_CC_ScoreDynDmgTaken = TriggerCreate("libCOOC_gt_CC_ScoreDynDmgTaken_Func");
    TriggerEnable(libCOOC_gt_CC_ScoreDynDmgTaken, false);
    TriggerAddEventUnitDamaged(libCOOC_gt_CC_ScoreDynDmgTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

void libCOOC_InitTriggers () {
    libCOOC_gt_CC_DebugDefeatMultiplier_Init();
    libCOOC_gt_CC_DebugToggleTechSpam_Init();
    libCOOC_gt_CC_DebugToggleTechSuperSpam_Init();
    libCOOC_gt_CC_DebugUpdateTech_Init();
    libCOOC_gt_CC_AchievementVorazunTimeStop_Init();
    libCOOC_gt_CC_PrestigeUpgradeSupplement_Init();
    libCOOC_gt_CC_SharedUpgradesRecheck_Init();
    libCOOC_gt_CC_CustomStartupSelectLaunch_Init();
    libCOOC_gt_CC_DevStartupDevForceQuit_Init();
    libCOOC_gt_CC_DevStartupCommSelectExit_Init();
    libCOOC_gt_CC_ScoreArtanisAbsorb_Init();
    libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike_Init();
    libCOOC_gt_CC_ScoreArtanisBombardment_Init();
    libCOOC_gt_CC_ScoreVorazunBHManageGroup_Init();
    libCOOC_gt_CC_ScoreVorazunBHDmg_Init();
    libCOOC_gt_CC_ScoreVorazunCloakDmg_Init();
    libCOOC_gt_CC_ScoreKaraxSolarLance_Init();
    libCOOC_gt_CC_ScoreKaraxPurifierBeam_Init();
    libCOOC_gt_CC_ScoreKaraxChronoProduction_Init();
    libCOOC_gt_CC_ScoreRaynorMedicHeal_Init();
    libCOOC_gt_CC_ScoreRaynorHyperionDmg_Init();
    libCOOC_gt_CC_ScoreSwannSVHeal_Init();
    libCOOC_gt_CC_ScoreSwannDrillDmg_Init();
    libCOOC_gt_CC_ScoreKerriganResources_Init();
    libCOOC_gt_CC_ScoreKerriganDmg_Init();
    libCOOC_gt_CC_ScoreZagaraFrenzyDmg_Init();
    libCOOC_gt_CC_ScoreZagaraSuicideDmg_Init();
    libCOOC_gt_CC_ScoreZagaraBanelingBarrage_Init();
    libCOOC_gt_CC_ScoreAbathurHealing_Init();
    libCOOC_gt_CC_ScoreAbathurMonsterDmg_Init();
    libCOOC_gt_CC_ScoreAlarakDmg_Init();
    libCOOC_gt_CC_ScoreAlarakHeal_Init();
    libCOOC_gt_CC_ScoreAlarakSacrificeHeal_Init();
    libCOOC_gt_CC_ScoreNovaDmg_Init();
    libCOOC_gt_CC_ScoreNovaHeal_Init();
    libCOOC_gt_CC_ScoreNovaAbsorb_Init();
    libCOOC_gt_CC_ScoreStukovInfestedDmg_Init();
    libCOOC_gt_CC_ScoreStukovMonstrosityDmg_Init();
    libCOOC_gt_CC_ScoreFenixChampionDmg_Init();
    libCOOC_gt_CC_ScoreFenixSuitDmg_Init();
    libCOOC_gt_CC_ScoreDehakaDmg_Init();
    libCOOC_gt_CC_ScoreDehakaConsumeSupply_Init();
    libCOOC_gt_CC_ScoreHornerMagMineDmg_Init();
    libCOOC_gt_CC_ScoreHornerScrapPickup_Init();
    libCOOC_gt_CC_ScoreTychusGrenadeDmg_Init();
    libCOOC_gt_CC_ScoreTychusReaperBombDmg_Init();
    libCOOC_gt_CC_ScoreTychusWarhoundTurretDmg_Init();
    libCOOC_gt_CC_ScoreTychusFirebatOilDmg_Init();
    libCOOC_gt_CC_ScoreTychusHERCImpactDuration_Init();
    libCOOC_gt_CC_ScoreTychusMarauderHeal_Init();
    libCOOC_gt_CC_ScoreTychusGhostDominatedDmg_Init();
    libCOOC_gt_CC_ScoreTychusSpectrePulseDmg_Init();
    libCOOC_gt_CC_ScoreTychusMedicHeal_Init();
    libCOOC_gt_CC_ScoreTychusMedicHealAoE_Init();
    libCOOC_gt_CC_ScoreTychusMedicAbsorb_Init();
    libCOOC_gt_CC_ScoreTychusOdinDmg_Init();
    libCOOC_gt_CC_ScoreZeratulDmg_Init();
    libCOOC_gt_CC_ScoreZeratulShieldRestore_Init();
    libCOOC_gt_CC_ScoreStetmannGaryDmg_Init();
    libCOOC_gt_CC_ScoreStetmannOverload_Init();
    libCOOC_gt_CC_ScoreMengskDamage_Init();
    libCOOC_gt_CC_ScoreDebugDisplay_Init();
    libCOOC_gt_CC_ScoreEnemiesKilled_Init();
    libCOOC_gt_CC_ScoreDynDmgTaken_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCOOC_InitLib_completed = false;

void libCOOC_InitLib () {
    if (libCOOC_InitLib_completed) {
        return;
    }

    libCOOC_InitLib_completed = true;

    libCOOC_InitLibraries();
    libCOOC_InitVariables();
    libCOOC_InitTriggers();
}

include "LibCOUI"
include "LibCOMU"
include "LibCOMI"

