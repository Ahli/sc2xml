include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Core (COOP)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libCOOC_ge_CC_VoidArc_VoidArcNone = 0;
const int libCOOC_ge_CC_VoidArc_VoidArcAuirA = 1;
const int libCOOC_ge_CC_VoidArc_VoidArcKorhal = 2;
const int libCOOC_ge_CC_VoidArc_VoidArcShakuras = 3;
const int libCOOC_ge_CC_VoidArc_VoidArcPurifierA = 4;
const int libCOOC_ge_CC_VoidArc_VoidArcUlnar = 5;
const int libCOOC_ge_CC_VoidArc_VoidArcPurifierB = 6;
const int libCOOC_ge_CC_VoidArc_VoidArcTaldarim = 7;
const int libCOOC_ge_CC_VoidArc_VoidArcShadow = 8;
const int libCOOC_ge_CC_VoidArc_VoidArcAuirB = 9;
const int libCOOC_ge_CC_Event_CC_EventFirst = 0;
const int libCOOC_ge_CC_Event_CampaignArmyCheatStarts = 1;
const int libCOOC_ge_CC_Event_CampaignArmyCheatEnds = 2;
const int libCOOC_ge_CC_Event_CampaignChampionCheatStarts = 3;
const int libCOOC_ge_CC_Event_CampaignChampionCheatEnds = 4;
const int libCOOC_ge_CC_Event_CampaignDataReset = 5;
const int libCOOC_ge_CC_Event_CampaignMapTransition = 6;
const int libCOOC_ge_CC_Event_CampaignProgressCheatStart = 7;
const int libCOOC_ge_CC_Event_CampaignProgressCheatSave = 8;
const int libCOOC_ge_CC_Event_CampaignProgressCheatLoad = 9;
const int libCOOC_ge_CC_Event_CampaignProgressMapCompleted = 10;
const int libCOOC_ge_CC_Event_CampaignProgressCheatCancel = 11;
const int libCOOC_ge_CC_Event_CampaignArchivesSynced = 12;
const int libCOOC_ge_CC_Event_UIArchivesQuit = 13;
const int libCOOC_ge_CC_Event_UIArchivesPlayMission = 14;
const int libCOOC_ge_CC_Event_UITravelQuit = 15;
const int libCOOC_ge_CC_Event_UITravelLaunch = 16;
const int libCOOC_ge_CC_Event_UIMissionQuit = 17;
const int libCOOC_ge_CC_Event_UIMissionLaunch = 18;
const int libCOOC_ge_CC_Event_UIChampionQuit = 19;
const int libCOOC_ge_CC_Event_UIArmyQuit = 20;
const int libCOOC_ge_CC_Event_UIBottomBarRoomChange = 21;
const int libCOOC_ge_CC_Event_StoryMissionLaunch = 22;
const int libCOOC_ge_CC_Event_StoryTravelDeparture = 23;
const int libCOOC_ge_CC_Event_StoryTravelArrival = 24;
const int libCOOC_ge_CC_Event_StoryInstanceStart = 25;
const int libCOOC_ge_CC_Event_StoryStoryCheatPlay = 26;
const int libCOOC_ge_CC_Event_CC_EventLast = 27;
const int libCOOC_ge_MissionStatus_Locked = 0;
const int libCOOC_ge_MissionStatus_Available = 1;
const int libCOOC_ge_MissionStatus_Completed = 2;
const int libCOOC_ge_MissionCountOptions_Locked = 0;
const int libCOOC_ge_MissionCountOptions_Available = 1;
const int libCOOC_ge_MissionCountOptions_Completed = 2;
const int libCOOC_ge_MissionCountOptions_All = 3;
const int libCOOC_ge_MissionObjectiveState_Undiscovered = 0;
const int libCOOC_ge_MissionObjectiveState_Available = 1;
const int libCOOC_ge_MissionObjectiveState_Completed = 2;
const int libCOOC_ge_MissionObjectiveState_Failed = 3;
const int libCOOC_ge_CC_CommanderVOLines_None = 0;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOResourcesSent = 1;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOResourcesRequested = 2;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOMineralsSent = 3;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOMineralsRequested = 4;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOVespeneSent = 5;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOVespeneRequested = 6;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOThankyou = 7;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsProtoss = 8;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsTerran = 9;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsZerg = 10;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsCloaked = 11;
const int libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOArmyLost = 12;
const int libCOOC_ge_ArmyUpgradeTypeState_Locked = 0;
const int libCOOC_ge_ArmyUpgradeTypeState_Unlocked = 1;
const int libCOOC_ge_ArmyUpgradeCostType__None = 0;
const int libCOOC_ge_ArmyUpgradeCostType_Red = 1;
const int libCOOC_ge_ArmyUpgradeCostType_Green = 2;
const int libCOOC_ge_ArmyUpgradeCostType_Yellow = 3;
const int libCOOC_ge_ArmyUpgradeCostType_Wild = 4;
const int libCOOC_ge_CC_PerkState_Locked = 0;
const int libCOOC_ge_CC_PerkState_Unlocked = 1;
const int libCOOC_ge_CC_PerkState_Active = 2;
const int libCOOC_ge_CC_PerkState_Hidden = 3;
const int libCOOC_ge_MissionCondition_Sucessful = 0;
const int libCOOC_ge_MissionCondition_Simulation = 1;
const int libCOOC_ge_StoryDataType_StoryDataTypeNone = 0;
const int libCOOC_ge_StoryDataType_StoryDataTypeArmyCategory = 1;
const int libCOOC_ge_StoryDataType_StoryDataTypeArmyUnit = 2;
const int libCOOC_ge_StoryDataType_StoryDataTypeArmyUpgrade = 3;
const int libCOOC_ge_StoryDataType_StoryDataTypeHeroAbilityCategory = 4;
const int libCOOC_ge_StoryDataType_StoryDataTypeHeroAbility = 5;
const int libCOOC_ge_StoryDataType_StoryDataTypeHeroStat = 6;
const int libCOOC_ge_VolumeChannelModeCampaign_Cinematic = 0;
const int libCOOC_ge_VolumeChannelModeCampaign_Speech = 1;
const int libCOOC_ge_VolumeChannelModeCampaign_Game = 2;
const int libCOOC_ge_VolumeChannelModeCampaign_Victory = 3;
const int libCOOC_ge_VolumeChannelModeCampaign_Speech2 = 4;
const int libCOOC_ge_VolumeChannelModeCampaign_Speech3 = 5;
const int libCOOC_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects = 6;
const int libCOOC_ge_VolumeChannelModeCampaign_LowHealthBegin = 7;
const int libCOOC_ge_VolumeChannelModeCampaign_LowHealthEnd = 8;
const int libCOOC_ge_VolumeChannelModeCampaign_Game2 = 9;
const int libCOOC_ge_VolumeChannelModeCampaign_Game3 = 10;
const int libCOOC_ge_VolumeChannelModeCampaign_MissionLaunchUI = 11;
const int libCOOC_ge_VolumeChannelModeCampaign_EvolutionUI = 12;

// Constants
const int libCOOC_gv_cCC_MAXMISSIONSCORETYPES = 3;
const int libCOOC_gv_pSC_MissionObjectiveCount = 5;
const int libCOOC_gv_cCC_OBJECTIVESMAX = 20;
const int libCOOC_gv_cCC_MASTERY_CATEGORIES = 3;
const int libCOOC_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL = 30;
const int libCOOC_gv_cCC_MASTERY_MAX_LEVEL = 120;
const int libCOOC_gv_cCC_MASTERIES_PER_COMMANDER = 6;
const int libCOOC_gv_cCC_PLAYERPRESTIGEMAXRANK = 3;
const int libCOOC_gv_cCC_PLAYERLEVELMAX = 15;
const int libCOOC_gv_cCC_COMMANDERCOUNT = 18;
const string libCOOC_gv_pCC_ArmyCategoryStateKey = "CS_ArmyCatState_";
const string libCOOC_gv_pCC_ArmyUpgradeStateKey = "CS_ArmyUpgradeState_";
const string libCOOC_gv_pCC_ArmyUnitStateKey = "CS_ArmyUnitState_";
const string libCOOC_gv_cCC_PerkStateKey = "CC_PerkState_";
const int libCOOC_gv_cCC_BankVersion = 8;
const int libCOOC_gv_pCC_StatVersion = 1;
const int libCOOC_gv_cCC_DISREGARDPLAYER = 1;
const int libCOOC_gv_cCC_PLAYERNYI = 1;
const int libCOOC_gv_cCC_MAXPLAYERS = 15;
const int libCOOC_gv_cCC_MAXCOMMANDERS_PVE = 2;
const string libCOOC_gv_cC_GameUIDataTableConnector = "&%&";

// Variable Declarations
int libCOOC_gv_cCC_MAXMISSIONSCORE;
string[libCOOC_gv_cCC_MAXMISSIONSCORETYPES + 1] libCOOC_gv_cC_MissionScoreTypes;
int[libCOOC_gv_cCC_MAXMISSIONSCORETYPES + 1][libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_MissionScoreValues;
fixed libCOOC_gv_cC_DebugDefeatMultiplierOverride;
trigger libCOOC_gv_cC_TechLimitsCallback;
bool libCOOC_gv_cC_DebugTechSpam;
bool libCOOC_gv_cC_DebugPlaytestMode;
bool libCOOC_gv_cC_DebugTechSuperSpam;
int libCOOC_gv_cC_AchievementPosition;
int libCOOC_gv_cC_AchievementsDisplayed;
trigger[51] libCOOC_gv_cC_EventCallback;
bool libCOOC_gv_cC_EventIsRunning;
string[51][3] libCOOC_gv_cC_EventParameter;
int libCOOC_gv_pSX_MissionObjRewardsEarnedCurrent;
string[libCOOC_gv_cCC_OBJECTIVESMAX + 1] libCOOC_gv_cC_ObjectivesCreated;
int[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cCX_PlayerMasteryLevel;
int[libCOOC_gv_cCC_MAXPLAYERS + 1][libCOOC_gv_cCC_COMMANDERCOUNT + 1][libCOOC_gv_cCC_MASTERIES_PER_COMMANDER + 1] libCOOC_gv_cCX_PlayerMasteryPointsSpent;
bool[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_PlayerMasteryEnabled;
int[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cCX_PlayerPrestigeIndex;
int[libCOOC_gv_cCC_MAXPLAYERS + 1][libCOOC_gv_cCC_COMMANDERCOUNT + 1] libCOOC_gv_cC_PlayerLevel;
int[libCOOC_gv_cCC_MAXPLAYERS + 1][libCOOC_gv_cCC_COMMANDERCOUNT + 1] libCOOC_gv_cCX_PlayerExperience;
string[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cCX_PlayerCommander;
fixed libCOOC_gv_cC_PlayerExperienceEffortPct;
bool libCOOC_gv_cC_ApplyingCampaignTech;
bool libCOOC_gv_cC_CampaignTechApplied;
trigger libCOOC_gv_cC_StartupMissionTrigger;
string libCOOC_gv_cC_CurrentMap;
int[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cCX_PlayerBankVersion;
bool libCOOC_gv_cC_InContestMap;
string libCOOC_gv_cC_ContestDefaultCommander1;
string libCOOC_gv_cC_ContestDefaultCommander2;
bool libCOOC_gv_cC_DevStart_Forced;
string libCOOC_gv_cC_CoopBankName;
bank[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_CoopBank;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreRaynorHeal;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreRaynorHyperionDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreSwannHeal;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreSwannDrillDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreArtanisAbsorb;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreArtanisAbsorbLast;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreArtanisKaraxSoADmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreVorazunBHDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreVorazunCloakDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreZagaraFrenzyDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreZagaraFrenzyDmgLast;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreZagaraSuicideDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreKerriganDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreAbathurHeal;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreAbathurMonsterDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreAlarakDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreAlarakHeal;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreNovaDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreNovaHeal;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreStukovInfestedDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreStukovMonstrosityDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreFenixChampionDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreFenixSuitDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreDehakaDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreDehakaConsumeSupply;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreHornerMagMineDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreHornerScrapResources;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusGrenadeDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusReaperBombDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusWarhoundTurretDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusFirebatOilDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusHERCImpactDuration;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusMarauderHeal;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusGhostDominatedDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusSpectrePulseDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusMedicHeal;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreTychusOdinDmg;
unitgroup libCOOC_gv_cC_ScoreVorazunBHGroup;
int libCOOC_gv_cC_ScoreTrackedDmgTakenCount;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreZeratulDmg;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreZeratulShieldRestore;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreStetmannGaryDmg;
int[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreStetmannOverload;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreMengskTrooperDamage;
fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] libCOOC_gv_cC_ScoreMengskRoyalGuardDamage;
int libCOOC_gv_pC_StatEventLastCampaign;
bool libCOOC_gv_cC_TimeAIPaused;
bool libCOOC_gv_cC_TimeMissionPaused;
int libCOOC_gv_cC_WorldCoverDlg;
int libCOOC_gv__FadeDialog;
int libCOOC_gv__FadeImage;
bool libCOOC_gv_pCX_UpgradesTaught;
region libCOOC_gv_cC_NoSpawnRegion;
playergroup libCOOC_gv_cC_HumanPlayerGroup;
playergroup libCOOC_gv_cC_NondefeatedPlayerGroup;
bool libCOOC_gv_cC_VolumeChannelModeInSpeech;
bool libCOOC_gv_cC_VolumeChannelModeInLowHP;

// Function Declarations
void libCOOC_gf_SetMissionScore (string lp_scoreType, int lp_score, int lp_player);
string libCOOC_gf_CC_MissionScoreType (int lp_index, int lp_player);
int libCOOC_gf_CC_MissionScoreValue (int lp_index, int lp_player);
string libCOOC_gf_CC_AIPersonalityRace (string lp_personality);
bool libCOOC_gf_CoopDebugModeIsOn (string lp_mode, int lp_player);
void libCOOC_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger);
void libCOOC_gf_PurchaseStorymodeTech ();
bool libCOOC_gf_CC_PlaytestModeEnabled ();
void libCOOC_gf_CC_AchievementToggleTimeStop (bool lp_enableDisable);
void libCOOC_gf_CC_AchievementToggleSuperChrono (bool lp_enableDisable);
int libCOOC_gf_CC_DifficultyIndex (int lp_difficulty);
int libCOOC_gf_CC_DifficultyFromIndex (int lp_index);
void libCOOC_gf_DispatchCampaignEvent (int lp_event, string lp_param1, string lp_param2, bool lp_waitOption);
void libCOOC_gf_RegisterCampaignEvent (int lp_event, trigger lp_callback);
string libCOOC_gf_CampaignEventParameter (int lp_event, int lp_index);
string libCOOC_gf_CC_CurrentMap ();
bool libCOOC_gf_CC_CampaignMapTypeCheck (string lp_map, int lp_mapType);
string libCOOC_gf_CC_MapAchievementTerm (string lp_map, int lp_difficulty);
string libCOOC_gf_CC_CampaignMapFile (string lp_map);
text libCOOC_gf_CC_CampaignMapName (string lp_map, int lp_player);
string libCOOC_gf_CC_MapScoreStatistic (string lp_map);
string libCOOC_gf_CC_MapUserDataInstance (string lp_map);
void libCOOC_gf_SetCurrentMap (string lp_map);
void libCOOC_gf_CC_ObjectiveRegister (string lp_objective);
void libCOOC_gf_ZS_SetObjectiveProgressData (string lp_objective, int lp_progress);
text libCOOC_gf_MissionObjectiveDescription (string lp_objective);
bool libCOOC_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state);
bool libCOOC_gf_MissionObjectiveIsPrimary (string lp_objective);
text libCOOC_gf_MissionObjectiveName (string lp_objective);
int libCOOC_gf_MissionObjectiveItemCount (string lp_objective);
int libCOOC_gf_MissionObjectiveProgress (string lp_objective);
int libCOOC_gf_MissionRewardTotalEarned2 (string lp_type);
int libCOOC_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type);
int libCOOC_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type);
int libCOOC_gf_MissionRewardTotalEarned3 (string lp_mission, string lp_type);
int libCOOC_gf_MissionObjectiveRewards (string lp_objective, string lp_type);
int libCOOC_gf_MissionObjectiveRewards2 (string lp_objective, string lp_type);
text libCOOC_gf_CS_CampaignObjectiveBonusText (string lp_objective);
int libCOOC_gf_CS_GetObjectiveForData (string lp_objectiveData);
string libCOOC_gf_CS_ObjectiveUserDataInstance (string lp_objective);
int libCOOC_gf_CS_MissionObjectivePreviousProgress (string lp_objective);
int libCOOC_gf_CS_MissionObjectiveArchiveProgress (string lp_objective);
int libCOOC_gf_CS_GetObjectiveTypeInteger (string lp_objective);
bool libCOOC_gf_CS_GetObjectiveTypeBoolean (string lp_objective);
string libCOOC_gf_CS_ObjectiveTableString (string lp_objective);
bool libCOOC_gf_CS_ObjectiveCountsDown (string lp_objective);
int libCOOC_gf_CC_PlayerMasteryLevel (int lp_player);
int libCOOC_gf_CC_PlayerMasteryCategory (string lp_masteryUpgrade);
int libCOOC_gf_CC_PlayerMasteryCategoryPointsAtLevel (int lp_player, int lp_categoryIndex, int lp_level);
int libCOOC_gf_CC_PlayerMasteryCategoryPointsSpent (int lp_player, int lp_categoryIndex);
int libCOOC_gf_CC_PlayerMasteryCategoryPointsAvailable (int lp_player, int lp_categoryIndex);
int libCOOC_gf_CC_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade);
string libCOOC_gf_CC_PlayerMasteryCommander (string lp_masteryUpgrade);
string libCOOC_gf_CC_PlayerMasteryUpgradeData (string lp_masteryUpgrade);
string libCOOC_gf_CC_PlayerMasteryTalent (string lp_masteryUpgrade);
int libCOOC_gf_CC_PlayerMasteryInternalIndex (string lp_masteryUpgrade);
text libCOOC_gf_CC_PlayerMasteryName (string lp_masteryUpgrade);
text libCOOC_gf_CC_PlayerMasteryTooltip (string lp_masteryUpgrade);
text libCOOC_gf_CC_PlayerMasteryValueFormat (string lp_masteryUpgrade);
fixed libCOOC_gf_CC_PlayerMasteryValueIncrement (string lp_masteryUpgrade, int lp_index);
bool libCOOC_gf_CC_PlayerMasteryEnabled (int lp_player);
void libCOOC_gf_CC_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level);
void libCOOC_gf_CC_PlayerMasteryLevelSet (int lp_player, int lp_level);
void libCOOC_gf_CC_PlayerMasteryEnabledSet (int lp_player, bool lp_enabled);
void libCOOC_gf_CC_ApplyMasteryTech (int lp_player);
void libCOOC_gf_CC_SaveMasteryToBank (int lp_player, bank lp_bank, string lp_section);
void libCOOC_gf_CC_LoadMasteryFromBank (int lp_player, bank lp_bank, string lp_section);
string libCOOC_gf_CC_CommanderPrestigeIndexFace (string lp_commander, int lp_index);
int libCOOC_gf_CC_PlayerActivePrestigeIndex (int lp_player);
string libCOOC_gf_CC_PlayerActivePrestigeInstance (int lp_player);
string libCOOC_gf_CC_PrestigeCommanderBankKey (string lp_commander, int lp_player);
string libCOOC_gf_CC_PrestigeCommanderTableKey (string lp_commander, int lp_player);
bool libCOOC_gf_CC_PrestigeSuppressed (int lp_player, string lp_suppressionType);
void libCOOC_gf_CC_SetPlayerPrestigeIndex (int lp_player, int lp_index);
void libCOOC_gf_CC_ApplyUpgradeSupplemental (int lp_player, string lp_upgradeSupplemental);
void libCOOC_gf_CC_PlayerPrestigeEnable (int lp_player, string lp_prestige);
void libCOOC_gf_CC_ApplyPrestigeTech (int lp_player);
void libCOOC_gf_CC_SaveChampionToBank3 (int lp_player, bank lp_bank, string lp_section);
void libCOOC_gf_CC_LoadChampionFromBank3 (int lp_player, bank lp_bank, string lp_section);
string libCOOC_gf_ActiveCommanderForPlayer (int lp_player);
int libCOOC_gf_CC_CommanderLevel (int lp_player, string lp_commander);
string libCOOC_gf_CC_PlayerLevelCommander (string lp_playerLevel);
int libCOOC_gf_CC_PlayerLevelValue (string lp_playerLevel);
int libCOOC_gf_CC_PlayerExperience (int lp_player, string lp_commander);
void libCOOC_gf_SetMissionEffort (fixed lp_percentEffort);
fixed libCOOC_gf_CC_PlayerExperienceResultModifier (int lp_result);
fixed libCOOC_gf_CC_PlayerExperienceInLevelPct (int lp_player, string lp_commander);
int libCOOC_gf_CC_PlayerExperienceToNextLevel (int lp_player, string lp_commander);
int libCOOC_gf_CC_PlayerLevelExperienceNeededDelta (int lp_level);
int libCOOC_gf_CC_PlayerLevelExperienceNeededTotal (int lp_level);
int libCOOC_gf_CC_PlayerLevelFromExperience (int lp_experience);
bool libCOOC_gf_CC_PlayerAllyGivesAbility (int lp_player);
int libCOOC_gf_CC_PlayerAlly (int lp_player);
int libCOOC_gf_CC_PlayerAllyNew (int lp_player);
int libCOOC_gf_CC_MissionExperienceReward ();
fixed libCOOC_gf_CC_MissionExperienceDifficultyBonus (int lp_difficulty);
string libCOOC_gf_CC_CommanderUserInstance (string lp_commander);
string libCOOC_gf_CC_CommanderData (string lp_commander);
string libCOOC_gf_CC_CommanderRace (string lp_commander);
string libCOOC_gf_CC_CommanderSpawnRace (string lp_commander);
int libCOOC_gf_CC_CommanderInternalIndex (string lp_commander);
bool libCOOC_gf_CC_CommanderShowInUI (string lp_commander);
string libCOOC_gf_CC_CommanderConversationLink (string lp_characterInstance);
string libCOOC_gf_CC_CommanderPortraitModel (string lp_commander);
string libCOOC_gf_CC_CommanderPortraitActor (string lp_commander);
string libCOOC_gf_CC_CommanderCustomImage (string lp_commander);
text libCOOC_gf_CC_CommanderName (string lp_commander);
int libCOOC_gf_CC_CommanderGender (string lp_commander);
text libCOOC_gf_CC_CommanderDescription (string lp_commander);
string libCOOC_gf_CC_CommanderDefaultVoicePack (string lp_commander);
text libCOOC_gf_CC_CommanderInfoDetails (string lp_commander, int lp_detailIndex);
string libCOOC_gf_CC_CommanderSelectCutscene (string lp_commander);
string libCOOC_gf_CC_CommanderConvoTag (string lp_commander);
string libCOOC_gf_CC_CommanderScoreCoopStatistic (string lp_commander);
string libCOOC_gf_CC_CommanderScoreSelfStatistic (string lp_commander);
int libCOOC_gf_CC_CommanderUserFieldInt (string lp_commander, string lp_userType, string lp_userInstance, string lp_userField);
string libCOOC_gf_CC_CommanderHeroUnitType (string lp_commander);
string libCOOC_gf_CC_CommanderHeroStructureType (string lp_commander);
abilcmd libCOOC_gf_CC_CommanderHeroReviveCommand (string lp_commander);
string libCOOC_gf_CC_CommanderHeroReviveUnitType (string lp_commander);
string libCOOC_gf_CC_CommanderHeroReviveLink (string lp_commander);
string libCOOC_gf_CC_CommanderHeroFirstReviveBehavior (string lp_commander);
string libCOOC_gf_CC_CommanderHeroNormalReviveBehavior (string lp_commander);
string libCOOC_gf_CC_CommanderHeroReviverExtraBehavior (string lp_commander);
bool libCOOC_gf_CC_CommanderInGame (string lp_commander);
string libCOOC_gf_CC_CommanderGlobalCastUnitType (string lp_commander);
soundlink libCOOC_gf_CC_CommanderVOLine (string lp_commander, int lp_line);
text libCOOC_gf_CC_CommanderGeneralTipTitle (string lp_tipID);
text libCOOC_gf_CC_CommanderGeneralTipDetails (string lp_tipID);
string libCOOC_gf_CC_CommanderGeneralTipIcon (string lp_tipID);
int libCOOC_gf_CC_CommanderPlayer (string lp_commander);
int libCOOC_gf_CC_PlayerOfCommanderInGroupFirst (string lp_commander, playergroup lp_playerGroup);
playergroup libCOOC_gf_CC_PlayersOfCommander (string lp_commander);
string libCOOC_gf_CC_CommanderSkin (string lp_commander);
void libCOOC_gf_CC_PlayerAwardMissionXP (int lp_result, int lp_player);
void libCOOC_gf_CC_PlayerSetXPScores (int lp_result, int lp_player);
void libCOOC_gf_CC_PlayerCommanderSet (int lp_player, string lp_commander);
void libCOOC_gf_CC_UpdatePlayerLevel (int lp_player);
void libCOOC_gf_CC_PlayerExperienceSet (int lp_player, int lp_experience, string lp_commander);
void libCOOC_gf_CC_PlayerLevelSet (int lp_player, int lp_level, string lp_commander);
void libCOOC_gf_CC_PlayerExperienceAdd (int lp_player, int lp_experience);
void libCOOC_gf_CC_PlayerExperienceSetToLevel (int lp_player, int lp_level, string lp_commander);
void libCOOC_gf_CC_LoadCommandersFromBank (int lp_player, bank lp_bank, string lp_section);
void libCOOC_gf_CC_SaveCommandersToBank (int lp_player, bank lp_bank, string lp_section);
void libCOOC_gf_CC_ResetCurrency (int lp_player);
void libCOOC_gf_CC_ApplyCommanderTech (int lp_player);
void libCOOC_gf_CC_ApplyCommanderTechZeratul (int lp_player);
void libCOOC_gf_CC_UpdateProtossStates (int lp_player);
void libCOOC_gf_CC_UpdateTerranStates (int lp_player);
void libCOOC_gf_CC_ApplyRaceTechTerran (int lp_player);
void libCOOC_gf_CC_ApplyRaceTechZerg (int lp_player);
void libCOOC_gf_CC_ApplyRaceTechProtoss (int lp_player);
void libCOOC_gf_CC_ApplyRaceTechInfestedTerran (int lp_player);
int libCOOC_gf_CC_RaceIndex (string lp_race);
int libCOOC_gf_CC_ZergHeroBonusLife (int lp_player, int lp_startLevel, int lp_endLevel);
int libCOOC_gf_CC_ZergHeroBonusEnergy (int lp_player, int lp_startLevel, int lp_endLevel);
int libCOOC_gf_CC_ZergHeroBonusArmor (int lp_player, int lp_startLevel, int lp_endLevel);
int libCOOC_gf_CC_ZergHeroBonusDamage (int lp_player, int lp_startLevel, int lp_endLevel);
void libCOOC_gf_CC_KerriganApplyModelUpgrades (int lp_player);
void libCOOC_gf_CC_ZergHeroApplyStatBonuses (int lp_player, int lp_level);
string libCOOC_gf_CC_ChampResAbility (string lp_champion);
void libCOOC_gf_CC_ArmyCategoryStateSet (string lp_armyCategory, int lp_state, int lp_player, string lp_commander);
void libCOOC_gf_CC_UpdateArmyCategoryStates (int lp_player);
string libCOOC_gf_CC_TechUnitOfArmyCategory (string lp_armyCategory);
string libCOOC_gf_CC_ArmyCategoryOfTechUnit (string lp_techUnit);
int libCOOC_gf_CC_ArmyCategoryRequiredLevel (string lp_armyCategory, string lp_commander);
text libCOOC_gf_CC_ArmyCategoryName (string lp_armyCategory);
text libCOOC_gf_CC_ArmyCategoryName2 (string lp_armyCategory);
text libCOOC_gf_CC_ArmyCategoryUnitDescription (string lp_armyCategory);
text libCOOC_gf_CC_ArmyCategoryDescription (string lp_armyCategory);
string libCOOC_gf_CC_ArmyCategoryIcon (string lp_armyCategory);
string libCOOC_gf_CC_ArmyCategoryEvolutionIcon (string lp_armyCategory);
string libCOOC_gf_CC_ArmyCategoryUnitType (string lp_armyCategory);
text libCOOC_gf_StoryArmyUnitTooltip2 (string lp_armyCategory);
bool libCOOC_gf_CC_ArmyCategoryCommanderValid (string lp_armyCategory, string lp_commander);
int libCOOC_gf_CC_ArmyCategoryState (string lp_armyCategory, int lp_player, string lp_commander);
string libCOOC_gf_CC_ArmyCategoryPurchasedUnit (string lp_armyCategory, int lp_player);
bool libCOOC_gf_CC_ArmyCategoryCanUpgrade (string lp_armyCategory, int lp_player);
bool libCOOC_gf_ArmyCategoryStateCheck (string lp_armyCategory, int lp_state, string lp_commander, int lp_player);
bool libCOOC_gf_CC_ArmyCategoryUsedInUI (string lp_armyCategory);
int libCOOC_gf_CC_ArmyCategoryUIOrder (string lp_armyCategory, string lp_commander);
bool libCOOC_gf_CC_ArmyCategoryToastShown (string lp_armyCategory);
bool libCOOC_gf_CC_ArmyCategoryUnlocksExternal (string lp_armyCategory);
string libCOOC_gf_CC_ArmyCategoryStateKey (string lp_category, string lp_commander, int lp_player);
bool libCOOC_gf_CC_ArmyHasUnusedTech ();
void libCOOC_gf_CC_UpdateArmyUpgradeStates (int lp_player);
int libCOOC_gf_CC_ArmyUpgradeState (string lp_upgrade, string lp_commander, int lp_player);
bool libCOOC_gf_CC_ArmyUpgradeStateCheck (string lp_upgrade, int lp_state, string lp_commander, int lp_player);
int libCOOC_gf_CC_ArmyUpgradeRequiredLevel (string lp_upgrade, string lp_commander);
void libCOOC_gf_CC_ArmyUpgradeStateSet (string lp_armyUpgrade, int lp_state, string lp_commander, int lp_player);
text libCOOC_gf_CC_ArmyUpgradeName (string lp_armyUpgrade);
text libCOOC_gf_CC_ArmyUpgradeDescription (string lp_armyUpgrade);
text libCOOC_gf_CC_ArmyUpgradeDescription2 (string lp_armyUpgrade);
string libCOOC_gf_CC_ArmyUpgradeIcon (string lp_armyUpgrade);
string libCOOC_gf_CC_ArmyUpgradeMovie (string lp_armyUpgrade);
string libCOOC_gf_CC_ArmyUpgradeCategory (string lp_armyUpgrade);
int libCOOC_gf_CC_ArmyUpgradeCost (string lp_armyUpgrade);
text libCOOC_gf_CC_ArmyUpgradeTooltip (string lp_armyUpgrade);
text libCOOC_gf_CC_ArmyUpgradeTooltip2 (string lp_armyUpgrade);
string libCOOC_gf_CC_ArmyUpgradeUserData (string lp_armyUpgrade);
string libCOOC_gf_CC_ArmyUpgradeStateKey (string lp_upgrade, string lp_commander, int lp_player);
string libCOOC_gf_CC_StoryArmyUnitUnitType (string lp_armyUnit);
string libCOOC_gf_CC_ArmyUnitOfTechUnit (string lp_armyUnit);
string libCOOC_gf_CC_TechUnitOfArmyUnit (string lp_armyUnit);
string libCOOC_gf_StoryArmyUnitInCategory (string lp_category, int lp_index);
text libCOOC_gf_CC_ArmyUnitDescription (string lp_armyUnit);
text libCOOC_gf_StoryArmyUnitTooltip (string lp_armyUnit);
string libCOOC_gf_CC_ArmyUnitIcon (string lp_armyCategory);
bool libCOOC_gf_CC_ArmyUnitStartsLocked (string lp_armyUnit);
int libCOOC_gf_CC_ArmyUnitRequiredLevel (string lp_armyUnit, string lp_commander);
string libCOOC_gf_CC_ArmyCategoryOfArmyUnit (string lp_armyUnit);
string libCOOC_gf_CC_ArmyUnitSkin (string lp_armyCategory);
int libCOOC_gf_CC_StoryArmyUnitState (string lp_armyUnit, string lp_commander, int lp_player);
bool libCOOC_gf_CC_StoryArmyUnitState2 (string lp_armyUnit);
string libCOOC_gf_CC_ArmyUnitStateKey (string lp_armyUnit, string lp_commander, int lp_player);
string libCOOC_gf_CC_ArmyUnitEnableButton (string lp_armyUnit);
void libCOOC_gf_CC_SetArmyUnitState (string lp_armyUnit, int lp_state, string lp_commander, int lp_player);
void libCOOC_gf_CC_ArmyUnitSetNew (string lp_armyUnit, bool lp_new);
void libCOOC_gf_CC_UpdateArmyUnitStates (int lp_player);
void libCOOC_gf_CC_ApplyArmyTech (int lp_player);
void libCOOC_gf_CC_ResetArmyTech (int lp_player);
void libCOOC_gf_CC_PerkStateSet (string lp_perk, int lp_perkState, string lp_commander, int lp_player);
string libCOOC_gf_CC_PerkStateKey (string lp_campaignPerk, string lp_commander, int lp_player);
bool libCOOC_gf_CC_PerkStateCheck (string lp_campaignPerk, int lp_perkState, string lp_commander, int lp_player);
int libCOOC_gf_CC_PerkState (string lp_upgrade, string lp_commander, int lp_player);
void libCOOC_gf_EnableDisableCampaignPerk (bool lp_enableDisable, string lp_perk, int lp_player);
void libCOOC_gf_EnableDisableActivePerks (bool lp_enableDisable, int lp_player);
fixed libCOOC_gf_CostOfAbility (string lp_ability, string lp_costType);
string libCOOC_gf_CC_PerkIcon (string lp_campaignPerk);
string libCOOC_gf_CC_PerkMovie (string lp_campaignPerk);
text libCOOC_gf_CC_PerkTooltip (string lp_campaignPerk);
text libCOOC_gf_CC_PerkDescription (string lp_campaignPerk);
text libCOOC_gf_CC_PerkName (string lp_power);
int libCOOC_gf_CC_PerkUIOrder (string lp_campaignPerk);
int libCOOC_gf_CC_PerkCost (string lp_campaignPerk);
string libCOOC_gf_CC_PerkLevel (string lp_campaignPerk);
void libCOOC_gf_CC_SaveChampionToBank2 (int lp_player, bank lp_bank, string lp_section);
void libCOOC_gf_CC_LoadChampionFromBank2 (int lp_player, bank lp_bank, string lp_section);
void libCOOC_gf_CC_UpdatePerkStates (int lp_player);
void libCOOC_gf_CC_ApplyPerkTech (int lp_player);
void libCOOC_gf_CC_ResetPerkTech (int lp_player);
void libCOOC_gf_CC_SharedUpgradesEnable ();
void libCOOC_gf_CC_SharedUpgradesCheckAndApply (string lp_checkUpgrade);
void libCOOC_gf_CC_PlayerResponseEnable (int lp_player, string lp_response, bool lp_enforceMinLvl);
void libCOOC_gf_CC_ApplyTech (int lp_player);
void libCOOC_gf_CC_ApplyTechPostPrestige (int lp_player);
void libCOOC_gf_CC_UpdateTechStates (int lp_player);
void libCOOC_gf_CC_ResetTech (int lp_player);
void libCOOC_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player);
bool libCOOC_gf_CampaignTechUnitIsEnabled (string lp_techUnit, int lp_player);
string libCOOC_gf_CC_CampaignTechUnitType (string lp_techUnit);
void libCOOC_gf_CC_UpdateWeaponArmorUpgrades (int lp_player);
bool libCOOC_gf_CC_AirUnitsEnabled (int lp_player);
void libCOOC_gf_CC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player);
void libCOOC_gf_EnableArcadeContestMode ();
bool libCOOC_gf_GameIsContestLocalTest ();
void libCOOC_gf_SetDefaultCommandersForContestLocalTest (string lp_player1Commnader, string lp_player2Commnader);
void libCOOC_gf_LoadAlliedCommandersData (string lp_map, trigger lp_startTrigger);
void libCOOC_gf_CC_LoadDefaultCommanderForContestLocalTest ();
void libCOOC_gf_CC_CampaignPreload ();
void libCOOC_gf_CC_SaveAllTransitionData (bool lp_resultFromDefeat, int lp_player);
void libCOOC_gf_CC_LoadAllTransitionData (int lp_player);
void libCOOC_gf_CC_LoadBNetChoices (int lp_player);
void libCOOC_gf_CC_SaveBNetChoices (int lp_player);
void libCOOC_gf_CC_SaveTransitionVars (int lp_player, bank lp_targetBank, bool lp_resultFromDefeat);
void libCOOC_gf_CC_LoadTransitionVars (int lp_player, bank lp_sourceBank);
void libCOOC_gf_ResetCampaignData (int lp_player);
void libCOOC_gf_CC_CustomStartupBegin ();
void libCOOC_gf_CC_CustomStartupLaunch ();
void libCOOC_gf_CC_ForceDevStartup ();
void libCOOC_gf_CC_DevStartupBegin ();
void libCOOC_gf_CC_DevStartupFinish ();
void libCOOC_gf_CC_OpenCoopBank (int lp_player);
bool libCOOC_gf_CC_CoopBankExists (int lp_player);
void libCOOC_gf_CC_SaveCoopBank (int lp_player);
string libCOOC_gf_CC_BankMIssionDifficultyKey6 (string lp_campaignPerk, string lp_commander);
string libCOOC_gf_CC_BankSectionName (string lp_section);
int libCOOC_gf_CC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default);
bool libCOOC_gf_CC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default);
string libCOOC_gf_CC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default);
void libCOOC_gf_CC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default);
void libCOOC_gf_CC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default);
void libCOOC_gf_CC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default);
void libCOOC_gf_CC_ScoreInit ();
void libCOOC_gf_CC_SetTychusScoreUnit (int lp_tychusPlayer, string lp_unitType, bool lp_primary);
void libCOOC_gf_TrackUnitDamageTakenForScoreScreen (bool lp_enableDisable, unit lp_trackedUnit, string lp_scoreType);
void libCOOC_gf_CC_ScoreValueSet (int lp_player, string lp_scoreType, int lp_value);
int libCOOC_gf_CC_StatEventLast ();
void libCOOC_gf_CC_StatEventCreate (string lp_name);
void libCOOC_gf_CC_StatEventAddStr (string lp_key, string lp_value, int lp_event);
void libCOOC_gf_CC_StatEventAddInt (string lp_key, int lp_value, int lp_event);
void libCOOC_gf_CC_StatEventAddReal (string lp_key, fixed lp_value, int lp_event);
void libCOOC_gf_CC_StatEventDone (int lp_statEvent);
void libCOOC_gf_CC_StatRecordMapStart ();
bool libCOOC_gf_PlayerIsCommander (int lp_player);
playergroup libCOOC_gf_CommanderPlayers ();
playergroup libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf (int lp_player);
void libCOOC_gf_PauseAITimeCampaign (bool lp_pauseUnpause);
void libCOOC_gf_CC_TimeAITemporarySet (bool lp_pauseUnpause);
void libCOOC_gf_CC_TimeAITemporaryRestore ();
void libCOOC_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause);
void libCOOC_gf_CC_TimeMissionTemporarySet (bool lp_pauseUnpause);
void libCOOC_gf_CC_TimeMissionTemporaryRestore ();
void libCOOC_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency, int lp_player);
void libCOOC_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone);
void libCOOC_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libCOOC_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libCOOC_gf__FadeCreateDialog ();
void libCOOC_gf_PreventSpawningInRegion (region lp_region);
bool libCOOC_gf_CC_SpawnAllowedAtPoint (point lp_spawnPoint);
actor libCOOC_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint);
void libCOOC_gf_ClearAnimationwithblendtime (string lp_identifier, unit lp_unit, fixed lp_blendTime);
string libCOOC_gf_CC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player);
string libCOOC_gf_CC_GetDataIDFromUIID (int lp_type, int lp_uIItemID);
int libCOOC_gf_CC_GetUIIDFromDataID (int lp_type, string lp_dataID);
void libCOOC_gf_CC_StoreDataUIIDIntoDataTable (int lp_type, string lp_dataID, int lp_uIItemID);
string libCOOC_gf_CC_StoryDataTableName (int lp_type, string lp_name);
playergroup libCOOC_gf_HumanPlayers ();
playergroup libCOOC_gf_NondefeatedPlayers ();
void libCOOC_gf_CC_InitNonDefeatedPlayers ();
void libCOOC_gf_CC_SetPlayerDefeated (int lp_player);
bool libCOOC_gf_CC_UnitIsInternal (unit lp_unit);
text libCOOC_gf_FormatTimeCampaign (int lp_second);
unitgroup libCOOC_gf_CC_TownHallsForPlayer (int lp_player);
bool libCOOC_gf_CC_UnitTypeIsTownHall (string lp_unitType);
int libCOOC_gf_CC_RaceToInt (string lp_race);
string libCOOC_gf_CC_IntToRace (int lp_fourCCInt);
string libCOOC_gf_CC_AICommanderByUniqueIndex (int lp_uniqueIndex);
string libCOOC_gf_IIF (bool lp_condition, string lp_iF, string lp_eLSE);
text libCOOC_gf_TooltipTextofButton (int lp_player, string lp_button);
void libCOOC_gf_SetAllSoundChannelVolumesCampaign (int lp_mode);
void libCOOC_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign (int lp_mode, playergroup lp_playerGroup);
void libCOOC_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players);
void libCOOC_gf_CC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players);

// Trigger Declarations
trigger libCOOC_gt_CC_DebugDefeatMultiplier;
trigger libCOOC_gt_CC_DebugToggleTechSpam;
trigger libCOOC_gt_CC_DebugToggleTechSuperSpam;
trigger libCOOC_gt_CC_DebugUpdateTech;
trigger libCOOC_gt_CC_AchievementVorazunTimeStop;
trigger libCOOC_gt_CC_PrestigeUpgradeSupplement;
trigger libCOOC_gt_CC_SharedUpgradesRecheck;
trigger libCOOC_gt_CC_CustomStartupSelectLaunch;
trigger libCOOC_gt_CC_DevStartupDevForceQuit;
trigger libCOOC_gt_CC_DevStartupCommSelectExit;
trigger libCOOC_gt_CC_ScoreArtanisAbsorb;
trigger libCOOC_gt_CC_ScoreArtanisKaraxOrbitalStrike;
trigger libCOOC_gt_CC_ScoreArtanisBombardment;
trigger libCOOC_gt_CC_ScoreVorazunBHManageGroup;
trigger libCOOC_gt_CC_ScoreVorazunBHDmg;
trigger libCOOC_gt_CC_ScoreVorazunCloakDmg;
trigger libCOOC_gt_CC_ScoreKaraxSolarLance;
trigger libCOOC_gt_CC_ScoreKaraxPurifierBeam;
trigger libCOOC_gt_CC_ScoreKaraxChronoProduction;
trigger libCOOC_gt_CC_ScoreRaynorMedicHeal;
trigger libCOOC_gt_CC_ScoreRaynorHyperionDmg;
trigger libCOOC_gt_CC_ScoreSwannSVHeal;
trigger libCOOC_gt_CC_ScoreSwannDrillDmg;
trigger libCOOC_gt_CC_ScoreKerriganResources;
trigger libCOOC_gt_CC_ScoreKerriganDmg;
trigger libCOOC_gt_CC_ScoreZagaraFrenzyDmg;
trigger libCOOC_gt_CC_ScoreZagaraSuicideDmg;
trigger libCOOC_gt_CC_ScoreZagaraBanelingBarrage;
trigger libCOOC_gt_CC_ScoreAbathurHealing;
trigger libCOOC_gt_CC_ScoreAbathurMonsterDmg;
trigger libCOOC_gt_CC_ScoreAlarakDmg;
trigger libCOOC_gt_CC_ScoreAlarakHeal;
trigger libCOOC_gt_CC_ScoreAlarakSacrificeHeal;
trigger libCOOC_gt_CC_ScoreNovaDmg;
trigger libCOOC_gt_CC_ScoreNovaHeal;
trigger libCOOC_gt_CC_ScoreNovaAbsorb;
trigger libCOOC_gt_CC_ScoreStukovInfestedDmg;
trigger libCOOC_gt_CC_ScoreStukovMonstrosityDmg;
trigger libCOOC_gt_CC_ScoreFenixChampionDmg;
trigger libCOOC_gt_CC_ScoreFenixSuitDmg;
trigger libCOOC_gt_CC_ScoreDehakaDmg;
trigger libCOOC_gt_CC_ScoreDehakaConsumeSupply;
trigger libCOOC_gt_CC_ScoreHornerMagMineDmg;
trigger libCOOC_gt_CC_ScoreHornerScrapPickup;
trigger libCOOC_gt_CC_ScoreTychusGrenadeDmg;
trigger libCOOC_gt_CC_ScoreTychusReaperBombDmg;
trigger libCOOC_gt_CC_ScoreTychusWarhoundTurretDmg;
trigger libCOOC_gt_CC_ScoreTychusFirebatOilDmg;
trigger libCOOC_gt_CC_ScoreTychusHERCImpactDuration;
trigger libCOOC_gt_CC_ScoreTychusMarauderHeal;
trigger libCOOC_gt_CC_ScoreTychusGhostDominatedDmg;
trigger libCOOC_gt_CC_ScoreTychusSpectrePulseDmg;
trigger libCOOC_gt_CC_ScoreTychusMedicHeal;
trigger libCOOC_gt_CC_ScoreTychusMedicHealAoE;
trigger libCOOC_gt_CC_ScoreTychusMedicAbsorb;
trigger libCOOC_gt_CC_ScoreTychusOdinDmg;
trigger libCOOC_gt_CC_ScoreZeratulDmg;
trigger libCOOC_gt_CC_ScoreZeratulShieldRestore;
trigger libCOOC_gt_CC_ScoreStetmannGaryDmg;
trigger libCOOC_gt_CC_ScoreStetmannOverload;
trigger libCOOC_gt_CC_ScoreMengskDamage;
trigger libCOOC_gt_CC_ScoreDebugDisplay;
trigger libCOOC_gt_CC_ScoreEnemiesKilled;
trigger libCOOC_gt_CC_ScoreDynDmgTaken;

// Library Initialization
void libCOOC_InitVariables ();

