include "TriggerLibs/NativeLib"

include "Lib6CB3363F_h"

//--------------------------------------------------------------------------------------------------
// Library: Frontiers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib6CB3363F_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib6CB3363F_InitVariables_completed = false;

void lib6CB3363F_InitVariables () {
    int init_i;
    int init_j;

    if (lib6CB3363F_InitVariables_completed) {
        return;
    }

    lib6CB3363F_InitVariables_completed = true;

    lib6CB3363F_gv_fT_DialogSelection = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lib6CB3363F_gv_fT_DialogSelectionButton[init_i] = c_invalidDialogControlId;
    }
    lib6CB3363F_gv_fT_DialogSelectionReadyButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lib6CB3363F_gv_fT_GameUnitTypeSpeed[init_i] = 3.2;
    }
    lib6CB3363F_gv_fT_DialogPlayerInfo = c_invalidDialogId;
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        lib6CB3363F_gv_fT_DialogPlayerInfoLabel[init_i] = c_invalidDialogControlId;
    }
    lib6CB3363F_gv_fT_DialogAmmo = c_invalidDialogId;
    lib6CB3363F_gv_fT_DialogAmmoLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipSlots; init_i += 1) {
        lib6CB3363F_gv_fT_DialogEquipImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipSlots; init_i += 1) {
        lib6CB3363F_gv_fT_DialogEquipLabel[init_i] = c_invalidDialogControlId;
    }
    lib6CB3363F_gv_fT_PlayerGroup = PlayerGroupEmpty();
    lib6CB3363F_gv_fT_PlayerUnitGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        lib6CB3363F_gv_fT_PlayerSpeed[init_i] = 0.2;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        lib6CB3363F_gv_fT_PlayerSpeedTotal[init_i] = 0.2;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        lib6CB3363F_gv_fT_PlayerSpeedSprintBonus[init_i] = 0.75;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[init_i] = 1;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        lib6CB3363F_gv_fT_PlayerWeaponCurrentCount[init_i] = 1;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        for (init_j = 0; init_j <= lib6CB3363F_gv_fT_WeaponsCarriedMax; init_j += 1) {
            lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[init_i][init_j] = 30;
        }
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        for (init_j = 0; init_j <= lib6CB3363F_gv_fT_WeaponsCarriedMax; init_j += 1) {
            lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[init_i][init_j] = 500;
        }
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        lib6CB3363F_gv_fT_PlayerInteractTextTag[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        lib6CB3363F_gv_fT_PlayerReloadingTextTag[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Players; init_i += 1) {
        lib6CB3363F_gv_fT_PlayerMeleeEffect[init_i] = "FrontiersMeleeSearch";
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponName[init_i] = "";
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponRange[init_i] = 10.0;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponRefireDelay[init_i] = 0.5;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponSpeedModDuration[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponSpeedModMultiplier[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponBulletShots[init_i] = 1;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[init_i] = 5.0;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponBulletFiringSound[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponBulletHeight[init_i] = 0.9;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponBulletXOffset[init_i] = -10.0;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponBulletYOffset[init_i] = 1.6;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponAmmoClipSize[init_i] = 11;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponAmmoMax[init_i] = 111;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_Weapons; init_i += 1) {
        lib6CB3363F_gv_fT_WeaponIsAutomatic[init_i] = true;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipSlots; init_i += 1) {
        lib6CB3363F_gv_fT_PlayerEquipmentSlotHotkeys[init_i] = "";
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipTypes; init_i += 1) {
        lib6CB3363F_gv_fT_EquipmentName[init_i] = "";
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipTypes; init_i += 1) {
        lib6CB3363F_gv_fT_EquipmentTargetable[init_i] = true;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipTypes; init_i += 1) {
        lib6CB3363F_gv_fT_EquipmentRange[init_i] = 9.0;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipTypes; init_i += 1) {
        lib6CB3363F_gv_fT_EquipmentReUseCooldown[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipTypes; init_i += 1) {
        lib6CB3363F_gv_fT_EquipmentChargeRestockTimer[init_i] = -10.0;
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipTypes; init_i += 1) {
        lib6CB3363F_gv_fT_EquipmentActorMessageOn[init_i] = "SetVisibility 1";
    }
    for (init_i = 0; init_i <= lib6CB3363F_gv_fT_EquipTypes; init_i += 1) {
        lib6CB3363F_gv_fT_EquipmentActorMessageOff[init_i] = "SetVisibility 1";
    }
    lib6CB3363F_gv_fT_CameraStandard = CameraInfoDefault();
    lib6CB3363F_gv_fT_CameraClose = CameraInfoDefault();
    lib6CB3363F_gv_fT_GameState = lib6CB3363F_ge_FrontiersGameState_FT_GameState_None;
}

// Presets
// Functions
void lib6CB3363F_gf_SetWeaponStats () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    lib6CB3363F_gv_fT_WeaponName[lv_i] = "Pistol";
    lib6CB3363F_gv_fT_WeaponRange[lv_i] = 10.0;
    lib6CB3363F_gv_fT_WeaponRefireDelay[lv_i] = 0.25;
    lib6CB3363F_gv_fT_WeaponSpeedModDuration[lv_i] = 0.25;
    lib6CB3363F_gv_fT_WeaponSpeedModMultiplier[lv_i] = 0.75;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lv_i] = 10.0;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lv_i] = 5.0;
    lib6CB3363F_gv_fT_WeaponBulletBehavior[lv_i] = "PistolMk1";
    lib6CB3363F_gv_fT_WeaponBulletUnit[lv_i] = "BulletPlayerNormal";
    lib6CB3363F_gv_fT_WeaponBulletShots[lv_i] = 1;
    lib6CB3363F_gv_fT_WeaponBulletShotTiming[lv_i] = 0.125;
    lib6CB3363F_gv_fT_WeaponBulletFiringSound[lv_i] = SoundLink("Marine_AttackLaunch", -1);
    lib6CB3363F_gv_fT_WeaponAmmoClipSize[lv_i] = 15;
    lib6CB3363F_gv_fT_WeaponAmmoMax[lv_i] = 9999;
    lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lv_i] = 1.0;
    lv_i = 2;
    lib6CB3363F_gv_fT_WeaponName[lv_i] = "Rifle Mk1";
    lib6CB3363F_gv_fT_WeaponRange[lv_i] = 18.0;
    lib6CB3363F_gv_fT_WeaponRefireDelay[lv_i] = 0.25;
    lib6CB3363F_gv_fT_WeaponSpeedModDuration[lv_i] = 1.0;
    lib6CB3363F_gv_fT_WeaponSpeedModMultiplier[lv_i] = 0.5;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lv_i] = 5.0;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lv_i] = 2.0;
    lib6CB3363F_gv_fT_WeaponBulletBehavior[lv_i] = "RifleMk1";
    lib6CB3363F_gv_fT_WeaponBulletUnit[lv_i] = "BulletPlayerNormal";
    lib6CB3363F_gv_fT_WeaponBulletShots[lv_i] = 1;
    lib6CB3363F_gv_fT_WeaponBulletShotTiming[lv_i] = 0.0625;
    lib6CB3363F_gv_fT_WeaponBulletFiringSound[lv_i] = SoundLink("Marine_AttackLaunch", -1);
    lib6CB3363F_gv_fT_WeaponAmmoClipSize[lv_i] = 30;
    lib6CB3363F_gv_fT_WeaponAmmoMax[lv_i] = 450;
    lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lv_i] = 1.0;
    lib6CB3363F_gv_fT_WeaponBulletHeight[lv_i] = 1.3;
    lib6CB3363F_gv_fT_WeaponBulletXOffset[lv_i] = -10.0;
    lib6CB3363F_gv_fT_WeaponBulletYOffset[lv_i] = 1.6;
    lv_i = 4;
    lib6CB3363F_gv_fT_WeaponName[lv_i] = "Minigun Mk1";
    lib6CB3363F_gv_fT_WeaponRange[lv_i] = 18.0;
    lib6CB3363F_gv_fT_WeaponRefireDelay[lv_i] = 0.125;
    lib6CB3363F_gv_fT_WeaponSpeedModDuration[lv_i] = 0.5;
    lib6CB3363F_gv_fT_WeaponSpeedModMultiplier[lv_i] = 0.25;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lv_i] = 6.0;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lv_i] = 2.0;
    lib6CB3363F_gv_fT_WeaponBulletBehavior[lv_i] = "MinigunMk1";
    lib6CB3363F_gv_fT_WeaponBulletUnit[lv_i] = "BulletPlayerNormal";
    lib6CB3363F_gv_fT_WeaponBulletShots[lv_i] = 1;
    lib6CB3363F_gv_fT_WeaponBulletShotTiming[lv_i] = 0.0625;
    lib6CB3363F_gv_fT_WeaponBulletFiringSound[lv_i] = SoundLink("Marine_AttackLaunch", -1);
    lib6CB3363F_gv_fT_WeaponAmmoClipSize[lv_i] = 100;
    lib6CB3363F_gv_fT_WeaponAmmoMax[lv_i] = 1000;
    lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lv_i] = 4.5;
    lib6CB3363F_gv_fT_WeaponBulletXOffset[lv_i] = 10.0;
    lib6CB3363F_gv_fT_WeaponBulletYOffset[lv_i] = 1.5;
    lv_i = 5;
    lib6CB3363F_gv_fT_WeaponName[lv_i] = "Plasma Rifle Mk1";
    lib6CB3363F_gv_fT_WeaponRange[lv_i] = 18.0;
    lib6CB3363F_gv_fT_WeaponRefireDelay[lv_i] = 0.25;
    lib6CB3363F_gv_fT_WeaponSpeedModDuration[lv_i] = 0.25;
    lib6CB3363F_gv_fT_WeaponSpeedModMultiplier[lv_i] = 0.5;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lv_i] = 1.0;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lv_i] = 1.0;
    lib6CB3363F_gv_fT_WeaponBulletBehavior[lv_i] = "MedicShotMk1";
    lib6CB3363F_gv_fT_WeaponBulletUnit[lv_i] = "BulletPlayerNormal";
    lib6CB3363F_gv_fT_WeaponBulletShots[lv_i] = 1;
    lib6CB3363F_gv_fT_WeaponBulletShotTiming[lv_i] = 0.0625;
    lib6CB3363F_gv_fT_WeaponBulletFiringSound[lv_i] = SoundLink("Marauder_AttackLaunch", -1);
    lib6CB3363F_gv_fT_WeaponAmmoClipSize[lv_i] = 45;
    lib6CB3363F_gv_fT_WeaponAmmoMax[lv_i] = 900;
    lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lv_i] = 3.0;
    lib6CB3363F_gv_fT_WeaponBulletHeight[lv_i] = 1.2;
    lib6CB3363F_gv_fT_WeaponBulletXOffset[lv_i] = 10.0;
    lib6CB3363F_gv_fT_WeaponBulletYOffset[lv_i] = 1.3;
    lv_i = 3;
    lib6CB3363F_gv_fT_WeaponName[lv_i] = "Shotgun Mk1";
    lib6CB3363F_gv_fT_WeaponRange[lv_i] = 8.0;
    lib6CB3363F_gv_fT_WeaponRefireDelay[lv_i] = 0.0625;
    lib6CB3363F_gv_fT_WeaponSpeedModDuration[lv_i] = 0.25;
    lib6CB3363F_gv_fT_WeaponSpeedModMultiplier[lv_i] = 0.5;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lv_i] = 1.0;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lv_i] = 1.0;
    lib6CB3363F_gv_fT_WeaponBulletBehavior[lv_i] = "ShotgunMk1";
    lib6CB3363F_gv_fT_WeaponBulletUnit[lv_i] = "BulletPlayerNormal";
    lib6CB3363F_gv_fT_WeaponBulletShots[lv_i] = 1;
    lib6CB3363F_gv_fT_WeaponBulletShotTiming[lv_i] = 0.0625;
    lib6CB3363F_gv_fT_WeaponBulletFiringSound[lv_i] = SoundLink("Marauder_AttackLaunch", -1);
    lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lv_i] = 10.0;
    lib6CB3363F_gv_fT_WeaponBulletSpreadShots[lv_i] = 2;
    lib6CB3363F_gv_fT_WeaponAmmoClipSize[lv_i] = 10;
    lib6CB3363F_gv_fT_WeaponAmmoMax[lv_i] = 100;
    lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lv_i] = 3.0;
    lv_i = 6;
    lib6CB3363F_gv_fT_WeaponName[lv_i] = "Sniper Rifle Mk1";
    lib6CB3363F_gv_fT_WeaponRange[lv_i] = 24.0;
    lib6CB3363F_gv_fT_WeaponIsAutomatic[lv_i] = false;
    lib6CB3363F_gv_fT_WeaponSpeedModDuration[lv_i] = 1.0;
    lib6CB3363F_gv_fT_WeaponSpeedModMultiplier[lv_i] = 0.5;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lv_i] = 5.0;
    lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lv_i] = 2.0;
    lib6CB3363F_gv_fT_WeaponBulletBehavior[lv_i] = "SniperRifleMk1";
    lib6CB3363F_gv_fT_WeaponBulletUnit[lv_i] = "BulletPlayerFast";
    lib6CB3363F_gv_fT_WeaponBulletShots[lv_i] = 1;
    lib6CB3363F_gv_fT_WeaponBulletShotTiming[lv_i] = 0.0625;
    lib6CB3363F_gv_fT_WeaponBulletFiringSound[lv_i] = SoundLink("Ghost_AttackLaunch", -1);
    lib6CB3363F_gv_fT_WeaponAmmoClipSize[lv_i] = 1;
    lib6CB3363F_gv_fT_WeaponAmmoMax[lv_i] = 150;
    lib6CB3363F_gv_fT_WeaponRefireDelay[lv_i] = 1.0;
    lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lv_i] = 1.0;
    lib6CB3363F_gv_fT_WeaponBulletHeight[lv_i] = 1.4;
    lib6CB3363F_gv_fT_WeaponBulletXOffset[lv_i] = 5.0;
    lib6CB3363F_gv_fT_WeaponBulletYOffset[lv_i] = 1.6;
    lib6CB3363F_gv_fT_WeaponBulletShots[lv_i] = 2;
    lib6CB3363F_gv_fT_WeaponBulletShotTiming[lv_i] = 0.0;
}

void lib6CB3363F_gf_SetEquipmentStats () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    lib6CB3363F_gv_fT_EquipmentName[lv_i] = "Frag Grenade";
    lib6CB3363F_gv_fT_EquipmentIcon[lv_i] = "Assets\\Textures\\btn-ability-terran-raynortossgrenade.dds";
    lib6CB3363F_gv_fT_EquipmentEffect[lv_i] = "FrontiersFragGrenadeLaunchMissile";
    lib6CB3363F_gv_fT_EquipmentActorMessageOn[lv_i] = "Signal GrenadeUIOn";
    lib6CB3363F_gv_fT_EquipmentActorMessageOff[lv_i] = "Signal GrenadeUIOff";
    lib6CB3363F_gv_fT_EquipmentCountMax[lv_i] = 3;
    lv_i = 5;
    lib6CB3363F_gv_fT_EquipmentName[lv_i] = "Combat Shield";
    lib6CB3363F_gv_fT_EquipmentIcon[lv_i] = "Assets\\Textures\\btn-techupgrade-terran-combatshield.dds";
    lib6CB3363F_gv_fT_EquipmentTargetable[lv_i] = false;
    lib6CB3363F_gv_fT_EquipmentToggleable[lv_i] = true;
    lib6CB3363F_gv_fT_EquipmentBehavior[lv_i] = "PlayerEquipmentFrontShield";
    lib6CB3363F_gv_fT_EquipmentActorMessageOn[lv_i] = "Signal None";
    lib6CB3363F_gv_fT_EquipmentActorMessageOff[lv_i] = "Signal None";
    lib6CB3363F_gv_fT_EquipmentCountMax[lv_i] = 1;
    lv_i = 7;
    lib6CB3363F_gv_fT_EquipmentName[lv_i] = "Nuke Calldown";
    lib6CB3363F_gv_fT_EquipmentIcon[lv_i] = "Assets\\Textures\\btn-ability-terran-nuclearstrike.dds";
    lib6CB3363F_gv_fT_EquipmentEffect[lv_i] = "FrontiersFragGrenadeLaunchMissile";
    lib6CB3363F_gv_fT_EquipmentActorMessageOn[lv_i] = "Signal GrenadeUIOn";
    lib6CB3363F_gv_fT_EquipmentActorMessageOff[lv_i] = "Signal GrenadeUIOff";
    lib6CB3363F_gv_fT_EquipmentCountMax[lv_i] = 1;
}

void lib6CB3363F_gf_FrontiersSetPlayCameras (camerainfo lp_mapCameraStandard, camerainfo lp_mapCameraClose) {
    // Implementation
    lib6CB3363F_gv_fT_CameraStandard = lp_mapCameraStandard;
    lib6CB3363F_gv_fT_CameraClose = lp_mapCameraClose;
}

void lib6CB3363F_gf_FrontiersInit () {
    int autoDBE70D02_ae;
    int autoDBE70D02_ai;
    int autoE6299152_ae;
    int autoE6299152_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    lib6CB3363F_gv_fT_GameUnitType[1] = "PlayerMarine";
    lib6CB3363F_gv_fT_GameUnitType[2] = "PlayerMedic";
    lib6CB3363F_gv_fT_GameUnitType[3] = "PlayerHeavy";
    lib6CB3363F_gv_fT_GameUnitType[4] = "PlayerGhost";
    lib6CB3363F_gv_fT_GameUnitType[5] = "PlayerFirebat";
    lib6CB3363F_gv_fT_GameUnitTypeSpeed[1] = 3.0;
    lib6CB3363F_gv_fT_GameUnitTypeSpeed[2] = 3.0;
    lib6CB3363F_gv_fT_GameUnitTypeSpeed[3] = 3.0;
    lib6CB3363F_gv_fT_GameUnitTypeSpeed[4] = 3.0;
    lib6CB3363F_gv_fT_GameUnitTypeSpeed[5] = 2.0;
    lib6CB3363F_gf_SetWeaponStats();
    lib6CB3363F_gf_SetEquipmentStats();
    PlayerGroupAdd(lib6CB3363F_gv_fT_PlayerGroup, 1);
    PlayerGroupAdd(lib6CB3363F_gv_fT_PlayerGroup, 2);
    PlayerGroupAdd(lib6CB3363F_gv_fT_PlayerGroup, 3);
    PlayerGroupAdd(lib6CB3363F_gv_fT_PlayerGroup, 4);
    libNtve_gf_SetPlayerGroupAlliance(lib6CB3363F_gv_fT_PlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInventoryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeLeaderPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePurchasePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeRoomPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    DialogCreate(1000, 400, c_anchorCenter, 0, 0, true);
    lib6CB3363F_gv_fT_DialogSelection = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTop, 0, 50, StringExternal("Param/Value/lib_6CB3363F_3D61D249"), ColorWithAlpha(0,0,0,0), false, 0.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 200, c_anchorCenter, -400, 0, StringToText(""), StringExternal("Param/Value/lib_6CB3363F_5F8BEABA"), "");
    lib6CB3363F_gv_fT_DialogSelectionButton[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 200, c_anchorCenter, -200, 0, StringToText(""), StringExternal("Param/Value/lib_6CB3363F_8B5BB7A0"), "");
    lib6CB3363F_gv_fT_DialogSelectionButton[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 200, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/lib_6CB3363F_AB33A4AE"), "");
    lib6CB3363F_gv_fT_DialogSelectionButton[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 200, c_anchorCenter, 200, 0, StringToText(""), StringExternal("Param/Value/lib_6CB3363F_C99DFC31"), "");
    lib6CB3363F_gv_fT_DialogSelectionButton[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 200, c_anchorCenter, 400, 0, StringToText(""), StringExternal("Param/Value/lib_6CB3363F_B9F8E406"), "");
    lib6CB3363F_gv_fT_DialogSelectionButton[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorCenter, 0, 150, StringToText(""), StringExternal("Param/Value/lib_6CB3363F_0DD76EB0"), "");
    lib6CB3363F_gv_fT_DialogSelectionReadyButton = DialogControlLastCreated();
    DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionReadyButton, PlayerGroupAll(), false);
    DialogSetVisible(lib6CB3363F_gv_fT_DialogSelection, PlayerGroupAll(), true);
    DialogCreate(200, 400, c_anchorTopLeft, 25, 25, true);
    lib6CB3363F_gv_fT_DialogPlayerInfo = DialogLastCreated();
    DialogSetImageVisible(lib6CB3363F_gv_fT_DialogPlayerInfo, false);
    autoDBE70D02_ae = 4;
    autoDBE70D02_ai = 1;
    lv_i = 1;
    for ( ; ( (autoDBE70D02_ai >= 0 && lv_i <= autoDBE70D02_ae) || (autoDBE70D02_ai <= 0 && lv_i >= autoDBE70D02_ae) ) ; lv_i += autoDBE70D02_ai ) {
        libNtve_gf_CreateDialogItemLabel(lib6CB3363F_gv_fT_DialogPlayerInfo, 200, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_6CB3363F_BA3C546A"), ColorWithAlpha(0,0,0,0), false, 0.0);
        lib6CB3363F_gv_fT_DialogPlayerInfoLabel[lv_i] = DialogControlLastCreated();
    }
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[1], PlayerGroupSingle(1), c_anchorTopLeft, 0, 0);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[2], PlayerGroupSingle(1), c_anchorTopLeft, 0, 100);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[3], PlayerGroupSingle(1), c_anchorTopLeft, 0, 200);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[4], PlayerGroupSingle(1), c_anchorTopLeft, 0, 300);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[1], PlayerGroupSingle(2), c_anchorTopLeft, 0, 100);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[2], PlayerGroupSingle(2), c_anchorTopLeft, 0, 0);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[3], PlayerGroupSingle(2), c_anchorTopLeft, 0, 200);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[4], PlayerGroupSingle(2), c_anchorTopLeft, 0, 300);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[1], PlayerGroupSingle(3), c_anchorTopLeft, 0, 100);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[2], PlayerGroupSingle(3), c_anchorTopLeft, 0, 200);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[3], PlayerGroupSingle(3), c_anchorTopLeft, 0, 0);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[4], PlayerGroupSingle(3), c_anchorTopLeft, 0, 300);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[1], PlayerGroupSingle(4), c_anchorTopLeft, 0, 100);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[2], PlayerGroupSingle(4), c_anchorTopLeft, 0, 200);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[3], PlayerGroupSingle(4), c_anchorTopLeft, 0, 300);
    DialogControlSetPosition(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[4], PlayerGroupSingle(4), c_anchorTopLeft, 0, 0);
    DialogCreate(500, 100, c_anchorBottom, 0, 0, true);
    lib6CB3363F_gv_fT_DialogAmmo = DialogLastCreated();
    DialogSetImageVisible(lib6CB3363F_gv_fT_DialogAmmo, false);
    libNtve_gf_CreateDialogItemLabel(lib6CB3363F_gv_fT_DialogAmmo, 100, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/lib_6CB3363F_F99898F8"), ColorWithAlpha(0,0,0,0), false, 0.0);
    lib6CB3363F_gv_fT_DialogAmmoLabel = DialogControlLastCreated();
    autoE6299152_ae = 4;
    autoE6299152_ai = 1;
    lv_i = 1;
    for ( ; ( (autoE6299152_ai >= 0 && lv_i <= autoE6299152_ae) || (autoE6299152_ai <= 0 && lv_i >= autoE6299152_ae) ) ; lv_i += autoE6299152_ai ) {
        libNtve_gf_CreateDialogItemImage(lib6CB3363F_gv_fT_DialogAmmo, 72, 72, c_anchorTopLeft, (lv_i * 100), 0, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        lib6CB3363F_gv_fT_DialogEquipImage[lv_i] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(lib6CB3363F_gv_fT_DialogAmmo, 100, 100, c_anchorTopLeft, (lv_i * 100), 10, StringExternal("Param/Value/lib_6CB3363F_0EE54434"), ColorWithAlpha(0,0,0,0), false, 0.0);
        lib6CB3363F_gv_fT_DialogEquipLabel[lv_i] = DialogControlLastCreated();
    }
    lib6CB3363F_gv_fT_PlayerEquipmentSlotHotkeys[1] = "G";
    lib6CB3363F_gv_fT_PlayerEquipmentSlotHotkeys[2] = "1";
    lib6CB3363F_gv_fT_PlayerEquipmentSlotHotkeys[3] = "2";
    lib6CB3363F_gv_fT_PlayerEquipmentSlotHotkeys[4] = "3";
    lib6CB3363F_gv_fT_GameState = lib6CB3363F_ge_FrontiersGameState_FT_GameState_CharacterSelect;
}

void lib6CB3363F_gf_FrontiersCreatePlayerUnits (point lp_startPoint1, point lp_startPoint2, point lp_startPoint3, point lp_startPoint4) {
    playergroup auto993E03F9_g;
    int auto993E03F9_p;
    int auto4D87E19A_ae;
    int auto4D87E19A_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;
    point[lib6CB3363F_gv_fT_Players + 1] lv_startPointArray;

    // Variable Initialization

    // Implementation
    lv_startPointArray[1] = lp_startPoint1;
    lv_startPointArray[2] = lp_startPoint2;
    lv_startPointArray[3] = lp_startPoint3;
    lv_startPointArray[4] = lp_startPoint4;
    auto993E03F9_g = PlayerGroupActive(); 
    auto993E03F9_p = 1;
    for ( ; auto993E03F9_p <= PlayerGroupCount(auto993E03F9_g) ; auto993E03F9_p += BoolToInt(lv_i == PlayerGroupPlayer(auto993E03F9_g, auto993E03F9_p)) ) {
        lv_i = PlayerGroupPlayer(auto993E03F9_g, auto993E03F9_p);
        if (((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser))) {
            if ((lib6CB3363F_gv_fT_PlayerUnit[lv_i] != null)) {
                UnitRemove(lib6CB3363F_gv_fT_PlayerUnit[lv_i]);
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, lib6CB3363F_gv_fT_GameUnitType[lib6CB3363F_gv_fT_GameSelection[lv_i]], 0, lv_i, lv_startPointArray[lv_i]);
            lib6CB3363F_gv_fT_PlayerUnit[lv_i] = UnitLastCreated();
            UnitGroupAdd(lib6CB3363F_gv_fT_PlayerUnitGroup, UnitLastCreated());
            CameraApplyInfo(lv_i, lib6CB3363F_gv_fT_CameraStandard, 0.0, -1, 10.0, true);
            CameraLockInput(lv_i, true);
            CameraFollowUnitGroup(lv_i, libNtve_gf_ConvertUnitToUnitGroup(lib6CB3363F_gv_fT_PlayerUnit[lv_i]), true, false);
            lib6CB3363F_gv_fT_PlayerSpeedTotal[lv_i] = lib6CB3363F_gv_fT_GameUnitTypeSpeed[lib6CB3363F_gv_fT_GameSelection[lv_i]];
            CatalogFieldValueSet(c_gameCatalogUnit, lib6CB3363F_gv_fT_GameUnitType[lib6CB3363F_gv_fT_GameSelection[lv_i]], "Speed", lv_i, FixedToString(lib6CB3363F_gv_fT_PlayerSpeedTotal[lv_i], c_fixedPrecisionAny));
            lib6CB3363F_gv_fT_PlayerSpeed[lv_i] = (lib6CB3363F_gv_fT_GameUnitTypeSpeed[lib6CB3363F_gv_fT_GameSelection[lv_i]] / 16.0);
            lib6CB3363F_gv_fT_PlayerIncapacitated[lv_i] = false;
            lib6CB3363F_gf_UpdateAmmoDialog(lv_i);
            DialogSetVisible(lib6CB3363F_gv_fT_DialogSelection, PlayerGroupSingle(lv_i), false);
            DialogSetVisible(lib6CB3363F_gv_fT_DialogAmmo, PlayerGroupSingle(lv_i), true);
            DialogSetVisible(lib6CB3363F_gv_fT_DialogPlayerInfo, PlayerGroupSingle(lv_i), true);
            auto4D87E19A_ae = 4;
            auto4D87E19A_ai = 1;
            lv_j = 1;
            for ( ; ( (auto4D87E19A_ai >= 0 && lv_j <= auto4D87E19A_ae) || (auto4D87E19A_ai <= 0 && lv_j >= auto4D87E19A_ae) ) ; lv_j += auto4D87E19A_ai ) {
                lib6CB3363F_gf_UpdateEquipDialog(lv_i, lv_j);
            }
        }

    }
}

void lib6CB3363F_gf_FrontiersSetGameState (int lp_state) {
    // Implementation
    lib6CB3363F_gv_fT_GameState = lp_state;
}

void lib6CB3363F_gf_ResetAmmo (int lp_player) {
    int autoF0C36DD1_ae;
    int autoF0C36DD1_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoF0C36DD1_ae = lib6CB3363F_gv_fT_PlayerWeaponCurrentCount[lp_player];
    autoF0C36DD1_ai = 1;
    lv_i = 1;
    for ( ; ( (autoF0C36DD1_ai >= 0 && lv_i <= autoF0C36DD1_ae) || (autoF0C36DD1_ai <= 0 && lv_i >= autoF0C36DD1_ae) ) ; lv_i += autoF0C36DD1_ai ) {
        lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[lp_player][lv_i] = lib6CB3363F_gv_fT_WeaponAmmoClipSize[lib6CB3363F_gv_fT_PlayerWeaponType[lp_player][lv_i]];
        lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[lp_player][lv_i] = lib6CB3363F_gv_fT_WeaponAmmoMax[lib6CB3363F_gv_fT_PlayerWeaponType[lp_player][lv_i]];
    }
}

void lib6CB3363F_gf_MovementAction (int lp_player) {
    // Variable Declarations
    fixed lv_px;
    fixed lv_py;

    // Variable Initialization

    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        lv_px = PointGetX(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_player]));
        lv_py = PointGetY(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_player]));
        if ((lib6CB3363F_gv_fT_KeyUpActive[lp_player] == true)) {
            lv_py += lib6CB3363F_gv_fT_PlayerSpeed[lp_player];
        }

        if ((lib6CB3363F_gv_fT_KeyDownActive[lp_player] == true)) {
            lv_py -= lib6CB3363F_gv_fT_PlayerSpeed[lp_player];
        }

        if ((lib6CB3363F_gv_fT_KeyLeftActive[lp_player] == true)) {
            lv_px -= lib6CB3363F_gv_fT_PlayerSpeed[lp_player];
        }

        if ((lib6CB3363F_gv_fT_KeyRightActive[lp_player] == true)) {
            lv_px += lib6CB3363F_gv_fT_PlayerSpeed[lp_player];
        }

        UnitIssueOrder(lib6CB3363F_gv_fT_PlayerUnit[lp_player], OrderTargetingPoint(AbilityCommand("move", 0), Point(lv_px, lv_py)), c_orderQueueReplace);
    }

}

void lib6CB3363F_gf_PlayerFireBullet (int lp_playerFiring, point lp_pointClicked, int lp_gunType) {
    int auto7ECAD807_ae;
    int auto7ECAD807_ai;

    // Variable Declarations
    fixed lv_tAngle;
    int lv_i;
    fixed lv_randomSpreadAngle;

    // Variable Initialization

    // Implementation
    auto7ECAD807_ae = lib6CB3363F_gv_fT_WeaponBulletShots[lp_gunType];
    auto7ECAD807_ai = 1;
    lv_i = 1;
    for ( ; ( (auto7ECAD807_ai >= 0 && lv_i <= auto7ECAD807_ae) || (auto7ECAD807_ai <= 0 && lv_i >= auto7ECAD807_ae) ) ; lv_i += auto7ECAD807_ai ) {
        if ((lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[lp_playerFiring][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_playerFiring]] > 0)) {
            if ((lib6CB3363F_gv_fT_PlayerWeaponCurrentReloadTimer[lp_playerFiring] <= 0)) {
                lib6CB3363F_gv_fT_PlayerWeaponCurrentRefire[lp_playerFiring] = lib6CB3363F_gv_fT_WeaponRefireDelay[lp_gunType];
                CatalogFieldValueSet(c_gameCatalogUnit, lib6CB3363F_gv_fT_GameUnitType[lib6CB3363F_gv_fT_GameSelection[lp_playerFiring]], "Speed", lp_playerFiring, FixedToString((lib6CB3363F_gv_fT_PlayerSpeedTotal[lp_playerFiring] * lib6CB3363F_gv_fT_WeaponSpeedModMultiplier[lp_gunType]), c_fixedPrecisionAny));
                lib6CB3363F_gv_fT_PlayerSlowSpeedEnabled[lp_playerFiring] = true;
                lib6CB3363F_gv_fT_PlayerSlowSpeedDurationCurrent[lp_playerFiring] = lib6CB3363F_gv_fT_WeaponSpeedModDuration[lp_gunType];
                lv_tAngle = AngleBetweenPoints(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lp_pointClicked);
                if ((UnitGetPropertyFixed(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], c_unitPropMovementSpeedCurrent, c_unitPropCurrent) == 0.0)) {
                    lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType]);
                }
                else {
                    lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType]);
                }
                libNtve_gf_UnitCreateFacingPoint(1, lib6CB3363F_gv_fT_WeaponBulletUnit[lp_gunType], c_unitCreateIgnorePlacement, lp_playerFiring, PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponBulletYOffset[lp_gunType], ((lv_tAngle + lib6CB3363F_gv_fT_WeaponBulletXOffset[lp_gunType]) + lv_randomSpreadAngle)), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), 5.0, (lv_tAngle + lv_randomSpreadAngle)));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BulletTarget", 0), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponRange[lp_gunType], (lv_tAngle + lv_randomSpreadAngle))), c_orderQueueReplace);
                UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring])) + lib6CB3363F_gv_fT_WeaponBulletHeight[lp_gunType]), 0.0);
                UnitBehaviorAdd(UnitLastCreated(), lib6CB3363F_gv_fT_WeaponBulletBehavior[lp_gunType], UnitLastCreated(), 1);
                libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], "Signal Attack");
                SoundPlayAtPointForPlayer(lib6CB3363F_gv_fT_WeaponBulletFiringSound[lp_gunType], c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), 0.5, 100.0, 0.0);
                lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[lp_playerFiring][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_playerFiring]] -= 1;
                lib6CB3363F_gf_UpdateAmmoDialog(lp_playerFiring);
                if ((lib6CB3363F_gv_fT_WeaponBulletSpreadShots[lp_gunType] >= 1)) {
                    if ((UnitGetPropertyFixed(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], c_unitPropMovementSpeedCurrent, c_unitPropCurrent) == 0.0)) {
                        lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType]);
                    }
                    else {
                        lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType]);
                    }
                    libNtve_gf_UnitCreateFacingPoint(1, lib6CB3363F_gv_fT_WeaponBulletUnit[lp_gunType], c_unitCreateIgnorePlacement, lp_playerFiring, PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponBulletYOffset[lp_gunType], (((lv_tAngle + lib6CB3363F_gv_fT_WeaponBulletXOffset[lp_gunType]) + lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType]) + lv_randomSpreadAngle)), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), 5.0, ((lv_tAngle + lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType]) + lv_randomSpreadAngle)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BulletTarget", 0), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponRange[lp_gunType], ((lv_tAngle + lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType]) + lv_randomSpreadAngle))), c_orderQueueReplace);
                    UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring])) + 0.5), 0.0);
                    UnitBehaviorAdd(UnitLastCreated(), lib6CB3363F_gv_fT_WeaponBulletBehavior[lp_gunType], UnitLastCreated(), 1);
                    if ((UnitGetPropertyFixed(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], c_unitPropMovementSpeedCurrent, c_unitPropCurrent) == 0.0)) {
                        lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType]);
                    }
                    else {
                        lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType]);
                    }
                    libNtve_gf_UnitCreateFacingPoint(1, lib6CB3363F_gv_fT_WeaponBulletUnit[lp_gunType], c_unitCreateIgnorePlacement, lp_playerFiring, PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponBulletYOffset[lp_gunType], (((lv_tAngle + lib6CB3363F_gv_fT_WeaponBulletXOffset[lp_gunType]) - lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType]) + lv_randomSpreadAngle)), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), 5.0, ((lv_tAngle - lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType]) + lv_randomSpreadAngle)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BulletTarget", 0), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponRange[lp_gunType], ((lv_tAngle - lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType]) + lv_randomSpreadAngle))), c_orderQueueReplace);
                    UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring])) + 0.5), 0.0);
                    UnitBehaviorAdd(UnitLastCreated(), lib6CB3363F_gv_fT_WeaponBulletBehavior[lp_gunType], UnitLastCreated(), 1);
                }

                if ((lib6CB3363F_gv_fT_WeaponBulletSpreadShots[lp_gunType] >= 2)) {
                    if ((UnitGetPropertyFixed(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], c_unitPropMovementSpeedCurrent, c_unitPropCurrent) == 0.0)) {
                        lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType]);
                    }
                    else {
                        lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType]);
                    }
                    libNtve_gf_UnitCreateFacingPoint(1, lib6CB3363F_gv_fT_WeaponBulletUnit[lp_gunType], c_unitCreateIgnorePlacement, lp_playerFiring, PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponBulletYOffset[lp_gunType], (((lv_tAngle + lib6CB3363F_gv_fT_WeaponBulletXOffset[lp_gunType]) + (lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType] * 2.0)) + lv_randomSpreadAngle)), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), 5.0, ((lv_tAngle + (lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType] * 2.0)) + lv_randomSpreadAngle)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BulletTarget", 0), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponRange[lp_gunType], ((lv_tAngle + (lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType] * 2.0)) + lv_randomSpreadAngle))), c_orderQueueReplace);
                    UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring])) + 0.5), 0.0);
                    UnitBehaviorAdd(UnitLastCreated(), lib6CB3363F_gv_fT_WeaponBulletBehavior[lp_gunType], UnitLastCreated(), 1);
                    if ((UnitGetPropertyFixed(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], c_unitPropMovementSpeedCurrent, c_unitPropCurrent) == 0.0)) {
                        lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceStationary[lp_gunType]);
                    }
                    else {
                        lv_randomSpreadAngle = RandomFixed((lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType] * -1.0), lib6CB3363F_gv_fT_WeaponAccuracyVarianceMoving[lp_gunType]);
                    }
                    libNtve_gf_UnitCreateFacingPoint(1, lib6CB3363F_gv_fT_WeaponBulletUnit[lp_gunType], c_unitCreateIgnorePlacement, lp_playerFiring, PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponBulletYOffset[lp_gunType], (((lv_tAngle + lib6CB3363F_gv_fT_WeaponBulletXOffset[lp_gunType]) - (lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType] * 2.0)) + lv_randomSpreadAngle)), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), 5.0, ((lv_tAngle - (lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType] * 2.0)) + lv_randomSpreadAngle)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BulletTarget", 0), PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), lib6CB3363F_gv_fT_WeaponRange[lp_gunType], ((lv_tAngle - (lib6CB3363F_gv_fT_WeaponBulletSpreadAngle[lp_gunType] * 2.0)) + lv_randomSpreadAngle))), c_orderQueueReplace);
                    UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring])) + 0.5), 0.0);
                    UnitBehaviorAdd(UnitLastCreated(), lib6CB3363F_gv_fT_WeaponBulletBehavior[lp_gunType], UnitLastCreated(), 1);
                }

                Wait(lib6CB3363F_gv_fT_WeaponBulletShotTiming[lp_gunType], c_timeGame);
            }

        }
        else {
            if ((lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[lp_playerFiring][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_playerFiring]] > 0)) {
                TextTagCreate(StringExternal("Param/Value/lib_6CB3363F_9300D27B"), 24, UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring]), 1.0, true, false, PlayerGroupAll());
                TextTagAttachToUnit(TextTagLastCreated(), lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], 1.0);
                lib6CB3363F_gv_fT_PlayerReloadingTextTag[lp_playerFiring] = TextTagLastCreated();
                UnitBehaviorAdd(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], "PlayerReloading", lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], 1);
                UnitBehaviorSetDuration(lib6CB3363F_gv_fT_PlayerUnit[lp_playerFiring], "PlayerReloading", lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lp_gunType]);
                lib6CB3363F_gv_fT_PlayerWeaponCurrentReloadTimer[lp_playerFiring] = lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lp_gunType];
                if ((lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[lp_playerFiring][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_playerFiring]] >= lib6CB3363F_gv_fT_WeaponAmmoClipSize[lp_gunType])) {
                    lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[lp_playerFiring][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_playerFiring]] = lib6CB3363F_gv_fT_WeaponAmmoClipSize[lp_gunType];
                    lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[lp_playerFiring][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_playerFiring]] -= lib6CB3363F_gv_fT_WeaponAmmoClipSize[lp_gunType];
                    lib6CB3363F_gf_UpdateAmmoDialog(lp_playerFiring);
                }
                else {
                    lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[lp_playerFiring][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_playerFiring]] = lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[lp_playerFiring][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_playerFiring]];
                    lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[lp_playerFiring][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_playerFiring]] = 0;
                    lib6CB3363F_gf_UpdateAmmoDialog(lp_playerFiring);
                }
            }

        }
    }
}

void lib6CB3363F_gf_UpdateAmmoDialog (int lp_player) {
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_6CB3363F_1F331BA8", "WeaponName", StringToText(lib6CB3363F_gv_fT_WeaponName[lib6CB3363F_gv_fT_PlayerWeaponType[lp_player][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_player]]]));
    TextExpressionSetToken("Param/Expression/lib_6CB3363F_1F331BA8", "WeaponClipCurrent", IntToText(lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[lp_player][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_player]]));
    TextExpressionSetToken("Param/Expression/lib_6CB3363F_1F331BA8", "WeaponClipMax", IntToText(lib6CB3363F_gv_fT_WeaponAmmoClipSize[lib6CB3363F_gv_fT_PlayerWeaponType[lp_player][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_player]]]));
    TextExpressionSetToken("Param/Expression/lib_6CB3363F_1F331BA8", "WeaponAmmoCurrent", IntToText(lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[lp_player][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lp_player]]));
    libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogAmmoLabel, TextExpressionAssemble("Param/Expression/lib_6CB3363F_1F331BA8"), PlayerGroupSingle(lp_player));
}

void lib6CB3363F_gf_AddEquipmentToPlayer (int lp_player, int lp_equipment) {
    int auto0CF97EB0_ae;
    int auto0CF97EB0_ai;

    // Variable Declarations
    int lv_i;
    int lv_slot;
    bool lv_slotFound;

    // Variable Initialization

    // Implementation
    auto0CF97EB0_ae = 1;
    auto0CF97EB0_ai = -1;
    lv_i = lib6CB3363F_gv_fT_EquipSlots;
    for ( ; ( (auto0CF97EB0_ai >= 0 && lv_i <= auto0CF97EB0_ae) || (auto0CF97EB0_ai <= 0 && lv_i >= auto0CF97EB0_ae) ) ; lv_i += auto0CF97EB0_ai ) {
        if ((lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lv_i] == 0)) {
            lv_slot = lv_i;
            lv_slotFound = true;
        }

    }
    if ((lv_slotFound == true)) {
        lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lv_slot] = lp_equipment;
        lib6CB3363F_gv_fT_PlayerEquipmentCountMax[lp_player][lv_slot] = lib6CB3363F_gv_fT_EquipmentCountMax[lp_equipment];
        lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[lp_player][lv_slot] = lib6CB3363F_gv_fT_EquipmentCountMax[lp_equipment];
        lib6CB3363F_gv_fT_PlayerEquipmentToggleState[lp_player][lv_slot] = false;
    }

}

void lib6CB3363F_gf_EquipmentUsed (int lp_player, int lp_equipmentSlot) {
    // Variable Declarations
    int lv_equipID;
    string lv_effect;
    string lv_behavior;

    // Variable Initialization
    lv_equipID = lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipmentSlot];

    // Implementation
    lv_effect = lib6CB3363F_gv_fT_EquipmentEffect[lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipmentSlot]];
    lv_behavior = lib6CB3363F_gv_fT_EquipmentBehavior[lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipmentSlot]];
    if ((lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[lp_player][lp_equipmentSlot] > 0)) {
        if ((lib6CB3363F_gv_fT_EquipmentTargetable[lv_equipID] == true)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_player]), Point(lib6CB3363F_gv_fT_MousePosX[lp_player], lib6CB3363F_gv_fT_MousePosY[lp_player])) > lib6CB3363F_gv_fT_EquipmentRange[lv_equipID])) {
                UnitCreateEffectPoint(lib6CB3363F_gv_fT_PlayerUnit[lp_player], lv_effect, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[lp_player]), lib6CB3363F_gv_fT_EquipmentRange[lv_equipID], Point(lib6CB3363F_gv_fT_MousePosX[lp_player], lib6CB3363F_gv_fT_MousePosY[lp_player])));
            }
            else {
                UnitCreateEffectPoint(lib6CB3363F_gv_fT_PlayerUnit[lp_player], lv_effect, Point(lib6CB3363F_gv_fT_MousePosX[lp_player], lib6CB3363F_gv_fT_MousePosY[lp_player]));
            }
            lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[lp_player][lp_equipmentSlot] -= 1;
        }
        else {
            if ((lib6CB3363F_gv_fT_EquipmentToggleable[lv_equipID] == true)) {
                if ((lib6CB3363F_gv_fT_PlayerEquipmentToggleState[lp_player][lp_equipmentSlot] == true)) {
                    UnitBehaviorRemove(lib6CB3363F_gv_fT_PlayerUnit[lp_player], lib6CB3363F_gv_fT_EquipmentBehavior[lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipmentSlot]], 1);
                    lib6CB3363F_gv_fT_PlayerEquipmentToggleState[lp_player][lp_equipmentSlot] = false;
                }
                else {
                    UnitBehaviorAdd(lib6CB3363F_gv_fT_PlayerUnit[lp_player], lib6CB3363F_gv_fT_EquipmentBehavior[lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipmentSlot]], lib6CB3363F_gv_fT_PlayerUnit[lp_player], 1);
                    lib6CB3363F_gv_fT_PlayerEquipmentToggleState[lp_player][lp_equipmentSlot] = true;
                }
            }

        }
    }

    lib6CB3363F_gf_UpdateEquipDialog(lp_player, lp_equipmentSlot);
}

void lib6CB3363F_gf_UpdateEquipDialog (int lp_player, int lp_equipSlot) {
    // Implementation
    if ((lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipSlot] == 0)) {
        libNtve_gf_SetDialogItemImage(lib6CB3363F_gv_fT_DialogEquipImage[lp_equipSlot], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogEquipLabel[lp_equipSlot], StringToText(""), PlayerGroupSingle(lp_player));
    }
    else {
        libNtve_gf_SetDialogItemImage(lib6CB3363F_gv_fT_DialogEquipImage[lp_equipSlot], lib6CB3363F_gv_fT_EquipmentIcon[lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipSlot]], PlayerGroupSingle(lp_player));
        if ((lib6CB3363F_gv_fT_EquipmentToggleable[lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipSlot]] == true)) {
            if ((lib6CB3363F_gv_fT_PlayerEquipmentToggleState[lp_player][lp_equipSlot] == true)) {
                libNtve_gf_SetDialogItemTintColor(lib6CB3363F_gv_fT_DialogEquipImage[lp_equipSlot], Color(100,100,100), PlayerGroupSingle(lp_player));
                TextExpressionSetToken("Param/Expression/lib_6CB3363F_6B840699", "Hotkey", StringToText(lib6CB3363F_gv_fT_PlayerEquipmentSlotHotkeys[lp_equipSlot]));
                TextExpressionSetToken("Param/Expression/lib_6CB3363F_6B840699", "EquipName", StringToText(lib6CB3363F_gv_fT_EquipmentName[lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipSlot]]));
                libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogEquipLabel[lp_equipSlot], TextExpressionAssemble("Param/Expression/lib_6CB3363F_6B840699"), PlayerGroupSingle(lp_player));
            }
            else {
                libNtve_gf_SetDialogItemTintColor(lib6CB3363F_gv_fT_DialogEquipImage[lp_equipSlot], Color(149*100/255,150*100/255,151*100/255), PlayerGroupSingle(lp_player));
                TextExpressionSetToken("Param/Expression/lib_6CB3363F_8A0D799B", "Hotkey", StringToText(lib6CB3363F_gv_fT_PlayerEquipmentSlotHotkeys[lp_equipSlot]));
                TextExpressionSetToken("Param/Expression/lib_6CB3363F_8A0D799B", "EquipName", StringToText(lib6CB3363F_gv_fT_EquipmentName[lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipSlot]]));
                libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogEquipLabel[lp_equipSlot], TextExpressionAssemble("Param/Expression/lib_6CB3363F_8A0D799B"), PlayerGroupSingle(lp_player));
            }
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_6CB3363F_A8CA6147", "Hotkey", StringToText(lib6CB3363F_gv_fT_PlayerEquipmentSlotHotkeys[lp_equipSlot]));
            TextExpressionSetToken("Param/Expression/lib_6CB3363F_A8CA6147", "EquipCount", IntToText(lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[lp_player][lp_equipSlot]));
            TextExpressionSetToken("Param/Expression/lib_6CB3363F_A8CA6147", "EquipCountMax", IntToText(lib6CB3363F_gv_fT_PlayerEquipmentCountMax[lp_player][lp_equipSlot]));
            TextExpressionSetToken("Param/Expression/lib_6CB3363F_A8CA6147", "EquipName", StringToText(lib6CB3363F_gv_fT_EquipmentName[lib6CB3363F_gv_fT_PlayerEquipmentType[lp_player][lp_equipSlot]]));
            libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogEquipLabel[lp_equipSlot], TextExpressionAssemble("Param/Expression/lib_6CB3363F_A8CA6147"), PlayerGroupSingle(lp_player));
        }
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: DialogButtonClicked
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_DialogButtonClicked_Func (bool testConds, bool runActions) {
    int autoDB4B0D23_val;
    int autoF22B68AE_ae;
    int autoF22B68AE_ai;
    int auto436443D7_ae;
    int auto436443D7_ai;
    int autoF353D32A_ae;
    int autoF353D32A_ai;
    int autoB1EF210F_ae;
    int autoB1EF210F_ai;
    int auto124738BE_ae;
    int auto124738BE_ai;
    playergroup auto307151DA_g;
    int auto307151DA_p;
    playergroup autoB533AD6E_g;
    int autoB533AD6E_p;

    // Variable Declarations
    int lv_i;
    bool lv_allPlayersReady;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB4B0D23_val = EventDialogControl();
    if (autoDB4B0D23_val == lib6CB3363F_gv_fT_DialogSelectionButton[1]) {
        autoF22B68AE_ae = 5;
        autoF22B68AE_ai = 1;
        lv_i = 1;
        for ( ; ( (autoF22B68AE_ai >= 0 && lv_i <= autoF22B68AE_ae) || (autoF22B68AE_ai <= 0 && lv_i >= autoF22B68AE_ae) ) ; lv_i += autoF22B68AE_ai ) {
            DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[1], PlayerGroupSingle(EventPlayer()), false);
        lib6CB3363F_gv_fT_GameSelection[EventPlayer()] = 1;
        lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][1] = 2;
        lib6CB3363F_gv_fT_PlayerWeaponCurrentCount[EventPlayer()] = 1;
        lib6CB3363F_gf_AddEquipmentToPlayer(EventPlayer(), (1));
        lib6CB3363F_gf_AddEquipmentToPlayer(EventPlayer(), (5));
        lib6CB3363F_gf_ResetAmmo(EventPlayer());
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionReadyButton, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (autoDB4B0D23_val == lib6CB3363F_gv_fT_DialogSelectionButton[2]) {
        auto436443D7_ae = 5;
        auto436443D7_ai = 1;
        lv_i = 1;
        for ( ; ( (auto436443D7_ai >= 0 && lv_i <= auto436443D7_ae) || (auto436443D7_ai <= 0 && lv_i >= auto436443D7_ae) ) ; lv_i += auto436443D7_ai ) {
            DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[2], PlayerGroupSingle(EventPlayer()), false);
        lib6CB3363F_gv_fT_GameSelection[EventPlayer()] = 2;
        lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][1] = 5;
        lib6CB3363F_gv_fT_PlayerWeaponCurrentCount[EventPlayer()] = 1;
        lib6CB3363F_gf_AddEquipmentToPlayer(EventPlayer(), (1));
        lib6CB3363F_gf_ResetAmmo(EventPlayer());
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionReadyButton, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (autoDB4B0D23_val == lib6CB3363F_gv_fT_DialogSelectionButton[3]) {
        autoF353D32A_ae = 5;
        autoF353D32A_ai = 1;
        lv_i = 1;
        for ( ; ( (autoF353D32A_ai >= 0 && lv_i <= autoF353D32A_ae) || (autoF353D32A_ai <= 0 && lv_i >= autoF353D32A_ae) ) ; lv_i += autoF353D32A_ai ) {
            DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[3], PlayerGroupSingle(EventPlayer()), false);
        lib6CB3363F_gv_fT_GameSelection[EventPlayer()] = 3;
        lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][1] = 4;
        lib6CB3363F_gv_fT_PlayerWeaponCurrentCount[EventPlayer()] = 1;
        lib6CB3363F_gf_AddEquipmentToPlayer(EventPlayer(), (1));
        lib6CB3363F_gf_ResetAmmo(EventPlayer());
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionReadyButton, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (autoDB4B0D23_val == lib6CB3363F_gv_fT_DialogSelectionButton[4]) {
        autoB1EF210F_ae = 5;
        autoB1EF210F_ai = 1;
        lv_i = 1;
        for ( ; ( (autoB1EF210F_ai >= 0 && lv_i <= autoB1EF210F_ae) || (autoB1EF210F_ai <= 0 && lv_i >= autoB1EF210F_ae) ) ; lv_i += autoB1EF210F_ai ) {
            DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[4], PlayerGroupSingle(EventPlayer()), false);
        lib6CB3363F_gv_fT_GameSelection[EventPlayer()] = 4;
        lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][1] = 6;
        lib6CB3363F_gv_fT_PlayerWeaponCurrentCount[EventPlayer()] = 1;
        lib6CB3363F_gf_AddEquipmentToPlayer(EventPlayer(), (1));
        lib6CB3363F_gf_ResetAmmo(EventPlayer());
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionReadyButton, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (autoDB4B0D23_val == lib6CB3363F_gv_fT_DialogSelectionButton[5]) {
        auto124738BE_ae = 5;
        auto124738BE_ai = 1;
        lv_i = 1;
        for ( ; ( (auto124738BE_ai >= 0 && lv_i <= auto124738BE_ae) || (auto124738BE_ai <= 0 && lv_i >= auto124738BE_ae) ) ; lv_i += auto124738BE_ai ) {
            DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionButton[5], PlayerGroupSingle(EventPlayer()), false);
        lib6CB3363F_gv_fT_GameSelection[EventPlayer()] = 5;
        lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][1] = 1;
        lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][2] = 7;
        lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][3] = 8;
        lib6CB3363F_gv_fT_PlayerWeaponCurrentCount[EventPlayer()] = 3;
        lib6CB3363F_gv_fT_PlayerEquipmentType[EventPlayer()][1] = 1;
        lib6CB3363F_gv_fT_PlayerEquipmentCountMax[EventPlayer()][1] = lib6CB3363F_gv_fT_EquipmentCountMax[1];
        lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][1] = lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][1];
        lib6CB3363F_gf_ResetAmmo(EventPlayer());
        DialogControlSetEnabled(lib6CB3363F_gv_fT_DialogSelectionReadyButton, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (autoDB4B0D23_val == lib6CB3363F_gv_fT_DialogSelectionReadyButton) {
        if ((lib6CB3363F_gv_fT_GameReady[EventPlayer()] == false)) {
            lib6CB3363F_gv_fT_GameReady[EventPlayer()] = true;
            libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogSelectionReadyButton, StringExternal("Param/Value/lib_6CB3363F_61AC1AD4"), PlayerGroupSingle(EventPlayer()));
            lv_allPlayersReady = true;
            auto307151DA_g = PlayerGroupActive(); 
            auto307151DA_p = 1;
            for ( ; auto307151DA_p <= PlayerGroupCount(auto307151DA_g) ; auto307151DA_p += BoolToInt(lv_i == PlayerGroupPlayer(auto307151DA_g, auto307151DA_p)) ) {
                lv_i = PlayerGroupPlayer(auto307151DA_g, auto307151DA_p);
                if (((lib6CB3363F_gv_fT_GameReady[lv_i] == false) && (PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser))) {
                    lv_allPlayersReady = false;
                }

            }
            if ((lv_allPlayersReady == true)) {
                TriggerSendEvent("PlayersPicked");
                autoB533AD6E_g = PlayerGroupActive(); 
                autoB533AD6E_p = 1;
                for ( ; autoB533AD6E_p <= PlayerGroupCount(autoB533AD6E_g) ; autoB533AD6E_p += BoolToInt(lv_i == PlayerGroupPlayer(autoB533AD6E_g, autoB533AD6E_p)) ) {
                    lv_i = PlayerGroupPlayer(autoB533AD6E_g, autoB533AD6E_p);
                    if (((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser))) {
                        DialogSetVisible(lib6CB3363F_gv_fT_DialogSelection, PlayerGroupSingle(lv_i), false);
                    }

                }
            }

        }
        else {
            lib6CB3363F_gv_fT_GameReady[EventPlayer()] = false;
            libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogSelectionReadyButton, StringExternal("Param/Value/lib_6CB3363F_840B5A13"), PlayerGroupSingle(EventPlayer()));
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_DialogButtonClicked_Init () {
    lib6CB3363F_gt_DialogButtonClicked = TriggerCreate("lib6CB3363F_gt_DialogButtonClicked_Func");
    TriggerAddEventDialogControl(lib6CB3363F_gt_DialogButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timers All Players
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_TimersAllPlayers_Func (bool testConds, bool runActions) {
    int auto04A80D74_ae;
    int auto04A80D74_ai;

    // Variable Declarations
    int lv_i;
    fixed lv_px;
    fixed lv_py;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto04A80D74_ae = 4;
    auto04A80D74_ai = 1;
    lv_i = 1;
    for ( ; ( (auto04A80D74_ai >= 0 && lv_i <= auto04A80D74_ae) || (auto04A80D74_ai <= 0 && lv_i >= auto04A80D74_ae) ) ; lv_i += auto04A80D74_ai ) {
        lib6CB3363F_gf_MovementAction(lv_i);
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            lib6CB3363F_gv_fT_PlayerMeleeTimer[lv_i] -= 0.0625;
            lib6CB3363F_gv_fT_PlayerWeaponCurrentRefire[lv_i] -= 0.0625;
            lib6CB3363F_gv_fT_PlayerWeaponCurrentReloadTimer[lv_i] -= 0.0625;
            TextExpressionSetToken("Param/Expression/lib_6CB3363F_D8938D90", "Health", FixedToText(UnitGetPropertyFixed(lib6CB3363F_gv_fT_PlayerUnit[lv_i], c_unitPropLife, c_unitPropCurrent), 0));
            libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[lv_i], TextExpressionAssemble("Param/Expression/lib_6CB3363F_D8938D90"), PlayerGroupAll());
            if ((UnitHasBehavior2(lib6CB3363F_gv_fT_PlayerUnit[lv_i], "FrontiersIncapacitated") == false)) {
                libNtve_gf_MakeUnitFacePoint(lib6CB3363F_gv_fT_PlayerUnit[lv_i], Point(lib6CB3363F_gv_fT_MousePosX[lv_i], lib6CB3363F_gv_fT_MousePosY[lv_i]), 0.0625);
            }

        }
        else {
            libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogPlayerInfoLabel[lv_i], StringToText(""), PlayerGroupAll());
        }
        if ((lib6CB3363F_gv_fT_PlayerSlowSpeedEnabled[lv_i] == true)) {
            lib6CB3363F_gv_fT_PlayerSlowSpeedDurationCurrent[lv_i] -= 0.0625;
            if ((lib6CB3363F_gv_fT_PlayerSlowSpeedDurationCurrent[lv_i] <= 0.0)) {
                CatalogFieldValueSet(c_gameCatalogUnit, lib6CB3363F_gv_fT_GameUnitType[lib6CB3363F_gv_fT_GameSelection[lv_i]], "Speed", lv_i, FixedToString(lib6CB3363F_gv_fT_PlayerSpeedTotal[lv_i], c_fixedPrecisionAny));
            }

        }

        if ((lib6CB3363F_gv_fT_KeyFireActive[lv_i] == true)) {
            if (((lib6CB3363F_gv_fT_PlayerWeaponCurrentRefire[lv_i] <= 0.0) && (lib6CB3363F_gv_fT_PlayerWeaponCurrentReloadTimer[lv_i] <= 0.0) && (lib6CB3363F_gv_fT_PlayerMeleeTimer[lv_i] <= 0.0))) {
                lib6CB3363F_gf_PlayerFireBullet(lv_i, Point(lib6CB3363F_gv_fT_MousePosX[lv_i], lib6CB3363F_gv_fT_MousePosY[lv_i]), lib6CB3363F_gv_fT_PlayerWeaponType[lv_i][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lv_i]]);
                if ((lib6CB3363F_gv_fT_WeaponIsAutomatic[lib6CB3363F_gv_fT_PlayerWeaponType[lv_i][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[lv_i]]] == false)) {
                    lib6CB3363F_gv_fT_KeyFireActive[lv_i] = false;
                }

            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_TimersAllPlayers_Init () {
    lib6CB3363F_gt_TimersAllPlayers = TriggerCreate("lib6CB3363F_gt_TimersAllPlayers_Func");
    TriggerAddEventTimePeriodic(lib6CB3363F_gt_TimersAllPlayers, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SprintPressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_SprintPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeySprintActive[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_SprintPressed_Init () {
    lib6CB3363F_gt_SprintPressed = TriggerCreate("lib6CB3363F_gt_SprintPressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_SprintPressed, c_playerAny, c_keyShift, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_SprintPressed, c_playerAny, c_keyNumPad0, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SprintReleased
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_SprintReleased_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeySprintActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_SprintReleased_Init () {
    lib6CB3363F_gt_SprintReleased = TriggerCreate("lib6CB3363F_gt_SprintReleased_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_SprintReleased, c_playerAny, c_keyShift, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_SprintReleased, c_playerAny, c_keyNumPad0, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpPressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_UpPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyUpActive[EventPlayer()] = true;
    lib6CB3363F_gf_MovementAction(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_UpPressed_Init () {
    lib6CB3363F_gt_UpPressed = TriggerCreate("lib6CB3363F_gt_UpPressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_UpPressed, c_playerAny, c_keyW, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_UpPressed, c_playerAny, c_keyUp, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_UpPressed, c_playerAny, c_keyNumPad8, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpReleased
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_UpReleased_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyUpActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_UpReleased_Init () {
    lib6CB3363F_gt_UpReleased = TriggerCreate("lib6CB3363F_gt_UpReleased_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_UpReleased, c_playerAny, c_keyW, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_UpReleased, c_playerAny, c_keyUp, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_UpReleased, c_playerAny, c_keyNumPad8, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownPressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_DownPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyDownActive[EventPlayer()] = true;
    lib6CB3363F_gf_MovementAction(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_DownPressed_Init () {
    lib6CB3363F_gt_DownPressed = TriggerCreate("lib6CB3363F_gt_DownPressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_DownPressed, c_playerAny, c_keyS, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_DownPressed, c_playerAny, c_keyDown, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_DownPressed, c_playerAny, c_keyNumPad2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DownReleased
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_DownReleased_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyDownActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_DownReleased_Init () {
    lib6CB3363F_gt_DownReleased = TriggerCreate("lib6CB3363F_gt_DownReleased_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_DownReleased, c_playerAny, c_keyS, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_DownReleased, c_playerAny, c_keyDown, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_DownReleased, c_playerAny, c_keyNumPad2, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LeftPressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_LeftPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyLeftActive[EventPlayer()] = true;
    lib6CB3363F_gf_MovementAction(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_LeftPressed_Init () {
    lib6CB3363F_gt_LeftPressed = TriggerCreate("lib6CB3363F_gt_LeftPressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_LeftPressed, c_playerAny, c_keyA, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_LeftPressed, c_playerAny, c_keyLeft, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_LeftPressed, c_playerAny, c_keyNumPad1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LeftReleased
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_LeftReleased_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyLeftActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_LeftReleased_Init () {
    lib6CB3363F_gt_LeftReleased = TriggerCreate("lib6CB3363F_gt_LeftReleased_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_LeftReleased, c_playerAny, c_keyA, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_LeftReleased, c_playerAny, c_keyLeft, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_LeftReleased, c_playerAny, c_keyNumPad1, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RightPressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_RightPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyRightActive[EventPlayer()] = true;
    lib6CB3363F_gf_MovementAction(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_RightPressed_Init () {
    lib6CB3363F_gt_RightPressed = TriggerCreate("lib6CB3363F_gt_RightPressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_RightPressed, c_playerAny, c_keyD, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_RightPressed, c_playerAny, c_keyRight, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_RightPressed, c_playerAny, c_keyNumPad3, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RightReleased
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_RightReleased_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyRightActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_RightReleased_Init () {
    lib6CB3363F_gt_RightReleased = TriggerCreate("lib6CB3363F_gt_RightReleased_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_RightReleased, c_playerAny, c_keyD, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_RightReleased, c_playerAny, c_keyRight, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_RightReleased, c_playerAny, c_keyNumPad3, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InteractPressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_InteractPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerInteractAvailable[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyInteractActive[EventPlayer()] = true;
    UnitBehaviorAdd(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "InteractInProgress", lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], 1);
    lib6CB3363F_gv_fT_KeyFireActive[EventPlayer()] = false;
    ActorSend(libNtve_gf_MainActorofUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()]), "StatusSet Ready 0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_InteractPressed_Init () {
    lib6CB3363F_gt_InteractPressed = TriggerCreate("lib6CB3363F_gt_InteractPressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_InteractPressed, c_playerAny, c_keyE, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_InteractPressed, c_playerAny, c_keyNumPad7, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InteractReleased
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_InteractReleased_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyInteractActive[EventPlayer()] = false;
    UnitBehaviorRemove(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "InteractInProgress", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_InteractReleased_Init () {
    lib6CB3363F_gt_InteractReleased = TriggerCreate("lib6CB3363F_gt_InteractReleased_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_InteractReleased, c_playerAny, c_keyE, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_InteractReleased, c_playerAny, c_keyNumPad7, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZoomIn
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_ZoomIn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(EventPlayer(), lib6CB3363F_gv_fT_CameraClose, 1.0, -1, 10.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_ZoomIn_Init () {
    lib6CB3363F_gt_ZoomIn = TriggerCreate("lib6CB3363F_gt_ZoomIn_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_ZoomIn, c_playerAny, c_keyInsert, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZoomOut
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_ZoomOut_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(EventPlayer(), lib6CB3363F_gv_fT_CameraStandard, 1.0, -1, 10.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_ZoomOut_Init () {
    lib6CB3363F_gt_ZoomOut = TriggerCreate("lib6CB3363F_gt_ZoomOut_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_ZoomOut, c_playerAny, c_keyDelete, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FrontierPlayerIncapacitated
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_FrontierPlayerIncapacitated_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyFireActive[UnitGetOwner(EventUnit())] = false;
    lib6CB3363F_gv_fT_PlayerIncapacitated[UnitGetOwner(EventUnit())] = true;
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal IncapOn");
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_FrontierPlayerIncapacitated_Init () {
    lib6CB3363F_gt_FrontierPlayerIncapacitated = TriggerCreate("lib6CB3363F_gt_FrontierPlayerIncapacitated_Func");
    TriggerAddEventUnitBehaviorChange(lib6CB3363F_gt_FrontierPlayerIncapacitated, null, "FrontiersIncapacitated", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FrontierPlayerGotBetter
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_FrontierPlayerGotBetter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_PlayerIncapacitated[UnitGetOwner(EventUnit())] = false;
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal IncapOff");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_FrontierPlayerGotBetter_Init () {
    lib6CB3363F_gt_FrontierPlayerGotBetter = TriggerCreate("lib6CB3363F_gt_FrontierPlayerGotBetter_Func");
    TriggerAddEventUnitBehaviorChange(lib6CB3363F_gt_FrontierPlayerGotBetter, null, "FrontiersIncapacitated", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FrontierPlayerInteractAvailable
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_FrontierPlayerInteractAvailable_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/lib_6CB3363F_7E228A17"), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 2.0);
    TextTagShow(TextTagLastCreated(), PlayerGroupSingle(UnitGetOwner(EventUnit())), true);
    lib6CB3363F_gv_fT_PlayerInteractTextTag[UnitGetOwner(EventUnit())] = TextTagLastCreated();
    lib6CB3363F_gv_fT_PlayerInteractAvailable[UnitGetOwner(EventUnit())] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_FrontierPlayerInteractAvailable_Init () {
    lib6CB3363F_gt_FrontierPlayerInteractAvailable = TriggerCreate("lib6CB3363F_gt_FrontierPlayerInteractAvailable_Func");
    TriggerAddEventUnitBehaviorChange(lib6CB3363F_gt_FrontierPlayerInteractAvailable, null, "PlayerInteractAvailable", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FrontierPlayerInteractUnavailable
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_FrontierPlayerInteractUnavailable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(lib6CB3363F_gv_fT_PlayerInteractTextTag[UnitGetOwner(EventUnit())]);
    lib6CB3363F_gv_fT_PlayerInteractAvailable[UnitGetOwner(EventUnit())] = false;
    UnitBehaviorRemove(lib6CB3363F_gv_fT_PlayerUnit[UnitGetOwner(EventUnit())], "InteractInProgress", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_FrontierPlayerInteractUnavailable_Init () {
    lib6CB3363F_gt_FrontierPlayerInteractUnavailable = TriggerCreate("lib6CB3363F_gt_FrontierPlayerInteractUnavailable_Func");
    TriggerAddEventUnitBehaviorChange(lib6CB3363F_gt_FrontierPlayerInteractUnavailable, null, "PlayerInteractAvailable", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MouseWheelWeaponChange
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_MouseWheelWeaponChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spin;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spin = FixedToInt(EventMouseWheelSpin());
    lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()] += lv_spin;
    if ((lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()] < 1)) {
        lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()] = lib6CB3363F_gv_fT_PlayerWeaponCurrentCount[EventPlayer()];
    }

    if ((lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()] > lib6CB3363F_gv_fT_PlayerWeaponCurrentCount[EventPlayer()])) {
        lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()] = 1;
    }

    lib6CB3363F_gf_UpdateAmmoDialog(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_MouseWheelWeaponChange_Init () {
    lib6CB3363F_gt_MouseWheelWeaponChange = TriggerCreate("lib6CB3363F_gt_MouseWheelWeaponChange_Func");
    TriggerAddEventMouseWheel(lib6CB3363F_gt_MouseWheelWeaponChange, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MouseRightClickPressedMelee
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_MouseRightClickPressedMelee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_tAngle;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((UnitIsValid(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()]) == true))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerMeleeTimer[EventPlayer()] <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_PlayerMeleeTimer[EventPlayer()] = 1.0;
    UnitCreateEffectPoint(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], lib6CB3363F_gv_fT_PlayerMeleeEffect[EventPlayer()], PointWithOffsetPolar(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()]), 0.2, AngleBetweenPoints(UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()]), Point(lib6CB3363F_gv_fT_MousePosX[EventPlayer()], lib6CB3363F_gv_fT_MousePosY[EventPlayer()]))));
    libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "Signal Melee");
    lib6CB3363F_gv_fT_KeyInteractActive[EventPlayer()] = false;
    UnitBehaviorRemove(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "InteractInProgress", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_MouseRightClickPressedMelee_Init () {
    lib6CB3363F_gt_MouseRightClickPressedMelee = TriggerCreate("lib6CB3363F_gt_MouseRightClickPressedMelee_Func");
    TriggerAddEventMouseClicked(lib6CB3363F_gt_MouseRightClickPressedMelee, c_playerAny, c_mouseButtonRight, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MouseLeftClickPressedFireWeapon
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_MouseLeftClickPressedFireWeapon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_tAngle;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((UnitIsValid(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()]) == true))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyFireActive[EventPlayer()] = true;
    ActorSend(libNtve_gf_MainActorofUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()]), "StatusSet Ready 1");
    lib6CB3363F_gv_fT_KeyInteractActive[EventPlayer()] = false;
    UnitBehaviorRemove(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "InteractInProgress", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_MouseLeftClickPressedFireWeapon_Init () {
    lib6CB3363F_gt_MouseLeftClickPressedFireWeapon = TriggerCreate("lib6CB3363F_gt_MouseLeftClickPressedFireWeapon_Func");
    TriggerAddEventMouseClicked(lib6CB3363F_gt_MouseLeftClickPressedFireWeapon, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MouseLeftClickReleased
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_MouseLeftClickReleased_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_tAngle;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((UnitIsValid(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()]) == true))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_KeyFireActive[EventPlayer()] = false;
    ActorSend(libNtve_gf_MainActorofUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()]), "StatusSet Ready 0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_MouseLeftClickReleased_Init () {
    lib6CB3363F_gt_MouseLeftClickReleased = TriggerCreate("lib6CB3363F_gt_MouseLeftClickReleased_Func");
    TriggerAddEventMouseClicked(lib6CB3363F_gt_MouseLeftClickReleased, c_playerAny, c_mouseButtonLeft, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MouseMoveUpdate
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_MouseMoveUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_MousePosX[EventPlayer()] = EventMouseMovedPosXWorld();
    lib6CB3363F_gv_fT_MousePosY[EventPlayer()] = EventMouseMovedPosYWorld();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_MouseMoveUpdate_Init () {
    lib6CB3363F_gt_MouseMoveUpdate = TriggerCreate("lib6CB3363F_gt_MouseMoveUpdate_Func");
    TriggerAddEventMouseMoved(lib6CB3363F_gt_MouseMoveUpdate, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReloadPressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_ReloadPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ammoCountNeeded;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerWeaponCurrentReloadTimer[EventPlayer()] <= 0.0))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]] < lib6CB3363F_gv_fT_WeaponAmmoClipSize[lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]]]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]] > 0)) {
        TextTagCreate(StringExternal("Param/Value/lib_6CB3363F_0188F9D0"), 24, UnitGetPosition(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()]), 1.0, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], 1.0);
        lib6CB3363F_gv_fT_PlayerReloadingTextTag[EventPlayer()] = TextTagLastCreated();
        UnitBehaviorAdd(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "PlayerReloading", lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], 1);
        UnitBehaviorSetDuration(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "PlayerReloading", lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]]]);
        lib6CB3363F_gv_fT_PlayerWeaponCurrentReloadTimer[EventPlayer()] = lib6CB3363F_gv_fT_WeaponAmmoReloadTimeMax[lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]]];
        lv_ammoCountNeeded = (lib6CB3363F_gv_fT_WeaponAmmoClipSize[lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]]] - lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]]);
        if ((lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]] >= lv_ammoCountNeeded)) {
            lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]] = lib6CB3363F_gv_fT_WeaponAmmoClipSize[lib6CB3363F_gv_fT_PlayerWeaponType[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]]];
            lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]] -= lv_ammoCountNeeded;
            lib6CB3363F_gf_UpdateAmmoDialog(EventPlayer());
        }
        else {
            lib6CB3363F_gv_fT_PlayerWeaponCurrentClipAmmo[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]] = lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]];
            lib6CB3363F_gv_fT_PlayerWeaponCurrentAmmo[EventPlayer()][lib6CB3363F_gv_fT_PlayerWeaponCurrentSelected[EventPlayer()]] = 0;
            lib6CB3363F_gf_UpdateAmmoDialog(EventPlayer());
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_ReloadPressed_Init () {
    lib6CB3363F_gt_ReloadPressed = TriggerCreate("lib6CB3363F_gt_ReloadPressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_ReloadPressed, c_playerAny, c_keyR, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_ReloadPressed, c_playerAny, c_keyPageDown, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReloadTextTagCleanup
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_ReloadTextTagCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(lib6CB3363F_gv_fT_PlayerReloadingTextTag[UnitGetOwner(EventUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_ReloadTextTagCleanup_Init () {
    lib6CB3363F_gt_ReloadTextTagCleanup = TriggerCreate("lib6CB3363F_gt_ReloadTextTagCleanup_Func");
    TriggerAddEventUnitBehaviorChange(lib6CB3363F_gt_ReloadTextTagCleanup, null, "PlayerReloading", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuppliesPickupTriggered
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_SuppliesPickupTriggered_Func (bool testConds, bool runActions) {
    int auto0849DBC9_ae;
    int auto0849DBC9_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gf_ResetAmmo(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    auto0849DBC9_ae = lib6CB3363F_gv_fT_EquipSlots;
    auto0849DBC9_ai = 1;
    lv_i = 1;
    for ( ; ( (auto0849DBC9_ai >= 0 && lv_i <= auto0849DBC9_ae) || (auto0849DBC9_ai <= 0 && lv_i >= auto0849DBC9_ae) ) ; lv_i += auto0849DBC9_ai ) {
        lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)][lv_i] = lib6CB3363F_gv_fT_PlayerEquipmentCountMax[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)][lv_i];
        lib6CB3363F_gf_UpdateEquipDialog(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), lv_i);
    }
    lib6CB3363F_gf_UpdateAmmoDialog(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    TextTagCreate(StringExternal("Param/Value/lib_6CB3363F_E599EA4D"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    Wait(3.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_SuppliesPickupTriggered_Init () {
    lib6CB3363F_gt_SuppliesPickupTriggered = TriggerCreate("lib6CB3363F_gt_SuppliesPickupTriggered_Func");
    TriggerAddEventPlayerEffectUsed(lib6CB3363F_gt_SuppliesPickupTriggered, c_playerAny, "FrontiersPickupSupplies");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HydraliskFireWeapon
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_HydraliskFireWeapon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_tAngle;
    int lv_i;
    int lv_enemyPlayer;

    // Variable Initialization
    lv_enemyPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tAngle = AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BulletEnemySpine", c_unitCreateIgnorePlacement, lv_enemyPlayer, PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.2, lv_tAngle));
    libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 20.0, lv_tAngle), 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("BulletTarget", 0), PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 20.0, lv_tAngle)), c_orderQueueReplace);
    UnitSetHeight(UnitLastCreated(), (WorldHeight(c_heightMapGround, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster))) + 0.5), 0.0);
    UnitBehaviorAdd(UnitLastCreated(), "EnemyHydraliskBulletDamage", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_HydraliskFireWeapon_Init () {
    lib6CB3363F_gt_HydraliskFireWeapon = TriggerCreate("lib6CB3363F_gt_HydraliskFireWeapon_Func");
    TriggerAddEventPlayerEffectUsed(lib6CB3363F_gt_HydraliskFireWeapon, c_playerAny, "EnemyHydraliskNeedleSpines");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_GPressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][1] > 0)) {
        lib6CB3363F_gv_fT_KeyInteractActive[EventPlayer()] = false;
        UnitBehaviorRemove(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "InteractInProgress", 1);
        libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], lib6CB3363F_gv_fT_EquipmentActorMessageOn[lib6CB3363F_gv_fT_PlayerEquipmentType[EventPlayer()][1]]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_GPressed_Init () {
    lib6CB3363F_gt_GPressed = TriggerCreate("lib6CB3363F_gt_GPressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_GPressed, c_playerAny, c_keyG, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_GPressed, c_playerAny, c_keyNumPad9, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GReleased
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_GReleased_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][1] > 0)) {
        libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], lib6CB3363F_gv_fT_EquipmentActorMessageOff[lib6CB3363F_gv_fT_PlayerEquipmentType[EventPlayer()][1]]);
        lib6CB3363F_gf_EquipmentUsed(EventPlayer(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_GReleased_Init () {
    lib6CB3363F_gt_GReleased = TriggerCreate("lib6CB3363F_gt_GReleased_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt_GReleased, c_playerAny, c_keyG, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt_GReleased, c_playerAny, c_keyNumPad9, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1Pressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt__1Pressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][2] > 0)) {
        lib6CB3363F_gv_fT_KeyInteractActive[EventPlayer()] = false;
        UnitBehaviorRemove(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "InteractInProgress", 1);
        libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], lib6CB3363F_gv_fT_EquipmentActorMessageOn[lib6CB3363F_gv_fT_PlayerEquipmentType[EventPlayer()][2]]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt__1Pressed_Init () {
    lib6CB3363F_gt__1Pressed = TriggerCreate("lib6CB3363F_gt__1Pressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt__1Pressed, c_playerAny, c_key1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt__1Pressed, c_playerAny, c_keyNumPad4, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1Released
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt__1Released_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][2] > 0)) {
        libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], lib6CB3363F_gv_fT_EquipmentActorMessageOff[lib6CB3363F_gv_fT_PlayerEquipmentType[EventPlayer()][2]]);
        lib6CB3363F_gf_EquipmentUsed(EventPlayer(), 2);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt__1Released_Init () {
    lib6CB3363F_gt__1Released = TriggerCreate("lib6CB3363F_gt__1Released_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt__1Released, c_playerAny, c_key1, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt__1Released, c_playerAny, c_keyNumPad4, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2Pressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt__2Pressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][3] > 0)) {
        lib6CB3363F_gv_fT_KeyInteractActive[EventPlayer()] = false;
        UnitBehaviorRemove(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "InteractInProgress", 1);
        libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], lib6CB3363F_gv_fT_EquipmentActorMessageOn[lib6CB3363F_gv_fT_PlayerEquipmentType[EventPlayer()][3]]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt__2Pressed_Init () {
    lib6CB3363F_gt__2Pressed = TriggerCreate("lib6CB3363F_gt__2Pressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt__2Pressed, c_playerAny, c_key2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt__2Pressed, c_playerAny, c_keyNumPad6, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2Released
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt__2Released_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][3] > 0)) {
        libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], lib6CB3363F_gv_fT_EquipmentActorMessageOff[lib6CB3363F_gv_fT_PlayerEquipmentType[EventPlayer()][3]]);
        lib6CB3363F_gf_EquipmentUsed(EventPlayer(), 3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt__2Released_Init () {
    lib6CB3363F_gt__2Released = TriggerCreate("lib6CB3363F_gt__2Released_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt__2Released, c_playerAny, c_key2, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt__2Released, c_playerAny, c_keyNumPad6, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3Pressed
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt__3Pressed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][4] > 0)) {
        lib6CB3363F_gv_fT_KeyInteractActive[EventPlayer()] = false;
        UnitBehaviorRemove(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], "InteractInProgress", 1);
        libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], lib6CB3363F_gv_fT_EquipmentActorMessageOn[lib6CB3363F_gv_fT_PlayerEquipmentType[EventPlayer()][4]]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt__3Pressed_Init () {
    lib6CB3363F_gt__3Pressed = TriggerCreate("lib6CB3363F_gt__3Pressed_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt__3Pressed, c_playerAny, c_key3, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt__3Pressed, c_playerAny, c_keyNumPad9, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3Released
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt__3Released_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((lib6CB3363F_gv_fT_GameState == lib6CB3363F_ge_FrontiersGameState_FT_GameState_GamePlaying))) {
            return false;
        }

        if (!((lib6CB3363F_gv_fT_PlayerIncapacitated[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib6CB3363F_gv_fT_PlayerEquipmentCountCurrent[EventPlayer()][4] > 0)) {
        libNtve_gf_SendActorMessageToUnit(lib6CB3363F_gv_fT_PlayerUnit[EventPlayer()], lib6CB3363F_gv_fT_EquipmentActorMessageOff[lib6CB3363F_gv_fT_PlayerEquipmentType[EventPlayer()][4]]);
        lib6CB3363F_gf_EquipmentUsed(EventPlayer(), 4);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt__3Released_Init () {
    lib6CB3363F_gt__3Released = TriggerCreate("lib6CB3363F_gt__3Released_Func");
    TriggerAddEventKeyPressed(lib6CB3363F_gt__3Released, c_playerAny, c_key3, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib6CB3363F_gt__3Released, c_playerAny, c_keyNumPad9, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_Reset_Func (bool testConds, bool runActions) {
    int autoFF304B60_ae;
    int autoFF304B60_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib6CB3363F_gv_fT_GameState = lib6CB3363F_ge_FrontiersGameState_FT_GameState_CharacterSelect;
    DialogSetVisible(lib6CB3363F_gv_fT_DialogSelection, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(lib6CB3363F_gv_fT_DialogSelectionReadyButton, StringExternal("Param/Value/lib_6CB3363F_9A301A20"), PlayerGroupAll());
    autoFF304B60_ae = lib6CB3363F_gv_fT_Players;
    autoFF304B60_ai = 1;
    lv_i = 1;
    for ( ; ( (autoFF304B60_ai >= 0 && lv_i <= autoFF304B60_ae) || (autoFF304B60_ai <= 0 && lv_i >= autoFF304B60_ae) ) ; lv_i += autoFF304B60_ai ) {
        lib6CB3363F_gv_fT_GameReady[lv_i] = false;
        if ((lib6CB3363F_gv_fT_PlayerUnit[lv_i] != null)) {
            CameraFollowUnitGroup(lv_i, libNtve_gf_ConvertUnitToUnitGroup(lib6CB3363F_gv_fT_PlayerUnit[lv_i]), false, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_Reset_Init () {
    lib6CB3363F_gt_Reset = TriggerCreate("lib6CB3363F_gt_Reset_Func");
    TriggerAddEventChatMessage(lib6CB3363F_gt_Reset, c_playerAny, "reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ToggleSelection
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_ToggleSelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_ToggleSelection_Init () {
    lib6CB3363F_gt_ToggleSelection = TriggerCreate("lib6CB3363F_gt_ToggleSelection_Func");
    TriggerAddEventChatMessage(lib6CB3363F_gt_ToggleSelection, c_playerAny, "ts", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CommandCard
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_gt_CommandCard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib6CB3363F_gt_CommandCard_Init () {
    lib6CB3363F_gt_CommandCard = TriggerCreate("lib6CB3363F_gt_CommandCard_Func");
    TriggerAddEventChatMessage(lib6CB3363F_gt_CommandCard, c_playerAny, "ccard", true);
}

void lib6CB3363F_InitTriggers () {
    lib6CB3363F_gt_DialogButtonClicked_Init();
    lib6CB3363F_gt_TimersAllPlayers_Init();
    lib6CB3363F_gt_SprintPressed_Init();
    lib6CB3363F_gt_SprintReleased_Init();
    lib6CB3363F_gt_UpPressed_Init();
    lib6CB3363F_gt_UpReleased_Init();
    lib6CB3363F_gt_DownPressed_Init();
    lib6CB3363F_gt_DownReleased_Init();
    lib6CB3363F_gt_LeftPressed_Init();
    lib6CB3363F_gt_LeftReleased_Init();
    lib6CB3363F_gt_RightPressed_Init();
    lib6CB3363F_gt_RightReleased_Init();
    lib6CB3363F_gt_InteractPressed_Init();
    lib6CB3363F_gt_InteractReleased_Init();
    lib6CB3363F_gt_ZoomIn_Init();
    lib6CB3363F_gt_ZoomOut_Init();
    lib6CB3363F_gt_FrontierPlayerIncapacitated_Init();
    lib6CB3363F_gt_FrontierPlayerGotBetter_Init();
    lib6CB3363F_gt_FrontierPlayerInteractAvailable_Init();
    lib6CB3363F_gt_FrontierPlayerInteractUnavailable_Init();
    lib6CB3363F_gt_MouseWheelWeaponChange_Init();
    lib6CB3363F_gt_MouseRightClickPressedMelee_Init();
    lib6CB3363F_gt_MouseLeftClickPressedFireWeapon_Init();
    lib6CB3363F_gt_MouseLeftClickReleased_Init();
    lib6CB3363F_gt_MouseMoveUpdate_Init();
    lib6CB3363F_gt_ReloadPressed_Init();
    lib6CB3363F_gt_ReloadTextTagCleanup_Init();
    lib6CB3363F_gt_SuppliesPickupTriggered_Init();
    lib6CB3363F_gt_HydraliskFireWeapon_Init();
    lib6CB3363F_gt_GPressed_Init();
    lib6CB3363F_gt_GReleased_Init();
    lib6CB3363F_gt__1Pressed_Init();
    lib6CB3363F_gt__1Released_Init();
    lib6CB3363F_gt__2Pressed_Init();
    lib6CB3363F_gt__2Released_Init();
    lib6CB3363F_gt__3Pressed_Init();
    lib6CB3363F_gt__3Released_Init();
    lib6CB3363F_gt_Reset_Init();
    lib6CB3363F_gt_ToggleSelection_Init();
    lib6CB3363F_gt_CommandCard_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib6CB3363F_InitLib_completed = false;

void lib6CB3363F_InitLib () {
    if (lib6CB3363F_InitLib_completed) {
        return;
    }

    lib6CB3363F_InitLib_completed = true;

    lib6CB3363F_InitLibraries();
    lib6CB3363F_InitVariables();
    lib6CB3363F_InitTriggers();
}

