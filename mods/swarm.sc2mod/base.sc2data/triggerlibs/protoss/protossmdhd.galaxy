//==================================================================================================
//  Protoss MediumHard Skirmish AI
//  This is a generated file. Do not edit directly.
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  ProtossUpgradesMdHd
//--------------------------------------------------------------------------------------------------
void ProtossUpgradesMdHd (int player, int phase) {
    int buildType;

    if (phase < c_ldPhaseLate) {
        buildType = AIGetUserInt(player, c_openingBuildType);
    } else {
        buildType = AIGetUserInt(player, c_lateGameBuildType);
    }

    if (buildType != e_buildType_Air) {

        if (AITechCount(player, c_PB_CyberneticsCore, c_techCountCompleteOnly) > 0) {
            AISetStock( player, 1, c_PR_WarpGateResearch );
        }

        if (phase >= c_ldPhaseMid) {

            AISetStock( player, 1, c_PR_GroundWeapons1 );
            AISetStock( player, 1, c_PR_GroundArmor1 );
            if (AITechCount(player, c_PU_Zealot, c_techCountInProgressOrBetter) >= 8) {
                AISetStock( player, 1, c_PR_ZealotCharge );
            }
            if (AITechCount(player, c_PU_Stalker, c_techCountInProgressOrBetter) >= 6) {
                AISetStock( player, 1, c_PR_StalkerBlink );
            }

            if (phase >= c_ldPhaseLate) {

                AISetStock( player, 1, c_PR_GroundWeapons2 );
                AISetStock( player, 1, c_PR_GroundArmor2 );
                AISetStock( player, 1, c_PR_Shields2 );
                AISetStock( player, 1, c_PR_ObserverSpeed );
                AISetStock( player, 1, c_PR_WarpPrismSpeed );
                AISetStock( player, 1, c_PR_AirWeapons1 );
                AISetStock( player, 1, c_PR_AirArmor1 );

                if (phase >= c_ldPhaseFinal) {

                    if (AITechCount(player, c_PU_Colossus, c_techCountInProgressOrBetter) >= 2) {
                        AISetStock( player, 1, c_PR_ColossusRange );
                    }
                    if (AITechCount(player, c_PU_HighTemplar, c_techCountInProgressOrBetter) >= 1) {
                        AISetStock( player, 1, c_PR_HighTemplarPsiStorm );
                    }
                    AISetStock( player, 1, c_PR_GroundWeapons3 );
                    AISetStock( player, 1, c_PR_GroundArmor3 );
                    AISetStock( player, 1, c_PR_Shields3 );
                    if (AITechCount(player, c_PU_Phoenix, c_techCountInProgressOrBetter) >= 4) {
                        AISetStock( player, 1, c_PR_PhoenixRange );
                    }
                    if (AITechCount(player, c_PU_Carrier, c_techCountInProgressOrBetter) >= 1) {
                        AISetStock( player, 1, c_PR_CarrierLaunch );
                    }
                    AISetStock( player, 1, c_PR_AirWeapons3 );
                    AISetStock( player, 1, c_PR_AirArmor3 );

                }
            }
        }
    }
    else {  // (buildType == e_buildType_Air) 


        if (phase >= c_ldPhaseMid) {

            AISetStock( player, 1, c_PR_AirWeapons1 );
            AISetStock( player, 1, c_PR_AirArmor1 );

            if (phase >= c_ldPhaseLate) {

                AISetStock( player, 1, c_PR_ObserverSpeed );
                AISetStock( player, 1, c_PR_WarpPrismSpeed );
                if (AITechCount(player, c_PU_Phoenix, c_techCountInProgressOrBetter) >= 4) {
                    AISetStock( player, 1, c_PR_PhoenixRange );
                }
                if (AITechCount(player, c_PU_Carrier, c_techCountInProgressOrBetter) >= 1) {
                    AISetStock( player, 1, c_PR_CarrierLaunch );
                }
                AISetStock( player, 1, c_PR_AirWeapons2 );
                AISetStock( player, 1, c_PR_AirArmor2 );
                AISetStock( player, 1, c_PR_Shields2 );

                if (phase >= c_ldPhaseFinal) {

                    AISetStock( player, 1, c_PR_AirWeapons3 );
                    AISetStock( player, 1, c_PR_AirArmor3 );
                    AISetStock( player, 1, c_PR_Shields3 );
                    AISetStock( player, 1, c_PR_WarpGateResearch );
                    if (AITechCount(player, c_PU_Zealot, c_techCountInProgressOrBetter) >= 6) {
                        AISetStock( player, 1, c_PR_ZealotCharge );
                    }
                    if (AITechCount(player, c_PU_Stalker, c_techCountInProgressOrBetter) >= 6) {
                        AISetStock( player, 1, c_PR_StalkerBlink );
                    }
                    if (AITechCount(player, c_PU_Colossus, c_techCountInProgressOrBetter) >= 2) {
                        AISetStock( player, 1, c_PR_ColossusRange );
                    }
                    if (AITechCount(player, c_PU_HighTemplar, c_techCountInProgressOrBetter) >= 1) {
                        AISetStock( player, 1, c_PR_HighTemplarPsiStorm );
                    }
                    AISetStock( player, 1, c_PR_GroundWeapons3 );
                    AISetStock( player, 1, c_PR_GroundArmor3 );

                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenArmyInitMdHd
//--------------------------------------------------------------------------------------------------
int ProtossOpenArmyInitMdHd (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        // next attack should be around 11 foodCost and 560 resCost after about 360 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 1);
            AIAddToStockArmy(player, c_PU_Stalker, 3);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 1);
            // validation: 5 units above with average cost 10 food and 762 resources
            duration = 372 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 4);
            AIAddToStockArmy(player, c_PU_Stalker, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 1);
            // validation: 6 units above with average cost 12 food and 712 resources
            duration = 376 + RandomInt(-12, 18);
        }
    }
    else if (buildType == e_buildType_Timing) {
        // next attack should be around 15 foodCost and 880 resCost after about 420 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 5);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 1);
            // validation: 8 units above with average cost 16 food and 1212 resources
            duration = 448 + RandomInt(-14, 22);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 5);
            AIAddToStockArmy(player, c_PU_Stalker, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 1);
            // validation: 9 units above with average cost 18 food and 1124 resources
            duration = 447 + RandomInt(-14, 22);
        }
    }
    else if (buildType == e_buildType_Power) {
        // next attack should be around 20 foodCost and 1200 resCost after about 540 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 6);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            // validation: 10 units above with average cost 20 food and 1525 resources
            duration = 551 + RandomInt(-18, 27);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 6);
            AIAddToStockArmy(player, c_PU_Stalker, 3);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            // validation: 12 units above with average cost 24 food and 1537 resources
            duration = 573 + RandomInt(-19, 28);
        }
    }
    else if (buildType == e_buildType_Macro) {
        // next attack should be around 11 foodCost and 620 resCost after about 240 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 1);
            // validation: 5 units above with average cost 10 food and 687 resources
            duration = 227 + RandomInt(-7, 11);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_PU_Zealot, 1);
            AIAddToStockArmy(player, c_PU_Stalker, 3);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 1);
            // validation: 5 units above with average cost 10 food and 762 resources
            duration = 237 + RandomInt(-7, 11);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 12 foodCost and 1200 resCost after about 560 seconds
        AIAddToStockArmy(player, c_PU_VoidRay, 1);
        AIAddToStockArmy(player, c_PU_Phoenix, 1);
        AIAddToStockArmyPickFrom2Count(player, c_PU_VoidRay, 2, c_PU_Phoenix, 3);
        // validation: 5 units above with average cost 11 food and 1325 resources
        duration = 572 + RandomInt(-19, 28);
    }
    else {
        return ProtossOpenArmyInitMdHd(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenInitMdHd
//--------------------------------------------------------------------------------------------------
void ProtossOpenInitMdHd (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseOpen, ProtossOpenArmyInitMdHd);

    AISetMainState(player, e_mainState_Open, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenBuildMdHd
//--------------------------------------------------------------------------------------------------
void ProtossOpenBuildMdHd (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Open, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    if (buildType == e_buildType_Rush) {
        AISetStock( player, 1, c_PB_Nexus );
        AISetStock( player, 9, c_PU_Probe );
        AISetStock( player, 1, c_PB_Pylon );
        AISetStock( player, 13, c_PU_Probe );
        AISetStock( player, 1, c_PB_Gateway );
        AISetStock( player, 14, c_PU_Probe );
        AISetStock( player, 1, c_PB_Assimilator );
        AISetStock( player, 16, c_PU_Probe );
        AISetStock( player, 2, c_PB_Pylon );
        AISetStock( player, 18, c_PU_Probe );
        AISetStock( player, 1, c_PB_CyberneticsCore );
        AISetStock( player, 1, c_PU_Zealot );
        AISetStockUnitNext( player, 20, c_PU_Probe, c_stockIdle );
        AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
        AISetStock( player, 1, c_PU_Stalker );
        AISetStock( player, 2, c_PB_Gateway );
    }
    else if (buildType == e_buildType_Timing) {
        AISetStock( player, 1, c_PB_Nexus );
        AISetStock( player, 9, c_PU_Probe );
        AISetStock( player, 1, c_PB_Pylon );
        AISetStock( player, 13, c_PU_Probe );
        AISetStock( player, 1, c_PB_Gateway );
        AISetStock( player, 14, c_PU_Probe );
        AISetStock( player, 1, c_PB_Assimilator );
        AISetStock( player, 16, c_PU_Probe );
        AISetStock( player, 2, c_PB_Pylon );
        AISetStock( player, 18, c_PU_Probe );
        AISetStock( player, 1, c_PB_CyberneticsCore );
        AISetStock( player, 1, c_PU_Zealot );
        AISetStockUnitNext( player, 20, c_PU_Probe, c_stockIdle );
        AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
        AISetStock( player, 1, c_PU_Stalker );
        AISetStock( player, 2, c_PB_Gateway );
        AISetStock( player, 2, c_PB_Assimilator );
    }
    else if (buildType == e_buildType_Power) {
        AISetStock( player, 1, c_PB_Nexus );
        AISetStock( player, 9, c_PU_Probe );
        AISetStock( player, 1, c_PB_Pylon );
        AISetStock( player, 13, c_PU_Probe );
        AISetStock( player, 1, c_PB_Gateway );
        AISetStock( player, 14, c_PU_Probe );
        AISetStock( player, 1, c_PB_Assimilator );
        AISetStock( player, 16, c_PU_Probe );
        AISetStock( player, 2, c_PB_Pylon );
        AISetStock( player, 18, c_PU_Probe );
        AISetStock( player, 1, c_PB_CyberneticsCore );
        AISetStock( player, 1, c_PU_Zealot );
        AISetStockUnitNext( player, 20, c_PU_Probe, c_stockIdle );
        AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
        AISetStock( player, 1, c_PU_Stalker );
        AISetStock( player, 2, c_PB_Gateway );
        AISetStock( player, 2, c_PB_Assimilator );
    }
    else if (buildType == e_buildType_Macro) {
        AISetStock( player, 1, c_PB_Nexus );
        AISetStock( player, 9, c_PU_Probe );
        AISetStock( player, 1, c_PB_Pylon );
        AISetStock( player, 13, c_PU_Probe );
        AISetStock( player, 1, c_PB_Gateway );
        AISetStock( player, 16, c_PU_Probe );
        if (ProtossMacroExpand(player)) { return; }
        AISetStock( player, 1, c_PU_Zealot );
        AISetStock( player, 2, c_PB_Pylon );
        AISetStock( player, 1, c_PB_Assimilator );
        AISetStock( player, 1, c_PB_CyberneticsCore );
        AISetStock( player, 18, c_PU_Probe );
        AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
        AISetStockUnitNext( player, 26, c_PU_Probe, c_stockIdle );
        AISetStock( player, 1, c_PU_Stalker );
        AISetStock( player, 2, c_PB_Gateway );
        AISetStock( player, 2, c_PB_Assimilator );
    }
    else if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_PB_Nexus );
        AISetStock( player, 9, c_PU_Probe );
        AISetStock( player, 1, c_PB_Pylon );
        AISetStock( player, 15, c_PU_Probe );
        if (ProtossMacroExpand(player)) { return; }
        AISetStock( player, 1, c_PB_Assimilator );
        AISetStock( player, 16, c_PU_Probe );
        AISetStock( player, 1, c_PB_Gateway );
        AISetStock( player, 17, c_PU_Probe );
        AISetStock( player, 2, c_PB_Assimilator );
        AISetStock( player, 18, c_PU_Probe );
        AISetStock( player, 2, c_PB_Pylon );
        AISetStockUnitNext( player, 26, c_PU_Probe, c_stockIdle );
        AISetStockFarms( player, c_PB_Pylon, c_stockNormalFarms);
        AISetStock( player, 1, c_PB_CyberneticsCore );
        AISetStock( player, 2, c_PB_Stargate );
        AISetStock( player, 3, c_PB_Pylon );
    }

    ProtossBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    ProtossGeneralBuild(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 0.70);

    ProtossUpgradesMdHd(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 26, c_PU_Probe);

    ProtossTechUp(player, c_ldPhaseOpen);

    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_PU_WarpPrism );
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Mid, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidArmyInitMdHd
//--------------------------------------------------------------------------------------------------
int ProtossMidArmyInitMdHd (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        // next attack should be around 20 foodCost and 1200 resCost after about 300 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 3);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            // validation: 10 units above with average cost 20 food and 1462 resources
            duration = 300 + RandomInt(-10, 15);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 5);
            AIAddToStockArmy(player, c_PU_Sentry, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            // validation: 10 units above with average cost 20 food and 1500 resources
            duration = 304 + RandomInt(-10, 15);
        }
    }
    else if (buildType == e_buildType_Timing) {
        // next attack should be around 25 foodCost and 1500 resCost after about 330 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 3);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 2);
            // validation: 13 units above with average cost 26 food and 1900 resources
            duration = 338 + RandomInt(-11, 16);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 6);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            // validation: 12 units above with average cost 24 food and 1825 resources
            duration = 326 + RandomInt(-10, 16);
        }
    }
    else if (buildType == e_buildType_Power) {
        // next attack should be around 26 foodCost and 1580 resCost after about 350 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 4);
            AIAddToStockArmy(player, c_PU_Sentry, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 1);
            // validation: 14 units above with average cost 28 food and 2087 resources
            duration = 369 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_PU_Zealot, 3);
            AIAddToStockArmy(player, c_PU_Stalker, 6);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            // validation: 13 units above with average cost 26 food and 1925 resources
            duration = 350 + RandomInt(-11, 17);
        }
    }
    else if (buildType == e_buildType_Macro) {
        // next attack should be around 36 foodCost and 2200 resCost after about 560 seconds
        // note: mid macro build did not send opening attack at 240 time
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 5);
            AIAddToStockArmy(player, c_PU_Stalker, 6);
            AIAddToStockArmy(player, c_PU_Sentry, 3);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 2);
            // validation: 20 units above with average cost 40 food and 2875 resources
            duration = 602 + RandomInt(-28, 42);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 4);
            AIAddToStockArmy(player, c_PU_Stalker, 9);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Zealot, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 2);
            // validation: 19 units above with average cost 38 food and 2875 resources
            duration = 591 + RandomInt(-27, 41);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_PU_Zealot, 4);
            AIAddToStockArmy(player, c_PU_Stalker, 4);
            AIAddToStockArmy(player, c_PU_Sentry, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 4);
            // validation: 15 units above with average cost 36 food and 2975 resources
            duration = 598 + RandomInt(-27, 41);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 18 foodCost and 1800 resCost after about 330 seconds
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_PU_VoidRay, 3);
            AIAddToStockArmy(player, c_PU_Phoenix, 1);
            AIAddToStockArmyPickFrom2Count(player, c_PU_VoidRay, 2, c_PU_Phoenix, 3);
            // validation: 7 units above with average cost 17 food and 2025 resources
            duration = 342 + RandomInt(-11, 17);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_PU_Stalker, 3);
            AIAddToStockArmy(player, c_PU_VoidRay, 3);
            AIAddToStockArmy(player, c_PU_Phoenix, 2);
            // validation: 8 units above with average cost 19 food and 2075 resources
            duration = 355 + RandomInt(-11, 17);
        }
    }
    else {
        return ProtossMidArmyInitMdHd(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidInitMdHd
//--------------------------------------------------------------------------------------------------
void ProtossMidInitMdHd (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseMid, ProtossMidArmyInitMdHd);

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Mid, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidBuildMdHd
//--------------------------------------------------------------------------------------------------
void ProtossMidBuildMdHd (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Mid, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    ProtossBasicEconomy(player, c_ldPhaseMid, 20);
    AISetStock( player, 3, c_PB_Pylon );
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_PU_WarpPrism );
    }
    ProtossBasicExpansion(player, c_ldPhaseMid, 5500, 1500);

    ProtossBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    ProtossGeneralBuild(player, c_ldPhaseMid);

    AILDStockWorkers( player, 26, c_PU_Probe);

    if (buildType == e_buildType_Rush) {
        AISetStock( player, 1, c_PR_WarpGateResearch );
        AISetStockUnitNext( player, 2, c_PB_Gateway, c_stockIdle );
    }
    else if (buildType == e_buildType_Timing) {
        AISetStock( player, 1, c_PR_WarpGateResearch );
        AISetStockUnitNext( player, 3, c_PB_Gateway, c_stockIdle );
    }
    else if (buildType == e_buildType_Power) {
        AISetStock( player, 1, c_PR_WarpGateResearch );
        if (ProtossMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 3, c_PB_Gateway, c_stockIdle );
    }
    else if (buildType == e_buildType_Macro) {
        AISetStock( player, 1, c_PR_WarpGateResearch );
        if (ProtossMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 3, c_PB_Gateway, c_stockIdle );
    }
    else if (buildType == e_buildType_Air) {
        if (ProtossMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 3, c_PB_Stargate, c_stockIdle );
    }

    if (AINeedsDetection(player)) {
        AISetStock( player, 1, c_PU_Observer );
        AISetStock( player, 2, c_PB_PhotonCannon );
    }

    AISetStockArmyScale(player, 0.70);

    AILDStockWorkers( player, 60, c_PU_Probe);

    ProtossUpgradesMdHd(player, c_ldPhaseMid);

    AISetStockArmyScale(player, 1.00);

    AISetStock( player, 2, c_PU_Observer );

    ProtossTechUp(player, c_ldPhaseMid);

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateArmyInitMdHd
//--------------------------------------------------------------------------------------------------
int ProtossLateArmyInitMdHd (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        // next attack should be around 36 foodCost and 2200 resCost after about 280 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 4);
            AIAddToStockArmy(player, c_PU_Stalker, 6);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            // validation: 14 units above with average cost 31 food and 2450 resources
            duration = 283 + RandomInt(-9, 14);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_PU_Zealot, 3);
            AIAddToStockArmy(player, c_PU_Stalker, 9);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Immortal, c_PU_VoidRay), 2);
            // validation: 16 units above with average cost 35 food and 2875 resources
            duration = 313 + RandomInt(-10, 15);
        }
    }
    else if (buildType == e_buildType_HighTech) {
        // next attack should be around 39 foodCost and 2400 resCost after about 300 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 1);
            AIAddToStockArmy(player, c_PU_Stalker, 4);
            AIAddToStockArmy(player, c_PU_Sentry, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Phoenix, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Colossus, c_PU_Tempest), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 1);
            // validation: 12 units above with average cost 35 food and 3225 resources
            duration = 335 + RandomInt(-11, 16);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 1);
            AIAddToStockArmy(player, c_PU_Stalker, 2);
            AIAddToStockArmy(player, c_PU_Sentry, 1);
            AIAddToStockArmy(player, c_PU_Archon, 3);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Colossus, c_PU_Tempest), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 1);
            // validation: 9 units above with average cost 32 food and 2950 resources
            duration = 315 + RandomInt(-10, 15);
        }
    }
    else if (buildType == e_buildType_Special) {
        // next attack should be around 41 foodCost and 2600 resCost after about 320 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 6);
            AIAddToStockArmy(player, c_PU_Sentry, 6);
            AIAddToStockArmy(player, c_PU_HighTemplar, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            // validation: 18 units above with average cost 39 food and 3250 resources
            duration = 349 + RandomInt(-11, 17);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 1);
            AIAddToStockArmy(player, c_PU_Stalker, 2);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, c_PU_HighTemplar, 4);
            AIAddToStockArmy(player, c_PU_Archon, 2);
            AIAddToStockArmy(player, c_PU_Oracle, 1);
            // validation: 12 units above with average cost 29 food and 2700 resources
            duration = 302 + RandomInt(-10, 15);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        // next attack should be around 44 foodCost and 2800 resCost after about 340 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 3);
            AIAddToStockArmy(player, c_PU_Stalker, 4);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, c_PU_Immortal, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Colossus, c_PU_Tempest), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 1);
            // validation: 14 units above with average cost 41 food and 3500 resources
            duration = 369 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 1);
            AIAddToStockArmy(player, c_PU_Stalker, 2);
            AIAddToStockArmy(player, c_PU_Sentry, 1);
            AIAddToStockArmy(player, c_PU_Archon, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            AIAddToStockArmy(player, c_PU_Oracle, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Colossus, c_PU_Tempest), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 1);
            // validation: 11 units above with average cost 38 food and 3600 resources
            duration = 368 + RandomInt(-12, 18);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 28 foodCost and 2800 resCost after about 300 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_VoidRay, 3);
            AIAddToStockArmy(player, c_PU_Phoenix, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 3);
            // validation: 7 units above with average cost 29 food and 3100 resources
            duration = 316 + RandomInt(-10, 15);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_PU_VoidRay, 3);
            AIAddToStockArmy(player, c_PU_Phoenix, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 2);
            AIAddToStockArmy(player, c_PU_Oracle, 1);
            // validation: 7 units above with average cost 26 food and 2850 resources
            duration = 297 + RandomInt(-9, 14);
        }
    }
    else {
        return ProtossLateArmyInitMdHd(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  ProtossFinalArmyInitMdHd
//--------------------------------------------------------------------------------------------------
int ProtossFinalArmyInitMdHd (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        // next attack should be around 49 foodCost and 3200 resCost after about 260 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 5);
            AIAddToStockArmy(player, c_PU_Stalker, 5);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 1);
            // validation: 17 units above with average cost 39 food and 3050 resources
            duration = 242 + RandomInt(-8, 12);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 8);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Colossus, c_PU_Tempest), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 1);
            // validation: 16 units above with average cost 42 food and 3562 resources
            duration = 262 + RandomInt(-8, 13);
        }
    }
    else if (buildType == e_buildType_HighTech) {
        // next attack should be around 52 foodCost and 3500 resCost after about 280 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 6);
            AIAddToStockArmy(player, c_PU_Sentry, 3);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Colossus, c_PU_Tempest), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 2);
            // validation: 17 units above with average cost 52 food and 4512 resources
            duration = 313 + RandomInt(-10, 15);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 4);
            AIAddToStockArmy(player, c_PU_Stalker, 3);
            AIAddToStockArmy(player, c_PU_Sentry, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            AIAddToStockArmy(player, c_PU_Archon, 4);
            AIAddToStockArmy(player, c_PU_HighTemplar, 2);
            // validation: 17 units above with average cost 45 food and 3937 resources
            duration = 285 + RandomInt(-9, 14);
        }
    }
    else if (buildType == e_buildType_Special) {
        // next attack should be around 56 foodCost and 3800 resCost after about 300 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_PU_Zealot, 4);
            AIAddToStockArmy(player, c_PU_Stalker, 8);
            AIAddToStockArmy(player, c_PU_Sentry, 6);
            AIAddToStockArmy(player, c_PU_HighTemplar, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            // validation: 22 units above with average cost 47 food and 3800 resources
            duration = 288 + RandomInt(-9, 14);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 4);
            AIAddToStockArmy(player, c_PU_Sentry, 1);
            AIAddToStockArmy(player, c_PU_HighTemplar, 3);
            AIAddToStockArmy(player, c_PU_Archon, 4);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Colossus, c_PU_Tempest), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 1);
            AIAddToStockArmy(player, c_PU_Oracle, 1);
            // validation: 17 units above with average cost 51 food and 4750 resources
            duration = 324 + RandomInt(-10, 16);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        // next attack should be around 60 foodCost and 4100 resCost after about 320 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_PU_Zealot, 4);
            AIAddToStockArmy(player, c_PU_Stalker, 6);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Sentry, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Phoenix, c_PU_Stalker), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Immortal, c_PU_Archon), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Colossus, c_PU_Tempest), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 1);
            // validation: 21 units above with average cost 57 food and 4862 resources
            duration = 340 + RandomInt(-11, 17);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_Zealot, 2);
            AIAddToStockArmy(player, c_PU_Stalker, 4);
            AIAddToStockArmy(player, c_PU_Sentry, 2);
            AIAddToStockArmy(player, c_PU_Archon, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Phoenix, c_PU_Stalker), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_VoidRay, c_PU_Immortal), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Colossus, c_PU_Tempest), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 1);
            // validation: 16 units above with average cost 47 food and 4275 resources
            duration = 309 + RandomInt(-10, 15);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 38 foodCost and 3800 resCost after about 280 seconds
        armyRoll = RandomInt(1,6);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_PU_VoidRay, 5);
            AIAddToStockArmy(player, c_PU_Phoenix, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 3);
            // validation: 10 units above with average cost 37 food and 4050 resources
            duration = 285 + RandomInt(-9, 14);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_PU_VoidRay, 3);
            AIAddToStockArmy(player, c_PU_Phoenix, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_PU_Carrier, c_PU_Tempest), 3);
            // validation: 10 units above with average cost 43 food and 4550 resources
            duration = 312 + RandomInt(-10, 15);
        }
        else if (armyRoll <= 6) {
            AIAddToStockArmy(player, c_PU_Stalker, 12);
            AIAddToStockArmy(player, c_PU_VoidRay, 2);
            AIAddToStockArmy(player, c_PU_Phoenix, 2);
            AIAddToStockArmy(player, c_PU_Oracle, 1);
            // validation: 17 units above with average cost 37 food and 3650 resources
            duration = 274 + RandomInt(-9, 13);
        }
    }
    else {
        return ProtossFinalArmyInitMdHd(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateInitMdHd
//--------------------------------------------------------------------------------------------------
void ProtossLateInitMdHd (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int curPhase = c_ldPhaseLate;
    int buildType = 0;

    AIChooseNextLateGameBuild(player);
    buildType = AIGetUserInt(player, c_lateGameBuildType);

    if (lateLoop <= 0) { // First Late Loop
        AISetupNextArmy (player, buildType, curPhase, ProtossLateArmyInitMdHd);
    } else {
        curPhase = c_ldPhaseFinal + lateLoop;
        AISetupNextArmy (player, buildType, curPhase, ProtossFinalArmyInitMdHd);
    }

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Late, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateBuildMdHd
//--------------------------------------------------------------------------------------------------
void ProtossLateBuildMdHd (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int buildType = AIGetUserInt(player, c_lateGameBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentLateGame(player)) {
        AISetMainState(player, e_mainState_Late, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    ProtossBasicEconomy(player, c_ldPhaseLate, 20);
    AISetStock( player, 3, c_PB_Pylon );
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_PU_WarpPrism );
    }
    ProtossBasicExpansion(player, c_ldPhaseLate, 12000, 3500);

    ProtossBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    ProtossGeneralBuild(player, c_ldPhaseLate);

    AILDStockWorkers( player, 26, c_PU_Probe);

    if (buildType == e_buildType_Core) {
        if (ProtossMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 4, c_PB_Gateway, c_stockIdle );
        AISetStockUnitNext( player, 2, c_PB_RoboticsFacility, c_stockIdle );
        AISetStockUnitNext( player, 2, c_PB_Stargate, c_stockIdle );
    }
    else if (buildType == e_buildType_HighTech) {
        if (ProtossMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 4, c_PB_Gateway, c_stockIdle );
        AISetStockUnitNext( player, 2, c_PB_RoboticsFacility, c_stockIdle );
        AISetStockUnitNext( player, 2, c_PB_Stargate, c_stockIdle );
    }
    else if (buildType == e_buildType_Special) {
        if (ProtossMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 4, c_PB_Gateway, c_stockIdle );
        AISetStockUnitNext( player, 2, c_PB_RoboticsFacility, c_stockIdle );
        AISetStockUnitNext( player, 2, c_PB_Stargate, c_stockIdle );
    }
    else if (buildType == e_buildType_Mixed) {
        if (ProtossMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 4, c_PB_Gateway, c_stockIdle );
        AISetStockUnitNext( player, 2, c_PB_RoboticsFacility, c_stockIdle );
        AISetStockUnitNext( player, 2, c_PB_Stargate, c_stockIdle );
    }
    else if (buildType == e_buildType_Air) {
        if (ProtossMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_PB_Gateway, c_stockIdle );
        AISetStockUnitNext( player, 2, c_PB_RoboticsFacility, c_stockIdle );
        AISetStockUnitNext( player, 4, c_PB_Stargate, c_stockIdle );
    }

    AISetStock( player, 2, c_PU_Observer );

    AISetStockArmyScale(player, 0.70);

    AISetStock( player, 3, c_PU_WarpPrism );
    AISetStock( player, 3, c_PU_Observer );
    AISetStock( player, 2, c_PB_PhotonCannon );

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 60, c_PU_Probe);

    if (lateLoop <= 0) { // First Late Loop
        ProtossUpgradesMdHd(player, c_ldPhaseLate);
        ProtossTechUp(player, c_ldPhaseLate);
    } else { // Remaining Loops
        ProtossUpgradesMdHd(player, c_ldPhaseFinal);
        ProtossTechUp(player, c_ldPhaseFinal);
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
    if (nextState) {
        lateLoop += 1;
        AISetUserInt(player, c_ldNumLateLoops, lateLoop);
    }
}

//--------------------------------------------------------------------------------------------------
//  ProtossOpenMdHd
//--------------------------------------------------------------------------------------------------
void ProtossOpenMdHd (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        ProtossOpenInitMdHd(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { ProtossOpenBuildMdHd(player); }
    else { ErrorMeleeScript(player, "Invalid Open MainSubState ProtossMdHd"); }
}

//--------------------------------------------------------------------------------------------------
//  ProtossMidMdHd
//--------------------------------------------------------------------------------------------------
void ProtossMidMdHd (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        ProtossMidInitMdHd(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { ProtossMidBuildMdHd(player);  }
    else { ErrorMeleeScript(player, "Invalid Mid MainSubState ProtossMdHd"); }
}

//--------------------------------------------------------------------------------------------------
//  ProtossLateMdHd
//--------------------------------------------------------------------------------------------------
void ProtossLateMdHd (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        ProtossLateInitMdHd(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { ProtossLateBuildMdHd(player);  }
    else { ErrorMeleeScript(player, "Invalid Late MainSubState ProtossMdHd"); }
}

