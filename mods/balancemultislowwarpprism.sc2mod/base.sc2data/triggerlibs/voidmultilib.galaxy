include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

include "TriggerLibs/VoidMultiLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Void Multi
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libVdMp_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack
//--------------------------------------------------------------------------------------------------
bool libVdMp_gt_BattlecruiserAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_order = UnitOrder(lv_caster, 0);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_target) == true))) {
            return false;
        }

        if (!((lv_order != null))) {
            return false;
        }

        if (!((OrderGetAbilityCommand(lv_order) == AbilityCommand("BattlecruiserAttack", 0)))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserAttackTrackerUnitSet", lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVdMp_gt_BattlecruiserAttack_Init () {
    libVdMp_gt_BattlecruiserAttack = TriggerCreate("libVdMp_gt_BattlecruiserAttack_Func");
    TriggerAddEventUnitAbility(libVdMp_gt_BattlecruiserAttack, null, AbilityCommand("BattlecruiserAttack", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack Repeat
//--------------------------------------------------------------------------------------------------
bool libVdMp_gt_BattlecruiserAttackRepeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(EventUnitOrder());
    lv_order = EventUnitOrder();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_target) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserAttackTrackerUnitSet", lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVdMp_gt_BattlecruiserAttackRepeat_Init () {
    libVdMp_gt_BattlecruiserAttackRepeat = TriggerCreate("libVdMp_gt_BattlecruiserAttackRepeat_Func");
    TriggerAddEventUnitOrder(libVdMp_gt_BattlecruiserAttackRepeat, null, AbilityCommand("BattlecruiserAttack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack Scan
//--------------------------------------------------------------------------------------------------
bool libVdMp_gt_BattlecruiserAttackScan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(EventUnitOrder());
    lv_order = EventUnitOrder();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_target) == false))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserAttackTrackerDP", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVdMp_gt_BattlecruiserAttackScan_Init () {
    libVdMp_gt_BattlecruiserAttackScan = TriggerCreate("libVdMp_gt_BattlecruiserAttackScan_Func");
    TriggerAddEventUnitOrder(libVdMp_gt_BattlecruiserAttackScan, null, AbilityCommand("BattlecruiserAttack", 0));
    TriggerAddEventUnitOrder(libVdMp_gt_BattlecruiserAttackScan, null, AbilityCommand("BattlecruiserMove", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack Stop
//--------------------------------------------------------------------------------------------------
bool libVdMp_gt_BattlecruiserAttackStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_order = EventUnitOrder();

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserAttackTrackerDP", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVdMp_gt_BattlecruiserAttackStop_Init () {
    libVdMp_gt_BattlecruiserAttackStop = TriggerCreate("libVdMp_gt_BattlecruiserAttackStop_Func");
    TriggerAddEventUnitOrder(libVdMp_gt_BattlecruiserAttackStop, null, AbilityCommand("BattlecruiserStop", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack Ability Used
//--------------------------------------------------------------------------------------------------
bool libVdMp_gt_BattlecruiserAttackAbilityUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_caster) == "Battlecruiser"))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("BattlecruiserMove", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("BattlecruiserAttack", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("BattlecruiserMove", 2)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("BattlecruiserStop", 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserAttackTrackerDP", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVdMp_gt_BattlecruiserAttackAbilityUsed_Init () {
    libVdMp_gt_BattlecruiserAttackAbilityUsed = TriggerCreate("libVdMp_gt_BattlecruiserAttackAbilityUsed_Func");
    TriggerAddEventUnitAbility(libVdMp_gt_BattlecruiserAttackAbilityUsed, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlecruiser Attack Chase Interrupted
//--------------------------------------------------------------------------------------------------
bool libVdMp_gt_BattlecruiserAttackChaseInterrupted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = OrderGetTargetUnit(EventUnitOrder());
    lv_order = EventUnitOrder();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_caster) == "Battlecruiser"))) {
            return false;
        }

        if (!(((OrderGetAbilityCommand(lv_order) != AbilityCommand("BattlecruiserAttack", 0)) || (UnitIsAlive(lv_target) == false)))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "BattlecruiserChasingRB", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVdMp_gt_BattlecruiserAttackChaseInterrupted_Init () {
    libVdMp_gt_BattlecruiserAttackChaseInterrupted = TriggerCreate("libVdMp_gt_BattlecruiserAttackChaseInterrupted_Func");
    TriggerAddEventUnitOrder(libVdMp_gt_BattlecruiserAttackChaseInterrupted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingPanelInitialize
//--------------------------------------------------------------------------------------------------
bool libVdMp_gt_PingPanelInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVdMp_gt_PingPanelInitialize_Init () {
    libVdMp_gt_PingPanelInitialize = TriggerCreate("libVdMp_gt_PingPanelInitialize_Func");
    TriggerAddEventMapInit(libVdMp_gt_PingPanelInitialize);
}

void libVdMp_InitTriggers () {
    libVdMp_gt_BattlecruiserAttack_Init();
    libVdMp_gt_BattlecruiserAttackRepeat_Init();
    libVdMp_gt_BattlecruiserAttackScan_Init();
    libVdMp_gt_BattlecruiserAttackStop_Init();
    libVdMp_gt_BattlecruiserAttackAbilityUsed_Init();
    libVdMp_gt_BattlecruiserAttackChaseInterrupted_Init();
    libVdMp_gt_PingPanelInitialize_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libVdMp_InitLib_completed = false;

void libVdMp_InitLib () {
    if (libVdMp_InitLib_completed) {
        return;
    }

    libVdMp_InitLib_completed = true;

    libVdMp_InitLibraries();
    libVdMp_InitTriggers();
}

