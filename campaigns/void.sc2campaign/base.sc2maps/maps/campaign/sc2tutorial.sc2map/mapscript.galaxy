//==================================================================================================
// 
// Generated Map Script
// 
// Name:   SC2 Tutorial
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p01_USER = 1;
const int gv_p02_ENEMY = 2;
const fixed gv_rEMINDER_DELAY = 10.0;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_victoryUI;
int gv_victoryUI_Panel;
int[5] gv_victoryUI_Portraits;
int[5] gv_victoryUI_LockedPortraits;
int[5] gv_victoryUI_StageSelectButtons;
int gv_victoryUI_ExitButton;
int gv_victoryUI_ContinueButton;
int gv_victoryUI_StageNumber;
int gv_victoryUI_StageName;
int gv_victoryUI_BackgroundImage;
int gv_victoryUI_InfoImage;
int gv_victoryUI_InfoBorder;
int[4] gv_victoryUI_InfoBoxBasic;
int[6] gv_victoryUI_InfoBoxTerran;
int[7] gv_victoryUI_InfoBoxZerg;
int[6] gv_victoryUI_InfoBoxProtoss;
bool gv_supplyHelperActive;
int gv_textTagUI;
unit gv_invisHelper;
int gv_friendlyFireDirective;
int gv_friendlyFireDirectiveBackground;
int gv_friendlyFireDirectiveText;
int gv_friendlyFireDirectiveTitle;
int gv_moveOrderDirective;
int gv_moveOrderDirectiveBackground;
int gv_moveOrderDirectiveText;
int gv_moveOrderDirectiveTitle;
int gv_supplyHelperUI;
int gv_supplyHelperUIText;
int gv_supplyHelperUITitle;
int gv_supplyHelperUIBackground;
int gv_ping;
revealer gv_startingAreaRevealer;
bool gv_reminderPlayed;
int gv_offscreenUnitUI;
int gv_offscreenUnitUIUnitFrame;
int gv_tutorialProgress;
bank gv_tutorialBankSave;
int gv_currentStage;
int gv_selectedStage;
timer gv_reminderTimer;
bool gv_reminderPlaying;
unitgroup gv_combatHelperUnitGroup;
int gv_textTagAnchor;
int gv_textTag;
unit gv_offscreenPointHelper;
revealer gv_ruinsRevealer;
unit gv_basic01Marine;
unit gv_basic01ElevatorBlocker;
unit gv_basic03ElevatorBlocker;
unitgroup gv_basic05Enemies;
unitgroup gv_basic06Marines;
unit gv_basicMoveUnitBeacon;
unit gv_basicAttackBeacon;
unit gv_basic03Enemy;
bool gv_basic03ValidOrder;
fixed gv_basic03LastOrderTime;
unit gv_basicPanCameraBeacon;
unit gv_basicPanCameraArrowUnit;
int gv_minimapTextTag;
unit gv_basicAttackGroupBeacon;
bool gv_basic08ValidOrder;
fixed gv_basic08LastOrderTime;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_terranCommandCenter;
unit gv_terran03Barracks;
unitgroup gv_terranStartingWorkers;
bool gv_terranWorkersSelected;
bool gv_terranMakeSCVsCCSelected;
int gv_terranSCVObjective;
bool gv_terranMakeSupplySCVSelected;
bool gv_terranMakeSupplyBuildMenuPressed;
bool gv_terranMakeSupplyTargetModeActive;
int gv_terranSupplyDepotObjective;
bool gv_terranMakeBarracksSCVSelected;
bool gv_terranMakeBarracksBuildMenuPressed;
bool gv_terranMakeBarracksTargetModeActive;
int gv_terranMakeBarracksObjective;
int gv_terranMakeMarinesObjective;
unitgroup gv_terranMarinesUnitGroup;
unit gv_terran07BridgeBeacon;
int gv_terranMissingScoutsObjective;
unit gv_terranFindScoutsBeacon;
unit gv_terranAttackBeacon;
unitgroup gv_terranZerglingGroup1;
unitgroup gv_terranZerglingGroup2;
revealer gv_terranFindScoutsRevealer1;
revealer gv_terranFindScoutsRevealer2;
unitgroup gv_cinematicHiddenUnits2;
unitgroup gv_cinematicPausedUnits2;
unitgroup gv_cinematicTempUnits2;
bool gv_cinematicCompleted2;
int gv_terranCinematicCutscene;
unit gv_zergBaseRocks;
unit gv_zergSpawningPool;
unit gv_zergRoachWarren;
unit gv_zergExtractor;
int gv_zergMakeUnitCount;
unitgroup gv_zergAttackEnemies;
bool gv_zergMakeOverlordLarvaSelected;
unit gv_zergHatchery;
unitgroup gv_zergStartingDrones;
int gv_zergMakeOverlordObjective;
bool gv_zergMakeDronesLarvaSelected;
bool gv_zergMakeDronesTwoLarvaSelectPlayed;
int gv_zergDroneObjective;
bool gv_zergMakeSpawningPoolTargetModeActive;
bool gv_zergMakeSpawningPoolBuildMenuPressed;
bool gv_zergMakeSpawningPoolDroneSelected;
int gv_zergSpawningPoolObjective;
bool gv_zergMakeZerglingsLarvaSelected;
int gv_zergMakeZerglingsObjective;
bool gv_zergMakeExtractorTargetModeActive;
bool gv_zergMakeExtractorBuildMenuPressed;
bool gv_zergMakeExtractorDroneSelected;
int gv_zergMakeExtractorObjective;
int gv_zergTransferDronesObjective;
bool gv_zergMakeRoachWarrenTargetModeActive;
bool gv_zergMakeRoachWarrenBuildMenuPressed;
bool gv_zergMakeRoachWarrenDroneSelected;
int gv_zergMakeRoachWarrenObjective;
bool gv_zergMakeRoachesLarvaSelected;
int gv_zergMakeRoachesObjective;
int gv_zergSelectArmyF2Directive;
unit gv_zergAttackBeacon;
revealer gv_zergAttackRevealer;
int gv_zergAttackObjective;
revealer gv_zergAttackBaseRevealer;
unitgroup gv_cinematicHiddenUnits3;
unitgroup gv_cinematicPausedUnits3;
unitgroup gv_cinematicTempUnits3;
bool gv_cinematicCompleted3;
int gv_zergCinematicCutscene;
unit gv_protossBaseRocks;
actor gv_protossReticle;
unit gv_protossWarpPrism;
unitgroup gv_protossStartingStalkers;
unitgroup gv_protossZergEggs;
unitgroup gv_protossIdleZerg;
unit gv_protossAttackBeacon;
unit gv_protossNexus;
unit gv_protossAssimilator;
unitgroup gv_protossGateways;
unitgroup gv_protossRescuedUnits;
unitgroup gv_protossProbes;
unitgroup gv_protossZergAttackers;
bool gv_protossBaseFound;
unitgroup gv_protossInfestedTerrans;
int gv_protossInfestedTerransObj;
unit gv_protossFindBaseBeacon;
int gv_protossZergEggsObj;
unit gv_protossGateway2;
unit gv_protossGateway1;
int gv_protossFindBaseObj;
bool gv_protossBuildPylonProbeSelected;
bool gv_protossBuildPylonTargetModeActive;
bool gv_protossBuildPylonBuildMenuPressed;
unitgroup gv_protossBuildPylonUnpoweredGateways;
int gv_protossBuildPylonObj;
int gv_protossWarpZealotsCount;
int gv_protossWarpZealotsObj;
bool gv_protossBuildCyberCoreProbeSelected;
bool gv_protossBuildCyberCoreTargetModeActive;
bool gv_protossBuildCyberCoreBuildMenuPressed;
int gv_protossBuildCyberCoreObj;
int gv_protossWarpStalkersCount;
int gv_protossWarpStalkersObj;
revealer gv_protossSurviveAttackRevealer;
int gv_protossSurviveAttackObj;
unitgroup gv_cinematicHiddenUnits4;
unitgroup gv_cinematicPausedUnits4;
unitgroup gv_cinematicTempUnits4;
bool gv_cinematicCompleted4;
int gv_protossCinematicCutscene;

void InitGlobals () {
    int init_i;

    gv_victoryUI = c_invalidDialogId;
    gv_victoryUI_Panel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_victoryUI_Portraits[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_victoryUI_LockedPortraits[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_victoryUI_StageSelectButtons[init_i] = c_invalidDialogControlId;
    }
    gv_victoryUI_ExitButton = c_invalidDialogControlId;
    gv_victoryUI_ContinueButton = c_invalidDialogControlId;
    gv_victoryUI_StageNumber = c_invalidDialogControlId;
    gv_victoryUI_StageName = c_invalidDialogControlId;
    gv_victoryUI_BackgroundImage = c_invalidDialogControlId;
    gv_victoryUI_InfoImage = c_invalidDialogControlId;
    gv_victoryUI_InfoBorder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_victoryUI_InfoBoxBasic[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_victoryUI_InfoBoxTerran[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_victoryUI_InfoBoxZerg[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_victoryUI_InfoBoxProtoss[init_i] = c_invalidDialogControlId;
    }
    gv_textTagUI = c_invalidDialogId;
    gv_friendlyFireDirective = c_invalidDialogId;
    gv_friendlyFireDirectiveBackground = c_invalidDialogControlId;
    gv_friendlyFireDirectiveText = c_invalidDialogControlId;
    gv_friendlyFireDirectiveTitle = c_invalidDialogControlId;
    gv_moveOrderDirective = c_invalidDialogId;
    gv_moveOrderDirectiveBackground = c_invalidDialogControlId;
    gv_moveOrderDirectiveText = c_invalidDialogControlId;
    gv_moveOrderDirectiveTitle = c_invalidDialogControlId;
    gv_supplyHelperUI = c_invalidDialogId;
    gv_supplyHelperUIText = c_invalidDialogControlId;
    gv_supplyHelperUITitle = c_invalidDialogControlId;
    gv_supplyHelperUIBackground = c_invalidDialogControlId;
    gv_ping = c_invalidPingId;
    gv_offscreenUnitUI = c_invalidDialogId;
    gv_offscreenUnitUIUnitFrame = c_invalidDialogControlId;
    gv_combatHelperUnitGroup = UnitGroupEmpty();
    gv_textTagAnchor = c_invalidDialogId;
    gv_textTag = c_invalidDialogControlId;
    gv_basic05Enemies = UnitGroupEmpty();
    gv_basic06Marines = UnitGroupEmpty();
    gv_minimapTextTag = c_invalidDialogControlId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_terranStartingWorkers = UnitGroupEmpty();
    gv_terranSCVObjective = c_invalidObjectiveId;
    gv_terranSupplyDepotObjective = c_invalidObjectiveId;
    gv_terranMakeBarracksObjective = c_invalidObjectiveId;
    gv_terranMakeMarinesObjective = c_invalidObjectiveId;
    gv_terranMarinesUnitGroup = UnitGroupEmpty();
    gv_terranMissingScoutsObjective = c_invalidObjectiveId;
    gv_terranZerglingGroup1 = UnitGroupEmpty();
    gv_terranZerglingGroup2 = UnitGroupEmpty();
    gv_cinematicHiddenUnits2 = UnitGroupEmpty();
    gv_cinematicPausedUnits2 = UnitGroupEmpty();
    gv_cinematicTempUnits2 = UnitGroupEmpty();
    gv_terranCinematicCutscene = c_cutsceneNone;
    gv_zergAttackEnemies = UnitGroupEmpty();
    gv_zergStartingDrones = UnitGroupEmpty();
    gv_zergMakeOverlordObjective = c_invalidObjectiveId;
    gv_zergDroneObjective = c_invalidObjectiveId;
    gv_zergSpawningPoolObjective = c_invalidObjectiveId;
    gv_zergMakeZerglingsObjective = c_invalidObjectiveId;
    gv_zergMakeExtractorObjective = c_invalidObjectiveId;
    gv_zergTransferDronesObjective = c_invalidObjectiveId;
    gv_zergMakeRoachWarrenObjective = c_invalidObjectiveId;
    gv_zergMakeRoachesObjective = c_invalidObjectiveId;
    gv_zergSelectArmyF2Directive = c_invalidDialogId;
    gv_zergAttackObjective = c_invalidObjectiveId;
    gv_cinematicHiddenUnits3 = UnitGroupEmpty();
    gv_cinematicPausedUnits3 = UnitGroupEmpty();
    gv_cinematicTempUnits3 = UnitGroupEmpty();
    gv_zergCinematicCutscene = c_cutsceneNone;
    gv_protossStartingStalkers = UnitGroupEmpty();
    gv_protossZergEggs = UnitGroupEmpty();
    gv_protossIdleZerg = UnitGroupEmpty();
    gv_protossGateways = UnitGroupEmpty();
    gv_protossRescuedUnits = UnitGroupEmpty();
    gv_protossProbes = UnitGroupEmpty();
    gv_protossZergAttackers = UnitGroupEmpty();
    gv_protossInfestedTerrans = UnitGroupEmpty();
    gv_protossInfestedTerransObj = c_invalidObjectiveId;
    gv_protossZergEggsObj = c_invalidObjectiveId;
    gv_protossFindBaseObj = c_invalidObjectiveId;
    gv_protossBuildPylonUnpoweredGateways = UnitGroupEmpty();
    gv_protossBuildPylonObj = c_invalidObjectiveId;
    gv_protossWarpZealotsObj = c_invalidObjectiveId;
    gv_protossBuildCyberCoreObj = c_invalidObjectiveId;
    gv_protossWarpStalkersObj = c_invalidObjectiveId;
    gv_protossSurviveAttackObj = c_invalidObjectiveId;
    gv_cinematicHiddenUnits4 = UnitGroupEmpty();
    gv_cinematicPausedUnits4 = UnitGroupEmpty();
    gv_cinematicTempUnits4 = UnitGroupEmpty();
    gv_protossCinematicCutscene = c_cutsceneNone;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_UpdateVictoryScreen ();
void gf_StartReminderTimer ();
void gf_StopReminderTimer ();
void gf_ResetReminderTimer ();
void gf_CreateLClickToSelectTag (unit lp_unit, int lp_yOffset);
void gf_CreateRClickToMoveTag (unit lp_unit, int lp_yOffset);
void gf_CreateRClickToGatherTag (unit lp_unit, int lp_yOffset);
void gf_CreateAttackMoveTag (unit lp_unit, int lp_yOffset);
void gf_CreateDragSelectTag (unit lp_unit, int lp_yOffset);
void gf_CreateLClickToPlaceTag (unit lp_unit, int lp_yOffset);
void gf_CreateBlinkTag (unit lp_unit, int lp_yOffset);
void gf_DestroyTutorialTextTag ();
void gf_CreateTutorialReticlesOnUnitGroup (unitgroup lp_unitGroup, fixed lp_reticleScale, int lp_reticleSize, string lp_attachPoint);
void gf_CreateTutorialReticleOnUnit (unit lp_unit, fixed lp_reticleScale, int lp_reticleSize, string lp_attachPoint);
void gf_ClearAllTutorialReticles ();
void gf_ClearTutorialReticleOnUnit (unit lp_unit);
void gf_InfoTextCreate (unit lp_cHOSEN_UNIT);
void gf_SetOffscreenUnit (unit lp_unit);
void gf_SetOffscreenPoint (point lp_point);
bool gf_UnitIsArmyUnit (unit lp_unit);
void gf_SilenceQ ();
void gf_TutorialPause ();
void gf_TutorialUnpause ();
void gf_GenericCleanup ();
void gf_BasicSelectMarineCleanup ();
void gf_BasicMoveUnitCleanup ();
void gf_BasicAttackCleanup ();
void gf_BasicPanCameraCleanup ();
void gf_BasicMinimapCleanup ();
void gf_BasicDragSelectCleanup ();
void gf_BasicAttackGroupCleanup ();
void gf_TerranStartMiningCleanup ();
void gf_TerranMakeSCVsCleanup ();
void gf_TerranMakeSupplyCleanup ();
void gf_TerranIdleSCVCleanup ();
void gf_TerranFinishSCVsCleanup ();
void gf_TerranMakeBarracksCleanup ();
void gf_TerranMakeMarinesCleanup ();
void gf_TerranLeaveBaseCleanup ();
void gf_TerranFindScoutsCleanup ();
void gf_ZergMakeOverlordCleanup ();
void gf_ZergMakeDronesCleanup ();
void gf_ZergMakeSpawningPoolCleanup ();
void gf_ZergMakeZerglingsCleanup ();
void gf_ZergMakeExtractorCleanup ();
void gf_ZergTransferDronesCleanup ();
void gf_ZergMakeRoachWarrenCleanup ();
void gf_ZergMakeRoachesCleanup ();
void gf_ZergSelectArmyCreateF2Directive ();
void gf_ZergSelectArmyCleanup ();
void gf_ZergAttackCleanup ();
void gf_ZergAttackBaseCleanup ();
void gf_ProtossInfestedTerransCleanup ();
void gf_ProtossZergEggsCleanup ();
void gf_ProtossFindBaseCleanup ();
void gf_ProtossBuildPylonCleanup ();
void gf_ProtossWarpZealotsCleanup ();
void gf_ProtossBuildCyberCoreCleanup ();
void gf_ProtossWarpStalkersCleanup ();
void gf_ProtossSurviveAttackCleanup ();
void gf_ProtossOutroMakeBeam (point lp_point);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Players;
trigger gt_Init02Units;
trigger gt_Init03Technology;
trigger gt_Init04UserInterface;
trigger gt_Stage1;
trigger gt_Stage2;
trigger gt_Stage3;
trigger gt_Stage4;
trigger gt_ExitButton;
trigger gt_ContinueButton;
trigger gt_FriendlyFireHelper;
trigger gt_FriendlyFireHelperUnpauser;
trigger gt_MoveCommandHelper;
trigger gt_MoveCommandHelperUnpauser;
trigger gt_InfoTextUnitCreated;
trigger gt_SupplyHelperActivator;
trigger gt_SupplyHelperBuildOrder;
trigger gt_SupplyHelperComplete;
trigger gt_SupplyHelperSelection;
trigger gt_SupplyHelperArrowLoop;
trigger gt_SupplyHelperCleanup;
trigger gt_WorkerFollowHelper;
trigger gt_RuinsRevealer;
trigger gt_BasicCleanup;
trigger gt_BasicInitialization;
trigger gt_BasicSelectMarine;
trigger gt_BasicSelectMarineIntroQ;
trigger gt_BasicSelectMarineCompleteQ;
trigger gt_BasicSelectMarineReminderQ;
trigger gt_BasicSelectMarineComplete;
trigger gt_BasicMoveUnit;
trigger gt_BasicMoveUnitIntroQ;
trigger gt_BasicMoveUnitCompleteQ;
trigger gt_BasicMoveUnitReminderQ;
trigger gt_BasicMoveUnitMoveOrder;
trigger gt_BasicMoveUnitComplete;
trigger gt_BasicAttack;
trigger gt_BasicAttackIntroQ;
trigger gt_BasicAttackWrongTargetQ;
trigger gt_BasicAttackCanceledTargetingQ;
trigger gt_BasicAttackCanceledOrderQ;
trigger gt_BasicAttackCompleteQ;
trigger gt_BasicAttackReminderQ;
trigger gt_BasicAttackAttackOrder;
trigger gt_BasicAttackTargetingMode;
trigger gt_BasicAttackComplete;
trigger gt_BasicPanCamera;
trigger gt_BasicPanCameraIntroQ;
trigger gt_BasicPanCameraCompleteQ;
trigger gt_BasicPanCameraReminderQ;
trigger gt_BasicPanCameraLoopArrows;
trigger gt_BasicPanCameraStopArrows;
trigger gt_BasicPanCameraArrowHelper;
trigger gt_BasicPanCameraComplete;
trigger gt_BasicMinimap;
trigger gt_BasicMinimapIntroQ;
trigger gt_BasicMinimapCameraResetQ;
trigger gt_BasicMinimapCompleteQ;
trigger gt_BasicMinimapReminderQ;
trigger gt_BasicMinimapCameraReset;
trigger gt_BasicMinimapComplete;
trigger gt_BasicDragSelect;
trigger gt_BasicDragSelectQ;
trigger gt_BasicDragSelectCompleteQ;
trigger gt_BasicDragSelectReminderQ;
trigger gt_BasicDragSelectComplete;
trigger gt_BasicAttackGroup;
trigger gt_BasicAttackGroupIntroQ;
trigger gt_BasicAttackGroupWrongTargetQ;
trigger gt_BasicAttackGroupCanceledTargetingQ;
trigger gt_BasicAttackGroupCanceledOrderQ;
trigger gt_BasicAttackGroupCompleteQ;
trigger gt_BasicAttackGroupReminderQ;
trigger gt_BasicAttackGroupAttackOrder;
trigger gt_BasicAttackGroupTargetingMode;
trigger gt_BasicAttackGroupComplete;
trigger gt_BasicIntroCinematicQ;
trigger gt_BasicIntroCinematicSetup;
trigger gt_BasicIntroCinematic;
trigger gt_BasicIntroCinematicEnd;
trigger gt_BasicIntroCinematicCleanup;
trigger gt_TerranCleanup;
trigger gt_TerranInitialization;
trigger gt_TerranFailstate;
trigger gt_TerranStartMining;
trigger gt_TerranStartMiningQ;
trigger gt_TerranStartMiningCompleteQ;
trigger gt_TerranStartMiningReminderQ;
trigger gt_TerranStartMiningWorkerSelection;
trigger gt_TerranStartMiningComplete;
trigger gt_TerranMakeSCVs;
trigger gt_TerranMakeSCVsQ;
trigger gt_TerranMakeSCVsSelectCCQ;
trigger gt_TerranMakeSCVsTrainSCVQ;
trigger gt_TerranMakeSCVsTrainingStartedQ;
trigger gt_TerranMakeSCVsCompleteQ;
trigger gt_TerranMakeSCVsCreateObjective;
trigger gt_TerranMakeSCVsUpdateObjective;
trigger gt_TerranMakeSCVsReminder;
trigger gt_TerranMakeSCVsCommandCenterSelection;
trigger gt_TerranMakeSCVsTrainingStarted;
trigger gt_TerranMakeSCVsReminderController;
trigger gt_TerranMakeSCVsComplete;
trigger gt_TerranMakeSupply;
trigger gt_TerranMakeSupplyQ;
trigger gt_TerranMakeSupplySelectSCVQ;
trigger gt_TerranMakeSupplyOpenBuildMenuQ;
trigger gt_TerranMakeSupplySupplyDepotButtonQ;
trigger gt_TerranMakeSupplyPlaceDepotQ;
trigger gt_TerranMakeSupplyBuildOrderQ;
trigger gt_TerranMakeSupplyCompleteQ;
trigger gt_TerranMakeSupplyCreateObjective;
trigger gt_TerranMakeSupplyCompleteObjective;
trigger gt_TerranMakeSupplyReminder;
trigger gt_TerranMakeSupplySCVSelection;
trigger gt_TerranMakeSupplyBuildMenu;
trigger gt_TerranMakeSupplySupplyDepotTargeting;
trigger gt_TerranMakeSupplyBuildOrder;
trigger gt_TerranMakeSupplyComplete;
trigger gt_TerranIdleSCV;
trigger gt_TerranIdleSCVQ;
trigger gt_TerranIdleSCVCompleteQ;
trigger gt_TerranIdleSCVReminderQ;
trigger gt_TerranIdleSCVSCVSelection;
trigger gt_TerranIdleSCVComplete;
trigger gt_TerranFinishSCVs;
trigger gt_TerranFinishSCVsQ;
trigger gt_TerranFinishSCVsCompleteQ;
trigger gt_TerranFinishSCVsReminderQ;
trigger gt_TerranFinishSCVsSupplyHelperDone;
trigger gt_TerranFinishSCVsCommandCenterSelection;
trigger gt_TerranFinishSCVsTrainingStarted;
trigger gt_TerranFinishSCVsReminderController;
trigger gt_TerranFinishSCVsComplete;
trigger gt_TerranMakeBarracks;
trigger gt_TerranMakeBarracksQ;
trigger gt_TerranMakeBarracksSelectSCVQ;
trigger gt_TerranMakeBarracksOpenBuildMenuQ;
trigger gt_TerranMakeBarracksBarracksButtonQ;
trigger gt_TerranMakeBarracksPlaceBarracksQ;
trigger gt_TerranMakeBarracksCompleteQ;
trigger gt_TerranMakeBarracksCreateObjective;
trigger gt_TerranMakeBarracksCompleteObjective;
trigger gt_TerranMakeBarracksReminder;
trigger gt_TerranMakeBarracksSCVSelection;
trigger gt_TerranMakeBarracksBuildMenu;
trigger gt_TerranMakeBarracksBarracksTargeting;
trigger gt_TerranMakeBarracksBuildOrder;
trigger gt_TerranMakeBarracksComplete;
trigger gt_TerranMakeMarines;
trigger gt_TerranMakeMarinesQ;
trigger gt_TerranMakeMarinesCompleteQ;
trigger gt_TerranMakeMarinesReminderQ;
trigger gt_TerranMakeMarinesCreateObjective;
trigger gt_TerranMakeMarinesUpdateObjective;
trigger gt_TerranMakeMarinesSupplyHelperDone;
trigger gt_TerranMakeMarinesBarracksSelection;
trigger gt_TerranMakeMarinesTrainingStarted;
trigger gt_TerranMakeMarinesReminderController;
trigger gt_TerranMakeMarinesComplete;
trigger gt_TerranLeaveBase;
trigger gt_TerranLeaveBaseQ;
trigger gt_TerranLeaveBaseCompleteQ;
trigger gt_TerranLeaveBaseReminderQ;
trigger gt_TerranMissingScoutsMakeObjective;
trigger gt_TerranLeaveBaseMarineSelection;
trigger gt_TerranLeaveBaseComplete;
trigger gt_TerranFindScouts;
trigger gt_TerranFindScoutsQ;
trigger gt_TerranFindScoutsWipeQ;
trigger gt_TerranFindScoutsCompleteQ;
trigger gt_TerranFindScoutsReminderQ;
trigger gt_TerranMissingScoutsCompleteObjective;
trigger gt_TerranFindScoutsRevealer1;
trigger gt_TerranFindScoutsRevealer2;
trigger gt_TerranFindScoutsAttackOrder;
trigger gt_TerranFindScoutsMarineDeath;
trigger gt_TerranFindScoutsComplete;
trigger gt_TerranIntroCinematicQ;
trigger gt_TerranIntroCinematicSetup;
trigger gt_TerranIntroCinematic;
trigger gt_TerranIntroCinematicEnd;
trigger gt_TerranIntroCinematicCleanup;
trigger gt_TerranIntroCinematicCutsceneHelper;
trigger gt_ZergCleanup;
trigger gt_ZergInitialization;
trigger gt_ZergFailstate;
trigger gt_ZergMakeOverlord;
trigger gt_ZergMakeOverlordQ;
trigger gt_ZergMakeOverlordSelectLarvaQ;
trigger gt_ZergMakeOverlordClickOverlordQ;
trigger gt_ZergMakeOverlordMorphStartedQ;
trigger gt_ZergMakeOverlordCompleteQ;
trigger gt_ZergMakeOverlordCreateObjective;
trigger gt_ZergMakeOverlordCompleteObjective;
trigger gt_ZergMakeOverlordReminder;
trigger gt_ZergMakeOverlordHatcherySelection;
trigger gt_ZergMakeOverlordMorphStarted;
trigger gt_ZergMakeOverlordComplete;
trigger gt_ZergMakeDrones;
trigger gt_ZergMakeDronesQ;
trigger gt_ZergMakeDronesMorphStartedQ;
trigger gt_ZergMakeDronesCompleteQ;
trigger gt_ZergMakeDronesSelectLarvaQ;
trigger gt_ZergMakeDronesClickDroneQ;
trigger gt_ZergMakeDronesTwoLarvaSelectedQ;
trigger gt_ZergMakeDronesCreateObjective;
trigger gt_ZergMakeDronesUpdateObjective;
trigger gt_ZergMakeDronesCompleteObjective;
trigger gt_ZergMakeDronesReminder;
trigger gt_ZergMakeDronesHatcherySelection;
trigger gt_ZergMakeDronesReminderController;
trigger gt_ZergMakeDronesFirstMorph;
trigger gt_ZergMakeDronesComplete;
trigger gt_ZergMakeSpawningPool;
trigger gt_ZergMakeSpawningPoolQ;
trigger gt_ZergMakeSpawningPoolSelectDroneQ;
trigger gt_ZergMakeSpawningPoolOpenBuildMenuQ;
trigger gt_ZergMakeSpawningPoolSpawningPoolButtonQ;
trigger gt_ZergMakeSpawningPoolPlaceSpawningPoolQ;
trigger gt_ZergMakeSpawningPoolBuildOrderQ;
trigger gt_ZergMakeSpawningPoolCompleteQ;
trigger gt_ZergSpawningPoolCreateObjective;
trigger gt_ZergSpawningPoolCompleteObjective;
trigger gt_ZergMakeSpawningPoolReminder;
trigger gt_ZergMakeSpawningPoolDroneSelection;
trigger gt_ZergMakeSpawningPoolBuildMenu;
trigger gt_ZergMakeSpawningPoolTargeting;
trigger gt_ZergMakeSpawningPoolBuildOrder;
trigger gt_ZergMakeSpawningPoolComplete;
trigger gt_ZergMakeZerglings;
trigger gt_ZergMakeZerglingsQ;
trigger gt_ZergMakeZerglingsSelectLarvaQ;
trigger gt_ZergMakeZerglingsClickZerglingQ;
trigger gt_ZergMakeZerglingsDontWaitQ;
trigger gt_ZergMakeZerglingsMorphStartedQ;
trigger gt_ZergMakeZerglingsCompleteQ;
trigger gt_ZergMakeZerglingsCreateObjective;
trigger gt_ZergMakeZerglingsUpdateObjective;
trigger gt_ZergMakeZerglingsCompleteObjective;
trigger gt_ZergMakeZerglingsReminder;
trigger gt_ZergMakeZerglingsSupplyHelperDone;
trigger gt_ZergMakeZerglingsHatcherySelection;
trigger gt_ZergMakeZerglingsMorphStarted;
trigger gt_ZergMakeZerglingsFirstMorph;
trigger gt_ZergMakeZerglingsComplete;
trigger gt_ZergMakeExtractor;
trigger gt_ZergMakeExtractorQ;
trigger gt_ZergMakeExtractorSelectDroneQ;
trigger gt_ZergMakeExtractorOpenBuildMenuQ;
trigger gt_ZergMakeExtractorExtractorButtonQ;
trigger gt_ZergMakeExtractorPlaceExtractorQ;
trigger gt_ZergMakeExtractorBuildOrderQ;
trigger gt_ZergMakeExtractorCompleteQ;
trigger gt_ZergMakeExtractorCreateObjective;
trigger gt_ZergMakeExtractorCompleteObjective;
trigger gt_ZergMakeExtractorReminder;
trigger gt_ZergMakeExtractorDroneSelection;
trigger gt_ZergMakeExtractorBuildMenu;
trigger gt_ZergMakeExtractorTargeting;
trigger gt_ZergMakeExtractorBuildOrder;
trigger gt_ZergMakeExtractorComplete;
trigger gt_ZergTransferDrones;
trigger gt_ZergTransferDronesQ;
trigger gt_ZergTransferDronesCompleteQ;
trigger gt_ZergTransferDronesReminderQ;
trigger gt_ZergTransferDronesMakeObjective;
trigger gt_ZergTransferDronesUpdateObjective;
trigger gt_ZergTransferDronesDroneSelection;
trigger gt_ZergTransferDronesComplete;
trigger gt_ZergMakeRoachWarren;
trigger gt_ZergMakeRoachWarrenQ;
trigger gt_ZergMakeRoachWarrenSelectDroneQ;
trigger gt_ZergMakeRoachWarrenOpenBuildMenuQ;
trigger gt_ZergMakeRoachWarrenRoachWarrenButtonQ;
trigger gt_ZergMakeRoachWarrenPlaceRoachWarrenQ;
trigger gt_ZergMakeRoachWarrenBuildOrderQ;
trigger gt_ZergMakeRoachWarrenCompleteQ;
trigger gt_ZergMakeRoachWarrenCreateObjective;
trigger gt_ZergMakeRoachWarrenCompleteObjective;
trigger gt_ZergMakeRoachWarrenReminder;
trigger gt_ZergMakeRoachWarrenDroneSelection;
trigger gt_ZergMakeRoachWarrenBuildMenu;
trigger gt_ZergMakeRoachWarrenTargeting;
trigger gt_ZergMakeRoachWarrenBuildOrder;
trigger gt_ZergMakeRoachWarrenComplete;
trigger gt_ZergMakeRoaches;
trigger gt_ZergMakeRoachesQ;
trigger gt_ZergMakeRoachesSelectLarvaQ;
trigger gt_ZergMakeRoachesClickRoachQ;
trigger gt_ZergMakeRoachesDontWaitQ;
trigger gt_ZergMakeRoachesMorphStartedQ;
trigger gt_ZergMakeRoachesCompleteQ;
trigger gt_ZergMakeRoachesCreateObjective;
trigger gt_ZergMakeRoachesUpdateObjective;
trigger gt_ZergMakeRoachesCompleteObjective;
trigger gt_ZergMakeRoachesReminder;
trigger gt_ZergMakeRoachesSupplyHelperDone;
trigger gt_ZergMakeRoachesHatcherySelection;
trigger gt_ZergMakeRoachesMorphStarted;
trigger gt_ZergMakeRoachesFirstMorph;
trigger gt_ZergMakeRoachesComplete;
trigger gt_ZergSelectArmy;
trigger gt_ZergSelectArmyQ;
trigger gt_ZergSelectArmyCompleteQ;
trigger gt_ZergSelectArmyReminderQ;
trigger gt_ZergSelectArmyComplete;
trigger gt_ZergAttack;
trigger gt_ZergAttackQ;
trigger gt_ZergAttackWipeQ;
trigger gt_ZergAttackCompleteQ;
trigger gt_ZergAttackReminderQ;
trigger gt_ZergAttackCreateObjective;
trigger gt_ZergAttackApproachMarines;
trigger gt_ZergAttackUnitDeath;
trigger gt_ZergAttackAttackOrder;
trigger gt_ZergAttackSelectionReminder;
trigger gt_ZergAttackComplete;
trigger gt_ZergAttackBase;
trigger gt_ZergAttackBaseQ;
trigger gt_ZergAttackBaseWipeQ;
trigger gt_ZergAttackBaseCompleteQ;
trigger gt_ZergAttackBaseReminderQ;
trigger gt_ZergAttackCompleteObjective;
trigger gt_ZergAttackBaseRevealer;
trigger gt_ZergAttackBaseApproachMarines;
trigger gt_ZergAttackBaseUnitDeath;
trigger gt_ZergAttackBaseAttackOrder;
trigger gt_ZergAttackBaseSelectionReminder;
trigger gt_ZergAttackBaseComplete;
trigger gt_ZergIntroCinematicQ;
trigger gt_ZergIntroCinematicSetup;
trigger gt_ZergIntroCinematic;
trigger gt_ZergIntroCinematicEnd;
trigger gt_ZergIntroCinematicCleanup;
trigger gt_ZergIntroCinematicCutsceneHelper;
trigger gt_ProtossCleanup;
trigger gt_ProtossInitialization;
trigger gt_ProtossFailstate;
trigger gt_ProtossInfestedTerrans;
trigger gt_ProtossInfestedTerransQ;
trigger gt_ProtossInfestedTerransInfestedQ;
trigger gt_ProtossInfestedTerransCompleteQ;
trigger gt_ProtossInfestedTerransReminderQ;
trigger gt_ProtossInfestedTerransMakeObj;
trigger gt_ProtossInfestedTerransCompleteObj;
trigger gt_ProtossInfestedTerransAttackOrder;
trigger gt_ProtossInfestedTerransAggroInfested;
trigger gt_ProtossInfestedTerransComplete;
trigger gt_ProtossZergEggs;
trigger gt_ProtossZergEggsQ;
trigger gt_ProtossZergEggsCompleteQ;
trigger gt_ProtossZergEggsReminderQ;
trigger gt_ProtossZergEggsMakeObj;
trigger gt_ProtossZergEggsCompleteObj;
trigger gt_ProtossZergEggsReminderReset;
trigger gt_ProtossZergEggsComplete;
trigger gt_ProtossFindBase;
trigger gt_ProtossFindBaseQ;
trigger gt_ProtossFindBaseApproachRocksQ;
trigger gt_ProtossFindBaseCompleteQ;
trigger gt_ProtossFindBaseReminderQ;
trigger gt_ProtossFindBaseMakeObj;
trigger gt_ProtossFindBaseCompleteObj;
trigger gt_ProtossFindBaseApproachRocks;
trigger gt_ProtossFindBaseComplete;
trigger gt_ProtossBuildPylon;
trigger gt_ProtossBuildPylonQ;
trigger gt_ProtossBuildPylonSelectProbeQ;
trigger gt_ProtossBuildPylonOpenBuildMenuQ;
trigger gt_ProtossBuildPylonPylonButtonQ;
trigger gt_ProtossBuildPylonPlacePylonQ;
trigger gt_ProtossBuildPylonBuildOrderQ;
trigger gt_ProtossBuildPylonBadBuildOrderQ;
trigger gt_ProtossBuildPylonKindaBadBuildOrderQ;
trigger gt_ProtossBuildPylonCompleteQ;
trigger gt_ProtossBuildPylonMakeObj;
trigger gt_ProtossBuildPylonCompleteObj;
trigger gt_ProtossBuildPylonReminder;
trigger gt_ProtossBuildPylonProbeSelection;
trigger gt_ProtossBuildPylonBuildMenu;
trigger gt_ProtossBuildPylonTargeting;
trigger gt_ProtossBuildPylonBuildOrder;
trigger gt_ProtossBuildPylonComplete;
trigger gt_ProtossWarpZealots;
trigger gt_ProtossWarpZealotsQ;
trigger gt_ProtossWarpZealotsCompleteQ;
trigger gt_ProtossWarpZealotsReminderQ;
trigger gt_ProtossWarpZealotsMakeObj;
trigger gt_ProtossWarpZealotsCompleteObj;
trigger gt_ProtossWarpZealotsUpdateObj;
trigger gt_ProtossWarpZealotsSupplyHelperDone;
trigger gt_ProtossWarpZealotsGatewaySelection;
trigger gt_ProtossWarpZealotsReminderController;
trigger gt_ProtossWarpZealotsTrainingStarted;
trigger gt_ProtossWarpZealotsComplete;
trigger gt_ProtossBuildCyberCore;
trigger gt_ProtossBuildCyberCoreQ;
trigger gt_ProtossBuildCyberCoreSelectProbeQ;
trigger gt_ProtossBuildCyberCoreOpenBuildMenuQ;
trigger gt_ProtossBuildCyberCoreCyberCoreButtonQ;
trigger gt_ProtossBuildCyberCorePlaceCyberCoreQ;
trigger gt_ProtossBuildCyberCoreBuildOrderQ;
trigger gt_ProtossBuildCyberCoreCompleteQ;
trigger gt_ProtossBuildCyberCoreMakeObj;
trigger gt_ProtossBuildCyberCoreCompleteObj;
trigger gt_ProtossBuildCyberCoreReminder;
trigger gt_ProtossBuildCyberCoreProbeSelection;
trigger gt_ProtossBuildCyberCoreBuildMenu;
trigger gt_ProtossBuildCyberCoreTargeting;
trigger gt_ProtossBuildCyberCoreBuildOrder;
trigger gt_ProtossBuildCyberCoreComplete;
trigger gt_ProtossWarpStalkers;
trigger gt_ProtossWarpStalkersQ;
trigger gt_ProtossWarpStalkersCompleteQ;
trigger gt_ProtossWarpStalkersReminderQ;
trigger gt_ProtossWarpStalkersMakeObj;
trigger gt_ProtossWarpStalkersCompleteObj;
trigger gt_ProtossWarpStalkersUpdateObj;
trigger gt_ProtossWarpStalkersSupplyHelperDone;
trigger gt_ProtossWarpStalkersGatewaySelection;
trigger gt_ProtossWarpStalkersReminderController;
trigger gt_ProtossWarpStalkersTrainingStarted;
trigger gt_ProtossWarpStalkersComplete;
trigger gt_ProtossSurviveAttack;
trigger gt_ProtossSurviveAttackQ;
trigger gt_ProtossSurviveAttackCompleteQ;
trigger gt_ProtossSurviveAttackMakeObj;
trigger gt_ProtossSurviveAttackCompleteObj;
trigger gt_ProtossSurviveAttackRocksDestroyed;
trigger gt_ProtossSurviveAttackComplete;
trigger gt_ProtossIntroCinematicQ;
trigger gt_ProtossIntroCinematicSetup;
trigger gt_ProtossIntroCinematic;
trigger gt_ProtossIntroCinematicEnd;
trigger gt_ProtossIntroCinematicCleanup;
trigger gt_ProtossOutroCinematicQ;
trigger gt_ProtossOutroCinematicSetup;
trigger gt_ProtossOutroCinematic;
trigger gt_ProtossOutroCinematicEnd;
trigger gt_ProtossOutroCinematicCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_UpdateVictoryScreen () {
    int autoCCD08B04_val;
    int auto9588D1EE_val;

    // Implementation
    autoCCD08B04_val = gv_tutorialProgress;
    if (autoCCD08B04_val == 1) {
        PlayerSetRace(gv_p01_USER, "Terr");
        libNtve_gf_SetDialogItemImage(gv_victoryUI_BackgroundImage, "Assets\\Textures\\ui_ingame_tutorial_bg_terr.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[2], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[3], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_Portraits[3], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[3], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_victoryUI_Portraits[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[4], PlayerGroupAll(), true);
    }
    else if (autoCCD08B04_val == 2) {
        PlayerSetRace(gv_p01_USER, "Zerg");
        libNtve_gf_SetDialogItemImage(gv_victoryUI_BackgroundImage, "Assets\\Textures\\ui_ingame_tutorial_bg_zerg.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[2], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[3], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_Portraits[3], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[3], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_Portraits[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[4], PlayerGroupAll(), true);
    }
    else if (autoCCD08B04_val == 3) {
        PlayerSetRace(gv_p01_USER, "Prot");
        libNtve_gf_SetDialogItemImage(gv_victoryUI_BackgroundImage, "Assets\\Textures\\ui_ingame_tutorial_bg_prot.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[2], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[3], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[4], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_victoryUI_Portraits[3], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[3], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_Portraits[4], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[4], PlayerGroupAll(), false);
    }
    else if (autoCCD08B04_val == 4) {
        PlayerSetRace(gv_p01_USER, "Prot");
        libNtve_gf_SetDialogItemImage(gv_victoryUI_BackgroundImage, "Assets\\Textures\\ui_ingame_tutorial_bg_prot.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[2], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[3], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[4], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_victoryUI_Portraits[3], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[3], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_Portraits[4], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[4], PlayerGroupAll(), false);
    }
    else {
        PlayerSetRace(gv_p01_USER, "Terr");
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[2], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[3], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_victoryUI_StageSelectButtons[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_Portraits[3], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[3], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_victoryUI_Portraits[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_victoryUI_LockedPortraits[4], PlayerGroupAll(), true);
    }
    auto9588D1EE_val = gv_selectedStage;
    if (auto9588D1EE_val == 1) {
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[1], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[2], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[3], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[4], false, PlayerGroupAll());
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[1]), false);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[1]), Color(100.00, 100.00, 100.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[2]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[2]), Color(40.00, 40.00, 40.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[3]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[3]), Color(40.00, 40.00, 40.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[4]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[4]), Color(40.00, 40.00, 40.00));
        libNtve_gf_SetDialogItemText(gv_victoryUI_StageNumber, StringExternal("UI/TutorialStage1Number"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_victoryUI_StageName, StringExternal("UI/TutorialStage1Name"), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_victoryUI_InfoImage, "Assets\\Textures\\ui_ingame_tutorial_screen_stage1.dds", PlayerGroupAll());
        IntLoopBegin(1, 3);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxBasic[IntLoopCurrent()], PlayerGroupAll(), true);
        }
        IntLoopEnd();
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxTerran[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 6);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxZerg[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxProtoss[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        libNtve_gf_SetDialogItemText(gv_victoryUI_ContinueButton, StringExternal("UI/TutorialReplayButtonText"), PlayerGroupAll());
    }
    else if (auto9588D1EE_val == 2) {
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[1], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[2], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[3], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[4], false, PlayerGroupAll());
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[1]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[1]), Color(40.00, 40.00, 40.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[2]), false);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[2]), Color(100.00, 100.00, 100.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[3]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[3]), Color(40.00, 40.00, 40.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[4]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[4]), Color(40.00, 40.00, 40.00));
        libNtve_gf_SetDialogItemText(gv_victoryUI_StageNumber, StringExternal("UI/TutorialStage2Number"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_victoryUI_StageName, StringExternal("UI/TutorialStage2Name"), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_victoryUI_InfoImage, "Assets\\Textures\\ui_ingame_tutorial_screen_stage2.dds", PlayerGroupAll());
        IntLoopBegin(1, 3);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxBasic[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxTerran[IntLoopCurrent()], PlayerGroupAll(), true);
        }
        IntLoopEnd();
        IntLoopBegin(1, 6);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxZerg[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxProtoss[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        if ((gv_tutorialProgress == 1)) {
            libNtve_gf_SetDialogItemText(gv_victoryUI_ContinueButton, StringExternal("UI/TutorialContinueButtonText"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(gv_victoryUI_ContinueButton, StringExternal("UI/TutorialReplayButtonText"), PlayerGroupAll());
        }
    }
    else if (auto9588D1EE_val == 3) {
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[1], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[2], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[3], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[4], false, PlayerGroupAll());
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[1]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[1]), Color(40.00, 40.00, 40.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[2]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[2]), Color(40.00, 40.00, 40.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[3]), false);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[3]), Color(100.00, 100.00, 100.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[4]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[4]), Color(40.00, 40.00, 40.00));
        libNtve_gf_SetDialogItemText(gv_victoryUI_StageNumber, StringExternal("UI/TutorialStage3Number"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_victoryUI_StageName, StringExternal("UI/TutorialStage3Name"), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_victoryUI_InfoImage, "Assets\\Textures\\ui_ingame_tutorial_screen_stage3.dds", PlayerGroupAll());
        IntLoopBegin(1, 3);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxBasic[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxTerran[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 6);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxZerg[IntLoopCurrent()], PlayerGroupAll(), true);
        }
        IntLoopEnd();
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxProtoss[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        if ((gv_tutorialProgress == 2)) {
            libNtve_gf_SetDialogItemText(gv_victoryUI_ContinueButton, StringExternal("UI/TutorialContinueButtonText"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(gv_victoryUI_ContinueButton, StringExternal("UI/TutorialReplayButtonText"), PlayerGroupAll());
        }
    }
    else if (auto9588D1EE_val == 4) {
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[1], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[2], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[3], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(gv_victoryUI_StageSelectButtons[4], true, PlayerGroupAll());
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[1]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[1]), Color(40.00, 40.00, 40.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[2]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[2]), Color(40.00, 40.00, 40.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[3]), true);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[3]), Color(40.00, 40.00, 40.00));
        PortraitSetPaused(PortraitGetTriggerControl(gv_victoryUI_Portraits[4]), false);
        PortraitSetTintColor(PortraitGetTriggerControl(gv_victoryUI_Portraits[4]), Color(100.00, 100.00, 100.00));
        libNtve_gf_SetDialogItemText(gv_victoryUI_StageNumber, StringExternal("UI/TutorialStage4Number"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_victoryUI_StageName, StringExternal("UI/TutorialStage4Name"), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_victoryUI_InfoImage, "Assets\\Textures\\ui_ingame_tutorial_screen_stage4.dds", PlayerGroupAll());
        IntLoopBegin(1, 3);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxBasic[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxTerran[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 6);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxZerg[IntLoopCurrent()], PlayerGroupAll(), false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_victoryUI_InfoBoxProtoss[IntLoopCurrent()], PlayerGroupAll(), true);
        }
        IntLoopEnd();
        if ((gv_tutorialProgress == 3)) {
            libNtve_gf_SetDialogItemText(gv_victoryUI_ContinueButton, StringExternal("UI/TutorialContinueButtonText"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(gv_victoryUI_ContinueButton, StringExternal("UI/TutorialReplayButtonText"), PlayerGroupAll());
        }
    }
    else {
    }
}

void gf_StartReminderTimer () {
    // Implementation
    if ((gv_reminderTimer == null)) {
        gv_reminderTimer = TimerCreate();
        TimerStart(gv_reminderTimer, gv_rEMINDER_DELAY, false, c_timeGame);
    }
    else {
    }
}

void gf_StopReminderTimer () {
    // Implementation
    if ((gv_reminderTimer != null)) {
        gv_reminderTimer = null;
        if ((gv_reminderPlaying == true)) {
            TransmissionClearAll();
        }
        else {
        }
        gv_reminderPlaying = false;
    }
    else {
    }
}

void gf_ResetReminderTimer () {
    // Implementation
    if ((gv_reminderTimer != null)) {
        TimerRestart(gv_reminderTimer);
    }
    else {
    }
}

void gf_CreateLClickToSelectTag (unit lp_unit, int lp_yOffset) {
    string auto2456DC0D_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_textStyle;
    int lv_anchorPoint;

    // Variable Initialization
    lv_anchorPoint = c_invalidDialogControlId;

    // Implementation
    if ((gv_textTagAnchor == c_invalidDialogId)) {
        auto2456DC0D_val = PlayerRace(gv_p01_USER);
        if (auto2456DC0D_val == "Terr") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_terr.dds";
            lv_textStyle = "TutorialTextTerran";
        }
        else if (auto2456DC0D_val == "Zerg") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_zerg.dds";
            lv_textStyle = "TutorialTextZerg";
        }
        else if (auto2456DC0D_val == "Prot") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds";
            lv_textStyle = "TutorialTextProtoss";
        }
        else {
        }
        DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
        gv_textTagAnchor = DialogLastCreated();
        DialogSetImageVisible(gv_textTagAnchor, false);
        DialogSetPositionRelativeToUnitWithAnchor(gv_textTagAnchor, lp_unit, "Ref_Origin", c_anchorCenter, 0, lp_yOffset);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        lv_anchorPoint = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialSelectTextTag");
        gv_textTag = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_anchorPoint, c_anchorCenter, 0, 0);
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_backgroundImage, PlayerGroupAll());
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_textStyle, PlayerGroupAll());
        DialogControlSendAnimationEvent(gv_textTag, PlayerGroupAll(), "TutorialTextTagAnimation");
    }
    else {
    }
}

void gf_CreateRClickToMoveTag (unit lp_unit, int lp_yOffset) {
    string autoB52B579A_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_textStyle;
    int lv_anchorPoint;

    // Variable Initialization
    lv_anchorPoint = c_invalidDialogControlId;

    // Implementation
    if ((gv_textTagAnchor == c_invalidDialogId)) {
        autoB52B579A_val = PlayerRace(gv_p01_USER);
        if (autoB52B579A_val == "Terr") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_terr.dds";
            lv_textStyle = "TutorialTextTerran";
        }
        else if (autoB52B579A_val == "Zerg") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_zerg.dds";
            lv_textStyle = "TutorialTextZerg";
        }
        else if (autoB52B579A_val == "Prot") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds";
            lv_textStyle = "TutorialTextProtoss";
        }
        else {
        }
        DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
        gv_textTagAnchor = DialogLastCreated();
        DialogSetImageVisible(gv_textTagAnchor, false);
        DialogSetPositionRelativeToUnitWithAnchor(gv_textTagAnchor, lp_unit, "Ref_Origin", c_anchorCenter, 0, lp_yOffset);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        lv_anchorPoint = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialMoveTextTag");
        gv_textTag = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_anchorPoint, c_anchorCenter, 0, 0);
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_backgroundImage, PlayerGroupAll());
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_textStyle, PlayerGroupAll());
        DialogControlSendAnimationEvent(gv_textTag, PlayerGroupAll(), "TutorialTextTagAnimation");
    }
    else {
    }
}

void gf_CreateRClickToGatherTag (unit lp_unit, int lp_yOffset) {
    string autoFEB18E27_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_textStyle;
    int lv_anchorPoint;

    // Variable Initialization
    lv_anchorPoint = c_invalidDialogControlId;

    // Implementation
    if ((gv_textTagAnchor == c_invalidDialogId)) {
        autoFEB18E27_val = PlayerRace(gv_p01_USER);
        if (autoFEB18E27_val == "Terr") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_terr.dds";
            lv_textStyle = "TutorialTextTerran";
        }
        else if (autoFEB18E27_val == "Zerg") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_zerg.dds";
            lv_textStyle = "TutorialTextZerg";
        }
        else if (autoFEB18E27_val == "Prot") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds";
            lv_textStyle = "TutorialTextProtoss";
        }
        else {
        }
        DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
        gv_textTagAnchor = DialogLastCreated();
        DialogSetImageVisible(gv_textTagAnchor, false);
        DialogSetPositionRelativeToUnitWithAnchor(gv_textTagAnchor, lp_unit, "Ref_Origin", c_anchorCenter, 0, lp_yOffset);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        lv_anchorPoint = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialGatherTextTag");
        gv_textTag = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_anchorPoint, c_anchorCenter, 0, 0);
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_backgroundImage, PlayerGroupAll());
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_textStyle, PlayerGroupAll());
        DialogControlSendAnimationEvent(gv_textTag, PlayerGroupAll(), "TutorialTextTagAnimation");
    }
    else {
    }
}

void gf_CreateAttackMoveTag (unit lp_unit, int lp_yOffset) {
    string auto176509E0_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_textStyle;
    int lv_anchorPoint;

    // Variable Initialization
    lv_anchorPoint = c_invalidDialogControlId;

    // Implementation
    if ((gv_textTagAnchor == c_invalidDialogId)) {
        auto176509E0_val = PlayerRace(gv_p01_USER);
        if (auto176509E0_val == "Terr") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_terr.dds";
            lv_textStyle = "TutorialTextTerran";
        }
        else if (auto176509E0_val == "Zerg") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_zerg.dds";
            lv_textStyle = "TutorialTextZerg";
        }
        else if (auto176509E0_val == "Prot") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds";
            lv_textStyle = "TutorialTextProtoss";
        }
        else {
        }
        DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
        gv_textTagAnchor = DialogLastCreated();
        DialogSetImageVisible(gv_textTagAnchor, false);
        DialogSetPositionRelativeToUnitWithAnchor(gv_textTagAnchor, lp_unit, "Ref_Origin", c_anchorCenter, 0, lp_yOffset);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        lv_anchorPoint = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialAttackMoveTextTag");
        gv_textTag = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_anchorPoint, c_anchorCenter, 0, 0);
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_backgroundImage, PlayerGroupAll());
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_textStyle, PlayerGroupAll());
        DialogControlSendAnimationEvent(gv_textTag, PlayerGroupAll(), "TutorialTextTagAnimation");
    }
    else {
    }
}

void gf_CreateDragSelectTag (unit lp_unit, int lp_yOffset) {
    string auto7E439253_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_textStyle;
    int lv_background;
    int lv_anchorPoint;

    // Variable Initialization
    lv_background = c_invalidDialogControlId;
    lv_anchorPoint = c_invalidDialogControlId;

    // Implementation
    if ((gv_textTagAnchor == c_invalidDialogId)) {
        auto7E439253_val = PlayerRace(gv_p01_USER);
        if (auto7E439253_val == "Terr") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_terr.dds";
            lv_textStyle = "TutorialTextTerran";
        }
        else if (auto7E439253_val == "Zerg") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_zerg.dds";
            lv_textStyle = "TutorialTextZerg";
        }
        else if (auto7E439253_val == "Prot") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds";
            lv_textStyle = "TutorialTextProtoss";
        }
        else {
        }
        DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
        gv_textTagAnchor = DialogLastCreated();
        DialogSetImageVisible(gv_textTagAnchor, false);
        DialogSetPositionRelativeToUnitWithAnchor(gv_textTagAnchor, lp_unit, "Ref_Origin", c_anchorCenter, 0, lp_yOffset);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        lv_anchorPoint = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialDragSelectTextTag");
        gv_textTag = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_anchorPoint, c_anchorCenter, 0, 0);
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_backgroundImage, PlayerGroupAll());
        lv_background = DialogControlLastCreated();
        DialogControlHookup(lv_background, c_triggerControlTypeLabel, "Label");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_textStyle, PlayerGroupAll());
        DialogControlSendAnimationEvent(gv_textTag, PlayerGroupAll(), "TutorialTextTagAnimation");
    }
    else {
    }
}

void gf_CreateLClickToPlaceTag (unit lp_unit, int lp_yOffset) {
    string autoD3B30290_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_textStyle;
    int lv_anchorPoint;

    // Variable Initialization
    lv_anchorPoint = c_invalidDialogControlId;

    // Implementation
    if ((gv_textTagAnchor == c_invalidDialogId)) {
        autoD3B30290_val = PlayerRace(gv_p01_USER);
        if (autoD3B30290_val == "Terr") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_terr.dds";
            lv_textStyle = "TutorialTextTerran";
        }
        else if (autoD3B30290_val == "Zerg") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_zerg.dds";
            lv_textStyle = "TutorialTextZerg";
        }
        else if (autoD3B30290_val == "Prot") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds";
            lv_textStyle = "TutorialTextProtoss";
        }
        else {
        }
        DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
        gv_textTagAnchor = DialogLastCreated();
        DialogSetImageVisible(gv_textTagAnchor, false);
        DialogSetPositionRelativeToUnitWithAnchor(gv_textTagAnchor, lp_unit, "Ref_Origin", c_anchorCenter, 0, lp_yOffset);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        lv_anchorPoint = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialPlacementTextTag");
        gv_textTag = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_anchorPoint, c_anchorCenter, 0, 0);
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_backgroundImage, PlayerGroupAll());
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_textStyle, PlayerGroupAll());
        DialogControlSendAnimationEvent(gv_textTag, PlayerGroupAll(), "TutorialTextTagAnimation");
    }
    else {
    }
}

void gf_CreateBlinkTag (unit lp_unit, int lp_yOffset) {
    string auto0AFBB58E_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_textStyle;
    int lv_anchorPoint;

    // Variable Initialization
    lv_anchorPoint = c_invalidDialogControlId;

    // Implementation
    if ((gv_textTagAnchor == c_invalidDialogId)) {
        auto0AFBB58E_val = PlayerRace(gv_p01_USER);
        if (auto0AFBB58E_val == "Terr") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_terr.dds";
            lv_textStyle = "TutorialTextTerran";
        }
        else if (auto0AFBB58E_val == "Zerg") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_zerg.dds";
            lv_textStyle = "TutorialTextZerg";
        }
        else if (auto0AFBB58E_val == "Prot") {
            lv_backgroundImage = "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds";
            lv_textStyle = "TutorialTextProtoss";
        }
        else {
        }
        DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
        gv_textTagAnchor = DialogLastCreated();
        DialogSetImageVisible(gv_textTagAnchor, false);
        DialogSetPositionRelativeToUnitWithAnchor(gv_textTagAnchor, lp_unit, "Ref_Origin", c_anchorCenter, 0, lp_yOffset);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        lv_anchorPoint = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialBlinkTextTag");
        gv_textTag = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_anchorPoint, c_anchorCenter, 0, 0);
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_backgroundImage, PlayerGroupAll());
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_textStyle, PlayerGroupAll());
        DialogControlSendAnimationEvent(gv_textTag, PlayerGroupAll(), "TutorialTextTagAnimation");
    }
    else {
    }
}

void gf_DestroyTutorialTextTag () {
    // Implementation
    if ((gv_textTagAnchor != c_invalidDialogId)) {
        DialogDestroy(gv_textTagAnchor);
        gv_textTagAnchor = c_invalidDialogId;
        DialogControlDestroy(gv_textTag);
        gv_textTag = c_invalidDialogControlId;
    }
    else {
    }
}

void gf_CreateTutorialReticlesOnUnitGroup (unitgroup lp_unitGroup, fixed lp_reticleScale, int lp_reticleSize, string lp_attachPoint) {
    string auto3F1549D6_val;

    // Variable Declarations
    int lv_reticleType;

    // Variable Initialization

    // Implementation
    auto3F1549D6_val = PlayerRace(gv_p01_USER);
    if (auto3F1549D6_val == "Terr") {
        lv_reticleType = libVCMI_ge_CampaginReticleType_TerranMainObjective;
    }
    else if (auto3F1549D6_val == "Zerg") {
        lv_reticleType = libVCMI_ge_CampaginReticleType_ZergMainObjective;
    }
    else if (auto3F1549D6_val == "Prot") {
        lv_reticleType = libVCMI_ge_CampaginReticleType_ProtossMainObjective;
    }
    else {
    }
    UnitGroupLoopBegin(lp_unitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1) == null)) {
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(lv_reticleType, lp_reticleSize, null, UnitGroupLoopCurrent(), lp_attachPoint);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale "+FixedToString(lp_reticleScale, c_fixedPrecisionAny));
            libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 1, libNtve_gf_ActorLastCreated());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
}

void gf_CreateTutorialReticleOnUnit (unit lp_unit, fixed lp_reticleScale, int lp_reticleSize, string lp_attachPoint) {
    string auto0DF42322_val;

    // Variable Declarations
    int lv_reticleType;

    // Variable Initialization

    // Implementation
    auto0DF42322_val = PlayerRace(gv_p01_USER);
    if (auto0DF42322_val == "Terr") {
        lv_reticleType = libVCMI_ge_CampaginReticleType_TerranMainObjective;
    }
    else if (auto0DF42322_val == "Zerg") {
        lv_reticleType = libVCMI_ge_CampaginReticleType_ZergMainObjective;
    }
    else if (auto0DF42322_val == "Prot") {
        lv_reticleType = libVCMI_ge_CampaginReticleType_ProtossMainObjective;
    }
    else {
    }
    if ((libHots_gf_ActorForUnit(lp_unit, 1) == null)) {
        libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(lv_reticleType, lp_reticleSize, null, lp_unit, lp_attachPoint);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale "+FixedToString(lp_reticleScale, c_fixedPrecisionAny));
        libHots_gf_StoreActorForUnit(lp_unit, 1, libNtve_gf_ActorLastCreated());
    }
    else {
    }
}

void gf_ClearAllTutorialReticles () {
    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 1));
            libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 1, null);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
}

void gf_ClearTutorialReticleOnUnit (unit lp_unit) {
    // Implementation
    if ((libHots_gf_ActorForUnit(lp_unit, 1) != null)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(lp_unit, 1));
        libHots_gf_StoreActorForUnit(lp_unit, 1, null);
    }
    else {
    }
}

void gf_InfoTextCreate (unit lp_cHOSEN_UNIT) {
    string auto555A9B0A_val;
    string auto326C7AC6_val;
    string autoC6F638A5_val;

    // Implementation
    auto555A9B0A_val = UnitGetType(lp_cHOSEN_UNIT);
    if (auto555A9B0A_val == "Nexus") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/3EBB4915"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/6067967B"));
    }
    else if (auto555A9B0A_val == "Pylon") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/BBEE5855"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/409A87AF"));
    }
    else if (auto555A9B0A_val == "Gateway") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/615DF885"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/C49170BF"));
    }
    else if (auto555A9B0A_val == "CyberneticsCore") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/1A3080A1"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/DC8FF503"));
    }
    else if (auto555A9B0A_val == "Assimilator") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/35A6BA86"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/41906153"));
    }
    else if (auto555A9B0A_val == "Probe") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/68B2F417"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/6CC06F6D"));
    }
    else if (auto555A9B0A_val == "Hatchery") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/E3AB747E"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/9E667E6A"));
    }
    else if (auto555A9B0A_val == "SpawningPool") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/C9B7F176"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/22E0AB4F"));
    }
    else if (auto555A9B0A_val == "RoachWarren") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/C424FE98"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/76190D3C"));
    }
    else if (auto555A9B0A_val == "Extractor") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/741E99E6"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/918120CE"));
    }
    else if (auto555A9B0A_val == "Drone") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/873F5CEF"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/F7D4D686"));
    }
    else if (auto555A9B0A_val == "Larva") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/1C6DEA57"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/AF605FA7"));
    }
    else if (auto555A9B0A_val == "Overlord") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/49E21733"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/DDE0FEA0"));
    }
    else if (auto555A9B0A_val == "Egg") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/1946EB64"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/A043B992"));
    }
    else if (auto555A9B0A_val == "CommandCenter") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/34AD3284"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/B1476F4B"));
    }
    else if (auto555A9B0A_val == "CommandCenterFlying") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/DDE7DB91"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/85B9E264"));
    }
    else if (auto555A9B0A_val == "SupplyDepot") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/9DD479C5"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/C5B09D1D"));
    }
    else if (auto555A9B0A_val == "Barracks") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/083D00A9"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/2DD9E85B"));
    }
    else if (auto555A9B0A_val == "SCV") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/8CDD1103"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/61B367DF"));
    }
    else if (auto555A9B0A_val == "VespeneGeyser") {
        auto326C7AC6_val = PlayerRace(gv_p01_USER);
        if (auto326C7AC6_val == "Terr") {
            libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/89EE4EA0"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/AB84D224"));
        }
        else if (auto326C7AC6_val == "Zerg") {
            libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/149D698E"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/AB112623"));
        }
        else if (auto326C7AC6_val == "Prot") {
            libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/20A97C0F"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/4979208A"));
        }
        else {
        }
    }
    else if (auto555A9B0A_val == "MineralField") {
        autoC6F638A5_val = PlayerRace(gv_p01_USER);
        if (autoC6F638A5_val == "Terr") {
            libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/5F2EC6B5"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/A8D3D041"));
        }
        else if (autoC6F638A5_val == "Zerg") {
            libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/25672746"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/09C6FDB6"));
        }
        else if (autoC6F638A5_val == "Prot") {
            libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/7748A400"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/D3290F36"));
        }
        else {
        }
    }
    else {
    }
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTooltipable, true);
}

void gf_SetOffscreenUnit (unit lp_unit) {
    // Implementation
    if ((UnitIsAlive(gv_offscreenPointHelper) == true)) {
        UnitRemove(gv_offscreenPointHelper);
    }
    else {
    }
    libNtve_gf_SetDialogItemUnit(gv_offscreenUnitUIUnitFrame, lp_unit, PlayerGroupAll());
}

void gf_SetOffscreenPoint (point lp_point) {
    // Implementation
    if ((UnitIsAlive(gv_offscreenPointHelper) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTutorialHelper", c_unitCreateIgnorePlacement, 0, lp_point);
        gv_offscreenPointHelper = UnitLastCreated();
        libNtve_gf_SetDialogItemUnit(gv_offscreenUnitUIUnitFrame, gv_offscreenPointHelper, PlayerGroupAll());
    }
    else {
        UnitSetPosition(gv_offscreenPointHelper, lp_point, false);
        libNtve_gf_SetDialogItemUnit(gv_offscreenUnitUIUnitFrame, gv_offscreenPointHelper, PlayerGroupAll());
    }
}

bool gf_UnitIsArmyUnit (unit lp_unit) {
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), (("FlagArray[" + "ArmySelect" + "]")), c_playerAny) == "1")) {
        return true;
    }
    else {
        return false;
    }
}

void gf_SilenceQ () {
    // Implementation
    TransmissionClearAll();
    TriggerQueueClear(c_triggerQueueRemove);
}

void gf_TutorialPause () {
    // Implementation
    UnitPauseAll(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimSetPausedAll");
    }
    UnitGroupLoopEnd();
}

void gf_TutorialUnpause () {
    // Implementation
    UnitPauseAll(false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimSetPausedAll 0");
    }
    UnitGroupLoopEnd();
}

void gf_GenericCleanup () {
    // Implementation
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_SilenceQ();
    gf_SetOffscreenUnit(null);
    gv_reminderPlayed = false;
    gf_ClearAllTutorialReticles();
    gf_DestroyTutorialTextTag();
    gf_StopReminderTimer();
    PingDestroyAll();
    if ((UnitIsAlive(gv_invisHelper) == true)) {
        UnitRemove(gv_invisHelper);
        gv_invisHelper = null;
    }
    else {
    }
    TriggerExecute(gt_SupplyHelperCleanup, true, false);
}

void gf_BasicSelectMarineCleanup () {
    // Implementation
    TriggerStop(gt_BasicSelectMarineIntroQ);
    TriggerStop(gt_BasicSelectMarineReminderQ);
    TriggerEnable(gt_BasicSelectMarineReminderQ, false);
    TriggerEnable(gt_BasicSelectMarineComplete, false);
    gf_GenericCleanup();
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_StopPulsingScreenImage(2);
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 1);
    libNtve_gf_HideScreenImage(false, 2);
    libNtve_gf_HideScreenImage(false, 3);
}

void gf_BasicMoveUnitCleanup () {
    // Implementation
    TriggerStop(gt_BasicMoveUnitIntroQ);
    TriggerStop(gt_BasicMoveUnitReminderQ);
    TriggerEnable(gt_BasicMoveUnitReminderQ, false);
    TriggerEnable(gt_BasicMoveUnitMoveOrder, false);
    TriggerEnable(gt_BasicMoveUnitComplete, false);
    gf_GenericCleanup();
    if ((UnitIsAlive(gv_basicMoveUnitBeacon) == true)) {
        UnitKill(gv_basicMoveUnitBeacon);
        gv_basicMoveUnitBeacon = null;
    }
    else {
    }
}

void gf_BasicAttackCleanup () {
    // Implementation
    TriggerEnable(gt_BasicAttackComplete, false);
    TriggerEnable(gt_BasicAttackAttackOrder, false);
    TriggerEnable(gt_BasicAttackTargetingMode, false);
    TriggerEnable(gt_BasicAttackReminderQ, false);
    TriggerStop(gt_BasicAttackIntroQ);
    TriggerStop(gt_BasicAttackWrongTargetQ);
    TriggerStop(gt_BasicAttackCanceledTargetingQ);
    TriggerStop(gt_BasicAttackCanceledOrderQ);
    TriggerStop(gt_BasicAttackReminderQ);
    gf_GenericCleanup();
    gv_basic03ValidOrder = false;
    if ((UnitIsAlive(gv_basicAttackBeacon) == true)) {
        UnitKill(gv_basicAttackBeacon);
        gv_basicAttackBeacon = null;
    }
    else {
    }
}

void gf_BasicPanCameraCleanup () {
    // Implementation
    TriggerEnable(gt_BasicPanCameraComplete, false);
    TriggerEnable(gt_BasicPanCameraReminderQ, false);
    TriggerEnable(gt_BasicPanCameraArrowHelper, false);
    TriggerStop(gt_BasicPanCameraIntroQ);
    TriggerStop(gt_BasicPanCameraReminderQ);
    TriggerExecute(gt_BasicPanCameraStopArrows, true, false);
    gf_GenericCleanup();
    libNtve_gf_StopPulsingScreenImage(8);
    libNtve_gf_HideScreenImage(false, 8);
    libNtve_gf_HideScreenImage(false, 9);
    libNtve_gf_HideScreenImage2(false, 10);
    if ((UnitIsAlive(gv_basicPanCameraBeacon) == true)) {
        UnitKill(gv_basicPanCameraBeacon);
        gv_basicPanCameraBeacon = null;
    }
    else {
    }
    if ((UnitIsAlive(gv_basicPanCameraArrowUnit) == true)) {
        UnitKill(gv_basicPanCameraArrowUnit);
        gv_basicPanCameraArrowUnit = null;
    }
    else {
    }
}

void gf_BasicMinimapCleanup () {
    // Implementation
    TriggerEnable(gt_BasicMinimapReminderQ, false);
    TriggerEnable(gt_BasicMinimapCameraReset, false);
    TriggerEnable(gt_BasicMinimapComplete, false);
    TriggerStop(gt_BasicMinimapIntroQ);
    TriggerStop(gt_BasicMinimapReminderQ);
    TriggerStop(gt_BasicMinimapCameraResetQ);
    gf_GenericCleanup();
    libNtve_gf_StopPulsingScreenImage(8);
    libNtve_gf_HideScreenImage(false, 8);
    DialogControlDestroy(gv_minimapTextTag);
    PingDestroyAll();
}

void gf_BasicDragSelectCleanup () {
    // Implementation
    TriggerEnable(gt_BasicDragSelectComplete, false);
    TriggerEnable(gt_BasicDragSelectReminderQ, false);
    TriggerStop(gt_BasicDragSelectQ);
    gf_GenericCleanup();
    if ((UnitIsAlive(gv_invisHelper) == true)) {
        UnitRemove(gv_invisHelper);
        gv_invisHelper = null;
    }
    else {
    }
}

void gf_BasicAttackGroupCleanup () {
    // Implementation
    TriggerEnable(gt_BasicAttackGroupComplete, false);
    TriggerEnable(gt_BasicAttackGroupAttackOrder, false);
    TriggerEnable(gt_BasicAttackGroupTargetingMode, false);
    TriggerEnable(gt_BasicAttackGroupReminderQ, false);
    TriggerStop(gt_BasicAttackGroupIntroQ);
    TriggerStop(gt_BasicAttackGroupWrongTargetQ);
    TriggerStop(gt_BasicAttackGroupCanceledTargetingQ);
    TriggerStop(gt_BasicAttackGroupCanceledOrderQ);
    TriggerStop(gt_BasicAttackGroupReminderQ);
    TriggerStop(gt_BasicAttackGroupCompleteQ);
    gf_GenericCleanup();
    gv_basic08ValidOrder = false;
}

void gf_TerranStartMiningCleanup () {
    // Implementation
    TriggerEnable(gt_TerranStartMiningComplete, false);
    TriggerEnable(gt_TerranStartMiningReminderQ, false);
    TriggerEnable(gt_TerranStartMiningWorkerSelection, false);
    TriggerStop(gt_TerranStartMiningQ);
    TriggerStop(gt_TerranStartMiningReminderQ);
    gf_GenericCleanup();
    UnitSetState(gv_terranCommandCenter, c_unitStateSelectable, true);
    UnitIssueOrder(gv_terranCommandCenter, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointWithOffset(PointFromId(26), -5.0, 5.0))), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "HaloStop");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetTintColor 255,255,255");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
    }
    UnitGroupLoopEnd();
}

void gf_TerranMakeSCVsCleanup () {
    // Implementation
    TriggerEnable(gt_TerranMakeSCVsCommandCenterSelection, false);
    TriggerEnable(gt_TerranMakeSCVsTrainingStarted, false);
    TriggerEnable(gt_TerranMakeSCVsReminder, false);
    TriggerEnable(gt_TerranMakeSCVsReminderController, false);
    TriggerEnable(gt_TerranMakeSCVsComplete, false);
    TriggerEnable(gt_TerranMakeSCVsTrainingStartedQ, true);
    TriggerStop(gt_TerranMakeSCVsTrainingStartedQ);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SCV", false);
    gv_terranMakeSCVsCCSelected = false;
    gf_GenericCleanup();
    libNtve_gf_StopPulsingScreenImage(15);
    libNtve_gf_HideScreenImage(false, 15);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_StopPulsingScreenImage(2);
    libNtve_gf_HideScreenImage(false, 1);
    libNtve_gf_HideScreenImage(false, 2);
}

void gf_TerranMakeSupplyCleanup () {
    // Implementation
    TriggerEnable(gt_TerranMakeSupplyReminder, false);
    TriggerEnable(gt_TerranMakeSupplySCVSelection, false);
    TriggerEnable(gt_TerranMakeSupplyBuildMenu, false);
    TriggerEnable(gt_TerranMakeSupplySupplyDepotTargeting, false);
    TriggerEnable(gt_TerranMakeSupplyBuildOrder, false);
    TriggerEnable(gt_TerranMakeSupplyComplete, false);
    TriggerStop(gt_TerranMakeSupplyQ);
    gv_terranMakeSupplySCVSelected = false;
    gv_terranMakeSupplyTargetModeActive = false;
    gv_terranMakeSupplyBuildMenuPressed = false;
    gf_GenericCleanup();
    libNtve_gf_StopPulsingScreenImage(12);
    libNtve_gf_HideScreenImage(false, 12);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SupplyDepot", false);
}

void gf_TerranIdleSCVCleanup () {
    // Implementation
    TriggerEnable(gt_TerranIdleSCVComplete, false);
    TriggerEnable(gt_TerranIdleSCVSCVSelection, false);
    TriggerEnable(gt_TerranIdleSCVReminderQ, false);
    TriggerStop(gt_TerranIdleSCVQ);
    TriggerStop(gt_TerranIdleSCVReminderQ);
    gf_GenericCleanup();
    UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
    }
    UnitGroupLoopEnd();
}

void gf_TerranFinishSCVsCleanup () {
    // Implementation
    TriggerEnable(gt_TerranFinishSCVsSupplyHelperDone, false);
    TriggerEnable(gt_TerranFinishSCVsCommandCenterSelection, false);
    TriggerEnable(gt_TerranFinishSCVsTrainingStarted, false);
    TriggerEnable(gt_TerranFinishSCVsComplete, false);
    TriggerEnable(gt_TerranFinishSCVsReminderQ, false);
    TriggerEnable(gt_TerranFinishSCVsReminderController, false);
    TriggerStop(gt_TerranFinishSCVsQ);
    TriggerStop(gt_TerranFinishSCVsReminderQ);
    gf_GenericCleanup();
}

void gf_TerranMakeBarracksCleanup () {
    // Implementation
    TriggerEnable(gt_TerranMakeBarracksSCVSelection, false);
    TriggerEnable(gt_TerranMakeBarracksBuildMenu, false);
    TriggerEnable(gt_TerranMakeBarracksBarracksTargeting, false);
    TriggerEnable(gt_TerranMakeBarracksBuildOrder, false);
    TriggerEnable(gt_TerranMakeBarracksReminder, false);
    TriggerEnable(gt_TerranMakeBarracksComplete, false);
    TriggerStop(gt_TerranMakeBarracksQ);
    TriggerStop(gt_TerranMakeBarracksReminder);
    TriggerStop(gt_TerranMakeBarracksCompleteQ);
    gv_terranMakeBarracksSCVSelected = false;
    gv_terranMakeBarracksTargetModeActive = false;
    gv_terranMakeBarracksBuildMenuPressed = false;
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Barracks", false);
}

void gf_TerranMakeMarinesCleanup () {
    // Implementation
    TriggerEnable(gt_TerranMakeMarinesSupplyHelperDone, false);
    TriggerEnable(gt_TerranMakeMarinesBarracksSelection, false);
    TriggerEnable(gt_TerranMakeMarinesTrainingStarted, false);
    TriggerEnable(gt_TerranMakeMarinesReminderQ, false);
    TriggerEnable(gt_TerranMakeMarinesReminderController, false);
    TriggerEnable(gt_TerranMakeMarinesComplete, false);
    TriggerStop(gt_TerranMakeMarinesQ);
    TriggerStop(gt_TerranMakeMarinesReminderQ);
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Marine", false);
}

void gf_TerranLeaveBaseCleanup () {
    // Implementation
    TriggerEnable(gt_TerranLeaveBaseMarineSelection, false);
    TriggerEnable(gt_TerranLeaveBaseReminderQ, false);
    TriggerEnable(gt_TerranLeaveBaseComplete, false);
    TriggerStop(gt_TerranLeaveBaseQ);
    TriggerStop(gt_TerranLeaveBaseReminderQ);
    gf_GenericCleanup();
    if ((UnitIsAlive(gv_terran07BridgeBeacon) == true)) {
        UnitKill(gv_terran07BridgeBeacon);
        gv_terran07BridgeBeacon = null;
    }
    else {
    }
}

void gf_TerranFindScoutsCleanup () {
    // Implementation
    TriggerEnable(gt_TerranFindScoutsRevealer1, false);
    TriggerEnable(gt_TerranFindScoutsRevealer2, false);
    TriggerEnable(gt_TerranFindScoutsAttackOrder, false);
    TriggerEnable(gt_TerranFindScoutsMarineDeath, false);
    TriggerEnable(gt_TerranFindScoutsReminderQ, false);
    TriggerEnable(gt_TerranFindScoutsComplete, false);
    TriggerStop(gt_TerranFindScoutsQ);
    gf_GenericCleanup();
    if ((UnitIsAlive(gv_terranFindScoutsBeacon) == true)) {
        UnitKill(gv_terranFindScoutsBeacon);
        gv_terranFindScoutsBeacon = null;
    }
    else {
    }
    if ((UnitIsAlive(gv_terranAttackBeacon) == true)) {
        PingDestroy(gv_ping);
        UnitKill(gv_terranAttackBeacon);
        gv_terranAttackBeacon = null;
    }
    else {
    }
    if ((gv_terranFindScoutsRevealer1 != null)) {
        VisRevealerDestroy(gv_terranFindScoutsRevealer1);
        gv_terranFindScoutsRevealer1 = null;
    }
    else {
    }
    if ((gv_terranFindScoutsRevealer2 != null)) {
        VisRevealerDestroy(gv_terranFindScoutsRevealer2);
        gv_terranFindScoutsRevealer2 = null;
    }
    else {
    }
}

void gf_ZergMakeOverlordCleanup () {
    // Implementation
    TriggerEnable(gt_ZergMakeOverlordReminder, false);
    TriggerEnable(gt_ZergMakeOverlordHatcherySelection, false);
    TriggerEnable(gt_ZergMakeOverlordMorphStarted, false);
    TriggerEnable(gt_ZergMakeOverlordComplete, false);
    TriggerEnable(gt_ZergMakeOverlordMorphStartedQ, true);
    TriggerStop(gt_ZergMakeOverlordQ);
    TriggerStop(gt_ZergMakeOverlordMorphStartedQ);
    gv_zergMakeOverlordLarvaSelected = false;
    gf_GenericCleanup();
    UnitSetState(gv_zergHatchery, c_unitStateStatusBar, true);
    libNtve_gf_StopPulsingScreenImage(12);
    libNtve_gf_HideScreenImage(false, 12);
}

void gf_ZergMakeDronesCleanup () {
    // Implementation
    TriggerEnable(gt_ZergMakeDronesReminder, false);
    TriggerEnable(gt_ZergMakeDronesFirstMorph, false);
    TriggerEnable(gt_ZergMakeDronesHatcherySelection, false);
    TriggerEnable(gt_ZergMakeDronesReminderController, false);
    TriggerEnable(gt_ZergMakeDronesComplete, false);
    TriggerEnable(gt_ZergMakeDronesMorphStartedQ, true);
    TriggerEnable(gt_ZergMakeDronesTwoLarvaSelectedQ, true);
    TriggerStop(gt_ZergMakeDronesQ);
    TriggerStop(gt_ZergMakeDronesMorphStartedQ);
    gf_GenericCleanup();
    UnitSetState(gv_zergHatchery, c_unitStateStatusBar, true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Drone", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    gv_zergMakeUnitCount = 0;
    gv_zergMakeDronesLarvaSelected = false;
    gv_zergMakeDronesTwoLarvaSelectPlayed = false;
    libNtve_gf_SetUpgradeLevelForPlayer(gv_p01_USER, "LarvaCap2", 0);
}

void gf_ZergMakeSpawningPoolCleanup () {
    // Implementation
    TriggerEnable(gt_ZergMakeSpawningPoolReminder, false);
    TriggerEnable(gt_ZergMakeSpawningPoolDroneSelection, false);
    TriggerEnable(gt_ZergMakeSpawningPoolBuildMenu, false);
    TriggerEnable(gt_ZergMakeSpawningPoolTargeting, false);
    TriggerEnable(gt_ZergMakeSpawningPoolBuildOrder, false);
    TriggerEnable(gt_ZergMakeSpawningPoolComplete, false);
    TriggerEnable(gt_ZergMakeSpawningPoolBuildOrderQ, true);
    gv_zergMakeSpawningPoolDroneSelected = false;
    gv_zergMakeSpawningPoolBuildMenuPressed = false;
    gv_zergMakeSpawningPoolTargetModeActive = false;
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SpawningPool", false);
    if ((UnitIsAlive(gv_invisHelper) == true)) {
        UnitRemove(gv_invisHelper);
        gv_invisHelper = null;
    }
    else {
    }
}

void gf_ZergMakeZerglingsCleanup () {
    // Implementation
    TriggerEnable(gt_ZergMakeZerglingsFirstMorph, false);
    TriggerEnable(gt_ZergMakeZerglingsSupplyHelperDone, false);
    TriggerEnable(gt_ZergMakeZerglingsHatcherySelection, false);
    TriggerEnable(gt_ZergMakeZerglingsMorphStarted, false);
    TriggerEnable(gt_ZergMakeZerglingsReminder, false);
    TriggerEnable(gt_ZergMakeZerglingsComplete, false);
    TriggerEnable(gt_ZergMakeZerglingsMorphStartedQ, true);
    TriggerEnable(gt_ZergMakeZerglingsDontWaitQ, true);
    gv_zergMakeZerglingsLarvaSelected = false;
    gf_GenericCleanup();
    UnitSetState(gv_zergHatchery, c_unitStateStatusBar, true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zergling", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    gv_zergMakeUnitCount = 0;
}

void gf_ZergMakeExtractorCleanup () {
    // Implementation
    TriggerEnable(gt_ZergMakeExtractorDroneSelection, false);
    TriggerEnable(gt_ZergMakeExtractorBuildMenu, false);
    TriggerEnable(gt_ZergMakeExtractorTargeting, false);
    TriggerEnable(gt_ZergMakeExtractorBuildOrder, false);
    TriggerEnable(gt_ZergMakeExtractorReminder, false);
    TriggerEnable(gt_ZergMakeExtractorComplete, false);
    TriggerEnable(gt_ZergMakeExtractorBuildOrderQ, true);
    gv_zergMakeExtractorDroneSelected = false;
    gv_zergMakeExtractorBuildMenuPressed = false;
    gv_zergMakeExtractorTargetModeActive = false;
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Extractor", false);
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
    }
    UnitGroupLoopEnd();
}

void gf_ZergTransferDronesCleanup () {
    // Implementation
    TriggerEnable(gt_ZergTransferDronesReminderQ, false);
    TriggerEnable(gt_ZergTransferDronesComplete, false);
    TriggerEnable(gt_ZergTransferDronesDroneSelection, false);
    TriggerStop(gt_ZergTransferDronesQ);
    TriggerStop(gt_ZergTransferDronesReminderQ);
    gf_GenericCleanup();
}

void gf_ZergMakeRoachWarrenCleanup () {
    // Implementation
    TriggerEnable(gt_ZergMakeRoachWarrenDroneSelection, false);
    TriggerEnable(gt_ZergMakeRoachWarrenBuildMenu, false);
    TriggerEnable(gt_ZergMakeRoachWarrenTargeting, false);
    TriggerEnable(gt_ZergMakeRoachWarrenBuildOrder, false);
    TriggerEnable(gt_ZergMakeRoachWarrenReminder, false);
    TriggerEnable(gt_ZergMakeRoachWarrenComplete, false);
    gv_zergMakeRoachWarrenTargetModeActive = false;
    gv_zergMakeRoachWarrenBuildMenuPressed = false;
    gv_zergMakeRoachWarrenDroneSelected = false;
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "RoachWarren", false);
}

void gf_ZergMakeRoachesCleanup () {
    // Implementation
    TriggerEnable(gt_ZergMakeRoachesSupplyHelperDone, false);
    TriggerEnable(gt_ZergMakeRoachesHatcherySelection, false);
    TriggerEnable(gt_ZergMakeRoachesReminder, false);
    TriggerEnable(gt_ZergMakeRoachesMorphStarted, false);
    TriggerEnable(gt_ZergMakeRoachesFirstMorph, false);
    TriggerEnable(gt_ZergMakeRoachesComplete, false);
    TriggerEnable(gt_ZergMakeRoachesMorphStartedQ, true);
    TriggerEnable(gt_ZergMakeRoachesDontWaitQ, true);
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Roach", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    gv_zergMakeUnitCount = 0;
    gv_zergMakeRoachesLarvaSelected = false;
}

void gf_ZergSelectArmyCreateF2Directive () {
    // Variable Declarations
    string lv_backgroundImage;
    string lv_titleStyle;
    string lv_textStyle;
    int lv_panel;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    DialogCreate(800, 400, c_anchorTop, 0, 200, true);
    gv_zergSelectArmyF2Directive = DialogLastCreated();
    DialogSetImageVisible(gv_zergSelectArmyF2Directive, false);
    DialogControlCreateFromTemplate(gv_zergSelectArmyF2Directive, c_triggerControlTypePanel, "LotV_TutorialUI/TutorialArmySelectDirective");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0025124A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TutorialDirectiveTitleZerg", PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "Background");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techtree_iconname_frame_zerg.dds", PlayerGroupAll());
    DialogSetVisible(gv_zergSelectArmyF2Directive, PlayerGroupAll(), true);
}

void gf_ZergSelectArmyCleanup () {
    // Implementation
    TriggerEnable(gt_ZergSelectArmyComplete, false);
    TriggerEnable(gt_ZergSelectArmyReminderQ, false);
    TriggerStop(gt_ZergSelectArmyQ);
    TriggerStop(gt_ZergSelectArmyReminderQ);
    gf_GenericCleanup();
    DialogDestroy(gv_zergSelectArmyF2Directive);
    gv_zergSelectArmyF2Directive = c_invalidDialogId;
    libVCUI_gf_ToggleArmyButtonFlashing(false);
}

void gf_ZergAttackCleanup () {
    // Implementation
    TriggerEnable(gt_ZergAttackAttackOrder, false);
    TriggerEnable(gt_ZergAttackSelectionReminder, false);
    TriggerEnable(gt_ZergAttackUnitDeath, false);
    TriggerEnable(gt_ZergAttackReminderQ, false);
    TriggerEnable(gt_ZergAttackComplete, false);
    TriggerStop(gt_ZergAttackQ);
    TriggerStop(gt_ZergAttackReminderQ);
    gf_GenericCleanup();
    VisRevealerDestroy(gv_zergAttackRevealer);
    if ((UnitIsAlive(gv_zergAttackBeacon) == true)) {
        UnitKill(gv_zergAttackBeacon);
        gv_zergAttackBeacon = null;
    }
    else {
    }
    if ((gv_zergSelectArmyF2Directive != c_invalidDialogId)) {
        DialogDestroy(gv_zergSelectArmyF2Directive);
        gv_zergSelectArmyF2Directive = c_invalidDialogId;
    }
    else {
    }
    libVCUI_gf_ToggleArmyButtonFlashing(false);
}

void gf_ZergAttackBaseCleanup () {
    // Implementation
    TriggerEnable(gt_ZergAttackBaseRevealer, false);
    TriggerEnable(gt_ZergAttackBaseApproachMarines, false);
    TriggerEnable(gt_ZergAttackBaseUnitDeath, false);
    TriggerEnable(gt_ZergAttackBaseSelectionReminder, false);
    TriggerEnable(gt_ZergAttackBaseAttackOrder, false);
    TriggerEnable(gt_ZergAttackBaseReminderQ, false);
    TriggerEnable(gt_ZergAttackBaseComplete, false);
    TriggerStop(gt_ZergAttackBaseQ);
    TriggerStop(gt_ZergAttackBaseReminderQ);
    gf_GenericCleanup();
    if ((gv_zergSelectArmyF2Directive != c_invalidDialogId)) {
        DialogDestroy(gv_zergSelectArmyF2Directive);
        gv_zergSelectArmyF2Directive = c_invalidDialogId;
    }
    else {
    }
    libVCUI_gf_ToggleArmyButtonFlashing(false);
    if ((UnitIsAlive(gv_zergAttackBeacon) == true)) {
        PingDestroy(gv_ping);
        UnitKill(gv_zergAttackBeacon);
        gv_zergAttackBeacon = null;
    }
    else {
    }
    if ((gv_zergAttackBaseRevealer != null)) {
        VisRevealerDestroy(gv_zergAttackBaseRevealer);
        gv_zergAttackBaseRevealer = null;
    }
    else {
    }
}

void gf_ProtossInfestedTerransCleanup () {
    // Implementation
    TriggerEnable(gt_ProtossInfestedTerransAggroInfested, false);
    TriggerEnable(gt_ProtossInfestedTerransAttackOrder, false);
    TriggerEnable(gt_ProtossInfestedTerransReminderQ, false);
    TriggerEnable(gt_ProtossInfestedTerransComplete, false);
    TriggerStop(gt_ProtossInfestedTerransQ);
    TriggerStop(gt_ProtossInfestedTerransReminderQ);
    gf_GenericCleanup();
    if ((UnitIsAlive(gv_protossAttackBeacon) == true)) {
        UnitKill(gv_protossAttackBeacon);
        gv_protossAttackBeacon = null;
    }
    else {
    }
}

void gf_ProtossZergEggsCleanup () {
    // Implementation
    TriggerEnable(gt_ProtossZergEggsReminderQ, false);
    TriggerEnable(gt_ProtossZergEggsReminderReset, false);
    TriggerEnable(gt_ProtossZergEggsComplete, false);
    TriggerStop(gt_ProtossZergEggsQ);
    TriggerStop(gt_ProtossZergEggsReminderQ);
    gf_GenericCleanup();
    if ((UnitIsAlive(gv_protossFindBaseBeacon) == true)) {
        UnitKill(gv_protossFindBaseBeacon);
        gv_protossFindBaseBeacon = null;
    }
    else {
    }
}

void gf_ProtossFindBaseCleanup () {
    // Implementation
    TriggerEnable(gt_ProtossFindBaseApproachRocks, false);
    TriggerEnable(gt_ProtossFindBaseReminderQ, false);
    TriggerEnable(gt_ProtossFindBaseComplete, false);
    TriggerEnable(gt_ProtossFindBaseApproachRocksQ, true);
    TriggerStop(gt_ProtossFindBaseQ);
    TriggerStop(gt_ProtossFindBaseReminderQ);
    gf_GenericCleanup();
    CameraLockInput(gv_p01_USER, false);
    UnitGroupLoopBegin(gv_protossStartingStalkers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Blink", false);
    if ((UnitIsAlive(gv_invisHelper) == true)) {
        UnitRemove(gv_invisHelper);
        gv_invisHelper = null;
    }
    else {
    }
    if ((UnitIsAlive(gv_protossFindBaseBeacon) == true)) {
        UnitKill(gv_protossFindBaseBeacon);
        gv_protossFindBaseBeacon = null;
    }
    else {
    }
}

void gf_ProtossBuildPylonCleanup () {
    // Implementation
    TriggerEnable(gt_ProtossBuildPylonProbeSelection, false);
    TriggerEnable(gt_ProtossBuildPylonBuildMenu, false);
    TriggerEnable(gt_ProtossBuildPylonTargeting, false);
    TriggerEnable(gt_ProtossBuildPylonBuildOrder, false);
    TriggerEnable(gt_ProtossBuildPylonReminder, false);
    TriggerEnable(gt_ProtossBuildPylonComplete, false);
    TriggerEnable(gt_ProtossBuildPylonBuildOrderQ, true);
    TriggerEnable(gt_ProtossBuildPylonBadBuildOrderQ, true);
    TriggerEnable(gt_ProtossBuildPylonKindaBadBuildOrderQ, true);
    TriggerStop(gt_ProtossBuildPylonQ);
    TriggerStop(gt_ProtossBuildPylonReminder);
    gv_protossBuildPylonProbeSelected = false;
    gv_protossBuildPylonTargetModeActive = false;
    gv_protossBuildPylonBuildMenuPressed = false;
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", false);
}

void gf_ProtossWarpZealotsCleanup () {
    // Implementation
    TriggerEnable(gt_ProtossWarpZealotsTrainingStarted, false);
    TriggerEnable(gt_ProtossWarpZealotsSupplyHelperDone, false);
    TriggerEnable(gt_ProtossWarpZealotsGatewaySelection, false);
    TriggerEnable(gt_ProtossWarpZealotsReminderQ, false);
    TriggerEnable(gt_ProtossWarpZealotsReminderController, false);
    TriggerEnable(gt_ProtossWarpZealotsComplete, false);
    TriggerStop(gt_ProtossWarpZealotsQ);
    TriggerStop(gt_ProtossWarpZealotsReminderQ);
    TriggerEnable(gt_ProtossWarpZealotsUpdateObj, false);
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zealot", false);
    gv_protossWarpZealotsCount = 0;
}

void gf_ProtossBuildCyberCoreCleanup () {
    // Implementation
    TriggerEnable(gt_ProtossBuildCyberCoreProbeSelection, false);
    TriggerEnable(gt_ProtossBuildCyberCoreBuildMenu, false);
    TriggerEnable(gt_ProtossBuildCyberCoreTargeting, false);
    TriggerEnable(gt_ProtossBuildCyberCoreBuildOrder, false);
    TriggerEnable(gt_ProtossBuildCyberCoreReminder, false);
    TriggerEnable(gt_ProtossBuildCyberCoreComplete, false);
    TriggerEnable(gt_ProtossBuildCyberCoreBuildOrderQ, true);
    gv_protossBuildCyberCoreProbeSelected = false;
    gv_protossBuildCyberCoreTargetModeActive = false;
    gv_protossBuildCyberCoreBuildMenuPressed = false;
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "CyberneticsCore", false);
}

void gf_ProtossWarpStalkersCleanup () {
    // Implementation
    TriggerEnable(gt_ProtossWarpStalkersTrainingStarted, false);
    TriggerEnable(gt_ProtossWarpStalkersSupplyHelperDone, false);
    TriggerEnable(gt_ProtossWarpStalkersGatewaySelection, false);
    TriggerEnable(gt_ProtossWarpStalkersReminderQ, false);
    TriggerEnable(gt_ProtossWarpStalkersComplete, false);
    TriggerEnable(gt_ProtossWarpStalkersUpdateObj, false);
    TriggerEnable(gt_ProtossWarpStalkersReminderController, false);
    TriggerStop(gt_ProtossWarpStalkersQ);
    TriggerStop(gt_ProtossWarpStalkersReminderQ);
    gf_GenericCleanup();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Stalker", false);
    gv_protossWarpStalkersCount = 0;
}

void gf_ProtossSurviveAttackCleanup () {
    // Implementation
    gf_GenericCleanup();
    VisRevealerDestroy(gv_protossSurviveAttackRevealer);
    TriggerEnable(gt_ProtossSurviveAttackRocksDestroyed, false);
    TriggerEnable(gt_ProtossSurviveAttackComplete, false);
    TriggerStop(gt_ProtossSurviveAttackQ);
}

trigger auto_gf_ProtossOutroMakeBeam_Trigger = null;
point auto_gf_ProtossOutroMakeBeam_lp_point;

void gf_ProtossOutroMakeBeam (point lp_point) {
    auto_gf_ProtossOutroMakeBeam_lp_point = lp_point;

    if (auto_gf_ProtossOutroMakeBeam_Trigger == null) {
        auto_gf_ProtossOutroMakeBeam_Trigger = TriggerCreate("auto_gf_ProtossOutroMakeBeam_TriggerFunc");
    }

    TriggerExecute(auto_gf_ProtossOutroMakeBeam_Trigger, false, false);
}

bool auto_gf_ProtossOutroMakeBeam_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_ProtossOutroMakeBeam_lp_point;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialPurifierBeamUnit", c_unitCreateIgnorePlacement, 0, lp_point);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lp_point, 15.0, PointGetFacing(lp_point))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    int auto07250C62_val;

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("SC2Tutorial", gv_p01_USER);
    gv_tutorialBankSave = BankLastCreated();
    gv_tutorialProgress = BankValueGetAsInt(gv_tutorialBankSave, "General", "Progress");
    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
    TriggerExecute(gt_Init01Players, true, true);
    TriggerExecute(gt_Init02Units, true, true);
    TriggerExecute(gt_Init03Technology, true, true);
    TriggerExecute(gt_Init04UserInterface, true, true);
    if ((gv_tutorialProgress == 0)) {
        TriggerExecute(gt_BasicInitialization, true, false);
    }
    else {
        auto07250C62_val = gv_tutorialProgress;
        if (auto07250C62_val == 1) {
            gv_selectedStage = 2;
        }
        else if (auto07250C62_val == 2) {
            gv_selectedStage = 3;
        }
        else if (auto07250C62_val == 3) {
            gv_selectedStage = 4;
        }
        else if (auto07250C62_val == 4) {
            gv_selectedStage = 4;
        }
        else {
        }
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
        gf_UpdateVictoryScreen();
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
        DialogSetVisible(gv_victoryUI, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init01Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_p01_USER, gv_p02_ENEMY, libNtve_ge_AllianceSetting_Enemy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Players_Init () {
    gt_Init01Players = TriggerCreate("gt_Init01Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init02Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitEventSetNullVariableInvalid(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Units_Init () {
    gt_Init02Units = TriggerCreate("gt_Init02Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init03Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(0, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Technology_Init () {
    gt_Init03Technology = TriggerCreate("gt_Init03Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 User Interface
//--------------------------------------------------------------------------------------------------
bool gt_Init04UserInterface_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_padding;
    int lv_portraitSize;
    int lv_panel;

    // Variable Initialization
    lv_padding = 40;
    lv_portraitSize = 150;
    lv_panel = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_ShowSpearofAdunUI(false, c_transitionDurationImmediate);
    PlayerSetState(gv_p02_ENEMY, c_playerStateShowWorldTip, false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    DialogCreate(920, 450, c_anchorCenter, 0, -100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    gv_victoryUI = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/VictoryUI");
    gv_victoryUI_Panel = DialogControlLastCreated();
    DialogControlHookup(gv_victoryUI_Panel, c_triggerControlTypeImage, "Background");
    gv_victoryUI_BackgroundImage = DialogControlLastCreated();
    DialogControlHookup(gv_victoryUI_Panel, c_triggerControlTypePanel, "VictoryFrame");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "VictoryStageNumberLabel");
    gv_victoryUI_StageNumber = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "VictoryStageTitleLabel");
    gv_victoryUI_StageName = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoImage");
    gv_victoryUI_InfoImage = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoImageBorder");
    gv_victoryUI_InfoBorder = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypePortrait, "VictoryBasicPortrait");
    gv_victoryUI_Portraits[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypePortrait, "VictoryTerranPortrait");
    gv_victoryUI_Portraits[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypePortrait, "VictoryZergPortrait");
    gv_victoryUI_Portraits[3] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypePortrait, "VictoryProtossPortrait");
    gv_victoryUI_Portraits[4] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemModel(gv_victoryUI_Portraits[1], "AdjutantPortrait", PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(gv_victoryUI_Portraits[2], "DominionOfficer1Portrait", PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(gv_victoryUI_Portraits[3], "QueenPortrait", PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(gv_victoryUI_Portraits[4], "ExecutorPortrait", PlayerGroupAll());
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryZergLockedImage");
    gv_victoryUI_LockedPortraits[3] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryProtossLockedImage");
    gv_victoryUI_LockedPortraits[4] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeButton, "VictoryBasicPortraitButton");
    gv_victoryUI_StageSelectButtons[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeButton, "VictoryTerranPortraitButton");
    gv_victoryUI_StageSelectButtons[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeButton, "VictoryZergPortraitButton");
    gv_victoryUI_StageSelectButtons[3] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeButton, "VictoryProtossPortraitButton");
    gv_victoryUI_StageSelectButtons[4] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeButton, "ContinueButton");
    gv_victoryUI_ContinueButton = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeButton, "ExitButton");
    gv_victoryUI_ExitButton = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxBasic1");
    gv_victoryUI_InfoBoxBasic[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxBasic2");
    gv_victoryUI_InfoBoxBasic[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxBasic3");
    gv_victoryUI_InfoBoxBasic[3] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxTerran1");
    gv_victoryUI_InfoBoxTerran[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxTerran2");
    gv_victoryUI_InfoBoxTerran[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxTerran3");
    gv_victoryUI_InfoBoxTerran[3] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxTerran4");
    gv_victoryUI_InfoBoxTerran[4] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxTerran5");
    gv_victoryUI_InfoBoxTerran[5] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxZerg1");
    gv_victoryUI_InfoBoxZerg[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxZerg2");
    gv_victoryUI_InfoBoxZerg[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxZerg3");
    gv_victoryUI_InfoBoxZerg[3] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxZerg4");
    gv_victoryUI_InfoBoxZerg[4] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxZerg5");
    gv_victoryUI_InfoBoxZerg[5] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxZerg6");
    gv_victoryUI_InfoBoxZerg[6] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxProtoss1");
    gv_victoryUI_InfoBoxProtoss[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxProtoss2");
    gv_victoryUI_InfoBoxProtoss[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxProtoss3");
    gv_victoryUI_InfoBoxProtoss[3] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxProtoss4");
    gv_victoryUI_InfoBoxProtoss[4] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "VictoryInfoBoxProtoss5");
    gv_victoryUI_InfoBoxProtoss[5] = DialogControlLastCreated();
    DialogCreate(800, 400, c_anchorTop, 0, 200, true);
    gv_friendlyFireDirective = DialogLastCreated();
    DialogSetImageVisible(gv_friendlyFireDirective, false);
    DialogControlCreateFromTemplate(gv_friendlyFireDirective, c_triggerControlTypePanel, "LotV_TutorialUI/TutorialFriendlyFireDirective");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "Label");
    gv_friendlyFireDirectiveText = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "Title");
    gv_friendlyFireDirectiveTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "Background");
    gv_friendlyFireDirectiveBackground = DialogControlLastCreated();
    DialogCreate(800, 400, c_anchorTop, 0, 200, true);
    gv_moveOrderDirective = DialogLastCreated();
    DialogSetImageVisible(gv_moveOrderDirective, false);
    DialogControlCreateFromTemplate(gv_moveOrderDirective, c_triggerControlTypePanel, "LotV_TutorialUI/TutorialMoveOrderDirective");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "Label");
    gv_moveOrderDirectiveText = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "Title");
    gv_moveOrderDirectiveTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "Background");
    gv_moveOrderDirectiveBackground = DialogControlLastCreated();
    DialogCreate(800, 400, c_anchorTopRight, 20, 100, true);
    gv_supplyHelperUI = DialogLastCreated();
    DialogSetImageVisible(gv_supplyHelperUI, false);
    DialogControlCreateFromTemplate(gv_supplyHelperUI, c_triggerControlTypePanel, "LotV_TutorialUI/TutorialSupplyHelperDirective");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "Label");
    gv_supplyHelperUIText = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeLabel, "Title");
    gv_supplyHelperUITitle = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeImage, "Background");
    gv_supplyHelperUIBackground = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialOffscreenUnitContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeOffscreenUnit, "TutorialOffscreenUnitFrame");
    gv_offscreenUnitUIUnitFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "ArrowImage");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04UserInterface_Init () {
    gt_Init04UserInterface = TriggerCreate("gt_Init04UserInterface_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage1
//--------------------------------------------------------------------------------------------------
bool gt_Stage1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_victoryUI_StageSelectButtons[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedStage = 1;
    gf_UpdateVictoryScreen();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage1_Init () {
    gt_Stage1 = TriggerCreate("gt_Stage1_Func");
    TriggerAddEventDialogControl(gt_Stage1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage2
//--------------------------------------------------------------------------------------------------
bool gt_Stage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_victoryUI_StageSelectButtons[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedStage = 2;
    gf_UpdateVictoryScreen();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage2_Init () {
    gt_Stage2 = TriggerCreate("gt_Stage2_Func");
    TriggerAddEventDialogControl(gt_Stage2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage3
//--------------------------------------------------------------------------------------------------
bool gt_Stage3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_victoryUI_StageSelectButtons[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedStage = 3;
    gf_UpdateVictoryScreen();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage3_Init () {
    gt_Stage3 = TriggerCreate("gt_Stage3_Func");
    TriggerAddEventDialogControl(gt_Stage3, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage4
//--------------------------------------------------------------------------------------------------
bool gt_Stage4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_victoryUI_StageSelectButtons[4]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedStage = 4;
    gf_UpdateVictoryScreen();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stage4_Init () {
    gt_Stage4 = TriggerCreate("gt_Stage4_Func");
    TriggerAddEventDialogControl(gt_Stage4, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ExitButton
//--------------------------------------------------------------------------------------------------
bool gt_ExitButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_victoryUI_ExitButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(gv_p01_USER, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExitButton_Init () {
    gt_ExitButton = TriggerCreate("gt_ExitButton_Func");
    TriggerAddEventDialogControl(gt_ExitButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ContinueButton
//--------------------------------------------------------------------------------------------------
bool gt_ContinueButton_Func (bool testConds, bool runActions) {
    int autoA70E910A_val;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_victoryUI_ContinueButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA70E910A_val = gv_selectedStage;
    if (autoA70E910A_val == 1) {
        DialogSetVisible(gv_victoryUI, PlayerGroupAll(), false);
        UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationImmediate);
        PlayerSetRace(gv_p01_USER, "Terr");
        TriggerExecute(gt_BasicInitialization, true, false);
    }
    else if (autoA70E910A_val == 2) {
        DialogSetVisible(gv_victoryUI, PlayerGroupAll(), false);
        UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationImmediate);
        PlayerSetRace(gv_p01_USER, "Terr");
        TriggerExecute(gt_TerranInitialization, true, false);
    }
    else if (autoA70E910A_val == 3) {
        DialogSetVisible(gv_victoryUI, PlayerGroupAll(), false);
        UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationImmediate);
        PlayerSetRace(gv_p01_USER, "Zerg");
        TriggerExecute(gt_ZergInitialization, true, false);
    }
    else if (autoA70E910A_val == 4) {
        DialogSetVisible(gv_victoryUI, PlayerGroupAll(), false);
        UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationImmediate);
        PlayerSetRace(gv_p01_USER, "Prot");
        TriggerExecute(gt_ProtossInitialization, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ContinueButton_Init () {
    gt_ContinueButton = TriggerCreate("gt_ContinueButton_Func");
    TriggerAddEventDialogControl(gt_ContinueButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Friendly Fire Helper
//--------------------------------------------------------------------------------------------------
bool gt_FriendlyFireHelper_Func (bool testConds, bool runActions) {
    string autoEE1F3F0B_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_titleStyle;
    string lv_textStyle;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((OrderGetTargetType(EventUnitOrder()) == c_orderTargetUnit))) {
            return false;
        }

        if (!((UnitGetOwner(OrderGetTargetUnit(EventUnitOrder())) == gv_p01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((DialogIsVisible(gv_moveOrderDirective, gv_p01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_currentStage != 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    if ((gv_zergSelectArmyF2Directive != c_invalidDialogId)) {
        DialogDestroy(gv_zergSelectArmyF2Directive);
        gv_zergSelectArmyF2Directive = c_invalidDialogId;
        libVCUI_gf_ToggleArmyButtonFlashing(false);
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        IntLoopBegin(0, 10);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), IntLoopCurrent())) == AbilityCommand("attack", 0)) && (OrderGetTargetType(UnitOrder(UnitGroupLoopCurrent(), IntLoopCurrent())) == c_orderTargetUnit) && (UnitGetOwner(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), IntLoopCurrent()))) == gv_p01_USER)) {
                UnitGroupAdd(gv_combatHelperUnitGroup, UnitGroupLoopCurrent());
                ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HaloStart");
                ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "SetTintColor {255,255,255 2.000000}");
            }
            else {
            }
        }
        IntLoopEnd();
    }
    UnitGroupLoopEnd();
    CameraPan(gv_p01_USER, UnitGroupCenterOfGroup(gv_combatHelperUnitGroup), 1.0, -1, 10.0, false);
    libNtve_gf_SetDialogItemText(gv_friendlyFireDirectiveText, StringExternal("Param/Value/5B220937"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_friendlyFireDirectiveTitle, StringExternal("Param/Value/6EE9EB0C"), PlayerGroupAll());
    autoEE1F3F0B_val = PlayerRace(gv_p01_USER);
    if (autoEE1F3F0B_val == "Terr") {
        lv_backgroundImage = "Assets\\Textures\\ui_techtree_iconname_frame.dds";
        lv_titleStyle = "TutorialDirectiveTitleTerran";
        lv_textStyle = "TutorialDirectiveTextTerran";
    }
    else if (autoEE1F3F0B_val == "Zerg") {
        lv_backgroundImage = "Assets\\Textures\\ui_techtree_iconname_frame_zerg.dds";
        lv_titleStyle = "TutorialDirectiveTitleZerg";
        lv_textStyle = "TutorialDirectiveTextZerg";
    }
    else if (autoEE1F3F0B_val == "Prot") {
        lv_backgroundImage = "Assets\\Textures\\ui_techtree_iconname_frame_protoss.dds";
        lv_titleStyle = "TutorialDirectiveTitleProtoss";
        lv_textStyle = "TutorialDirectiveTextProtoss";
    }
    else {
    }
    libNtve_gf_SetDialogItemImage(gv_friendlyFireDirectiveBackground, lv_backgroundImage, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_friendlyFireDirectiveTitle, lv_titleStyle, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_friendlyFireDirectiveText, lv_textStyle, PlayerGroupAll());
    DialogSetVisible(gv_friendlyFireDirective, PlayerGroupAll(), true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(gv_p01_USER), c_localSelectionTypeUnknown, false);
    gf_TutorialPause();
    TriggerEnable(gt_FriendlyFireHelperUnpauser, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FriendlyFireHelper_Init () {
    gt_FriendlyFireHelper = TriggerCreate("gt_FriendlyFireHelper_Func");
    TriggerAddEventUnitOrder(gt_FriendlyFireHelper, null, AbilityCommand("attack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Friendly Fire Helper Unpauser
//--------------------------------------------------------------------------------------------------
bool gt_FriendlyFireHelperUnpauser_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(EventUnitOrder(), c_cmdQueued) == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!(((OrderGetAbilityCommand(EventUnitOrder()) != AbilityCommand("attack", 0)) || ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) != c_orderTargetUnit)) || ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) == c_orderTargetUnit) && (UnitGetOwner(OrderGetTargetUnit(EventUnitOrder())) != gv_p01_USER))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_combatHelperUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupRemove(gv_combatHelperUnitGroup, UnitGroupLoopCurrent());
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HaloStop");
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "SetTintColor 255,255,255");
    }
    UnitGroupLoopEnd();
    DialogSetVisible(gv_friendlyFireDirective, PlayerGroupAll(), false);
    UISetSelectionTypeEnabled(PlayerGroupSingle(gv_p01_USER), c_localSelectionTypeUnknown, true);
    gf_TutorialUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FriendlyFireHelperUnpauser_Init () {
    gt_FriendlyFireHelperUnpauser = TriggerCreate("gt_FriendlyFireHelperUnpauser_Func");
    TriggerEnable(gt_FriendlyFireHelperUnpauser, false);
    TriggerAddEventUnitOrder(gt_FriendlyFireHelperUnpauser, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Command Helper
//--------------------------------------------------------------------------------------------------
bool gt_MoveCommandHelper_Func (bool testConds, bool runActions) {
    string auto7B757DFA_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_titleStyle;
    string lv_textStyle;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() == gv_p02_ENEMY))) {
            return false;
        }

        if (!((OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)) == AbilityCommand("move", 0)))) {
            return false;
        }

        if (!((gf_UnitIsArmyUnit(EventUnit()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_zergSelectArmyF2Directive != c_invalidDialogId)) {
        DialogDestroy(gv_zergSelectArmyF2Directive);
        gv_zergSelectArmyF2Directive = c_invalidDialogId;
        libVCUI_gf_ToggleArmyButtonFlashing(false);
    }
    else {
    }
    UnitClearSelection(gv_p01_USER);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("move", 0))) {
            UnitGroupAdd(gv_combatHelperUnitGroup, UnitGroupLoopCurrent());
            ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HaloStart");
            ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "SetTintColor {255,255,255 2.000000}");
            UnitSelect(UnitGroupLoopCurrent(), gv_p01_USER, true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    CameraPan(gv_p01_USER, UnitGroupCenterOfGroup(gv_combatHelperUnitGroup), 1.0, -1, 10.0, false);
    libNtve_gf_SetDialogItemText(gv_moveOrderDirectiveText, StringExternal("Param/Value/766FC4C8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_moveOrderDirectiveTitle, StringExternal("Param/Value/C4C67C62"), PlayerGroupAll());
    auto7B757DFA_val = PlayerRace(gv_p01_USER);
    if (auto7B757DFA_val == "Terr") {
        lv_backgroundImage = "Assets\\Textures\\ui_techtree_iconname_frame.dds";
        lv_titleStyle = "TutorialDirectiveTitleTerran";
        lv_textStyle = "TutorialDirectiveTextTerran";
    }
    else if (auto7B757DFA_val == "Zerg") {
        lv_backgroundImage = "Assets\\Textures\\ui_techtree_iconname_frame_zerg.dds";
        lv_titleStyle = "TutorialDirectiveTitleZerg";
        lv_textStyle = "TutorialDirectiveTextZerg";
    }
    else if (auto7B757DFA_val == "Prot") {
        lv_backgroundImage = "Assets\\Textures\\ui_techtree_iconname_frame_protoss.dds";
        lv_titleStyle = "TutorialDirectiveTitleProtoss";
        lv_textStyle = "TutorialDirectiveTextProtoss";
    }
    else {
    }
    libNtve_gf_SetDialogItemImage(gv_moveOrderDirectiveBackground, lv_backgroundImage, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_moveOrderDirectiveTitle, lv_titleStyle, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_moveOrderDirectiveText, lv_textStyle, PlayerGroupAll());
    DialogSetVisible(gv_moveOrderDirective, PlayerGroupAll(), true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(gv_p01_USER), c_localSelectionTypeUnknown, false);
    gf_TutorialPause();
    TriggerEnable(gt_MoveCommandHelperUnpauser, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveCommandHelper_Init () {
    gt_MoveCommandHelper = TriggerCreate("gt_MoveCommandHelper_Func");
    TriggerAddEventUnitDamaged(gt_MoveCommandHelper, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Command Helper Unpauser
//--------------------------------------------------------------------------------------------------
bool gt_MoveCommandHelperUnpauser_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!(((OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint) || ((OrderGetTargetType(EventUnitOrder()) == c_orderTargetUnit) && (UnitGetOwner(OrderGetTargetUnit(EventUnitOrder())) != gv_p01_USER))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(gv_combatHelperUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupRemove(gv_combatHelperUnitGroup, UnitGroupLoopCurrent());
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "HaloStop");
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "SetTintColor 255,255,255");
    }
    UnitGroupLoopEnd();
    DialogSetVisible(gv_moveOrderDirective, PlayerGroupAll(), false);
    UISetSelectionTypeEnabled(PlayerGroupSingle(gv_p01_USER), c_localSelectionTypeUnknown, true);
    gf_TutorialUnpause();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveCommandHelperUnpauser_Init () {
    gt_MoveCommandHelperUnpauser = TriggerCreate("gt_MoveCommandHelperUnpauser_Func");
    TriggerEnable(gt_MoveCommandHelperUnpauser, false);
    TriggerAddEventUnitOrder(gt_MoveCommandHelperUnpauser, null, AbilityCommand("attack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfoText UnitCreated
//--------------------------------------------------------------------------------------------------
bool gt_InfoTextUnitCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == gv_p01_USER) || (UnitGetOwner(EventUnitCreatedUnit()) == 0)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "Nexus") || (UnitGetType(EventUnitCreatedUnit()) == "Pylon") || (UnitGetType(EventUnitCreatedUnit()) == "Gateway") || (UnitGetType(EventUnitCreatedUnit()) == "CyberneticsCore") || (UnitGetType(EventUnitCreatedUnit()) == "Assimilator") || (UnitGetType(EventUnitCreatedUnit()) == "Probe") || (UnitGetType(EventUnitCreatedUnit()) == "CommandCenter") || (UnitGetType(EventUnitCreatedUnit()) == "CommandCenterFlying") || (UnitGetType(EventUnitCreatedUnit()) == "SupplyDepot") || (UnitGetType(EventUnitCreatedUnit()) == "Barracks") || (UnitGetType(EventUnitCreatedUnit()) == "SCV") || (UnitGetType(EventUnitCreatedUnit()) == "Hatchery") || (UnitGetType(EventUnitCreatedUnit()) == "SpawningPool") || (UnitGetType(EventUnitCreatedUnit()) == "RoachWarren") || (UnitGetType(EventUnitCreatedUnit()) == "Extractor") || (UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "Overlord") || (UnitGetType(EventUnitCreatedUnit()) == "Larva") || (UnitGetType(EventUnitCreatedUnit()) == "Egg") || (UnitGetType(EventUnitCreatedUnit()) == "MineralField") || (UnitGetType(EventUnitCreatedUnit()) == "VespeneGeyser")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_InfoTextCreate(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfoTextUnitCreated_Init () {
    gt_InfoTextUnitCreated = TriggerCreate("gt_InfoTextUnitCreated_Func");
    TriggerAddEventUnitCreated(gt_InfoTextUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Helper Activator
//--------------------------------------------------------------------------------------------------
bool gt_SupplyHelperActivator_Func (bool testConds, bool runActions) {
    string auto7694DB04_val;
    string auto570E3AB0_val;

    // Variable Declarations
    string lv_backgroundImage;
    string lv_titleStyle;
    string lv_textStyle;
    text lv_text;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_supplyHelperActive = true;
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SupplyHelperBuildOrder, true);
    TriggerEnable(gt_SupplyHelperComplete, true);
    gf_ClearAllTutorialReticles();
    gf_DestroyTutorialTextTag();
    auto7694DB04_val = PlayerRace(gv_p01_USER);
    if (auto7694DB04_val == "Terr") {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "SupplyDepot", true);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "SCV", false);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Marine", false);
    }
    else if (auto7694DB04_val == "Zerg") {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Overlord", true);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Zergling", false);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Roach", false);
    }
    else if (auto7694DB04_val == "Prot") {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", true);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Zealot", false);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Stalker", false);
    }
    else {
    }
    TriggerEnable(gt_SupplyHelperSelection, true);
    TriggerExecute(gt_SupplyHelperSelection, true, false);
    TriggerExecute(gt_SupplyHelperArrowLoop, true, false);
    auto570E3AB0_val = PlayerRace(gv_p01_USER);
    if (auto570E3AB0_val == "Terr") {
        lv_backgroundImage = "Assets\\Textures\\ui_techtree_iconname_frame.dds";
        lv_titleStyle = "TutorialDirectiveTitleTerran";
        lv_textStyle = "TutorialDirectiveTextTerran";
        lv_text = StringExternal("Param/Value/C52DEBCB");
    }
    else if (auto570E3AB0_val == "Zerg") {
        lv_backgroundImage = "Assets\\Textures\\ui_techtree_iconname_frame_zerg.dds";
        lv_titleStyle = "TutorialDirectiveTitleZerg";
        lv_textStyle = "TutorialDirectiveTextZerg";
        lv_text = StringExternal("Param/Value/F34661CF");
    }
    else if (auto570E3AB0_val == "Prot") {
        lv_backgroundImage = "Assets\\Textures\\ui_techtree_iconname_frame_protoss.dds";
        lv_titleStyle = "TutorialDirectiveTitleProtoss";
        lv_textStyle = "TutorialDirectiveTextProtoss";
        lv_text = StringExternal("Param/Value/93807861");
    }
    else {
    }
    libNtve_gf_SetDialogItemText(gv_supplyHelperUITitle, StringExternal("Param/Value/3AA1E772"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_supplyHelperUIBackground, lv_backgroundImage, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_supplyHelperUITitle, lv_titleStyle, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_supplyHelperUIText, lv_textStyle, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_supplyHelperUIText, lv_text, PlayerGroupAll());
    DialogSetVisible(gv_supplyHelperUI, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyHelperActivator_Init () {
    gt_SupplyHelperActivator = TriggerCreate("gt_SupplyHelperActivator_Func");
    TriggerEnable(gt_SupplyHelperActivator, false);
    TriggerAddEventCommandError(gt_SupplyHelperActivator, gv_p01_USER, c_cmdNotEnoughFood, null);
    TriggerAddEventAlert(gt_SupplyHelperActivator, gv_p01_USER, "TrainError");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Helper BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_SupplyHelperBuildOrder_Func (bool testConds, bool runActions) {
    string autoFB4FD1D7_val;
    string autoF105A3D2_val;

    // Variable Declarations
    bool lv_validBuildOrder;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGroupCount(UnitGroup("Pylon", gv_p01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("SupplyDepot", gv_p01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        lv_validBuildOrder = true;
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("TerranBuild", 1))) {
            lv_validBuildOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Egg", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(UnitGroupLoopCurrent(), 1, 1) == "Overlord")) {
            lv_validBuildOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Probe", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ProtossBuild", 1))) {
            lv_validBuildOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validBuildOrder == true)) {
        TriggerEnable(gt_SupplyHelperSelection, false);
        autoF105A3D2_val = PlayerRace(gv_p01_USER);
        if (autoF105A3D2_val == "Terr") {
            UISetButtonFaceHighlighted(PlayerGroupAll(), "SupplyDepot", false);
        }
        else if (autoF105A3D2_val == "Zerg") {
            UISetButtonFaceHighlighted(PlayerGroupAll(), "Overlord", false);
            UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
        }
        else if (autoF105A3D2_val == "Prot") {
            UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", false);
        }
        else {
        }
        gf_ClearAllTutorialReticles();
        TriggerStop(gt_SupplyHelperArrowLoop);
        libNtve_gf_HideScreenImage(false, 16);
        libNtve_gf_StopPulsingScreenImage(12);
        libNtve_gf_HideScreenImage(false, 12);
        DialogSetVisible(gv_supplyHelperUI, PlayerGroupAll(), false);
    }
    else {
        TriggerEnable(gt_SupplyHelperSelection, true);
        TriggerExecute(gt_SupplyHelperSelection, true, false);
        autoFB4FD1D7_val = PlayerRace(gv_p01_USER);
        if (autoFB4FD1D7_val == "Terr") {
            UISetButtonFaceHighlighted(PlayerGroupAll(), "SupplyDepot", true);
        }
        else if (autoFB4FD1D7_val == "Zerg") {
            UISetButtonFaceHighlighted(PlayerGroupAll(), "Overlord", true);
            UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
        }
        else if (autoFB4FD1D7_val == "Prot") {
            UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", true);
        }
        else {
        }
        TriggerExecute(gt_SupplyHelperArrowLoop, true, false);
        DialogSetVisible(gv_supplyHelperUI, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyHelperBuildOrder_Init () {
    gt_SupplyHelperBuildOrder = TriggerCreate("gt_SupplyHelperBuildOrder_Func");
    TriggerEnable(gt_SupplyHelperBuildOrder, false);
    TriggerAddEventUnitAbility(gt_SupplyHelperBuildOrder, null, null, c_unitAbilStageAll, false);
    TriggerAddEventUnitConstructProgress(gt_SupplyHelperBuildOrder, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Helper Complete
//--------------------------------------------------------------------------------------------------
bool gt_SupplyHelperComplete_Func (bool testConds, bool runActions) {
    string auto2CC516A5_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUnitType() == "SupplyDepot") || (libNtve_gf_TriggeringProgressUnitType() == "Overlord") || (libNtve_gf_TriggeringProgressUnitType() == "Pylon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SupplyHelperBuildOrder, false);
    TriggerEnable(gt_SupplyHelperSelection, false);
    TriggerEnable(gt_SupplyHelperActivator, true);
    TriggerStop(gt_SupplyHelperArrowLoop);
    libNtve_gf_HideScreenImage(false, 16);
    libNtve_gf_StopPulsingScreenImage(12);
    libNtve_gf_HideScreenImage(false, 12);
    DialogSetVisible(gv_supplyHelperUI, PlayerGroupAll(), false);
    gv_supplyHelperActive = false;
    auto2CC516A5_val = PlayerRace(gv_p01_USER);
    if (auto2CC516A5_val == "Terr") {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "SupplyDepot", false);
    }
    else if (auto2CC516A5_val == "Zerg") {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Overlord", false);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    }
    else if (auto2CC516A5_val == "Prot") {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", false);
    }
    else {
    }
    gf_ClearAllTutorialReticles();
    TriggerSendEvent("SupplyHelperDone");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyHelperComplete_Init () {
    gt_SupplyHelperComplete = TriggerCreate("gt_SupplyHelperComplete_Func");
    TriggerEnable(gt_SupplyHelperComplete, false);
    TriggerAddEventUnitConstructProgress(gt_SupplyHelperComplete, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(gt_SupplyHelperComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Helper Selection
//--------------------------------------------------------------------------------------------------
bool gt_SupplyHelperSelection_Func (bool testConds, bool runActions) {
    string auto3CFB2515_val;

    // Variable Declarations
    string lv_workerType;
    unitgroup lv_validWorkers;
    bool lv_validWorkerSelected;
    abilcmd lv_gatherAbil;
    abilcmd lv_gatherReturnAbil;
    string lv_geyserType;
    string lv_carryBehavior;

    // Variable Initialization
    lv_validWorkers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto3CFB2515_val = PlayerRace(gv_p01_USER);
    if (auto3CFB2515_val == "Terr") {
        lv_workerType = "SCV";
        lv_gatherAbil = AbilityCommand("SCVHarvest", 0);
        lv_gatherReturnAbil = AbilityCommand("SCVHarvest", 1);
        lv_geyserType = "Refinery";
        lv_carryBehavior = "CarryHarvestableVespeneGeyserGas";
    }
    else if (auto3CFB2515_val == "Zerg") {
        lv_workerType = "Hatchery";
    }
    else if (auto3CFB2515_val == "Prot") {
        lv_workerType = "Probe";
        lv_gatherAbil = AbilityCommand("ProbeHarvest", 0);
        lv_gatherReturnAbil = AbilityCommand("ProbeHarvest", 1);
        lv_geyserType = "Assimilator";
        lv_carryBehavior = "CarryHarvestableVespeneGeyserGasProtoss";
    }
    else {
    }
    if ((PlayerRace(gv_p01_USER) == "Zerg")) {
        UnitGroupLoopBegin(UnitGroup(lv_workerType, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupAdd(lv_validWorkers, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        if (((libNtve_gf_UnitTypeIsSelected("Hatchery", gv_p01_USER) == true) || (libNtve_gf_UnitTypeIsSelected("Larva", gv_p01_USER) == true))) {
            gf_ClearAllTutorialReticles();
            gf_SetOffscreenUnit(null);
        }
        else {
            gf_CreateTutorialReticlesOnUnitGroup(lv_validWorkers, 1.0, libVCMI_ge_CampaginReticleSize_Large, "Ref_Target 01");
            gf_SetOffscreenPoint(UnitGroupCenterOfGroup(lv_validWorkers));
        }
    }
    else {
        UnitGroupLoopBegin(UnitGroup(lv_workerType, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == lv_gatherAbil) && (UnitGetType(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0))) == lv_geyserType)) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == lv_gatherReturnAbil) && (UnitHasBehavior2(UnitGroupLoopCurrent(), lv_carryBehavior) == true)))) {
            }
            else {
                UnitGroupAdd(lv_validWorkers, UnitGroupLoopCurrent());
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroupSelected(gv_p01_USER));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupHasUnit(lv_validWorkers, UnitGroupLoopCurrent()) == true)) {
                lv_validWorkerSelected = true;
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if ((lv_validWorkerSelected == true)) {
            gf_ClearAllTutorialReticles();
            gf_SetOffscreenUnit(null);
        }
        else {
            gf_CreateTutorialReticlesOnUnitGroup(lv_validWorkers, 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
            gf_SetOffscreenPoint(UnitGroupCenterOfGroup(lv_validWorkers));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyHelperSelection_Init () {
    gt_SupplyHelperSelection = TriggerCreate("gt_SupplyHelperSelection_Func");
    TriggerEnable(gt_SupplyHelperSelection, false);
    TriggerAddEventUnitSelected(gt_SupplyHelperSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_SupplyHelperSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Helper Arrow Loop
//--------------------------------------------------------------------------------------------------
bool gt_SupplyHelperArrowLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_arrow;

    // Variable Initialization
    lv_arrow = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_ScreenImageDialog(16) == c_invalidDialogId) || (DialogIsVisible(libNtve_gf_ScreenImageDialog(16), gv_p01_USER) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayScreenImage(12, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 212, 134, c_anchorTopRight, 2, -34);
    libNtve_gf_PulseScreenImage(12, 0.5, 100.0, 0.0);
    libNtve_gf_DisplayScreenImage(16, "Assets\\Textures\\ui_void_mission_soa_frame_ability_alert_arrowhighlight.dds", c_triggerBlendModeAdd, 128, 64, c_anchorTopRight, 50, 45);
    lv_arrow = libNtve_gf_ScreenImageDialogItem(16);
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_arrow, "Assets\\Textures\\ui_void_mission_soa_frame_ability_alert_arrowhighlight.dds", PlayerGroupAll());
        Wait(0.25, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_arrow, "Assets\\Textures\\ui_void_mission_soa_frame_ability_alert_arrowempty.dds", PlayerGroupAll());
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyHelperArrowLoop_Init () {
    gt_SupplyHelperArrowLoop = TriggerCreate("gt_SupplyHelperArrowLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Helper Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_SupplyHelperCleanup_Func (bool testConds, bool runActions) {
    string auto38E0A700_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SupplyHelperComplete, false);
    TriggerEnable(gt_SupplyHelperBuildOrder, false);
    TriggerEnable(gt_SupplyHelperSelection, false);
    TriggerEnable(gt_SupplyHelperActivator, false);
    TriggerStop(gt_SupplyHelperArrowLoop);
    libNtve_gf_HideScreenImage(false, 16);
    libNtve_gf_StopPulsingScreenImage(12);
    libNtve_gf_HideScreenImage(false, 12);
    DialogSetVisible(gv_supplyHelperUI, PlayerGroupAll(), false);
    gv_supplyHelperActive = false;
    auto38E0A700_val = PlayerRace(gv_p01_USER);
    if (auto38E0A700_val == "Terr") {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "SupplyDepot", false);
    }
    else if (auto38E0A700_val == "Zerg") {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Overlord", false);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    }
    else if (auto38E0A700_val == "Prot") {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", false);
    }
    else {
    }
    gf_ClearAllTutorialReticles();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyHelperCleanup_Init () {
    gt_SupplyHelperCleanup = TriggerCreate("gt_SupplyHelperCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WorkerFollowHelper
//--------------------------------------------------------------------------------------------------
bool gt_WorkerFollowHelper_Func (bool testConds, bool runActions) {
    string autoB12CFF7F_val;
    string auto0B001210_val;

    // Conditions
    if (testConds) {
        if (!((OrderGetTargetType(EventUnitOrder()) == c_orderTargetUnit))) {
            return false;
        }

        if (!((((UnitGetType(EventUnit()) == "SCV") && (UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == "SCV") && ((OrderGetAbilityCommand(UnitOrder(OrderGetTargetUnit(EventUnitOrder()), 0)) == AbilityCommand("SCVHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(OrderGetTargetUnit(EventUnitOrder()), 0)) == AbilityCommand("SCVHarvest", 1)))) || ((UnitGetType(EventUnit()) == "Drone") && (UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == "Drone") && ((OrderGetAbilityCommand(UnitOrder(OrderGetTargetUnit(EventUnitOrder()), 0)) == AbilityCommand("DroneHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(OrderGetTargetUnit(EventUnitOrder()), 0)) == AbilityCommand("DroneHarvest", 1)))) || ((UnitGetType(EventUnit()) == "Probe") && (UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == "Probe") && ((OrderGetAbilityCommand(UnitOrder(OrderGetTargetUnit(EventUnitOrder()), 0)) == AbilityCommand("ProbeHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(OrderGetTargetUnit(EventUnitOrder()), 0)) == AbilityCommand("ProbeHarvest", 1))))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(OrderGetTargetUnit(UnitOrder(OrderGetTargetUnit(EventUnitOrder()), 0))) == "MineralField") || (UnitHasBehavior2(OrderGetTargetUnit(EventUnitOrder()), "CarryMineralFieldMinerals") == true))) {
        auto0B001210_val = PlayerRace(EventPlayer());
        if (auto0B001210_val == "Terr") {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())))), c_orderQueueReplace);
        }
        else if (auto0B001210_val == "Zerg") {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())))), c_orderQueueReplace);
        }
        else if (auto0B001210_val == "Prot") {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())))), c_orderQueueReplace);
        }
        else {
        }
    }
    else {
        autoB12CFF7F_val = PlayerRace(EventPlayer());
        if (autoB12CFF7F_val == "Terr") {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupClosestToPoint(UnitGroup("Refinery", gv_p01_USER, RegionCircle(UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())))), c_orderQueueReplace);
        }
        else if (autoB12CFF7F_val == "Zerg") {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("Extractor", gv_p01_USER, RegionCircle(UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())))), c_orderQueueReplace);
        }
        else if (autoB12CFF7F_val == "Prot") {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupClosestToPoint(UnitGroup("Assimilator", gv_p01_USER, RegionCircle(UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())))), c_orderQueueReplace);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorkerFollowHelper_Init () {
    gt_WorkerFollowHelper = TriggerCreate("gt_WorkerFollowHelper_Func");
    TriggerAddEventUnitOrder(gt_WorkerFollowHelper, null, AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ruins Revealer
//--------------------------------------------------------------------------------------------------
bool gt_RuinsRevealer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCount(null, gv_p01_USER, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) >= 1)) {
        if ((gv_ruinsRevealer == null)) {
            VisRevealerCreate(gv_p01_USER, RegionFromId(33));
            gv_ruinsRevealer = VisRevealerLastCreated();
        }
        else {
        }
    }
    else {
        if ((gv_ruinsRevealer != null)) {
            VisRevealerDestroy(gv_ruinsRevealer);
            gv_ruinsRevealer = null;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RuinsRevealer_Init () {
    gt_RuinsRevealer = TriggerCreate("gt_RuinsRevealer_Func");
    TriggerAddEventUnitRegion(gt_RuinsRevealer, null, RegionFromId(33), true);
    TriggerAddEventUnitRegion(gt_RuinsRevealer, null, RegionFromId(33), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_BasicCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BasicSelectMarineCleanup();
    gf_BasicMoveUnitCleanup();
    gf_BasicAttackCleanup();
    gf_BasicPanCameraCleanup();
    gf_BasicMinimapCleanup();
    gf_BasicDragSelectCleanup();
    gf_BasicAttackGroupCleanup();
    UnitRemove(gv_basic01Marine);
    UnitRemove(gv_basicMoveUnitBeacon);
    UnitRemove(gv_basic03Enemy);
    UnitRemove(gv_basic03ElevatorBlocker);
    UnitGroupLoopBegin(gv_basic05Enemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_basic06Marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((TriggerIsEnabled(gt_FriendlyFireHelperUnpauser) == true)) {
        TriggerExecute(gt_FriendlyFireHelperUnpauser, false, false);
    }
    else {
    }
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    libVCMI_gf_SetScreenModeCampaign(c_uiModeConsole, c_transitionDurationImmediate);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    CameraLockInput(gv_p01_USER, false);
    CameraSetBounds(PlayerGroupAll(), RegionEntireMap(), true);
    VisRevealerDestroy(gv_startingAreaRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicCleanup_Init () {
    gt_BasicCleanup = TriggerCreate("gt_BasicCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Initialization
//--------------------------------------------------------------------------------------------------
bool gt_BasicInitialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentStage = 1;
    TriggerEnable(gt_FriendlyFireHelper, true);
    GameSetLighting("DominionLab", 0.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Starmap_Jotun", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    PlayerSetColorIndex(gv_p01_USER, 2, true);
    PlayerSetColorIndex(gv_p02_ENEMY, 1, true);
    ActorSend(ActorFromDoodad(DoodadFromId(9)), "AnimBracketStop ElevatorUp Instant");
    ActorSend(ActorFromDoodad(DoodadFromId(45)), "AnimBracketStop ElevatorUp Instant");
    ActorSend(ActorFromDoodad(DoodadFromId(13)), "AnimBracketStop ElevatorUp Instant");
    UnitBehaviorAdd(UnitFromId(48), "InstantMorph", UnitFromId(48), 1);
    UnitIssueOrder(UnitFromId(48), Order(AbilityCommand("RaisingPlatformDiagonalNWSELowered", 0)), c_orderQueueReplace);
    UnitBehaviorAdd(UnitFromId(1), "InstantMorph", UnitFromId(1), 1);
    UnitIssueOrder(UnitFromId(1), Order(AbilityCommand("UmojanLabDoorsWideLeft", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker6x6", c_unitCreateIgnorePlacement, 0, PointFromId(7));
    gv_basic03ElevatorBlocker = UnitLastCreated();
    CameraLockInput(1, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("Stimpack", 0), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    TriggerExecute(gt_BasicIntroCinematicQ, true, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    libVCMI_gf_SetScreenModeCampaign(c_uiModeFullscreen, c_transitionDurationImmediate);
    TriggerExecute(gt_BasicSelectMarine, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicInitialization_Init () {
    gt_BasicInitialization = TriggerCreate("gt_BasicInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic SelectMarine
//--------------------------------------------------------------------------------------------------
bool gt_BasicSelectMarine_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_BasicSelectMarineReminderQ, true);
    TriggerEnable(gt_BasicSelectMarineComplete, true);
    TriggerExecute(gt_BasicSelectMarineIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicSelectMarine_Init () {
    gt_BasicSelectMarine = TriggerCreate("gt_BasicSelectMarine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic SelectMarine Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicSelectMarineIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitIsSelected(gv_basic01Marine, gv_p01_USER) == true)) {
        TriggerExecute(gt_BasicSelectMarineComplete, true, false);
    }
    else {
    }
    Wait(1.0, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00007", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_basic01Marine), 0.85, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
    gf_CreateLClickToSelectTag(gv_basic01Marine, 80);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicSelectMarineIntroQ_Init () {
    gt_BasicSelectMarineIntroQ = TriggerCreate("gt_BasicSelectMarineIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic SelectMarine Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicSelectMarineCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    libVCMI_gf_SetScreenModeCampaign(c_uiModeConsole, c_transitionDurationDefault);
    Wait(2.0, c_timeGame);
    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialinfolefthighlight.dds", c_triggerBlendModeAdd, 313, 246, c_anchorBottomLeft, 390, 0);
    libNtve_gf_DisplayScreenImage(2, "Assets\\Textures\\tutorialinforighthighlight.dds", c_triggerBlendModeAdd, 313, 246, c_anchorBottomRight, 590, 0);
    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
    libNtve_gf_PulseScreenImage(2, 1.75, 100.0, 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00008", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_StopPulsingScreenImage(2);
    libNtve_gf_HideScreenImage(false, 1);
    libNtve_gf_HideScreenImage(false, 2);
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00009", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    UnitIssueOrder(UnitFromId(1), Order(AbilityCommand("UmojanLabDoorsWideLeftLowered", 0)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicSelectMarineCompleteQ_Init () {
    gt_BasicSelectMarineCompleteQ = TriggerCreate("gt_BasicSelectMarineCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic SelectMarine Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicSelectMarineReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00010", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicSelectMarineReminderQ_Init () {
    gt_BasicSelectMarineReminderQ = TriggerCreate("gt_BasicSelectMarineReminderQ_Func");
    TriggerEnable(gt_BasicSelectMarineReminderQ, false);
    TriggerAddEventTimer(gt_BasicSelectMarineReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic SelectMarine Complete
//--------------------------------------------------------------------------------------------------
bool gt_BasicSelectMarineComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsSelected(gv_basic01Marine, gv_p01_USER) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BasicSelectMarineCleanup();
    TriggerExecute(gt_BasicSelectMarineCompleteQ, true, true);
    TriggerExecute(gt_BasicMoveUnit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicSelectMarineComplete_Init () {
    gt_BasicSelectMarineComplete = TriggerCreate("gt_BasicSelectMarineComplete_Func");
    TriggerEnable(gt_BasicSelectMarineComplete, false);
    TriggerAddEventUnitSelected(gt_BasicSelectMarineComplete, null, gv_p01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic MoveUnit
//--------------------------------------------------------------------------------------------------
bool gt_BasicMoveUnit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran", 0, 0, PointFromId(6));
    gv_basicMoveUnitBeacon = UnitLastCreated();
    UnitSetState(gv_basicMoveUnitBeacon, c_unitStateTargetable, false);
    UnitSetState(gv_basicMoveUnitBeacon, c_unitStateSelectable, false);
    TriggerEnable(gt_BasicMoveUnitReminderQ, true);
    TriggerEnable(gt_BasicMoveUnitComplete, true);
    TriggerExecute(gt_BasicMoveUnitIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMoveUnit_Init () {
    gt_BasicMoveUnit = TriggerCreate("gt_BasicMoveUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic MoveUnit Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicMoveUnitIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    CameraPan(gv_p01_USER, UnitGetPosition(UnitFromId(1)), 2.0, -1, 10.0, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00011", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerEnable(gt_BasicMoveUnitMoveOrder, true);
    TriggerExecute(gt_BasicMoveUnitMoveOrder, true, false);
    gf_StartReminderTimer();
    TriggerExecute(gt_BasicMoveUnitMoveOrder, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMoveUnitIntroQ_Init () {
    gt_BasicMoveUnitIntroQ = TriggerCreate("gt_BasicMoveUnitIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic MoveUnit Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicMoveUnitCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorBlocker", 0, 0, PointFromId(4));
    gv_basic01ElevatorBlocker = UnitLastCreated();
    ActorSend(ActorFromDoodad(DoodadFromId(9)), "AnimBracketStop ElevatorUp");
    SoundPlayForPlayer(SoundLink("SetPiece_HyperionDoor01_Close", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00012", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMoveUnitCompleteQ_Init () {
    gt_BasicMoveUnitCompleteQ = TriggerCreate("gt_BasicMoveUnitCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic MoveUnit Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicMoveUnitReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00013", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMoveUnitReminderQ_Init () {
    gt_BasicMoveUnitReminderQ = TriggerCreate("gt_BasicMoveUnitReminderQ_Func");
    TriggerEnable(gt_BasicMoveUnitReminderQ, false);
    TriggerAddEventTimer(gt_BasicMoveUnitReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic MoveUnit MoveOrder
//--------------------------------------------------------------------------------------------------
bool gt_BasicMoveUnitMoveOrder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((OrderGetAbilityCommand(UnitOrder(gv_basic01Marine, 0)) == AbilityCommand("move", 0)) && (OrderGetTargetType(UnitOrder(gv_basic01Marine, 0)) == c_orderTargetPoint) && (DistanceBetweenPoints(PointFromId(6), OrderGetTargetPoint(UnitOrder(gv_basic01Marine, 0))) < 2.0)) {
        gf_DestroyTutorialTextTag();
        if ((TriggerActiveCount(gt_BasicMoveUnitIntroQ) == 0)) {
            gf_StopReminderTimer();
        }
        else {
        }
    }
    else {
        gf_CreateRClickToMoveTag(gv_basicMoveUnitBeacon, 80);
        if ((TriggerActiveCount(gt_BasicMoveUnitIntroQ) == 0)) {
            gf_StartReminderTimer();
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMoveUnitMoveOrder_Init () {
    gt_BasicMoveUnitMoveOrder = TriggerCreate("gt_BasicMoveUnitMoveOrder_Func");
    TriggerEnable(gt_BasicMoveUnitMoveOrder, false);
    TriggerAddEventUnitOrder(gt_BasicMoveUnitMoveOrder, UnitRefFromVariable("gv_basic01Marine"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic MoveUnit Complete
//--------------------------------------------------------------------------------------------------
bool gt_BasicMoveUnitComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BasicMoveUnitCleanup();
    TriggerExecute(gt_BasicMoveUnitCompleteQ, true, true);
    TriggerExecute(gt_BasicAttack, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMoveUnitComplete_Init () {
    gt_BasicMoveUnitComplete = TriggerCreate("gt_BasicMoveUnitComplete_Func");
    TriggerEnable(gt_BasicMoveUnitComplete, false);
    TriggerAddEventUnitRegion(gt_BasicMoveUnitComplete, UnitRefFromVariable("gv_basic01Marine"), RegionCircle(PointFromId(6), 2.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_BasicAttackComplete, true);
    TriggerEnable(gt_BasicAttackReminderQ, true);
    TriggerExecute(gt_BasicAttackIntroQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttack_Init () {
    gt_BasicAttack = TriggerCreate("gt_BasicAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00014", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_basic01Marine, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(6)), c_orderQueueReplace);
    libNtve_gf_MakeUnitUncommandable(gv_basic01Marine, true);
    libNtve_gf_ShowHideUnit(gv_basic03ElevatorBlocker, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UmojanLabMicrobot", 0, 2, PointFromId(7));
    gv_basic03Enemy = UnitLastCreated();
    UnitAbilityEnable(gv_basic03Enemy, "attack", false);
    CameraPan(gv_p01_USER, Point(((PointGetX(PointFromId(6))+PointGetX(PointFromId(7)))/2), ((PointGetY(PointFromId(6))+PointGetY(PointFromId(7)))/2)), 2.0, -1, 10.0, false);
    ActorSend(ActorFromDoodad(DoodadFromId(45)), "AnimBracketStart ElevatorUp Morph Stand,Alternate Morph,Alternate 0 0.500000 AsTimeScale");
    SoundPlayForPlayer(SoundLink("SetPiece_HyperionDoor01_Open", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00015", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (!((libNtve_gf_UnitInRegion(gv_basic01Marine, RegionCircle(PointFromId(6), 1.0)) == true))) {
        Wait(0.125, c_timeGame);
    }
    UnitAbilityEnable(gv_basic03Enemy, "attack", true);
    SoundPlayForPlayer(SoundLink("UI_MercenaryBriefcase_HireMerc", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(gt_BasicAttackAttackOrder, true);
    TriggerEnable(gt_BasicAttackTargetingMode, true);
    libNtve_gf_MakeUnitUncommandable(gv_basic01Marine, false);
    UnitIssueOrder(gv_basic01Marine, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00016", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackIntroQ_Init () {
    gt_BasicAttackIntroQ = TriggerCreate("gt_BasicAttackIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack WrongTarget Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackWrongTargetQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00017", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackWrongTargetQ_Init () {
    gt_BasicAttackWrongTargetQ = TriggerCreate("gt_BasicAttackWrongTargetQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack CanceledTargeting Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackCanceledTargetingQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00018", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackCanceledTargetingQ_Init () {
    gt_BasicAttackCanceledTargetingQ = TriggerCreate("gt_BasicAttackCanceledTargetingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack CanceledOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackCanceledOrderQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00019", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackCanceledOrderQ_Init () {
    gt_BasicAttackCanceledOrderQ = TriggerCreate("gt_BasicAttackCanceledOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00020", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    libNtve_gf_MakeUnitUncommandable(gv_basic01Marine, true);
    UnitIssueOrder(gv_basic01Marine, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(7)), c_orderQueueReplace);
    while (!((libNtve_gf_UnitInRegion(gv_basic01Marine, RegionCircle(PointFromId(7), 1.0)) == true))) {
        Wait(0.125, c_timeGame);
    }
    ActorSend(ActorFromDoodad(DoodadFromId(45)), "AnimBracketStop ElevatorUp");
    Wait(2.0, c_timeGame);
    UnitRemove(gv_basic01Marine);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    UnitIssueOrder(UnitFromId(1), Order(AbilityCommand("UmojanLabDoorsWideLeft", 0)), c_orderQueueReplace);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackCompleteQ_Init () {
    gt_BasicAttackCompleteQ = TriggerCreate("gt_BasicAttackCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00021", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackReminderQ_Init () {
    gt_BasicAttackReminderQ = TriggerCreate("gt_BasicAttackReminderQ_Func");
    TriggerEnable(gt_BasicAttackReminderQ, false);
    TriggerAddEventTimer(gt_BasicAttackReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack AttackOrder
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackAttackOrder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetReminderTimer();
    gv_basic03LastOrderTime = GameGetMissionTime();
    if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint) && (DistanceBetweenPoints(PointFromId(64), OrderGetTargetPoint(EventUnitOrder())) < 2.0)) {
        gf_TutorialUnpause();
        TransmissionClearAll();
        if ((TriggerActiveCount(gt_BasicAttackIntroQ) == 0)) {
            gf_StopReminderTimer();
        }
        else {
        }
        if ((UnitIsAlive(gv_basicAttackBeacon) == true)) {
            UnitKill(gv_basicAttackBeacon);
            gv_basicAttackBeacon = null;
        }
        else {
        }
        gf_DestroyTutorialTextTag();
        gv_basic03ValidOrder = true;
    }
    else {
        if ((OrderGetAbilityCommand(EventUnitOrder()) != AbilityCommand("stop", 0))) {
            UnitIssueOrder(gv_basic01Marine, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        else {
        }
        if ((TriggerActiveCount(gt_BasicAttackIntroQ) == 0)) {
            gf_StartReminderTimer();
        }
        else {
        }
        if ((UnitIsAlive(gv_basicAttackBeacon) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialAttackBeacon", 0, gv_p01_USER, PointFromId(64));
            gv_basicAttackBeacon = UnitLastCreated();
        }
        else {
        }
        gf_CreateAttackMoveTag(gv_basicAttackBeacon, 90);
        if ((gv_basic03ValidOrder == true)) {
            gf_TutorialPause();
            gf_SilenceQ();
            TriggerExecute(gt_BasicAttackCanceledOrderQ, true, false);
        }
        else if ((((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) != c_orderTargetPoint)) || ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint) && (DistanceBetweenPoints(PointFromId(64), OrderGetTargetPoint(EventUnitOrder())) >= 2.0)))) {
            gf_SilenceQ();
            TriggerExecute(gt_BasicAttackWrongTargetQ, true, false);
        }
        gv_basic03ValidOrder = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackAttackOrder_Init () {
    gt_BasicAttackAttackOrder = TriggerCreate("gt_BasicAttackAttackOrder_Func");
    TriggerEnable(gt_BasicAttackAttackOrder, false);
    TriggerAddEventUnitOrder(gt_BasicAttackAttackOrder, UnitRefFromVariable("gv_basic01Marine"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack TargetingMode
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackTargetingMode_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetReminderTimer();
    if ((gv_basic03ValidOrder == false) && ((gv_basic03LastOrderTime - GameGetMissionTime()) != 0.0)) {
        gf_SilenceQ();
        TriggerExecute(gt_BasicAttackCanceledTargetingQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackTargetingMode_Init () {
    gt_BasicAttackTargetingMode = TriggerCreate("gt_BasicAttackTargetingMode_Func");
    TriggerEnable(gt_BasicAttackTargetingMode, false);
    TriggerAddEventTargetModeUpdate(gt_BasicAttackTargetingMode, c_playerAny, AbilityCommand("attack", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Attack Complete
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BasicAttackCleanup();
    TriggerExecute(gt_BasicAttackCompleteQ, true, true);
    TriggerExecute(gt_BasicPanCamera, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackComplete_Init () {
    gt_BasicAttackComplete = TriggerCreate("gt_BasicAttackComplete_Func");
    TriggerEnable(gt_BasicAttackComplete, false);
    TriggerAddEventUnitDied(gt_BasicAttackComplete, UnitRefFromVariable("gv_basic03Enemy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic PanCamera
//--------------------------------------------------------------------------------------------------
bool gt_BasicPanCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(2), true);
    CameraLockInput(gv_p01_USER, false);
    TriggerExecute(gt_BasicPanCameraIntroQ, true, false);
    TriggerEnable(gt_BasicPanCameraReminderQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicPanCamera_Init () {
    gt_BasicPanCamera = TriggerCreate("gt_BasicPanCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic PanCamera Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicPanCameraIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(8, "Assets\\Textures\\tutorialminimaphighlight.dds", c_triggerBlendModeAdd, 404, 372, c_anchorBottomLeft, 0, 0);
    libNtve_gf_PulseScreenImage(8, 1.75, 100.0, 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00026", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_StopPulsingScreenImage(8);
    libNtve_gf_HideScreenImage(false, 8);
    TriggerExecute(gt_BasicPanCameraLoopArrows, true, false);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00022", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_BasicPanCameraStopArrows, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialCameraBeacon", c_unitCreateIgnorePlacement, gv_p01_USER, PointFromId(8));
    gv_basicPanCameraBeacon = UnitLastCreated();
    TriggerEnable(gt_BasicPanCameraComplete, true);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00023", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_SetOffscreenPoint(PointFromId(8));
    libNtve_gf_UnitCreateFacingPoint(1, "GuideArrowUnit", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(8), -3.0, AngleBetweenPoints(CameraGetTarget(gv_p01_USER), PointFromId(8))), PointFromId(8));
    TriggerEnable(gt_BasicPanCameraArrowHelper, true);
    gv_basicPanCameraArrowUnit = UnitLastCreated();
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicPanCameraIntroQ_Init () {
    gt_BasicPanCameraIntroQ = TriggerCreate("gt_BasicPanCameraIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic PanCamera Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicPanCameraCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UmojanLabMicrobot", 0, gv_p02_ENEMY, PointWithOffset(PointFromId(8), 0.5, 0.0));
    UnitGroupAdd(gv_basic05Enemies, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UmojanLabMicrobot", 0, gv_p02_ENEMY, PointWithOffset(PointFromId(8), -0.5, 0.0));
    UnitGroupAdd(gv_basic05Enemies, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UmojanLabMicrobot", 0, gv_p02_ENEMY, PointWithOffset(PointFromId(8), 0.0, -0.5));
    UnitGroupAdd(gv_basic05Enemies, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UmojanLabMicrobot", 0, gv_p02_ENEMY, PointWithOffset(PointFromId(8), 0.0, 0.5));
    UnitGroupAdd(gv_basic05Enemies, UnitLastCreated());
    ActorSend(ActorFromDoodad(DoodadFromId(13)), "AnimBracketStart ElevatorUp Morph Stand,Alternate Morph,Alternate 0 0.500000 AsTimeScale");
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00024", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    UnitIssueOrder(UnitFromId(48), Order(AbilityCommand("RaisingPlatformDiagonalNWSERaised", 0)), c_orderQueueReplace);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicPanCameraCompleteQ_Init () {
    gt_BasicPanCameraCompleteQ = TriggerCreate("gt_BasicPanCameraCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic PanCamera Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicPanCameraReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00025", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicPanCameraReminderQ_Init () {
    gt_BasicPanCameraReminderQ = TriggerCreate("gt_BasicPanCameraReminderQ_Func");
    TriggerEnable(gt_BasicPanCameraReminderQ, false);
    TriggerAddEventTimer(gt_BasicPanCameraReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic PanCamera LoopArrows
//--------------------------------------------------------------------------------------------------
bool gt_BasicPanCameraLoopArrows_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_arrowRight;
    int lv_arrowDown;
    int lv_arrowLeft;
    int lv_arrowUp;

    // Variable Initialization
    lv_arrowRight = c_invalidDialogControlId;
    lv_arrowDown = c_invalidDialogControlId;
    lv_arrowLeft = c_invalidDialogControlId;
    lv_arrowUp = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayScreenImage(4, "Assets\\Textures\\tutorialarrow00.dds", c_triggerBlendModeAdd, 128, 128, c_anchorRight, 0, 0);
    libNtve_gf_DisplayScreenImage(5, "Assets\\Textures\\tutorialarrow00.dds", c_triggerBlendModeAdd, 128, 128, c_anchorBottom, 0, 0);
    libNtve_gf_DisplayScreenImage(6, "Assets\\Textures\\tutorialarrow00.dds", c_triggerBlendModeAdd, 128, 128, c_anchorLeft, 0, 0);
    libNtve_gf_DisplayScreenImage(7, "Assets\\Textures\\tutorialarrow00.dds", c_triggerBlendModeAdd, 128, 128, c_anchorTop, 0, 0);
    lv_arrowRight = libNtve_gf_ScreenImageDialogItem(4);
    lv_arrowDown = libNtve_gf_ScreenImageDialogItem(5);
    lv_arrowLeft = libNtve_gf_ScreenImageDialogItem(6);
    lv_arrowUp = libNtve_gf_ScreenImageDialogItem(7);
    libNtve_gf_SetDialogItemRotation(lv_arrowRight, 0, PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(lv_arrowDown, 90, PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(lv_arrowLeft, 180, PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(lv_arrowUp, 270, PlayerGroupAll());
    while (true) {
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow00.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow00.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow00.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow00.dds", PlayerGroupAll());
        Wait(0.15, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow04.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow04.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow04.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow04.dds", PlayerGroupAll());
        Wait(0.15, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow03.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow03.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow03.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow03.dds", PlayerGroupAll());
        Wait(0.15, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow02.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow02.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow02.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow02.dds", PlayerGroupAll());
        Wait(0.15, c_timeGame);
        libNtve_gf_SetDialogItemImage(lv_arrowRight, "Assets\\Textures\\tutorialarrow01.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowDown, "Assets\\Textures\\tutorialarrow01.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowLeft, "Assets\\Textures\\tutorialarrow01.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lv_arrowUp, "Assets\\Textures\\tutorialarrow01.dds", PlayerGroupAll());
        Wait(0.3, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicPanCameraLoopArrows_Init () {
    gt_BasicPanCameraLoopArrows = TriggerCreate("gt_BasicPanCameraLoopArrows_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic PanCamera StopArrows
//--------------------------------------------------------------------------------------------------
bool gt_BasicPanCameraStopArrows_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_BasicPanCameraLoopArrows);
    libNtve_gf_HideScreenImage(false, 4);
    libNtve_gf_HideScreenImage(false, 5);
    libNtve_gf_HideScreenImage(false, 6);
    libNtve_gf_HideScreenImage(false, 7);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicPanCameraStopArrows_Init () {
    gt_BasicPanCameraStopArrows = TriggerCreate("gt_BasicPanCameraStopArrows_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic PanCamera ArrowHelper
//--------------------------------------------------------------------------------------------------
bool gt_BasicPanCameraArrowHelper_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_basicPanCameraArrowUnit, PointWithOffsetPolar(PointFromId(8), -3.0, AngleBetweenPoints(CameraGetTarget(gv_p01_USER), PointFromId(8))), true);
    libNtve_gf_MakeUnitFacePoint(gv_basicPanCameraArrowUnit, PointFromId(8), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicPanCameraArrowHelper_Init () {
    gt_BasicPanCameraArrowHelper = TriggerCreate("gt_BasicPanCameraArrowHelper_Func");
    TriggerEnable(gt_BasicPanCameraArrowHelper, false);
    TriggerAddEventCameraMove(gt_BasicPanCameraArrowHelper, gv_p01_USER, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic PanCamera Complete
//--------------------------------------------------------------------------------------------------
bool gt_BasicPanCameraComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(CameraGetTarget(gv_p01_USER), PointFromId(8)) < 4.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BasicPanCameraCleanup();
    TriggerExecute(gt_BasicPanCameraCompleteQ, true, true);
    TriggerExecute(gt_BasicMinimap, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicPanCameraComplete_Init () {
    gt_BasicPanCameraComplete = TriggerCreate("gt_BasicPanCameraComplete_Func");
    TriggerEnable(gt_BasicPanCameraComplete, false);
    TriggerAddEventCameraMove(gt_BasicPanCameraComplete, gv_p01_USER, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Minimap
//--------------------------------------------------------------------------------------------------
bool gt_BasicMinimap_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_BasicMinimapComplete, true);
    TriggerEnable(gt_BasicMinimapReminderQ, true);
    TriggerEnable(gt_BasicMinimapCameraReset, true);
    TriggerExecute(gt_BasicMinimapIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMinimap_Init () {
    gt_BasicMinimap = TriggerCreate("gt_BasicMinimap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Minimap Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicMinimapIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", PointFromId(4), Color(0.00, 100.00, 0.00), 524287.0, 270.0);
    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    PingSetScale(PingLastCreated(), 2.0);
    UnitRemove(gv_basic01ElevatorBlocker);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p01_USER, PointWithOffset(PointFromId(4), 0.7, 0.0));
    UnitGroupAdd(gv_basic06Marines, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p01_USER, PointWithOffset(PointFromId(4), -0.7, 0.0));
    UnitGroupAdd(gv_basic06Marines, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p01_USER, PointWithOffset(PointFromId(4), 0.0, 0.7));
    UnitGroupAdd(gv_basic06Marines, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p01_USER, PointWithOffset(PointFromId(4), 0.0, -0.7));
    UnitGroupAdd(gv_basic06Marines, UnitLastCreated());
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00027", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialMinimapTextTag");
    gv_minimapTextTag = DialogControlLastCreated();
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMinimapIntroQ_Init () {
    gt_BasicMinimapIntroQ = TriggerCreate("gt_BasicMinimapIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Minimap CameraReset Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicMinimapCameraResetQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00028", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMinimapCameraResetQ_Init () {
    gt_BasicMinimapCameraResetQ = TriggerCreate("gt_BasicMinimapCameraResetQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Minimap Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicMinimapCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(9)), "AnimBracketStart ElevatorUp Morph Stand,Alternate Morph,Alternate 0 0.500000 AsTimeScale");
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00029", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMinimapCompleteQ_Init () {
    gt_BasicMinimapCompleteQ = TriggerCreate("gt_BasicMinimapCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Minimap Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicMinimapReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_HideScreenImage(true, 8);
    libNtve_gf_PulseScreenImage(8, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00030", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(8);
    libNtve_gf_HideScreenImage(false, 8);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMinimapReminderQ_Init () {
    gt_BasicMinimapReminderQ = TriggerCreate("gt_BasicMinimapReminderQ_Func");
    TriggerEnable(gt_BasicMinimapReminderQ, false);
    TriggerAddEventTimer(gt_BasicMinimapReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Minimap CameraReset
//--------------------------------------------------------------------------------------------------
bool gt_BasicMinimapCameraReset_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventCameraMoveReason() != c_cameraMoveReasonMinimap))) {
            return false;
        }

        if (!((DistanceBetweenPoints(CameraGetTarget(gv_p01_USER), PointFromId(8)) > 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraPan(gv_p01_USER, PointFromId(8), 2.0, -1, 10.0, false);
    if ((TriggerActiveCount(gt_BasicMinimapIntroQ) == 0)) {
        gf_SilenceQ();
        TriggerExecute(gt_BasicMinimapCameraResetQ, true, false);
    }
    else {
    }
    Wait(2.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMinimapCameraReset_Init () {
    gt_BasicMinimapCameraReset = TriggerCreate("gt_BasicMinimapCameraReset_Func");
    TriggerEnable(gt_BasicMinimapCameraReset, false);
    TriggerAddEventCameraMove(gt_BasicMinimapCameraReset, gv_p01_USER, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Minimap Complete
//--------------------------------------------------------------------------------------------------
bool gt_BasicMinimapComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(CameraGetTarget(gv_p01_USER), PointFromId(4)) < 6.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BasicMinimapCleanup();
    TriggerExecute(gt_BasicMinimapCompleteQ, true, true);
    TriggerExecute(gt_BasicDragSelect, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicMinimapComplete_Init () {
    gt_BasicMinimapComplete = TriggerCreate("gt_BasicMinimapComplete_Func");
    TriggerEnable(gt_BasicMinimapComplete, false);
    TriggerAddEventCameraMove(gt_BasicMinimapComplete, gv_p01_USER, c_cameraMoveReasonMinimap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic DragSelect
//--------------------------------------------------------------------------------------------------
bool gt_BasicDragSelect_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_BasicDragSelectReminderQ, true);
    TriggerEnable(gt_BasicDragSelectComplete, true);
    TriggerExecute(gt_BasicDragSelectQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicDragSelect_Init () {
    gt_BasicDragSelect = TriggerCreate("gt_BasicDragSelect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic DragSelect Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicDragSelectQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraPanTarget;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_BasicDragSelectComplete, true, false);
    Wait(0.5, c_timeGame);
    gf_SetOffscreenPoint(UnitGroupCenterOfGroup(gv_basic06Marines));
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00031", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00032", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTutorialHelper", c_unitCreateIgnorePlacement, 0, PointWithOffset(UnitGroupCenterOfGroup(gv_basic06Marines), 0.0, 0.3));
    gv_invisHelper = UnitLastCreated();
    gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 1.2, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
    gf_CreateDragSelectTag(gv_invisHelper, -140);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicDragSelectQ_Init () {
    gt_BasicDragSelectQ = TriggerCreate("gt_BasicDragSelectQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic DragSelect Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicDragSelectCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicDragSelectCompleteQ_Init () {
    gt_BasicDragSelectCompleteQ = TriggerCreate("gt_BasicDragSelectCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic DragSelect Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicDragSelectReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00033", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicDragSelectReminderQ_Init () {
    gt_BasicDragSelectReminderQ = TriggerCreate("gt_BasicDragSelectReminderQ_Func");
    TriggerEnable(gt_BasicDragSelectReminderQ, false);
    TriggerAddEventTimer(gt_BasicDragSelectReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic DragSelect Complete
//--------------------------------------------------------------------------------------------------
bool gt_BasicDragSelectComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupSelected(1), c_unitCountAlive) == UnitGroupCount(gv_basic06Marines, c_unitCountAlive)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BasicDragSelectCleanup();
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    TriggerExecute(gt_BasicDragSelectCompleteQ, true, true);
    TriggerExecute(gt_BasicAttackGroup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicDragSelectComplete_Init () {
    gt_BasicDragSelectComplete = TriggerCreate("gt_BasicDragSelectComplete_Func");
    TriggerEnable(gt_BasicDragSelectComplete, false);
    TriggerAddEventUnitSelected(gt_BasicDragSelectComplete, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_BasicAttackGroupComplete, true);
    TriggerEnable(gt_BasicAttackGroupReminderQ, true);
    TriggerExecute(gt_BasicAttackGroupIntroQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroup_Init () {
    gt_BasicAttackGroup = TriggerCreate("gt_BasicAttackGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroupIntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    ActorSend(ActorFromDoodad(DoodadFromId(45)), "AnimBracketStart ElevatorUp Morph Stand,Alternate Morph,Alternate");
    UnitGroupIssueOrder(gv_basic05Enemies, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(7)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_basic05Enemies, 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(175)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_basic05Enemies, 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(18)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_basic05Enemies, 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(15)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_basic05Enemies, 4), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(16)), c_orderQueueAddToEnd);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00034", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(UnitFromId(1), Order(AbilityCommand("UmojanLabDoorsWideLeftLowered", 0)), c_orderQueueReplace);
    TriggerEnable(gt_BasicAttackGroupAttackOrder, true);
    TriggerEnable(gt_BasicAttackGroupTargetingMode, true);
    UnitGroupIssueOrder(gv_basic06Marines, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00035", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_SetOffscreenPoint(UnitGroupCenterOfGroup(gv_basic05Enemies));
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroupIntroQ_Init () {
    gt_BasicAttackGroupIntroQ = TriggerCreate("gt_BasicAttackGroupIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup WrongTarget Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroupWrongTargetQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00036", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroupWrongTargetQ_Init () {
    gt_BasicAttackGroupWrongTargetQ = TriggerCreate("gt_BasicAttackGroupWrongTargetQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup CanceledTargeting Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroupCanceledTargetingQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00037", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroupCanceledTargetingQ_Init () {
    gt_BasicAttackGroupCanceledTargetingQ = TriggerCreate("gt_BasicAttackGroupCanceledTargetingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup CanceledOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroupCanceledOrderQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00038", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroupCanceledOrderQ_Init () {
    gt_BasicAttackGroupCanceledOrderQ = TriggerCreate("gt_BasicAttackGroupCanceledOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroupCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00160", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00040", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00041", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00042", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroupCompleteQ_Init () {
    gt_BasicAttackGroupCompleteQ = TriggerCreate("gt_BasicAttackGroupCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroupReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00021", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroupReminderQ_Init () {
    gt_BasicAttackGroupReminderQ = TriggerCreate("gt_BasicAttackGroupReminderQ_Func");
    TriggerEnable(gt_BasicAttackGroupReminderQ, false);
    TriggerAddEventTimer(gt_BasicAttackGroupReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup AttackOrder
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroupAttackOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!(((gv_basic08LastOrderTime - GameGetMissionTime()) != 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetReminderTimer();
    gv_basic08LastOrderTime = GameGetMissionTime();
    if ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint) && (DistanceBetweenPoints(PointFromId(62), OrderGetTargetPoint(EventUnitOrder())) < 2.0)) {
        gf_TutorialUnpause();
        TransmissionClearAll();
        if ((TriggerActiveCount(gt_BasicAttackGroupIntroQ) == 0)) {
            gf_StopReminderTimer();
        }
        else {
        }
        if ((UnitIsAlive(gv_basicAttackGroupBeacon) == true)) {
            PingDestroy(gv_ping);
            PingDestroyAll();
            UnitKill(gv_basicAttackGroupBeacon);
            gv_basicAttackGroupBeacon = null;
        }
        else {
        }
        gf_DestroyTutorialTextTag();
        gv_basic08ValidOrder = true;
    }
    else {
        if ((OrderGetAbilityCommand(EventUnitOrder()) != AbilityCommand("stop", 0))) {
            UnitGroupLoopBegin(gv_basic06Marines);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
            UnitGroupLoopEnd();
        }
        else {
        }
        if ((TriggerActiveCount(gt_BasicAttackGroupIntroQ) == 0)) {
            gf_StartReminderTimer();
        }
        else {
        }
        if ((UnitIsAlive(gv_basicAttackGroupBeacon) == false)) {
            PingDestroy(gv_ping);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(62), Color(100.00, 0.00, 0.00), 0.0, 270.0);
            gv_ping = PingLastCreated();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialAttackBeacon", c_unitCreateIgnorePlacement, gv_p01_USER, PointFromId(62));
            gv_basicAttackGroupBeacon = UnitLastCreated();
        }
        else {
        }
        gf_CreateAttackMoveTag(gv_basicAttackGroupBeacon, 90);
        if ((gv_basic08ValidOrder == true)) {
            gf_TutorialPause();
            gf_SilenceQ();
            TriggerExecute(gt_BasicAttackGroupCanceledOrderQ, true, false);
        }
        else if ((((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) != c_orderTargetPoint)) || ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint) && (DistanceBetweenPoints(PointFromId(62), OrderGetTargetPoint(EventUnitOrder())) >= 2.0)))) {
            gf_SilenceQ();
            TriggerExecute(gt_BasicAttackGroupWrongTargetQ, true, false);
        }
        gv_basic08ValidOrder = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroupAttackOrder_Init () {
    gt_BasicAttackGroupAttackOrder = TriggerCreate("gt_BasicAttackGroupAttackOrder_Func");
    TriggerEnable(gt_BasicAttackGroupAttackOrder, false);
    TriggerAddEventUnitOrder(gt_BasicAttackGroupAttackOrder, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup TargetingMode
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroupTargetingMode_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_basic08ValidOrder == false) && ((gv_basic08LastOrderTime - GameGetMissionTime()) != 0.0)) {
        gf_SilenceQ();
        TriggerExecute(gt_BasicAttackGroupCanceledTargetingQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroupTargetingMode_Init () {
    gt_BasicAttackGroupTargetingMode = TriggerCreate("gt_BasicAttackGroupTargetingMode_Func");
    TriggerEnable(gt_BasicAttackGroupTargetingMode, false);
    TriggerAddEventTargetModeUpdate(gt_BasicAttackGroupTargetingMode, c_playerAny, AbilityCommand("attack", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic AttackGroup Complete
//--------------------------------------------------------------------------------------------------
bool gt_BasicAttackGroupComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_basic05Enemies, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BasicAttackGroupCleanup();
    TriggerExecute(gt_BasicAttackGroupCompleteQ, true, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BasicCleanup, true, true);
    if ((gv_tutorialProgress < 1)) {
        gv_tutorialProgress = 1;
        BankValueSetFromInt(gv_tutorialBankSave, "General", "Progress", gv_tutorialProgress);
        BankSave(gv_tutorialBankSave);
    }
    else {
    }
    gv_selectedStage = 2;
    gf_UpdateVictoryScreen();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    DialogSetVisible(gv_victoryUI, PlayerGroupAll(), true);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicAttackGroupComplete_Init () {
    gt_BasicAttackGroupComplete = TriggerCreate("gt_BasicAttackGroupComplete_Func");
    TriggerEnable(gt_BasicAttackGroupComplete, false);
    TriggerAddEventUnitDied(gt_BasicAttackGroupComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Intro Cinematic Q
//--------------------------------------------------------------------------------------------------
bool gt_BasicIntroCinematicQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_BasicIntroCinematicSetup, true, true);
    TriggerExecute(gt_BasicIntroCinematic, true, true);
    TriggerExecute(gt_BasicIntroCinematicEnd, true, true);
    TriggerExecute(gt_BasicIntroCinematicCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicIntroCinematicQ_Init () {
    gt_BasicIntroCinematicQ = TriggerCreate("gt_BasicIntroCinematicQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Intro Cinematic Setup
//--------------------------------------------------------------------------------------------------
bool gt_BasicIntroCinematicSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_p01_USER, RegionFromId(4));
    gv_startingAreaRevealer = VisRevealerLastCreated();
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false) && (UnitGroupLoopCurrent() != gv_basic01Marine) && (UnitGroupLoopCurrent() != UnitFromId(1))) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != gv_basic01Marine) && (UnitGroupLoopCurrent() != UnitFromId(1))) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p01_USER, PointFromId(4));
    gv_basic01Marine = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicIntroCinematicSetup_Init () {
    gt_BasicIntroCinematicSetup = TriggerCreate("gt_BasicIntroCinematicSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_BasicIntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_p01_USER, CameraInfoFromId(3), 0.0, -1, 10.0, true);
    CameraApplyInfo(1, CameraInfoFromId(2), 12.0, -1, 10.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00005", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    ActorSend(ActorFromDoodad(DoodadFromId(9)), "AnimBracketStart ElevatorUp Morph Stand,Alternate Morph,Alternate 0 0.250000 AsTimeScale");
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00006", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicIntroCinematic_Init () {
    gt_BasicIntroCinematic = TriggerCreate("gt_BasicIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_BasicIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicIntroCinematicEnd_Init () {
    gt_BasicIntroCinematicEnd = TriggerCreate("gt_BasicIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Intro Cinematic Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_BasicIntroCinematicCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    ActorSend(ActorFromDoodad(DoodadFromId(9)), "AnimBracketClear ElevatorUp Instant");
    ActorSend(ActorFromDoodad(DoodadFromId(9)), "AnimBracketStart ElevatorUp Morph Stand,Alternate Morph,Alternate Instant");
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        lv_fadeDuration = 1.0;
        libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_p01_USER), lv_fadeDuration);
    }
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicIntroCinematicCleanup_Init () {
    gt_BasicIntroCinematicCleanup = TriggerCreate("gt_BasicIntroCinematicCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_TerranCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TerranFailstate, false);
    TriggerEnable(gt_SupplyHelperActivator, true);
    if ((TriggerIsEnabled(gt_FriendlyFireHelperUnpauser) == true)) {
        TriggerExecute(gt_FriendlyFireHelperUnpauser, false, false);
    }
    else {
    }
    UnitRemove(gv_protossBaseRocks);
    UnitRemove(gv_zergBaseRocks);
    UnitIssueOrder(UnitFromId(54), Order(AbilityCommand("AiurTempleStoneGateDiagonalULBRRF", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_ENEMY, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_TerranStartMiningCleanup();
    gf_TerranMakeSCVsCleanup();
    gf_TerranMakeBarracksCleanup();
    gf_TerranMakeMarinesCleanup();
    gf_TerranMakeSupplyCleanup();
    gf_TerranFinishSCVsCleanup();
    gf_TerranLeaveBaseCleanup();
    gf_TerranFindScoutsCleanup();
    CameraSetBounds(PlayerGroupAll(), RegionEntireMap(), true);
    VisRevealerDestroy(gv_startingAreaRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranCleanup_Init () {
    gt_TerranCleanup = TriggerCreate("gt_TerranCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Initialization
//--------------------------------------------------------------------------------------------------
bool gt_TerranInitialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentStage = 2;
    TriggerEnable(gt_FriendlyFireHelper, true);
    TriggerEnable(gt_SupplyHelperActivator, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    PlayerSetColorIndex(gv_p01_USER, 2, true);
    PlayerSetColorIndex(gv_p02_ENEMY, 1, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Aiur_Jungle_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(7), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("UpgradeToOrbital", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("UpgradeToPlanetaryFortress", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterLiftOff", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterTransport", 4), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterTrain", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 2), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 3), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 4), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 6), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 5), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 8), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 9), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 12), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 10), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 13), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 11), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 15), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("Repair", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksTrain", 3), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksTrain", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksTrain", 2), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksTrain", 4), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksTrain", 5), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksTrain", 6), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksAddOns", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksAddOns", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BarracksLiftOff", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("SupplyDepotLower", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("Stimpack", 0), false);
    TechTreeSpecificRequirementEnable(gv_p01_USER, "HaveSupplyDepot", false);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TriggerEnable(gt_TerranFailstate, true);
    TriggerExecute(gt_TerranIntroCinematicQ, true, true);
    TriggerExecute(gt_TerranStartMining, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranInitialization_Init () {
    gt_TerranInitialization = TriggerCreate("gt_TerranInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Failstate
//--------------------------------------------------------------------------------------------------
bool gt_TerranFailstate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(gv_p01_USER, c_gameOverDefeat, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFailstate_Init () {
    gt_TerranFailstate = TriggerCreate("gt_TerranFailstate_Func");
    TriggerEnable(gt_TerranFailstate, false);
    TriggerAddEventUnitDied(gt_TerranFailstate, UnitRefFromVariable("gv_terranCommandCenter"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran StartMining
//--------------------------------------------------------------------------------------------------
bool gt_TerranStartMining_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(gv_terranCommandCenter, c_unitStateSelectable, false);
    TriggerEnable(gt_TerranStartMiningComplete, true);
    TriggerEnable(gt_TerranStartMiningReminderQ, true);
    TriggerExecute(gt_TerranStartMiningQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranStartMining_Init () {
    gt_TerranStartMining = TriggerCreate("gt_TerranStartMining_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran StartMining Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranStartMiningQ_Func (bool testConds, bool runActions) {
    int auto6B23853D_ae;
    int auto6B23853D_ai;

    // Variable Declarations
    point[8] lv_unloadArray;
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.0, c_timeGame);
    lv_unloadArray[1] = PointWithOffset(PointFromId(12), -0.8, 0.0);
    lv_unloadArray[2] = PointWithOffset(PointFromId(12), -0.4, -0.69);
    lv_unloadArray[3] = PointWithOffset(PointFromId(12), 0.4, -0.69);
    lv_unloadArray[4] = PointWithOffset(PointFromId(12), 0.0, 0.0);
    lv_unloadArray[5] = PointWithOffset(PointFromId(12), -0.4, 0.69);
    lv_unloadArray[6] = PointWithOffset(PointFromId(12), 0.8, 0.0);
    lv_unloadArray[7] = PointWithOffset(PointFromId(12), 0.4, 0.69);
    gf_SetOffscreenPoint(PointFromId(12));
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00046", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    auto6B23853D_ae = 7;
    auto6B23853D_ai = 1;
    lv_i = 1;
    for ( ; ( (auto6B23853D_ai >= 0 && lv_i <= auto6B23853D_ae) || (auto6B23853D_ai <= 0 && lv_i >= auto6B23853D_ae) ) ; lv_i += auto6B23853D_ai ) {
        UnitIssueOrder(gv_terranCommandCenter, OrderTargetingPoint(AbilityCommand("RallyCommand", 0), lv_unloadArray[lv_i]), c_orderQueueReplace);
        UnitCargoCreate(gv_terranCommandCenter, "SCV", 1);
        UnitGroupAdd(gv_terranStartingWorkers, UnitCargoLastCreated());
        UnitIssueOrder(gv_terranCommandCenter, Order(AbilityCommand("CommandCenterTransport", 1)), c_orderQueueReplace);
        libNtve_gf_SendActorMessageToUnit(UnitCargoLastCreated(), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(UnitCargoLastCreated(), "SetTintColor {255,255,255 2.000000}");
        Wait(0.5, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    UnitSetState(gv_terranCommandCenter, c_unitStateSelectable, true);
    UnitIssueOrder(gv_terranCommandCenter, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointWithOffset(PointFromId(26), -5.0, 5.0))), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "HaloStop");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetTintColor 255,255,255");
    }
    UnitGroupLoopEnd();
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00047", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerEnable(gt_TerranStartMiningWorkerSelection, true);
    TriggerExecute(gt_TerranStartMiningWorkerSelection, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranStartMiningQ_Init () {
    gt_TerranStartMiningQ = TriggerCreate("gt_TerranStartMiningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran StartMining Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranStartMiningCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00048", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_DisplayScreenImage(11, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 212, 134, c_anchorTopRight, 295, -34);
    libNtve_gf_PulseScreenImage(11, 1.75, 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00049", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    libNtve_gf_StopPulsingScreenImage(11);
    libNtve_gf_HideScreenImage(false, 11);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranStartMiningCompleteQ_Init () {
    gt_TerranStartMiningCompleteQ = TriggerCreate("gt_TerranStartMiningCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran StartMining Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranStartMiningReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00050", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranStartMiningReminderQ_Init () {
    gt_TerranStartMiningReminderQ = TriggerCreate("gt_TerranStartMiningReminderQ_Func");
    TriggerEnable(gt_TerranStartMiningReminderQ, false);
    TriggerAddEventTimer(gt_TerranStartMiningReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran StartMining WorkerSelection
//--------------------------------------------------------------------------------------------------
bool gt_TerranStartMiningWorkerSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validOrder;
    unit lv_favoredMineral;
    bool lv_workerNotMiningSelected;
    unitgroup lv_workerNotMining;

    // Variable Initialization
    lv_workerNotMining = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((!(((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 1)))))) {
            UnitGroupAdd(lv_workerNotMining, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupSelected(gv_p01_USER));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupHasUnit(lv_workerNotMining, UnitGroupLoopCurrent()) == true)) {
            lv_workerNotMiningSelected = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_workerNotMiningSelected == true)) {
        UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_DestroyTutorialTextTag();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
        }
        UnitGroupLoopEnd();
        gf_CreateTutorialReticlesOnUnitGroup(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1.0, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((lv_favoredMineral == null)) {
                lv_favoredMineral = UnitGroupLoopCurrent();
            }
            else {
            }
            if ((PointGetY(UnitGetPosition(UnitGroupLoopCurrent())) < PointGetY(UnitGetPosition(lv_favoredMineral)))) {
                lv_favoredMineral = UnitGroupLoopCurrent();
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        gf_CreateRClickToGatherTag(lv_favoredMineral, 70);
        gf_SetOffscreenUnit(lv_favoredMineral);
    }
    else {
        gf_DestroyTutorialTextTag();
        UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        if ((UnitGroupCount(UnitGroup("SCV", gv_p01_USER, RegionCircle(UnitGroupCenterOfGroup(lv_workerNotMining), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= UnitGroupCount(lv_workerNotMining, c_unitCountAlive))) {
            if ((UnitIsAlive(gv_invisHelper) == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTutorialHelper", c_unitCreateIgnorePlacement, 0, PointWithOffset(UnitGroupCenterOfGroup(lv_workerNotMining), 0.0, 0.3));
                gv_invisHelper = UnitLastCreated();
            }
            else {
                UnitSetPosition(gv_invisHelper, PointWithOffset(UnitGroupCenterOfGroup(lv_workerNotMining), 0.0, 0.3), true);
            }
            gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 1.2, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
            gf_CreateDragSelectTag(gv_invisHelper, -140);
            UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
        }
        else {
            UnitGroupLoopBegin(lv_workerNotMining);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_CreateTutorialReticleOnUnit(UnitGroupLoopCurrent(), 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
            }
            UnitGroupLoopEnd();
            if ((UnitIsAlive(gv_invisHelper) == true)) {
                UnitRemove(gv_invisHelper);
                gv_invisHelper = null;
            }
            else {
            }
        }
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(lv_workerNotMining));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranStartMiningWorkerSelection_Init () {
    gt_TerranStartMiningWorkerSelection = TriggerCreate("gt_TerranStartMiningWorkerSelection_Func");
    TriggerEnable(gt_TerranStartMiningWorkerSelection, false);
    TriggerAddEventTimePeriodic(gt_TerranStartMiningWorkerSelection, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran StartMining Complete
//--------------------------------------------------------------------------------------------------
bool gt_TerranStartMiningComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_miningWorkers;

    // Variable Initialization
    lv_miningWorkers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 1)))) {
            UnitGroupAdd(lv_miningWorkers, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_miningWorkers, c_unitCountAlive) >= UnitGroupCount(gv_terranStartingWorkers, c_unitCountAlive))) {
        gf_TerranStartMiningCleanup();
        TriggerExecute(gt_TerranStartMiningCompleteQ, true, true);
        TriggerExecute(gt_TerranMakeSCVs, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranStartMiningComplete_Init () {
    gt_TerranStartMiningComplete = TriggerCreate("gt_TerranStartMiningComplete_Func");
    TriggerEnable(gt_TerranStartMiningComplete, false);
    TriggerAddEventUnitOrder(gt_TerranStartMiningComplete, null, AbilityCommand("SCVHarvest", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TerranMakeSCVsTrainingStarted, true);
    TriggerEnable(gt_TerranMakeSCVsComplete, true);
    TriggerEnable(gt_TerranMakeSCVsReminder, true);
    TriggerExecute(gt_TerranMakeSCVsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVs_Init () {
    gt_TerranMakeSCVs = TriggerCreate("gt_TerranMakeSCVs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00051", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CommandCenterTrain", 0), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SCV", true);
    TriggerEnable(gt_TerranMakeSCVsCommandCenterSelection, true);
    TriggerExecute(gt_TerranMakeSCVsCommandCenterSelection, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerEnable(gt_TerranMakeSCVsReminderController, true);
    TriggerExecute(gt_TerranMakeSCVsReminderController, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsQ_Init () {
    gt_TerranMakeSCVsQ = TriggerCreate("gt_TerranMakeSCVsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs SelectCC Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsSelectCCQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeSCVsCCSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00056", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsSelectCCQ_Init () {
    gt_TerranMakeSCVsSelectCCQ = TriggerCreate("gt_TerranMakeSCVsSelectCCQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs TrainSCV Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsTrainSCVQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeSCVsCCSelected == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00219", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsTrainSCVQ_Init () {
    gt_TerranMakeSCVsTrainSCVQ = TriggerCreate("gt_TerranMakeSCVsTrainSCVQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs TrainingStarted Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsTrainingStartedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_StopReminderTimer();
    TransmissionClearAll();
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00052", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00053", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_TerranMakeSCVsCreateObjective, true, false);
    libNtve_gf_DisplayScreenImage(15, "Assets\\Textures\\tutorialmissionobjectiveshighlight.dds", c_triggerBlendModeAdd, 500, 90, c_anchorTopLeft, 0, 16);
    libNtve_gf_PulseScreenImage(15, 1.75, 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00054", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    libNtve_gf_StopPulsingScreenImage(15);
    libNtve_gf_HideScreenImage(false, 15);
    TriggerExecute(gt_TerranMakeSCVsReminderController, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsTrainingStartedQ_Init () {
    gt_TerranMakeSCVsTrainingStartedQ = TriggerCreate("gt_TerranMakeSCVsTrainingStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsCompleteQ_Init () {
    gt_TerranMakeSCVsCompleteQ = TriggerCreate("gt_TerranMakeSCVsCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/9731852B"), StringToText(""), c_objectiveStateActive, true);
    gv_terranSCVObjective = ObjectiveLastCreated();
    TriggerEnable(gt_TerranMakeSCVsUpdateObjective, true);
    TriggerExecute(gt_TerranMakeSCVsUpdateObjective, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsCreateObjective_Init () {
    gt_TerranMakeSCVsCreateObjective = TriggerCreate("gt_TerranMakeSCVsCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs UpdateObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsUpdateObjective_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_miningSCVs;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 1)))) {
            lv_miningSCVs += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    TextExpressionSetToken("Param/Expression/2F9B891F", "A", IntToText(lv_miningSCVs));
    ObjectiveSetName(gv_terranSCVObjective, TextExpressionAssemble("Param/Expression/2F9B891F"));
    if ((lv_miningSCVs >= 12)) {
        ObjectiveSetState(gv_terranSCVObjective, c_objectiveStateCompleted);
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(2.0, c_timeGame);
        ObjectiveDestroy(gv_terranSCVObjective);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsUpdateObjective_Init () {
    gt_TerranMakeSCVsUpdateObjective = TriggerCreate("gt_TerranMakeSCVsUpdateObjective_Func");
    TriggerEnable(gt_TerranMakeSCVsUpdateObjective, false);
    TriggerAddEventUnitAbility(gt_TerranMakeSCVsUpdateObjective, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs Reminder
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "SCV", true);
    gv_reminderPlayed = true;
    TriggerExecute(gt_TerranMakeSCVsSelectCCQ, true, false);
    TriggerExecute(gt_TerranMakeSCVsTrainSCVQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsReminder_Init () {
    gt_TerranMakeSCVsReminder = TriggerCreate("gt_TerranMakeSCVsReminder_Func");
    TriggerEnable(gt_TerranMakeSCVsReminder, false);
    TriggerAddEventTimer(gt_TerranMakeSCVsReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs CommandCenterSelection
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsCommandCenterSelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsSelected(gv_terranCommandCenter, gv_p01_USER) == true)) {
        if ((gv_terranMakeSCVsCCSelected == false)) {
            gv_terranMakeSCVsCCSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeSCVsReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
    }
    else {
        if ((gv_terranMakeSCVsCCSelected == true)) {
            gv_terranMakeSCVsCCSelected = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeSCVsReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_CreateLClickToSelectTag(gv_terranCommandCenter, 110);
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_terranCommandCenter), 1.0, libVCMI_ge_CampaginReticleSize_Large, "Ref_Target 05");
        gf_SetOffscreenUnit(gv_terranCommandCenter);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsCommandCenterSelection_Init () {
    gt_TerranMakeSCVsCommandCenterSelection = TriggerCreate("gt_TerranMakeSCVsCommandCenterSelection_Func");
    TriggerEnable(gt_TerranMakeSCVsCommandCenterSelection, false);
    TriggerAddEventUnitSelected(gt_TerranMakeSCVsCommandCenterSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_TerranMakeSCVsCommandCenterSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs TrainingStarted
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsTrainingStarted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "SCV", false);
    TriggerExecute(gt_TerranMakeSCVsTrainingStartedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsTrainingStarted_Init () {
    gt_TerranMakeSCVsTrainingStarted = TriggerCreate("gt_TerranMakeSCVsTrainingStarted_Func");
    TriggerEnable(gt_TerranMakeSCVsTrainingStarted, false);
    TriggerAddEventButtonPressed(gt_TerranMakeSCVsTrainingStarted, gv_p01_USER, "SCV");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs ReminderController
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsReminderController_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitQueueItemCount(gv_terranCommandCenter, 1) >= 1) || (PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) < 50) || ((UnitGroupCount(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + UnitQueueGetProperty(gv_terranCommandCenter, c_unitQueuePropertyUsed)) >= 12))) {
        gf_StopReminderTimer();
        gf_SetOffscreenUnit(null);
        if ((TriggerIsEnabled(gt_TerranMakeSCVsCommandCenterSelection) == true)) {
            TriggerEnable(gt_TerranMakeSCVsCommandCenterSelection, false);
            gf_DestroyTutorialTextTag();
            gf_ClearAllTutorialReticles();
        }
        else {
        }
    }
    else {
        gf_StartReminderTimer();
        if ((TriggerIsEnabled(gt_TerranMakeSCVsCommandCenterSelection) == false)) {
            TriggerEnable(gt_TerranMakeSCVsCommandCenterSelection, true);
            TriggerExecute(gt_TerranMakeSCVsCommandCenterSelection, true, false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsReminderController_Init () {
    gt_TerranMakeSCVsReminderController = TriggerCreate("gt_TerranMakeSCVsReminderController_Func");
    TriggerEnable(gt_TerranMakeSCVsReminderController, false);
    TriggerAddEventPlayerPropChange(gt_TerranMakeSCVsReminderController, gv_p01_USER, c_playerPropMinerals);
    TriggerAddEventUnitAbility(gt_TerranMakeSCVsReminderController, null, AbilityCommand("CommandCenterTrain", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSCVs Complete
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSCVsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(gv_p01_USER, c_playerPropSuppliesUsed) >= PlayerGetPropertyInt(gv_p01_USER, c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TerranMakeSCVsCleanup();
    TriggerExecute(gt_TerranMakeSCVsCompleteQ, true, true);
    TriggerExecute(gt_TerranMakeSupply, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSCVsComplete_Init () {
    gt_TerranMakeSCVsComplete = TriggerCreate("gt_TerranMakeSCVsComplete_Func");
    TriggerEnable(gt_TerranMakeSCVsComplete, false);
    TriggerAddEventPlayerPropChange(gt_TerranMakeSCVsComplete, gv_p01_USER, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupply_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TerranMakeSupplyReminder, true);
    TriggerEnable(gt_TerranMakeSupplyComplete, true);
    TriggerExecute(gt_TerranMakeSupplyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupply_Init () {
    gt_TerranMakeSupply = TriggerCreate("gt_TerranMakeSupply_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00057", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_DisplayScreenImage(12, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 212, 134, c_anchorTopRight, 2, -34);
    libNtve_gf_PulseScreenImage(12, 1.75, 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00058", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_StopPulsingScreenImage(12);
    libNtve_gf_HideScreenImage(false, 12);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00059", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00060", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 1), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SupplyDepot", true);
    TriggerEnable(gt_TerranMakeSupplyBuildMenu, true);
    TriggerEnable(gt_TerranMakeSupplySupplyDepotTargeting, true);
    TriggerEnable(gt_TerranMakeSupplyBuildOrder, true);
    TriggerEnable(gt_TerranMakeSupplySCVSelection, true);
    TriggerExecute(gt_TerranMakeSupplySCVSelection, true, false);
    TriggerExecute(gt_TerranMakeSupplyCreateObjective, true, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyQ_Init () {
    gt_TerranMakeSupplyQ = TriggerCreate("gt_TerranMakeSupplyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply SelectSCV Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplySelectSCVQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeSupplySCVSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00177", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplySelectSCVQ_Init () {
    gt_TerranMakeSupplySelectSCVQ = TriggerCreate("gt_TerranMakeSupplySelectSCVQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply OpenBuildMenu Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyOpenBuildMenuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeSupplySCVSelected == true))) {
            return false;
        }

        if (!((gv_terranMakeSupplyBuildMenuPressed == false))) {
            return false;
        }

        if (!((gv_terranMakeSupplyTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00178", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyOpenBuildMenuQ_Init () {
    gt_TerranMakeSupplyOpenBuildMenuQ = TriggerCreate("gt_TerranMakeSupplyOpenBuildMenuQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply SupplyDepotButton Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplySupplyDepotButtonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeSupplySCVSelected == true))) {
            return false;
        }

        if (!((gv_terranMakeSupplyBuildMenuPressed == true))) {
            return false;
        }

        if (!((gv_terranMakeSupplyTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00179", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplySupplyDepotButtonQ_Init () {
    gt_TerranMakeSupplySupplyDepotButtonQ = TriggerCreate("gt_TerranMakeSupplySupplyDepotButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply PlaceDepot Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyPlaceDepotQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeSupplySCVSelected == true))) {
            return false;
        }

        if (!((gv_terranMakeSupplyTargetModeActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00180", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyPlaceDepotQ_Init () {
    gt_TerranMakeSupplyPlaceDepotQ = TriggerCreate("gt_TerranMakeSupplyPlaceDepotQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply BuildOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyBuildOrderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00061", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyBuildOrderQ_Init () {
    gt_TerranMakeSupplyBuildOrderQ = TriggerCreate("gt_TerranMakeSupplyBuildOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyCompleteQ_Init () {
    gt_TerranMakeSupplyCompleteQ = TriggerCreate("gt_TerranMakeSupplyCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/6FFAD107"), StringToText(""), c_objectiveStateActive, true);
    gv_terranSupplyDepotObjective = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyCreateObjective_Init () {
    gt_TerranMakeSupplyCreateObjective = TriggerCreate("gt_TerranMakeSupplyCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyCompleteObjective_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SupplyDepot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_terranSupplyDepotObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeGame);
    ObjectiveDestroy(gv_terranSupplyDepotObjective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyCompleteObjective_Init () {
    gt_TerranMakeSupplyCompleteObjective = TriggerCreate("gt_TerranMakeSupplyCompleteObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply Reminder
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerExecute(gt_TerranMakeSupplySelectSCVQ, true, false);
    TriggerExecute(gt_TerranMakeSupplyOpenBuildMenuQ, true, false);
    TriggerExecute(gt_TerranMakeSupplySupplyDepotButtonQ, true, false);
    TriggerExecute(gt_TerranMakeSupplyPlaceDepotQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyReminder_Init () {
    gt_TerranMakeSupplyReminder = TriggerCreate("gt_TerranMakeSupplyReminder_Func");
    TriggerEnable(gt_TerranMakeSupplyReminder, false);
    TriggerAddEventTimer(gt_TerranMakeSupplyReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply SCVSelection
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplySCVSelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitTypeIsSelected("SCV", gv_p01_USER) == true)) {
        if ((gv_terranMakeSupplySCVSelected == false)) {
            gv_terranMakeSupplySCVSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeSupplyReminder, false, false);
            }
            else {
            }
        }
        else {
            if ((gv_terranMakeSupplyBuildMenuPressed == true)) {
                gv_terranMakeSupplyBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_TerranMakeSupplyReminder, false, false);
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_SetOffscreenUnit(null);
    }
    else {
        if ((gv_terranMakeSupplySCVSelected == true)) {
            gv_terranMakeSupplySCVSelected = false;
            gv_terranMakeSupplyBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeSupplyReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplySCVSelection_Init () {
    gt_TerranMakeSupplySCVSelection = TriggerCreate("gt_TerranMakeSupplySCVSelection_Func");
    TriggerEnable(gt_TerranMakeSupplySCVSelection, false);
    TriggerAddEventUnitSelected(gt_TerranMakeSupplySCVSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_TerranMakeSupplySCVSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply BuildMenu
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyBuildMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventButtonPressed() == "TerranBuild")) {
        if ((gv_terranMakeSupplyBuildMenuPressed == false)) {
            gv_terranMakeSupplyBuildMenuPressed = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeSupplyReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((EventButtonPressed() == "Cancel")) {
        if ((gv_terranMakeSupplyBuildMenuPressed == true)) {
            gv_terranMakeSupplyBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeSupplyReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyBuildMenu_Init () {
    gt_TerranMakeSupplyBuildMenu = TriggerCreate("gt_TerranMakeSupplyBuildMenu_Func");
    TriggerEnable(gt_TerranMakeSupplyBuildMenu, false);
    TriggerAddEventButtonPressed(gt_TerranMakeSupplyBuildMenu, gv_p01_USER, "TerranBuild");
    TriggerAddEventButtonPressed(gt_TerranMakeSupplyBuildMenu, gv_p01_USER, "Cancel");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply SupplyDepotTargeting
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplySupplyDepotTargeting_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn)) {
        if ((gv_terranMakeSupplyTargetModeActive == false)) {
            gv_terranMakeSupplyTargetModeActive = true;
            gv_terranMakeSupplyBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeSupplyReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        if ((UnitIsAlive(gv_invisHelper) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Invisible2x2", 0, 0, PointFromId(36));
            gv_invisHelper = UnitLastCreated();
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 0.8, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
        gf_CreateLClickToPlaceTag(gv_invisHelper, 0);
        gf_SetOffscreenUnit(gv_invisHelper);
    }
    else {
        if ((gv_terranMakeSupplyTargetModeActive == true)) {
            gv_terranMakeSupplyTargetModeActive = false;
            gv_terranMakeSupplyBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeSupplyReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_ClearAllTutorialReticles();
        gf_DestroyTutorialTextTag();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        gf_SetOffscreenUnit(null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplySupplyDepotTargeting_Init () {
    gt_TerranMakeSupplySupplyDepotTargeting = TriggerCreate("gt_TerranMakeSupplySupplyDepotTargeting_Func");
    TriggerEnable(gt_TerranMakeSupplySupplyDepotTargeting, false);
    TriggerAddEventTargetModeUpdate(gt_TerranMakeSupplySupplyDepotTargeting, c_playerAny, AbilityCommand("TerranBuild", 1), c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validBuildOrder;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("SupplyDepot", gv_p01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_validBuildOrder = true;
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("TerranBuild", 1))) {
            lv_validBuildOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validBuildOrder == true)) {
        gv_terranMakeSupplyTargetModeActive = false;
        gv_terranMakeSupplyBuildMenuPressed = false;
        gf_StopReminderTimer();
        gf_ClearAllTutorialReticles();
        gf_DestroyTutorialTextTag();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        gf_SetOffscreenUnit(null);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "SupplyDepot", false);
        TriggerEnable(gt_TerranMakeSupplySupplyDepotTargeting, false);
        TriggerEnable(gt_TerranMakeSupplyBuildMenu, false);
        TriggerEnable(gt_TerranMakeSupplySCVSelection, false);
        TriggerExecute(gt_TerranMakeSupplyBuildOrderQ, true, false);
    }
    else {
        gf_StartReminderTimer();
        UISetButtonFaceHighlighted(PlayerGroupAll(), "SupplyDepot", true);
        TriggerEnable(gt_TerranMakeSupplySupplyDepotTargeting, true);
        TriggerEnable(gt_TerranMakeSupplyBuildMenu, true);
        TriggerEnable(gt_TerranMakeSupplySCVSelection, true);
        TriggerExecute(gt_TerranMakeSupplySCVSelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyBuildOrder_Init () {
    gt_TerranMakeSupplyBuildOrder = TriggerCreate("gt_TerranMakeSupplyBuildOrder_Func");
    TriggerEnable(gt_TerranMakeSupplyBuildOrder, false);
    TriggerAddEventUnitAbility(gt_TerranMakeSupplyBuildOrder, null, AbilityCommand("TerranBuild", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitConstructProgress(gt_TerranMakeSupplyBuildOrder, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeSupply Complete
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeSupplyComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_workingSCVs;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "SupplyDepot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TerranMakeSupplyCleanup();
    TriggerExecute(gt_TerranMakeSupplyCompleteObjective, true, false);
    TriggerExecute(gt_TerranMakeSupplyCompleteQ, true, true);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 1)))) {
            lv_workingSCVs += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_workingSCVs >= UnitGroupCount(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
        TriggerExecute(gt_TerranFinishSCVs, true, false);
    }
    else {
        TriggerExecute(gt_TerranIdleSCV, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeSupplyComplete_Init () {
    gt_TerranMakeSupplyComplete = TriggerCreate("gt_TerranMakeSupplyComplete_Func");
    TriggerEnable(gt_TerranMakeSupplyComplete, false);
    TriggerAddEventUnitConstructProgress(gt_TerranMakeSupplyComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran IdleSCV
//--------------------------------------------------------------------------------------------------
bool gt_TerranIdleSCV_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TerranIdleSCVComplete, true);
    TriggerEnable(gt_TerranIdleSCVReminderQ, true);
    TriggerExecute(gt_TerranIdleSCVQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIdleSCV_Init () {
    gt_TerranIdleSCV = TriggerCreate("gt_TerranIdleSCV_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran IdleSCV Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranIdleSCVQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00063", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerEnable(gt_TerranIdleSCVSCVSelection, true);
    TriggerExecute(gt_TerranIdleSCVSCVSelection, true, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIdleSCVQ_Init () {
    gt_TerranIdleSCVQ = TriggerCreate("gt_TerranIdleSCVQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran IdleSCV Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranIdleSCVCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00064", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIdleSCVCompleteQ_Init () {
    gt_TerranIdleSCVCompleteQ = TriggerCreate("gt_TerranIdleSCVCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran IdleSCV Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranIdleSCVReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00065", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIdleSCVReminderQ_Init () {
    gt_TerranIdleSCVReminderQ = TriggerCreate("gt_TerranIdleSCVReminderQ_Func");
    TriggerEnable(gt_TerranIdleSCVReminderQ, false);
    TriggerAddEventTimer(gt_TerranIdleSCVReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran IdleSCV SCVSelection
//--------------------------------------------------------------------------------------------------
bool gt_TerranIdleSCVSCVSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_idleSCVSelected;
    unit lv_favoredMineral;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupSelected(gv_p01_USER));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SCV") && (!(((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 1)))))) {
            lv_idleSCVSelected = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_idleSCVSelected == true)) {
        UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_DestroyTutorialTextTag();
        UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
        }
        UnitGroupLoopEnd();
        gf_CreateTutorialReticlesOnUnitGroup(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1.0, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((lv_favoredMineral == null)) {
                lv_favoredMineral = UnitGroupLoopCurrent();
            }
            else {
            }
            if ((PointGetX(UnitGetPosition(UnitGroupLoopCurrent())) > PointGetX(UnitGetPosition(lv_favoredMineral)))) {
                lv_favoredMineral = UnitGroupLoopCurrent();
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        gf_CreateRClickToGatherTag(lv_favoredMineral, 70);
        gf_SetOffscreenUnit(lv_favoredMineral);
    }
    else {
        gf_DestroyTutorialTextTag();
        UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 1)))) {
                gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
            }
            else {
                gf_CreateTutorialReticleOnUnit(UnitGroupLoopCurrent(), 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
            }
        }
        UnitGroupLoopEnd();
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(UnitGroupIdle(gv_p01_USER, true)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIdleSCVSCVSelection_Init () {
    gt_TerranIdleSCVSCVSelection = TriggerCreate("gt_TerranIdleSCVSCVSelection_Func");
    TriggerEnable(gt_TerranIdleSCVSCVSelection, false);
    TriggerAddEventUnitSelected(gt_TerranIdleSCVSCVSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_TerranIdleSCVSCVSelection, null, gv_p01_USER, false);
    TriggerAddEventUnitAbility(gt_TerranIdleSCVSCVSelection, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran IdleSCV Complete
//--------------------------------------------------------------------------------------------------
bool gt_TerranIdleSCVComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_workingSCVs;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 1)) || (OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("TerranBuild", 1)))) {
            lv_workingSCVs += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_workingSCVs >= UnitGroupCount(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
        gf_TerranIdleSCVCleanup();
        TriggerExecute(gt_TerranIdleSCVCompleteQ, true, true);
        TriggerExecute(gt_TerranFinishSCVs, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIdleSCVComplete_Init () {
    gt_TerranIdleSCVComplete = TriggerCreate("gt_TerranIdleSCVComplete_Func");
    TriggerEnable(gt_TerranIdleSCVComplete, false);
    TriggerAddEventUnitAbility(gt_TerranIdleSCVComplete, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FinishSCVs
//--------------------------------------------------------------------------------------------------
bool gt_TerranFinishSCVs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SupplyHelperActivator, true);
    TriggerEnable(gt_TerranFinishSCVsComplete, true);
    TriggerEnable(gt_TerranFinishSCVsSupplyHelperDone, true);
    TriggerEnable(gt_TerranFinishSCVsReminderQ, true);
    TriggerEnable(gt_TerranFinishSCVsTrainingStarted, true);
    TriggerExecute(gt_TerranFinishSCVsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFinishSCVs_Init () {
    gt_TerranFinishSCVs = TriggerCreate("gt_TerranFinishSCVs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FinishSCVs Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranFinishSCVsQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if (((UnitGroupCount(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitQueueGetProperty(gv_terranCommandCenter, c_unitQueuePropertyUsed)) >= 12)) {
        TriggerExecute(gt_TerranFinishSCVsComplete, true, false);
    }
    else {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "SCV", true);
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00066", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
        TriggerEnable(gt_TerranFinishSCVsCommandCenterSelection, true);
        TriggerExecute(gt_TerranFinishSCVsCommandCenterSelection, true, false);
        TriggerEnable(gt_TerranFinishSCVsReminderController, true);
        TriggerExecute(gt_TerranFinishSCVsReminderController, true, false);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFinishSCVsQ_Init () {
    gt_TerranFinishSCVsQ = TriggerCreate("gt_TerranFinishSCVsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FinishSCVs Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranFinishSCVsCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00067", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFinishSCVsCompleteQ_Init () {
    gt_TerranFinishSCVsCompleteQ = TriggerCreate("gt_TerranFinishSCVsCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FinishSCVs Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranFinishSCVsReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00068", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFinishSCVsReminderQ_Init () {
    gt_TerranFinishSCVsReminderQ = TriggerCreate("gt_TerranFinishSCVsReminderQ_Func");
    TriggerEnable(gt_TerranFinishSCVsReminderQ, false);
    TriggerAddEventTimer(gt_TerranFinishSCVsReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FinishSCVs SupplyHelperDone
//--------------------------------------------------------------------------------------------------
bool gt_TerranFinishSCVsSupplyHelperDone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetReminderTimer();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SCV", true);
    TriggerExecute(gt_TerranFinishSCVsCommandCenterSelection, true, false);
    TriggerExecute(gt_TerranFinishSCVsReminderController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFinishSCVsSupplyHelperDone_Init () {
    gt_TerranFinishSCVsSupplyHelperDone = TriggerCreate("gt_TerranFinishSCVsSupplyHelperDone_Func");
    TriggerEnable(gt_TerranFinishSCVsSupplyHelperDone, false);
    TriggerAddEventGeneric(gt_TerranFinishSCVsSupplyHelperDone, "SupplyHelperDone");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FinishSCVs CommandCenterSelection
//--------------------------------------------------------------------------------------------------
bool gt_TerranFinishSCVsCommandCenterSelection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_supplyHelperActive == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsSelected(gv_terranCommandCenter, gv_p01_USER) == true) || ((UnitGroupCount(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) + UnitQueueGetProperty(gv_terranCommandCenter, c_unitQueuePropertyUsed)) >= 12))) {
        gf_ClearAllTutorialReticles();
        gf_DestroyTutorialTextTag();
        gf_SetOffscreenUnit(null);
    }
    else {
        gf_CreateLClickToSelectTag(gv_terranCommandCenter, 110);
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_terranCommandCenter), 1.0, libVCMI_ge_CampaginReticleSize_Large, "Ref_Target 05");
        gf_SetOffscreenUnit(gv_terranCommandCenter);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFinishSCVsCommandCenterSelection_Init () {
    gt_TerranFinishSCVsCommandCenterSelection = TriggerCreate("gt_TerranFinishSCVsCommandCenterSelection_Func");
    TriggerEnable(gt_TerranFinishSCVsCommandCenterSelection, false);
    TriggerAddEventUnitSelected(gt_TerranFinishSCVsCommandCenterSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_TerranFinishSCVsCommandCenterSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FinishSCVs TrainingStarted
//--------------------------------------------------------------------------------------------------
bool gt_TerranFinishSCVsTrainingStarted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "SCV", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFinishSCVsTrainingStarted_Init () {
    gt_TerranFinishSCVsTrainingStarted = TriggerCreate("gt_TerranFinishSCVsTrainingStarted_Func");
    TriggerEnable(gt_TerranFinishSCVsTrainingStarted, false);
    TriggerAddEventButtonPressed(gt_TerranFinishSCVsTrainingStarted, gv_p01_USER, "SCV");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FinishSCVs ReminderController
//--------------------------------------------------------------------------------------------------
bool gt_TerranFinishSCVsReminderController_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitQueueItemCount(gv_terranCommandCenter, 1) >= 1) || (PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) < 50))) {
        gf_StopReminderTimer();
        gf_SetOffscreenUnit(null);
        if ((TriggerIsEnabled(gt_TerranFinishSCVsCommandCenterSelection) == true)) {
            TriggerEnable(gt_TerranFinishSCVsCommandCenterSelection, false);
            gf_DestroyTutorialTextTag();
            gf_ClearAllTutorialReticles();
        }
        else {
        }
    }
    else {
        gf_StartReminderTimer();
        if ((TriggerIsEnabled(gt_TerranFinishSCVsCommandCenterSelection) == false)) {
            TriggerEnable(gt_TerranFinishSCVsCommandCenterSelection, true);
            TriggerExecute(gt_TerranFinishSCVsCommandCenterSelection, true, false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFinishSCVsReminderController_Init () {
    gt_TerranFinishSCVsReminderController = TriggerCreate("gt_TerranFinishSCVsReminderController_Func");
    TriggerEnable(gt_TerranFinishSCVsReminderController, false);
    TriggerAddEventPlayerPropChange(gt_TerranFinishSCVsReminderController, gv_p01_USER, c_playerPropMinerals);
    TriggerAddEventUnitAbility(gt_TerranFinishSCVsReminderController, null, AbilityCommand("CommandCenterTrain", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FinishSCVs Complete
//--------------------------------------------------------------------------------------------------
bool gt_TerranFinishSCVsComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_miningSCVs;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("SCVHarvest", 1)))) {
            lv_miningSCVs += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_miningSCVs >= 12)) {
        gf_TerranFinishSCVsCleanup();
        TriggerExecute(gt_TerranFinishSCVsCompleteQ, true, true);
        TriggerExecute(gt_TerranMakeBarracks, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFinishSCVsComplete_Init () {
    gt_TerranFinishSCVsComplete = TriggerCreate("gt_TerranFinishSCVsComplete_Func");
    TriggerEnable(gt_TerranFinishSCVsComplete, false);
    TriggerAddEventUnitOrder(gt_TerranFinishSCVsComplete, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracks_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TerranMakeBarracksReminder, true);
    TriggerEnable(gt_TerranMakeBarracksComplete, true);
    TriggerExecute(gt_TerranMakeBarracksQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracks_Init () {
    gt_TerranMakeBarracks = TriggerCreate("gt_TerranMakeBarracks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_TerranMakeBarracksCreateObjective, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00069", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00070", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TerranBuild", 3), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Barracks", true);
    TriggerEnable(gt_TerranMakeBarracksSCVSelection, true);
    TriggerExecute(gt_TerranMakeBarracksSCVSelection, true, false);
    TriggerEnable(gt_TerranMakeBarracksBuildMenu, true);
    TriggerEnable(gt_TerranMakeBarracksBarracksTargeting, true);
    TriggerEnable(gt_TerranMakeBarracksBuildOrder, true);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksQ_Init () {
    gt_TerranMakeBarracksQ = TriggerCreate("gt_TerranMakeBarracksQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks SelectSCV Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksSelectSCVQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeBarracksSCVSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00181", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksSelectSCVQ_Init () {
    gt_TerranMakeBarracksSelectSCVQ = TriggerCreate("gt_TerranMakeBarracksSelectSCVQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks OpenBuildMenu Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksOpenBuildMenuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeBarracksSCVSelected == true))) {
            return false;
        }

        if (!((gv_terranMakeBarracksBuildMenuPressed == false))) {
            return false;
        }

        if (!((gv_terranMakeBarracksTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00182", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksOpenBuildMenuQ_Init () {
    gt_TerranMakeBarracksOpenBuildMenuQ = TriggerCreate("gt_TerranMakeBarracksOpenBuildMenuQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks BarracksButton Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksBarracksButtonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeBarracksSCVSelected == true))) {
            return false;
        }

        if (!((gv_terranMakeBarracksBuildMenuPressed == true))) {
            return false;
        }

        if (!((gv_terranMakeBarracksTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00183", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksBarracksButtonQ_Init () {
    gt_TerranMakeBarracksBarracksButtonQ = TriggerCreate("gt_TerranMakeBarracksBarracksButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks PlaceBarracks Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksPlaceBarracksQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_terranMakeBarracksSCVSelected == true))) {
            return false;
        }

        if (!((gv_terranMakeBarracksTargetModeActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00184", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksPlaceBarracksQ_Init () {
    gt_TerranMakeBarracksPlaceBarracksQ = TriggerCreate("gt_TerranMakeBarracksPlaceBarracksQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksCompleteQ_Init () {
    gt_TerranMakeBarracksCompleteQ = TriggerCreate("gt_TerranMakeBarracksCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/66F71B7F"), StringToText(""), c_objectiveStateActive, true);
    gv_terranMakeBarracksObjective = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksCreateObjective_Init () {
    gt_TerranMakeBarracksCreateObjective = TriggerCreate("gt_TerranMakeBarracksCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksCompleteObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_terranMakeBarracksObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeGame);
    ObjectiveDestroy(gv_terranMakeBarracksObjective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksCompleteObjective_Init () {
    gt_TerranMakeBarracksCompleteObjective = TriggerCreate("gt_TerranMakeBarracksCompleteObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks Reminder
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerExecute(gt_TerranMakeBarracksSelectSCVQ, true, false);
    TriggerExecute(gt_TerranMakeBarracksOpenBuildMenuQ, true, false);
    TriggerExecute(gt_TerranMakeBarracksBarracksButtonQ, true, false);
    TriggerExecute(gt_TerranMakeBarracksPlaceBarracksQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksReminder_Init () {
    gt_TerranMakeBarracksReminder = TriggerCreate("gt_TerranMakeBarracksReminder_Func");
    TriggerEnable(gt_TerranMakeBarracksReminder, false);
    TriggerAddEventTimer(gt_TerranMakeBarracksReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks SCVSelection
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksSCVSelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitTypeIsSelected("SCV", gv_p01_USER) == true)) {
        if ((gv_terranMakeBarracksSCVSelected == false)) {
            gv_terranMakeBarracksSCVSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeBarracksReminder, false, false);
            }
            else {
            }
        }
        else {
            if ((gv_terranMakeBarracksBuildMenuPressed == true)) {
                gv_terranMakeBarracksBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_TerranMakeBarracksReminder, false, false);
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_SetOffscreenUnit(null);
    }
    else {
        if ((gv_terranMakeBarracksSCVSelected == true)) {
            gv_terranMakeBarracksSCVSelected = false;
            gv_terranMakeBarracksBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeBarracksReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksSCVSelection_Init () {
    gt_TerranMakeBarracksSCVSelection = TriggerCreate("gt_TerranMakeBarracksSCVSelection_Func");
    TriggerEnable(gt_TerranMakeBarracksSCVSelection, false);
    TriggerAddEventUnitSelected(gt_TerranMakeBarracksSCVSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_TerranMakeBarracksSCVSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks BuildMenu
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksBuildMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventButtonPressed() == "TerranBuild")) {
        if ((gv_terranMakeBarracksBuildMenuPressed == false)) {
            gv_terranMakeBarracksBuildMenuPressed = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeBarracksReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((EventButtonPressed() == "Cancel")) {
        if ((gv_terranMakeBarracksBuildMenuPressed == true)) {
            gv_terranMakeBarracksBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeBarracksReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksBuildMenu_Init () {
    gt_TerranMakeBarracksBuildMenu = TriggerCreate("gt_TerranMakeBarracksBuildMenu_Func");
    TriggerEnable(gt_TerranMakeBarracksBuildMenu, false);
    TriggerAddEventButtonPressed(gt_TerranMakeBarracksBuildMenu, gv_p01_USER, "TerranBuild");
    TriggerAddEventButtonPressed(gt_TerranMakeBarracksBuildMenu, gv_p01_USER, "Cancel");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks BarracksTargeting
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksBarracksTargeting_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeAbilCmd() == AbilityCommand("TerranBuild", 3)) && (EventTargetModeState() == c_targetModeStateOn)) {
        if ((gv_terranMakeBarracksTargetModeActive == false)) {
            gv_terranMakeBarracksTargetModeActive = true;
            gv_terranMakeBarracksBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_TerranMakeBarracksReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        if ((UnitIsAlive(gv_invisHelper) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Invisible3x3", 0, 0, PointFromId(35));
            gv_invisHelper = UnitLastCreated();
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 0.8, libVCMI_ge_CampaginReticleSize_Large, "Ref_Origin");
        gf_CreateLClickToPlaceTag(gv_invisHelper, 0);
        gf_SetOffscreenUnit(gv_invisHelper);
    }
    else {
        if ((EventTargetModeState() == c_targetModeStateOn)) {
            TransmissionClearAll();
        }
        else {
            if (((gv_terranMakeBarracksTargetModeActive == true) || (gv_terranMakeBarracksBuildMenuPressed == true))) {
                gv_terranMakeBarracksTargetModeActive = false;
                gv_terranMakeBarracksBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_TerranMakeBarracksReminder, false, false);
                }
                else {
                }
            }
            else {
            }
            gf_ClearAllTutorialReticles();
            gf_DestroyTutorialTextTag();
            if ((UnitIsAlive(gv_invisHelper) == true)) {
                UnitRemove(gv_invisHelper);
                gv_invisHelper = null;
            }
            else {
            }
            gf_SetOffscreenUnit(null);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksBarracksTargeting_Init () {
    gt_TerranMakeBarracksBarracksTargeting = TriggerCreate("gt_TerranMakeBarracksBarracksTargeting_Func");
    TriggerEnable(gt_TerranMakeBarracksBarracksTargeting, false);
    TriggerAddEventTargetModeUpdate(gt_TerranMakeBarracksBarracksTargeting, c_playerAny, null, c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validBuildOrder;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Barracks", gv_p01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_validBuildOrder = true;
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("SCV", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("TerranBuild", 3))) {
            lv_validBuildOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validBuildOrder == true)) {
        gv_terranMakeSupplyTargetModeActive = false;
        gv_terranMakeSupplyBuildMenuPressed = false;
        gf_StopReminderTimer();
        gf_ClearAllTutorialReticles();
        gf_DestroyTutorialTextTag();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Barracks", false);
        gf_SetOffscreenUnit(null);
        TriggerEnable(gt_TerranMakeBarracksBarracksTargeting, false);
        TriggerEnable(gt_TerranMakeBarracksBuildMenu, false);
        TriggerEnable(gt_TerranMakeBarracksSCVSelection, false);
    }
    else {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Barracks", true);
        gf_StartReminderTimer();
        TriggerEnable(gt_TerranMakeBarracksBarracksTargeting, true);
        TriggerEnable(gt_TerranMakeBarracksBuildMenu, true);
        TriggerEnable(gt_TerranMakeBarracksSCVSelection, true);
        TriggerExecute(gt_TerranMakeBarracksSCVSelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksBuildOrder_Init () {
    gt_TerranMakeBarracksBuildOrder = TriggerCreate("gt_TerranMakeBarracksBuildOrder_Func");
    TriggerEnable(gt_TerranMakeBarracksBuildOrder, false);
    TriggerAddEventUnitAbility(gt_TerranMakeBarracksBuildOrder, null, AbilityCommand("TerranBuild", 3), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_TerranMakeBarracksBuildOrder, null, AbilityCommand("BuildInProgress", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeBarracks Complete
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeBarracksComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Barracks"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_terran03Barracks = EventUnitProgressUnit();
    TriggerExecute(gt_TerranMakeBarracksCompleteObjective, true, false);
    gf_TerranMakeBarracksCleanup();
    TriggerExecute(gt_TerranMakeBarracksCompleteQ, true, true);
    TriggerExecute(gt_TerranMakeMarines, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeBarracksComplete_Init () {
    gt_TerranMakeBarracksComplete = TriggerCreate("gt_TerranMakeBarracksComplete_Func");
    TriggerEnable(gt_TerranMakeBarracksComplete, false);
    TriggerAddEventUnitConstructProgress(gt_TerranMakeBarracksComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarines_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SupplyHelperActivator, true);
    TriggerExecute(gt_TerranMakeMarinesCreateObjective, true, false);
    TriggerEnable(gt_TerranMakeMarinesSupplyHelperDone, true);
    TriggerEnable(gt_TerranMakeMarinesTrainingStarted, true);
    TriggerEnable(gt_TerranMakeMarinesReminderQ, true);
    TriggerEnable(gt_TerranMakeMarinesComplete, true);
    TriggerExecute(gt_TerranMakeMarinesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarines_Init () {
    gt_TerranMakeMarines = TriggerCreate("gt_TerranMakeMarines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerEnable(gt_TerranMakeMarinesBarracksSelection, true);
    TriggerExecute(gt_TerranMakeMarinesBarracksSelection, true, false);
    if ((UnitQueueGetProperty(gv_terran03Barracks, c_unitQueuePropertyUsed) == 0)) {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Marine", true);
    }
    else {
    }
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00073", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerEnable(gt_TerranMakeMarinesReminderController, true);
    TriggerExecute(gt_TerranMakeMarinesReminderController, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesQ_Init () {
    gt_TerranMakeMarinesQ = TriggerCreate("gt_TerranMakeMarinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00074", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesCompleteQ_Init () {
    gt_TerranMakeMarinesCompleteQ = TriggerCreate("gt_TerranMakeMarinesCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Marine", true);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00075", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesReminderQ_Init () {
    gt_TerranMakeMarinesReminderQ = TriggerCreate("gt_TerranMakeMarinesReminderQ_Func");
    TriggerEnable(gt_TerranMakeMarinesReminderQ, false);
    TriggerAddEventTimer(gt_TerranMakeMarinesReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/4CC66038"), StringToText(""), c_objectiveStateActive, true);
    gv_terranMakeMarinesObjective = ObjectiveLastCreated();
    TriggerEnable(gt_TerranMakeMarinesUpdateObjective, true);
    TriggerExecute(gt_TerranMakeMarinesUpdateObjective, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesCreateObjective_Init () {
    gt_TerranMakeMarinesCreateObjective = TriggerCreate("gt_TerranMakeMarinesCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines UpdateObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesUpdateObjective_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_marineCount;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_marineCount = UnitGroupCount(UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    TextExpressionSetToken("Param/Expression/0ABE06D5", "A", IntToText(lv_marineCount));
    ObjectiveSetName(gv_terranMakeMarinesObjective, TextExpressionAssemble("Param/Expression/0ABE06D5"));
    if ((lv_marineCount >= 5)) {
        ObjectiveSetState(gv_terranMakeMarinesObjective, c_objectiveStateCompleted);
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(2.0, c_timeGame);
        ObjectiveDestroy(gv_terranMakeMarinesObjective);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesUpdateObjective_Init () {
    gt_TerranMakeMarinesUpdateObjective = TriggerCreate("gt_TerranMakeMarinesUpdateObjective_Func");
    TriggerEnable(gt_TerranMakeMarinesUpdateObjective, false);
    TriggerAddEventUnitCreated(gt_TerranMakeMarinesUpdateObjective, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines SupplyHelperDone
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesSupplyHelperDone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetReminderTimer();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Marine", true);
    TriggerExecute(gt_TerranMakeMarinesBarracksSelection, true, false);
    TriggerExecute(gt_TerranMakeMarinesReminderController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesSupplyHelperDone_Init () {
    gt_TerranMakeMarinesSupplyHelperDone = TriggerCreate("gt_TerranMakeMarinesSupplyHelperDone_Func");
    TriggerEnable(gt_TerranMakeMarinesSupplyHelperDone, false);
    TriggerAddEventGeneric(gt_TerranMakeMarinesSupplyHelperDone, "SupplyHelperDone");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines BarracksSelection
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesBarracksSelection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitTypeIsSelected("Barracks", gv_p01_USER) == true)) {
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
    }
    else {
        gf_CreateLClickToSelectTag(gv_terran03Barracks, 80);
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_terran03Barracks), 0.8, libVCMI_ge_CampaginReticleSize_Large, "Ref_Target");
        gf_SetOffscreenUnit(gv_terran03Barracks);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesBarracksSelection_Init () {
    gt_TerranMakeMarinesBarracksSelection = TriggerCreate("gt_TerranMakeMarinesBarracksSelection_Func");
    TriggerEnable(gt_TerranMakeMarinesBarracksSelection, false);
    TriggerAddEventUnitSelected(gt_TerranMakeMarinesBarracksSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_TerranMakeMarinesBarracksSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines TrainingStarted
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesTrainingStarted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "Marine", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesTrainingStarted_Init () {
    gt_TerranMakeMarinesTrainingStarted = TriggerCreate("gt_TerranMakeMarinesTrainingStarted_Func");
    TriggerEnable(gt_TerranMakeMarinesTrainingStarted, false);
    TriggerAddEventButtonPressed(gt_TerranMakeMarinesTrainingStarted, gv_p01_USER, "Marine");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines ReminderController
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesReminderController_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitQueueItemCount(gv_terran03Barracks, 1) >= 1) || (PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) < 50))) {
        gf_StopReminderTimer();
        gf_SetOffscreenUnit(null);
        if ((TriggerIsEnabled(gt_TerranMakeMarinesBarracksSelection) == true)) {
            TriggerEnable(gt_TerranMakeMarinesBarracksSelection, false);
            gf_DestroyTutorialTextTag();
            gf_ClearAllTutorialReticles();
        }
        else {
        }
    }
    else {
        gf_StartReminderTimer();
        if ((TriggerIsEnabled(gt_TerranMakeMarinesBarracksSelection) == false)) {
            TriggerEnable(gt_TerranMakeMarinesBarracksSelection, true);
            TriggerExecute(gt_TerranMakeMarinesBarracksSelection, true, false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesReminderController_Init () {
    gt_TerranMakeMarinesReminderController = TriggerCreate("gt_TerranMakeMarinesReminderController_Func");
    TriggerEnable(gt_TerranMakeMarinesReminderController, false);
    TriggerAddEventPlayerPropChange(gt_TerranMakeMarinesReminderController, gv_p01_USER, c_playerPropMinerals);
    TriggerAddEventUnitAbility(gt_TerranMakeMarinesReminderController, null, AbilityCommand("BarracksTrain", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MakeMarines Complete
//--------------------------------------------------------------------------------------------------
bool gt_TerranMakeMarinesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Marine"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_terranMarinesUnitGroup = UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gf_TerranMakeMarinesCleanup();
    TriggerExecute(gt_TerranMakeMarinesCompleteQ, true, true);
    TriggerExecute(gt_TerranLeaveBase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMakeMarinesComplete_Init () {
    gt_TerranMakeMarinesComplete = TriggerCreate("gt_TerranMakeMarinesComplete_Func");
    TriggerEnable(gt_TerranMakeMarinesComplete, false);
    TriggerAddEventUnitCreated(gt_TerranMakeMarinesComplete, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran LeaveBase
//--------------------------------------------------------------------------------------------------
bool gt_TerranLeaveBase_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetBounds(PlayerGroupAll(), RegionFromId(8), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran", 0, 0, PointFromId(38));
    gv_terran07BridgeBeacon = UnitLastCreated();
    UnitSetState(gv_terran07BridgeBeacon, c_unitStateTargetable, false);
    UnitSetState(gv_terran07BridgeBeacon, c_unitStateSelectable, false);
    TriggerExecute(gt_TerranMissingScoutsMakeObjective, true, false);
    TriggerEnable(gt_TerranLeaveBaseReminderQ, true);
    TriggerEnable(gt_TerranLeaveBaseComplete, true);
    TriggerExecute(gt_TerranLeaveBaseQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranLeaveBase_Init () {
    gt_TerranLeaveBase = TriggerCreate("gt_TerranLeaveBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran LeaveBase Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranLeaveBaseQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerEnable(gt_TerranLeaveBaseMarineSelection, true);
    TriggerExecute(gt_TerranLeaveBaseMarineSelection, false, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranLeaveBaseQ_Init () {
    gt_TerranLeaveBaseQ = TriggerCreate("gt_TerranLeaveBaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran LeaveBase Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranLeaveBaseCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    PlayerCreateEffectPoint(gv_p01_USER, "ScannerSweep", PointFromId(47));
    CameraPan(gv_p01_USER, Point(((PointGetX(PointFromId(38)) + PointGetX(PointFromId(47))) / 2.0), ((PointGetY(PointFromId(38)) + PointGetY(PointFromId(47))) / 2.0)), 2.0, -1, 10.0, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00077", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitCreate(1, "ZerglingBurrowed", 0, gv_p02_ENEMY, PointFromId(49), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_terranZerglingGroup1, UnitLastCreated());
    UnitCreate(1, "ZerglingBurrowed", 0, gv_p02_ENEMY, PointFromId(50), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_terranZerglingGroup1, UnitLastCreated());
    UnitCreate(1, "ZerglingBurrowed", 0, gv_p02_ENEMY, PointFromId(51), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_terranZerglingGroup1, UnitLastCreated());
    UnitCreate(1, "ZerglingBurrowed", 0, gv_p02_ENEMY, PointFromId(52), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_terranZerglingGroup1, UnitLastCreated());
    UnitCreate(1, "ZerglingBurrowed", 0, gv_p02_ENEMY, PointFromId(53), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_terranZerglingGroup2, UnitLastCreated());
    UnitCreate(1, "ZerglingBurrowed", 0, gv_p02_ENEMY, PointFromId(65), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_terranZerglingGroup2, UnitLastCreated());
    UnitCreate(1, "ZerglingBurrowed", 0, gv_p02_ENEMY, PointFromId(66), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_terranZerglingGroup2, UnitLastCreated());
    UnitCreate(1, "ZerglingBurrowed", 0, gv_p02_ENEMY, PointFromId(68), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_terranZerglingGroup2, UnitLastCreated());
    UnitCreate(1, "ZerglingBurrowed", 0, gv_p02_ENEMY, PointFromId(70), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_terranZerglingGroup2, UnitLastCreated());
    Wait(3.0, c_timeGame);
    UnitGroupIssueOrder(gv_terranZerglingGroup1, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_terranZerglingGroup2, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    UnitIssueOrder(UnitFromId(54), Order(AbilityCommand("AiurTempleStoneGateDiagonalULBRRFLowered", 0)), c_orderQueueReplace);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranLeaveBaseCompleteQ_Init () {
    gt_TerranLeaveBaseCompleteQ = TriggerCreate("gt_TerranLeaveBaseCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran LeaveBase Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranLeaveBaseReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00079", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranLeaveBaseReminderQ_Init () {
    gt_TerranLeaveBaseReminderQ = TriggerCreate("gt_TerranLeaveBaseReminderQ_Func");
    TriggerEnable(gt_TerranLeaveBaseReminderQ, false);
    TriggerAddEventTimer(gt_TerranLeaveBaseReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MissingScouts MakeObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMissingScoutsMakeObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/3B33CE39"), StringToText(""), c_objectiveStateActive, true);
    gv_terranMissingScoutsObjective = ObjectiveLastCreated();
    TriggerEnable(gt_TerranMissingScoutsCompleteObjective, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMissingScoutsMakeObjective_Init () {
    gt_TerranMissingScoutsMakeObjective = TriggerCreate("gt_TerranMissingScoutsMakeObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran LeaveBase MarineSelection
//--------------------------------------------------------------------------------------------------
bool gt_TerranLeaveBaseMarineSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validOrder;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilter("Marine", c_playerAny, UnitGroupSelected(gv_p01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5)) {
        gf_ClearAllTutorialReticles();
        gf_DestroyTutorialTextTag();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        UnitGroupLoopBegin(UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("move", 0)) && (OrderGetTargetType(UnitOrder(UnitGroupLoopCurrent(), 0)) == c_orderTargetPoint) && (DistanceBetweenPoints(PointFromId(38), OrderGetTargetPoint(UnitOrder(UnitGroupLoopCurrent(), 0))) < 2.0)) {
                lv_validOrder = true;
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if ((lv_validOrder == true)) {
            gf_StopReminderTimer();
            gf_DestroyTutorialTextTag();
        }
        else {
            gf_StartReminderTimer();
            gf_CreateRClickToMoveTag(gv_terran07BridgeBeacon, 80);
        }
        gf_SetOffscreenPoint(PointFromId(38));
    }
    else {
        gf_DestroyTutorialTextTag();
        if ((UnitGroupCount(UnitGroup("Marine", gv_p01_USER, RegionCircle(UnitGroupCenterOfGroup(gv_terranMarinesUnitGroup), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= UnitGroupCount(gv_terranMarinesUnitGroup, c_unitCountAlive))) {
            if ((UnitIsAlive(gv_invisHelper) == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTutorialHelper", c_unitCreateIgnorePlacement, 0, PointWithOffset(UnitGroupCenterOfGroup(gv_terranMarinesUnitGroup), 0.0, 0.3));
                gv_invisHelper = UnitLastCreated();
            }
            else {
                UnitSetPosition(gv_invisHelper, PointWithOffset(UnitGroupCenterOfGroup(gv_terranMarinesUnitGroup), 0.0, 0.3), true);
            }
            gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 1.2, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
            gf_CreateDragSelectTag(gv_invisHelper, 140);
            UnitGroupLoopBegin(UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
        }
        else {
            UnitGroupLoopBegin(UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitIsSelected(UnitGroupLoopCurrent(), gv_p01_USER) == true)) {
                    gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
                }
                else {
                    gf_CreateTutorialReticleOnUnit(UnitGroupLoopCurrent(), 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
                }
            }
            UnitGroupLoopEnd();
            if ((UnitIsAlive(gv_invisHelper) == true)) {
                UnitRemove(gv_invisHelper);
                gv_invisHelper = null;
            }
            else {
            }
        }
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(gv_terranMarinesUnitGroup));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranLeaveBaseMarineSelection_Init () {
    gt_TerranLeaveBaseMarineSelection = TriggerCreate("gt_TerranLeaveBaseMarineSelection_Func");
    TriggerEnable(gt_TerranLeaveBaseMarineSelection, false);
    TriggerAddEventTimePeriodic(gt_TerranLeaveBaseMarineSelection, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran LeaveBase Complete
//--------------------------------------------------------------------------------------------------
bool gt_TerranLeaveBaseComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Marine", gv_p01_USER, RegionCircle(PointFromId(38), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TerranLeaveBaseCleanup();
    TriggerExecute(gt_TerranLeaveBaseCompleteQ, true, true);
    TriggerExecute(gt_TerranFindScouts, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranLeaveBaseComplete_Init () {
    gt_TerranLeaveBaseComplete = TriggerCreate("gt_TerranLeaveBaseComplete_Func");
    TriggerEnable(gt_TerranLeaveBaseComplete, false);
    TriggerAddEventUnitRegion(gt_TerranLeaveBaseComplete, null, RegionCircle(PointFromId(38), 2.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScouts_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran", 0, gv_p01_USER, PointFromId(39));
    gv_terranFindScoutsBeacon = UnitLastCreated();
    UnitSetState(gv_terranFindScoutsBeacon, c_unitStateTargetable, false);
    UnitSetState(gv_terranFindScoutsBeacon, c_unitStateSelectable, false);
    TriggerEnable(gt_TerranFindScoutsRevealer1, true);
    TriggerEnable(gt_TerranFindScoutsRevealer2, true);
    TriggerEnable(gt_TerranFindScoutsMarineDeath, true);
    TriggerEnable(gt_TerranFindScoutsReminderQ, true);
    TriggerEnable(gt_TerranFindScoutsComplete, true);
    TriggerExecute(gt_TerranFindScoutsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScouts_Init () {
    gt_TerranFindScouts = TriggerCreate("gt_TerranFindScouts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScoutsQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerEnable(gt_TerranFindScoutsAttackOrder, true);
    TriggerExecute(gt_TerranFindScoutsAttackOrder, false, false);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00080", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScoutsQ_Init () {
    gt_TerranFindScoutsQ = TriggerCreate("gt_TerranFindScoutsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts Wipe Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScoutsWipeQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Marine", 0, gv_p01_USER, PointFromId(38));
    gv_terranMarinesUnitGroup = UnitLastCreatedGroup();
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(38), UnitLastCreatedGroup(), true, gv_p01_USER);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00082", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    CameraPan(gv_p01_USER, PointFromId(38), 2.0, -1, 10.0, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScoutsWipeQ_Init () {
    gt_TerranFindScoutsWipeQ = TriggerCreate("gt_TerranFindScoutsWipeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScoutsCompleteQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_ruinsRevealer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00083", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00084", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScoutsCompleteQ_Init () {
    gt_TerranFindScoutsCompleteQ = TriggerCreate("gt_TerranFindScoutsCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScoutsReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00085", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScoutsReminderQ_Init () {
    gt_TerranFindScoutsReminderQ = TriggerCreate("gt_TerranFindScoutsReminderQ_Func");
    TriggerEnable(gt_TerranFindScoutsReminderQ, false);
    TriggerAddEventTimer(gt_TerranFindScoutsReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran MissingScouts CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_TerranMissingScoutsCompleteObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_terranMissingScoutsObjective, c_objectiveStateCompleted);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    ObjectiveDestroy(gv_terranMissingScoutsObjective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMissingScoutsCompleteObjective_Init () {
    gt_TerranMissingScoutsCompleteObjective = TriggerCreate("gt_TerranMissingScoutsCompleteObjective_Func");
    TriggerEnable(gt_TerranMissingScoutsCompleteObjective, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts Revealer1
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScoutsRevealer1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCount(null, gv_p01_USER, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) >= 1)) {
        if ((gv_terranFindScoutsRevealer1 == null)) {
            VisRevealerCreate(gv_p01_USER, RegionFromId(40));
            gv_terranFindScoutsRevealer1 = VisRevealerLastCreated();
        }
        else {
        }
    }
    else {
        if ((gv_terranFindScoutsRevealer1 != null)) {
            VisRevealerDestroy(gv_terranFindScoutsRevealer1);
            gv_terranFindScoutsRevealer1 = null;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScoutsRevealer1_Init () {
    gt_TerranFindScoutsRevealer1 = TriggerCreate("gt_TerranFindScoutsRevealer1_Func");
    TriggerEnable(gt_TerranFindScoutsRevealer1, false);
    TriggerAddEventUnitRegion(gt_TerranFindScoutsRevealer1, null, RegionFromId(40), true);
    TriggerAddEventUnitRegion(gt_TerranFindScoutsRevealer1, null, RegionFromId(40), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts Revealer2
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScoutsRevealer2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCount(null, gv_p01_USER, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) >= 1)) {
        if ((gv_terranFindScoutsRevealer2 == null)) {
            VisRevealerCreate(gv_p01_USER, RegionFromId(41));
            gv_terranFindScoutsRevealer2 = VisRevealerLastCreated();
        }
        else {
        }
    }
    else {
        if ((gv_terranFindScoutsRevealer2 != null)) {
            VisRevealerDestroy(gv_terranFindScoutsRevealer2);
            gv_terranFindScoutsRevealer2 = null;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScoutsRevealer2_Init () {
    gt_TerranFindScoutsRevealer2 = TriggerCreate("gt_TerranFindScoutsRevealer2_Func");
    TriggerEnable(gt_TerranFindScoutsRevealer2, false);
    TriggerAddEventUnitRegion(gt_TerranFindScoutsRevealer2, null, RegionFromId(41), true);
    TriggerAddEventUnitRegion(gt_TerranFindScoutsRevealer2, null, RegionFromId(41), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts AttackOrder
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScoutsAttackOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validOrder;
    point lv_attackBeaconLocation;
    unitgroup lv_currentMarineGroup;

    // Variable Initialization
    lv_currentMarineGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMarineGroup = UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(UnitGroupFilter("Marine", c_playerAny, UnitGroupSelected(gv_p01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        gf_ClearAllTutorialReticles();
        gf_DestroyTutorialTextTag();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        if ((UnitGroupCount(gv_terranZerglingGroup1, c_unitCountAlive) > 0)) {
            lv_attackBeaconLocation = PointFromId(30);
            gf_SetOffscreenPoint(lv_attackBeaconLocation);
        }
        else if ((UnitGroupCount(gv_terranZerglingGroup2, c_unitCountAlive) > 0)) {
            lv_attackBeaconLocation = PointFromId(31);
            gf_SetOffscreenPoint(lv_attackBeaconLocation);
        }
        else if (true) {
            lv_validOrder = true;
            gf_SetOffscreenPoint(PointFromId(39));
        }
        UnitGroupLoopBegin(lv_currentMarineGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((lv_attackBeaconLocation != null) && (((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("attack", 0)) && (OrderGetTargetType(UnitOrder(UnitGroupLoopCurrent(), 0)) == c_orderTargetUnit) && (UnitGetOwner(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0))) != gv_p01_USER)) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("attack", 0)) && (OrderGetTargetType(UnitOrder(UnitGroupLoopCurrent(), 0)) == c_orderTargetPoint) && (DistanceBetweenPoints(lv_attackBeaconLocation, OrderGetTargetPoint(UnitOrder(UnitGroupLoopCurrent(), 0))) < 4.0)) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("attack", 0)) && (OrderGetTargetType(UnitOrder(UnitGroupLoopCurrent(), 0)) == c_orderTargetPoint) && (PointGetX(OrderGetTargetPoint(UnitOrder(UnitGroupLoopCurrent(), 0))) > PointGetX(lv_attackBeaconLocation)) && (PointGetY(OrderGetTargetPoint(UnitOrder(UnitGroupLoopCurrent(), 0))) > PointGetY(lv_attackBeaconLocation))))) {
                lv_validOrder = true;
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        if ((lv_validOrder == true)) {
            if ((TriggerActiveCount(gt_TerranFindScoutsQ) == 0)) {
                gf_StopReminderTimer();
            }
            else {
            }
            if ((UnitIsAlive(gv_terranAttackBeacon) == true)) {
                PingDestroy(gv_ping);
                UnitKill(gv_terranAttackBeacon);
                gv_terranAttackBeacon = null;
            }
            else {
            }
            gf_DestroyTutorialTextTag();
        }
        else {
            if ((TriggerActiveCount(gt_TerranFindScoutsQ) == 0)) {
                gf_StartReminderTimer();
            }
            else {
            }
            if ((UnitIsAlive(gv_terranAttackBeacon) == false)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", lv_attackBeaconLocation, Color(100.00, 0.00, 0.00), 0.0, 270.0);
                gv_ping = PingLastCreated();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialAttackBeacon", 0, gv_p01_USER, lv_attackBeaconLocation);
                gv_terranAttackBeacon = UnitLastCreated();
            }
            else {
            }
            gf_CreateAttackMoveTag(gv_terranAttackBeacon, 90);
        }
    }
    else {
        gf_DestroyTutorialTextTag();
        if ((UnitIsAlive(gv_terranAttackBeacon) == true)) {
            PingDestroy(gv_ping);
            UnitKill(gv_terranAttackBeacon);
            gv_terranAttackBeacon = null;
        }
        else {
        }
        if ((UnitGroupCount(gv_terranMarinesUnitGroup, c_unitCountAlive) > 1) && (UnitGroupCount(UnitGroup("Marine", gv_p01_USER, RegionCircle(UnitGroupCenterOfGroup(gv_terranMarinesUnitGroup), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= UnitGroupCount(gv_terranMarinesUnitGroup, c_unitCountAlive))) {
            if ((UnitIsAlive(gv_invisHelper) == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTutorialHelper", c_unitCreateIgnorePlacement, 0, PointWithOffset(UnitGroupCenterOfGroup(gv_terranMarinesUnitGroup), 0.0, 0.3));
                gv_invisHelper = UnitLastCreated();
            }
            else {
                UnitSetPosition(gv_invisHelper, PointWithOffset(UnitGroupCenterOfGroup(gv_terranMarinesUnitGroup), 0.0, 0.3), true);
            }
            gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 1.2, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
            gf_CreateDragSelectTag(gv_invisHelper, 140);
            UnitGroupLoopBegin(UnitGroup("Marine", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            gf_SetOffscreenPoint(UnitGroupCenterOfGroup(gv_terranMarinesUnitGroup));
        }
        else {
            UnitGroupLoopBegin(lv_currentMarineGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitIsSelected(UnitGroupLoopCurrent(), gv_p01_USER) == true)) {
                    gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
                }
                else {
                    gf_CreateTutorialReticleOnUnit(UnitGroupLoopCurrent(), 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
                }
            }
            UnitGroupLoopEnd();
            if ((UnitIsAlive(gv_invisHelper) == true)) {
                UnitRemove(gv_invisHelper);
                gv_invisHelper = null;
            }
            else {
            }
            gf_SetOffscreenPoint(UnitGroupCenterOfGroup(lv_currentMarineGroup));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScoutsAttackOrder_Init () {
    gt_TerranFindScoutsAttackOrder = TriggerCreate("gt_TerranFindScoutsAttackOrder_Func");
    TriggerEnable(gt_TerranFindScoutsAttackOrder, false);
    TriggerAddEventTimePeriodic(gt_TerranFindScoutsAttackOrder, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts MarineDeath
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScoutsMarineDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_terranMarinesUnitGroup, EventUnit());
    if ((UnitGroupCount(UnitGroup("Marine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerExecute(gt_TerranFindScoutsWipeQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScoutsMarineDeath_Init () {
    gt_TerranFindScoutsMarineDeath = TriggerCreate("gt_TerranFindScoutsMarineDeath_Func");
    TriggerEnable(gt_TerranFindScoutsMarineDeath, false);
    TriggerAddEventUnitDied(gt_TerranFindScoutsMarineDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran FindScouts Complete
//--------------------------------------------------------------------------------------------------
bool gt_TerranFindScoutsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Marine", gv_p01_USER, RegionCircle(PointFromId(39), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(gv_terranZerglingGroup1, c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_terranZerglingGroup2, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TerranFindScoutsCleanup();
    TriggerExecute(gt_TerranMissingScoutsCompleteObjective, true, false);
    TriggerExecute(gt_TerranFindScoutsCompleteQ, true, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_TerranCleanup, true, true);
    if ((gv_tutorialProgress < 2)) {
        gv_tutorialProgress = 2;
        BankValueSetFromInt(gv_tutorialBankSave, "General", "Progress", gv_tutorialProgress);
        BankSave(gv_tutorialBankSave);
    }
    else {
    }
    gv_selectedStage = 3;
    gf_UpdateVictoryScreen();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    DialogSetVisible(gv_victoryUI, PlayerGroupAll(), true);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranFindScoutsComplete_Init () {
    gt_TerranFindScoutsComplete = TriggerCreate("gt_TerranFindScoutsComplete_Func");
    TriggerEnable(gt_TerranFindScoutsComplete, false);
    TriggerAddEventUnitRegion(gt_TerranFindScoutsComplete, null, RegionCircle(PointFromId(39), 2.0), true);
    TriggerAddEventUnitDied(gt_TerranFindScoutsComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Intro Cinematic Q
//--------------------------------------------------------------------------------------------------
bool gt_TerranIntroCinematicQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_TerranIntroCinematicSetup, true, true);
    TriggerExecute(gt_TerranIntroCinematic, true, true);
    TriggerExecute(gt_TerranIntroCinematicEnd, true, true);
    TriggerExecute(gt_TerranIntroCinematicCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIntroCinematicQ_Init () {
    gt_TerranIntroCinematicQ = TriggerCreate("gt_TerranIntroCinematicQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Intro Cinematic Setup
//--------------------------------------------------------------------------------------------------
bool gt_TerranIntroCinematicSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_p01_USER, RegionFromId(10));
    gv_startingAreaRevealer = VisRevealerLastCreated();
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits2, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits2 = UnitGroupEmpty();
    gv_cinematicTempUnits2 = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits2);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "AiurTempleBridgeNE10Out") && (UnitGetType(UnitGroupLoopCurrent()) != "AiurTempleStoneGateDiagonalULBRRF")) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -6.5, 3.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -5.5, 5.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -4.5, 6.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -1.5, 6.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenterFlying", 0, gv_p01_USER, PointWithOffset(PointFromId(26), -4.0, 6.0));
    gv_terranCommandCenter = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleRockEx14x4", c_unitCreateIgnorePlacement, 0, PointFromId(111));
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    gv_protossBaseRocks = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleRockEx16x6", c_unitCreateIgnorePlacement, 0, PointFromId(60));
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    gv_zergBaseRocks = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIntroCinematicSetup_Init () {
    gt_TerranIntroCinematicSetup = TriggerCreate("gt_TerranIntroCinematicSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_TerranIntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(gv_p01_USER, PointWithOffset(PointFromId(26), -1.0, -1.5), 0.0, -1, 10.0, false);
    GameSetLighting("AiurTempleJungle", 0.0);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted2 = false;
    FogSetEnabled(false);
    CinematicFade(true, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    CutsceneCreateNoPosition("Cutscenes\\Cutscene_TutorialTerranIntro.SC2Cutscene", PlayerGroupAll(), true);
    gv_terranCinematicCutscene = CutsceneLastCreated();
    Wait(4.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00043", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00161", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_terranCommandCenter, OrderTargetingPoint(AbilityCommand("CommandCenterLand", 0), PointFromId(26)), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00044", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00045", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    WaitForCutsceneToEnd(CutsceneLastCreated());
    gv_cinematicCompleted2 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIntroCinematic_Init () {
    gt_TerranIntroCinematic = TriggerCreate("gt_TerranIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_TerranIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted2 == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIntroCinematicEnd_Init () {
    gt_TerranIntroCinematicEnd = TriggerCreate("gt_TerranIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Intro Cinematic Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_TerranIntroCinematicCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    UnitGroupLoopBegin(gv_cinematicTempUnits2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    if ((gv_cinematicCompleted2 == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        FogSetEnabled(true);
        GameSetLighting("AiurTempleJungle", 0.0);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
        UnitRemove(gv_terranCommandCenter);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", 0, gv_p01_USER, PointFromId(26));
        gv_terranCommandCenter = UnitLastCreated();
        lv_fadeDuration = 1.0;
        CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        Wait(0.0625, c_timeGame);
        CutsceneStop(gv_terranCinematicCutscene);
        CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
        Wait(0.0625, c_timeGame);
        libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(544), lv_fadeDuration);
    }
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIntroCinematicCleanup_Init () {
    gt_TerranIntroCinematicCleanup = TriggerCreate("gt_TerranIntroCinematicCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Intro Cinematic Cutscene Helper
//--------------------------------------------------------------------------------------------------
bool gt_TerranIntroCinematicCutsceneHelper_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("AiurTempleJungle", 0.0);
    FogSetEnabled(true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranIntroCinematicCutsceneHelper_Init () {
    gt_TerranIntroCinematicCutsceneHelper = TriggerCreate("gt_TerranIntroCinematicCutsceneHelper_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_TerranIntroCinematicCutsceneHelper, c_cutsceneNone, "TerranGameView");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_ZergCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ZergFailstate, false);
    if ((TriggerIsEnabled(gt_FriendlyFireHelperUnpauser) == true)) {
        TriggerExecute(gt_FriendlyFireHelperUnpauser, false, false);
    }
    else {
    }
    gf_ZergMakeOverlordCleanup();
    gf_ZergMakeDronesCleanup();
    gf_ZergMakeSpawningPoolCleanup();
    gf_ZergMakeZerglingsCleanup();
    gf_ZergMakeExtractorCleanup();
    gf_ZergTransferDronesCleanup();
    gf_ZergMakeRoachWarrenCleanup();
    gf_ZergMakeRoachesCleanup();
    gf_ZergSelectArmyCleanup();
    gf_ZergAttackCleanup();
    gf_ZergAttackBaseCleanup();
    UnitRemove(gv_protossBaseRocks);
    UnitRemove(gv_zergBaseRocks);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ZergBuildingDies6") == true)) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies6", 1);
        }
        else {
        }
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ZergBuildingDies9") == true)) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies9", 1);
        }
        else {
        }
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_ENEMY, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    CameraSetBounds(PlayerGroupAll(), RegionEntireMap(), true);
    VisRevealerDestroy(gv_startingAreaRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergCleanup_Init () {
    gt_ZergCleanup = TriggerCreate("gt_ZergCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Initialization
//--------------------------------------------------------------------------------------------------
bool gt_ZergInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogPanel;

    // Variable Initialization
    lv_dialogPanel = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentStage = 3;
    TriggerEnable(gt_FriendlyFireHelper, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    PlayerSetColorIndex(gv_p01_USER, 1, true);
    PlayerSetColorIndex(gv_p02_ENEMY, 2, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Aiur_Jungle_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("TrainQueen", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LairResearch", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LairResearch", 2), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("UpgradeToLair", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("SpawningPoolResearch", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("SpawningPoolResearch", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("RoachWarrenResearch", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("RoachWarrenResearch", 2), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 2), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 3), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 4), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 13), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 10), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 14), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 15), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 5), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 8), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 6), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 9), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 7), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("MorphZerglingToBaneling", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("MorphToOverseer", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("GenerateCreep", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("OverlordTransport", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("OverlordTransport", 2), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BurrowDroneDown", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BurrowZerglingDown", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("BurrowRoachDown", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 2), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrainSwarm", 27), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 9), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 3), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 10), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 6), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 14), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 4), false);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TriggerEnable(gt_ZergFailstate, true);
    TriggerExecute(gt_ZergIntroCinematicQ, true, true);
    TriggerExecute(gt_ZergMakeOverlord, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergInitialization_Init () {
    gt_ZergInitialization = TriggerCreate("gt_ZergInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Failstate
//--------------------------------------------------------------------------------------------------
bool gt_ZergFailstate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(gv_p01_USER, c_gameOverDefeat, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergFailstate_Init () {
    gt_ZergFailstate = TriggerCreate("gt_ZergFailstate_Func");
    TriggerEnable(gt_ZergFailstate, false);
    TriggerAddEventUnitDied(gt_ZergFailstate, UnitRefFromVariable("gv_zergHatchery"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlord_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_p01_USER, "LarvaCap1", 1);
    TriggerEnable(gt_ZergMakeOverlordComplete, true);
    TriggerEnable(gt_ZergMakeOverlordMorphStarted, true);
    TriggerEnable(gt_ZergMakeOverlordReminder, true);
    TriggerExecute(gt_ZergMakeOverlordQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlord_Init () {
    gt_ZergMakeOverlord = TriggerCreate("gt_ZergMakeOverlord_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_zergHatchery, "HaloStart");
    libNtve_gf_SendActorMessageToUnit(gv_zergHatchery, "SetTintColor {255,255,255 2.000000}");
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00169", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SendActorMessageToUnit(gv_zergHatchery, "HaloStop");
    libNtve_gf_SendActorMessageToUnit(gv_zergHatchery, "SetTintColor 255,255,255");
    UnitSetState(gv_zergHatchery, c_unitStateTooltipable, false);
    libVCMI_gf_SpawnLarvaForHatchery(gv_zergHatchery, 1);
    UnitGroupLoopBegin(UnitGroup("Larva", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetTintColor {255,255,255 2.000000}");
    }
    UnitGroupLoopEnd();
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00170", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitSetState(gv_zergHatchery, c_unitStateTooltipable, true);
    UnitGroupLoopBegin(UnitGroup("Larva", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "HaloStop");
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetTintColor 255,255,255");
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ZergMakeOverlordCreateObjective, true, false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 2), true);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00171", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Overlord", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    TriggerEnable(gt_ZergMakeOverlordHatcherySelection, true);
    TriggerExecute(gt_ZergMakeOverlordHatcherySelection, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordQ_Init () {
    gt_ZergMakeOverlordQ = TriggerCreate("gt_ZergMakeOverlordQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord SelectLarva Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordSelectLarvaQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeOverlordLarvaSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00185", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordSelectLarvaQ_Init () {
    gt_ZergMakeOverlordSelectLarvaQ = TriggerCreate("gt_ZergMakeOverlordSelectLarvaQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord ClickOverlord Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordClickOverlordQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeOverlordLarvaSelected == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00186", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordClickOverlordQ_Init () {
    gt_ZergMakeOverlordClickOverlordQ = TriggerCreate("gt_ZergMakeOverlordClickOverlordQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord MorphStarted Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordMorphStartedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_DisplayScreenImage(12, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 212, 134, c_anchorTopRight, 2, -34);
    libNtve_gf_PulseScreenImage(12, 1.75, 100.0, 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00175", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    libNtve_gf_StopPulsingScreenImage(12);
    libNtve_gf_HideScreenImage(false, 12);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordMorphStartedQ_Init () {
    gt_ZergMakeOverlordMorphStartedQ = TriggerCreate("gt_ZergMakeOverlordMorphStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordCompleteQ_Init () {
    gt_ZergMakeOverlordCompleteQ = TriggerCreate("gt_ZergMakeOverlordCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/65656677"), StringToText(""), c_objectiveStateActive, true);
    gv_zergMakeOverlordObjective = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordCreateObjective_Init () {
    gt_ZergMakeOverlordCreateObjective = TriggerCreate("gt_ZergMakeOverlordCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordCompleteObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_zergMakeOverlordObjective, c_objectiveStateCompleted);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_zergMakeOverlordObjective);
    gv_zergMakeOverlordObjective = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordCompleteObjective_Init () {
    gt_ZergMakeOverlordCompleteObjective = TriggerCreate("gt_ZergMakeOverlordCompleteObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerExecute(gt_ZergMakeOverlordSelectLarvaQ, true, false);
    TriggerExecute(gt_ZergMakeOverlordClickOverlordQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordReminder_Init () {
    gt_ZergMakeOverlordReminder = TriggerCreate("gt_ZergMakeOverlordReminder_Func");
    TriggerEnable(gt_ZergMakeOverlordReminder, false);
    TriggerAddEventTimer(gt_ZergMakeOverlordReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord HatcherySelection
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordHatcherySelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_test;

    // Variable Initialization
    lv_test = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_UnitTypeIsSelected("Hatchery", gv_p01_USER) == true) || (libNtve_gf_UnitTypeIsSelected("Larva", gv_p01_USER) == true))) {
        UnitSetState(gv_zergHatchery, c_unitStateStatusBar, true);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
    }
    else {
        UnitSetState(gv_zergHatchery, c_unitStateStatusBar, false);
        gf_CreateLClickToSelectTag(gv_zergHatchery, 90);
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_zergHatchery), 1.0, libVCMI_ge_CampaginReticleSize_Large, "Ref_Target 01");
        gf_SetOffscreenUnit(gv_zergHatchery);
    }
    if ((libNtve_gf_UnitTypeIsSelected("Larva", gv_p01_USER) == true)) {
        if ((gv_zergMakeOverlordLarvaSelected == false)) {
            gv_zergMakeOverlordLarvaSelected = true;
            if ((gv_reminderPlayed == true)) {
                gf_SilenceQ();
                TriggerExecute(gt_ZergMakeOverlordSelectLarvaQ, true, false);
                TriggerExecute(gt_ZergMakeOverlordClickOverlordQ, true, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
        if ((gv_zergMakeOverlordLarvaSelected == true)) {
            gv_zergMakeOverlordLarvaSelected = false;
            if ((gv_reminderPlayed == true)) {
                gf_SilenceQ();
                TriggerExecute(gt_ZergMakeOverlordSelectLarvaQ, true, false);
                TriggerExecute(gt_ZergMakeOverlordClickOverlordQ, true, false);
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordHatcherySelection_Init () {
    gt_ZergMakeOverlordHatcherySelection = TriggerCreate("gt_ZergMakeOverlordHatcherySelection_Func");
    TriggerEnable(gt_ZergMakeOverlordHatcherySelection, false);
    TriggerAddEventUnitSelected(gt_ZergMakeOverlordHatcherySelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ZergMakeOverlordHatcherySelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord MorphStarted
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordMorphStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_morphInProgress;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Egg", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(UnitGroupLoopCurrent(), 1, 1) == "Overlord")) {
            lv_morphInProgress = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_morphInProgress == true)) {
        gf_StopReminderTimer();
        TriggerEnable(gt_ZergMakeOverlordHatcherySelection, false);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Overlord", false);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
        gf_SilenceQ();
        TriggerStop(gt_ZergMakeOverlordQ);
        TriggerExecute(gt_ZergMakeOverlordMorphStartedQ, true, true);
    }
    else {
        gf_StartReminderTimer();
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Overlord", true);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
        TriggerEnable(gt_ZergMakeOverlordHatcherySelection, true);
        TriggerExecute(gt_ZergMakeOverlordHatcherySelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordMorphStarted_Init () {
    gt_ZergMakeOverlordMorphStarted = TriggerCreate("gt_ZergMakeOverlordMorphStarted_Func");
    TriggerEnable(gt_ZergMakeOverlordMorphStarted, false);
    TriggerAddEventUnitAbility(gt_ZergMakeOverlordMorphStarted, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeOverlord Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeOverlordComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Overlord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ZergMakeOverlordCleanup();
    TriggerExecute(gt_ZergMakeOverlordCompleteObjective, true, false);
    TriggerExecute(gt_ZergMakeOverlordCompleteQ, true, true);
    TriggerExecute(gt_ZergMakeDrones, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeOverlordComplete_Init () {
    gt_ZergMakeOverlordComplete = TriggerCreate("gt_ZergMakeOverlordComplete_Func");
    TriggerEnable(gt_ZergMakeOverlordComplete, false);
    TriggerAddEventUnitCreated(gt_ZergMakeOverlordComplete, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDrones_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_p01_USER, "LarvaCap1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_p01_USER, "LarvaCap2", 1);
    libVCMI_gf_SpawnLarvaForHatchery(gv_zergHatchery, 2);
    TriggerExecute(gt_ZergMakeDronesCreateObjective, true, false);
    TriggerEnable(gt_ZergMakeDronesReminder, true);
    TriggerEnable(gt_ZergMakeDronesFirstMorph, true);
    TriggerEnable(gt_ZergMakeDronesComplete, true);
    TriggerExecute(gt_ZergMakeDronesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDrones_Init () {
    gt_ZergMakeDrones = TriggerCreate("gt_ZergMakeDrones_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00094", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 0), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Drone", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    TriggerEnable(gt_ZergMakeDronesReminderController, true);
    TriggerEnable(gt_ZergMakeDronesHatcherySelection, true);
    TriggerExecute(gt_ZergMakeDronesHatcherySelection, true, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesQ_Init () {
    gt_ZergMakeDronesQ = TriggerCreate("gt_ZergMakeDronesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones MorphStarted Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesMorphStartedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00172", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesMorphStartedQ_Init () {
    gt_ZergMakeDronesMorphStartedQ = TriggerCreate("gt_ZergMakeDronesMorphStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesCompleteQ_Init () {
    gt_ZergMakeDronesCompleteQ = TriggerCreate("gt_ZergMakeDronesCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones SelectLarva Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesSelectLarvaQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeDronesLarvaSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00187", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesSelectLarvaQ_Init () {
    gt_ZergMakeDronesSelectLarvaQ = TriggerCreate("gt_ZergMakeDronesSelectLarvaQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones ClickDrone Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesClickDroneQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeDronesLarvaSelected == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00188", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesClickDroneQ_Init () {
    gt_ZergMakeDronesClickDroneQ = TriggerCreate("gt_ZergMakeDronesClickDroneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones TwoLarvaSelected Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesTwoLarvaSelectedQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_zergMakeDronesTwoLarvaSelectPlayed = true;
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00189", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesTwoLarvaSelectedQ_Init () {
    gt_ZergMakeDronesTwoLarvaSelectedQ = TriggerCreate("gt_ZergMakeDronesTwoLarvaSelectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/4566D61A"), StringToText(""), c_objectiveStateActive, true);
    gv_zergDroneObjective = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesCreateObjective_Init () {
    gt_ZergMakeDronesCreateObjective = TriggerCreate("gt_ZergMakeDronesCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones UpdateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesUpdateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/3512FA52", "A", IntToText(gv_zergMakeUnitCount));
    ObjectiveSetName(gv_zergDroneObjective, TextExpressionAssemble("Param/Expression/3512FA52"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesUpdateObjective_Init () {
    gt_ZergMakeDronesUpdateObjective = TriggerCreate("gt_ZergMakeDronesUpdateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesCompleteObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/5243C422", "A", IntToText(gv_zergMakeUnitCount));
    ObjectiveSetName(gv_zergDroneObjective, TextExpressionAssemble("Param/Expression/5243C422"));
    ObjectiveSetState(gv_zergDroneObjective, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_zergDroneObjective);
    gv_zergDroneObjective = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesCompleteObjective_Init () {
    gt_ZergMakeDronesCompleteObjective = TriggerCreate("gt_ZergMakeDronesCompleteObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_morphedCount;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_morphedCount = gv_zergMakeUnitCount;
    UnitGroupLoopBegin(UnitGroup("Egg", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(UnitGroupLoopCurrent(), 1, 1) == "Drone")) {
            lv_morphedCount += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_reminderPlayed = true;
    TriggerEnable(gt_ZergMakeDronesFirstMorph, true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Drone", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    if ((UnitGroupCount(UnitGroupFilter("Larva", gv_p01_USER, UnitGroupSelected(gv_p01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2) && (lv_morphedCount == 0)) {
        TriggerExecute(gt_ZergMakeDronesTwoLarvaSelectedQ, true, false);
    }
    else {
        TriggerExecute(gt_ZergMakeDronesClickDroneQ, true, false);
    }
    TriggerExecute(gt_ZergMakeDronesSelectLarvaQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesReminder_Init () {
    gt_ZergMakeDronesReminder = TriggerCreate("gt_ZergMakeDronesReminder_Func");
    TriggerEnable(gt_ZergMakeDronesReminder, false);
    TriggerAddEventTimer(gt_ZergMakeDronesReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones HatcherySelection
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesHatcherySelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_UnitTypeIsSelected("Hatchery", gv_p01_USER) == true) || (libNtve_gf_UnitTypeIsSelected("Larva", gv_p01_USER) == true))) {
        UnitSetState(gv_zergHatchery, c_unitStateStatusBar, true);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
    }
    else {
        UnitSetState(gv_zergHatchery, c_unitStateStatusBar, false);
        gf_CreateLClickToSelectTag(gv_zergHatchery, 90);
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_zergHatchery), 1.0, libVCMI_ge_CampaginReticleSize_Large, "Ref_Target 01");
        gf_SetOffscreenUnit(gv_zergHatchery);
    }
    if ((libNtve_gf_UnitTypeIsSelected("Larva", gv_p01_USER) == true)) {
        if ((gv_zergMakeDronesLarvaSelected == false)) {
            gv_zergMakeDronesLarvaSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeDronesReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
        if ((gv_zergMakeDronesLarvaSelected == true)) {
            gv_zergMakeDronesLarvaSelected = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeDronesReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    if ((UnitGroupCount(UnitGroupFilter("Larva", gv_p01_USER, UnitGroupSelected(gv_p01_USER), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2) && (gv_zergMakeDronesTwoLarvaSelectPlayed == false) && (gv_reminderPlayed == false)) {
        TriggerExecute(gt_ZergMakeDronesTwoLarvaSelectedQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesHatcherySelection_Init () {
    gt_ZergMakeDronesHatcherySelection = TriggerCreate("gt_ZergMakeDronesHatcherySelection_Func");
    TriggerEnable(gt_ZergMakeDronesHatcherySelection, false);
    TriggerAddEventUnitSelected(gt_ZergMakeDronesHatcherySelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ZergMakeDronesHatcherySelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones ReminderController
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesReminderController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_morphedCount;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_morphedCount = gv_zergMakeUnitCount;
    UnitGroupLoopBegin(UnitGroup("Egg", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(UnitGroupLoopCurrent(), 1, 1) == "Drone")) {
            lv_morphedCount += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_morphedCount >= 2)) {
        gf_StopReminderTimer();
        TriggerEnable(gt_ZergMakeDronesHatcherySelection, false);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
        TriggerExecute(gt_ZergMakeDronesMorphStartedQ, true, true);
    }
    else {
        if ((PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) >= 50) && (UnitGroupCount(UnitGroup("Larva", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            gf_StartReminderTimer();
            if ((TriggerIsEnabled(gt_ZergMakeDronesHatcherySelection) == false)) {
                TriggerEnable(gt_ZergMakeDronesHatcherySelection, true);
                TriggerExecute(gt_ZergMakeDronesHatcherySelection, true, true);
            }
            else {
            }
        }
        else {
            gf_ResetReminderTimer();
            TriggerEnable(gt_ZergMakeDronesHatcherySelection, false);
            gf_DestroyTutorialTextTag();
            gf_ClearAllTutorialReticles();
            gf_SetOffscreenUnit(null);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesReminderController_Init () {
    gt_ZergMakeDronesReminderController = TriggerCreate("gt_ZergMakeDronesReminderController_Func");
    TriggerEnable(gt_ZergMakeDronesReminderController, false);
    TriggerAddEventPlayerPropChange(gt_ZergMakeDronesReminderController, gv_p01_USER, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_ZergMakeDronesReminderController, gv_p01_USER, c_playerPropVespene);
    TriggerAddEventUnitCreated(gt_ZergMakeDronesReminderController, UnitRefFromVariable("gv_zergHatchery"), null, null);
    TriggerAddEventUnitAbility(gt_ZergMakeDronesReminderController, null, AbilityCommand("LarvaTrain", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ZergMakeDronesReminderController, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones FirstMorph
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesFirstMorph_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Drone", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesFirstMorph_Init () {
    gt_ZergMakeDronesFirstMorph = TriggerCreate("gt_ZergMakeDronesFirstMorph_Func");
    TriggerEnable(gt_ZergMakeDronesFirstMorph, false);
    TriggerAddEventUnitAbility(gt_ZergMakeDronesFirstMorph, null, AbilityCommand("LarvaTrain", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeDrones Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeDronesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Drone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergMakeUnitCount += 1;
    TriggerExecute(gt_ZergMakeDronesUpdateObjective, true, false);
    if ((gv_zergMakeUnitCount >= 2)) {
        TriggerExecute(gt_ZergMakeDronesCompleteObjective, true, false);
        gf_ZergMakeDronesCleanup();
        TriggerExecute(gt_ZergMakeDronesCompleteQ, true, true);
        TriggerExecute(gt_ZergMakeSpawningPool, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeDronesComplete_Init () {
    gt_ZergMakeDronesComplete = TriggerCreate("gt_ZergMakeDronesComplete_Func");
    TriggerEnable(gt_ZergMakeDronesComplete, false);
    TriggerAddEventUnitCreated(gt_ZergMakeDronesComplete, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPool_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZergSpawningPoolCreateObjective, true, false);
    TriggerEnable(gt_ZergMakeSpawningPoolReminder, true);
    TriggerEnable(gt_ZergMakeSpawningPoolComplete, true);
    TriggerExecute(gt_ZergMakeSpawningPoolQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPool_Init () {
    gt_ZergMakeSpawningPool = TriggerCreate("gt_ZergMakeSpawningPool_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00173", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00174", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "SpawningPool", true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 3), true);
    TriggerEnable(gt_ZergMakeSpawningPoolBuildMenu, true);
    TriggerEnable(gt_ZergMakeSpawningPoolTargeting, true);
    TriggerEnable(gt_ZergMakeSpawningPoolBuildOrder, true);
    TriggerEnable(gt_ZergMakeSpawningPoolDroneSelection, true);
    TriggerExecute(gt_ZergMakeSpawningPoolDroneSelection, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolQ_Init () {
    gt_ZergMakeSpawningPoolQ = TriggerCreate("gt_ZergMakeSpawningPoolQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool SelectDrone Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolSelectDroneQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeSpawningPoolDroneSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00190", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolSelectDroneQ_Init () {
    gt_ZergMakeSpawningPoolSelectDroneQ = TriggerCreate("gt_ZergMakeSpawningPoolSelectDroneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool OpenBuildMenu Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolOpenBuildMenuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeSpawningPoolDroneSelected == true))) {
            return false;
        }

        if (!((gv_zergMakeSpawningPoolBuildMenuPressed == false))) {
            return false;
        }

        if (!((gv_zergMakeSpawningPoolTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00191", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolOpenBuildMenuQ_Init () {
    gt_ZergMakeSpawningPoolOpenBuildMenuQ = TriggerCreate("gt_ZergMakeSpawningPoolOpenBuildMenuQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool SpawningPoolButton Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolSpawningPoolButtonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeSpawningPoolDroneSelected == true))) {
            return false;
        }

        if (!((gv_zergMakeSpawningPoolBuildMenuPressed == true))) {
            return false;
        }

        if (!((gv_zergMakeSpawningPoolTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00192", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolSpawningPoolButtonQ_Init () {
    gt_ZergMakeSpawningPoolSpawningPoolButtonQ = TriggerCreate("gt_ZergMakeSpawningPoolSpawningPoolButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool PlaceSpawningPool Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolPlaceSpawningPoolQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeSpawningPoolDroneSelected == true))) {
            return false;
        }

        if (!((gv_zergMakeSpawningPoolTargetModeActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00193", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolPlaceSpawningPoolQ_Init () {
    gt_ZergMakeSpawningPoolPlaceSpawningPoolQ = TriggerCreate("gt_ZergMakeSpawningPoolPlaceSpawningPoolQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool BuildOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolBuildOrderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00217", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolBuildOrderQ_Init () {
    gt_ZergMakeSpawningPoolBuildOrderQ = TriggerCreate("gt_ZergMakeSpawningPoolBuildOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolCompleteQ_Init () {
    gt_ZergMakeSpawningPoolCompleteQ = TriggerCreate("gt_ZergMakeSpawningPoolCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg SpawningPool CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergSpawningPoolCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/9D2A7F65"), StringToText(""), c_objectiveStateActive, true);
    gv_zergSpawningPoolObjective = ObjectiveLastCreated();
    TriggerEnable(gt_ZergSpawningPoolCompleteObjective, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSpawningPoolCreateObjective_Init () {
    gt_ZergSpawningPoolCreateObjective = TriggerCreate("gt_ZergSpawningPoolCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg SpawningPool CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergSpawningPoolCompleteObjective_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SpawningPool"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_zergSpawningPoolObjective, c_objectiveStateCompleted);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_zergSpawningPoolObjective);
    gv_zergSpawningPoolObjective = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSpawningPoolCompleteObjective_Init () {
    gt_ZergSpawningPoolCompleteObjective = TriggerCreate("gt_ZergSpawningPoolCompleteObjective_Func");
    TriggerEnable(gt_ZergSpawningPoolCompleteObjective, false);
    TriggerAddEventUnitConstructProgress(gt_ZergSpawningPoolCompleteObjective, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerExecute(gt_ZergMakeSpawningPoolSelectDroneQ, true, false);
    TriggerExecute(gt_ZergMakeSpawningPoolOpenBuildMenuQ, true, false);
    TriggerExecute(gt_ZergMakeSpawningPoolSpawningPoolButtonQ, true, false);
    TriggerExecute(gt_ZergMakeSpawningPoolPlaceSpawningPoolQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolReminder_Init () {
    gt_ZergMakeSpawningPoolReminder = TriggerCreate("gt_ZergMakeSpawningPoolReminder_Func");
    TriggerEnable(gt_ZergMakeSpawningPoolReminder, false);
    TriggerAddEventTimer(gt_ZergMakeSpawningPoolReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool DroneSelection
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolDroneSelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitTypeIsSelected("Drone", gv_p01_USER) == true)) {
        if ((gv_zergMakeSpawningPoolDroneSelected == false)) {
            gv_zergMakeSpawningPoolDroneSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeSpawningPoolReminder, false, false);
            }
            else {
            }
        }
        else {
            if ((gv_zergMakeSpawningPoolBuildMenuPressed == true)) {
                gv_zergMakeSpawningPoolBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_ZergMakeSpawningPoolReminder, false, false);
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_SetOffscreenUnit(null);
    }
    else {
        if ((gv_zergMakeSpawningPoolDroneSelected == true)) {
            gv_zergMakeSpawningPoolDroneSelected = false;
            gv_zergMakeSpawningPoolBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeSpawningPoolReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolDroneSelection_Init () {
    gt_ZergMakeSpawningPoolDroneSelection = TriggerCreate("gt_ZergMakeSpawningPoolDroneSelection_Func");
    TriggerEnable(gt_ZergMakeSpawningPoolDroneSelection, false);
    TriggerAddEventUnitSelected(gt_ZergMakeSpawningPoolDroneSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ZergMakeSpawningPoolDroneSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool BuildMenu
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolBuildMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventButtonPressed() == "ZergBuild")) {
        if ((gv_zergMakeSpawningPoolBuildMenuPressed == false)) {
            gv_zergMakeSpawningPoolBuildMenuPressed = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeSpawningPoolReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((EventButtonPressed() == "Cancel")) {
        if ((gv_zergMakeSpawningPoolBuildMenuPressed == true)) {
            gv_zergMakeSpawningPoolBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeSpawningPoolReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolBuildMenu_Init () {
    gt_ZergMakeSpawningPoolBuildMenu = TriggerCreate("gt_ZergMakeSpawningPoolBuildMenu_Func");
    TriggerEnable(gt_ZergMakeSpawningPoolBuildMenu, false);
    TriggerAddEventButtonPressed(gt_ZergMakeSpawningPoolBuildMenu, gv_p01_USER, "ZergBuild");
    TriggerAddEventButtonPressed(gt_ZergMakeSpawningPoolBuildMenu, gv_p01_USER, "Cancel");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool Targeting
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolTargeting_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn) && (EventTargetModeAbilCmd() == AbilityCommand("ZergBuild", 3))) {
        if ((gv_zergMakeSpawningPoolTargetModeActive == false)) {
            gv_zergMakeSpawningPoolTargetModeActive = true;
            gv_zergMakeSpawningPoolBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeSpawningPoolReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        if ((UnitIsAlive(gv_invisHelper) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Invisible3x3", 0, 0, RegionGetCenter(RegionFromId(29)));
            gv_invisHelper = UnitLastCreated();
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 1.0, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
        gf_CreateLClickToPlaceTag(gv_invisHelper, 0);
        gf_SetOffscreenUnit(gv_invisHelper);
    }
    else {
        if (((gv_zergMakeSpawningPoolTargetModeActive == true) || (gv_zergMakeSpawningPoolBuildMenuPressed == true))) {
            gv_zergMakeSpawningPoolTargetModeActive = false;
            gv_zergMakeSpawningPoolBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeSpawningPoolReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_ClearAllTutorialReticles();
        gf_DestroyTutorialTextTag();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        gf_SetOffscreenUnit(null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolTargeting_Init () {
    gt_ZergMakeSpawningPoolTargeting = TriggerCreate("gt_ZergMakeSpawningPoolTargeting_Func");
    TriggerEnable(gt_ZergMakeSpawningPoolTargeting, false);
    TriggerAddEventTargetModeUpdate(gt_ZergMakeSpawningPoolTargeting, c_playerAny, null, c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validBuildOrder;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("SpawningPool", gv_p01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_validBuildOrder = true;
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ZergBuild", 3))) {
            lv_validBuildOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validBuildOrder == true)) {
        gv_zergMakeSpawningPoolDroneSelected = false;
        gv_zergMakeSpawningPoolTargetModeActive = false;
        gv_zergMakeSpawningPoolBuildMenuPressed = false;
        gf_StopReminderTimer();
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        UISetButtonFaceHighlighted(PlayerGroupAll(), "SpawningPool", false);
        gf_SetOffscreenUnit(null);
        TriggerEnable(gt_ZergMakeSpawningPoolTargeting, false);
        TriggerEnable(gt_ZergMakeSpawningPoolBuildMenu, false);
        TriggerEnable(gt_ZergMakeSpawningPoolDroneSelection, false);
        TriggerExecute(gt_ZergMakeSpawningPoolBuildOrderQ, true, false);
    }
    else {
        gf_StartReminderTimer();
        UISetButtonFaceHighlighted(PlayerGroupAll(), "SpawningPool", true);
        TriggerEnable(gt_ZergMakeSpawningPoolTargeting, true);
        TriggerEnable(gt_ZergMakeSpawningPoolBuildMenu, true);
        TriggerEnable(gt_ZergMakeSpawningPoolDroneSelection, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolBuildOrder_Init () {
    gt_ZergMakeSpawningPoolBuildOrder = TriggerCreate("gt_ZergMakeSpawningPoolBuildOrder_Func");
    TriggerEnable(gt_ZergMakeSpawningPoolBuildOrder, false);
    TriggerAddEventUnitAbility(gt_ZergMakeSpawningPoolBuildOrder, null, AbilityCommand("ZergBuild", 3), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeSpawningPool Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeSpawningPoolComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "SpawningPool"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergSpawningPool = EventUnitProgressUnit();
    gf_ZergMakeSpawningPoolCleanup();
    TriggerExecute(gt_ZergMakeSpawningPoolCompleteQ, true, true);
    TriggerExecute(gt_ZergMakeZerglings, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeSpawningPoolComplete_Init () {
    gt_ZergMakeSpawningPoolComplete = TriggerCreate("gt_ZergMakeSpawningPoolComplete_Func");
    TriggerEnable(gt_ZergMakeSpawningPoolComplete, false);
    TriggerAddEventUnitConstructProgress(gt_ZergMakeSpawningPoolComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SupplyHelperActivator, true);
    TriggerExecute(gt_ZergMakeZerglingsCreateObjective, true, false);
    TriggerEnable(gt_ZergMakeZerglingsFirstMorph, true);
    TriggerEnable(gt_ZergMakeZerglingsSupplyHelperDone, true);
    TriggerEnable(gt_ZergMakeZerglingsReminder, true);
    TriggerEnable(gt_ZergMakeZerglingsComplete, true);
    TriggerExecute(gt_ZergMakeZerglingsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglings_Init () {
    gt_ZergMakeZerglings = TriggerCreate("gt_ZergMakeZerglings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00101", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 1), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zergling", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    TriggerEnable(gt_ZergMakeZerglingsMorphStarted, true);
    TriggerEnable(gt_ZergMakeZerglingsHatcherySelection, true);
    TriggerExecute(gt_ZergMakeZerglingsHatcherySelection, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsQ_Init () {
    gt_ZergMakeZerglingsQ = TriggerCreate("gt_ZergMakeZerglingsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings SelectLarva Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsSelectLarvaQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeZerglingsLarvaSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00194", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsSelectLarvaQ_Init () {
    gt_ZergMakeZerglingsSelectLarvaQ = TriggerCreate("gt_ZergMakeZerglingsSelectLarvaQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings ClickZergling Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsClickZerglingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeZerglingsLarvaSelected == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00195", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsClickZerglingQ_Init () {
    gt_ZergMakeZerglingsClickZerglingQ = TriggerCreate("gt_ZergMakeZerglingsClickZerglingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings DontWait Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsDontWaitQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00196", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsDontWaitQ_Init () {
    gt_ZergMakeZerglingsDontWaitQ = TriggerCreate("gt_ZergMakeZerglingsDontWaitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings MorphStarted Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsMorphStartedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsMorphStartedQ_Init () {
    gt_ZergMakeZerglingsMorphStartedQ = TriggerCreate("gt_ZergMakeZerglingsMorphStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsCompleteQ_Init () {
    gt_ZergMakeZerglingsCompleteQ = TriggerCreate("gt_ZergMakeZerglingsCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/15F7E68C"), StringToText(""), c_objectiveStateActive, true);
    gv_zergMakeZerglingsObjective = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsCreateObjective_Init () {
    gt_ZergMakeZerglingsCreateObjective = TriggerCreate("gt_ZergMakeZerglingsCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings UpdateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsUpdateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/35DA3936", "A", IntToText(gv_zergMakeUnitCount));
    ObjectiveSetName(gv_zergMakeZerglingsObjective, TextExpressionAssemble("Param/Expression/35DA3936"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsUpdateObjective_Init () {
    gt_ZergMakeZerglingsUpdateObjective = TriggerCreate("gt_ZergMakeZerglingsUpdateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsCompleteObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/0D76201F", "A", IntToText(gv_zergMakeUnitCount));
    ObjectiveSetName(gv_zergMakeZerglingsObjective, TextExpressionAssemble("Param/Expression/0D76201F"));
    ObjectiveSetState(gv_zergMakeZerglingsObjective, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_zergMakeZerglingsObjective);
    gv_zergMakeZerglingsObjective = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsCompleteObjective_Init () {
    gt_ZergMakeZerglingsCompleteObjective = TriggerCreate("gt_ZergMakeZerglingsCompleteObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_supplyHelperActive == false))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerEnable(gt_ZergMakeZerglingsFirstMorph, true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zergling", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    TriggerExecute(gt_ZergMakeZerglingsSelectLarvaQ, true, false);
    TriggerExecute(gt_ZergMakeZerglingsClickZerglingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsReminder_Init () {
    gt_ZergMakeZerglingsReminder = TriggerCreate("gt_ZergMakeZerglingsReminder_Func");
    TriggerEnable(gt_ZergMakeZerglingsReminder, false);
    TriggerAddEventTimer(gt_ZergMakeZerglingsReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings SupplyHelperDone
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsSupplyHelperDone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetReminderTimer();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zergling", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    TriggerExecute(gt_ZergMakeZerglingsHatcherySelection, true, false);
    TriggerExecute(gt_ZergMakeZerglingsMorphStarted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsSupplyHelperDone_Init () {
    gt_ZergMakeZerglingsSupplyHelperDone = TriggerCreate("gt_ZergMakeZerglingsSupplyHelperDone_Func");
    TriggerEnable(gt_ZergMakeZerglingsSupplyHelperDone, false);
    TriggerAddEventGeneric(gt_ZergMakeZerglingsSupplyHelperDone, "SupplyHelperDone");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings HatcherySelection
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsHatcherySelection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_UnitTypeIsSelected("Hatchery", gv_p01_USER) == true) || (libNtve_gf_UnitTypeIsSelected("Larva", gv_p01_USER) == true))) {
        UnitSetState(gv_zergHatchery, c_unitStateStatusBar, true);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
    }
    else {
        UnitSetState(gv_zergHatchery, c_unitStateStatusBar, false);
        gf_CreateLClickToSelectTag(gv_zergHatchery, 90);
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_zergHatchery), 1.0, libVCMI_ge_CampaginReticleSize_Large, "Ref_Target 01");
        gf_SetOffscreenUnit(gv_zergHatchery);
    }
    if ((libNtve_gf_UnitTypeIsSelected("Larva", gv_p01_USER) == true)) {
        if ((gv_zergMakeZerglingsLarvaSelected == false)) {
            gv_zergMakeZerglingsLarvaSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeZerglingsReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
        if ((gv_zergMakeZerglingsLarvaSelected == true)) {
            gv_zergMakeZerglingsLarvaSelected = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeZerglingsReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsHatcherySelection_Init () {
    gt_ZergMakeZerglingsHatcherySelection = TriggerCreate("gt_ZergMakeZerglingsHatcherySelection_Func");
    TriggerEnable(gt_ZergMakeZerglingsHatcherySelection, false);
    TriggerAddEventUnitSelected(gt_ZergMakeZerglingsHatcherySelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ZergMakeZerglingsHatcherySelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings MorphStarted
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsMorphStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_morphedCount;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_morphedCount = gv_zergMakeUnitCount;
    UnitGroupLoopBegin(UnitGroup("Egg", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(UnitGroupLoopCurrent(), 1, 1) == "Zergling")) {
            lv_morphedCount += 2;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_morphedCount >= 6)) {
        gf_StopReminderTimer();
        TriggerEnable(gt_ZergMakeZerglingsHatcherySelection, false);
        TriggerStop(gt_ZergMakeZerglingsFirstMorph);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
        TriggerExecute(gt_ZergMakeZerglingsMorphStartedQ, true, true);
    }
    else {
        if ((PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) >= 50) && (UnitGroupCount(UnitGroup("Larva", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            gf_StartReminderTimer();
            if ((TriggerIsEnabled(gt_ZergMakeZerglingsHatcherySelection) == false)) {
                TriggerEnable(gt_ZergMakeZerglingsHatcherySelection, true);
                TriggerExecute(gt_ZergMakeZerglingsHatcherySelection, true, true);
            }
            else {
            }
        }
        else {
            gf_ResetReminderTimer();
            TriggerEnable(gt_ZergMakeZerglingsHatcherySelection, false);
            gf_DestroyTutorialTextTag();
            gf_ClearAllTutorialReticles();
            gf_SetOffscreenUnit(null);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsMorphStarted_Init () {
    gt_ZergMakeZerglingsMorphStarted = TriggerCreate("gt_ZergMakeZerglingsMorphStarted_Func");
    TriggerEnable(gt_ZergMakeZerglingsMorphStarted, false);
    TriggerAddEventPlayerPropChange(gt_ZergMakeZerglingsMorphStarted, gv_p01_USER, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_ZergMakeZerglingsMorphStarted, gv_p01_USER, c_playerPropVespene);
    TriggerAddEventUnitCreated(gt_ZergMakeZerglingsMorphStarted, UnitRefFromVariable("gv_zergHatchery"), null, null);
    TriggerAddEventUnitAbility(gt_ZergMakeZerglingsMorphStarted, null, AbilityCommand("LarvaTrain", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ZergMakeZerglingsMorphStarted, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ZergMakeZerglingsMorphStarted, null, AbilityCommand("LarvaTrain", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings FirstMorph
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsFirstMorph_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zergling", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    gf_ResetReminderTimer();
    if ((UnitGroupCount(UnitGroup("Larva", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (TriggerIsEnabled(gt_ZergMakeZerglingsDontWaitQ) == true)) {
        Wait(3.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup("Larva", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (TriggerIsEnabled(gt_ZergMakeZerglingsDontWaitQ) == true)) {
            TriggerExecute(gt_ZergMakeZerglingsDontWaitQ, true, true);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsFirstMorph_Init () {
    gt_ZergMakeZerglingsFirstMorph = TriggerCreate("gt_ZergMakeZerglingsFirstMorph_Func");
    TriggerEnable(gt_ZergMakeZerglingsFirstMorph, false);
    TriggerAddEventUnitAbility(gt_ZergMakeZerglingsFirstMorph, null, AbilityCommand("LarvaTrain", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeZerglings Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeZerglingsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Zergling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergMakeUnitCount += 1;
    TriggerExecute(gt_ZergMakeZerglingsUpdateObjective, true, false);
    if ((gv_zergMakeUnitCount >= 6)) {
        TriggerExecute(gt_ZergMakeZerglingsCompleteObjective, true, false);
        gf_ZergMakeZerglingsCleanup();
        TriggerExecute(gt_ZergMakeZerglingsCompleteQ, true, true);
        TriggerExecute(gt_ZergMakeExtractor, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeZerglingsComplete_Init () {
    gt_ZergMakeZerglingsComplete = TriggerCreate("gt_ZergMakeZerglingsComplete_Func");
    TriggerEnable(gt_ZergMakeZerglingsComplete, false);
    TriggerAddEventUnitCreated(gt_ZergMakeZerglingsComplete, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractor_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZergMakeExtractorCreateObjective, true, false);
    TriggerEnable(gt_ZergMakeExtractorReminder, true);
    TriggerEnable(gt_ZergMakeExtractorComplete, true);
    TriggerExecute(gt_ZergMakeExtractorQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractor_Init () {
    gt_ZergMakeExtractor = TriggerCreate("gt_ZergMakeExtractor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00218", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_SetOffscreenUnit(gv_zergExtractor);
    libNtve_gf_SendActorMessageToUnit(gv_zergExtractor, "HaloStart");
    libNtve_gf_SendActorMessageToUnit(gv_zergExtractor, "SetTintColor {255,255,255 3.000000}");
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00105", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SendActorMessageToUnit(gv_zergExtractor, "HaloStop");
    libNtve_gf_SendActorMessageToUnit(gv_zergExtractor, "SetTintColor 255,255,255");
    gf_SetOffscreenUnit(null);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00106", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Extractor", true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 2), true);
    TriggerEnable(gt_ZergMakeExtractorTargeting, true);
    TriggerEnable(gt_ZergMakeExtractorBuildMenu, true);
    TriggerEnable(gt_ZergMakeExtractorBuildOrder, true);
    TriggerEnable(gt_ZergMakeExtractorDroneSelection, true);
    TriggerExecute(gt_ZergMakeExtractorDroneSelection, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorQ_Init () {
    gt_ZergMakeExtractorQ = TriggerCreate("gt_ZergMakeExtractorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor SelectDrone Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorSelectDroneQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeExtractorDroneSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00197", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorSelectDroneQ_Init () {
    gt_ZergMakeExtractorSelectDroneQ = TriggerCreate("gt_ZergMakeExtractorSelectDroneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor OpenBuildMenu Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorOpenBuildMenuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeExtractorDroneSelected == true))) {
            return false;
        }

        if (!((gv_zergMakeExtractorBuildMenuPressed == false))) {
            return false;
        }

        if (!((gv_zergMakeExtractorTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00198", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorOpenBuildMenuQ_Init () {
    gt_ZergMakeExtractorOpenBuildMenuQ = TriggerCreate("gt_ZergMakeExtractorOpenBuildMenuQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor ExtractorButton Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorExtractorButtonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeExtractorDroneSelected == true))) {
            return false;
        }

        if (!((gv_zergMakeExtractorBuildMenuPressed == true))) {
            return false;
        }

        if (!((gv_zergMakeExtractorTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00199", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorExtractorButtonQ_Init () {
    gt_ZergMakeExtractorExtractorButtonQ = TriggerCreate("gt_ZergMakeExtractorExtractorButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor PlaceExtractor Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorPlaceExtractorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeExtractorDroneSelected == true))) {
            return false;
        }

        if (!((gv_zergMakeExtractorTargetModeActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00200", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorPlaceExtractorQ_Init () {
    gt_ZergMakeExtractorPlaceExtractorQ = TriggerCreate("gt_ZergMakeExtractorPlaceExtractorQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor BuildOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorBuildOrderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00107", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorBuildOrderQ_Init () {
    gt_ZergMakeExtractorBuildOrderQ = TriggerCreate("gt_ZergMakeExtractorBuildOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorCompleteQ_Init () {
    gt_ZergMakeExtractorCompleteQ = TriggerCreate("gt_ZergMakeExtractorCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/6CDF59C9"), StringToText(""), c_objectiveStateActive, true);
    gv_zergMakeExtractorObjective = ObjectiveLastCreated();
    TriggerEnable(gt_ZergMakeExtractorCompleteObjective, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorCreateObjective_Init () {
    gt_ZergMakeExtractorCreateObjective = TriggerCreate("gt_ZergMakeExtractorCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorCompleteObjective_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Extractor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_zergMakeExtractorObjective, c_objectiveStateCompleted);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_zergMakeExtractorObjective);
    gv_zergMakeExtractorObjective = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorCompleteObjective_Init () {
    gt_ZergMakeExtractorCompleteObjective = TriggerCreate("gt_ZergMakeExtractorCompleteObjective_Func");
    TriggerEnable(gt_ZergMakeExtractorCompleteObjective, false);
    TriggerAddEventUnitConstructProgress(gt_ZergMakeExtractorCompleteObjective, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerExecute(gt_ZergMakeExtractorSelectDroneQ, true, false);
    TriggerExecute(gt_ZergMakeExtractorOpenBuildMenuQ, true, false);
    TriggerExecute(gt_ZergMakeExtractorExtractorButtonQ, true, false);
    TriggerExecute(gt_ZergMakeExtractorPlaceExtractorQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorReminder_Init () {
    gt_ZergMakeExtractorReminder = TriggerCreate("gt_ZergMakeExtractorReminder_Func");
    TriggerEnable(gt_ZergMakeExtractorReminder, false);
    TriggerAddEventTimer(gt_ZergMakeExtractorReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor DroneSelection
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorDroneSelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitTypeIsSelected("Drone", gv_p01_USER) == true)) {
        if ((gv_zergMakeExtractorDroneSelected == false)) {
            gv_zergMakeExtractorDroneSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeExtractorReminder, false, false);
            }
            else {
            }
        }
        else {
            if ((gv_zergMakeExtractorBuildMenuPressed == true)) {
                gv_zergMakeExtractorBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_ZergMakeExtractorReminder, false, false);
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_SetOffscreenUnit(null);
    }
    else {
        if ((gv_zergMakeExtractorDroneSelected == true)) {
            gv_zergMakeExtractorDroneSelected = false;
            gv_zergMakeExtractorBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeExtractorReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorDroneSelection_Init () {
    gt_ZergMakeExtractorDroneSelection = TriggerCreate("gt_ZergMakeExtractorDroneSelection_Func");
    TriggerEnable(gt_ZergMakeExtractorDroneSelection, false);
    TriggerAddEventUnitSelected(gt_ZergMakeExtractorDroneSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ZergMakeExtractorDroneSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor BuildMenu
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorBuildMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventButtonPressed() == "ZergBuild")) {
        if ((gv_zergMakeExtractorBuildMenuPressed == false)) {
            gv_zergMakeExtractorBuildMenuPressed = true;
            if ((gv_reminderPlayed == true) && (gv_reminderTimer != null)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeExtractorReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((EventButtonPressed() == "Cancel")) {
        if ((gv_zergMakeExtractorBuildMenuPressed == true)) {
            gv_zergMakeExtractorBuildMenuPressed = false;
            if ((gv_reminderPlayed == true) && (gv_reminderTimer != null)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeExtractorReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorBuildMenu_Init () {
    gt_ZergMakeExtractorBuildMenu = TriggerCreate("gt_ZergMakeExtractorBuildMenu_Func");
    TriggerEnable(gt_ZergMakeExtractorBuildMenu, false);
    TriggerAddEventButtonPressed(gt_ZergMakeExtractorBuildMenu, gv_p01_USER, "ZergBuild");
    TriggerAddEventButtonPressed(gt_ZergMakeExtractorBuildMenu, gv_p01_USER, "Cancel");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor Targeting
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorTargeting_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn) && (EventTargetModeAbilCmd() == AbilityCommand("ZergBuild", 2))) {
        if ((gv_zergMakeExtractorTargetModeActive == false)) {
            gv_zergMakeExtractorTargetModeActive = true;
            gv_zergMakeExtractorBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeExtractorReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        UnitGroupLoopBegin(UnitGroup("VespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, false);
        }
        UnitGroupLoopEnd();
        if ((UnitIsAlive(gv_invisHelper) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTutorialHelper", c_unitCreateIgnorePlacement, 0, PointWithOffset(RegionGetCenter(RegionFromId(28)), 0.0, -0.5));
            gv_invisHelper = UnitLastCreated();
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 1.0, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
        gf_CreateLClickToPlaceTag(gv_invisHelper, 0);
        gf_SetOffscreenUnit(gv_invisHelper);
    }
    else {
        if ((EventTargetModeState() == c_targetModeStateOn)) {
            TransmissionClearAll();
        }
        else {
            if (((gv_zergMakeExtractorTargetModeActive == true) || (gv_zergMakeExtractorBuildMenuPressed == true))) {
                gv_zergMakeExtractorTargetModeActive = false;
                gv_zergMakeExtractorBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_ZergMakeExtractorReminder, false, false);
                }
                else {
                }
            }
            else {
            }
            UnitGroupLoopBegin(UnitGroup("VespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
            }
            UnitGroupLoopEnd();
            gf_ClearAllTutorialReticles();
            gf_DestroyTutorialTextTag();
            if ((UnitIsAlive(gv_invisHelper) == true)) {
                UnitRemove(gv_invisHelper);
                gv_invisHelper = null;
            }
            else {
            }
            gf_SetOffscreenUnit(null);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorTargeting_Init () {
    gt_ZergMakeExtractorTargeting = TriggerCreate("gt_ZergMakeExtractorTargeting_Func");
    TriggerEnable(gt_ZergMakeExtractorTargeting, false);
    TriggerAddEventTargetModeUpdate(gt_ZergMakeExtractorTargeting, c_playerAny, null, c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validBuildOrder;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Extractor", gv_p01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_validBuildOrder = true;
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ZergBuild", 2))) {
            lv_validBuildOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validBuildOrder == true)) {
        gv_zergMakeExtractorDroneSelected = false;
        gv_zergMakeExtractorBuildMenuPressed = false;
        gv_zergMakeExtractorTargetModeActive = false;
        gf_StopReminderTimer();
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Extractor", false);
        gf_SetOffscreenUnit(null);
        TriggerEnable(gt_ZergMakeExtractorTargeting, false);
        TriggerEnable(gt_ZergMakeExtractorBuildMenu, false);
        TriggerEnable(gt_ZergMakeExtractorDroneSelection, false);
        TriggerExecute(gt_ZergMakeExtractorBuildOrderQ, true, false);
    }
    else {
        gf_StartReminderTimer();
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Extractor", true);
        TriggerEnable(gt_ZergMakeExtractorTargeting, true);
        TriggerEnable(gt_ZergMakeExtractorBuildMenu, true);
        TriggerEnable(gt_ZergMakeExtractorDroneSelection, true);
        TriggerExecute(gt_ZergMakeExtractorDroneSelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorBuildOrder_Init () {
    gt_ZergMakeExtractorBuildOrder = TriggerCreate("gt_ZergMakeExtractorBuildOrder_Func");
    TriggerEnable(gt_ZergMakeExtractorBuildOrder, false);
    TriggerAddEventUnitAbility(gt_ZergMakeExtractorBuildOrder, null, AbilityCommand("ZergBuild", 2), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeExtractor Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeExtractorComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Extractor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergExtractor = EventUnitProgressUnit();
    gf_ZergMakeExtractorCleanup();
    TriggerExecute(gt_ZergMakeExtractorCompleteQ, true, true);
    TriggerExecute(gt_ZergTransferDrones, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeExtractorComplete_Init () {
    gt_ZergMakeExtractorComplete = TriggerCreate("gt_ZergMakeExtractorComplete_Func");
    TriggerEnable(gt_ZergMakeExtractorComplete, false);
    TriggerAddEventUnitConstructProgress(gt_ZergMakeExtractorComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg TransferDrones
//--------------------------------------------------------------------------------------------------
bool gt_ZergTransferDrones_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZergTransferDronesMakeObjective, true, false);
    TriggerEnable(gt_ZergTransferDronesComplete, true);
    TriggerEnable(gt_ZergTransferDronesReminderQ, true);
    TriggerExecute(gt_ZergTransferDronesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergTransferDrones_Init () {
    gt_ZergTransferDrones = TriggerCreate("gt_ZergTransferDrones_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg TransferDrones Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergTransferDronesQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ZergTransferDronesComplete, false, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerEnable(gt_ZergTransferDronesDroneSelection, true);
    TriggerExecute(gt_ZergTransferDronesDroneSelection, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergTransferDronesQ_Init () {
    gt_ZergTransferDronesQ = TriggerCreate("gt_ZergTransferDronesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg TransferDrones Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergTransferDronesCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_DisplayScreenImage(11, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 212, 134, c_anchorTopRight, 150, -34);
    libNtve_gf_PulseScreenImage(11, 1.75, 100.0, 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    libNtve_gf_StopPulsingScreenImage(11);
    libNtve_gf_HideScreenImage(false, 11);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergTransferDronesCompleteQ_Init () {
    gt_ZergTransferDronesCompleteQ = TriggerCreate("gt_ZergTransferDronesCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg TransferDrones Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergTransferDronesReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergTransferDronesReminderQ_Init () {
    gt_ZergTransferDronesReminderQ = TriggerCreate("gt_ZergTransferDronesReminderQ_Func");
    TriggerEnable(gt_ZergTransferDronesReminderQ, false);
    TriggerAddEventTimer(gt_ZergTransferDronesReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg TransferDrones MakeObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergTransferDronesMakeObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/E6646AF6"), StringToText(""), c_objectiveStateActive, true);
    gv_zergTransferDronesObjective = ObjectiveLastCreated();
    TriggerEnable(gt_ZergTransferDronesUpdateObjective, true);
    TriggerExecute(gt_ZergTransferDronesUpdateObjective, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergTransferDronesMakeObjective_Init () {
    gt_ZergTransferDronesMakeObjective = TriggerCreate("gt_ZergTransferDronesMakeObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg TransferDrones UpdateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergTransferDronesUpdateObjective_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dronesOnGas;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("DroneHarvest", 0)) && (UnitGetType(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0))) == "Extractor")) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("DroneHarvest", 1)) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGasZerg") == true)))) {
            lv_dronesOnGas += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    TextExpressionSetToken("Param/Expression/BC77B71D", "A", IntToText(lv_dronesOnGas));
    ObjectiveSetName(gv_zergTransferDronesObjective, TextExpressionAssemble("Param/Expression/BC77B71D"));
    if ((lv_dronesOnGas >= 3)) {
        ObjectiveSetState(gv_zergTransferDronesObjective, c_objectiveStateCompleted);
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(3.0, c_timeGame);
        ObjectiveDestroy(gv_zergTransferDronesObjective);
        gv_zergTransferDronesObjective = c_invalidObjectiveId;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergTransferDronesUpdateObjective_Init () {
    gt_ZergTransferDronesUpdateObjective = TriggerCreate("gt_ZergTransferDronesUpdateObjective_Func");
    TriggerEnable(gt_ZergTransferDronesUpdateObjective, false);
    TriggerAddEventUnitOrder(gt_ZergTransferDronesUpdateObjective, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg TransferDrones DroneSelection
//--------------------------------------------------------------------------------------------------
bool gt_ZergTransferDronesDroneSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validDroneSelected;
    unitgroup lv_validDrones;

    // Variable Initialization
    lv_validDrones = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((!((((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("DroneHarvest", 0)) && (UnitGetType(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0))) == "Extractor")) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("DroneHarvest", 1)) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGasZerg") == true)))))) {
            UnitGroupAdd(lv_validDrones, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupSelected(gv_p01_USER));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupHasUnit(lv_validDrones, UnitGroupLoopCurrent()) == true)) {
            lv_validDroneSelected = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validDroneSelected == true)) {
        UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_DestroyTutorialTextTag();
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_zergExtractor), 1.2, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Center");
        gf_CreateRClickToGatherTag(gv_zergExtractor, 60);
        gf_SetOffscreenUnit(gv_zergExtractor);
    }
    else {
        gf_ClearTutorialReticleOnUnit(gv_zergExtractor);
        UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupHasUnit(lv_validDrones, UnitGroupLoopCurrent()) == false)) {
                gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        gf_DestroyTutorialTextTag();
        gf_CreateTutorialReticlesOnUnitGroup(lv_validDrones, 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(lv_validDrones));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergTransferDronesDroneSelection_Init () {
    gt_ZergTransferDronesDroneSelection = TriggerCreate("gt_ZergTransferDronesDroneSelection_Func");
    TriggerEnable(gt_ZergTransferDronesDroneSelection, false);
    TriggerAddEventUnitSelected(gt_ZergTransferDronesDroneSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ZergTransferDronesDroneSelection, null, gv_p01_USER, false);
    TriggerAddEventUnitAbility(gt_ZergTransferDronesDroneSelection, null, AbilityCommand("DroneHarvest", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ZergTransferDronesDroneSelection, null, AbilityCommand("DroneHarvest", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg TransferDrones Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergTransferDronesComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dronesOnGas;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("DroneHarvest", 0)) && (UnitGetType(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0))) == "Extractor")) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("DroneHarvest", 1)) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGasZerg") == true)))) {
            lv_dronesOnGas += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_dronesOnGas >= 3)) {
        gf_ZergTransferDronesCleanup();
        TriggerExecute(gt_ZergTransferDronesCompleteQ, true, true);
        TriggerExecute(gt_ZergMakeRoachWarren, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergTransferDronesComplete_Init () {
    gt_ZergTransferDronesComplete = TriggerCreate("gt_ZergTransferDronesComplete_Func");
    TriggerEnable(gt_ZergTransferDronesComplete, false);
    TriggerAddEventUnitAbility(gt_ZergTransferDronesComplete, null, AbilityCommand("DroneHarvest", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarren_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZergMakeRoachWarrenCreateObjective, true, false);
    TriggerEnable(gt_ZergMakeRoachWarrenReminder, true);
    TriggerEnable(gt_ZergMakeRoachWarrenComplete, true);
    TriggerExecute(gt_ZergMakeRoachWarrenQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarren_Init () {
    gt_ZergMakeRoachWarren = TriggerCreate("gt_ZergMakeRoachWarren_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ZergBuild", 13), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "RoachWarren", true);
    TriggerEnable(gt_ZergMakeRoachWarrenTargeting, true);
    TriggerEnable(gt_ZergMakeRoachWarrenBuildMenu, true);
    TriggerEnable(gt_ZergMakeRoachWarrenBuildOrder, true);
    TriggerEnable(gt_ZergMakeRoachWarrenDroneSelection, true);
    TriggerExecute(gt_ZergMakeRoachWarrenDroneSelection, true, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenQ_Init () {
    gt_ZergMakeRoachWarrenQ = TriggerCreate("gt_ZergMakeRoachWarrenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren SelectDrone Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenSelectDroneQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeRoachWarrenDroneSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00201", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenSelectDroneQ_Init () {
    gt_ZergMakeRoachWarrenSelectDroneQ = TriggerCreate("gt_ZergMakeRoachWarrenSelectDroneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren OpenBuildMenu Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenOpenBuildMenuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeRoachWarrenDroneSelected == true))) {
            return false;
        }

        if (!((gv_zergMakeRoachWarrenBuildMenuPressed == false))) {
            return false;
        }

        if (!((gv_zergMakeRoachWarrenTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00202", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenOpenBuildMenuQ_Init () {
    gt_ZergMakeRoachWarrenOpenBuildMenuQ = TriggerCreate("gt_ZergMakeRoachWarrenOpenBuildMenuQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren RoachWarrenButton Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenRoachWarrenButtonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeRoachWarrenDroneSelected == true))) {
            return false;
        }

        if (!((gv_zergMakeRoachWarrenBuildMenuPressed == true))) {
            return false;
        }

        if (!((gv_zergMakeRoachWarrenTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00203", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenRoachWarrenButtonQ_Init () {
    gt_ZergMakeRoachWarrenRoachWarrenButtonQ = TriggerCreate("gt_ZergMakeRoachWarrenRoachWarrenButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren PlaceRoachWarren Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenPlaceRoachWarrenQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeRoachWarrenDroneSelected == true))) {
            return false;
        }

        if (!((gv_zergMakeRoachWarrenTargetModeActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00204", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenPlaceRoachWarrenQ_Init () {
    gt_ZergMakeRoachWarrenPlaceRoachWarrenQ = TriggerCreate("gt_ZergMakeRoachWarrenPlaceRoachWarrenQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren BuildOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenBuildOrderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenBuildOrderQ_Init () {
    gt_ZergMakeRoachWarrenBuildOrderQ = TriggerCreate("gt_ZergMakeRoachWarrenBuildOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenCompleteQ_Init () {
    gt_ZergMakeRoachWarrenCompleteQ = TriggerCreate("gt_ZergMakeRoachWarrenCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/0611CA72"), StringToText(""), c_objectiveStateActive, true);
    gv_zergMakeRoachWarrenObjective = ObjectiveLastCreated();
    TriggerEnable(gt_ZergMakeRoachWarrenCompleteObjective, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenCreateObjective_Init () {
    gt_ZergMakeRoachWarrenCreateObjective = TriggerCreate("gt_ZergMakeRoachWarrenCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenCompleteObjective_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "RoachWarren"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_zergMakeRoachWarrenObjective, c_objectiveStateCompleted);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_zergMakeRoachWarrenObjective);
    gv_zergMakeRoachWarrenObjective = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenCompleteObjective_Init () {
    gt_ZergMakeRoachWarrenCompleteObjective = TriggerCreate("gt_ZergMakeRoachWarrenCompleteObjective_Func");
    TriggerEnable(gt_ZergMakeRoachWarrenCompleteObjective, false);
    TriggerAddEventUnitConstructProgress(gt_ZergMakeRoachWarrenCompleteObjective, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerExecute(gt_ZergMakeRoachWarrenSelectDroneQ, true, false);
    TriggerExecute(gt_ZergMakeRoachWarrenOpenBuildMenuQ, true, false);
    TriggerExecute(gt_ZergMakeRoachWarrenRoachWarrenButtonQ, true, false);
    TriggerExecute(gt_ZergMakeRoachWarrenPlaceRoachWarrenQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenReminder_Init () {
    gt_ZergMakeRoachWarrenReminder = TriggerCreate("gt_ZergMakeRoachWarrenReminder_Func");
    TriggerEnable(gt_ZergMakeRoachWarrenReminder, false);
    TriggerAddEventTimer(gt_ZergMakeRoachWarrenReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren DroneSelection
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenDroneSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validDroneSelected;
    unitgroup lv_validDrones;

    // Variable Initialization
    lv_validDrones = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((!((((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("DroneHarvest", 0)) && (UnitGetType(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0))) == "Extractor")) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("DroneHarvest", 1)) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGasZerg") == true)))))) {
            UnitGroupAdd(lv_validDrones, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupSelected(gv_p01_USER));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupHasUnit(lv_validDrones, UnitGroupLoopCurrent()) == true)) {
            lv_validDroneSelected = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validDroneSelected == true)) {
        if ((gv_zergMakeRoachWarrenDroneSelected == false)) {
            gv_zergMakeRoachWarrenDroneSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeRoachWarrenReminder, false, false);
            }
            else {
            }
        }
        else {
            if ((gv_zergMakeRoachWarrenBuildMenuPressed == true)) {
                gv_zergMakeRoachWarrenBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_ZergMakeSpawningPoolReminder, false, false);
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_SetOffscreenUnit(null);
    }
    else {
        if ((gv_zergMakeRoachWarrenDroneSelected == true)) {
            gv_zergMakeRoachWarrenDroneSelected = false;
            gv_zergMakeRoachWarrenBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeRoachWarrenReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(lv_validDrones, 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(lv_validDrones));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenDroneSelection_Init () {
    gt_ZergMakeRoachWarrenDroneSelection = TriggerCreate("gt_ZergMakeRoachWarrenDroneSelection_Func");
    TriggerEnable(gt_ZergMakeRoachWarrenDroneSelection, false);
    TriggerAddEventUnitSelected(gt_ZergMakeRoachWarrenDroneSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ZergMakeRoachWarrenDroneSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren BuildMenu
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenBuildMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventButtonPressed() == "ZergBuild")) {
        if ((gv_zergMakeRoachWarrenBuildMenuPressed == false)) {
            gv_zergMakeRoachWarrenBuildMenuPressed = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeRoachWarrenReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((EventButtonPressed() == "Cancel")) {
        if ((gv_zergMakeRoachWarrenBuildMenuPressed == true)) {
            gv_zergMakeRoachWarrenBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeRoachWarrenReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenBuildMenu_Init () {
    gt_ZergMakeRoachWarrenBuildMenu = TriggerCreate("gt_ZergMakeRoachWarrenBuildMenu_Func");
    TriggerEnable(gt_ZergMakeRoachWarrenBuildMenu, false);
    TriggerAddEventButtonPressed(gt_ZergMakeRoachWarrenBuildMenu, gv_p01_USER, "ZergBuild");
    TriggerAddEventButtonPressed(gt_ZergMakeRoachWarrenBuildMenu, gv_p01_USER, "Cancel");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren Targeting
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenTargeting_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn) && (EventTargetModeAbilCmd() == AbilityCommand("ZergBuild", 13))) {
        if ((gv_zergMakeRoachWarrenTargetModeActive == false)) {
            gv_zergMakeRoachWarrenTargetModeActive = true;
            gv_zergMakeRoachWarrenBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeRoachWarrenReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        if ((UnitIsAlive(gv_invisHelper) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Invisible3x3", 0, 0, RegionGetCenter(RegionFromId(30)));
            gv_invisHelper = UnitLastCreated();
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 1.0, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
        gf_CreateLClickToPlaceTag(gv_invisHelper, 0);
        gf_SetOffscreenUnit(gv_invisHelper);
    }
    else {
        if ((EventTargetModeState() == c_targetModeStateOn)) {
            TransmissionClearAll();
        }
        else {
            if (((gv_zergMakeRoachWarrenTargetModeActive == true) || (gv_zergMakeRoachWarrenBuildMenuPressed == true))) {
                gv_zergMakeRoachWarrenTargetModeActive = false;
                gv_zergMakeRoachWarrenBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_ZergMakeRoachWarrenReminder, false, false);
                }
                else {
                }
            }
            else {
            }
            gf_ClearAllTutorialReticles();
            gf_DestroyTutorialTextTag();
            if ((UnitIsAlive(gv_invisHelper) == true)) {
                UnitRemove(gv_invisHelper);
                gv_invisHelper = null;
            }
            else {
            }
            gf_SetOffscreenUnit(null);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenTargeting_Init () {
    gt_ZergMakeRoachWarrenTargeting = TriggerCreate("gt_ZergMakeRoachWarrenTargeting_Func");
    TriggerEnable(gt_ZergMakeRoachWarrenTargeting, false);
    TriggerAddEventTargetModeUpdate(gt_ZergMakeRoachWarrenTargeting, c_playerAny, null, c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validBuildOrder;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("RoachWarren", gv_p01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_validBuildOrder = true;
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("Drone", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ZergBuild", 13))) {
            lv_validBuildOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validBuildOrder == true)) {
        gv_zergMakeRoachWarrenTargetModeActive = false;
        gv_zergMakeRoachWarrenBuildMenuPressed = false;
        gv_zergMakeRoachWarrenDroneSelected = false;
        gf_StopReminderTimer();
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        UISetButtonFaceHighlighted(PlayerGroupAll(), "RoachWarren", false);
        gf_SetOffscreenUnit(null);
        TriggerEnable(gt_ZergMakeRoachWarrenTargeting, false);
        TriggerEnable(gt_ZergMakeRoachWarrenBuildMenu, false);
        TriggerEnable(gt_ZergMakeRoachWarrenDroneSelection, false);
        TriggerExecute(gt_ZergMakeRoachWarrenBuildOrderQ, true, false);
    }
    else {
        gf_StartReminderTimer();
        UISetButtonFaceHighlighted(PlayerGroupAll(), "RoachWarren", true);
        TriggerEnable(gt_ZergMakeRoachWarrenTargeting, true);
        TriggerEnable(gt_ZergMakeRoachWarrenBuildMenu, true);
        TriggerEnable(gt_ZergMakeRoachWarrenDroneSelection, true);
        TriggerExecute(gt_ZergMakeRoachWarrenDroneSelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenBuildOrder_Init () {
    gt_ZergMakeRoachWarrenBuildOrder = TriggerCreate("gt_ZergMakeRoachWarrenBuildOrder_Func");
    TriggerEnable(gt_ZergMakeRoachWarrenBuildOrder, false);
    TriggerAddEventUnitAbility(gt_ZergMakeRoachWarrenBuildOrder, null, AbilityCommand("ZergBuild", 13), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoachWarren Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachWarrenComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "RoachWarren"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergRoachWarren = EventUnitProgressUnit();
    gf_ZergMakeRoachWarrenCleanup();
    TriggerExecute(gt_ZergMakeRoachWarrenCompleteQ, true, true);
    TriggerExecute(gt_ZergMakeRoaches, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachWarrenComplete_Init () {
    gt_ZergMakeRoachWarrenComplete = TriggerCreate("gt_ZergMakeRoachWarrenComplete_Func");
    TriggerEnable(gt_ZergMakeRoachWarrenComplete, false);
    TriggerAddEventUnitConstructProgress(gt_ZergMakeRoachWarrenComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoaches_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SupplyHelperActivator, true);
    TriggerExecute(gt_ZergMakeRoachesCreateObjective, true, false);
    TriggerEnable(gt_ZergMakeRoachesReminder, true);
    TriggerEnable(gt_ZergMakeRoachesSupplyHelperDone, true);
    TriggerEnable(gt_ZergMakeRoachesFirstMorph, true);
    TriggerEnable(gt_ZergMakeRoachesComplete, true);
    TriggerExecute(gt_ZergMakeRoachesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoaches_Init () {
    gt_ZergMakeRoaches = TriggerCreate("gt_ZergMakeRoaches_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("LarvaTrain", 9), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Roach", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    TriggerEnable(gt_ZergMakeRoachesMorphStarted, true);
    TriggerEnable(gt_ZergMakeRoachesHatcherySelection, true);
    TriggerExecute(gt_ZergMakeRoachesHatcherySelection, true, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesQ_Init () {
    gt_ZergMakeRoachesQ = TriggerCreate("gt_ZergMakeRoachesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches SelectLarva Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesSelectLarvaQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeRoachesLarvaSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00205", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesSelectLarvaQ_Init () {
    gt_ZergMakeRoachesSelectLarvaQ = TriggerCreate("gt_ZergMakeRoachesSelectLarvaQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches ClickRoach Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesClickRoachQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_zergMakeRoachesLarvaSelected == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00206", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesClickRoachQ_Init () {
    gt_ZergMakeRoachesClickRoachQ = TriggerCreate("gt_ZergMakeRoachesClickRoachQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches DontWait Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesDontWaitQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00207", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesDontWaitQ_Init () {
    gt_ZergMakeRoachesDontWaitQ = TriggerCreate("gt_ZergMakeRoachesDontWaitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches MorphStarted Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesMorphStartedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesMorphStartedQ_Init () {
    gt_ZergMakeRoachesMorphStartedQ = TriggerCreate("gt_ZergMakeRoachesMorphStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesCompleteQ_Init () {
    gt_ZergMakeRoachesCompleteQ = TriggerCreate("gt_ZergMakeRoachesCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/7CDE83E3"), StringToText(""), c_objectiveStateActive, true);
    gv_zergMakeRoachesObjective = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesCreateObjective_Init () {
    gt_ZergMakeRoachesCreateObjective = TriggerCreate("gt_ZergMakeRoachesCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches UpdateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesUpdateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/060AA342", "A", IntToText(gv_zergMakeUnitCount));
    ObjectiveSetName(gv_zergMakeRoachesObjective, TextExpressionAssemble("Param/Expression/060AA342"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesUpdateObjective_Init () {
    gt_ZergMakeRoachesUpdateObjective = TriggerCreate("gt_ZergMakeRoachesUpdateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesCompleteObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetName(gv_zergMakeRoachesObjective, StringExternal("Param/Value/3A36710D"));
    ObjectiveSetState(gv_zergMakeRoachesObjective, c_objectiveStateCompleted);
    TriggerEnable(gt_ZergMakeRoachesUpdateObjective, false);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_zergMakeRoachesObjective);
    gv_zergMakeRoachesObjective = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesCompleteObjective_Init () {
    gt_ZergMakeRoachesCompleteObjective = TriggerCreate("gt_ZergMakeRoachesCompleteObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_supplyHelperActive == false))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerEnable(gt_ZergMakeRoachesFirstMorph, true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Roach", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    TriggerExecute(gt_ZergMakeRoachesSelectLarvaQ, true, false);
    TriggerExecute(gt_ZergMakeRoachesClickRoachQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesReminder_Init () {
    gt_ZergMakeRoachesReminder = TriggerCreate("gt_ZergMakeRoachesReminder_Func");
    TriggerEnable(gt_ZergMakeRoachesReminder, false);
    TriggerAddEventTimer(gt_ZergMakeRoachesReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches SupplyHelperDone
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesSupplyHelperDone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetReminderTimer();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Roach", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", true);
    TriggerEnable(gt_ZergMakeRoachesFirstMorph, true);
    TriggerExecute(gt_ZergMakeRoachesHatcherySelection, true, false);
    TriggerExecute(gt_ZergMakeRoachesMorphStarted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesSupplyHelperDone_Init () {
    gt_ZergMakeRoachesSupplyHelperDone = TriggerCreate("gt_ZergMakeRoachesSupplyHelperDone_Func");
    TriggerEnable(gt_ZergMakeRoachesSupplyHelperDone, false);
    TriggerAddEventGeneric(gt_ZergMakeRoachesSupplyHelperDone, "SupplyHelperDone");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches HatcherySelection
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesHatcherySelection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_UnitTypeIsSelected("Hatchery", gv_p01_USER) == true) || (libNtve_gf_UnitTypeIsSelected("Larva", gv_p01_USER) == true))) {
        UnitSetState(gv_zergHatchery, c_unitStateStatusBar, true);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
    }
    else {
        UnitSetState(gv_zergHatchery, c_unitStateStatusBar, false);
        gf_CreateLClickToSelectTag(gv_zergHatchery, 90);
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_zergHatchery), 1.0, libVCMI_ge_CampaginReticleSize_Large, "Ref_Target 01");
        gf_SetOffscreenUnit(gv_zergHatchery);
    }
    if ((libNtve_gf_UnitTypeIsSelected("Larva", gv_p01_USER) == true)) {
        if ((gv_zergMakeRoachesLarvaSelected == false)) {
            gv_zergMakeRoachesLarvaSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeRoachesReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
        if ((gv_zergMakeRoachesLarvaSelected == true)) {
            gv_zergMakeRoachesLarvaSelected = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ZergMakeRoachesReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesHatcherySelection_Init () {
    gt_ZergMakeRoachesHatcherySelection = TriggerCreate("gt_ZergMakeRoachesHatcherySelection_Func");
    TriggerEnable(gt_ZergMakeRoachesHatcherySelection, false);
    TriggerAddEventUnitSelected(gt_ZergMakeRoachesHatcherySelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ZergMakeRoachesHatcherySelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches MorphStarted
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesMorphStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_morphedCount;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_morphedCount = gv_zergMakeUnitCount;
    UnitGroupLoopBegin(UnitGroup("Egg", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(UnitGroupLoopCurrent(), 1, 1) == "Roach")) {
            lv_morphedCount += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_morphedCount >= 3)) {
        gf_StopReminderTimer();
        TriggerEnable(gt_ZergMakeRoachesHatcherySelection, false);
        TriggerStop(gt_ZergMakeRoachesFirstMorph);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
        TriggerExecute(gt_ZergMakeRoachesMorphStartedQ, true, true);
    }
    else {
        if ((PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) >= 75) && (PlayerGetPropertyInt(gv_p01_USER, c_playerPropVespene) >= 25) && (UnitGroupCount(UnitGroup("Larva", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            gf_StartReminderTimer();
            if ((TriggerIsEnabled(gt_ZergMakeRoachesHatcherySelection) == false)) {
                TriggerEnable(gt_ZergMakeRoachesHatcherySelection, true);
                TriggerExecute(gt_ZergMakeRoachesHatcherySelection, true, true);
            }
            else {
            }
        }
        else {
            gf_ResetReminderTimer();
            TriggerEnable(gt_ZergMakeRoachesHatcherySelection, false);
            gf_DestroyTutorialTextTag();
            gf_ClearAllTutorialReticles();
            gf_SetOffscreenUnit(null);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesMorphStarted_Init () {
    gt_ZergMakeRoachesMorphStarted = TriggerCreate("gt_ZergMakeRoachesMorphStarted_Func");
    TriggerEnable(gt_ZergMakeRoachesMorphStarted, false);
    TriggerAddEventPlayerPropChange(gt_ZergMakeRoachesMorphStarted, gv_p01_USER, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_ZergMakeRoachesMorphStarted, gv_p01_USER, c_playerPropVespene);
    TriggerAddEventUnitCreated(gt_ZergMakeRoachesMorphStarted, UnitRefFromVariable("gv_zergHatchery"), null, null);
    TriggerAddEventUnitAbility(gt_ZergMakeRoachesMorphStarted, null, AbilityCommand("LarvaTrain", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ZergMakeRoachesMorphStarted, null, AbilityCommand("LarvaTrain", 2), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ZergMakeRoachesMorphStarted, null, AbilityCommand("LarvaTrain", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ZergMakeRoachesMorphStarted, null, AbilityCommand("LarvaTrain", 9), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches FirstMorph
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesFirstMorph_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Roach", false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Larva", false);
    gf_ResetReminderTimer();
    if ((UnitGroupCount(UnitGroup("Larva", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (TriggerIsEnabled(gt_ZergMakeRoachesDontWaitQ) == true) && (gv_supplyHelperActive == false)) {
        Wait(3.0, c_timeGame);
        if ((UnitGroupCount(UnitGroup("Larva", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (TriggerIsEnabled(gt_ZergMakeRoachesDontWaitQ) == true) && (gv_supplyHelperActive == false)) {
            TriggerExecute(gt_ZergMakeRoachesDontWaitQ, true, true);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesFirstMorph_Init () {
    gt_ZergMakeRoachesFirstMorph = TriggerCreate("gt_ZergMakeRoachesFirstMorph_Func");
    TriggerEnable(gt_ZergMakeRoachesFirstMorph, false);
    TriggerAddEventUnitAbility(gt_ZergMakeRoachesFirstMorph, null, AbilityCommand("LarvaTrain", 9), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg MakeRoaches Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergMakeRoachesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Roach"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergMakeUnitCount += 1;
    TriggerExecute(gt_ZergMakeRoachesUpdateObjective, true, false);
    if ((gv_zergMakeUnitCount >= 3)) {
        TriggerExecute(gt_ZergMakeRoachesCompleteObjective, true, false);
        gf_ZergMakeRoachesCleanup();
        TriggerExecute(gt_ZergMakeRoachesCompleteQ, true, true);
        TriggerExecute(gt_ZergSelectArmy, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergMakeRoachesComplete_Init () {
    gt_ZergMakeRoachesComplete = TriggerCreate("gt_ZergMakeRoachesComplete_Func");
    TriggerEnable(gt_ZergMakeRoachesComplete, false);
    TriggerAddEventUnitCreated(gt_ZergMakeRoachesComplete, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg SelectArmy
//--------------------------------------------------------------------------------------------------
bool gt_ZergSelectArmy_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ZergSelectArmyComplete, true);
    TriggerEnable(gt_ZergSelectArmyReminderQ, true);
    TriggerExecute(gt_ZergSelectArmyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSelectArmy_Init () {
    gt_ZergSelectArmy = TriggerCreate("gt_ZergSelectArmy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg SelectArmy Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergSelectArmyQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_armySelected;

    // Variable Initialization
    lv_armySelected = true;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, gv_p01_USER, PointFromId(57));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(57), UnitLastCreatedGroup(), false, gv_p01_USER);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_p01_USER, PointFromId(58));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(58), UnitLastCreatedGroup(), false, gv_p01_USER);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_p01_USER, PointFromId(59));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(59), UnitLastCreatedGroup(), false, gv_p01_USER);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00118", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.5, c_timeGame);
    UnitKill(gv_zergBaseRocks);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gf_UnitIsArmyUnit(UnitGroupLoopCurrent()) == true) && (UnitIsSelected(UnitGroupLoopCurrent(), gv_p01_USER) == false)) {
            lv_armySelected = false;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_armySelected == true)) {
        TriggerExecute(gt_ZergSelectArmyComplete, true, false);
    }
    else {
        libVCUI_gf_ToggleArmyButtonFlashing(true);
        gf_ZergSelectArmyCreateF2Directive();
        gf_StartReminderTimer();
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSelectArmyQ_Init () {
    gt_ZergSelectArmyQ = TriggerCreate("gt_ZergSelectArmyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg SelectArmy Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergSelectArmyCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSelectArmyCompleteQ_Init () {
    gt_ZergSelectArmyCompleteQ = TriggerCreate("gt_ZergSelectArmyCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg SelectArmy Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergSelectArmyReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSelectArmyReminderQ_Init () {
    gt_ZergSelectArmyReminderQ = TriggerCreate("gt_ZergSelectArmyReminderQ_Func");
    TriggerEnable(gt_ZergSelectArmyReminderQ, false);
    TriggerAddEventTimer(gt_ZergSelectArmyReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg SelectArmy Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergSelectArmyComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_combatUnitsSelected;

    // Variable Initialization
    lv_combatUnitsSelected = true;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ZergSelectArmyCleanup();
    TriggerExecute(gt_ZergSelectArmyCompleteQ, true, true);
    TriggerExecute(gt_ZergAttack, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSelectArmyComplete_Init () {
    gt_ZergSelectArmyComplete = TriggerCreate("gt_ZergSelectArmyComplete_Func");
    TriggerEnable(gt_ZergSelectArmyComplete, false);
    libVCUI_gf_SelectArmyButtonUsed(gt_ZergSelectArmyComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttack_Func (bool testConds, bool runActions) {
    int auto29C067AF_ae;
    int auto29C067AF_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_p01_USER, RegionFromId(32));
    gv_zergAttackRevealer = VisRevealerLastCreated();
    CameraSetBounds(PlayerGroupAll(), RegionFromId(3), true);
    UnitIssueOrder(UnitFromId(54), Order(AbilityCommand("AiurTempleStoneGateDiagonalULBRRFLowered", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialAttackBeacon", 0, gv_p01_USER, PointFromId(546));
    gv_zergAttackBeacon = UnitLastCreated();
    gf_CreateAttackMoveTag(gv_zergAttackBeacon, 90);
    gf_SetOffscreenUnit(gv_zergAttackBeacon);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(39), Color(100.00, 0.00, 0.00), 0.0, 270.0);
    gv_ping = PingLastCreated();
    auto29C067AF_ae = 5;
    auto29C067AF_ai = 1;
    lv_i = 1;
    for ( ; ( (auto29C067AF_ai >= 0 && lv_i <= auto29C067AF_ae) || (auto29C067AF_ai <= 0 && lv_i >= auto29C067AF_ae) ) ; lv_i += auto29C067AF_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_p02_ENEMY, PointFromName(("ZergAttackMarine" + IntToString(lv_i))));
        UnitGroupAdd(gv_zergAttackEnemies, UnitLastCreated());
    }
    TriggerExecute(gt_ZergAttackCreateObjective, true, false);
    TriggerEnable(gt_ZergAttackAttackOrder, true);
    TriggerEnable(gt_ZergAttackSelectionReminder, true);
    TriggerEnable(gt_ZergAttackUnitDeath, true);
    TriggerEnable(gt_ZergAttackApproachMarines, true);
    TriggerEnable(gt_ZergAttackReminderQ, true);
    TriggerEnable(gt_ZergAttackComplete, true);
    TriggerExecute(gt_ZergAttackQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttack_Init () {
    gt_ZergAttack = TriggerCreate("gt_ZergAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackQ_Init () {
    gt_ZergAttackQ = TriggerCreate("gt_ZergAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Wipe Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackWipeQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, gv_p01_USER, PointFromId(57));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(57), UnitLastCreatedGroup(), false, gv_p01_USER);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_p01_USER, PointFromId(58));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(58), UnitLastCreatedGroup(), false, gv_p01_USER);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_p01_USER, PointFromId(59));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(59), UnitLastCreatedGroup(), false, gv_p01_USER);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00121", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    CameraPan(gv_p01_USER, PointFromId(58), 2.0, -1, 10.0, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerEnable(gt_ZergAttackUnitDeath, true);
    TriggerExecute(gt_ZergAttackUnitDeath, false, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackWipeQ_Init () {
    gt_ZergAttackWipeQ = TriggerCreate("gt_ZergAttackWipeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackCompleteQ_Init () {
    gt_ZergAttackCompleteQ = TriggerCreate("gt_ZergAttackCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00122", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackReminderQ_Init () {
    gt_ZergAttackReminderQ = TriggerCreate("gt_ZergAttackReminderQ_Func");
    TriggerEnable(gt_ZergAttackReminderQ, false);
    TriggerAddEventTimer(gt_ZergAttackReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack CreateObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackCreateObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/99D5CDF1"), StringToText(""), c_objectiveStateActive, true);
    gv_zergAttackObjective = ObjectiveLastCreated();
    TriggerEnable(gt_ZergAttackCompleteObjective, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackCreateObjective_Init () {
    gt_ZergAttackCreateObjective = TriggerCreate("gt_ZergAttackCreateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack ApproachMarines
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackApproachMarines_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_p01_USER))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() == gv_p02_ENEMY))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_SendTransmissionCampaign(UnitGroupUnit(gv_zergAttackEnemies, 1), "Tutorial_SC2Core|Line00167", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackApproachMarines_Init () {
    gt_ZergAttackApproachMarines = TriggerCreate("gt_ZergAttackApproachMarines_Func");
    TriggerEnable(gt_ZergAttackApproachMarines, false);
    TriggerAddEventUnitDamaged(gt_ZergAttackApproachMarines, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack UnitDeath
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackUnitDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Zergling", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Roach", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gf_StopReminderTimer();
        TriggerExecute(gt_ZergAttackWipeQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackUnitDeath_Init () {
    gt_ZergAttackUnitDeath = TriggerCreate("gt_ZergAttackUnitDeath_Func");
    TriggerEnable(gt_ZergAttackUnitDeath, false);
    TriggerAddEventUnitDied(gt_ZergAttackUnitDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack AttackOrder
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackAttackOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint) && (DistanceBetweenPoints(PointFromId(546), OrderGetTargetPoint(EventUnitOrder())) < 2.0)) || ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint) && (PointGetX(OrderGetTargetPoint(EventUnitOrder())) < PointGetX(PointFromId(546))) && (PointGetY(OrderGetTargetPoint(EventUnitOrder())) > PointGetY(PointFromId(546)))))) {
        gf_StopReminderTimer();
        if ((UnitIsAlive(gv_zergAttackBeacon) == true)) {
            PingDestroy(gv_ping);
            UnitKill(gv_zergAttackBeacon);
            gv_zergAttackBeacon = null;
        }
        else {
        }
        gf_DestroyTutorialTextTag();
        gf_SetOffscreenUnit(null);
    }
    else {
        gf_StartReminderTimer();
        if ((UnitIsAlive(gv_zergAttackBeacon) == false)) {
            PingDestroy(gv_ping);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(546), Color(100.00, 0.00, 0.00), 0.0, 270.0);
            gv_ping = PingLastCreated();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialAttackBeacon", 0, gv_p01_USER, PointFromId(546));
            gv_zergAttackBeacon = UnitLastCreated();
        }
        else {
        }
        gf_CreateAttackMoveTag(gv_zergAttackBeacon, 90);
        gf_SetOffscreenUnit(gv_zergAttackBeacon);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackAttackOrder_Init () {
    gt_ZergAttackAttackOrder = TriggerCreate("gt_ZergAttackAttackOrder_Func");
    TriggerEnable(gt_ZergAttackAttackOrder, false);
    TriggerAddEventUnitOrder(gt_ZergAttackAttackOrder, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack SelectionReminder
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackSelectionReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_armySelected;

    // Variable Initialization
    lv_armySelected = true;

    // Conditions
    if (testConds) {
        if (!((GameIsMissionTimePaused() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gf_UnitIsArmyUnit(UnitGroupLoopCurrent()) == true) && (UnitIsSelected(UnitGroupLoopCurrent(), gv_p01_USER) == false)) {
            lv_armySelected = false;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_armySelected == true)) {
        if ((gv_zergSelectArmyF2Directive != c_invalidDialogId)) {
            DialogDestroy(gv_zergSelectArmyF2Directive);
            gv_zergSelectArmyF2Directive = c_invalidDialogId;
            libVCUI_gf_ToggleArmyButtonFlashing(false);
        }
        else {
        }
    }
    else {
        if ((gv_zergSelectArmyF2Directive == c_invalidDialogId)) {
            gf_ZergSelectArmyCreateF2Directive();
            libVCUI_gf_ToggleArmyButtonFlashing(true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackSelectionReminder_Init () {
    gt_ZergAttackSelectionReminder = TriggerCreate("gt_ZergAttackSelectionReminder_Func");
    TriggerEnable(gt_ZergAttackSelectionReminder, false);
    TriggerAddEventTimePeriodic(gt_ZergAttackSelectionReminder, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ENEMY))) {
            return false;
        }

        if (!((UnitGroupCount(gv_zergAttackEnemies, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ZergAttackCleanup();
    TriggerExecute(gt_ZergAttackCompleteQ, true, true);
    TriggerExecute(gt_ZergAttackBase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackComplete_Init () {
    gt_ZergAttackComplete = TriggerCreate("gt_ZergAttackComplete_Func");
    TriggerEnable(gt_ZergAttackComplete, false);
    TriggerAddEventUnitDied(gt_ZergAttackComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBase_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p02_ENEMY, PointWithOffset(PointFromId(35), -0.3, 2.7));
    UnitGroupAdd(gv_zergAttackEnemies, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p02_ENEMY, PointWithOffset(PointFromId(35), 1.0, 4.0));
    UnitGroupAdd(gv_zergAttackEnemies, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p02_ENEMY, PointWithOffset(PointFromId(35), 0.5, 3.0));
    UnitGroupAdd(gv_zergAttackEnemies, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_p02_ENEMY, PointWithOffset(PointFromId(35), 0.7, 3.5));
    UnitGroupAdd(gv_zergAttackEnemies, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", 0, gv_p02_ENEMY, PointFromId(35));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_p02_ENEMY, PointFromId(36));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", 0, gv_p02_ENEMY, PointFromId(26));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -6.5, 3.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -5.5, 5.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -4.5, 6.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -1.5, 6.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(12, "SCV", 0, gv_p02_ENEMY, PointWithOffset(PointFromId(26), -3.0, 3.0));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointWithOffset(PointFromId(26), -3.0, 3.0))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialAttackBeacon", 0, gv_p01_USER, PointFromId(56));
    gv_zergAttackBeacon = UnitLastCreated();
    gf_CreateAttackMoveTag(gv_zergAttackBeacon, 90);
    gf_SetOffscreenUnit(gv_zergAttackBeacon);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(56), Color(100.00, 0.00, 0.00), 0.0, 270.0);
    gv_ping = PingLastCreated();
    TriggerEnable(gt_ZergAttackBaseRevealer, true);
    TriggerEnable(gt_ZergAttackBaseApproachMarines, true);
    TriggerEnable(gt_ZergAttackBaseUnitDeath, true);
    TriggerEnable(gt_ZergAttackBaseSelectionReminder, true);
    TriggerEnable(gt_ZergAttackBaseAttackOrder, true);
    TriggerEnable(gt_ZergAttackBaseReminderQ, true);
    TriggerEnable(gt_ZergAttackBaseComplete, true);
    TriggerExecute(gt_ZergAttackBaseQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBase_Init () {
    gt_ZergAttackBase = TriggerCreate("gt_ZergAttackBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00123", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseQ_Init () {
    gt_ZergAttackBaseQ = TriggerCreate("gt_ZergAttackBaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase Wipe Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseWipeQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, gv_p01_USER, PointFromId(57));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(57), UnitLastCreatedGroup(), false, gv_p01_USER);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_p01_USER, PointFromId(58));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(58), UnitLastCreatedGroup(), false, gv_p01_USER);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_p01_USER, PointFromId(59));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(59), UnitLastCreatedGroup(), false, gv_p01_USER);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00124", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    CameraPan(gv_p01_USER, PointFromId(58), 2.0, -1, 10.0, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerEnable(gt_ZergAttackBaseUnitDeath, true);
    TriggerExecute(gt_ZergAttackBaseUnitDeath, false, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseWipeQ_Init () {
    gt_ZergAttackBaseWipeQ = TriggerCreate("gt_ZergAttackBaseWipeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00125", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.5, c_timeGame);
    PortraitForceTransition(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), true, false);
    Wait(0.25, c_timeGame);
    PortraitForceTransition(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), false, false);
    Wait(1.6, c_timeGame);
    PortraitForceTransition(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), true, false);
    Wait(0.35, c_timeGame);
    PortraitForceTransition(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), false, false);
    Wait(1.7, c_timeGame);
    PortraitForceTransition(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), true, false);
    Wait(0.6, c_timeGame);
    PortraitForceTransition(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), false, false);
    Wait(1.2, c_timeGame);
    PortraitForceTransition(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00126", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseCompleteQ_Init () {
    gt_ZergAttackBaseCompleteQ = TriggerCreate("gt_ZergAttackBaseCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00127", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseReminderQ_Init () {
    gt_ZergAttackBaseReminderQ = TriggerCreate("gt_ZergAttackBaseReminderQ_Func");
    TriggerEnable(gt_ZergAttackBaseReminderQ, false);
    TriggerAddEventTimer(gt_ZergAttackBaseReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack CompleteObjective
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackCompleteObjective_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_zergAttackObjective, c_objectiveStateCompleted);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_zergAttackObjective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackCompleteObjective_Init () {
    gt_ZergAttackCompleteObjective = TriggerCreate("gt_ZergAttackCompleteObjective_Func");
    TriggerEnable(gt_ZergAttackCompleteObjective, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase Revealer
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseRevealer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCount(null, gv_p01_USER, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) >= 1)) {
        if ((gv_zergAttackBaseRevealer == null)) {
            VisRevealerCreate(gv_p01_USER, RegionFromId(38));
            gv_zergAttackBaseRevealer = VisRevealerLastCreated();
        }
        else {
        }
    }
    else {
        if ((gv_zergAttackBaseRevealer != null)) {
            VisRevealerDestroy(gv_zergAttackBaseRevealer);
            gv_zergAttackBaseRevealer = null;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseRevealer_Init () {
    gt_ZergAttackBaseRevealer = TriggerCreate("gt_ZergAttackBaseRevealer_Func");
    TriggerEnable(gt_ZergAttackBaseRevealer, false);
    TriggerAddEventUnitRegion(gt_ZergAttackBaseRevealer, null, RegionFromId(38), true);
    TriggerAddEventUnitRegion(gt_ZergAttackBaseRevealer, null, RegionFromId(38), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase ApproachMarines
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseApproachMarines_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_p02_ENEMY))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_SendTransmissionCampaign(UnitGroupUnit(gv_zergAttackEnemies, 1), "Tutorial_SC2Core|Line00163", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseApproachMarines_Init () {
    gt_ZergAttackBaseApproachMarines = TriggerCreate("gt_ZergAttackBaseApproachMarines_Func");
    TriggerEnable(gt_ZergAttackBaseApproachMarines, false);
    TriggerAddEventUnitDamaged(gt_ZergAttackBaseApproachMarines, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase UnitDeath
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseUnitDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Zergling", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Roach", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gf_StopReminderTimer();
        TriggerExecute(gt_ZergAttackBaseWipeQ, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseUnitDeath_Init () {
    gt_ZergAttackBaseUnitDeath = TriggerCreate("gt_ZergAttackBaseUnitDeath_Func");
    TriggerEnable(gt_ZergAttackBaseUnitDeath, false);
    TriggerAddEventUnitDied(gt_ZergAttackBaseUnitDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase AttackOrder
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseAttackOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint) && (DistanceBetweenPoints(PointFromId(56), OrderGetTargetPoint(EventUnitOrder())) < 2.0)) || ((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("attack", 0)) && (OrderGetTargetType(EventUnitOrder()) == c_orderTargetPoint) && (PointGetX(OrderGetTargetPoint(EventUnitOrder())) < PointGetX(PointFromId(56))) && (PointGetY(OrderGetTargetPoint(EventUnitOrder())) < PointGetY(PointFromId(56)))))) {
        gf_StopReminderTimer();
        if ((UnitIsAlive(gv_zergAttackBeacon) == true)) {
            PingDestroy(gv_ping);
            UnitKill(gv_zergAttackBeacon);
            gv_zergAttackBeacon = null;
        }
        else {
        }
        gf_DestroyTutorialTextTag();
        gf_SetOffscreenUnit(null);
    }
    else {
        gf_StartReminderTimer();
        if ((UnitIsAlive(gv_zergAttackBeacon) == false)) {
            PingDestroy(gv_ping);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(56), Color(100.00, 0.00, 0.00), 0.0, 270.0);
            gv_ping = PingLastCreated();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialAttackBeacon", 0, gv_p01_USER, PointFromId(56));
            gv_zergAttackBeacon = UnitLastCreated();
        }
        else {
        }
        gf_CreateAttackMoveTag(gv_zergAttackBeacon, 90);
        gf_SetOffscreenUnit(gv_zergAttackBeacon);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseAttackOrder_Init () {
    gt_ZergAttackBaseAttackOrder = TriggerCreate("gt_ZergAttackBaseAttackOrder_Func");
    TriggerEnable(gt_ZergAttackBaseAttackOrder, false);
    TriggerAddEventUnitOrder(gt_ZergAttackBaseAttackOrder, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase SelectionReminder
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseSelectionReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_armySelected;

    // Variable Initialization
    lv_armySelected = true;

    // Conditions
    if (testConds) {
        if (!((GameIsMissionTimePaused() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gf_UnitIsArmyUnit(UnitGroupLoopCurrent()) == true) && (UnitIsSelected(UnitGroupLoopCurrent(), gv_p01_USER) == false)) {
            lv_armySelected = false;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_armySelected == true)) {
        if ((gv_zergSelectArmyF2Directive != c_invalidDialogId)) {
            DialogDestroy(gv_zergSelectArmyF2Directive);
            gv_zergSelectArmyF2Directive = c_invalidDialogId;
            libVCUI_gf_ToggleArmyButtonFlashing(false);
        }
        else {
        }
    }
    else {
        if ((gv_zergSelectArmyF2Directive == c_invalidDialogId)) {
            gf_ZergSelectArmyCreateF2Directive();
            libVCUI_gf_ToggleArmyButtonFlashing(true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseSelectionReminder_Init () {
    gt_ZergAttackBaseSelectionReminder = TriggerCreate("gt_ZergAttackBaseSelectionReminder_Func");
    TriggerEnable(gt_ZergAttackBaseSelectionReminder, false);
    TriggerAddEventTimePeriodic(gt_ZergAttackBaseSelectionReminder, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AttackBase Complete
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackBaseComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ENEMY))) {
            return false;
        }

        if (!((UnitGroupCount(gv_zergAttackEnemies, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ZergAttackBaseCleanup();
    TriggerExecute(gt_ZergAttackBaseCompleteQ, true, true);
    TriggerExecute(gt_ZergAttackCompleteObjective, true, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ZergCleanup, true, true);
    if ((gv_tutorialProgress < 3)) {
        gv_tutorialProgress = 3;
        BankValueSetFromInt(gv_tutorialBankSave, "General", "Progress", gv_tutorialProgress);
        BankSave(gv_tutorialBankSave);
    }
    else {
    }
    gv_selectedStage = 4;
    gf_UpdateVictoryScreen();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    DialogSetVisible(gv_victoryUI, PlayerGroupAll(), true);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackBaseComplete_Init () {
    gt_ZergAttackBaseComplete = TriggerCreate("gt_ZergAttackBaseComplete_Func");
    TriggerEnable(gt_ZergAttackBaseComplete, false);
    TriggerAddEventUnitDied(gt_ZergAttackBaseComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cinematic Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCinematicQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ZergIntroCinematicSetup, true, true);
    TriggerExecute(gt_ZergIntroCinematic, true, true);
    TriggerExecute(gt_ZergIntroCinematicEnd, true, true);
    TriggerExecute(gt_ZergIntroCinematicCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCinematicQ_Init () {
    gt_ZergIntroCinematicQ = TriggerCreate("gt_ZergIntroCinematicQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cinematic Setup
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCinematicSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_p01_USER, RegionFromId(35));
    gv_startingAreaRevealer = VisRevealerLastCreated();
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits3, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits3 = UnitGroupEmpty();
    gv_cinematicTempUnits3 = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits3);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits3);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleRockEx16x6", c_unitCreateIgnorePlacement, 0, PointFromId(60));
    gv_zergBaseRocks = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_zergBaseRocks, true);
    UnitSetState(gv_zergBaseRocks, c_unitStateTargetable, false);
    UnitSetState(gv_zergBaseRocks, c_unitStateSelectable, false);
    UnitSetState(gv_zergBaseRocks, c_unitStateTooltipable, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(24)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(25)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(26)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(27)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VespeneGeyser", 0, 0, RegionGetCenter(RegionFromId(28)));
    gv_zergExtractor = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", c_unitCreateConstruct, gv_p01_USER, RegionGetCenter(RegionFromId(23)));
    gv_zergHatchery = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 9.0, 0.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 1.91, 3.59));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 1.44, 4.66));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 5.84, 2.29));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 3.14, 3.24));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 3.6, 4.41));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 4.86, 3.21));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 4.17, 2.33));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 3.72, 1.41));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 2.44, 2.03));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DroneBurrowed", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(23)), 0.64, 3.49));
    UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleRockEx14x4", c_unitCreateIgnorePlacement, 0, PointFromId(111));
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    gv_protossBaseRocks = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCinematicSetup_Init () {
    gt_ZergIntroCinematicSetup = TriggerCreate("gt_ZergIntroCinematicSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_portrait;

    // Variable Initialization
    lv_portrait = c_invalidPortraitId;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(gv_p01_USER, PointFromId(19), 0.0, -1, 10.0, false);
    GameSetLighting("AiurTempleJungle", 0.0);
    FogSetEnabled(false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted3 = false;
    CinematicFade(true, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    CutsceneCreateNoPosition("Cutscenes\\Cutscene_TutorialZergIntro.SC2Cutscene", PlayerGroupAll(), true);
    gv_zergCinematicCutscene = CutsceneLastCreated();
    Wait(10.5, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00087", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.5, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00088", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitSetProgressComplete(gv_zergHatchery, 1, 85);
    UnitGroupLoopBegin(gv_zergStartingDrones);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowDroneUp", 0)), c_orderQueueReplace);
        Wait(0.35, c_timeGame);
        UnitSetOwner(UnitGroupLoopCurrent(), gv_p01_USER, true);
    }
    UnitGroupLoopEnd();
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_zergHatchery, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointWithOffset(RegionGetCenter(RegionFromId(23)), 5.0, 5.0))), c_orderQueueReplace);
    UnitIssueOrder(gv_zergHatchery, OrderTargetingPoint(AbilityCommand("RallyHatchery", 0), PointWithOffset(RegionGetCenter(RegionFromId(23)), -5.0, 0.0)), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_zergStartingDrones);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(23)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitGroupLoopCurrent()))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    gv_cinematicCompleted3 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCinematic_Init () {
    gt_ZergIntroCinematic = TriggerCreate("gt_ZergIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted3 == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCinematicEnd_Init () {
    gt_ZergIntroCinematicEnd = TriggerCreate("gt_ZergIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cinematic Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCinematicCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    UnitGroupLoopBegin(gv_cinematicTempUnits3);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits3);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits3);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    if ((gv_cinematicCompleted3 == true)) {
        lv_fadeDuration = 0.0;
        UnitGroupLoopBegin(gv_zergStartingDrones);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_InfoTextCreate(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
        GameSetLighting("AiurTempleJungle", 0.0);
        FogSetEnabled(true);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
        UnitGroupLoopBegin(gv_zergStartingDrones);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 1.91, 3.59));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 1.44, 4.66));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 5.84, 2.29));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 3.14, 3.24));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 3.6, 4.41));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 4.86, 3.21));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 4.17, 2.33));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 3.72, 1.41));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 2.44, 2.03));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), 0.64, 3.49));
        UnitGroupAdd(gv_zergStartingDrones, UnitLastCreated());
        UnitGroupLoopBegin(gv_zergStartingDrones);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(23)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitGroupLoopCurrent()))), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        UnitRemove(gv_zergHatchery);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", 0, 1, RegionGetCenter(RegionFromId(23)));
        gv_zergHatchery = UnitLastCreated();
        UnitIssueOrder(gv_zergHatchery, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointWithOffset(RegionGetCenter(RegionFromId(23)), 5.0, 5.0))), c_orderQueueReplace);
        UnitIssueOrder(gv_zergHatchery, OrderTargetingPoint(AbilityCommand("RallyHatchery", 0), PointWithOffset(RegionGetCenter(RegionFromId(23)), -5.0, 0.0)), c_orderQueueReplace);
        lv_fadeDuration = 1.0;
        CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        Wait(0.0625, c_timeGame);
        CutsceneStop(gv_zergCinematicCutscene);
        CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
        Wait(0.0625, c_timeGame);
        libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(19), lv_fadeDuration);
    }
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCinematicCleanup_Init () {
    gt_ZergIntroCinematicCleanup = TriggerCreate("gt_ZergIntroCinematicCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Intro Cinematic Cutscene Helper
//--------------------------------------------------------------------------------------------------
bool gt_ZergIntroCinematicCutsceneHelper_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("AiurTempleJungle", 0.0);
    FogSetEnabled(true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergIntroCinematicCutsceneHelper_Init () {
    gt_ZergIntroCinematicCutsceneHelper = TriggerCreate("gt_ZergIntroCinematicCutsceneHelper_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_ZergIntroCinematicCutsceneHelper, c_cutsceneNone, "ZergGameView");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_ProtossCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ProtossFailstate, false);
    if ((TriggerIsEnabled(gt_FriendlyFireHelperUnpauser) == true)) {
        TriggerExecute(gt_FriendlyFireHelperUnpauser, false, false);
    }
    else {
    }
    gv_protossBaseFound = false;
    gv_protossIdleZerg = null;
    UnitRemove(gv_protossBaseRocks);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p02_ENEMY, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ZergBuildingDies6") == true)) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies6", 1);
        }
        else {
        }
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ZergBuildingDies9") == true)) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "ZergBuildingDies9", 1);
        }
        else {
        }
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("VespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    CameraSetBounds(PlayerGroupAll(), RegionEntireMap(), true);
    VisRevealerDestroy(gv_startingAreaRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossCleanup_Init () {
    gt_ProtossCleanup = TriggerCreate("gt_ProtossCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Initialization
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogPanel;

    // Variable Initialization
    lv_dialogPanel = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentStage = 4;
    TriggerEnable(gt_FriendlyFireHelper, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    PlayerSetColorIndex(gv_p01_USER, 5, true);
    PlayerSetColorIndex(gv_p02_ENEMY, 1, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(9), true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Aiur_Jungle_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("GatewayTrain", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("GatewayTrain", 5), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("GatewayTrain", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("GatewayTrain", 3), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("GatewayTrain", 4), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("GatewayTrain", 6), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("UpgradeToWarpGate", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 2), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 3), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 4), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 21), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 14), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 7), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 24), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 10), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 9), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 13), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 11), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 5), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 12), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CyberneticsCoreResearch", 3), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CyberneticsCoreResearch", 4), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CyberneticsCoreResearch", 5), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CyberneticsCoreResearch", 0), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CyberneticsCoreResearch", 1), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CyberneticsCoreResearch", 2), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CyberneticsCoreResearch", 9), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("CyberneticsCoreResearch", 6), false);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("Blink", 0), false);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_p01_USER, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TriggerEnable(gt_ProtossFailstate, true);
    TriggerExecute(gt_ProtossIntroCinematicQ, true, true);
    TriggerExecute(gt_ProtossInfestedTerrans, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInitialization_Init () {
    gt_ProtossInitialization = TriggerCreate("gt_ProtossInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Failstate
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFailstate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnit() == gv_protossNexus) || ((UnitGetType(EventUnit()) == "Stalker") && (UnitGroupCount(gv_protossStartingStalkers, c_unitCountAlive) == 0) && (gv_protossBaseFound == false)))) {
        GameOver(gv_p01_USER, c_gameOverDefeat, true, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFailstate_Init () {
    gt_ProtossFailstate = TriggerCreate("gt_ProtossFailstate_Func");
    TriggerEnable(gt_ProtossFailstate, false);
    TriggerAddEventUnitDied(gt_ProtossFailstate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerrans_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ProtossInfestedTerransReminderQ, true);
    TriggerEnable(gt_ProtossInfestedTerransComplete, true);
    TriggerEnable(gt_ProtossInfestedTerransAggroInfested, true);
    TriggerExecute(gt_ProtossInfestedTerransQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerrans_Init () {
    gt_ProtossInfestedTerrans = TriggerCreate("gt_ProtossInfestedTerrans_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerransQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UnitGroupSelect(gv_protossStartingStalkers, gv_p01_USER, true);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_ProtossInfestedTerransMakeObj, true, false);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00131", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_SetOffscreenPoint(PointFromId(26));
    TriggerEnable(gt_ProtossInfestedTerransAttackOrder, true);
    TriggerExecute(gt_ProtossInfestedTerransAttackOrder, false, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerransQ_Init () {
    gt_ProtossInfestedTerransQ = TriggerCreate("gt_ProtossInfestedTerransQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans Infested Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerransInfestedQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libNtve_gf_AttachModelToUnit(UnitGroupUnit(gv_protossInfestedTerrans, 3), "TalkIconBubble", "Ref_Overhead");
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(UnitGroupUnit(gv_protossInfestedTerrans, 3), true, false, "Talk"), c_invalidPortraitId, SoundLink("TutorialInfestedLine", -1), 0.0, c_transmissionDurationAdd, true);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerransInfestedQ_Init () {
    gt_ProtossInfestedTerransInfestedQ = TriggerCreate("gt_ProtossInfestedTerransInfestedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerransCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(54), Order(AbilityCommand("AiurTempleStoneGateDiagonalULBRRFLowered", 0)), c_orderQueueReplace);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00176", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerransCompleteQ_Init () {
    gt_ProtossInfestedTerransCompleteQ = TriggerCreate("gt_ProtossInfestedTerransCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerransReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00133", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerransReminderQ_Init () {
    gt_ProtossInfestedTerransReminderQ = TriggerCreate("gt_ProtossInfestedTerransReminderQ_Func");
    TriggerEnable(gt_ProtossInfestedTerransReminderQ, false);
    TriggerAddEventTimer(gt_ProtossInfestedTerransReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans MakeObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerransMakeObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/C25963A3"), StringToText(""), c_objectiveStateActive, true);
    gv_protossInfestedTerransObj = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerransMakeObj_Init () {
    gt_ProtossInfestedTerransMakeObj = TriggerCreate("gt_ProtossInfestedTerransMakeObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans CompleteObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerransCompleteObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_protossInfestedTerransObj, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_protossInfestedTerransObj);
    gv_protossInfestedTerransObj = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerransCompleteObj_Init () {
    gt_ProtossInfestedTerransCompleteObj = TriggerCreate("gt_ProtossInfestedTerransCompleteObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans AttackOrder
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerransAttackOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validOrder;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_protossStartingStalkers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("attack", 0)) && (OrderGetTargetType(UnitOrder(UnitGroupLoopCurrent(), 0)) == c_orderTargetUnit) && (UnitGetOwner(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0))) == gv_p02_ENEMY)) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("attack", 0)) && (OrderGetTargetType(UnitOrder(UnitGroupLoopCurrent(), 0)) == c_orderTargetPoint) && (DistanceBetweenPoints(PointFromId(61), OrderGetTargetPoint(UnitOrder(UnitGroupLoopCurrent(), 0))) < 4.0)) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("attack", 0)) && (OrderGetTargetType(UnitOrder(UnitGroupLoopCurrent(), 0)) == c_orderTargetPoint) && (PointGetX(OrderGetTargetPoint(UnitOrder(UnitGroupLoopCurrent(), 0))) > PointGetX(PointFromId(61)))))) {
            lv_validOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validOrder == true)) {
        gf_StopReminderTimer();
        if ((UnitIsAlive(gv_protossAttackBeacon) == true)) {
            PingDestroy(gv_ping);
            UnitKill(gv_protossAttackBeacon);
            gv_protossAttackBeacon = null;
        }
        else {
        }
        gf_DestroyTutorialTextTag();
    }
    else {
        gf_StartReminderTimer();
        if ((UnitIsAlive(gv_protossAttackBeacon) == false)) {
            PingDestroy(gv_ping);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(61), Color(100.00, 0.00, 0.00), 0.0, 270.0);
            gv_ping = PingLastCreated();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TutorialAttackBeacon", 0, gv_p01_USER, PointFromId(61));
            gv_protossAttackBeacon = UnitLastCreated();
        }
        else {
        }
        gf_CreateAttackMoveTag(gv_protossAttackBeacon, 90);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerransAttackOrder_Init () {
    gt_ProtossInfestedTerransAttackOrder = TriggerCreate("gt_ProtossInfestedTerransAttackOrder_Func");
    TriggerEnable(gt_ProtossInfestedTerransAttackOrder, false);
    TriggerAddEventUnitAbility(gt_ProtossInfestedTerransAttackOrder, null, AbilityCommand("attack", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans AggroInfested
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerransAggroInfested_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_p02_ENEMY))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ProtossInfestedTerransInfestedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerransAggroInfested_Init () {
    gt_ProtossInfestedTerransAggroInfested = TriggerCreate("gt_ProtossInfestedTerransAggroInfested_Func");
    TriggerEnable(gt_ProtossInfestedTerransAggroInfested, false);
    TriggerAddEventUnitDamaged(gt_ProtossInfestedTerransAggroInfested, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss InfestedTerrans Complete
//--------------------------------------------------------------------------------------------------
bool gt_ProtossInfestedTerransComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ENEMY))) {
            return false;
        }

        if (!((UnitGroupCount(gv_protossInfestedTerrans, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ProtossInfestedTerransCleanup();
    TriggerExecute(gt_ProtossInfestedTerransCompleteObj, true, false);
    TriggerExecute(gt_ProtossInfestedTerransCompleteQ, true, true);
    TriggerExecute(gt_ProtossZergEggs, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossInfestedTerransComplete_Init () {
    gt_ProtossInfestedTerransComplete = TriggerCreate("gt_ProtossInfestedTerransComplete_Func");
    TriggerEnable(gt_ProtossInfestedTerransComplete, false);
    TriggerAddEventUnitDied(gt_ProtossInfestedTerransComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss ZergEggs
//--------------------------------------------------------------------------------------------------
bool gt_ProtossZergEggs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerDestroy(gv_startingAreaRevealer);
    TriggerEnable(gt_ProtossZergEggsReminderQ, true);
    TriggerEnable(gt_ProtossZergEggsReminderReset, true);
    TriggerEnable(gt_ProtossZergEggsComplete, true);
    TriggerExecute(gt_ProtossZergEggsMakeObj, true, false);
    TriggerExecute(gt_ProtossZergEggsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossZergEggs_Init () {
    gt_ProtossZergEggs = TriggerCreate("gt_ProtossZergEggs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss ZergEggs Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossZergEggsQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Protoss", c_unitCreateIgnorePlacement, gv_p01_USER, RegionGetCenter(RegionFromId(6)));
    gv_protossFindBaseBeacon = UnitLastCreated();
    UnitSetState(gv_protossFindBaseBeacon, c_unitStateTargetable, false);
    UnitSetState(gv_protossFindBaseBeacon, c_unitStateSelectable, false);
    gf_SetOffscreenPoint(RegionGetCenter(RegionFromId(6)));
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00135", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossZergEggsQ_Init () {
    gt_ProtossZergEggsQ = TriggerCreate("gt_ProtossZergEggsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss ZergEggs Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossZergEggsCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    VisRevealerCreate(gv_p01_USER, RegionFromId(35));
    gv_startingAreaRevealer = VisRevealerLastCreated();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00136", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    VisRevealerDestroy(gv_startingAreaRevealer);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossZergEggsCompleteQ_Init () {
    gt_ProtossZergEggsCompleteQ = TriggerCreate("gt_ProtossZergEggsCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss ZergEggs Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossZergEggsReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00137", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossZergEggsReminderQ_Init () {
    gt_ProtossZergEggsReminderQ = TriggerCreate("gt_ProtossZergEggsReminderQ_Func");
    TriggerEnable(gt_ProtossZergEggsReminderQ, false);
    TriggerAddEventTimer(gt_ProtossZergEggsReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss ZergEggs MakeObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossZergEggsMakeObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/25045940"), StringToText(""), c_objectiveStateActive, true);
    gv_protossZergEggsObj = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossZergEggsMakeObj_Init () {
    gt_ProtossZergEggsMakeObj = TriggerCreate("gt_ProtossZergEggsMakeObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss ZergEggs CompleteObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossZergEggsCompleteObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_protossZergEggsObj, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_protossZergEggsObj);
    gv_protossZergEggsObj = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossZergEggsCompleteObj_Init () {
    gt_ProtossZergEggsCompleteObj = TriggerCreate("gt_ProtossZergEggsCompleteObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss ZergEggs ReminderReset
//--------------------------------------------------------------------------------------------------
bool gt_ProtossZergEggsReminderReset_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ResetReminderTimer();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossZergEggsReminderReset_Init () {
    gt_ProtossZergEggsReminderReset = TriggerCreate("gt_ProtossZergEggsReminderReset_Func");
    TriggerEnable(gt_ProtossZergEggsReminderReset, false);
    TriggerAddEventUnitRegion(gt_ProtossZergEggsReminderReset, null, RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss ZergEggs Complete
//--------------------------------------------------------------------------------------------------
bool gt_ProtossZergEggsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Beacon_Protoss"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ProtossZergEggsCleanup();
    TriggerExecute(gt_ProtossZergEggsCompleteObj, true, false);
    TriggerExecute(gt_ProtossZergEggsCompleteQ, true, true);
    TriggerExecute(gt_ProtossFindBase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossZergEggsComplete_Init () {
    gt_ProtossZergEggsComplete = TriggerCreate("gt_ProtossZergEggsComplete_Func");
    TriggerEnable(gt_ProtossZergEggsComplete, false);
    TriggerAddEventUnitRegion(gt_ProtossZergEggsComplete, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss FindBase
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFindBase_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ProtossFindBaseReminderQ, true);
    TriggerEnable(gt_ProtossFindBaseComplete, true);
    TriggerExecute(gt_ProtossFindBaseMakeObj, true, false);
    TriggerExecute(gt_ProtossFindBaseQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFindBase_Init () {
    gt_ProtossFindBase = TriggerCreate("gt_ProtossFindBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss FindBase Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFindBaseQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerEnable(gt_ProtossFindBaseApproachRocks, true);
    TriggerExecute(gt_ProtossFindBaseApproachRocks, true, false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00138", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFindBaseQ_Init () {
    gt_ProtossFindBaseQ = TriggerCreate("gt_ProtossFindBaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss FindBase ApproachRocks Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFindBaseApproachRocksQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ResetReminderTimer();
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00165", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFindBaseApproachRocksQ_Init () {
    gt_ProtossFindBaseApproachRocksQ = TriggerCreate("gt_ProtossFindBaseApproachRocksQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss FindBase Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFindBaseCompleteQ_Func (bool testConds, bool runActions) {
    int autoB23625D3_ae;
    int autoB23625D3_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    VisRevealerCreate(gv_p01_USER, RegionFromId(37));
    gv_startingAreaRevealer = VisRevealerLastCreated();
    Wait(2.0, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00140", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_protossBaseFound = true;
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    libNtve_gf_RescueUnit2(gv_protossRescuedUnits, gv_p01_USER, true);
    autoB23625D3_ae = UnitGroupCount(gv_protossProbes, c_unitCountAlive);
    autoB23625D3_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB23625D3_ai >= 0 && lv_i <= autoB23625D3_ae) || (autoB23625D3_ai <= 0 && lv_i >= autoB23625D3_ae) ) ; lv_i += autoB23625D3_ai ) {
        if ((lv_i <= 3)) {
            UnitIssueOrder(UnitGroupUnit(gv_protossProbes, lv_i), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), gv_protossAssimilator), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitGroupUnit(gv_protossProbes, lv_i), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(11)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitGroupUnit(gv_protossProbes, lv_i)))), c_orderQueueReplace);
        }
    }
    Wait(4.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFindBaseCompleteQ_Init () {
    gt_ProtossFindBaseCompleteQ = TriggerCreate("gt_ProtossFindBaseCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss FindBase Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFindBaseReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    if ((UnitIsAlive(gv_protossFindBaseBeacon) == true)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00166", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00139", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFindBaseReminderQ_Init () {
    gt_ProtossFindBaseReminderQ = TriggerCreate("gt_ProtossFindBaseReminderQ_Func");
    TriggerEnable(gt_ProtossFindBaseReminderQ, false);
    TriggerAddEventTimer(gt_ProtossFindBaseReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss FindBase MakeObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFindBaseMakeObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/E1BFE97B"), StringToText(""), c_objectiveStateActive, true);
    gv_protossFindBaseObj = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFindBaseMakeObj_Init () {
    gt_ProtossFindBaseMakeObj = TriggerCreate("gt_ProtossFindBaseMakeObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss FindBase CompleteObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFindBaseCompleteObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_protossFindBaseObj, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_protossFindBaseObj);
    gv_protossFindBaseObj = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFindBaseCompleteObj_Init () {
    gt_ProtossFindBaseCompleteObj = TriggerCreate("gt_ProtossFindBaseCompleteObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss FindBase ApproachRocks
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFindBaseApproachRocks_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Stalker", gv_p01_USER, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= UnitGroupCount(gv_protossStartingStalkers, c_unitCountAlive))) {
        TriggerExecute(gt_ProtossFindBaseApproachRocksQ, true, false);
        TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("Blink", 0), true);
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Blink", true);
        if ((UnitIsAlive(gv_protossFindBaseBeacon) == true)) {
            UnitKill(gv_protossFindBaseBeacon);
            gv_protossFindBaseBeacon = null;
        }
        else {
        }
        if ((UnitIsAlive(gv_invisHelper) != true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTutorialHelper", 0, 0, RegionGetCenter(RegionFromId(5)));
            gv_invisHelper = UnitLastCreated();
            gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 1.0, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
            gf_CreateBlinkTag(gv_invisHelper, 0);
            gf_SetOffscreenPoint(RegionGetCenter(RegionFromId(5)));
        }
        else {
        }
    }
    else {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Blink", false);
        if ((UnitIsAlive(gv_protossFindBaseBeacon) != true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Protoss", c_unitCreateIgnorePlacement, gv_p01_USER, RegionGetCenter(RegionFromId(31)));
            gv_protossFindBaseBeacon = UnitLastCreated();
            UnitSetState(gv_protossFindBaseBeacon, c_unitStateTargetable, false);
            UnitSetState(gv_protossFindBaseBeacon, c_unitStateSelectable, false);
            gf_SetOffscreenPoint(RegionGetCenter(RegionFromId(31)));
        }
        else {
        }
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            gf_DestroyTutorialTextTag();
            gf_ClearAllTutorialReticles();
            UnitKill(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFindBaseApproachRocks_Init () {
    gt_ProtossFindBaseApproachRocks = TriggerCreate("gt_ProtossFindBaseApproachRocks_Func");
    TriggerEnable(gt_ProtossFindBaseApproachRocks, false);
    TriggerAddEventUnitRegion(gt_ProtossFindBaseApproachRocks, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_ProtossFindBaseApproachRocks, null, RegionFromId(31), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss FindBase Complete
//--------------------------------------------------------------------------------------------------
bool gt_ProtossFindBaseComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ProtossFindBaseCleanup();
    TriggerExecute(gt_ProtossFindBaseCompleteObj, true, false);
    TriggerExecute(gt_ProtossFindBaseCompleteQ, true, true);
    TriggerExecute(gt_ProtossBuildPylon, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossFindBaseComplete_Init () {
    gt_ProtossFindBaseComplete = TriggerCreate("gt_ProtossFindBaseComplete_Func");
    TriggerEnable(gt_ProtossFindBaseComplete, false);
    TriggerAddEventUnitRegion(gt_ProtossFindBaseComplete, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylon_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(gv_protossBuildPylonUnpoweredGateways, gv_protossGateways);
    TriggerEnable(gt_ProtossBuildPylonReminder, true);
    TriggerEnable(gt_ProtossBuildPylonComplete, true);
    TriggerExecute(gt_ProtossBuildPylonMakeObj, true, false);
    TriggerExecute(gt_ProtossBuildPylonQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylon_Init () {
    gt_ProtossBuildPylon = TriggerCreate("gt_ProtossBuildPylon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gf_SetOffscreenPoint(UnitGroupCenterOfGroup(gv_protossGateways));
    UnitGroupLoopBegin(gv_protossGateways);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "HaloStart");
    }
    UnitGroupLoopEnd();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00141", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    UnitGroupLoopBegin(gv_protossGateways);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "HaloStop");
    }
    UnitGroupLoopEnd();
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 1), true);
    TriggerEnable(gt_ProtossBuildPylonProbeSelection, true);
    TriggerEnable(gt_ProtossBuildPylonTargeting, true);
    TriggerEnable(gt_ProtossBuildPylonBuildMenu, true);
    TriggerEnable(gt_ProtossBuildPylonBuildOrder, true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", true);
    TriggerExecute(gt_ProtossBuildPylonProbeSelection, true, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonQ_Init () {
    gt_ProtossBuildPylonQ = TriggerCreate("gt_ProtossBuildPylonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon SelectProbe Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonSelectProbeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_protossBuildPylonProbeSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00208", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonSelectProbeQ_Init () {
    gt_ProtossBuildPylonSelectProbeQ = TriggerCreate("gt_ProtossBuildPylonSelectProbeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon OpenBuildMenu Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonOpenBuildMenuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_protossBuildPylonProbeSelected == true))) {
            return false;
        }

        if (!((gv_protossBuildPylonBuildMenuPressed == false))) {
            return false;
        }

        if (!((gv_protossBuildPylonTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00209", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonOpenBuildMenuQ_Init () {
    gt_ProtossBuildPylonOpenBuildMenuQ = TriggerCreate("gt_ProtossBuildPylonOpenBuildMenuQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon PylonButton Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonPylonButtonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_protossBuildPylonProbeSelected == true))) {
            return false;
        }

        if (!((gv_protossBuildPylonBuildMenuPressed == true))) {
            return false;
        }

        if (!((gv_protossBuildPylonTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00210", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonPylonButtonQ_Init () {
    gt_ProtossBuildPylonPylonButtonQ = TriggerCreate("gt_ProtossBuildPylonPylonButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon PlacePylon Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonPlacePylonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_protossBuildPylonProbeSelected == true))) {
            return false;
        }

        if (!((gv_protossBuildPylonTargetModeActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00211", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonPlacePylonQ_Init () {
    gt_ProtossBuildPylonPlacePylonQ = TriggerCreate("gt_ProtossBuildPylonPlacePylonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon BuildOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonBuildOrderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00142", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00143", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonBuildOrderQ_Init () {
    gt_ProtossBuildPylonBuildOrderQ = TriggerCreate("gt_ProtossBuildPylonBuildOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon BadBuildOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonBadBuildOrderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_reminderPlayed = false;
    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00168", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonBadBuildOrderQ_Init () {
    gt_ProtossBuildPylonBadBuildOrderQ = TriggerCreate("gt_ProtossBuildPylonBadBuildOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon KindaBadBuildOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonKindaBadBuildOrderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_reminderPlayed = false;
    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00216", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonKindaBadBuildOrderQ_Init () {
    gt_ProtossBuildPylonKindaBadBuildOrderQ = TriggerCreate("gt_ProtossBuildPylonKindaBadBuildOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonCompleteQ_Init () {
    gt_ProtossBuildPylonCompleteQ = TriggerCreate("gt_ProtossBuildPylonCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon MakeObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonMakeObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/4AC8EC25"), StringToText(""), c_objectiveStateActive, true);
    gv_protossBuildPylonObj = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonMakeObj_Init () {
    gt_ProtossBuildPylonMakeObj = TriggerCreate("gt_ProtossBuildPylonMakeObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon CompleteObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonCompleteObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_protossBuildPylonObj, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_protossBuildPylonObj);
    gv_protossBuildPylonObj = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonCompleteObj_Init () {
    gt_ProtossBuildPylonCompleteObj = TriggerCreate("gt_ProtossBuildPylonCompleteObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerExecute(gt_ProtossBuildPylonSelectProbeQ, true, false);
    TriggerExecute(gt_ProtossBuildPylonOpenBuildMenuQ, true, false);
    TriggerExecute(gt_ProtossBuildPylonPylonButtonQ, true, false);
    TriggerExecute(gt_ProtossBuildPylonPlacePylonQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonReminder_Init () {
    gt_ProtossBuildPylonReminder = TriggerCreate("gt_ProtossBuildPylonReminder_Func");
    TriggerEnable(gt_ProtossBuildPylonReminder, false);
    TriggerAddEventTimer(gt_ProtossBuildPylonReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon ProbeSelection
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonProbeSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_validWorkers;
    bool lv_validWorkerSelected;

    // Variable Initialization
    lv_validWorkers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Probe", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((!((((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ProbeHarvest", 0)) && (UnitGetType(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0))) == "Assimilator")) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ProbeHarvest", 1)) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGasProtoss") == true)))))) {
            UnitGroupAdd(lv_validWorkers, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupSelected(gv_p01_USER));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupHasUnit(lv_validWorkers, UnitGroupLoopCurrent()) == true)) {
            lv_validWorkerSelected = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validWorkerSelected == true)) {
        if ((gv_protossBuildPylonProbeSelected == false)) {
            gv_protossBuildPylonProbeSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildPylonReminder, false, false);
            }
            else {
            }
        }
        else {
            if ((gv_protossBuildPylonBuildMenuPressed == true)) {
                gv_protossBuildPylonBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_ProtossBuildPylonReminder, false, false);
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopBegin(UnitGroup("Probe", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        gf_SetOffscreenUnit(null);
    }
    else {
        if ((gv_protossBuildPylonProbeSelected == true)) {
            gv_protossBuildPylonProbeSelected = false;
            gv_protossBuildPylonBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildPylonReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(lv_validWorkers, 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(lv_validWorkers));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonProbeSelection_Init () {
    gt_ProtossBuildPylonProbeSelection = TriggerCreate("gt_ProtossBuildPylonProbeSelection_Func");
    TriggerEnable(gt_ProtossBuildPylonProbeSelection, false);
    TriggerAddEventUnitSelected(gt_ProtossBuildPylonProbeSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ProtossBuildPylonProbeSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon BuildMenu
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonBuildMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventButtonPressed() == "ProtossBuild")) {
        if ((gv_protossBuildPylonBuildMenuPressed == false)) {
            gv_protossBuildPylonBuildMenuPressed = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildPylonReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((EventButtonPressed() == "Cancel")) {
        if ((gv_protossBuildPylonBuildMenuPressed == true)) {
            gv_protossBuildPylonBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildPylonReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonBuildMenu_Init () {
    gt_ProtossBuildPylonBuildMenu = TriggerCreate("gt_ProtossBuildPylonBuildMenu_Func");
    TriggerEnable(gt_ProtossBuildPylonBuildMenu, false);
    TriggerAddEventButtonPressed(gt_ProtossBuildPylonBuildMenu, gv_p01_USER, "ProtossBuild");
    TriggerAddEventButtonPressed(gt_ProtossBuildPylonBuildMenu, gv_p01_USER, "Cancel");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon Targeting
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonTargeting_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn) && (EventTargetModeAbilCmd() == AbilityCommand("ProtossBuild", 1))) {
        if ((gv_protossBuildPylonTargetModeActive == false)) {
            gv_protossBuildPylonTargetModeActive = true;
            gv_protossBuildPylonBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildPylonReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        if ((UnitIsAlive(gv_invisHelper) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Invisible2x2", 0, 0, RegionGetCenter(RegionFromId(22)));
            gv_invisHelper = UnitLastCreated();
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 0.8, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
        gf_CreateLClickToPlaceTag(gv_invisHelper, 0);
        if ((DistanceBetweenPoints(CameraGetTarget(gv_p01_USER), PointWithOffset(RegionGetCenter(RegionFromId(22)), 0.0, -2.0)) > 4.0)) {
            CameraPan(gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(22)), 0.0, -2.0), 1.0, -1, 10.0, false);
        }
        else {
        }
        gf_SetOffscreenUnit(gv_invisHelper);
    }
    else {
        if (((gv_protossBuildPylonTargetModeActive == true) || (gv_protossBuildPylonBuildMenuPressed == true))) {
            gv_protossBuildPylonTargetModeActive = false;
            gv_protossBuildPylonBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildPylonReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_ClearAllTutorialReticles();
        gf_DestroyTutorialTextTag();
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        gf_SetOffscreenUnit(null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonTargeting_Init () {
    gt_ProtossBuildPylonTargeting = TriggerCreate("gt_ProtossBuildPylonTargeting_Func");
    TriggerEnable(gt_ProtossBuildPylonTargeting, false);
    TriggerAddEventTargetModeUpdate(gt_ProtossBuildPylonTargeting, c_playerAny, null, c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_gatewayValid1;
    bool lv_gatewayValid2;
    bool lv_validBuildOrder;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Pylon", gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(12)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_gatewayValid1 = true;
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup("Pylon", gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(20)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_gatewayValid2 = true;
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("Probe", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ProtossBuild", 1)) && ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(UnitGroupLoopCurrent(), 0)), RegionGetCenter(RegionFromId(12))) <= 6.5) || (UnitGroupCount(UnitGroup("Pylon", gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(12)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            lv_gatewayValid1 = true;
        }
        else {
        }
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ProtossBuild", 1)) && ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(UnitGroupLoopCurrent(), 0)), RegionGetCenter(RegionFromId(20))) <= 6.5) || (UnitGroupCount(UnitGroup("Pylon", gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(20)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            lv_gatewayValid2 = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_gatewayValid1 == true)) {
        UnitGroupRemove(gv_protossBuildPylonUnpoweredGateways, gv_protossGateway1);
    }
    else {
        UnitGroupAdd(gv_protossBuildPylonUnpoweredGateways, gv_protossGateway1);
    }
    if ((lv_gatewayValid2 == true)) {
        UnitGroupRemove(gv_protossBuildPylonUnpoweredGateways, gv_protossGateway2);
    }
    else {
        UnitGroupAdd(gv_protossBuildPylonUnpoweredGateways, gv_protossGateway2);
    }
    if ((lv_gatewayValid1 == true) && (lv_gatewayValid2 == true)) {
        lv_validBuildOrder = true;
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Probe") && (EventUnitAbility() == AbilityCommand("ProtossBuild", 1)) && (EventUnitAbilityStage() == c_abilBuildStageApproach)) {
        if ((lv_gatewayValid1 == false) && (lv_gatewayValid2 == false)) {
            TransmissionClearAll();
            TriggerExecute(gt_ProtossBuildPylonBadBuildOrderQ, true, false);
        }
        else {
            if ((((lv_gatewayValid1 == true) && (lv_gatewayValid2 == false)) || ((lv_gatewayValid1 == false) && (lv_gatewayValid2 == true)))) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildPylonKindaBadBuildOrderQ, true, false);
            }
            else {
            }
        }
    }
    else {
    }
    if ((lv_validBuildOrder == true)) {
        gf_StopReminderTimer();
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gv_protossBuildPylonProbeSelected = false;
        gv_protossBuildPylonTargetModeActive = false;
        gv_protossBuildPylonBuildMenuPressed = false;
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        UnitGroupLoopBegin(gv_protossGateways);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 2) != null)) {
                ActorSend(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 2), "Destroy");
                libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 2, null);
            }
            else {
            }
            if ((libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 3) != null)) {
                ActorSend(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 3), "Destroy");
                libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 3, null);
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", false);
        gf_SetOffscreenUnit(null);
        TriggerEnable(gt_ProtossBuildPylonTargeting, false);
        TriggerEnable(gt_ProtossBuildPylonBuildMenu, false);
        TriggerEnable(gt_ProtossBuildPylonProbeSelection, false);
        TriggerExecute(gt_ProtossBuildPylonBuildOrderQ, true, false);
    }
    else {
        gf_StartReminderTimer();
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", true);
        TriggerEnable(gt_ProtossBuildPylonTargeting, true);
        TriggerEnable(gt_ProtossBuildPylonBuildMenu, true);
        TriggerEnable(gt_ProtossBuildPylonProbeSelection, true);
        TriggerExecute(gt_ProtossBuildPylonProbeSelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonBuildOrder_Init () {
    gt_ProtossBuildPylonBuildOrder = TriggerCreate("gt_ProtossBuildPylonBuildOrder_Func");
    TriggerEnable(gt_ProtossBuildPylonBuildOrder, false);
    TriggerAddEventUnitAbility(gt_ProtossBuildPylonBuildOrder, null, AbilityCommand("ProtossBuild", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitConstructProgress(gt_ProtossBuildPylonBuildOrder, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildPylon Complete
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildPylonComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Pylon"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Pylon", gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(12)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Pylon", gv_p01_USER, RegionCircle(RegionGetCenter(RegionFromId(20)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ProtossBuildPylonCleanup();
    TriggerExecute(gt_ProtossBuildPylonCompleteObj, true, false);
    TriggerExecute(gt_ProtossBuildPylonCompleteQ, true, true);
    TriggerExecute(gt_ProtossWarpZealots, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildPylonComplete_Init () {
    gt_ProtossBuildPylonComplete = TriggerCreate("gt_ProtossBuildPylonComplete_Func");
    TriggerEnable(gt_ProtossBuildPylonComplete, false);
    TriggerAddEventUnitConstructProgress(gt_ProtossBuildPylonComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealots_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SupplyHelperActivator, true);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 3), true);
    TriggerEnable(gt_ProtossWarpZealotsReminderQ, true);
    TriggerEnable(gt_ProtossWarpZealotsSupplyHelperDone, true);
    TriggerEnable(gt_ProtossWarpZealotsComplete, true);
    TriggerExecute(gt_ProtossWarpZealotsMakeObj, true, false);
    TriggerEnable(gt_ProtossWarpZealotsUpdateObj, true);
    TriggerExecute(gt_ProtossWarpZealotsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealots_Init () {
    gt_ProtossWarpZealots = TriggerCreate("gt_ProtossWarpZealots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00145", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("GatewayTrain", 0), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zealot", true);
    TriggerEnable(gt_ProtossWarpZealotsReminderController, true);
    TriggerEnable(gt_ProtossWarpZealotsTrainingStarted, true);
    TriggerEnable(gt_ProtossWarpZealotsGatewaySelection, true);
    TriggerExecute(gt_ProtossWarpZealotsGatewaySelection, true, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsQ_Init () {
    gt_ProtossWarpZealotsQ = TriggerCreate("gt_ProtossWarpZealotsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00146", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsCompleteQ_Init () {
    gt_ProtossWarpZealotsCompleteQ = TriggerCreate("gt_ProtossWarpZealotsCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsReminderQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainingSlotsUsed;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zealot", true);
    UnitGroupLoopBegin(gv_protossGateways);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_trainingSlotsUsed += UnitQueueGetProperty(UnitGroupLoopCurrent(), c_unitQueuePropertyUsed);
    }
    UnitGroupLoopEnd();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    if (((UnitGroupCount(UnitGroup("Zealot", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + lv_trainingSlotsUsed) == 0)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00164", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00147", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsReminderQ_Init () {
    gt_ProtossWarpZealotsReminderQ = TriggerCreate("gt_ProtossWarpZealotsReminderQ_Func");
    TriggerEnable(gt_ProtossWarpZealotsReminderQ, false);
    TriggerAddEventTimer(gt_ProtossWarpZealotsReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots MakeObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsMakeObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/E8238A60"), StringToText(""), c_objectiveStateActive, true);
    gv_protossWarpZealotsObj = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsMakeObj_Init () {
    gt_ProtossWarpZealotsMakeObj = TriggerCreate("gt_ProtossWarpZealotsMakeObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots CompleteObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsCompleteObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_protossWarpZealotsObj, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_protossWarpZealotsObj);
    gv_protossWarpZealotsObj = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsCompleteObj_Init () {
    gt_ProtossWarpZealotsCompleteObj = TriggerCreate("gt_ProtossWarpZealotsCompleteObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots UpdateObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsUpdateObj_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Zealot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossWarpZealotsCount += 1;
    TextExpressionSetToken("Param/Expression/CD6B2949", "A", IntToText(gv_protossWarpZealotsCount));
    ObjectiveSetName(gv_protossWarpZealotsObj, TextExpressionAssemble("Param/Expression/CD6B2949"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsUpdateObj_Init () {
    gt_ProtossWarpZealotsUpdateObj = TriggerCreate("gt_ProtossWarpZealotsUpdateObj_Func");
    TriggerEnable(gt_ProtossWarpZealotsUpdateObj, false);
    TriggerAddEventUnitCreated(gt_ProtossWarpZealotsUpdateObj, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots SupplyHelperDone
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsSupplyHelperDone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetReminderTimer();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zealot", true);
    TriggerExecute(gt_ProtossWarpZealotsGatewaySelection, true, false);
    TriggerExecute(gt_ProtossWarpZealotsReminderController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsSupplyHelperDone_Init () {
    gt_ProtossWarpZealotsSupplyHelperDone = TriggerCreate("gt_ProtossWarpZealotsSupplyHelperDone_Func");
    TriggerEnable(gt_ProtossWarpZealotsSupplyHelperDone, false);
    TriggerAddEventGeneric(gt_ProtossWarpZealotsSupplyHelperDone, "SupplyHelperDone");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots GatewaySelection
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsGatewaySelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_gatewaysWaiting;

    // Variable Initialization
    lv_gatewaysWaiting = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_protossGateways);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsSelected(UnitGroupLoopCurrent(), gv_p01_USER) == false) && (UnitQueueItemTypeCheck(UnitGroupLoopCurrent(), 1, c_unitProgressTypeTrain) == false)) {
            UnitGroupAdd(lv_gatewaysWaiting, UnitGroupLoopCurrent());
            gf_CreateTutorialReticleOnUnit(UnitGroupLoopCurrent(), 1.0, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Target 07");
        }
        else {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_gatewaysWaiting, c_unitCountAlive) > 0)) {
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(gv_protossGateways));
    }
    else {
        gf_SetOffscreenUnit(null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsGatewaySelection_Init () {
    gt_ProtossWarpZealotsGatewaySelection = TriggerCreate("gt_ProtossWarpZealotsGatewaySelection_Func");
    TriggerEnable(gt_ProtossWarpZealotsGatewaySelection, false);
    TriggerAddEventUnitSelected(gt_ProtossWarpZealotsGatewaySelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ProtossWarpZealotsGatewaySelection, null, gv_p01_USER, false);
    TriggerAddEventUnitTrainProgress(gt_ProtossWarpZealotsGatewaySelection, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(gt_ProtossWarpZealotsGatewaySelection, null, c_unitProgressStageCancel);
    TriggerAddEventUnitTrainProgress(gt_ProtossWarpZealotsGatewaySelection, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots ReminderController
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsReminderController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainingSlotsUsed;
    int lv_gatewaysBusy;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_protossGateways);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitQueueGetProperty(UnitGroupLoopCurrent(), c_unitQueuePropertyUsed) > 0)) {
            lv_gatewaysBusy += 1;
            lv_trainingSlotsUsed += UnitQueueGetProperty(UnitGroupLoopCurrent(), c_unitQueuePropertyUsed);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if (((lv_gatewaysBusy >= 2) || ((gv_protossWarpZealotsCount + lv_trainingSlotsUsed) >= 4) || (PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) < 100))) {
        gf_StopReminderTimer();
        TriggerEnable(gt_ProtossWarpZealotsGatewaySelection, false);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
    }
    else {
        gf_StartReminderTimer();
        TriggerEnable(gt_ProtossWarpZealotsGatewaySelection, true);
        TriggerExecute(gt_ProtossWarpZealotsGatewaySelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsReminderController_Init () {
    gt_ProtossWarpZealotsReminderController = TriggerCreate("gt_ProtossWarpZealotsReminderController_Func");
    TriggerEnable(gt_ProtossWarpZealotsReminderController, false);
    TriggerAddEventUnitAbility(gt_ProtossWarpZealotsReminderController, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(gt_ProtossWarpZealotsReminderController, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProtossWarpZealotsReminderController, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageCancel, false);
    TriggerAddEventPlayerPropChange(gt_ProtossWarpZealotsReminderController, gv_p01_USER, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_ProtossWarpZealotsReminderController, gv_p01_USER, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots TrainingStarted
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsTrainingStarted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "Zealot", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsTrainingStarted_Init () {
    gt_ProtossWarpZealotsTrainingStarted = TriggerCreate("gt_ProtossWarpZealotsTrainingStarted_Func");
    TriggerEnable(gt_ProtossWarpZealotsTrainingStarted, false);
    TriggerAddEventButtonPressed(gt_ProtossWarpZealotsTrainingStarted, gv_p01_USER, "Zealot");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpZealots Complete
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpZealotsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Zealot"))) {
            return false;
        }

        if (!((gv_protossWarpZealotsCount >= 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ProtossWarpZealotsCleanup();
    TriggerExecute(gt_ProtossWarpZealotsCompleteObj, true, false);
    TriggerExecute(gt_ProtossWarpZealotsCompleteQ, true, true);
    TriggerExecute(gt_ProtossBuildCyberCore, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpZealotsComplete_Init () {
    gt_ProtossWarpZealotsComplete = TriggerCreate("gt_ProtossWarpZealotsComplete_Func");
    TriggerEnable(gt_ProtossWarpZealotsComplete, false);
    TriggerAddEventUnitTrainProgress(gt_ProtossWarpZealotsComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCore_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ProtossBuildCyberCoreReminder, true);
    TriggerEnable(gt_ProtossBuildCyberCoreComplete, true);
    TriggerExecute(gt_ProtossBuildCyberCoreMakeObj, true, false);
    TriggerExecute(gt_ProtossBuildCyberCoreQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCore_Init () {
    gt_ProtossBuildCyberCore = TriggerCreate("gt_ProtossBuildCyberCore_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00148", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("ProtossBuild", 14), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "CyberneticsCore", true);
    TriggerEnable(gt_ProtossBuildCyberCoreProbeSelection, true);
    TriggerEnable(gt_ProtossBuildCyberCoreBuildMenu, true);
    TriggerEnable(gt_ProtossBuildCyberCoreTargeting, true);
    TriggerEnable(gt_ProtossBuildCyberCoreBuildOrder, true);
    TriggerExecute(gt_ProtossBuildCyberCoreProbeSelection, true, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreQ_Init () {
    gt_ProtossBuildCyberCoreQ = TriggerCreate("gt_ProtossBuildCyberCoreQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore SelectProbe Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreSelectProbeQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_protossBuildCyberCoreProbeSelected == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00212", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreSelectProbeQ_Init () {
    gt_ProtossBuildCyberCoreSelectProbeQ = TriggerCreate("gt_ProtossBuildCyberCoreSelectProbeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore OpenBuildMenu Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreOpenBuildMenuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_protossBuildCyberCoreProbeSelected == true))) {
            return false;
        }

        if (!((gv_protossBuildCyberCoreBuildMenuPressed == false))) {
            return false;
        }

        if (!((gv_protossBuildCyberCoreTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00213", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreOpenBuildMenuQ_Init () {
    gt_ProtossBuildCyberCoreOpenBuildMenuQ = TriggerCreate("gt_ProtossBuildCyberCoreOpenBuildMenuQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore CyberCoreButton Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreCyberCoreButtonQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_protossBuildCyberCoreProbeSelected == true))) {
            return false;
        }

        if (!((gv_protossBuildCyberCoreBuildMenuPressed == true))) {
            return false;
        }

        if (!((gv_protossBuildCyberCoreTargetModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(3, "Assets\\Textures\\tutorialcommandcardhighlight.dds", c_triggerBlendModeAdd, 503, 348, c_anchorBottomRight, 5, -2);
    libNtve_gf_PulseScreenImage(3, 1.75, 100.0, 0.0);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00214", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    libNtve_gf_StopPulsingScreenImage(3);
    libNtve_gf_HideScreenImage(false, 3);
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreCyberCoreButtonQ_Init () {
    gt_ProtossBuildCyberCoreCyberCoreButtonQ = TriggerCreate("gt_ProtossBuildCyberCoreCyberCoreButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore PlaceCyberCore Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCorePlaceCyberCoreQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_protossBuildCyberCoreProbeSelected == true))) {
            return false;
        }

        if (!((gv_protossBuildCyberCoreTargetModeActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00215", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCorePlaceCyberCoreQ_Init () {
    gt_ProtossBuildCyberCorePlaceCyberCoreQ = TriggerCreate("gt_ProtossBuildCyberCorePlaceCyberCoreQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore BuildOrder Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreBuildOrderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00149", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreBuildOrderQ_Init () {
    gt_ProtossBuildCyberCoreBuildOrderQ = TriggerCreate("gt_ProtossBuildCyberCoreBuildOrderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreCompleteQ_Init () {
    gt_ProtossBuildCyberCoreCompleteQ = TriggerCreate("gt_ProtossBuildCyberCoreCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore MakeObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreMakeObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/00212A2F"), StringToText(""), c_objectiveStateActive, true);
    gv_protossBuildCyberCoreObj = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreMakeObj_Init () {
    gt_ProtossBuildCyberCoreMakeObj = TriggerCreate("gt_ProtossBuildCyberCoreMakeObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore CompleteObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreCompleteObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_protossBuildCyberCoreObj, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_protossBuildCyberCoreObj);
    gv_protossBuildCyberCoreObj = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreCompleteObj_Init () {
    gt_ProtossBuildCyberCoreCompleteObj = TriggerCreate("gt_ProtossBuildCyberCoreCompleteObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore Reminder
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_reminderPlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_reminderPlayed = true;
    TriggerExecute(gt_ProtossBuildCyberCoreSelectProbeQ, true, false);
    TriggerExecute(gt_ProtossBuildCyberCoreOpenBuildMenuQ, true, false);
    TriggerExecute(gt_ProtossBuildCyberCoreCyberCoreButtonQ, true, false);
    TriggerExecute(gt_ProtossBuildCyberCorePlaceCyberCoreQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreReminder_Init () {
    gt_ProtossBuildCyberCoreReminder = TriggerCreate("gt_ProtossBuildCyberCoreReminder_Func");
    TriggerEnable(gt_ProtossBuildCyberCoreReminder, false);
    TriggerAddEventTimer(gt_ProtossBuildCyberCoreReminder, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore ProbeSelection
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreProbeSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_validWorkers;
    bool lv_validWorkerSelected;

    // Variable Initialization
    lv_validWorkers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Probe", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((!((((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ProbeHarvest", 0)) && (UnitGetType(OrderGetTargetUnit(UnitOrder(UnitGroupLoopCurrent(), 0))) == "Assimilator")) || ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ProbeHarvest", 1)) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "CarryHarvestableVespeneGeyserGasProtoss") == true)))))) {
            UnitGroupAdd(lv_validWorkers, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupSelected(gv_p01_USER));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupHasUnit(lv_validWorkers, UnitGroupLoopCurrent()) == true)) {
            lv_validWorkerSelected = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validWorkerSelected == true)) {
        if ((gv_protossBuildCyberCoreProbeSelected == false)) {
            gv_protossBuildCyberCoreProbeSelected = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildCyberCoreReminder, false, false);
            }
            else {
            }
        }
        else {
            if ((gv_protossBuildCyberCoreBuildMenuPressed == true)) {
                gv_protossBuildCyberCoreBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_ProtossBuildCyberCoreReminder, false, false);
                }
                else {
                }
            }
            else {
            }
        }
        gf_ClearAllTutorialReticles();
        gf_DestroyTutorialTextTag();
        gf_SetOffscreenUnit(null);
    }
    else {
        if ((gv_protossBuildCyberCoreProbeSelected == true)) {
            gv_protossBuildCyberCoreProbeSelected = false;
            gv_protossBuildCyberCoreBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildCyberCoreReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(lv_validWorkers, 0.7, libVCMI_ge_CampaginReticleSize_Small, "Ref_Center");
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(lv_validWorkers));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreProbeSelection_Init () {
    gt_ProtossBuildCyberCoreProbeSelection = TriggerCreate("gt_ProtossBuildCyberCoreProbeSelection_Func");
    TriggerEnable(gt_ProtossBuildCyberCoreProbeSelection, false);
    TriggerAddEventUnitSelected(gt_ProtossBuildCyberCoreProbeSelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ProtossBuildCyberCoreProbeSelection, null, gv_p01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore BuildMenu
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreBuildMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventButtonPressed() == "ProtossBuild")) {
        if ((gv_protossBuildCyberCoreBuildMenuPressed == false)) {
            gv_protossBuildCyberCoreBuildMenuPressed = true;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildCyberCoreReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((EventButtonPressed() == "Cancel")) {
        if ((gv_protossBuildCyberCoreBuildMenuPressed == true)) {
            gv_protossBuildCyberCoreBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildCyberCoreReminder, false, false);
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreBuildMenu_Init () {
    gt_ProtossBuildCyberCoreBuildMenu = TriggerCreate("gt_ProtossBuildCyberCoreBuildMenu_Func");
    TriggerEnable(gt_ProtossBuildCyberCoreBuildMenu, false);
    TriggerAddEventButtonPressed(gt_ProtossBuildCyberCoreBuildMenu, gv_p01_USER, "ProtossBuild");
    TriggerAddEventButtonPressed(gt_ProtossBuildCyberCoreBuildMenu, gv_p01_USER, "Cancel");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore Targeting
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreTargeting_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn) && (EventTargetModeAbilCmd() == AbilityCommand("ProtossBuild", 14))) {
        if ((gv_protossBuildCyberCoreTargetModeActive == false)) {
            gv_protossBuildCyberCoreTargetModeActive = true;
            gv_protossBuildCyberCoreBuildMenuPressed = false;
            if ((gv_reminderPlayed == true)) {
                TransmissionClearAll();
                TriggerExecute(gt_ProtossBuildCyberCoreReminder, false, false);
            }
            else {
            }
        }
        else {
        }
        if ((UnitIsAlive(gv_invisHelper) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Invisible3x3", 0, 0, RegionGetCenter(RegionFromId(21)));
            gv_invisHelper = UnitLastCreated();
        }
        else {
        }
        gf_CreateTutorialReticlesOnUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(gv_invisHelper), 1.0, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Origin");
        gf_CreateLClickToPlaceTag(gv_invisHelper, 0);
        gf_SetOffscreenUnit(gv_invisHelper);
    }
    else {
        if ((EventTargetModeState() == c_targetModeStateOn)) {
            TransmissionClearAll();
        }
        else {
            if (((gv_protossBuildCyberCoreTargetModeActive == true) || (gv_protossBuildCyberCoreBuildMenuPressed == true))) {
                gv_protossBuildCyberCoreTargetModeActive = false;
                gv_protossBuildCyberCoreBuildMenuPressed = false;
                if ((gv_reminderPlayed == true)) {
                    TransmissionClearAll();
                    TriggerExecute(gt_ProtossBuildCyberCoreReminder, false, false);
                }
                else {
                }
            }
            else {
            }
            gf_ClearAllTutorialReticles();
            gf_DestroyTutorialTextTag();
            if ((UnitIsAlive(gv_invisHelper) == true)) {
                UnitRemove(gv_invisHelper);
                gv_invisHelper = null;
            }
            else {
            }
            gf_SetOffscreenUnit(null);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreTargeting_Init () {
    gt_ProtossBuildCyberCoreTargeting = TriggerCreate("gt_ProtossBuildCyberCoreTargeting_Func");
    TriggerEnable(gt_ProtossBuildCyberCoreTargeting, false);
    TriggerAddEventTargetModeUpdate(gt_ProtossBuildCyberCoreTargeting, c_playerAny, null, c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validBuildOrder;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("CyberneticsCore", gv_p01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_validBuildOrder = true;
    }
    else {
    }
    UnitGroupLoopBegin(UnitGroup("Probe", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) == AbilityCommand("ProtossBuild", 14))) {
            lv_validBuildOrder = true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_validBuildOrder == true)) {
        gf_StopReminderTimer();
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gv_protossBuildCyberCoreProbeSelected = false;
        gv_protossBuildCyberCoreTargetModeActive = false;
        gv_protossBuildCyberCoreBuildMenuPressed = false;
        if ((UnitIsAlive(gv_invisHelper) == true)) {
            UnitRemove(gv_invisHelper);
            gv_invisHelper = null;
        }
        else {
        }
        UISetButtonFaceHighlighted(PlayerGroupAll(), "CyberneticsCore", false);
        gf_SetOffscreenUnit(null);
        TriggerEnable(gt_ProtossBuildCyberCoreTargeting, false);
        TriggerEnable(gt_ProtossBuildCyberCoreBuildMenu, false);
        TriggerEnable(gt_ProtossBuildCyberCoreProbeSelection, false);
        TriggerExecute(gt_ProtossBuildCyberCoreBuildOrderQ, true, false);
    }
    else {
        gf_StartReminderTimer();
        UISetButtonFaceHighlighted(PlayerGroupAll(), "CyberneticsCore", true);
        TriggerEnable(gt_ProtossBuildCyberCoreTargeting, true);
        TriggerEnable(gt_ProtossBuildCyberCoreBuildMenu, true);
        TriggerEnable(gt_ProtossBuildCyberCoreProbeSelection, true);
        TriggerExecute(gt_ProtossBuildCyberCoreProbeSelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreBuildOrder_Init () {
    gt_ProtossBuildCyberCoreBuildOrder = TriggerCreate("gt_ProtossBuildCyberCoreBuildOrder_Func");
    TriggerEnable(gt_ProtossBuildCyberCoreBuildOrder, false);
    TriggerAddEventUnitAbility(gt_ProtossBuildCyberCoreBuildOrder, null, AbilityCommand("ProtossBuild", 14), c_unitAbilStageAll, false);
    TriggerAddEventUnitConstructProgress(gt_ProtossBuildCyberCoreBuildOrder, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss BuildCyberCore Complete
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBuildCyberCoreComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "CyberneticsCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ProtossBuildCyberCoreCleanup();
    TriggerExecute(gt_ProtossBuildCyberCoreCompleteObj, true, false);
    TriggerExecute(gt_ProtossBuildCyberCoreCompleteQ, true, true);
    TriggerExecute(gt_ProtossWarpStalkers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBuildCyberCoreComplete_Init () {
    gt_ProtossBuildCyberCoreComplete = TriggerCreate("gt_ProtossBuildCyberCoreComplete_Func");
    TriggerEnable(gt_ProtossBuildCyberCoreComplete, false);
    TriggerAddEventUnitConstructProgress(gt_ProtossBuildCyberCoreComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkers_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SupplyHelperActivator, true);
    TriggerEnable(gt_ProtossWarpStalkersReminderQ, true);
    TriggerEnable(gt_ProtossWarpStalkersSupplyHelperDone, true);
    TriggerEnable(gt_ProtossWarpStalkersComplete, true);
    TriggerExecute(gt_ProtossWarpStalkersMakeObj, true, false);
    TriggerEnable(gt_ProtossWarpStalkersUpdateObj, true);
    TriggerExecute(gt_ProtossWarpStalkersQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkers_Init () {
    gt_ProtossWarpStalkers = TriggerCreate("gt_ProtossWarpStalkers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersQ_Func (bool testConds, bool runActions) {
    int auto74612559_n;
    int auto74612559_i;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00151", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TechTreeAbilityAllow(gv_p01_USER, AbilityCommand("GatewayTrain", 1), true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Stalker", true);
    UnitGroupLoopBegin(gv_protossGateways);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitQueueItemTypeCheck(UnitGroupLoopCurrent(), 1, c_unitProgressTypeTrain) == true) && (UnitQueueItemTime(UnitGroupLoopCurrent(), c_unitQueueTimeElapsed, 1) == 0.0)) {
            auto74612559_n = 5;
            for (auto74612559_i = 1; auto74612559_i <= auto74612559_n; auto74612559_i += 1) {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
            }
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_ProtossWarpStalkersReminderController, true);
    TriggerEnable(gt_ProtossWarpStalkersTrainingStarted, true);
    TriggerEnable(gt_ProtossWarpStalkersGatewaySelection, true);
    TriggerExecute(gt_ProtossWarpStalkersGatewaySelection, true, false);
    gf_StartReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersQ_Init () {
    gt_ProtossWarpStalkersQ = TriggerCreate("gt_ProtossWarpStalkersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00152", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersCompleteQ_Init () {
    gt_ProtossWarpStalkersCompleteQ = TriggerCreate("gt_ProtossWarpStalkersCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_reminderTimer))) {
            return false;
        }

        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Stalker", true);
    gv_reminderPlaying = true;
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00153", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    gv_reminderPlaying = false;
    gf_ResetReminderTimer();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersReminderQ_Init () {
    gt_ProtossWarpStalkersReminderQ = TriggerCreate("gt_ProtossWarpStalkersReminderQ_Func");
    TriggerEnable(gt_ProtossWarpStalkersReminderQ, false);
    TriggerAddEventTimer(gt_ProtossWarpStalkersReminderQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers MakeObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersMakeObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/649DE85D"), StringToText(""), c_objectiveStateActive, true);
    gv_protossWarpStalkersObj = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersMakeObj_Init () {
    gt_ProtossWarpStalkersMakeObj = TriggerCreate("gt_ProtossWarpStalkersMakeObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers CompleteObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersCompleteObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_protossWarpStalkersObj, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_protossWarpStalkersObj);
    gv_protossWarpStalkersObj = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersCompleteObj_Init () {
    gt_ProtossWarpStalkersCompleteObj = TriggerCreate("gt_ProtossWarpStalkersCompleteObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers UpdateObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersUpdateObj_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Stalker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossWarpStalkersCount += 1;
    TextExpressionSetToken("Param/Expression/BC1F4F8C", "A", IntToText(gv_protossWarpStalkersCount));
    ObjectiveSetName(gv_protossWarpStalkersObj, TextExpressionAssemble("Param/Expression/BC1F4F8C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersUpdateObj_Init () {
    gt_ProtossWarpStalkersUpdateObj = TriggerCreate("gt_ProtossWarpStalkersUpdateObj_Func");
    TriggerEnable(gt_ProtossWarpStalkersUpdateObj, false);
    TriggerAddEventUnitCreated(gt_ProtossWarpStalkersUpdateObj, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers SupplyHelperDone
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersSupplyHelperDone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetReminderTimer();
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Stalker", true);
    TriggerExecute(gt_ProtossWarpStalkersGatewaySelection, true, false);
    TriggerExecute(gt_ProtossWarpStalkersReminderController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersSupplyHelperDone_Init () {
    gt_ProtossWarpStalkersSupplyHelperDone = TriggerCreate("gt_ProtossWarpStalkersSupplyHelperDone_Func");
    TriggerEnable(gt_ProtossWarpStalkersSupplyHelperDone, false);
    TriggerAddEventGeneric(gt_ProtossWarpStalkersSupplyHelperDone, "SupplyHelperDone");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers GatewaySelection
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersGatewaySelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_gatewaysWaiting;

    // Variable Initialization
    lv_gatewaysWaiting = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_protossGateways);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsSelected(UnitGroupLoopCurrent(), gv_p01_USER) == false) && (UnitQueueItemTypeCheck(UnitGroupLoopCurrent(), 1, c_unitProgressTypeTrain) == false)) {
            UnitGroupAdd(lv_gatewaysWaiting, UnitGroupLoopCurrent());
            gf_CreateTutorialReticleOnUnit(UnitGroupLoopCurrent(), 1.0, libVCMI_ge_CampaginReticleSize_Medium, "Ref_Target 07");
        }
        else {
            gf_ClearTutorialReticleOnUnit(UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_gatewaysWaiting, c_unitCountAlive) > 0)) {
        gf_SetOffscreenPoint(UnitGroupCenterOfGroup(gv_protossGateways));
    }
    else {
        gf_SetOffscreenUnit(null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersGatewaySelection_Init () {
    gt_ProtossWarpStalkersGatewaySelection = TriggerCreate("gt_ProtossWarpStalkersGatewaySelection_Func");
    TriggerEnable(gt_ProtossWarpStalkersGatewaySelection, false);
    TriggerAddEventUnitSelected(gt_ProtossWarpStalkersGatewaySelection, null, gv_p01_USER, true);
    TriggerAddEventUnitSelected(gt_ProtossWarpStalkersGatewaySelection, null, gv_p01_USER, false);
    TriggerAddEventUnitTrainProgress(gt_ProtossWarpStalkersGatewaySelection, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(gt_ProtossWarpStalkersGatewaySelection, null, c_unitProgressStageCancel);
    TriggerAddEventUnitTrainProgress(gt_ProtossWarpStalkersGatewaySelection, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers ReminderController
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersReminderController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gatewaysBusy;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_supplyHelperActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_protossGateways);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitQueueGetProperty(UnitGroupLoopCurrent(), c_unitQueuePropertyUsed) > 0)) {
            lv_gatewaysBusy += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((((gv_protossWarpStalkersCount + lv_gatewaysBusy) >= 2) || ((PlayerGetPropertyInt(gv_p01_USER, c_playerPropMinerals) < 125) || (PlayerGetPropertyInt(gv_p01_USER, c_playerPropVespene) < 50)))) {
        gf_StopReminderTimer();
        TriggerEnable(gt_ProtossWarpStalkersGatewaySelection, false);
        gf_DestroyTutorialTextTag();
        gf_ClearAllTutorialReticles();
        gf_SetOffscreenUnit(null);
    }
    else {
        gf_StartReminderTimer();
        TriggerEnable(gt_ProtossWarpStalkersGatewaySelection, true);
        TriggerExecute(gt_ProtossWarpStalkersGatewaySelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersReminderController_Init () {
    gt_ProtossWarpStalkersReminderController = TriggerCreate("gt_ProtossWarpStalkersReminderController_Func");
    TriggerEnable(gt_ProtossWarpStalkersReminderController, false);
    TriggerAddEventUnitAbility(gt_ProtossWarpStalkersReminderController, null, AbilityCommand("GatewayTrain", 1), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(gt_ProtossWarpStalkersReminderController, null, AbilityCommand("GatewayTrain", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ProtossWarpStalkersReminderController, null, AbilityCommand("GatewayTrain", 1), c_unitAbilStageCancel, false);
    TriggerAddEventPlayerPropChange(gt_ProtossWarpStalkersReminderController, gv_p01_USER, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_ProtossWarpStalkersReminderController, gv_p01_USER, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers TrainingStarted
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersTrainingStarted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "Stalker", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersTrainingStarted_Init () {
    gt_ProtossWarpStalkersTrainingStarted = TriggerCreate("gt_ProtossWarpStalkersTrainingStarted_Func");
    TriggerEnable(gt_ProtossWarpStalkersTrainingStarted, false);
    TriggerAddEventButtonPressed(gt_ProtossWarpStalkersTrainingStarted, gv_p01_USER, "Stalker");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss WarpStalkers Complete
//--------------------------------------------------------------------------------------------------
bool gt_ProtossWarpStalkersComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p01_USER))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Stalker"))) {
            return false;
        }

        if (!((gv_protossWarpStalkersCount >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ProtossWarpStalkersCleanup();
    TriggerExecute(gt_ProtossWarpStalkersCompleteObj, true, false);
    TriggerExecute(gt_ProtossWarpStalkersCompleteQ, true, true);
    TriggerExecute(gt_ProtossSurviveAttack, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossWarpStalkersComplete_Init () {
    gt_ProtossWarpStalkersComplete = TriggerCreate("gt_ProtossWarpStalkersComplete_Func");
    TriggerEnable(gt_ProtossWarpStalkersComplete, false);
    TriggerAddEventUnitTrainProgress(gt_ProtossWarpStalkersComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss SurviveAttack
//--------------------------------------------------------------------------------------------------
bool gt_ProtossSurviveAttack_Func (bool testConds, bool runActions) {
    int autoFB61F215_ae;
    int autoFB61F215_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_p01_USER, RegionFromId(39));
    gv_protossSurviveAttackRevealer = VisRevealerLastCreated();
    gf_SetOffscreenUnit(gv_protossBaseRocks);
    UnitSetPropertyFixed(gv_protossBaseRocks, c_unitPropLife, 75.0);
    autoFB61F215_ae = 10;
    autoFB61F215_ai = 1;
    lv_i = 1;
    for ( ; ( (autoFB61F215_ai >= 0 && lv_i <= autoFB61F215_ae) || (autoFB61F215_ai <= 0 && lv_i >= autoFB61F215_ae) ) ; lv_i += autoFB61F215_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", c_unitCreateIgnorePlacement, gv_p02_ENEMY, UnitGetPosition(UnitGroupUnit(gv_protossZergEggs, lv_i)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_protossBaseRocks), c_orderQueueReplace);
        UnitGroupAddUnitGroup(gv_protossZergAttackers, UnitLastCreatedGroup());
        UnitKill(UnitGroupUnit(gv_protossZergEggs, lv_i));
    }
    TriggerEnable(gt_ProtossSurviveAttackRocksDestroyed, true);
    TriggerEnable(gt_ProtossSurviveAttackComplete, true);
    TriggerExecute(gt_ProtossSurviveAttackMakeObj, true, false);
    TriggerExecute(gt_ProtossSurviveAttackQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossSurviveAttack_Init () {
    gt_ProtossSurviveAttack = TriggerCreate("gt_ProtossSurviveAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss SurviveAttack Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossSurviveAttackQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00154", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(UnitGroupUnit(UnitGroup("Zealot", gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), "Tutorial_SC2Core|Line00001", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossSurviveAttackQ_Init () {
    gt_ProtossSurviveAttackQ = TriggerCreate("gt_ProtossSurviveAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss SurviveAttack Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossSurviveAttackCompleteQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(54), Order(AbilityCommand("AiurTempleStoneGateDiagonalULBRRFLowered", 0)), c_orderQueueReplace);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00155", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossSurviveAttackCompleteQ_Init () {
    gt_ProtossSurviveAttackCompleteQ = TriggerCreate("gt_ProtossSurviveAttackCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss SurviveAttack MakeObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossSurviveAttackMakeObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/E0F1123C"), StringToText(""), c_objectiveStateActive, true);
    gv_protossSurviveAttackObj = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossSurviveAttackMakeObj_Init () {
    gt_ProtossSurviveAttackMakeObj = TriggerCreate("gt_ProtossSurviveAttackMakeObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss SurviveAttack CompleteObj
//--------------------------------------------------------------------------------------------------
bool gt_ProtossSurviveAttackCompleteObj_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_protossSurviveAttackObj, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(gv_protossSurviveAttackObj);
    gv_protossSurviveAttackObj = c_invalidObjectiveId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossSurviveAttackCompleteObj_Init () {
    gt_ProtossSurviveAttackCompleteObj = TriggerCreate("gt_ProtossSurviveAttackCompleteObj_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss SurviveAttack RocksDestroyed
//--------------------------------------------------------------------------------------------------
bool gt_ProtossSurviveAttackRocksDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_protossBaseRocks))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(gv_protossZergAttackers, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(11))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossSurviveAttackRocksDestroyed_Init () {
    gt_ProtossSurviveAttackRocksDestroyed = TriggerCreate("gt_ProtossSurviveAttackRocksDestroyed_Func");
    TriggerEnable(gt_ProtossSurviveAttackRocksDestroyed, false);
    TriggerAddEventUnitDied(gt_ProtossSurviveAttackRocksDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss SurviveAttack Complete
//--------------------------------------------------------------------------------------------------
bool gt_ProtossSurviveAttackComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_p02_ENEMY))) {
            return false;
        }

        if (!((UnitGroupCount(gv_protossZergAttackers, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ProtossSurviveAttackCleanup();
    TriggerExecute(gt_ProtossSurviveAttackCompleteObj, true, false);
    TriggerExecute(gt_ProtossSurviveAttackCompleteQ, true, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ProtossOutroCinematicQ, true, true);
    TriggerExecute(gt_ProtossCleanup, true, true);
    if ((gv_tutorialProgress < 4)) {
        gv_tutorialProgress = 4;
        BankValueSetFromInt(gv_tutorialBankSave, "General", "Progress", gv_tutorialProgress);
        BankSave(gv_tutorialBankSave);
    }
    else {
    }
    gv_selectedStage = 4;
    gf_UpdateVictoryScreen();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    DialogSetVisible(gv_victoryUI, PlayerGroupAll(), true);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossSurviveAttackComplete_Init () {
    gt_ProtossSurviveAttackComplete = TriggerCreate("gt_ProtossSurviveAttackComplete_Func");
    TriggerEnable(gt_ProtossSurviveAttackComplete, false);
    TriggerAddEventUnitDied(gt_ProtossSurviveAttackComplete, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Cinematic Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroCinematicQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ProtossIntroCinematicSetup, true, true);
    TriggerExecute(gt_ProtossIntroCinematic, true, true);
    TriggerExecute(gt_ProtossIntroCinematicEnd, true, true);
    TriggerExecute(gt_ProtossIntroCinematicCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroCinematicQ_Init () {
    gt_ProtossIntroCinematicQ = TriggerCreate("gt_ProtossIntroCinematicQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Cinematic Setup
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroCinematicSetup_Func (bool testConds, bool runActions) {
    int auto3547D5AE_ae;
    int auto3547D5AE_ai;
    int autoF5CA9346_ae;
    int autoF5CA9346_ai;
    int auto3DA4A571_ae;
    int auto3DA4A571_ai;

    // Variable Declarations
    unit lv_extractor;
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_p01_USER, RegionFromId(36));
    gv_startingAreaRevealer = VisRevealerLastCreated();
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits4, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits4 = UnitGroupEmpty();
    gv_cinematicTempUnits4 = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits4);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits4);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, 0, PointWithOffset(PointFromId(67), -12.0, -12.0));
    gv_protossWarpPrism = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCC", 0, gv_p02_ENEMY, PointFromId(26));
    UnitGroupAdd(gv_protossInfestedTerrans, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "ColonyInfestation", UnitLastCreated(), 1);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 12.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_p02_ENEMY, PointFromId(96));
    UnitGroupAdd(gv_protossInfestedTerrans, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedCivilian", 0, gv_p02_ENEMY, PointFromId(103));
    UnitGroupAdd(gv_protossInfestedTerrans, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedTerranCampaign", 0, gv_p02_ENEMY, PointFromId(104));
    UnitGroupAdd(gv_protossInfestedTerrans, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedTerranCampaign", 0, gv_p02_ENEMY, PointFromId(105));
    UnitGroupAdd(gv_protossInfestedTerrans, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -6.5, 3.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -5.5, 5.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -4.5, 6.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, PointWithOffset(PointFromId(26), -1.5, 6.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(24)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(25)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(26)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(27)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Extractor", 0, gv_p02_ENEMY, RegionGetCenter(RegionFromId(28)));
    lv_extractor = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", c_unitCreateIgnorePlacement, gv_p02_ENEMY, RegionGetCenter(RegionFromId(23)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpawningPool", c_unitCreateIgnorePlacement, gv_p02_ENEMY, RegionGetCenter(RegionFromId(29)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachWarren", c_unitCreateIgnorePlacement, gv_p02_ENEMY, RegionGetCenter(RegionFromId(30)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 9.0, 0.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 0.64, 3.49));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), lv_extractor), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 1.44, 4.66));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), lv_extractor), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 1.91, 3.59));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), lv_extractor), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 2.44, 2.03));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(23)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitLastCreated()))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 3.14, 3.24));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(23)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitLastCreated()))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 3.6, 4.41));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(23)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitLastCreated()))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 3.72, 1.41));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(23)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitLastCreated()))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 4.17, 2.33));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(23)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitLastCreated()))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 4.86, 3.21));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(23)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitLastCreated()))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), 5.84, 2.29));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionCircle(RegionGetCenter(RegionFromId(23)), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitLastCreated()))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, gv_p02_ENEMY, PointWithOffset(RegionGetCenter(RegionFromId(23)), -5.0, 0.0));
    UnitGroupAdd(gv_protossIdleZerg, UnitLastCreated());
    auto3547D5AE_ae = 9;
    auto3547D5AE_ai = 1;
    lv_i = 1;
    for ( ; ( (auto3547D5AE_ai >= 0 && lv_i <= auto3547D5AE_ae) || (auto3547D5AE_ai <= 0 && lv_i >= auto3547D5AE_ae) ) ; lv_i += auto3547D5AE_ai ) {
        UnitCreate(1, "Zergling", 0, gv_p02_ENEMY, PointFromName(("Protoss IdleZerg" + IntToString(lv_i))), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_protossIdleZerg, UnitLastCreated());
    }
    autoF5CA9346_ae = 14;
    autoF5CA9346_ai = 1;
    lv_i = 10;
    for ( ; ( (autoF5CA9346_ai >= 0 && lv_i <= autoF5CA9346_ae) || (autoF5CA9346_ai <= 0 && lv_i >= autoF5CA9346_ae) ) ; lv_i += autoF5CA9346_ai ) {
        UnitCreate(1, "Roach", 0, gv_p02_ENEMY, PointFromName(("Protoss IdleZerg" + IntToString(lv_i))), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_protossIdleZerg, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleRockEx14x4", c_unitCreateIgnorePlacement, 0, PointFromId(111));
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    gv_protossBaseRocks = UnitLastCreated();
    auto3DA4A571_ae = 40;
    auto3DA4A571_ai = 1;
    lv_i = 1;
    for ( ; ( (auto3DA4A571_ai >= 0 && lv_i <= auto3DA4A571_ae) || (auto3DA4A571_ai <= 0 && lv_i >= auto3DA4A571_ae) ) ; lv_i += auto3DA4A571_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Egg", 0, gv_p02_ENEMY, PointFromName(("Egg" + IntToString(lv_i))));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitGroupAdd(gv_protossZergEggs, UnitLastCreated());
        CreepModify(UnitGetPosition(UnitLastCreated()), 2.0, true, true);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(13)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(14)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(15)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(16)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Assimilator", 0, 0, RegionGetCenter(RegionFromId(17)));
    gv_protossAssimilator = UnitLastCreated();
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Nexus", 0, 0, RegionGetCenter(RegionFromId(11)));
    gv_protossNexus = UnitLastCreated();
    UnitIssueOrder(gv_protossNexus, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), UnitGroupClosestToPoint(UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointWithOffset(RegionGetCenter(RegionFromId(11)), -5.0, 5.0))), c_orderQueueReplace);
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", 0, 0, RegionGetCenter(RegionFromId(12)));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossGateways, UnitLastCreated());
    gv_protossGateway1 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", 0, 0, RegionGetCenter(RegionFromId(20)));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossGateways, UnitLastCreated());
    gv_protossGateway2 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, 0, RegionGetCenter(RegionFromId(18)));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", 0, 0, RegionGetCenter(RegionFromId(19)));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), -3.0, -2.0));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), -3.0, -1.1));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), -3.0, -0.2));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), -3.0, 0.7));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), -3.0, 1.6));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), -3.0, 2.5));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), -2.5, 3.0));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), -1.6, 3.0));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), -0.7, 3.0));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), 0.2, 3.0));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), 1.1, 3.0));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, 0, PointWithOffset(RegionGetCenter(RegionFromId(11)), 2.0, 3.0));
    UnitGroupAdd(gv_protossRescuedUnits, UnitLastCreated());
    UnitGroupAdd(gv_protossProbes, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroCinematicSetup_Init () {
    gt_ProtossIntroCinematicSetup = TriggerCreate("gt_ProtossIntroCinematicSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(gv_p01_USER, PointWithOffset(PointFromId(67), 0.0, -1.0), 0.0, -1, 10.0, false);
    GameSetLighting("AiurTempleJungle", 0.0);
    FogSetEnabled(false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted4 = false;
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ProtLow", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CinematicFade(true, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    CutsceneCreateNoPosition("Cutscenes\\Cutscene_TutorialProtossIntro.SC2Cutscene", PlayerGroupAll(), true);
    gv_protossCinematicCutscene = CutsceneLastCreated();
    Wait(1.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00129", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_protossWarpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(67)), c_orderQueueReplace);
    UnitIssueOrder(gv_protossWarpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    WaitForCutsceneToEnd(CutsceneLastCreated());
    FogSetEnabled(true);
    GameSetLighting("AiurTempleJungle", 0.0);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    CutsceneFade(true, 0.4, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    while (!((UnitGetType(gv_protossWarpPrism) == "WarpPrismPhasing"))) {
        Wait(0.125, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(69), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(PointFromId(67), 1.0, 0.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(69), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(PointFromId(67), -1.0, 0.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(69), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(PointFromId(67), 0.0, 1.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(69), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointWithOffset(PointFromId(67), 0.0, -1.0)), c_orderQueueReplace);
    while (!((UnitGroupCount(UnitGroup("Stalker", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 4))) {
        Wait(0.125, c_timeGame);
    }
    gv_protossStartingStalkers = UnitGroup("Stalker", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_RescueUnit2(gv_protossStartingStalkers, gv_p01_USER, true);
    UnitIssueOrder(gv_protossWarpPrism, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libLbty_gf_OrderTransporttoUnloadAllthenDespawn(gv_protossWarpPrism, PointFromId(67), PointWithOffset(PointFromId(67), -5.0, 10.0));
    Wait(2.0, c_timeGame);
    gv_cinematicCompleted4 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroCinematic_Init () {
    gt_ProtossIntroCinematic = TriggerCreate("gt_ProtossIntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted4 == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroCinematicEnd_Init () {
    gt_ProtossIntroCinematicEnd = TriggerCreate("gt_ProtossIntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Intro Cinematic Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_ProtossIntroCinematicCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    UnitGroupLoopBegin(gv_cinematicTempUnits4);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits4);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits4);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    if ((gv_cinematicCompleted4 == true)) {
        lv_fadeDuration = 0.0;
    }
    else {
        GameSetLighting("AiurTempleJungle", 0.0);
        FogSetEnabled(true);
        UnitRemove(gv_protossWarpPrism);
        UnitGroupLoopBegin(gv_protossStartingStalkers);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_p01_USER, PointWithOffset(PointFromId(67), 1.0, 0.0));
        UnitGroupAdd(gv_protossStartingStalkers, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_p01_USER, PointWithOffset(PointFromId(67), -1.0, 0.0));
        UnitGroupAdd(gv_protossStartingStalkers, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_p01_USER, PointWithOffset(PointFromId(67), 0.0, 1.0));
        UnitGroupAdd(gv_protossStartingStalkers, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, gv_p01_USER, PointWithOffset(PointFromId(67), 0.0, -1.0));
        UnitGroupAdd(gv_protossStartingStalkers, UnitLastCreated());
        lv_fadeDuration = 1.0;
        CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        Wait(0.0625, c_timeGame);
        CutsceneStop(gv_protossCinematicCutscene);
        CutsceneFade(true, 0.0, Color(0,0,0), 100.0, PlayerGroupAll(), true);
        Wait(0.0625, c_timeGame);
        libNtve_gf_SwooshCamera(gv_p01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointWithOffset(PointFromId(67), 0.0, -1.0), lv_fadeDuration);
    }
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossIntroCinematicCleanup_Init () {
    gt_ProtossIntroCinematicCleanup = TriggerCreate("gt_ProtossIntroCinematicCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Outro Cinematic Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossOutroCinematicQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ProtossOutroCinematicSetup, true, true);
    TriggerExecute(gt_ProtossOutroCinematic, true, true);
    TriggerExecute(gt_ProtossOutroCinematicEnd, true, true);
    TriggerExecute(gt_ProtossOutroCinematicCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossOutroCinematicQ_Init () {
    gt_ProtossOutroCinematicQ = TriggerCreate("gt_ProtossOutroCinematicQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Outro Cinematic Setup
//--------------------------------------------------------------------------------------------------
bool gt_ProtossOutroCinematicSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.5, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_CinematicModeCampaign(true, 0.0, true);
    UnitClearSelection(gv_p01_USER);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(gv_protossZergEggs);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossOutroCinematicSetup_Init () {
    gt_ProtossOutroCinematicSetup = TriggerCreate("gt_ProtossOutroCinematicSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Outro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_ProtossOutroCinematic_Func (bool testConds, bool runActions) {
    int auto244B14C3_n;
    int auto244B14C3_i;
    int auto2A362374_val;
    int autoED2CBB0D_val;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(gv_p01_USER, PointWithOffset(RegionGetCenter(RegionFromId(23)), -3.0, -1.0), 0.0, -1, 10.0, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted4 = false;
    CinematicFade(true, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    FogSetEnabled(false);
    CutsceneCreateNoPosition("Cutscenes\\Cutscene_TutorialProtossOutro.SC2Cutscene", PlayerGroupAll(), true);
    WaitForCutsceneToEnd(CutsceneLastCreated());
    FogSetEnabled(true);
    GameSetLighting("AiurTempleJungle", 0.0);
    CutsceneFade(true, 0.4, Color(0,0,0), 100.0, PlayerGroupAll(), true);
    CameraPan(gv_p01_USER, PointWithOffset(PointFromId(111), 0.0, 0.0), 10.0, -1, 10.0, false);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00156", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    auto244B14C3_n = 30;
    for (auto244B14C3_i = 1; auto244B14C3_i <= auto244B14C3_n; auto244B14C3_i += 1) {
        auto2A362374_val = lv_i;
        if (auto2A362374_val == 0) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", c_unitCreateIgnorePlacement, gv_p02_ENEMY, UnitGetPosition(UnitGroupUnit(gv_protossZergEggs, 1)));
        }
        else if (auto2A362374_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", c_unitCreateIgnorePlacement, gv_p02_ENEMY, UnitGetPosition(UnitGroupUnit(gv_protossZergEggs, 1)));
        }
        else if (auto2A362374_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", c_unitCreateIgnorePlacement, gv_p02_ENEMY, UnitGetPosition(UnitGroupUnit(gv_protossZergEggs, 1)));
        }
        else if (auto2A362374_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", c_unitCreateIgnorePlacement, gv_p02_ENEMY, UnitGetPosition(UnitGroupUnit(gv_protossZergEggs, 1)));
        }
        else {
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(111)), c_orderQueueReplace);
        UnitGroupAddUnitGroup(gv_cinematicTempUnits4, UnitLastCreatedGroup());
        UnitKill(UnitGroupUnit(gv_protossZergEggs, 1));
        autoED2CBB0D_val = lv_j;
        if (autoED2CBB0D_val == 0) {
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_protossNexus), c_orderQueueAddToEnd);
        }
        else if (autoED2CBB0D_val == 1) {
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(91)), c_orderQueueAddToEnd);
        }
        else if (autoED2CBB0D_val == 2) {
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(92)), c_orderQueueAddToEnd);
        }
        else if (autoED2CBB0D_val == 3) {
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(93)), c_orderQueueAddToEnd);
        }
        else if (autoED2CBB0D_val == 4) {
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(547)), c_orderQueueAddToEnd);
        }
        else {
        }
        lv_i += 1;
        if ((lv_i > 3)) {
            lv_i = 0;
        }
        else {
        }
        lv_j += 1;
        if ((lv_j > 4)) {
            lv_j = 0;
        }
        else {
        }
        Wait(0.15, c_timeGame);
    }
    Wait(3.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00157", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("PAiur04_Dimentional_Recall", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 3.0);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Recalling", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_p01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    CameraPan(gv_p01_USER, PointWithOffset(PointFromId(111), -6.0, 8.0), 4.0, -1, 10.0, false);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00158", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Tutorial_SC2Core|Line00159", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_ProtossOutroMakeBeam(PointFromId(91));
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamStrike_01", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamQuake_01a", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_ProtossOutroMakeBeam(PointFromId(92));
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamStrike_02", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    gf_ProtossOutroMakeBeam(PointFromId(93));
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamStrike_03", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    gf_ProtossOutroMakeBeam(PointFromId(547));
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamStrike_04", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamQuake_04a", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    UnitGroupIssueOrder(gv_protossIdleZerg, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(11))), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    CameraPan(gv_p01_USER, PointFromId(548), 4.0, -1, 10.0, false);
    gf_ProtossOutroMakeBeam(PointFromId(548));
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamStrike_05", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamQuake_05a", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.5, c_timeGame);
    CameraPan(gv_p01_USER, RegionGetCenter(RegionFromId(23)), 6.0, -1, 10.0, false);
    Wait(3.0, c_timeGame);
    gf_ProtossOutroMakeBeam(PointFromId(549));
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamStrike_06", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_ProtossOutroMakeBeam(PointFromId(550));
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamQuake_07a", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamStrike_01", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_ProtossOutroMakeBeam(PointFromId(551));
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamStrike_07", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamQuake_08a", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    gf_ProtossOutroMakeBeam(PointFromId(557));
    SoundPlayForPlayer(SoundLink("CS_Tutorial_Protoss_BeamStrike_08", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    gv_cinematicCompleted4 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossOutroCinematic_Init () {
    gt_ProtossOutroCinematic = TriggerCreate("gt_ProtossOutroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Outro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_ProtossOutroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted4 == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossOutroCinematicEnd_Init () {
    gt_ProtossOutroCinematicEnd = TriggerCreate("gt_ProtossOutroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Outro Cinematic Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_ProtossOutroCinematicCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ProtLow", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_p01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_p01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_p01_USER, RegionEntireMap(), false, false);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossOutroCinematicCleanup_Init () {
    gt_ProtossOutroCinematicCleanup = TriggerCreate("gt_ProtossOutroCinematicCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Players_Init();
    gt_Init02Units_Init();
    gt_Init03Technology_Init();
    gt_Init04UserInterface_Init();
    gt_Stage1_Init();
    gt_Stage2_Init();
    gt_Stage3_Init();
    gt_Stage4_Init();
    gt_ExitButton_Init();
    gt_ContinueButton_Init();
    gt_FriendlyFireHelper_Init();
    gt_FriendlyFireHelperUnpauser_Init();
    gt_MoveCommandHelper_Init();
    gt_MoveCommandHelperUnpauser_Init();
    gt_InfoTextUnitCreated_Init();
    gt_SupplyHelperActivator_Init();
    gt_SupplyHelperBuildOrder_Init();
    gt_SupplyHelperComplete_Init();
    gt_SupplyHelperSelection_Init();
    gt_SupplyHelperArrowLoop_Init();
    gt_SupplyHelperCleanup_Init();
    gt_WorkerFollowHelper_Init();
    gt_RuinsRevealer_Init();
    gt_BasicCleanup_Init();
    gt_BasicInitialization_Init();
    gt_BasicSelectMarine_Init();
    gt_BasicSelectMarineIntroQ_Init();
    gt_BasicSelectMarineCompleteQ_Init();
    gt_BasicSelectMarineReminderQ_Init();
    gt_BasicSelectMarineComplete_Init();
    gt_BasicMoveUnit_Init();
    gt_BasicMoveUnitIntroQ_Init();
    gt_BasicMoveUnitCompleteQ_Init();
    gt_BasicMoveUnitReminderQ_Init();
    gt_BasicMoveUnitMoveOrder_Init();
    gt_BasicMoveUnitComplete_Init();
    gt_BasicAttack_Init();
    gt_BasicAttackIntroQ_Init();
    gt_BasicAttackWrongTargetQ_Init();
    gt_BasicAttackCanceledTargetingQ_Init();
    gt_BasicAttackCanceledOrderQ_Init();
    gt_BasicAttackCompleteQ_Init();
    gt_BasicAttackReminderQ_Init();
    gt_BasicAttackAttackOrder_Init();
    gt_BasicAttackTargetingMode_Init();
    gt_BasicAttackComplete_Init();
    gt_BasicPanCamera_Init();
    gt_BasicPanCameraIntroQ_Init();
    gt_BasicPanCameraCompleteQ_Init();
    gt_BasicPanCameraReminderQ_Init();
    gt_BasicPanCameraLoopArrows_Init();
    gt_BasicPanCameraStopArrows_Init();
    gt_BasicPanCameraArrowHelper_Init();
    gt_BasicPanCameraComplete_Init();
    gt_BasicMinimap_Init();
    gt_BasicMinimapIntroQ_Init();
    gt_BasicMinimapCameraResetQ_Init();
    gt_BasicMinimapCompleteQ_Init();
    gt_BasicMinimapReminderQ_Init();
    gt_BasicMinimapCameraReset_Init();
    gt_BasicMinimapComplete_Init();
    gt_BasicDragSelect_Init();
    gt_BasicDragSelectQ_Init();
    gt_BasicDragSelectCompleteQ_Init();
    gt_BasicDragSelectReminderQ_Init();
    gt_BasicDragSelectComplete_Init();
    gt_BasicAttackGroup_Init();
    gt_BasicAttackGroupIntroQ_Init();
    gt_BasicAttackGroupWrongTargetQ_Init();
    gt_BasicAttackGroupCanceledTargetingQ_Init();
    gt_BasicAttackGroupCanceledOrderQ_Init();
    gt_BasicAttackGroupCompleteQ_Init();
    gt_BasicAttackGroupReminderQ_Init();
    gt_BasicAttackGroupAttackOrder_Init();
    gt_BasicAttackGroupTargetingMode_Init();
    gt_BasicAttackGroupComplete_Init();
    gt_BasicIntroCinematicQ_Init();
    gt_BasicIntroCinematicSetup_Init();
    gt_BasicIntroCinematic_Init();
    gt_BasicIntroCinematicEnd_Init();
    gt_BasicIntroCinematicCleanup_Init();
    gt_TerranCleanup_Init();
    gt_TerranInitialization_Init();
    gt_TerranFailstate_Init();
    gt_TerranStartMining_Init();
    gt_TerranStartMiningQ_Init();
    gt_TerranStartMiningCompleteQ_Init();
    gt_TerranStartMiningReminderQ_Init();
    gt_TerranStartMiningWorkerSelection_Init();
    gt_TerranStartMiningComplete_Init();
    gt_TerranMakeSCVs_Init();
    gt_TerranMakeSCVsQ_Init();
    gt_TerranMakeSCVsSelectCCQ_Init();
    gt_TerranMakeSCVsTrainSCVQ_Init();
    gt_TerranMakeSCVsTrainingStartedQ_Init();
    gt_TerranMakeSCVsCompleteQ_Init();
    gt_TerranMakeSCVsCreateObjective_Init();
    gt_TerranMakeSCVsUpdateObjective_Init();
    gt_TerranMakeSCVsReminder_Init();
    gt_TerranMakeSCVsCommandCenterSelection_Init();
    gt_TerranMakeSCVsTrainingStarted_Init();
    gt_TerranMakeSCVsReminderController_Init();
    gt_TerranMakeSCVsComplete_Init();
    gt_TerranMakeSupply_Init();
    gt_TerranMakeSupplyQ_Init();
    gt_TerranMakeSupplySelectSCVQ_Init();
    gt_TerranMakeSupplyOpenBuildMenuQ_Init();
    gt_TerranMakeSupplySupplyDepotButtonQ_Init();
    gt_TerranMakeSupplyPlaceDepotQ_Init();
    gt_TerranMakeSupplyBuildOrderQ_Init();
    gt_TerranMakeSupplyCompleteQ_Init();
    gt_TerranMakeSupplyCreateObjective_Init();
    gt_TerranMakeSupplyCompleteObjective_Init();
    gt_TerranMakeSupplyReminder_Init();
    gt_TerranMakeSupplySCVSelection_Init();
    gt_TerranMakeSupplyBuildMenu_Init();
    gt_TerranMakeSupplySupplyDepotTargeting_Init();
    gt_TerranMakeSupplyBuildOrder_Init();
    gt_TerranMakeSupplyComplete_Init();
    gt_TerranIdleSCV_Init();
    gt_TerranIdleSCVQ_Init();
    gt_TerranIdleSCVCompleteQ_Init();
    gt_TerranIdleSCVReminderQ_Init();
    gt_TerranIdleSCVSCVSelection_Init();
    gt_TerranIdleSCVComplete_Init();
    gt_TerranFinishSCVs_Init();
    gt_TerranFinishSCVsQ_Init();
    gt_TerranFinishSCVsCompleteQ_Init();
    gt_TerranFinishSCVsReminderQ_Init();
    gt_TerranFinishSCVsSupplyHelperDone_Init();
    gt_TerranFinishSCVsCommandCenterSelection_Init();
    gt_TerranFinishSCVsTrainingStarted_Init();
    gt_TerranFinishSCVsReminderController_Init();
    gt_TerranFinishSCVsComplete_Init();
    gt_TerranMakeBarracks_Init();
    gt_TerranMakeBarracksQ_Init();
    gt_TerranMakeBarracksSelectSCVQ_Init();
    gt_TerranMakeBarracksOpenBuildMenuQ_Init();
    gt_TerranMakeBarracksBarracksButtonQ_Init();
    gt_TerranMakeBarracksPlaceBarracksQ_Init();
    gt_TerranMakeBarracksCompleteQ_Init();
    gt_TerranMakeBarracksCreateObjective_Init();
    gt_TerranMakeBarracksCompleteObjective_Init();
    gt_TerranMakeBarracksReminder_Init();
    gt_TerranMakeBarracksSCVSelection_Init();
    gt_TerranMakeBarracksBuildMenu_Init();
    gt_TerranMakeBarracksBarracksTargeting_Init();
    gt_TerranMakeBarracksBuildOrder_Init();
    gt_TerranMakeBarracksComplete_Init();
    gt_TerranMakeMarines_Init();
    gt_TerranMakeMarinesQ_Init();
    gt_TerranMakeMarinesCompleteQ_Init();
    gt_TerranMakeMarinesReminderQ_Init();
    gt_TerranMakeMarinesCreateObjective_Init();
    gt_TerranMakeMarinesUpdateObjective_Init();
    gt_TerranMakeMarinesSupplyHelperDone_Init();
    gt_TerranMakeMarinesBarracksSelection_Init();
    gt_TerranMakeMarinesTrainingStarted_Init();
    gt_TerranMakeMarinesReminderController_Init();
    gt_TerranMakeMarinesComplete_Init();
    gt_TerranLeaveBase_Init();
    gt_TerranLeaveBaseQ_Init();
    gt_TerranLeaveBaseCompleteQ_Init();
    gt_TerranLeaveBaseReminderQ_Init();
    gt_TerranMissingScoutsMakeObjective_Init();
    gt_TerranLeaveBaseMarineSelection_Init();
    gt_TerranLeaveBaseComplete_Init();
    gt_TerranFindScouts_Init();
    gt_TerranFindScoutsQ_Init();
    gt_TerranFindScoutsWipeQ_Init();
    gt_TerranFindScoutsCompleteQ_Init();
    gt_TerranFindScoutsReminderQ_Init();
    gt_TerranMissingScoutsCompleteObjective_Init();
    gt_TerranFindScoutsRevealer1_Init();
    gt_TerranFindScoutsRevealer2_Init();
    gt_TerranFindScoutsAttackOrder_Init();
    gt_TerranFindScoutsMarineDeath_Init();
    gt_TerranFindScoutsComplete_Init();
    gt_TerranIntroCinematicQ_Init();
    gt_TerranIntroCinematicSetup_Init();
    gt_TerranIntroCinematic_Init();
    gt_TerranIntroCinematicEnd_Init();
    gt_TerranIntroCinematicCleanup_Init();
    gt_TerranIntroCinematicCutsceneHelper_Init();
    gt_ZergCleanup_Init();
    gt_ZergInitialization_Init();
    gt_ZergFailstate_Init();
    gt_ZergMakeOverlord_Init();
    gt_ZergMakeOverlordQ_Init();
    gt_ZergMakeOverlordSelectLarvaQ_Init();
    gt_ZergMakeOverlordClickOverlordQ_Init();
    gt_ZergMakeOverlordMorphStartedQ_Init();
    gt_ZergMakeOverlordCompleteQ_Init();
    gt_ZergMakeOverlordCreateObjective_Init();
    gt_ZergMakeOverlordCompleteObjective_Init();
    gt_ZergMakeOverlordReminder_Init();
    gt_ZergMakeOverlordHatcherySelection_Init();
    gt_ZergMakeOverlordMorphStarted_Init();
    gt_ZergMakeOverlordComplete_Init();
    gt_ZergMakeDrones_Init();
    gt_ZergMakeDronesQ_Init();
    gt_ZergMakeDronesMorphStartedQ_Init();
    gt_ZergMakeDronesCompleteQ_Init();
    gt_ZergMakeDronesSelectLarvaQ_Init();
    gt_ZergMakeDronesClickDroneQ_Init();
    gt_ZergMakeDronesTwoLarvaSelectedQ_Init();
    gt_ZergMakeDronesCreateObjective_Init();
    gt_ZergMakeDronesUpdateObjective_Init();
    gt_ZergMakeDronesCompleteObjective_Init();
    gt_ZergMakeDronesReminder_Init();
    gt_ZergMakeDronesHatcherySelection_Init();
    gt_ZergMakeDronesReminderController_Init();
    gt_ZergMakeDronesFirstMorph_Init();
    gt_ZergMakeDronesComplete_Init();
    gt_ZergMakeSpawningPool_Init();
    gt_ZergMakeSpawningPoolQ_Init();
    gt_ZergMakeSpawningPoolSelectDroneQ_Init();
    gt_ZergMakeSpawningPoolOpenBuildMenuQ_Init();
    gt_ZergMakeSpawningPoolSpawningPoolButtonQ_Init();
    gt_ZergMakeSpawningPoolPlaceSpawningPoolQ_Init();
    gt_ZergMakeSpawningPoolBuildOrderQ_Init();
    gt_ZergMakeSpawningPoolCompleteQ_Init();
    gt_ZergSpawningPoolCreateObjective_Init();
    gt_ZergSpawningPoolCompleteObjective_Init();
    gt_ZergMakeSpawningPoolReminder_Init();
    gt_ZergMakeSpawningPoolDroneSelection_Init();
    gt_ZergMakeSpawningPoolBuildMenu_Init();
    gt_ZergMakeSpawningPoolTargeting_Init();
    gt_ZergMakeSpawningPoolBuildOrder_Init();
    gt_ZergMakeSpawningPoolComplete_Init();
    gt_ZergMakeZerglings_Init();
    gt_ZergMakeZerglingsQ_Init();
    gt_ZergMakeZerglingsSelectLarvaQ_Init();
    gt_ZergMakeZerglingsClickZerglingQ_Init();
    gt_ZergMakeZerglingsDontWaitQ_Init();
    gt_ZergMakeZerglingsMorphStartedQ_Init();
    gt_ZergMakeZerglingsCompleteQ_Init();
    gt_ZergMakeZerglingsCreateObjective_Init();
    gt_ZergMakeZerglingsUpdateObjective_Init();
    gt_ZergMakeZerglingsCompleteObjective_Init();
    gt_ZergMakeZerglingsReminder_Init();
    gt_ZergMakeZerglingsSupplyHelperDone_Init();
    gt_ZergMakeZerglingsHatcherySelection_Init();
    gt_ZergMakeZerglingsMorphStarted_Init();
    gt_ZergMakeZerglingsFirstMorph_Init();
    gt_ZergMakeZerglingsComplete_Init();
    gt_ZergMakeExtractor_Init();
    gt_ZergMakeExtractorQ_Init();
    gt_ZergMakeExtractorSelectDroneQ_Init();
    gt_ZergMakeExtractorOpenBuildMenuQ_Init();
    gt_ZergMakeExtractorExtractorButtonQ_Init();
    gt_ZergMakeExtractorPlaceExtractorQ_Init();
    gt_ZergMakeExtractorBuildOrderQ_Init();
    gt_ZergMakeExtractorCompleteQ_Init();
    gt_ZergMakeExtractorCreateObjective_Init();
    gt_ZergMakeExtractorCompleteObjective_Init();
    gt_ZergMakeExtractorReminder_Init();
    gt_ZergMakeExtractorDroneSelection_Init();
    gt_ZergMakeExtractorBuildMenu_Init();
    gt_ZergMakeExtractorTargeting_Init();
    gt_ZergMakeExtractorBuildOrder_Init();
    gt_ZergMakeExtractorComplete_Init();
    gt_ZergTransferDrones_Init();
    gt_ZergTransferDronesQ_Init();
    gt_ZergTransferDronesCompleteQ_Init();
    gt_ZergTransferDronesReminderQ_Init();
    gt_ZergTransferDronesMakeObjective_Init();
    gt_ZergTransferDronesUpdateObjective_Init();
    gt_ZergTransferDronesDroneSelection_Init();
    gt_ZergTransferDronesComplete_Init();
    gt_ZergMakeRoachWarren_Init();
    gt_ZergMakeRoachWarrenQ_Init();
    gt_ZergMakeRoachWarrenSelectDroneQ_Init();
    gt_ZergMakeRoachWarrenOpenBuildMenuQ_Init();
    gt_ZergMakeRoachWarrenRoachWarrenButtonQ_Init();
    gt_ZergMakeRoachWarrenPlaceRoachWarrenQ_Init();
    gt_ZergMakeRoachWarrenBuildOrderQ_Init();
    gt_ZergMakeRoachWarrenCompleteQ_Init();
    gt_ZergMakeRoachWarrenCreateObjective_Init();
    gt_ZergMakeRoachWarrenCompleteObjective_Init();
    gt_ZergMakeRoachWarrenReminder_Init();
    gt_ZergMakeRoachWarrenDroneSelection_Init();
    gt_ZergMakeRoachWarrenBuildMenu_Init();
    gt_ZergMakeRoachWarrenTargeting_Init();
    gt_ZergMakeRoachWarrenBuildOrder_Init();
    gt_ZergMakeRoachWarrenComplete_Init();
    gt_ZergMakeRoaches_Init();
    gt_ZergMakeRoachesQ_Init();
    gt_ZergMakeRoachesSelectLarvaQ_Init();
    gt_ZergMakeRoachesClickRoachQ_Init();
    gt_ZergMakeRoachesDontWaitQ_Init();
    gt_ZergMakeRoachesMorphStartedQ_Init();
    gt_ZergMakeRoachesCompleteQ_Init();
    gt_ZergMakeRoachesCreateObjective_Init();
    gt_ZergMakeRoachesUpdateObjective_Init();
    gt_ZergMakeRoachesCompleteObjective_Init();
    gt_ZergMakeRoachesReminder_Init();
    gt_ZergMakeRoachesSupplyHelperDone_Init();
    gt_ZergMakeRoachesHatcherySelection_Init();
    gt_ZergMakeRoachesMorphStarted_Init();
    gt_ZergMakeRoachesFirstMorph_Init();
    gt_ZergMakeRoachesComplete_Init();
    gt_ZergSelectArmy_Init();
    gt_ZergSelectArmyQ_Init();
    gt_ZergSelectArmyCompleteQ_Init();
    gt_ZergSelectArmyReminderQ_Init();
    gt_ZergSelectArmyComplete_Init();
    gt_ZergAttack_Init();
    gt_ZergAttackQ_Init();
    gt_ZergAttackWipeQ_Init();
    gt_ZergAttackCompleteQ_Init();
    gt_ZergAttackReminderQ_Init();
    gt_ZergAttackCreateObjective_Init();
    gt_ZergAttackApproachMarines_Init();
    gt_ZergAttackUnitDeath_Init();
    gt_ZergAttackAttackOrder_Init();
    gt_ZergAttackSelectionReminder_Init();
    gt_ZergAttackComplete_Init();
    gt_ZergAttackBase_Init();
    gt_ZergAttackBaseQ_Init();
    gt_ZergAttackBaseWipeQ_Init();
    gt_ZergAttackBaseCompleteQ_Init();
    gt_ZergAttackBaseReminderQ_Init();
    gt_ZergAttackCompleteObjective_Init();
    gt_ZergAttackBaseRevealer_Init();
    gt_ZergAttackBaseApproachMarines_Init();
    gt_ZergAttackBaseUnitDeath_Init();
    gt_ZergAttackBaseAttackOrder_Init();
    gt_ZergAttackBaseSelectionReminder_Init();
    gt_ZergAttackBaseComplete_Init();
    gt_ZergIntroCinematicQ_Init();
    gt_ZergIntroCinematicSetup_Init();
    gt_ZergIntroCinematic_Init();
    gt_ZergIntroCinematicEnd_Init();
    gt_ZergIntroCinematicCleanup_Init();
    gt_ZergIntroCinematicCutsceneHelper_Init();
    gt_ProtossCleanup_Init();
    gt_ProtossInitialization_Init();
    gt_ProtossFailstate_Init();
    gt_ProtossInfestedTerrans_Init();
    gt_ProtossInfestedTerransQ_Init();
    gt_ProtossInfestedTerransInfestedQ_Init();
    gt_ProtossInfestedTerransCompleteQ_Init();
    gt_ProtossInfestedTerransReminderQ_Init();
    gt_ProtossInfestedTerransMakeObj_Init();
    gt_ProtossInfestedTerransCompleteObj_Init();
    gt_ProtossInfestedTerransAttackOrder_Init();
    gt_ProtossInfestedTerransAggroInfested_Init();
    gt_ProtossInfestedTerransComplete_Init();
    gt_ProtossZergEggs_Init();
    gt_ProtossZergEggsQ_Init();
    gt_ProtossZergEggsCompleteQ_Init();
    gt_ProtossZergEggsReminderQ_Init();
    gt_ProtossZergEggsMakeObj_Init();
    gt_ProtossZergEggsCompleteObj_Init();
    gt_ProtossZergEggsReminderReset_Init();
    gt_ProtossZergEggsComplete_Init();
    gt_ProtossFindBase_Init();
    gt_ProtossFindBaseQ_Init();
    gt_ProtossFindBaseApproachRocksQ_Init();
    gt_ProtossFindBaseCompleteQ_Init();
    gt_ProtossFindBaseReminderQ_Init();
    gt_ProtossFindBaseMakeObj_Init();
    gt_ProtossFindBaseCompleteObj_Init();
    gt_ProtossFindBaseApproachRocks_Init();
    gt_ProtossFindBaseComplete_Init();
    gt_ProtossBuildPylon_Init();
    gt_ProtossBuildPylonQ_Init();
    gt_ProtossBuildPylonSelectProbeQ_Init();
    gt_ProtossBuildPylonOpenBuildMenuQ_Init();
    gt_ProtossBuildPylonPylonButtonQ_Init();
    gt_ProtossBuildPylonPlacePylonQ_Init();
    gt_ProtossBuildPylonBuildOrderQ_Init();
    gt_ProtossBuildPylonBadBuildOrderQ_Init();
    gt_ProtossBuildPylonKindaBadBuildOrderQ_Init();
    gt_ProtossBuildPylonCompleteQ_Init();
    gt_ProtossBuildPylonMakeObj_Init();
    gt_ProtossBuildPylonCompleteObj_Init();
    gt_ProtossBuildPylonReminder_Init();
    gt_ProtossBuildPylonProbeSelection_Init();
    gt_ProtossBuildPylonBuildMenu_Init();
    gt_ProtossBuildPylonTargeting_Init();
    gt_ProtossBuildPylonBuildOrder_Init();
    gt_ProtossBuildPylonComplete_Init();
    gt_ProtossWarpZealots_Init();
    gt_ProtossWarpZealotsQ_Init();
    gt_ProtossWarpZealotsCompleteQ_Init();
    gt_ProtossWarpZealotsReminderQ_Init();
    gt_ProtossWarpZealotsMakeObj_Init();
    gt_ProtossWarpZealotsCompleteObj_Init();
    gt_ProtossWarpZealotsUpdateObj_Init();
    gt_ProtossWarpZealotsSupplyHelperDone_Init();
    gt_ProtossWarpZealotsGatewaySelection_Init();
    gt_ProtossWarpZealotsReminderController_Init();
    gt_ProtossWarpZealotsTrainingStarted_Init();
    gt_ProtossWarpZealotsComplete_Init();
    gt_ProtossBuildCyberCore_Init();
    gt_ProtossBuildCyberCoreQ_Init();
    gt_ProtossBuildCyberCoreSelectProbeQ_Init();
    gt_ProtossBuildCyberCoreOpenBuildMenuQ_Init();
    gt_ProtossBuildCyberCoreCyberCoreButtonQ_Init();
    gt_ProtossBuildCyberCorePlaceCyberCoreQ_Init();
    gt_ProtossBuildCyberCoreBuildOrderQ_Init();
    gt_ProtossBuildCyberCoreCompleteQ_Init();
    gt_ProtossBuildCyberCoreMakeObj_Init();
    gt_ProtossBuildCyberCoreCompleteObj_Init();
    gt_ProtossBuildCyberCoreReminder_Init();
    gt_ProtossBuildCyberCoreProbeSelection_Init();
    gt_ProtossBuildCyberCoreBuildMenu_Init();
    gt_ProtossBuildCyberCoreTargeting_Init();
    gt_ProtossBuildCyberCoreBuildOrder_Init();
    gt_ProtossBuildCyberCoreComplete_Init();
    gt_ProtossWarpStalkers_Init();
    gt_ProtossWarpStalkersQ_Init();
    gt_ProtossWarpStalkersCompleteQ_Init();
    gt_ProtossWarpStalkersReminderQ_Init();
    gt_ProtossWarpStalkersMakeObj_Init();
    gt_ProtossWarpStalkersCompleteObj_Init();
    gt_ProtossWarpStalkersUpdateObj_Init();
    gt_ProtossWarpStalkersSupplyHelperDone_Init();
    gt_ProtossWarpStalkersGatewaySelection_Init();
    gt_ProtossWarpStalkersReminderController_Init();
    gt_ProtossWarpStalkersTrainingStarted_Init();
    gt_ProtossWarpStalkersComplete_Init();
    gt_ProtossSurviveAttack_Init();
    gt_ProtossSurviveAttackQ_Init();
    gt_ProtossSurviveAttackCompleteQ_Init();
    gt_ProtossSurviveAttackMakeObj_Init();
    gt_ProtossSurviveAttackCompleteObj_Init();
    gt_ProtossSurviveAttackRocksDestroyed_Init();
    gt_ProtossSurviveAttackComplete_Init();
    gt_ProtossIntroCinematicQ_Init();
    gt_ProtossIntroCinematicSetup_Init();
    gt_ProtossIntroCinematic_Init();
    gt_ProtossIntroCinematicEnd_Init();
    gt_ProtossIntroCinematicCleanup_Init();
    gt_ProtossOutroCinematicQ_Init();
    gt_ProtossOutroCinematicSetup_Init();
    gt_ProtossOutroCinematic_Init();
    gt_ProtossOutroCinematicEnd_Init();
    gt_ProtossOutroCinematicCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
