//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Last Stand
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_ZergWanderers {
    int[5] lv_zerglingCounts;
    int[5] lv_hydraliskCounts;
    int[5] lv_roachCounts;
    int[5] lv_mutaliskCounts;
    int[5] lv_queenCounts;
    unitgroup[5] lv_unitGroups;
    region[5] lv_spawnRegions;
    region[5] lv_wanderRegions;
};

struct gs_RECORD_ZergDefense {
    unit lv_unit;
    string lv_type;
    point lv_location;
    int lv_region;
    bool lv_spawnInProgress;
};

struct gs_RECORD_CausewayDestructibles {
    actor[16] lv_doodadActors;
    bool[16] lv_doodadTriggered;
    int[16] lv_doodadCameraAreas;
    int lv_doodadCount;
    soundlink[16] lv_doodadSoundEffects;
    timer lv_cooldown;
    region lv_cameraArea1;
    region lv_cameraArea2;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_artanis;
int gv_zenithStonesTotal;
int gv_zenithStonesDestroyed;
string gv_mapMusicTrack;
fixed gv_zergOnShakuras;
int gv_zergCounterDialog;
int gv_zergCounterLabel;
int gv_overloadTempleDialog;
int gv_overloadTempleButton;
int gv_overloadTempleFlashingButton;
bool gv_overloadTempleButtonClicked;
gs_RECORD_ZergWanderers gv_zergWanderers;
gs_RECORD_ZergDefense[256] gv_zergDefenses;
int gv_numberOfZergDefenses;
unitgroup gv_overlords;
timer[5] gv_zergRespawnTimers;
revealer gv_extendedBaseRevealer;
revealer gv_bottomLeftRevealer;
revealer gv_bottomRightRevealer;
revealer gv_topLeftRevealer;
revealer gv_topRightRevealer;
gs_RECORD_CausewayDestructibles gv_causewayDestructiblesBottom;
gs_RECORD_CausewayDestructibles gv_causewayDestructiblesLeft;
gs_RECORD_CausewayDestructibles gv_causewayDestructiblesRight;
int[4] gv_zenithStonePings;
point[5] gv_gatherPoints;
unitgroup[5] gv_nextAttackWave;
int[5] gv_attackPings;
int gv_objectiveRescueStalkers;
int gv_objectiveDestroyZergBase;
int gv_objectiveDestroyZergBase3;
int gv_objectiveDestroyZergBase2;
int gv_objectiveRescueStalkers2;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
bool gv_introMusicCompleted;
int gv_introMinerals;

void InitGlobals () {
    int init_i;
    int init_i1;

    gv_zergOnShakuras = 49.0;
    gv_zergCounterDialog = c_invalidDialogId;
    gv_zergCounterLabel = c_invalidDialogControlId;
    gv_overloadTempleDialog = c_invalidDialogId;
    gv_overloadTempleButton = c_invalidDialogControlId;
    gv_overloadTempleFlashingButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_zergWanderers.lv_unitGroups[init_i1] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 255; init_i += 1) {
        gv_zergDefenses[init_i].lv_type = "SpineCrawler";
        gv_zergDefenses[init_i].lv_region = 1;
    }
    gv_overlords = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_zergRespawnTimers[init_i] = TimerCreate();
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_causewayDestructiblesBottom.lv_doodadCameraAreas[init_i1] = 1;
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_causewayDestructiblesBottom.lv_doodadSoundEffects[init_i1] = SoundLink("PShakuras02_WallCrumble", -1);
    }
    gv_causewayDestructiblesBottom.lv_cooldown = TimerCreate();
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_causewayDestructiblesLeft.lv_doodadCameraAreas[init_i1] = 1;
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_causewayDestructiblesLeft.lv_doodadSoundEffects[init_i1] = SoundLink("PShakuras02_WallCrumble", -1);
    }
    gv_causewayDestructiblesLeft.lv_cooldown = TimerCreate();
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_causewayDestructiblesRight.lv_doodadCameraAreas[init_i1] = 1;
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_causewayDestructiblesRight.lv_doodadSoundEffects[init_i1] = SoundLink("PShakuras02_WallCrumble", -1);
    }
    gv_causewayDestructiblesRight.lv_cooldown = TimerCreate();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_zenithStonePings[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_nextAttackWave[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_attackPings[init_i] = c_invalidPingId;
    }
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_CreepAroundPoint (point lp_point);
void gf_SpawnZergDefense (int lp_defenseIndex);
void gf_AddZergDefenseUnit (string lp_type, point lp_location);
void gf_SpawnZergDropPod ();
void gf_KillStairs (actor lp_doodad);
void gf_ReinforceZenithStone (string lp_reinforcingUnitType, point lp_destinationPoint);
void gf_AddZergtoNextAttackWave (int lp_unitCount, string lp_unitType, int lp_region);
void gf_SendZergAttackWave (int lp_region, int lp_gatherTime);
void gf_AIHybridNemesis (int lp_owner, unit lp_darkArchon, unitgroup lp_nearbyUnits);
void gf_WarpOutUnit (unit lp_unit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_StartGameQ;
trigger gt_DestroyStonesQuicklyQ;
trigger gt_ExpansionReminderQ;
trigger gt_BuildMorePhotonCannonsQ;
trigger gt_DarkTemplarReminderQ;
trigger gt_TempleAlignmentFX;
trigger gt_ZergCounter;
trigger gt_OverloadTempleButton;
trigger gt_OverloadTempleButtonClicked;
trigger gt_Autosave250MillionQ;
trigger gt_Autosave500MillionQ;
trigger gt_Autosave750MillionQ;
trigger gt_ZergReach1BillionQ;
trigger gt_ZergReach15BillionQ;
trigger gt_ZergSpawningInit;
trigger gt_ZergWanderingDefenses;
trigger gt_ZergRespawnTimers;
trigger gt_ZergRespawnTimerExpires;
trigger gt_AddZergDefenses5Minutes;
trigger gt_AddZergDefenses10Minutes;
trigger gt_AddZergDefenses14Minutes;
trigger gt_AddZergDefenses17Minutes;
trigger gt_DespawnOverlords;
trigger gt_FinalOverlordFrenzy;
trigger gt_DestroyBottomStone;
trigger gt_DestroyLeftStone;
trigger gt_DestroyRightStone;
trigger gt_InitCausewayDestructibles;
trigger gt_WindEffects;
trigger gt_BottomStoneEffects;
trigger gt_LeftStoneEffects;
trigger gt_RightStoneEffects;
trigger gt_ZenithStonesDestroyedQ;
trigger gt_ZenithStoneAttackWarningQ;
trigger gt_ReinforceZenithStones01;
trigger gt_ReinforceZenithStones02;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryMainObjectiveCompleted;
trigger gt_VictorySafety;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_AchievementHugeNumberofZergonShakuras;
trigger gt_AchievementFastZenithStones;
trigger gt_MasteryAbsurdNumberofZergonShakuras;
trigger gt_AnniversaryAchievementAbsurdNumberofZergonShakuras;
trigger gt_StartAI;
trigger gt_AttackWavesZerg;
trigger gt_AttackWavesZergandHybrid;
trigger gt_AttackWavesFinalOnslaught;
trigger gt_AttackWavesBonus;
trigger gt_FirstWaveQ;
trigger gt_ThirdWaveQ;
trigger gt_SixthWaveQ;
trigger gt_DoubleHitQ;
trigger gt_OverlordDropQ;
trigger gt_TripleHitQ;
trigger gt_HybridWaveQ;
trigger gt__3MinutesRemainQ;
trigger gt_ObjectiveZenithStonesCreate;
trigger gt_ObjectiveZenithStonesComplete;
trigger gt_ObjectiveZenithStonesUpdate;
trigger gt_ObjectiveHoldOutCreate;
trigger gt_ObjectiveHoldOutComplete;
trigger gt_ObjectiveOverloadTempleCreate;
trigger gt_ObjectiveOverloadTempleComplete;
trigger gt_ObjectiveTempleMustSurviveCreate;
trigger gt_ObjectiveTempleMustSurviveComplete;
trigger gt_ObjectiveTempleMustSurviveFailed;
trigger gt_ObjectiveMoreZergCreate;
trigger gt_ObjectiveMoreZergComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroMusic;
trigger gt_TempleAnimation;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryWarpOut;
trigger gt_VictoryMusic;
trigger gt_VictoryNydusWorms;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_CreepAroundPoint (point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    if ((CreepIsPresent(lp_point) == true) && (CreepIsPresent(PointWithOffsetPolar(lp_point, 1.0, 0.0)) == true) && (CreepIsPresent(PointWithOffsetPolar(lp_point, 1.0, 90.0)) == true) && (CreepIsPresent(PointWithOffsetPolar(lp_point, 1.0, 180.0)) == true) && (CreepIsPresent(PointWithOffsetPolar(lp_point, 1.0, 270.0)) == true)) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_SpawnZergDefense_Trigger = null;
int auto_gf_SpawnZergDefense_lp_defenseIndex;

void gf_SpawnZergDefense (int lp_defenseIndex) {
    auto_gf_SpawnZergDefense_lp_defenseIndex = lp_defenseIndex;

    if (auto_gf_SpawnZergDefense_Trigger == null) {
        auto_gf_SpawnZergDefense_Trigger = TriggerCreate("auto_gf_SpawnZergDefense_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnZergDefense_Trigger, false, false);
}

bool auto_gf_SpawnZergDefense_TriggerFunc (bool testConds, bool runActions) {
    int lp_defenseIndex = auto_gf_SpawnZergDefense_lp_defenseIndex;

    // Variable Declarations
    point lv_spawnPoint;
    unit lv_chosenQueen;
    unitgroup lv_eligibleQueens;

    // Automatic Variable Declarations
    unitgroup autoB71CE255_g;
    int autoB71CE255_u;
    unit autoB71CE255_var;

    // Variable Initialization
    lv_eligibleQueens = UnitGroupEmpty();

    // Implementation
    gv_zergDefenses[lp_defenseIndex].lv_spawnInProgress = true;
    Wait(20.0, c_timeAI);
    while (!((gf_CreepAroundPoint(gv_zergDefenses[lp_defenseIndex].lv_location) == true))) {
        Wait(1.0, c_timeAI);
    }
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    if ((gv_zergDefenses[lp_defenseIndex].lv_type == "CreepTumorBurrowed")) {
        while (true) {
            if ((UnitIsAlive(lv_chosenQueen) == false)) {
                lv_eligibleQueens = UnitGroupFilter("Queen", gv_pLAYER_02_DOMINION, gv_zergWanderers.lv_unitGroups[gv_zergDefenses[lp_defenseIndex].lv_region], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoB71CE255_g = lv_eligibleQueens;
                autoB71CE255_u = UnitGroupCount(autoB71CE255_g, c_unitCountAll);
                for (;; autoB71CE255_u -= 1) {
                    autoB71CE255_var = UnitGroupUnitFromEnd(autoB71CE255_g, autoB71CE255_u);
                    if (autoB71CE255_var == null) { break; }
                    if ((UnitGetCustomValue(autoB71CE255_var, 0) > 1)) {
                        UnitGroupRemove(lv_eligibleQueens, autoB71CE255_var);
                    }

                }
                if ((UnitGroupCount(lv_eligibleQueens, c_unitCountAlive) >= 1)) {
                    lv_chosenQueen = UnitGroupClosestToPoint(lv_eligibleQueens, gv_zergDefenses[lp_defenseIndex].lv_location);
                    UnitSetCustomValue(lv_chosenQueen, 0, 2.0);
                }

            }
            else {
                UnitIssueOrder(lv_chosenQueen, OrderTargetingPoint(AbilityCommand("QueenBuild", 0), gv_zergDefenses[lp_defenseIndex].lv_location), c_orderQueueReplace);
            }
            Wait(1.0, c_timeAI);
            if ((UnitGroupCount(UnitGroup("CreepTumorBurrowed", gv_pLAYER_02_DOMINION, RegionCircle(gv_zergDefenses[lp_defenseIndex].lv_location, 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                gv_zergDefenses[lp_defenseIndex].lv_unit = UnitGroupUnit(UnitGroup("CreepTumorBurrowed", gv_pLAYER_02_DOMINION, RegionCircle(gv_zergDefenses[lp_defenseIndex].lv_location, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
                UnitSetCustomValue(lv_chosenQueen, 0, 0.0);
                gv_zergDefenses[lp_defenseIndex].lv_spawnInProgress = false;
                return true;
            }

            if (((gf_CreepAroundPoint(gv_zergDefenses[lp_defenseIndex].lv_location) == false) || (libVCMI_gf_GameIsOver() == true))) {
                UnitSetCustomValue(lv_chosenQueen, 0, 0.0);
                gv_zergDefenses[lp_defenseIndex].lv_spawnInProgress = false;
                return true;
            }

        }
    }

    if (((gv_zergDefenses[lp_defenseIndex].lv_type == "SpineCrawler") || (gv_zergDefenses[lp_defenseIndex].lv_type == "SpineCrawlerUprooted"))) {
        gv_zergDefenses[lp_defenseIndex].lv_spawnInProgress = false;
        libNtve_gf_UnitCreateFacingPoint(1, "SpineCrawlerUprooted", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(gv_zergWanderers.lv_spawnRegions[gv_zergDefenses[lp_defenseIndex].lv_region]), UnitGetPosition(gv_artanis));
        gv_zergDefenses[lp_defenseIndex].lv_unit = UnitLastCreated();
        lv_spawnPoint = UnitGetPosition(UnitLastCreated());
        while (true) {
            if ((gf_CreepAroundPoint(gv_zergDefenses[lp_defenseIndex].lv_location) == true)) {
                UnitIssueOrder(gv_zergDefenses[lp_defenseIndex].lv_unit, OrderTargetingPoint(AbilityCommand("SpineCrawlerRoot", 0), gv_zergDefenses[lp_defenseIndex].lv_location), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_zergDefenses[lp_defenseIndex].lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnPoint), c_orderQueueReplace);
                if ((libNtve_gf_UnitInRegion(gv_zergDefenses[lp_defenseIndex].lv_unit, RegionCircle(lv_spawnPoint, 1.0)) == true)) {
                    UnitRemove(gv_zergDefenses[lp_defenseIndex].lv_unit);
                    return true;
                }

            }
            Wait(1.0, c_timeAI);
            if (((UnitGroupCount(UnitGroup("SpineCrawler", gv_pLAYER_02_DOMINION, RegionCircle(gv_zergDefenses[lp_defenseIndex].lv_location, 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitIsAlive(gv_zergDefenses[lp_defenseIndex].lv_unit) == false) || (libVCMI_gf_GameIsOver() == true))) {
                return true;
            }

        }
    }

    if (((gv_zergDefenses[lp_defenseIndex].lv_type == "SporeCrawler") || (gv_zergDefenses[lp_defenseIndex].lv_type == "SporeCrawlerUprooted"))) {
        gv_zergDefenses[lp_defenseIndex].lv_spawnInProgress = false;
        libNtve_gf_UnitCreateFacingPoint(1, "SporeCrawlerUprooted", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(gv_zergWanderers.lv_spawnRegions[gv_zergDefenses[lp_defenseIndex].lv_region]), UnitGetPosition(gv_artanis));
        gv_zergDefenses[lp_defenseIndex].lv_unit = UnitLastCreated();
        lv_spawnPoint = UnitGetPosition(UnitLastCreated());
        while (true) {
            if ((gf_CreepAroundPoint(gv_zergDefenses[lp_defenseIndex].lv_location) == true)) {
                UnitIssueOrder(gv_zergDefenses[lp_defenseIndex].lv_unit, OrderTargetingPoint(AbilityCommand("SporeCrawlerRoot", 0), gv_zergDefenses[lp_defenseIndex].lv_location), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_zergDefenses[lp_defenseIndex].lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnPoint), c_orderQueueReplace);
                if ((libNtve_gf_UnitInRegion(gv_zergDefenses[lp_defenseIndex].lv_unit, RegionCircle(lv_spawnPoint, 1.0)) == true)) {
                    UnitRemove(gv_zergDefenses[lp_defenseIndex].lv_unit);
                    return true;
                }

            }
            Wait(1.0, c_timeAI);
            if (((UnitGroupCount(UnitGroup("SporeCrawler", gv_pLAYER_02_DOMINION, RegionCircle(gv_zergDefenses[lp_defenseIndex].lv_location, 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitIsAlive(gv_zergDefenses[lp_defenseIndex].lv_unit) == false) || (libVCMI_gf_GameIsOver() == true))) {
                return true;
            }

        }
    }

    return true;
}

void gf_AddZergDefenseUnit (string lp_type, point lp_location) {
    // Variable Declarations
    int lv_region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_region = 1;

    // Implementation
    gv_numberOfZergDefenses += 1;
    if ((gv_numberOfZergDefenses > 255)) {
        return ;
    }

    gv_zergDefenses[gv_numberOfZergDefenses].lv_type = lp_type;
    gv_zergDefenses[gv_numberOfZergDefenses].lv_location = lp_location;
    if ((DistanceBetweenPoints(lp_location, RegionGetCenter(gv_zergWanderers.lv_wanderRegions[2])) < DistanceBetweenPoints(lp_location, RegionGetCenter(gv_zergWanderers.lv_wanderRegions[lv_region])))) {
        lv_region = 2;
    }

    if ((DistanceBetweenPoints(lp_location, RegionGetCenter(gv_zergWanderers.lv_wanderRegions[3])) < DistanceBetweenPoints(lp_location, RegionGetCenter(gv_zergWanderers.lv_wanderRegions[lv_region])))) {
        lv_region = 3;
    }

    if ((DistanceBetweenPoints(lp_location, RegionGetCenter(gv_zergWanderers.lv_wanderRegions[4])) < DistanceBetweenPoints(lp_location, RegionGetCenter(gv_zergWanderers.lv_wanderRegions[lv_region])))) {
        lv_region = 4;
    }

    gv_zergDefenses[gv_numberOfZergDefenses].lv_region = lv_region;
}

trigger auto_gf_SpawnZergDropPod_Trigger = null;

void gf_SpawnZergDropPod () {
    if (auto_gf_SpawnZergDropPod_Trigger == null) {
        auto_gf_SpawnZergDropPod_Trigger = TriggerCreate("auto_gf_SpawnZergDropPod_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnZergDropPod_Trigger, false, false);
}

bool auto_gf_SpawnZergDropPod_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randomPoint;

    // Automatic Variable Declarations
    unitgroup autoF24E052B_g;
    int autoF24E052B_u;
    unit autoF24E052B_var;

    // Variable Initialization

    // Implementation
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    lv_randomPoint = RegionRandomPoint(RegionFromId(22));
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, lv_randomPoint, UnitGroupEmpty(), false, gv_pLAYER_02_DOMINION);
    Wait(3.0, c_timeGame);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, gv_pLAYER_02_DOMINION, lv_randomPoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Zergling", 0, gv_pLAYER_02_DOMINION, lv_randomPoint);
    autoF24E052B_g = UnitLastCreatedGroup();
    autoF24E052B_u = UnitGroupCount(autoF24E052B_g, c_unitCountAll);
    for (;; autoF24E052B_u -= 1) {
        autoF24E052B_var = UnitGroupUnitFromEnd(autoF24E052B_g, autoF24E052B_u);
        if (autoF24E052B_var == null) { break; }
        AISetUnitSuicide(autoF24E052B_var, true);
    }
    return true;
}

trigger auto_gf_KillStairs_Trigger = null;
actor auto_gf_KillStairs_lp_doodad;

void gf_KillStairs (actor lp_doodad) {
    auto_gf_KillStairs_lp_doodad = lp_doodad;

    if (auto_gf_KillStairs_Trigger == null) {
        auto_gf_KillStairs_Trigger = TriggerCreate("auto_gf_KillStairs_TriggerFunc");
    }

    TriggerExecute(auto_gf_KillStairs_Trigger, false, false);
}

bool auto_gf_KillStairs_TriggerFunc (bool testConds, bool runActions) {
    actor lp_doodad = auto_gf_KillStairs_lp_doodad;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayAnimation(lp_doodad, c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    libNtve_gf_PlayAnimation(lp_doodad, c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

trigger auto_gf_ReinforceZenithStone_Trigger = null;
string auto_gf_ReinforceZenithStone_lp_reinforcingUnitType;
point auto_gf_ReinforceZenithStone_lp_destinationPoint;

void gf_ReinforceZenithStone (string lp_reinforcingUnitType, point lp_destinationPoint) {
    auto_gf_ReinforceZenithStone_lp_reinforcingUnitType = lp_reinforcingUnitType;
    auto_gf_ReinforceZenithStone_lp_destinationPoint = lp_destinationPoint;

    if (auto_gf_ReinforceZenithStone_Trigger == null) {
        auto_gf_ReinforceZenithStone_Trigger = TriggerCreate("auto_gf_ReinforceZenithStone_TriggerFunc");
    }

    TriggerExecute(auto_gf_ReinforceZenithStone_Trigger, false, false);
}

bool auto_gf_ReinforceZenithStone_TriggerFunc (bool testConds, bool runActions) {
    string lp_reinforcingUnitType = auto_gf_ReinforceZenithStone_lp_reinforcingUnitType;
    point lp_destinationPoint = auto_gf_ReinforceZenithStone_lp_destinationPoint;

    // Variable Declarations
    unit lv_reinforcingUnit;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RegionContainsPoint(RegionCircle(PointFromId(1151), 20.0), lp_destinationPoint) == true)) {
        lv_spawnPoint = RegionRandomPoint(RegionFromId(2));
    }
    else if ((RegionContainsPoint(RegionCircle(PointFromId(181), 20.0), lp_destinationPoint) == true)) {
        lv_spawnPoint = RegionRandomPoint(RegionFromId(3));
    }
    else if (true) {
        lv_spawnPoint = RegionRandomPoint(RegionFromId(1));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_reinforcingUnitType, 0, gv_pLAYER_02_DOMINION, lv_spawnPoint);
    lv_reinforcingUnit = UnitLastCreated();
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lv_reinforcingUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_reinforcingUnit), lp_destinationPoint) >= 1)) {
        UnitIssueOrder(lv_reinforcingUnit, OrderTargetingPoint(AbilityCommand("attack", 0), lp_destinationPoint), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    return true;
}

trigger auto_gf_AddZergtoNextAttackWave_Trigger = null;
int auto_gf_AddZergtoNextAttackWave_lp_unitCount;
string auto_gf_AddZergtoNextAttackWave_lp_unitType;
int auto_gf_AddZergtoNextAttackWave_lp_region;

void gf_AddZergtoNextAttackWave (int lp_unitCount, string lp_unitType, int lp_region) {
    auto_gf_AddZergtoNextAttackWave_lp_unitCount = lp_unitCount;
    auto_gf_AddZergtoNextAttackWave_lp_unitType = lp_unitType;
    auto_gf_AddZergtoNextAttackWave_lp_region = lp_region;

    if (auto_gf_AddZergtoNextAttackWave_Trigger == null) {
        auto_gf_AddZergtoNextAttackWave_Trigger = TriggerCreate("auto_gf_AddZergtoNextAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddZergtoNextAttackWave_Trigger, false, false);
}

bool auto_gf_AddZergtoNextAttackWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitCount = auto_gf_AddZergtoNextAttackWave_lp_unitCount;
    string lp_unitType = auto_gf_AddZergtoNextAttackWave_lp_unitType;
    int lp_region = auto_gf_AddZergtoNextAttackWave_lp_region;

    // Variable Declarations
    int lv_unitsNeeded;
    region lv_gatherRegion;

    // Automatic Variable Declarations
    unitgroup auto5AFBEDB2_g;
    int auto5AFBEDB2_u;
    unit auto5AFBEDB2_var;
    int auto02D7F1DE_n;
    int auto02D7F1DE_i;
    string auto36D052B2_val;

    // Variable Initialization

    // Implementation
    lv_unitsNeeded = lp_unitCount;
    lv_gatherRegion = RegionCircle(gv_gatherPoints[lp_region], 4.0);
    auto5AFBEDB2_g = UnitGroupFilter(lp_unitType, gv_pLAYER_02_DOMINION, gv_zergWanderers.lv_unitGroups[lp_region], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5AFBEDB2_u = UnitGroupCount(auto5AFBEDB2_g, c_unitCountAll);
    for (;; auto5AFBEDB2_u -= 1) {
        auto5AFBEDB2_var = UnitGroupUnitFromEnd(auto5AFBEDB2_g, auto5AFBEDB2_u);
        if (auto5AFBEDB2_var == null) { break; }
        if ((lv_unitsNeeded == 0)) {
            break;
        }

        if ((UnitGetCustomValue(auto5AFBEDB2_var, 0) < 1)) {
            lv_unitsNeeded -= 1;
            UnitGroupAdd(gv_nextAttackWave[lp_region], auto5AFBEDB2_var);
            UnitGroupRemove(gv_zergWanderers.lv_unitGroups[lp_region], auto5AFBEDB2_var);
            UnitIssueOrder(auto5AFBEDB2_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_gatherRegion)), c_orderQueueReplace);
            if ((TimerGetRemaining(gv_zergRespawnTimers[lp_region]) == 0.0)) {
                TimerStart(gv_zergRespawnTimers[lp_region], 20.0, false, c_timeAI);
            }
            else {
                TimerStart(gv_zergRespawnTimers[lp_region], (TimerGetRemaining(gv_zergRespawnTimers[lp_region]) + 1.0), false, c_timeAI);
            }
        }

    }
    auto02D7F1DE_n = lv_unitsNeeded;
    for (auto02D7F1DE_i = 1; auto02D7F1DE_i <= auto02D7F1DE_n; auto02D7F1DE_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, lp_unitType, 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(gv_zergWanderers.lv_spawnRegions[lp_region]), UnitGetPosition(gv_artanis));
        UnitGroupAdd(gv_nextAttackWave[lp_region], UnitLastCreated());
        auto36D052B2_val = lp_unitType;
        if (auto36D052B2_val == "Overlord") {
            UnitGroupAdd(gv_overlords, UnitLastCreated());
            UnitSetCustomValue(UnitLastCreated(), 0, 90.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_gatherRegion)), c_orderQueueReplace);
        }
        else if (auto36D052B2_val == "HybridNemesis") {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_gatherPoints[lp_region]), c_orderQueueReplace);
        }
        else if (auto36D052B2_val == "HybridDominatorVoid") {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_gatherPoints[lp_region]), c_orderQueueReplace);
        }
        else if (auto36D052B2_val == "HybridBehemoth") {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_gatherPoints[lp_region]), c_orderQueueReplace);
        }
        else if (auto36D052B2_val == "HybridReaver") {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_gatherRegion)), c_orderQueueReplace);
        }
        else if (auto36D052B2_val == "HybridDestroyer") {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_gatherRegion)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_gatherRegion)), c_orderQueueReplace);
        }
        Wait(0.1, c_timeAI);
    }
    return true;
}

trigger auto_gf_SendZergAttackWave_Trigger = null;
int auto_gf_SendZergAttackWave_lp_region;
int auto_gf_SendZergAttackWave_lp_gatherTime;

void gf_SendZergAttackWave (int lp_region, int lp_gatherTime) {
    auto_gf_SendZergAttackWave_lp_region = lp_region;
    auto_gf_SendZergAttackWave_lp_gatherTime = lp_gatherTime;

    if (auto_gf_SendZergAttackWave_Trigger == null) {
        auto_gf_SendZergAttackWave_Trigger = TriggerCreate("auto_gf_SendZergAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendZergAttackWave_Trigger, false, false);
}

bool auto_gf_SendZergAttackWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_region = auto_gf_SendZergAttackWave_lp_region;
    int lp_gatherTime = auto_gf_SendZergAttackWave_lp_gatherTime;

    // Variable Declarations
    region lv_gatherRegion;
    int lv_i;

    // Automatic Variable Declarations
    int auto18D7A77C_ae;
    const int auto18D7A77C_ai = 1;
    unitgroup autoEA605A4B_g;
    int autoEA605A4B_u;
    unit autoEA605A4B_var;
    unitgroup autoCBCCB96B_g;
    int autoCBCCB96B_u;
    unit autoCBCCB96B_var;

    // Variable Initialization

    // Implementation
    lv_gatherRegion = RegionCircle(gv_gatherPoints[lp_region], 4.0);
    auto18D7A77C_ae = lp_gatherTime;
    lv_i = 1;
    for ( ; ( (auto18D7A77C_ai >= 0 && lv_i <= auto18D7A77C_ae) || (auto18D7A77C_ai < 0 && lv_i >= auto18D7A77C_ae) ) ; lv_i += auto18D7A77C_ai ) {
        autoEA605A4B_g = gv_nextAttackWave[lp_region];
        autoEA605A4B_u = UnitGroupCount(autoEA605A4B_g, c_unitCountAll);
        for (;; autoEA605A4B_u -= 1) {
            autoEA605A4B_var = UnitGroupUnitFromEnd(autoEA605A4B_g, autoEA605A4B_u);
            if (autoEA605A4B_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                if (((UnitGetType(autoEA605A4B_var) == "HybridDominatorVoid") || (UnitGetType(autoEA605A4B_var) == "HybridBehemoth"))) {
                    UnitIssueOrder(autoEA605A4B_var, OrderTargetingPoint(AbilityCommand("attack", 0), gv_gatherPoints[lp_region]), c_orderQueueReplace);
                    UnitIssueOrder(autoEA605A4B_var, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_artanis)), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(autoEA605A4B_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_gatherRegion)), c_orderQueueReplace);
                }
            }

        }
        if ((lv_i > 20) && (libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[lp_region]) == true)) {
            PingDestroy(gv_attackPings[lp_region]);
            return true;
        }

        Wait(1.0, c_timeAI);
    }
    autoCBCCB96B_g = gv_nextAttackWave[lp_region];
    autoCBCCB96B_u = UnitGroupCount(autoCBCCB96B_g, c_unitCountAll);
    for (;; autoCBCCB96B_u -= 1) {
        autoCBCCB96B_var = UnitGroupUnitFromEnd(autoCBCCB96B_g, autoCBCCB96B_u);
        if (autoCBCCB96B_var == null) { break; }
        AISetUnitScriptControlled(autoCBCCB96B_var, false);
    }
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION, gv_gatherPoints[lp_region]);
    AIAttackWaveSetTargetUnitPoint(gv_pLAYER_02_DOMINION, gv_artanis);
    if ((lp_region == 4)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(550), true);
    }

    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION, gv_nextAttackWave[lp_region]);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    gv_nextAttackWave[lp_region] = UnitGroupEmpty();
    if ((lp_region == 4)) {
        Wait(5.0, c_timeAI);
    }

    PingDestroy(gv_attackPings[lp_region]);
    return true;
}

void gf_AIHybridNemesis (int lp_owner, unit lp_darkArchon, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup7;
    unit lv_currentUnit;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto673F34C5_g;
    int auto673F34C5_u;

    // Variable Initialization
    lv_enemyGroup7 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup7 = libVCMI_gf_AITacticalEnemiesWithinRange(lp_darkArchon, 9.0, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitAbilityCheck(lp_darkArchon, "HybridGeneralPhaseShift", true) == true) && (UnitCheckAbilCmdState(lp_darkArchon, AbilityCommand("HybridGeneralPhaseShift", 0), c_cmdStateCooldown) == false)) {
        auto673F34C5_g = lv_enemyGroup7;
        auto673F34C5_u = UnitGroupCount(auto673F34C5_g, c_unitCountAll);
        for (;; auto673F34C5_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto673F34C5_g, auto673F34C5_u);
            if (lv_currentUnit == null) { break; }
            if (((UnitHasBehavior2(lv_currentUnit, "HybridGeneralPhaseShift") == true) || (UnitHasBehavior2(lv_currentUnit, "HybridNemesisStasisPrevention") == true) || ((libLotv_gf_DifficultyValueInt2(1, 1, 1, 0) == 1) && (UnitGetType(lv_currentUnit) == "Pylon")))) {
                UnitGroupRemove(lv_enemyGroup7, lv_currentUnit);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0)) {
            lv_target = UnitGroupClosestToPoint(lv_enemyGroup7, UnitGetPosition(lp_darkArchon));
            libNtve_gf_AICast(lp_darkArchon, OrderTargetingUnit(AbilityCommand("HybridGeneralPhaseShift", 0), lv_target));
        }

    }

}

trigger auto_gf_WarpOutUnit_Trigger = null;
unit auto_gf_WarpOutUnit_lp_unit;

void gf_WarpOutUnit (unit lp_unit) {
    auto_gf_WarpOutUnit_lp_unit = lp_unit;

    if (auto_gf_WarpOutUnit_Trigger == null) {
        auto_gf_WarpOutUnit_Trigger = TriggerCreate("auto_gf_WarpOutUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpOutUnit_Trigger, false, false);
}

bool auto_gf_WarpOutUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_WarpOutUnit_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    UnitSetOwner(lp_unit, 0, false);
    UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Origin");
    Wait(1.7, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    if ((UnitIsAlive(lp_unit) == false)) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainFinish", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
    libNtve_gf_ShowHideUnit(lp_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PShakuras02");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libVCMI_gf_EnableDisableNeedPylonInfo(false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "KhaydarinMonolith", true);
    TechTreeAbilityAllow(1, AbilityCommand("ProtossBuild", 24), true);
    TechTreeUpgradeAllow(gv_pLAYER_02_DOMINION, "overlordtransport", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "overlordtransport", 1);
    TechTreeUpgradeAllow(gv_pLAYER_02_DOMINION, "overlordspeed", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "overlordspeed", 1);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("OverlordTransport", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("OverlordTransport", 2), true);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("BurrowZerglingDown", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("BurrowRoachDown", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("BurrowHydraliskDown", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("BurrowQueenDown", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Neutral);
    gv_introMinerals = 300;
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 150);
    libVCMI_gf_PM_DetectionUpgradesApply();
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAE3219DC_g;
    int autoAE3219DC_u;
    unit autoAE3219DC_var;
    unitgroup auto9658229D_g;
    int auto9658229D_u;
    unit auto9658229D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ZergSpawningInit, true, false);
    autoAE3219DC_g = UnitGroup("CreepTumorBurrowed", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAE3219DC_u = UnitGroupCount(autoAE3219DC_g, c_unitCountAll);
    for (;; autoAE3219DC_u -= 1) {
        autoAE3219DC_var = UnitGroupUnitFromEnd(autoAE3219DC_g, autoAE3219DC_u);
        if (autoAE3219DC_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoAE3219DC_var, RegionPlayableMap()) == false)) {
            libNtve_gf_MakeUnitInvulnerable(autoAE3219DC_var, true);
        }

    }
    gv_artanis = UnitFromId(19);
    UnitSetState(gv_artanis, c_unitStateTargetable, false);
    UnitBehaviorAddPlayer(gv_artanis, "HybridNemesisStasisPrevention", gv_pLAYER_01_USER, 1);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    gv_zenithStonesTotal = 3;
    auto9658229D_g = UnitGroup("ZenithStone", gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9658229D_u = UnitGroupCount(auto9658229D_g, c_unitCountAll);
    for (;; auto9658229D_u -= 1) {
        auto9658229D_var = UnitGroupUnitFromEnd(auto9658229D_g, auto9658229D_u);
        if (auto9658229D_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto9658229D_var, true, gv_pLAYER_01_USER);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PShakuras02_Music_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    PreloadModel("Assets\\Units\\Protoss\\PurifierMatrix\\PurifierMatrix.m3", false);
    PreloadModel("Assets\\Effects\\Protoss\\ProtossLargeUnitDeath\\ProtossLargeUnitDeath.m3", false);
    PreloadModel("Assets\\Effects\\Protoss\\ProtossSmallUnitDeath\\ProtossSmallUnitDeath.m3", false);
    PreloadModel("Assets\\Doodads\\THorner05SElectricalArcs\\THorner05SElectricalArcs.m3", false);
    PreloadModel("Assets\\Doodads\\TempleStoneInlay\\TempleStoneInlay.m3", false);
    PreloadImage("Assets\\Textures\\shakurasex1_cliff1.dds", false);
    PreloadImage("Assets\\Textures\\shakurasex1_cliff1_specular.dds", false);
    PreloadImage("Assets\\Textures\\shakurasex1_cliff1_normal.dds", false);
    PreloadImage("Assets\\Textures\\shakurasex1_cliff1_diffuse.dds", false);
    PreloadImage("Assets\\Textures\\shakurasex1cliff0_diffuse_00.dds", false);
    PreloadImage("Assets\\Textures\\shakurasex1cliff0_diffuse_01.dds", false);
    PreloadImage("Assets\\Textures\\shakurasex1cliff0_normal_00.dds", false);
    PreloadImage("Assets\\Textures\\shakurasex1cliff0_normal_01.dds", false);
    PreloadImage("Assets\\Textures\\shakurasex1cliff0_specular_00.dds", false);
    PreloadImage("Assets\\Textures\\shakurasex1cliff0_specular_01.dds", false);
    PreloadImage("Assets\\Textures\\shakurastemple_5normal.dds", false);
    PreloadImage("Assets\\Textures\\shakurastemple_5.dds", false);
    PreloadImage("Assets\\Textures\\shakurastemple_6normal.dds", false);
    PreloadImage("Assets\\Textures\\shakurastemple_6.dds", false);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "LightningBolt");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Wind_Storm", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy_Fast", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy_Fast", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_InitCausewayDestructibles, true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(28));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(9));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    gv_extendedBaseRevealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(21));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    gv_bottomLeftRevealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(37));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    gv_topLeftRevealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(38));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    gv_bottomRightRevealer = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(39));
    VisRevealerEnable(VisRevealerLastCreated(), true);
    gv_topRightRevealer = VisRevealerLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto632DBAC6_g;
    int auto632DBAC6_u;
    unit auto632DBAC6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("HybridGeneralPhaseShift", 0), false);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "zerglingmovementspeed", 1);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION, "zerglingattackspeed", 1);
    }

    auto632DBAC6_g = UnitGroup("ZenithStone", gv_pLAYER_02_DOMINION2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto632DBAC6_u = UnitGroupCount(auto632DBAC6_g, c_unitCountAll);
    for (;; auto632DBAC6_u -= 1) {
        auto632DBAC6_var = UnitGroupUnitFromEnd(auto632DBAC6_g, auto632DBAC6_u);
        if (auto632DBAC6_var == null) { break; }
        UnitSetPropertyFixed(auto632DBAC6_var, c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(2000, 2000, 2500, 3000));
        UnitSetPropertyFixed(auto632DBAC6_var, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("PhotonCannon");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_zergOnShakuras < 1000.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_zergOnShakuras = 999.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "gigazerg", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9919D0AC"), null, PointFromId(1));
    TriggerExecute(gt_ZergCounter, true, false);
    TriggerExecute(gt_TempleAlignmentFX, true, false);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(210)) == true)) {
        libVCMI_gf_CreateObjectivePing(true, PointFromId(1255), StringExternal("Param/Value/4823D93C"));
        gv_zenithStonePings[1] = PingLastCreated();
    }

    if ((UnitIsAlive(UnitFromId(1060)) == true)) {
        libVCMI_gf_CreateObjectivePing(true, PointFromId(1151), StringExternal("Param/Value/7D1DAFC7"));
        gv_zenithStonePings[2] = PingLastCreated();
    }

    if ((UnitIsAlive(UnitFromId(1173)) == true)) {
        libVCMI_gf_CreateObjectivePing(true, PointFromId(181), StringExternal("Param/Value/E3067EE6"));
        gv_zenithStonePings[3] = PingLastCreated();
    }

    TriggerExecute(gt_ObjectiveZenithStonesCreate, true, false);
    TriggerExecute(gt_ObjectiveHoldOutCreate, true, false);
    TriggerExecute(gt_ObjectiveTempleMustSurviveCreate, true, true);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_DestroyStonesQuicklyQ, true, false);
    Wait(120.0, c_timeAI);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1) && (UnitGroupCount(UnitGroup("Nexus", gv_pLAYER_01_USER, RegionCircle(PointFromId(18), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerExecute(gt_ExpansionReminderQ, true, true);
        if ((UnitGroupCount(UnitGroup("Nexus", gv_pLAYER_01_USER, RegionCircle(PointFromId(18), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(18), 5.0, Color(0.00, 100.00, 0.00));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Stones Quickly Q
//--------------------------------------------------------------------------------------------------
bool gt_DestroyStonesQuicklyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00006", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00037", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyStonesQuicklyQ_Init () {
    gt_DestroyStonesQuicklyQ = TriggerCreate("gt_DestroyStonesQuicklyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Expansion Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ExpansionReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00058", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpansionReminderQ_Init () {
    gt_ExpansionReminderQ = TriggerCreate("gt_ExpansionReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build More Photon Cannons Q
//--------------------------------------------------------------------------------------------------
bool gt_BuildMorePhotonCannonsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupCount(UnitGroup("KhaydarinMonolith", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup("PhotonCannon", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) < 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00015", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildMorePhotonCannonsQ_Init () {
    gt_BuildMorePhotonCannonsQ = TriggerCreate("gt_BuildMorePhotonCannonsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_zenithStonesDestroyed >= 3)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00059", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarReminderQ_Init () {
    gt_DarkTemplarReminderQ = TriggerCreate("gt_DarkTemplarReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Alignment FX
//--------------------------------------------------------------------------------------------------
bool gt_TempleAlignmentFX_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_zenithStonesDestroyed >= 1))) {
        Wait(0.5, c_timeAI);
    }
    libVCMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage1"), "Shakuras_XelNaga_Pyramid", RegionPlayableMap());
    libVCMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage1"), "Shakuras_XelNaga_GroundPlates", RegionPlayableMap());
    libNtve_gf_SendActorMessageToUnit(gv_artanis, libNtve_gf_Signal("Stage1"));
    Wait(5.0, c_timeGame);
    while (!((gv_zenithStonesDestroyed >= 2))) {
        Wait(0.5, c_timeAI);
    }
    libNtve_gf_SendActorMessageToUnit(gv_artanis, libNtve_gf_Signal("Stage2"));
    libVCMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage2"), "Shakuras_XelNaga_Pyramid", RegionPlayableMap());
    libVCMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage2"), "Shakuras_XelNaga_GroundPlates", RegionPlayableMap());
    Wait(5.0, c_timeGame);
    while (!((gv_zenithStonesDestroyed >= 3))) {
        Wait(0.5, c_timeAI);
    }
    libVCMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage3"), "Shakuras_XelNaga_Pyramid", RegionPlayableMap());
    libVCMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage3"), "Shakuras_XelNaga_GroundPlates", RegionPlayableMap());
    libNtve_gf_SendActorMessageToUnit(gv_artanis, libNtve_gf_Signal("Stage3"));
    Wait(5.0, c_timeGame);
    while (!((gv_zergOnShakuras >= 900.0))) {
        Wait(0.5, c_timeAI);
    }
    libVCMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage4"), "Shakuras_XelNaga_Pyramid", RegionPlayableMap());
    libVCMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage4"), "Shakuras_XelNaga_GroundPlates", RegionPlayableMap());
    libNtve_gf_SendActorMessageToUnit(gv_artanis, libNtve_gf_Signal("Stage4"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleAlignmentFX_Init () {
    gt_TempleAlignmentFX = TriggerCreate("gt_TempleAlignmentFX_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Counter
//--------------------------------------------------------------------------------------------------
bool gt_ZergCounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zergTimerDuration;
    int lv_bonusDuration;
    int lv_numberOfTicks;
    int lv_numberOfBonusTicks;
    fixed lv_tickAmount;
    fixed lv_bonusTickAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zergTimerDuration = 25;
    lv_numberOfTicks = (lv_zergTimerDuration*60*16);
    lv_tickAmount = (951/IntToFixed(lv_numberOfTicks));
    lv_bonusDuration = 5;
    lv_numberOfBonusTicks = (lv_bonusDuration*60*16);
    lv_bonusTickAmount = (500/IntToFixed(lv_numberOfBonusTicks));
    DialogCreate(270, 80, c_anchorTopRight, 10, 110, false);
    gv_zergCounterDialog = DialogLastCreated();
    DialogSetImageVisible(gv_zergCounterDialog, false);
    libNtve_gf_CreateDialogItemImage(gv_zergCounterDialog, 200, 80, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame.dds", c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogSetVisible(gv_zergCounterDialog, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(gv_zergCounterDialog, 500, 30, c_anchorTop, 0, 10, StringExternal("Param/Value/ED270442"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerTitleTop", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    TextExpressionSetToken("Param/Expression/861D5D81", "HUNDREDMILLIONS", FixedToText((gv_zergOnShakuras / 100.0), 3));
    TextExpressionSetToken("Param/Expression/861D5D81", "BILLIONS", FixedToText(gv_zergOnShakuras, 1));
    libNtve_gf_CreateDialogItemLabel(gv_zergCounterDialog, 500, 25, c_anchorBottom, 0, 10, TextExpressionAssemble("Param/Expression/861D5D81"), Color(100,100,100), false, 2.0);
    gv_zergCounterLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_zergCounterLabel, "TimerTextBottom", PlayerGroupAll());
    DialogControlSetVisible(gv_zergCounterLabel, PlayerGroupAll(), true);
    while (true) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((gv_zergOnShakuras >= 1000.0)) {
            gv_zergOnShakuras += lv_bonusTickAmount;
            TextExpressionSetToken("Param/Expression/37DA2CCF", "HUNDREDMILLIONS", FixedToText((gv_zergOnShakuras / 100.0), 3));
            TextExpressionSetToken("Param/Expression/37DA2CCF", "BILLIONSINT", IntToText(FixedToInt(Floor((gv_zergOnShakuras / 1000.0)))));
            TextExpressionSetToken("Param/Expression/37DA2CCF", "BILLIONS", FixedToText((gv_zergOnShakuras / 1000.0), 3));
            libNtve_gf_SetDialogItemText(gv_zergCounterLabel, TextExpressionAssemble("Param/Expression/37DA2CCF"), PlayerGroupAll());
        }
        else {
            gv_zergOnShakuras += lv_tickAmount;
            TextExpressionSetToken("Param/Expression/2A160980", "HUNDREDMILLIONS", FixedToText((gv_zergOnShakuras / 100.0), 3));
            TextExpressionSetToken("Param/Expression/2A160980", "BILLIONS", FixedToText(gv_zergOnShakuras, 1));
            libNtve_gf_SetDialogItemText(gv_zergCounterLabel, TextExpressionAssemble("Param/Expression/2A160980"), PlayerGroupAll());
        }
        if ((gv_zergOnShakuras >= 250.0)) {
            TriggerExecute(gt_Autosave250MillionQ, true, false);
        }

        if ((gv_zergOnShakuras >= 500.0)) {
            TriggerExecute(gt_Autosave500MillionQ, true, false);
        }

        if ((gv_zergOnShakuras >= 750.0)) {
            TriggerExecute(gt_Autosave750MillionQ, true, false);
        }

        if ((gv_zergOnShakuras >= 1000.0)) {
            TriggerExecute(gt_ObjectiveHoldOutComplete, true, false);
            TriggerExecute(gt_ZergReach1BillionQ, true, false);
            if ((gv_zenithStonesDestroyed == gv_zenithStonesTotal)) {
                TriggerExecute(gt_VictorySafety, true, false);
            }

        }

        if ((gv_zergOnShakuras >= 1500.0)) {
            TriggerExecute(gt_ObjectiveMoreZergComplete, true, false);
            TriggerExecute(gt_ZergReach15BillionQ, true, false);
        }

        if ((gv_zergOnShakuras >= 1800.0) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
            TriggerExecute(gt_AchievementHugeNumberofZergonShakuras, true, false);
        }

        if ((gv_zergOnShakuras >= 2200.0) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TriggerExecute(gt_MasteryAbsurdNumberofZergonShakuras, true, false);
        }

        if ((gv_zergOnShakuras >= 2300.0) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
            TriggerExecute(gt_AnniversaryAchievementAbsurdNumberofZergonShakuras, true, false);
        }

        Wait(0.0625, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergCounter_Init () {
    gt_ZergCounter = TriggerCreate("gt_ZergCounter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overload Temple Button
//--------------------------------------------------------------------------------------------------
bool gt_OverloadTempleButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_flashSwitch;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(350, 132, c_anchorTopRight, 10, 170, false);
    gv_overloadTempleDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(gv_overloadTempleDialog, 341, 100, c_anchorTopRight, 0, 0, StringToText(""), StringExternal("Param/Value/0606FE01"), "Assets\\Textures\\ui_button_confirmation_normaloverpressedover_protoss.dds");
    gv_overloadTempleButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_overloadTempleButton, "Assets\\Textures\\ui_button_confirmation_normalpressed_protoss.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_overloadTempleButton, c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_overloadTempleDialog, 341, 100, c_anchorTopRight, 0, 0, StringToText(""), StringExternal("Param/Value/A0ABD598"), "Assets\\Textures\\ui_button_confirmation_normaloverpressedover_protoss.dds");
    gv_overloadTempleFlashingButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_overloadTempleFlashingButton, "Assets\\Textures\\ui_button_confirmation_normaloverpressedover_protoss.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_overloadTempleFlashingButton, c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(gv_overloadTempleFlashingButton, 513, PlayerGroupAll());
    libNtve_gf_SetDialogItemAcceptMouse(gv_overloadTempleFlashingButton, false, PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(gv_overloadTempleFlashingButton, c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlFadeTransparency(gv_overloadTempleFlashingButton, PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(gv_overloadTempleDialog, PlayerGroupAll(), true);
    while (true) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            DialogSetVisible(gv_overloadTempleDialog, PlayerGroupAll(), false);
            return true;
        }

        if ((gv_zergOnShakuras < 1000.0)) {
            DialogControlSetEnabled(gv_overloadTempleButton, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_overloadTempleFlashingButton, PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemTooltip(gv_overloadTempleButton, StringExternal("Param/Value/34623335"), PlayerGroupAll());
        }
        else {
            DialogControlSetEnabled(gv_overloadTempleButton, PlayerGroupAll(), true);
            DialogControlSetVisible(gv_overloadTempleFlashingButton, PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemTooltip(gv_overloadTempleButton, StringExternal("Param/Value/086AF1E4"), PlayerGroupAll());
        }
        if ((lv_flashSwitch == 0)) {
            lv_flashSwitch = 1;
            DialogControlFadeTransparency(gv_overloadTempleFlashingButton, PlayerGroupAll(), 0.25, 0.0);
        }
        else {
            lv_flashSwitch = 0;
            DialogControlFadeTransparency(gv_overloadTempleFlashingButton, PlayerGroupAll(), 0.25, 100.0);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverloadTempleButton_Init () {
    gt_OverloadTempleButton = TriggerCreate("gt_OverloadTempleButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overload Temple Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_OverloadTempleButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventDialogControl() == gv_overloadTempleButton))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_VictorySafety, false);
    TriggerStop(gt_VictorySafety);
    TriggerStop(gt_OverloadTempleButton);
    DialogControlSetEnabled(gv_overloadTempleButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_overloadTempleDialog, PlayerGroupAll(), false);
    libNtve_gf_ChangeUnitDamage(gv_artanis, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerExecute(gt_VictoryMainObjectiveCompleted, true, false);
    SoundPlayForPlayer(SoundLink("PShakuras02_SmallHit", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("PShakuras02_OverloadTempleButton", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverloadTempleButtonClicked_Init () {
    gt_OverloadTempleButtonClicked = TriggerCreate("gt_OverloadTempleButtonClicked_Func");
    TriggerAddEventDialogControl(gt_OverloadTempleButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autosave 250 Million Q
//--------------------------------------------------------------------------------------------------
bool gt_Autosave250MillionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_zergOnShakuras >= 500.0)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00064", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00069", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/B7A5D2AC"));
    Wait(3.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Autosave250MillionQ_Init () {
    gt_Autosave250MillionQ = TriggerCreate("gt_Autosave250MillionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autosave 500 Million Q
//--------------------------------------------------------------------------------------------------
bool gt_Autosave500MillionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_zergOnShakuras >= 750.0)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00065", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00066", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/12A8B55B"));
    Wait(3.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Autosave500MillionQ_Init () {
    gt_Autosave500MillionQ = TriggerCreate("gt_Autosave500MillionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autosave 750 Million Q
//--------------------------------------------------------------------------------------------------
bool gt_Autosave750MillionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_zergOnShakuras >= 999.0)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00067", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00071", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/B5096F7F"));
    Wait(3.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Autosave750MillionQ_Init () {
    gt_Autosave750MillionQ = TriggerCreate("gt_Autosave750MillionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reach 1 Billion Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergReach1BillionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("PShakuras02_ObjectiveStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    if ((gv_zenithStonesDestroyed == gv_zenithStonesTotal)) {
        ObjectiveShow(gv_objectiveDestroyZergBase, PlayerGroupAll(), false);
        ObjectiveShow(gv_objectiveRescueStalkers, PlayerGroupAll(), false);
    }

    TriggerExecute(gt_ObjectiveOverloadTempleCreate, true, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_zenithStonesDestroyed == gv_zenithStonesTotal)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00039", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00051", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00052", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/17D136F6"));
    Wait(3.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReach1BillionQ_Init () {
    gt_ZergReach1BillionQ = TriggerCreate("gt_ZergReach1BillionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reach 1.5 Billion Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergReach15BillionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("PShakuras02_ObjectiveStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00074", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/046CD009"));
    Wait(3.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReach15BillionQ_Init () {
    gt_ZergReach15BillionQ = TriggerCreate("gt_ZergReach15BillionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Spawning Init
//--------------------------------------------------------------------------------------------------
bool gt_ZergSpawningInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto15C205E9_ae = 4;
    const int auto15C205E9_ai = 1;
    unitgroup autoA4B821CF_g;
    int autoA4B821CF_u;
    unit autoA4B821CF_var;
    const int auto8A86F1BF_ae = 4;
    const int auto8A86F1BF_ai = 1;
    const int auto25091702_ae = 4;
    const int auto25091702_ai = 1;
    const int autoD72AACE5_ae = 4;
    const int autoD72AACE5_ai = 1;
    const int auto8C36F797_ae = 4;
    const int auto8C36F797_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergWanderers.lv_spawnRegions[1] = RegionFromId(1);
    gv_zergWanderers.lv_spawnRegions[2] = RegionFromId(2);
    gv_zergWanderers.lv_spawnRegions[3] = RegionFromId(3);
    gv_zergWanderers.lv_spawnRegions[4] = RegionFromId(4);
    gv_zergWanderers.lv_wanderRegions[1] = RegionFromId(5);
    gv_zergWanderers.lv_wanderRegions[2] = RegionFromId(6);
    gv_zergWanderers.lv_wanderRegions[3] = RegionFromId(7);
    gv_zergWanderers.lv_wanderRegions[4] = RegionFromId(8);
    lv_i = 1;
    for ( ; ( (auto15C205E9_ai >= 0 && lv_i <= auto15C205E9_ae) || (auto15C205E9_ai < 0 && lv_i >= auto15C205E9_ae) ) ; lv_i += auto15C205E9_ai ) {
        autoA4B821CF_g = UnitGroup(null, gv_pLAYER_02_DOMINION, gv_zergWanderers.lv_wanderRegions[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA4B821CF_u = UnitGroupCount(autoA4B821CF_g, c_unitCountAll);
        for (;; autoA4B821CF_u -= 1) {
            autoA4B821CF_var = UnitGroupUnitFromEnd(autoA4B821CF_g, autoA4B821CF_u);
            if (autoA4B821CF_var == null) { break; }
            gv_numberOfZergDefenses += 1;
            if ((gv_numberOfZergDefenses > 255)) {
                break;
            }

            gv_zergDefenses[gv_numberOfZergDefenses].lv_unit = autoA4B821CF_var;
            gv_zergDefenses[gv_numberOfZergDefenses].lv_type = UnitGetType(autoA4B821CF_var);
            gv_zergDefenses[gv_numberOfZergDefenses].lv_location = UnitGetPosition(autoA4B821CF_var);
            gv_zergDefenses[gv_numberOfZergDefenses].lv_region = lv_i;
        }
    }
    gv_zergWanderers.lv_zerglingCounts[1] = libLotv_gf_DifficultyValueInt2(8, 8, 12, 12);
    gv_zergWanderers.lv_zerglingCounts[2] = libLotv_gf_DifficultyValueInt2(6, 6, 8, 8);
    gv_zergWanderers.lv_zerglingCounts[3] = libLotv_gf_DifficultyValueInt2(6, 6, 8, 8);
    gv_zergWanderers.lv_zerglingCounts[4] = libLotv_gf_DifficultyValueInt2(6, 6, 8, 8);
    gv_zergWanderers.lv_hydraliskCounts[1] = 2;
    gv_zergWanderers.lv_hydraliskCounts[2] = 1;
    gv_zergWanderers.lv_hydraliskCounts[3] = 1;
    gv_zergWanderers.lv_hydraliskCounts[4] = 2;
    gv_zergWanderers.lv_roachCounts[1] = 2;
    gv_zergWanderers.lv_roachCounts[2] = 1;
    gv_zergWanderers.lv_roachCounts[3] = 1;
    gv_zergWanderers.lv_mutaliskCounts[4] = 1;
    gv_zergWanderers.lv_queenCounts[1] = 2;
    gv_zergWanderers.lv_queenCounts[2] = 1;
    gv_zergWanderers.lv_queenCounts[3] = 1;
    gv_zergWanderers.lv_queenCounts[4] = 1;
    Wait(300.0, c_timeAI);
    lv_i = 1;
    for ( ; ( (auto8A86F1BF_ai >= 0 && lv_i <= auto8A86F1BF_ae) || (auto8A86F1BF_ai < 0 && lv_i >= auto8A86F1BF_ae) ) ; lv_i += auto8A86F1BF_ai ) {
        gv_zergWanderers.lv_zerglingCounts[lv_i] += libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        gv_zergWanderers.lv_hydraliskCounts[lv_i] += 1;
        gv_zergWanderers.lv_roachCounts[lv_i] += 1;
    }
    gv_zergWanderers.lv_mutaliskCounts[4] += 1;
    TriggerExecute(gt_AddZergDefenses5Minutes, true, false);
    Wait(300.0, c_timeAI);
    lv_i = 1;
    for ( ; ( (auto25091702_ai >= 0 && lv_i <= auto25091702_ae) || (auto25091702_ai < 0 && lv_i >= auto25091702_ae) ) ; lv_i += auto25091702_ai ) {
        gv_zergWanderers.lv_zerglingCounts[lv_i] += libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        gv_zergWanderers.lv_hydraliskCounts[lv_i] += 1;
        gv_zergWanderers.lv_roachCounts[lv_i] += 1;
    }
    gv_zergWanderers.lv_mutaliskCounts[4] += 1;
    TriggerExecute(gt_AddZergDefenses10Minutes, true, false);
    Wait(60.0, c_timeAI);
    RegionAddRegion(gv_zergWanderers.lv_wanderRegions[1], RegionFromId(10));
    RegionAddRegion(gv_zergWanderers.lv_wanderRegions[2], RegionFromId(12));
    RegionAddRegion(gv_zergWanderers.lv_wanderRegions[3], RegionFromId(15));
    RegionAddRegion(gv_zergWanderers.lv_wanderRegions[4], RegionFromId(14));
    Wait(180.0, c_timeAI);
    lv_i = 1;
    for ( ; ( (autoD72AACE5_ai >= 0 && lv_i <= autoD72AACE5_ae) || (autoD72AACE5_ai < 0 && lv_i >= autoD72AACE5_ae) ) ; lv_i += autoD72AACE5_ai ) {
        gv_zergWanderers.lv_zerglingCounts[lv_i] += libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        gv_zergWanderers.lv_hydraliskCounts[lv_i] += 1;
        gv_zergWanderers.lv_roachCounts[lv_i] += 1;
    }
    gv_zergWanderers.lv_mutaliskCounts[4] += 1;
    TriggerExecute(gt_AddZergDefenses14Minutes, true, false);
    Wait(180.0, c_timeAI);
    lv_i = 1;
    for ( ; ( (auto8C36F797_ai >= 0 && lv_i <= auto8C36F797_ae) || (auto8C36F797_ai < 0 && lv_i >= auto8C36F797_ae) ) ; lv_i += auto8C36F797_ai ) {
        gv_zergWanderers.lv_queenCounts[lv_i] += 1;
    }
    TriggerExecute(gt_AddZergDefenses17Minutes, true, false);
    if ((gv_zenithStonesDestroyed < 3) && (libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_DarkTemplarReminderQ, true, false);
    }

    Wait(60.0, c_timeAI);
    RegionAddRegion(gv_zergWanderers.lv_wanderRegions[1], RegionFromId(11));
    RegionAddRegion(gv_zergWanderers.lv_wanderRegions[2], RegionFromId(13));
    RegionAddRegion(gv_zergWanderers.lv_wanderRegions[3], RegionFromId(16));
    gv_gatherPoints[1] = PointFromId(1040);
    gv_gatherPoints[2] = PointFromId(1041);
    gv_gatherPoints[3] = PointFromId(1042);
    VisRevealerEnable(gv_topLeftRevealer, false);
    VisRevealerEnable(gv_bottomLeftRevealer, false);
    VisRevealerEnable(gv_topRightRevealer, false);
    VisRevealerEnable(gv_bottomRightRevealer, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSpawningInit_Init () {
    gt_ZergSpawningInit = TriggerCreate("gt_ZergSpawningInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Wandering/Defenses
//--------------------------------------------------------------------------------------------------
bool gt_ZergWanderingDefenses_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto507D5E33_ae = 4;
    const int auto507D5E33_ai = 1;
    unitgroup auto3DB2BE65_g;
    int auto3DB2BE65_u;
    unit auto3DB2BE65_var;
    int autoD45F4331_ae;
    const int autoD45F4331_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto507D5E33_ai >= 0 && lv_i <= auto507D5E33_ae) || (auto507D5E33_ai < 0 && lv_i >= auto507D5E33_ae) ) ; lv_i += auto507D5E33_ai ) {
        auto3DB2BE65_g = gv_zergWanderers.lv_unitGroups[lv_i];
        auto3DB2BE65_u = UnitGroupCount(auto3DB2BE65_g, c_unitCountAll);
        for (;; auto3DB2BE65_u -= 1) {
            auto3DB2BE65_var = UnitGroupUnitFromEnd(auto3DB2BE65_g, auto3DB2BE65_u);
            if (auto3DB2BE65_var == null) { break; }
            if ((RandomInt(1, 8) == 1) && (UnitGetCustomValue(auto3DB2BE65_var, 0) < 1)) {
                UnitIssueOrder(auto3DB2BE65_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_zergWanderers.lv_wanderRegions[lv_i])), c_orderQueueReplace);
            }

        }
        Wait(0.25, c_timeAI);
    }
    autoD45F4331_ae = gv_numberOfZergDefenses;
    lv_i = 1;
    for ( ; ( (autoD45F4331_ai >= 0 && lv_i <= autoD45F4331_ae) || (autoD45F4331_ai < 0 && lv_i >= autoD45F4331_ae) ) ; lv_i += autoD45F4331_ai ) {
        if ((UnitIsAlive(gv_zergDefenses[lv_i].lv_unit) == false) && (gv_zergDefenses[lv_i].lv_spawnInProgress == false) && (gf_CreepAroundPoint(gv_zergDefenses[lv_i].lv_location) == true)) {
            gf_SpawnZergDefense(lv_i);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergWanderingDefenses_Init () {
    gt_ZergWanderingDefenses = TriggerCreate("gt_ZergWanderingDefenses_Func");
    TriggerAddEventTimePeriodic(gt_ZergWanderingDefenses, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Respawn Timers
//--------------------------------------------------------------------------------------------------
bool gt_ZergRespawnTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_index;

    // Automatic Variable Declarations
    const int auto747C0BC8_ae = 4;
    const int auto747C0BC8_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto747C0BC8_ai >= 0 && lv_i <= auto747C0BC8_ae) || (auto747C0BC8_ai < 0 && lv_i >= auto747C0BC8_ae) ) ; lv_i += auto747C0BC8_ai ) {
        if ((UnitGroupHasUnit(gv_zergWanderers.lv_unitGroups[lv_i], EventUnit()) == true)) {
            lv_index = lv_i;
            break;
        }

    }
    if ((lv_index == 0)) {
        return true;
    }

    if ((TimerGetRemaining(gv_zergRespawnTimers[lv_index]) == 0.0)) {
        TimerStart(gv_zergRespawnTimers[lv_index], 20.0, false, c_timeAI);
    }
    else {
        TimerStart(gv_zergRespawnTimers[lv_index], (TimerGetRemaining(gv_zergRespawnTimers[lv_index]) + 1.0), false, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergRespawnTimers_Init () {
    gt_ZergRespawnTimers = TriggerCreate("gt_ZergRespawnTimers_Func");
    TriggerAddEventUnitDied(gt_ZergRespawnTimers, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Respawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_ZergRespawnTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_index;

    // Automatic Variable Declarations
    const int autoDF94FFE9_ae = 4;
    const int autoDF94FFE9_ai = 1;
    int autoFBCA7DCB_n;
    int autoFBCA7DCB_i;
    int auto284EACDE_n;
    int auto284EACDE_i;
    int auto00B2F57F_n;
    int auto00B2F57F_i;
    int auto0C700A93_n;
    int auto0C700A93_i;
    int auto657C6E4C_n;
    int auto657C6E4C_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoDF94FFE9_ai >= 0 && lv_i <= autoDF94FFE9_ae) || (autoDF94FFE9_ai < 0 && lv_i >= autoDF94FFE9_ae) ) ; lv_i += autoDF94FFE9_ai ) {
        if ((EventTimer() == gv_zergRespawnTimers[lv_i])) {
            lv_index = lv_i;
            break;
        }

    }
    if ((lv_index == 0)) {
        return true;
    }

    autoFBCA7DCB_n = (gv_zergWanderers.lv_zerglingCounts[lv_index] - UnitGroupCount(UnitGroupFilter("Zergling", gv_pLAYER_02_DOMINION, gv_zergWanderers.lv_unitGroups[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    for (autoFBCA7DCB_i = 1; autoFBCA7DCB_i <= autoFBCA7DCB_n; autoFBCA7DCB_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(gv_zergWanderers.lv_spawnRegions[lv_index]), UnitGetPosition(gv_artanis));
        UnitGroupAdd(gv_zergWanderers.lv_unitGroups[lv_index], UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_zergWanderers.lv_wanderRegions[lv_index])), c_orderQueueReplace);
    }
    Wait(0.0625, c_timeAI);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    auto284EACDE_n = (gv_zergWanderers.lv_roachCounts[lv_index] - UnitGroupCount(UnitGroupFilter("Roach", gv_pLAYER_02_DOMINION, gv_zergWanderers.lv_unitGroups[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    for (auto284EACDE_i = 1; auto284EACDE_i <= auto284EACDE_n; auto284EACDE_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Roach", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(gv_zergWanderers.lv_spawnRegions[lv_index]), UnitGetPosition(gv_artanis));
        UnitGroupAdd(gv_zergWanderers.lv_unitGroups[lv_index], UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_zergWanderers.lv_wanderRegions[lv_index])), c_orderQueueReplace);
    }
    Wait(0.0625, c_timeAI);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    auto00B2F57F_n = (gv_zergWanderers.lv_hydraliskCounts[lv_index] - UnitGroupCount(UnitGroupFilter("Hydralisk", gv_pLAYER_02_DOMINION, gv_zergWanderers.lv_unitGroups[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    for (auto00B2F57F_i = 1; auto00B2F57F_i <= auto00B2F57F_n; auto00B2F57F_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Hydralisk", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(gv_zergWanderers.lv_spawnRegions[lv_index]), UnitGetPosition(gv_artanis));
        UnitGroupAdd(gv_zergWanderers.lv_unitGroups[lv_index], UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_zergWanderers.lv_wanderRegions[lv_index])), c_orderQueueReplace);
    }
    Wait(0.0625, c_timeAI);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    auto0C700A93_n = (gv_zergWanderers.lv_queenCounts[lv_index] - UnitGroupCount(UnitGroupFilter("Queen", gv_pLAYER_02_DOMINION, gv_zergWanderers.lv_unitGroups[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    for (auto0C700A93_i = 1; auto0C700A93_i <= auto0C700A93_n; auto0C700A93_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Queen", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(gv_zergWanderers.lv_spawnRegions[lv_index]), UnitGetPosition(gv_artanis));
        UnitGroupAdd(gv_zergWanderers.lv_unitGroups[lv_index], UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_zergWanderers.lv_wanderRegions[lv_index])), c_orderQueueReplace);
    }
    Wait(0.0625, c_timeAI);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    auto657C6E4C_n = (gv_zergWanderers.lv_mutaliskCounts[lv_index] - UnitGroupCount(UnitGroupFilter("Mutalisk", gv_pLAYER_02_DOMINION, gv_zergWanderers.lv_unitGroups[lv_index], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    for (auto657C6E4C_i = 1; auto657C6E4C_i <= auto657C6E4C_n; auto657C6E4C_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(gv_zergWanderers.lv_spawnRegions[lv_index]), UnitGetPosition(gv_artanis));
        UnitGroupAdd(gv_zergWanderers.lv_unitGroups[lv_index], UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_zergWanderers.lv_wanderRegions[lv_index])), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergRespawnTimerExpires_Init () {
    gt_ZergRespawnTimerExpires = TriggerCreate("gt_ZergRespawnTimerExpires_Func");
    TriggerAddEventTimer(gt_ZergRespawnTimerExpires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Zerg Defenses - 5 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_AddZergDefenses5Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(721));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(722));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(723));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(743));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(745));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(744));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(726));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(727));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(748));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(749));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(731));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(732));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(733));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(753));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(754));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(755));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(737));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(738));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(739));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(759));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(760));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(761));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddZergDefenses5Minutes_Init () {
    gt_AddZergDefenses5Minutes = TriggerCreate("gt_AddZergDefenses5Minutes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Zerg Defenses - 10 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_AddZergDefenses10Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(765));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(766));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(767));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(773));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(774));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(775));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(776));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(777));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(781));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(782));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(783));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(789));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(790));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(791));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(792));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(793));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(797));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(798));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(799));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(803));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(804));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(805));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(811));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(812));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(813));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(814));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(815));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddZergDefenses10Minutes_Init () {
    gt_AddZergDefenses10Minutes = TriggerCreate("gt_AddZergDefenses10Minutes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Zerg Defenses - 14 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_AddZergDefenses14Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(829));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(830));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(831));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(832));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(833));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(834));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(835));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(836));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(837));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(838));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(841));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(839));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(840));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_AddZergDefenseUnit("SporeCrawler", PointFromId(1335));
    }

    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(855));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(856));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(857));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(858));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(859));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(860));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(861));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(862));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(863));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(864));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(865));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(866));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(867));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_AddZergDefenseUnit("SporeCrawler", PointFromId(1336));
    }

    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(873));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(874));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(875));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(876));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(877));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(884));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(886));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(887));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(885));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(888));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(889));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(898));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(899));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(900));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(901));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(902));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(903));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(904));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(905));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(918));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(916));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(917));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(915));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(922));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(921));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(923));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(919));
    gf_AddZergDefenseUnit("SporeCrawler", PointFromId(920));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_AddZergDefenseUnit("SporeCrawler", PointFromId(1337));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddZergDefenses14Minutes_Init () {
    gt_AddZergDefenses14Minutes = TriggerCreate("gt_AddZergDefenses14Minutes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Zerg Defenses - 17 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_AddZergDefenses17Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(929));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(930));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(931));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(932));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(933));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(943));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(944));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(945));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(948));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_AddZergDefenseUnit("SpineCrawler", PointFromId(946));
        gf_AddZergDefenseUnit("SpineCrawler", PointFromId(947));
        gf_AddZergDefenseUnit("SpineCrawler", PointFromId(949));
        gf_AddZergDefenseUnit("SpineCrawler", PointFromId(950));
        gf_AddZergDefenseUnit("SporeCrawler", PointFromId(1338));
    }

    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(936));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(951));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(959));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(961));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(964));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_AddZergDefenseUnit("SpineCrawler", PointFromId(962));
        gf_AddZergDefenseUnit("SpineCrawler", PointFromId(963));
        gf_AddZergDefenseUnit("SporeCrawler", PointFromId(1339));
    }

    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(974));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(975));
    gf_AddZergDefenseUnit("CreepTumorBurrowed", PointFromId(976));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(979));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(980));
    gf_AddZergDefenseUnit("SpineCrawler", PointFromId(981));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_AddZergDefenseUnit("SpineCrawler", PointFromId(977));
        gf_AddZergDefenseUnit("SpineCrawler", PointFromId(978));
        gf_AddZergDefenseUnit("SporeCrawler", PointFromId(1340));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddZergDefenses17Minutes_Init () {
    gt_AddZergDefenses17Minutes = TriggerCreate("gt_AddZergDefenses17Minutes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Despawn Overlords
//--------------------------------------------------------------------------------------------------
bool gt_DespawnOverlords_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto34046415_g;
    int auto34046415_u;
    unit auto34046415_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto34046415_g = gv_overlords;
    auto34046415_u = UnitGroupCount(auto34046415_g, c_unitCountAll);
    for (;; auto34046415_u -= 1) {
        auto34046415_var = UnitGroupUnitFromEnd(auto34046415_g, auto34046415_u);
        if (auto34046415_var == null) { break; }
        if ((UnitGetCustomValue(auto34046415_var, 0) > 1.5)) {
            if ((libNtve_gf_UnitInRegion(auto34046415_var, RegionFromId(28)) == true)) {
                UnitSetCustomValue(auto34046415_var, 0, 0.0);
            }

            UnitSetCustomValue(auto34046415_var, 0, (UnitGetCustomValue(auto34046415_var, 0) - 1.0));
        }
        else {
            if ((UnitGroupCount(UnitCargoGroup(auto34046415_var), c_unitCountAlive) == 0)) {
                UnitIssueOrder(auto34046415_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1026)), c_orderQueueReplace);
            }

            if ((libNtve_gf_UnitInRegion(auto34046415_var, RegionFromId(4)) == true)) {
                UnitRemove(auto34046415_var);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DespawnOverlords_Init () {
    gt_DespawnOverlords = TriggerCreate("gt_DespawnOverlords_Func");
    TriggerAddEventTimePeriodic(gt_DespawnOverlords, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Overlord Frenzy
//--------------------------------------------------------------------------------------------------
bool gt_FinalOverlordFrenzy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_overlordFrenzyGroup;

    // Automatic Variable Declarations
    unitgroup auto86B5DE70_g;
    int auto86B5DE70_u;
    unit auto86B5DE70_var;

    // Variable Initialization
    lv_overlordFrenzyGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitGroupCount(lv_overlordFrenzyGroup, c_unitCountAlive) < 6)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Overlord", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(gv_zergWanderers.lv_spawnRegions[RandomInt(1, 4)]), UnitGetPosition(gv_artanis));
            UnitGroupAdd(lv_overlordFrenzyGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(22))), c_orderQueueReplace);
        }
        else {
            auto86B5DE70_g = lv_overlordFrenzyGroup;
            auto86B5DE70_u = UnitGroupCount(auto86B5DE70_g, c_unitCountAll);
            for (;; auto86B5DE70_u -= 1) {
                auto86B5DE70_var = UnitGroupUnitFromEnd(auto86B5DE70_g, auto86B5DE70_u);
                if (auto86B5DE70_var == null) { break; }
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(auto86B5DE70_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(22))), c_orderQueueReplace);
                }

            }
        }
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalOverlordFrenzy_Init () {
    gt_FinalOverlordFrenzy = TriggerCreate("gt_FinalOverlordFrenzy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Bottom Stone
//--------------------------------------------------------------------------------------------------
bool gt_DestroyBottomStone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2DBC0922_g;
    int auto2DBC0922_u;
    unit auto2DBC0922_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_zenithStonesDestroyed += 1;
    TriggerExecute(gt_ObjectiveZenithStonesUpdate, true, false);
    PingDestroy(gv_zenithStonePings[1]);
    auto2DBC0922_g = UnitGroup(null, c_playerAny, RegionCircle(PointFromId(1255), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2DBC0922_u = UnitGroupCount(auto2DBC0922_g, c_unitCountAll);
    for (;; auto2DBC0922_u -= 1) {
        auto2DBC0922_var = UnitGroupUnitFromEnd(auto2DBC0922_g, auto2DBC0922_u);
        if (auto2DBC0922_var == null) { break; }
        if (((UnitTypeTestAttribute(UnitGetType(auto2DBC0922_var), c_unitAttributeStructure) == true) || (UnitGetOwner(auto2DBC0922_var) == gv_pLAYER_02_DOMINION))) {
            UnitKill(auto2DBC0922_var);
        }

    }
    gf_KillStairs(ActorFromDoodad(DoodadFromId(684)));
    TerrainShowRegion(RegionFromId(18), false);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("PShakuras02_BigHit", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_BottomStoneEffects, true, false);
    TriggerExecute(gt_WindEffects, true, false);
    SoundPlayForPlayer(SoundLink("PShakuras02_WallExplode", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
    Wait(3.0, c_timeReal);
    if ((gv_zenithStonesDestroyed == gv_zenithStonesTotal)) {
        TriggerExecute(gt_ObjectiveZenithStonesComplete, true, false);
        TriggerExecute(gt_AchievementFastZenithStones, true, false);
        if ((gv_zergOnShakuras >= 1000.0)) {
            TriggerExecute(gt_VictorySafety, true, false);
        }

        Wait(2.0, c_timeReal);
        TriggerExecute(gt_ZenithStonesDestroyedQ, true, false);
    }
    else {
        Wait(2.0, c_timeReal);
    }
    TriggerExecute(gt_ReinforceZenithStones01, true, false);
    TriggerExecute(gt_ReinforceZenithStones02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyBottomStone_Init () {
    gt_DestroyBottomStone = TriggerCreate("gt_DestroyBottomStone_Func");
    TriggerAddEventUnitDied(gt_DestroyBottomStone, UnitRefFromUnit(UnitFromId(210)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Left Stone
//--------------------------------------------------------------------------------------------------
bool gt_DestroyLeftStone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto90945C30_g;
    int auto90945C30_u;
    unit auto90945C30_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_zenithStonesDestroyed += 1;
    TriggerExecute(gt_ObjectiveZenithStonesUpdate, true, false);
    PingDestroy(gv_zenithStonePings[2]);
    auto90945C30_g = UnitGroup(null, c_playerAny, RegionCircle(PointFromId(1151), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto90945C30_u = UnitGroupCount(auto90945C30_g, c_unitCountAll);
    for (;; auto90945C30_u -= 1) {
        auto90945C30_var = UnitGroupUnitFromEnd(auto90945C30_g, auto90945C30_u);
        if (auto90945C30_var == null) { break; }
        if (((UnitTypeTestAttribute(UnitGetType(auto90945C30_var), c_unitAttributeStructure) == true) || (UnitGetOwner(auto90945C30_var) == gv_pLAYER_02_DOMINION))) {
            UnitKill(auto90945C30_var);
        }

    }
    gf_KillStairs(ActorFromDoodad(DoodadFromId(471)));
    TerrainShowRegion(RegionFromId(19), false);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("PShakuras02_BigHit", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_LeftStoneEffects, true, false);
    TriggerExecute(gt_WindEffects, true, false);
    SoundPlayForPlayer(SoundLink("PShakuras02_WallExplode", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
    Wait(3.0, c_timeReal);
    if ((gv_zenithStonesDestroyed == gv_zenithStonesTotal)) {
        TriggerExecute(gt_ObjectiveZenithStonesComplete, true, false);
        TriggerExecute(gt_AchievementFastZenithStones, true, false);
        if ((gv_zergOnShakuras >= 1000.0)) {
            TriggerExecute(gt_VictorySafety, true, false);
        }

        Wait(2.0, c_timeReal);
        TriggerExecute(gt_ZenithStonesDestroyedQ, true, false);
    }
    else {
        Wait(2.0, c_timeReal);
    }
    TriggerExecute(gt_ReinforceZenithStones01, true, false);
    TriggerExecute(gt_ReinforceZenithStones02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyLeftStone_Init () {
    gt_DestroyLeftStone = TriggerCreate("gt_DestroyLeftStone_Func");
    TriggerAddEventUnitDied(gt_DestroyLeftStone, UnitRefFromUnit(UnitFromId(1060)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Right Stone
//--------------------------------------------------------------------------------------------------
bool gt_DestroyRightStone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6CFEB593_g;
    int auto6CFEB593_u;
    unit auto6CFEB593_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_zenithStonesDestroyed += 1;
    TriggerExecute(gt_ObjectiveZenithStonesUpdate, true, false);
    PingDestroy(gv_zenithStonePings[3]);
    auto6CFEB593_g = UnitGroup(null, c_playerAny, RegionCircle(PointFromId(181), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6CFEB593_u = UnitGroupCount(auto6CFEB593_g, c_unitCountAll);
    for (;; auto6CFEB593_u -= 1) {
        auto6CFEB593_var = UnitGroupUnitFromEnd(auto6CFEB593_g, auto6CFEB593_u);
        if (auto6CFEB593_var == null) { break; }
        if (((UnitTypeTestAttribute(UnitGetType(auto6CFEB593_var), c_unitAttributeStructure) == true) || (UnitGetOwner(auto6CFEB593_var) == gv_pLAYER_02_DOMINION))) {
            UnitKill(auto6CFEB593_var);
        }

    }
    gf_KillStairs(ActorFromDoodad(DoodadFromId(685)));
    TerrainShowRegion(RegionFromId(27), false);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("PShakuras02_BigHit", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_RightStoneEffects, true, false);
    TriggerExecute(gt_WindEffects, true, false);
    SoundPlayForPlayer(SoundLink("PShakuras02_WallExplode", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
    Wait(3.0, c_timeReal);
    if ((gv_zenithStonesDestroyed == gv_zenithStonesTotal)) {
        TriggerExecute(gt_ObjectiveZenithStonesComplete, true, false);
        TriggerExecute(gt_AchievementFastZenithStones, true, false);
        if ((gv_zergOnShakuras >= 1000.0)) {
            TriggerExecute(gt_VictorySafety, true, false);
        }

        Wait(2.0, c_timeReal);
        TriggerExecute(gt_ZenithStonesDestroyedQ, true, false);
    }
    else {
        Wait(2.0, c_timeReal);
    }
    gv_gatherPoints[3] = PointFromId(1042);
    TriggerExecute(gt_ReinforceZenithStones01, true, false);
    TriggerExecute(gt_ReinforceZenithStones02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyRightStone_Init () {
    gt_DestroyRightStone = TriggerCreate("gt_DestroyRightStone_Func");
    TriggerAddEventUnitDied(gt_DestroyRightStone, UnitRefFromUnit(UnitFromId(1173)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Causeway Destructibles
//--------------------------------------------------------------------------------------------------
bool gt_InitCausewayDestructibles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_causewayDestructiblesBottom.lv_cameraArea1 = RegionFromId(49);
    gv_causewayDestructiblesBottom.lv_cameraArea2 = RegionFromId(50);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(206));
    gv_causewayDestructiblesBottom.lv_doodadCameraAreas[gv_causewayDestructiblesBottom.lv_doodadCount] = 2;
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(499));
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(1491));
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_BricksCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(497));
    gv_causewayDestructiblesBottom.lv_doodadCameraAreas[gv_causewayDestructiblesBottom.lv_doodadCount] = 2;
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(283));
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(1492));
    gv_causewayDestructiblesBottom.lv_doodadCameraAreas[gv_causewayDestructiblesBottom.lv_doodadCount] = 2;
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(269));
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(272));
    gv_causewayDestructiblesBottom.lv_doodadCameraAreas[gv_causewayDestructiblesBottom.lv_doodadCount] = 2;
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(501));
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(311));
    gv_causewayDestructiblesBottom.lv_doodadCameraAreas[gv_causewayDestructiblesBottom.lv_doodadCount] = 2;
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(1549));
    gv_causewayDestructiblesBottom.lv_doodadCameraAreas[gv_causewayDestructiblesBottom.lv_doodadCount] = 2;
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_BricksCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(293));
    gv_causewayDestructiblesBottom.lv_doodadCameraAreas[gv_causewayDestructiblesBottom.lv_doodadCount] = 2;
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesBottom.lv_doodadCount += 1;
    gv_causewayDestructiblesBottom.lv_doodadActors[gv_causewayDestructiblesBottom.lv_doodadCount] = ActorFromDoodad(DoodadFromId(500));
    gv_causewayDestructiblesBottom.lv_doodadCameraAreas[gv_causewayDestructiblesBottom.lv_doodadCount] = 2;
    gv_causewayDestructiblesBottom.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesLeft.lv_cameraArea1 = RegionFromId(51);
    gv_causewayDestructiblesLeft.lv_cameraArea2 = RegionFromId(51);
    gv_causewayDestructiblesLeft.lv_doodadCount += 1;
    gv_causewayDestructiblesLeft.lv_doodadActors[gv_causewayDestructiblesLeft.lv_doodadCount] = ActorFromDoodad(DoodadFromId(227));
    gv_causewayDestructiblesLeft.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesLeft.lv_doodadCount += 1;
    gv_causewayDestructiblesLeft.lv_doodadActors[gv_causewayDestructiblesLeft.lv_doodadCount] = ActorFromDoodad(DoodadFromId(494));
    gv_causewayDestructiblesLeft.lv_doodadSoundEffects[gv_causewayDestructiblesLeft.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesLeft.lv_doodadCount += 1;
    gv_causewayDestructiblesLeft.lv_doodadActors[gv_causewayDestructiblesLeft.lv_doodadCount] = ActorFromDoodad(DoodadFromId(228));
    gv_causewayDestructiblesLeft.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesLeft.lv_doodadCount += 1;
    gv_causewayDestructiblesLeft.lv_doodadActors[gv_causewayDestructiblesLeft.lv_doodadCount] = ActorFromDoodad(DoodadFromId(63));
    gv_causewayDestructiblesLeft.lv_doodadSoundEffects[gv_causewayDestructiblesLeft.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesLeft.lv_doodadCount += 1;
    gv_causewayDestructiblesLeft.lv_doodadActors[gv_causewayDestructiblesLeft.lv_doodadCount] = ActorFromDoodad(DoodadFromId(226));
    gv_causewayDestructiblesLeft.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesLeft.lv_doodadCount += 1;
    gv_causewayDestructiblesLeft.lv_doodadActors[gv_causewayDestructiblesLeft.lv_doodadCount] = ActorFromDoodad(DoodadFromId(495));
    gv_causewayDestructiblesLeft.lv_doodadSoundEffects[gv_causewayDestructiblesLeft.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesLeft.lv_doodadCount += 1;
    gv_causewayDestructiblesLeft.lv_doodadActors[gv_causewayDestructiblesLeft.lv_doodadCount] = ActorFromDoodad(DoodadFromId(225));
    gv_causewayDestructiblesLeft.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesLeft.lv_doodadCount += 1;
    gv_causewayDestructiblesLeft.lv_doodadActors[gv_causewayDestructiblesLeft.lv_doodadCount] = ActorFromDoodad(DoodadFromId(64));
    gv_causewayDestructiblesLeft.lv_doodadSoundEffects[gv_causewayDestructiblesLeft.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesRight.lv_cameraArea1 = RegionFromId(52);
    gv_causewayDestructiblesRight.lv_cameraArea2 = RegionFromId(53);
    gv_causewayDestructiblesRight.lv_doodadCount += 1;
    gv_causewayDestructiblesRight.lv_doodadActors[gv_causewayDestructiblesRight.lv_doodadCount] = ActorFromDoodad(DoodadFromId(503));
    gv_causewayDestructiblesRight.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesRight.lv_doodadCount += 1;
    gv_causewayDestructiblesRight.lv_doodadActors[gv_causewayDestructiblesRight.lv_doodadCount] = ActorFromDoodad(DoodadFromId(504));
    gv_causewayDestructiblesRight.lv_doodadCameraAreas[gv_causewayDestructiblesRight.lv_doodadCount] = 2;
    gv_causewayDestructiblesRight.lv_doodadSoundEffects[gv_causewayDestructiblesRight.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesRight.lv_doodadCount += 1;
    gv_causewayDestructiblesRight.lv_doodadActors[gv_causewayDestructiblesRight.lv_doodadCount] = ActorFromDoodad(DoodadFromId(315));
    gv_causewayDestructiblesRight.lv_doodadCameraAreas[gv_causewayDestructiblesRight.lv_doodadCount] = 2;
    gv_causewayDestructiblesRight.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesRight.lv_doodadCount += 1;
    gv_causewayDestructiblesRight.lv_doodadActors[gv_causewayDestructiblesRight.lv_doodadCount] = ActorFromDoodad(DoodadFromId(323));
    gv_causewayDestructiblesRight.lv_doodadCameraAreas[gv_causewayDestructiblesRight.lv_doodadCount] = 2;
    gv_causewayDestructiblesRight.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    gv_causewayDestructiblesRight.lv_doodadCount += 1;
    gv_causewayDestructiblesRight.lv_doodadActors[gv_causewayDestructiblesRight.lv_doodadCount] = ActorFromDoodad(DoodadFromId(502));
    gv_causewayDestructiblesRight.lv_doodadCameraAreas[gv_causewayDestructiblesRight.lv_doodadCount] = 2;
    gv_causewayDestructiblesRight.lv_doodadSoundEffects[gv_causewayDestructiblesRight.lv_doodadCount] = SoundLink("PShakuras02_StatueCrumble", -1);
    gv_causewayDestructiblesRight.lv_doodadCount += 1;
    gv_causewayDestructiblesRight.lv_doodadActors[gv_causewayDestructiblesRight.lv_doodadCount] = ActorFromDoodad(DoodadFromId(314));
    gv_causewayDestructiblesRight.lv_doodadCameraAreas[gv_causewayDestructiblesRight.lv_doodadCount] = 2;
    gv_causewayDestructiblesRight.lv_doodadSoundEffects[gv_causewayDestructiblesBottom.lv_doodadCount] = SoundLink("PShakuras02_WallCrumble", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitCausewayDestructibles_Init () {
    gt_InitCausewayDestructibles = TriggerCreate("gt_InitCausewayDestructibles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wind Effects
//--------------------------------------------------------------------------------------------------
bool gt_WindEffects_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF9E96F3E_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF9E96F3E_val = gv_zenithStonesDestroyed;
    if (autoF9E96F3E_val == 1) {
        libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy", c_animNameDefault);
        libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy", c_animNameDefault);
    }
    else if (autoF9E96F3E_val == 2) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_PShakuras02_HighIntensity_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        SoundSetVolume(SoundLastPlayed(), 60.0);
        libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy_Fast", c_animNameDefault);
        libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy_Fast", c_animNameDefault);
    }
    else if (autoF9E96F3E_val == 3) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
        SoundSetVolume(SoundLastPlayed(), 100.0);
        libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy_Fast", c_animNameDefault);
        libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy_Fast", c_animNameDefault);
        libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Wind_Storm", c_animNameDefault);
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "LightningBolt");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WindEffects_Init () {
    gt_WindEffects = TriggerCreate("gt_WindEffects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bottom Stone Effects
//--------------------------------------------------------------------------------------------------
bool gt_BottomStoneEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentDestructible;
    region lv_cameraRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentDestructible = 1;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal DoodadDeath", "Shakuras_Tall_Rock_Chunk", RegionFromId(46));
    TimerStart(gv_causewayDestructiblesBottom.lv_cooldown, 5.0, false, c_timeReal);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (lv_currentDestructible > gv_causewayDestructiblesBottom.lv_doodadCount))) {
            return true;
        }

        if ((TimerGetRemaining(gv_causewayDestructiblesBottom.lv_cooldown) < 1)) {
            if ((gv_causewayDestructiblesBottom.lv_doodadCameraAreas[lv_currentDestructible] == 1)) {
                lv_cameraRegion = gv_causewayDestructiblesBottom.lv_cameraArea1;
            }
            else {
                lv_cameraRegion = gv_causewayDestructiblesBottom.lv_cameraArea2;
            }
            if ((RegionContainsPoint(lv_cameraRegion, CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
                ActorSend(gv_causewayDestructiblesBottom.lv_doodadActors[lv_currentDestructible], libNtve_gf_Signal("DoodadDeath"));
                SoundPlayForPlayer(gv_causewayDestructiblesBottom.lv_doodadSoundEffects[lv_currentDestructible], c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TimerStart(gv_causewayDestructiblesBottom.lv_cooldown, 10.0, false, c_timeReal);
                lv_currentDestructible += 1;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BottomStoneEffects_Init () {
    gt_BottomStoneEffects = TriggerCreate("gt_BottomStoneEffects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Stone Effects
//--------------------------------------------------------------------------------------------------
bool gt_LeftStoneEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentDestructible;
    region lv_cameraRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentDestructible = 1;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal DoodadDeath", "Shakuras_Tall_Rock_Chunk", RegionFromId(47));
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal DoodadDeath", "Shakuras_Temple_Bricks_Anim", RegionFromId(47));
    TimerStart(gv_causewayDestructiblesLeft.lv_cooldown, 5.0, false, c_timeReal);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (lv_currentDestructible > gv_causewayDestructiblesLeft.lv_doodadCount))) {
            return true;
        }

        if ((TimerGetRemaining(gv_causewayDestructiblesLeft.lv_cooldown) < 1)) {
            if ((gv_causewayDestructiblesLeft.lv_doodadCameraAreas[lv_currentDestructible] == 1)) {
                lv_cameraRegion = gv_causewayDestructiblesLeft.lv_cameraArea1;
            }
            else {
                lv_cameraRegion = gv_causewayDestructiblesLeft.lv_cameraArea2;
            }
            if ((RegionContainsPoint(lv_cameraRegion, CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
                ActorSend(gv_causewayDestructiblesLeft.lv_doodadActors[lv_currentDestructible], libNtve_gf_Signal("DoodadDeath"));
                SoundPlayForPlayer(gv_causewayDestructiblesLeft.lv_doodadSoundEffects[lv_currentDestructible], c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TimerStart(gv_causewayDestructiblesLeft.lv_cooldown, 10.0, false, c_timeReal);
                lv_currentDestructible += 1;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeftStoneEffects_Init () {
    gt_LeftStoneEffects = TriggerCreate("gt_LeftStoneEffects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Stone Effects
//--------------------------------------------------------------------------------------------------
bool gt_RightStoneEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentDestructible;
    region lv_cameraRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentDestructible = 1;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal DoodadDeath", "Shakuras_Tall_Rock_Chunk", RegionFromId(48));
    TimerStart(gv_causewayDestructiblesRight.lv_cooldown, 5.0, false, c_timeReal);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (lv_currentDestructible > gv_causewayDestructiblesRight.lv_doodadCount))) {
            return true;
        }

        if ((TimerGetRemaining(gv_causewayDestructiblesRight.lv_cooldown) < 1)) {
            if ((gv_causewayDestructiblesRight.lv_doodadCameraAreas[lv_currentDestructible] == 1)) {
                lv_cameraRegion = gv_causewayDestructiblesRight.lv_cameraArea1;
            }
            else {
                lv_cameraRegion = gv_causewayDestructiblesRight.lv_cameraArea2;
            }
            if ((RegionContainsPoint(lv_cameraRegion, CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
                ActorSend(gv_causewayDestructiblesRight.lv_doodadActors[lv_currentDestructible], libNtve_gf_Signal("DoodadDeath"));
                SoundPlayForPlayer(gv_causewayDestructiblesRight.lv_doodadSoundEffects[lv_currentDestructible], c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TimerStart(gv_causewayDestructiblesRight.lv_cooldown, 10.0, false, c_timeReal);
                lv_currentDestructible += 1;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RightStoneEffects_Init () {
    gt_RightStoneEffects = TriggerCreate("gt_RightStoneEffects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zenith Stones Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_ZenithStonesDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_OverloadTempleButton, true, false);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_zergOnShakuras < 1000.0)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00046", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00047", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00048", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZenithStonesDestroyedQ_Init () {
    gt_ZenithStonesDestroyedQ = TriggerCreate("gt_ZenithStonesDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zenith Stone Attack Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_ZenithStoneAttackWarningQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("ZenithStone", gv_pLAYER_02_DOMINION2, RegionCircle(UnitGetPosition(EventUnit()), 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00049", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZenithStoneAttackWarningQ_Init () {
    gt_ZenithStoneAttackWarningQ = TriggerCreate("gt_ZenithStoneAttackWarningQ_Func");
    TriggerAddEventUnitRegion(gt_ZenithStoneAttackWarningQ, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforce Zenith Stones 01
//--------------------------------------------------------------------------------------------------
bool gt_ReinforceZenithStones01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueVoidBoolean(false, false, true, true) == true))) {
            return false;
        }

        if (!((gv_zenithStonesDestroyed == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(1060)) == true)) {
        gf_ReinforceZenithStone("Hydralisk", PointFromId(1899));
        gf_ReinforceZenithStone("Overseer", PointFromId(1900));
        if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, false, true) == true)) {
            gf_ReinforceZenithStone("Hydralisk", PointFromId(1901));
            gf_ReinforceZenithStone("Hydralisk", PointFromId(1901));
        }

    }

    if ((UnitIsAlive(UnitFromId(1173)) == true)) {
        gf_ReinforceZenithStone("Guardian", PointFromId(1904));
        gf_ReinforceZenithStone("Overseer", PointFromId(1905));
        if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, false, true) == true)) {
            gf_ReinforceZenithStone("Mutalisk", PointFromId(1906));
        }

    }

    if ((UnitIsAlive(UnitFromId(210)) == true)) {
        gf_ReinforceZenithStone("Hydralisk", PointFromId(1908));
        gf_ReinforceZenithStone("Overseer", PointFromId(1909));
        if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, false, true) == true)) {
            gf_ReinforceZenithStone("Hydralisk", PointFromId(1910));
            gf_ReinforceZenithStone("Baneling", PointFromId(1910));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforceZenithStones01_Init () {
    gt_ReinforceZenithStones01 = TriggerCreate("gt_ReinforceZenithStones01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforce Zenith Stones 02
//--------------------------------------------------------------------------------------------------
bool gt_ReinforceZenithStones02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueVoidBoolean(false, false, true, true) == true))) {
            return false;
        }

        if (!((gv_zenithStonesDestroyed == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(1060)) == true)) {
        gf_ReinforceZenithStone("Roach", PointFromId(1902));
        gf_ReinforceZenithStone("Roach", PointFromId(1902));
        gf_ReinforceZenithStone("Hydralisk", PointFromId(1903));
        if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, false, true) == true)) {
        }

    }

    if ((UnitIsAlive(UnitFromId(1173)) == true)) {
        gf_ReinforceZenithStone("Guardian", PointFromId(1907));
        gf_ReinforceZenithStone("Mutalisk", PointFromId(1913));
        if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, false, true) == true)) {
        }

    }

    if ((UnitIsAlive(UnitFromId(210)) == true)) {
        gf_ReinforceZenithStone("Hydralisk", PointFromId(1911));
        gf_ReinforceZenithStone("Baneling", PointFromId(1912));
        gf_ReinforceZenithStone("Baneling", PointFromId(1912));
        if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, false, true) == true)) {
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforceZenithStones02_Init () {
    gt_ReinforceZenithStones02 = TriggerCreate("gt_ReinforceZenithStones02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_ObjectiveTempleMustSurviveFailed, true, false);
    DialogSetVisible(gv_overloadTempleDialog, PlayerGroupAll(), false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    CameraShake(1, "Massive", "Earthquake", 10.0, 0.0, 10.0);
    CinematicFade(false, 5.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FD66B5F1"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromUnit(UnitFromId(19)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Main Objective Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMainObjectiveCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMainObjectiveCompleted_Init () {
    gt_VictoryMainObjectiveCompleted = TriggerCreate("gt_VictoryMainObjectiveCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Safety
//--------------------------------------------------------------------------------------------------
bool gt_VictorySafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAdd(gv_artanis, "HybridDontDie", gv_artanis, 1);
    while (!((UnitGetPropertyFixed(gv_artanis, c_unitPropLife, c_unitPropCurrent) < 100.0))) {
        Wait(0.5, c_timeAI);
    }
    TriggerEnable(gt_OverloadTempleButtonClicked, false);
    TriggerStop(gt_OverloadTempleButton);
    DialogControlSetEnabled(gv_overloadTempleButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_overloadTempleDialog, PlayerGroupAll(), false);
    libNtve_gf_ChangeUnitDamage(gv_artanis, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerExecute(gt_VictoryMainObjectiveCompleted, true, false);
    SoundPlayForPlayer(SoundLink("PShakuras02_SmallHit", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("PShakuras02_OverloadTempleButton", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySafety_Init () {
    gt_VictorySafety = TriggerCreate("gt_VictorySafety_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveOverloadTempleComplete, true, true);
    TriggerExecute(gt_ObjectiveTempleMustSurviveComplete, true, true);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libVCMI_gf_HideCampaignTransmissionPortrait();
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PShakuras02_1", gv_pLAYER_01_USER);
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresBuiltCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    TextExpressionSetToken("Param/Expression/D7D246B0", "HUNDREDMILLIONS", FixedToText((gv_zergOnShakuras / 100.0), 3));
    TextExpressionSetToken("Param/Expression/D7D246B0", "BILLIONSINT", IntToText(FixedToInt(Floor((gv_zergOnShakuras / 1000.0)))));
    TextExpressionSetToken("Param/Expression/D7D246B0", "BILLIONS", FixedToText((gv_zergOnShakuras / 1000.0), 3));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/2A7C79E9"), TextExpressionAssemble("Param/Expression/D7D246B0"));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Huge Number of Zerg on Shakuras
//--------------------------------------------------------------------------------------------------
bool gt_AchievementHugeNumberofZergonShakuras_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PShakuras02_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementHugeNumberofZergonShakuras_Init () {
    gt_AchievementHugeNumberofZergonShakuras = TriggerCreate("gt_AchievementHugeNumberofZergonShakuras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Fast Zenith Stones
//--------------------------------------------------------------------------------------------------
bool gt_AchievementFastZenithStones_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((GameGetMissionTime() < 600.0)) {
        libVoiC_gf_CampaignAwardAchievement("PShakuras02_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementFastZenithStones_Init () {
    gt_AchievementFastZenithStones = TriggerCreate("gt_AchievementFastZenithStones_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mastery: Absurd Number of Zerg on Shakuras
//--------------------------------------------------------------------------------------------------
bool gt_MasteryAbsurdNumberofZergonShakuras_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Mastery_Shakuras02", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasteryAbsurdNumberofZergonShakuras_Init () {
    gt_MasteryAbsurdNumberofZergonShakuras = TriggerCreate("gt_MasteryAbsurdNumberofZergonShakuras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anniversary Achievement - Absurd Number of Zerg on Shakuras
//--------------------------------------------------------------------------------------------------
bool gt_AnniversaryAchievementAbsurdNumberofZergonShakuras_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Anniversary_PShakuras02", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnniversaryAchievementAbsurdNumberofZergonShakuras_Init () {
    gt_AnniversaryAchievementAbsurdNumberofZergonShakuras = TriggerCreate("gt_AnniversaryAchievementAbsurdNumberofZergonShakuras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DOMINION, "HybridNemesis", "AIHybridNemesis", false);
    }

    TriggerExecute(gt_AttackWavesZerg, true, false);
    TimerStart(gv_zergRespawnTimers[1], 10.0, false, c_timeAI);
    TimerStart(gv_zergRespawnTimers[2], 12.0, false, c_timeAI);
    TimerStart(gv_zergRespawnTimers[3], 14.0, false, c_timeAI);
    TimerStart(gv_zergRespawnTimers[4], 16.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Zerg
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gatherPoints[1] = PointFromId(910);
    gv_gatherPoints[2] = PointFromId(911);
    gv_gatherPoints[3] = PointFromId(912);
    gv_gatherPoints[4] = PointFromId(913);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 8), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Roach", 1);
    gf_SendZergAttackWave(1, 30);
    TriggerExecute(gt_FirstWaveQ, true, false);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 12, 12), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Hydralisk", 1);
    gf_SendZergAttackWave(1, 30);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 8), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), "Roach", 2);
    gf_SendZergAttackWave(2, 30);
    TriggerExecute(gt_ThirdWaveQ, true, false);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(5, 5, 5, 8), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 2, 2), "Roach", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Ultralisk", 1);
    gf_SendZergAttackWave(1, 30);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 12, 12), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Roach", 2);
    gf_SendZergAttackWave(2, 30);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 8), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 0, 1), "Roach", 3);
    gf_SendZergAttackWave(3, 30);
    TriggerExecute(gt_SixthWaveQ, true, false);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 12, 12), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Roach", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 8), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Hydralisk", 3);
    gf_SendZergAttackWave(3, 30);
    TriggerExecute(gt_DoubleHitQ, true, false);
    Wait(60.0, c_timeAI);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_BuildMorePhotonCannonsQ, true, false);
    }

    Wait(30.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 12, 12), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 4), "Roach", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Hydralisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Ultralisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(7, 7, 12, 16), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Roach", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Ultralisk", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(7, 7, 12, 12), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Hydralisk", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Ultralisk", 3);
    gf_SendZergAttackWave(3, 30);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Overlord", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(16, 16, 24, 32), "Zergling", 4);
    gf_SendZergAttackWave(4, 30);
    TriggerExecute(gt_OverlordDropQ, true, false);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(12, 12, 16, 16), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 4, 5), "Roach", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 5, 5), "Hydralisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Mutalisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    Wait(75.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Overlord", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(16, 16, 24, 24), "Zergling", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Mutalisk", 4);
    gf_SendZergAttackWave(4, 30);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(10, 10, 16, 22), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Roach", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Ultralisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 12, 12), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Hydralisk", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Ultralisk", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(14, 14, 16, 16), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 4, 5), "Baneling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 3);
    gf_SendZergAttackWave(3, 30);
    TriggerExecute(gt_TripleHitQ, true, false);
    Wait(75.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Ultralisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 4, 6), "Baneling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    Wait(60.0, c_timeAI);
    TriggerExecute(gt_HybridWaveQ, true, false);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 5, 5), "Mutalisk", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "Guardian", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "HybridNemesis", 4);
    gf_SendZergAttackWave(4, 30);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(16, 16, 16, 18), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Ultralisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 5, 5), "Mutalisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(5, 5, 8, 9), "Baneling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(5, 5, 8, 9), "Mutalisk", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Ultralisk", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 3);
    gf_SendZergAttackWave(3, 30);
    Wait(60.0, c_timeAI);
    TriggerExecute(gt_AttackWavesZergandHybrid, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesZerg_Init () {
    gt_AttackWavesZerg = TriggerCreate("gt_AttackWavesZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Zerg and Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesZergandHybrid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 12, 16), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Roach", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Hydralisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridDestroyer", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    Wait(30.0, c_timeAI);
    TriggerExecute(gt_FinalOverlordFrenzy, true, false);
    Wait(30.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridReaver", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridReaver", 3);
    gf_SendZergAttackWave(3, 30);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridReaver", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 3, 4), "Mutalisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "HybridDestroyer", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 3, 4), "Hydralisk", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridDestroyer", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 6, 9), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 3);
    gf_SendZergAttackWave(3, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Mutalisk", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Guardian", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "HybridNemesis", 4);
    gf_SendZergAttackWave(4, 30);
    Wait(60.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "HybridReaver", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "HybridDestroyer", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "HybridReaver", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "HybridDestroyer", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "HybridReaver", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "HybridDestroyer", 3);
    gf_SendZergAttackWave(3, 30);
    Wait(60.0, c_timeAI);
    TriggerExecute(gt_AttackWavesFinalOnslaught, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesZergandHybrid_Init () {
    gt_AttackWavesZergandHybrid = TriggerCreate("gt_AttackWavesZergandHybrid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Final Onslaught
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesFinalOnslaught_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto31FBBA47_n;
    int auto31FBBA47_i;
    int autoE9586A7C_n;
    int autoE9586A7C_i;
    int autoB03A509F_n;
    int autoB03A509F_i;
    int autoDA6AD026_n;
    int autoDA6AD026_i;
    int auto6E52EF47_n;
    int auto6E52EF47_i;

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerEnable(gv_extendedBaseRevealer, false);
    TriggerExecute(gt__3MinutesRemainQ, true, false);
    auto31FBBA47_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    for (auto31FBBA47_i = 1; auto31FBBA47_i <= auto31FBBA47_n; auto31FBBA47_i += 1) {
        gf_SpawnZergDropPod();
    }
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "HybridReaver", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Hydralisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "HybridDestroyer", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Roach", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "HybridDestroyer", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Roach", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 3);
    gf_SendZergAttackWave(3, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overlord", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 8, 8), "Zergling", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 5, 6), "Mutalisk", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "HybridNemesis", 4);
    gf_SendZergAttackWave(4, 30);
    Wait(15.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 8, 10), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Roach", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 3, 3), "Baneling", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 3);
    gf_SendZergAttackWave(3, 30);
    Wait(15.0, c_timeAI);
    autoE9586A7C_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    for (autoE9586A7C_i = 1; autoE9586A7C_i <= autoE9586A7C_n; autoE9586A7C_i += 1) {
        gf_SpawnZergDropPod();
    }
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 5), "Baneling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Ultralisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Baneling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Ultralisk", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Baneling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Ultralisk", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 3);
    gf_SendZergAttackWave(3, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overlord", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 8, 8), "Zergling", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 5, 5), "Mutalisk", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Guardian", 4);
    gf_SendZergAttackWave(4, 30);
    Wait(15.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 8, 10), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Roach", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 3);
    gf_SendZergAttackWave(3, 30);
    Wait(15.0, c_timeAI);
    autoB03A509F_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    for (autoB03A509F_i = 1; autoB03A509F_i <= autoB03A509F_n; autoB03A509F_i += 1) {
        gf_SpawnZergDropPod();
    }
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridReaver", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Hydralisk", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridDestroyer", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Roach", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridDestroyer", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Roach", 3);
    gf_SendZergAttackWave(3, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Overlord", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 16, 16), "Zergling", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 4, 4), "Mutalisk", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "HybridNemesis", 4);
    gf_SendZergAttackWave(4, 30);
    Wait(15.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 6), "Roach", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 4, 5), "Baneling", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 3);
    gf_SendZergAttackWave(3, 30);
    Wait(15.0, c_timeAI);
    autoDA6AD026_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    for (autoDA6AD026_i = 1; autoDA6AD026_i <= autoDA6AD026_n; autoDA6AD026_i += 1) {
        gf_SpawnZergDropPod();
    }
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 8), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 4, 5), "Baneling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 5, 6), "Mutalisk", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 8), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 4), "Baneling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 5, 5), "Mutalisk", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 8), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 4), "Baneling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 5, 5), "Mutalisk", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 3);
    gf_SendZergAttackWave(3, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Overlord", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 16, 16), "Zergling", 4);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 4, 5), "Guardian", 4);
    gf_SendZergAttackWave(4, 30);
    Wait(15.0, c_timeAI);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 8, 10), "Zergling", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Roach", 1);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 2);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 3);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 3);
    gf_SendZergAttackWave(3, 30);
    Wait(15.0, c_timeAI);
    auto6E52EF47_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
    for (auto6E52EF47_i = 1; auto6E52EF47_i <= auto6E52EF47_n; auto6E52EF47_i += 1) {
        gf_SpawnZergDropPod();
    }
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "HybridDestroyer", 1);
    gf_SendZergAttackWave(1, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "HybridReaver", 2);
    gf_SendZergAttackWave(2, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "HybridReaver", 3);
    gf_SendZergAttackWave(3, 30);
    gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "HybridNemesis", 4);
    gf_SendZergAttackWave(4, 30);
    Wait(30.0, c_timeAI);
    TriggerExecute(gt_AttackWavesBonus, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesFinalOnslaught_Init () {
    gt_AttackWavesFinalOnslaught = TriggerCreate("gt_AttackWavesFinalOnslaught_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves - Bonus
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4C3EA1BA_n = 3;
    int auto4C3EA1BA_i;
    int auto7B2795DA_n;
    int auto7B2795DA_i;
    int auto5AA13243_n;
    int auto5AA13243_i;
    int autoEB208055_n;
    int autoEB208055_i;
    const int auto64065D4B_n = 5;
    int auto64065D4B_i;
    int autoB2153922_n;
    int autoB2153922_i;
    int autoC2DE166F_n;
    int autoC2DE166F_i;
    int auto423FCC84_n;
    int auto423FCC84_i;
    int auto9226D5DE_n;
    int auto9226D5DE_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto4C3EA1BA_i = 1; auto4C3EA1BA_i <= auto4C3EA1BA_n; auto4C3EA1BA_i += 1) {
        auto7B2795DA_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        for (auto7B2795DA_i = 1; auto7B2795DA_i <= auto7B2795DA_n; auto7B2795DA_i += 1) {
            gf_SpawnZergDropPod();
        }
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 10), "Zergling", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Roach", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Baneling", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Overseer", 1);
        gf_SendZergAttackWave(1, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 2);
        gf_SendZergAttackWave(2, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 8), "Zergling", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Roach", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Baneling", 3);
        gf_SendZergAttackWave(3, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 6), "Mutalisk", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "HybridNemesis", 4);
        gf_SendZergAttackWave(4, 30);
        Wait(30.0, c_timeAI);
        auto5AA13243_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        for (auto5AA13243_i = 1; auto5AA13243_i <= auto5AA13243_n; auto5AA13243_i += 1) {
            gf_SpawnZergDropPod();
        }
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 8, 8), "Zergling", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Ultralisk", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 1);
        gf_SendZergAttackWave(1, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 9, 9), "Zergling", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Ultralisk", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Mutalisk", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 2);
        gf_SendZergAttackWave(2, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 9, 9), "Zergling", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), "Ultralisk", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Mutalisk", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Overseer", 3);
        gf_SendZergAttackWave(3, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Overlord", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(8, 8, 16, 16), "Zergling", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Guardian", 4);
        gf_SendZergAttackWave(4, 30);
        Wait(30.0, c_timeAI);
        autoEB208055_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        for (autoEB208055_i = 1; autoEB208055_i <= autoEB208055_n; autoEB208055_i += 1) {
            gf_SpawnZergDropPod();
        }
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridReaver", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "HybridDestroyer", 1);
        gf_SendZergAttackWave(1, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridReaver", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "HybridDestroyer", 2);
        gf_SendZergAttackWave(2, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridDestroyer", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "HybridReaver", 3);
        gf_SendZergAttackWave(3, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Guardian", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(0, 0, 4, 4), "Mutalisk", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "HybridNemesis", 4);
        gf_SendZergAttackWave(4, 30);
        Wait(30.0, c_timeAI);
    }
    for (auto64065D4B_i = 1; auto64065D4B_i <= auto64065D4B_n; auto64065D4B_i += 1) {
        autoB2153922_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        for (autoB2153922_i = 1; autoB2153922_i <= autoB2153922_n; autoB2153922_i += 1) {
            gf_SpawnZergDropPod();
        }
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(12, 12, 16, 16), "Zergling", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(9, 9, 12, 14), "Baneling", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Ultralisk", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Overseer", 1);
        gf_SendZergAttackWave(1, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(12, 12, 16, 16), "Zergling", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 9), "Baneling", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Ultralisk", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 2);
        gf_SendZergAttackWave(2, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(12, 12, 16, 16), "Zergling", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 9), "Baneling", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Ultralisk", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", 3);
        gf_SendZergAttackWave(3, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Overlord", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 8, 8), "Mutalisk", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Guardian", 4);
        gf_SendZergAttackWave(4, 30);
        Wait(30.0, c_timeAI);
        autoC2DE166F_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        for (autoC2DE166F_i = 1; autoC2DE166F_i <= autoC2DE166F_n; autoC2DE166F_i += 1) {
            gf_SpawnZergDropPod();
        }
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridReaver", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "HybridDestroyer", 1);
        gf_SendZergAttackWave(1, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridReaver", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "HybridDestroyer", 2);
        gf_SendZergAttackWave(2, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridReaver", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "HybridDestroyer", 3);
        gf_SendZergAttackWave(3, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 6), "Mutalisk", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 5, 5), "Guardian", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "HybridNemesis", 4);
        gf_SendZergAttackWave(4, 30);
        Wait(30.0, c_timeAI);
    }
    while (true) {
        auto423FCC84_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        for (auto423FCC84_i = 1; auto423FCC84_i <= auto423FCC84_n; auto423FCC84_i += 1) {
            gf_SpawnZergDropPod();
        }
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(16, 16, 20, 20), "Baneling", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(5, 5, 6, 6), "Ultralisk", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Overseer", 1);
        gf_SendZergAttackWave(1, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(14, 14, 18, 18), "Baneling", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 5, 5), "Ultralisk", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Overseer", 2);
        gf_SendZergAttackWave(2, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(14, 14, 18, 18), "Baneling", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 5, 5), "Ultralisk", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Overseer", 3);
        gf_SendZergAttackWave(3, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Overlord", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(6, 6, 6, 6), "Mutalisk", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Guardian", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridNemesis", 4);
        gf_SendZergAttackWave(4, 30);
        Wait(30.0, c_timeAI);
        auto9226D5DE_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
        for (auto9226D5DE_i = 1; auto9226D5DE_i <= auto9226D5DE_n; auto9226D5DE_i += 1) {
            gf_SpawnZergDropPod();
        }
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 6), "HybridReaver", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 6, 6), "HybridDestroyer", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Guardian", 1);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Overseer", 1);
        gf_SendZergAttackWave(1, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridDestroyer", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridReaver", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Guardian", 2);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Overseer", 2);
        gf_SendZergAttackWave(2, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridReaver", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "HybridDestroyer", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Guardian", 3);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Overseer", 3);
        gf_SendZergAttackWave(3, 30);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Mutalisk", 4);
        gf_AddZergtoNextAttackWave(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "HybridNemesis", 4);
        gf_SendZergAttackWave(4, 30);
        Wait(30.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWavesBonus_Init () {
    gt_AttackWavesBonus = TriggerCreate("gt_AttackWavesBonus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    TriggerQueueEnter();
    if ((libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[1]) == true)) {
        return true;
    }

    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[1], 4.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[1], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AEB9E92A"));
    gv_attackPings[1] = PingLastCreated();
    SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("PShakuras02_Music_Stinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00007", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstWaveQ_Init () {
    gt_FirstWaveQ = TriggerCreate("gt_FirstWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Third Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_ThirdWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    TriggerQueueEnter();
    if ((libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[2]) == true)) {
        return true;
    }

    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[2], 5.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[2], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/BA2578C7"));
    gv_attackPings[2] = PingLastCreated();
    SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("PShakuras02_Music_Stinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00008", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThirdWaveQ_Init () {
    gt_ThirdWaveQ = TriggerCreate("gt_ThirdWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sixth Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_SixthWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    TriggerQueueEnter();
    if ((libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[3]) == true)) {
        return true;
    }

    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[3], 5.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[3], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/595852D2"));
    gv_attackPings[3] = PingLastCreated();
    SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("PShakuras02_Music_Stinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00038", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SixthWaveQ_Init () {
    gt_SixthWaveQ = TriggerCreate("gt_SixthWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Hit Q
//--------------------------------------------------------------------------------------------------
bool gt_DoubleHitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[2]) == false) && (libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[3]) == false)) {
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[2], 4.0, Color(100.00, 0.00, 0.00));
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[3], 4.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[2], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F6264CBD"));
        gv_attackPings[2] = PingLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[3], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/555894FA"));
        gv_attackPings[3] = PingLastCreated();
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("PShakuras02_Music_Stinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00009", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleHitQ_Init () {
    gt_DoubleHitQ = TriggerCreate("gt_DoubleHitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Drop Q
//--------------------------------------------------------------------------------------------------
bool gt_OverlordDropQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    TriggerQueueEnter();
    if ((libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[4]) == true)) {
        return true;
    }

    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[4], 4.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[4], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E4BBD31C"));
    gv_attackPings[4] = PingLastCreated();
    SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("PShakuras02_Music_Stinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00025", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00070", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordDropQ_Init () {
    gt_OverlordDropQ = TriggerCreate("gt_OverlordDropQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Triple Hit Q
//--------------------------------------------------------------------------------------------------
bool gt_TripleHitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[1]) == false) && (libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[2]) == false) && (libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[3]) == false)) {
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[1], 4.0, Color(100.00, 0.00, 0.00));
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[2], 4.0, Color(100.00, 0.00, 0.00));
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[3], 4.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[1], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5E7C8C02"));
        gv_attackPings[1] = PingLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[2], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EE788398"));
        gv_attackPings[2] = PingLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[3], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B01EBA36"));
        gv_attackPings[3] = PingLastCreated();
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("PShakuras02_Music_Stinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00016", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TripleHitQ_Init () {
    gt_TripleHitQ = TriggerCreate("gt_TripleHitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_HybridWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    TriggerQueueEnter();
    if ((libNtve_gf_UnitGroupIsDead(gv_nextAttackWave[4]) == true)) {
        return true;
    }

    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_gatherPoints[4], 4.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", gv_gatherPoints[4], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A7DD1EAE"));
    gv_attackPings[4] = PingLastCreated();
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("PShakuras02_Music_Stinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00018", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00024", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridWaveQ_Init () {
    gt_HybridWaveQ = TriggerCreate("gt_HybridWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 Minutes Remain Q
//--------------------------------------------------------------------------------------------------
bool gt__3MinutesRemainQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto38C77A40_g;
    int auto38C77A40_u;
    unit auto38C77A40_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_zenithStonesDestroyed == gv_zenithStonesTotal)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00041", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00060", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        auto38C77A40_g = UnitGroup("ZenithStone", gv_pLAYER_02_DOMINION2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto38C77A40_u = UnitGroupCount(auto38C77A40_g, c_unitCountAll);
        for (;; auto38C77A40_u -= 1) {
            auto38C77A40_var = UnitGroupUnitFromEnd(auto38C77A40_g, auto38C77A40_u);
            if (auto38C77A40_var == null) { break; }
            libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(auto38C77A40_var), 5.0, Color(0.00, 100.00, 0.00));
        }
        Wait(2.0, c_timeReal);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    }
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00073", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00075", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectiveMoreZergCreate, true, false);
    TriggerQueueExit();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PShakuras02_Music_S1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3MinutesRemainQ_Init () {
    gt__3MinutesRemainQ = TriggerCreate("gt__3MinutesRemainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zenith Stones - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZenithStonesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PShakuras02Primary01");
    libVCMI_gf_SetMissionObjectiveProgress("PShakuras02Primary01", gv_zenithStonesDestroyed);
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZenithStonesCreate_Init () {
    gt_ObjectiveZenithStonesCreate = TriggerCreate("gt_ObjectiveZenithStonesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zenith Stones - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZenithStonesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveZenithStonesCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras02Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZenithStonesComplete_Init () {
    gt_ObjectiveZenithStonesComplete = TriggerCreate("gt_ObjectiveZenithStonesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zenith Stones - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZenithStonesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveZenithStonesCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PShakuras02Primary01", gv_zenithStonesDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZenithStonesUpdate_Init () {
    gt_ObjectiveZenithStonesUpdate = TriggerCreate("gt_ObjectiveZenithStonesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Hold Out - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PShakuras02Primary02");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutCreate_Init () {
    gt_ObjectiveHoldOutCreate = TriggerCreate("gt_ObjectiveHoldOutCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Hold Out - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHoldOutComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveHoldOutCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras02Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHoldOutComplete_Init () {
    gt_ObjectiveHoldOutComplete = TriggerCreate("gt_ObjectiveHoldOutComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Overload Temple - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOverloadTempleCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PShakuras02Primary03");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    ObjectiveSetAfter(gv_objectiveDestroyZergBase3, gv_objectiveDestroyZergBase);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOverloadTempleCreate_Init () {
    gt_ObjectiveOverloadTempleCreate = TriggerCreate("gt_ObjectiveOverloadTempleCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Overload Temple - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOverloadTempleComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveOverloadTempleCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras02Primary03", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOverloadTempleComplete_Init () {
    gt_ObjectiveOverloadTempleComplete = TriggerCreate("gt_ObjectiveOverloadTempleComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Temple Must Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTempleMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PShakuras02Primary04");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTempleMustSurviveCreate_Init () {
    gt_ObjectiveTempleMustSurviveCreate = TriggerCreate("gt_ObjectiveTempleMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Temple Must Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTempleMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveTempleMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras02Primary04", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTempleMustSurviveComplete_Init () {
    gt_ObjectiveTempleMustSurviveComplete = TriggerCreate("gt_ObjectiveTempleMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Temple Must Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTempleMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveTempleMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras02Primary04", libVoiC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTempleMustSurviveFailed_Init () {
    gt_ObjectiveTempleMustSurviveFailed = TriggerCreate("gt_ObjectiveTempleMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - More Zerg - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMoreZergCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PShakuras02Bonus01");
    gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMoreZergCreate_Init () {
    gt_ObjectiveMoreZergCreate = TriggerCreate("gt_ObjectiveMoreZergCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - More Zerg - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMoreZergComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMoreZergCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras02Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMoreZergComplete_Init () {
    gt_ObjectiveMoreZergComplete = TriggerCreate("gt_ObjectiveMoreZergComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto05B8C3FA_g;
    int auto05B8C3FA_u;
    unit auto05B8C3FA_var;
    unitgroup auto913415B0_g;
    int auto913415B0_u;
    unit auto913415B0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto05B8C3FA_g = UnitGroup(null, gv_pLAYER_02_DOMINION, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto05B8C3FA_u = UnitGroupCount(auto05B8C3FA_g, c_unitCountAll);
    for (;; auto05B8C3FA_u -= 1) {
        auto05B8C3FA_var = UnitGroupUnitFromEnd(auto05B8C3FA_g, auto05B8C3FA_u);
        if (auto05B8C3FA_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto05B8C3FA_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto05B8C3FA_var);
            libNtve_gf_PauseUnit(auto05B8C3FA_var, true);
        }

    }
    UnitGroupAdd(gv_cinematicPausedUnits, UnitFromId(4));
    libNtve_gf_PauseUnit(UnitFromId(4), true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup("Probe", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(PointFromId(1255), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(PointFromId(1151), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionCircle(PointFromId(181), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto913415B0_g = gv_cinematicHiddenUnits;
    auto913415B0_u = UnitGroupCount(auto913415B0_g, c_unitCountAll);
    for (;; auto913415B0_u -= 1) {
        auto913415B0_var = UnitGroupUnitFromEnd(auto913415B0_g, auto913415B0_u);
        if (auto913415B0_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto913415B0_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_introProbe;

    // Automatic Variable Declarations
    unitgroup auto6FD3C0C8_g;
    int auto6FD3C0C8_u;
    unit auto6FD3C0C8_var;
    unitgroup auto2AC3CD85_g;
    int auto2AC3CD85_u;
    unit auto2AC3CD85_var;
    string auto95A02C3F_val;
    unitgroup autoDC6CACC2_g;
    int autoDC6CACC2_u;
    unit autoDC6CACC2_var;
    string auto6C244A63_val;
    fixed autoB5C65174_at;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(320), 0.0, -1, 10, true);
    Wait(0.0625, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(329), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1031), 13.0, -1, 10, true);
    libNtve_gf_UnitCreateFacingPoint(1, "DarkTemplar", 0, gv_pLAYER_01_USER, PointFromId(1027), UnitGetPosition(gv_artanis));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(331)), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "DarkTemplar", 0, gv_pLAYER_01_USER, PointFromId(1029), UnitGetPosition(gv_artanis));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(332)), c_orderQueueReplace);
    libNtve_gf_UnitCreateFacingPoint(1, "DarkTemplar", 0, gv_pLAYER_01_USER, PointFromId(1030), UnitGetPosition(gv_artanis));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(924)), c_orderQueueReplace);
    TriggerExecute(gt_IntroMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_TempleAnimation, true, false);
    Wait(2.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00001", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(330), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Shakuras02|Line00029", true), c_soundIndexAny)), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00029", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1266), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(365), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Shakuras02|Line00078", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Shakuras02|Line00077", true), c_soundIndexAny)) - 2), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00077", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    auto6FD3C0C8_g = gv_cinematicTempUnits;
    auto6FD3C0C8_u = UnitGroupCount(auto6FD3C0C8_g, c_unitCountAll);
    for (;; auto6FD3C0C8_u -= 1) {
        auto6FD3C0C8_var = UnitGroupUnitFromEnd(auto6FD3C0C8_g, auto6FD3C0C8_u);
        if (auto6FD3C0C8_var == null) { break; }
        UnitRemove(auto6FD3C0C8_var);
    }
    auto2AC3CD85_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto2AC3CD85_u = UnitGroupCount(auto2AC3CD85_g, c_unitCountAll);
    for (;; auto2AC3CD85_u -= 1) {
        auto2AC3CD85_var = UnitGroupUnitFromEnd(auto2AC3CD85_g, auto2AC3CD85_u);
        if (auto2AC3CD85_var == null) { break; }
        auto95A02C3F_val = UnitGetType(auto2AC3CD85_var);
        if (auto95A02C3F_val == "Pylon") {
            libNtve_gf_ShowHideUnit(auto2AC3CD85_var, true);
        }
        else if (auto95A02C3F_val == "PhotonCannon") {
            UnitGroupAdd(gv_cinematicPausedUnits, auto2AC3CD85_var);
            libNtve_gf_PauseUnit(auto2AC3CD85_var, true);
            UnitCreate(1, UnitGetType(auto2AC3CD85_var), c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(auto2AC3CD85_var), UnitGetFacing(auto2AC3CD85_var));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitSetProgressComplete(UnitLastCreated(), 1, 50);
        }
        else if (auto95A02C3F_val == "KhaydarinMonolith") {
            UnitGroupAdd(gv_cinematicPausedUnits, auto2AC3CD85_var);
            libNtve_gf_PauseUnit(auto2AC3CD85_var, true);
            UnitCreate(1, UnitGetType(auto2AC3CD85_var), c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(auto2AC3CD85_var), UnitGetFacing(auto2AC3CD85_var));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
            UnitSetProgressComplete(UnitLastCreated(), 1, 50);
        }
        else {
        }
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1032), 0.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00033", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    autoDC6CACC2_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC6CACC2_u = UnitGroupCount(autoDC6CACC2_g, c_unitCountAll);
    for (;; autoDC6CACC2_u -= 1) {
        autoDC6CACC2_var = UnitGroupUnitFromEnd(autoDC6CACC2_g, autoDC6CACC2_u);
        if (autoDC6CACC2_var == null) { break; }
        auto6C244A63_val = UnitGetType(autoDC6CACC2_var);
        if (auto6C244A63_val == "PhotonCannon") {
            UnitSetProgressComplete(autoDC6CACC2_var, 1, 80);
        }
        else if (auto6C244A63_val == "KhaydarinMonolith") {
            UnitSetProgressComplete(autoDC6CACC2_var, 1, 97);
        }
        else {
        }
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Guardian", 0, gv_pLAYER_02_DOMINION, PointFromId(993));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.6);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(35))), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1269), 6.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00061", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00062", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00055", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((UnitIsAlive(UnitLastCreated()) == true)) {
        autoB5C65174_at = 0;
        while (!(true) && autoB5C65174_at <= 10.0) {
            Wait(0.1, c_timeGame);
            autoB5C65174_at = autoB5C65174_at + 0.1;
        }
        Wait(1.0, c_timeGame);
    }

    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoD19B973C_g;
    int autoD19B973C_u;
    unit autoD19B973C_var;
    unitgroup autoEE80F73D_g;
    int autoEE80F73D_u;
    unit autoEE80F73D_var;
    unitgroup auto99D11DF6_g;
    int auto99D11DF6_u;
    unit auto99D11DF6_var;
    unitgroup autoAF729771_g;
    int autoAF729771_u;
    unit autoAF729771_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    if ((gv_introMusicCompleted == false)) {
        TriggerStop(gt_IntroMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
        SoundStopAllTriggerSounds(true);
    }

    autoD19B973C_g = gv_cinematicTempUnits;
    autoD19B973C_u = UnitGroupCount(autoD19B973C_g, c_unitCountAll);
    for (;; autoD19B973C_u -= 1) {
        autoD19B973C_var = UnitGroupUnitFromEnd(autoD19B973C_g, autoD19B973C_u);
        if (autoD19B973C_var == null) { break; }
        UnitRemove(autoD19B973C_var);
    }
    autoEE80F73D_g = gv_cinematicHiddenUnits;
    autoEE80F73D_u = UnitGroupCount(autoEE80F73D_g, c_unitCountAll);
    for (;; autoEE80F73D_u -= 1) {
        autoEE80F73D_var = UnitGroupUnitFromEnd(autoEE80F73D_g, autoEE80F73D_u);
        if (autoEE80F73D_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoEE80F73D_var, true);
    }
    auto99D11DF6_g = gv_cinematicPausedUnits;
    auto99D11DF6_u = UnitGroupCount(auto99D11DF6_g, c_unitCountAll);
    for (;; auto99D11DF6_u -= 1) {
        auto99D11DF6_var = UnitGroupUnitFromEnd(auto99D11DF6_g, auto99D11DF6_u);
        if (auto99D11DF6_var == null) { break; }
        libNtve_gf_PauseUnit(auto99D11DF6_var, false);
    }
    autoAF729771_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAF729771_u = UnitGroupCount(autoAF729771_g, c_unitCountAll);
    for (;; autoAF729771_u -= 1) {
        autoAF729771_var = UnitGroupUnitFromEnd(autoAF729771_g, autoAF729771_u);
        if (autoAF729771_var == null) { break; }
        UnitSetPropertyFixed(autoAF729771_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoAF729771_var, c_unitPropShieldsPercent, 100.0);
    }
    TriggerStop(gt_TempleAnimation);
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(gv_artanis), "Inferior");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "PShakuras02_Music_Intro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    gv_introMusicCompleted = true;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Animation
//--------------------------------------------------------------------------------------------------
bool gt_TempleAnimation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(13.167, c_timeReal);
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(gv_artanis), "Inferior");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleAnimation_Init () {
    gt_TempleAnimation = TriggerCreate("gt_TempleAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto10A75081_ae = 8;
    const int auto10A75081_ai = 1;
    unitgroup autoE8FAD684_g;
    int autoE8FAD684_u;
    unit autoE8FAD684_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    CameraShakeStop(gv_pLAYER_01_USER);
    DialogSetVisible(gv_zergCounterDialog, PlayerGroupAll(), false);
    if ((gv_overloadTempleDialog != c_invalidDialogId)) {
        DialogSetVisible(gv_overloadTempleDialog, PlayerGroupAll(), false);
    }

    TriggerStop(gt_TempleAlignmentFX);
    libVCMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage4"), "Shakuras_XelNaga_Pyramid", RegionPlayableMap());
    libNtve_gf_SendActorMessageToUnit(gv_artanis, libNtve_gf_Signal("Stage4"));
    UnitBehaviorAdd(gv_artanis, "HybridDontDie", gv_artanis, 1);
    TriggerStop(gt_AttackWavesBonus);
    TriggerStop(gt_AttackWavesFinalOnslaught);
    TriggerStop(gt_AttackWavesZerg);
    TriggerStop(gt_AttackWavesZergandHybrid);
    lv_i = 1;
    for ( ; ( (auto10A75081_ai >= 0 && lv_i <= auto10A75081_ae) || (auto10A75081_ai < 0 && lv_i >= auto10A75081_ae) ) ; lv_i += auto10A75081_ai ) {
        UnitCreate(1, "DarkTemplar", 0, gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(gv_artanis), 6.0, (lv_i*45)), libNtve_gf_RandomAngle());
    }
    autoE8FAD684_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8FAD684_u = UnitGroupCount(autoE8FAD684_g, c_unitCountAll);
    for (;; autoE8FAD684_u -= 1) {
        autoE8FAD684_var = UnitGroupUnitFromEnd(autoE8FAD684_g, autoE8FAD684_u);
        if (autoE8FAD684_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoE8FAD684_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1059), 0.0, -1, 10, true);
    TriggerExecute(gt_VictoryMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_VictoryWarpOut, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1058), 8.0, -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 1.0, 0.0, SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Shakuras02|Line00027", true), c_soundIndexAny)));
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00027", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_VictoryNydusWorms, true, false);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 4.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00045", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras02|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoACF4FA98_g;
    int autoACF4FA98_u;
    unit autoACF4FA98_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStop(gv_pLAYER_01_USER);
    libVCMI_gf_StopCinematicSounds();
    SoundStopAllTriggerSounds(true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerStop(gt_VictoryMusic);
    TriggerStop(gt_VictoryWarpOut);
    TriggerStop(gt_VictoryNydusWorms);
    autoACF4FA98_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoACF4FA98_u = UnitGroupCount(autoACF4FA98_g, c_unitCountAll);
    for (;; autoACF4FA98_u -= 1) {
        autoACF4FA98_var = UnitGroupUnitFromEnd(autoACF4FA98_g, autoACF4FA98_u);
        if (autoACF4FA98_var == null) { break; }
        UnitRemove(autoACF4FA98_var);
    }
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    libVoiC_gf_PlayCinematic("ShakurasEnd", false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Warp Out
//--------------------------------------------------------------------------------------------------
bool gt_VictoryWarpOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cameraDuration;
    int lv_increments;
    unitgroup lv_currentUnitGroup;

    // Automatic Variable Declarations
    int autoAD76FF5F_n;
    int autoAD76FF5F_i;
    int auto8AB4F888_n;
    int auto8AB4F888_i;
    int auto16BABB02_n;
    int auto16BABB02_i;

    // Variable Initialization
    lv_currentUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cameraDuration = 16.0;
    lv_increments = FixedToInt(((lv_cameraDuration/4.0)*4.0));
    autoAD76FF5F_n = lv_increments;
    for (autoAD76FF5F_i = 1; autoAD76FF5F_i <= autoAD76FF5F_n; autoAD76FF5F_i += 1) {
        lv_currentUnitGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_currentUnitGroup, c_unitCountAlive) > 0)) {
            gf_WarpOutUnit(UnitGroupRandomUnit(lv_currentUnitGroup, c_unitCountAlive));
        }

        Wait(0.1, c_timeGame);
    }
    RegionAddRegion(RegionFromId(23), RegionFromId(24));
    auto8AB4F888_n = lv_increments;
    for (auto8AB4F888_i = 1; auto8AB4F888_i <= auto8AB4F888_n; auto8AB4F888_i += 1) {
        lv_currentUnitGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_currentUnitGroup, c_unitCountAlive) > 0)) {
            gf_WarpOutUnit(UnitGroupRandomUnit(lv_currentUnitGroup, c_unitCountAlive));
        }

        Wait(0.1, c_timeGame);
    }
    RegionAddRegion(RegionFromId(23), RegionFromId(25));
    auto16BABB02_n = lv_increments;
    for (auto16BABB02_i = 1; auto16BABB02_i <= auto16BABB02_n; auto16BABB02_i += 1) {
        lv_currentUnitGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_currentUnitGroup, c_unitCountAlive) > 0)) {
            gf_WarpOutUnit(UnitGroupRandomUnit(lv_currentUnitGroup, c_unitCountAlive));
        }

        Wait(0.1, c_timeGame);
    }
    RegionAddRegion(RegionFromId(23), RegionFromId(26));
    while (true) {
        lv_currentUnitGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_currentUnitGroup, c_unitCountAlive) > 0)) {
            gf_WarpOutUnit(UnitGroupRandomUnit(lv_currentUnitGroup, c_unitCountAlive));
        }
        else {
            return true;
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryWarpOut_Init () {
    gt_VictoryWarpOut = TriggerCreate("gt_VictoryWarpOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "PShakuras02_Music_Outro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusic_Init () {
    gt_VictoryMusic = TriggerCreate("gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Nydus Worms
//--------------------------------------------------------------------------------------------------
bool gt_VictoryNydusWorms_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit[8] lv_victoryNydusWorms;
    unitgroup lv_victoryZerg;

    // Automatic Variable Declarations
    const int autoAF531A4A_ae = 7;
    const int autoAF531A4A_ai = 1;
    unitgroup auto60D42B30_g;
    int auto60D42B30_u;
    unit auto60D42B30_var;
    const int auto9B878356_ae = 7;
    const int auto9B878356_ai = 1;

    // Variable Initialization
    lv_victoryZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("PShakuras02_VictoryNydus", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_i = 1;
    for ( ; ( (autoAF531A4A_ai >= 0 && lv_i <= autoAF531A4A_ae) || (autoAF531A4A_ai < 0 && lv_i >= autoAF531A4A_ae) ) ; lv_i += autoAF531A4A_ai ) {
        auto60D42B30_g = UnitGroup(null, c_playerAny, RegionCircle(PointFromName(("Victory Nydus " + IntToString(lv_i))), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto60D42B30_u = UnitGroupCount(auto60D42B30_g, c_unitCountAll);
        for (;; auto60D42B30_u -= 1) {
            auto60D42B30_var = UnitGroupUnitFromEnd(auto60D42B30_g, auto60D42B30_u);
            if (auto60D42B30_var == null) { break; }
            UnitKill(auto60D42B30_var);
        }
        UnitCreate(1, "NydusCanal", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromName(("Victory Nydus " + IntToString(lv_i))), 270.0);
        lv_victoryNydusWorms[lv_i] = UnitLastCreated();
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
        Wait(0.25, c_timeReal);
    }
    Wait(3.0, c_timeReal);
    while (true) {
        lv_i = 1;
        for ( ; ( (auto9B878356_ai >= 0 && lv_i <= auto9B878356_ae) || (auto9B878356_ai < 0 && lv_i >= auto9B878356_ae) ) ; lv_i += auto9B878356_ai ) {
            if ((UnitGroupCount(lv_victoryZerg, c_unitCountAlive) < 50)) {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_victoryNydusWorms[lv_i]), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_victoryNydusWorms[lv_i]), 0.0, 100.0, 0.0);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_02_DOMINION, PointWithOffsetPolar(UnitGetPosition(lv_victoryNydusWorms[lv_i]), 1.5, 315.0));
                UnitGroupAdd(lv_victoryZerg, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, gv_pLAYER_02_DOMINION, PointWithOffsetPolar(UnitGetPosition(lv_victoryNydusWorms[lv_i]), 1.5, 315.0));
                UnitGroupAddUnitGroup(lv_victoryZerg, UnitLastCreatedGroup());
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_artanis)), c_orderQueueReplace);
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, gv_pLAYER_02_DOMINION, PointWithOffsetPolar(UnitGetPosition(lv_victoryNydusWorms[lv_i]), 1.5, 315.0));
                UnitGroupAddUnitGroup(lv_victoryZerg, UnitLastCreatedGroup());
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_artanis), c_orderQueueReplace);
                Wait(0.25, c_timeReal);
            }

        }
        Wait(3.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryNydusWorms_Init () {
    gt_VictoryNydusWorms = TriggerCreate("gt_VictoryNydusWorms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_StartGameQ_Init();
    gt_DestroyStonesQuicklyQ_Init();
    gt_ExpansionReminderQ_Init();
    gt_BuildMorePhotonCannonsQ_Init();
    gt_DarkTemplarReminderQ_Init();
    gt_TempleAlignmentFX_Init();
    gt_ZergCounter_Init();
    gt_OverloadTempleButton_Init();
    gt_OverloadTempleButtonClicked_Init();
    gt_Autosave250MillionQ_Init();
    gt_Autosave500MillionQ_Init();
    gt_Autosave750MillionQ_Init();
    gt_ZergReach1BillionQ_Init();
    gt_ZergReach15BillionQ_Init();
    gt_ZergSpawningInit_Init();
    gt_ZergWanderingDefenses_Init();
    gt_ZergRespawnTimers_Init();
    gt_ZergRespawnTimerExpires_Init();
    gt_AddZergDefenses5Minutes_Init();
    gt_AddZergDefenses10Minutes_Init();
    gt_AddZergDefenses14Minutes_Init();
    gt_AddZergDefenses17Minutes_Init();
    gt_DespawnOverlords_Init();
    gt_FinalOverlordFrenzy_Init();
    gt_DestroyBottomStone_Init();
    gt_DestroyLeftStone_Init();
    gt_DestroyRightStone_Init();
    gt_InitCausewayDestructibles_Init();
    gt_WindEffects_Init();
    gt_BottomStoneEffects_Init();
    gt_LeftStoneEffects_Init();
    gt_RightStoneEffects_Init();
    gt_ZenithStonesDestroyedQ_Init();
    gt_ZenithStoneAttackWarningQ_Init();
    gt_ReinforceZenithStones01_Init();
    gt_ReinforceZenithStones02_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryMainObjectiveCompleted_Init();
    gt_VictorySafety_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_AchievementHugeNumberofZergonShakuras_Init();
    gt_AchievementFastZenithStones_Init();
    gt_MasteryAbsurdNumberofZergonShakuras_Init();
    gt_AnniversaryAchievementAbsurdNumberofZergonShakuras_Init();
    gt_StartAI_Init();
    gt_AttackWavesZerg_Init();
    gt_AttackWavesZergandHybrid_Init();
    gt_AttackWavesFinalOnslaught_Init();
    gt_AttackWavesBonus_Init();
    gt_FirstWaveQ_Init();
    gt_ThirdWaveQ_Init();
    gt_SixthWaveQ_Init();
    gt_DoubleHitQ_Init();
    gt_OverlordDropQ_Init();
    gt_TripleHitQ_Init();
    gt_HybridWaveQ_Init();
    gt__3MinutesRemainQ_Init();
    gt_ObjectiveZenithStonesCreate_Init();
    gt_ObjectiveZenithStonesComplete_Init();
    gt_ObjectiveZenithStonesUpdate_Init();
    gt_ObjectiveHoldOutCreate_Init();
    gt_ObjectiveHoldOutComplete_Init();
    gt_ObjectiveOverloadTempleCreate_Init();
    gt_ObjectiveOverloadTempleComplete_Init();
    gt_ObjectiveTempleMustSurviveCreate_Init();
    gt_ObjectiveTempleMustSurviveComplete_Init();
    gt_ObjectiveTempleMustSurviveFailed_Init();
    gt_ObjectiveMoreZergCreate_Init();
    gt_ObjectiveMoreZergComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroMusic_Init();
    gt_TempleAnimation_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryWarpOut_Init();
    gt_VictoryMusic_Init();
    gt_VictoryNydusWorms_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
