//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: 07 Void Forces vs Kerrigan
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] ai10D6CD83_defGather;
string[17] ai10D6CD83_customData;
wave[17] ai10D6CD83_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai10D6CD83_wave2_enabled;
wave[17] ai10D6CD83_wave2_lastWave;
trigger ai10D6CD83_wave2_trigger = null;
int ai10D6CD83_wave2_runPlayer;
playergroup ai10D6CD83_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai10D6CD83_wave2_enabled[init_i] = false;
        ai10D6CD83_wave2_lastWave[init_i] = null;
    }

    ai10D6CD83_wave2_trigger = TriggerCreate("ai10D6CD83_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai10D6CD83_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai10D6CD83_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai10D6CD83_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai10D6CD83_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai10D6CD83_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai10D6CD83_wave2_runFunc (bool c, bool a) {
    int p = ai10D6CD83_wave2_runPlayer;
    playergroup target = ai10D6CD83_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai10D6CD83_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai10D6CD83_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai10D6CD83_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(547), false);

    AIAttackWaveAddUnits(2, 4, "Zealot");
    AIAttackWaveAddUnits(3, 4, "Zealot");
    AIAttackWaveAddUnits(4, 4, "Zealot");
    AIAttackWaveAddUnits(5, 4, "Zealot");

    AIAttackWaveAddUnits(2, 6, "Marine");
    AIAttackWaveAddUnits(3, 6, "Marine");
    AIAttackWaveAddUnits(4, 6, "Marine");
    AIAttackWaveAddUnits(5, 6, "Marine");

    AIAttackWaveSend(p, ts, false);
    ai10D6CD83_wave2_lastWave[p] = WaveLastCreated();
    ai10D6CD83_lastWave[p] = ai10D6CD83_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave2_run (int p, playergroup target, bool wait) {
    ai10D6CD83_wave2_runPlayer = p;
    ai10D6CD83_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai10D6CD83_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai10D6CD83_wave3_enabled;
wave[17] ai10D6CD83_wave3_lastWave;
trigger ai10D6CD83_wave3_trigger = null;
int ai10D6CD83_wave3_runPlayer;
playergroup ai10D6CD83_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai10D6CD83_wave3_enabled[init_i] = false;
        ai10D6CD83_wave3_lastWave[init_i] = null;
    }

    ai10D6CD83_wave3_trigger = TriggerCreate("ai10D6CD83_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai10D6CD83_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai10D6CD83_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai10D6CD83_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai10D6CD83_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai10D6CD83_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai10D6CD83_wave3_runFunc (bool c, bool a) {
    int p = ai10D6CD83_wave3_runPlayer;
    playergroup target = ai10D6CD83_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai10D6CD83_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai10D6CD83_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai10D6CD83_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(547), false);

    AIAttackWaveAddUnits(2, 4, "Zealot");
    AIAttackWaveAddUnits(3, 4, "Zealot");
    AIAttackWaveAddUnits(4, 5, "Zealot");
    AIAttackWaveAddUnits(5, 5, "Zealot");

    AIAttackWaveAddUnits(2, 6, "Marine");
    AIAttackWaveAddUnits(3, 6, "Marine");
    AIAttackWaveAddUnits(4, 6, "Marine");
    AIAttackWaveAddUnits(5, 6, "Marine");

    AIAttackWaveAddUnits(2, 2, "Hydralisk");
    AIAttackWaveAddUnits(3, 2, "Hydralisk");
    AIAttackWaveAddUnits(4, 2, "Hydralisk");
    AIAttackWaveAddUnits(5, 4, "Hydralisk");

    AIAttackWaveSend(p, ts, false);
    ai10D6CD83_wave3_lastWave[p] = WaveLastCreated();
    ai10D6CD83_lastWave[p] = ai10D6CD83_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave3_run (int p, playergroup target, bool wait) {
    ai10D6CD83_wave3_runPlayer = p;
    ai10D6CD83_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai10D6CD83_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai10D6CD83_wave4_enabled;
wave[17] ai10D6CD83_wave4_lastWave;
trigger ai10D6CD83_wave4_trigger = null;
int ai10D6CD83_wave4_runPlayer;
playergroup ai10D6CD83_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai10D6CD83_wave4_enabled[init_i] = false;
        ai10D6CD83_wave4_lastWave[init_i] = null;
    }

    ai10D6CD83_wave4_trigger = TriggerCreate("ai10D6CD83_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai10D6CD83_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai10D6CD83_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai10D6CD83_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai10D6CD83_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai10D6CD83_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai10D6CD83_wave4_runFunc (bool c, bool a) {
    int p = ai10D6CD83_wave4_runPlayer;
    playergroup target = ai10D6CD83_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai10D6CD83_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai10D6CD83_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai10D6CD83_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(547), false);

    AIAttackWaveAddUnits(2, 6, "Zealot");
    AIAttackWaveAddUnits(3, 6, "Zealot");
    AIAttackWaveAddUnits(4, 6, "Zealot");
    AIAttackWaveAddUnits(5, 6, "Zealot");

    AIAttackWaveAddUnits(2, 6, "Marine");
    AIAttackWaveAddUnits(3, 6, "Marine");
    AIAttackWaveAddUnits(4, 6, "Marine");
    AIAttackWaveAddUnits(5, 9, "Marine");

    AIAttackWaveAddUnits(2, 2, "Hydralisk");
    AIAttackWaveAddUnits(3, 2, "Hydralisk");
    AIAttackWaveAddUnits(4, 3, "Hydralisk");
    AIAttackWaveAddUnits(5, 4, "Hydralisk");

    AIAttackWaveAddUnits(2, 1, "Immortal");
    AIAttackWaveAddUnits(3, 1, "Immortal");
    AIAttackWaveAddUnits(4, 1, "Immortal");
    AIAttackWaveAddUnits(5, 2, "Immortal");

    AIAttackWaveSend(p, ts, false);
    ai10D6CD83_wave4_lastWave[p] = WaveLastCreated();
    ai10D6CD83_lastWave[p] = ai10D6CD83_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave4_run (int p, playergroup target, bool wait) {
    ai10D6CD83_wave4_runPlayer = p;
    ai10D6CD83_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai10D6CD83_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave_enable (int w, int p, bool val) {
    if (w == 2) { ai10D6CD83_wave2_enable(p, val); }
    if (w == 3) { ai10D6CD83_wave3_enable(p, val); }
    if (w == 4) { ai10D6CD83_wave4_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool ai10D6CD83_wave_isEnabled (int w, int p) {
    if (w == 2) { return ai10D6CD83_wave2_isEnabled(p); }
    if (w == 3) { return ai10D6CD83_wave3_isEnabled(p); }
    if (w == 4) { return ai10D6CD83_wave4_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup ai10D6CD83_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave ai10D6CD83_wave_createdWave (int w, int p) {
    if (w == 2) { return ai10D6CD83_wave2_createdWave(p); }
    if (w == 3) { return ai10D6CD83_wave3_createdWave(p); }
    if (w == 4) { return ai10D6CD83_wave4_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 2) { ai10D6CD83_wave2_run(p, target, wait); }
    if (w == 3) { ai10D6CD83_wave3_run(p, target, wait); }
    if (w == 4) { ai10D6CD83_wave4_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger ai10D6CD83_waves_trigger = null;
int ai10D6CD83_waves_runPlayer;
playergroup ai10D6CD83_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_waves_init () {
    ai10D6CD83_waves_trigger = TriggerCreate("ai10D6CD83_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool ai10D6CD83_waves_runFunc (bool c, bool a) {
    int p = ai10D6CD83_waves_runPlayer;
    playergroup target = ai10D6CD83_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    ai10D6CD83_wave2_run(p, target, true);
    ai10D6CD83_wave3_run(p, target, true);
    ai10D6CD83_wave4_run(p, target, true);

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_waves_run (int p, playergroup target) {
    ai10D6CD83_waves_runPlayer = p;
    ai10D6CD83_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai10D6CD83_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    ai10D6CD83_wave2_enable(p, val);
    ai10D6CD83_wave3_enable(p, val);
    ai10D6CD83_wave4_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_waves_stop () {
    TriggerStop(ai10D6CD83_waves_trigger);

    TriggerStop(ai10D6CD83_wave2_trigger);
    TriggerStop(ai10D6CD83_wave3_trigger);
    TriggerStop(ai10D6CD83_wave4_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void ai10D6CD83_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai10D6CD83_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string ai10D6CD83_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai10D6CD83_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave ai10D6CD83_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai10D6CD83_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool ai10D6CD83_initialized = false;

//--------------------------------------------------------------------------------------------------
void ai10D6CD83_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!ai10D6CD83_initialized) {
        ai10D6CD83_wave2_init();
        ai10D6CD83_wave3_init();
        ai10D6CD83_wave4_init();
        ai10D6CD83_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            ai10D6CD83_defGather[init_i] = PointFromId(245);
        }

        ai10D6CD83_initialized = true;
    }

    AICampaignStart(p);
}
