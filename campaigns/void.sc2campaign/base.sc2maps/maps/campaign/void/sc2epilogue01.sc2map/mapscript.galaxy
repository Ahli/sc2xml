//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Into The Void
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "aiAAFFF4B0"
include "aiB3710BCC"
include "ai3A78C313"
include "ai4F6596AC"
include "aiD52C1191"
include "ai10D6CD83"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_RAYNOR = 2;
const int gv_pLAYER_03_KERRIGAN = 3;
const int gv_pLAYER_04_NARUD = 4;
const int gv_pLAYER_05_VOIDFORCES = 5;
const int gv_pLAYER_06_VOIDFORCES = 6;
const int gv_pLAYER_07_VOIDFORCES = 7;
const int gv_pLAYER_08_RAYNOREXPANSIONS = 8;
const int gv_pLAYER_09_KERRIGANEXPANSIONS = 9;
const int gv_performanceBonusCount = 4;
const int gv_performanceMidCount = 9;
const int gv_performanceExpoCount = 2;
const int gv_objectiveEstablishAllyExpansionsMax = 4;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORDNarudBaseVoidRift {
    unit lv_unit;
    point lv_point;
    timer lv_deadTimer;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESETToggleOnOff_On = 0;
const int ge_PRESETToggleOnOff_Off = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_missionStage;
unit gv_artanis;
unit gv_kerrigan;
unit gv_stukov;
unit gv_narud;
unit gv_voidThrasher;
string gv_mapMusicTrack;
playergroup gv_enemyPlayerGroup;
playergroup gv_friendlyPlayerGroup;
int gv_lastSentTransmission;
unitgroup[gv_performanceBonusCount + 1] gv_performanceUnitsBonus;
unitgroup[gv_performanceMidCount + 1] gv_performanceUnitsMid;
unitgroup[gv_performanceExpoCount + 1] gv_performanceUnitsExpo;
unit gv_s1_VoidRift01;
unit gv_s1_VoidCorruption;
unitgroup gv_s1_PlayerForces;
int gv_ourosTransmissionsCount;
int gv_bonusObjectivePing01;
int gv_bonusObjectivePing02;
int gv_bonusObjectivePing03;
int gv_bonusObjectivePing04;
bool gv_bonusObjectiveComplete01;
bool gv_bonusObjectiveComplete02;
bool gv_bonusObjectiveComplete03;
bool gv_bonusObjectiveComplete04;
bool gv_voidThrasherAttackActive;
int gv_voidThrasherAttackTarget;
int gv_voidThrasherAttackCount;
int gv_voidThrasherAttackCountvsKerrigan;
int gv_voidThrasherAttackCountvsRaynor;
unitgroup gv_voidThrasherSummonedUnits;
int gv_voidThrasherSummonedUnitCap;
gs_RECORDNarudBaseVoidRift[26] gv_narudBaseRifts;
int gv_narudRiftsMax;
unitgroup gv_narudRiftSpawnGroup;
int gv_narudRiftSpawnCap;
fixed gv_narudRiftDeadTime;
int gv_raynorSCVMax;
int gv_raynorProgressCount;
int gv_kerriganProgressCount;
int gv_voidCorruptionDestroyed;
int gv_voidCorruptionTotal;
int gv_objectiveFindCorruptionSource;
int gv_objectiveDefeatNarud;
int gv_objectiveAlliesMustSurvive;
int gv_objectiveEstablishAllyExpansions;
int gv_objectiveEstablishAllyExpansionsCount;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicNarud;
int gv_cinematicSavedPlayerMinerals;
int gv_cinematicSavedPlayerGas;
unit gv_cinematicHyperion;
unitgroup gv_cinematicFleetDeathCandidates;
unit gv_cinematicVoidCorruptionPlayer;
unit gv_cinematicVoidCorruptionRaynor;
unit gv_cinematicVoidCorruptionKerrigan;
unit gv_cinematicVoidThrasher;
unit gv_cinematicWarpPrism01;
unit gv_cinematicWarpPrism02;
unit gv_cinematicProbe;
unitgroup gv_cinematicProtossArmy;
unit gv_cinematicStukov;
unit gv_cinematicKerrigan;
unit gv_cinematicRaynor;
unit gv_cinematicArtanis;
unit gv_cinematicCelestialTower;

void InitGlobals () {
    int init_i;

    gv_kerrigan = UnitFromId(171);
    gv_narud = UnitFromId(331);
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_friendlyPlayerGroup = PlayerGroupEmpty();
    gv_lastSentTransmission = c_invalidTransmissionId;
    for (init_i = 0; init_i <= gv_performanceBonusCount; init_i += 1) {
        gv_performanceUnitsBonus[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_performanceMidCount; init_i += 1) {
        gv_performanceUnitsMid[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_performanceExpoCount; init_i += 1) {
        gv_performanceUnitsExpo[init_i] = UnitGroupEmpty();
    }
    gv_s1_PlayerForces = UnitGroupEmpty();
    gv_bonusObjectivePing01 = c_invalidPingId;
    gv_bonusObjectivePing02 = c_invalidPingId;
    gv_bonusObjectivePing03 = c_invalidPingId;
    gv_bonusObjectivePing04 = c_invalidPingId;
    gv_voidThrasherSummonedUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= 25; init_i += 1) {
        gv_narudBaseRifts[init_i].lv_deadTimer = TimerCreate();
    }
    gv_narudRiftSpawnGroup = UnitGroupEmpty();
    gv_raynorSCVMax = 4;
    gv_objectiveFindCorruptionSource = c_invalidObjectiveId;
    gv_objectiveDefeatNarud = c_invalidObjectiveId;
    gv_objectiveAlliesMustSurvive = c_invalidObjectiveId;
    gv_objectiveEstablishAllyExpansions = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicFleetDeathCandidates = UnitGroupEmpty();
    gv_cinematicProtossArmy = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
unitgroup gf_PerformanceUnitsForRegion (region lp_perfRegion);
void gf_S1ActivateGenericEnemyScriptedAI (unit lp_unit);
void gf_LightNovaHealsUnits (point lp_point);
void gf_PlayOurosTransmissionQ (unit lp_celestialTower);
void gf_LandTerranBuilding (string lp_unitType, point lp_point);
void gf_MedivacDropoffWave (point lp_point);
void gf_ThorDropoffWave (point lp_point);
void gf_MutaDropoffWave (point lp_point);
void gf_UltraDropoffWave (point lp_point);
unitgroup gf_EnemiesWithinStukovRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
unitgroup gf_EnemiesWithinKerriganRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
void gf_SpawnFirstVoidThrasherAttackAI (int lp_targetPlayer, point lp_spawnPoint);
void gf_SpawnVoidThrasherAttackAI (int lp_targetPlayer);
void gf_ThrasherAttackEnemies (unit lp_thrasherUnit, int lp_count);
void gf_VoidThrasherSpawnUnits (string lp_unitType, int lp_count);
void gf_TurnVoidThrasherSpawnModeOnOff (int lp_toggleOnOff);
void gf_NarudRiftSpawnUnitType (string lp_unitType, int lp_count, unit lp_voidRift);
void gf_NarudRiftSetUpNewUnit (unit lp_voidRiftUnit);
void gf_VoidRiftSpawnsInNarudBase (unit lp_voidRift);
void gf_AchievementFinishinlessthan28minutes ();
void gf_IntroUnloadUnitFromWarpPrism (string lp_unitType, point lp_spawnPoint, point lp_targetPoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init01aRaynorTechnology;
trigger gt_Init01bKerriganTechnology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_PerformanceInit;
trigger gt_PerformancePauseAll;
trigger gt_PerformanceUnpauseBonus01;
trigger gt_PerformanceUnpauseBonus02;
trigger gt_PerformanceUnpauseBonus03;
trigger gt_PerformanceUnpauseBonus04;
trigger gt_PerformanceUnpauseMid01;
trigger gt_PerformanceUnpauseMid02;
trigger gt_PerformanceUnpauseMid03;
trigger gt_PerformanceUnpauseMid04;
trigger gt_PerformanceUnpauseMid05;
trigger gt_PerformanceUnpauseMid06;
trigger gt_PerformanceUnpauseMid07;
trigger gt_PerformanceUnpauseMid08;
trigger gt_PerformanceUnpauseMid09;
trigger gt_PerformanceUnpauseExpoS;
trigger gt_PerformanceUnpauseExpoN;
trigger gt_PerformanceRepauseAfterSoA;
trigger gt_PerformanceHandleTimeStopApply;
trigger gt_StartGameStage1Q;
trigger gt_StartGameStage2Q;
trigger gt_S1FlyoutWarpPrisms;
trigger gt_S1UnitEntersFirstEnemyGroup;
trigger gt_S1UnitEntersFirstVoidRiftQ;
trigger gt_S1FirstVoidRiftTakesDamage;
trigger gt_S1UnitEntersFirstVoidCorruptionQ;
trigger gt_S1FirstVoidCorruptionTakesDamage;
trigger gt_S1FirstVoidCorruptionDiesQ;
trigger gt_S1Revealers;
trigger gt_S1UnitWander;
trigger gt_S1VoidRiftUnitSpawns01;
trigger gt_S1VoidRiftUnitSpawns02;
trigger gt_FirstVoidThrasherDiesQ;
trigger gt_EnemyUnitEntersMap;
trigger gt_VoidCorruptionDies;
trigger gt_UnitEntersDiscoverBonusObjective;
trigger gt_RevealBonusObjectiveQ;
trigger gt_BonusObjectiveCleared01Q;
trigger gt_BonusObjectiveCleared02Q;
trigger gt_BonusObjectiveCleared03Q;
trigger gt_BonusObjectiveCleared04Q;
trigger gt_DefeatUnitsDead;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryDefeatNarudCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StartAI;
trigger gt_StartAIAttackWavesVsPlayer;
trigger gt_AIUpgradesCasualNormal;
trigger gt_AIUpgradesHardBrutal;
trigger gt_StukovDies;
trigger gt_StukovRevivesAfterCooldown;
trigger gt_UpdateStukovDefendRegion;
trigger gt_StukovSpellAI;
trigger gt_KerriganDies;
trigger gt_KerriganRevivesAfterCooldown;
trigger gt_UpdateKerriganDefendRegion;
trigger gt_KerriganSpellAI;
trigger gt_VsKerriganWaves;
trigger gt_VsRaynorWaves;
trigger gt_KerriganWaves;
trigger gt_RaynorWaves;
trigger gt_VoidThrasherAttacks;
trigger gt_VoidThrasherAttackSentTransmissionQ;
trigger gt_VoidThrasherAttackAtFrontLineTransmissionQ;
trigger gt_VoidThrasherAttackAtBaseTransmissionQ;
trigger gt_VoidThrasherAttackStoppedTransmissionQ;
trigger gt_VoidThrasherDies;
trigger gt_VoidThrasherAbilitySpawnUnits;
trigger gt_VoidThrasherSpawns01;
trigger gt_VoidThrasherSpawns02;
trigger gt_VoidThrasherSpawns03;
trigger gt_VoidThrasherSpawns04;
trigger gt_VoidThrasherSpawns05;
trigger gt_VoidThrasherSpawns06;
trigger gt_MakeVoidThrasherSpawnsAttack;
trigger gt_VoidThrasherSpawnsUnitGroup;
trigger gt_NarudEngagedQ;
trigger gt_NarudAbilitySummonVoidRift;
trigger gt_NarudAttacksLookAt;
trigger gt_NarudVoidRiftLookAt;
trigger gt_NarudIdleClearLookAt;
trigger gt_NarudNotBuildingClearLookAt;
trigger gt_NarudRiftDies;
trigger gt_VoidRiftStartedInNarudBase;
trigger gt_VoidRiftSpawnsInNarudBase;
trigger gt_RespawnRaynorSCV;
trigger gt_RaynorForwardBase01Setup;
trigger gt_RaynorForwardBase02Setup;
trigger gt_RaynorForwardBase03Setup;
trigger gt_RaynorForwardBase01SetupTransmissionQ;
trigger gt_RaynorForwardBase02SetupTransmissionQ;
trigger gt_RaynorForwardBase03SetupTransmissionQ;
trigger gt_RaynorDefendKerriganFrontLine;
trigger gt_RaynorDefendKerriganFrontLineTransmissionQ;
trigger gt_KerriganForwardBase01Setup;
trigger gt_KerriganForwardBase02Setup;
trigger gt_KerriganForwardBase03Setup;
trigger gt_KerriganForwardBase01SetupTransmissionQ;
trigger gt_KerriganForwardBase02SetupTransmissionQ;
trigger gt_KerriganForwardBase03SetupTransmissionQ;
trigger gt_BurrowSwarmHosts;
trigger gt_KerriganDefendRaynorFrontLineFirstTime;
trigger gt_KerriganDefendRaynorFrontLine;
trigger gt_KerriganDefendRaynorFrontLineTransmissionQ;
trigger gt_DestroyVoidCorruption;
trigger gt_TipReadyQ;
trigger gt_ObjectiveFindCorruptionSourceCreate;
trigger gt_ObjectiveFindCorruptionSourceComplete;
trigger gt_ObjectiveFindCorruptionSourceFailed;
trigger gt_ObjectiveDefeatNarudCreate;
trigger gt_ObjectiveDefeatNarudComplete;
trigger gt_ObjectiveDefeatNarudFailed;
trigger gt_ObjectiveAlliesMustSurviveCreate;
trigger gt_ObjectiveAlliesMustSurviveComplete;
trigger gt_ObjectiveAlliesMustSurviveFailed;
trigger gt_ObjectiveEstablishAllyExpansionsCreate;
trigger gt_ObjectiveEstablishAllyExpansionsComplete;
trigger gt_ObjectiveEstablishAllyExpansionsUpdate;
trigger gt_ObjectiveEstablishAllyExpansionsFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroKillOffUnits;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidCreatePlayersBase;
trigger gt_MidUnitsSpawn;
trigger gt_MidUnitConstructionStarts;
trigger gt_PositionPlayersUnits;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiAAFFF4B0") { aiAAFFF4B0_start(p); }
    if (cai_playerAI[p] == "aiB3710BCC") { aiB3710BCC_start(p); }
    if (cai_playerAI[p] == "ai3A78C313") { ai3A78C313_start(p); }
    if (cai_playerAI[p] == "ai4F6596AC") { ai4F6596AC_start(p); }
    if (cai_playerAI[p] == "aiD52C1191") { aiD52C1191_start(p); }
    if (cai_playerAI[p] == "ai10D6CD83") { ai10D6CD83_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { aiAAFFF4B0_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiB3710BCC") { aiB3710BCC_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai3A78C313") { ai3A78C313_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai4F6596AC") { ai4F6596AC_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiD52C1191") { aiD52C1191_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai10D6CD83") { ai10D6CD83_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { return aiAAFFF4B0_getCustomData(p); }
    if (cai_playerAI[p] == "aiB3710BCC") { return aiB3710BCC_getCustomData(p); }
    if (cai_playerAI[p] == "ai3A78C313") { return ai3A78C313_getCustomData(p); }
    if (cai_playerAI[p] == "ai4F6596AC") { return ai4F6596AC_getCustomData(p); }
    if (cai_playerAI[p] == "aiD52C1191") { return aiD52C1191_getCustomData(p); }
    if (cai_playerAI[p] == "ai10D6CD83") { return ai10D6CD83_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { return aiAAFFF4B0_getLastWave(p); }
    if (cai_playerAI[p] == "aiB3710BCC") { return aiB3710BCC_getLastWave(p); }
    if (cai_playerAI[p] == "ai3A78C313") { return ai3A78C313_getLastWave(p); }
    if (cai_playerAI[p] == "ai4F6596AC") { return ai4F6596AC_getLastWave(p); }
    if (cai_playerAI[p] == "aiD52C1191") { return aiD52C1191_getLastWave(p); }
    if (cai_playerAI[p] == "ai10D6CD83") { return ai10D6CD83_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { aiAAFFF4B0_waves_run(p, target); }
    if (cai_playerAI[p] == "aiB3710BCC") { aiB3710BCC_waves_run(p, target); }
    if (cai_playerAI[p] == "ai3A78C313") { ai3A78C313_waves_run(p, target); }
    if (cai_playerAI[p] == "ai4F6596AC") { ai4F6596AC_waves_run(p, target); }
    if (cai_playerAI[p] == "aiD52C1191") { aiD52C1191_waves_run(p, target); }
    if (cai_playerAI[p] == "ai10D6CD83") { ai10D6CD83_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { aiAAFFF4B0_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiB3710BCC") { aiB3710BCC_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai3A78C313") { ai3A78C313_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai4F6596AC") { ai4F6596AC_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiD52C1191") { aiD52C1191_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai10D6CD83") { ai10D6CD83_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiAAFFF4B0") { aiAAFFF4B0_waves_stop(); }
    if (ai == "aiB3710BCC") { aiB3710BCC_waves_stop(); }
    if (ai == "ai3A78C313") { ai3A78C313_waves_stop(); }
    if (ai == "ai4F6596AC") { ai4F6596AC_waves_stop(); }
    if (ai == "aiD52C1191") { aiD52C1191_waves_stop(); }
    if (ai == "ai10D6CD83") { ai10D6CD83_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { aiAAFFF4B0_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiB3710BCC") { aiB3710BCC_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai3A78C313") { ai3A78C313_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai4F6596AC") { ai4F6596AC_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiD52C1191") { aiD52C1191_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai10D6CD83") { ai10D6CD83_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { aiAAFFF4B0_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiB3710BCC") { aiB3710BCC_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai3A78C313") { ai3A78C313_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai4F6596AC") { ai4F6596AC_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiD52C1191") { aiD52C1191_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai10D6CD83") { ai10D6CD83_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { return aiAAFFF4B0_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiB3710BCC") { return aiB3710BCC_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai3A78C313") { return ai3A78C313_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai4F6596AC") { return ai4F6596AC_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiD52C1191") { return aiD52C1191_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai10D6CD83") { return ai10D6CD83_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { return aiAAFFF4B0_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiB3710BCC") { return aiB3710BCC_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai3A78C313") { return ai3A78C313_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai4F6596AC") { return ai4F6596AC_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiD52C1191") { return aiD52C1191_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai10D6CD83") { return ai10D6CD83_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiAAFFF4B0") { return aiAAFFF4B0_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiB3710BCC") { return aiB3710BCC_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai3A78C313") { return ai3A78C313_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai4F6596AC") { return ai4F6596AC_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiD52C1191") { return aiD52C1191_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai10D6CD83") { return ai10D6CD83_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiAAFFF4B0", 2);
    cai_start("aiB3710BCC", 3);
    cai_start("ai3A78C313", 5);
    cai_start("ai4F6596AC", 4);
    cai_start("aiD52C1191", 6);
    cai_start("ai10D6CD83", 7);
    AICampaignStart(8);
    AICampaignStart(9);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 4);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 4);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 2);
    cai_waves_run(6, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 3);
    cai_waves_run(7, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
unitgroup gf_PerformanceUnitsForRegion (region lp_perfRegion) {
    // Variable Declarations
    unitgroup lv_perfUnits;
    region lv_unitRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_perfUnits = UnitGroupEmpty();

    // Implementation
    lv_unitRegion = RegionCircle(RegionGetCenter(lp_perfRegion), ((libNtve_gf_WidthOfRegion(lp_perfRegion) / 2.0) - 14.0));
    UnitGroupAddUnitGroup(lv_perfUnits, UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lv_unitRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return lv_perfUnits;
}

trigger auto_gf_S1ActivateGenericEnemyScriptedAI_Trigger = null;
unit auto_gf_S1ActivateGenericEnemyScriptedAI_lp_unit;

void gf_S1ActivateGenericEnemyScriptedAI (unit lp_unit) {
    auto_gf_S1ActivateGenericEnemyScriptedAI_lp_unit = lp_unit;

    if (auto_gf_S1ActivateGenericEnemyScriptedAI_Trigger == null) {
        auto_gf_S1ActivateGenericEnemyScriptedAI_Trigger = TriggerCreate("auto_gf_S1ActivateGenericEnemyScriptedAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_S1ActivateGenericEnemyScriptedAI_Trigger, false, false);
}

bool auto_gf_S1ActivateGenericEnemyScriptedAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_S1ActivateGenericEnemyScriptedAI_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    while ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_unit) == true)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(gv_s1_PlayerForces, UnitGetPosition(lp_unit)))), c_orderQueueReplace);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

void gf_LightNovaHealsUnits (point lp_point) {
    // Automatic Variable Declarations
    unitgroup autoAC06A8B5_g;
    int autoAC06A8B5_u;
    unit autoAC06A8B5_var;

    // Implementation
    autoAC06A8B5_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionCircle(lp_point, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAC06A8B5_u = UnitGroupCount(autoAC06A8B5_g, c_unitCountAll);
    for (;; autoAC06A8B5_u -= 1) {
        autoAC06A8B5_var = UnitGroupUnitFromEnd(autoAC06A8B5_g, autoAC06A8B5_u);
        if (autoAC06A8B5_var == null) { break; }
        UnitBehaviorAdd(autoAC06A8B5_var, "XelNagaTowerEpilogueNovaHeal", autoAC06A8B5_var, 1);
    }
}

void gf_PlayOurosTransmissionQ (unit lp_celestialTower) {
    // Automatic Variable Declarations
    int auto13DB5309_val;

    // Implementation
    TriggerQueueEnter();
    gv_ourosTransmissionsCount += 1;
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto13DB5309_val = gv_ourosTransmissionsCount;
    if (auto13DB5309_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(lp_celestialTower, "Mission_Epilogue01|Line00104", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto13DB5309_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(lp_celestialTower, "Mission_Epilogue01|Line00105", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto13DB5309_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(lp_celestialTower, "Mission_Epilogue01|Line00106", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto13DB5309_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(lp_celestialTower, "Mission_Epilogue01|Line00107", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto13DB5309_val == 5) {
        libVCMI_gf_SendTransmissionCampaign(lp_celestialTower, "Mission_Epilogue01|Line00108", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto13DB5309_val == 6) {
        libVCMI_gf_SendTransmissionCampaign(lp_celestialTower, "Mission_Epilogue01|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto13DB5309_val == 7) {
        libVCMI_gf_SendTransmissionCampaign(lp_celestialTower, "Mission_Epilogue01|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

trigger auto_gf_LandTerranBuilding_Trigger = null;
string auto_gf_LandTerranBuilding_lp_unitType;
point auto_gf_LandTerranBuilding_lp_point;

void gf_LandTerranBuilding (string lp_unitType, point lp_point) {
    auto_gf_LandTerranBuilding_lp_unitType = lp_unitType;
    auto_gf_LandTerranBuilding_lp_point = lp_point;

    if (auto_gf_LandTerranBuilding_Trigger == null) {
        auto_gf_LandTerranBuilding_Trigger = TriggerCreate("auto_gf_LandTerranBuilding_TriggerFunc");
    }

    TriggerExecute(auto_gf_LandTerranBuilding_Trigger, false, false);
}

bool auto_gf_LandTerranBuilding_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_gf_LandTerranBuilding_lp_unitType;
    point lp_point = auto_gf_LandTerranBuilding_lp_point;

    // Variable Declarations
    abilcmd lv_abilityCommand;
    unit lv_unit;

    // Automatic Variable Declarations
    string auto25218527_val;

    // Variable Initialization

    // Implementation
    auto25218527_val = lp_unitType;
    if (auto25218527_val == "CommandCenterFlying") {
        lv_abilityCommand = AbilityCommand("CommandCenterLand", 0);
    }
    else if (auto25218527_val == "BarracksFlying") {
        lv_abilityCommand = AbilityCommand("BarracksAddOns", 3);
    }
    else if (auto25218527_val == "FactoryFlying") {
        lv_abilityCommand = AbilityCommand("FactoryAddOns", 3);
    }
    else if (auto25218527_val == "StarportFlying") {
        lv_abilityCommand = AbilityCommand("StarportAddOns", 3);
    }
    else {
    }
    if ((lv_abilityCommand != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, gv_pLAYER_08_RAYNOREXPANSIONS, lp_point);
        lv_unit = UnitLastCreated();
        UnitSetHeight(lv_unit, 10.0, 0.0);
        UnitSetHeight(lv_unit, 3.25, 4.0);
        Wait(4.0, c_timeAI);
        if ((lp_unitType == "CommandCenterFlying")) {
            while ((UnitGetType(lv_unit) == lp_unitType)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Invisible5x5", 0, gv_pLAYER_08_RAYNOREXPANSIONS, lp_point);
                libNtve_gf_AICast(lv_unit, OrderTargetingPoint(lv_abilityCommand, UnitGetPosition(UnitLastCreated())));
                UnitRemove(UnitLastCreated());
                Wait(0.5, c_timeAI);
            }
        }
        else {
            while ((UnitGetType(lv_unit) == lp_unitType)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Epilogue01LandingZoneChecker", 0, gv_pLAYER_08_RAYNOREXPANSIONS, lp_point);
                libNtve_gf_AICast(lv_unit, OrderTargetingPoint(lv_abilityCommand, UnitGetPosition(UnitLastCreated())));
                UnitRemove(UnitLastCreated());
                Wait(0.5, c_timeAI);
            }
        }
        AISetUnitScriptControlled(lv_unit, false);
    }

    return true;
}

trigger auto_gf_MedivacDropoffWave_Trigger = null;
point auto_gf_MedivacDropoffWave_lp_point;

void gf_MedivacDropoffWave (point lp_point) {
    auto_gf_MedivacDropoffWave_lp_point = lp_point;

    if (auto_gf_MedivacDropoffWave_Trigger == null) {
        auto_gf_MedivacDropoffWave_Trigger = TriggerCreate("auto_gf_MedivacDropoffWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_MedivacDropoffWave_Trigger, false, false);
}

bool auto_gf_MedivacDropoffWave_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_MedivacDropoffWave_lp_point;

    // Variable Declarations
    unit lv_medivac1;
    unit lv_medivac2;
    unitgroup lv_cargo1;
    unitgroup lv_cargo2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cargo1 = UnitGroupEmpty();
    lv_cargo2 = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, gv_pLAYER_08_RAYNOREXPANSIONS, PointWithOffset(lp_point, 1.0, 1.0));
    lv_medivac1 = UnitLastCreated();
    UnitSetPropertyFixed(lv_medivac1, c_unitPropEnergyPercent, 100.0);
    AISetUnitScriptControlled(lv_medivac1, true);
    UnitCargoCreate(lv_medivac1, "Marine", 6);
    lv_cargo1 = UnitCargoLastCreatedGroup();
    UnitSetHeight(lv_medivac1, 10.0, 0.0);
    UnitSetHeight(lv_medivac1, 3.25, 4.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, gv_pLAYER_08_RAYNOREXPANSIONS, PointWithOffset(lp_point, -1.0, -1.0));
    lv_medivac2 = UnitLastCreated();
    UnitSetPropertyFixed(lv_medivac2, c_unitPropEnergyPercent, 100.0);
    AISetUnitScriptControlled(lv_medivac2, true);
    UnitCargoCreate(lv_medivac2, "Marine", 6);
    lv_cargo2 = UnitCargoLastCreatedGroup();
    UnitSetHeight(lv_medivac2, 10.0, 0.0);
    UnitSetHeight(lv_medivac2, 3.25, 4.0);
    Wait(4.0, c_timeAI);
    while (((UnitGroupCount(UnitCargoGroup(lv_medivac1), c_unitCountAlive) + UnitGroupCount(UnitCargoGroup(lv_medivac2), c_unitCountAlive)) > 0)) {
        UnitIssueOrder(lv_medivac1, OrderTargetingUnit(AbilityCommand("MedivacTransport", 2), lv_medivac1), c_orderQueueReplace);
        UnitIssueOrder(lv_medivac2, OrderTargetingUnit(AbilityCommand("MedivacTransport", 2), lv_medivac2), c_orderQueueReplace);
        Wait(0.5, c_timeAI);
    }
    AISetUnitScriptControlled(lv_medivac1, false);
    AISetUnitScriptControlled(lv_medivac2, false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(678));
    AIAttackWaveSetGatherPoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(40));
    AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(240), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(606), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(1078), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(612), false);
    AIAttackWaveUseUnit(gv_pLAYER_08_RAYNOREXPANSIONS, lv_medivac1);
    AIAttackWaveUseUnit(gv_pLAYER_08_RAYNOREXPANSIONS, lv_medivac2);
    AIAttackWaveUseGroup(gv_pLAYER_08_RAYNOREXPANSIONS, lv_cargo1);
    AIAttackWaveUseGroup(gv_pLAYER_08_RAYNOREXPANSIONS, lv_cargo2);
    AIAttackWaveSend(gv_pLAYER_08_RAYNOREXPANSIONS, 0, false);
    return true;
}

trigger auto_gf_ThorDropoffWave_Trigger = null;
point auto_gf_ThorDropoffWave_lp_point;

void gf_ThorDropoffWave (point lp_point) {
    auto_gf_ThorDropoffWave_lp_point = lp_point;

    if (auto_gf_ThorDropoffWave_Trigger == null) {
        auto_gf_ThorDropoffWave_Trigger = TriggerCreate("auto_gf_ThorDropoffWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_ThorDropoffWave_Trigger, false, false);
}

bool auto_gf_ThorDropoffWave_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_ThorDropoffWave_lp_point;

    // Variable Declarations
    unit lv_medivac1;
    unit lv_medivac2;
    unitgroup lv_cargo1;
    unitgroup lv_cargo2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cargo1 = UnitGroupEmpty();
    lv_cargo2 = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, gv_pLAYER_08_RAYNOREXPANSIONS, PointWithOffset(lp_point, 1.0, 1.0));
    lv_medivac1 = UnitLastCreated();
    UnitSetPropertyFixed(lv_medivac1, c_unitPropEnergyPercent, 100.0);
    AISetUnitScriptControlled(lv_medivac1, true);
    UnitCargoCreate(lv_medivac1, "Thor", 1);
    lv_cargo1 = UnitCargoLastCreatedGroup();
    UnitSetHeight(lv_medivac1, 10.0, 0.0);
    UnitSetHeight(lv_medivac1, 3.25, 4.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medivac", 0, gv_pLAYER_08_RAYNOREXPANSIONS, PointWithOffset(lp_point, -1.0, -1.0));
    lv_medivac2 = UnitLastCreated();
    UnitSetPropertyFixed(lv_medivac2, c_unitPropEnergyPercent, 100.0);
    AISetUnitScriptControlled(lv_medivac2, true);
    UnitCargoCreate(lv_medivac2, "Thor", 1);
    lv_cargo2 = UnitCargoLastCreatedGroup();
    UnitSetHeight(lv_medivac2, 10.0, 0.0);
    UnitSetHeight(lv_medivac2, 3.25, 4.0);
    Wait(4.0, c_timeAI);
    while (((UnitGroupCount(UnitCargoGroup(lv_medivac1), c_unitCountAlive) + UnitGroupCount(UnitCargoGroup(lv_medivac2), c_unitCountAlive)) > 0)) {
        UnitIssueOrder(lv_medivac1, OrderTargetingUnit(AbilityCommand("MedivacTransport", 2), lv_medivac1), c_orderQueueReplace);
        UnitIssueOrder(lv_medivac2, OrderTargetingUnit(AbilityCommand("MedivacTransport", 2), lv_medivac2), c_orderQueueReplace);
        Wait(0.5, c_timeAI);
    }
    UnitIssueOrder(lv_medivac1, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(lv_medivac1), -10.0, -10.0)), c_orderQueueReplace);
    UnitSetHeight(lv_medivac1, 10.0, 4.0);
    UnitIssueOrder(lv_medivac2, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(lv_medivac2), -10.0, -10.0)), c_orderQueueReplace);
    UnitSetHeight(lv_medivac2, 10.0, 4.0);
    AIAttackWaveSetTargetPoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(678));
    AIAttackWaveSetGatherPoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(39));
    AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(612), false);
    AIAttackWaveUseGroup(gv_pLAYER_08_RAYNOREXPANSIONS, lv_cargo1);
    AIAttackWaveUseGroup(gv_pLAYER_08_RAYNOREXPANSIONS, lv_cargo2);
    AIAttackWaveSend(gv_pLAYER_08_RAYNOREXPANSIONS, 0, false);
    Wait(4.0, c_timeAI);
    UnitRemove(lv_medivac1);
    UnitRemove(lv_medivac2);
    return true;
}

trigger auto_gf_MutaDropoffWave_Trigger = null;
point auto_gf_MutaDropoffWave_lp_point;

void gf_MutaDropoffWave (point lp_point) {
    auto_gf_MutaDropoffWave_lp_point = lp_point;

    if (auto_gf_MutaDropoffWave_Trigger == null) {
        auto_gf_MutaDropoffWave_Trigger = TriggerCreate("auto_gf_MutaDropoffWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_MutaDropoffWave_Trigger, false, false);
}

bool auto_gf_MutaDropoffWave_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_MutaDropoffWave_lp_point;

    // Variable Declarations
    unitgroup lv_mutaGroup1;
    unitgroup lv_mutaGroup2;
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;

    // Automatic Variable Declarations
    unitgroup autoF2BA45A4_g;
    int autoF2BA45A4_u;
    unit autoF2BA45A4_var;
    unitgroup auto642B0A54_g;
    int auto642B0A54_u;
    unit auto642B0A54_var;

    // Variable Initialization
    lv_mutaGroup1 = UnitGroupEmpty();
    lv_mutaGroup2 = UnitGroupEmpty();
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "MutaliskBroodlord", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointWithOffset(lp_point, -1.0, 1.0));
    lv_mutaGroup1 = UnitLastCreatedGroup();
    AISetGroupScriptControlled(lv_mutaGroup1, true);
    autoF2BA45A4_g = lv_mutaGroup1;
    autoF2BA45A4_u = UnitGroupCount(autoF2BA45A4_g, c_unitCountAll);
    for (;; autoF2BA45A4_u -= 1) {
        autoF2BA45A4_var = UnitGroupUnitFromEnd(autoF2BA45A4_g, autoF2BA45A4_u);
        if (autoF2BA45A4_var == null) { break; }
        UnitSetHeight(autoF2BA45A4_var, 10.0, 0.0);
        UnitSetHeight(autoF2BA45A4_var, 3.25, 4.0);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "MutaliskBroodlord", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointWithOffset(lp_point, 1.0, -1.0));
    lv_mutaGroup2 = UnitLastCreatedGroup();
    AISetGroupScriptControlled(lv_mutaGroup2, true);
    auto642B0A54_g = lv_mutaGroup2;
    auto642B0A54_u = UnitGroupCount(auto642B0A54_g, c_unitCountAll);
    for (;; auto642B0A54_u -= 1) {
        auto642B0A54_var = UnitGroupUnitFromEnd(auto642B0A54_g, auto642B0A54_u);
        if (auto642B0A54_var == null) { break; }
        UnitSetHeight(auto642B0A54_var, 10.0, 0.0);
        UnitSetHeight(auto642B0A54_var, 3.25, 4.0);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "HotSRaptor", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, lp_point);
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, lp_point, lv_dropPodUnits01, false, gv_pLAYER_09_KERRIGANEXPANSIONS);
    Wait(4.0, c_timeAI);
    AISetGroupScriptControlled(lv_mutaGroup1, false);
    AISetGroupScriptControlled(lv_mutaGroup2, false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(678));
    AIAttackWaveSetGatherPoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(41));
    AIAttackWaveAddWaypoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(605), false);
    AIAttackWaveUseGroup(gv_pLAYER_09_KERRIGANEXPANSIONS, lv_mutaGroup1);
    AIAttackWaveUseGroup(gv_pLAYER_09_KERRIGANEXPANSIONS, lv_mutaGroup2);
    AIAttackWaveUseGroup(gv_pLAYER_09_KERRIGANEXPANSIONS, lv_dropPodUnits01);
    AIAttackWaveSend(gv_pLAYER_09_KERRIGANEXPANSIONS, 0, false);
    return true;
}

trigger auto_gf_UltraDropoffWave_Trigger = null;
point auto_gf_UltraDropoffWave_lp_point;

void gf_UltraDropoffWave (point lp_point) {
    auto_gf_UltraDropoffWave_lp_point = lp_point;

    if (auto_gf_UltraDropoffWave_Trigger == null) {
        auto_gf_UltraDropoffWave_Trigger = TriggerCreate("auto_gf_UltraDropoffWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_UltraDropoffWave_Trigger, false, false);
}

bool auto_gf_UltraDropoffWave_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_UltraDropoffWave_lp_point;

    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "HotSRaptor", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointWithOffset(lp_point, -1.0, 1.0));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSNoxious", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointWithOffset(lp_point, -1.0, 1.0));
    UnitGroupAdd(lv_dropPodUnits01, UnitLastCreated());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointWithOffset(lp_point, -1.0, 1.0), lv_dropPodUnits01, false, gv_pLAYER_09_KERRIGANEXPANSIONS);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "HotSRaptor", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointWithOffset(lp_point, 1.0, -1.0));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSNoxious", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointWithOffset(lp_point, 1.0, -1.0));
    UnitGroupAdd(lv_dropPodUnits02, UnitLastCreated());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointWithOffset(lp_point, 1.0, -1.0), lv_dropPodUnits02, false, gv_pLAYER_09_KERRIGANEXPANSIONS);
    Wait(4.0, c_timeAI);
    AIAttackWaveSetTargetPoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(678));
    AIAttackWaveSetGatherPoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(42));
    AIAttackWaveAddWaypoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(605), false);
    AIAttackWaveUseGroup(gv_pLAYER_09_KERRIGANEXPANSIONS, lv_dropPodUnits01);
    AIAttackWaveUseGroup(gv_pLAYER_09_KERRIGANEXPANSIONS, lv_dropPodUnits02);
    AIAttackWaveSend(gv_pLAYER_09_KERRIGANEXPANSIONS, 0, false);
    return true;
}

unitgroup gf_EnemiesWithinStukovRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

unitgroup gf_EnemiesWithinKerriganRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

void gf_SpawnFirstVoidThrasherAttackAI (int lp_targetPlayer, point lp_spawnPoint) {
    // Variable Declarations
    int lv_attackPathWaypointIndex;
    int lv_attackPathWaypointIndexMax;
    string lv_attackPathWaypointString;
    point lv_attackPathWaypoint;
    region lv_attackPathLeashRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackPathWaypointIndex = 1;
    lv_attackPathWaypointString = "";

    // Implementation
    if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
        return ;
    }

    gv_voidThrasherAttackCount += 1;
    UnitCreate(1, "VoidThrasherWalker", c_unitCreateIgnorePlacement, gv_pLAYER_04_NARUD, lp_spawnPoint, 270.0);
    gv_voidThrasher = UnitLastCreated();
    libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/B158ACD8"), null);
    TriggerEnable(gt_VoidThrasherAbilitySpawnUnits, true);
    TriggerEnable(gt_MakeVoidThrasherSpawnsAttack, true);
    if ((lp_targetPlayer == gv_pLAYER_03_KERRIGAN)) {
        gv_voidThrasherAttackCountvsKerrigan += 1;
        lv_attackPathLeashRegion = RegionFromId(12);
        lv_attackPathWaypointString = "Narud_vsKerrigan_";
        lv_attackPathWaypointIndexMax = 13;
    }
    else {
        gv_voidThrasherAttackCountvsRaynor += 1;
        lv_attackPathLeashRegion = RegionFromId(13);
        lv_attackPathWaypointString = "Narud_vsRaynor_";
        lv_attackPathWaypointIndexMax = 15;
    }
    gv_voidThrasherAttackTarget = lp_targetPlayer;
    lv_attackPathWaypointIndex = 1;
    lv_attackPathWaypoint = PointFromName((lv_attackPathWaypointString + "0" + IntToString(lv_attackPathWaypointIndex)));
    gv_voidThrasherAttackActive = true;
    TriggerEnable(gt_VoidThrasherDies, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_voidThrasher), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_voidThrasher);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/87DA23FD"));
    libHots_gf_StorePingForUnit(gv_voidThrasher, 1, PingLastCreated());
    TriggerEnable(gt_VoidThrasherAttackAtBaseTransmissionQ, true);
    while ((libVCMI_gf_GameIsOver() == false) && (gv_voidThrasherAttackActive == true) && (UnitIsAlive(gv_voidThrasher) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(gv_voidThrasher), lv_attackPathWaypoint) <= 6.0) && (lv_attackPathWaypointIndex < lv_attackPathWaypointIndexMax)) {
            lv_attackPathWaypointIndex += 1;
        }

        if ((lv_attackPathWaypointIndex >= 10)) {
            lv_attackPathWaypoint = PointFromName((lv_attackPathWaypointString + IntToString(lv_attackPathWaypointIndex)));
        }
        else {
            lv_attackPathWaypoint = PointFromName((lv_attackPathWaypointString + "0" + IntToString(lv_attackPathWaypointIndex)));
        }
        if ((libNtve_gf_UnitInRegion(gv_narud, lv_attackPathLeashRegion) == true)) {
            if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(gv_voidThrasher), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_voidThrasher), 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnMode") == false) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnModeEnd") == false)) {
                gf_ThrasherAttackEnemies(gv_voidThrasher, libLotv_gf_DifficultyValueInt2(1, 1, 3, 3));
                Wait(6.0, c_timeGame);
            }
            else {
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(gv_voidThrasher), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_voidThrasher), 12.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnMode") == false) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnModeEnd") == false)) {
                    UnitIssueOrder(gv_voidThrasher, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(gv_voidThrasher), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_voidThrasher), 15.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_voidThrasher))), c_orderQueueReplace);
                    Wait(4.0, c_timeGame);
                }
                else {
                    UnitIssueOrder(gv_voidThrasher, OrderTargetingPoint(AbilityCommand("move", 0), lv_attackPathWaypoint), c_orderQueueReplace);
                }
            }
        }
        else {
            UnitIssueOrder(gv_voidThrasher, OrderTargetingPoint(AbilityCommand("move", 0), lv_attackPathWaypoint), c_orderQueueReplace);
        }
        Wait(0.5, c_timeAI);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(gv_voidThrasher, 1));
    TriggerExecute(gt_VoidThrasherAttackStoppedTransmissionQ, true, false);
    TriggerEnable(gt_VoidThrasherAbilitySpawnUnits, false);
    TriggerEnable(gt_MakeVoidThrasherSpawnsAttack, false);
}

void gf_SpawnVoidThrasherAttackAI (int lp_targetPlayer) {
    // Variable Declarations
    int lv_attackPathWaypointIndex;
    int lv_attackPathWaypointIndexMax;
    string lv_attackPathWaypointString;
    point lv_attackPathWaypoint;
    region lv_attackPathLeashRegion;

    // Automatic Variable Declarations
    int autoCD78DB99_n;
    int autoCD78DB99_i;

    // Variable Initialization
    lv_attackPathWaypointIndex = 1;
    lv_attackPathWaypointString = "";

    // Implementation
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(1.0, c_timeAI);
    }
    if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
        return ;
    }

    gv_voidThrasherAttackCount += 1;
    gv_voidThrasher = null;
    UnitIssueOrder(gv_narud, OrderTargetingPoint(AbilityCommand("NarudEpilogueSpawnShadeofNarud", 0), PointWithOffset(UnitGetPosition(gv_narud), 0.0, -6.0)), c_orderQueueReplace);
    autoCD78DB99_n = (10 * 16);
    for (autoCD78DB99_i = 1; autoCD78DB99_i <= autoCD78DB99_n; autoCD78DB99_i += 1) {
        if ((UnitGroupCount(UnitGroup("VoidThrasherWalker", gv_pLAYER_04_NARUD, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            gv_voidThrasher = UnitGroupUnit(UnitGroup("VoidThrasherWalker", gv_pLAYER_04_NARUD, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
            libVCMI_gf_SetUnitInfoTextCampaign(gv_voidThrasher, null, StringExternal("Param/Value/9785E823"), null);
            break;
        }
        else {
            Wait(0.0625, c_timeAI);
        }
    }
    if ((gv_voidThrasher == null)) {
        UnitCreate(1, "VoidThrasherWalker", c_unitCreateIgnorePlacement, gv_pLAYER_04_NARUD, PointFromId(678), 270.0);
        gv_voidThrasher = UnitLastCreated();
        libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/E75A77DF"), null);
    }

    TriggerEnable(gt_VoidThrasherAbilitySpawnUnits, true);
    TriggerEnable(gt_MakeVoidThrasherSpawnsAttack, true);
    if ((lp_targetPlayer == gv_pLAYER_03_KERRIGAN)) {
        gv_voidThrasherAttackCountvsKerrigan += 1;
        lv_attackPathLeashRegion = RegionFromId(12);
        lv_attackPathWaypointString = "Narud_vsKerrigan_";
        lv_attackPathWaypointIndexMax = 13;
    }
    else {
        gv_voidThrasherAttackCountvsRaynor += 1;
        lv_attackPathLeashRegion = RegionFromId(13);
        lv_attackPathWaypointString = "Narud_vsRaynor_";
        lv_attackPathWaypointIndexMax = 15;
    }
    gv_voidThrasherAttackTarget = lp_targetPlayer;
    lv_attackPathWaypoint = PointFromName((lv_attackPathWaypointString + "0" + IntToString(lv_attackPathWaypointIndex)));
    gv_voidThrasherAttackActive = true;
    TriggerEnable(gt_VoidThrasherDies, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_voidThrasher), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_voidThrasher);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6EA02256"));
    libHots_gf_StorePingForUnit(gv_voidThrasher, 1, PingLastCreated());
    TriggerExecute(gt_VoidThrasherAttackSentTransmissionQ, true, false);
    TriggerEnable(gt_VoidThrasherAttackAtFrontLineTransmissionQ, true);
    TriggerEnable(gt_VoidThrasherAttackAtBaseTransmissionQ, true);
    while ((libVCMI_gf_GameIsOver() == false) && (gv_voidThrasherAttackActive == true) && (UnitIsAlive(gv_voidThrasher) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(gv_voidThrasher), lv_attackPathWaypoint) <= 6.0) && (lv_attackPathWaypointIndex < lv_attackPathWaypointIndexMax)) {
            lv_attackPathWaypointIndex += 1;
        }

        if ((lv_attackPathWaypointIndex >= 10)) {
            lv_attackPathWaypoint = PointFromName((lv_attackPathWaypointString + IntToString(lv_attackPathWaypointIndex)));
        }
        else {
            lv_attackPathWaypoint = PointFromName((lv_attackPathWaypointString + "0" + IntToString(lv_attackPathWaypointIndex)));
        }
        if ((libNtve_gf_UnitInRegion(gv_narud, lv_attackPathLeashRegion) == true)) {
            if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(gv_voidThrasher), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_voidThrasher), 10.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnMode") == false) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnModeEnd") == false)) {
                gf_ThrasherAttackEnemies(gv_voidThrasher, libLotv_gf_DifficultyValueInt2(1, 1, 3, 3));
                Wait(6.0, c_timeGame);
            }
            else {
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(gv_voidThrasher), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_voidThrasher), 12.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnMode") == false) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnModeEnd") == false)) {
                    UnitIssueOrder(gv_voidThrasher, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(gv_voidThrasher), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_voidThrasher), 15.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_voidThrasher))), c_orderQueueReplace);
                    Wait(4.0, c_timeGame);
                }
                else {
                    UnitIssueOrder(gv_voidThrasher, OrderTargetingPoint(AbilityCommand("move", 0), lv_attackPathWaypoint), c_orderQueueReplace);
                }
            }
        }
        else {
            UnitIssueOrder(gv_voidThrasher, OrderTargetingPoint(AbilityCommand("move", 0), lv_attackPathWaypoint), c_orderQueueReplace);
        }
        Wait(0.5, c_timeAI);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(gv_voidThrasher, 1));
    TriggerExecute(gt_VoidThrasherAttackStoppedTransmissionQ, true, false);
    TriggerEnable(gt_VoidThrasherAbilitySpawnUnits, false);
    TriggerEnable(gt_MakeVoidThrasherSpawnsAttack, false);
}

void gf_ThrasherAttackEnemies (unit lp_thrasherUnit, int lp_count) {
    // Variable Declarations
    unitgroup lv_enemyGroup;
    unit lv_targetUnit;
    point lv_primaryTarget;
    point lv_extraTarget;

    // Automatic Variable Declarations
    unitgroup auto73174916_g;
    int auto73174916_u;
    unit auto73174916_var;
    unitgroup auto38A14E5F_g;
    int auto38A14E5F_u;
    unit auto38A14E5F_var;
    unitgroup auto5E25C111_g;
    int auto5E25C111_u;
    unit auto5E25C111_var;
    unitgroup auto13A23C3F_g;
    int auto13A23C3F_u;
    unit auto13A23C3F_var;
    unitgroup auto3B7F22DD_g;
    int auto3B7F22DD_u;
    unit auto3B7F22DD_var;
    unitgroup auto532D8282_g;
    int auto532D8282_u;
    unit auto532D8282_var;
    int auto64E064AC_n;
    int auto64E064AC_i;
    unitgroup autoF0847759_g;
    int autoF0847759_u;
    unit autoF0847759_var;
    unitgroup autoCB5B92E2_g;
    int autoCB5B92E2_u;
    unit autoCB5B92E2_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    if (((UnitIsAlive(lp_thrasherUnit) == false) || (libVCMI_gf_GameIsOver() == true))) {
        return ;
    }

    lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_thrasherUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_thrasherUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0)) {
        return ;
    }

    lv_targetUnit = UnitGroupRandomUnit(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGroupCenterOfGroup(lv_enemyGroup), 4.0), 0), c_unitCountAlive);
    if ((lv_targetUnit == null)) {
        lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(lp_thrasherUnit), UnitGetPosition(lv_targetUnit)) < 5.0)) {
        lv_primaryTarget = PointWithOffsetPolar(UnitGetPosition(lp_thrasherUnit), 5.0, AngleBetweenPoints(UnitGetPosition(lp_thrasherUnit), UnitGetPosition(lv_targetUnit)));
        auto73174916_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
        auto73174916_u = UnitGroupCount(auto73174916_g, c_unitCountAll);
        for (;; auto73174916_u -= 1) {
            auto73174916_var = UnitGroupUnitFromEnd(auto73174916_g, auto73174916_u);
            if (auto73174916_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto73174916_var);
        }
    }
    else {
        lv_primaryTarget = UnitGetPosition(lv_targetUnit);
    }
    UnitIssueOrder(lp_thrasherUnit, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoE", 0), lv_primaryTarget), c_orderQueueReplace);
    auto38A14E5F_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_primaryTarget, 3.0), 0);
    auto38A14E5F_u = UnitGroupCount(auto38A14E5F_g, c_unitCountAll);
    for (;; auto38A14E5F_u -= 1) {
        auto38A14E5F_var = UnitGroupUnitFromEnd(auto38A14E5F_g, auto38A14E5F_u);
        if (auto38A14E5F_var == null) { break; }
        UnitGroupRemove(lv_enemyGroup, auto38A14E5F_var);
    }
    Wait(0.0625, c_timeAI);
    if ((lp_count >= 2) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0) && (UnitIsAlive(lp_thrasherUnit) == true)) {
        lv_targetUnit = UnitGroupRandomUnit(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lp_thrasherUnit), 7.0, (AngleBetweenPoints(UnitGetPosition(lp_thrasherUnit), lv_primaryTarget) + 60.0)), 8.0), 0), c_unitCountAlive);
        if ((lv_targetUnit == null)) {
            lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lp_thrasherUnit), UnitGetPosition(lv_targetUnit)) < 5.0)) {
            lv_extraTarget = PointWithOffsetPolar(UnitGetPosition(lp_thrasherUnit), 5.0, AngleBetweenPoints(UnitGetPosition(lp_thrasherUnit), UnitGetPosition(lv_targetUnit)));
            auto5E25C111_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
            auto5E25C111_u = UnitGroupCount(auto5E25C111_g, c_unitCountAll);
            for (;; auto5E25C111_u -= 1) {
                auto5E25C111_var = UnitGroupUnitFromEnd(auto5E25C111_g, auto5E25C111_u);
                if (auto5E25C111_var == null) { break; }
                UnitGroupRemove(lv_enemyGroup, auto5E25C111_var);
            }
        }
        else {
            lv_extraTarget = UnitGetPosition(lv_targetUnit);
        }
        UnitIssueOrder(lp_thrasherUnit, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoEExtra", 0), lv_extraTarget), c_orderQueueAddToFront);
        auto13A23C3F_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_extraTarget, 3.0), 0);
        auto13A23C3F_u = UnitGroupCount(auto13A23C3F_g, c_unitCountAll);
        for (;; auto13A23C3F_u -= 1) {
            auto13A23C3F_var = UnitGroupUnitFromEnd(auto13A23C3F_g, auto13A23C3F_u);
            if (auto13A23C3F_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto13A23C3F_var);
        }
    }

    Wait(0.0625, c_timeAI);
    if ((lp_count >= 3) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0) && (UnitIsAlive(lp_thrasherUnit) == true)) {
        lv_targetUnit = UnitGroupRandomUnit(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lp_thrasherUnit), 7.0, (AngleBetweenPoints(UnitGetPosition(lp_thrasherUnit), lv_primaryTarget) - 60.0)), 8.0), 0), c_unitCountAlive);
        if ((lv_targetUnit == null)) {
            lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lp_thrasherUnit), UnitGetPosition(lv_targetUnit)) < 5.0)) {
            lv_extraTarget = PointWithOffsetPolar(UnitGetPosition(lp_thrasherUnit), 5.0, AngleBetweenPoints(UnitGetPosition(lp_thrasherUnit), UnitGetPosition(lv_targetUnit)));
            auto3B7F22DD_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
            auto3B7F22DD_u = UnitGroupCount(auto3B7F22DD_g, c_unitCountAll);
            for (;; auto3B7F22DD_u -= 1) {
                auto3B7F22DD_var = UnitGroupUnitFromEnd(auto3B7F22DD_g, auto3B7F22DD_u);
                if (auto3B7F22DD_var == null) { break; }
                UnitGroupRemove(lv_enemyGroup, auto3B7F22DD_var);
            }
        }
        else {
            lv_extraTarget = UnitGetPosition(lv_targetUnit);
        }
        UnitIssueOrder(lp_thrasherUnit, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoEExtra", 0), lv_extraTarget), c_orderQueueAddToFront);
        auto532D8282_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_extraTarget, 3.0), 0);
        auto532D8282_u = UnitGroupCount(auto532D8282_g, c_unitCountAll);
        for (;; auto532D8282_u -= 1) {
            auto532D8282_var = UnitGroupUnitFromEnd(auto532D8282_g, auto532D8282_u);
            if (auto532D8282_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto532D8282_var);
        }
    }

    auto64E064AC_n = (lp_count - 3);
    for (auto64E064AC_i = 1; auto64E064AC_i <= auto64E064AC_n; auto64E064AC_i += 1) {
        Wait(0.0625, c_timeAI);
        if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0) || (UnitIsAlive(lp_thrasherUnit) == false))) {
            return ;
        }

        lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
        if ((DistanceBetweenPoints(UnitGetPosition(lp_thrasherUnit), UnitGetPosition(lv_targetUnit)) < 5.0)) {
            lv_extraTarget = PointWithOffsetPolar(UnitGetPosition(lp_thrasherUnit), 5.0, AngleBetweenPoints(UnitGetPosition(lp_thrasherUnit), UnitGetPosition(lv_targetUnit)));
            autoF0847759_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
            autoF0847759_u = UnitGroupCount(autoF0847759_g, c_unitCountAll);
            for (;; autoF0847759_u -= 1) {
                autoF0847759_var = UnitGroupUnitFromEnd(autoF0847759_g, autoF0847759_u);
                if (autoF0847759_var == null) { break; }
                UnitGroupRemove(lv_enemyGroup, autoF0847759_var);
            }
        }
        else {
            lv_extraTarget = UnitGetPosition(lv_targetUnit);
        }
        UnitIssueOrder(lp_thrasherUnit, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoEExtra", 0), lv_extraTarget), c_orderQueueAddToFront);
        autoCB5B92E2_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_extraTarget, 3.0), 0);
        autoCB5B92E2_u = UnitGroupCount(autoCB5B92E2_g, c_unitCountAll);
        for (;; autoCB5B92E2_u -= 1) {
            autoCB5B92E2_var = UnitGroupUnitFromEnd(autoCB5B92E2_g, autoCB5B92E2_u);
            if (autoCB5B92E2_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, autoCB5B92E2_var);
        }
    }
}

void gf_VoidThrasherSpawnUnits (string lp_unitType, int lp_count) {
    // Variable Declarations
    unitgroup lv_attackGroup;
    point lv_attackGatherPoint;
    abilcmd lv_abilityCommand;

    // Automatic Variable Declarations
    string auto3F773885_val;
    int auto1E734494_n;
    int auto1E734494_i;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Implementation
    auto3F773885_val = lp_unitType;
    if (auto3F773885_val == "Zergling") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 5);
    }
    else if (auto3F773885_val == "Zealot") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 0);
    }
    else if (auto3F773885_val == "Marine") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 9);
    }
    else if (auto3F773885_val == "Hydralisk") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 6);
    }
    else if (auto3F773885_val == "Stalker") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 1);
    }
    else if (auto3F773885_val == "Ghost") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 10);
    }
    else if (auto3F773885_val == "Mutalisk") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 7);
    }
    else if (auto3F773885_val == "Immortal") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 3);
    }
    else if (auto3F773885_val == "SiegeTank") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 11);
    }
    else if (auto3F773885_val == "Ultralisk") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 8);
    }
    else if (auto3F773885_val == "Carrier") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 4);
    }
    else if (auto3F773885_val == "Banshee") {
        lv_abilityCommand = AbilityCommand("NarudEpilogueTrain", 12);
    }
    else {
    }
    if ((lv_abilityCommand != null)) {
        auto1E734494_n = lp_count;
        for (auto1E734494_i = 1; auto1E734494_i <= auto1E734494_n; auto1E734494_i += 1) {
            if ((UnitIsAlive(gv_voidThrasher) == true) && (UnitGroupCount(gv_voidThrasherSummonedUnits, c_unitCountAlive) < gv_voidThrasherSummonedUnitCap)) {
                lv_attackGatherPoint = UnitGetPosition(gv_voidThrasher);
                UnitIssueOrder(gv_voidThrasher, Order(lv_abilityCommand), c_orderQueueReplace);
                Wait(0.25, c_timeAI);
            }

        }
    }

}

void gf_TurnVoidThrasherSpawnModeOnOff (int lp_toggleOnOff) {
    // Automatic Variable Declarations
    int autoA9D69185_val;

    // Implementation
    autoA9D69185_val = lp_toggleOnOff;
    if (autoA9D69185_val == ge_PRESETToggleOnOff_Off) {
        while ((UnitIsAlive(gv_voidThrasher) == true) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnMode") == true)) {
            UnitIssueOrder(gv_voidThrasher, Order(AbilityCommand("NarudEpilogueSpawnMode", 1)), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
        }
    }
    else if (autoA9D69185_val == ge_PRESETToggleOnOff_On) {
        if ((UnitIsAlive(gv_voidThrasher) == true)) {
            UnitIssueOrder(gv_voidThrasher, OrderTargetingPoint(AbilityCommand("Rally", 0), PointWithOffsetPolar(UnitGetPosition(gv_voidThrasher), 6.0, UnitGetFacing(gv_voidThrasher))), c_orderQueueReplace);
            Wait(0.5, c_timeAI);
        }

        while ((UnitIsAlive(gv_voidThrasher) == true) && (UnitHasBehavior2(gv_voidThrasher, "NarudEpilogueSpawnMode") == false)) {
            UnitIssueOrder(gv_voidThrasher, Order(AbilityCommand("NarudEpilogueSpawnMode", 0)), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
        }
        Wait(1.5, c_timeAI);
    }
    else {
    }
}

void gf_NarudRiftSpawnUnitType (string lp_unitType, int lp_count, unit lp_voidRift) {
    // Variable Declarations
    unitgroup lv_attackGroup;
    point lv_attackGatherPoint;

    // Automatic Variable Declarations
    int autoE629AB0C_n;
    int autoE629AB0C_i;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Implementation
    autoE629AB0C_n = lp_count;
    for (autoE629AB0C_i = 1; autoE629AB0C_i <= autoE629AB0C_n; autoE629AB0C_i += 1) {
        if ((UnitIsAlive(lp_voidRift) == true) && (UnitGroupCount(gv_narudRiftSpawnGroup, c_unitCountAlive) < gv_narudRiftSpawnCap)) {
            lv_attackGatherPoint = UnitGetPosition(lp_voidRift);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, gv_pLAYER_04_NARUD, lv_attackGatherPoint);
            UnitGroupAdd(lv_attackGroup, UnitLastCreated());
            UnitGroupAdd(gv_narudRiftSpawnGroup, UnitLastCreated());
            Wait(1.0, c_timeAI);
        }

    }
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) > 0)) {
        lv_attackGatherPoint = UnitGroupCenterOfGroup(lv_attackGroup);
        AIAttackWaveSetGatherPoint(gv_pLAYER_04_NARUD, lv_attackGatherPoint);
        if ((RegionContainsPoint(RegionFromId(13), lv_attackGatherPoint) == true)) {
            AIAttackWaveSetTargetPoint(gv_pLAYER_04_NARUD, PointFromId(444));
        }
        else if (true) {
            AIAttackWaveSetTargetPoint(gv_pLAYER_04_NARUD, PointFromId(445));
        }
        AIAttackWaveUseGroup(gv_pLAYER_04_NARUD, lv_attackGroup);
        AIAttackWaveSend(gv_pLAYER_04_NARUD, 0, true);
    }

}

void gf_NarudRiftSetUpNewUnit (unit lp_voidRiftUnit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto97E858E3_ae;
    const int auto97E858E3_ai = 1;

    // Variable Initialization

    // Implementation
    auto97E858E3_ae = gv_narudRiftsMax;
    lv_i = 1;
    for ( ; ( (auto97E858E3_ai >= 0 && lv_i <= auto97E858E3_ae) || (auto97E858E3_ai < 0 && lv_i >= auto97E858E3_ae) ) ; lv_i += auto97E858E3_ai ) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_voidRiftUnit), gv_narudBaseRifts[lv_i].lv_point) <= 3.0)) {
            UnitRemove(gv_narudBaseRifts[lv_i].lv_unit);
            gv_narudBaseRifts[lv_i].lv_unit = lp_voidRiftUnit;
            UnitSetOwner(lp_voidRiftUnit, gv_pLAYER_05_VOIDFORCES, true);
            break;
        }

    }
}

trigger auto_gf_VoidRiftSpawnsInNarudBase_Trigger = null;
unit auto_gf_VoidRiftSpawnsInNarudBase_lp_voidRift;

void gf_VoidRiftSpawnsInNarudBase (unit lp_voidRift) {
    auto_gf_VoidRiftSpawnsInNarudBase_lp_voidRift = lp_voidRift;

    if (auto_gf_VoidRiftSpawnsInNarudBase_Trigger == null) {
        auto_gf_VoidRiftSpawnsInNarudBase_Trigger = TriggerCreate("auto_gf_VoidRiftSpawnsInNarudBase_TriggerFunc");
    }

    TriggerExecute(auto_gf_VoidRiftSpawnsInNarudBase_Trigger, false, false);
}

bool auto_gf_VoidRiftSpawnsInNarudBase_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidRift = auto_gf_VoidRiftSpawnsInNarudBase_lp_voidRift;

    // Automatic Variable Declarations
    // Implementation
    while ((UnitIsAlive(lp_voidRift) == true)) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_NARUD, c_unitAllianceEnemy, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            libNtve_gf_SendActorMessageToUnit(lp_voidRift, "Signal TrainOn");
            Wait(2.0, c_timeAI);
            gf_NarudRiftSpawnUnitType("Zergling", 2, lp_voidRift);
            gf_NarudRiftSpawnUnitType("Marine", 2, lp_voidRift);
            gf_NarudRiftSpawnUnitType("Stalker", 1, lp_voidRift);
            libNtve_gf_SendActorMessageToUnit(lp_voidRift, "Signal TrainOff");
            Wait(libLotv_gf_DifficultyValueFixed2(35.0, 35.0, 28.0, 21.0), c_timeAI);
        }

        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_NARUD, c_unitAllianceEnemy, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            libNtve_gf_SendActorMessageToUnit(lp_voidRift, "Signal TrainOn");
            Wait(2.0, c_timeAI);
            gf_NarudRiftSpawnUnitType("Zergling", 4, lp_voidRift);
            gf_NarudRiftSpawnUnitType("Ghost", 1, lp_voidRift);
            gf_NarudRiftSpawnUnitType("Immortal", 1, lp_voidRift);
            libNtve_gf_SendActorMessageToUnit(lp_voidRift, "Signal TrainOff");
            Wait(libLotv_gf_DifficultyValueFixed2(35.0, 35.0, 28.0, 21.0), c_timeAI);
        }

        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_NARUD, c_unitAllianceEnemy, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            libNtve_gf_SendActorMessageToUnit(lp_voidRift, "Signal TrainOn");
            Wait(2.0, c_timeAI);
            gf_NarudRiftSpawnUnitType("Hydralisk", 2, lp_voidRift);
            gf_NarudRiftSpawnUnitType("Banshee", 1, lp_voidRift);
            gf_NarudRiftSpawnUnitType("Zealot", 2, lp_voidRift);
            libNtve_gf_SendActorMessageToUnit(lp_voidRift, "Signal TrainOff");
            Wait(libLotv_gf_DifficultyValueFixed2(35.0, 35.0, 28.0, 21.0), c_timeAI);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

void gf_AchievementFinishinlessthan28minutes () {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 1681.0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_05_VOIDFORCES, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_06_VOIDFORCES, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_07_VOIDFORCES, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_SC2Epilogue01", gv_pLAYER_01_USER);
        TriggerDebugOutput(1, StringExternal("Param/Value/47C56BDA"), false);
    }

}

void gf_IntroUnloadUnitFromWarpPrism (string lp_unitType, point lp_spawnPoint, point lp_targetPoint) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_unitType, 0, gv_pLAYER_01_USER, lp_spawnPoint, 45.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_cinematicProtossArmy, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("SC2Epilogue01");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameStage1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libVoiC_gf_EnableDisableSpearofAdunChosenAbilities(false);
    libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier1Power1");
    libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier2Power3");
    libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier3Power3");
    libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier4Power2");
    libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier5Power3");
    libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier6Power2");
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "SOASuperShield", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "SOASuperShield", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_08_RAYNOREXPANSIONS, "SOASuperShield", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_09_KERRIGANEXPANSIONS, "SOASuperShield", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZealotPurifier", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "StalkerShakuras", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "SentryTalDarim", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "HighTemplarAiur", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "DarkTemplarShakuras", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "ImmortalShakuras", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "ColossusPurifier", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "PhoenixAiur", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "VoidRayTaldarim", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "CarrierAiur", gv_pLAYER_01_USER);
    TriggerExecute(gt_Init01aRaynorTechnology, true, false);
    TriggerExecute(gt_Init01bKerriganTechnology, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01a Raynor Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01aRaynorTechnology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "CombatShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "Stimpack", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "PunisherGrenades", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "StabilizerMedPacks", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "ClusterBomb", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "PermanentCloakSpectre", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "UltrasonicPulse", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "SiegeTankShapedBlast", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "AresClassWeaponsSystem", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "NanoConstructor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TwinLinkedFlameThrowers", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TransformationServos", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "MechanicalRebirth", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "HALORockets", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "ClusterWarheads", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "BansheeCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "AdvancedHealingAI", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "YamatoCannon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "BattlecruiserEnableSpecializations", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "NeosteelFrame", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "ShrikeTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TechReactor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "AutoHarvester", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "SupplyDepotDrop", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "RegenerativeBioSteel", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "CombatShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "Stimpack", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "PunisherGrenades", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "StabilizerMedPacks", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "ClusterBomb", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "PermanentCloakSpectre", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "UltrasonicPulse", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "SiegeTankShapedBlast", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "AresClassWeaponsSystem", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "NanoConstructor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "TwinLinkedFlameThrowers", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "TransformationServos", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "MechanicalRebirth", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "HALORockets", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "ClusterWarheads", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "BansheeCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "AdvancedHealingAI", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "YamatoCannon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "BattlecruiserEnableSpecializations", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "NeosteelFrame", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "ShrikeTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "FireSuppressionSystems", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "TechReactor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "AutoHarvester", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "SupplyDepotDrop", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_RAYNOREXPANSIONS, "RegenerativeBioSteel", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01aRaynorTechnology_Init () {
    gt_Init01aRaynorTechnology = TriggerCreate("gt_Init01aRaynorTechnology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01b Kerrigan Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01bKerriganTechnology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "Zergling", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "HotSSwarmling", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "Baneling", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "HotSSplitterlingBig", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "Roach", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "RoachCorpser", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "HydraliskLurker", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "Hydralisk", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "SwarmHostMP", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "SwarmHost", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "SwarmHostSplitA", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "Ultralisk", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "HotSTorrasque", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "Mutalisk", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "MutaliskViper", false);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "HotSRaptor", true);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "HotSHunter", true);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "RoachVileBurrowed", true);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "HydraliskImpalerBurrowed", true);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "SwarmHostSplitB", true);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "HotSNoxious", true);
    TechTreeUnitAllow(gv_pLAYER_03_KERRIGAN, "MutaliskBroodlord", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSHaveRaptor", 1);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("LarvaTrainSwarm", 6), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSHunter", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotsCentrifugalHooks", 1);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("MorphZerglingToHunter", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSHaveVile", 1);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("LarvaTrainSwarm", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSImpaler", 1);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("LarvaTrainSwarm", 20), true);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("MorphRoachToImpaler", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("UpgradeToImpalerDen", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("MorphToSwarmHostSplitB", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSBurrowSwarmHost", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSNoxious", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSUltraliskBurrowCharge", 1);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("LarvaTrainSwarm", 17), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSMutaliskBroodlord", 1);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("LarvaTrainSwarm", 23), true);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("UpgradeToGreaterSpireBroodlord", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSCampaignLarvaCountEasy", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5MindBolt", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5CrushingGrip", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5Mend", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5Apocalypse", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5CreepBonuses", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "KerriganPostZerus", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "KerriganPostZerusSounds", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "Epilogue01StukovRegeneration", 1);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "Zergling", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSSwarmling", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "Baneling", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSSplitterlingBig", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "Roach", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "RoachCorpser", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "HydraliskLurker", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "Hydralisk", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "SwarmHostMP", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "SwarmHost", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "SwarmHostSplitA", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "Ultralisk", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSTorrasque", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "Mutalisk", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "MutaliskViper", false);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSRaptor", true);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSHunter", true);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "RoachVileBurrowed", true);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "HydraliskImpalerBurrowed", true);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "SwarmHostSplitB", true);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSNoxious", true);
    TechTreeUnitAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, "MutaliskBroodlord", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSHaveRaptor", 1);
    TechTreeAbilityAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, AbilityCommand("LarvaTrainSwarm", 6), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSHunter", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotsCentrifugalHooks", 1);
    TechTreeAbilityAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, AbilityCommand("MorphZerglingToHunter", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSHaveVile", 1);
    TechTreeAbilityAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, AbilityCommand("LarvaTrainSwarm", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_09_KERRIGANEXPANSIONS, "HotSImpaler", 1);
    TechTreeAbilityAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, AbilityCommand("LarvaTrainSwarm", 20), true);
    TechTreeAbilityAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, AbilityCommand("MorphRoachToImpaler", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_09_KERRIGANEXPANSIONS, AbilityCommand("UpgradeToImpalerDen", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("MorphToSwarmHostSplitB", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSNoxious", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSUltraliskBurrowCharge", 1);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("LarvaTrainSwarm", 17), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSMutaliskBroodlord", 1);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("LarvaTrainSwarm", 23), true);
    TechTreeAbilityAllow(gv_pLAYER_03_KERRIGAN, AbilityCommand("UpgradeToGreaterSpireBroodlord", 0), true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "HotSCampaignLarvaCountEasy", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5MindBolt", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5CrushingGrip", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5Mend", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5Apocalypse", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "K5CreepBonuses", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "KerriganPostZerus", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_KERRIGAN, "KerriganPostZerusSounds", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01bKerriganTechnology_Init () {
    gt_Init01bKerriganTechnology = TriggerCreate("gt_Init01bKerriganTechnology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto112DB440_g;
    int auto112DB440_var;
    playergroup auto057B2D95_g;
    int auto057B2D95_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_RAYNOR, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_KERRIGAN, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_NARUD, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_08_RAYNOREXPANSIONS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_09_KERRIGANEXPANSIONS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RAYNOR, gv_pLAYER_03_KERRIGAN, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RAYNOR, gv_pLAYER_04_NARUD, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RAYNOR, gv_pLAYER_05_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RAYNOR, gv_pLAYER_06_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RAYNOR, gv_pLAYER_07_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RAYNOR, gv_pLAYER_08_RAYNOREXPANSIONS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RAYNOR, gv_pLAYER_09_KERRIGANEXPANSIONS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_03_KERRIGAN, gv_pLAYER_04_NARUD, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_KERRIGAN, gv_pLAYER_05_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_KERRIGAN, gv_pLAYER_06_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_KERRIGAN, gv_pLAYER_07_VOIDFORCES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_KERRIGAN, gv_pLAYER_08_RAYNOREXPANSIONS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_03_KERRIGAN, gv_pLAYER_09_KERRIGANEXPANSIONS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_04_NARUD, gv_pLAYER_05_VOIDFORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_04_NARUD, gv_pLAYER_06_VOIDFORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_04_NARUD, gv_pLAYER_07_VOIDFORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_04_NARUD, gv_pLAYER_08_RAYNOREXPANSIONS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_04_NARUD, gv_pLAYER_09_KERRIGANEXPANSIONS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_05_VOIDFORCES, gv_pLAYER_06_VOIDFORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_05_VOIDFORCES, gv_pLAYER_07_VOIDFORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_05_VOIDFORCES, gv_pLAYER_08_RAYNOREXPANSIONS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_05_VOIDFORCES, gv_pLAYER_09_KERRIGANEXPANSIONS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_06_VOIDFORCES, gv_pLAYER_07_VOIDFORCES, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_06_VOIDFORCES, gv_pLAYER_08_RAYNOREXPANSIONS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_06_VOIDFORCES, gv_pLAYER_09_KERRIGANEXPANSIONS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_07_VOIDFORCES, gv_pLAYER_08_RAYNOREXPANSIONS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_07_VOIDFORCES, gv_pLAYER_09_KERRIGANEXPANSIONS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_08_RAYNOREXPANSIONS, gv_pLAYER_09_KERRIGANEXPANSIONS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerGroupAdd(gv_friendlyPlayerGroup, gv_pLAYER_02_RAYNOR);
    PlayerGroupAdd(gv_friendlyPlayerGroup, gv_pLAYER_03_KERRIGAN);
    PlayerGroupAdd(gv_friendlyPlayerGroup, gv_pLAYER_08_RAYNOREXPANSIONS);
    PlayerGroupAdd(gv_friendlyPlayerGroup, gv_pLAYER_09_KERRIGANEXPANSIONS);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_04_NARUD);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_05_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_06_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_07_VOIDFORCES);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_VOIDFORCES, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_VOIDFORCES, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_07_VOIDFORCES, "HeroicShieldCleanUp", 1);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    auto112DB440_g = gv_friendlyPlayerGroup;
    auto112DB440_var = -1;
    while (true) {
        auto112DB440_var = PlayerGroupNextPlayer(auto112DB440_g, auto112DB440_var);
        if (auto112DB440_var < 0) { break; }
        PlayerSetState(auto112DB440_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(auto112DB440_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(auto112DB440_var, c_playerStateFoodIgnored, true);
    }
    auto057B2D95_g = gv_enemyPlayerGroup;
    auto057B2D95_var = -1;
    while (true) {
        auto057B2D95_var = PlayerGroupNextPlayer(auto057B2D95_g, auto057B2D95_var);
        if (auto057B2D95_var < 0) { break; }
        PlayerSetState(auto057B2D95_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(auto057B2D95_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(auto057B2D95_var, c_playerStateFoodIgnored, true);
        PlayerSetColorIndex(auto057B2D95_var, 1, true);
    }
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Zerg", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Zerg", false);
    PlayerSetColorIndex(gv_pLAYER_08_RAYNOREXPANSIONS, 3, true);
    PlayerSetColorIndex(gv_pLAYER_09_KERRIGANEXPANSIONS, 4, true);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto89190C76_g;
    int auto89190C76_u;
    unit auto89190C76_var;
    unitgroup auto29E295D8_g;
    int auto29E295D8_u;
    unit auto29E295D8_var;
    unitgroup autoE7293F38_g;
    int autoE7293F38_u;
    unit autoE7293F38_var;
    unitgroup auto2A237B60_g;
    int auto2A237B60_u;
    unit auto2A237B60_var;

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_03_KERRIGAN, RegionFromId(35), false);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    auto89190C76_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto89190C76_u = UnitGroupCount(auto89190C76_g, c_unitCountAll);
    for (;; auto89190C76_u -= 1) {
        auto89190C76_var = UnitGroupUnitFromEnd(auto89190C76_g, auto89190C76_u);
        if (auto89190C76_var == null) { break; }
        if ((UnitGetType(auto89190C76_var) != "ShadowCloudEpilogue01") && (UnitGetType(auto89190C76_var) != "ShadowCloudSmallEpilogue01") && (UnitGetType(auto89190C76_var) != "VoidRift") && (UnitGetType(auto89190C76_var) != "VoidCorruption") && (UnitGetType(auto89190C76_var) != "NarudEpilogue")) {
            UnitBehaviorAdd(auto89190C76_var, "VoidShade", auto89190C76_var, 1);
        }

    }
    auto29E295D8_g = UnitGroup("VoidRift", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29E295D8_u = UnitGroupCount(auto29E295D8_g, c_unitCountAll);
    for (;; auto29E295D8_u -= 1) {
        auto29E295D8_var = UnitGroupUnitFromEnd(auto29E295D8_g, auto29E295D8_u);
        if (auto29E295D8_var == null) { break; }
        libVCMI_gf_SetUnitInfoTextCampaign(auto29E295D8_var, null, StringExternal("Param/Value/2A91752B"), null);
        if ((libNtve_gf_UnitInRegion(auto29E295D8_var, RegionFromId(11)) == true)) {
            gv_narudRiftsMax += 1;
            gv_narudBaseRifts[gv_narudRiftsMax].lv_unit = auto29E295D8_var;
            gv_narudBaseRifts[gv_narudRiftsMax].lv_point = UnitGetPosition(auto29E295D8_var);
        }

    }
    autoE7293F38_g = UnitGroup("VoidCorruption", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE7293F38_u = UnitGroupCount(autoE7293F38_g, c_unitCountAll);
    for (;; autoE7293F38_u -= 1) {
        autoE7293F38_var = UnitGroupUnitFromEnd(autoE7293F38_g, autoE7293F38_u);
        if (autoE7293F38_var == null) { break; }
        libVCMI_gf_SetUnitInfoTextCampaign(autoE7293F38_var, null, StringExternal("Param/Value/CDF5474F"), null);
    }
    auto2A237B60_g = UnitGroup("XelNagaTowerEpilogue", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2A237B60_u = UnitGroupCount(auto2A237B60_g, c_unitCountAll);
    for (;; auto2A237B60_u -= 1) {
        auto2A237B60_var = UnitGroupUnitFromEnd(auto2A237B60_g, auto2A237B60_u);
        if (auto2A237B60_var == null) { break; }
        UnitSetState(auto2A237B60_var, c_unitStateSelectable, false);
        UnitSetState(auto2A237B60_var, c_unitStateTargetable, false);
        UnitSetState(auto2A237B60_var, c_unitStateTooltipable, false);
        UnitSetState(auto2A237B60_var, c_unitStateStatusBar, false);
    }
    libVCMI_gf_SetUnitInfoTextCampaign(gv_narud, null, StringExternal("Param/Value/85DF0C7D"), null);
    libNtve_gf_MakeUnitLookAtPoint(gv_narud, "Turret_Left", PointWithOffset(UnitGetPosition(gv_narud), 0.0, -5.0));
    TriggerExecute(gt_PerformanceInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PEpilogue01_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(11), RegionFromId(11), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(40), RegionFromId(40), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(41), RegionFromId(41), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(42), RegionFromId(42), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(43), RegionFromId(43), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(52), RegionFromId(52), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(53), RegionFromId(53), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(54), RegionFromId(54), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(55), RegionFromId(55), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(56), RegionFromId(56), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(57), RegionFromId(57), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(58), RegionFromId(58), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(60), RegionFromId(60), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(61), RegionFromId(61), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(62), RegionFromId(62), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(63), RegionFromId(63), gv_pLAYER_01_USER);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Korhal_TarmacSplat");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD1CC437B_g;
    int autoD1CC437B_var;
    playergroup auto44A0803E_g;
    int auto44A0803E_var;
    playergroup autoC9D9AA48_g;
    int autoC9D9AA48_var;
    playergroup auto041B17E1_g;
    int auto041B17E1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_narud, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(3000.0, 3000.0, 4500.0, 6000.0));
    UnitSetPropertyFixed(gv_narud, c_unitPropLifePercent, 100.0);
    gv_narudRiftSpawnCap = libLotv_gf_DifficultyValueInt2(30, 30, 30, 30);
    gv_narudRiftDeadTime = libLotv_gf_DifficultyValueFixed2(55.0, 55.0, 40.0, 25.0);
    gv_voidThrasherSummonedUnitCap = libLotv_gf_DifficultyValueInt2(30, 30, 30, 30);
    autoD1CC437B_g = gv_enemyPlayerGroup;
    autoD1CC437B_var = -1;
    while (true) {
        autoD1CC437B_var = PlayerGroupNextPlayer(autoD1CC437B_g, autoD1CC437B_var);
        if (autoD1CC437B_var < 0) { break; }
        TechTreeAbilityAllow(autoD1CC437B_var, AbilityCommand("EMP", 0), false);
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        auto44A0803E_g = gv_enemyPlayerGroup;
        auto44A0803E_var = -1;
        while (true) {
            auto44A0803E_var = PlayerGroupNextPlayer(auto44A0803E_g, auto44A0803E_var);
            if (auto44A0803E_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ShieldWall", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "TerranVehicleAndShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "TerranVehicleAndShipArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto44A0803E_var, "ProtossShieldsLevel1", 1);
        }
        autoC9D9AA48_g = gv_friendlyPlayerGroup;
        autoC9D9AA48_var = -1;
        while (true) {
            autoC9D9AA48_var = PlayerGroupNextPlayer(autoC9D9AA48_g, autoC9D9AA48_var);
            if (autoC9D9AA48_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoC9D9AA48_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC9D9AA48_var, "TerranVehicleAndShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC9D9AA48_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC9D9AA48_var, "TerranVehicleAndShipArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC9D9AA48_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC9D9AA48_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC9D9AA48_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC9D9AA48_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoC9D9AA48_var, "ZergFlyerArmorsLevel1", 1);
        }
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        auto041B17E1_g = gv_enemyPlayerGroup;
        auto041B17E1_var = -1;
        while (true) {
            auto041B17E1_var = PlayerGroupNextPlayer(auto041B17E1_g, auto041B17E1_var);
            if (auto041B17E1_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto041B17E1_var, "AdvancedHealingAI", 1);
            TechTreeUpgradeAddLevel(auto041B17E1_var, "ChitinousPlating", 1);
            TechTreeUpgradeAddLevel(auto041B17E1_var, "CarrierLaunchSpeedUpgrade", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("VoidThrasher");
    libVCMI_gf_AddMissionTipCampaign("VoidCorruption");
    libVCMI_gf_AddMissionTipCampaign("VoidRift");
    libVCMI_gf_AddMissionTipCampaign("Narud");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    }

    libVCMI_gf_AddMissionCheat("Stage2", "Skip to the second mission stage", gt_DebugStage2, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(gv_s1_VoidCorruption);
    TriggerStop(gt_StartGameStage1Q);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Init
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_performanceUnitsBonus[1] = gf_PerformanceUnitsForRegion(RegionFromId(64));
    gv_performanceUnitsBonus[2] = gf_PerformanceUnitsForRegion(RegionFromId(65));
    gv_performanceUnitsBonus[3] = gf_PerformanceUnitsForRegion(RegionFromId(66));
    gv_performanceUnitsBonus[4] = gf_PerformanceUnitsForRegion(RegionFromId(71));
    gv_performanceUnitsMid[1] = gf_PerformanceUnitsForRegion(RegionFromId(67));
    gv_performanceUnitsMid[2] = gf_PerformanceUnitsForRegion(RegionFromId(70));
    gv_performanceUnitsMid[3] = gf_PerformanceUnitsForRegion(RegionFromId(72));
    gv_performanceUnitsMid[4] = gf_PerformanceUnitsForRegion(RegionFromId(73));
    gv_performanceUnitsMid[5] = gf_PerformanceUnitsForRegion(RegionFromId(74));
    gv_performanceUnitsMid[6] = gf_PerformanceUnitsForRegion(RegionFromId(75));
    gv_performanceUnitsMid[7] = gf_PerformanceUnitsForRegion(RegionFromId(76));
    gv_performanceUnitsMid[8] = gf_PerformanceUnitsForRegion(RegionFromId(77));
    gv_performanceUnitsMid[9] = gf_PerformanceUnitsForRegion(RegionFromId(78));
    gv_performanceUnitsExpo[1] = gf_PerformanceUnitsForRegion(RegionFromId(68));
    gv_performanceUnitsExpo[2] = gf_PerformanceUnitsForRegion(RegionFromId(69));
    TriggerExecute(gt_PerformancePauseAll, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceInit_Init () {
    gt_PerformanceInit = TriggerCreate("gt_PerformanceInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Pause All
//--------------------------------------------------------------------------------------------------
bool gt_PerformancePauseAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexGroup;

    // Automatic Variable Declarations
    const int auto441163CD_ae = gv_performanceBonusCount;
    const int auto441163CD_ai = 1;
    const int auto653622EB_ae = gv_performanceMidCount;
    const int auto653622EB_ai = 1;
    const int autoF9D91B78_ae = gv_performanceExpoCount;
    const int autoF9D91B78_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexGroup = 1;
    for ( ; ( (auto441163CD_ai >= 0 && lv_indexGroup <= auto441163CD_ae) || (auto441163CD_ai < 0 && lv_indexGroup >= auto441163CD_ae) ) ; lv_indexGroup += auto441163CD_ai ) {
        UnitGroupPauseAll(gv_performanceUnitsBonus[lv_indexGroup], true);
    }
    lv_indexGroup = 1;
    for ( ; ( (auto653622EB_ai >= 0 && lv_indexGroup <= auto653622EB_ae) || (auto653622EB_ai < 0 && lv_indexGroup >= auto653622EB_ae) ) ; lv_indexGroup += auto653622EB_ai ) {
        UnitGroupPauseAll(gv_performanceUnitsMid[lv_indexGroup], true);
    }
    lv_indexGroup = 1;
    for ( ; ( (autoF9D91B78_ai >= 0 && lv_indexGroup <= autoF9D91B78_ae) || (autoF9D91B78_ai < 0 && lv_indexGroup >= autoF9D91B78_ae) ) ; lv_indexGroup += autoF9D91B78_ai ) {
        UnitGroupPauseAll(gv_performanceUnitsExpo[lv_indexGroup], true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformancePauseAll_Init () {
    gt_PerformancePauseAll = TriggerCreate("gt_PerformancePauseAll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Bonus01
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseBonus01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsBonus[1], false);
    gv_performanceUnitsBonus[1] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseBonus01_Init () {
    gt_PerformanceUnpauseBonus01 = TriggerCreate("gt_PerformanceUnpauseBonus01_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseBonus01, null, RegionFromId(64), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Bonus02
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseBonus02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsBonus[2], false);
    gv_performanceUnitsBonus[2] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseBonus02_Init () {
    gt_PerformanceUnpauseBonus02 = TriggerCreate("gt_PerformanceUnpauseBonus02_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseBonus02, null, RegionFromId(65), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Bonus03
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseBonus03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsBonus[3], false);
    gv_performanceUnitsBonus[3] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseBonus03_Init () {
    gt_PerformanceUnpauseBonus03 = TriggerCreate("gt_PerformanceUnpauseBonus03_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseBonus03, null, RegionFromId(66), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Bonus04
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseBonus04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsBonus[4], false);
    gv_performanceUnitsBonus[4] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseBonus04_Init () {
    gt_PerformanceUnpauseBonus04 = TriggerCreate("gt_PerformanceUnpauseBonus04_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseBonus04, null, RegionFromId(71), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Mid 01
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseMid01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsMid[1], false);
    gv_performanceUnitsMid[1] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseMid01_Init () {
    gt_PerformanceUnpauseMid01 = TriggerCreate("gt_PerformanceUnpauseMid01_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseMid01, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Mid 02
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseMid02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsMid[2], false);
    gv_performanceUnitsMid[2] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseMid02_Init () {
    gt_PerformanceUnpauseMid02 = TriggerCreate("gt_PerformanceUnpauseMid02_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseMid02, null, RegionFromId(70), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Mid 03
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseMid03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsMid[3], false);
    gv_performanceUnitsMid[3] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseMid03_Init () {
    gt_PerformanceUnpauseMid03 = TriggerCreate("gt_PerformanceUnpauseMid03_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseMid03, null, RegionFromId(72), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Mid 04
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseMid04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsMid[4], false);
    gv_performanceUnitsMid[4] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseMid04_Init () {
    gt_PerformanceUnpauseMid04 = TriggerCreate("gt_PerformanceUnpauseMid04_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseMid04, null, RegionFromId(73), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Mid 05
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseMid05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsMid[5], false);
    gv_performanceUnitsMid[5] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseMid05_Init () {
    gt_PerformanceUnpauseMid05 = TriggerCreate("gt_PerformanceUnpauseMid05_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseMid05, null, RegionFromId(74), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Mid 06
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseMid06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsMid[6], false);
    gv_performanceUnitsMid[6] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseMid06_Init () {
    gt_PerformanceUnpauseMid06 = TriggerCreate("gt_PerformanceUnpauseMid06_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseMid06, null, RegionFromId(75), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Mid 07
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseMid07_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsMid[7], false);
    gv_performanceUnitsMid[7] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseMid07_Init () {
    gt_PerformanceUnpauseMid07 = TriggerCreate("gt_PerformanceUnpauseMid07_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseMid07, null, RegionFromId(76), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Mid 08
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseMid08_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsMid[8], false);
    gv_performanceUnitsMid[8] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseMid08_Init () {
    gt_PerformanceUnpauseMid08 = TriggerCreate("gt_PerformanceUnpauseMid08_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseMid08, null, RegionFromId(77), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Mid 09
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseMid09_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsMid[9], false);
    gv_performanceUnitsMid[9] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseMid09_Init () {
    gt_PerformanceUnpauseMid09 = TriggerCreate("gt_PerformanceUnpauseMid09_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseMid09, null, RegionFromId(78), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Expo S
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseExpoS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsExpo[1], false);
    gv_performanceUnitsExpo[1] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseExpoS_Init () {
    gt_PerformanceUnpauseExpoS = TriggerCreate("gt_PerformanceUnpauseExpoS_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseExpoS, null, RegionFromId(68), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Unpause Expo N
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceUnpauseExpoN_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupPauseAll(gv_performanceUnitsExpo[2], false);
    gv_performanceUnitsExpo[2] = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceUnpauseExpoN_Init () {
    gt_PerformanceUnpauseExpoN = TriggerCreate("gt_PerformanceUnpauseExpoN_Func");
    TriggerAddEventUnitRegion(gt_PerformanceUnpauseExpoN, null, RegionFromId(69), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Repause After SoA
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceRepauseAfterSoA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_PerformancePauseAll, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceRepauseAfterSoA_Init () {
    gt_PerformanceRepauseAfterSoA = TriggerCreate("gt_PerformanceRepauseAfterSoA_Func");
    libVCMI_gf_SpearofAdunTargetingModeExited(gt_PerformanceRepauseAfterSoA, libVCMI_ge_SpearofAdunTargetingExitType_ByFiring);
    libVCMI_gf_SpearofAdunTargetingModeExited(gt_PerformanceRepauseAfterSoA, libVCMI_ge_SpearofAdunTargetingExitType_ByCanceling);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance - Handle Time Stop Apply
//--------------------------------------------------------------------------------------------------
bool gt_PerformanceHandleTimeStopApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexGroup;

    // Automatic Variable Declarations
    const int auto41881A02_ae = gv_performanceBonusCount;
    const int auto41881A02_ai = 1;
    const int autoC335EEA1_ae = gv_performanceMidCount;
    const int autoC335EEA1_ai = 1;
    const int auto43BFF63C_ae = gv_performanceExpoCount;
    const int auto43BFF63C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexGroup = 1;
    for ( ; ( (auto41881A02_ai >= 0 && lv_indexGroup <= auto41881A02_ae) || (auto41881A02_ai < 0 && lv_indexGroup >= auto41881A02_ae) ) ; lv_indexGroup += auto41881A02_ai ) {
        UnitGroupPauseAll(gv_performanceUnitsBonus[lv_indexGroup], false);
    }
    lv_indexGroup = 1;
    for ( ; ( (autoC335EEA1_ai >= 0 && lv_indexGroup <= autoC335EEA1_ae) || (autoC335EEA1_ai < 0 && lv_indexGroup >= autoC335EEA1_ae) ) ; lv_indexGroup += autoC335EEA1_ai ) {
        UnitGroupPauseAll(gv_performanceUnitsMid[lv_indexGroup], false);
    }
    lv_indexGroup = 1;
    for ( ; ( (auto43BFF63C_ai >= 0 && lv_indexGroup <= auto43BFF63C_ae) || (auto43BFF63C_ai < 0 && lv_indexGroup >= auto43BFF63C_ae) ) ; lv_indexGroup += auto43BFF63C_ai ) {
        UnitGroupPauseAll(gv_performanceUnitsExpo[lv_indexGroup], false);
    }
    Wait(IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOATimeFreeze", "Duration", c_playerAny)), c_timeGame);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_PerformancePauseAll, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerformanceHandleTimeStopApply_Init () {
    gt_PerformanceHandleTimeStopApply = TriggerCreate("gt_PerformanceHandleTimeStopApply_Func");
    TriggerAddEventPlayerEffectUsed(gt_PerformanceHandleTimeStopApply, 1, "SOATimeFreeze");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Stage 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_s1_VoidRift01 = UnitFromId(45);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidCorruption", c_unitCreateIgnorePlacement, gv_pLAYER_05_VOIDFORCES, UnitGetPosition(UnitFromId(266)));
    libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/4C4D4E18"), null);
    gv_s1_VoidCorruption = UnitLastCreated();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8BEAAC82"), null, PointFromId(443));
    TriggerExecute(gt_S1Revealers, true, false);
    TriggerExecute(gt_S1UnitWander, true, false);
    TriggerEnable(gt_EnemyUnitEntersMap, true);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FF1089FA"), null, UnitGetPosition(gv_s1_VoidCorruption));
    TriggerExecute(gt_ObjectiveFindCorruptionSourceCreate, true, true);
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_s1_VoidCorruption), StringExternal("Param/Value/B755CAF1"));
    PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    libHots_gf_StorePingForUnit(gv_s1_VoidCorruption, 1, PingLastCreated());
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00118", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00069", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_lastSentTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00119", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_lastSentTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1Q_Init () {
    gt_StartGameStage1Q = TriggerCreate("gt_StartGameStage1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Stage 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto09C7B786_g;
    int auto09C7B786_u;
    unit auto09C7B786_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/ADA11C5C"), null, PointFromId(443));
    libVCMI_gf_StartingWorkersAutoHarvest(RegionFromId(7), RegionFromId(8));
    TriggerExecute(gt_UpdateKerriganDefendRegion, true, false);
    TriggerExecute(gt_KerriganSpellAI, true, false);
    TriggerExecute(gt_BurrowSwarmHosts, true, false);
    TriggerExecute(gt_VsKerriganWaves, true, false);
    TriggerExecute(gt_VsRaynorWaves, true, false);
    TriggerExecute(gt_VoidThrasherAttacks, true, false);
    gv_voidCorruptionTotal = 1;
    gv_voidCorruptionDestroyed = 1;
    auto09C7B786_g = UnitGroup("VoidCorruption", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto09C7B786_u = UnitGroupCount(auto09C7B786_g, c_unitCountAll);
    for (;; auto09C7B786_u -= 1) {
        auto09C7B786_var = UnitGroupUnitFromEnd(auto09C7B786_g, auto09C7B786_u);
        if (auto09C7B786_var == null) { break; }
        gv_voidCorruptionTotal += 1;
    }
    TriggerEnable(gt_DestroyVoidCorruption, true);
    Wait(3.0, c_timeReal);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_narud), 8.0), 3.0, false);
    libVCMI_gf_CreateObjectivePing(true, PointFromId(678), StringExternal("Param/Value/2F21DA1C"));
    PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    libHots_gf_StorePingForUnit(gv_narud, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveDefeatNarudCreate, true, true);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveAlliesMustSurviveCreate, true, true);
    TriggerExecute(gt_KerriganDefendRaynorFrontLineFirstTime, true, false);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00021", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00022", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2Q_Init () {
    gt_StartGameStage2Q = TriggerCreate("gt_StartGameStage2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Flyout Warp Prisms
//--------------------------------------------------------------------------------------------------
bool gt_S1FlyoutWarpPrisms_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(UnitFromId(2227), c_unitPropLife, 5.0);
    UnitSetPropertyFixed(UnitFromId(2227), c_unitPropShields, 0.0);
    UnitSetPropertyFixed(UnitFromId(2228), c_unitPropLife, 3.0);
    UnitSetPropertyFixed(UnitFromId(2228), c_unitPropShields, 0.0);
    UnitIssueOrder(UnitFromId(2227), Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    Wait(0.7, c_timeGame);
    UnitIssueOrder(UnitFromId(2228), Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitFromId(2228), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(2228)), 12.0, 225.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(2227), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitFromId(2227)), 12.0, 225.0)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FlyoutWarpPrisms_Init () {
    gt_S1FlyoutWarpPrisms = TriggerCreate("gt_S1FlyoutWarpPrisms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Unit Enters First Enemy Group
//--------------------------------------------------------------------------------------------------
bool gt_S1UnitEntersFirstEnemyGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6B9172E8_g;
    int auto6B9172E8_u;
    unit auto6B9172E8_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto6B9172E8_g = UnitGroup(null, gv_pLAYER_05_VOIDFORCES, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B9172E8_u = UnitGroupCount(auto6B9172E8_g, c_unitCountAll);
    for (;; auto6B9172E8_u -= 1) {
        auto6B9172E8_var = UnitGroupUnitFromEnd(auto6B9172E8_g, auto6B9172E8_u);
        if (auto6B9172E8_var == null) { break; }
        gf_S1ActivateGenericEnemyScriptedAI(auto6B9172E8_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1UnitEntersFirstEnemyGroup_Init () {
    gt_S1UnitEntersFirstEnemyGroup = TriggerCreate("gt_S1UnitEntersFirstEnemyGroup_Func");
    TriggerAddEventTimePeriodic(gt_S1UnitEntersFirstEnemyGroup, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Unit Enters First Void Rift Q
//--------------------------------------------------------------------------------------------------
bool gt_S1UnitEntersFirstVoidRiftQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1VoidRiftUnitSpawns01, true, false);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/409FB9A7"), null, gv_s1_VoidRift01);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Medium, StringToText(""), gv_s1_VoidRift01, "Ref_Center");
    libHots_gf_StoreActorForUnit(gv_s1_VoidRift01, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(gv_s1_VoidRift01, 1, TextTagLastCreated());
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(gv_s1_VoidCorruption) == true)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00128", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_lastSentTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1UnitEntersFirstVoidRiftQ_Init () {
    gt_S1UnitEntersFirstVoidRiftQ = TriggerCreate("gt_S1UnitEntersFirstVoidRiftQ_Func");
    TriggerAddEventUnitRegion(gt_S1UnitEntersFirstVoidRiftQ, null, RegionFromId(49), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Void Rift Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstVoidRiftTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_s1_VoidRift01, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_s1_VoidRift01, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstVoidRiftTakesDamage_Init () {
    gt_S1FirstVoidRiftTakesDamage = TriggerCreate("gt_S1FirstVoidRiftTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_S1FirstVoidRiftTakesDamage, UnitRefFromVariable("gv_s1_VoidRift01"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Unit Enters First Void Corruption Q
//--------------------------------------------------------------------------------------------------
bool gt_S1UnitEntersFirstVoidCorruptionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1VoidRiftUnitSpawns02, true, false);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D25BA6DE"), null, gv_s1_VoidCorruption);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Medium, StringToText(""), gv_s1_VoidCorruption, "Ref_Center");
    libHots_gf_StoreActorForUnit(gv_s1_VoidCorruption, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(gv_s1_VoidCorruption, 1, TextTagLastCreated());
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(gv_s1_VoidCorruption) == true)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00121", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_lastSentTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    if ((UnitIsAlive(gv_s1_VoidCorruption) == true)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00123", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_lastSentTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    if ((UnitIsAlive(gv_s1_VoidCorruption) == true)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00122", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_lastSentTransmission = TransmissionLastSent();
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1UnitEntersFirstVoidCorruptionQ_Init () {
    gt_S1UnitEntersFirstVoidCorruptionQ = TriggerCreate("gt_S1UnitEntersFirstVoidCorruptionQ_Func");
    TriggerAddEventUnitRegion(gt_S1UnitEntersFirstVoidCorruptionQ, null, RegionFromId(50), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Void Corruption Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstVoidCorruptionTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_s1_VoidCorruption, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(gv_s1_VoidCorruption, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstVoidCorruptionTakesDamage_Init () {
    gt_S1FirstVoidCorruptionTakesDamage = TriggerCreate("gt_S1FirstVoidCorruptionTakesDamage_Func");
    TriggerAddEventUnitDamaged(gt_S1FirstVoidCorruptionTakesDamage, UnitRefFromVariable("gv_s1_VoidCorruption"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Void Corruption Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstVoidCorruptionDiesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    region lv_towerRegion;

    // Automatic Variable Declarations
    unitgroup auto7DE0A72C_g;
    int auto7DE0A72C_u;
    unit auto7DE0A72C_var;
    unitgroup auto8B88948B_g;
    int auto8B88948B_u;
    unit auto8B88948B_var;

    // Variable Initialization
    lv_point = UnitGetPosition(EventUnit());
    lv_towerRegion = RegionCircle(UnitGetPosition(EventUnit()), 22.0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_s1_VoidCorruption, 1));
    auto7DE0A72C_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, lv_towerRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7DE0A72C_u = UnitGroupCount(auto7DE0A72C_g, c_unitCountAll);
    for (;; auto7DE0A72C_u -= 1) {
        auto7DE0A72C_var = UnitGroupUnitFromEnd(auto7DE0A72C_g, auto7DE0A72C_u);
        if (auto7DE0A72C_var == null) { break; }
        UnitKill(auto7DE0A72C_var);
    }
    auto8B88948B_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionRect(0.0, 0.0, 50.0, 60.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B88948B_u = UnitGroupCount(auto8B88948B_g, c_unitCountAll);
    for (;; auto8B88948B_u -= 1) {
        auto8B88948B_var = UnitGroupUnitFromEnd(auto8B88948B_g, auto8B88948B_u);
        if (auto8B88948B_var == null) { break; }
        UnitKill(auto8B88948B_var);
    }
    gf_LightNovaHealsUnits(lv_point);
    Wait(1.0, c_timeAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClear(gv_lastSentTransmission);
    TriggerExecute(gt_ObjectiveFindCorruptionSourceComplete, true, true);
    TriggerExecute(gt_MidQ, true, true);
    TriggerExecute(gt_StartGameStage2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstVoidCorruptionDiesQ_Init () {
    gt_S1FirstVoidCorruptionDiesQ = TriggerCreate("gt_S1FirstVoidCorruptionDiesQ_Func");
    TriggerAddEventUnitDied(gt_S1FirstVoidCorruptionDiesQ, UnitRefFromVariable("gv_s1_VoidCorruption"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Revealers
//--------------------------------------------------------------------------------------------------
bool gt_S1Revealers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_revealer01;
    revealer lv_revealer02;
    revealer lv_revealer03;
    revealer lv_revealer04;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(48));
    lv_revealer01 = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(49));
    lv_revealer02 = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(50));
    lv_revealer03 = VisRevealerLastCreated();
    while ((libVCMI_gf_GameIsOver() == false) && (gv_missionStage == 1)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            if ((UnitGroupCount(UnitGroupFilterRegion(gv_s1_PlayerForces, RegionFromId(48), 0), c_unitCountAlive) > 0)) {
                VisRevealerEnable(lv_revealer01, true);
            }
            else {
                VisRevealerEnable(lv_revealer01, false);
            }
            if ((UnitGroupCount(UnitGroupFilterRegion(gv_s1_PlayerForces, RegionFromId(49), 0), c_unitCountAlive) > 0)) {
                VisRevealerEnable(lv_revealer02, true);
            }
            else {
                VisRevealerEnable(lv_revealer02, false);
            }
            if ((UnitGroupCount(UnitGroupFilterRegion(gv_s1_PlayerForces, RegionFromId(50), 0), c_unitCountAlive) > 0)) {
                VisRevealerEnable(lv_revealer03, true);
            }
            else {
                VisRevealerEnable(lv_revealer03, false);
            }
            if ((UnitGroupCount(UnitGroupFilterRegion(gv_s1_PlayerForces, RegionFromId(51), 0), c_unitCountAlive) > 0)) {
                VisRevealerEnable(lv_revealer04, true);
            }
            else {
                VisRevealerEnable(lv_revealer04, false);
            }
        }

        Wait(0.0625, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1Revealers_Init () {
    gt_S1Revealers = TriggerCreate("gt_S1Revealers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Unit Wander
//--------------------------------------------------------------------------------------------------
bool gt_S1UnitWander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2DF8FD08_g;
    int auto2DF8FD08_u;
    unit auto2DF8FD08_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false) && (gv_missionStage == 1)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            auto2DF8FD08_g = UnitGroup(null, gv_pLAYER_05_VOIDFORCES, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto2DF8FD08_u = UnitGroupCount(auto2DF8FD08_g, c_unitCountAll);
            for (;; auto2DF8FD08_u -= 1) {
                auto2DF8FD08_var = UnitGroupUnitFromEnd(auto2DF8FD08_g, auto2DF8FD08_u);
                if (auto2DF8FD08_var == null) { break; }
                if ((RandomInt(1, 6) == 1)) {
                    UnitIssueOrder(auto2DF8FD08_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(auto2DF8FD08_var), 4.0))), c_orderQueueReplace);
                    Wait(0.25, c_timeAI);
                }

            }
        }

        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1UnitWander_Init () {
    gt_S1UnitWander = TriggerCreate("gt_S1UnitWander_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Void Rift Unit Spawns 01
//--------------------------------------------------------------------------------------------------
bool gt_S1VoidRiftUnitSpawns01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6A9C904A_n = 4;
    int auto6A9C904A_i;
    const int auto2139166C_n = 2;
    int auto2139166C_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_s1_VoidRift01) == true)) {
        for (auto6A9C904A_i = 1; auto6A9C904A_i <= auto6A9C904A_n; auto6A9C904A_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_05_VOIDFORCES, PointWithOffset(UnitGetPosition(gv_s1_VoidRift01), -1.0, 0.0));
            UnitCreateEffectUnit(gv_s1_VoidRift01, "VoidRiftTrainSet", UnitLastCreated());
            gf_S1ActivateGenericEnemyScriptedAI(UnitLastCreated());
            Wait(0.25, c_timeAI);
            if ((UnitIsAlive(gv_s1_VoidRift01) == false)) {
                break;
            }

        }
    }

    Wait(2.0, c_timeAI);
    if ((UnitIsAlive(gv_s1_VoidRift01) == true)) {
        for (auto2139166C_i = 1; auto2139166C_i <= auto2139166C_n; auto2139166C_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_pLAYER_05_VOIDFORCES, PointWithOffset(UnitGetPosition(gv_s1_VoidRift01), -1.0, 0.0));
            UnitCreateEffectUnit(gv_s1_VoidRift01, "VoidRiftTrainSet", UnitLastCreated());
            gf_S1ActivateGenericEnemyScriptedAI(UnitLastCreated());
            Wait(0.25, c_timeAI);
            if ((UnitIsAlive(gv_s1_VoidRift01) == false)) {
                break;
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1VoidRiftUnitSpawns01_Init () {
    gt_S1VoidRiftUnitSpawns01 = TriggerCreate("gt_S1VoidRiftUnitSpawns01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Void Rift Unit Spawns 02
//--------------------------------------------------------------------------------------------------
bool gt_S1VoidRiftUnitSpawns02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidRiftUnit;

    // Automatic Variable Declarations
    int autoDCA04944_n;
    int autoDCA04944_i;
    int auto5CA7B6FF_n;
    int auto5CA7B6FF_i;

    // Variable Initialization
    lv_voidRiftUnit = UnitFromId(1102);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lv_voidRiftUnit) == true)) {
        autoDCA04944_n = libLotv_gf_DifficultyValueInt2(4, 4, 5, 6);
        for (autoDCA04944_i = 1; autoDCA04944_i <= autoDCA04944_n; autoDCA04944_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_pLAYER_05_VOIDFORCES, PointWithOffset(UnitGetPosition(lv_voidRiftUnit), -1.0, 0.0));
            UnitCreateEffectUnit(lv_voidRiftUnit, "VoidRiftTrainSet", UnitLastCreated());
            gf_S1ActivateGenericEnemyScriptedAI(UnitLastCreated());
            Wait(0.25, c_timeAI);
            if ((UnitIsAlive(lv_voidRiftUnit) == false)) {
                break;
            }

        }
    }

    Wait(4.0, c_timeAI);
    if ((UnitIsAlive(lv_voidRiftUnit) == true)) {
        auto5CA7B6FF_n = libLotv_gf_DifficultyValueInt2(6, 6, 8, 10);
        for (auto5CA7B6FF_i = 1; auto5CA7B6FF_i <= auto5CA7B6FF_n; auto5CA7B6FF_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_05_VOIDFORCES, PointWithOffset(UnitGetPosition(lv_voidRiftUnit), -1.0, 0.0));
            UnitCreateEffectUnit(lv_voidRiftUnit, "VoidRiftTrainSet", UnitLastCreated());
            gf_S1ActivateGenericEnemyScriptedAI(UnitLastCreated());
            Wait(0.25, c_timeAI);
            if ((UnitIsAlive(lv_voidRiftUnit) == false)) {
                break;
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1VoidRiftUnitSpawns02_Init () {
    gt_S1VoidRiftUnitSpawns02 = TriggerCreate("gt_S1VoidRiftUnitSpawns02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Void Thrasher Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstVoidThrasherDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_StartAIAttackWavesVsPlayer, true, false);
    TriggerExecute(gt_KerriganWaves, true, false);
    TriggerExecute(gt_RaynorWaves, true, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00023", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00024", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(60.0, c_timeAI);
    TriggerExecute(gt_RevealBonusObjectiveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstVoidThrasherDiesQ_Init () {
    gt_FirstVoidThrasherDiesQ = TriggerCreate("gt_FirstVoidThrasherDiesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Unit Enters Map
//--------------------------------------------------------------------------------------------------
bool gt_EnemyUnitEntersMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_04_NARUD) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_VOIDFORCES) || (UnitGetOwner(EventUnit()) == gv_pLAYER_06_VOIDFORCES) || (UnitGetOwner(EventUnit()) == gv_pLAYER_07_VOIDFORCES)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ShadowCloudEpilogue01"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ShadowCloudSmallEpilogue01"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "VoidRift"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "VoidCorruption"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NarudEpilogue"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "VoidThrasherWalker"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "VoidShade", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyUnitEntersMap_Init () {
    gt_EnemyUnitEntersMap = TriggerCreate("gt_EnemyUnitEntersMap_Func");
    TriggerEnable(gt_EnemyUnitEntersMap, false);
    TriggerAddEventUnitRegion(gt_EnemyUnitEntersMap, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Corruption Dies
//--------------------------------------------------------------------------------------------------
bool gt_VoidCorruptionDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    region lv_towerRegion;

    // Automatic Variable Declarations
    unitgroup auto3B190F0A_g;
    int auto3B190F0A_u;
    unit auto3B190F0A_var;
    unitgroup autoF8C0E17B_g;
    int autoF8C0E17B_u;
    unit autoF8C0E17B_var;
    unitgroup auto9FA27D59_g;
    int auto9FA27D59_u;
    unit auto9FA27D59_var;
    unit autoC5CB2B63_val;

    // Variable Initialization
    lv_point = UnitGetPosition(EventUnit());
    lv_towerRegion = RegionCircle(lv_point, 22.0);

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VoidCorruption"))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_04_NARUD, lv_towerRegion, false);
    AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, lv_towerRegion, false);
    AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, lv_towerRegion, false);
    AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, lv_towerRegion, false);
    auto3B190F0A_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, lv_towerRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B190F0A_u = UnitGroupCount(auto3B190F0A_g, c_unitCountAll);
    for (;; auto3B190F0A_u -= 1) {
        auto3B190F0A_var = UnitGroupUnitFromEnd(auto3B190F0A_g, auto3B190F0A_u);
        if (auto3B190F0A_var == null) { break; }
        UnitKill(auto3B190F0A_var);
    }
    autoF8C0E17B_g = UnitGroup("ShadowCloudSmallEpilogue01", c_playerAny, lv_towerRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF8C0E17B_u = UnitGroupCount(autoF8C0E17B_g, c_unitCountAll);
    for (;; autoF8C0E17B_u -= 1) {
        autoF8C0E17B_var = UnitGroupUnitFromEnd(autoF8C0E17B_g, autoF8C0E17B_u);
        if (autoF8C0E17B_var == null) { break; }
        UnitKill(autoF8C0E17B_var);
    }
    gf_LightNovaHealsUnits(lv_point);
    auto9FA27D59_g = UnitGroup("XelNagaTowerEpilogue", c_playerAny, RegionCircle(lv_point, 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9FA27D59_u = UnitGroupCount(auto9FA27D59_g, c_unitCountAll);
    for (;; auto9FA27D59_u -= 1) {
        auto9FA27D59_var = UnitGroupUnitFromEnd(auto9FA27D59_g, auto9FA27D59_u);
        if (auto9FA27D59_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto9FA27D59_var, true, gv_pLAYER_01_USER);
        autoC5CB2B63_val = auto9FA27D59_var;
        if (autoC5CB2B63_val == UnitFromId(185)) {
            TriggerExecute(gt_KerriganForwardBase01Setup, true, false);
        }
        else if (autoC5CB2B63_val == UnitFromId(212)) {
            TriggerExecute(gt_KerriganForwardBase02Setup, true, false);
        }
        else if (autoC5CB2B63_val == UnitFromId(566)) {
            TriggerExecute(gt_KerriganForwardBase03Setup, true, false);
        }
        else if (autoC5CB2B63_val == UnitFromId(1170)) {
        }
        else if (autoC5CB2B63_val == UnitFromId(1018)) {
        }
        else if (autoC5CB2B63_val == UnitFromId(316)) {
            TriggerExecute(gt_RaynorForwardBase01Setup, true, false);
        }
        else if (autoC5CB2B63_val == UnitFromId(38)) {
            TriggerExecute(gt_RaynorForwardBase02Setup, true, false);
        }
        else if (autoC5CB2B63_val == UnitFromId(597)) {
            TriggerExecute(gt_RaynorForwardBase03Setup, true, false);
        }
        else if (autoC5CB2B63_val == UnitFromId(1174)) {
        }
        else if (autoC5CB2B63_val == UnitFromId(1149)) {
        }
        else {
            gf_PlayOurosTransmissionQ(auto9FA27D59_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCorruptionDies_Init () {
    gt_VoidCorruptionDies = TriggerCreate("gt_VoidCorruptionDies_Func");
    TriggerAddEventUnitDied(gt_VoidCorruptionDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Discover Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersDiscoverBonusObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_RevealBonusObjectiveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersDiscoverBonusObjective_Init () {
    gt_UnitEntersDiscoverBonusObjective = TriggerCreate("gt_UnitEntersDiscoverBonusObjective_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersDiscoverBonusObjective, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_UnitEntersDiscoverBonusObjective, null, RegionFromId(20), true);
    TriggerAddEventUnitRegion(gt_UnitEntersDiscoverBonusObjective, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_UnitEntersDiscoverBonusObjective, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Bonus Objective Q
//--------------------------------------------------------------------------------------------------
bool gt_RevealBonusObjectiveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveCleared01Q, true);
    TriggerEnable(gt_BonusObjectiveCleared02Q, true);
    TriggerEnable(gt_BonusObjectiveCleared03Q, true);
    TriggerEnable(gt_BonusObjectiveCleared04Q, true);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveEstablishAllyExpansionsCreate, true, true);
    libVCMI_gf_CreateObjectivePing(false, PointFromId(1122), StringExternal("Param/Value/9061C0A3"));
    gv_bonusObjectivePing01 = PingLastCreated();
    Wait(0.25, c_timeAI);
    libVCMI_gf_CreateObjectivePing(false, PointFromId(1123), StringExternal("Param/Value/890BE563"));
    gv_bonusObjectivePing02 = PingLastCreated();
    Wait(0.25, c_timeAI);
    libVCMI_gf_CreateObjectivePing(false, PointFromId(1124), StringExternal("Param/Value/BAC145F7"));
    gv_bonusObjectivePing03 = PingLastCreated();
    Wait(0.25, c_timeAI);
    libVCMI_gf_CreateObjectivePing(false, PointFromId(1125), StringExternal("Param/Value/CC169C5F"));
    gv_bonusObjectivePing04 = PingLastCreated();
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00013", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00098", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealBonusObjectiveQ_Init () {
    gt_RevealBonusObjectiveQ = TriggerCreate("gt_RevealBonusObjectiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Cleared 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCleared01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_bonusObjectivePing01);
    gv_bonusObjectiveComplete01 = true;
    gv_objectiveEstablishAllyExpansionsCount += 1;
    TriggerExecute(gt_ObjectiveEstablishAllyExpansionsUpdate, true, false);
    if ((gv_objectiveEstablishAllyExpansionsCount >= gv_objectiveEstablishAllyExpansionsMax)) {
        TriggerExecute(gt_ObjectiveEstablishAllyExpansionsComplete, true, false);
    }

    gf_LandTerranBuilding("CommandCenterFlying", PointFromId(1134));
    Wait(0.5, c_timeAI);
    gf_LandTerranBuilding("BarracksFlying", PointFromId(1176));
    Wait(0.5, c_timeAI);
    gf_LandTerranBuilding("BarracksFlying", PointFromId(1135));
    Wait(0.5, c_timeAI);
    gf_LandTerranBuilding("StarportFlying", PointFromId(1136));
    Wait(0.5, c_timeAI);
    gf_MedivacDropoffWave(PointFromId(40));
    Wait(0.5, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, RegionFromId(22), true);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/73EC2798"), null, PointFromId(1122));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1122), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00016", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_objectiveEstablishAllyExpansionsCount >= gv_objectiveEstablishAllyExpansionsMax)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00019", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    AIToggleBulliesInRegion(gv_pLAYER_08_RAYNOREXPANSIONS, RegionFromId(34), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCleared01Q_Init () {
    gt_BonusObjectiveCleared01Q = TriggerCreate("gt_BonusObjectiveCleared01Q_Func");
    TriggerEnable(gt_BonusObjectiveCleared01Q, false);
    TriggerAddEventTimePeriodic(gt_BonusObjectiveCleared01Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Cleared 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCleared02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_bonusObjectivePing02);
    gv_bonusObjectiveComplete02 = true;
    gv_objectiveEstablishAllyExpansionsCount += 1;
    TriggerExecute(gt_ObjectiveEstablishAllyExpansionsUpdate, true, false);
    if ((gv_objectiveEstablishAllyExpansionsCount >= gv_objectiveEstablishAllyExpansionsMax)) {
        TriggerExecute(gt_ObjectiveEstablishAllyExpansionsComplete, true, false);
    }

    gf_LandTerranBuilding("CommandCenterFlying", PointFromId(1138));
    Wait(0.5, c_timeAI);
    gf_LandTerranBuilding("FactoryFlying", PointFromId(1189));
    Wait(0.5, c_timeAI);
    gf_LandTerranBuilding("FactoryFlying", PointFromId(1139));
    Wait(0.5, c_timeAI);
    gf_LandTerranBuilding("FactoryFlying", PointFromId(1140));
    Wait(0.5, c_timeAI);
    gf_ThorDropoffWave(PointFromId(39));
    Wait(0.5, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, RegionFromId(23), true);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F92A1A22"), null, PointFromId(1123));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1123), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00020", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_objectiveEstablishAllyExpansionsCount >= gv_objectiveEstablishAllyExpansionsMax)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00019", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    AIToggleBulliesInRegion(gv_pLAYER_08_RAYNOREXPANSIONS, RegionFromId(37), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCleared02Q_Init () {
    gt_BonusObjectiveCleared02Q = TriggerCreate("gt_BonusObjectiveCleared02Q_Func");
    TriggerEnable(gt_BonusObjectiveCleared02Q, false);
    TriggerAddEventTimePeriodic(gt_BonusObjectiveCleared02Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Cleared 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCleared03Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_bonusObjectivePing03);
    gv_bonusObjectiveComplete03 = true;
    gv_objectiveEstablishAllyExpansionsCount += 1;
    TriggerExecute(gt_ObjectiveEstablishAllyExpansionsUpdate, true, false);
    if ((gv_objectiveEstablishAllyExpansionsCount >= gv_objectiveEstablishAllyExpansionsMax)) {
        TriggerExecute(gt_ObjectiveEstablishAllyExpansionsComplete, true, false);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", c_unitCreateIgnorePlacement, gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(1124));
    UnitGroupAdd(lv_dropPodUnits01, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "HotSRaptor", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(1124));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(1124));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(1124), lv_dropPodUnits01, false, gv_pLAYER_09_KERRIGANEXPANSIONS);
    Wait(2.0, c_timeAI);
    gf_MutaDropoffWave(PointFromId(41));
    Wait(1.0, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_03_KERRIGAN, RegionFromId(24), true);
    AIToggleBulliesInRegion(gv_pLAYER_09_KERRIGANEXPANSIONS, RegionFromId(38), true);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/691EB693"), null, PointFromId(1124));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1124), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00017", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_objectiveEstablishAllyExpansionsCount >= gv_objectiveEstablishAllyExpansionsMax)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00019", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCleared03Q_Init () {
    gt_BonusObjectiveCleared03Q = TriggerCreate("gt_BonusObjectiveCleared03Q_Func");
    TriggerEnable(gt_BonusObjectiveCleared03Q, false);
    TriggerAddEventTimePeriodic(gt_BonusObjectiveCleared03Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Cleared 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCleared04Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_bonusObjectivePing04);
    gv_bonusObjectiveComplete04 = true;
    gv_objectiveEstablishAllyExpansionsCount += 1;
    TriggerExecute(gt_ObjectiveEstablishAllyExpansionsUpdate, true, false);
    if ((gv_objectiveEstablishAllyExpansionsCount >= gv_objectiveEstablishAllyExpansionsMax)) {
        TriggerExecute(gt_ObjectiveEstablishAllyExpansionsComplete, true, false);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", c_unitCreateIgnorePlacement, gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(1125));
    UnitGroupAdd(lv_dropPodUnits01, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "HotSRaptor", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(1125));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Drone", 0, gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(1125));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(1125), lv_dropPodUnits01, false, gv_pLAYER_09_KERRIGANEXPANSIONS);
    Wait(2.0, c_timeAI);
    gf_UltraDropoffWave(PointFromId(42));
    Wait(1.0, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_03_KERRIGAN, RegionFromId(25), true);
    AIToggleBulliesInRegion(gv_pLAYER_09_KERRIGANEXPANSIONS, RegionFromId(39), true);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/27E81A32"), null, PointFromId(1125));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1125), 2.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00018", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv_objectiveEstablishAllyExpansionsCount >= gv_objectiveEstablishAllyExpansionsMax)) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00019", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCleared04Q_Init () {
    gt_BonusObjectiveCleared04Q = TriggerCreate("gt_BonusObjectiveCleared04Q_Func");
    TriggerEnable(gt_BonusObjectiveCleared04Q, false);
    TriggerAddEventTimePeriodic(gt_BonusObjectiveCleared04Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatUnitsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_s1_PlayerForces, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/935165BF"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatUnitsDead_Init () {
    gt_DefeatUnitsDead = TriggerCreate("gt_DefeatUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatUnitsDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7EAA217C"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitIsAlive(UnitFromId(152)) == false) || ((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_03_KERRIGAN, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_03_KERRIGAN, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_03_KERRIGAN, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveAlliesMustSurviveFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/EA0332E3"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerEnable(gt_DefeatPrimaryObjectiveFailed, false);
    TriggerAddEventTimePeriodic(gt_DefeatPrimaryObjectiveFailed, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Defeat Narud Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDefeatNarudCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AchievementFinishinlessthan28minutes();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDefeatNarudCompleted_Init () {
    gt_VictoryDefeatNarudCompleted = TriggerCreate("gt_VictoryDefeatNarudCompleted_Func");
    TriggerAddEventPlayerEffectUsed(gt_VictoryDefeatNarudCompleted, c_playerAny, "NarudEpilogueLowHPSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_PauseUnit(gv_narud, true);
    TriggerExecute(gt_ObjectiveDefeatNarudComplete, true, true);
    TriggerExecute(gt_ObjectiveAlliesMustSurviveComplete, true, true);
    TriggerStop(gt_VoidThrasherAttacks);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_artanis, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_kerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libVoiC_gf_CampaignAwardAchievement("SC2Epilogue01_1", gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_voidThrasherAttackCount < 6)) {
        libVoiC_gf_CampaignAwardAchievement("SC2Epilogue01_3", gv_pLAYER_01_USER);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_voidCorruptionDestroyed <= 3)) {
        libVoiC_gf_CampaignAwardAchievement("Mastery_Epilogue01", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D84C0C02"), IntToText(gv_voidThrasherAttackCount));
    TextExpressionSetToken("Param/Expression/4648AABB", "A", IntToText(gv_voidCorruptionDestroyed));
    TextExpressionSetToken("Param/Expression/4648AABB", "B", IntToText(gv_voidCorruptionTotal));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F235655D"), TextExpressionAssemble("Param/Expression/4648AABB"));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA50712A6_g;
    int autoA50712A6_u;
    unit autoA50712A6_var;
    unitgroup autoFEECDEF9_g;
    int autoFEECDEF9_u;
    unit autoFEECDEF9_var;
    unitgroup auto2905E312_g;
    int auto2905E312_u;
    unit auto2905E312_var;

    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_AIUpgradesHardBrutal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesCasualNormal, true, false);
    }
    AINearestTownBullyRebuild(gv_pLAYER_05_VOIDFORCES, true);
    AINearestTownBullyRebuild(gv_pLAYER_06_VOIDFORCES, true);
    AINearestTownBullyRebuild(gv_pLAYER_07_VOIDFORCES, true);
    AINearestTownBullyRebuild(gv_pLAYER_08_RAYNOREXPANSIONS, true);
    AINearestTownLimitWaveGather(gv_pLAYER_08_RAYNOREXPANSIONS, true);
    AINearestTownBullyRebuild(gv_pLAYER_09_KERRIGANEXPANSIONS, true);
    AINearestTownLimitWaveGather(gv_pLAYER_09_KERRIGANEXPANSIONS, true);
    autoA50712A6_g = UnitGroup("VoidRift", gv_pLAYER_05_VOIDFORCES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA50712A6_u = UnitGroupCount(autoA50712A6_g, c_unitCountAll);
    for (;; autoA50712A6_u -= 1) {
        autoA50712A6_var = UnitGroupUnitFromEnd(autoA50712A6_g, autoA50712A6_u);
        if (autoA50712A6_var == null) { break; }
        libNtve_gf_DeclareNextTown(gv_pLAYER_05_VOIDFORCES, UnitGetPosition(autoA50712A6_var));
    }
    autoFEECDEF9_g = UnitGroup("VoidRift", gv_pLAYER_06_VOIDFORCES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFEECDEF9_u = UnitGroupCount(autoFEECDEF9_g, c_unitCountAll);
    for (;; autoFEECDEF9_u -= 1) {
        autoFEECDEF9_var = UnitGroupUnitFromEnd(autoFEECDEF9_g, autoFEECDEF9_u);
        if (autoFEECDEF9_var == null) { break; }
        libNtve_gf_DeclareNextTown(gv_pLAYER_06_VOIDFORCES, UnitGetPosition(autoFEECDEF9_var));
    }
    auto2905E312_g = UnitGroup("VoidRift", gv_pLAYER_07_VOIDFORCES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2905E312_u = UnitGroupCount(auto2905E312_g, c_unitCountAll);
    for (;; auto2905E312_u -= 1) {
        auto2905E312_var = UnitGroupUnitFromEnd(auto2905E312_g, auto2905E312_u);
        if (auto2905E312_var == null) { break; }
        libNtve_gf_DeclareNextTown(gv_pLAYER_07_VOIDFORCES, UnitGetPosition(auto2905E312_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI Attack Waves Vs. Player
//--------------------------------------------------------------------------------------------------
bool gt_StartAIAttackWavesVsPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_runall();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIAttackWavesVsPlayer_Init () {
    gt_StartAIAttackWavesVsPlayer = TriggerCreate("gt_StartAIAttackWavesVsPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto86CDF707_g;
    int auto86CDF707_var;
    playergroup auto91E8FD04_g;
    int auto91E8FD04_var;
    playergroup autoC0891019_g;
    int autoC0891019_var;
    playergroup autoF55A04DA_g;
    int autoF55A04DA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    auto86CDF707_g = gv_enemyPlayerGroup;
    auto86CDF707_var = -1;
    while (true) {
        auto86CDF707_var = PlayerGroupNextPlayer(auto86CDF707_g, auto86CDF707_var);
        if (auto86CDF707_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto86CDF707_var, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto86CDF707_var, "TerranVehicleAndShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto86CDF707_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto86CDF707_var, "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto86CDF707_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto86CDF707_var, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto86CDF707_var, "ProtossAirWeaponsLevel1", 1);
    }
    auto91E8FD04_g = gv_friendlyPlayerGroup;
    auto91E8FD04_var = -1;
    while (true) {
        auto91E8FD04_var = PlayerGroupNextPlayer(auto91E8FD04_g, auto91E8FD04_var);
        if (auto91E8FD04_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto91E8FD04_var, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto91E8FD04_var, "TerranVehicleAndShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto91E8FD04_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto91E8FD04_var, "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto91E8FD04_var, "ZergFlyerWeaponsLevel1", 1);
    }
    Wait(600.0, c_timeAI);
    autoC0891019_g = gv_enemyPlayerGroup;
    autoC0891019_var = -1;
    while (true) {
        autoC0891019_var = PlayerGroupNextPlayer(autoC0891019_g, autoC0891019_var);
        if (autoC0891019_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC0891019_var, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC0891019_var, "TerranVehicleAndShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC0891019_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC0891019_var, "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC0891019_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC0891019_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC0891019_var, "ProtossShieldsLevel1", 1);
    }
    autoF55A04DA_g = gv_friendlyPlayerGroup;
    autoF55A04DA_var = -1;
    while (true) {
        autoF55A04DA_var = PlayerGroupNextPlayer(autoF55A04DA_g, autoF55A04DA_var);
        if (autoF55A04DA_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF55A04DA_var, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoF55A04DA_var, "TerranVehicleAndShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoF55A04DA_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoF55A04DA_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesCasualNormal_Init () {
    gt_AIUpgradesCasualNormal = TriggerCreate("gt_AIUpgradesCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBAA34D00_g;
    int autoBAA34D00_var;
    playergroup auto71CA0775_g;
    int auto71CA0775_var;
    playergroup autoCD3B22D6_g;
    int autoCD3B22D6_var;
    playergroup autoDAF940A8_g;
    int autoDAF940A8_var;
    playergroup autoB45EF161_g;
    int autoB45EF161_var;
    playergroup autoDAE11CC3_g;
    int autoDAE11CC3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    autoBAA34D00_g = gv_enemyPlayerGroup;
    autoBAA34D00_var = -1;
    while (true) {
        autoBAA34D00_var = PlayerGroupNextPlayer(autoBAA34D00_g, autoBAA34D00_var);
        if (autoBAA34D00_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoBAA34D00_var, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBAA34D00_var, "TerranVehicleAndShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBAA34D00_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBAA34D00_var, "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBAA34D00_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBAA34D00_var, "ProtossGroundWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoBAA34D00_var, "ProtossAirWeaponsLevel2", 1);
    }
    auto71CA0775_g = gv_friendlyPlayerGroup;
    auto71CA0775_var = -1;
    while (true) {
        auto71CA0775_var = PlayerGroupNextPlayer(auto71CA0775_g, auto71CA0775_var);
        if (auto71CA0775_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto71CA0775_var, "TerranInfantryWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto71CA0775_var, "TerranVehicleAndShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto71CA0775_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto71CA0775_var, "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto71CA0775_var, "ZergFlyerWeaponsLevel2", 1);
    }
    Wait(480.0, c_timeAI);
    autoCD3B22D6_g = gv_enemyPlayerGroup;
    autoCD3B22D6_var = -1;
    while (true) {
        autoCD3B22D6_var = PlayerGroupNextPlayer(autoCD3B22D6_g, autoCD3B22D6_var);
        if (autoCD3B22D6_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoCD3B22D6_var, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCD3B22D6_var, "TerranVehicleAndShipArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCD3B22D6_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCD3B22D6_var, "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCD3B22D6_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCD3B22D6_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCD3B22D6_var, "ProtossShieldsLevel2", 1);
    }
    autoDAF940A8_g = gv_friendlyPlayerGroup;
    autoDAF940A8_var = -1;
    while (true) {
        autoDAF940A8_var = PlayerGroupNextPlayer(autoDAF940A8_g, autoDAF940A8_var);
        if (autoDAF940A8_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoDAF940A8_var, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoDAF940A8_var, "TerranVehicleAndShipArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoDAF940A8_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoDAF940A8_var, "ZergFlyerArmorsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    autoB45EF161_g = gv_enemyPlayerGroup;
    autoB45EF161_var = -1;
    while (true) {
        autoB45EF161_var = PlayerGroupNextPlayer(autoB45EF161_g, autoB45EF161_var);
        if (autoB45EF161_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoB45EF161_var, "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoB45EF161_var, "TerranVehicleAndShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoB45EF161_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoB45EF161_var, "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoB45EF161_var, "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoB45EF161_var, "ProtossGroundWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoB45EF161_var, "ProtossAirWeaponsLevel3", 1);
    }
    autoDAE11CC3_g = gv_friendlyPlayerGroup;
    autoDAE11CC3_var = -1;
    while (true) {
        autoDAE11CC3_var = PlayerGroupNextPlayer(autoDAE11CC3_g, autoDAE11CC3_var);
        if (autoDAE11CC3_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoDAE11CC3_var, "TerranInfantryWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoDAE11CC3_var, "TerranVehicleAndShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoDAE11CC3_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoDAE11CC3_var, "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoDAE11CC3_var, "ZergFlyerWeaponsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHardBrutal_Init () {
    gt_AIUpgradesHardBrutal = TriggerCreate("gt_AIUpgradesHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov Dies
//--------------------------------------------------------------------------------------------------
bool gt_StukovDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_HandleHeroDeathVoid(gv_stukov, null, -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StukovDies_Init () {
    gt_StukovDies = TriggerCreate("gt_StukovDies_Func");
    TriggerAddEventUnitDied(gt_StukovDies, UnitRefFromVariable("gv_stukov"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov Revives After Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_StukovRevivesAfterCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeAI);
    AISetUnitScriptControlled(gv_stukov, false);
    TriggerExecute(gt_UpdateStukovDefendRegion, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StukovRevivesAfterCooldown_Init () {
    gt_StukovRevivesAfterCooldown = TriggerCreate("gt_StukovRevivesAfterCooldown_Func");
    TriggerAddEventUnitRevive(gt_StukovRevivesAfterCooldown, UnitRefFromVariable("gv_stukov"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Stukov Defend Region
//--------------------------------------------------------------------------------------------------
bool gt_UpdateStukovDefendRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_defendRegion;

    // Automatic Variable Declarations
    int autoE28C5289_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_stukov) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE28C5289_val = gv_raynorProgressCount;
    if (autoE28C5289_val == 1) {
        lv_defendRegion = RegionFromId(26);
    }
    else if (autoE28C5289_val == 2) {
        lv_defendRegion = RegionFromId(28);
    }
    else if (autoE28C5289_val == 3) {
        lv_defendRegion = RegionFromId(29);
    }
    else {
        lv_defendRegion = RegionFromId(27);
    }
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_KERRIGAN, RegionGetCenter(lv_defendRegion));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_03_KERRIGAN, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_KERRIGAN, RegionGetCenter(lv_defendRegion), false);
    AIAttackWaveUseUnit(gv_pLAYER_03_KERRIGAN, gv_stukov);
    AIAttackWaveSend(gv_pLAYER_03_KERRIGAN, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateStukovDefendRegion_Init () {
    gt_UpdateStukovDefendRegion = TriggerCreate("gt_UpdateStukovDefendRegion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov Spell AI
//--------------------------------------------------------------------------------------------------
bool gt_StukovSpellAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_victim;
    unitgroup lv_candidates;
    unit lv_indexUnit;
    unit lv_lastAttacker;

    // Automatic Variable Declarations
    unitgroup auto436C441D_g;
    int auto436C441D_u;
    unitgroup auto7456BF0F_g;
    int auto7456BF0F_u;
    unit auto7456BF0F_var;
    unitgroup auto10853411_g;
    int auto10853411_u;
    unit auto10853411_var;

    // Variable Initialization
    lv_candidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_stukov) == true)) {
            lv_lastAttacker = AILastAttacker(gv_stukov);
            lv_candidates = gf_EnemiesWithinStukovRange(gv_stukov, 10.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
            auto436C441D_g = lv_candidates;
            auto436C441D_u = UnitGroupCount(auto436C441D_g, c_unitCountAll);
            for (;; auto436C441D_u -= 1) {
                lv_indexUnit = UnitGroupUnitFromEnd(auto436C441D_g, auto436C441D_u);
                if (lv_indexUnit == null) { break; }
                if ((libNtve_gf_UnitIsInvulnerable(lv_indexUnit) == true)) {
                    UnitGroupRemove(lv_candidates, lv_indexUnit);
                }

            }
            if ((UnitGroupCount(lv_candidates, c_unitCountAlive) > 0)) {
                if ((UnitAbilityCheck(gv_stukov, "StukovInfestedTerrans", true) == true) && (UnitCheckAbilCmdState(gv_stukov, AbilityCommand("StukovInfestedTerrans", 0), c_cmdStateCooldown) == false) && (UnitGroupCount(lv_candidates, c_unitCountAlive) >= 1)) {
                    UnitGroupRemoveUnitGroup(lv_candidates, gf_EnemiesWithinStukovRange(gv_stukov, 2.0, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))));
                    if ((UnitGroupCount(lv_candidates, c_unitCountAlive) >= 1)) {
                        lv_victim = UnitGroupRandomUnit(lv_candidates, c_unitCountAlive);
                        auto7456BF0F_g = lv_candidates;
                        auto7456BF0F_u = UnitGroupCount(auto7456BF0F_g, c_unitCountAll);
                        for (;; auto7456BF0F_u -= 1) {
                            auto7456BF0F_var = UnitGroupUnitFromEnd(auto7456BF0F_g, auto7456BF0F_u);
                            if (auto7456BF0F_var == null) { break; }
                            if ((UnitGetPropertyFixed(auto7456BF0F_var, c_unitPropLife, c_unitPropCurrent) > 50.0)) {
                                lv_victim = auto7456BF0F_var;
                                break;
                            }

                        }
                        libNtve_gf_AICast(gv_stukov, OrderTargetingPoint(AbilityCommand("StukovInfestedTerrans", 0), UnitGetPosition(lv_victim)));
                    }

                }
                else {
                    lv_victim = UnitGroupRandomUnit(lv_candidates, c_unitCountAlive);
                    auto10853411_g = lv_candidates;
                    auto10853411_u = UnitGroupCount(auto10853411_g, c_unitCountAll);
                    for (;; auto10853411_u -= 1) {
                        auto10853411_var = UnitGroupUnitFromEnd(auto10853411_g, auto10853411_u);
                        if (auto10853411_var == null) { break; }
                        if ((UnitGetPropertyFixed(auto10853411_var, c_unitPropLife, c_unitPropCurrent) >= 200.0)) {
                            lv_victim = auto10853411_var;
                            break;
                        }

                    }
                    if ((UnitAbilityCheck(gv_stukov, "DevastatingShot", true) == true) && (UnitCheckAbilCmdState(gv_stukov, AbilityCommand("DevastatingShot", 0), c_cmdStateCooldown) == false)) {
                        libNtve_gf_AICast(gv_stukov, OrderTargetingUnit(AbilityCommand("DevastatingShot", 0), lv_victim));
                    }

                }
            }

        }

        Wait(5.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StukovSpellAI_Init () {
    gt_StukovSpellAI = TriggerCreate("gt_StukovSpellAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Dies
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_HandleHeroDeathVoid(gv_kerrigan, null, -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDies_Init () {
    gt_KerriganDies = TriggerCreate("gt_KerriganDies_Func");
    TriggerAddEventUnitDied(gt_KerriganDies, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Revives After Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_KerriganRevivesAfterCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeAI);
    AISetUnitScriptControlled(gv_kerrigan, false);
    TriggerExecute(gt_UpdateKerriganDefendRegion, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganRevivesAfterCooldown_Init () {
    gt_KerriganRevivesAfterCooldown = TriggerCreate("gt_KerriganRevivesAfterCooldown_Func");
    TriggerAddEventUnitRevive(gt_KerriganRevivesAfterCooldown, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Kerrigan Defend Region
//--------------------------------------------------------------------------------------------------
bool gt_UpdateKerriganDefendRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_defendRegion;

    // Automatic Variable Declarations
    int auto4595B700_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4595B700_val = gv_kerriganProgressCount;
    if (auto4595B700_val == 1) {
        lv_defendRegion = RegionFromId(32);
    }
    else if (auto4595B700_val == 2) {
        lv_defendRegion = RegionFromId(31);
    }
    else if (auto4595B700_val == 3) {
        lv_defendRegion = RegionFromId(30);
    }
    else {
        lv_defendRegion = RegionFromId(33);
    }
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_KERRIGAN, RegionGetCenter(lv_defendRegion));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_03_KERRIGAN, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_KERRIGAN, RegionGetCenter(lv_defendRegion), false);
    AIAttackWaveUseUnit(gv_pLAYER_03_KERRIGAN, gv_kerrigan);
    AIAttackWaveSend(gv_pLAYER_03_KERRIGAN, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateKerriganDefendRegion_Init () {
    gt_UpdateKerriganDefendRegion = TriggerCreate("gt_UpdateKerriganDefendRegion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Spell AI
//--------------------------------------------------------------------------------------------------
bool gt_KerriganSpellAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_victim;
    unitgroup lv_candidates;
    unit lv_indexUnit;
    unit lv_lastAttacker;

    // Automatic Variable Declarations
    unitgroup auto5C87A617_g;
    int auto5C87A617_u;
    unitgroup auto08ED8A09_g;
    int auto08ED8A09_u;
    unit auto08ED8A09_var;
    unitgroup autoB277536F_g;
    int autoB277536F_u;
    unit autoB277536F_var;

    // Variable Initialization
    lv_candidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(gv_kerrigan) == true)) {
            lv_lastAttacker = AILastAttacker(gv_kerrigan);
            lv_candidates = gf_EnemiesWithinKerriganRange(gv_kerrigan, 10.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
            auto5C87A617_g = lv_candidates;
            auto5C87A617_u = UnitGroupCount(auto5C87A617_g, c_unitCountAll);
            for (;; auto5C87A617_u -= 1) {
                lv_indexUnit = UnitGroupUnitFromEnd(auto5C87A617_g, auto5C87A617_u);
                if (lv_indexUnit == null) { break; }
                if ((libNtve_gf_UnitIsInvulnerable(lv_indexUnit) == true)) {
                    UnitGroupRemove(lv_candidates, lv_indexUnit);
                }

            }
            if ((UnitGroupCount(lv_candidates, c_unitCountAlive) > 0)) {
                if ((UnitAbilityCheck(gv_kerrigan, "PsionicLift", true) == true) && (UnitCheckAbilCmdState(gv_kerrigan, AbilityCommand("PsionicLift", 0), c_cmdStateCooldown) == false) && (UnitGroupCount(lv_candidates, c_unitCountAlive) >= 5)) {
                    UnitGroupRemoveUnitGroup(lv_candidates, gf_EnemiesWithinKerriganRange(gv_kerrigan, 2.0, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))));
                    if ((UnitGroupCount(lv_candidates, c_unitCountAlive) >= 1)) {
                        lv_victim = UnitGroupRandomUnit(lv_candidates, c_unitCountAlive);
                        auto08ED8A09_g = lv_candidates;
                        auto08ED8A09_u = UnitGroupCount(auto08ED8A09_g, c_unitCountAll);
                        for (;; auto08ED8A09_u -= 1) {
                            auto08ED8A09_var = UnitGroupUnitFromEnd(auto08ED8A09_g, auto08ED8A09_u);
                            if (auto08ED8A09_var == null) { break; }
                            if ((UnitGetPropertyFixed(auto08ED8A09_var, c_unitPropLife, c_unitPropCurrent) > 50.0)) {
                                lv_victim = auto08ED8A09_var;
                                break;
                            }

                        }
                        libNtve_gf_AICast(gv_kerrigan, OrderTargetingPoint(AbilityCommand("PsionicLift", 0), UnitGetPosition(lv_victim)));
                    }

                }
                else {
                    lv_victim = UnitGroupRandomUnit(lv_candidates, c_unitCountAlive);
                    autoB277536F_g = lv_candidates;
                    autoB277536F_u = UnitGroupCount(autoB277536F_g, c_unitCountAll);
                    for (;; autoB277536F_u -= 1) {
                        autoB277536F_var = UnitGroupUnitFromEnd(autoB277536F_g, autoB277536F_u);
                        if (autoB277536F_var == null) { break; }
                        if ((UnitGetPropertyFixed(autoB277536F_var, c_unitPropLife, c_unitPropCurrent) >= 200.0)) {
                            lv_victim = autoB277536F_var;
                            break;
                        }

                    }
                    if ((UnitAbilityCheck(gv_kerrigan, "MindBolt", true) == true) && (UnitCheckAbilCmdState(gv_kerrigan, AbilityCommand("MindBolt", 0), c_cmdStateCooldown) == false)) {
                        libNtve_gf_AICast(gv_kerrigan, OrderTargetingUnit(AbilityCommand("MindBolt", 0), lv_victim));
                    }

                }
            }

            if ((UnitAbilityCheck(gv_kerrigan, "PrimalHeal", true) == true) && (UnitCheckAbilCmdState(gv_kerrigan, AbilityCommand("PrimalHeal", 0), c_cmdStateCooldown) == false) && (UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0)) {
                libNtve_gf_AICast(gv_kerrigan, Order(AbilityCommand("PrimalHeal", 0)));
            }

        }

        Wait(5.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganSpellAI_Init () {
    gt_KerriganSpellAI = TriggerCreate("gt_KerriganSpellAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs Kerrigan Waves
//--------------------------------------------------------------------------------------------------
bool gt_VsKerriganWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto8BC6BC34_n = 10;
    int auto8BC6BC34_i;
    const int auto0D6A9423_n = 10;
    int auto0D6A9423_i;

    // Actions
    if (!runActions) {
        return true;
    }

    cai_wave_enable(2, gv_pLAYER_07_VOIDFORCES, true);
    for (auto8BC6BC34_i = 1; auto8BC6BC34_i <= auto8BC6BC34_n; auto8BC6BC34_i += 1) {
        while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_voidThrasherAttackActive == false))) {
            Wait(1.0, c_timeAI);
        }
        cai_wave_run(2, gv_pLAYER_07_VOIDFORCES, PlayerGroupSingle(gv_pLAYER_03_KERRIGAN), false);
        Wait(40.0, c_timeAI);
    }
    cai_wave_enable(3, gv_pLAYER_07_VOIDFORCES, true);
    for (auto0D6A9423_i = 1; auto0D6A9423_i <= auto0D6A9423_n; auto0D6A9423_i += 1) {
        while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_voidThrasherAttackActive == false))) {
            Wait(1.0, c_timeAI);
        }
        cai_wave_run(3, gv_pLAYER_07_VOIDFORCES, PlayerGroupSingle(gv_pLAYER_03_KERRIGAN), false);
        Wait(40.0, c_timeAI);
    }
    cai_wave_enable(4, gv_pLAYER_07_VOIDFORCES, true);
    while ((libVCMI_gf_GameIsOver() == false)) {
        while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_voidThrasherAttackActive == false))) {
            Wait(1.0, c_timeAI);
        }
        cai_wave_run(4, gv_pLAYER_07_VOIDFORCES, PlayerGroupSingle(gv_pLAYER_03_KERRIGAN), false);
        Wait(40.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsKerriganWaves_Init () {
    gt_VsKerriganWaves = TriggerCreate("gt_VsKerriganWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vs Raynor Waves
//--------------------------------------------------------------------------------------------------
bool gt_VsRaynorWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6F6EACD1_n = 10;
    int auto6F6EACD1_i;
    const int auto41457354_n = 10;
    int auto41457354_i;

    // Actions
    if (!runActions) {
        return true;
    }

    cai_wave_enable(1, gv_pLAYER_06_VOIDFORCES, true);
    for (auto6F6EACD1_i = 1; auto6F6EACD1_i <= auto6F6EACD1_n; auto6F6EACD1_i += 1) {
        while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_voidThrasherAttackActive == false))) {
            Wait(1.0, c_timeAI);
        }
        cai_wave_run(1, gv_pLAYER_06_VOIDFORCES, PlayerGroupSingle(gv_pLAYER_02_RAYNOR), false);
        Wait(40.0, c_timeAI);
    }
    cai_wave_enable(2, gv_pLAYER_06_VOIDFORCES, true);
    for (auto41457354_i = 1; auto41457354_i <= auto41457354_n; auto41457354_i += 1) {
        while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_voidThrasherAttackActive == false))) {
            Wait(1.0, c_timeAI);
        }
        cai_wave_run(2, gv_pLAYER_06_VOIDFORCES, PlayerGroupSingle(gv_pLAYER_02_RAYNOR), false);
        Wait(40.0, c_timeAI);
    }
    cai_wave_enable(3, gv_pLAYER_06_VOIDFORCES, true);
    while ((libVCMI_gf_GameIsOver() == false)) {
        while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_voidThrasherAttackActive == false))) {
            Wait(1.0, c_timeAI);
        }
        cai_wave_run(3, gv_pLAYER_06_VOIDFORCES, PlayerGroupSingle(gv_pLAYER_02_RAYNOR), false);
        Wait(40.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VsRaynorWaves_Init () {
    gt_VsRaynorWaves = TriggerCreate("gt_VsRaynorWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Waves
//--------------------------------------------------------------------------------------------------
bool gt_KerriganWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC6571D47_val;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            Wait(1.0, c_timeAI);
        }
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_KERRIGAN, PointFromId(2239));
        AIAttackWaveSetGatherPoint(gv_pLAYER_03_KERRIGAN, PointFromId(602));
        AIAttackWaveAddWaypoint(gv_pLAYER_03_KERRIGAN, PointFromId(605), false);
        autoC6571D47_val = gv_kerriganProgressCount;
        if (autoC6571D47_val == 0) {
            AIAttackWaveAddUnits4(6, 6, 6, 6, "HotSRaptor");
            AIAttackWaveAddUnits4(2, 2, 2, 2, "HydraliskImpaler");
        }
        else if (autoC6571D47_val == 1) {
            AIAttackWaveAddUnits4(6, 6, 6, 6, "HotSRaptor");
            AIAttackWaveAddUnits4(3, 3, 3, 3, "HydraliskImpaler");
            AIAttackWaveAddUnits4(1, 1, 1, 1, "Queen");
        }
        else if (autoC6571D47_val == 2) {
            AIAttackWaveAddUnits4(6, 6, 6, 6, "HotSRaptor");
            AIAttackWaveAddUnits4(3, 3, 3, 3, "HydraliskImpaler");
            AIAttackWaveAddUnits4(2, 2, 2, 2, "RoachVile");
            AIAttackWaveAddUnits4(1, 1, 1, 1, "Queen");
        }
        else if (autoC6571D47_val == 3) {
            AIAttackWaveAddUnits4(6, 6, 6, 6, "HotSRaptor");
            AIAttackWaveAddUnits4(3, 3, 3, 3, "HydraliskImpaler");
            AIAttackWaveAddUnits4(2, 2, 2, 2, "RoachVile");
            AIAttackWaveAddUnits4(1, 1, 1, 1, "Queen");
        }
        else {
        }
        AIAttackWaveSend(gv_pLAYER_03_KERRIGAN, 150, false);
        if ((gv_bonusObjectiveComplete03 == true)) {
            AIAttackWaveSetTargetPoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(678));
            AIAttackWaveSetGatherPoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(41));
            AIAttackWaveAddWaypoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(605), false);
            AIAttackWaveAddUnits4(4, 4, 4, 4, "MutaliskBroodlord");
            AIAttackWaveAddUnits4(4, 4, 4, 4, "HotSRaptor");
            AIAttackWaveSend(gv_pLAYER_09_KERRIGANEXPANSIONS, 150, false);
        }

        if ((gv_bonusObjectiveComplete04 == true)) {
            AIAttackWaveSetTargetPoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(678));
            AIAttackWaveSetGatherPoint(gv_pLAYER_09_KERRIGANEXPANSIONS, PointFromId(42));
            AIAttackWaveAddUnits4(1, 1, 1, 1, "HotSNoxious");
            AIAttackWaveAddUnits4(8, 8, 8, 8, "HotSRaptor");
            AIAttackWaveSend(gv_pLAYER_09_KERRIGANEXPANSIONS, 150, false);
        }

        Wait(60.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganWaves_Init () {
    gt_KerriganWaves = TriggerCreate("gt_KerriganWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Waves
//--------------------------------------------------------------------------------------------------
bool gt_RaynorWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF56DE8CD_val;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            Wait(1.0, c_timeAI);
        }
        AIAttackWaveSetTargetPoint(gv_pLAYER_02_RAYNOR, PointFromId(2239));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_RAYNOR, PointFromId(601));
        AIAttackWaveAddWaypoint(gv_pLAYER_02_RAYNOR, PointFromId(606), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_RAYNOR, PointFromId(1078), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_RAYNOR, PointFromId(612), false);
        autoF56DE8CD_val = gv_raynorProgressCount;
        if (autoF56DE8CD_val == 0) {
            AIAttackWaveAddUnits4(4, 4, 4, 4, "WarPig");
            AIAttackWaveAddUnits4(1, 1, 1, 1, "HammerSecurity");
        }
        else if (autoF56DE8CD_val == 1) {
            AIAttackWaveAddUnits4(6, 6, 6, 6, "WarPig");
            AIAttackWaveAddUnits4(1, 1, 1, 1, "SpartanCompany");
            AIAttackWaveAddUnits4(1, 1, 1, 1, "HammerSecurity");
        }
        else if (autoF56DE8CD_val == 2) {
            AIAttackWaveAddUnits4(6, 6, 6, 6, "WarPig");
            AIAttackWaveAddUnits4(2, 2, 2, 2, "SpartanCompany");
            AIAttackWaveAddUnits4(1, 1, 1, 1, "HammerSecurity");
        }
        else if (autoF56DE8CD_val == 3) {
            AIAttackWaveAddUnits4(6, 6, 6, 6, "WarPig");
            AIAttackWaveAddUnits4(2, 2, 2, 2, "SpartanCompany");
            AIAttackWaveAddUnits4(1, 1, 1, 1, "HammerSecurity");
        }
        else {
        }
        AIAttackWaveSend(gv_pLAYER_02_RAYNOR, 140, false);
        if ((gv_bonusObjectiveComplete01 == true)) {
            AIAttackWaveSetTargetPoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(678));
            AIAttackWaveSetGatherPoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(40));
            AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(240), false);
            AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(606), false);
            AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(1078), false);
            AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(612), false);
            AIAttackWaveAddUnits4(2, 2, 2, 2, "Medivac");
            AIAttackWaveAddUnits4(6, 6, 6, 6, "Marine");
            AIAttackWaveSend(gv_pLAYER_08_RAYNOREXPANSIONS, 140, false);
        }

        if ((gv_bonusObjectiveComplete02 == true)) {
            AIAttackWaveSetTargetPoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(678));
            AIAttackWaveSetGatherPoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(39));
            AIAttackWaveAddWaypoint(gv_pLAYER_08_RAYNOREXPANSIONS, PointFromId(612), false);
            AIAttackWaveAddUnits4(1, 1, 1, 1, "ThorAP");
            AIAttackWaveAddUnits4(2, 2, 2, 2, "Goliath");
            AIAttackWaveSend(gv_pLAYER_08_RAYNOREXPANSIONS, 140, false);
        }

        Wait(60.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorWaves_Init () {
    gt_RaynorWaves = TriggerCreate("gt_RaynorWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Attacks
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libLotv_gf_DifficultyValueFixed2(30.0, 30.0, 15.0, 15.0), c_timeAI);
    gf_SpawnFirstVoidThrasherAttackAI(gv_pLAYER_02_RAYNOR, PointFromId(1081));
    Wait(libLotv_gf_DifficultyValueFixed2(210.0, 210.0, 180.0, 150.0), c_timeAI);
    gf_SpawnVoidThrasherAttackAI(gv_pLAYER_03_KERRIGAN);
    Wait(libLotv_gf_DifficultyValueFixed2(210.0, 210.0, 180.0, 150.0), c_timeAI);
    gf_SpawnVoidThrasherAttackAI(gv_pLAYER_02_RAYNOR);
    Wait(libLotv_gf_DifficultyValueFixed2(210.0, 210.0, 180.0, 150.0), c_timeAI);
    gf_SpawnVoidThrasherAttackAI(gv_pLAYER_03_KERRIGAN);
    Wait(libLotv_gf_DifficultyValueFixed2(210.0, 210.0, 180.0, 150.0), c_timeAI);
    gf_SpawnVoidThrasherAttackAI(gv_pLAYER_02_RAYNOR);
    Wait(libLotv_gf_DifficultyValueFixed2(210.0, 210.0, 180.0, 150.0), c_timeAI);
    while (true) {
        gf_SpawnVoidThrasherAttackAI(gv_pLAYER_03_KERRIGAN);
        Wait(libLotv_gf_DifficultyValueFixed2(180.0, 180.0, 150.0, 120.0), c_timeAI);
        gf_SpawnVoidThrasherAttackAI(gv_pLAYER_02_RAYNOR);
        Wait(libLotv_gf_DifficultyValueFixed2(180.0, 180.0, 150.0, 120.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherAttacks_Init () {
    gt_VoidThrasherAttacks = TriggerCreate("gt_VoidThrasherAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Attack Sent Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherAttackSentTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2C228772_val;
    int auto662D3A9D_val;
    int autoA981A58A_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto2C228772_val = gv_voidThrasherAttackTarget;
    if (auto2C228772_val == gv_pLAYER_02_RAYNOR) {
        auto662D3A9D_val = gv_voidThrasherAttackCountvsRaynor;
        if (auto662D3A9D_val == 1) {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00025", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto662D3A9D_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00026", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto662D3A9D_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00027", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto662D3A9D_val == 4) {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00028", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00029", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else if (auto2C228772_val == gv_pLAYER_03_KERRIGAN) {
        autoA981A58A_val = gv_voidThrasherAttackCountvsKerrigan;
        if (autoA981A58A_val == 1) {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00030", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoA981A58A_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00031", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoA981A58A_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00032", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (autoA981A58A_val == 4) {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00033", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00034", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(4.0, c_timeAI);
    if ((gv_voidThrasherAttackTarget == gv_pLAYER_03_KERRIGAN)) {
        TriggerExecute(gt_RaynorDefendKerriganFrontLine, true, false);
    }
    else {
        TriggerExecute(gt_KerriganDefendRaynorFrontLine, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherAttackSentTransmissionQ_Init () {
    gt_VoidThrasherAttackSentTransmissionQ = TriggerCreate("gt_VoidThrasherAttackSentTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Attack At Front Line Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherAttackAtFrontLineTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto1C300B8C_val;
    int auto0885A8B9_val;
    int auto840F0644_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() == gv_voidThrasher))) {
            return false;
        }

        if (!((((gv_raynorProgressCount == 0) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(27)) == true)) || ((gv_raynorProgressCount == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(26)) == true)) || ((gv_raynorProgressCount == 2) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(28)) == true)) || ((gv_raynorProgressCount == 3) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(29)) == true)) || ((gv_kerriganProgressCount == 0) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(33)) == true)) || ((gv_kerriganProgressCount == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(32)) == true)) || ((gv_kerriganProgressCount == 2) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(31)) == true)) || ((gv_kerriganProgressCount == 3) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(30)) == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto1C300B8C_val = gv_voidThrasherAttackTarget;
    if (auto1C300B8C_val == gv_pLAYER_02_RAYNOR) {
        auto0885A8B9_val = gv_voidThrasherAttackCountvsRaynor;
        if (auto0885A8B9_val == 1) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00035", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto0885A8B9_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00036", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto0885A8B9_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00037", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00038", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else if (auto1C300B8C_val == gv_pLAYER_03_KERRIGAN) {
        auto840F0644_val = gv_voidThrasherAttackCountvsKerrigan;
        if (auto840F0644_val == 1) {
            libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00039", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto840F0644_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00040", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto840F0644_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00041", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00042", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherAttackAtFrontLineTransmissionQ_Init () {
    gt_VoidThrasherAttackAtFrontLineTransmissionQ = TriggerCreate("gt_VoidThrasherAttackAtFrontLineTransmissionQ_Func");
    TriggerAddEventUnitDamaged(gt_VoidThrasherAttackAtFrontLineTransmissionQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Attack At Base Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherAttackAtBaseTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto56C56802_val;
    int auto8E2FE2D9_val;
    int auto6290325E_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto56C56802_val = gv_voidThrasherAttackTarget;
    if (auto56C56802_val == gv_pLAYER_02_RAYNOR) {
        auto8E2FE2D9_val = gv_voidThrasherAttackCountvsRaynor;
        if (auto8E2FE2D9_val == 1) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00043", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto8E2FE2D9_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00044", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto8E2FE2D9_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00045", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00046", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else if (auto56C56802_val == gv_pLAYER_03_KERRIGAN) {
        auto6290325E_val = gv_voidThrasherAttackCountvsKerrigan;
        if (auto6290325E_val == 1) {
            libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00047", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto6290325E_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00048", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto6290325E_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00049", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00050", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherAttackAtBaseTransmissionQ_Init () {
    gt_VoidThrasherAttackAtBaseTransmissionQ = TriggerCreate("gt_VoidThrasherAttackAtBaseTransmissionQ_Func");
    TriggerAddEventUnitRegion(gt_VoidThrasherAttackAtBaseTransmissionQ, UnitRefFromVariable("gv_voidThrasher"), RegionFromId(2), true);
    TriggerAddEventUnitRegion(gt_VoidThrasherAttackAtBaseTransmissionQ, UnitRefFromVariable("gv_voidThrasher"), RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Attack Stopped Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherAttackStoppedTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto05468B89_val;
    int auto4D0C7404_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_voidThrasherAttackCount == 1)) {
        TriggerExecute(gt_FirstVoidThrasherDiesQ, true, false);
    }
    else {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        auto05468B89_val = gv_voidThrasherAttackCount;
        if (auto05468B89_val == 2) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00052", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto05468B89_val == 3) {
            libVCMI_gf_SendTransmissionCampaign(gv_stukov, "Mission_Epilogue01|Line00051", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto05468B89_val == 4) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00053", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto05468B89_val == 5) {
            libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00054", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto05468B89_val == 6) {
            libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00086", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto05468B89_val == 7) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00055", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (auto05468B89_val == 8) {
            libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00087", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            auto4D0C7404_val = RandomInt(1, 8);
            if (auto4D0C7404_val == 1) {
                libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00127", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto4D0C7404_val == 2) {
                libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00052", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto4D0C7404_val == 3) {
                libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00053", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto4D0C7404_val == 4) {
                libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00054", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto4D0C7404_val == 5) {
                libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00055", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto4D0C7404_val == 6) {
                libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue01|Line00086", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto4D0C7404_val == 7) {
                libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00087", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto4D0C7404_val == 8) {
                libVCMI_gf_SendTransmissionCampaign(gv_stukov, "Mission_Epilogue01|Line00051", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherAttackStoppedTransmissionQ_Init () {
    gt_VoidThrasherAttackStoppedTransmissionQ = TriggerCreate("gt_VoidThrasherAttackStoppedTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Dies
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidThrasherAttackActive = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherDies_Init () {
    gt_VoidThrasherDies = TriggerCreate("gt_VoidThrasherDies_Func");
    TriggerAddEventUnitDied(gt_VoidThrasherDies, UnitRefFromVariable("gv_voidThrasher"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Ability - Spawn Units
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherAbilitySpawnUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoDFD1DEEE_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_voidThrasher) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_NARUD, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_voidThrasher), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_voidThrasherSummonedUnits, c_unitCountAlive) <= (gv_voidThrasherSummonedUnitCap / 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoDFD1DEEE_val = gv_voidThrasherAttackCount;
    if (autoDFD1DEEE_val == 1) {
        TriggerExecute(gt_VoidThrasherSpawns01, true, true);
    }
    else if (autoDFD1DEEE_val == 2) {
        TriggerExecute(gt_VoidThrasherSpawns02, true, true);
    }
    else if (autoDFD1DEEE_val == 3) {
        TriggerExecute(gt_VoidThrasherSpawns03, true, true);
    }
    else if (autoDFD1DEEE_val == 4) {
        TriggerExecute(gt_VoidThrasherSpawns04, true, true);
    }
    else if (autoDFD1DEEE_val == 5) {
        TriggerExecute(gt_VoidThrasherSpawns05, true, true);
    }
    else {
        TriggerExecute(gt_VoidThrasherSpawns06, true, true);
    }
    Wait(15.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherAbilitySpawnUnits_Init () {
    gt_VoidThrasherAbilitySpawnUnits = TriggerCreate("gt_VoidThrasherAbilitySpawnUnits_Func");
    TriggerEnable(gt_VoidThrasherAbilitySpawnUnits, false);
    TriggerAddEventTimePeriodic(gt_VoidThrasherAbilitySpawnUnits, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawns 01
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawns01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7D37E798_n = 2;
    int auto7D37E798_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_voidThrasher) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto7D37E798_i = 1; auto7D37E798_i <= auto7D37E798_n; auto7D37E798_i += 1) {
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
        gf_VoidThrasherSpawnUnits("Zergling", 4);
        gf_VoidThrasherSpawnUnits("Zealot", 1);
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
        Wait(8.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawns01_Init () {
    gt_VoidThrasherSpawns01 = TriggerCreate("gt_VoidThrasherSpawns01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawns 02
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawns02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7AD85701_n = 2;
    int auto7AD85701_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto7AD85701_i = 1; auto7AD85701_i <= auto7AD85701_n; auto7AD85701_i += 1) {
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
        gf_VoidThrasherSpawnUnits("Marine", 4);
        gf_VoidThrasherSpawnUnits("Zealot", 1);
        gf_VoidThrasherSpawnUnits("Stalker", 1);
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
        Wait(8.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawns02_Init () {
    gt_VoidThrasherSpawns02 = TriggerCreate("gt_VoidThrasherSpawns02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawns 03
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawns03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto37F65B64_n = 2;
    int auto37F65B64_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto37F65B64_i = 1; auto37F65B64_i <= auto37F65B64_n; auto37F65B64_i += 1) {
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
        gf_VoidThrasherSpawnUnits("Marine", 4);
        gf_VoidThrasherSpawnUnits("Hydralisk", 2);
        gf_VoidThrasherSpawnUnits("Stalker", 1);
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
        Wait(8.0, c_timeAI);
    }
    gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
    gf_VoidThrasherSpawnUnits("Zergling", 4);
    gf_VoidThrasherSpawnUnits("SiegeTank", 1);
    gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawns03_Init () {
    gt_VoidThrasherSpawns03 = TriggerCreate("gt_VoidThrasherSpawns03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawns 04
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawns04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto5D656564_n = 2;
    int auto5D656564_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto5D656564_i = 1; auto5D656564_i <= auto5D656564_n; auto5D656564_i += 1) {
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
        gf_VoidThrasherSpawnUnits("Hydralisk", 4);
        gf_VoidThrasherSpawnUnits("Marauder", 2);
        gf_VoidThrasherSpawnUnits("Zealot", 1);
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
        Wait(8.0, c_timeAI);
    }
    gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
    gf_VoidThrasherSpawnUnits("Marine", 4);
    gf_VoidThrasherSpawnUnits("Immortal", 1);
    gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawns04_Init () {
    gt_VoidThrasherSpawns04 = TriggerCreate("gt_VoidThrasherSpawns04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawns 05
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawns05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto8E7262C9_n = 2;
    int auto8E7262C9_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto8E7262C9_i = 1; auto8E7262C9_i <= auto8E7262C9_n; auto8E7262C9_i += 1) {
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
        gf_VoidThrasherSpawnUnits("Zergling", 8);
        gf_VoidThrasherSpawnUnits("Marine", 4);
        gf_VoidThrasherSpawnUnits("Stalker", 2);
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
        Wait(8.0, c_timeAI);
    }
    gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
    gf_VoidThrasherSpawnUnits("Zealot", 2);
    gf_VoidThrasherSpawnUnits("Ultralisk", 1);
    gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawns05_Init () {
    gt_VoidThrasherSpawns05 = TriggerCreate("gt_VoidThrasherSpawns05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawns 06
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawns06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC53105CA_n = 2;
    int autoC53105CA_i;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_voidThrasher) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoC53105CA_i = 1; autoC53105CA_i <= autoC53105CA_n; autoC53105CA_i += 1) {
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
        gf_VoidThrasherSpawnUnits("Zergling", 4);
        gf_VoidThrasherSpawnUnits("Marine", 4);
        gf_VoidThrasherSpawnUnits("Stalker", 2);
        gf_VoidThrasherSpawnUnits("Mutalisk", 2);
        gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
        Wait(8.0, c_timeAI);
    }
    gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_On);
    gf_VoidThrasherSpawnUnits("Zealot", 2);
    gf_VoidThrasherSpawnUnits("Ultralisk", 1);
    gf_TurnVoidThrasherSpawnModeOnOff(ge_PRESETToggleOnOff_Off);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawns06_Init () {
    gt_VoidThrasherSpawns06 = TriggerCreate("gt_VoidThrasherSpawns06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Void Thrasher Spawns Attack
//--------------------------------------------------------------------------------------------------
bool gt_MakeVoidThrasherSpawnsAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackGroup;
    point lv_attackGatherPoint;

    // Automatic Variable Declarations
    unitgroup autoAA8579C6_g;
    int autoAA8579C6_u;
    unit autoAA8579C6_var;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_voidThrasher) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA8579C6_g = UnitGroup(null, gv_pLAYER_04_NARUD, RegionCircle(UnitGetPosition(gv_voidThrasher), 15.0), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAA8579C6_u = UnitGroupCount(autoAA8579C6_g, c_unitCountAll);
    for (;; autoAA8579C6_u -= 1) {
        autoAA8579C6_var = UnitGroupUnitFromEnd(autoAA8579C6_g, autoAA8579C6_u);
        if (autoAA8579C6_var == null) { break; }
        if ((UnitGetType(autoAA8579C6_var) != "ShadowCloudEpilogue01") && (AIIsNotUsableInWaves(autoAA8579C6_var) == false) && (AIUnitGetWave(autoAA8579C6_var) == null)) {
            UnitGroupAdd(lv_attackGroup, autoAA8579C6_var);
        }

    }
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) > 0)) {
        lv_attackGatherPoint = UnitGroupCenterOfGroup(lv_attackGroup);
        AIAttackWaveSetGatherPoint(gv_pLAYER_04_NARUD, lv_attackGatherPoint);
        if ((RegionContainsPoint(RegionFromId(13), lv_attackGatherPoint) == true)) {
            AIAttackWaveSetTargetPoint(gv_pLAYER_04_NARUD, PointFromId(444));
        }
        else if (true) {
            AIAttackWaveSetTargetPoint(gv_pLAYER_04_NARUD, PointFromId(445));
        }
        AIAttackWaveUseGroup(gv_pLAYER_04_NARUD, lv_attackGroup);
        AIAttackWaveSend(gv_pLAYER_04_NARUD, 0, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeVoidThrasherSpawnsAttack_Init () {
    gt_MakeVoidThrasherSpawnsAttack = TriggerCreate("gt_MakeVoidThrasherSpawnsAttack_Func");
    TriggerEnable(gt_MakeVoidThrasherSpawnsAttack, false);
    TriggerAddEventTimePeriodic(gt_MakeVoidThrasherSpawnsAttack, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawns Unit Group
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawnsUnitGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_voidThrasherSummonedUnits, EventUnitCreatedUnit());
    libVCMI_gf_SetUnitInfoTextCampaign(EventUnitCreatedUnit(), null, StringExternal("Param/Value/CE864FD2"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawnsUnitGroup_Init () {
    gt_VoidThrasherSpawnsUnitGroup = TriggerCreate("gt_VoidThrasherSpawnsUnitGroup_Func");
    TriggerAddEventUnitCreated(gt_VoidThrasherSpawnsUnitGroup, UnitRefFromVariable("gv_voidThrasher"), "NarudEpilogueTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Narud Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_NarudEngagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto337B6D1B_g;
    int auto337B6D1B_u;
    unit auto337B6D1B_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto337B6D1B_g = UnitGroup("VoidRift", c_playerAny, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto337B6D1B_u = UnitGroupCount(auto337B6D1B_g, c_unitCountAll);
    for (;; auto337B6D1B_u -= 1) {
        auto337B6D1B_var = UnitGroupUnitFromEnd(auto337B6D1B_g, auto337B6D1B_u);
        if (auto337B6D1B_var == null) { break; }
        gf_VoidRiftSpawnsInNarudBase(auto337B6D1B_var);
    }
    TriggerEnable(gt_VoidRiftSpawnsInNarudBase, true);
    TriggerEnable(gt_NarudAbilitySummonVoidRift, true);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A754CBF2"), null, UnitGetPosition(gv_narud));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_narud), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_narud, "Mission_Epilogue01|Line00056", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NarudEngagedQ_Init () {
    gt_NarudEngagedQ = TriggerCreate("gt_NarudEngagedQ_Func");
    TriggerAddEventUnitRegion(gt_NarudEngagedQ, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Narud Ability - Summon Void Rift
//--------------------------------------------------------------------------------------------------
bool gt_NarudAbilitySummonVoidRift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_riftIndex;

    // Automatic Variable Declarations
    int auto6EFAA729_ae;
    const int auto6EFAA729_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_NARUD, c_unitAllianceEnemy, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6EFAA729_ae = gv_narudRiftsMax;
    lv_riftIndex = 1;
    for ( ; ( (auto6EFAA729_ai >= 0 && lv_riftIndex <= auto6EFAA729_ae) || (auto6EFAA729_ai < 0 && lv_riftIndex >= auto6EFAA729_ae) ) ; lv_riftIndex += auto6EFAA729_ai ) {
        if ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (RegionContainsPoint(RegionFromId(11), gv_narudBaseRifts[lv_riftIndex].lv_point) == true) && (UnitIsAlive(gv_narudBaseRifts[lv_riftIndex].lv_unit) == false) && (TimerGetRemaining(gv_narudBaseRifts[lv_riftIndex].lv_deadTimer) == 0.0)) {
            UnitIssueOrder(gv_narud, OrderTargetingPoint(AbilityCommand("NarudVoidBuild", 1), gv_narudBaseRifts[lv_riftIndex].lv_point), c_orderQueueReplace);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NarudAbilitySummonVoidRift_Init () {
    gt_NarudAbilitySummonVoidRift = TriggerCreate("gt_NarudAbilitySummonVoidRift_Func");
    TriggerEnable(gt_NarudAbilitySummonVoidRift, false);
    TriggerAddEventTimePeriodic(gt_NarudAbilitySummonVoidRift, 7.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Narud Attacks LookAt
//--------------------------------------------------------------------------------------------------
bool gt_NarudAttacksLookAt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_lookingAtTarget;
    fixed lv_clampLeft;
    fixed lv_clamRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lookingAtTarget = true;
    lv_clampLeft = 35.0;
    lv_clamRight = 160.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitLookAtUnit(gv_narud, "SlowStanding", EventUnitTargetUnit(), "Ref_Center");
    while ((UnitIsAlive(EventUnitTargetUnit()) == true) && (EventUnitTargetUnit() == OrderGetTargetUnit(UnitOrder(gv_narud, 0)))) {
        if ((AngleBetweenPoints(EventUnitTargetPoint(), UnitGetPosition(EventUnit())) >= lv_clampLeft) && (AngleBetweenPoints(EventUnitTargetPoint(), UnitGetPosition(EventUnit())) <= lv_clamRight)) {
            if ((lv_lookingAtTarget == false)) {
                lv_lookingAtTarget = true;
                libNtve_gf_MakeUnitLookAtUnit(gv_narud, "SlowStanding", EventUnitTargetUnit(), "Ref_Center");
            }

        }
        else {
            if ((lv_lookingAtTarget == true)) {
                lv_lookingAtTarget = false;
                if ((AngleBetweenPoints(EventUnitTargetPoint(), UnitGetPosition(EventUnit())) <= lv_clampLeft)) {
                    libNtve_gf_MakeUnitLookAtPoint(gv_narud, "SlowStanding", PointWithOffsetPolar(UnitGetPosition(gv_narud), 20.0, 230.0));
                }
                else {
                    libNtve_gf_MakeUnitLookAtPoint(gv_narud, "SlowStanding", PointWithOffsetPolar(UnitGetPosition(gv_narud), 20.0, 330.0));
                }
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NarudAttacksLookAt_Init () {
    gt_NarudAttacksLookAt = TriggerCreate("gt_NarudAttacksLookAt_Func");
    TriggerAddEventUnitAbility(gt_NarudAttacksLookAt, UnitRefFromVariable("gv_narud"), AbilityCommand("attack", 0), c_abilAttackStageAttack, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Narud VoidRift LookAt
//--------------------------------------------------------------------------------------------------
bool gt_NarudVoidRiftLookAt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidRift;
    point lv_voidRiftPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_voidRift = EventUnitProgressUnit();
    lv_voidRiftPoint = UnitGetPosition(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(lv_voidRift, RegionFromId(11)) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_voidRift) == "VoidRift"))) {
            return false;
        }

        if (!((UnitGetOwner(lv_voidRift) == gv_pLAYER_04_NARUD))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitLookAtPoint(gv_narud, "SlowStanding", lv_voidRiftPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NarudVoidRiftLookAt_Init () {
    gt_NarudVoidRiftLookAt = TriggerCreate("gt_NarudVoidRiftLookAt_Func");
    TriggerAddEventUnitConstructProgress(gt_NarudVoidRiftLookAt, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Narud Idle ClearLookAt
//--------------------------------------------------------------------------------------------------
bool gt_NarudIdleClearLookAt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SimpleLookAtStop(gv_narud, "SlowStanding");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NarudIdleClearLookAt_Init () {
    gt_NarudIdleClearLookAt = TriggerCreate("gt_NarudIdleClearLookAt_Func");
    TriggerAddEventUnitBecomesIdle(gt_NarudIdleClearLookAt, UnitRefFromVariable("gv_narud"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Narud NotBuilding ClearLookAt
//--------------------------------------------------------------------------------------------------
bool gt_NarudNotBuildingClearLookAt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("VoidRift", gv_pLAYER_04_NARUD, RegionFromId(11), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((OrderGetAbilityCommand(UnitOrder(gv_narud, 0)) != AbilityCommand("attack", 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SimpleLookAtStop(gv_narud, "SlowStanding");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NarudNotBuildingClearLookAt_Init () {
    gt_NarudNotBuildingClearLookAt = TriggerCreate("gt_NarudNotBuildingClearLookAt_Func");
    TriggerAddEventTimePeriodic(gt_NarudNotBuildingClearLookAt, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Narud Rift Dies
//--------------------------------------------------------------------------------------------------
bool gt_NarudRiftDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_riftIndex;

    // Automatic Variable Declarations
    int auto35980865_ae;
    const int auto35980865_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(11)) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VoidRift"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto35980865_ae = gv_narudRiftsMax;
    lv_riftIndex = 1;
    for ( ; ( (auto35980865_ai >= 0 && lv_riftIndex <= auto35980865_ae) || (auto35980865_ai < 0 && lv_riftIndex >= auto35980865_ae) ) ; lv_riftIndex += auto35980865_ai ) {
        if ((gv_narudBaseRifts[lv_riftIndex].lv_unit == EventUnit())) {
            TimerStart(gv_narudBaseRifts[lv_riftIndex].lv_deadTimer, gv_narudRiftDeadTime, false, c_timeAI);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NarudRiftDies_Init () {
    gt_NarudRiftDies = TriggerCreate("gt_NarudRiftDies_Func");
    TriggerAddEventUnitDied(gt_NarudRiftDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Rift Started In Narud Base
//--------------------------------------------------------------------------------------------------
bool gt_VoidRiftStartedInNarudBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidRift;
    point lv_voidRiftPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_voidRift = EventUnitProgressUnit();
    lv_voidRiftPoint = UnitGetPosition(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(lv_voidRift, RegionFromId(11)) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_voidRift) == "VoidRift"))) {
            return false;
        }

        if (!((UnitGetOwner(lv_voidRift) == gv_pLAYER_04_NARUD))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SetUnitInfoTextCampaign(lv_voidRift, null, StringExternal("Param/Value/22AB7CF1"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidRiftStartedInNarudBase_Init () {
    gt_VoidRiftStartedInNarudBase = TriggerCreate("gt_VoidRiftStartedInNarudBase_Func");
    TriggerAddEventUnitConstructProgress(gt_VoidRiftStartedInNarudBase, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Rift Spawns In Narud Base
//--------------------------------------------------------------------------------------------------
bool gt_VoidRiftSpawnsInNarudBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidRift;
    point lv_voidRiftPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_voidRift = EventUnitProgressUnit();
    lv_voidRiftPoint = UnitGetPosition(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(lv_voidRift, RegionFromId(11)) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_voidRift) == "VoidRift"))) {
            return false;
        }

        if (!((UnitGetOwner(lv_voidRift) == gv_pLAYER_04_NARUD))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_NarudRiftSetUpNewUnit(lv_voidRift);
    Wait(2.0, c_timeAI);
    gf_VoidRiftSpawnsInNarudBase(lv_voidRift);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidRiftSpawnsInNarudBase_Init () {
    gt_VoidRiftSpawnsInNarudBase = TriggerCreate("gt_VoidRiftSpawnsInNarudBase_Func");
    TriggerEnable(gt_VoidRiftSpawnsInNarudBase, false);
    TriggerAddEventUnitConstructProgress(gt_VoidRiftSpawnsInNarudBase, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Raynor SCV
//--------------------------------------------------------------------------------------------------
bool gt_RespawnRaynorSCV_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("SCV", gv_pLAYER_02_RAYNOR, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < gv_raynorSCVMax))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_pLAYER_02_RAYNOR, PointFromId(308));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnRaynorSCV_Init () {
    gt_RespawnRaynorSCV = TriggerCreate("gt_RespawnRaynorSCV_Func");
    TriggerAddEventTimePeriodic(gt_RespawnRaynorSCV, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Forward Base 01 Setup
//--------------------------------------------------------------------------------------------------
bool gt_RaynorForwardBase01Setup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/ED3318F0"));
    gv_raynorProgressCount += 1;
    Wait(2.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_02_RAYNOR, PointFromId(330));
    UnitGroupAdd(lv_dropPodUnits01, UnitLastCreated());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(330), lv_dropPodUnits01, false, gv_pLAYER_02_RAYNOR);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, gv_pLAYER_02_RAYNOR, PointFromId(337));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(337), lv_dropPodUnits02, false, gv_pLAYER_02_RAYNOR);
    TriggerExecute(gt_RaynorForwardBase01SetupTransmissionQ, true, false);
    Wait(4.0, c_timeAI);
    TriggerExecute(gt_UpdateStukovDefendRegion, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, RegionFromId(5), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_NARUD, RegionFromId(5), false);
    AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(5), false);
    AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(5), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(5), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorForwardBase01Setup_Init () {
    gt_RaynorForwardBase01Setup = TriggerCreate("gt_RaynorForwardBase01Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Forward Base 02 Setup
//--------------------------------------------------------------------------------------------------
bool gt_RaynorForwardBase02Setup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/03DF13EC"));
    gv_raynorProgressCount += 1;
    Wait(2.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_02_RAYNOR, PointFromId(376));
    UnitGroupAdd(lv_dropPodUnits01, UnitLastCreated());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(376), lv_dropPodUnits01, false, gv_pLAYER_02_RAYNOR);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, gv_pLAYER_02_RAYNOR, PointFromId(378));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, gv_pLAYER_02_RAYNOR, PointFromId(378));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(378), lv_dropPodUnits02, false, gv_pLAYER_02_RAYNOR);
    TriggerExecute(gt_RaynorForwardBase02SetupTransmissionQ, true, false);
    Wait(4.0, c_timeAI);
    TriggerExecute(gt_UpdateStukovDefendRegion, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, RegionFromId(6), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_NARUD, RegionFromId(6), false);
    AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(6), false);
    AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(6), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(6), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorForwardBase02Setup_Init () {
    gt_RaynorForwardBase02Setup = TriggerCreate("gt_RaynorForwardBase02Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Forward Base 03 Setup
//--------------------------------------------------------------------------------------------------
bool gt_RaynorForwardBase03Setup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/8C001BA4"));
    gv_raynorProgressCount += 1;
    Wait(2.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTankSieged", 0, gv_pLAYER_02_RAYNOR, PointFromId(377));
    UnitGroupAdd(lv_dropPodUnits01, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "SCV", c_unitCreateIgnorePlacement, gv_pLAYER_02_RAYNOR, PointFromId(377));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_02_RAYNOR, PointFromId(377));
    UnitGroupAdd(lv_dropPodUnits01, UnitLastCreated());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(377), lv_dropPodUnits01, false, gv_pLAYER_02_RAYNOR);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, gv_pLAYER_02_RAYNOR, PointFromId(379));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, gv_pLAYER_02_RAYNOR, PointFromId(379));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, gv_pLAYER_02_RAYNOR, PointFromId(379));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(379), lv_dropPodUnits02, false, gv_pLAYER_02_RAYNOR);
    TriggerExecute(gt_RaynorForwardBase03SetupTransmissionQ, true, false);
    Wait(4.0, c_timeAI);
    TriggerExecute(gt_UpdateStukovDefendRegion, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, RegionFromId(16), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_NARUD, RegionFromId(16), false);
    AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(16), false);
    AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(16), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(16), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorForwardBase03Setup_Init () {
    gt_RaynorForwardBase03Setup = TriggerCreate("gt_RaynorForwardBase03Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Forward Base 01 Setup Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorForwardBase01SetupTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/52D88BAC"), null, UnitGetPosition(UnitFromId(316)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(316)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00070", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorForwardBase01SetupTransmissionQ_Init () {
    gt_RaynorForwardBase01SetupTransmissionQ = TriggerCreate("gt_RaynorForwardBase01SetupTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Forward Base 02 Setup Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorForwardBase02SetupTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/177DE1CA"), null, UnitGetPosition(UnitFromId(38)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(38)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00071", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorForwardBase02SetupTransmissionQ_Init () {
    gt_RaynorForwardBase02SetupTransmissionQ = TriggerCreate("gt_RaynorForwardBase02SetupTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Forward Base 03 Setup Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorForwardBase03SetupTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/08DBD118"), null, UnitGetPosition(UnitFromId(597)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(597)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorForwardBase03SetupTransmissionQ_Init () {
    gt_RaynorForwardBase03SetupTransmissionQ = TriggerCreate("gt_RaynorForwardBase03SetupTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Defend Kerrigan Front Line
//--------------------------------------------------------------------------------------------------
bool gt_RaynorDefendKerriganFrontLine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_defendRegion;
    point lv_dropPodTarget01;
    point lv_dropPodTarget02;
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;

    // Automatic Variable Declarations
    int auto8695C202_val;

    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8695C202_val = gv_kerriganProgressCount;
    if (auto8695C202_val == 1) {
        lv_defendRegion = RegionFromId(32);
    }
    else if (auto8695C202_val == 2) {
        lv_defendRegion = RegionFromId(31);
    }
    else if (auto8695C202_val == 3) {
        lv_defendRegion = RegionFromId(30);
    }
    else {
        lv_defendRegion = RegionFromId(33);
    }
    lv_dropPodTarget01 = RegionRandomPoint(lv_defendRegion);
    lv_dropPodTarget02 = RegionRandomPoint(lv_defendRegion);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", c_unitCreateIgnorePlacement, gv_pLAYER_02_RAYNOR, lv_dropPodTarget01);
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_02_RAYNOR, lv_dropPodTarget01);
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, lv_dropPodTarget01, lv_dropPodUnits01, false, gv_pLAYER_02_RAYNOR);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, gv_pLAYER_02_RAYNOR, lv_dropPodTarget02);
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, lv_dropPodTarget02, lv_dropPodUnits02, true, gv_pLAYER_02_RAYNOR);
    TriggerExecute(gt_RaynorDefendKerriganFrontLineTransmissionQ, true, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_RAYNOR, RegionGetCenter(lv_defendRegion));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_RAYNOR, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_RAYNOR, RegionGetCenter(lv_defendRegion), false);
    AIAttackWaveUseGroup(gv_pLAYER_02_RAYNOR, lv_dropPodUnits01);
    AIAttackWaveUseGroup(gv_pLAYER_02_RAYNOR, lv_dropPodUnits02);
    AIAttackWaveSend(gv_pLAYER_02_RAYNOR, 0, true);
    while (!((gv_voidThrasherAttackActive == false))) {
        Wait(1.0, c_timeAI);
    }
    AISetGroupSuicide(lv_dropPodUnits01, true);
    AISetGroupSuicide(lv_dropPodUnits02, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorDefendKerriganFrontLine_Init () {
    gt_RaynorDefendKerriganFrontLine = TriggerCreate("gt_RaynorDefendKerriganFrontLine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Defend Kerrigan Front Line Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorDefendKerriganFrontLineTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_frontLinePoint;

    // Automatic Variable Declarations
    int autoC2A4BA73_val;
    int auto036BB6EF_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC2A4BA73_val = gv_kerriganProgressCount;
    if (autoC2A4BA73_val == 1) {
        lv_frontLinePoint = RegionGetCenter(RegionFromId(32));
    }
    else if (autoC2A4BA73_val == 2) {
        lv_frontLinePoint = RegionGetCenter(RegionFromId(31));
    }
    else if (autoC2A4BA73_val == 3) {
        lv_frontLinePoint = RegionGetCenter(RegionFromId(30));
    }
    else {
        lv_frontLinePoint = RegionGetCenter(RegionFromId(33));
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C9AC3771"), null, lv_frontLinePoint);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_frontLinePoint, 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto036BB6EF_val = gv_voidThrasherAttackCountvsKerrigan;
    if (auto036BB6EF_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto036BB6EF_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00077", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto036BB6EF_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto036BB6EF_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00079", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorDefendKerriganFrontLineTransmissionQ_Init () {
    gt_RaynorDefendKerriganFrontLineTransmissionQ = TriggerCreate("gt_RaynorDefendKerriganFrontLineTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Forward Base 01 Setup
//--------------------------------------------------------------------------------------------------
bool gt_KerriganForwardBase01Setup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;
    unitgroup lv_dropPodUnits03;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();
    lv_dropPodUnits03 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7D2B9661"));
    gv_kerriganProgressCount += 1;
    Wait(2.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HotSRaptor", 0, gv_pLAYER_03_KERRIGAN, PointFromId(315));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(315), lv_dropPodUnits01, false, gv_pLAYER_03_KERRIGAN);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoachVile", 0, gv_pLAYER_03_KERRIGAN, PointFromId(317));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HotSRaptor", 0, gv_pLAYER_03_KERRIGAN, PointFromId(315));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(317), lv_dropPodUnits02, false, gv_pLAYER_03_KERRIGAN);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, PointFromId(321));
    UnitGroupAdd(lv_dropPodUnits03, UnitLastCreated());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(318), lv_dropPodUnits03, false, gv_pLAYER_03_KERRIGAN);
    TriggerExecute(gt_KerriganForwardBase01SetupTransmissionQ, true, false);
    Wait(4.0, c_timeAI);
    TriggerExecute(gt_UpdateKerriganDefendRegion, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_03_KERRIGAN, RegionFromId(3), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_NARUD, RegionFromId(3), false);
    AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(3), false);
    AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(3), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(3), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganForwardBase01Setup_Init () {
    gt_KerriganForwardBase01Setup = TriggerCreate("gt_KerriganForwardBase01Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Forward Base 02 Setup
//--------------------------------------------------------------------------------------------------
bool gt_KerriganForwardBase02Setup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;
    unitgroup lv_dropPodUnits03;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();
    lv_dropPodUnits03 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/B8B4BA75"));
    gv_kerriganProgressCount += 1;
    Wait(2.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, gv_pLAYER_03_KERRIGAN, PointFromId(396));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(396), lv_dropPodUnits01, false, gv_pLAYER_03_KERRIGAN);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HotSRaptor", 0, gv_pLAYER_03_KERRIGAN, PointFromId(397));
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(397), lv_dropPodUnits02, false, gv_pLAYER_03_KERRIGAN);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, PointFromId(326));
    UnitGroupAdd(lv_dropPodUnits03, UnitLastCreated());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(398), lv_dropPodUnits03, false, gv_pLAYER_03_KERRIGAN);
    TriggerExecute(gt_KerriganForwardBase02SetupTransmissionQ, true, false);
    Wait(4.0, c_timeAI);
    TriggerExecute(gt_UpdateKerriganDefendRegion, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_03_KERRIGAN, RegionFromId(4), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_NARUD, RegionFromId(4), false);
    AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(4), false);
    AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(4), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(4), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganForwardBase02Setup_Init () {
    gt_KerriganForwardBase02Setup = TriggerCreate("gt_KerriganForwardBase02Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Forward Base 03 Setup
//--------------------------------------------------------------------------------------------------
bool gt_KerriganForwardBase03Setup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;
    unitgroup lv_dropPodUnits03;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();
    lv_dropPodUnits03 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D8FF2DA0"));
    gv_kerriganProgressCount += 1;
    Wait(2.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSNoxious", 0, gv_pLAYER_03_KERRIGAN, PointFromId(520));
    UnitGroupAdd(lv_dropPodUnits01, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, gv_pLAYER_03_KERRIGAN, PointFromId(520));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HotSRaptor", 0, gv_pLAYER_03_KERRIGAN, PointFromId(520));
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(520), lv_dropPodUnits01, false, gv_pLAYER_03_KERRIGAN);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumor", c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, PointFromId(428));
    UnitGroupAdd(lv_dropPodUnits02, UnitLastCreated());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(534), lv_dropPodUnits02, false, gv_pLAYER_03_KERRIGAN);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoachVile", 0, gv_pLAYER_03_KERRIGAN, PointFromId(535));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HotSRaptor", 0, gv_pLAYER_03_KERRIGAN, PointFromId(535));
    UnitGroupAddUnitGroup(lv_dropPodUnits03, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, PointFromId(535), lv_dropPodUnits03, false, gv_pLAYER_03_KERRIGAN);
    TriggerExecute(gt_KerriganForwardBase03SetupTransmissionQ, true, false);
    Wait(4.0, c_timeAI);
    TriggerExecute(gt_UpdateKerriganDefendRegion, true, false);
    AIToggleBulliesInRegion(gv_pLAYER_03_KERRIGAN, RegionFromId(17), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_NARUD, RegionFromId(17), false);
    AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(17), false);
    AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(17), false);
    AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(17), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganForwardBase03Setup_Init () {
    gt_KerriganForwardBase03Setup = TriggerCreate("gt_KerriganForwardBase03Setup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Forward Base 01 Setup Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganForwardBase01SetupTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F8A08B29"), null, UnitGetPosition(UnitFromId(185)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(185)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00073", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganForwardBase01SetupTransmissionQ_Init () {
    gt_KerriganForwardBase01SetupTransmissionQ = TriggerCreate("gt_KerriganForwardBase01SetupTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Forward Base 02 Setup Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganForwardBase02SetupTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/885B881C"), null, UnitGetPosition(UnitFromId(212)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(212)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00074", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganForwardBase02SetupTransmissionQ_Init () {
    gt_KerriganForwardBase02SetupTransmissionQ = TriggerCreate("gt_KerriganForwardBase02SetupTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Forward Base 03 Setup Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganForwardBase03SetupTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3B257BA1"), null, UnitGetPosition(UnitFromId(566)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(566)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00075", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganForwardBase03SetupTransmissionQ_Init () {
    gt_KerriganForwardBase03SetupTransmissionQ = TriggerCreate("gt_KerriganForwardBase03SetupTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Burrow Swarm Hosts
//--------------------------------------------------------------------------------------------------
bool gt_BurrowSwarmHosts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2CB28472_g;
    int auto2CB28472_u;
    unit auto2CB28472_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            auto2CB28472_g = UnitGroupIdle(gv_pLAYER_03_KERRIGAN, false);
            auto2CB28472_u = UnitGroupCount(auto2CB28472_g, c_unitCountAll);
            for (;; auto2CB28472_u -= 1) {
                auto2CB28472_var = UnitGroupUnitFromEnd(auto2CB28472_g, auto2CB28472_u);
                if (auto2CB28472_var == null) { break; }
                if ((UnitGetType(auto2CB28472_var) == "SwarmHostSplitBBurrowed") && (AIControlWantsToMove(auto2CB28472_var) == true)) {
                    if (true) {
                        libNtve_gf_AICast(auto2CB28472_var, Order(AbilityCommand("MorphToSwarmHostSplitB", 0)));
                    }

                }

                if ((UnitGetType(auto2CB28472_var) == "SwarmHostSplitB")) {
                    libNtve_gf_AICast(auto2CB28472_var, Order(AbilityCommand("MorphToSwarmHostSplitBBurrowed", 0)));
                }

            }
        }

        Wait(5.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BurrowSwarmHosts_Init () {
    gt_BurrowSwarmHosts = TriggerCreate("gt_BurrowSwarmHosts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Defend Raynor Front Line First Time
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDefendRaynorFrontLineFirstTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_defendRegion;
    point lv_dropPodTarget01;
    point lv_dropPodTarget02;
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;

    // Automatic Variable Declarations
    unitgroup auto75383974_g;
    int auto75383974_u;
    unit auto75383974_var;
    unitgroup autoE0AAFFA5_g;
    int autoE0AAFFA5_u;
    unit autoE0AAFFA5_var;

    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defendRegion = RegionFromId(27);
    lv_dropPodTarget01 = PointFromId(313);
    lv_dropPodTarget02 = PointFromId(314);
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "HotSRaptor", c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, lv_dropPodTarget01);
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, lv_dropPodTarget01);
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, lv_dropPodTarget01, lv_dropPodUnits01, false, gv_pLAYER_03_KERRIGAN);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoachVile", 0, gv_pLAYER_03_KERRIGAN, lv_dropPodTarget02);
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedStukov", 0, gv_pLAYER_03_KERRIGAN, lv_dropPodTarget02);
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    gv_stukov = UnitLastCreated();
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, lv_dropPodTarget02, lv_dropPodUnits02, true, gv_pLAYER_03_KERRIGAN);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_KERRIGAN, RegionGetCenter(lv_defendRegion));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_03_KERRIGAN, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_KERRIGAN, RegionGetCenter(lv_defendRegion), false);
    AIAttackWaveUseGroup(gv_pLAYER_03_KERRIGAN, lv_dropPodUnits01);
    auto75383974_g = lv_dropPodUnits02;
    auto75383974_u = UnitGroupCount(auto75383974_g, c_unitCountAll);
    for (;; auto75383974_u -= 1) {
        auto75383974_var = UnitGroupUnitFromEnd(auto75383974_g, auto75383974_u);
        if (auto75383974_var == null) { break; }
        if ((auto75383974_var != gv_stukov)) {
            AIAttackWaveUseUnit(gv_pLAYER_03_KERRIGAN, auto75383974_var);
        }

    }
    AIAttackWaveSend(gv_pLAYER_03_KERRIGAN, 0, true);
    TriggerExecute(gt_UpdateStukovDefendRegion, true, false);
    TriggerExecute(gt_StukovSpellAI, true, false);
    while (!((gv_voidThrasherAttackActive == false))) {
        Wait(1.0, c_timeAI);
    }
    AISetGroupSuicide(lv_dropPodUnits01, true);
    autoE0AAFFA5_g = lv_dropPodUnits02;
    autoE0AAFFA5_u = UnitGroupCount(autoE0AAFFA5_g, c_unitCountAll);
    for (;; autoE0AAFFA5_u -= 1) {
        autoE0AAFFA5_var = UnitGroupUnitFromEnd(autoE0AAFFA5_g, autoE0AAFFA5_u);
        if (autoE0AAFFA5_var == null) { break; }
        if ((autoE0AAFFA5_var != gv_stukov)) {
            AISetUnitSuicide(autoE0AAFFA5_var, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDefendRaynorFrontLineFirstTime_Init () {
    gt_KerriganDefendRaynorFrontLineFirstTime = TriggerCreate("gt_KerriganDefendRaynorFrontLineFirstTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Defend Raynor Front Line
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDefendRaynorFrontLine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_defendRegion;
    point lv_dropPodTarget01;
    point lv_dropPodTarget02;
    unitgroup lv_dropPodUnits01;
    unitgroup lv_dropPodUnits02;

    // Automatic Variable Declarations
    int autoC5A68F1F_val;

    // Variable Initialization
    lv_dropPodUnits01 = UnitGroupEmpty();
    lv_dropPodUnits02 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC5A68F1F_val = gv_raynorProgressCount;
    if (autoC5A68F1F_val == 1) {
        lv_defendRegion = RegionFromId(26);
    }
    else if (autoC5A68F1F_val == 2) {
        lv_defendRegion = RegionFromId(28);
    }
    else if (autoC5A68F1F_val == 3) {
        lv_defendRegion = RegionFromId(29);
    }
    else {
        lv_defendRegion = RegionFromId(27);
    }
    lv_dropPodTarget01 = RegionRandomPoint(lv_defendRegion);
    lv_dropPodTarget02 = RegionRandomPoint(lv_defendRegion);
    if ((UnitIsAlive(gv_stukov) == false)) {
        libVCMI_gf_ReviveHeroInstantly(gv_stukov, false);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(4, "HotSRaptor", c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, lv_dropPodTarget01);
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, lv_dropPodTarget01);
    UnitGroupAddUnitGroup(lv_dropPodUnits01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, lv_dropPodTarget01, lv_dropPodUnits01, false, gv_pLAYER_03_KERRIGAN);
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoachVile", 0, gv_pLAYER_03_KERRIGAN, lv_dropPodTarget02);
    UnitGroupAddUnitGroup(lv_dropPodUnits02, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Zerg, lv_dropPodTarget02, lv_dropPodUnits02, true, gv_pLAYER_03_KERRIGAN);
    TriggerExecute(gt_KerriganDefendRaynorFrontLineTransmissionQ, true, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_KERRIGAN, RegionGetCenter(lv_defendRegion));
    AIAttackWaveSetTargetPatrol(gv_pLAYER_03_KERRIGAN, 0);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_KERRIGAN, RegionGetCenter(lv_defendRegion), false);
    AIAttackWaveUseGroup(gv_pLAYER_03_KERRIGAN, lv_dropPodUnits01);
    AIAttackWaveUseGroup(gv_pLAYER_03_KERRIGAN, lv_dropPodUnits02);
    AIAttackWaveSend(gv_pLAYER_03_KERRIGAN, 0, true);
    while (!((gv_voidThrasherAttackActive == false))) {
        Wait(1.0, c_timeAI);
    }
    AISetGroupSuicide(lv_dropPodUnits01, true);
    AISetGroupSuicide(lv_dropPodUnits02, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDefendRaynorFrontLine_Init () {
    gt_KerriganDefendRaynorFrontLine = TriggerCreate("gt_KerriganDefendRaynorFrontLine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Defend Raynor Front Line Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDefendRaynorFrontLineTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_frontLinePoint;

    // Automatic Variable Declarations
    int auto991A6151_val;
    int autoD74FBC47_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto991A6151_val = gv_raynorProgressCount;
    if (auto991A6151_val == 1) {
        lv_frontLinePoint = RegionGetCenter(RegionFromId(26));
    }
    else if (auto991A6151_val == 2) {
        lv_frontLinePoint = RegionGetCenter(RegionFromId(28));
    }
    else if (auto991A6151_val == 3) {
        lv_frontLinePoint = RegionGetCenter(RegionFromId(29));
    }
    else {
        lv_frontLinePoint = RegionGetCenter(RegionFromId(27));
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/24203109"), null, lv_frontLinePoint);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_frontLinePoint, 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    autoD74FBC47_val = gv_voidThrasherAttackCountvsRaynor;
    if (autoD74FBC47_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00081", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD74FBC47_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00082", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD74FBC47_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00083", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD74FBC47_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00084", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDefendRaynorFrontLineTransmissionQ_Init () {
    gt_KerriganDefendRaynorFrontLineTransmissionQ = TriggerCreate("gt_KerriganDefendRaynorFrontLineTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Void Corruption
//--------------------------------------------------------------------------------------------------
bool gt_DestroyVoidCorruption_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "VoidCorruption"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_voidCorruptionDestroyed += 1;
    if ((gv_voidCorruptionDestroyed == gv_voidCorruptionTotal)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVoiC_gf_CampaignAwardAchievement("SC2Epilogue01_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyVoidCorruption_Init () {
    gt_DestroyVoidCorruption = TriggerCreate("gt_DestroyVoidCorruption_Func");
    TriggerEnable(gt_DestroyVoidCorruption, false);
    TriggerAddEventUnitDied(gt_DestroyVoidCorruption, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Corruption Source Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindCorruptionSourceCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue01Primary03");
    gv_objectiveFindCorruptionSource = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindCorruptionSourceCreate_Init () {
    gt_ObjectiveFindCorruptionSourceCreate = TriggerCreate("gt_ObjectiveFindCorruptionSourceCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Corruption Source Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindCorruptionSourceComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ObjectiveFindCorruptionSourceCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue01Primary03", libVoiC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindCorruptionSourceComplete_Init () {
    gt_ObjectiveFindCorruptionSourceComplete = TriggerCreate("gt_ObjectiveFindCorruptionSourceComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Corruption Source Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindCorruptionSourceFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ObjectiveFindCorruptionSourceCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue01Primary03", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindCorruptionSourceFailed_Init () {
    gt_ObjectiveFindCorruptionSourceFailed = TriggerCreate("gt_ObjectiveFindCorruptionSourceFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defeat Narud Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefeatNarudCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue01Primary01");
    gv_objectiveDefeatNarud = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefeatNarudCreate_Init () {
    gt_ObjectiveDefeatNarudCreate = TriggerCreate("gt_ObjectiveDefeatNarudCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defeat Narud Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefeatNarudComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ObjectiveDefeatNarudCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue01Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefeatNarudComplete_Init () {
    gt_ObjectiveDefeatNarudComplete = TriggerCreate("gt_ObjectiveDefeatNarudComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Defeat Narud Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefeatNarudFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ObjectiveDefeatNarudCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue01Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefeatNarudFailed_Init () {
    gt_ObjectiveDefeatNarudFailed = TriggerCreate("gt_ObjectiveDefeatNarudFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Allies Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAlliesMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue01Primary02");
    gv_objectiveAlliesMustSurvive = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAlliesMustSurviveCreate_Init () {
    gt_ObjectiveAlliesMustSurviveCreate = TriggerCreate("gt_ObjectiveAlliesMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Allies Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAlliesMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ObjectiveAlliesMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue01Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAlliesMustSurviveComplete_Init () {
    gt_ObjectiveAlliesMustSurviveComplete = TriggerCreate("gt_ObjectiveAlliesMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Allies Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAlliesMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ObjectiveAlliesMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue01Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAlliesMustSurviveFailed_Init () {
    gt_ObjectiveAlliesMustSurviveFailed = TriggerCreate("gt_ObjectiveAlliesMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Establish Ally Expansions Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEstablishAllyExpansionsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue01Bonus01");
    gv_objectiveEstablishAllyExpansions = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("SC2Epilogue01Bonus01", gv_objectiveEstablishAllyExpansionsCount);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEstablishAllyExpansionsCreate_Init () {
    gt_ObjectiveEstablishAllyExpansionsCreate = TriggerCreate("gt_ObjectiveEstablishAllyExpansionsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Establish Ally Expansions Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEstablishAllyExpansionsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEstablishAllyExpansionsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue01Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEstablishAllyExpansionsComplete_Init () {
    gt_ObjectiveEstablishAllyExpansionsComplete = TriggerCreate("gt_ObjectiveEstablishAllyExpansionsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Establish Ally Expansions Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEstablishAllyExpansionsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ObjectiveEstablishAllyExpansionsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("SC2Epilogue01Bonus01", gv_objectiveEstablishAllyExpansionsCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEstablishAllyExpansionsUpdate_Init () {
    gt_ObjectiveEstablishAllyExpansionsUpdate = TriggerCreate("gt_ObjectiveEstablishAllyExpansionsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Establish Ally Expansions Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEstablishAllyExpansionsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_ObjectiveEstablishAllyExpansionsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue01Bonus01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEstablishAllyExpansionsFailed_Init () {
    gt_ObjectiveEstablishAllyExpansionsFailed = TriggerCreate("gt_ObjectiveEstablishAllyExpansionsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto34E404C1_g;
    int auto34E404C1_u;
    unit auto34E404C1_var;
    unitgroup auto33F79C19_g;
    int auto33F79C19_u;
    unit auto33F79C19_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    FogSetEnabled(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicSavedPlayerMinerals = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_cinematicSavedPlayerGas = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    auto34E404C1_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto34E404C1_u = UnitGroupCount(auto34E404C1_g, c_unitCountAll);
    for (;; auto34E404C1_u -= 1) {
        auto34E404C1_var = UnitGroupUnitFromEnd(auto34E404C1_g, auto34E404C1_u);
        if (auto34E404C1_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto34E404C1_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto34E404C1_var);
            libNtve_gf_PauseUnit(auto34E404C1_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto33F79C19_g = gv_cinematicHiddenUnits;
    auto33F79C19_u = UnitGroupCount(auto33F79C19_g, c_unitCountAll);
    for (;; auto33F79C19_u -= 1) {
        auto33F79C19_var = UnitGroupUnitFromEnd(auto33F79C19_g, auto33F79C19_u);
        if (auto33F79C19_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto33F79C19_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Cutscene_Epilogue01Arrival.SC2Cutscene", true, true);
    TransmissionClearAll();
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Cutscene_MissionEpilogue01Start.SC2Cutscene", true, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoF1488B1C_g;
    int autoF1488B1C_u;
    unit autoF1488B1C_var;
    unitgroup auto819220BB_g;
    int auto819220BB_u;
    unit auto819220BB_var;
    unitgroup auto5599722B_g;
    int auto5599722B_u;
    unit auto5599722B_var;
    unitgroup auto0C27C72D_g;
    int auto0C27C72D_u;
    unit auto0C27C72D_var;
    unitgroup auto06B5B6BC_g;
    int auto06B5B6BC_u;
    unit auto06B5B6BC_var;
    unitgroup auto68C79AAB_g;
    int auto68C79AAB_u;
    unit auto68C79AAB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    autoF1488B1C_g = gv_cinematicTempUnits;
    autoF1488B1C_u = UnitGroupCount(autoF1488B1C_g, c_unitCountAll);
    for (;; autoF1488B1C_u -= 1) {
        autoF1488B1C_var = UnitGroupUnitFromEnd(autoF1488B1C_g, autoF1488B1C_u);
        if (autoF1488B1C_var == null) { break; }
        UnitRemove(autoF1488B1C_var);
    }
    auto819220BB_g = gv_cinematicHiddenUnits;
    auto819220BB_u = UnitGroupCount(auto819220BB_g, c_unitCountAll);
    for (;; auto819220BB_u -= 1) {
        auto819220BB_var = UnitGroupUnitFromEnd(auto819220BB_g, auto819220BB_u);
        if (auto819220BB_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto819220BB_var, true);
    }
    auto5599722B_g = gv_cinematicPausedUnits;
    auto5599722B_u = UnitGroupCount(auto5599722B_g, c_unitCountAll);
    for (;; auto5599722B_u -= 1) {
        auto5599722B_var = UnitGroupUnitFromEnd(auto5599722B_g, auto5599722B_u);
        if (auto5599722B_var == null) { break; }
        libNtve_gf_PauseUnit(auto5599722B_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    RegionPlayableMapSet(RegionFromId(45));
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    gv_missionStage = 1;
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_cinematicSavedPlayerMinerals);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_cinematicSavedPlayerGas);
    libVCUI_gf_ShowSpearofAdunUI(true, c_transitionDurationDefault);
    libVCMI_gf_SetSpearofAdunEnergy(0.0, libVCMI_ge_SpearofAdunEnergyType_Percent);
    UnitGroupAddUnitGroup(gv_s1_PlayerForces, UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto0C27C72D_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0C27C72D_u = UnitGroupCount(auto0C27C72D_g, c_unitCountAll);
    for (;; auto0C27C72D_u -= 1) {
        auto0C27C72D_var = UnitGroupUnitFromEnd(auto0C27C72D_g, auto0C27C72D_u);
        if (auto0C27C72D_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0C27C72D_var, false);
        libNtve_gf_PauseUnit(auto0C27C72D_var, true);
    }
    auto06B5B6BC_g = UnitGroup(null, gv_pLAYER_02_RAYNOR, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto06B5B6BC_u = UnitGroupCount(auto06B5B6BC_g, c_unitCountAll);
    for (;; auto06B5B6BC_u -= 1) {
        auto06B5B6BC_var = UnitGroupUnitFromEnd(auto06B5B6BC_g, auto06B5B6BC_u);
        if (auto06B5B6BC_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto06B5B6BC_var, false);
        libNtve_gf_PauseUnit(auto06B5B6BC_var, true);
    }
    auto68C79AAB_g = UnitGroup(null, gv_pLAYER_03_KERRIGAN, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68C79AAB_u = UnitGroupCount(auto68C79AAB_g, c_unitCountAll);
    for (;; auto68C79AAB_u -= 1) {
        auto68C79AAB_var = UnitGroupUnitFromEnd(auto68C79AAB_g, auto68C79AAB_u);
        if (auto68C79AAB_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto68C79AAB_var, false);
        libNtve_gf_PauseUnit(auto68C79AAB_var, true);
    }
    UnitSetTeamColorIndex(UnitFromId(2227), 2);
    UnitSetTeamColorIndex(UnitFromId(2228), 2);
    TriggerExecute(gt_S1FlyoutWarpPrisms, true, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(443), lv_fadeDuration);
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Kill Off Units
//--------------------------------------------------------------------------------------------------
bool gt_IntroKillOffUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        UnitKill(UnitGroupRandomUnit(gv_cinematicFleetDeathCandidates, c_unitCountAlive));
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            break;
        }

        Wait(0.5, c_timeGame);
        UnitKill(UnitGroupRandomUnit(gv_cinematicFleetDeathCandidates, c_unitCountAlive));
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            break;
        }

        Wait(2.0, c_timeGame);
        UnitKill(UnitGroupRandomUnit(gv_cinematicFleetDeathCandidates, c_unitCountAlive));
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            break;
        }

        Wait(1.5, c_timeGame);
        UnitKill(UnitGroupRandomUnit(gv_cinematicFleetDeathCandidates, c_unitCountAlive));
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroKillOffUnits_Init () {
    gt_IntroKillOffUnits = TriggerCreate("gt_IntroKillOffUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zealotUnitGroup;
    unitgroup lv_stalkerUnitGroup;
    unitgroup lv_immortalUnitGroup;
    int lv_unitPlacementIteration;
    fixed lv_unitPlacementAngle;

    // Automatic Variable Declarations
    unitgroup autoA98116E9_g;
    int autoA98116E9_u;
    unit autoA98116E9_var;
    unitgroup auto0910F1CD_g;
    int auto0910F1CD_u;
    unit auto0910F1CD_var;
    int auto2B79850F_ae;
    const int auto2B79850F_ai = 1;
    int autoE8FCCFCE_ae;
    const int autoE8FCCFCE_ai = 1;
    int autoDD644B78_ae;
    const int autoDD644B78_ai = 1;
    unitgroup auto5DACBC32_g;
    int auto5DACBC32_u;
    unit auto5DACBC32_var;
    unitgroup auto75D36F0B_g;
    int auto75D36F0B_u;
    unit auto75D36F0B_var;
    unitgroup autoD13718C1_g;
    int autoD13718C1_u;
    unit autoD13718C1_var;

    // Variable Initialization
    lv_zealotUnitGroup = UnitGroupEmpty();
    lv_stalkerUnitGroup = UnitGroupEmpty();
    lv_immortalUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionFromId(47));
    UnitRemove(UnitFromId(2227));
    UnitRemove(UnitFromId(2228));
    autoA98116E9_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA98116E9_u = UnitGroupCount(autoA98116E9_g, c_unitCountAll);
    for (;; autoA98116E9_u -= 1) {
        autoA98116E9_var = UnitGroupUnitFromEnd(autoA98116E9_g, autoA98116E9_u);
        if (autoA98116E9_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoA98116E9_var) == false) && (UnitGroupHasUnit(gv_s1_PlayerForces, autoA98116E9_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoA98116E9_var);
            libNtve_gf_PauseUnit(autoA98116E9_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto0910F1CD_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0910F1CD_u = UnitGroupCount(auto0910F1CD_g, c_unitCountAll);
    for (;; auto0910F1CD_u -= 1) {
        auto0910F1CD_var = UnitGroupUnitFromEnd(auto0910F1CD_g, auto0910F1CD_u);
        if (auto0910F1CD_var == null) { break; }
        if ((UnitGroupHasUnit(gv_s1_PlayerForces, auto0910F1CD_var) == false) && (libNtve_gf_UnitInRegion(auto0910F1CD_var, RegionFromId(59)) == false)) {
            UnitGroupAdd(gv_cinematicHiddenUnits, auto0910F1CD_var);
            libNtve_gf_ShowHideUnit(auto0910F1CD_var, false);
            if ((UnitGetType(auto0910F1CD_var) == "Pylon")) {
                UnitRemove(auto0910F1CD_var);
            }

        }

    }
    UnitGroupIssueOrder(gv_s1_PlayerForces, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    lv_zealotUnitGroup = UnitGroupFilter("ZealotPurifier", gv_pLAYER_01_USER, gv_s1_PlayerForces, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_stalkerUnitGroup = UnitGroupFilter("StalkerShakuras", gv_pLAYER_01_USER, gv_s1_PlayerForces, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_immortalUnitGroup = UnitGroupFilter("ImmortalShakuras", gv_pLAYER_01_USER, gv_s1_PlayerForces, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2B79850F_ae = UnitGroupCount(lv_zealotUnitGroup, c_unitCountAlive);
    lv_unitPlacementIteration = 1;
    for ( ; ( (auto2B79850F_ai >= 0 && lv_unitPlacementIteration <= auto2B79850F_ae) || (auto2B79850F_ai < 0 && lv_unitPlacementIteration >= auto2B79850F_ae) ) ; lv_unitPlacementIteration += auto2B79850F_ai ) {
        UnitSetPosition(UnitGroupUnit(lv_zealotUnitGroup, lv_unitPlacementIteration), PointWithOffsetPolar(UnitGetPosition(UnitFromId(266)), 5.0, (35.0 + lv_unitPlacementAngle)), false);
        UnitIssueOrder(UnitGroupUnit(lv_zealotUnitGroup, lv_unitPlacementIteration), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(266))), c_orderQueueReplace);
        lv_unitPlacementAngle += (180.0 / UnitGroupCount(lv_zealotUnitGroup, c_unitCountAlive));
    }
    lv_unitPlacementAngle = 0.0;
    autoE8FCCFCE_ae = UnitGroupCount(lv_stalkerUnitGroup, c_unitCountAlive);
    lv_unitPlacementIteration = 1;
    for ( ; ( (autoE8FCCFCE_ai >= 0 && lv_unitPlacementIteration <= autoE8FCCFCE_ae) || (autoE8FCCFCE_ai < 0 && lv_unitPlacementIteration >= autoE8FCCFCE_ae) ) ; lv_unitPlacementIteration += autoE8FCCFCE_ai ) {
        UnitSetPosition(UnitGroupUnit(lv_stalkerUnitGroup, lv_unitPlacementIteration), PointWithOffsetPolar(UnitGetPosition(UnitFromId(266)), 7.5, (80.0 + lv_unitPlacementAngle)), false);
        UnitIssueOrder(UnitGroupUnit(lv_stalkerUnitGroup, lv_unitPlacementIteration), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(266))), c_orderQueueReplace);
        lv_unitPlacementAngle += (90.0 / UnitGroupCount(lv_stalkerUnitGroup, c_unitCountAlive));
    }
    lv_unitPlacementAngle = 0.0;
    autoDD644B78_ae = UnitGroupCount(lv_immortalUnitGroup, c_unitCountAlive);
    lv_unitPlacementIteration = 1;
    for ( ; ( (autoDD644B78_ai >= 0 && lv_unitPlacementIteration <= autoDD644B78_ae) || (autoDD644B78_ai < 0 && lv_unitPlacementIteration >= autoDD644B78_ae) ) ; lv_unitPlacementIteration += autoDD644B78_ai ) {
        UnitSetPosition(UnitGroupUnit(lv_immortalUnitGroup, lv_unitPlacementIteration), PointWithOffsetPolar(UnitGetPosition(UnitFromId(266)), 9.5, (100.0 + lv_unitPlacementAngle)), false);
        UnitIssueOrder(UnitGroupUnit(lv_immortalUnitGroup, lv_unitPlacementIteration), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(266))), c_orderQueueReplace);
        lv_unitPlacementAngle += (90.0 / UnitGroupCount(lv_immortalUnitGroup, c_unitCountAlive));
    }
    auto5DACBC32_g = UnitGroup(null, c_playerAny, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5DACBC32_u = UnitGroupCount(auto5DACBC32_g, c_unitCountAll);
    for (;; auto5DACBC32_u -= 1) {
        auto5DACBC32_var = UnitGroupUnitFromEnd(auto5DACBC32_g, auto5DACBC32_u);
        if (auto5DACBC32_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5DACBC32_var, true);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "XelNagaTowerEpilogue", 0, 0, UnitGetPosition(UnitFromId(266)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "XelNagaTowerEpilogue", 0, 0, UnitGetPosition(UnitFromId(863)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidCorruption", c_unitCreateIgnorePlacement, gv_pLAYER_06_VOIDFORCES, UnitGetPosition(UnitFromId(863)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRift", c_unitCreateIgnorePlacement, gv_pLAYER_06_VOIDFORCES, UnitGetPosition(UnitFromId(645)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRift", c_unitCreateIgnorePlacement, gv_pLAYER_06_VOIDFORCES, UnitGetPosition(UnitFromId(951)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "XelNagaTowerEpilogue", 0, 0, UnitGetPosition(UnitFromId(864)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    auto75D36F0B_g = UnitGroup(null, gv_pLAYER_03_KERRIGAN, RegionFromId(2), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto75D36F0B_u = UnitGroupCount(auto75D36F0B_g, c_unitCountAll);
    for (;; auto75D36F0B_u -= 1) {
        auto75D36F0B_var = UnitGroupUnitFromEnd(auto75D36F0B_g, auto75D36F0B_u);
        if (auto75D36F0B_var == null) { break; }
        UnitCreate(1, UnitGetType(auto75D36F0B_var), c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, UnitGetPosition(auto75D36F0B_var), UnitGetFacing(auto75D36F0B_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_ShowHideUnit(gv_narud, true);
    autoD13718C1_g = UnitGroup(null, c_playerAny, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD13718C1_u = UnitGroupCount(autoD13718C1_g, c_unitCountAll);
    for (;; autoD13718C1_u -= 1) {
        autoD13718C1_var = UnitGroupUnitFromEnd(autoD13718C1_g, autoD13718C1_u);
        if (autoD13718C1_var == null) { break; }
        if ((UnitGetType(autoD13718C1_var) != "VoidRift") && (UnitGetType(autoD13718C1_var) != "NarudEpilogue")) {
            UnitCreate(1, UnitGetType(autoD13718C1_var), c_unitCreateIgnorePlacement, UnitGetOwner(autoD13718C1_var), UnitGetPosition(autoD13718C1_var), UnitGetFacing(autoD13718C1_var));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto27E051D4_g;
    int auto27E051D4_u;
    unit auto27E051D4_var;
    int autoCBD74248_n;
    int autoCBD74248_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(471), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PEpilogue01_Music_Mid", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue01_Mid_A", -1), PlayerGroupAll(), 100.0, 0.0);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(UnitFromId(266), "Mission_Epilogue01|Line00124", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_PositionPlayersUnits, true, false);
    TriggerExecute(gt_MidCreatePlayersBase, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1091), SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue01|Line00124", true), c_soundIndexAny)), -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2231), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue01|Line00125", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue01|Line00126", true), c_soundIndexAny))), -1, 0.0, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue01_Mid_B", -1), PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(UnitFromId(266), "Mission_Epilogue01|Line00125", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2232), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue01|Line00005", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue01|Line00126", true), c_soundIndexAny))), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00126", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicNarud, "Mission_Epilogue01|Line00005", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00006", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.5, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue01_Mid_C", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2233), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue01|Line00008", true), c_soundIndexAny)) + 3.0), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicNarud, "Mission_Epilogue01|Line00008", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_PauseUnit(gv_narud, false);
    auto27E051D4_g = UnitGroup("VoidRift", gv_pLAYER_05_VOIDFORCES, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto27E051D4_u = UnitGroupCount(auto27E051D4_g, c_unitCountAll);
    for (;; auto27E051D4_u -= 1) {
        auto27E051D4_var = UnitGroupUnitFromEnd(auto27E051D4_g, auto27E051D4_u);
        if (auto27E051D4_var == null) { break; }
        UnitIssueOrder(gv_narud, OrderTargetingPoint(AbilityCommand("NarudVoidBuild", 1), UnitGetPosition(auto27E051D4_var)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
    }
    TriggerExecute(gt_MidUnitsSpawn, true, false);
    libNtve_gf_SimpleLookAtStop(gv_narud, "SlowStanding");
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue01_Mid_D", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_narud, OrderTargetingPoint(AbilityCommand("NarudEpilogueSpawnShadeofNarud", 0), PointWithOffset(UnitGetPosition(gv_narud), 0.0, -6.0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue01_Mid_E", -1), PlayerGroupAll(), 100.0, 0.0);
    autoCBD74248_n = (10 * 16);
    for (autoCBD74248_i = 1; autoCBD74248_i <= autoCBD74248_n; autoCBD74248_i += 1) {
        if ((UnitGroupCount(UnitGroup("VoidThrasherWalker", gv_pLAYER_04_NARUD, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            gv_cinematicVoidThrasher = UnitGroupUnit(UnitGroup("VoidThrasherWalker", gv_pLAYER_04_NARUD, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
            UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicVoidThrasher);
            break;
        }
        else {
            Wait(0.0625, c_timeGame);
        }
    }
    UnitIssueOrder(gv_cinematicVoidThrasher, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1079)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto9F19BF44_g;
    int auto9F19BF44_u;
    unit auto9F19BF44_var;
    unitgroup auto11E0E283_g;
    int auto11E0E283_u;
    unit auto11E0E283_var;
    unitgroup autoD78A2743_g;
    int autoD78A2743_u;
    unit autoD78A2743_var;
    unitgroup auto50063EDF_g;
    int auto50063EDF_u;
    unit auto50063EDF_var;
    unitgroup auto28485BF7_g;
    int auto28485BF7_u;
    unit auto28485BF7_var;
    unitgroup autoF35BE903_g;
    int autoF35BE903_u;
    unit autoF35BE903_var;
    unitgroup autoB8248F7A_g;
    int autoB8248F7A_u;
    unit autoB8248F7A_var;
    unitgroup auto16E01061_g;
    int auto16E01061_u;
    unit auto16E01061_var;
    unitgroup auto8CF79A72_g;
    int auto8CF79A72_u;
    unit auto8CF79A72_var;
    unitgroup auto4B05DEA9_g;
    int auto4B05DEA9_u;
    unit auto4B05DEA9_var;
    unitgroup auto2C74E80E_g;
    int auto2C74E80E_u;
    unit auto2C74E80E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerStop(gt_MidUnitsSpawn);
    auto9F19BF44_g = gv_cinematicTempUnits;
    auto9F19BF44_u = UnitGroupCount(auto9F19BF44_g, c_unitCountAll);
    for (;; auto9F19BF44_u -= 1) {
        auto9F19BF44_var = UnitGroupUnitFromEnd(auto9F19BF44_g, auto9F19BF44_u);
        if (auto9F19BF44_var == null) { break; }
        UnitRemove(auto9F19BF44_var);
    }
    auto11E0E283_g = gv_cinematicHiddenUnits;
    auto11E0E283_u = UnitGroupCount(auto11E0E283_g, c_unitCountAll);
    for (;; auto11E0E283_u -= 1) {
        auto11E0E283_var = UnitGroupUnitFromEnd(auto11E0E283_g, auto11E0E283_u);
        if (auto11E0E283_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto11E0E283_var, true);
    }
    autoD78A2743_g = gv_cinematicPausedUnits;
    autoD78A2743_u = UnitGroupCount(autoD78A2743_g, c_unitCountAll);
    for (;; autoD78A2743_u -= 1) {
        autoD78A2743_var = UnitGroupUnitFromEnd(autoD78A2743_g, autoD78A2743_u);
        if (autoD78A2743_var == null) { break; }
        libNtve_gf_PauseUnit(autoD78A2743_var, false);
    }
    libVCMI_gf_SetSpearofAdunEnergy(50.0, libVCMI_ge_SpearofAdunEnergyType_Absolute);
    GameTimeOfDayPause(false);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "Korhal_TarmacSplat");
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(46), true, false);
    UnitClearSelection(gv_pLAYER_01_USER);
    TriggerEnable(gt_DefeatUnitsDead, false);
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerEnable(gt_DefeatPrimaryObjectiveFailed, true);
    ObjectiveShow(gv_objectiveFindCorruptionSource, PlayerGroupAll(), false);
    gv_missionStage = 2;
    UnitRemove(gv_s1_VoidRift01);
    auto50063EDF_g = UnitGroup(null, gv_pLAYER_05_VOIDFORCES, RegionFromId(48), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto50063EDF_u = UnitGroupCount(auto50063EDF_g, c_unitCountAll);
    for (;; auto50063EDF_u -= 1) {
        auto50063EDF_var = UnitGroupUnitFromEnd(auto50063EDF_g, auto50063EDF_u);
        if (auto50063EDF_var == null) { break; }
        UnitRemove(auto50063EDF_var);
    }
    auto28485BF7_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto28485BF7_u = UnitGroupCount(auto28485BF7_g, c_unitCountAll);
    for (;; auto28485BF7_u -= 1) {
        auto28485BF7_var = UnitGroupUnitFromEnd(auto28485BF7_g, auto28485BF7_u);
        if (auto28485BF7_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto28485BF7_var, true);
        libNtve_gf_PauseUnit(auto28485BF7_var, false);
    }
    autoF35BE903_g = UnitGroup(null, gv_pLAYER_02_RAYNOR, RegionFromId(15), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF35BE903_u = UnitGroupCount(autoF35BE903_g, c_unitCountAll);
    for (;; autoF35BE903_u -= 1) {
        autoF35BE903_var = UnitGroupUnitFromEnd(autoF35BE903_g, autoF35BE903_u);
        if (autoF35BE903_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF35BE903_var, true);
        libNtve_gf_PauseUnit(autoF35BE903_var, false);
    }
    autoB8248F7A_g = UnitGroup(null, gv_pLAYER_03_KERRIGAN, RegionFromId(2), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB8248F7A_u = UnitGroupCount(autoB8248F7A_g, c_unitCountAll);
    for (;; autoB8248F7A_u -= 1) {
        autoB8248F7A_var = UnitGroupUnitFromEnd(autoB8248F7A_g, autoB8248F7A_u);
        if (autoB8248F7A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB8248F7A_var, true);
        libNtve_gf_PauseUnit(autoB8248F7A_var, false);
    }
    libNtve_gf_ShareVisionofUnit(UnitFromId(266), true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(863), true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(UnitFromId(864), true, gv_pLAYER_01_USER);
    auto16E01061_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(266)), 22.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto16E01061_u = UnitGroupCount(auto16E01061_g, c_unitCountAll);
    for (;; auto16E01061_u -= 1) {
        auto16E01061_var = UnitGroupUnitFromEnd(auto16E01061_g, auto16E01061_u);
        if (auto16E01061_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto16E01061_var, false);
        libNtve_gf_PauseUnit(auto16E01061_var, false);
    }
    auto8CF79A72_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(863)), 22.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8CF79A72_u = UnitGroupCount(auto8CF79A72_g, c_unitCountAll);
    for (;; auto8CF79A72_u -= 1) {
        auto8CF79A72_var = UnitGroupUnitFromEnd(auto8CF79A72_g, auto8CF79A72_u);
        if (auto8CF79A72_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8CF79A72_var, false);
        libNtve_gf_PauseUnit(auto8CF79A72_var, false);
    }
    auto4B05DEA9_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(UnitGetPosition(UnitFromId(864)), 22.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B05DEA9_u = UnitGroupCount(auto4B05DEA9_g, c_unitCountAll);
    for (;; auto4B05DEA9_u -= 1) {
        auto4B05DEA9_var = UnitGroupUnitFromEnd(auto4B05DEA9_g, auto4B05DEA9_u);
        if (auto4B05DEA9_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4B05DEA9_var, false);
        libNtve_gf_PauseUnit(auto4B05DEA9_var, false);
    }
    auto2C74E80E_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2C74E80E_u = UnitGroupCount(auto2C74E80E_g, c_unitCountAll);
    for (;; auto2C74E80E_u -= 1) {
        auto2C74E80E_var = UnitGroupUnitFromEnd(auto2C74E80E_g, auto2C74E80E_u);
        if (auto2C74E80E_var == null) { break; }
        UnitRemove(auto2C74E80E_var);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_RAYNOR, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_KERRIGAN, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(487), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Create Players Base
//--------------------------------------------------------------------------------------------------
bool gt_MidCreatePlayersBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFD4A7544_g;
    int autoFD4A7544_u;
    unit autoFD4A7544_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFD4A7544_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoFD4A7544_u = UnitGroupCount(autoFD4A7544_g, c_unitCountAll);
    for (;; autoFD4A7544_u -= 1) {
        autoFD4A7544_var = UnitGroupUnitFromEnd(autoFD4A7544_g, autoFD4A7544_u);
        if (autoFD4A7544_var == null) { break; }
        if ((UnitGetType(autoFD4A7544_var) != "Pylon") && (UnitGetType(autoFD4A7544_var) != "WarpGate")) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(autoFD4A7544_var), c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(autoFD4A7544_var));
            if ((UnitGetType(autoFD4A7544_var) == "Nexus")) {
                UnitSetProgressComplete(UnitLastCreated(), 1, 90);
            }
            else {
                UnitSetProgressComplete(UnitLastCreated(), 1, 85);
            }
        }

        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCreatePlayersBase_Init () {
    gt_MidCreatePlayersBase = TriggerCreate("gt_MidCreatePlayersBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Units Spawn
//--------------------------------------------------------------------------------------------------
bool gt_MidUnitsSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6C43D97D_n = 20;
    int auto6C43D97D_i;
    const int autoA7C5DBBF_n = 4;
    int autoA7C5DBBF_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto6C43D97D_i = 1; auto6C43D97D_i <= auto6C43D97D_n; auto6C43D97D_i += 1) {
        for (autoA7C5DBBF_i = 1; autoA7C5DBBF_i <= autoA7C5DBBF_n; autoA7C5DBBF_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_NARUD, UnitGetPosition(UnitFromId(677)));
            UnitCreateEffectUnit(UnitFromId(677), "VoidRiftTrainSet", UnitLastCreated());
            UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(548)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_pLAYER_04_NARUD, UnitGetPosition(UnitFromId(381)));
            UnitCreateEffectUnit(UnitFromId(381), "VoidRiftTrainSet", UnitLastCreated());
            UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(548)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_04_NARUD, UnitGetPosition(UnitFromId(382)));
            UnitCreateEffectUnit(UnitFromId(382), "VoidRiftTrainSet", UnitLastCreated());
            UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(547)), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_pLAYER_04_NARUD, UnitGetPosition(UnitFromId(679)));
            UnitCreateEffectUnit(UnitFromId(679), "VoidRiftTrainSet", UnitLastCreated());
            UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(547)), c_orderQueueReplace);
            Wait(0.25, c_timeGame);
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidUnitsSpawn_Init () {
    gt_MidUnitsSpawn = TriggerCreate("gt_MidUnitsSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Unit Construction Starts
//--------------------------------------------------------------------------------------------------
bool gt_MidUnitConstructionStarts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_cinematicTempUnits, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidUnitConstructionStarts_Init () {
    gt_MidUnitConstructionStarts = TriggerCreate("gt_MidUnitConstructionStarts_Func");
    TriggerAddEventUnitConstructProgress(gt_MidUnitConstructionStarts, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Position Players Units
//--------------------------------------------------------------------------------------------------
bool gt_PositionPlayersUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zealotUnitGroup;
    unitgroup lv_stalkerUnitGroup;
    unitgroup lv_immortalUnitGroup;
    int lv_unitPlacementIteration;
    fixed lv_unitPlacementAngle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_zealotUnitGroup = UnitGroupEmpty();
    lv_stalkerUnitGroup = UnitGroupEmpty();
    lv_immortalUnitGroup = UnitGroupEmpty();

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PositionPlayersUnits_Init () {
    gt_PositionPlayersUnits = TriggerCreate("gt_PositionPlayersUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5B9A877B_g;
    int auto5B9A877B_u;
    unit auto5B9A877B_var;
    unitgroup auto043C884C_g;
    int auto043C884C_u;
    unit auto043C884C_var;
    unitgroup autoF1A8A508_g;
    int autoF1A8A508_u;
    unit autoF1A8A508_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto5B9A877B_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5B9A877B_u = UnitGroupCount(auto5B9A877B_g, c_unitCountAll);
    for (;; auto5B9A877B_u -= 1) {
        auto5B9A877B_var = UnitGroupUnitFromEnd(auto5B9A877B_g, auto5B9A877B_u);
        if (auto5B9A877B_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto5B9A877B_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto5B9A877B_var);
            libNtve_gf_PauseUnit(auto5B9A877B_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto043C884C_g = gv_cinematicHiddenUnits;
    auto043C884C_u = UnitGroupCount(auto043C884C_g, c_unitCountAll);
    for (;; auto043C884C_u -= 1) {
        auto043C884C_var = UnitGroupUnitFromEnd(auto043C884C_g, auto043C884C_u);
        if (auto043C884C_var == null) { break; }
        if ((auto043C884C_var != UnitFromId(331))) {
            libNtve_gf_ShowHideUnit(auto043C884C_var, false);
        }
        else {
            UnitGroupRemove(gv_cinematicHiddenUnits, auto043C884C_var);
        }
    }
    autoF1A8A508_g = gv_cinematicHiddenUnits;
    autoF1A8A508_u = UnitGroupCount(autoF1A8A508_g, c_unitCountAll);
    for (;; autoF1A8A508_u -= 1) {
        autoF1A8A508_var = UnitGroupUnitFromEnd(autoF1A8A508_g, autoF1A8A508_u);
        if (autoF1A8A508_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoF1A8A508_var, RegionFromId(11)) == true)) {
            UnitRemove(autoF1A8A508_var);
        }

    }
    gv_cinematicNarud = UnitFromId(331);
    UnitSetOwner(gv_cinematicNarud, 0, false);
    libNtve_gf_MakeUnitInvulnerable(gv_cinematicNarud, true);
    UnitBehaviorRemove(gv_cinematicNarud, "SOATimeFreeze", 1);
    UnitSetState(gv_narud, c_unitStateFidget, false);
    libNtve_gf_SimpleLookAtStop(gv_narud, "SlowStanding");
    UnitCreate(1, "InfestedStukov", c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, PointFromId(1222), PointGetFacing(PointFromId(1222)));
    gv_cinematicStukov = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitAbilityEnable(gv_cinematicStukov, "attack", false);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    UnitCreate(1, "KerriganVoid", c_unitCreateIgnorePlacement, gv_pLAYER_03_KERRIGAN, PointFromId(170), PointGetFacing(PointFromId(170)));
    gv_cinematicKerrigan = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    UnitCreate(1, "RaynorLab", c_unitCreateIgnorePlacement, gv_pLAYER_02_RAYNOR, PointFromId(544), PointGetFacing(PointFromId(544)));
    gv_cinematicRaynor = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    UnitCreate(1, "ArtanisVoid", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(834), PointGetFacing(PointFromId(834)));
    gv_cinematicArtanis = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimClear Cover");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fakeNarudTarget;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2234), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2235), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue01|Line00093", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue01|Line00091", true), c_soundIndexAny))), -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    UnitSetPropertyFixed(gv_cinematicStukov, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_cinematicStukov, c_unitPropMovementSpeed, c_unitPropNormal) / 1.5));
    UnitSetPropertyFixed(gv_cinematicRaynor, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_cinematicStukov, c_unitPropMovementSpeed, c_unitPropNormal) / 1.5));
    UnitSetPropertyFixed(gv_cinematicKerrigan, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_cinematicStukov, c_unitPropMovementSpeed, c_unitPropNormal) / 1.5));
    UnitSetPropertyFixed(gv_cinematicArtanis, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_cinematicStukov, c_unitPropMovementSpeed, c_unitPropNormal) / 1.5));
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue01_End_A", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.0625, c_timeGame);
    libNtve_gf_PauseUnit(gv_cinematicStukov, false);
    Wait(0.0625, c_timeGame);
    UnitIssueOrder(gv_cinematicStukov, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1223)), c_orderQueueReplace);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PEpilogue01_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicStukov, "Mission_Epilogue01|Line00093", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicNarud, "Mission_Epilogue01|Line00091", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicStukov, "Mission_Epilogue01|Line00092", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitBehaviorRemove(gv_cinematicNarud, "NarudEpilogueDontDie", 1);
    UnitIssueOrder(gv_cinematicStukov, OrderTargetingUnit(AbilityCommand("StukovBossBlast", 0), gv_narud), c_orderQueueAddToEnd);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue01_End_B", -1), PlayerGroupAll(), 100.0, 0.0);
    while (!((UnitIsAlive(gv_cinematicNarud) == false))) {
        Wait(0.1, c_timeGame);
    }
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 1.5, 100.0, 3.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Mission_Epilogue01_Narud_113", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    libNtve_gf_PauseUnit(gv_cinematicArtanis, false);
    libNtve_gf_PauseUnit(gv_cinematicRaynor, false);
    libNtve_gf_PauseUnit(gv_cinematicKerrigan, false);
    UnitIssueOrder(gv_cinematicStukov, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(439)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(155), 10.0, -1, 10, true);
    UnitIssueOrder(gv_cinematicRaynor, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(417)), c_orderQueueReplace);
    Wait(0.3, c_timeGame);
    UnitIssueOrder(gv_cinematicKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(418)), c_orderQueueReplace);
    Wait(0.2, c_timeGame);
    UnitIssueOrder(gv_cinematicArtanis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(416)), c_orderQueueReplace);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Epilogue01_End_C", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreate(1, "XelNagaTowerEpilogueLarge", c_unitCreateIgnorePlacement, 0, PointFromId(678), 270.0);
    gv_cinematicCelestialTower = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(4.0, c_timeGame);
    Wait(3.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicCelestialTower, "Mission_Epilogue01|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    SoundStopAllTriggerSounds(false);
    TransmissionClearAll();
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libVoiC_gf_PlayCinematic("Epilogue01Debrief", false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init01aRaynorTechnology_Init();
    gt_Init01bKerriganTechnology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_PerformanceInit_Init();
    gt_PerformancePauseAll_Init();
    gt_PerformanceUnpauseBonus01_Init();
    gt_PerformanceUnpauseBonus02_Init();
    gt_PerformanceUnpauseBonus03_Init();
    gt_PerformanceUnpauseBonus04_Init();
    gt_PerformanceUnpauseMid01_Init();
    gt_PerformanceUnpauseMid02_Init();
    gt_PerformanceUnpauseMid03_Init();
    gt_PerformanceUnpauseMid04_Init();
    gt_PerformanceUnpauseMid05_Init();
    gt_PerformanceUnpauseMid06_Init();
    gt_PerformanceUnpauseMid07_Init();
    gt_PerformanceUnpauseMid08_Init();
    gt_PerformanceUnpauseMid09_Init();
    gt_PerformanceUnpauseExpoS_Init();
    gt_PerformanceUnpauseExpoN_Init();
    gt_PerformanceRepauseAfterSoA_Init();
    gt_PerformanceHandleTimeStopApply_Init();
    gt_StartGameStage1Q_Init();
    gt_StartGameStage2Q_Init();
    gt_S1FlyoutWarpPrisms_Init();
    gt_S1UnitEntersFirstEnemyGroup_Init();
    gt_S1UnitEntersFirstVoidRiftQ_Init();
    gt_S1FirstVoidRiftTakesDamage_Init();
    gt_S1UnitEntersFirstVoidCorruptionQ_Init();
    gt_S1FirstVoidCorruptionTakesDamage_Init();
    gt_S1FirstVoidCorruptionDiesQ_Init();
    gt_S1Revealers_Init();
    gt_S1UnitWander_Init();
    gt_S1VoidRiftUnitSpawns01_Init();
    gt_S1VoidRiftUnitSpawns02_Init();
    gt_FirstVoidThrasherDiesQ_Init();
    gt_EnemyUnitEntersMap_Init();
    gt_VoidCorruptionDies_Init();
    gt_UnitEntersDiscoverBonusObjective_Init();
    gt_RevealBonusObjectiveQ_Init();
    gt_BonusObjectiveCleared01Q_Init();
    gt_BonusObjectiveCleared02Q_Init();
    gt_BonusObjectiveCleared03Q_Init();
    gt_BonusObjectiveCleared04Q_Init();
    gt_DefeatUnitsDead_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryDefeatNarudCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StartAI_Init();
    gt_StartAIAttackWavesVsPlayer_Init();
    gt_AIUpgradesCasualNormal_Init();
    gt_AIUpgradesHardBrutal_Init();
    gt_StukovDies_Init();
    gt_StukovRevivesAfterCooldown_Init();
    gt_UpdateStukovDefendRegion_Init();
    gt_StukovSpellAI_Init();
    gt_KerriganDies_Init();
    gt_KerriganRevivesAfterCooldown_Init();
    gt_UpdateKerriganDefendRegion_Init();
    gt_KerriganSpellAI_Init();
    gt_VsKerriganWaves_Init();
    gt_VsRaynorWaves_Init();
    gt_KerriganWaves_Init();
    gt_RaynorWaves_Init();
    gt_VoidThrasherAttacks_Init();
    gt_VoidThrasherAttackSentTransmissionQ_Init();
    gt_VoidThrasherAttackAtFrontLineTransmissionQ_Init();
    gt_VoidThrasherAttackAtBaseTransmissionQ_Init();
    gt_VoidThrasherAttackStoppedTransmissionQ_Init();
    gt_VoidThrasherDies_Init();
    gt_VoidThrasherAbilitySpawnUnits_Init();
    gt_VoidThrasherSpawns01_Init();
    gt_VoidThrasherSpawns02_Init();
    gt_VoidThrasherSpawns03_Init();
    gt_VoidThrasherSpawns04_Init();
    gt_VoidThrasherSpawns05_Init();
    gt_VoidThrasherSpawns06_Init();
    gt_MakeVoidThrasherSpawnsAttack_Init();
    gt_VoidThrasherSpawnsUnitGroup_Init();
    gt_NarudEngagedQ_Init();
    gt_NarudAbilitySummonVoidRift_Init();
    gt_NarudAttacksLookAt_Init();
    gt_NarudVoidRiftLookAt_Init();
    gt_NarudIdleClearLookAt_Init();
    gt_NarudNotBuildingClearLookAt_Init();
    gt_NarudRiftDies_Init();
    gt_VoidRiftStartedInNarudBase_Init();
    gt_VoidRiftSpawnsInNarudBase_Init();
    gt_RespawnRaynorSCV_Init();
    gt_RaynorForwardBase01Setup_Init();
    gt_RaynorForwardBase02Setup_Init();
    gt_RaynorForwardBase03Setup_Init();
    gt_RaynorForwardBase01SetupTransmissionQ_Init();
    gt_RaynorForwardBase02SetupTransmissionQ_Init();
    gt_RaynorForwardBase03SetupTransmissionQ_Init();
    gt_RaynorDefendKerriganFrontLine_Init();
    gt_RaynorDefendKerriganFrontLineTransmissionQ_Init();
    gt_KerriganForwardBase01Setup_Init();
    gt_KerriganForwardBase02Setup_Init();
    gt_KerriganForwardBase03Setup_Init();
    gt_KerriganForwardBase01SetupTransmissionQ_Init();
    gt_KerriganForwardBase02SetupTransmissionQ_Init();
    gt_KerriganForwardBase03SetupTransmissionQ_Init();
    gt_BurrowSwarmHosts_Init();
    gt_KerriganDefendRaynorFrontLineFirstTime_Init();
    gt_KerriganDefendRaynorFrontLine_Init();
    gt_KerriganDefendRaynorFrontLineTransmissionQ_Init();
    gt_DestroyVoidCorruption_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveFindCorruptionSourceCreate_Init();
    gt_ObjectiveFindCorruptionSourceComplete_Init();
    gt_ObjectiveFindCorruptionSourceFailed_Init();
    gt_ObjectiveDefeatNarudCreate_Init();
    gt_ObjectiveDefeatNarudComplete_Init();
    gt_ObjectiveDefeatNarudFailed_Init();
    gt_ObjectiveAlliesMustSurviveCreate_Init();
    gt_ObjectiveAlliesMustSurviveComplete_Init();
    gt_ObjectiveAlliesMustSurviveFailed_Init();
    gt_ObjectiveEstablishAllyExpansionsCreate_Init();
    gt_ObjectiveEstablishAllyExpansionsComplete_Init();
    gt_ObjectiveEstablishAllyExpansionsUpdate_Init();
    gt_ObjectiveEstablishAllyExpansionsFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroKillOffUnits_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidCreatePlayersBase_Init();
    gt_MidUnitsSpawn_Init();
    gt_MidUnitConstructionStarts_Init();
    gt_PositionPlayersUnits_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
