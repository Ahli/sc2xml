//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: P04 Void - vs. Player
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] ai88D17C60_defGather;
string[17] ai88D17C60_customData;
wave[17] ai88D17C60_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 1 - Player (First NW)
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave1_enabled;
wave[17] ai88D17C60_wave1_lastWave;
trigger ai88D17C60_wave1_trigger = null;
int ai88D17C60_wave1_runPlayer;
playergroup ai88D17C60_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave1_enabled[init_i] = true;
        ai88D17C60_wave1_lastWave[init_i] = null;
    }

    ai88D17C60_wave1_trigger = TriggerCreate("ai88D17C60_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave1_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave1_runPlayer;
    playergroup target = ai88D17C60_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 210; }
    if (d == 2) { ta = 210; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    tg = 0;
    if (d == 1) { tg = 120; }
    if (d == 2) { tg = 120; }
    if (d == 3) { tg = 120; }
    if (d == 4) { tg = 120; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    TriggerExecute(TriggerFind("gt_S2_SendFirstRaynorNWWave_Func"), true, false);
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave1_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave1_runPlayer = p;
    ai88D17C60_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 2 - Player NW
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave8_enabled;
unitgroup[17] ai88D17C60_wave8_lastUnits;
wave[17] ai88D17C60_wave8_lastWave;
trigger ai88D17C60_wave8_trigger = null;
int ai88D17C60_wave8_runPlayer;
playergroup ai88D17C60_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave8_enabled[init_i] = true;
        ai88D17C60_wave8_lastUnits[init_i] = null;
        ai88D17C60_wave8_lastWave[init_i] = null;
    }

    ai88D17C60_wave8_trigger = TriggerCreate("ai88D17C60_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave8_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave8_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave8_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave8_runPlayer;
    playergroup target = ai88D17C60_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1103);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(358);

    ai88D17C60_wave8_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave8_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave8_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave8_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave8_runPlayer = p;
    ai88D17C60_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 3 - Player NW
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave2_enabled;
unitgroup[17] ai88D17C60_wave2_lastUnits;
wave[17] ai88D17C60_wave2_lastWave;
trigger ai88D17C60_wave2_trigger = null;
int ai88D17C60_wave2_runPlayer;
playergroup ai88D17C60_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave2_enabled[init_i] = true;
        ai88D17C60_wave2_lastUnits[init_i] = null;
        ai88D17C60_wave2_lastWave[init_i] = null;
    }

    ai88D17C60_wave2_trigger = TriggerCreate("ai88D17C60_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave2_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave2_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave2_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave2_runPlayer;
    playergroup target = ai88D17C60_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1103);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(358);

    ai88D17C60_wave2_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ultralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave2_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave2_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave2_runPlayer = p;
    ai88D17C60_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 4 - Player NW
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave7_enabled;
unitgroup[17] ai88D17C60_wave7_lastUnits;
wave[17] ai88D17C60_wave7_lastWave;
trigger ai88D17C60_wave7_trigger = null;
int ai88D17C60_wave7_runPlayer;
playergroup ai88D17C60_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave7_enabled[init_i] = true;
        ai88D17C60_wave7_lastUnits[init_i] = null;
        ai88D17C60_wave7_lastWave[init_i] = null;
    }

    ai88D17C60_wave7_trigger = TriggerCreate("ai88D17C60_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave7_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave7_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave7_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave7_runPlayer;
    playergroup target = ai88D17C60_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1103);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(358);

    ai88D17C60_wave7_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave7_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave7_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave7_runPlayer = p;
    ai88D17C60_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 5 - Player (First W)
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave4_enabled;
wave[17] ai88D17C60_wave4_lastWave;
trigger ai88D17C60_wave4_trigger = null;
int ai88D17C60_wave4_runPlayer;
playergroup ai88D17C60_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave4_enabled[init_i] = true;
        ai88D17C60_wave4_lastWave[init_i] = null;
    }

    ai88D17C60_wave4_trigger = TriggerCreate("ai88D17C60_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave4_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave4_runPlayer;
    playergroup target = ai88D17C60_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    TriggerExecute(TriggerFind("gt_S2_SendFirstRaynorWWave_Func"), true, false);
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave4_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave4_runPlayer = p;
    ai88D17C60_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 6 - Player NW
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave18_enabled;
unitgroup[17] ai88D17C60_wave18_lastUnits;
wave[17] ai88D17C60_wave18_lastWave;
trigger ai88D17C60_wave18_trigger = null;
int ai88D17C60_wave18_runPlayer;
playergroup ai88D17C60_wave18_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave18_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave18_enabled[init_i] = true;
        ai88D17C60_wave18_lastUnits[init_i] = null;
        ai88D17C60_wave18_lastWave[init_i] = null;
    }

    ai88D17C60_wave18_trigger = TriggerCreate("ai88D17C60_wave18_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave18_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave18_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave18_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave18_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave18_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave18_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave18_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave18_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave18_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave18_runPlayer;
    playergroup target = ai88D17C60_wave18_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave18_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1103);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(358);

    ai88D17C60_wave18_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ghost", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave18_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Goliath", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave18_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave18_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave18_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave18_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave18_runPlayer = p;
    ai88D17C60_wave18_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave18_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 7 - Player W
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave19_enabled;
unitgroup[17] ai88D17C60_wave19_lastUnits;
wave[17] ai88D17C60_wave19_lastWave;
trigger ai88D17C60_wave19_trigger = null;
int ai88D17C60_wave19_runPlayer;
playergroup ai88D17C60_wave19_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave19_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave19_enabled[init_i] = true;
        ai88D17C60_wave19_lastUnits[init_i] = null;
        ai88D17C60_wave19_lastWave[init_i] = null;
    }

    ai88D17C60_wave19_trigger = TriggerCreate("ai88D17C60_wave19_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave19_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave19_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave19_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave19_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave19_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave19_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave19_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave19_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave19_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave19_runPlayer;
    playergroup target = ai88D17C60_wave19_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave19_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1101);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(356);

    ai88D17C60_wave19_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave19_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave19_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave19_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave19_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave19_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave19_runPlayer = p;
    ai88D17C60_wave19_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave19_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: RAGE WAVE 03 (Raynor NW)
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave10_enabled;
wave[17] ai88D17C60_wave10_lastWave;
trigger ai88D17C60_wave10_trigger = null;
int ai88D17C60_wave10_runPlayer;
playergroup ai88D17C60_wave10_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave10_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave10_enabled[init_i] = true;
        ai88D17C60_wave10_lastWave[init_i] = null;
    }

    ai88D17C60_wave10_trigger = TriggerCreate("ai88D17C60_wave10_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave10_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave10_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave10_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave10_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave10_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave10_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave10_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave10_runPlayer;
    playergroup target = ai88D17C60_wave10_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave10_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_S2_RageWave03RaynorNW_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave10_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave10_runPlayer = p;
    ai88D17C60_wave10_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave10_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 8 - Player NW
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave21_enabled;
unitgroup[17] ai88D17C60_wave21_lastUnits;
wave[17] ai88D17C60_wave21_lastWave;
trigger ai88D17C60_wave21_trigger = null;
int ai88D17C60_wave21_runPlayer;
playergroup ai88D17C60_wave21_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave21_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave21_enabled[init_i] = true;
        ai88D17C60_wave21_lastUnits[init_i] = null;
        ai88D17C60_wave21_lastWave[init_i] = null;
    }

    ai88D17C60_wave21_trigger = TriggerCreate("ai88D17C60_wave21_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave21_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave21_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave21_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave21_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave21_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave21_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave21_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave21_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave21_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave21_runPlayer;
    playergroup target = ai88D17C60_wave21_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave21_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1103);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(358);

    ai88D17C60_wave21_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 10; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave21_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave21_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave21_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave21_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave21_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave21_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave21_runPlayer = p;
    ai88D17C60_wave21_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave21_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 9 - Player W
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave22_enabled;
unitgroup[17] ai88D17C60_wave22_lastUnits;
wave[17] ai88D17C60_wave22_lastWave;
trigger ai88D17C60_wave22_trigger = null;
int ai88D17C60_wave22_runPlayer;
playergroup ai88D17C60_wave22_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave22_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave22_enabled[init_i] = true;
        ai88D17C60_wave22_lastUnits[init_i] = null;
        ai88D17C60_wave22_lastWave[init_i] = null;
    }

    ai88D17C60_wave22_trigger = TriggerCreate("ai88D17C60_wave22_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave22_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave22_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave22_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave22_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave22_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave22_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave22_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave22_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave22_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave22_runPlayer;
    playergroup target = ai88D17C60_wave22_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave22_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1101);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(356);

    ai88D17C60_wave22_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave22_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave22_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave22_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave22_runPlayer = p;
    ai88D17C60_wave22_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave22_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 10 - Player NW
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave24_enabled;
unitgroup[17] ai88D17C60_wave24_lastUnits;
wave[17] ai88D17C60_wave24_lastWave;
trigger ai88D17C60_wave24_trigger = null;
int ai88D17C60_wave24_runPlayer;
playergroup ai88D17C60_wave24_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave24_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave24_enabled[init_i] = true;
        ai88D17C60_wave24_lastUnits[init_i] = null;
        ai88D17C60_wave24_lastWave[init_i] = null;
    }

    ai88D17C60_wave24_trigger = TriggerCreate("ai88D17C60_wave24_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave24_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave24_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave24_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave24_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave24_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave24_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave24_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave24_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave24_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave24_runPlayer;
    playergroup target = ai88D17C60_wave24_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave24_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1103);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(358);

    ai88D17C60_wave24_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Reaper", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave24_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ghost", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave24_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Banshee", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave24_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave24_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave24_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave24_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave24_runPlayer = p;
    ai88D17C60_wave24_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave24_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 11 - Player W
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave25_enabled;
unitgroup[17] ai88D17C60_wave25_lastUnits;
wave[17] ai88D17C60_wave25_lastWave;
trigger ai88D17C60_wave25_trigger = null;
int ai88D17C60_wave25_runPlayer;
playergroup ai88D17C60_wave25_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave25_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave25_enabled[init_i] = true;
        ai88D17C60_wave25_lastUnits[init_i] = null;
        ai88D17C60_wave25_lastWave[init_i] = null;
    }

    ai88D17C60_wave25_trigger = TriggerCreate("ai88D17C60_wave25_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave25_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave25_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave25_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave25_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave25_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave25_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave25_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave25_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave25_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave25_runPlayer;
    playergroup target = ai88D17C60_wave25_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave25_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1101);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(356);

    ai88D17C60_wave25_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hydralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave25_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave25_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "BroodLord", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave25_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave25_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave25_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave25_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave25_runPlayer = p;
    ai88D17C60_wave25_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave25_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: RAGE WAVE 06 (Raynor W)
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave5_enabled;
wave[17] ai88D17C60_wave5_lastWave;
trigger ai88D17C60_wave5_trigger = null;
int ai88D17C60_wave5_runPlayer;
playergroup ai88D17C60_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave5_enabled[init_i] = true;
        ai88D17C60_wave5_lastWave[init_i] = null;
    }

    ai88D17C60_wave5_trigger = TriggerCreate("ai88D17C60_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave5_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave5_runPlayer;
    playergroup target = ai88D17C60_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_S2_RageWave06RaynorW_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave5_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave5_runPlayer = p;
    ai88D17C60_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 12 - Player W
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave26_enabled;
unitgroup[17] ai88D17C60_wave26_lastUnits;
wave[17] ai88D17C60_wave26_lastWave;
trigger ai88D17C60_wave26_trigger = null;
int ai88D17C60_wave26_runPlayer;
playergroup ai88D17C60_wave26_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave26_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave26_enabled[init_i] = true;
        ai88D17C60_wave26_lastUnits[init_i] = null;
        ai88D17C60_wave26_lastWave[init_i] = null;
    }

    ai88D17C60_wave26_trigger = TriggerCreate("ai88D17C60_wave26_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave26_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave26_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave26_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave26_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave26_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave26_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave26_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave26_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave26_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave26_runPlayer;
    playergroup target = ai88D17C60_wave26_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave26_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 210; }
    if (d == 2) { ta = 210; }
    if (d == 3) { ta = 210; }
    if (d == 4) { ta = 210; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1101);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(356);

    ai88D17C60_wave26_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave26_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave26_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave26_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave26_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave26_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave26_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave26_runPlayer = p;
    ai88D17C60_wave26_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave26_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 13 - Player NW
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave28_enabled;
unitgroup[17] ai88D17C60_wave28_lastUnits;
wave[17] ai88D17C60_wave28_lastWave;
trigger ai88D17C60_wave28_trigger = null;
int ai88D17C60_wave28_runPlayer;
playergroup ai88D17C60_wave28_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave28_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave28_enabled[init_i] = true;
        ai88D17C60_wave28_lastUnits[init_i] = null;
        ai88D17C60_wave28_lastWave[init_i] = null;
    }

    ai88D17C60_wave28_trigger = TriggerCreate("ai88D17C60_wave28_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave28_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave28_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave28_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave28_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave28_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave28_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave28_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave28_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave28_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave28_runPlayer;
    playergroup target = ai88D17C60_wave28_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave28_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 270; }
    if (d == 2) { ta = 270; }
    if (d == 3) { ta = 270; }
    if (d == 4) { ta = 270; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1103);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(358);

    ai88D17C60_wave28_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hellion", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave28_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Goliath", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave28_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Thor", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave28_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave28_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave28_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave28_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave28_runPlayer = p;
    ai88D17C60_wave28_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave28_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 14 - Player NW
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave3_enabled;
unitgroup[17] ai88D17C60_wave3_lastUnits;
wave[17] ai88D17C60_wave3_lastWave;
trigger ai88D17C60_wave3_trigger = null;
int ai88D17C60_wave3_runPlayer;
playergroup ai88D17C60_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave3_enabled[init_i] = true;
        ai88D17C60_wave3_lastUnits[init_i] = null;
        ai88D17C60_wave3_lastWave[init_i] = null;
    }

    ai88D17C60_wave3_trigger = TriggerCreate("ai88D17C60_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave3_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave3_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave3_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave3_runPlayer;
    playergroup target = ai88D17C60_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(1103);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(79), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(358);

    ai88D17C60_wave3_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Scout", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai88D17C60_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai88D17C60_wave3_lastWave[p] = WaveLastCreated();
    ai88D17C60_lastWave[p] = ai88D17C60_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave3_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave3_runPlayer = p;
    ai88D17C60_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: RUN FINAL RAGE WAVES (If not already started)
//--------------------------------------------------------------------------------------------------
bool[17] ai88D17C60_wave20_enabled;
wave[17] ai88D17C60_wave20_lastWave;
trigger ai88D17C60_wave20_trigger = null;
int ai88D17C60_wave20_runPlayer;
playergroup ai88D17C60_wave20_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave20_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai88D17C60_wave20_enabled[init_i] = true;
        ai88D17C60_wave20_lastWave[init_i] = null;
    }

    ai88D17C60_wave20_trigger = TriggerCreate("ai88D17C60_wave20_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave20_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_wave20_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave20_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai88D17C60_wave20_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave20_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_wave20_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave20_runFunc (bool c, bool a) {
    int p = ai88D17C60_wave20_runPlayer;
    playergroup target = ai88D17C60_wave20_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai88D17C60_wave20_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai88D17C60_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai88D17C60_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_S2_RunFinalRageWaves_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave20_run (int p, playergroup target, bool wait) {
    ai88D17C60_wave20_runPlayer = p;
    ai88D17C60_wave20_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_wave20_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave_enable (int w, int p, bool val) {
    if (w == 1) { ai88D17C60_wave1_enable(p, val); }
    if (w == 8) { ai88D17C60_wave8_enable(p, val); }
    if (w == 2) { ai88D17C60_wave2_enable(p, val); }
    if (w == 7) { ai88D17C60_wave7_enable(p, val); }
    if (w == 4) { ai88D17C60_wave4_enable(p, val); }
    if (w == 18) { ai88D17C60_wave18_enable(p, val); }
    if (w == 19) { ai88D17C60_wave19_enable(p, val); }
    if (w == 10) { ai88D17C60_wave10_enable(p, val); }
    if (w == 21) { ai88D17C60_wave21_enable(p, val); }
    if (w == 22) { ai88D17C60_wave22_enable(p, val); }
    if (w == 24) { ai88D17C60_wave24_enable(p, val); }
    if (w == 25) { ai88D17C60_wave25_enable(p, val); }
    if (w == 5) { ai88D17C60_wave5_enable(p, val); }
    if (w == 26) { ai88D17C60_wave26_enable(p, val); }
    if (w == 28) { ai88D17C60_wave28_enable(p, val); }
    if (w == 3) { ai88D17C60_wave3_enable(p, val); }
    if (w == 20) { ai88D17C60_wave20_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_wave_isEnabled (int w, int p) {
    if (w == 1) { return ai88D17C60_wave1_isEnabled(p); }
    if (w == 8) { return ai88D17C60_wave8_isEnabled(p); }
    if (w == 2) { return ai88D17C60_wave2_isEnabled(p); }
    if (w == 7) { return ai88D17C60_wave7_isEnabled(p); }
    if (w == 4) { return ai88D17C60_wave4_isEnabled(p); }
    if (w == 18) { return ai88D17C60_wave18_isEnabled(p); }
    if (w == 19) { return ai88D17C60_wave19_isEnabled(p); }
    if (w == 10) { return ai88D17C60_wave10_isEnabled(p); }
    if (w == 21) { return ai88D17C60_wave21_isEnabled(p); }
    if (w == 22) { return ai88D17C60_wave22_isEnabled(p); }
    if (w == 24) { return ai88D17C60_wave24_isEnabled(p); }
    if (w == 25) { return ai88D17C60_wave25_isEnabled(p); }
    if (w == 5) { return ai88D17C60_wave5_isEnabled(p); }
    if (w == 26) { return ai88D17C60_wave26_isEnabled(p); }
    if (w == 28) { return ai88D17C60_wave28_isEnabled(p); }
    if (w == 3) { return ai88D17C60_wave3_isEnabled(p); }
    if (w == 20) { return ai88D17C60_wave20_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup ai88D17C60_wave_createdUnits (int w, int p) {
    if (w == 8) { return ai88D17C60_wave8_createdUnits(p); }
    if (w == 2) { return ai88D17C60_wave2_createdUnits(p); }
    if (w == 7) { return ai88D17C60_wave7_createdUnits(p); }
    if (w == 18) { return ai88D17C60_wave18_createdUnits(p); }
    if (w == 19) { return ai88D17C60_wave19_createdUnits(p); }
    if (w == 21) { return ai88D17C60_wave21_createdUnits(p); }
    if (w == 22) { return ai88D17C60_wave22_createdUnits(p); }
    if (w == 24) { return ai88D17C60_wave24_createdUnits(p); }
    if (w == 25) { return ai88D17C60_wave25_createdUnits(p); }
    if (w == 26) { return ai88D17C60_wave26_createdUnits(p); }
    if (w == 28) { return ai88D17C60_wave28_createdUnits(p); }
    if (w == 3) { return ai88D17C60_wave3_createdUnits(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_wave_createdWave (int w, int p) {
    if (w == 1) { return ai88D17C60_wave1_createdWave(p); }
    if (w == 8) { return ai88D17C60_wave8_createdWave(p); }
    if (w == 2) { return ai88D17C60_wave2_createdWave(p); }
    if (w == 7) { return ai88D17C60_wave7_createdWave(p); }
    if (w == 4) { return ai88D17C60_wave4_createdWave(p); }
    if (w == 18) { return ai88D17C60_wave18_createdWave(p); }
    if (w == 19) { return ai88D17C60_wave19_createdWave(p); }
    if (w == 10) { return ai88D17C60_wave10_createdWave(p); }
    if (w == 21) { return ai88D17C60_wave21_createdWave(p); }
    if (w == 22) { return ai88D17C60_wave22_createdWave(p); }
    if (w == 24) { return ai88D17C60_wave24_createdWave(p); }
    if (w == 25) { return ai88D17C60_wave25_createdWave(p); }
    if (w == 5) { return ai88D17C60_wave5_createdWave(p); }
    if (w == 26) { return ai88D17C60_wave26_createdWave(p); }
    if (w == 28) { return ai88D17C60_wave28_createdWave(p); }
    if (w == 3) { return ai88D17C60_wave3_createdWave(p); }
    if (w == 20) { return ai88D17C60_wave20_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { ai88D17C60_wave1_run(p, target, wait); }
    if (w == 8) { ai88D17C60_wave8_run(p, target, wait); }
    if (w == 2) { ai88D17C60_wave2_run(p, target, wait); }
    if (w == 7) { ai88D17C60_wave7_run(p, target, wait); }
    if (w == 4) { ai88D17C60_wave4_run(p, target, wait); }
    if (w == 18) { ai88D17C60_wave18_run(p, target, wait); }
    if (w == 19) { ai88D17C60_wave19_run(p, target, wait); }
    if (w == 10) { ai88D17C60_wave10_run(p, target, wait); }
    if (w == 21) { ai88D17C60_wave21_run(p, target, wait); }
    if (w == 22) { ai88D17C60_wave22_run(p, target, wait); }
    if (w == 24) { ai88D17C60_wave24_run(p, target, wait); }
    if (w == 25) { ai88D17C60_wave25_run(p, target, wait); }
    if (w == 5) { ai88D17C60_wave5_run(p, target, wait); }
    if (w == 26) { ai88D17C60_wave26_run(p, target, wait); }
    if (w == 28) { ai88D17C60_wave28_run(p, target, wait); }
    if (w == 3) { ai88D17C60_wave3_run(p, target, wait); }
    if (w == 20) { ai88D17C60_wave20_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger ai88D17C60_waves_trigger = null;
int ai88D17C60_waves_runPlayer;
playergroup ai88D17C60_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_waves_init () {
    ai88D17C60_waves_trigger = TriggerCreate("ai88D17C60_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool ai88D17C60_waves_runFunc (bool c, bool a) {
    int p = ai88D17C60_waves_runPlayer;
    playergroup target = ai88D17C60_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    ai88D17C60_wave1_run(p, target, true);
    // Custom Wave (Marines, Marauders, Thors)
    ai88D17C60_wave8_run(p, target, true);
    ai88D17C60_wave2_run(p, target, true);
    ai88D17C60_wave7_run(p, target, true);
    ai88D17C60_wave4_run(p, target, true);
    // Custom Wave (Zealots, Stalkers, Immortals)
    ai88D17C60_wave18_run(p, target, false);
    Wait(0, c_timeAI);
    ai88D17C60_wave19_run(p, target, true);
    ai88D17C60_wave10_run(p, target, true);
    ai88D17C60_wave21_run(p, target, true);
    ai88D17C60_wave22_run(p, target, true);
    ai88D17C60_wave24_run(p, target, true);
    ai88D17C60_wave25_run(p, target, true);
    ai88D17C60_wave5_run(p, target, true);
    ai88D17C60_wave26_run(p, target, false);
    Wait(0, c_timeAI);
    ai88D17C60_wave28_run(p, target, true);
    ai88D17C60_wave3_run(p, target, true);
    ai88D17C60_wave20_run(p, target, true);

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_waves_run (int p, playergroup target) {
    ai88D17C60_waves_runPlayer = p;
    ai88D17C60_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai88D17C60_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    ai88D17C60_wave1_enable(p, val);
    ai88D17C60_wave8_enable(p, val);
    ai88D17C60_wave2_enable(p, val);
    ai88D17C60_wave7_enable(p, val);
    ai88D17C60_wave4_enable(p, val);
    ai88D17C60_wave18_enable(p, val);
    ai88D17C60_wave19_enable(p, val);
    ai88D17C60_wave10_enable(p, val);
    ai88D17C60_wave21_enable(p, val);
    ai88D17C60_wave22_enable(p, val);
    ai88D17C60_wave24_enable(p, val);
    ai88D17C60_wave25_enable(p, val);
    ai88D17C60_wave5_enable(p, val);
    ai88D17C60_wave26_enable(p, val);
    ai88D17C60_wave28_enable(p, val);
    ai88D17C60_wave3_enable(p, val);
    ai88D17C60_wave20_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void ai88D17C60_waves_stop () {
    TriggerStop(ai88D17C60_waves_trigger);

    TriggerStop(ai88D17C60_wave1_trigger);
    TriggerStop(ai88D17C60_wave8_trigger);
    TriggerStop(ai88D17C60_wave2_trigger);
    TriggerStop(ai88D17C60_wave7_trigger);
    TriggerStop(ai88D17C60_wave4_trigger);
    TriggerStop(ai88D17C60_wave18_trigger);
    TriggerStop(ai88D17C60_wave19_trigger);
    TriggerStop(ai88D17C60_wave10_trigger);
    TriggerStop(ai88D17C60_wave21_trigger);
    TriggerStop(ai88D17C60_wave22_trigger);
    TriggerStop(ai88D17C60_wave24_trigger);
    TriggerStop(ai88D17C60_wave25_trigger);
    TriggerStop(ai88D17C60_wave5_trigger);
    TriggerStop(ai88D17C60_wave26_trigger);
    TriggerStop(ai88D17C60_wave28_trigger);
    TriggerStop(ai88D17C60_wave3_trigger);
    TriggerStop(ai88D17C60_wave20_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void ai88D17C60_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai88D17C60_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string ai88D17C60_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave ai88D17C60_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai88D17C60_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool ai88D17C60_initialized = false;

//--------------------------------------------------------------------------------------------------
void ai88D17C60_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!ai88D17C60_initialized) {
        ai88D17C60_wave1_init();
        ai88D17C60_wave8_init();
        ai88D17C60_wave2_init();
        ai88D17C60_wave7_init();
        ai88D17C60_wave4_init();
        ai88D17C60_wave18_init();
        ai88D17C60_wave19_init();
        ai88D17C60_wave10_init();
        ai88D17C60_wave21_init();
        ai88D17C60_wave22_init();
        ai88D17C60_wave24_init();
        ai88D17C60_wave25_init();
        ai88D17C60_wave5_init();
        ai88D17C60_wave26_init();
        ai88D17C60_wave28_init();
        ai88D17C60_wave3_init();
        ai88D17C60_wave20_init();
        ai88D17C60_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            ai88D17C60_defGather[init_i] = PointFromId(0);
        }

        ai88D17C60_initialized = true;
    }

    AICampaignStart(p);
}
