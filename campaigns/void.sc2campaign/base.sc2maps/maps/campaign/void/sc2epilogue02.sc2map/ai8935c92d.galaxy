//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: P05 Void - vs. Allies
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] ai8935C92D_defGather;
string[17] ai8935C92D_customData;
wave[17] ai8935C92D_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 1 - Zerg SE (Intro Bonus Objective)
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave2_enabled;
unitgroup[17] ai8935C92D_wave2_lastUnits;
wave[17] ai8935C92D_wave2_lastWave;
trigger ai8935C92D_wave2_trigger = null;
int ai8935C92D_wave2_runPlayer;
playergroup ai8935C92D_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave2_enabled[init_i] = true;
        ai8935C92D_wave2_lastUnits[init_i] = null;
        ai8935C92D_wave2_lastWave[init_i] = null;
    }

    ai8935C92D_wave2_trigger = TriggerCreate("ai8935C92D_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave2_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave2_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave2_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave2_runPlayer;
    playergroup target = ai8935C92D_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 300; }
    if (d == 2) { ta = 300; }
    if (d == 3) { ta = 270; }
    if (d == 4) { ta = 270; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    TriggerExecute(TriggerFind("gt_S2_IntroBonusObjectivesQ_Func"), true, false);
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(351);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(15), false);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(359);

    ai8935C92D_wave2_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 12; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marine", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Firebat", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Thor", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "SiegeTank", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave2_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave2_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave2_runPlayer = p;
    ai8935C92D_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 2 - Protoss
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave5_enabled;
unitgroup[17] ai8935C92D_wave5_lastUnits;
wave[17] ai8935C92D_wave5_lastWave;
trigger ai8935C92D_wave5_trigger = null;
int ai8935C92D_wave5_runPlayer;
playergroup ai8935C92D_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave5_enabled[init_i] = true;
        ai8935C92D_wave5_lastUnits[init_i] = null;
        ai8935C92D_wave5_lastWave[init_i] = null;
    }

    ai8935C92D_wave5_trigger = TriggerCreate("ai8935C92D_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave5_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave5_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave5_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave5_runPlayer;
    playergroup target = ai8935C92D_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(350);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(357);

    ai8935C92D_wave5_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 16; }
    if (d == 2) { createCount = 16; }
    if (d == 3) { createCount = 16; }
    if (d == 4) { createCount = 16; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave5_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 12; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hydralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave5_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ultralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave5_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave5_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave5_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave5_runPlayer = p;
    ai8935C92D_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 3 - Zerg SE
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave18_enabled;
unitgroup[17] ai8935C92D_wave18_lastUnits;
wave[17] ai8935C92D_wave18_lastWave;
trigger ai8935C92D_wave18_trigger = null;
int ai8935C92D_wave18_runPlayer;
playergroup ai8935C92D_wave18_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave18_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave18_enabled[init_i] = true;
        ai8935C92D_wave18_lastUnits[init_i] = null;
        ai8935C92D_wave18_lastWave[init_i] = null;
    }

    ai8935C92D_wave18_trigger = TriggerCreate("ai8935C92D_wave18_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave18_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave18_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave18_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave18_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave18_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave18_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave18_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave18_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave18_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave18_runPlayer;
    playergroup target = ai8935C92D_wave18_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave18_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 90; }
    if (d == 2) { ta = 90; }
    if (d == 3) { ta = 90; }
    if (d == 4) { ta = 90; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(351);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(15), false);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(359);

    ai8935C92D_wave18_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 12; }
    if (d == 2) { createCount = 12; }
    if (d == 3) { createCount = 12; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave18_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 7; }
    if (d == 4) { createCount = 7; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave18_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave18_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave18_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave18_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave18_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave18_runPlayer = p;
    ai8935C92D_wave18_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave18_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 4 - Protoss
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave17_enabled;
unitgroup[17] ai8935C92D_wave17_lastUnits;
wave[17] ai8935C92D_wave17_lastWave;
trigger ai8935C92D_wave17_trigger = null;
int ai8935C92D_wave17_runPlayer;
playergroup ai8935C92D_wave17_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave17_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave17_enabled[init_i] = true;
        ai8935C92D_wave17_lastUnits[init_i] = null;
        ai8935C92D_wave17_lastWave[init_i] = null;
    }

    ai8935C92D_wave17_trigger = TriggerCreate("ai8935C92D_wave17_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave17_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave17_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave17_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave17_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave17_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave17_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave17_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave17_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave17_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave17_runPlayer;
    playergroup target = ai8935C92D_wave17_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave17_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(350);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(357);

    ai8935C92D_wave17_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 16; }
    if (d == 2) { createCount = 16; }
    if (d == 3) { createCount = 16; }
    if (d == 4) { createCount = 16; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zergling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave17_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 16; }
    if (d == 2) { createCount = 16; }
    if (d == 3) { createCount = 16; }
    if (d == 4) { createCount = 16; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marine", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave17_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave17_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "SiegeTank", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave17_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Battlecruiser", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave17_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave17_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave17_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave17_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave17_runPlayer = p;
    ai8935C92D_wave17_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave17_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: RAGE WAVE 01 (Zagara SE)
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave9_enabled;
wave[17] ai8935C92D_wave9_lastWave;
trigger ai8935C92D_wave9_trigger = null;
int ai8935C92D_wave9_runPlayer;
playergroup ai8935C92D_wave9_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave9_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave9_enabled[init_i] = true;
        ai8935C92D_wave9_lastWave[init_i] = null;
    }

    ai8935C92D_wave9_trigger = TriggerCreate("ai8935C92D_wave9_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave9_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave9_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave9_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave9_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave9_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave9_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave9_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave9_runPlayer;
    playergroup target = ai8935C92D_wave9_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave9_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 90; }
    if (d == 2) { ta = 90; }
    if (d == 3) { ta = 90; }
    if (d == 4) { ta = 90; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_S2_RageWave01ZagaraSE_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave9_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave9_runPlayer = p;
    ai8935C92D_wave9_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave9_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 4 - Zerg SE
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave3_enabled;
unitgroup[17] ai8935C92D_wave3_lastUnits;
wave[17] ai8935C92D_wave3_lastWave;
trigger ai8935C92D_wave3_trigger = null;
int ai8935C92D_wave3_runPlayer;
playergroup ai8935C92D_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave3_enabled[init_i] = true;
        ai8935C92D_wave3_lastUnits[init_i] = null;
        ai8935C92D_wave3_lastWave[init_i] = null;
    }

    ai8935C92D_wave3_trigger = TriggerCreate("ai8935C92D_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave3_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave3_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave3_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave3_runPlayer;
    playergroup target = ai8935C92D_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 150; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(351);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(15), false);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(359);

    ai8935C92D_wave3_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 10; }
    if (d == 2) { createCount = 10; }
    if (d == 3) { createCount = 12; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marine", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marauder", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "SiegeTank", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Thor", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave3_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave3_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave3_runPlayer = p;
    ai8935C92D_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: RAGE WAVE 02 (Artanis SW)
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave14_enabled;
wave[17] ai8935C92D_wave14_lastWave;
trigger ai8935C92D_wave14_trigger = null;
int ai8935C92D_wave14_runPlayer;
playergroup ai8935C92D_wave14_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave14_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave14_enabled[init_i] = true;
        ai8935C92D_wave14_lastWave[init_i] = null;
    }

    ai8935C92D_wave14_trigger = TriggerCreate("ai8935C92D_wave14_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave14_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave14_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave14_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave14_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave14_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave14_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave14_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave14_runPlayer;
    playergroup target = ai8935C92D_wave14_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave14_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_S2_RageWave02ArtanisSW_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave14_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave14_runPlayer = p;
    ai8935C92D_wave14_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave14_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 5 - Zerg SE
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave20_enabled;
unitgroup[17] ai8935C92D_wave20_lastUnits;
wave[17] ai8935C92D_wave20_lastWave;
trigger ai8935C92D_wave20_trigger = null;
int ai8935C92D_wave20_runPlayer;
playergroup ai8935C92D_wave20_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave20_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave20_enabled[init_i] = true;
        ai8935C92D_wave20_lastUnits[init_i] = null;
        ai8935C92D_wave20_lastWave[init_i] = null;
    }

    ai8935C92D_wave20_trigger = TriggerCreate("ai8935C92D_wave20_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave20_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave20_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave20_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave20_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave20_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave20_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave20_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave20_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave20_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave20_runPlayer;
    playergroup target = ai8935C92D_wave20_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave20_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(351);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(15), false);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(359);

    ai8935C92D_wave20_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave20_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Banshee", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave20_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ultralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave20_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave20_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave20_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave20_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave20_runPlayer = p;
    ai8935C92D_wave20_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave20_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 6 - Protoss
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave19_enabled;
unitgroup[17] ai8935C92D_wave19_lastUnits;
wave[17] ai8935C92D_wave19_lastWave;
trigger ai8935C92D_wave19_trigger = null;
int ai8935C92D_wave19_runPlayer;
playergroup ai8935C92D_wave19_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave19_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave19_enabled[init_i] = true;
        ai8935C92D_wave19_lastUnits[init_i] = null;
        ai8935C92D_wave19_lastWave[init_i] = null;
    }

    ai8935C92D_wave19_trigger = TriggerCreate("ai8935C92D_wave19_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave19_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave19_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave19_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave19_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave19_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave19_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave19_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave19_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave19_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave19_runPlayer;
    playergroup target = ai8935C92D_wave19_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave19_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 90; }
    if (d == 2) { ta = 90; }
    if (d == 3) { ta = 90; }
    if (d == 4) { ta = 90; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(350);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(357);

    ai8935C92D_wave19_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 7; }
    if (d == 2) { createCount = 7; }
    if (d == 3) { createCount = 7; }
    if (d == 4) { createCount = 7; }
    if (createCount > 0) {
        UnitCreate(createCount, "Hydralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave19_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave19_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave19_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Carrier", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave19_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave19_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave19_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave19_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave19_runPlayer = p;
    ai8935C92D_wave19_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave19_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: RAGE WAVE 04 (Zagara SE)
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave15_enabled;
wave[17] ai8935C92D_wave15_lastWave;
trigger ai8935C92D_wave15_trigger = null;
int ai8935C92D_wave15_runPlayer;
playergroup ai8935C92D_wave15_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave15_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave15_enabled[init_i] = true;
        ai8935C92D_wave15_lastWave[init_i] = null;
    }

    ai8935C92D_wave15_trigger = TriggerCreate("ai8935C92D_wave15_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave15_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave15_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave15_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave15_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave15_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave15_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave15_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave15_runPlayer;
    playergroup target = ai8935C92D_wave15_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave15_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_S2_RageWave04ZagaraSE_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave15_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave15_runPlayer = p;
    ai8935C92D_wave15_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave15_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: RAGE WAVE 05 (Artanis SW)
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave11_enabled;
wave[17] ai8935C92D_wave11_lastWave;
trigger ai8935C92D_wave11_trigger = null;
int ai8935C92D_wave11_runPlayer;
playergroup ai8935C92D_wave11_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave11_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave11_enabled[init_i] = true;
        ai8935C92D_wave11_lastWave[init_i] = null;
    }

    ai8935C92D_wave11_trigger = TriggerCreate("ai8935C92D_wave11_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave11_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave11_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave11_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave11_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave11_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave11_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave11_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave11_runPlayer;
    playergroup target = ai8935C92D_wave11_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave11_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 10; }
    if (d == 2) { ta = 10; }
    if (d == 3) { ta = 10; }
    if (d == 4) { ta = 10; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_S2_RageWave05ArtanisSW_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave11_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave11_runPlayer = p;
    ai8935C92D_wave11_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave11_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 7 - Zerg SE
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave22_enabled;
unitgroup[17] ai8935C92D_wave22_lastUnits;
wave[17] ai8935C92D_wave22_lastWave;
trigger ai8935C92D_wave22_trigger = null;
int ai8935C92D_wave22_runPlayer;
playergroup ai8935C92D_wave22_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave22_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave22_enabled[init_i] = true;
        ai8935C92D_wave22_lastUnits[init_i] = null;
        ai8935C92D_wave22_lastWave[init_i] = null;
    }

    ai8935C92D_wave22_trigger = TriggerCreate("ai8935C92D_wave22_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave22_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave22_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave22_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave22_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave22_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave22_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave22_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave22_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave22_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave22_runPlayer;
    playergroup target = ai8935C92D_wave22_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave22_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 200; }
    if (d == 2) { ta = 200; }
    if (d == 3) { ta = 200; }
    if (d == 4) { ta = 200; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(351);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(15), false);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(359);

    ai8935C92D_wave22_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Reaper", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Roach", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "WarHound", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "BroodLord", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Thor", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave22_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave22_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave22_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave22_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave22_runPlayer = p;
    ai8935C92D_wave22_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave22_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 8 - Protoss
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave21_enabled;
unitgroup[17] ai8935C92D_wave21_lastUnits;
wave[17] ai8935C92D_wave21_lastWave;
trigger ai8935C92D_wave21_trigger = null;
int ai8935C92D_wave21_runPlayer;
playergroup ai8935C92D_wave21_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave21_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave21_enabled[init_i] = true;
        ai8935C92D_wave21_lastUnits[init_i] = null;
        ai8935C92D_wave21_lastWave[init_i] = null;
    }

    ai8935C92D_wave21_trigger = TriggerCreate("ai8935C92D_wave21_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave21_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave21_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave21_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave21_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave21_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave21_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave21_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave21_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave21_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave21_runPlayer;
    playergroup target = ai8935C92D_wave21_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave21_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 200; }
    if (d == 2) { ta = 200; }
    if (d == 3) { ta = 200; }
    if (d == 4) { ta = 200; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(350);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(357);

    ai8935C92D_wave21_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 10; }
    if (d == 4) { createCount = 10; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave21_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Baneling", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave21_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Banshee", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave21_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Ultralisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave21_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave21_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave21_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave21_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave21_runPlayer = p;
    ai8935C92D_wave21_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave21_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: RAGE WAVE 07 (Zagara SE)
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave7_enabled;
wave[17] ai8935C92D_wave7_lastWave;
trigger ai8935C92D_wave7_trigger = null;
int ai8935C92D_wave7_runPlayer;
playergroup ai8935C92D_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave7_enabled[init_i] = true;
        ai8935C92D_wave7_lastWave[init_i] = null;
    }

    ai8935C92D_wave7_trigger = TriggerCreate("ai8935C92D_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave7_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave7_runPlayer;
    playergroup target = ai8935C92D_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_S2_RageWave07ZagaraSE_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave7_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave7_runPlayer = p;
    ai8935C92D_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: RAGE WAVE 08 (Artanis SW)
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave8_enabled;
wave[17] ai8935C92D_wave8_lastWave;
trigger ai8935C92D_wave8_trigger = null;
int ai8935C92D_wave8_runPlayer;
playergroup ai8935C92D_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave8_enabled[init_i] = true;
        ai8935C92D_wave8_lastWave[init_i] = null;
    }

    ai8935C92D_wave8_trigger = TriggerCreate("ai8935C92D_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave8_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave8_runPlayer;
    playergroup target = ai8935C92D_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 5; }
    if (d == 2) { ta = 5; }
    if (d == 3) { ta = 5; }
    if (d == 4) { ta = 5; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    TriggerExecute(TriggerFind("gt_S2_RageWave08ArtanisSW_Func"), true, false);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave8_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave8_runPlayer = p;
    ai8935C92D_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 9 - Zerg SE
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave23_enabled;
unitgroup[17] ai8935C92D_wave23_lastUnits;
wave[17] ai8935C92D_wave23_lastWave;
trigger ai8935C92D_wave23_trigger = null;
int ai8935C92D_wave23_runPlayer;
playergroup ai8935C92D_wave23_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave23_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave23_enabled[init_i] = true;
        ai8935C92D_wave23_lastUnits[init_i] = null;
        ai8935C92D_wave23_lastWave[init_i] = null;
    }

    ai8935C92D_wave23_trigger = TriggerCreate("ai8935C92D_wave23_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave23_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave23_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave23_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave23_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave23_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave23_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave23_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave23_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave23_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave23_runPlayer;
    playergroup target = ai8935C92D_wave23_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave23_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 205; }
    if (d == 2) { ta = 205; }
    if (d == 3) { ta = 205; }
    if (d == 4) { ta = 205; }
    tg = 0;
    if (d == 1) { tg = 60; }
    if (d == 2) { tg = 60; }
    if (d == 3) { tg = 60; }
    if (d == 4) { tg = 60; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(351);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(15), false);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(359);

    ai8935C92D_wave23_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 12; }
    if (d == 2) { createCount = 12; }
    if (d == 3) { createCount = 12; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marine", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Scout", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "VoidRay", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Carrier", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave23_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave23_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave23_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave23_runPlayer = p;
    ai8935C92D_wave23_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave23_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 10 - Protoss
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave24_enabled;
unitgroup[17] ai8935C92D_wave24_lastUnits;
wave[17] ai8935C92D_wave24_lastWave;
trigger ai8935C92D_wave24_trigger = null;
int ai8935C92D_wave24_runPlayer;
playergroup ai8935C92D_wave24_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave24_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave24_enabled[init_i] = true;
        ai8935C92D_wave24_lastUnits[init_i] = null;
        ai8935C92D_wave24_lastWave[init_i] = null;
    }

    ai8935C92D_wave24_trigger = TriggerCreate("ai8935C92D_wave24_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave24_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave24_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave24_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave24_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave24_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave24_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave24_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave24_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave24_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave24_runPlayer;
    playergroup target = ai8935C92D_wave24_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave24_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(350);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(357);

    ai8935C92D_wave24_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Mutalisk", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave24_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "BroodLord", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave24_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Battlecruiser", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave24_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave24_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave24_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave24_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave24_runPlayer = p;
    ai8935C92D_wave24_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave24_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: Wave 11 - Zerg SE
//--------------------------------------------------------------------------------------------------
bool[17] ai8935C92D_wave4_enabled;
unitgroup[17] ai8935C92D_wave4_lastUnits;
wave[17] ai8935C92D_wave4_lastWave;
trigger ai8935C92D_wave4_trigger = null;
int ai8935C92D_wave4_runPlayer;
playergroup ai8935C92D_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai8935C92D_wave4_enabled[init_i] = true;
        ai8935C92D_wave4_lastUnits[init_i] = null;
        ai8935C92D_wave4_lastWave[init_i] = null;
    }

    ai8935C92D_wave4_trigger = TriggerCreate("ai8935C92D_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai8935C92D_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave4_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave4_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave4_runFunc (bool c, bool a) {
    int p = ai8935C92D_wave4_runPlayer;
    playergroup target = ai8935C92D_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai8935C92D_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai8935C92D_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = ai8935C92D_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    gatherPoint = PointFromId(351);
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(15), false);
    AIAttackWaveAddWaypoint(p, PointFromId(106), false);
    AIAttackWaveAddWaypoint(p, PointFromId(362), false);

    createPoint = gatherPoint;
    createPoint = PointFromId(359);

    ai8935C92D_wave4_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 12; }
    if (d == 2) { createCount = 12; }
    if (d == 3) { createCount = 12; }
    if (d == 4) { createCount = 12; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marine", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave4_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Firebat", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave4_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Marauder", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave4_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "SiegeTank", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave4_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Battlecruiser", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(ai8935C92D_wave4_lastUnits[p], UnitLastCreatedGroup());
    }

    AIAttackWaveSend(p, ts, false);
    ai8935C92D_wave4_lastWave[p] = WaveLastCreated();
    ai8935C92D_lastWave[p] = ai8935C92D_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave4_run (int p, playergroup target, bool wait) {
    ai8935C92D_wave4_runPlayer = p;
    ai8935C92D_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave_enable (int w, int p, bool val) {
    if (w == 2) { ai8935C92D_wave2_enable(p, val); }
    if (w == 5) { ai8935C92D_wave5_enable(p, val); }
    if (w == 18) { ai8935C92D_wave18_enable(p, val); }
    if (w == 17) { ai8935C92D_wave17_enable(p, val); }
    if (w == 9) { ai8935C92D_wave9_enable(p, val); }
    if (w == 3) { ai8935C92D_wave3_enable(p, val); }
    if (w == 14) { ai8935C92D_wave14_enable(p, val); }
    if (w == 20) { ai8935C92D_wave20_enable(p, val); }
    if (w == 19) { ai8935C92D_wave19_enable(p, val); }
    if (w == 15) { ai8935C92D_wave15_enable(p, val); }
    if (w == 11) { ai8935C92D_wave11_enable(p, val); }
    if (w == 22) { ai8935C92D_wave22_enable(p, val); }
    if (w == 21) { ai8935C92D_wave21_enable(p, val); }
    if (w == 7) { ai8935C92D_wave7_enable(p, val); }
    if (w == 8) { ai8935C92D_wave8_enable(p, val); }
    if (w == 23) { ai8935C92D_wave23_enable(p, val); }
    if (w == 24) { ai8935C92D_wave24_enable(p, val); }
    if (w == 4) { ai8935C92D_wave4_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_wave_isEnabled (int w, int p) {
    if (w == 2) { return ai8935C92D_wave2_isEnabled(p); }
    if (w == 5) { return ai8935C92D_wave5_isEnabled(p); }
    if (w == 18) { return ai8935C92D_wave18_isEnabled(p); }
    if (w == 17) { return ai8935C92D_wave17_isEnabled(p); }
    if (w == 9) { return ai8935C92D_wave9_isEnabled(p); }
    if (w == 3) { return ai8935C92D_wave3_isEnabled(p); }
    if (w == 14) { return ai8935C92D_wave14_isEnabled(p); }
    if (w == 20) { return ai8935C92D_wave20_isEnabled(p); }
    if (w == 19) { return ai8935C92D_wave19_isEnabled(p); }
    if (w == 15) { return ai8935C92D_wave15_isEnabled(p); }
    if (w == 11) { return ai8935C92D_wave11_isEnabled(p); }
    if (w == 22) { return ai8935C92D_wave22_isEnabled(p); }
    if (w == 21) { return ai8935C92D_wave21_isEnabled(p); }
    if (w == 7) { return ai8935C92D_wave7_isEnabled(p); }
    if (w == 8) { return ai8935C92D_wave8_isEnabled(p); }
    if (w == 23) { return ai8935C92D_wave23_isEnabled(p); }
    if (w == 24) { return ai8935C92D_wave24_isEnabled(p); }
    if (w == 4) { return ai8935C92D_wave4_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup ai8935C92D_wave_createdUnits (int w, int p) {
    if (w == 2) { return ai8935C92D_wave2_createdUnits(p); }
    if (w == 5) { return ai8935C92D_wave5_createdUnits(p); }
    if (w == 18) { return ai8935C92D_wave18_createdUnits(p); }
    if (w == 17) { return ai8935C92D_wave17_createdUnits(p); }
    if (w == 3) { return ai8935C92D_wave3_createdUnits(p); }
    if (w == 20) { return ai8935C92D_wave20_createdUnits(p); }
    if (w == 19) { return ai8935C92D_wave19_createdUnits(p); }
    if (w == 22) { return ai8935C92D_wave22_createdUnits(p); }
    if (w == 21) { return ai8935C92D_wave21_createdUnits(p); }
    if (w == 23) { return ai8935C92D_wave23_createdUnits(p); }
    if (w == 24) { return ai8935C92D_wave24_createdUnits(p); }
    if (w == 4) { return ai8935C92D_wave4_createdUnits(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_wave_createdWave (int w, int p) {
    if (w == 2) { return ai8935C92D_wave2_createdWave(p); }
    if (w == 5) { return ai8935C92D_wave5_createdWave(p); }
    if (w == 18) { return ai8935C92D_wave18_createdWave(p); }
    if (w == 17) { return ai8935C92D_wave17_createdWave(p); }
    if (w == 9) { return ai8935C92D_wave9_createdWave(p); }
    if (w == 3) { return ai8935C92D_wave3_createdWave(p); }
    if (w == 14) { return ai8935C92D_wave14_createdWave(p); }
    if (w == 20) { return ai8935C92D_wave20_createdWave(p); }
    if (w == 19) { return ai8935C92D_wave19_createdWave(p); }
    if (w == 15) { return ai8935C92D_wave15_createdWave(p); }
    if (w == 11) { return ai8935C92D_wave11_createdWave(p); }
    if (w == 22) { return ai8935C92D_wave22_createdWave(p); }
    if (w == 21) { return ai8935C92D_wave21_createdWave(p); }
    if (w == 7) { return ai8935C92D_wave7_createdWave(p); }
    if (w == 8) { return ai8935C92D_wave8_createdWave(p); }
    if (w == 23) { return ai8935C92D_wave23_createdWave(p); }
    if (w == 24) { return ai8935C92D_wave24_createdWave(p); }
    if (w == 4) { return ai8935C92D_wave4_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 2) { ai8935C92D_wave2_run(p, target, wait); }
    if (w == 5) { ai8935C92D_wave5_run(p, target, wait); }
    if (w == 18) { ai8935C92D_wave18_run(p, target, wait); }
    if (w == 17) { ai8935C92D_wave17_run(p, target, wait); }
    if (w == 9) { ai8935C92D_wave9_run(p, target, wait); }
    if (w == 3) { ai8935C92D_wave3_run(p, target, wait); }
    if (w == 14) { ai8935C92D_wave14_run(p, target, wait); }
    if (w == 20) { ai8935C92D_wave20_run(p, target, wait); }
    if (w == 19) { ai8935C92D_wave19_run(p, target, wait); }
    if (w == 15) { ai8935C92D_wave15_run(p, target, wait); }
    if (w == 11) { ai8935C92D_wave11_run(p, target, wait); }
    if (w == 22) { ai8935C92D_wave22_run(p, target, wait); }
    if (w == 21) { ai8935C92D_wave21_run(p, target, wait); }
    if (w == 7) { ai8935C92D_wave7_run(p, target, wait); }
    if (w == 8) { ai8935C92D_wave8_run(p, target, wait); }
    if (w == 23) { ai8935C92D_wave23_run(p, target, wait); }
    if (w == 24) { ai8935C92D_wave24_run(p, target, wait); }
    if (w == 4) { ai8935C92D_wave4_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger ai8935C92D_waves_trigger = null;
int ai8935C92D_waves_runPlayer;
playergroup ai8935C92D_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_waves_init () {
    ai8935C92D_waves_trigger = TriggerCreate("ai8935C92D_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool ai8935C92D_waves_runFunc (bool c, bool a) {
    int p = ai8935C92D_waves_runPlayer;
    playergroup target = ai8935C92D_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    ai8935C92D_wave2_run(p, target, true);
    ai8935C92D_wave5_run(p, target, true);
    ai8935C92D_wave18_run(p, target, true);
    ai8935C92D_wave17_run(p, target, true);
    ai8935C92D_wave9_run(p, target, true);
    ai8935C92D_wave3_run(p, target, true);
    ai8935C92D_wave14_run(p, target, true);
    ai8935C92D_wave20_run(p, target, true);
    ai8935C92D_wave19_run(p, target, true);
    ai8935C92D_wave15_run(p, target, true);
    ai8935C92D_wave11_run(p, target, true);
    ai8935C92D_wave22_run(p, target, false);
    Wait(0, c_timeAI);
    ai8935C92D_wave21_run(p, target, true);
    ai8935C92D_wave7_run(p, target, true);
    ai8935C92D_wave8_run(p, target, true);
    ai8935C92D_wave23_run(p, target, true);
    ai8935C92D_wave24_run(p, target, true);
    ai8935C92D_wave4_run(p, target, true);

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_waves_run (int p, playergroup target) {
    ai8935C92D_waves_runPlayer = p;
    ai8935C92D_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai8935C92D_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    ai8935C92D_wave2_enable(p, val);
    ai8935C92D_wave5_enable(p, val);
    ai8935C92D_wave18_enable(p, val);
    ai8935C92D_wave17_enable(p, val);
    ai8935C92D_wave9_enable(p, val);
    ai8935C92D_wave3_enable(p, val);
    ai8935C92D_wave14_enable(p, val);
    ai8935C92D_wave20_enable(p, val);
    ai8935C92D_wave19_enable(p, val);
    ai8935C92D_wave15_enable(p, val);
    ai8935C92D_wave11_enable(p, val);
    ai8935C92D_wave22_enable(p, val);
    ai8935C92D_wave21_enable(p, val);
    ai8935C92D_wave7_enable(p, val);
    ai8935C92D_wave8_enable(p, val);
    ai8935C92D_wave23_enable(p, val);
    ai8935C92D_wave24_enable(p, val);
    ai8935C92D_wave4_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void ai8935C92D_waves_stop () {
    TriggerStop(ai8935C92D_waves_trigger);

    TriggerStop(ai8935C92D_wave2_trigger);
    TriggerStop(ai8935C92D_wave5_trigger);
    TriggerStop(ai8935C92D_wave18_trigger);
    TriggerStop(ai8935C92D_wave17_trigger);
    TriggerStop(ai8935C92D_wave9_trigger);
    TriggerStop(ai8935C92D_wave3_trigger);
    TriggerStop(ai8935C92D_wave14_trigger);
    TriggerStop(ai8935C92D_wave20_trigger);
    TriggerStop(ai8935C92D_wave19_trigger);
    TriggerStop(ai8935C92D_wave15_trigger);
    TriggerStop(ai8935C92D_wave11_trigger);
    TriggerStop(ai8935C92D_wave22_trigger);
    TriggerStop(ai8935C92D_wave21_trigger);
    TriggerStop(ai8935C92D_wave7_trigger);
    TriggerStop(ai8935C92D_wave8_trigger);
    TriggerStop(ai8935C92D_wave23_trigger);
    TriggerStop(ai8935C92D_wave24_trigger);
    TriggerStop(ai8935C92D_wave4_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void ai8935C92D_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai8935C92D_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string ai8935C92D_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave ai8935C92D_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai8935C92D_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool ai8935C92D_initialized = false;

//--------------------------------------------------------------------------------------------------
void ai8935C92D_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!ai8935C92D_initialized) {
        ai8935C92D_wave2_init();
        ai8935C92D_wave5_init();
        ai8935C92D_wave18_init();
        ai8935C92D_wave17_init();
        ai8935C92D_wave9_init();
        ai8935C92D_wave3_init();
        ai8935C92D_wave14_init();
        ai8935C92D_wave20_init();
        ai8935C92D_wave19_init();
        ai8935C92D_wave15_init();
        ai8935C92D_wave11_init();
        ai8935C92D_wave22_init();
        ai8935C92D_wave21_init();
        ai8935C92D_wave7_init();
        ai8935C92D_wave8_init();
        ai8935C92D_wave23_init();
        ai8935C92D_wave24_init();
        ai8935C92D_wave4_init();
        ai8935C92D_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            ai8935C92D_defGather[init_i] = PointFromId(0);
        }

        ai8935C92D_initialized = true;
    }

    AICampaignStart(p);
}
