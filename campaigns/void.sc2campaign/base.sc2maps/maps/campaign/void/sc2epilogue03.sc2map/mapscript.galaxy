//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Amon's Fall
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai93D2D4F0"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_RAYNOR = 2;
const int gv_pLAYER_03_ARTANIS = 3;
const int gv_pLAYER_04_AMON = 4;
const int gv_pLAYER_05_AMON_NEUTRAL = 5;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_VoidCrystals {
    unit lv_unit;
    point lv_nadir;
    point lv_zenith;
    point lv_center;
    fixed lv_majorRadius;
    fixed lv_minorRadius;
    fixed lv_rotation;
    point lv_groundHeightStart;
    point lv_groundHeightEnd;
    fixed lv_normalizedGroundHeightStartAngle;
    fixed lv_normalizedGroundHeightEndAngle;
    fixed lv_rateOfAscent;
    fixed lv_rateOfDescent;
    bool lv_rotatesCounterClockwise;
    int lv_ping;
    bool lv_vulnerable;
    timer lv_vulnerabilityDelay;
    bool lv_cloudCentered;
};

struct gs_RECORD_VoidChasm {
    unit lv_unit;
    point lv_spawnPoint;
    region lv_spawnRegion;
    region lv_spawnSafetyRegion;
    unitgroup lv_spawnedUnits;
    timer lv_initialTimer;
    timer lv_respawnTimer;
    int[6] lv_unitTypes;
    int[6] lv_unitCounts;
    timer lv_unitType4Timer;
    timer lv_unitType5Timer;
    int lv_attackWaveStrength;
    int[6][4] lv_attackWaveCounts;
    timer lv_attackWaveTimer;
    int lv_currentTarget;
    timer lv_spawnUnitTimer;
    int lv_respawnSafety;
};

struct gs_RECORD_TormentConstruct {
    unit lv_unit;
    point lv_spawnPoint;
    timer lv_initialTimer;
    timer lv_respawnTimer;
    int lv_voidCrystal75CheckIndex;
    int lv_voidChasm66CheckIndex;
    int lv_respawnSafety;
};

struct gs_RECORD_RampageConstruct {
    unit lv_unit;
    point lv_spawnPoint;
    timer lv_initialTimer;
    timer lv_respawnTimer;
    int lv_voidCrystal75CheckIndex;
    int lv_voidChasm66CheckIndex;
    int lv_respawnSafety;
};

struct gs_RECORD_OblivionConstruct {
    unit lv_unit;
    point lv_spawnPoint;
    timer lv_initialTimer;
    timer lv_respawnTimer;
    int lv_voidCrystal75CheckIndex;
    int lv_voidChasm66CheckIndex;
    int lv_respawnSafety;
    timer lv_animaBeamCooldownTimer;
};

struct gs_RECORD_WorldCleaverBaseArea {
    region lv_terrainDestructionRegion;
    region lv_killZone;
    unitgroup lv_pathingBlockers;
    unitgroup lv_explodingRocks;
    point lv_pingPoint;
    actor lv_amonDoodad;
};

struct gs_RECORD_WorldCleaverFieldArea {
    region lv_terrainDestructionRegion;
    region lv_killZone;
    unitgroup lv_pathingBlockers;
    int lv_umbraSpireAliveCheck;
    bool lv_activated;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESET_ShadowUnit_ShadowMarine = 0;
const int ge_PRESET_ShadowUnit_ShadowZergling = 1;
const int ge_PRESET_ShadowUnit_ShadowZealot = 2;
const int ge_PRESET_ShadowUnit_ShadowGhost = 3;
const int ge_PRESET_ShadowUnit_ShadowHydralisk = 4;
const int ge_PRESET_ShadowUnit_ShadowStalker = 5;
const int ge_PRESET_ShadowUnit_ShadowBanshee = 6;
const int ge_PRESET_ShadowUnit_ShadowMutalisk = 7;
const int ge_PRESET_ShadowUnit_ShadowVoidRay = 8;
const int ge_PRESET_ShadowUnit_ShadowBattlecruiser = 9;
const int ge_PRESET_ShadowUnit_ShadowColossus = 10;
const int ge_PRESET_ShadowUnit_ShadowUltralisk = 11;
const int ge_PRESET_ShadowUnit_ShadowOverseer = 12;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_amon;
unit gv_kerrigan;
string gv_mapMusicTrack;
gs_RECORD_VoidCrystals[16] gv_voidCrystals;
int gv_numberOfCrystals;
fixed gv_crystalMaxLife;
int gv_crystalsNeeded;
int gv_crystalsDestroyed;
fixed gv_crystalHeightThreshold;
bool gv_pingsAllowed;
bool gv_crystalAccelerationEnabled;
bool gv_crystalShieldEffectEnabled;
bool gv_arrowPingsAllowed;
bool gv_crystal6HeightThreshold;
gs_RECORD_VoidChasm[8] gv_voidChasm;
int gv_numberOfVoidChasms;
fixed gv_voidChasmMaxLife;
fixed gv_voidChasmRespawnDelay;
gs_RECORD_TormentConstruct[32] gv_tormentConstructs;
gs_RECORD_RampageConstruct[32] gv_rampageConstructs;
gs_RECORD_OblivionConstruct[32] gv_oblivionConstructs;
int gv_numberOfTormentConstructs;
int gv_numberOfRampageConstructs;
int gv_numberOfOblivionConstructs;
point gv_firstConstructPingLocation;
fixed gv_constructMaxLife;
fixed gv_constructRespawnDelay;
fixed gv_oblivionConstructHealCooldown;
gs_RECORD_WorldCleaverBaseArea[10] gv_worldCleaverBaseAreas;
gs_RECORD_WorldCleaverFieldArea[10] gv_worldCleaverFieldAreas;
int gv_numberOfWorldCleaverBaseAreas;
int gv_numberOfWorldCleaverFieldAreas;
bool gv_celestialRadianceFlashing;
unit gv_quantumRayTarget;
bool gv_quantumRayUsed;
int gv_unitsDestroyedByKerrigan;
int gv_unitsLostToTerrainDestruction;
int gv_tripleTapCounter;
bool gv_achievementConstructedSpire;
int gv_objectiveDestroyZergBase;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicKerrigan;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_introShadowUnits1;
unitgroup gv_introShadowUnits2;
unitgroup gv_introShadowUnits3;
sound gv_introStinger;
sound gv_introChargeSound;
unitgroup gv_midWorkers;
unitgroup gv_midPlayerUnits;
bool gv_midMusicComplete;
sound gv_amonAscent;
sound gv_victoryChargeSound;
unit gv_victoryAmon;

void InitGlobals () {
    int init_i;
    int init_i1;

    gv_amon = UnitFromId(482);
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_voidCrystals[init_i].lv_rotatesCounterClockwise = true;
        gv_voidCrystals[init_i].lv_ping = c_invalidPingId;
        gv_voidCrystals[init_i].lv_vulnerabilityDelay = TimerCreate();
        gv_voidCrystals[init_i].lv_cloudCentered = true;
    }
    gv_numberOfCrystals = 10;
    gv_crystalsNeeded = 7;
    gv_crystalHeightThreshold = -1.0;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_voidChasm[init_i].lv_spawnedUnits = UnitGroupEmpty();
        gv_voidChasm[init_i].lv_initialTimer = TimerCreate();
        gv_voidChasm[init_i].lv_respawnTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            gv_voidChasm[init_i].lv_unitTypes[init_i1] = ge_PRESET_ShadowUnit_ShadowMarine;
        }
        gv_voidChasm[init_i].lv_unitType4Timer = TimerCreate();
        gv_voidChasm[init_i].lv_unitType5Timer = TimerCreate();
        gv_voidChasm[init_i].lv_attackWaveStrength = 1;
        gv_voidChasm[init_i].lv_attackWaveTimer = TimerCreate();
        gv_voidChasm[init_i].lv_currentTarget = gv_pLAYER_01_USER;
        gv_voidChasm[init_i].lv_spawnUnitTimer = TimerCreate();
    }
    gv_numberOfVoidChasms = 7;
    for (init_i = 0; init_i <= 31; init_i += 1) {
        gv_tormentConstructs[init_i].lv_initialTimer = TimerCreate();
        gv_tormentConstructs[init_i].lv_respawnTimer = TimerCreate();
    }
    for (init_i = 0; init_i <= 31; init_i += 1) {
        gv_rampageConstructs[init_i].lv_initialTimer = TimerCreate();
        gv_rampageConstructs[init_i].lv_respawnTimer = TimerCreate();
    }
    for (init_i = 0; init_i <= 31; init_i += 1) {
        gv_oblivionConstructs[init_i].lv_initialTimer = TimerCreate();
        gv_oblivionConstructs[init_i].lv_respawnTimer = TimerCreate();
        gv_oblivionConstructs[init_i].lv_animaBeamCooldownTimer = TimerCreate();
    }
    gv_numberOfTormentConstructs = 26;
    gv_numberOfRampageConstructs = 18;
    gv_numberOfOblivionConstructs = 12;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_worldCleaverBaseAreas[init_i].lv_pathingBlockers = UnitGroupEmpty();
        gv_worldCleaverBaseAreas[init_i].lv_explodingRocks = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_worldCleaverFieldAreas[init_i].lv_pathingBlockers = UnitGroupEmpty();
    }
    gv_numberOfWorldCleaverBaseAreas = 9;
    gv_numberOfWorldCleaverFieldAreas = 6;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_introShadowUnits1 = UnitGroupEmpty();
    gv_introShadowUnits2 = UnitGroupEmpty();
    gv_introShadowUnits3 = UnitGroupEmpty();
    gv_midWorkers = UnitGroupEmpty();
    gv_midPlayerUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
fixed gf_NormalizeVoidCrystalAngle (int lp_index, fixed lp_angle);
fixed gf_VoidCrystalRadiusatAngle (fixed lp_currentAngle, int lp_index);
fixed gf_VoidCrystalHeightatAngle (fixed lp_currentAngle, int lp_index);
fixed gf_VoidCrystalSpeedatAngle (fixed lp_currentAngle, int lp_index);
void gf_SetVoidCrystalVulnerableState (int lp_index, bool lp_state);
void gf_MoveVoidCrystal (int lp_index, fixed lp_standardAngle);
void gf_CreateVoidCrystalShieldEffect (int lp_index);
void gf_CreateVoidCrystalArrowPing (int lp_index);
void gf_OrderVoidChasmtoSpawnUnit (int lp_index, int lp_unitType);
void gf_ConstructVoidChasmAttackWave (int lp_index);
void gf_TrackPingOnVoidChasm (unit lp_unit);
int gf_VoidChasmSpawnedCount (int lp_index, int lp_unitType);
unitgroup gf_VoidChasmSpawnedSubgroup (int lp_index, int lp_count, int lp_unitType);
void gf_ShakeCameraWhenConstructLands (unit lp_tentacleUnit);
void gf_CleaveBase (int lp_index);
void gf_CleaveField (int lp_index);
void gf_MakeAmonCleaveTarget (int lp_baseCleaveIndex);
void gf_BlackOutTerraininRegion (region lp_region);
void gf_CreateQuantumRayReticle (unit lp_targetUnit);
bool gf_UnitisArmyforPlayer (unit lp_unit, int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGameQ;
trigger gt_VoidCrystalInit;
trigger gt_VoidCrystalController;
trigger gt_VoidCrystalInitialLocations;
trigger gt_VoidCrystalPathsQ;
trigger gt_VoidCrystalDies;
trigger gt_VoidCrystalDiesQ;
trigger gt_AutosavesQ;
trigger gt_VoidChasmInit;
trigger gt_VoidChasmController;
trigger gt_VoidChasmUnitSpawned;
trigger gt_VoidChasmDies;
trigger gt_TormentConstructInit;
trigger gt_TormentConstructController;
trigger gt_TormentConstructDies;
trigger gt_RampageConstructInit;
trigger gt_RampageConstructController;
trigger gt_RampageConstructDies;
trigger gt_OblivionConstructInit;
trigger gt_OblivionConstructController;
trigger gt_OblivionConstructDies;
trigger gt_FirstConstructQ;
trigger gt_WorldCleaverInit;
trigger gt_WorldCleaverSequence;
trigger gt_WorldCleaverFieldController;
trigger gt_CleaveBase1Q;
trigger gt_CleaveBase1AftermathQ;
trigger gt_CleaveBase2Q;
trigger gt_CleaveBase3Q;
trigger gt_CleaveBase4Q;
trigger gt_CleaveBase5Q;
trigger gt_CleaveBase6Q;
trigger gt_CleaveBase7Q;
trigger gt_CleaveBase8Q;
trigger gt_CleaveBase9Q;
trigger gt_KerriganDies;
trigger gt_CreepTumorBuild;
trigger gt_QuantumRayCheck;
trigger gt_QuantumRayUsed;
trigger gt_QuantumRayQ;
trigger gt_CelestialRadianceFlash;
trigger gt_CelestialRadianceQ;
trigger gt_ArtanisWaves;
trigger gt_ArtanisAttack1Q;
trigger gt_ArtanisAttack2Q;
trigger gt_ArtanisAttack3Q;
trigger gt_ArtanisFirstVoidChasmBypass;
trigger gt_RaynorWaves;
trigger gt_RaynorAttack1Q;
trigger gt_RaynorAttack2Q;
trigger gt_RaynorAttack3Q;
trigger gt_StartAI;
trigger gt_AIUpgradesCasualNormal;
trigger gt_AIUpgradesHardBrutal;
trigger gt_AlliesBullyBuilding;
trigger gt_DefeatBaseDead;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TripleTapCounter;
trigger gt_KerriganKills;
trigger gt_AchievementVictorywithoutmorphingSpire;
trigger gt_ObjectiveDestroyCrystalsCreate;
trigger gt_ObjectiveDestroyCrystalsComplete;
trigger gt_ObjectiveDestroyCrystalsUpdate;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroShadowUnits;
trigger gt_IntroShadowUnitsAttack;
trigger gt_VoidCrystalInitialLocationsIntro;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidMusic;
trigger gt_MidAmonMovement;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai93D2D4F0") { ai93D2D4F0_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { ai93D2D4F0_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { return ai93D2D4F0_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { return ai93D2D4F0_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { ai93D2D4F0_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { ai93D2D4F0_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai93D2D4F0") { ai93D2D4F0_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { ai93D2D4F0_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { ai93D2D4F0_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { return ai93D2D4F0_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { return ai93D2D4F0_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai93D2D4F0") { return ai93D2D4F0_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai93D2D4F0", 4);
    AICampaignStart(2);
    AICampaignStart(3);
    AICampaignStart(5);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    cai_waves_run(4, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
fixed gf_NormalizeVoidCrystalAngle (int lp_index, fixed lp_angle) {
    // Variable Declarations
    fixed lv_normalizedAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_normalizedAngle = (lp_angle - gv_voidCrystals[lp_index].lv_rotation);
    while ((lv_normalizedAngle >= 360.0)) {
        lv_normalizedAngle -= 360.0;
    }
    while ((lv_normalizedAngle < 0.0)) {
        lv_normalizedAngle += 360.0;
    }
    return lv_normalizedAngle;
}

fixed gf_VoidCrystalRadiusatAngle (fixed lp_currentAngle, int lp_index) {
    // Variable Declarations
    fixed lv_normalizedCurrentAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_normalizedCurrentAngle = gf_NormalizeVoidCrystalAngle(lp_index, lp_currentAngle);
    return ((gv_voidCrystals[lp_index].lv_majorRadius * gv_voidCrystals[lp_index].lv_minorRadius) / SquareRoot((Pow((gv_voidCrystals[lp_index].lv_minorRadius * Cos(lv_normalizedCurrentAngle)), 2.0) + Pow((gv_voidCrystals[lp_index].lv_majorRadius * Sin(lv_normalizedCurrentAngle)), 2.0))));
}

fixed gf_VoidCrystalHeightatAngle (fixed lp_currentAngle, int lp_index) {
    // Variable Declarations
    fixed lv_normalizedCurrentAngle;
    fixed lv_height;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_normalizedCurrentAngle = gf_NormalizeVoidCrystalAngle(lp_index, lp_currentAngle);
    if ((gv_voidCrystals[lp_index].lv_rotatesCounterClockwise == true)) {
        if ((lv_normalizedCurrentAngle < gv_voidCrystals[lp_index].lv_normalizedGroundHeightStartAngle)) {
            lv_height = (-34.0 + ((Pow(lv_normalizedCurrentAngle, 2.0) / 8.0) * gv_voidCrystals[lp_index].lv_rateOfAscent));
        }
        else {
            if ((lv_normalizedCurrentAngle > gv_voidCrystals[lp_index].lv_normalizedGroundHeightEndAngle)) {
                lv_height = (-34.0 + ((Pow((360.0 - lv_normalizedCurrentAngle), 2.0) / 8.0) * gv_voidCrystals[lp_index].lv_rateOfDescent));
            }
            else {
                lv_height = 16.0;
            }
        }
    }
    else {
        if ((lv_normalizedCurrentAngle > gv_voidCrystals[lp_index].lv_normalizedGroundHeightStartAngle)) {
            lv_height = (-34.0 + ((Pow((360.0 - lv_normalizedCurrentAngle), 2.0) / 8.0) * gv_voidCrystals[lp_index].lv_rateOfAscent));
        }
        else {
            if ((lv_normalizedCurrentAngle < gv_voidCrystals[lp_index].lv_normalizedGroundHeightEndAngle)) {
                lv_height = (-34.0 + ((Pow(lv_normalizedCurrentAngle, 2.0) / 8.0) * gv_voidCrystals[lp_index].lv_rateOfDescent));
            }
            else {
                lv_height = 16.0;
            }
        }
    }
    if ((gv_voidCrystals[lp_index].lv_vulnerable == false)) {
        lv_height -= 5.0;
    }

    if (((lp_index == 1) || (lp_index == 3) || (lp_index == 8) || (lp_index == 10))) {
        lv_height += 2.0;
    }

    if (((lp_index == 1) || (lp_index == 3) || (lp_index == 8))) {
        lv_height = ((2*lv_height) - 18);
    }

    if (((lp_index == 4) || (lp_index == 5) || ((lp_index == 6) && (gv_crystal6HeightThreshold == true)))) {
        lv_height = ((1.5*lv_height) - 8);
    }

    return lv_height;
}

fixed gf_VoidCrystalSpeedatAngle (fixed lp_currentAngle, int lp_index) {
    // Variable Declarations
    fixed lv_normalizedCurrentAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_normalizedCurrentAngle = gf_NormalizeVoidCrystalAngle(lp_index, lp_currentAngle);
    if (((lv_normalizedCurrentAngle < 60.0) || (lv_normalizedCurrentAngle > 300.0))) {
        if (((lp_index == 3) || (lp_index == 5) || (lp_index == 7) || (lp_index == 8) || (lp_index == 10))) {
            return 0.3;
        }

        if ((lp_index == 6)) {
            return 0.6;
        }

        return 0.5;
    }
    else {
        if (((lv_normalizedCurrentAngle < 120.0) || (lv_normalizedCurrentAngle > 240.0))) {
            if ((lp_index == 10)) {
                return 0.2;
            }

            if (((lp_index == 3) || (lp_index == 5) || (lp_index == 7) || (lp_index == 8))) {
                return 0.3;
            }

            return 0.4;
        }
        else {
            return 0.2;
        }
    }
}

void gf_SetVoidCrystalVulnerableState (int lp_index, bool lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_state == true)) {
        gv_voidCrystals[lp_index].lv_vulnerable = true;
        UnitSetOwner(gv_voidCrystals[lp_index].lv_unit, gv_pLAYER_04_AMON, true);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateInvulnerable, false);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateCursorable, true);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateSelectable, true);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateStatusBar, true);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateTargetable, true);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateTooltipable, true);
        libVCMI_gf_SetUnitInfoTextCampaign(gv_voidCrystals[lp_index].lv_unit, null, UnitTypeGetName(UnitGetType(gv_voidCrystals[lp_index].lv_unit)), null);
        libNtve_gf_ShareVisionofUnit(gv_voidCrystals[lp_index].lv_unit, true, gv_pLAYER_01_USER);
        gf_CreateVoidCrystalShieldEffect(lp_index);
        if ((gv_pingsAllowed == true)) {
            PingSetVisible(gv_voidCrystals[lp_index].lv_ping, true);
            libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[lp_index].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
            gf_CreateVoidCrystalArrowPing(lp_index);
        }

        if ((UnitHasBehavior2(gv_voidCrystals[lp_index].lv_unit, "AmonCrystalDarkInertia") == false)) {
            UnitBehaviorAdd(gv_voidCrystals[lp_index].lv_unit, "AmonCrystalDarkInertia", gv_voidCrystals[lp_index].lv_unit, 1);
        }

        if ((UnitHasBehavior2(gv_voidCrystals[lp_index].lv_unit, "InfiniteCrystalisRepulsorBehavior") == false)) {
            UnitBehaviorAdd(gv_voidCrystals[lp_index].lv_unit, "InfiniteCrystalisRepulsorBehavior", gv_voidCrystals[lp_index].lv_unit, 1);
        }

    }
    else {
        gv_voidCrystals[lp_index].lv_vulnerable = false;
        UnitSetOwner(gv_voidCrystals[lp_index].lv_unit, gv_pLAYER_05_AMON_NEUTRAL, true);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateInvulnerable, true);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateCursorable, false);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateSelectable, false);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateStatusBar, false);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateTargetable, false);
        UnitSetState(gv_voidCrystals[lp_index].lv_unit, c_unitStateTooltipable, false);
        libNtve_gf_ShareVisionofUnit(gv_voidCrystals[lp_index].lv_unit, false, gv_pLAYER_01_USER);
        PingSetVisible(gv_voidCrystals[lp_index].lv_ping, false);
        UnitBehaviorRemove(gv_voidCrystals[lp_index].lv_unit, "AmonCrystalDarkInertia", 1);
        UnitBehaviorRemove(gv_voidCrystals[lp_index].lv_unit, "InfiniteCrystalisRepulsorBehavior", 1);
        gf_CreateVoidCrystalShieldEffect(lp_index);
        if ((UnitIsSelected(gv_voidCrystals[lp_index].lv_unit, gv_pLAYER_01_USER) == true)) {
            UnitSelect(gv_voidCrystals[lp_index].lv_unit, gv_pLAYER_01_USER, false);
        }

    }
}

void gf_MoveVoidCrystal (int lp_index, fixed lp_standardAngle) {
    // Variable Declarations
    fixed lv_currentAngle;
    fixed lv_newHeight;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitIsAlive(gv_voidCrystals[lp_index].lv_unit) == false) || (lp_index > gv_numberOfCrystals))) {
        return ;
    }

    lv_currentAngle = (lp_standardAngle + gv_voidCrystals[lp_index].lv_rotation);
    UnitSetPosition(gv_voidCrystals[lp_index].lv_unit, PointWithOffsetPolar(gv_voidCrystals[lp_index].lv_center, gf_VoidCrystalRadiusatAngle(lv_currentAngle, lp_index), lv_currentAngle), false);
    UnitSetPropertyFixed(gv_voidCrystals[lp_index].lv_unit, c_unitPropBaseMovementSpeed, gf_VoidCrystalSpeedatAngle(lv_currentAngle, lp_index));
    lv_newHeight = gf_VoidCrystalHeightatAngle(lv_currentAngle, lp_index);
    if ((gv_voidCrystals[lp_index].lv_vulnerable == true) && (lv_newHeight < (gv_crystalHeightThreshold + 5.0))) {
        gf_SetVoidCrystalVulnerableState(lp_index, false);
        UnitSetHeight(gv_voidCrystals[lp_index].lv_unit, (lv_newHeight - 5.0), 0.0);
        TimerStart(gv_voidCrystals[lp_index].lv_vulnerabilityDelay, 5.0, false, c_timeGame);
    }
    else {
        if ((gv_voidCrystals[lp_index].lv_vulnerable == false) && (lv_newHeight > gv_crystalHeightThreshold) && ((libVCMI_gf_PlayerInCinematicModeCampaign() == true) || ((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_pingsAllowed == true)))) {
            gf_SetVoidCrystalVulnerableState(lp_index, true);
            UnitSetHeight(gv_voidCrystals[lp_index].lv_unit, (lv_newHeight + 5.0), 0.0);
            TimerStart(gv_voidCrystals[lp_index].lv_vulnerabilityDelay, 5.0, false, c_timeGame);
        }
        else {
            UnitSetHeight(gv_voidCrystals[lp_index].lv_unit, lv_newHeight, 0.0);
        }
    }
    if ((gv_voidCrystals[lp_index].lv_rotatesCounterClockwise == true)) {
        UnitIssueOrder(gv_voidCrystals[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(gv_voidCrystals[lp_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentAngle + 2.0), lp_index), (lv_currentAngle + 2.0))), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(gv_voidCrystals[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(gv_voidCrystals[lp_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentAngle - 2.0), lp_index), (lv_currentAngle - 2.0))), c_orderQueueReplace);
    }
}

trigger auto_gf_CreateVoidCrystalShieldEffect_Trigger = null;
int auto_gf_CreateVoidCrystalShieldEffect_lp_index;

void gf_CreateVoidCrystalShieldEffect (int lp_index) {
    auto_gf_CreateVoidCrystalShieldEffect_lp_index = lp_index;

    if (auto_gf_CreateVoidCrystalShieldEffect_Trigger == null) {
        auto_gf_CreateVoidCrystalShieldEffect_Trigger = TriggerCreate("auto_gf_CreateVoidCrystalShieldEffect_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateVoidCrystalShieldEffect_Trigger, false, false);
}

bool auto_gf_CreateVoidCrystalShieldEffect_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_CreateVoidCrystalShieldEffect_lp_index;

    // Variable Declarations
    actor lv_shieldModel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitIsAlive(gv_voidCrystals[lp_index].lv_unit) == false) || (gv_crystalShieldEffectEnabled == false))) {
        return true;
    }

    libNtve_gf_AttachModelToUnit(gv_voidCrystals[lp_index].lv_unit, "CystalCatalystFloating_Dematerialize", "Ref_Center");
    lv_shieldModel = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_shieldModel);
    return true;
}

trigger auto_gf_CreateVoidCrystalArrowPing_Trigger = null;
int auto_gf_CreateVoidCrystalArrowPing_lp_index;

void gf_CreateVoidCrystalArrowPing (int lp_index) {
    auto_gf_CreateVoidCrystalArrowPing_lp_index = lp_index;

    if (auto_gf_CreateVoidCrystalArrowPing_Trigger == null) {
        auto_gf_CreateVoidCrystalArrowPing_Trigger = TriggerCreate("auto_gf_CreateVoidCrystalArrowPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateVoidCrystalArrowPing_Trigger, false, false);
}

bool auto_gf_CreateVoidCrystalArrowPing_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_CreateVoidCrystalArrowPing_lp_index;

    // Variable Declarations
    fixed lv_previousNormalizedAngle;
    fixed lv_currentNormalizedAngle;
    point lv_previousPoint;
    point lv_currentPoint;
    fixed lv_increment;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((gv_arrowPingsAllowed == false) || (UnitIsAlive(gv_voidCrystals[lp_index].lv_unit) == false) || (libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
        return true;
    }

    if (((lp_index == 1) || (lp_index == 10))) {
        lv_increment = 5.0;
    }
    else {
        lv_increment = 10.0;
    }
    if ((gv_voidCrystals[lp_index].lv_rotatesCounterClockwise == true)) {
        lv_previousPoint = UnitGetPosition(gv_voidCrystals[lp_index].lv_unit);
        lv_previousNormalizedAngle = gf_NormalizeVoidCrystalAngle(lp_index, AngleBetweenPoints(gv_voidCrystals[lp_index].lv_center, UnitGetPosition(gv_voidCrystals[lp_index].lv_unit)));
        lv_currentNormalizedAngle = (lv_previousNormalizedAngle + lv_increment);
        lv_currentPoint = PointWithOffsetPolar(gv_voidCrystals[lp_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentNormalizedAngle + gv_voidCrystals[lp_index].lv_rotation), lp_index), (lv_currentNormalizedAngle + gv_voidCrystals[lp_index].lv_rotation));
        while (true) {
            Wait(0.2, c_timeGame);
            if ((lv_currentNormalizedAngle > (gv_voidCrystals[lp_index].lv_normalizedGroundHeightEndAngle + 10))) {
                return true;
            }

            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_currentPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 10.0, AngleBetweenPoints(lv_previousPoint, lv_currentPoint));
            PingSetScale(PingLastCreated(), 0.5);
            PingSetVisible(PingLastCreated(), true);
            lv_previousPoint = lv_currentPoint;
            lv_previousNormalizedAngle = lv_currentNormalizedAngle;
            lv_currentNormalizedAngle = (lv_previousNormalizedAngle + lv_increment);
            lv_currentPoint = PointWithOffsetPolar(gv_voidCrystals[lp_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentNormalizedAngle + gv_voidCrystals[lp_index].lv_rotation), lp_index), (lv_currentNormalizedAngle + gv_voidCrystals[lp_index].lv_rotation));
        }
    }
    else {
        lv_previousPoint = UnitGetPosition(gv_voidCrystals[lp_index].lv_unit);
        lv_previousNormalizedAngle = gf_NormalizeVoidCrystalAngle(lp_index, AngleBetweenPoints(gv_voidCrystals[lp_index].lv_center, UnitGetPosition(gv_voidCrystals[lp_index].lv_unit)));
        lv_currentNormalizedAngle = (lv_previousNormalizedAngle - lv_increment);
        lv_currentPoint = PointWithOffsetPolar(gv_voidCrystals[lp_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentNormalizedAngle + gv_voidCrystals[lp_index].lv_rotation), lp_index), (lv_currentNormalizedAngle + gv_voidCrystals[lp_index].lv_rotation));
        while (true) {
            Wait(0.2, c_timeGame);
            if ((lv_currentNormalizedAngle < (gv_voidCrystals[lp_index].lv_normalizedGroundHeightEndAngle - 10))) {
                return true;
            }

            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_currentPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 10.0, AngleBetweenPoints(lv_previousPoint, lv_currentPoint));
            PingSetScale(PingLastCreated(), 0.5);
            PingSetVisible(PingLastCreated(), true);
            lv_previousPoint = lv_currentPoint;
            lv_previousNormalizedAngle = lv_currentNormalizedAngle;
            lv_currentNormalizedAngle = (lv_previousNormalizedAngle - lv_increment);
            lv_currentPoint = PointWithOffsetPolar(gv_voidCrystals[lp_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentNormalizedAngle + gv_voidCrystals[lp_index].lv_rotation), lp_index), (lv_currentNormalizedAngle + gv_voidCrystals[lp_index].lv_rotation));
        }
    }
    return true;
}

void gf_OrderVoidChasmtoSpawnUnit (int lp_index, int lp_unitType) {
    // Automatic Variable Declarations
    int autoC85FFACD_val;

    // Implementation
    autoC85FFACD_val = lp_unitType;
    if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowMarine) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidMarine", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowGhost) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidGhost", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowBanshee) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidBanshee", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowBattlecruiser) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidBattlecruiser", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowZergling) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidZergling", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowHydralisk) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidHydralisk", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowMutalisk) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidMutalisk", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowUltralisk) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidUltralisk", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowOverseer) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidOverseer", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowZealot) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidZealot", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowStalker) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidStalker", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowVoidRay) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidVoidRay", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else if (autoC85FFACD_val == ge_PRESET_ShadowUnit_ShadowColossus) {
        UnitIssueOrder(gv_voidChasm[lp_index].lv_unit, OrderTargetingPoint(AbilityCommand("UmbraSpireSpawnShadowOfTheVoidColossus", 0), RegionRandomPoint(gv_voidChasm[lp_index].lv_spawnRegion)), c_orderQueueAddToEnd);
    }
    else {
    }
}

void gf_ConstructVoidChasmAttackWave (int lp_index) {
    // Variable Declarations
    unitgroup lv_attackGroup;
    int lv_i;

    // Automatic Variable Declarations
    const int auto111DAA0B_ae = 5;
    const int auto111DAA0B_ai = 1;
    unitgroup auto6AFFE90C_g;
    int auto6AFFE90C_u;
    unit auto6AFFE90C_var;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Implementation
    lv_i = 1;
    for ( ; ( (auto111DAA0B_ai >= 0 && lv_i <= auto111DAA0B_ae) || (auto111DAA0B_ai < 0 && lv_i >= auto111DAA0B_ae) ) ; lv_i += auto111DAA0B_ai ) {
        UnitGroupAddUnitGroup(lv_attackGroup, gf_VoidChasmSpawnedSubgroup(lp_index, gv_voidChasm[lp_index].lv_attackWaveCounts[lv_i][gv_voidChasm[lp_index].lv_attackWaveStrength], gv_voidChasm[lp_index].lv_unitTypes[lv_i]));
    }
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) == 0)) {
        return ;
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_voidChasm[lp_index].lv_attackWaveStrength >= 3)) {
        UnitGroupAddUnitGroup(lv_attackGroup, gf_VoidChasmSpawnedSubgroup(lp_index, 1, ge_PRESET_ShadowUnit_ShadowOverseer));
    }

    auto6AFFE90C_g = lv_attackGroup;
    auto6AFFE90C_u = UnitGroupCount(auto6AFFE90C_g, c_unitCountAll);
    for (;; auto6AFFE90C_u -= 1) {
        auto6AFFE90C_var = UnitGroupUnitFromEnd(auto6AFFE90C_g, auto6AFFE90C_u);
        if (auto6AFFE90C_var == null) { break; }
        UnitGroupRemove(gv_voidChasm[lp_index].lv_spawnedUnits, auto6AFFE90C_var);
        AISetUnitScriptControlled(auto6AFFE90C_var, false);
    }
    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        AIAttackWaveSetTargetUnit(gv_pLAYER_04_AMON, gv_kerrigan);
    }
    else {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_04_AMON, PlayerGroupSingle(gv_voidChasm[lp_index].lv_currentTarget));
    }
    AIAttackWaveUseGroup(gv_pLAYER_04_AMON, lv_attackGroup);
    if ((lp_index == 1) && (gv_voidChasm[1].lv_currentTarget == gv_pLAYER_02_RAYNOR)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_04_AMON, PointFromId(1235), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_04_AMON, PointFromId(478), false);
    }

    if ((lp_index == 2) && (gv_voidChasm[2].lv_currentTarget == gv_pLAYER_02_RAYNOR) && (gv_voidChasm[2].lv_attackWaveStrength == 1)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_04_AMON, PointFromId(478), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_04_AMON, PointFromId(479), false);
    }

    if ((lp_index == 2) && (gv_voidChasm[2].lv_currentTarget == gv_pLAYER_03_ARTANIS)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_04_AMON, PointFromId(1235), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_04_AMON, PointFromId(480), false);
    }

    if ((lp_index == 3) && (gv_voidChasm[3].lv_currentTarget == gv_pLAYER_03_ARTANIS) && (gv_voidChasm[3].lv_attackWaveStrength == 1)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_04_AMON, PointFromId(583), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_04_AMON, PointFromId(481), false);
    }

    AIAttackWaveSend(gv_pLAYER_04_AMON, 0, false);
    if ((gv_voidChasm[lp_index].lv_attackWaveStrength == 2) && (TimerGetRemaining(gv_voidChasm[lp_index].lv_unitType4Timer) < 1)) {
        gv_voidChasm[lp_index].lv_attackWaveStrength += 1;
    }

    if ((gv_voidChasm[lp_index].lv_attackWaveStrength == 1)) {
        gv_voidChasm[lp_index].lv_attackWaveStrength += 1;
    }

    if ((gv_voidChasm[lp_index].lv_currentTarget == gv_pLAYER_01_USER)) {
        gv_voidChasm[lp_index].lv_currentTarget = gv_pLAYER_03_ARTANIS;
    }
    else {
        if ((gv_voidChasm[lp_index].lv_currentTarget == gv_pLAYER_02_RAYNOR)) {
            gv_voidChasm[lp_index].lv_currentTarget = gv_pLAYER_01_USER;
        }
        else {
            gv_voidChasm[lp_index].lv_currentTarget = gv_pLAYER_02_RAYNOR;
        }
    }
}

trigger auto_gf_TrackPingOnVoidChasm_Trigger = null;
unit auto_gf_TrackPingOnVoidChasm_lp_unit;

void gf_TrackPingOnVoidChasm (unit lp_unit) {
    auto_gf_TrackPingOnVoidChasm_lp_unit = lp_unit;

    if (auto_gf_TrackPingOnVoidChasm_Trigger == null) {
        auto_gf_TrackPingOnVoidChasm_Trigger = TriggerCreate("auto_gf_TrackPingOnVoidChasm_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrackPingOnVoidChasm_Trigger, false, false);
}

bool auto_gf_TrackPingOnVoidChasm_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_TrackPingOnVoidChasm_lp_unit;

    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lp_unit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/64C07A0C"));
    PingSetScale(PingLastCreated(), 0.6);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((UnitGetType(lp_unit) == "VoidChasm")) {
            libVCMI_gf_SetUnitInfoTextCampaign(lp_unit, null, UnitTypeGetName(UnitGetType(lp_unit)), null);
            break;
        }

    }
    while (true) {
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((UnitGetType(lp_unit) == "VoidChasmDormant")) {
            PingDestroy(lv_ping);
            libNtve_gf_ShareVisionofUnit(lp_unit, false, gv_pLAYER_01_USER);
            libVCMI_gf_SetUnitInfoTextCampaign(lp_unit, null, UnitTypeGetName(UnitGetType(lp_unit)), null);
            return true;
        }

    }
    return true;
}

int gf_VoidChasmSpawnedCount (int lp_index, int lp_unitType) {
    // Automatic Variable Declarations
    int auto7D865A02_val;

    // Implementation
    auto7D865A02_val = lp_unitType;
    if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowMarine) {
        return UnitGroupCount(UnitGroupFilter("Marine", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowZergling) {
        return UnitGroupCount(UnitGroupFilter("Zergling", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowZealot) {
        return UnitGroupCount(UnitGroupFilter("Zealot", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowGhost) {
        return UnitGroupCount(UnitGroupFilter("Ghost", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowHydralisk) {
        return UnitGroupCount(UnitGroupFilter("Hydralisk", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowStalker) {
        return UnitGroupCount(UnitGroupFilter("Stalker", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowBanshee) {
        return UnitGroupCount(UnitGroupFilter("Banshee", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowMutalisk) {
        return UnitGroupCount(UnitGroupFilter("Mutalisk", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowVoidRay) {
        return UnitGroupCount(UnitGroupFilter("VoidRay", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowBattlecruiser) {
        return UnitGroupCount(UnitGroupFilter("Battlecruiser", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowUltralisk) {
        return UnitGroupCount(UnitGroupFilter("Ultralisk", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowColossus) {
        return UnitGroupCount(UnitGroupFilter("Colossus", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else if (auto7D865A02_val == ge_PRESET_ShadowUnit_ShadowOverseer) {
        return UnitGroupCount(UnitGroupFilter("Overseer", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else {
        return 0;
    }
}

unitgroup gf_VoidChasmSpawnedSubgroup (int lp_index, int lp_count, int lp_unitType) {
    // Automatic Variable Declarations
    int auto879D7FEB_val;

    // Implementation
    auto879D7FEB_val = lp_unitType;
    if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowMarine) {
        return UnitGroupFilter("Marine", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowZergling) {
        return UnitGroupFilter("Zergling", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowZealot) {
        return UnitGroupFilter("Zealot", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowGhost) {
        return UnitGroupFilter("Ghost", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowHydralisk) {
        return UnitGroupFilter("Hydralisk", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowStalker) {
        return UnitGroupFilter("Stalker", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowBanshee) {
        return UnitGroupFilter("Banshee", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowMutalisk) {
        return UnitGroupFilter("Mutalisk", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowVoidRay) {
        return UnitGroupFilter("VoidRay", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowBattlecruiser) {
        return UnitGroupFilter("Battlecruiser", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowUltralisk) {
        return UnitGroupFilter("Ultralisk", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowColossus) {
        return UnitGroupFilter("Colossus", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else if (auto879D7FEB_val == ge_PRESET_ShadowUnit_ShadowOverseer) {
        return UnitGroupFilter("Overseer", gv_pLAYER_04_AMON, gv_voidChasm[lp_index].lv_spawnedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_count);
    }
    else {
        return UnitGroupEmpty();
    }
}

trigger auto_gf_ShakeCameraWhenConstructLands_Trigger = null;
unit auto_gf_ShakeCameraWhenConstructLands_lp_tentacleUnit;

void gf_ShakeCameraWhenConstructLands (unit lp_tentacleUnit) {
    auto_gf_ShakeCameraWhenConstructLands_lp_tentacleUnit = lp_tentacleUnit;

    if (auto_gf_ShakeCameraWhenConstructLands_Trigger == null) {
        auto_gf_ShakeCameraWhenConstructLands_Trigger = TriggerCreate("auto_gf_ShakeCameraWhenConstructLands_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShakeCameraWhenConstructLands_Trigger, false, false);
}

bool auto_gf_ShakeCameraWhenConstructLands_TriggerFunc (bool testConds, bool runActions) {
    unit lp_tentacleUnit = auto_gf_ShakeCameraWhenConstructLands_lp_tentacleUnit;

    // Automatic Variable Declarations
    // Implementation
    Wait(0.5, c_timeGame);
    if ((DistanceBetweenPoints(UnitGetPosition(lp_tentacleUnit), CameraGetTarget(gv_pLAYER_01_USER)) <= 20.0)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 3.0, 3.0);
        SoundPlayForPlayer(SoundLink("Zurvan_DeathThud", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    }

    return true;
}

void gf_CleaveBase (int lp_index) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto0EABD997_g;
    int auto0EABD997_u;
    unit auto0EABD997_var;
    unitgroup auto28D32E84_g;
    int auto28D32E84_u;
    unit auto28D32E84_var;
    unitgroup autoFE06738F_g;
    int autoFE06738F_u;
    unit autoFE06738F_var;

    // Variable Initialization

    // Implementation
    if ((libVCMI_gf_GameIsOver() == true)) {
        return ;
    }

    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(RegionGetCenter(gv_worldCleaverBaseAreas[lp_index].lv_terrainDestructionRegion), 16.0), 20.0, false);
    gf_MakeAmonCleaveTarget(lp_index);
    Wait(6.0, c_timeGame);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Void_Amon_Cliff_Effect", gv_worldCleaverBaseAreas[lp_index].lv_killZone);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Void_Amon_Ground_Effect", gv_worldCleaverBaseAreas[lp_index].lv_killZone);
    Wait(13.0, c_timeGame);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return ;
    }

    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(gv_worldCleaverBaseAreas[lp_index].lv_terrainDestructionRegion), 40.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Heavy", "Tremor", 0.0, 1.0, 4.0);
        SoundPlayForPlayer(SoundLink("PEpilogue03_WorldCleaverExplosion", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Void_Amon_Cliff_Effect", gv_worldCleaverBaseAreas[lp_index].lv_killZone);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Void_Amon_Ground_Effect", gv_worldCleaverBaseAreas[lp_index].lv_killZone);
    Wait(0.5, c_timeGame);
    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, gv_worldCleaverBaseAreas[lp_index].lv_killZone, false);
    AIToggleBulliesInRegion(gv_pLAYER_03_ARTANIS, gv_worldCleaverBaseAreas[lp_index].lv_killZone, false);
    auto0EABD997_g = UnitGroup(null, c_playerAny, gv_worldCleaverBaseAreas[lp_index].lv_killZone, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0EABD997_u = UnitGroupCount(auto0EABD997_g, c_unitCountAll);
    for (;; auto0EABD997_u -= 1) {
        auto0EABD997_var = UnitGroupUnitFromEnd(auto0EABD997_g, auto0EABD997_u);
        if (auto0EABD997_var == null) { break; }
        if ((UnitGetType(auto0EABD997_var) != "AmonShardD")) {
            UnitBehaviorRemove(auto0EABD997_var, "ZergBuildingDies6", 1);
            UnitBehaviorRemove(auto0EABD997_var, "ZergBuildingDies9", 1);
            if ((UnitGetOwner(auto0EABD997_var) == gv_pLAYER_01_USER) && (UnitTypeTestAttribute(UnitGetType(auto0EABD997_var), c_unitAttributeStructure) == true)) {
                UnitBehaviorAdd(auto0EABD997_var, "ZergGenericDeath", auto0EABD997_var, 1);
            }

            if ((gf_UnitisArmyforPlayer(auto0EABD997_var, gv_pLAYER_01_USER) == true)) {
                gv_unitsLostToTerrainDestruction += 1;
            }

            UnitKill(auto0EABD997_var);
        }

    }
    TerrainShowRegion(gv_worldCleaverBaseAreas[lp_index].lv_terrainDestructionRegion, false);
    libNtve_gf_ShowHideDoodadsInRegion(true, gv_worldCleaverBaseAreas[lp_index].lv_killZone, "Void_CliffRocks_Edge");
    libNtve_gf_ShowHideDoodadsInRegion(true, gv_worldCleaverBaseAreas[lp_index].lv_killZone, "Void_CliffRocks_Mass_A");
    libNtve_gf_ShowHideDoodadsInRegion(false, gv_worldCleaverBaseAreas[lp_index].lv_killZone, "Void_Cliff_Rocks");
    gf_BlackOutTerraininRegion(gv_worldCleaverBaseAreas[lp_index].lv_terrainDestructionRegion);
    auto28D32E84_g = gv_worldCleaverBaseAreas[lp_index].lv_pathingBlockers;
    auto28D32E84_u = UnitGroupCount(auto28D32E84_g, c_unitCountAll);
    for (;; auto28D32E84_u -= 1) {
        auto28D32E84_var = UnitGroupUnitFromEnd(auto28D32E84_g, auto28D32E84_u);
        if (auto28D32E84_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto28D32E84_var, true);
    }
    Wait(0.0625, c_timeGame);
    autoFE06738F_g = UnitGroup(null, c_playerAny, gv_worldCleaverBaseAreas[lp_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFE06738F_u = UnitGroupCount(autoFE06738F_g, c_unitCountAll);
    for (;; autoFE06738F_u -= 1) {
        autoFE06738F_var = UnitGroupUnitFromEnd(autoFE06738F_g, autoFE06738F_u);
        if (autoFE06738F_var == null) { break; }
        if ((UnitGroupHasUnit(gv_worldCleaverBaseAreas[lp_index].lv_pathingBlockers, autoFE06738F_var) == false) && (UnitGetType(autoFE06738F_var) != "AmonShardD") && (UnitGetType(autoFE06738F_var) != "BlackoutDummyLarge") && (UnitGetType(autoFE06738F_var) != "BlackoutDummySmall")) {
            if ((UnitGetOwner(autoFE06738F_var) == gv_pLAYER_01_USER) && (UnitTypeTestAttribute(UnitGetType(autoFE06738F_var), c_unitAttributeStructure) == false)) {
                gv_unitsLostToTerrainDestruction += 1;
            }

            UnitKill(autoFE06738F_var);
        }

    }
}

void gf_CleaveField (int lp_index) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto3EDD43D7_g;
    int auto3EDD43D7_u;
    unit auto3EDD43D7_var;
    unitgroup auto4A3FED39_g;
    int auto4A3FED39_u;
    unit auto4A3FED39_var;
    unitgroup autoF01ACE6D_g;
    int autoF01ACE6D_u;
    unit autoF01ACE6D_var;

    // Variable Initialization

    // Implementation
    if ((libVCMI_gf_GameIsOver() == true)) {
        return ;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(gv_worldCleaverFieldAreas[lp_index].lv_terrainDestructionRegion), 5.0, Color(100.00, 0.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(RegionGetCenter(gv_worldCleaverFieldAreas[lp_index].lv_terrainDestructionRegion), 16.0), 20.0, false);
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/499B6BA6"), null, RegionGetCenter(gv_worldCleaverFieldAreas[lp_index].lv_terrainDestructionRegion));
    SoundPlayForPlayer(SoundLink("PEpilogue03_WorldCleaverSpawn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Void_Amon_Cliff_Effect", gv_worldCleaverFieldAreas[lp_index].lv_killZone);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Void_Amon_Ground_Effect", gv_worldCleaverFieldAreas[lp_index].lv_killZone);
    Wait(libLotv_gf_DifficultyValueFixed2(12.0, 12.0, 10.0, 8.0), c_timeAI);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return ;
    }

    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(gv_worldCleaverFieldAreas[lp_index].lv_terrainDestructionRegion), 40.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Tremor", 0.0, 1.0, 4.0);
        SoundPlayForPlayer(SoundLink("PEpilogue03_WorldCleaverExplosion", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    UnitIssueOrder(gv_amon, Order(AbilityCommand("AmonDestroyTerrain", 0)), c_orderQueueReplace);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Void_Amon_Cliff_Effect", gv_worldCleaverFieldAreas[lp_index].lv_killZone);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Void_Amon_Ground_Effect", gv_worldCleaverFieldAreas[lp_index].lv_killZone);
    Wait(0.5, c_timeGame);
    auto3EDD43D7_g = UnitGroup(null, c_playerAny, gv_worldCleaverFieldAreas[lp_index].lv_killZone, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3EDD43D7_u = UnitGroupCount(auto3EDD43D7_g, c_unitCountAll);
    for (;; auto3EDD43D7_u -= 1) {
        auto3EDD43D7_var = UnitGroupUnitFromEnd(auto3EDD43D7_g, auto3EDD43D7_u);
        if (auto3EDD43D7_var == null) { break; }
        if ((UnitGetType(auto3EDD43D7_var) != "AmonShardA") && (UnitGetType(auto3EDD43D7_var) != "AmonShardB") && (UnitGetType(auto3EDD43D7_var) != "AmonShardC") && (UnitGetType(auto3EDD43D7_var) != "VoidChasm") && (UnitGetType(auto3EDD43D7_var) != "VoidChasmDormant") && (UnitGetType(auto3EDD43D7_var) != "AmonShardD")) {
            UnitBehaviorRemove(auto3EDD43D7_var, "ZergBuildingDies6", 1);
            UnitBehaviorRemove(auto3EDD43D7_var, "ZergBuildingDies9", 1);
            if ((gf_UnitisArmyforPlayer(auto3EDD43D7_var, gv_pLAYER_01_USER) == true)) {
                gv_unitsLostToTerrainDestruction += 1;
            }

            UnitKill(auto3EDD43D7_var);
        }

    }
    TerrainShowRegion(gv_worldCleaverFieldAreas[lp_index].lv_terrainDestructionRegion, false);
    libNtve_gf_ShowHideDoodadsInRegion(true, gv_worldCleaverFieldAreas[lp_index].lv_killZone, "Void_CliffRocks_Edge");
    libNtve_gf_ShowHideDoodadsInRegion(true, gv_worldCleaverFieldAreas[lp_index].lv_killZone, "Void_CliffRocks_Mass_A");
    gf_BlackOutTerraininRegion(gv_worldCleaverFieldAreas[lp_index].lv_terrainDestructionRegion);
    auto4A3FED39_g = gv_worldCleaverFieldAreas[lp_index].lv_pathingBlockers;
    auto4A3FED39_u = UnitGroupCount(auto4A3FED39_g, c_unitCountAll);
    for (;; auto4A3FED39_u -= 1) {
        auto4A3FED39_var = UnitGroupUnitFromEnd(auto4A3FED39_g, auto4A3FED39_u);
        if (auto4A3FED39_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4A3FED39_var, true);
    }
    Wait(0.0625, c_timeGame);
    autoF01ACE6D_g = UnitGroup(null, c_playerAny, gv_worldCleaverFieldAreas[lp_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF01ACE6D_u = UnitGroupCount(autoF01ACE6D_g, c_unitCountAll);
    for (;; autoF01ACE6D_u -= 1) {
        autoF01ACE6D_var = UnitGroupUnitFromEnd(autoF01ACE6D_g, autoF01ACE6D_u);
        if (autoF01ACE6D_var == null) { break; }
        if ((UnitGroupHasUnit(gv_worldCleaverFieldAreas[lp_index].lv_pathingBlockers, autoF01ACE6D_var) == false) && (UnitGetType(autoF01ACE6D_var) != "AmonShardA") && (UnitGetType(autoF01ACE6D_var) != "AmonShardB") && (UnitGetType(autoF01ACE6D_var) != "AmonShardC") && (UnitGetType(autoF01ACE6D_var) != "VoidChasm") && (UnitGetType(autoF01ACE6D_var) != "VoidChasmDormant") && (UnitGetType(autoF01ACE6D_var) != "AmonShardD") && (UnitGetType(autoF01ACE6D_var) != "BlackoutDummyLarge") && (UnitGetType(autoF01ACE6D_var) != "BlackoutDummySmall")) {
            if ((UnitGetOwner(autoF01ACE6D_var) == gv_pLAYER_01_USER) && (UnitTypeTestAttribute(UnitGetType(autoF01ACE6D_var), c_unitAttributeStructure) == false)) {
                gv_unitsLostToTerrainDestruction += 1;
            }

            UnitKill(autoF01ACE6D_var);
        }

    }
}

trigger auto_gf_MakeAmonCleaveTarget_Trigger = null;
int auto_gf_MakeAmonCleaveTarget_lp_baseCleaveIndex;

void gf_MakeAmonCleaveTarget (int lp_baseCleaveIndex) {
    auto_gf_MakeAmonCleaveTarget_lp_baseCleaveIndex = lp_baseCleaveIndex;

    if (auto_gf_MakeAmonCleaveTarget_Trigger == null) {
        auto_gf_MakeAmonCleaveTarget_Trigger = TriggerCreate("auto_gf_MakeAmonCleaveTarget_TriggerFunc");
    }

    TriggerExecute(auto_gf_MakeAmonCleaveTarget_Trigger, false, false);
}

bool auto_gf_MakeAmonCleaveTarget_TriggerFunc (bool testConds, bool runActions) {
    int lp_baseCleaveIndex = auto_gf_MakeAmonCleaveTarget_lp_baseCleaveIndex;

    // Variable Declarations
    unit lv_repulsor;

    // Automatic Variable Declarations
    int autoD0AB9A8D_val;
    unitgroup auto1518C057_g;
    int auto1518C057_u;
    unit auto1518C057_var;

    // Variable Initialization

    // Implementation
    UnitIssueOrder(gv_amon, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(gv_amon, "Signal MoveDown");
    Wait(4.0, c_timeGame);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    ActorSend(gv_worldCleaverBaseAreas[lp_baseCleaveIndex].lv_amonDoodad, "Signal MoveForward");
    autoD0AB9A8D_val = lp_baseCleaveIndex;
    if (autoD0AB9A8D_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonRepulserField", c_unitCreateIgnorePlacement, 0, PointFromName(("Amon Repulsor " + IntToString(lp_baseCleaveIndex))));
        Wait(2.0, c_timeGame);
    }
    else if (autoD0AB9A8D_val == 3) {
        auto1518C057_g = UnitGroup(null, c_playerAny, RegionFromId(119), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1518C057_u = UnitGroupCount(auto1518C057_g, c_unitCountAll);
        for (;; auto1518C057_u -= 1) {
            auto1518C057_var = UnitGroupUnitFromEnd(auto1518C057_g, auto1518C057_u);
            if (auto1518C057_var == null) { break; }
            UnitCreateEffectPoint(auto1518C057_var, "AlarakTriggerUnitKnockback", PointWithOffsetPolar(UnitGetPosition(auto1518C057_var), 16.0, 45.0));
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonRepulserField20", c_unitCreateIgnorePlacement, 0, PointFromId(1911));
        Wait(2.0, c_timeGame);
        UnitSetPosition(UnitLastCreated(), PointFromId(1897), false);
    }
    else if (autoD0AB9A8D_val == 4) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonRepulserField", c_unitCreateIgnorePlacement, 0, PointFromName(("Amon Repulsor " + IntToString(lp_baseCleaveIndex))));
        Wait(2.0, c_timeGame);
    }
    else if (autoD0AB9A8D_val == 5) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonRepulserField20", c_unitCreateIgnorePlacement, 0, PointFromName(("Amon Repulsor " + IntToString(lp_baseCleaveIndex))));
        Wait(2.0, c_timeGame);
    }
    else if (autoD0AB9A8D_val == 6) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonRepulserField", c_unitCreateIgnorePlacement, 0, PointFromId(1910));
        Wait(2.0, c_timeGame);
        UnitSetPosition(UnitLastCreated(), PointFromId(1900), false);
    }
    else if (autoD0AB9A8D_val == 7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonRepulserField", c_unitCreateIgnorePlacement, 0, PointFromName(("Amon Repulsor " + IntToString(lp_baseCleaveIndex))));
        Wait(2.0, c_timeGame);
    }
    else if (autoD0AB9A8D_val == 8) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonRepulserField", c_unitCreateIgnorePlacement, 0, PointFromName(("Amon Repulsor " + IntToString(lp_baseCleaveIndex))));
        Wait(2.0, c_timeGame);
    }
    else if (autoD0AB9A8D_val == 9) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonRepulserField", c_unitCreateIgnorePlacement, 0, PointFromName(("Amon Repulsor " + IntToString(lp_baseCleaveIndex))));
        Wait(2.0, c_timeGame);
    }
    else {
    }
    lv_repulsor = UnitLastCreated();
    Wait(2.0, c_timeGame);
    Wait(4.0, c_timeGame);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("PEpilogue03_WorldCleaverSpawn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    ActorSend(gv_worldCleaverBaseAreas[lp_baseCleaveIndex].lv_amonDoodad, "Signal Spell");
    Wait(9.0, c_timeGame);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    ActorSend(gv_worldCleaverBaseAreas[lp_baseCleaveIndex].lv_amonDoodad, "Signal MoveBack");
    UnitKill(lv_repulsor);
    Wait(4.0, c_timeGame);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_amon, "Signal MoveUp");
    return true;
}

void gf_BlackOutTerraininRegion (region lp_region) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    region auto363CE8D6_val;
    const int auto2B86EBED_ae = 3;
    const int auto2B86EBED_ai = 1;
    const int auto478B18F8_ae = 1;
    const int auto478B18F8_ai = 1;
    const int autoAAB27BBD_ae = 3;
    const int autoAAB27BBD_ai = 1;
    const int autoDCF3C5C3_ae = 2;
    const int autoDCF3C5C3_ai = 1;
    const int auto3E38D5A6_ae = 2;
    const int auto3E38D5A6_ai = 1;
    const int autoC3902EB6_ae = 2;
    const int autoC3902EB6_ai = 1;
    const int auto3E9AADEA_ae = 1;
    const int auto3E9AADEA_ai = 1;
    const int autoB0B5C787_ae = 3;
    const int autoB0B5C787_ai = 1;
    const int auto4020769D_ae = 3;
    const int auto4020769D_ai = 1;
    const int auto5BA2777D_ae = 2;
    const int auto5BA2777D_ai = 1;
    const int auto1350E48E_ae = 2;
    const int auto1350E48E_ai = 1;
    const int autoD8F0330E_ae = 3;
    const int autoD8F0330E_ai = 1;
    const int autoE970F8E7_ae = 1;
    const int autoE970F8E7_ai = 1;
    const int auto2C4C363E_ae = 2;
    const int auto2C4C363E_ai = 1;
    const int auto3F116A9A_ae = 1;
    const int auto3F116A9A_ai = 1;
    const int auto49744A43_ae = 3;
    const int auto49744A43_ai = 1;
    const int auto658A045B_ae = 3;
    const int auto658A045B_ai = 1;
    const int autoAE350A7D_ae = 3;
    const int autoAE350A7D_ai = 1;
    const int auto3CF91CC5_ae = 3;
    const int auto3CF91CC5_ai = 1;
    const int auto87789991_ae = 3;
    const int auto87789991_ai = 1;
    const int autoE5D51F4F_ae = 3;
    const int autoE5D51F4F_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_region == null)) {
        return ;
    }

    auto363CE8D6_val = lp_region;
    if (auto363CE8D6_val == RegionFromId(21)) {
        lv_i = 1;
        for ( ; ( (auto2B86EBED_ai >= 0 && lv_i <= auto2B86EBED_ae) || (auto2B86EBED_ai < 0 && lv_i >= auto2B86EBED_ae) ) ; lv_i += auto2B86EBED_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 1-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 1-" + IntToString(lv_i)))));
        }
        lv_i = 1;
        for ( ; ( (auto478B18F8_ai >= 0 && lv_i <= auto478B18F8_ae) || (auto478B18F8_ai < 0 && lv_i >= auto478B18F8_ae) ) ; lv_i += auto478B18F8_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 1-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 1-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(24)) {
        lv_i = 1;
        for ( ; ( (autoAAB27BBD_ai >= 0 && lv_i <= autoAAB27BBD_ae) || (autoAAB27BBD_ai < 0 && lv_i >= autoAAB27BBD_ae) ) ; lv_i += autoAAB27BBD_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 2-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 2-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(26)) {
        lv_i = 1;
        for ( ; ( (autoDCF3C5C3_ai >= 0 && lv_i <= autoDCF3C5C3_ae) || (autoDCF3C5C3_ai < 0 && lv_i >= autoDCF3C5C3_ae) ) ; lv_i += autoDCF3C5C3_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 3-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 3-" + IntToString(lv_i)))));
        }
        lv_i = 1;
        for ( ; ( (auto3E38D5A6_ai >= 0 && lv_i <= auto3E38D5A6_ae) || (auto3E38D5A6_ai < 0 && lv_i >= auto3E38D5A6_ae) ) ; lv_i += auto3E38D5A6_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 3-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 3-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(28)) {
        lv_i = 1;
        for ( ; ( (autoC3902EB6_ai >= 0 && lv_i <= autoC3902EB6_ae) || (autoC3902EB6_ai < 0 && lv_i >= autoC3902EB6_ae) ) ; lv_i += autoC3902EB6_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 4-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 4-" + IntToString(lv_i)))));
        }
        lv_i = 1;
        for ( ; ( (auto3E9AADEA_ai >= 0 && lv_i <= auto3E9AADEA_ae) || (auto3E9AADEA_ai < 0 && lv_i >= auto3E9AADEA_ae) ) ; lv_i += auto3E9AADEA_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 4-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 4-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(30)) {
        lv_i = 1;
        for ( ; ( (autoB0B5C787_ai >= 0 && lv_i <= autoB0B5C787_ae) || (autoB0B5C787_ai < 0 && lv_i >= autoB0B5C787_ae) ) ; lv_i += autoB0B5C787_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 5-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 5-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(32)) {
        lv_i = 1;
        for ( ; ( (auto4020769D_ai >= 0 && lv_i <= auto4020769D_ae) || (auto4020769D_ai < 0 && lv_i >= auto4020769D_ae) ) ; lv_i += auto4020769D_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 6-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 6-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(34)) {
        lv_i = 1;
        for ( ; ( (auto5BA2777D_ai >= 0 && lv_i <= auto5BA2777D_ae) || (auto5BA2777D_ai < 0 && lv_i >= auto5BA2777D_ae) ) ; lv_i += auto5BA2777D_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 7-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 7-" + IntToString(lv_i)))));
        }
        lv_i = 1;
        for ( ; ( (auto1350E48E_ai >= 0 && lv_i <= auto1350E48E_ae) || (auto1350E48E_ai < 0 && lv_i >= auto1350E48E_ae) ) ; lv_i += auto1350E48E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 7-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 7-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(36)) {
        lv_i = 1;
        for ( ; ( (autoD8F0330E_ai >= 0 && lv_i <= autoD8F0330E_ae) || (autoD8F0330E_ai < 0 && lv_i >= autoD8F0330E_ae) ) ; lv_i += autoD8F0330E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 8-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 8-" + IntToString(lv_i)))));
        }
        lv_i = 1;
        for ( ; ( (autoE970F8E7_ai >= 0 && lv_i <= autoE970F8E7_ae) || (autoE970F8E7_ai < 0 && lv_i >= autoE970F8E7_ae) ) ; lv_i += autoE970F8E7_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 8-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 8-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(38)) {
        lv_i = 1;
        for ( ; ( (auto2C4C363E_ai >= 0 && lv_i <= auto2C4C363E_ae) || (auto2C4C363E_ai < 0 && lv_i >= auto2C4C363E_ae) ) ; lv_i += auto2C4C363E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 9-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummyLarge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Large 9-" + IntToString(lv_i)))));
        }
        lv_i = 1;
        for ( ; ( (auto3F116A9A_ai >= 0 && lv_i <= auto3F116A9A_ae) || (auto3F116A9A_ai < 0 && lv_i >= auto3F116A9A_ae) ) ; lv_i += auto3F116A9A_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 9-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 9-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(60)) {
        lv_i = 1;
        for ( ; ( (auto49744A43_ai >= 0 && lv_i <= auto49744A43_ae) || (auto49744A43_ai < 0 && lv_i >= auto49744A43_ae) ) ; lv_i += auto49744A43_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 10-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 10-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(62)) {
        lv_i = 1;
        for ( ; ( (auto658A045B_ai >= 0 && lv_i <= auto658A045B_ae) || (auto658A045B_ai < 0 && lv_i >= auto658A045B_ae) ) ; lv_i += auto658A045B_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 11-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 11-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(64)) {
        lv_i = 1;
        for ( ; ( (autoAE350A7D_ai >= 0 && lv_i <= autoAE350A7D_ae) || (autoAE350A7D_ai < 0 && lv_i >= autoAE350A7D_ae) ) ; lv_i += autoAE350A7D_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 12-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 12-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(66)) {
        lv_i = 1;
        for ( ; ( (auto3CF91CC5_ai >= 0 && lv_i <= auto3CF91CC5_ae) || (auto3CF91CC5_ai < 0 && lv_i >= auto3CF91CC5_ae) ) ; lv_i += auto3CF91CC5_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 13-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 13-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(68)) {
        lv_i = 1;
        for ( ; ( (auto87789991_ai >= 0 && lv_i <= auto87789991_ae) || (auto87789991_ai < 0 && lv_i >= auto87789991_ae) ) ; lv_i += auto87789991_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 14-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 14-" + IntToString(lv_i)))));
        }
    }
    else if (auto363CE8D6_val == RegionFromId(70)) {
        lv_i = 1;
        for ( ; ( (autoE5D51F4F_ai >= 0 && lv_i <= autoE5D51F4F_ae) || (autoE5D51F4F_ai < 0 && lv_i >= autoE5D51F4F_ae) ) ; lv_i += autoE5D51F4F_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 15-" + IntToString(lv_i)))));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BlackoutDummySmall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromName(("Blackout Small 15-" + IntToString(lv_i)))));
        }
    }
    else {
    }
}

trigger auto_gf_CreateQuantumRayReticle_Trigger = null;
unit auto_gf_CreateQuantumRayReticle_lp_targetUnit;

void gf_CreateQuantumRayReticle (unit lp_targetUnit) {
    auto_gf_CreateQuantumRayReticle_lp_targetUnit = lp_targetUnit;

    if (auto_gf_CreateQuantumRayReticle_Trigger == null) {
        auto_gf_CreateQuantumRayReticle_Trigger = TriggerCreate("auto_gf_CreateQuantumRayReticle_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateQuantumRayReticle_Trigger, false, false);
}

bool auto_gf_CreateQuantumRayReticle_TriggerFunc (bool testConds, bool runActions) {
    unit lp_targetUnit = auto_gf_CreateQuantumRayReticle_lp_targetUnit;

    // Automatic Variable Declarations
    // Implementation
    if (((UnitIsAlive(lp_targetUnit) == false) || (UnitIsAlive(gv_kerrigan) == false))) {
        return true;
    }

    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/D0F114C5"), lp_targetUnit, "Ref_Center");
    TextTagAttachToUnitPoint(TextTagLastCreated(), lp_targetUnit, "Ref_Center", 0, 0);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("KerriganEpilogue03QuantumRay", 0), true);
    gv_quantumRayUsed = false;
    TriggerEnable(gt_QuantumRayUsed, true);
    while (!(((UnitIsAlive(lp_targetUnit) == false) || (UnitIsAlive(gv_kerrigan) == false) || (DistanceBetweenPoints(UnitGetPosition(lp_targetUnit), UnitGetPosition(gv_kerrigan)) > 24.0) || (gv_quantumRayUsed == true)))) {
        Wait(1.0, c_timeAI);
    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("KerriganEpilogue03QuantumRay", 0), false);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    TriggerEnable(gt_QuantumRayUsed, false);
    return true;
}

bool gf_UnitisArmyforPlayer (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_unit) == lp_player) && (UnitFilterMatch(lp_unit, gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitGetType(lp_unit) != "Larva") && (UnitGetType(lp_unit) != "Drone") && (UnitGetType(lp_unit) != "Overlord") && (UnitGetType(lp_unit) != "Roachling")) {
        return true;
    }
    else {
        return false;
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("SC2Epilogue03");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libVoiC_gf_EnableCampaignTechUnit(true, "ZerglingSwarmling", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "RoachCorpser", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "BanelingSplitter", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "HydraliskImpaler", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "MutaliskBroodlord", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "SwarmHostCarrion", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "UltraliskTorrasque", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Infestor", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "Aberration", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "SpineCrawler", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "SporeCrawler", gv_pLAYER_01_USER);
    libVoiC_gf_EnableCampaignTechUnit(true, "SwarmQueen", gv_pLAYER_01_USER);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "K5ImprovedOverlords", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "K5AutoExtractor", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "K5CreepBonuses", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "K5TwoDrones", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "FasterLarvaSpawn", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HotSCampaignLarvaCountHard", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "CreepTumorHidden", 1);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("OverlordTransport", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("OverlordTransport", 2), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("GenerateCreep", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("GenerateCreep", 1), false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "Overseer", false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MorphToOverseer", 1), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "zerglingattackspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HotsViscousDischarge", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "OrganicCarapace", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HotSGroovedSpines", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HotSRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HotSRapidIncubation", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HotSTissueAssimilation", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "SwarmQueenVisual", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "Consume", 1);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 1), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 2), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 6), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 7), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 8), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 3), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 4), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("evolutionchamberresearch", 5), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SpireResearch", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SpireResearch", 1), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SpireResearch", 2), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SpireResearch", 3), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SpireResearch", 4), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SpireResearch", 5), true);
    TechTreeUnitAllow(gv_pLAYER_02_RAYNOR, "Bunker", true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TechReactorAI", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "VanadiumPlating", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TechReactor", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "RegenerativeBioSteel", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "ProjectileAccelerators", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "NeoSteelFrame", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "ReinforcedSuperstructure", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "FireSuppressionSystems", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "CombatShield", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "StabilizerMedPacks", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "JackhammerConcussionGrenades", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "MarauderLifeBoost", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "AresClassWeaponsSystem", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "MaelstromRounds", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "SiegeTankShapedBlast", 1);
    libVCUI_gf_ShowSpearofAdunUI(false, c_transitionDurationImmediate);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZealotAiur", gv_pLAYER_03_ARTANIS);
    libVoiC_gf_EnableCampaignTechUnit(true, "StalkerAiur", gv_pLAYER_03_ARTANIS);
    libVoiC_gf_EnableCampaignTechUnit(true, "SentryAiur", gv_pLAYER_03_ARTANIS);
    libVoiC_gf_EnableCampaignTechUnit(true, "ColossusTaldarim", gv_pLAYER_03_ARTANIS);
    libVoiC_gf_EnableCampaignTechUnit(true, "CarrierAiur", gv_pLAYER_03_ARTANIS);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ExtendedThermalLance", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "DarkProtoss", 1);
    TechTreeAbilityAllow(gv_pLAYER_04_AMON, AbilityCommand("GhostCloak", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_04_AMON, AbilityCommand("BansheeCloak", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_RAYNOR, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_ARTANIS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_AMON_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RAYNOR, gv_pLAYER_03_ARTANIS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_RAYNOR, gv_pLAYER_05_AMON_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_ARTANIS, gv_pLAYER_05_AMON_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_AMON, gv_pLAYER_05_AMON_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 150);
    PlayerModifyPropertyInt(gv_pLAYER_02_RAYNOR, c_playerPropMinerals, c_playerPropOperSetTo, 7500);
    PlayerModifyPropertyInt(gv_pLAYER_02_RAYNOR, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_03_ARTANIS, c_playerPropMinerals, c_playerPropOperSetTo, 7500);
    PlayerModifyPropertyInt(gv_pLAYER_03_ARTANIS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_AMON, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_AMON_NEUTRAL, "HeroicShieldCleanUp", 1);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Zerg", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Zerg", false);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganEpilogue03", 0, gv_pLAYER_01_USER, PointFromId(9));
    gv_kerrigan = UnitLastCreated();
    UnitStatusBarOverride(gv_kerrigan, c_unitStatusGroupOwner);
    libVCUI_gf_SetHeroPanelUnit(1, gv_kerrigan);
    UnitIssueOrder(UnitFromId(6), OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), UnitFromId(13)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(6), OrderTargetingPoint(AbilityCommand("RallyHatchery", 0), PointFromId(514)), c_orderQueueReplace);
    TriggerExecute(gt_VoidCrystalInit, true, false);
    UnitBehaviorAdd(UnitFromId(1455), "VoidChasmTruck", UnitFromId(1455), 1);
    UnitCreate(1, "AmonEpilogue03Unit", c_unitCreateIgnorePlacement, 0, PointFromId(259), 325.0);
    gv_victoryAmon = UnitLastCreated();
    UnitSetState(gv_victoryAmon, c_unitStateFidget, false);
    UnitSetHeight(gv_victoryAmon, 20.0, 0.0);
    libNtve_gf_ShowHideUnit(gv_victoryAmon, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PEpilogue03_Music_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    TriggerExecute(gt_WorldCleaverInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_voidChasmMaxLife = libLotv_gf_DifficultyValueFixed2(3000.0, 3000.0, 4000.0, 5000.0);
    gv_voidChasmRespawnDelay = libLotv_gf_DifficultyValueFixed2(600.0, 600.0, 420.0, 285.0);
    gv_constructMaxLife = libLotv_gf_DifficultyValueFixed2(1800.0, 1800.0, 2400.0, 3000.0);
    gv_constructRespawnDelay = libLotv_gf_DifficultyValueFixed2(600.0, 600.0, 420.0, 285.0);
    gv_oblivionConstructHealCooldown = libLotv_gf_DifficultyValueFixed2(24.0, 24.0, 12.0, 12.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranVehicleAndShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranVehicleAndShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossShieldsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranVehicleAndShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranVehicleAndShipArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossShieldsLevel1", 1);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "zerglingattackspeed", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ShieldWall", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ClusterWarheads", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ExtendedThermalLance", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("KerriganAscended");
    libVCMI_gf_AddMissionTipCampaign("AmonVoidCrystals");
    libVCMI_gf_AddMissionTipCampaign("AmonVoidChasms");
    libVCMI_gf_AddMissionTipCampaign("AmonVoidConstructs");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ghost", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Battlecruiser", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_VoidChasmInit, true, false);
    TriggerExecute(gt_TormentConstructInit, true, false);
    TriggerExecute(gt_RampageConstructInit, true, false);
    TriggerExecute(gt_OblivionConstructInit, true, false);
    TriggerExecute(gt_WorldCleaverSequence, true, false);
    TriggerExecute(gt_QuantumRayCheck, true, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/ADA11C5C"), null, PointFromId(1));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_pLAYER_01_USER);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(2), 0.0, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyCrystalsCreate, true, true);
    gv_pingsAllowed = true;
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    Wait(10.0, c_timeReal);
    TriggerExecute(gt_VoidCrystalPathsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal Init
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystalInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    fixed lv_sideA;
    fixed lv_sideB;
    fixed lv_sideC;
    fixed lv_angleB;
    fixed lv_currentAngle;

    // Automatic Variable Declarations
    int auto9C89A3D9_ae;
    const int auto9C89A3D9_ai = 1;
    fixed auto7C9B9FD2_ae;
    const fixed auto7C9B9FD2_ai = -1.0;
    fixed auto0413FD7D_ae;
    const fixed auto0413FD7D_ai = 1.0;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9C89A3D9_ae = gv_numberOfCrystals;
    lv_index = 1;
    for ( ; ( (auto9C89A3D9_ai >= 0 && lv_index <= auto9C89A3D9_ae) || (auto9C89A3D9_ai < 0 && lv_index >= auto9C89A3D9_ae) ) ; lv_index += auto9C89A3D9_ai ) {
        gv_voidCrystals[lv_index].lv_nadir = PointFromName(("Void Crystal " + IntToString(lv_index) + " - Nadir"));
        gv_voidCrystals[lv_index].lv_zenith = PointFromName(("Void Crystal " + IntToString(lv_index) + " - Zenith"));
        gv_voidCrystals[lv_index].lv_center = Point(((PointGetX(gv_voidCrystals[lv_index].lv_nadir)+PointGetX(gv_voidCrystals[lv_index].lv_zenith))/2), ((PointGetY(gv_voidCrystals[lv_index].lv_nadir)+PointGetY(gv_voidCrystals[lv_index].lv_zenith))/2));
        gv_voidCrystals[lv_index].lv_rotation = AngleBetweenPoints(gv_voidCrystals[lv_index].lv_center, gv_voidCrystals[lv_index].lv_nadir);
        gv_voidCrystals[lv_index].lv_groundHeightStart = PointFromName(("Void Crystal " + IntToString(lv_index) + " - Ground Height Start"));
        gv_voidCrystals[lv_index].lv_normalizedGroundHeightStartAngle = gf_NormalizeVoidCrystalAngle(lv_index, AngleBetweenPoints(gv_voidCrystals[lv_index].lv_center, gv_voidCrystals[lv_index].lv_groundHeightStart));
        if ((gv_voidCrystals[lv_index].lv_normalizedGroundHeightStartAngle > 180.0)) {
            gv_voidCrystals[lv_index].lv_rotatesCounterClockwise = false;
        }

        gv_voidCrystals[lv_index].lv_majorRadius = DistanceBetweenPoints(gv_voidCrystals[lv_index].lv_center, gv_voidCrystals[lv_index].lv_nadir);
        lv_sideA = DistanceBetweenPoints(gv_voidCrystals[lv_index].lv_center, gv_voidCrystals[lv_index].lv_groundHeightStart);
        lv_sideB = DistanceBetweenPoints(gv_voidCrystals[lv_index].lv_zenith, gv_voidCrystals[lv_index].lv_groundHeightStart);
        lv_sideC = DistanceBetweenPoints(gv_voidCrystals[lv_index].lv_center, gv_voidCrystals[lv_index].lv_zenith);
        lv_angleB = ACos((((lv_sideA*lv_sideA)+(lv_sideC*lv_sideC)-(lv_sideB*lv_sideB))/(2*lv_sideA*lv_sideC)));
        gv_voidCrystals[lv_index].lv_minorRadius = (((lv_sideA * lv_sideC) * Sin(lv_angleB)) / SquareRoot((Pow(lv_sideC, 2.0) - Pow((lv_sideA * Cos(lv_angleB)), 2.0))));
        if ((gv_voidCrystals[lv_index].lv_rotatesCounterClockwise == true)) {
            auto0413FD7D_ae = (360.0 + gv_voidCrystals[lv_index].lv_rotation);
            lv_currentAngle = (180.0 + gv_voidCrystals[lv_index].lv_rotation);
            for ( ; ( (auto0413FD7D_ai >= 0 && lv_currentAngle <= auto0413FD7D_ae) || (auto0413FD7D_ai < 0 && lv_currentAngle >= auto0413FD7D_ae) ) ; lv_currentAngle += auto0413FD7D_ai ) {
                if ((WorldHeight(c_heightMapGround, PointWithOffsetPolar(gv_voidCrystals[lv_index].lv_center, gf_VoidCrystalRadiusatAngle(lv_currentAngle, lv_index), lv_currentAngle)) < 4.0)) {
                    break;
                }

            }
        }
        else {
            auto7C9B9FD2_ae = (0.0 + gv_voidCrystals[lv_index].lv_rotation);
            lv_currentAngle = (180.0 + gv_voidCrystals[lv_index].lv_rotation);
            for ( ; ( (auto7C9B9FD2_ai >= 0 && lv_currentAngle <= auto7C9B9FD2_ae) || (auto7C9B9FD2_ai < 0 && lv_currentAngle >= auto7C9B9FD2_ae) ) ; lv_currentAngle += auto7C9B9FD2_ai ) {
                if ((WorldHeight(c_heightMapGround, PointWithOffsetPolar(gv_voidCrystals[lv_index].lv_center, gf_VoidCrystalRadiusatAngle(lv_currentAngle, lv_index), lv_currentAngle)) < 4.0)) {
                    break;
                }

            }
        }
        gv_voidCrystals[lv_index].lv_groundHeightEnd = PointWithOffsetPolar(gv_voidCrystals[lv_index].lv_center, gf_VoidCrystalRadiusatAngle(lv_currentAngle, lv_index), lv_currentAngle);
        gv_voidCrystals[lv_index].lv_normalizedGroundHeightEndAngle = gf_NormalizeVoidCrystalAngle(lv_index, AngleBetweenPoints(gv_voidCrystals[lv_index].lv_center, gv_voidCrystals[lv_index].lv_groundHeightEnd));
        if ((gv_voidCrystals[lv_index].lv_rotatesCounterClockwise == true)) {
            gv_voidCrystals[lv_index].lv_rateOfAscent = (400.0 / Pow(gv_voidCrystals[lv_index].lv_normalizedGroundHeightStartAngle, 2.0));
            gv_voidCrystals[lv_index].lv_rateOfDescent = (400.0 / Pow((360.0 - gv_voidCrystals[lv_index].lv_normalizedGroundHeightEndAngle), 2.0));
        }
        else {
            gv_voidCrystals[lv_index].lv_rateOfDescent = (400.0 / Pow(gv_voidCrystals[lv_index].lv_normalizedGroundHeightEndAngle, 2.0));
            gv_voidCrystals[lv_index].lv_rateOfAscent = (400.0 / Pow((360.0 - gv_voidCrystals[lv_index].lv_normalizedGroundHeightStartAngle), 2.0));
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCrystalEpilogue03", 0, gv_pLAYER_04_AMON, gv_voidCrystals[lv_index].lv_nadir);
        gv_voidCrystals[lv_index].lv_unit = UnitLastCreated();
        UnitSetHeight(gv_voidCrystals[lv_index].lv_unit, -34.0, 0.0);
        UnitSetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(4000.0, 4000.0, 5000.0, 6000.0));
        UnitSetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropLifePercent, 100.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_voidCrystals[lv_index].lv_unit), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_voidCrystals[lv_index].lv_ping = PingLastCreated();
        PingSetTooltip(gv_voidCrystals[lv_index].lv_ping, StringExternal("Param/Value/E358298A"));
        PingSetUnit(gv_voidCrystals[lv_index].lv_ping, gv_voidCrystals[lv_index].lv_unit);
        PingSetVisible(gv_voidCrystals[lv_index].lv_ping, false);
        gf_SetVoidCrystalVulnerableState(lv_index, false);
    }
    TriggerExecute(gt_VoidCrystalController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystalInit_Init () {
    gt_VoidCrystalInit = TriggerCreate("gt_VoidCrystalInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal Controller
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystalController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    fixed lv_currentAngle;
    bool lv_vulnerableCrystalExists;

    // Automatic Variable Declarations
    int auto43E6FF4D_ae;
    const int auto43E6FF4D_ai = 1;
    int auto264DDC8D_ae;
    const int auto264DDC8D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((gv_crystalAccelerationEnabled == true)) {
            lv_vulnerableCrystalExists = false;
            auto43E6FF4D_ae = gv_numberOfCrystals;
            lv_index = 1;
            for ( ; ( (auto43E6FF4D_ai >= 0 && lv_index <= auto43E6FF4D_ae) || (auto43E6FF4D_ai < 0 && lv_index >= auto43E6FF4D_ae) ) ; lv_index += auto43E6FF4D_ai ) {
                if ((UnitIsAlive(gv_voidCrystals[lv_index].lv_unit) == true) && (gv_voidCrystals[lv_index].lv_vulnerable == true)) {
                    lv_vulnerableCrystalExists = true;
                    break;
                }

            }
        }
        else {
            lv_vulnerableCrystalExists = true;
        }
        auto264DDC8D_ae = gv_numberOfCrystals;
        lv_index = 1;
        for ( ; ( (auto264DDC8D_ai >= 0 && lv_index <= auto264DDC8D_ae) || (auto264DDC8D_ai < 0 && lv_index >= auto264DDC8D_ae) ) ; lv_index += auto264DDC8D_ai ) {
            if ((UnitIsAlive(gv_voidCrystals[lv_index].lv_unit) == true)) {
                lv_currentAngle = AngleBetweenPoints(gv_voidCrystals[lv_index].lv_center, UnitGetPosition(gv_voidCrystals[lv_index].lv_unit));
                if ((gv_voidCrystals[lv_index].lv_rotatesCounterClockwise == true)) {
                    if ((lv_vulnerableCrystalExists == true)) {
                        UnitIssueOrder(gv_voidCrystals[lv_index].lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(gv_voidCrystals[lv_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentAngle + 2.0), lv_index), (lv_currentAngle + 2.0))), c_orderQueueReplace);
                        UnitSetHeight(gv_voidCrystals[lv_index].lv_unit, gf_VoidCrystalHeightatAngle((lv_currentAngle + 1.0), lv_index), 1.0);
                        UnitSetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropBaseMovementSpeed, gf_VoidCrystalSpeedatAngle((lv_currentAngle + 1.0), lv_index));
                    }
                    else {
                        UnitIssueOrder(gv_voidCrystals[lv_index].lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(gv_voidCrystals[lv_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentAngle + 4.0), lv_index), (lv_currentAngle + 4.0))), c_orderQueueReplace);
                        UnitSetHeight(gv_voidCrystals[lv_index].lv_unit, gf_VoidCrystalHeightatAngle((lv_currentAngle + 2.0), lv_index), 1.0);
                        UnitSetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropBaseMovementSpeed, 1.0);
                    }
                }
                else {
                    if ((lv_vulnerableCrystalExists == true)) {
                        UnitIssueOrder(gv_voidCrystals[lv_index].lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(gv_voidCrystals[lv_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentAngle - 2.0), lv_index), (lv_currentAngle - 2.0))), c_orderQueueReplace);
                        UnitSetHeight(gv_voidCrystals[lv_index].lv_unit, gf_VoidCrystalHeightatAngle((lv_currentAngle - 1.0), lv_index), 1.0);
                        UnitSetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropBaseMovementSpeed, gf_VoidCrystalSpeedatAngle((lv_currentAngle - 1.0), lv_index));
                    }
                    else {
                        UnitIssueOrder(gv_voidCrystals[lv_index].lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(gv_voidCrystals[lv_index].lv_center, gf_VoidCrystalRadiusatAngle((lv_currentAngle - 4.0), lv_index), (lv_currentAngle - 4.0))), c_orderQueueReplace);
                        UnitSetHeight(gv_voidCrystals[lv_index].lv_unit, gf_VoidCrystalHeightatAngle((lv_currentAngle - 2.0), lv_index), 1.0);
                        UnitSetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropBaseMovementSpeed, 1.0);
                    }
                }
                if ((gv_voidCrystals[lv_index].lv_vulnerable == true) && (UnitGetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropHeight, c_unitPropCurrent) < (gv_crystalHeightThreshold + 5.0)) && (TimerGetRemaining(gv_voidCrystals[lv_index].lv_vulnerabilityDelay) < 1)) {
                    gf_SetVoidCrystalVulnerableState(lv_index, false);
                    UnitSetHeight(gv_voidCrystals[lv_index].lv_unit, (UnitGetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropHeight, c_unitPropCurrent) - 5.0), 0.875);
                    TimerStart(gv_voidCrystals[lv_index].lv_vulnerabilityDelay, 5.0, false, c_timeGame);
                }

                if ((gv_voidCrystals[lv_index].lv_vulnerable == false) && (UnitGetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropHeight, c_unitPropCurrent) > gv_crystalHeightThreshold) && (TimerGetRemaining(gv_voidCrystals[lv_index].lv_vulnerabilityDelay) < 1) && ((libVCMI_gf_PlayerInCinematicModeCampaign() == true) || ((libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_pingsAllowed == true)))) {
                    gf_SetVoidCrystalVulnerableState(lv_index, true);
                    UnitSetHeight(gv_voidCrystals[lv_index].lv_unit, (UnitGetPropertyFixed(gv_voidCrystals[lv_index].lv_unit, c_unitPropHeight, c_unitPropCurrent) + 5.0), 0.875);
                    TimerStart(gv_voidCrystals[lv_index].lv_vulnerabilityDelay, 5.0, false, c_timeGame);
                }

                if ((gv_voidCrystals[lv_index].lv_rotatesCounterClockwise == true)) {
                    if ((gv_voidCrystals[lv_index].lv_cloudCentered == true) && (gf_NormalizeVoidCrystalAngle(lv_index, lv_currentAngle) >= (gv_voidCrystals[lv_index].lv_normalizedGroundHeightStartAngle - 3)) && (gf_NormalizeVoidCrystalAngle(lv_index, lv_currentAngle) <= (gv_voidCrystals[lv_index].lv_normalizedGroundHeightEndAngle + 3))) {
                        gv_voidCrystals[lv_index].lv_cloudCentered = false;
                        ActorSend(libNtve_gf_MainActorofUnit(gv_voidCrystals[lv_index].lv_unit), libNtve_gf_Signal("CloudGrounded"));
                    }

                    if ((gv_voidCrystals[lv_index].lv_cloudCentered == false) && ((gf_NormalizeVoidCrystalAngle(lv_index, lv_currentAngle) < (gv_voidCrystals[lv_index].lv_normalizedGroundHeightStartAngle - 3)) || (gf_NormalizeVoidCrystalAngle(lv_index, lv_currentAngle) > (gv_voidCrystals[lv_index].lv_normalizedGroundHeightEndAngle + 3)))) {
                        gv_voidCrystals[lv_index].lv_cloudCentered = true;
                        ActorSend(libNtve_gf_MainActorofUnit(gv_voidCrystals[lv_index].lv_unit), libNtve_gf_Signal("CloudCentered"));
                    }

                }
                else {
                    if ((gv_voidCrystals[lv_index].lv_cloudCentered == true) && (gf_NormalizeVoidCrystalAngle(lv_index, lv_currentAngle) <= (gv_voidCrystals[lv_index].lv_normalizedGroundHeightStartAngle + 3)) && (gf_NormalizeVoidCrystalAngle(lv_index, lv_currentAngle) >= (gv_voidCrystals[lv_index].lv_normalizedGroundHeightEndAngle - 3))) {
                        gv_voidCrystals[lv_index].lv_cloudCentered = false;
                        ActorSend(libNtve_gf_MainActorofUnit(gv_voidCrystals[lv_index].lv_unit), libNtve_gf_Signal("CloudGrounded"));
                    }

                    if ((gv_voidCrystals[lv_index].lv_cloudCentered == false) && ((gf_NormalizeVoidCrystalAngle(lv_index, lv_currentAngle) > (gv_voidCrystals[lv_index].lv_normalizedGroundHeightStartAngle + 3)) || (gf_NormalizeVoidCrystalAngle(lv_index, lv_currentAngle) < (gv_voidCrystals[lv_index].lv_normalizedGroundHeightEndAngle - 3)))) {
                        gv_voidCrystals[lv_index].lv_cloudCentered = true;
                        ActorSend(libNtve_gf_MainActorofUnit(gv_voidCrystals[lv_index].lv_unit), libNtve_gf_Signal("CloudCentered"));
                    }

                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystalController_Init () {
    gt_VoidCrystalController = TriggerCreate("gt_VoidCrystalController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal Initial Locations
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystalInitialLocations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_MoveVoidCrystal(1, (gv_voidCrystals[1].lv_normalizedGroundHeightStartAngle - 120.0));
    gf_MoveVoidCrystal(2, (gv_voidCrystals[2].lv_normalizedGroundHeightStartAngle - 23.0));
    gf_MoveVoidCrystal(3, (gv_voidCrystals[3].lv_normalizedGroundHeightStartAngle - 260.0));
    gf_MoveVoidCrystal(4, (gv_voidCrystals[4].lv_normalizedGroundHeightStartAngle + 210.0));
    gf_MoveVoidCrystal(5, (gv_voidCrystals[5].lv_normalizedGroundHeightEndAngle - 255.0));
    gf_MoveVoidCrystal(6, (gv_voidCrystals[6].lv_normalizedGroundHeightStartAngle + 21.0));
    gf_MoveVoidCrystal(7, (gv_voidCrystals[7].lv_normalizedGroundHeightStartAngle - 151.0));
    gf_MoveVoidCrystal(8, (gv_voidCrystals[8].lv_normalizedGroundHeightStartAngle + 295.0));
    gf_MoveVoidCrystal(9, (gv_voidCrystals[9].lv_normalizedGroundHeightStartAngle + 300.0));
    gf_MoveVoidCrystal(10, (gv_voidCrystals[10].lv_normalizedGroundHeightStartAngle + 293.0));
    Wait(30.0, c_timeGame);
    gv_crystal6HeightThreshold = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystalInitialLocations_Init () {
    gt_VoidCrystalInitialLocations = TriggerCreate("gt_VoidCrystalInitialLocations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal Paths Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystalPathsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gv_arrowPingsAllowed = true;
    if (((UnitIsAlive(gv_voidCrystals[2].lv_unit) == true) || (UnitIsAlive(gv_voidCrystals[6].lv_unit) == true))) {
        if ((UnitIsAlive(gv_voidCrystals[2].lv_unit) == true)) {
            gf_CreateVoidCrystalArrowPing(2);
            libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[2].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
        }

        if ((UnitIsAlive(gv_voidCrystals[6].lv_unit) == true)) {
            gf_CreateVoidCrystalArrowPing(6);
            libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[6].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
        }

        Wait(1.0, c_timeReal);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00047", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00048", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystalPathsQ_Init () {
    gt_VoidCrystalPathsQ = TriggerCreate("gt_VoidCrystalPathsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal Dies
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystalDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    int autoEBFEB5D7_ae;
    const int autoEBFEB5D7_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_AMON))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AmonCrystalEpilogue03"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_TripleTapCounter, true, false);
    autoEBFEB5D7_ae = gv_numberOfCrystals;
    lv_i = 1;
    for ( ; ( (autoEBFEB5D7_ai >= 0 && lv_i <= autoEBFEB5D7_ae) || (autoEBFEB5D7_ai < 0 && lv_i >= autoEBFEB5D7_ae) ) ; lv_i += autoEBFEB5D7_ai ) {
        if ((gv_voidCrystals[lv_i].lv_unit == EventUnit())) {
            lv_index = lv_i;
        }

    }
    if ((lv_index == 0)) {
        return true;
    }

    if ((gv_crystalsDestroyed < gv_crystalsNeeded)) {
        gv_crystalsDestroyed += 1;
        TriggerExecute(gt_ObjectiveDestroyCrystalsUpdate, true, false);
        TriggerExecute(gt_VoidCrystalDiesQ, true, false);
        TriggerExecute(gt_AutosavesQ, true, false);
    }

    if ((gv_crystalsDestroyed == gv_crystalsNeeded)) {
        TriggerExecute(gt_ObjectiveDestroyCrystalsComplete, true, false);
        TriggerEnable(gt_DefeatBaseDead, false);
        libNtve_gf_ChangeUnitDamage(gv_kerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }

    PingDestroy(gv_voidCrystals[lv_index].lv_ping);
    if ((libVCMI_gf_GameIsOver() == false)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
        SoundPlay(SoundLink("PEpilogue03_InfiniteCrystalisExplosion", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystalDies_Init () {
    gt_VoidCrystalDies = TriggerCreate("gt_VoidCrystalDies_Func");
    TriggerAddEventUnitDied(gt_VoidCrystalDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystalDiesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_voidCrystalsDestroyed_LOCAL;

    // Automatic Variable Declarations
    int auto85B852E0_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_voidCrystalsDestroyed_LOCAL = gv_crystalsDestroyed;
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if ((lv_voidCrystalsDestroyed_LOCAL != gv_crystalsDestroyed)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    auto85B852E0_val = lv_voidCrystalsDestroyed_LOCAL;
    if (auto85B852E0_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00009", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto85B852E0_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00030", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto85B852E0_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00031", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto85B852E0_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00032", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto85B852E0_val == 5) {
        libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00054", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto85B852E0_val == 6) {
        libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00055", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto85B852E0_val == 7) {
        libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00033", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if ((gv_crystalsDestroyed == gv_crystalsNeeded)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystalDiesQ_Init () {
    gt_VoidCrystalDiesQ = TriggerCreate("gt_VoidCrystalDiesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autosaves Q
//--------------------------------------------------------------------------------------------------
bool gt_AutosavesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_voidCrystalsDestroyed_LOCAL;

    // Automatic Variable Declarations
    int autoC86FFFC7_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_voidCrystalsDestroyed_LOCAL = gv_crystalsDestroyed;
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    autoC86FFFC7_val = lv_voidCrystalsDestroyed_LOCAL;
    if (autoC86FFFC7_val == 2) {
        if ((gv_crystalsDestroyed >= 4)) {
            return true;
        }

        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/554B2156"));
    }
    else if (autoC86FFFC7_val == 4) {
        if ((gv_crystalsDestroyed >= 6)) {
            return true;
        }

        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/68EFD972"));
    }
    else if (autoC86FFFC7_val == 6) {
        if ((gv_crystalsDestroyed >= gv_crystalsNeeded)) {
            return true;
        }

        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/DCACB68C"));
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutosavesQ_Init () {
    gt_AutosavesQ = TriggerCreate("gt_AutosavesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Chasm Init
//--------------------------------------------------------------------------------------------------
bool gt_VoidChasmInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoE9A41F91_ae;
    const int autoE9A41F91_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE9A41F91_ae = gv_numberOfVoidChasms;
    lv_index = 1;
    for ( ; ( (autoE9A41F91_ai >= 0 && lv_index <= autoE9A41F91_ae) || (autoE9A41F91_ai < 0 && lv_index >= autoE9A41F91_ae) ) ; lv_index += autoE9A41F91_ai ) {
        gv_voidChasm[lv_index].lv_spawnPoint = PointFromName(("Void Chasm " + IntToString(lv_index)));
        gv_voidChasm[lv_index].lv_spawnRegion = RegionFromName(("Void Chasm Spawn Region " + IntToString(lv_index)));
        gv_voidChasm[lv_index].lv_spawnSafetyRegion = RegionFromName(("Void Chasm Spawn Region Safety " + IntToString(lv_index)));
    }
    lv_index = 1;
    TimerStart(gv_voidChasm[lv_index].lv_initialTimer, 10.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType4Timer, 600.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType5Timer, 960.0, false, c_timeAI);
    gv_voidChasm[lv_index].lv_currentTarget = gv_pLAYER_02_RAYNOR;
    gv_voidChasm[lv_index].lv_unit = UnitFromId(1456);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifeMax, gv_voidChasmMaxLife);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifePercent, 100.0);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_voidChasm[lv_index].lv_unit, null, UnitTypeGetName(UnitGetType(gv_voidChasm[lv_index].lv_unit)), null);
    gv_voidChasm[lv_index].lv_unitTypes[1] = ge_PRESET_ShadowUnit_ShadowZergling;
    gv_voidChasm[lv_index].lv_unitCounts[1] = libLotv_gf_DifficultyValueInt2(12, 12, 16, 16);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][1] = libLotv_gf_DifficultyValueInt2(6, 6, 8, 12);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][2] = libLotv_gf_DifficultyValueInt2(8, 8, 12, 16);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][3] = libLotv_gf_DifficultyValueInt2(12, 12, 16, 16);
    gv_voidChasm[lv_index].lv_unitTypes[2] = ge_PRESET_ShadowUnit_ShadowMarine;
    gv_voidChasm[lv_index].lv_unitCounts[2] = libLotv_gf_DifficultyValueInt2(6, 6, 8, 12);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][1] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][2] = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][3] = libLotv_gf_DifficultyValueInt2(5, 5, 7, 10);
    gv_voidChasm[lv_index].lv_unitTypes[3] = ge_PRESET_ShadowUnit_ShadowStalker;
    gv_voidChasm[lv_index].lv_unitCounts[3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][1] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 8);
    gv_voidChasm[lv_index].lv_unitTypes[4] = ge_PRESET_ShadowUnit_ShadowHydralisk;
    gv_voidChasm[lv_index].lv_unitCounts[4] = libLotv_gf_DifficultyValueInt2(5, 5, 6, 9);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][3] = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    gv_voidChasm[lv_index].lv_unitTypes[5] = ge_PRESET_ShadowUnit_ShadowVoidRay;
    gv_voidChasm[lv_index].lv_unitCounts[5] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][2] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][3] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 5);
    lv_index = 2;
    TimerStart(gv_voidChasm[lv_index].lv_initialTimer, 10.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType4Timer, 600.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType5Timer, 960.0, false, c_timeAI);
    gv_voidChasm[lv_index].lv_currentTarget = gv_pLAYER_01_USER;
    gv_voidChasm[lv_index].lv_unit = UnitFromId(1454);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifeMax, gv_voidChasmMaxLife);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifePercent, 100.0);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_voidChasm[lv_index].lv_unit, null, UnitTypeGetName(UnitGetType(gv_voidChasm[lv_index].lv_unit)), null);
    gv_voidChasm[lv_index].lv_unitTypes[1] = ge_PRESET_ShadowUnit_ShadowZergling;
    gv_voidChasm[lv_index].lv_unitCounts[1] = libLotv_gf_DifficultyValueInt2(12, 12, 16, 16);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][1] = libLotv_gf_DifficultyValueInt2(6, 6, 8, 12);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][2] = libLotv_gf_DifficultyValueInt2(8, 8, 12, 16);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][3] = libLotv_gf_DifficultyValueInt2(12, 12, 16, 16);
    gv_voidChasm[lv_index].lv_unitTypes[2] = ge_PRESET_ShadowUnit_ShadowZealot;
    gv_voidChasm[lv_index].lv_unitCounts[2] = libLotv_gf_DifficultyValueInt2(5, 5, 6, 9);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][1] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 3);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][2] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][3] = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    gv_voidChasm[lv_index].lv_unitTypes[3] = ge_PRESET_ShadowUnit_ShadowGhost;
    gv_voidChasm[lv_index].lv_unitCounts[3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][1] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 8);
    gv_voidChasm[lv_index].lv_unitTypes[4] = ge_PRESET_ShadowUnit_ShadowStalker;
    gv_voidChasm[lv_index].lv_unitCounts[4] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][3] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 8);
    gv_voidChasm[lv_index].lv_unitTypes[5] = ge_PRESET_ShadowUnit_ShadowBanshee;
    gv_voidChasm[lv_index].lv_unitCounts[5] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 6);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][2] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][3] = libLotv_gf_DifficultyValueInt2(2, 2, 4, 6);
    lv_index = 3;
    TimerStart(gv_voidChasm[lv_index].lv_initialTimer, 10.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType4Timer, 600.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType5Timer, 960.0, false, c_timeAI);
    gv_voidChasm[lv_index].lv_currentTarget = gv_pLAYER_03_ARTANIS;
    gv_voidChasm[lv_index].lv_unit = UnitFromId(1457);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifeMax, gv_voidChasmMaxLife);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifePercent, 100.0);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_voidChasm[lv_index].lv_unit, null, UnitTypeGetName(UnitGetType(gv_voidChasm[lv_index].lv_unit)), null);
    gv_voidChasm[lv_index].lv_unitTypes[1] = ge_PRESET_ShadowUnit_ShadowMarine;
    gv_voidChasm[lv_index].lv_unitCounts[1] = libLotv_gf_DifficultyValueInt2(8, 8, 10, 10);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][1] = libLotv_gf_DifficultyValueInt2(3, 3, 6, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][2] = libLotv_gf_DifficultyValueInt2(6, 6, 8, 10);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][3] = libLotv_gf_DifficultyValueInt2(8, 8, 10, 10);
    gv_voidChasm[lv_index].lv_unitTypes[2] = ge_PRESET_ShadowUnit_ShadowZealot;
    gv_voidChasm[lv_index].lv_unitCounts[2] = libLotv_gf_DifficultyValueInt2(5, 5, 6, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][1] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][2] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][3] = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    gv_voidChasm[lv_index].lv_unitTypes[3] = ge_PRESET_ShadowUnit_ShadowHydralisk;
    gv_voidChasm[lv_index].lv_unitCounts[3] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 9);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][1] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][3] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 8);
    gv_voidChasm[lv_index].lv_unitTypes[4] = ge_PRESET_ShadowUnit_ShadowGhost;
    gv_voidChasm[lv_index].lv_unitCounts[4] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 6);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][3] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 6);
    gv_voidChasm[lv_index].lv_unitTypes[5] = ge_PRESET_ShadowUnit_ShadowMutalisk;
    gv_voidChasm[lv_index].lv_unitCounts[5] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][2] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][3] = libLotv_gf_DifficultyValueInt2(3, 3, 5, 8);
    lv_index = 4;
    TimerStart(gv_voidChasm[lv_index].lv_initialTimer, 540.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType4Timer, 960.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType5Timer, 1320.0, false, c_timeAI);
    gv_voidChasm[lv_index].lv_currentTarget = gv_pLAYER_02_RAYNOR;
    gv_voidChasm[lv_index].lv_unit = UnitFromId(1459);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifeMax, gv_voidChasmMaxLife);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifePercent, 100.0);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_voidChasm[lv_index].lv_unit, null, UnitTypeGetName(UnitGetType(gv_voidChasm[lv_index].lv_unit)), null);
    gv_voidChasm[lv_index].lv_unitTypes[1] = ge_PRESET_ShadowUnit_ShadowMarine;
    gv_voidChasm[lv_index].lv_unitCounts[1] = libLotv_gf_DifficultyValueInt2(8, 8, 10, 10);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][1] = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][2] = libLotv_gf_DifficultyValueInt2(6, 6, 8, 10);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][3] = libLotv_gf_DifficultyValueInt2(8, 8, 10, 10);
    gv_voidChasm[lv_index].lv_unitTypes[2] = ge_PRESET_ShadowUnit_ShadowHydralisk;
    gv_voidChasm[lv_index].lv_unitCounts[2] = libLotv_gf_DifficultyValueInt2(5, 5, 6, 9);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][1] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][2] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][3] = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    gv_voidChasm[lv_index].lv_unitTypes[3] = ge_PRESET_ShadowUnit_ShadowStalker;
    gv_voidChasm[lv_index].lv_unitCounts[3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][1] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 6);
    gv_voidChasm[lv_index].lv_unitTypes[4] = ge_PRESET_ShadowUnit_ShadowMutalisk;
    gv_voidChasm[lv_index].lv_unitCounts[4] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][3] = libLotv_gf_DifficultyValueInt2(3, 3, 5, 8);
    gv_voidChasm[lv_index].lv_unitTypes[5] = ge_PRESET_ShadowUnit_ShadowColossus;
    gv_voidChasm[lv_index].lv_unitCounts[5] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][2] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][3] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 4);
    lv_index = 5;
    TimerStart(gv_voidChasm[lv_index].lv_initialTimer, 600.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType4Timer, 1020.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType5Timer, 1380.0, false, c_timeAI);
    gv_voidChasm[lv_index].lv_currentTarget = gv_pLAYER_03_ARTANIS;
    gv_voidChasm[lv_index].lv_unit = UnitFromId(1458);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifeMax, gv_voidChasmMaxLife);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifePercent, 100.0);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_voidChasm[lv_index].lv_unit, null, UnitTypeGetName(UnitGetType(gv_voidChasm[lv_index].lv_unit)), null);
    gv_voidChasm[lv_index].lv_unitTypes[1] = ge_PRESET_ShadowUnit_ShadowZergling;
    gv_voidChasm[lv_index].lv_unitCounts[1] = libLotv_gf_DifficultyValueInt2(12, 12, 16, 16);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][1] = libLotv_gf_DifficultyValueInt2(6, 6, 8, 12);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][2] = libLotv_gf_DifficultyValueInt2(8, 8, 12, 16);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][3] = libLotv_gf_DifficultyValueInt2(12, 12, 16, 16);
    gv_voidChasm[lv_index].lv_unitTypes[2] = ge_PRESET_ShadowUnit_ShadowGhost;
    gv_voidChasm[lv_index].lv_unitCounts[2] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 6);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][1] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 6);
    gv_voidChasm[lv_index].lv_unitTypes[3] = ge_PRESET_ShadowUnit_ShadowStalker;
    gv_voidChasm[lv_index].lv_unitCounts[3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][1] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 8);
    gv_voidChasm[lv_index].lv_unitTypes[4] = ge_PRESET_ShadowUnit_ShadowVoidRay;
    gv_voidChasm[lv_index].lv_unitCounts[4] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][2] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][3] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 5);
    gv_voidChasm[lv_index].lv_unitTypes[5] = ge_PRESET_ShadowUnit_ShadowUltralisk;
    gv_voidChasm[lv_index].lv_unitCounts[5] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][2] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][3] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    lv_index = 6;
    TimerStart(gv_voidChasm[lv_index].lv_initialTimer, 660.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType4Timer, 1080.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType5Timer, 1440.0, false, c_timeAI);
    gv_voidChasm[lv_index].lv_currentTarget = gv_pLAYER_01_USER;
    gv_voidChasm[lv_index].lv_unit = UnitFromId(1455);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifeMax, gv_voidChasmMaxLife);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifePercent, 100.0);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_voidChasm[lv_index].lv_unit, null, UnitTypeGetName(UnitGetType(gv_voidChasm[lv_index].lv_unit)), null);
    gv_voidChasm[lv_index].lv_unitTypes[1] = ge_PRESET_ShadowUnit_ShadowZealot;
    gv_voidChasm[lv_index].lv_unitCounts[1] = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][1] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][2] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][3] = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    gv_voidChasm[lv_index].lv_unitTypes[2] = ge_PRESET_ShadowUnit_ShadowGhost;
    gv_voidChasm[lv_index].lv_unitCounts[2] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][1] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 8);
    gv_voidChasm[lv_index].lv_unitTypes[3] = ge_PRESET_ShadowUnit_ShadowHydralisk;
    gv_voidChasm[lv_index].lv_unitCounts[3] = libLotv_gf_DifficultyValueInt2(5, 5, 6, 9);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][1] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][2] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][3] = libLotv_gf_DifficultyValueInt2(4, 4, 6, 8);
    gv_voidChasm[lv_index].lv_unitTypes[4] = ge_PRESET_ShadowUnit_ShadowUltralisk;
    gv_voidChasm[lv_index].lv_unitCounts[4] = libLotv_gf_DifficultyValueInt2(2, 2, 2, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][2] = libLotv_gf_DifficultyValueInt2(1, 1, 1, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][3] = libLotv_gf_DifficultyValueInt2(2, 2, 2, 3);
    gv_voidChasm[lv_index].lv_unitTypes[5] = ge_PRESET_ShadowUnit_ShadowBattlecruiser;
    gv_voidChasm[lv_index].lv_unitCounts[5] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][2] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][3] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    lv_index = 7;
    TimerStart(gv_voidChasm[lv_index].lv_initialTimer, 720.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType4Timer, 1140.0, false, c_timeAI);
    TimerStart(gv_voidChasm[lv_index].lv_unitType5Timer, 1500.0, false, c_timeAI);
    gv_voidChasm[lv_index].lv_currentTarget = gv_pLAYER_01_USER;
    gv_voidChasm[lv_index].lv_unit = UnitFromId(1460);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifeMax, gv_voidChasmMaxLife);
    UnitSetPropertyFixed(gv_voidChasm[lv_index].lv_unit, c_unitPropLifePercent, 100.0);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_voidChasm[lv_index].lv_unit, null, UnitTypeGetName(UnitGetType(gv_voidChasm[lv_index].lv_unit)), null);
    gv_voidChasm[lv_index].lv_unitTypes[1] = ge_PRESET_ShadowUnit_ShadowMutalisk;
    gv_voidChasm[lv_index].lv_unitCounts[1] = libLotv_gf_DifficultyValueInt2(6, 6, 7, 8);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][1] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][2] = libLotv_gf_DifficultyValueInt2(4, 4, 5, 6);
    gv_voidChasm[lv_index].lv_attackWaveCounts[1][3] = libLotv_gf_DifficultyValueInt2(6, 6, 7, 8);
    gv_voidChasm[lv_index].lv_unitTypes[2] = ge_PRESET_ShadowUnit_ShadowBanshee;
    gv_voidChasm[lv_index].lv_unitCounts[2] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][1] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[2][3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_unitTypes[3] = ge_PRESET_ShadowUnit_ShadowVoidRay;
    gv_voidChasm[lv_index].lv_unitCounts[3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][1] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][2] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[3][3] = libLotv_gf_DifficultyValueInt2(3, 3, 4, 5);
    gv_voidChasm[lv_index].lv_unitTypes[4] = ge_PRESET_ShadowUnit_ShadowMutalisk;
    gv_voidChasm[lv_index].lv_unitCounts[4] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][2] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    gv_voidChasm[lv_index].lv_attackWaveCounts[4][3] = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    gv_voidChasm[lv_index].lv_unitTypes[5] = ge_PRESET_ShadowUnit_ShadowBattlecruiser;
    gv_voidChasm[lv_index].lv_unitCounts[5] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][1] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][2] = libLotv_gf_DifficultyValueInt2(0, 0, 0, 0);
    gv_voidChasm[lv_index].lv_attackWaveCounts[5][3] = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    TriggerExecute(gt_VoidChasmController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidChasmInit_Init () {
    gt_VoidChasmInit = TriggerCreate("gt_VoidChasmInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Chasm Controller
//--------------------------------------------------------------------------------------------------
bool gt_VoidChasmController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    fixed lv_currentAngle;
    point lv_overseerTarget;

    // Automatic Variable Declarations
    int auto5DF2773F_ae;
    const int auto5DF2773F_ai = 1;
    unitgroup autoE0C2EB0B_g;
    int autoE0C2EB0B_u;
    unit autoE0C2EB0B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        auto5DF2773F_ae = gv_numberOfVoidChasms;
        lv_index = 1;
        for ( ; ( (auto5DF2773F_ai >= 0 && lv_index <= auto5DF2773F_ae) || (auto5DF2773F_ai < 0 && lv_index >= auto5DF2773F_ae) ) ; lv_index += auto5DF2773F_ai ) {
            if ((UnitGetType(gv_voidChasm[lv_index].lv_unit) == "VoidChasmDormant") && (TimerGetRemaining(gv_voidChasm[lv_index].lv_initialTimer) < 1) && (TimerGetRemaining(gv_voidChasm[lv_index].lv_respawnTimer) < 1) && (gv_voidChasm[lv_index].lv_respawnSafety == 0)) {
                UnitIssueOrder(gv_voidChasm[lv_index].lv_unit, Order(AbilityCommand("VoidChasmRebirth", 0)), c_orderQueueReplace);
                gf_TrackPingOnVoidChasm(gv_voidChasm[lv_index].lv_unit);
                TimerStart(gv_voidChasm[lv_index].lv_spawnUnitTimer, 16.0, false, c_timeAI);
                TimerStart(gv_voidChasm[lv_index].lv_attackWaveTimer, 180.0, false, c_timeAI);
                gv_voidChasm[lv_index].lv_respawnSafety = 20;
                libNtve_gf_ShareVisionofUnit(gv_voidChasm[lv_index].lv_unit, true, gv_pLAYER_01_USER);
                UnitBehaviorAdd(gv_voidChasm[lv_index].lv_unit, "InfiniteCrystalisRepulsorBehavior", gv_voidChasm[lv_index].lv_unit, 1);
            }

            if ((UnitGetType(gv_voidChasm[lv_index].lv_unit) == "VoidChasmDormant") && (gv_voidChasm[lv_index].lv_respawnSafety > 0)) {
                gv_voidChasm[lv_index].lv_respawnSafety -= 1;
            }

            if ((UnitGetType(gv_voidChasm[lv_index].lv_unit) == "VoidChasm") && (TimerGetRemaining(gv_voidChasm[lv_index].lv_spawnUnitTimer) <= 1) && (UnitCount(null, gv_pLAYER_04_AMON, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1000)) {
                TimerStart(gv_voidChasm[lv_index].lv_spawnUnitTimer, 16.0, false, c_timeAI);
                if ((gf_VoidChasmSpawnedCount(lv_index, gv_voidChasm[lv_index].lv_unitTypes[1]) < gv_voidChasm[lv_index].lv_unitCounts[1])) {
                    gf_OrderVoidChasmtoSpawnUnit(lv_index, gv_voidChasm[lv_index].lv_unitTypes[1]);
                    gf_OrderVoidChasmtoSpawnUnit(lv_index, gv_voidChasm[lv_index].lv_unitTypes[1]);
                }

                if ((gf_VoidChasmSpawnedCount(lv_index, gv_voidChasm[lv_index].lv_unitTypes[2]) < gv_voidChasm[lv_index].lv_unitCounts[2])) {
                    gf_OrderVoidChasmtoSpawnUnit(lv_index, gv_voidChasm[lv_index].lv_unitTypes[2]);
                }

                if ((gf_VoidChasmSpawnedCount(lv_index, gv_voidChasm[lv_index].lv_unitTypes[3]) < gv_voidChasm[lv_index].lv_unitCounts[3])) {
                    gf_OrderVoidChasmtoSpawnUnit(lv_index, gv_voidChasm[lv_index].lv_unitTypes[3]);
                }

                if ((gf_VoidChasmSpawnedCount(lv_index, gv_voidChasm[lv_index].lv_unitTypes[4]) < gv_voidChasm[lv_index].lv_unitCounts[4]) && (TimerGetRemaining(gv_voidChasm[lv_index].lv_unitType4Timer) < 1)) {
                    gf_OrderVoidChasmtoSpawnUnit(lv_index, gv_voidChasm[lv_index].lv_unitTypes[4]);
                }

                if ((gf_VoidChasmSpawnedCount(lv_index, gv_voidChasm[lv_index].lv_unitTypes[5]) < gv_voidChasm[lv_index].lv_unitCounts[5]) && (TimerGetRemaining(gv_voidChasm[lv_index].lv_unitType5Timer) < 1)) {
                    gf_OrderVoidChasmtoSpawnUnit(lv_index, gv_voidChasm[lv_index].lv_unitTypes[5]);
                }

                if ((gf_VoidChasmSpawnedCount(lv_index, ge_PRESET_ShadowUnit_ShadowOverseer) < 1)) {
                    gf_OrderVoidChasmtoSpawnUnit(lv_index, ge_PRESET_ShadowUnit_ShadowOverseer);
                }

            }

            if ((TimerGetRemaining(gv_voidChasm[lv_index].lv_attackWaveTimer) < 1) && (UnitGroupCount(gv_voidChasm[lv_index].lv_spawnedUnits, c_unitCountAlive) > 0)) {
                TimerStart(gv_voidChasm[lv_index].lv_attackWaveTimer, libLotv_gf_DifficultyValueFixed2(200.0, 200.0, 160.0, 120.0), false, c_timeAI);
                gf_ConstructVoidChasmAttackWave(lv_index);
            }

            autoE0C2EB0B_g = gv_voidChasm[lv_index].lv_spawnedUnits;
            autoE0C2EB0B_u = UnitGroupCount(autoE0C2EB0B_g, c_unitCountAll);
            for (;; autoE0C2EB0B_u -= 1) {
                autoE0C2EB0B_var = UnitGroupUnitFromEnd(autoE0C2EB0B_g, autoE0C2EB0B_u);
                if (autoE0C2EB0B_var == null) { break; }
                if ((UnitGetType(autoE0C2EB0B_var) == "Overseer")) {
                    lv_currentAngle = AngleBetweenPoints(gv_voidChasm[lv_index].lv_spawnPoint, UnitGetPosition(autoE0C2EB0B_var));
                    lv_overseerTarget = PointWithOffsetPolar(gv_voidChasm[lv_index].lv_spawnPoint, 9.0, (lv_currentAngle + 15.0));
                    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_AMON, RegionCircle(lv_overseerTarget, 4.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 0)) {
                        UnitIssueOrder(autoE0C2EB0B_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(gv_voidChasm[lv_index].lv_spawnPoint, 5.0, (lv_currentAngle + 15.0))), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(autoE0C2EB0B_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_overseerTarget), c_orderQueueReplace);
                    }
                }
                else {
                    if ((RandomInt(1, libLotv_gf_DifficultyValueInt2(8, 8, 9, 10)) == 1) && (AIUnitGetWave(autoE0C2EB0B_var) == null)) {
                        libNtve_gf_AICast(autoE0C2EB0B_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_voidChasm[lv_index].lv_spawnRegion)));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidChasmController_Init () {
    gt_VoidChasmController = TriggerCreate("gt_VoidChasmController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Chasm Unit Spawned
//--------------------------------------------------------------------------------------------------
bool gt_VoidChasmUnitSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    region auto4BD2174D_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_AMON))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 0) < 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Marine") || (UnitGetType(EventUnit()) == "Zergling") || (UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "Ghost") || (UnitGetType(EventUnit()) == "Hydralisk") || (UnitGetType(EventUnit()) == "Stalker") || (UnitGetType(EventUnit()) == "Banshee") || (UnitGetType(EventUnit()) == "Mutalisk") || (UnitGetType(EventUnit()) == "VoidRay") || (UnitGetType(EventUnit()) == "Battlecruiser") || (UnitGetType(EventUnit()) == "Ultralisk") || (UnitGetType(EventUnit()) == "Colossus") || (UnitGetType(EventUnit()) == "Overseer")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4BD2174D_val = EventUnitRegion();
    if (auto4BD2174D_val == RegionFromId(7)) {
        lv_index = 1;
    }
    else if (auto4BD2174D_val == RegionFromId(9)) {
        lv_index = 2;
    }
    else if (auto4BD2174D_val == RegionFromId(10)) {
        lv_index = 3;
    }
    else if (auto4BD2174D_val == RegionFromId(14)) {
        lv_index = 4;
    }
    else if (auto4BD2174D_val == RegionFromId(15)) {
        lv_index = 5;
    }
    else if (auto4BD2174D_val == RegionFromId(17)) {
        lv_index = 6;
    }
    else if (auto4BD2174D_val == RegionFromId(19)) {
        lv_index = 7;
    }
    else {
        return true;
    }
    UnitSetCustomValue(EventUnit(), 0, 2.0);
    UnitGroupAdd(gv_voidChasm[lv_index].lv_spawnedUnits, EventUnit());
    libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_voidChasm[lv_index].lv_spawnRegion)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidChasmUnitSpawned_Init () {
    gt_VoidChasmUnitSpawned = TriggerCreate("gt_VoidChasmUnitSpawned_Func");
    TriggerAddEventUnitRegion(gt_VoidChasmUnitSpawned, null, RegionFromId(7), true);
    TriggerAddEventUnitRegion(gt_VoidChasmUnitSpawned, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_VoidChasmUnitSpawned, null, RegionFromId(10), true);
    TriggerAddEventUnitRegion(gt_VoidChasmUnitSpawned, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_VoidChasmUnitSpawned, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_VoidChasmUnitSpawned, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_VoidChasmUnitSpawned, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Chasm Dies
//--------------------------------------------------------------------------------------------------
bool gt_VoidChasmDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    int autoE9F74A91_ae;
    const int autoE9F74A91_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_AMON))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE9F74A91_ae = gv_numberOfVoidChasms;
    lv_i = 1;
    for ( ; ( (autoE9F74A91_ai >= 0 && lv_i <= autoE9F74A91_ae) || (autoE9F74A91_ai < 0 && lv_i >= autoE9F74A91_ae) ) ; lv_i += autoE9F74A91_ai ) {
        if ((EventUnit() == gv_voidChasm[lv_i].lv_unit)) {
            lv_index = lv_i;
        }

    }
    if ((lv_index == 0)) {
        return true;
    }

    TimerStart(gv_voidChasm[lv_index].lv_respawnTimer, gv_voidChasmRespawnDelay, false, c_timeAI);
    UnitBehaviorRemove(gv_voidChasm[lv_index].lv_unit, "InfiniteCrystalisRepulsorBehavior", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidChasmDies_Init () {
    gt_VoidChasmDies = TriggerCreate("gt_VoidChasmDies_Func");
    TriggerAddEventUnitAbility(gt_VoidChasmDies, null, AbilityCommand("DormantVoidChasm", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torment Construct Init
//--------------------------------------------------------------------------------------------------
bool gt_TormentConstructInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto293F4C28_ae;
    const int auto293F4C28_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto293F4C28_ae = gv_numberOfTormentConstructs;
    lv_index = 1;
    for ( ; ( (auto293F4C28_ai >= 0 && lv_index <= auto293F4C28_ae) || (auto293F4C28_ai < 0 && lv_index >= auto293F4C28_ae) ) ; lv_index += auto293F4C28_ai ) {
        gv_tormentConstructs[lv_index].lv_spawnPoint = PointFromName(("Torment Construct " + IntToString(lv_index)));
    }
    TimerStart(gv_tormentConstructs[1].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[1].lv_voidCrystal75CheckIndex = 2;
    TimerStart(gv_tormentConstructs[2].lv_initialTimer, (60.0 + libLotv_gf_DifficultyValueFixed2(600.0, 600.0, 540.0, 480.0)), false, c_timeAI);
    gv_tormentConstructs[2].lv_voidCrystal75CheckIndex = 2;
    TimerStart(gv_tormentConstructs[3].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[3].lv_voidChasm66CheckIndex = 1;
    TimerStart(gv_tormentConstructs[4].lv_initialTimer, 490.0, false, c_timeAI);
    TimerStart(gv_tormentConstructs[5].lv_initialTimer, 60.0, false, c_timeAI);
    TimerStart(gv_tormentConstructs[6].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[6].lv_voidChasm66CheckIndex = 2;
    TimerStart(gv_tormentConstructs[7].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[7].lv_voidChasm66CheckIndex = 5;
    TimerStart(gv_tormentConstructs[8].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[8].lv_voidCrystal75CheckIndex = 5;
    TimerStart(gv_tormentConstructs[9].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[9].lv_voidCrystal75CheckIndex = 6;
    TimerStart(gv_tormentConstructs[10].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[10].lv_voidCrystal75CheckIndex = 4;
    TimerStart(gv_tormentConstructs[11].lv_initialTimer, 560.0, false, c_timeAI);
    TimerStart(gv_tormentConstructs[12].lv_initialTimer, (60.0 + libLotv_gf_DifficultyValueFixed2(9999.0, 9999.0, 2340.0, 2340.0)), false, c_timeAI);
    gv_tormentConstructs[12].lv_voidCrystal75CheckIndex = 7;
    TimerStart(gv_tormentConstructs[13].lv_initialTimer, 660.0, false, c_timeAI);
    TimerStart(gv_tormentConstructs[14].lv_initialTimer, 660.0, false, c_timeAI);
    TimerStart(gv_tormentConstructs[15].lv_initialTimer, 500.0, false, c_timeAI);
    gv_tormentConstructs[15].lv_voidChasm66CheckIndex = 3;
    TimerStart(gv_tormentConstructs[16].lv_initialTimer, (500.0 + libLotv_gf_DifficultyValueFixed2(9999.0, 9999.0, 1600.0, 1600.0)), false, c_timeAI);
    TimerStart(gv_tormentConstructs[17].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[17].lv_voidChasm66CheckIndex = 3;
    TimerStart(gv_tormentConstructs[18].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[18].lv_voidCrystal75CheckIndex = 10;
    TimerStart(gv_tormentConstructs[19].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[19].lv_voidCrystal75CheckIndex = 10;
    TimerStart(gv_tormentConstructs[20].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[20].lv_voidCrystal75CheckIndex = 10;
    TimerStart(gv_tormentConstructs[21].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[21].lv_voidCrystal75CheckIndex = 10;
    TimerStart(gv_tormentConstructs[22].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[22].lv_voidChasm66CheckIndex = 5;
    TimerStart(gv_tormentConstructs[23].lv_initialTimer, 60.0, false, c_timeAI);
    gv_tormentConstructs[23].lv_voidChasm66CheckIndex = 7;
    TimerStart(gv_tormentConstructs[24].lv_initialTimer, 500.0, false, c_timeAI);
    TimerStart(gv_tormentConstructs[25].lv_initialTimer, (500.0 + libLotv_gf_DifficultyValueFixed2(9999.0, 9999.0, 1600.0, 1600.0)), false, c_timeAI);
    TimerStart(gv_tormentConstructs[26].lv_initialTimer, 500.0, false, c_timeAI);
    TriggerExecute(gt_TormentConstructController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TormentConstructInit_Init () {
    gt_TormentConstructInit = TriggerCreate("gt_TormentConstructInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torment Construct Controller
//--------------------------------------------------------------------------------------------------
bool gt_TormentConstructController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_createUnit;

    // Automatic Variable Declarations
    int auto16863E8E_ae;
    const int auto16863E8E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        auto16863E8E_ae = gv_numberOfTormentConstructs;
        lv_index = 1;
        for ( ; ( (auto16863E8E_ai >= 0 && lv_index <= auto16863E8E_ae) || (auto16863E8E_ai < 0 && lv_index >= auto16863E8E_ae) ) ; lv_index += auto16863E8E_ai ) {
            lv_createUnit = false;
            if ((UnitIsAlive(gv_tormentConstructs[lv_index].lv_unit) == false) && (TimerGetRemaining(gv_tormentConstructs[lv_index].lv_initialTimer) < 1) && (TimerGetRemaining(gv_tormentConstructs[lv_index].lv_respawnTimer) < 1) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_AMON, c_unitAllianceEnemy, RegionCircle(gv_tormentConstructs[lv_index].lv_spawnPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (gv_tormentConstructs[lv_index].lv_respawnSafety == 0)) {
                if ((gv_tormentConstructs[lv_index].lv_voidCrystal75CheckIndex > 0)) {
                    if ((UnitIsAlive(gv_voidCrystals[gv_tormentConstructs[lv_index].lv_voidCrystal75CheckIndex].lv_unit) == true) && (gv_voidCrystals[gv_tormentConstructs[lv_index].lv_voidCrystal75CheckIndex].lv_vulnerable == true) && (UnitGetPropertyFixed(gv_voidCrystals[gv_tormentConstructs[lv_index].lv_voidCrystal75CheckIndex].lv_unit, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                        lv_createUnit = true;
                    }

                }
                else {
                    if ((gv_tormentConstructs[lv_index].lv_voidChasm66CheckIndex > 0)) {
                        if ((UnitIsAlive(gv_voidChasm[gv_tormentConstructs[lv_index].lv_voidChasm66CheckIndex].lv_unit) == false)) {
                            lv_createUnit = true;
                        }
                        else {
                            if ((UnitIsAlive(gv_voidChasm[gv_tormentConstructs[lv_index].lv_voidChasm66CheckIndex].lv_unit) == true) && (UnitGetPropertyFixed(gv_voidChasm[gv_tormentConstructs[lv_index].lv_voidChasm66CheckIndex].lv_unit, c_unitPropLifePercent, c_unitPropCurrent) <= 66.0)) {
                                lv_createUnit = true;
                            }

                        }
                    }
                    else {
                        lv_createUnit = true;
                    }
                }
            }

            if ((lv_createUnit == true)) {
                UnitIssueOrder(gv_amon, Order(AbilityCommand("AmonSpawnTentacleA", 0)), c_orderQueueReplace);
                Wait(1.0, c_timeGame);
                libNtve_gf_CreateUnitsAtPoint2(1, "AmonShardA", c_unitCreateIgnorePlacement, gv_pLAYER_04_AMON, gv_tormentConstructs[lv_index].lv_spawnPoint);
                gv_tormentConstructs[lv_index].lv_unit = UnitLastCreated();
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_constructMaxLife);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, UnitTypeGetName(UnitGetType(UnitLastCreated())), null);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
                UnitBehaviorAdd(UnitLastCreated(), "InfiniteCrystalisRepulsorBehavior", UnitLastCreated(), 1);
                gf_ShakeCameraWhenConstructLands(UnitLastCreated());
                gv_tormentConstructs[lv_index].lv_respawnSafety = 10;
                gv_firstConstructPingLocation = gv_tormentConstructs[lv_index].lv_spawnPoint;
                TriggerExecute(gt_FirstConstructQ, true, false);
            }

            if ((UnitIsAlive(gv_tormentConstructs[lv_index].lv_unit) == false) && (gv_tormentConstructs[lv_index].lv_respawnSafety > 0)) {
                gv_tormentConstructs[lv_index].lv_respawnSafety -= 1;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TormentConstructController_Init () {
    gt_TormentConstructController = TriggerCreate("gt_TormentConstructController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torment Construct Dies
//--------------------------------------------------------------------------------------------------
bool gt_TormentConstructDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    int auto87758B69_ae;
    const int auto87758B69_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_AMON))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AmonShardA"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto87758B69_ae = gv_numberOfTormentConstructs;
    lv_i = 1;
    for ( ; ( (auto87758B69_ai >= 0 && lv_i <= auto87758B69_ae) || (auto87758B69_ai < 0 && lv_i >= auto87758B69_ae) ) ; lv_i += auto87758B69_ai ) {
        if ((EventUnit() == gv_tormentConstructs[lv_i].lv_unit)) {
            lv_index = lv_i;
        }

    }
    if ((lv_index == 0)) {
        return true;
    }

    TimerStart(gv_tormentConstructs[lv_index].lv_respawnTimer, gv_constructRespawnDelay, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TormentConstructDies_Init () {
    gt_TormentConstructDies = TriggerCreate("gt_TormentConstructDies_Func");
    TriggerAddEventUnitDied(gt_TormentConstructDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rampage Construct Init
//--------------------------------------------------------------------------------------------------
bool gt_RampageConstructInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto75E10147_ae;
    const int auto75E10147_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto75E10147_ae = gv_numberOfRampageConstructs;
    lv_index = 1;
    for ( ; ( (auto75E10147_ai >= 0 && lv_index <= auto75E10147_ae) || (auto75E10147_ai < 0 && lv_index >= auto75E10147_ae) ) ; lv_index += auto75E10147_ai ) {
        gv_rampageConstructs[lv_index].lv_spawnPoint = PointFromName(("Rampage Construct " + IntToString(lv_index)));
    }
    TimerStart(gv_rampageConstructs[1].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[1].lv_voidCrystal75CheckIndex = 1;
    TimerStart(gv_rampageConstructs[2].lv_initialTimer, 180.0, false, c_timeAI);
    gv_rampageConstructs[2].lv_voidChasm66CheckIndex = 2;
    TimerStart(gv_rampageConstructs[3].lv_initialTimer, (60.0 + libLotv_gf_DifficultyValueFixed2(600.0, 600.0, 540.0, 480.0)), false, c_timeAI);
    gv_rampageConstructs[3].lv_voidChasm66CheckIndex = 1;
    TimerStart(gv_rampageConstructs[4].lv_initialTimer, (60.0 + libLotv_gf_DifficultyValueFixed2(1140.0, 1140.0, 840.0, 540.0)), false, c_timeAI);
    gv_rampageConstructs[4].lv_voidCrystal75CheckIndex = 7;
    TimerStart(gv_rampageConstructs[5].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[5].lv_voidChasm66CheckIndex = 4;
    TimerStart(gv_rampageConstructs[6].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[6].lv_voidChasm66CheckIndex = 3;
    TimerStart(gv_rampageConstructs[7].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[7].lv_voidChasm66CheckIndex = 6;
    TimerStart(gv_rampageConstructs[8].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[8].lv_voidCrystal75CheckIndex = 6;
    TimerStart(gv_rampageConstructs[9].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[9].lv_voidChasm66CheckIndex = 6;
    TimerStart(gv_rampageConstructs[10].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[10].lv_voidCrystal75CheckIndex = 5;
    TimerStart(gv_rampageConstructs[11].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[11].lv_voidCrystal75CheckIndex = 3;
    TimerStart(gv_rampageConstructs[12].lv_initialTimer, 560.0, false, c_timeAI);
    TimerStart(gv_rampageConstructs[13].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[13].lv_voidCrystal75CheckIndex = 3;
    TimerStart(gv_rampageConstructs[14].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[14].lv_voidChasm66CheckIndex = 4;
    TimerStart(gv_rampageConstructs[15].lv_initialTimer, 60.0, false, c_timeAI);
    gv_rampageConstructs[15].lv_voidCrystal75CheckIndex = 8;
    TimerStart(gv_rampageConstructs[16].lv_initialTimer, (60.0 + libLotv_gf_DifficultyValueFixed2(9999.0, 9999.0, 2340.0, 2340.0)), false, c_timeAI);
    gv_rampageConstructs[16].lv_voidChasm66CheckIndex = 7;
    TimerStart(gv_rampageConstructs[17].lv_initialTimer, (60.0 + libLotv_gf_DifficultyValueFixed2(1140.0, 1140.0, 840.0, 540.0)), false, c_timeAI);
    gv_rampageConstructs[17].lv_voidChasm66CheckIndex = 7;
    TimerStart(gv_rampageConstructs[18].lv_initialTimer, (60.0 + libLotv_gf_DifficultyValueFixed2(1140.0, 1140.0, 840.0, 540.0)), false, c_timeAI);
    gv_rampageConstructs[18].lv_voidCrystal75CheckIndex = 9;
    TriggerExecute(gt_RampageConstructController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RampageConstructInit_Init () {
    gt_RampageConstructInit = TriggerCreate("gt_RampageConstructInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rampage Construct Controller
//--------------------------------------------------------------------------------------------------
bool gt_RampageConstructController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_createUnit;

    // Automatic Variable Declarations
    int auto08397BF5_ae;
    const int auto08397BF5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        auto08397BF5_ae = gv_numberOfRampageConstructs;
        lv_index = 1;
        for ( ; ( (auto08397BF5_ai >= 0 && lv_index <= auto08397BF5_ae) || (auto08397BF5_ai < 0 && lv_index >= auto08397BF5_ae) ) ; lv_index += auto08397BF5_ai ) {
            lv_createUnit = false;
            if ((UnitIsAlive(gv_rampageConstructs[lv_index].lv_unit) == false) && (TimerGetRemaining(gv_rampageConstructs[lv_index].lv_initialTimer) < 1) && (TimerGetRemaining(gv_rampageConstructs[lv_index].lv_respawnTimer) < 1) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_AMON, c_unitAllianceEnemy, RegionCircle(gv_rampageConstructs[lv_index].lv_spawnPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (gv_rampageConstructs[lv_index].lv_respawnSafety == 0)) {
                if ((gv_rampageConstructs[lv_index].lv_voidCrystal75CheckIndex > 0)) {
                    if ((UnitIsAlive(gv_voidCrystals[gv_rampageConstructs[lv_index].lv_voidCrystal75CheckIndex].lv_unit) == true) && (gv_voidCrystals[gv_rampageConstructs[lv_index].lv_voidCrystal75CheckIndex].lv_vulnerable == true) && (UnitGetPropertyFixed(gv_voidCrystals[gv_rampageConstructs[lv_index].lv_voidCrystal75CheckIndex].lv_unit, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                        lv_createUnit = true;
                    }

                }
                else {
                    if ((gv_rampageConstructs[lv_index].lv_voidChasm66CheckIndex > 0)) {
                        if ((UnitIsAlive(gv_voidChasm[gv_rampageConstructs[lv_index].lv_voidChasm66CheckIndex].lv_unit) == false)) {
                            lv_createUnit = true;
                        }
                        else {
                            if ((UnitIsAlive(gv_voidChasm[gv_rampageConstructs[lv_index].lv_voidChasm66CheckIndex].lv_unit) == true) && (UnitGetPropertyFixed(gv_voidChasm[gv_rampageConstructs[lv_index].lv_voidChasm66CheckIndex].lv_unit, c_unitPropLifePercent, c_unitPropCurrent) <= 66.0)) {
                                lv_createUnit = true;
                            }

                        }
                    }
                    else {
                        lv_createUnit = true;
                    }
                }
            }

            if ((lv_createUnit == true)) {
                UnitIssueOrder(gv_amon, Order(AbilityCommand("AmonSpawnTentacleB", 0)), c_orderQueueReplace);
                Wait(1.0, c_timeGame);
                libNtve_gf_CreateUnitsAtPoint2(1, "AmonShardB", c_unitCreateIgnorePlacement, gv_pLAYER_04_AMON, gv_rampageConstructs[lv_index].lv_spawnPoint);
                gv_rampageConstructs[lv_index].lv_unit = UnitLastCreated();
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_constructMaxLife);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, UnitTypeGetName(UnitGetType(UnitLastCreated())), null);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
                UnitBehaviorAdd(UnitLastCreated(), "InfiniteCrystalisRepulsorBehavior", UnitLastCreated(), 1);
                gf_ShakeCameraWhenConstructLands(UnitLastCreated());
                gv_rampageConstructs[lv_index].lv_respawnSafety = 10;
            }

            if ((UnitIsAlive(gv_rampageConstructs[lv_index].lv_unit) == false) && (gv_rampageConstructs[lv_index].lv_respawnSafety > 0)) {
                gv_rampageConstructs[lv_index].lv_respawnSafety -= 1;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RampageConstructController_Init () {
    gt_RampageConstructController = TriggerCreate("gt_RampageConstructController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rampage Construct Dies
//--------------------------------------------------------------------------------------------------
bool gt_RampageConstructDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    int auto25DD7B4C_ae;
    const int auto25DD7B4C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_AMON))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AmonShardB"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto25DD7B4C_ae = gv_numberOfRampageConstructs;
    lv_i = 1;
    for ( ; ( (auto25DD7B4C_ai >= 0 && lv_i <= auto25DD7B4C_ae) || (auto25DD7B4C_ai < 0 && lv_i >= auto25DD7B4C_ae) ) ; lv_i += auto25DD7B4C_ai ) {
        if ((EventUnit() == gv_rampageConstructs[lv_i].lv_unit)) {
            lv_index = lv_i;
        }

    }
    if ((lv_index == 0)) {
        return true;
    }

    TimerStart(gv_rampageConstructs[lv_index].lv_respawnTimer, gv_constructRespawnDelay, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RampageConstructDies_Init () {
    gt_RampageConstructDies = TriggerCreate("gt_RampageConstructDies_Func");
    TriggerAddEventUnitDied(gt_RampageConstructDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Oblivion Construct Init
//--------------------------------------------------------------------------------------------------
bool gt_OblivionConstructInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto2EA74BE7_ae;
    const int auto2EA74BE7_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2EA74BE7_ae = gv_numberOfOblivionConstructs;
    lv_index = 1;
    for ( ; ( (auto2EA74BE7_ai >= 0 && lv_index <= auto2EA74BE7_ae) || (auto2EA74BE7_ai < 0 && lv_index >= auto2EA74BE7_ae) ) ; lv_index += auto2EA74BE7_ai ) {
        gv_oblivionConstructs[lv_index].lv_spawnPoint = PointFromName(("Oblivion Construct " + IntToString(lv_index)));
    }
    TimerStart(gv_oblivionConstructs[1].lv_initialTimer, 60.0, false, c_timeAI);
    gv_oblivionConstructs[1].lv_voidCrystal75CheckIndex = 4;
    TimerStart(gv_oblivionConstructs[2].lv_initialTimer, (60.0 + libLotv_gf_DifficultyValueFixed2(600.0, 600.0, 540.0, 480.0)), false, c_timeAI);
    gv_oblivionConstructs[2].lv_voidChasm66CheckIndex = 1;
    TimerStart(gv_oblivionConstructs[3].lv_initialTimer, 300.0, false, c_timeAI);
    gv_oblivionConstructs[3].lv_voidCrystal75CheckIndex = 6;
    TimerStart(gv_oblivionConstructs[4].lv_initialTimer, 560.0, false, c_timeAI);
    TimerStart(gv_oblivionConstructs[5].lv_initialTimer, 300.0, false, c_timeAI);
    gv_oblivionConstructs[5].lv_voidChasm66CheckIndex = 5;
    TimerStart(gv_oblivionConstructs[6].lv_initialTimer, 60.0, false, c_timeAI);
    gv_oblivionConstructs[6].lv_voidChasm66CheckIndex = 6;
    TimerStart(gv_oblivionConstructs[7].lv_initialTimer, 60.0, false, c_timeAI);
    gv_oblivionConstructs[7].lv_voidCrystal75CheckIndex = 3;
    TimerStart(gv_oblivionConstructs[8].lv_initialTimer, 500.0, false, c_timeAI);
    gv_oblivionConstructs[8].lv_voidChasm66CheckIndex = 3;
    TimerStart(gv_oblivionConstructs[9].lv_initialTimer, 60.0, false, c_timeAI);
    gv_oblivionConstructs[9].lv_voidCrystal75CheckIndex = 8;
    TimerStart(gv_oblivionConstructs[10].lv_initialTimer, (60.0 + libLotv_gf_DifficultyValueFixed2(900.0, 900.0, 0.0, 0.0)), false, c_timeAI);
    gv_oblivionConstructs[10].lv_voidChasm66CheckIndex = 4;
    TimerStart(gv_oblivionConstructs[11].lv_initialTimer, 60.0, false, c_timeAI);
    gv_oblivionConstructs[11].lv_voidCrystal75CheckIndex = 5;
    TimerStart(gv_oblivionConstructs[12].lv_initialTimer, 300.0, false, c_timeAI);
    gv_oblivionConstructs[12].lv_voidChasm66CheckIndex = 5;
    TriggerExecute(gt_OblivionConstructController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OblivionConstructInit_Init () {
    gt_OblivionConstructInit = TriggerCreate("gt_OblivionConstructInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Oblivion Construct Controller
//--------------------------------------------------------------------------------------------------
bool gt_OblivionConstructController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_createUnit;
    unitgroup lv_healTargets;

    // Automatic Variable Declarations
    int auto06A0011B_ae;
    const int auto06A0011B_ai = 1;
    unitgroup auto4234F9AE_g;
    int auto4234F9AE_u;
    unit auto4234F9AE_var;

    // Variable Initialization
    lv_healTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        auto06A0011B_ae = gv_numberOfOblivionConstructs;
        lv_index = 1;
        for ( ; ( (auto06A0011B_ai >= 0 && lv_index <= auto06A0011B_ae) || (auto06A0011B_ai < 0 && lv_index >= auto06A0011B_ae) ) ; lv_index += auto06A0011B_ai ) {
            lv_createUnit = false;
            if ((UnitIsAlive(gv_oblivionConstructs[lv_index].lv_unit) == false) && (TimerGetRemaining(gv_oblivionConstructs[lv_index].lv_initialTimer) < 1) && (TimerGetRemaining(gv_oblivionConstructs[lv_index].lv_respawnTimer) < 1) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_04_AMON, c_unitAllianceEnemy, RegionCircle(gv_oblivionConstructs[lv_index].lv_spawnPoint, 32.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (gv_oblivionConstructs[lv_index].lv_respawnSafety == 0)) {
                if ((gv_oblivionConstructs[lv_index].lv_voidCrystal75CheckIndex > 0)) {
                    if ((UnitIsAlive(gv_voidCrystals[gv_oblivionConstructs[lv_index].lv_voidCrystal75CheckIndex].lv_unit) == true) && (gv_voidCrystals[gv_oblivionConstructs[lv_index].lv_voidCrystal75CheckIndex].lv_vulnerable == true) && (UnitGetPropertyFixed(gv_voidCrystals[gv_oblivionConstructs[lv_index].lv_voidCrystal75CheckIndex].lv_unit, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                        lv_createUnit = true;
                    }

                }
                else {
                    if ((gv_oblivionConstructs[lv_index].lv_voidChasm66CheckIndex > 0)) {
                        if ((UnitIsAlive(gv_voidChasm[gv_oblivionConstructs[lv_index].lv_voidChasm66CheckIndex].lv_unit) == true) && (UnitGetPropertyFixed(gv_voidChasm[gv_oblivionConstructs[lv_index].lv_voidChasm66CheckIndex].lv_unit, c_unitPropLifePercent, c_unitPropCurrent) <= 66.0)) {
                            lv_createUnit = true;
                        }

                    }
                    else {
                        lv_createUnit = true;
                    }
                }
            }

            if ((lv_createUnit == true)) {
                UnitIssueOrder(gv_amon, Order(AbilityCommand("AmonSpawnTentacleC", 0)), c_orderQueueReplace);
                Wait(1.0, c_timeGame);
                libNtve_gf_CreateUnitsAtPoint2(1, "AmonShardC", c_unitCreateIgnorePlacement, gv_pLAYER_04_AMON, gv_oblivionConstructs[lv_index].lv_spawnPoint);
                gv_oblivionConstructs[lv_index].lv_unit = UnitLastCreated();
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_constructMaxLife);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, UnitTypeGetName(UnitGetType(UnitLastCreated())), null);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, gv_pLAYER_01_USER);
                UnitBehaviorAdd(UnitLastCreated(), "InfiniteCrystalisRepulsorBehavior", UnitLastCreated(), 1);
                gf_ShakeCameraWhenConstructLands(UnitLastCreated());
                gv_oblivionConstructs[lv_index].lv_respawnSafety = 10;
                TimerStart(gv_oblivionConstructs[lv_index].lv_animaBeamCooldownTimer, 6.0, false, c_timeAI);
            }

            if ((UnitIsAlive(gv_oblivionConstructs[lv_index].lv_unit) == true) && (TimerGetRemaining(gv_oblivionConstructs[lv_index].lv_animaBeamCooldownTimer) <= 1)) {
                lv_healTargets = UnitGroup("AmonCrystalEpilogue03", gv_pLAYER_04_AMON, RegionCircle(UnitGetPosition(gv_oblivionConstructs[lv_index].lv_unit), 30.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto4234F9AE_g = lv_healTargets;
                auto4234F9AE_u = UnitGroupCount(auto4234F9AE_g, c_unitCountAll);
                for (;; auto4234F9AE_u -= 1) {
                    auto4234F9AE_var = UnitGroupUnitFromEnd(auto4234F9AE_g, auto4234F9AE_u);
                    if (auto4234F9AE_var == null) { break; }
                    if ((UnitGetPropertyFixed(auto4234F9AE_var, c_unitPropLifePercent, c_unitPropCurrent) > 80.0)) {
                        UnitGroupRemove(lv_healTargets, auto4234F9AE_var);
                    }

                }
                if ((UnitGroupCount(lv_healTargets, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(gv_oblivionConstructs[lv_index].lv_unit, OrderTargetingUnit(AbilityCommand("AmonTentacleCHeal", 0), UnitGroupRandomUnit(lv_healTargets, c_unitCountAlive)), c_orderQueueAddToEnd);
                    TimerStart(gv_oblivionConstructs[lv_index].lv_animaBeamCooldownTimer, gv_oblivionConstructHealCooldown, false, c_timeAI);
                }

            }

            if ((UnitIsAlive(gv_oblivionConstructs[lv_index].lv_unit) == false) && (gv_oblivionConstructs[lv_index].lv_respawnSafety > 0)) {
                gv_oblivionConstructs[lv_index].lv_respawnSafety -= 1;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OblivionConstructController_Init () {
    gt_OblivionConstructController = TriggerCreate("gt_OblivionConstructController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Oblivion Construct Dies
//--------------------------------------------------------------------------------------------------
bool gt_OblivionConstructDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    int auto63942834_ae;
    const int auto63942834_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_AMON))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AmonShardC"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto63942834_ae = gv_numberOfOblivionConstructs;
    lv_i = 1;
    for ( ; ( (auto63942834_ai >= 0 && lv_i <= auto63942834_ae) || (auto63942834_ai < 0 && lv_i >= auto63942834_ae) ) ; lv_i += auto63942834_ai ) {
        if ((EventUnit() == gv_oblivionConstructs[lv_i].lv_unit)) {
            lv_index = lv_i;
        }

    }
    if ((lv_index == 0)) {
        return true;
    }

    TimerStart(gv_oblivionConstructs[lv_index].lv_respawnTimer, gv_constructRespawnDelay, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OblivionConstructDies_Init () {
    gt_OblivionConstructDies = TriggerCreate("gt_OblivionConstructDies_Func");
    TriggerAddEventUnitDied(gt_OblivionConstructDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Construct Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstConstructQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pingLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(gv_firstConstructPingLocation, 24.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_pingLocation = gv_firstConstructPingLocation;
    TriggerQueueEnter();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_pingLocation, 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00046", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstConstructQ_Init () {
    gt_FirstConstructQ = TriggerCreate("gt_FirstConstructQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: World Cleaver Init
//--------------------------------------------------------------------------------------------------
bool gt_WorldCleaverInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    int auto49F92F29_ae;
    const int auto49F92F29_ai = 1;
    unitgroup auto1CC2BF0E_g;
    int auto1CC2BF0E_u;
    unit auto1CC2BF0E_var;
    int auto0F4083C8_ae;
    const int auto0F4083C8_ai = 1;
    unitgroup autoF4EDB03C_g;
    int autoF4EDB03C_u;
    unit autoF4EDB03C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_worldCleaverBaseAreas[1].lv_amonDoodad = ActorFromDoodad(DoodadFromId(1311));
    gv_worldCleaverBaseAreas[2].lv_amonDoodad = ActorFromDoodad(DoodadFromId(1380));
    gv_worldCleaverBaseAreas[3].lv_amonDoodad = ActorFromDoodad(DoodadFromId(1462));
    gv_worldCleaverBaseAreas[4].lv_amonDoodad = ActorFromDoodad(DoodadFromId(1345));
    gv_worldCleaverBaseAreas[5].lv_amonDoodad = ActorFromDoodad(DoodadFromId(1358));
    gv_worldCleaverBaseAreas[6].lv_amonDoodad = ActorFromDoodad(DoodadFromId(1463));
    gv_worldCleaverBaseAreas[7].lv_amonDoodad = ActorFromDoodad(DoodadFromId(1318));
    gv_worldCleaverBaseAreas[8].lv_amonDoodad = ActorFromDoodad(DoodadFromId(1403));
    gv_worldCleaverBaseAreas[9].lv_amonDoodad = ActorFromDoodad(DoodadFromId(1461));
    auto49F92F29_ae = gv_numberOfWorldCleaverBaseAreas;
    lv_index = 1;
    for ( ; ( (auto49F92F29_ai >= 0 && lv_index <= auto49F92F29_ae) || (auto49F92F29_ai < 0 && lv_index >= auto49F92F29_ae) ) ; lv_index += auto49F92F29_ai ) {
        gv_worldCleaverBaseAreas[lv_index].lv_terrainDestructionRegion = RegionFromName(("World Cleaver Area " + IntToString(lv_index)));
        gv_worldCleaverBaseAreas[lv_index].lv_killZone = RegionFromName(("World Cleaver Area " + IntToString(lv_index) + " Kill Zone"));
        UnitGroupAddUnitGroup(gv_worldCleaverBaseAreas[lv_index].lv_pathingBlockers, UnitGroup("PathingBlocker1x1", 0, gv_worldCleaverBaseAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        UnitGroupAddUnitGroup(gv_worldCleaverBaseAreas[lv_index].lv_pathingBlockers, UnitGroup("PathingBlocker2x2", 0, gv_worldCleaverBaseAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        UnitGroupAddUnitGroup(gv_worldCleaverBaseAreas[lv_index].lv_pathingBlockers, UnitGroup("Blocker4x4", 0, gv_worldCleaverBaseAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        UnitGroupAddUnitGroup(gv_worldCleaverBaseAreas[lv_index].lv_pathingBlockers, UnitGroup("Blocker6x6", 0, gv_worldCleaverBaseAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        UnitGroupAddUnitGroup(gv_worldCleaverBaseAreas[lv_index].lv_pathingBlockers, UnitGroup("Blocker8x8", 0, gv_worldCleaverBaseAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        UnitGroupAddUnitGroup(gv_worldCleaverBaseAreas[lv_index].lv_pathingBlockers, UnitGroup("Blocker16x16", 0, gv_worldCleaverBaseAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        auto1CC2BF0E_g = gv_worldCleaverBaseAreas[lv_index].lv_pathingBlockers;
        auto1CC2BF0E_u = UnitGroupCount(auto1CC2BF0E_g, c_unitCountAll);
        for (;; auto1CC2BF0E_u -= 1) {
            auto1CC2BF0E_var = UnitGroupUnitFromEnd(auto1CC2BF0E_g, auto1CC2BF0E_u);
            if (auto1CC2BF0E_var == null) { break; }
            libNtve_gf_ShowHideUnit(auto1CC2BF0E_var, false);
        }
        libNtve_gf_ShowHideDoodadsInRegion(false, gv_worldCleaverBaseAreas[lv_index].lv_killZone, "Void_CliffRocks_Edge");
        libNtve_gf_ShowHideDoodadsInRegion(false, gv_worldCleaverBaseAreas[lv_index].lv_killZone, "Void_CliffRocks_Mass_A");
        ActorSend(gv_worldCleaverBaseAreas[lv_index].lv_amonDoodad, "Signal MoveBackInstant");
        gv_worldCleaverBaseAreas[lv_index].lv_pingPoint = PointFromName(("World Cleaver Area " + IntToString(lv_index) + " Ping Point"));
    }
    auto0F4083C8_ae = gv_numberOfWorldCleaverFieldAreas;
    lv_index = 1;
    for ( ; ( (auto0F4083C8_ai >= 0 && lv_index <= auto0F4083C8_ae) || (auto0F4083C8_ai < 0 && lv_index >= auto0F4083C8_ae) ) ; lv_index += auto0F4083C8_ai ) {
        gv_worldCleaverFieldAreas[lv_index].lv_terrainDestructionRegion = RegionFromName(("World Cleaver Field Area " + IntToString(lv_index)));
        gv_worldCleaverFieldAreas[lv_index].lv_killZone = RegionFromName(("World Cleaver Field Area " + IntToString(lv_index) + " Kill Zone"));
        UnitGroupAddUnitGroup(gv_worldCleaverFieldAreas[lv_index].lv_pathingBlockers, UnitGroup("PathingBlocker1x1", 0, gv_worldCleaverFieldAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        UnitGroupAddUnitGroup(gv_worldCleaverFieldAreas[lv_index].lv_pathingBlockers, UnitGroup("PathingBlocker2x2", 0, gv_worldCleaverFieldAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        UnitGroupAddUnitGroup(gv_worldCleaverFieldAreas[lv_index].lv_pathingBlockers, UnitGroup("Blocker4x4", 0, gv_worldCleaverFieldAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        UnitGroupAddUnitGroup(gv_worldCleaverFieldAreas[lv_index].lv_pathingBlockers, UnitGroup("Blocker6x6", 0, gv_worldCleaverFieldAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        UnitGroupAddUnitGroup(gv_worldCleaverFieldAreas[lv_index].lv_pathingBlockers, UnitGroup("Blocker8x8", 0, gv_worldCleaverFieldAreas[lv_index].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        autoF4EDB03C_g = gv_worldCleaverFieldAreas[lv_index].lv_pathingBlockers;
        autoF4EDB03C_u = UnitGroupCount(autoF4EDB03C_g, c_unitCountAll);
        for (;; autoF4EDB03C_u -= 1) {
            autoF4EDB03C_var = UnitGroupUnitFromEnd(autoF4EDB03C_g, autoF4EDB03C_u);
            if (autoF4EDB03C_var == null) { break; }
            libNtve_gf_ShowHideUnit(autoF4EDB03C_var, false);
        }
        libNtve_gf_ShowHideDoodadsInRegion(false, gv_worldCleaverFieldAreas[lv_index].lv_killZone, "Void_CliffRocks_Edge");
        libNtve_gf_ShowHideDoodadsInRegion(false, gv_worldCleaverFieldAreas[lv_index].lv_killZone, "Void_CliffRocks_Mass_A");
    }
    gv_worldCleaverFieldAreas[1].lv_umbraSpireAliveCheck = 1;
    gv_worldCleaverFieldAreas[2].lv_umbraSpireAliveCheck = 2;
    gv_worldCleaverFieldAreas[3].lv_umbraSpireAliveCheck = 4;
    gv_worldCleaverFieldAreas[5].lv_umbraSpireAliveCheck = 5;
    gv_worldCleaverFieldAreas[6].lv_umbraSpireAliveCheck = 6;
    gv_worldCleaverFieldAreas[6].lv_umbraSpireAliveCheck = 3;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorldCleaverInit_Init () {
    gt_WorldCleaverInit = TriggerCreate("gt_WorldCleaverInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: World Cleaver Sequence
//--------------------------------------------------------------------------------------------------
bool gt_WorldCleaverSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(440.0, c_timeAI);
    TriggerExecute(gt_CleaveBase1Q, true, false);
    TriggerExecute(gt_MidQ, true, false);
    TriggerExecute(gt_CleaveBase1AftermathQ, true, false);
    Wait(340.0, c_timeAI);
    TriggerExecute(gt_CleaveBase2Q, true, false);
    Wait(100.0, c_timeAI);
    TriggerExecute(gt_CleaveBase3Q, true, false);
    Wait(290.0, c_timeAI);
    TriggerExecute(gt_CleaveBase4Q, true, false);
    Wait(240.0, c_timeAI);
    TriggerExecute(gt_CleaveBase5Q, true, false);
    Wait(240.0, c_timeAI);
    TriggerExecute(gt_CleaveBase6Q, true, false);
    Wait(240.0, c_timeAI);
    TriggerExecute(gt_CleaveBase7Q, true, false);
    Wait(240.0, c_timeAI);
    TriggerExecute(gt_CleaveBase8Q, true, false);
    Wait(240.0, c_timeAI);
    TriggerExecute(gt_CleaveBase9Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorldCleaverSequence_Init () {
    gt_WorldCleaverSequence = TriggerCreate("gt_WorldCleaverSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: World Cleaver Field Controller
//--------------------------------------------------------------------------------------------------
bool gt_WorldCleaverFieldController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_createUnit;

    // Automatic Variable Declarations
    int autoCA44FE96_ae;
    const int autoCA44FE96_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        autoCA44FE96_ae = gv_numberOfWorldCleaverFieldAreas;
        lv_index = 1;
        for ( ; ( (autoCA44FE96_ai >= 0 && lv_index <= autoCA44FE96_ae) || (autoCA44FE96_ai < 0 && lv_index >= autoCA44FE96_ae) ) ; lv_index += autoCA44FE96_ai ) {
            lv_createUnit = true;
            if ((gv_worldCleaverFieldAreas[lv_index].lv_activated == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_worldCleaverFieldAreas[lv_index].lv_killZone, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                if ((gv_worldCleaverFieldAreas[lv_index].lv_umbraSpireAliveCheck > 0) && (UnitIsAlive(gv_voidChasm[gv_worldCleaverFieldAreas[lv_index].lv_umbraSpireAliveCheck].lv_unit) == false)) {
                    lv_createUnit = false;
                }

            }
            else {
                lv_createUnit = false;
            }
            if ((lv_createUnit == true)) {
                gv_worldCleaverFieldAreas[lv_index].lv_activated = true;
                gf_CleaveField(lv_index);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorldCleaverFieldController_Init () {
    gt_WorldCleaverFieldController = TriggerCreate("gt_WorldCleaverFieldController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;
    unitgroup lv_workers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_workers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    UnitIssueOrder(gv_amon, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_SendActorMessageToUnit(gv_amon, "Signal MoveDown");
    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00010", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase1Q_Init () {
    gt_CleaveBase1Q = TriggerCreate("gt_CleaveBase1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 1 Aftermath Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase1AftermathQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_amon, "Signal MoveUp");
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00035", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if (((UnitGroupCount(UnitGroup("Hatchery", gv_pLAYER_01_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Lair", gv_pLAYER_01_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Hive", gv_pLAYER_01_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00013", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00014", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_WorldCleaverFieldController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase1AftermathQ_Init () {
    gt_CleaveBase1AftermathQ = TriggerCreate("gt_CleaveBase1AftermathQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase2Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;
    unitgroup lv_workers;

    // Automatic Variable Declarations
    unitgroup autoFCC2916A_g;
    int autoFCC2916A_u;
    unit autoFCC2916A_var;
    unitgroup autoDD8E08D8_g;
    int autoDD8E08D8_u;
    unit autoDD8E08D8_var;

    // Variable Initialization
    lv_workers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 2;
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D97DE985"), null, gv_worldCleaverBaseAreas[lv_index].lv_pingPoint);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00015", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    autoFCC2916A_g = UnitGroup(null, gv_pLAYER_03_ARTANIS, gv_worldCleaverBaseAreas[2].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFCC2916A_u = UnitGroupCount(autoFCC2916A_g, c_unitCountAll);
    for (;; autoFCC2916A_u -= 1) {
        autoFCC2916A_var = UnitGroupUnitFromEnd(autoFCC2916A_g, autoFCC2916A_u);
        if (autoFCC2916A_var == null) { break; }
        UnitGroupAdd(lv_workers, autoFCC2916A_var);
        UnitIssueOrder(autoFCC2916A_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoFCC2916A_var), 12.0, 135.0)), c_orderQueueReplace);
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    gf_CleaveBase(lv_index);
    Wait(5.0, c_timeReal);
    autoDD8E08D8_g = lv_workers;
    autoDD8E08D8_u = UnitGroupCount(autoDD8E08D8_g, c_unitCountAll);
    for (;; autoDD8E08D8_u -= 1) {
        autoDD8E08D8_var = UnitGroupUnitFromEnd(autoDD8E08D8_g, autoDD8E08D8_u);
        if (autoDD8E08D8_var == null) { break; }
        AISetUnitScriptControlled(autoDD8E08D8_var, false);
    }
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00016", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase2Q_Init () {
    gt_CleaveBase2Q = TriggerCreate("gt_CleaveBase2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase3Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 3;
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FB7D35EA"), null, gv_worldCleaverBaseAreas[lv_index].lv_pingPoint);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00017", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    gf_CleaveBase(lv_index);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase3Q_Init () {
    gt_CleaveBase3Q = TriggerCreate("gt_CleaveBase3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 4 Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase4Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 4;
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E33F33D3"), null, gv_worldCleaverBaseAreas[lv_index].lv_pingPoint);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00019", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    gf_CleaveBase(lv_index);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase4Q_Init () {
    gt_CleaveBase4Q = TriggerCreate("gt_CleaveBase4Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 5 Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase5Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 5;
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B1DBF5D6"), null, gv_worldCleaverBaseAreas[lv_index].lv_pingPoint);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00020", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    gf_CleaveBase(lv_index);
    Wait(5.0, c_timeReal);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00037", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase5Q_Init () {
    gt_CleaveBase5Q = TriggerCreate("gt_CleaveBase5Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 6 Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase6Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 6;
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/99356AEC"), null, gv_worldCleaverBaseAreas[lv_index].lv_pingPoint);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00021", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    gf_CleaveBase(lv_index);
    Wait(5.0, c_timeReal);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00038", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase6Q_Init () {
    gt_CleaveBase6Q = TriggerCreate("gt_CleaveBase6Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 7 Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase7Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 7;
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/876B01B3"), null, gv_worldCleaverBaseAreas[lv_index].lv_pingPoint);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00022", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    gf_CleaveBase(lv_index);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase7Q_Init () {
    gt_CleaveBase7Q = TriggerCreate("gt_CleaveBase7Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 8 Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase8Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 8;
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E6A9051C"), null, gv_worldCleaverBaseAreas[lv_index].lv_pingPoint);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00023", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    gf_CleaveBase(lv_index);
    Wait(5.0, c_timeReal);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00040", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase8Q_Init () {
    gt_CleaveBase8Q = TriggerCreate("gt_CleaveBase8Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave Base 9 Q
//--------------------------------------------------------------------------------------------------
bool gt_CleaveBase9Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 9;
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    UIAlertClear(gv_pLAYER_01_USER);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BA669225"), null, gv_worldCleaverBaseAreas[lv_index].lv_pingPoint);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00024", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_worldCleaverBaseAreas[lv_index].lv_pingPoint, 5.0, Color(100.00, 0.00, 0.00));
    gf_CleaveBase(lv_index);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CleaveBase9Q_Init () {
    gt_CleaveBase9Q = TriggerCreate("gt_CleaveBase9Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Dies
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_HandleHeroDeathVoid(gv_kerrigan, null, -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDies_Init () {
    gt_KerriganDies = TriggerCreate("gt_KerriganDies_Func");
    TriggerAddEventUnitDied(gt_KerriganDies, UnitRefFromVariable("gv_kerrigan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Build
//--------------------------------------------------------------------------------------------------
bool gt_CreepTumorBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CreepTumorExhausted", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepTumorBuild_Init () {
    gt_CreepTumorBuild = TriggerCreate("gt_CreepTumorBuild_Func");
    TriggerAddEventUnitAbility(gt_CreepTumorBuild, null, AbilityCommand("CreepTumorBuild", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quantum Ray Check
//--------------------------------------------------------------------------------------------------
bool gt_QuantumRayCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto27D6D294_ae;
    const int auto27D6D294_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(gv_kerrigan) == true)) {
            auto27D6D294_ae = gv_numberOfCrystals;
            lv_i = 1;
            for ( ; ( (auto27D6D294_ai >= 0 && lv_i <= auto27D6D294_ae) || (auto27D6D294_ai < 0 && lv_i >= auto27D6D294_ae) ) ; lv_i += auto27D6D294_ai ) {
                if ((UnitIsAlive(gv_voidCrystals[lv_i].lv_unit) == true) && (gv_voidCrystals[lv_i].lv_vulnerable == true) && (libNtve_gf_UnitInRegion(gv_kerrigan, RegionCircle(UnitGetPosition(gv_voidCrystals[lv_i].lv_unit), 12.0)) == true)) {
                    gv_quantumRayTarget = gv_voidCrystals[lv_i].lv_unit;
                    TriggerExecute(gt_QuantumRayQ, true, false);
                    return true;
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuantumRayCheck_Init () {
    gt_QuantumRayCheck = TriggerCreate("gt_QuantumRayCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quantum Ray Used
//--------------------------------------------------------------------------------------------------
bool gt_QuantumRayUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_quantumRayUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuantumRayUsed_Init () {
    gt_QuantumRayUsed = TriggerCreate("gt_QuantumRayUsed_Func");
    TriggerEnable(gt_QuantumRayUsed, false);
    TriggerAddEventUnitAbility(gt_QuantumRayUsed, UnitRefFromVariable("gv_kerrigan"), AbilityCommand("KerriganEpilogue03QuantumRay", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quantum Ray Q
//--------------------------------------------------------------------------------------------------
bool gt_QuantumRayQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((UnitIsAlive(gv_kerrigan) == false) || (UnitIsAlive(gv_quantumRayTarget) == false))) {
        TriggerExecute(gt_QuantumRayCheck, true, false);
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_quantumRayTarget), 5.0, Color(0.00, 100.00, 0.00));
    gf_CreateQuantumRayReticle(gv_quantumRayTarget);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00056", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuantumRayQ_Init () {
    gt_QuantumRayQ = TriggerCreate("gt_QuantumRayQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Celestial Radiance Flash
//--------------------------------------------------------------------------------------------------
bool gt_CelestialRadianceFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_kerrigan) == false)) {
        if ((gv_celestialRadianceFlashing == true)) {
            gv_celestialRadianceFlashing = false;
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("KerriganEpilogue03Heal", 0), false);
        }

    }
    else {
        if ((gv_celestialRadianceFlashing == false) && (UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, c_unitPropCurrent) < 49.0)) {
            gv_celestialRadianceFlashing = true;
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("KerriganEpilogue03Heal", 0), true);
            TriggerExecute(gt_CelestialRadianceQ, true, false);
        }

        if ((gv_celestialRadianceFlashing == true) && (UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, c_unitPropCurrent) > 51.0)) {
            gv_celestialRadianceFlashing = false;
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("KerriganEpilogue03Heal", 0), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CelestialRadianceFlash_Init () {
    gt_CelestialRadianceFlash = TriggerCreate("gt_CelestialRadianceFlash_Func");
    TriggerAddEventTimePeriodic(gt_CelestialRadianceFlash, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Celestial Radiance Q
//--------------------------------------------------------------------------------------------------
bool gt_CelestialRadianceQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((UnitIsAlive(gv_kerrigan) == false) || (UnitGetPropertyFixed(gv_kerrigan, c_unitPropLifePercent, c_unitPropCurrent) > 90.0))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(gv_kerrigan, "Mission_Epilogue03|Line00057", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CelestialRadianceQ_Init () {
    gt_CelestialRadianceQ = TriggerCreate("gt_CelestialRadianceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Waves
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ArtanisAttack1Q, true, false);
    TriggerExecute(gt_ArtanisAttack2Q, true, false);
    TriggerExecute(gt_ArtanisAttack3Q, true, false);
    TriggerExecute(gt_ArtanisFirstVoidChasmBypass, true, false);
    Wait(75.0, c_timeAI);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ARTANIS, gv_voidCrystals[2].lv_zenith);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_ARTANIS, PointFromId(19));
    AIAttackWaveAddUnits4(5, 5, 5, 5, "ZealotAiur");
    AIAttackWaveAddUnits4(3, 3, 3, 3, "Dragoon");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "SentryAiur");
    AIAttackWaveSend(gv_pLAYER_03_ARTANIS, 60, true);
    Wait(185.0, c_timeAI);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossGroundWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossGroundArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossShieldsLevel1", 1);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ARTANIS, gv_voidCrystals[4].lv_zenith);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_ARTANIS, PointFromId(19));
    AIAttackWaveAddUnits4(6, 6, 6, 6, "ZealotAiur");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "Dragoon");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "SentryAiur");
    AIAttackWaveSend(gv_pLAYER_03_ARTANIS, 200, true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossAirWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossAirArmorsLevel1", 1);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ARTANIS, gv_voidCrystals[10].lv_zenith);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_ARTANIS, PointFromId(19));
    AIAttackWaveAddUnits4(6, 6, 6, 6, "ZealotAiur");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "Dragoon");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "SentryAiur");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "ColossusTaldarim");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "CarrierAiur");
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ARTANIS, PointFromId(480), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ARTANIS, PointFromId(583), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ARTANIS, PointFromId(2), false);
    AIAttackWaveSend(gv_pLAYER_03_ARTANIS, 270, true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossGroundWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossGroundArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossShieldsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossAirWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossAirArmorsLevel2", 1);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ARTANIS, gv_voidCrystals[3].lv_zenith);
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_ARTANIS, PointFromId(19));
    AIAttackWaveAddUnits4(6, 6, 6, 6, "ZealotAiur");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "Dragoon");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "SentryAiur");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "ColossusTaldarim");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "CarrierAiur");
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ARTANIS, PointFromId(35), false);
    AIAttackWaveSend(gv_pLAYER_03_ARTANIS, 290, true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossGroundWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossGroundArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossShieldsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossAirWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_ARTANIS, "ProtossAirArmorsLevel3", 1);
    while (true) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        AIAttackWaveSetTargetPlayer(gv_pLAYER_03_ARTANIS, PlayerGroupSingle(gv_pLAYER_04_AMON));
        AIAttackWaveSetGatherPoint(gv_pLAYER_03_ARTANIS, PointFromId(19));
        AIAttackWaveAddUnits4(6, 6, 6, 6, "ZealotAiur");
        AIAttackWaveAddUnits4(4, 4, 4, 4, "Dragoon");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "SentryAiur");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "ColossusTaldarim");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "CarrierAiur");
        AIAttackWaveSend(gv_pLAYER_03_ARTANIS, 180, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisWaves_Init () {
    gt_ArtanisWaves = TriggerCreate("gt_ArtanisWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Attack 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisAttack1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(90.0, c_timeAI);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_voidCrystals[2].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[2].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    gf_CreateVoidCrystalArrowPing(2);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00026", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitIsAlive(gv_voidCrystals[2].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[2].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisAttack1Q_Init () {
    gt_ArtanisAttack1Q = TriggerCreate("gt_ArtanisAttack1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Attack 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisAttack2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(485.0, c_timeAI);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_voidCrystals[4].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[4].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    gf_CreateVoidCrystalArrowPing(4);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00049", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitIsAlive(gv_voidCrystals[4].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[4].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisAttack2Q_Init () {
    gt_ArtanisAttack2Q = TriggerCreate("gt_ArtanisAttack2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Attack 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisAttack3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(750.0, c_timeAI);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_voidCrystals[10].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[10].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    gf_CreateVoidCrystalArrowPing(10);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00050", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitIsAlive(gv_voidCrystals[10].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[10].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisAttack3Q_Init () {
    gt_ArtanisAttack3Q = TriggerCreate("gt_ArtanisAttack3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis First Void Chasm Bypass
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisFirstVoidChasmBypass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_protossGroup;
    unitgroup lv_validTargets;
    unitgroup lv_almostValidTargets;

    // Automatic Variable Declarations
    unitgroup auto9C4E0B80_g;
    int auto9C4E0B80_u;
    unit auto9C4E0B80_var;
    unitgroup auto973605A1_g;
    int auto973605A1_u;
    unit auto973605A1_var;
    unitgroup autoC4BF7E1D_g;
    int autoC4BF7E1D_u;
    unit autoC4BF7E1D_var;
    unitgroup autoE379B659_g;
    int autoE379B659_u;
    unit autoE379B659_var;

    // Variable Initialization
    lv_protossGroup = UnitGroupEmpty();
    lv_validTargets = UnitGroupEmpty();
    lv_almostValidTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(60.0, c_timeAI);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ARTANIS, gv_voidChasm[1].lv_spawnSafetyRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
        Wait(1.0, c_timeAI);
    }
    auto9C4E0B80_g = AIWaveGetUnits(AIUnitGetWave(UnitGroupUnit(UnitGroup(null, gv_pLAYER_03_ARTANIS, gv_voidChasm[1].lv_spawnSafetyRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)));
    auto9C4E0B80_u = UnitGroupCount(auto9C4E0B80_g, c_unitCountAll);
    for (;; auto9C4E0B80_u -= 1) {
        auto9C4E0B80_var = UnitGroupUnitFromEnd(auto9C4E0B80_g, auto9C4E0B80_u);
        if (auto9C4E0B80_var == null) { break; }
        UnitGroupAdd(lv_protossGroup, auto9C4E0B80_var);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libVCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_protossGroup) == true))) {
            return true;
        }

        if (((UnitIsAlive(gv_voidCrystals[2].lv_unit) == false) || ((UnitIsAlive(gv_voidCrystals[2].lv_unit) == true) && (DistanceBetweenPoints(gv_voidCrystals[2].lv_groundHeightEnd, UnitGetPosition(gv_voidCrystals[2].lv_unit)) > 5.0) && (gf_NormalizeVoidCrystalAngle(2, AngleBetweenPoints(gv_voidCrystals[2].lv_center, UnitGetPosition(gv_voidCrystals[2].lv_unit))) > gv_voidCrystals[2].lv_normalizedGroundHeightEndAngle)))) {
            AIAttackWaveSetTargetPoint(gv_pLAYER_03_ARTANIS, PointFromId(540));
            AIAttackWaveSetGatherPoint(gv_pLAYER_03_ARTANIS, UnitGroupCenterOfGroup(lv_protossGroup));
            auto973605A1_g = lv_protossGroup;
            auto973605A1_u = UnitGroupCount(auto973605A1_g, c_unitCountAll);
            for (;; auto973605A1_u -= 1) {
                auto973605A1_var = UnitGroupUnitFromEnd(auto973605A1_g, auto973605A1_u);
                if (auto973605A1_var == null) { break; }
                AISetUnitScriptControlled(auto973605A1_var, false);
                AIAttackWaveUseUnit(gv_pLAYER_03_ARTANIS, auto973605A1_var);
            }
            AIAttackWaveSend(gv_pLAYER_03_ARTANIS, 0, false);
            return true;
        }

        lv_validTargets = UnitGroup(null, gv_pLAYER_04_AMON, RegionCircle(UnitGroupCenterOfGroup(lv_protossGroup), 6.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) > 0)) {
            autoE379B659_g = lv_protossGroup;
            autoE379B659_u = UnitGroupCount(autoE379B659_g, c_unitCountAll);
            for (;; autoE379B659_u -= 1) {
                autoE379B659_var = UnitGroupUnitFromEnd(autoE379B659_g, autoE379B659_u);
                if (autoE379B659_var == null) { break; }
                UnitIssueOrder(autoE379B659_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_validTargets, UnitGetPosition(autoE379B659_var))), c_orderQueueReplace);
            }
        }
        else {
            autoC4BF7E1D_g = lv_protossGroup;
            autoC4BF7E1D_u = UnitGroupCount(autoC4BF7E1D_g, c_unitCountAll);
            for (;; autoC4BF7E1D_u -= 1) {
                autoC4BF7E1D_var = UnitGroupUnitFromEnd(autoC4BF7E1D_g, autoC4BF7E1D_u);
                if (autoC4BF7E1D_var == null) { break; }
                if ((DistanceBetweenPoints(UnitGetPosition(autoC4BF7E1D_var), gv_voidChasm[1].lv_spawnPoint) > 14.0)) {
                    lv_almostValidTargets = UnitGroup(null, gv_pLAYER_04_AMON, RegionCircle(UnitGetPosition(autoC4BF7E1D_var), 7.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    if ((UnitGroupCount(lv_almostValidTargets, c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupClosestToPoint(lv_almostValidTargets, UnitGetPosition(autoC4BF7E1D_var))), gv_voidChasm[1].lv_spawnPoint) <= 14.0)) {
                        UnitIssueOrder(autoC4BF7E1D_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_voidCrystals[2].lv_unit), c_orderQueueReplace);
                    }
                    else {
                        if ((DistanceBetweenPoints(UnitGetPosition(autoC4BF7E1D_var), UnitGetPosition(gv_voidCrystals[2].lv_unit)) > 8.0)) {
                            UnitIssueOrder(autoC4BF7E1D_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_voidCrystals[2].lv_unit)), c_orderQueueReplace);
                        }

                    }
                }
                else {
                    UnitIssueOrder(autoC4BF7E1D_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_voidCrystals[2].lv_unit), c_orderQueueReplace);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisFirstVoidChasmBypass_Init () {
    gt_ArtanisFirstVoidChasmBypass = TriggerCreate("gt_ArtanisFirstVoidChasmBypass_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Waves
//--------------------------------------------------------------------------------------------------
bool gt_RaynorWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranInfantryArmorsLevel1", 1);
    TriggerExecute(gt_RaynorAttack1Q, true, false);
    TriggerExecute(gt_RaynorAttack2Q, true, false);
    TriggerExecute(gt_RaynorAttack3Q, true, false);
    Wait(255.0, c_timeAI);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_RAYNOR, gv_voidCrystals[1].lv_zenith);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_RAYNOR, PointFromId(505));
    AIAttackWaveAddUnits4(10, 10, 10, 10, "WarPig");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "HammerSecurity");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "Medic");
    AIAttackWaveAddWaypoint(gv_pLAYER_02_RAYNOR, PointFromId(483), false);
    AIAttackWaveSend(gv_pLAYER_02_RAYNOR, 65, true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranVehicleWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranVehicleArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranShipWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranShipArmorsLevel1", 1);
    Wait(150.0, c_timeAI);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_RAYNOR, gv_voidCrystals[5].lv_zenith);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_RAYNOR, PointFromId(505));
    AIAttackWaveAddUnits4(10, 10, 10, 10, "WarPig");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "HammerSecurity");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "Medic");
    AIAttackWaveAddUnits4(3, 3, 3, 3, "SpartanCompany");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "SiegeBreaker");
    AIAttackWaveSend(gv_pLAYER_02_RAYNOR, 180, true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranInfantryWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranInfantryArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranVehicleWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranVehicleArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranShipWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranShipArmorsLevel2", 1);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_RAYNOR, gv_voidCrystals[6].lv_zenith);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_RAYNOR, PointFromId(505));
    AIAttackWaveAddUnits4(10, 10, 10, 10, "WarPig");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "HammerSecurity");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "Medic");
    AIAttackWaveAddUnits4(3, 3, 3, 3, "SpartanCompany");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "SiegeBreaker");
    AIAttackWaveSend(gv_pLAYER_02_RAYNOR, 300, true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranInfantryWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranInfantryArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranVehicleWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranVehicleArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranShipWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_RAYNOR, "TerranShipArmorsLevel3", 1);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_RAYNOR, PlayerGroupSingle(gv_pLAYER_04_AMON));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_RAYNOR, PointFromId(505));
    AIAttackWaveAddUnits4(10, 10, 10, 10, "WarPig");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "HammerSecurity");
    AIAttackWaveAddUnits4(4, 4, 4, 4, "Medic");
    AIAttackWaveAddUnits4(3, 3, 3, 3, "SpartanCompany");
    AIAttackWaveAddUnits4(2, 2, 2, 2, "SiegeBreaker");
    AIAttackWaveAddUnits4(1, 1, 1, 1, "DukesRevenge");
    AIAttackWaveSend(gv_pLAYER_02_RAYNOR, 145, true);
    while (true) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_RAYNOR, PlayerGroupSingle(gv_pLAYER_04_AMON));
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_RAYNOR, PointFromId(505));
        AIAttackWaveAddUnits4(10, 10, 10, 10, "WarPig");
        AIAttackWaveAddUnits4(4, 4, 4, 4, "HammerSecurity");
        AIAttackWaveAddUnits4(4, 4, 4, 4, "Medic");
        AIAttackWaveAddUnits4(3, 3, 3, 3, "SpartanCompany");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "SiegeBreaker");
        AIAttackWaveAddUnits4(2, 2, 2, 2, "DukesRevenge");
        AIAttackWaveSend(gv_pLAYER_02_RAYNOR, 180, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorWaves_Init () {
    gt_RaynorWaves = TriggerCreate("gt_RaynorWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Attack 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorAttack1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(275.0, c_timeAI);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_voidCrystals[1].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[1].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    gf_CreateVoidCrystalArrowPing(1);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00027", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitIsAlive(gv_voidCrystals[1].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[1].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorAttack1Q_Init () {
    gt_RaynorAttack1Q = TriggerCreate("gt_RaynorAttack1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Attack 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorAttack2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(620.0, c_timeAI);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_voidCrystals[5].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[5].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    gf_CreateVoidCrystalArrowPing(5);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00051", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitIsAlive(gv_voidCrystals[5].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[5].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorAttack2Q_Init () {
    gt_RaynorAttack2Q = TriggerCreate("gt_RaynorAttack2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Attack 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorAttack3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(915.0, c_timeAI);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_voidCrystals[6].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[6].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    gf_CreateVoidCrystalArrowPing(6);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00052", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    if ((UnitIsAlive(gv_voidCrystals[6].lv_unit) == false)) {
        return true;
    }

    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystals[6].lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorAttack3Q_Init () {
    gt_RaynorAttack3Q = TriggerCreate("gt_RaynorAttack3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesCasualNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHardBrutal, true, false);
    }
    TriggerExecute(gt_AlliesBullyBuilding, true, false);
    TriggerExecute(gt_RaynorWaves, true, false);
    TriggerExecute(gt_ArtanisWaves, true, false);
    Wait(21.0, c_timeAI);
    gv_crystalAccelerationEnabled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergFlyerWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossGroundWeaponsLevel1", 1);
    Wait(480.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergFlyerArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossShieldsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesCasualNormal_Init () {
    gt_AIUpgradesCasualNormal = TriggerCreate("gt_AIUpgradesCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(480.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergFlyerWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossGroundWeaponsLevel2", 1);
    Wait(480.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergFlyerArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossShieldsLevel2", 1);
    Wait(480.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ProtossGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "TerranVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergFlyerWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMON, "ZergMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_RAYNOR, "TerranVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ARTANIS, "ProtossGroundWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHardBrutal_Init () {
    gt_AIUpgradesHardBrutal = TriggerCreate("gt_AIUpgradesHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allies Bully Building
//--------------------------------------------------------------------------------------------------
bool gt_AlliesBullyBuilding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, RegionEntireMap(), false);
    AIToggleBulliesInRegion(gv_pLAYER_03_ARTANIS, RegionEntireMap(), false);
    Wait(1.0, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, RegionFromId(3), true);
    AIToggleBulliesInRegion(gv_pLAYER_03_ARTANIS, RegionFromId(4), true);
    Wait(120.0, c_timeAI);
    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, RegionEntireMap(), true);
    AIToggleBulliesInRegion(gv_pLAYER_03_ARTANIS, RegionEntireMap(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlliesBullyBuilding_Init () {
    gt_AlliesBullyBuilding = TriggerCreate("gt_AlliesBullyBuilding_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_kerrigan) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7EAA217C"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    libVoiC_gf_CampaignAwardAchievement("SC2Epilogue03_1", gv_pLAYER_01_USER);
    if ((gv_unitsLostToTerrainDestruction == 0) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        libVoiC_gf_CampaignAwardAchievement("SC2Epilogue03_3", gv_pLAYER_01_USER);
    }

    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementConstructedSpire == false)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_SC2Epilogue03", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5FB894DB"), IntToText(gv_unitsDestroyedByKerrigan));
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/FD719CBE"), IntToText(gv_unitsLostToTerrainDestruction));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Triple Tap Counter
//--------------------------------------------------------------------------------------------------
bool gt_TripleTapCounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tripleTapCounter += 1;
    if ((gv_tripleTapCounter >= 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVoiC_gf_CampaignAwardAchievement("Mastery_Epilogue03", gv_pLAYER_01_USER);
        return true;
    }

    Wait(60.0, c_timeAI);
    gv_tripleTapCounter -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TripleTapCounter_Init () {
    gt_TripleTapCounter = TriggerCreate("gt_TripleTapCounter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Kills
//--------------------------------------------------------------------------------------------------
bool gt_KerriganKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() == gv_kerrigan))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_04_AMON) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_AMON_NEUTRAL)))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_unitsDestroyedByKerrigan += 1;
    if ((gv_unitsDestroyedByKerrigan >= 375)) {
        libVoiC_gf_CampaignAwardAchievement("SC2Epilogue03_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganKills_Init () {
    gt_KerriganKills = TriggerCreate("gt_KerriganKills_Func");
    TriggerAddEventUnitDied(gt_KerriganKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Victory without morphing Spire
//--------------------------------------------------------------------------------------------------
bool gt_AchievementVictorywithoutmorphingSpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Spire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementConstructedSpire = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementVictorywithoutmorphingSpire_Init () {
    gt_AchievementVictorywithoutmorphingSpire = TriggerCreate("gt_AchievementVictorywithoutmorphingSpire_Func");
    TriggerAddEventUnitConstructProgress(gt_AchievementVictorywithoutmorphingSpire, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Crystals - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCrystalsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("SC2Epilogue03Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    TriggerExecute(gt_ObjectiveDestroyCrystalsUpdate, true, false);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCrystalsCreate_Init () {
    gt_ObjectiveDestroyCrystalsCreate = TriggerCreate("gt_ObjectiveDestroyCrystalsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Crystals - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCrystalsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyCrystalsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("SC2Epilogue03Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCrystalsComplete_Init () {
    gt_ObjectiveDestroyCrystalsComplete = TriggerCreate("gt_ObjectiveDestroyCrystalsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Crystals - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCrystalsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyCrystalsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("SC2Epilogue03Primary01", gv_crystalsDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCrystalsUpdate_Init () {
    gt_ObjectiveDestroyCrystalsUpdate = TriggerCreate("gt_ObjectiveDestroyCrystalsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDF220E87_g;
    int autoDF220E87_u;
    unit autoDF220E87_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_AMON, libNtve_ge_AllianceSetting_Neutral);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoDF220E87_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF220E87_u = UnitGroupCount(autoDF220E87_g, c_unitCountAll);
    for (;; autoDF220E87_u -= 1) {
        autoDF220E87_var = UnitGroupUnitFromEnd(autoDF220E87_g, autoDF220E87_u);
        if (autoDF220E87_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, autoDF220E87_var);
        libNtve_gf_ShowHideUnit(autoDF220E87_var, false);
        libNtve_gf_PauseUnit(autoDF220E87_var, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganEpilogue03", 0, gv_pLAYER_01_USER, PointFromId(1058));
    gv_cinematicKerrigan = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicKerrigan);
    UnitSetState(gv_cinematicKerrigan, c_unitStateFidget, false);
    libNtve_gf_ChangeUnitDamage(gv_cinematicKerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitBehaviorAdd(gv_cinematicKerrigan, "SuppressCollision", gv_cinematicKerrigan, 1);
    UnitBehaviorAdd(gv_cinematicKerrigan, "KerriganEpilogue03Walk", gv_cinematicKerrigan, 1);
    UnitSetPropertyFixed(gv_cinematicKerrigan, c_unitPropMovementSpeed, 2.0);
    libNtve_gf_ShowHideUnit(gv_cinematicKerrigan, false);
    CreepModify(PointFromId(9), 24.0, false, false);
    TriggerExecute(gt_IntroShadowUnits, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(46), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1059), 4.0, -1, 10, true);
    TriggerExecute(gt_VoidCrystalInitialLocationsIntro, true, false);
    TriggerExecute(gt_IntroShadowUnitsAttack, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PEpilogue03_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    ActorSend(ActorFromDoodad(DoodadFromId(1152)), "SetVisibility");
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 3.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    PlayerPauseAllCooldowns(gv_pLAYER_01_USER, false);
    UnitClearCooldowns(gv_cinematicKerrigan, false);
    UnitSetPropertyFixed(gv_cinematicKerrigan, c_unitPropEnergyPercent, 100.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 75.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 12.5, 1.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cinematicKerrigan), c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    gv_introChargeSound = SoundLastPlayed();
    Wait(0.0625, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_cinematicKerrigan, true);
    Wait(1.6275, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 2.0);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_AMON, libNtve_ge_AllianceSetting_Enemy);
    PlayerCreateEffectPoint(gv_pLAYER_01_USER, "KerriganVoidApocalypseInitialSet", PointFromId(1058));
    libNtve_gf_PauseUnit(gv_cinematicKerrigan, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(48), 5.0, -1, 10, true);
    Wait(2.567, c_timeGame);
    libVoiC_gf_ClearAnimationwithblendtime(c_animNameDefault, gv_cinematicKerrigan, c_animTimeDefault);
    libNtve_gf_PauseUnit(gv_cinematicKerrigan, false);
    UnitIssueOrder(gv_cinematicKerrigan, Order(AbilityCommand("KerriganEpilogue03Extinction", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    gv_introChargeSound = SoundLastPlayed();
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 1.0);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1062), 4.0, -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 2.0, 0.0, 4.0);
    SoundPlayForPlayer(SoundLink("EventEP03_KerriganChargeUp", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("EventEP03_KerriganVoxEffortStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("EventEP03_KerriganShockwave", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("EventEP03_KerriganShockwaveLFE", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("EventEP03_KerriganVoxEffortEnd", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("EventEP03_KerriganVoxEcho1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("EventEP03_KerriganVoxEcho12", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.0, 2.0, 4.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_cinematicKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1060)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("EventEP03_ThunderOneShot", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundStopAllTriggerSounds(true);
    UnitSetPosition(gv_cinematicKerrigan, PointFromId(1060), false);
    libNtve_gf_MakeUnitFacePoint(gv_cinematicKerrigan, PointFromId(7), 0.0);
    UnitIssueOrder(gv_cinematicKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(7)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1054), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1055), 4.0, -1, 10, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.5, 1.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00036", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(623), 2.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "Mission_Epilogue03|Line00018", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00053", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1056), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1057), SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue03|Line00003", true), c_soundIndexAny)), -1, 10, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 10.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 1.0);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "Mission_Epilogue03|Line00003", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_MoveVoidCrystal(2, (gv_voidCrystals[2].lv_normalizedGroundHeightStartAngle + 10.0));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(157), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(255), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue03|Line00004", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue03|Line00005", true), c_soundIndexAny))), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "Mission_Epilogue03|Line00004", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 25.0, 2.0);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00005", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "Mission_Epilogue03|Line00006", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00070", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto5CDE532B_g;
    int auto5CDE532B_u;
    unit auto5CDE532B_var;
    unitgroup auto91B05846_g;
    int auto91B05846_u;
    unit auto91B05846_var;
    unitgroup auto70AE047D_g;
    int auto70AE047D_u;
    unit auto70AE047D_var;
    unitgroup autoC6982DA1_g;
    int autoC6982DA1_u;
    unit autoC6982DA1_var;
    unitgroup auto0D1FA468_g;
    int auto0D1FA468_u;
    unit auto0D1FA468_var;
    const int auto598C7B84_ae = 14;
    const int auto598C7B84_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5CDE532B_g = gv_cinematicTempUnits;
    auto5CDE532B_u = UnitGroupCount(auto5CDE532B_g, c_unitCountAll);
    for (;; auto5CDE532B_u -= 1) {
        auto5CDE532B_var = UnitGroupUnitFromEnd(auto5CDE532B_g, auto5CDE532B_u);
        if (auto5CDE532B_var == null) { break; }
        UnitRemove(auto5CDE532B_var);
    }
    auto91B05846_g = UnitGroup("ZergDropPod", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto91B05846_u = UnitGroupCount(auto91B05846_g, c_unitCountAll);
    for (;; auto91B05846_u -= 1) {
        auto91B05846_var = UnitGroupUnitFromEnd(auto91B05846_g, auto91B05846_u);
        if (auto91B05846_var == null) { break; }
        UnitRemove(auto91B05846_var);
    }
    auto70AE047D_g = UnitGroup("ZergDropPodLarge", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto70AE047D_u = UnitGroupCount(auto70AE047D_g, c_unitCountAll);
    for (;; auto70AE047D_u -= 1) {
        auto70AE047D_var = UnitGroupUnitFromEnd(auto70AE047D_g, auto70AE047D_u);
        if (auto70AE047D_var == null) { break; }
        UnitRemove(auto70AE047D_var);
    }
    autoC6982DA1_g = UnitGroup("ZergDropPodCreep", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6982DA1_u = UnitGroupCount(autoC6982DA1_g, c_unitCountAll);
    for (;; autoC6982DA1_u -= 1) {
        autoC6982DA1_var = UnitGroupUnitFromEnd(autoC6982DA1_g, autoC6982DA1_u);
        if (autoC6982DA1_var == null) { break; }
        UnitRemove(autoC6982DA1_var);
    }
    auto0D1FA468_g = gv_cinematicHiddenUnits;
    auto0D1FA468_u = UnitGroupCount(auto0D1FA468_g, c_unitCountAll);
    for (;; auto0D1FA468_u -= 1) {
        auto0D1FA468_var = UnitGroupUnitFromEnd(auto0D1FA468_g, auto0D1FA468_u);
        if (auto0D1FA468_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0D1FA468_var, true);
        libNtve_gf_PauseUnit(auto0D1FA468_var, false);
    }
    libVCMI_gf_SpawnLarvaForHatchery(UnitFromId(6), 3);
    TriggerExecute(gt_VoidCrystalInitialLocations, true, false);
    TriggerStop(gt_IntroShadowUnits);
    TriggerStop(gt_IntroShadowUnitsAttack);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_amon), c_animNameDefault);
    SoundStop(gv_introStinger, true);
    SoundStop(gv_introChargeSound, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    GameTimeOfDayPause(false);
    ActorSend(ActorFromDoodad(DoodadFromId(1152)), "SetVisibility 1");
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_AMON, libNtve_ge_AllianceSetting_Enemy);
    gv_crystalShieldEffectEnabled = true;
    lv_i = 1;
    for ( ; ( (auto598C7B84_ai >= 0 && lv_i <= auto598C7B84_ae) || (auto598C7B84_ai < 0 && lv_i >= auto598C7B84_ae) ) ; lv_i += auto598C7B84_ai ) {
        CreepModify(RegionGetCenter(RegionFromName(("Initial Creep " + IntToString(lv_i)))), (libNtve_gf_WidthOfRegion(RegionFromName(("Initial Creep " + IntToString(lv_i)))) / 2.0), true, false);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), true, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeGame);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Shadow Units
//--------------------------------------------------------------------------------------------------
bool gt_IntroShadowUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE57E75DC_n = 32;
    int autoE57E75DC_i;
    const int auto47A99D31_n = 12;
    int auto47A99D31_i;
    const int auto859E6304_n = 8;
    int auto859E6304_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoE57E75DC_i = 1; autoE57E75DC_i <= autoE57E75DC_n; autoE57E75DC_i += 1) {
        UnitCreate(1, "Zergling", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits1, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Zergling", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits2, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Mutalisk", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits3, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    for (auto47A99D31_i = 1; auto47A99D31_i <= auto47A99D31_n; auto47A99D31_i += 1) {
        UnitCreate(1, "Marine", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits2, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Zealot", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits2, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits2, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Stalker", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits2, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Ghost", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits2, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Banshee", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits3, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits3, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Marine", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits1, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Hydralisk", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits1, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    for (auto859E6304_i = 1; auto859E6304_i <= auto859E6304_n; auto859E6304_i += 1) {
        UnitCreate(1, "Zealot", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits1, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Stalker", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits1, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitCreate(1, "Ghost", 0, gv_pLAYER_04_AMON, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_04_AMON, 1);
        UnitGroupAdd(gv_introShadowUnits1, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroShadowUnits_Init () {
    gt_IntroShadowUnits = TriggerCreate("gt_IntroShadowUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Shadow Units Attack
//--------------------------------------------------------------------------------------------------
bool gt_IntroShadowUnitsAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC981CD41_n = 3;
    int autoC981CD41_i;
    unitgroup auto0DAB6F32_g;
    int auto0DAB6F32_u;
    unit auto0DAB6F32_var;
    unitgroup auto43C9541E_g;
    int auto43C9541E_u;
    unit auto43C9541E_var;
    unitgroup auto16893491_g;
    int auto16893491_u;
    unit auto16893491_var;
    unitgroup autoBFEC06A9_g;
    int autoBFEC06A9_u;
    unit autoBFEC06A9_var;
    unitgroup auto4E78A72D_g;
    int auto4E78A72D_u;
    unit auto4E78A72D_var;
    unitgroup auto2F0806B9_g;
    int auto2F0806B9_u;
    unit auto2F0806B9_var;
    unitgroup auto9575DA5B_g;
    int auto9575DA5B_u;
    unit auto9575DA5B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoC981CD41_i = 1; autoC981CD41_i <= autoC981CD41_n; autoC981CD41_i += 1) {
        auto0DAB6F32_g = gv_introShadowUnits1;
        auto0DAB6F32_u = UnitGroupCount(auto0DAB6F32_g, c_unitCountAll);
        for (;; auto0DAB6F32_u -= 1) {
            auto0DAB6F32_var = UnitGroupUnitFromEnd(auto0DAB6F32_g, auto0DAB6F32_u);
            if (auto0DAB6F32_var == null) { break; }
            if ((RandomInt(1, 12) == 1)) {
                UnitIssueOrder(auto0DAB6F32_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(54))), c_orderQueueReplace);
            }

        }
        auto43C9541E_g = gv_introShadowUnits3;
        auto43C9541E_u = UnitGroupCount(auto43C9541E_g, c_unitCountAll);
        for (;; auto43C9541E_u -= 1) {
            auto43C9541E_var = UnitGroupUnitFromEnd(auto43C9541E_g, auto43C9541E_u);
            if (auto43C9541E_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto43C9541E_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(56))), c_orderQueueReplace);
            }

        }
        Wait(1.1, c_timeGame);
    }
    auto16893491_g = gv_introShadowUnits1;
    auto16893491_u = UnitGroupCount(auto16893491_g, c_unitCountAll);
    for (;; auto16893491_u -= 1) {
        auto16893491_var = UnitGroupUnitFromEnd(auto16893491_g, auto16893491_u);
        if (auto16893491_var == null) { break; }
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(auto16893491_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1058)), c_orderQueueReplace);
        }

    }
    Wait(0.5, c_timeGame);
    autoBFEC06A9_g = gv_introShadowUnits1;
    autoBFEC06A9_u = UnitGroupCount(autoBFEC06A9_g, c_unitCountAll);
    for (;; autoBFEC06A9_u -= 1) {
        autoBFEC06A9_var = UnitGroupUnitFromEnd(autoBFEC06A9_g, autoBFEC06A9_u);
        if (autoBFEC06A9_var == null) { break; }
        UnitIssueOrder(autoBFEC06A9_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1058)), c_orderQueueReplace);
    }
    Wait(0.5, c_timeGame);
    auto4E78A72D_g = gv_introShadowUnits2;
    auto4E78A72D_u = UnitGroupCount(auto4E78A72D_g, c_unitCountAll);
    for (;; auto4E78A72D_u -= 1) {
        auto4E78A72D_var = UnitGroupUnitFromEnd(auto4E78A72D_g, auto4E78A72D_u);
        if (auto4E78A72D_var == null) { break; }
        UnitIssueOrder(auto4E78A72D_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1058)), c_orderQueueReplace);
    }
    auto2F0806B9_g = gv_introShadowUnits3;
    auto2F0806B9_u = UnitGroupCount(auto2F0806B9_g, c_unitCountAll);
    for (;; auto2F0806B9_u -= 1) {
        auto2F0806B9_var = UnitGroupUnitFromEnd(auto2F0806B9_g, auto2F0806B9_u);
        if (auto2F0806B9_var == null) { break; }
        UnitIssueOrder(auto2F0806B9_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1058)), c_orderQueueReplace);
    }
    auto9575DA5B_g = gv_introShadowUnits1;
    auto9575DA5B_u = UnitGroupCount(auto9575DA5B_g, c_unitCountAll);
    for (;; auto9575DA5B_u -= 1) {
        auto9575DA5B_var = UnitGroupUnitFromEnd(auto9575DA5B_g, auto9575DA5B_u);
        if (auto9575DA5B_var == null) { break; }
        UnitIssueOrder(auto9575DA5B_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1058)), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroShadowUnitsAttack_Init () {
    gt_IntroShadowUnitsAttack = TriggerCreate("gt_IntroShadowUnitsAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal Initial Locations Intro
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystalInitialLocationsIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_MoveVoidCrystal(1, (gv_voidCrystals[1].lv_normalizedGroundHeightStartAngle - 130.0));
    gf_MoveVoidCrystal(2, (gv_voidCrystals[2].lv_normalizedGroundHeightStartAngle - 120.0));
    gf_MoveVoidCrystal(3, (gv_voidCrystals[3].lv_normalizedGroundHeightStartAngle - 321.0));
    gf_MoveVoidCrystal(4, (gv_voidCrystals[4].lv_normalizedGroundHeightStartAngle + 185.0));
    gf_MoveVoidCrystal(5, (gv_voidCrystals[5].lv_normalizedGroundHeightEndAngle + 30.0));
    gf_MoveVoidCrystal(6, (gv_voidCrystals[6].lv_normalizedGroundHeightStartAngle + 120.0));
    gf_MoveVoidCrystal(7, (gv_voidCrystals[7].lv_normalizedGroundHeightStartAngle - 114.0));
    gf_MoveVoidCrystal(8, (gv_voidCrystals[8].lv_normalizedGroundHeightStartAngle + 310.0));
    gf_MoveVoidCrystal(9, (gv_voidCrystals[9].lv_normalizedGroundHeightStartAngle + 170.0));
    gf_MoveVoidCrystal(10, (gv_voidCrystals[10].lv_normalizedGroundHeightStartAngle + 295.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystalInitialLocationsIntro_Init () {
    gt_VoidCrystalInitialLocationsIntro = TriggerCreate("gt_VoidCrystalInitialLocationsIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9B7CA2E9_g;
    int auto9B7CA2E9_u;
    unit auto9B7CA2E9_var;
    unitgroup autoBB83A98C_g;
    int autoBB83A98C_u;
    unit autoBB83A98C_var;
    unitgroup auto29409E66_g;
    int auto29409E66_u;
    unit auto29409E66_var;
    unitgroup auto4B43EF69_g;
    int auto4B43EF69_u;
    unit auto4B43EF69_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto9B7CA2E9_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9B7CA2E9_u = UnitGroupCount(auto9B7CA2E9_g, c_unitCountAll);
    for (;; auto9B7CA2E9_u -= 1) {
        auto9B7CA2E9_var = UnitGroupUnitFromEnd(auto9B7CA2E9_g, auto9B7CA2E9_u);
        if (auto9B7CA2E9_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto9B7CA2E9_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto9B7CA2E9_var);
            libNtve_gf_PauseUnit(auto9B7CA2E9_var, true);
        }

    }
    autoBB83A98C_g = UnitGroup(null, gv_pLAYER_04_AMON, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB83A98C_u = UnitGroupCount(autoBB83A98C_g, c_unitCountAll);
    for (;; autoBB83A98C_u -= 1) {
        autoBB83A98C_var = UnitGroupUnitFromEnd(autoBB83A98C_g, autoBB83A98C_u);
        if (autoBB83A98C_var == null) { break; }
        UnitRemove(autoBB83A98C_var);
    }
    auto29409E66_g = UnitGroup(null, gv_pLAYER_01_USER, gv_worldCleaverBaseAreas[1].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29409E66_u = UnitGroupCount(auto29409E66_g, c_unitCountAll);
    for (;; auto29409E66_u -= 1) {
        auto29409E66_var = UnitGroupUnitFromEnd(auto29409E66_g, auto29409E66_u);
        if (auto29409E66_var == null) { break; }
        UnitGroupAdd(gv_midPlayerUnits, auto29409E66_var);
        libNtve_gf_PauseUnit(auto29409E66_var, false);
        UnitIssueOrder(auto29409E66_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto29409E66_var), 16.0, 315.0)), c_orderQueueReplace);
    }
    auto4B43EF69_g = UnitGroup(null, gv_pLAYER_02_RAYNOR, gv_worldCleaverBaseAreas[1].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B43EF69_u = UnitGroupCount(auto4B43EF69_g, c_unitCountAll);
    for (;; auto4B43EF69_u -= 1) {
        auto4B43EF69_var = UnitGroupUnitFromEnd(auto4B43EF69_g, auto4B43EF69_u);
        if (auto4B43EF69_var == null) { break; }
        UnitGroupAdd(gv_midWorkers, auto4B43EF69_var);
        libNtve_gf_PauseUnit(auto4B43EF69_var, false);
        UnitIssueOrder(auto4B43EF69_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto4B43EF69_var), 16.0, 315.0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoAEA4C307_g;
    int autoAEA4C307_u;
    unit autoAEA4C307_var;
    unitgroup auto37021ED7_g;
    int auto37021ED7_u;
    unit auto37021ED7_var;
    unitgroup autoC45CF08D_g;
    int autoC45CF08D_u;
    unit autoC45CF08D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(33), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(497), 4.0, -1, 10, true);
    TriggerExecute(gt_MidMusic, true, false);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 1.0, 1.0, 4.5);
    TriggerExecute(gt_MidAmonMovement, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(4.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("PEpilogue03_WorldCleaverSpawn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Void_Amon_Cliff_Effect", gv_worldCleaverBaseAreas[1].lv_killZone);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStart", "Void_Amon_Ground_Effect", gv_worldCleaverBaseAreas[1].lv_killZone);
    Wait(3.3, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1043), 2.0, -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Earthquake", 0.0, 1.0, 4.0);
    SoundPlayForPlayer(SoundLink("PEpilogue03_WorldCleaverExplosion", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoAEA4C307_g = UnitGroup(null, c_playerAny, gv_worldCleaverBaseAreas[1].lv_killZone, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAEA4C307_u = UnitGroupCount(autoAEA4C307_g, c_unitCountAll);
    for (;; autoAEA4C307_u -= 1) {
        autoAEA4C307_var = UnitGroupUnitFromEnd(autoAEA4C307_g, autoAEA4C307_u);
        if (autoAEA4C307_var == null) { break; }
        if ((UnitGetType(autoAEA4C307_var) != "AmonShardD")) {
            UnitBehaviorRemove(autoAEA4C307_var, "ZergBuildingDies6", 1);
            UnitBehaviorRemove(autoAEA4C307_var, "ZergBuildingDies9", 1);
            if ((gf_UnitisArmyforPlayer(autoAEA4C307_var, gv_pLAYER_01_USER) == true)) {
                gv_unitsLostToTerrainDestruction += 1;
            }

            UnitKill(autoAEA4C307_var);
        }

    }
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Void_Amon_Cliff_Effect", gv_worldCleaverBaseAreas[1].lv_killZone);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Void_Amon_Ground_Effect", gv_worldCleaverBaseAreas[1].lv_killZone);
    Wait(0.5, c_timeGame);
    TerrainShowRegion(gv_worldCleaverBaseAreas[1].lv_terrainDestructionRegion, false);
    libNtve_gf_ShowHideDoodadsInRegion(true, gv_worldCleaverBaseAreas[1].lv_killZone, "Void_CliffRocks_Edge");
    libNtve_gf_ShowHideDoodadsInRegion(true, gv_worldCleaverBaseAreas[1].lv_killZone, "Void_CliffRocks_Mass_A");
    libNtve_gf_ShowHideDoodadsInRegion(false, gv_worldCleaverBaseAreas[1].lv_killZone, "Void_Cliff_Rocks");
    auto37021ED7_g = gv_worldCleaverBaseAreas[1].lv_pathingBlockers;
    auto37021ED7_u = UnitGroupCount(auto37021ED7_g, c_unitCountAll);
    for (;; auto37021ED7_u -= 1) {
        auto37021ED7_var = UnitGroupUnitFromEnd(auto37021ED7_g, auto37021ED7_u);
        if (auto37021ED7_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto37021ED7_var, true);
    }
    Wait(0.0625, c_timeGame);
    autoC45CF08D_g = UnitGroup(null, c_playerAny, gv_worldCleaverBaseAreas[1].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC45CF08D_u = UnitGroupCount(autoC45CF08D_g, c_unitCountAll);
    for (;; autoC45CF08D_u -= 1) {
        autoC45CF08D_var = UnitGroupUnitFromEnd(autoC45CF08D_g, autoC45CF08D_u);
        if (autoC45CF08D_var == null) { break; }
        if ((UnitGroupHasUnit(gv_worldCleaverBaseAreas[1].lv_pathingBlockers, autoC45CF08D_var) == false) && (UnitGetType(autoC45CF08D_var) != "AmonShardD") && (UnitGetType(autoC45CF08D_var) != "BlackoutDummyLarge") && (UnitGetType(autoC45CF08D_var) != "BlackoutDummySmall")) {
            if ((UnitGetOwner(autoC45CF08D_var) == gv_pLAYER_01_USER) && (UnitTypeTestAttribute(UnitGetType(autoC45CF08D_var), c_unitAttributeStructure) == false)) {
                gv_unitsLostToTerrainDestruction += 1;
            }

            UnitKill(autoC45CF08D_var);
        }

    }
    Wait(4.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1755), 3.0, -1, 10, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 10.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 12.0, 0.25);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00012", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 0.25);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 0.25);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto727E8A7E_g;
    int auto727E8A7E_u;
    unit auto727E8A7E_var;
    unitgroup auto8D50A255_g;
    int auto8D50A255_u;
    unit auto8D50A255_var;
    unitgroup auto8E8C5A7C_g;
    int auto8E8C5A7C_u;
    unit auto8E8C5A7C_var;
    unitgroup autoC9845B00_g;
    int autoC9845B00_u;
    unit autoC9845B00_var;
    unitgroup autoA757989F_g;
    int autoA757989F_u;
    unit autoA757989F_var;
    unitgroup auto7B7841FC_g;
    int auto7B7841FC_u;
    unit auto7B7841FC_var;
    unitgroup autoFFF47B56_g;
    int autoFFF47B56_u;
    unit autoFFF47B56_var;
    unitgroup auto1027AA7E_g;
    int auto1027AA7E_u;
    unit auto1027AA7E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto727E8A7E_g = gv_cinematicTempUnits;
    auto727E8A7E_u = UnitGroupCount(auto727E8A7E_g, c_unitCountAll);
    for (;; auto727E8A7E_u -= 1) {
        auto727E8A7E_var = UnitGroupUnitFromEnd(auto727E8A7E_g, auto727E8A7E_u);
        if (auto727E8A7E_var == null) { break; }
        UnitRemove(auto727E8A7E_var);
    }
    auto8D50A255_g = gv_cinematicPausedUnits;
    auto8D50A255_u = UnitGroupCount(auto8D50A255_g, c_unitCountAll);
    for (;; auto8D50A255_u -= 1) {
        auto8D50A255_var = UnitGroupUnitFromEnd(auto8D50A255_g, auto8D50A255_u);
        if (auto8D50A255_var == null) { break; }
        libNtve_gf_PauseUnit(auto8D50A255_var, false);
    }
    if ((gv_cinematicCompleted == false)) {
        auto8E8C5A7C_g = gv_midWorkers;
        auto8E8C5A7C_u = UnitGroupCount(auto8E8C5A7C_g, c_unitCountAll);
        for (;; auto8E8C5A7C_u -= 1) {
            auto8E8C5A7C_var = UnitGroupUnitFromEnd(auto8E8C5A7C_g, auto8E8C5A7C_u);
            if (auto8E8C5A7C_var == null) { break; }
            UnitIssueOrder(auto8E8C5A7C_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetPosition(auto8E8C5A7C_var, RegionRandomPoint(RegionFromId(11)), false);
        }
        autoC9845B00_g = gv_midPlayerUnits;
        autoC9845B00_u = UnitGroupCount(autoC9845B00_g, c_unitCountAll);
        for (;; autoC9845B00_u -= 1) {
            autoC9845B00_var = UnitGroupUnitFromEnd(autoC9845B00_g, autoC9845B00_u);
            if (autoC9845B00_var == null) { break; }
            UnitIssueOrder(autoC9845B00_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetPosition(autoC9845B00_var, RegionRandomPoint(RegionFromId(11)), false);
        }
        Wait(0.0625, c_timeGame);
        autoA757989F_g = UnitGroup(null, c_playerAny, gv_worldCleaverBaseAreas[1].lv_killZone, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA757989F_u = UnitGroupCount(autoA757989F_g, c_unitCountAll);
        for (;; autoA757989F_u -= 1) {
            autoA757989F_var = UnitGroupUnitFromEnd(autoA757989F_g, autoA757989F_u);
            if (autoA757989F_var == null) { break; }
            if ((UnitGetType(autoA757989F_var) != "AmonShardD")) {
                UnitBehaviorRemove(autoA757989F_var, "ZergBuildingDies6", 1);
                UnitBehaviorRemove(autoA757989F_var, "ZergBuildingDies9", 1);
                if ((gf_UnitisArmyforPlayer(autoA757989F_var, gv_pLAYER_01_USER) == true)) {
                    gv_unitsLostToTerrainDestruction += 1;
                }

                UnitKill(autoA757989F_var);
            }

        }
        auto7B7841FC_g = gv_worldCleaverBaseAreas[1].lv_pathingBlockers;
        auto7B7841FC_u = UnitGroupCount(auto7B7841FC_g, c_unitCountAll);
        for (;; auto7B7841FC_u -= 1) {
            auto7B7841FC_var = UnitGroupUnitFromEnd(auto7B7841FC_g, auto7B7841FC_u);
            if (auto7B7841FC_var == null) { break; }
            libNtve_gf_ShowHideUnit(auto7B7841FC_var, true);
        }
        Wait(0.0625, c_timeGame);
        autoFFF47B56_g = UnitGroup(null, c_playerAny, gv_worldCleaverBaseAreas[1].lv_killZone, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFFF47B56_u = UnitGroupCount(autoFFF47B56_g, c_unitCountAll);
        for (;; autoFFF47B56_u -= 1) {
            autoFFF47B56_var = UnitGroupUnitFromEnd(autoFFF47B56_g, autoFFF47B56_u);
            if (autoFFF47B56_var == null) { break; }
            if ((UnitGroupHasUnit(gv_worldCleaverBaseAreas[1].lv_pathingBlockers, autoFFF47B56_var) == false)) {
                if ((UnitGetOwner(autoFFF47B56_var) == gv_pLAYER_01_USER) && (UnitTypeTestAttribute(UnitGetType(autoFFF47B56_var), c_unitAttributeStructure) == false)) {
                    gv_unitsLostToTerrainDestruction += 1;
                }

                UnitKill(autoFFF47B56_var);
            }

        }
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_RAYNOR, gv_worldCleaverBaseAreas[1].lv_killZone, false);
    auto1027AA7E_g = gv_midWorkers;
    auto1027AA7E_u = UnitGroupCount(auto1027AA7E_g, c_unitCountAll);
    for (;; auto1027AA7E_u -= 1) {
        auto1027AA7E_var = UnitGroupUnitFromEnd(auto1027AA7E_g, auto1027AA7E_u);
        if (auto1027AA7E_var == null) { break; }
        AISetUnitScriptControlled(auto1027AA7E_var, false);
    }
    if ((gv_midMusicComplete == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    if ((gv_cinematicCompleted == false)) {
        CameraShakeStop(gv_pLAYER_01_USER);
        TerrainShowRegion(gv_worldCleaverBaseAreas[1].lv_terrainDestructionRegion, false);
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_worldCleaverBaseAreas[1].lv_killZone, "Void_CliffRocks_Edge");
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_worldCleaverBaseAreas[1].lv_killZone, "Void_CliffRocks_Mass_A");
        libNtve_gf_ShowHideDoodadsInRegion(false, gv_worldCleaverBaseAreas[1].lv_killZone, "Void_Cliff_Rocks");
    }

    TriggerStop(gt_MidAmonMovement);
    ActorSend(gv_worldCleaverBaseAreas[1].lv_amonDoodad, "Signal MoveBackInstant");
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Void_Amon_Cliff_Effect", gv_worldCleaverBaseAreas[1].lv_killZone);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal WorkStop", "Void_Amon_Ground_Effect", gv_worldCleaverBaseAreas[1].lv_killZone);
    gf_BlackOutTerraininRegion(gv_worldCleaverBaseAreas[1].lv_terrainDestructionRegion);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_midMusicComplete = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    lv_soundtrack = "PEpilogue03_Music_Mid";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_midMusicComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Amon Movement
//--------------------------------------------------------------------------------------------------
bool gt_MidAmonMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(gv_worldCleaverBaseAreas[1].lv_amonDoodad, "Signal MoveForward");
    Wait(5.0, c_timeGame);
    Wait(3.0, c_timeGame);
    ActorSend(gv_worldCleaverBaseAreas[1].lv_amonDoodad, "Signal Spell");
    Wait(6.0, c_timeGame);
    ActorSend(gv_worldCleaverBaseAreas[1].lv_amonDoodad, "Signal MoveBack");
    Wait(4.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidAmonMovement_Init () {
    gt_MidAmonMovement = TriggerCreate("gt_MidAmonMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto15F43B22_ae;
    const int auto15F43B22_ai = 1;
    unitgroup auto60535767_g;
    int auto60535767_u;
    unit auto60535767_var;
    unitgroup autoFA70AD2C_g;
    int autoFA70AD2C_u;
    unit autoFA70AD2C_var;
    unitgroup auto3FDF98CF_g;
    int auto3FDF98CF_u;
    unit auto3FDF98CF_var;
    unitgroup autoF4AE0AA3_g;
    int autoF4AE0AA3_u;
    unit autoF4AE0AA3_var;
    unitgroup auto628E1F96_g;
    int auto628E1F96_u;
    unit auto628E1F96_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    TriggerStop(gt_VoidCrystalController);
    gv_crystalShieldEffectEnabled = false;
    auto15F43B22_ae = gv_numberOfCrystals;
    lv_i = 1;
    for ( ; ( (auto15F43B22_ai >= 0 && lv_i <= auto15F43B22_ae) || (auto15F43B22_ai < 0 && lv_i >= auto15F43B22_ae) ) ; lv_i += auto15F43B22_ai ) {
        TimerStart(gv_voidCrystals[lv_i].lv_vulnerabilityDelay, 9999.0, false, c_timeGame);
    }
    TerrainShowRegion(RegionFromId(73), false);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(73), null);
    ActorSend(ActorFromDoodad(DoodadFromId(1473)), "SetOpacity");
    UnitRemove(gv_kerrigan);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto60535767_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto60535767_u = UnitGroupCount(auto60535767_g, c_unitCountAll);
    for (;; auto60535767_u -= 1) {
        auto60535767_var = UnitGroupUnitFromEnd(auto60535767_g, auto60535767_u);
        if (auto60535767_var == null) { break; }
        UnitRemove(auto60535767_var);
    }
    autoFA70AD2C_g = UnitGroup(null, gv_pLAYER_02_RAYNOR, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFA70AD2C_u = UnitGroupCount(autoFA70AD2C_g, c_unitCountAll);
    for (;; autoFA70AD2C_u -= 1) {
        autoFA70AD2C_var = UnitGroupUnitFromEnd(autoFA70AD2C_g, autoFA70AD2C_u);
        if (autoFA70AD2C_var == null) { break; }
        UnitRemove(autoFA70AD2C_var);
    }
    auto3FDF98CF_g = UnitGroup(null, gv_pLAYER_03_ARTANIS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3FDF98CF_u = UnitGroupCount(auto3FDF98CF_g, c_unitCountAll);
    for (;; auto3FDF98CF_u -= 1) {
        auto3FDF98CF_var = UnitGroupUnitFromEnd(auto3FDF98CF_g, auto3FDF98CF_u);
        if (auto3FDF98CF_var == null) { break; }
        UnitRemove(auto3FDF98CF_var);
    }
    autoF4AE0AA3_g = UnitGroup(null, gv_pLAYER_04_AMON, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF4AE0AA3_u = UnitGroupCount(autoF4AE0AA3_g, c_unitCountAll);
    for (;; autoF4AE0AA3_u -= 1) {
        autoF4AE0AA3_var = UnitGroupUnitFromEnd(autoF4AE0AA3_g, autoF4AE0AA3_u);
        if (autoF4AE0AA3_var == null) { break; }
        if ((UnitGetType(autoF4AE0AA3_var) != "VoidChasm") && (UnitGetType(autoF4AE0AA3_var) != "VoidChasmDormant")) {
            UnitRemove(autoF4AE0AA3_var);
        }

    }
    auto628E1F96_g = UnitGroup(null, gv_pLAYER_05_AMON_NEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto628E1F96_u = UnitGroupCount(auto628E1F96_g, c_unitCountAll);
    for (;; auto628E1F96_u -= 1) {
        auto628E1F96_var = UnitGroupUnitFromEnd(auto628E1F96_g, auto628E1F96_u);
        if (auto628E1F96_var == null) { break; }
        UnitRemove(auto628E1F96_var);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganEpilogue03", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(625));
    gv_cinematicKerrigan = UnitLastCreated();
    UnitSetState(gv_cinematicKerrigan, c_unitStateFidget, false);
    libNtve_gf_ChangeUnitDamage(gv_cinematicKerrigan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitBehaviorAdd(gv_cinematicKerrigan, "SuppressCollision", gv_cinematicKerrigan, 1);
    UnitBehaviorAdd(gv_cinematicKerrigan, "KerriganEpilogue03Walk", gv_cinematicKerrigan, 1);
    UnitSetPropertyFixed(gv_cinematicKerrigan, c_unitPropHeight, 2.0);
    UnitSetPropertyFixed(gv_cinematicKerrigan, c_unitPropMovementSpeed, 2.0);
    libNtve_gf_ShowHideUnit(gv_amon, false);
    libNtve_gf_ShowHideUnit(gv_victoryAmon, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_ascentDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(156), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(8), 4.0, -1, 10, true);
    UnitIssueOrder(gv_cinematicKerrigan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(624)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicKerrigan, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(624), 1.0, PointGetFacing(PointFromId(624)))), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_cinematicKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    UnitSetHeight(gv_victoryAmon, 36.0, 8.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PEpilogue03_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlayForPlayer(SoundLink("Event_EP03_AmonAscent", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_amonAscent = SoundLastPlayed();
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 10.0, 1.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "Mission_Epilogue03|Line00042", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundStop(gv_amonAscent, true);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue03|Line00043", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    lv_ascentDuration = (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue03|Line00044", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Epilogue03|Line00045", true), c_soundIndexAny)));
    UnitSetHeight(gv_cinematicKerrigan, 16.0, lv_ascentDuration);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cinematicKerrigan), c_animNameDefault, "Walk", c_animFlagPlayForever, c_animTimeDefault);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(260), lv_ascentDuration, -1, 10.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 40.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 50.0, 2.0);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "Mission_Epilogue03|Line00044", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    UnitSetHeight(gv_victoryAmon, 49.0, (lv_ascentDuration - 1));
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicKerrigan, "Mission_Epilogue03|Line00045", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 1.0);
    libNtve_gf_AttachModelToUnit(gv_cinematicKerrigan, "Void_Kerrigan_FinalCharge", "Ref_Center");
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Birth", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_cinematicKerrigan), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(gv_cinematicKerrigan), c_animNameDefault, 0.3333);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 3.0, 0.0, 3.333);
    SoundPlayForPlayer(SoundLink("Event_EP03_KerriganFinalBlastCharge", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_victoryChargeSound = SoundLastPlayed();
    CinematicFade(false, 3.333, c_fadeStyleNormal, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, false);
    Wait(3.333, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_amonAscent, true);
    SoundStop(gv_victoryChargeSound, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGameQ_Init();
    gt_VoidCrystalInit_Init();
    gt_VoidCrystalController_Init();
    gt_VoidCrystalInitialLocations_Init();
    gt_VoidCrystalPathsQ_Init();
    gt_VoidCrystalDies_Init();
    gt_VoidCrystalDiesQ_Init();
    gt_AutosavesQ_Init();
    gt_VoidChasmInit_Init();
    gt_VoidChasmController_Init();
    gt_VoidChasmUnitSpawned_Init();
    gt_VoidChasmDies_Init();
    gt_TormentConstructInit_Init();
    gt_TormentConstructController_Init();
    gt_TormentConstructDies_Init();
    gt_RampageConstructInit_Init();
    gt_RampageConstructController_Init();
    gt_RampageConstructDies_Init();
    gt_OblivionConstructInit_Init();
    gt_OblivionConstructController_Init();
    gt_OblivionConstructDies_Init();
    gt_FirstConstructQ_Init();
    gt_WorldCleaverInit_Init();
    gt_WorldCleaverSequence_Init();
    gt_WorldCleaverFieldController_Init();
    gt_CleaveBase1Q_Init();
    gt_CleaveBase1AftermathQ_Init();
    gt_CleaveBase2Q_Init();
    gt_CleaveBase3Q_Init();
    gt_CleaveBase4Q_Init();
    gt_CleaveBase5Q_Init();
    gt_CleaveBase6Q_Init();
    gt_CleaveBase7Q_Init();
    gt_CleaveBase8Q_Init();
    gt_CleaveBase9Q_Init();
    gt_KerriganDies_Init();
    gt_CreepTumorBuild_Init();
    gt_QuantumRayCheck_Init();
    gt_QuantumRayUsed_Init();
    gt_QuantumRayQ_Init();
    gt_CelestialRadianceFlash_Init();
    gt_CelestialRadianceQ_Init();
    gt_ArtanisWaves_Init();
    gt_ArtanisAttack1Q_Init();
    gt_ArtanisAttack2Q_Init();
    gt_ArtanisAttack3Q_Init();
    gt_ArtanisFirstVoidChasmBypass_Init();
    gt_RaynorWaves_Init();
    gt_RaynorAttack1Q_Init();
    gt_RaynorAttack2Q_Init();
    gt_RaynorAttack3Q_Init();
    gt_StartAI_Init();
    gt_AIUpgradesCasualNormal_Init();
    gt_AIUpgradesHardBrutal_Init();
    gt_AlliesBullyBuilding_Init();
    gt_DefeatBaseDead_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TripleTapCounter_Init();
    gt_KerriganKills_Init();
    gt_AchievementVictorywithoutmorphingSpire_Init();
    gt_ObjectiveDestroyCrystalsCreate_Init();
    gt_ObjectiveDestroyCrystalsComplete_Init();
    gt_ObjectiveDestroyCrystalsUpdate_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroShadowUnits_Init();
    gt_IntroShadowUnitsAttack_Init();
    gt_VoidCrystalInitialLocationsIntro_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidMusic_Init();
    gt_MidAmonMovement_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
