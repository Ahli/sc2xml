//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Sky Shield
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_MOEBIUS = 2;
const int gv_pLAYER_03_PLATFORM_STABILIZER = 3;
const int gv_pLAYER_04_RAYNOR_AI = 4;
const int gv_pLAYER_05_RAYNOR_BASE_1 = 5;
const int gv_pLAYER_06_RAYNOR_BASE_2 = 6;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_Stabilizer {
    unit lv_stabilizerUnit;
    region lv_secureZone;
    bool lv_secured;
    region lv_stabilizerRegion;
    int lv_ping;
    revealer lv_revealer;
    point lv_dropshipEntry;
    point lv_dropshipExit;
    unit[4] lv_sCVs;
    point lv_supplyDepotPoint1;
    point lv_supplyDepotPoint2;
    point lv_sensorTowerPoint;
    point lv_bunkerPoint;
    point lv_hullBreachLocation;
};

struct gs_RECORD_Scramblers {
    unit lv_scrambler;
    int lv_ping;
    int lv_eMPCooldown;
    bool lv_scramblerDestroyed;
    region lv_region;
    bool lv_disabled;
};

struct gs_RECORD_CrashingDebris {
    point lv_point;
    timer lv_timer;
    actor lv_actor;
};

struct gs_RECORD_HolesInGround {
    region lv_region;
    point lv_point;
    bool lv_triggered;
};

struct gs_RECORD_ExplodingCliffBuilding {
    region lv_region;
    bool lv_triggered;
};

struct gs_RECORD_DamagedCliffBuilding {
    region lv_region;
    bool lv_triggered;
};

struct gs_RECORD_KorhalDebris {
    region lv_region;
    bool lv_triggered;
};

struct gs_RECORD_Reinforcements {
    point lv_spawn;
    point lv_goto;
    point lv_patrolPointA;
    point lv_patrolPointB;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
gs_RECORD_Stabilizer[6] gv_stabilizers;
int gv_stabilizersSecured;
int gv_stabilizersNeeded;
int gv_activeStabilizer;
bool gv_repairTransmissionActive;
bool gv_autosave1Triggered;
bool gv_autosave2Triggered;
int gv_finalStabilizerIndex;
fixed gv_additionalTimePostRepair;
fixed gv_skyshieldStartingTime;
timer gv_skyshieldTimer;
int gv_skyshieldTimerWindow;
int gv_basesReclaimed;
gs_RECORD_Scramblers[4] gv_scramblers;
int gv_scramblersDestroyed;
int gv_scramblersNeeded;
gs_RECORD_CrashingDebris[95] gv_crashingDebris;
gs_RECORD_ExplodingCliffBuilding[3] gv_explodingCliffBuildings;
gs_RECORD_DamagedCliffBuilding[6] gv_damagedCliffBuildings;
gs_RECORD_KorhalDebris[5] gv_korhalDebris;
gs_RECORD_HolesInGround[8] gv_holesInGround;
int gv_holesInGroundTotal;
int gv_skyboxStage;
timer gv_quakeTimer;
unitgroup gv_nextAttackWave;
gs_RECORD_Reinforcements[6] gv_reinforcements;
int gv_reinforcementLevel;
unit gv_orbitalCommand;
int gv_vikingsWavesSent;
bool[3] gv_vikingWaveTriggered;
int gv_resourcePickupsFound;
int gv_resourcePickupsTotal;
int gv_orbitalStrikesIssued;
fixed gv_priorStabilizerTimestamp;
fixed gv_lowestTimeToImpact;
fixed gv_priorMasteryTimestamp;
int gv_masteryProgress;
int gv_victory_OrbitalStrikeorSolarLanceKills;
int gv_anniversaryAchievementTermOrbitalStrikeorSolarLanceKills;
int gv_objectiveDestroyZergBase;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
point[6] gv_introDebrisLocations;
bool[6] gv_introDebrisCreated;
unit gv_introBarracks;
unitgroup gv_introBarracksAssault;
unitgroup gv_introFirstStabilizerAssault;
unit[3] gv_introBunkers;
fixed gv_midSpearOfAdunEnergy;
unitgroup gv_midTurnUnits;

void InitGlobals () {
    int init_i;

    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_stabilizers[init_i].lv_ping = c_invalidPingId;
    }
    gv_stabilizersNeeded = 5;
    gv_finalStabilizerIndex = 4;
    gv_skyshieldTimer = TimerCreate();
    gv_skyshieldTimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_scramblers[init_i].lv_ping = c_invalidPingId;
    }
    gv_scramblersNeeded = 3;
    for (init_i = 0; init_i <= 94; init_i += 1) {
        gv_crashingDebris[init_i].lv_timer = TimerCreate();
    }
    gv_holesInGroundTotal = 4;
    gv_skyboxStage = 1;
    gv_quakeTimer = TimerCreate();
    gv_nextAttackWave = UnitGroupEmpty();
    gv_orbitalCommand = UnitFromId(232);
    gv_lowestTimeToImpact = 999.0;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introBarracksAssault = UnitGroupEmpty();
    gv_introFirstStabilizerAssault = UnitGroupEmpty();
    gv_midTurnUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SecureStabilizer (int lp_stabilizerIndex);
void gf_RepairStabilizerwithScienceVessel (int lp_stabilizerIndex, unit lp_scienceVessel);
void gf_RespawnScienceVessel (int lp_index);
void gf_DespawnDropship (int lp_stabilizerIndex, unit lp_dropship);
void gf_OrderSCVtoBuildStructure (int lp_stabilizerIndex, int lp_sCVIndex, string lp_buildingType, point lp_buildLocation);
void gf_ActivateIdleStateforSCV (int lp_sCVIndex, int lp_stabilizerIndex);
void gf_PopulateBunker (int lp_index, unit lp_bunker);
void gf_ActivateTurbinesforStabilizer (int lp_index);
point gf_ValidConstructionPointNearLocation (fixed lp_radius, point lp_point);
bool gf_PointIsValidForConstruction (point lp_point, fixed lp_radius);
void gf_OrderStructuretoLand (point lp_landingPoint, unit lp_structure);
void gf_PatrolRaynorsUnits (int lp_base, int lp_patrol, int lp_stabilizer);
void gf_AdvanceSkyboxStage (int lp_newStage);
void gf_SpawnUnitsforNextAttackWave (string lp_unitType, int lp_count, point lp_location);
void gf_AttackWavePing (unitgroup lp_waveGroup);
void gf_SpawnReinforcements (string lp_unitType1, string lp_unitType2, int lp_count1, int lp_count2, int lp_index, bool lp_patrol);
void gf_SpawnAirReinforcements (string lp_unitType1, string lp_unitType2, int lp_count1, int lp_count2, int lp_index);
void gf_HardBrutalAirLeash (unit lp_flyer);
void gf_SpawnUnitsforIntro (string lp_unitType, int lp_count, point lp_location);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGameQ;
trigger gt_CreateTimerWindow;
trigger gt_MonitorTimerWindowQ;
trigger gt_OrbitalStrikeSequence;
trigger gt_ShadowCoreMovesQ;
trigger gt_OrbitalStrikeQ;
trigger gt_OrbitalStrikeUsedTeaching;
trigger gt_OrbitalStrikeReminderQ;
trigger gt_InitStabilizers;
trigger gt_MonitorStabilizers;
trigger gt_StabilizerDefense;
trigger gt_BeginRepairsQ;
trigger gt_RaynorBase1;
trigger gt_RaynorBase2;
trigger gt_RaynorBaseReclaimedQ;
trigger gt_InitShadowScrambler;
trigger gt_ScramblerDestroyed;
trigger gt_DiscoverBonusProximity;
trigger gt_DiscoverBonusQ;
trigger gt_EMPScrambler01DestroyedQ;
trigger gt_EMPScrambler02DestroyedQ;
trigger gt_EMPScrambler03DestroyedQ;
trigger gt_AmbientQuakes;
trigger gt_CrashingDebris;
trigger gt_ExplodingDoodadsInit;
trigger gt_ExplodingDoodads;
trigger gt_FireAnimations;
trigger gt_CreateHolesinGround;
trigger gt_StartAI;
trigger gt_BeginEnemyPatrols;
trigger gt_AttackWaves;
trigger gt_FirstAttackQ;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_AIGiveResources;
trigger gt_InitReinforcements;
trigger gt_ReinforceOtherStabilizers;
trigger gt_ReinforceOtherStabilizersQ;
trigger gt_ScramblerVikings;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictorySecureStabilizers;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StatInitialResourcePickupCount;
trigger gt_StatResourcePickupFound;
trigger gt_OrbitalStrikeUsedTracking;
trigger gt_AchievementTimeBetweenTwoStabilizers;
trigger gt_MasteryTimeBetweenThreeStabilizers;
trigger gt_AchievementKill40enemyunitsorstructureswithOrbitalStrikeorSolarLance;
trigger gt_ObjectiveSecuretheStabilizersCreate;
trigger gt_ObjectiveSecuretheStabilizersComplete;
trigger gt_ObjectiveSecuretheStabilizersUpdate;
trigger gt_ObjectiveSecuretheStabilizersFailed;
trigger gt_ObjectiveDestroyShadowScrambersCreate;
trigger gt_ObjectiveDestroyShadowScrambersComplete;
trigger gt_ObjectiveDestroyShadowScrambersUpdate;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroWarpinBase;
trigger gt_IntroDebris1;
trigger gt_IntroDebris2;
trigger gt_IntroDebrisCleanup;
trigger gt_MidOrbitalStrikeQ;
trigger gt_MidOrbitalStrikeSetup;
trigger gt_MidOrbitalStrikeCinematic;
trigger gt_MidOrbitalStrikeCinematicEnd;
trigger gt_MidOrbitalStrikeCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryMusic;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_SecureStabilizer_Trigger = null;
int auto_gf_SecureStabilizer_lp_stabilizerIndex;

void gf_SecureStabilizer (int lp_stabilizerIndex) {
    auto_gf_SecureStabilizer_lp_stabilizerIndex = lp_stabilizerIndex;

    if (auto_gf_SecureStabilizer_Trigger == null) {
        auto_gf_SecureStabilizer_Trigger = TriggerCreate("auto_gf_SecureStabilizer_TriggerFunc");
    }

    TriggerExecute(auto_gf_SecureStabilizer_Trigger, false, false);
}

bool auto_gf_SecureStabilizer_TriggerFunc (bool testConds, bool runActions) {
    int lp_stabilizerIndex = auto_gf_SecureStabilizer_lp_stabilizerIndex;

    // Variable Declarations
    unit lv_dropship;
    unit lv_scienceVessel;
    int lv_sCVIndex;

    // Automatic Variable Declarations
    const int auto897882B3_ae = 3;
    const int auto897882B3_ai = 1;
    int auto6D57B987_val;

    // Variable Initialization

    // Implementation
    gf_ActivateTurbinesforStabilizer(lp_stabilizerIndex);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpecialOpsDropship", 0, gv_pLAYER_04_RAYNOR_AI, gv_stabilizers[lp_stabilizerIndex].lv_dropshipEntry);
    lv_dropship = UnitLastCreated();
    UnitSetHeight(lv_dropship, 12.0, 0.0);
    UnitIssueOrder(lv_dropship, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(0.0625, c_timeAI);
    UnitSetHeight(lv_dropship, UnitGetPropertyFixed(lv_dropship, c_unitPropHeight, c_unitPropNormal), 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScienceVessel", c_unitCreateIgnorePlacement, gv_pLAYER_04_RAYNOR_AI, PointWithOffsetPolar(UnitGetPosition(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit), 8.0, UnitGetFacing(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit)));
    lv_scienceVessel = UnitLastCreated();
    UnitAbilityEnable(UnitLastCreated(), "NanoRepair", false);
    UnitAbilityEnable(UnitLastCreated(), "VoidScienceVesselNanoRepair", false);
    UnitSetHeight(lv_scienceVessel, 12.0, 0.0);
    UnitIssueOrder(lv_scienceVessel, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(0.0625, c_timeAI);
    UnitSetHeight(lv_scienceVessel, UnitGetPropertyFixed(lv_scienceVessel, c_unitPropHeight, c_unitPropNormal), 3.0);
    Wait(3.0, c_timeAI);
    gf_RepairStabilizerwithScienceVessel(lp_stabilizerIndex, lv_scienceVessel);
    gv_activeStabilizer = lp_stabilizerIndex;
    TriggerExecute(gt_BeginRepairsQ, true, false);
    lv_sCVIndex = 1;
    for ( ; ( (auto897882B3_ai >= 0 && lv_sCVIndex <= auto897882B3_ae) || (auto897882B3_ai < 0 && lv_sCVIndex >= auto897882B3_ae) ) ; lv_sCVIndex += auto897882B3_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, gv_pLAYER_04_RAYNOR_AI, gv_stabilizers[lp_stabilizerIndex].lv_dropshipEntry, RegionGetCenter(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerRegion));
        gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lv_sCVIndex] = UnitLastCreated();
        UnitAbilityEnable(UnitLastCreated(), "Repair", false);
        Wait(0.5, c_timeAI);
    }
    gf_DespawnDropship(lp_stabilizerIndex, lv_dropship);
    auto6D57B987_val = lp_stabilizerIndex;
    if (auto6D57B987_val == 1) {
        gf_ActivateIdleStateforSCV(1, lp_stabilizerIndex);
        gf_ActivateIdleStateforSCV(2, lp_stabilizerIndex);
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 3, "SensorTower", gv_stabilizers[lp_stabilizerIndex].lv_sensorTowerPoint);
    }
    else if (auto6D57B987_val == 2) {
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 1, "SupplyDepot", gv_stabilizers[lp_stabilizerIndex].lv_supplyDepotPoint1);
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 2, "SensorTower", gv_stabilizers[lp_stabilizerIndex].lv_sensorTowerPoint);
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 3, "Bunker", gv_stabilizers[lp_stabilizerIndex].lv_bunkerPoint);
    }
    else if (auto6D57B987_val == 3) {
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 1, "SupplyDepot", gv_stabilizers[lp_stabilizerIndex].lv_supplyDepotPoint1);
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 2, "Bunker", gv_stabilizers[lp_stabilizerIndex].lv_bunkerPoint);
        gf_ActivateIdleStateforSCV(3, lp_stabilizerIndex);
    }
    else if (auto6D57B987_val == 4) {
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 1, "SupplyDepot", gv_stabilizers[lp_stabilizerIndex].lv_supplyDepotPoint1);
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 2, "Bunker", gv_stabilizers[lp_stabilizerIndex].lv_bunkerPoint);
        gf_ActivateIdleStateforSCV(3, lp_stabilizerIndex);
    }
    else if (auto6D57B987_val == 5) {
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 1, "SupplyDepot", gv_stabilizers[lp_stabilizerIndex].lv_supplyDepotPoint1);
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 2, "SensorTower", gv_stabilizers[lp_stabilizerIndex].lv_sensorTowerPoint);
        gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, 3, "Bunker", gv_stabilizers[lp_stabilizerIndex].lv_bunkerPoint);
    }
    else {
    }
    return true;
}

trigger auto_gf_RepairStabilizerwithScienceVessel_Trigger = null;
int auto_gf_RepairStabilizerwithScienceVessel_lp_stabilizerIndex;
unit auto_gf_RepairStabilizerwithScienceVessel_lp_scienceVessel;

void gf_RepairStabilizerwithScienceVessel (int lp_stabilizerIndex, unit lp_scienceVessel) {
    auto_gf_RepairStabilizerwithScienceVessel_lp_stabilizerIndex = lp_stabilizerIndex;
    auto_gf_RepairStabilizerwithScienceVessel_lp_scienceVessel = lp_scienceVessel;

    if (auto_gf_RepairStabilizerwithScienceVessel_Trigger == null) {
        auto_gf_RepairStabilizerwithScienceVessel_Trigger = TriggerCreate("auto_gf_RepairStabilizerwithScienceVessel_TriggerFunc");
    }

    TriggerExecute(auto_gf_RepairStabilizerwithScienceVessel_Trigger, false, false);
}

bool auto_gf_RepairStabilizerwithScienceVessel_TriggerFunc (bool testConds, bool runActions) {
    int lp_stabilizerIndex = auto_gf_RepairStabilizerwithScienceVessel_lp_stabilizerIndex;
    unit lp_scienceVessel = auto_gf_RepairStabilizerwithScienceVessel_lp_scienceVessel;

    // Variable Declarations
    int lv_repairCycle;
    point lv_repairLocation1;
    point lv_repairLocation2;
    point lv_repairLocation3;

    // Automatic Variable Declarations
    int auto3CF1C861_val;

    // Variable Initialization

    // Implementation
    lv_repairLocation1 = PointWithOffsetPolar(UnitGetPosition(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit), 8.0, UnitGetFacing(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit));
    lv_repairLocation2 = PointWithOffsetPolar(UnitGetPosition(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit), 5.0, (UnitGetFacing(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit) + 60.0));
    lv_repairLocation3 = PointWithOffsetPolar(UnitGetPosition(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit), 6.0, (UnitGetFacing(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit) - 60.0));
    lv_repairCycle = 1;
    UnitAbilityEnable(lp_scienceVessel, "VoidScienceVesselNanoRepair", true);
    UnitBehaviorAdd(lp_scienceVessel, "VoidScienceVesselNanoRepairEnabled", lp_scienceVessel, 1);
    UnitSetPropertyFixed(lp_scienceVessel, c_unitPropEnergyPercent, 100.0);
    Wait(0.0625, c_timeAI);
    while (true) {
        if ((UnitGetPropertyFixed(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit, c_unitPropLifePercent, c_unitPropCurrent) >= 99.0)) {
            UnitSetPropertyFixed(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit, c_unitPropLifePercent, 100.0);
            libNtve_gf_SendActorMessageToUnit(gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit, "Signal On");
            UnitIssueOrder(lp_scienceVessel, OrderTargetingPoint(AbilityCommand("move", 0), gv_stabilizers[lp_stabilizerIndex].lv_dropshipExit), c_orderQueueReplace);
            if ((libVCMI_gf_GameIsOver() == true)) {
                return true;
            }

            UnitSetHeight(lp_scienceVessel, 15.0, 5.0);
            Wait(5.0, c_timeAI);
            UnitRemove(lp_scienceVessel);
            return true;
        }

        if ((UnitIsAlive(lp_scienceVessel) == false)) {
            Wait(5.0, c_timeAI);
            gf_RespawnScienceVessel(lp_stabilizerIndex);
            return true;
        }

        UnitIssueOrder(lp_scienceVessel, OrderTargetingUnit(AbilityCommand("VoidScienceVesselNanoRepair", 0), gv_stabilizers[lp_stabilizerIndex].lv_stabilizerUnit), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
        lv_repairCycle += 1;
        auto3CF1C861_val = lv_repairCycle;
        if (auto3CF1C861_val == 1) {
            UnitIssueOrder(lp_scienceVessel, OrderTargetingPoint(AbilityCommand("move", 0), lv_repairLocation1), c_orderQueueReplace);
        }
        else if (auto3CF1C861_val == 2) {
            UnitIssueOrder(lp_scienceVessel, OrderTargetingPoint(AbilityCommand("move", 0), lv_repairLocation2), c_orderQueueReplace);
        }
        else if (auto3CF1C861_val == 3) {
            UnitIssueOrder(lp_scienceVessel, OrderTargetingPoint(AbilityCommand("move", 0), lv_repairLocation3), c_orderQueueReplace);
            lv_repairCycle = 0;
        }
        else {
            UnitIssueOrder(lp_scienceVessel, OrderTargetingPoint(AbilityCommand("move", 0), lv_repairLocation1), c_orderQueueReplace);
        }
        Wait(8.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_RespawnScienceVessel_Trigger = null;
int auto_gf_RespawnScienceVessel_lp_index;

void gf_RespawnScienceVessel (int lp_index) {
    auto_gf_RespawnScienceVessel_lp_index = lp_index;

    if (auto_gf_RespawnScienceVessel_Trigger == null) {
        auto_gf_RespawnScienceVessel_Trigger = TriggerCreate("auto_gf_RespawnScienceVessel_TriggerFunc");
    }

    TriggerExecute(auto_gf_RespawnScienceVessel_Trigger, false, false);
}

bool auto_gf_RespawnScienceVessel_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_RespawnScienceVessel_lp_index;

    // Variable Declarations
    unit lv_scienceVessel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScienceVessel", c_unitCreateIgnorePlacement, gv_pLAYER_04_RAYNOR_AI, PointWithOffsetPolar(UnitGetPosition(gv_stabilizers[lp_index].lv_stabilizerUnit), 8.0, UnitGetFacing(gv_stabilizers[lp_index].lv_stabilizerUnit)));
    lv_scienceVessel = UnitLastCreated();
    UnitAbilityEnable(UnitLastCreated(), "NanoRepair", false);
    UnitAbilityEnable(UnitLastCreated(), "VoidScienceVesselNanoRepair", false);
    UnitSetHeight(lv_scienceVessel, 12.0, 0.0);
    UnitIssueOrder(lv_scienceVessel, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(0.0625, c_timeAI);
    UnitSetHeight(lv_scienceVessel, UnitGetPropertyFixed(lv_scienceVessel, c_unitPropHeight, c_unitPropNormal), 3.0);
    Wait(3.0, c_timeAI);
    gf_RepairStabilizerwithScienceVessel(lp_index, lv_scienceVessel);
    return true;
}

trigger auto_gf_DespawnDropship_Trigger = null;
int auto_gf_DespawnDropship_lp_stabilizerIndex;
unit auto_gf_DespawnDropship_lp_dropship;

void gf_DespawnDropship (int lp_stabilizerIndex, unit lp_dropship) {
    auto_gf_DespawnDropship_lp_stabilizerIndex = lp_stabilizerIndex;
    auto_gf_DespawnDropship_lp_dropship = lp_dropship;

    if (auto_gf_DespawnDropship_Trigger == null) {
        auto_gf_DespawnDropship_Trigger = TriggerCreate("auto_gf_DespawnDropship_TriggerFunc");
    }

    TriggerExecute(auto_gf_DespawnDropship_Trigger, false, false);
}

bool auto_gf_DespawnDropship_TriggerFunc (bool testConds, bool runActions) {
    int lp_stabilizerIndex = auto_gf_DespawnDropship_lp_stabilizerIndex;
    unit lp_dropship = auto_gf_DespawnDropship_lp_dropship;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((UnitIsAlive(lp_dropship) == false)) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(lp_dropship, RegionCircle(gv_stabilizers[lp_stabilizerIndex].lv_dropshipExit, 1.0)) == false)) {
            UnitIssueOrder(lp_dropship, OrderTargetingPoint(AbilityCommand("move", 0), gv_stabilizers[lp_stabilizerIndex].lv_dropshipExit), c_orderQueueReplace);
        }
        else {
            UnitRemove(lp_dropship);
            return true;
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_OrderSCVtoBuildStructure_Trigger = null;
int auto_gf_OrderSCVtoBuildStructure_lp_stabilizerIndex;
int auto_gf_OrderSCVtoBuildStructure_lp_sCVIndex;
string auto_gf_OrderSCVtoBuildStructure_lp_buildingType;
point auto_gf_OrderSCVtoBuildStructure_lp_buildLocation;

void gf_OrderSCVtoBuildStructure (int lp_stabilizerIndex, int lp_sCVIndex, string lp_buildingType, point lp_buildLocation) {
    auto_gf_OrderSCVtoBuildStructure_lp_stabilizerIndex = lp_stabilizerIndex;
    auto_gf_OrderSCVtoBuildStructure_lp_sCVIndex = lp_sCVIndex;
    auto_gf_OrderSCVtoBuildStructure_lp_buildingType = lp_buildingType;
    auto_gf_OrderSCVtoBuildStructure_lp_buildLocation = lp_buildLocation;

    if (auto_gf_OrderSCVtoBuildStructure_Trigger == null) {
        auto_gf_OrderSCVtoBuildStructure_Trigger = TriggerCreate("auto_gf_OrderSCVtoBuildStructure_TriggerFunc");
    }

    TriggerExecute(auto_gf_OrderSCVtoBuildStructure_Trigger, false, false);
}

bool auto_gf_OrderSCVtoBuildStructure_TriggerFunc (bool testConds, bool runActions) {
    int lp_stabilizerIndex = auto_gf_OrderSCVtoBuildStructure_lp_stabilizerIndex;
    int lp_sCVIndex = auto_gf_OrderSCVtoBuildStructure_lp_sCVIndex;
    string lp_buildingType = auto_gf_OrderSCVtoBuildStructure_lp_buildingType;
    point lp_buildLocation = auto_gf_OrderSCVtoBuildStructure_lp_buildLocation;

    // Variable Declarations
    point lv_constructionPoint;
    unit lv_buildingUnit;
    point lv_homePoint;

    // Automatic Variable Declarations
    string auto97BB0E1F_val;
    point autoD09CD2F5_val;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex]) == false)) {
        return true;
    }
    else {
        AISetUnitScriptControlled(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], true);
    }
    lv_constructionPoint = lp_buildLocation;
    while (true) {
        if ((UnitIsAlive(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex]) == false)) {
            return true;
        }

        if ((lv_constructionPoint == null)) {
            gf_ActivateIdleStateforSCV(lp_sCVIndex, lp_stabilizerIndex);
            return true;
        }

        if ((UnitGroupCount(UnitGroup(lp_buildingType, c_playerAny, RegionCircle(lv_constructionPoint, 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            break;
        }

        if ((gf_PointIsValidForConstruction(lv_constructionPoint, 1.5) == true)) {
            auto97BB0E1F_val = lp_buildingType;
            if (auto97BB0E1F_val == "SupplyDepot") {
                UnitIssueOrder(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], OrderTargetingPoint(AbilityCommand("TerranBuild", 1), lv_constructionPoint), c_orderQueueReplace);
            }
            else if (auto97BB0E1F_val == "Bunker") {
                UnitIssueOrder(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], OrderTargetingPoint(AbilityCommand("TerranBuild", 6), lv_constructionPoint), c_orderQueueReplace);
            }
            else if (auto97BB0E1F_val == "SensorTower") {
                UnitIssueOrder(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], OrderTargetingPoint(AbilityCommand("TerranBuild", 8), lv_constructionPoint), c_orderQueueReplace);
            }
            else {
                lv_constructionPoint = null;
            }
        }
        else {
            lv_constructionPoint = gf_ValidConstructionPointNearLocation(1.5, lp_buildLocation);
        }
        Wait(1.0, c_timeAI);
    }
    lv_buildingUnit = UnitGroupUnit(UnitGroup(lp_buildingType, c_playerAny, RegionCircle(lv_constructionPoint, 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex]) == false)) {
            return true;
        }

        if ((UnitIsAlive(lv_buildingUnit) == false)) {
            gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, lp_sCVIndex, lp_buildingType, lp_buildLocation);
            return true;
        }

        if ((UnitGroupCount(UnitGroup(lp_buildingType, c_playerAny, RegionCircle(lv_constructionPoint, 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            break;
        }

    }
    autoD09CD2F5_val = lp_buildLocation;
    if (autoD09CD2F5_val == gv_stabilizers[lp_stabilizerIndex].lv_supplyDepotPoint1) {
        if ((gv_stabilizers[lp_stabilizerIndex].lv_supplyDepotPoint2 != null)) {
            gf_OrderSCVtoBuildStructure(lp_stabilizerIndex, lp_sCVIndex, "SupplyDepot", gv_stabilizers[lp_stabilizerIndex].lv_supplyDepotPoint2);
            return true;
        }

    }
    else if (autoD09CD2F5_val == gv_stabilizers[lp_stabilizerIndex].lv_bunkerPoint) {
        gf_PopulateBunker(lp_stabilizerIndex, lv_buildingUnit);
    }
    else {
    }
    gf_ActivateIdleStateforSCV(lp_sCVIndex, lp_stabilizerIndex);
    return true;
}

trigger auto_gf_ActivateIdleStateforSCV_Trigger = null;
int auto_gf_ActivateIdleStateforSCV_lp_sCVIndex;
int auto_gf_ActivateIdleStateforSCV_lp_stabilizerIndex;

void gf_ActivateIdleStateforSCV (int lp_sCVIndex, int lp_stabilizerIndex) {
    auto_gf_ActivateIdleStateforSCV_lp_sCVIndex = lp_sCVIndex;
    auto_gf_ActivateIdleStateforSCV_lp_stabilizerIndex = lp_stabilizerIndex;

    if (auto_gf_ActivateIdleStateforSCV_Trigger == null) {
        auto_gf_ActivateIdleStateforSCV_Trigger = TriggerCreate("auto_gf_ActivateIdleStateforSCV_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateIdleStateforSCV_Trigger, false, false);
}

bool auto_gf_ActivateIdleStateforSCV_TriggerFunc (bool testConds, bool runActions) {
    int lp_sCVIndex = auto_gf_ActivateIdleStateforSCV_lp_sCVIndex;
    int lp_stabilizerIndex = auto_gf_ActivateIdleStateforSCV_lp_stabilizerIndex;

    // Variable Declarations
    point lv_homePoint;

    // Automatic Variable Declarations
    int auto8D90E036_val;

    // Variable Initialization

    // Implementation
    auto8D90E036_val = lp_sCVIndex;
    if (auto8D90E036_val == 1) {
        lv_homePoint = PointWithOffsetPolar(gv_stabilizers[lp_stabilizerIndex].lv_hullBreachLocation, 2.5, (PointGetFacing(gv_stabilizers[lp_stabilizerIndex].lv_hullBreachLocation) + 0.0));
    }
    else if (auto8D90E036_val == 2) {
        lv_homePoint = PointWithOffsetPolar(gv_stabilizers[lp_stabilizerIndex].lv_hullBreachLocation, 2.5, (PointGetFacing(gv_stabilizers[lp_stabilizerIndex].lv_hullBreachLocation) + 45.0));
    }
    else if (auto8D90E036_val == 3) {
        lv_homePoint = PointWithOffsetPolar(gv_stabilizers[lp_stabilizerIndex].lv_hullBreachLocation, 2.5, (PointGetFacing(gv_stabilizers[lp_stabilizerIndex].lv_hullBreachLocation) - 45.0));
    }
    else {
        lv_homePoint = PointWithOffsetPolar(gv_stabilizers[lp_stabilizerIndex].lv_hullBreachLocation, 2.5, (PointGetFacing(gv_stabilizers[lp_stabilizerIndex].lv_hullBreachLocation) + 0.0));
    }
    UnitIssueOrder(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], OrderTargetingPoint(AbilityCommand("move", 0), lv_homePoint), c_orderQueueReplace);
    while (!(((UnitIsAlive(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex]) == false) || (UnitOrderCount(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex]) == 0)))) {
        Wait(0.0625, c_timeGame);
    }
    UnitSetState(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], c_unitStateFidget, false);
    libNtve_gf_MakeUnitFacePoint(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], gv_stabilizers[lp_stabilizerIndex].lv_hullBreachLocation, 0.0);
    UnitBehaviorAdd(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], "SCVFakeRepair", gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], 1);
    UnitIssueOrder(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_stabilizers[lp_stabilizerIndex].lv_sCVs[lp_sCVIndex], true);
    return true;
}

trigger auto_gf_PopulateBunker_Trigger = null;
int auto_gf_PopulateBunker_lp_index;
unit auto_gf_PopulateBunker_lp_bunker;

void gf_PopulateBunker (int lp_index, unit lp_bunker) {
    auto_gf_PopulateBunker_lp_index = lp_index;
    auto_gf_PopulateBunker_lp_bunker = lp_bunker;

    if (auto_gf_PopulateBunker_Trigger == null) {
        auto_gf_PopulateBunker_Trigger = TriggerCreate("auto_gf_PopulateBunker_TriggerFunc");
    }

    TriggerExecute(auto_gf_PopulateBunker_Trigger, false, false);
}

bool auto_gf_PopulateBunker_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_PopulateBunker_lp_index;
    unit lp_bunker = auto_gf_PopulateBunker_lp_bunker;

    // Variable Declarations
    unitgroup lv_bunkerSquad;

    // Automatic Variable Declarations
    unitgroup auto3F27B227_g;
    int auto3F27B227_u;
    unit auto3F27B227_var;

    // Variable Initialization
    lv_bunkerSquad = UnitGroupEmpty();

    // Implementation
    if (((UnitIsAlive(lp_bunker) == false) || (UnitIsAlive(gv_stabilizers[lp_index].lv_stabilizerUnit) == false))) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(libLotv_gf_DifficultyValueInt2(4, 4, 3, 2), "Marine", 0, gv_pLAYER_04_RAYNOR_AI, PointWithOffsetPolar(UnitGetPosition(lp_bunker), 4.0, AngleBetweenPoints(UnitGetPosition(lp_bunker), UnitGetPosition(gv_stabilizers[lp_index].lv_stabilizerUnit))), UnitGetPosition(lp_bunker));
    UnitGroupAddUnitGroup(lv_bunkerSquad, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, UnitGroupCenterOfGroup(UnitLastCreatedGroup()), lv_bunkerSquad, false, gv_pLAYER_04_RAYNOR_AI);
    Wait(5.0, c_timeAI);
    if ((UnitIsAlive(lp_bunker) == true)) {
        auto3F27B227_g = lv_bunkerSquad;
        auto3F27B227_u = UnitGroupCount(auto3F27B227_g, c_unitCountAll);
        for (;; auto3F27B227_u -= 1) {
            auto3F27B227_var = UnitGroupUnitFromEnd(auto3F27B227_g, auto3F27B227_u);
            if (auto3F27B227_var == null) { break; }
            UnitIssueOrder(lp_bunker, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), auto3F27B227_var), c_orderQueueReplace);
        }
    }

    return true;
}

void gf_ActivateTurbinesforStabilizer (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(gv_stabilizers[lp_index].lv_stabilizerUnit) == false)) {
        return ;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(UnitGetPosition(gv_stabilizers[lp_index].lv_stabilizerUnit), 24.0), "Korhal_WallTurbine", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.333, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(UnitGetPosition(gv_stabilizers[lp_index].lv_stabilizerUnit), 24.0), "Korhal_WallTurbine", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
}

point gf_ValidConstructionPointNearLocation (fixed lp_radius, point lp_point) {
    // Variable Declarations
    int lv_rotationIncrement;
    int lv_radiusIncrement;
    point lv_testPoint;

    // Automatic Variable Declarations
    const int auto2B49D8C0_ae = 8;
    const int auto2B49D8C0_ai = 1;
    const int auto1B0983F8_ae = 7;
    const int auto1B0983F8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gf_PointIsValidForConstruction(lp_point, lp_radius) == true)) {
        return lp_point;
    }

    lv_radiusIncrement = 1;
    for ( ; ( (auto2B49D8C0_ai >= 0 && lv_radiusIncrement <= auto2B49D8C0_ae) || (auto2B49D8C0_ai < 0 && lv_radiusIncrement >= auto2B49D8C0_ae) ) ; lv_radiusIncrement += auto2B49D8C0_ai ) {
        lv_rotationIncrement = 0;
        for ( ; ( (auto1B0983F8_ai >= 0 && lv_rotationIncrement <= auto1B0983F8_ae) || (auto1B0983F8_ai < 0 && lv_rotationIncrement >= auto1B0983F8_ae) ) ; lv_rotationIncrement += auto1B0983F8_ai ) {
            if ((ModI(lv_rotationIncrement, 2) == 0)) {
                lv_testPoint = PointWithOffsetPolar(lp_point, lv_radiusIncrement, (lv_rotationIncrement*45));
            }
            else {
                lv_testPoint = PointWithOffsetPolar(lp_point, (lv_radiusIncrement*1.414), (lv_rotationIncrement*45));
            }
            if ((gf_PointIsValidForConstruction(lv_testPoint, lp_radius) == true)) {
                return lv_testPoint;
            }

        }
    }
    return null;
}

bool gf_PointIsValidForConstruction (point lp_point, fixed lp_radius) {
    // Variable Declarations
    fixed lv_radiusIncrement;
    int lv_rotationIncrement;
    point lv_testPoint;

    // Automatic Variable Declarations
    const fixed autoC5AD63CC_ae = 0.2;
    const fixed autoC5AD63CC_ai = -1.0;
    const int auto6421D5C6_ae = 7;
    const int auto6421D5C6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_testPoint = lp_point;
    if (((PointPathingPassable(lv_testPoint) == false) || (PathingType(lv_testPoint) == c_pathingBuilding) || (RegionContainsPoint(RegionFromId(6), lv_testPoint) == true) || (UnitGroupCount(UnitGroup("SiegeTankSieged", c_playerAny, RegionCircle(lv_testPoint, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        return false;
    }

    lv_radiusIncrement = lp_radius;
    for ( ; ( (autoC5AD63CC_ai >= 0 && lv_radiusIncrement <= autoC5AD63CC_ae) || (autoC5AD63CC_ai < 0 && lv_radiusIncrement >= autoC5AD63CC_ae) ) ; lv_radiusIncrement += autoC5AD63CC_ai ) {
        lv_rotationIncrement = 0;
        for ( ; ( (auto6421D5C6_ai >= 0 && lv_rotationIncrement <= auto6421D5C6_ae) || (auto6421D5C6_ai < 0 && lv_rotationIncrement >= auto6421D5C6_ae) ) ; lv_rotationIncrement += auto6421D5C6_ai ) {
            if ((ModI(lv_rotationIncrement, 2) == 0)) {
                lv_testPoint = PointWithOffsetPolar(lp_point, (lv_radiusIncrement - 0.1), (lv_rotationIncrement*45));
            }
            else {
                lv_testPoint = PointWithOffsetPolar(lp_point, ((lv_radiusIncrement * 1.414) - 0.1), (lv_rotationIncrement*45));
            }
            if (((PointPathingPassable(lv_testPoint) == false) || (PathingType(lv_testPoint) == c_pathingBuilding) || (RegionContainsPoint(RegionFromId(6), lv_testPoint) == true) || (UnitGroupCount(UnitGroup("SiegeTankSieged", c_playerAny, RegionCircle(lv_testPoint, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                return false;
            }

        }
    }
    return true;
}

trigger auto_gf_OrderStructuretoLand_Trigger = null;
point auto_gf_OrderStructuretoLand_lp_landingPoint;
unit auto_gf_OrderStructuretoLand_lp_structure;

void gf_OrderStructuretoLand (point lp_landingPoint, unit lp_structure) {
    auto_gf_OrderStructuretoLand_lp_landingPoint = lp_landingPoint;
    auto_gf_OrderStructuretoLand_lp_structure = lp_structure;

    if (auto_gf_OrderStructuretoLand_Trigger == null) {
        auto_gf_OrderStructuretoLand_Trigger = TriggerCreate("auto_gf_OrderStructuretoLand_TriggerFunc");
    }

    TriggerExecute(auto_gf_OrderStructuretoLand_Trigger, false, false);
}

bool auto_gf_OrderStructuretoLand_TriggerFunc (bool testConds, bool runActions) {
    point lp_landingPoint = auto_gf_OrderStructuretoLand_lp_landingPoint;
    unit lp_structure = auto_gf_OrderStructuretoLand_lp_structure;

    // Variable Declarations
    abilcmd lv_landingCommand;
    string lv_landingUnitType;
    fixed lv_landingRadius;
    point lv_currentLandingPoint;

    // Automatic Variable Declarations
    string auto279BF6FA_val;

    // Variable Initialization

    // Implementation
    if (((UnitIsAlive(lp_structure) == false) || (lp_landingPoint == null))) {
        return true;
    }
    else {
        AISetUnitScriptControlled(lp_structure, true);
    }
    auto279BF6FA_val = UnitGetType(lp_structure);
    if (auto279BF6FA_val == "OrbitalCommandFlying") {
        lv_landingCommand = AbilityCommand("OrbitalCommandLand", 0);
        lv_landingUnitType = "OrbitalCommand";
        lv_landingRadius = 2.5;
    }
    else if (auto279BF6FA_val == "BarracksFlying") {
        lv_landingCommand = AbilityCommand("BarracksLand", 0);
        lv_landingUnitType = "Barracks";
        lv_landingRadius = 1.5;
    }
    else if (auto279BF6FA_val == "StarportFlying") {
        lv_landingCommand = AbilityCommand("StarportLand", 0);
        lv_landingUnitType = "Starport";
        lv_landingRadius = 1.5;
    }
    else {
        return true;
    }
    while (true) {
        if (((UnitIsAlive(lp_structure) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((UnitGetType(lp_structure) == lv_landingUnitType)) {
            AISetUnitScriptControlled(lp_structure, false);
            AIAddBully(UnitGetOwner(lp_structure), lv_landingUnitType, UnitGetPosition(lp_structure), 13);
            Wait(0.0625, c_timeGame);
            if ((libNtve_gf_UnitInRegion(lp_structure, RegionFromId(50)) == true)) {
                AIToggleBulliesInRegion(gv_pLAYER_05_RAYNOR_BASE_1, RegionFromId(50), true);
            }

            if ((libNtve_gf_UnitInRegion(lp_structure, RegionFromId(51)) == true)) {
                AIToggleBulliesInRegion(gv_pLAYER_06_RAYNOR_BASE_2, RegionFromId(51), true);
            }

            return true;
        }

        if ((gf_PointIsValidForConstruction(lp_landingPoint, lv_landingRadius) == true)) {
            lv_currentLandingPoint = lp_landingPoint;
        }
        else {
            lv_currentLandingPoint = gf_ValidConstructionPointNearLocation(lv_landingRadius, lp_landingPoint);
        }
        if ((lv_currentLandingPoint != null)) {
            UnitIssueOrder(lp_structure, OrderTargetingPoint(lv_landingCommand, lv_currentLandingPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_structure, OrderTargetingPoint(AbilityCommand("move", 0), lp_landingPoint), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_PatrolRaynorsUnits_Trigger = null;
int auto_gf_PatrolRaynorsUnits_lp_base;
int auto_gf_PatrolRaynorsUnits_lp_patrol;
int auto_gf_PatrolRaynorsUnits_lp_stabilizer;

void gf_PatrolRaynorsUnits (int lp_base, int lp_patrol, int lp_stabilizer) {
    auto_gf_PatrolRaynorsUnits_lp_base = lp_base;
    auto_gf_PatrolRaynorsUnits_lp_patrol = lp_patrol;
    auto_gf_PatrolRaynorsUnits_lp_stabilizer = lp_stabilizer;

    if (auto_gf_PatrolRaynorsUnits_Trigger == null) {
        auto_gf_PatrolRaynorsUnits_Trigger = TriggerCreate("auto_gf_PatrolRaynorsUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_PatrolRaynorsUnits_Trigger, false, false);
}

bool auto_gf_PatrolRaynorsUnits_TriggerFunc (bool testConds, bool runActions) {
    int lp_base = auto_gf_PatrolRaynorsUnits_lp_base;
    int lp_patrol = auto_gf_PatrolRaynorsUnits_lp_patrol;
    int lp_stabilizer = auto_gf_PatrolRaynorsUnits_lp_stabilizer;

    // Variable Declarations
    int lv_player;
    unitgroup lv_patrolGroup;
    int lv_validUnitIndex;
    int lv_patrolUnitIndex;

    // Automatic Variable Declarations
    unitgroup autoB99C2170_g;
    int autoB99C2170_u;
    unit autoB99C2170_var;
    unitgroup autoB611E334_g;
    int autoB611E334_u;
    unit autoB611E334_var;
    unitgroup autoFBC0E71A_g;
    int autoFBC0E71A_u;
    unit autoFBC0E71A_var;
    const int autoA773D385_ae = 4;
    const int autoA773D385_ai = 1;
    const int autoB9B4DC77_ae = 4;
    const int autoB9B4DC77_ai = 1;
    const int autoB7188654_ae = 4;
    const int autoB7188654_ai = 1;
    const int autoD78EE222_ae = 4;
    const int autoD78EE222_ai = 1;

    // Variable Initialization
    lv_patrolGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_base == 1)) {
        lv_player = gv_pLAYER_05_RAYNOR_BASE_1;
    }
    else {
        lv_player = gv_pLAYER_06_RAYNOR_BASE_2;
    }
    while (true) {
        if ((gv_stabilizers[lp_stabilizer].lv_secured == true)) {
            break;
        }
        else {
            Wait(1.0, c_timeGame);
        }
    }
    while (true) {
        autoB99C2170_g = UnitGroup("Marine", c_playerAny, RegionFromName(("Raynor Base " + IntToString(lp_base) + " Patrol Stabilizer " + IntToString(lp_stabilizer))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB99C2170_u = UnitGroupCount(autoB99C2170_g, c_unitCountAll);
        for (;; autoB99C2170_u -= 1) {
            autoB99C2170_var = UnitGroupUnitFromEnd(autoB99C2170_g, autoB99C2170_u);
            if (autoB99C2170_var == null) { break; }
            UnitGroupAdd(lv_patrolGroup, autoB99C2170_var);
        }
        autoB611E334_g = UnitGroup("Medivac", c_playerAny, RegionFromName(("Raynor Base " + IntToString(lp_base) + " Patrol Stabilizer " + IntToString(lp_stabilizer))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB611E334_u = UnitGroupCount(autoB611E334_g, c_unitCountAll);
        for (;; autoB611E334_u -= 1) {
            autoB611E334_var = UnitGroupUnitFromEnd(autoB611E334_g, autoB611E334_u);
            if (autoB611E334_var == null) { break; }
            UnitGroupAdd(lv_patrolGroup, autoB611E334_var);
        }
        autoFBC0E71A_g = UnitGroup("Marauder", c_playerAny, RegionFromName(("Raynor Base " + IntToString(lp_base) + " Patrol Stabilizer " + IntToString(lp_stabilizer))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFBC0E71A_u = UnitGroupCount(autoFBC0E71A_g, c_unitCountAll);
        for (;; autoFBC0E71A_u -= 1) {
            autoFBC0E71A_var = UnitGroupUnitFromEnd(autoFBC0E71A_g, autoFBC0E71A_u);
            if (autoFBC0E71A_var == null) { break; }
            UnitGroupAdd(lv_patrolGroup, autoFBC0E71A_var);
        }
        Wait(1.0, c_timeGame);
        if ((UnitGroupCount(lv_patrolGroup, c_unitCountAlive) >= 5)) {
            break;
        }

    }
    Wait(2.0, c_timeGame);
    while (true) {
        UnitGroupIssueOrder(lv_patrolGroup, OrderTargetingRelativePoint(AbilityCommand("attack", 0), PointFromName(("Raynor Base " + IntToString(lp_base) + " Stabilizer " + IntToString(lp_stabilizer) + " Patrol " + IntToString(lp_patrol) + " " + IntToString(1)))), c_orderQueueReplace);
        lv_patrolUnitIndex = 1;
        for ( ; ( (autoA773D385_ai >= 0 && lv_patrolUnitIndex <= autoA773D385_ae) || (autoA773D385_ai < 0 && lv_patrolUnitIndex >= autoA773D385_ae) ) ; lv_patrolUnitIndex += autoA773D385_ai ) {
            if ((UnitIsAlive(UnitGroupUnit(lv_patrolGroup, lv_patrolUnitIndex)) == true)) {
                lv_validUnitIndex = lv_patrolUnitIndex;
                break;
            }

        }
        while (!((UnitOrderCount(UnitGroupUnit(lv_patrolGroup, lv_validUnitIndex)) == 0))) {
            Wait(1.0, c_timeGame);
        }
        Wait(RandomFixed(4.0, 8.0), c_timeGame);
        UnitGroupIssueOrder(lv_patrolGroup, OrderTargetingRelativePoint(AbilityCommand("attack", 0), PointFromName(("Raynor Base " + IntToString(lp_base) + " Stabilizer " + IntToString(lp_stabilizer) + " Patrol " + IntToString(lp_patrol) + " " + IntToString(2)))), c_orderQueueAddToEnd);
        lv_patrolUnitIndex = 1;
        for ( ; ( (autoB9B4DC77_ai >= 0 && lv_patrolUnitIndex <= autoB9B4DC77_ae) || (autoB9B4DC77_ai < 0 && lv_patrolUnitIndex >= autoB9B4DC77_ae) ) ; lv_patrolUnitIndex += autoB9B4DC77_ai ) {
            if ((UnitIsAlive(UnitGroupUnit(lv_patrolGroup, lv_patrolUnitIndex)) == true)) {
                lv_validUnitIndex = lv_patrolUnitIndex;
                break;
            }

        }
        while (!((UnitOrderCount(UnitGroupUnit(lv_patrolGroup, lv_validUnitIndex)) == 0))) {
            Wait(1.0, c_timeGame);
        }
        Wait(RandomFixed(3.0, 6.0), c_timeGame);
        UnitGroupIssueOrder(lv_patrolGroup, OrderTargetingRelativePoint(AbilityCommand("attack", 0), PointFromName(("Raynor Base " + IntToString(lp_base) + " Stabilizer " + IntToString(lp_stabilizer) + " Patrol " + IntToString(lp_patrol) + " " + IntToString(3)))), c_orderQueueAddToEnd);
        lv_patrolUnitIndex = 1;
        for ( ; ( (autoB7188654_ai >= 0 && lv_patrolUnitIndex <= autoB7188654_ae) || (autoB7188654_ai < 0 && lv_patrolUnitIndex >= autoB7188654_ae) ) ; lv_patrolUnitIndex += autoB7188654_ai ) {
            if ((UnitIsAlive(UnitGroupUnit(lv_patrolGroup, lv_patrolUnitIndex)) == true)) {
                lv_validUnitIndex = lv_patrolUnitIndex;
                break;
            }

        }
        while (!((UnitOrderCount(UnitGroupUnit(lv_patrolGroup, 1)) == 0))) {
            Wait(1.0, c_timeGame);
        }
        Wait(RandomFixed(4.0, 10.0), c_timeGame);
        UnitGroupIssueOrder(lv_patrolGroup, OrderTargetingRelativePoint(AbilityCommand("attack", 0), PointFromName(("Raynor Base " + IntToString(lp_base) + " Stabilizer " + IntToString(lp_stabilizer) + " Patrol " + IntToString(lp_patrol) + " " + IntToString(2)))), c_orderQueueAddToEnd);
        lv_patrolUnitIndex = 1;
        for ( ; ( (autoD78EE222_ai >= 0 && lv_patrolUnitIndex <= autoD78EE222_ae) || (autoD78EE222_ai < 0 && lv_patrolUnitIndex >= autoD78EE222_ae) ) ; lv_patrolUnitIndex += autoD78EE222_ai ) {
            if ((UnitIsAlive(UnitGroupUnit(lv_patrolGroup, lv_patrolUnitIndex)) == true)) {
                lv_validUnitIndex = lv_patrolUnitIndex;
                break;
            }

        }
        while (!((UnitOrderCount(UnitGroupUnit(lv_patrolGroup, 1)) == 0))) {
            Wait(1.0, c_timeGame);
        }
        Wait(RandomFixed(3.0, 8.0), c_timeGame);
        if ((UnitGroupCount(lv_patrolGroup, c_unitCountAlive) <= 1)) {
            UnitGroupIssueOrder(lv_patrolGroup, OrderTargetingRelativePoint(AbilityCommand("attack", 0), PointFromName(("Raynor Base " + IntToString(lp_base) + " Stabilizer " + IntToString(lp_stabilizer) + " Patrol " + IntToString(lp_patrol) + " " + IntToString(1)))), c_orderQueueReplace);
            break;
        }

    }
    return true;
}

void gf_AdvanceSkyboxStage (int lp_newStage) {
    // Automatic Variable Declarations
    int auto18E86964_val;

    // Implementation
    if ((lp_newStage <= gv_skyboxStage)) {
        return ;
    }

    gv_skyboxStage = lp_newStage;
    auto18E86964_val = gv_skyboxStage;
    if (auto18E86964_val == 2) {
        ActorSend(ActorFrom("::global.Skybox"), "Signal 2StabilizersSaved");
    }
    else if (auto18E86964_val == 3) {
        ActorSend(ActorFrom("::global.Skybox"), "Signal 4StabilizersSaved");
    }
    else {
    }
}

trigger auto_gf_SpawnUnitsforNextAttackWave_Trigger = null;
string auto_gf_SpawnUnitsforNextAttackWave_lp_unitType;
int auto_gf_SpawnUnitsforNextAttackWave_lp_count;
point auto_gf_SpawnUnitsforNextAttackWave_lp_location;

void gf_SpawnUnitsforNextAttackWave (string lp_unitType, int lp_count, point lp_location) {
    auto_gf_SpawnUnitsforNextAttackWave_lp_unitType = lp_unitType;
    auto_gf_SpawnUnitsforNextAttackWave_lp_count = lp_count;
    auto_gf_SpawnUnitsforNextAttackWave_lp_location = lp_location;

    if (auto_gf_SpawnUnitsforNextAttackWave_Trigger == null) {
        auto_gf_SpawnUnitsforNextAttackWave_Trigger = TriggerCreate("auto_gf_SpawnUnitsforNextAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnUnitsforNextAttackWave_Trigger, false, false);
}

bool auto_gf_SpawnUnitsforNextAttackWave_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_gf_SpawnUnitsforNextAttackWave_lp_unitType;
    int lp_count = auto_gf_SpawnUnitsforNextAttackWave_lp_count;
    point lp_location = auto_gf_SpawnUnitsforNextAttackWave_lp_location;

    // Automatic Variable Declarations
    unitgroup autoCA7E39A2_g;
    int autoCA7E39A2_u;
    unit autoCA7E39A2_var;
    unitgroup autoE5B31A38_g;
    int autoE5B31A38_u;
    unit autoE5B31A38_var;
    unitgroup auto13782A6E_g;
    int auto13782A6E_u;
    unit auto13782A6E_var;

    // Implementation
    if ((lp_count <= 0)) {
        return true;
    }

    if (((lp_location == PointFromId(28)) || (lp_location == PointFromId(31)))) {
        gv_nextAttackWave = UnitGroupEmpty();
        if ((lp_location == PointFromId(28))) {
            AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS, PointFromId(28));
        }
        else if ((lp_location == PointFromId(31))) {
            AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS, PointFromId(33));
        }
        else if ((lp_location == PointFromId(941))) {
            AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS, PointFromId(941));
        }
        else if ((lp_location == PointFromId(983))) {
            AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS, PointFromId(983));
        }
    }

    if (((lp_unitType == "Banshee") || (lp_unitType == "VikingFighter") || (lp_unitType == "Raven") || (lp_unitType == "Battlecruiser"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_unitType, 0, gv_pLAYER_02_MOEBIUS, lp_location);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitGroupAddUnitGroup(gv_nextAttackWave, UnitLastCreatedGroup());
        autoCA7E39A2_g = UnitLastCreatedGroup();
        autoCA7E39A2_u = UnitGroupCount(autoCA7E39A2_g, c_unitCountAll);
        for (;; autoCA7E39A2_u -= 1) {
            autoCA7E39A2_var = UnitGroupUnitFromEnd(autoCA7E39A2_g, autoCA7E39A2_u);
            if (autoCA7E39A2_var == null) { break; }
            AISetUnitScriptControlled(autoCA7E39A2_var, true);
            UnitSetHeight(autoCA7E39A2_var, 12.0, 0.0);
            UnitSetState(autoCA7E39A2_var, c_unitStateStatusBar, false);
            UnitSetState(autoCA7E39A2_var, c_unitStateTargetable, false);
            UnitSetState(autoCA7E39A2_var, c_unitStateSelectable, false);
            UnitSetState(autoCA7E39A2_var, c_unitStateTooltipable, false);
            UnitSetState(autoCA7E39A2_var, c_unitStateCursorable, false);
            UnitSetState(autoCA7E39A2_var, c_unitStateInvulnerable, true);
        }
        Wait(0.0625, c_timeGame);
        autoE5B31A38_g = UnitLastCreatedGroup();
        autoE5B31A38_u = UnitGroupCount(autoE5B31A38_g, c_unitCountAll);
        for (;; autoE5B31A38_u -= 1) {
            autoE5B31A38_var = UnitGroupUnitFromEnd(autoE5B31A38_g, autoE5B31A38_u);
            if (autoE5B31A38_var == null) { break; }
            UnitSetHeight(autoE5B31A38_var, UnitGetPropertyFixed(autoE5B31A38_var, c_unitPropHeight, c_unitPropNormal), 2.0);
        }
        Wait(2.0, c_timeGame);
        auto13782A6E_g = UnitLastCreatedGroup();
        auto13782A6E_u = UnitGroupCount(auto13782A6E_g, c_unitCountAll);
        for (;; auto13782A6E_u -= 1) {
            auto13782A6E_var = UnitGroupUnitFromEnd(auto13782A6E_g, auto13782A6E_u);
            if (auto13782A6E_var == null) { break; }
            UnitSetState(auto13782A6E_var, c_unitStateStatusBar, true);
            UnitSetState(auto13782A6E_var, c_unitStateTargetable, true);
            UnitSetState(auto13782A6E_var, c_unitStateSelectable, true);
            UnitSetState(auto13782A6E_var, c_unitStateTooltipable, true);
            UnitSetState(auto13782A6E_var, c_unitStateCursorable, true);
            UnitSetState(auto13782A6E_var, c_unitStateInvulnerable, false);
        }
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_unitType, 0, gv_pLAYER_02_MOEBIUS, lp_location);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        AISetGroupScriptControlled(UnitLastCreatedGroup(), true);
        UnitGroupAddUnitGroup(gv_nextAttackWave, UnitLastCreatedGroup());
        libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, lp_location, UnitLastCreatedGroup(), false, gv_pLAYER_02_MOEBIUS);
    }
    return true;
}

trigger auto_gf_AttackWavePing_Trigger = null;
unitgroup auto_gf_AttackWavePing_lp_waveGroup;

void gf_AttackWavePing (unitgroup lp_waveGroup) {
    auto_gf_AttackWavePing_lp_waveGroup = lp_waveGroup;

    if (auto_gf_AttackWavePing_Trigger == null) {
        auto_gf_AttackWavePing_Trigger = TriggerCreate("auto_gf_AttackWavePing_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackWavePing_Trigger, false, false);
}

bool auto_gf_AttackWavePing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_waveGroup = auto_gf_AttackWavePing_lp_waveGroup;

    // Variable Declarations
    int lv_wavePing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_wavePing = c_invalidPingId;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGroupCenterOfGroup(lp_waveGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_wavePing = PingLastCreated();
    PingSetTooltip(lv_wavePing, StringExternal("Param/Value/33D1EE52"));
    PingSetScale(PingLastCreated(), 0.8);
    while ((libNtve_gf_UnitGroupIsDead(lp_waveGroup) == false)) {
        PingSetPosition(lv_wavePing, UnitGroupCenterOfGroup(lp_waveGroup));
        Wait(0.25, c_timeAI);
    }
    PingDestroy(lv_wavePing);
    return true;
}

trigger auto_gf_SpawnReinforcements_Trigger = null;
string auto_gf_SpawnReinforcements_lp_unitType1;
string auto_gf_SpawnReinforcements_lp_unitType2;
int auto_gf_SpawnReinforcements_lp_count1;
int auto_gf_SpawnReinforcements_lp_count2;
int auto_gf_SpawnReinforcements_lp_index;
bool auto_gf_SpawnReinforcements_lp_patrol;

void gf_SpawnReinforcements (string lp_unitType1, string lp_unitType2, int lp_count1, int lp_count2, int lp_index, bool lp_patrol) {
    auto_gf_SpawnReinforcements_lp_unitType1 = lp_unitType1;
    auto_gf_SpawnReinforcements_lp_unitType2 = lp_unitType2;
    auto_gf_SpawnReinforcements_lp_count1 = lp_count1;
    auto_gf_SpawnReinforcements_lp_count2 = lp_count2;
    auto_gf_SpawnReinforcements_lp_index = lp_index;
    auto_gf_SpawnReinforcements_lp_patrol = lp_patrol;

    if (auto_gf_SpawnReinforcements_Trigger == null) {
        auto_gf_SpawnReinforcements_Trigger = TriggerCreate("auto_gf_SpawnReinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnReinforcements_Trigger, false, false);
}

bool auto_gf_SpawnReinforcements_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType1 = auto_gf_SpawnReinforcements_lp_unitType1;
    string lp_unitType2 = auto_gf_SpawnReinforcements_lp_unitType2;
    int lp_count1 = auto_gf_SpawnReinforcements_lp_count1;
    int lp_count2 = auto_gf_SpawnReinforcements_lp_count2;
    int lp_index = auto_gf_SpawnReinforcements_lp_index;
    bool lp_patrol = auto_gf_SpawnReinforcements_lp_patrol;

    // Variable Declarations
    unitgroup lv_dropPodUnits;

    // Automatic Variable Declarations
    unitgroup auto7B4F91D4_g;
    int auto7B4F91D4_u;
    unit auto7B4F91D4_var;

    // Variable Initialization
    lv_dropPodUnits = UnitGroupEmpty();

    // Implementation
    if (((libVCMI_gf_GameIsOver() == true) || ((lp_count1 == 0) && (lp_count2 == 0)))) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(lp_count1, lp_unitType1, 0, gv_pLAYER_02_MOEBIUS, gv_reinforcements[lp_index].lv_spawn, gv_reinforcements[lp_index].lv_goto);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    libNtve_gf_UnitCreateFacingPoint(lp_count2, lp_unitType2, 0, gv_pLAYER_02_MOEBIUS, gv_reinforcements[lp_index].lv_spawn, gv_reinforcements[lp_index].lv_goto);
    UnitGroupAddUnitGroup(lv_dropPodUnits, UnitLastCreatedGroup());
    AISetGroupScriptControlled(lv_dropPodUnits, true);
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, gv_reinforcements[lp_index].lv_spawn, lv_dropPodUnits, true, gv_pLAYER_02_MOEBIUS);
    auto7B4F91D4_g = lv_dropPodUnits;
    auto7B4F91D4_u = UnitGroupCount(auto7B4F91D4_g, c_unitCountAll);
    for (;; auto7B4F91D4_u -= 1) {
        auto7B4F91D4_var = UnitGroupUnitFromEnd(auto7B4F91D4_g, auto7B4F91D4_u);
        if (auto7B4F91D4_var == null) { break; }
        if ((UnitGetType(auto7B4F91D4_var) == "SiegeTank")) {
            UnitIssueOrder(auto7B4F91D4_var, OrderTargetingPoint(AbilityCommand("move", 0), gv_reinforcements[lp_index].lv_goto), c_orderQueueReplace);
            UnitIssueOrder(auto7B4F91D4_var, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
            UnitGroupRemove(lv_dropPodUnits, auto7B4F91D4_var);
        }
        else {
            AISetUnitScriptControlled(auto7B4F91D4_var, false);
        }
    }
    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_MOEBIUS, 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS, gv_reinforcements[lp_index].lv_spawn);
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, lv_dropPodUnits);
    if ((lp_patrol == true)) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, gv_reinforcements[lp_index].lv_patrolPointA, false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, gv_reinforcements[lp_index].lv_patrolPointB, false);
    }
    else {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, gv_reinforcements[lp_index].lv_spawn, false);
    }
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
    return true;
}

trigger auto_gf_SpawnAirReinforcements_Trigger = null;
string auto_gf_SpawnAirReinforcements_lp_unitType1;
string auto_gf_SpawnAirReinforcements_lp_unitType2;
int auto_gf_SpawnAirReinforcements_lp_count1;
int auto_gf_SpawnAirReinforcements_lp_count2;
int auto_gf_SpawnAirReinforcements_lp_index;

void gf_SpawnAirReinforcements (string lp_unitType1, string lp_unitType2, int lp_count1, int lp_count2, int lp_index) {
    auto_gf_SpawnAirReinforcements_lp_unitType1 = lp_unitType1;
    auto_gf_SpawnAirReinforcements_lp_unitType2 = lp_unitType2;
    auto_gf_SpawnAirReinforcements_lp_count1 = lp_count1;
    auto_gf_SpawnAirReinforcements_lp_count2 = lp_count2;
    auto_gf_SpawnAirReinforcements_lp_index = lp_index;

    if (auto_gf_SpawnAirReinforcements_Trigger == null) {
        auto_gf_SpawnAirReinforcements_Trigger = TriggerCreate("auto_gf_SpawnAirReinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnAirReinforcements_Trigger, false, false);
}

bool auto_gf_SpawnAirReinforcements_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType1 = auto_gf_SpawnAirReinforcements_lp_unitType1;
    string lp_unitType2 = auto_gf_SpawnAirReinforcements_lp_unitType2;
    int lp_count1 = auto_gf_SpawnAirReinforcements_lp_count1;
    int lp_count2 = auto_gf_SpawnAirReinforcements_lp_count2;
    int lp_index = auto_gf_SpawnAirReinforcements_lp_index;

    // Variable Declarations
    fixed lv_currentOffset;
    fixed lv_increment;
    unitgroup lv_airGroup;

    // Automatic Variable Declarations
    unitgroup autoD9459FDB_g;
    int autoD9459FDB_u;
    unit autoD9459FDB_var;
    unitgroup auto158E3841_g;
    int auto158E3841_u;
    unit auto158E3841_var;
    unitgroup autoD901EE1B_g;
    int autoD901EE1B_u;
    unit autoD901EE1B_var;

    // Variable Initialization
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    if (((lp_count1 + lp_count2) <= 0.0)) {
        return true;
    }
    else {
        lv_increment = (360/(lp_count1+lp_count2));
    }
    libNtve_gf_CreateUnitsAtPoint2(lp_count1, lp_unitType1, 0, gv_pLAYER_02_MOEBIUS, gv_reinforcements[lp_index].lv_spawn);
    UnitGroupAddUnitGroup(lv_airGroup, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(lp_count2, lp_unitType2, 0, gv_pLAYER_02_MOEBIUS, gv_reinforcements[lp_index].lv_spawn);
    UnitGroupAddUnitGroup(lv_airGroup, UnitLastCreatedGroup());
    lv_currentOffset = PointGetFacing(gv_reinforcements[lp_index].lv_goto);
    autoD9459FDB_g = lv_airGroup;
    autoD9459FDB_u = UnitGroupCount(autoD9459FDB_g, c_unitCountAll);
    for (;; autoD9459FDB_u -= 1) {
        autoD9459FDB_var = UnitGroupUnitFromEnd(autoD9459FDB_g, autoD9459FDB_u);
        if (autoD9459FDB_var == null) { break; }
        UnitSetPropertyFixed(autoD9459FDB_var, c_unitPropEnergyPercent, 100.0);
        UnitSetPosition(autoD9459FDB_var, PointWithOffsetPolar(gv_reinforcements[lp_index].lv_goto, 5.0, lv_currentOffset), false);
        UnitSetHeight(autoD9459FDB_var, 12.0, 0.0);
        UnitIssueOrder(autoD9459FDB_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        lv_currentOffset += lv_increment;
    }
    Wait(0.0625, c_timeAI);
    auto158E3841_g = lv_airGroup;
    auto158E3841_u = UnitGroupCount(auto158E3841_g, c_unitCountAll);
    for (;; auto158E3841_u -= 1) {
        auto158E3841_var = UnitGroupUnitFromEnd(auto158E3841_g, auto158E3841_u);
        if (auto158E3841_var == null) { break; }
        UnitSetHeight(auto158E3841_var, UnitGetPropertyFixed(auto158E3841_var, c_unitPropHeight, c_unitPropNormal), 3.0);
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        Wait(3.0, c_timeAI);
        autoD901EE1B_g = lv_airGroup;
        autoD901EE1B_u = UnitGroupCount(autoD901EE1B_g, c_unitCountAll);
        for (;; autoD901EE1B_u -= 1) {
            autoD901EE1B_var = UnitGroupUnitFromEnd(autoD901EE1B_g, autoD901EE1B_u);
            if (autoD901EE1B_var == null) { break; }
            gf_HardBrutalAirLeash(autoD901EE1B_var);
        }
    }

    return true;
}

void gf_HardBrutalAirLeash (unit lp_flyer) {
    // Variable Declarations
    point lv_homePoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_homePoint = UnitGetPosition(lp_flyer);
    while ((UnitIsAlive(lp_flyer) == true)) {
        if ((AIIsScriptControlled(lp_flyer) == true) && (UnitGroupCount(libVCMI_gf_AITacticalEnemiesWithinRange(lp_flyer, 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))), c_unitCountAlive) > 0)) {
            UnitIssueOrder(lp_flyer, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            AISetUnitScriptControlled(lp_flyer, false);
        }

        if ((AIIsScriptControlled(lp_flyer) == false) && (DistanceBetweenPoints(UnitGetPosition(lp_flyer), lv_homePoint) > 12.0)) {
            UnitIssueOrder(lp_flyer, OrderTargetingPoint(AbilityCommand("move", 0), lv_homePoint), c_orderQueueReplace);
            UnitIssueOrder(lp_flyer, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }

        Wait(1.0, c_timeAI);
    }
}

trigger auto_gf_SpawnUnitsforIntro_Trigger = null;
string auto_gf_SpawnUnitsforIntro_lp_unitType;
int auto_gf_SpawnUnitsforIntro_lp_count;
point auto_gf_SpawnUnitsforIntro_lp_location;

void gf_SpawnUnitsforIntro (string lp_unitType, int lp_count, point lp_location) {
    auto_gf_SpawnUnitsforIntro_lp_unitType = lp_unitType;
    auto_gf_SpawnUnitsforIntro_lp_count = lp_count;
    auto_gf_SpawnUnitsforIntro_lp_location = lp_location;

    if (auto_gf_SpawnUnitsforIntro_Trigger == null) {
        auto_gf_SpawnUnitsforIntro_Trigger = TriggerCreate("auto_gf_SpawnUnitsforIntro_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnUnitsforIntro_Trigger, false, false);
}

bool auto_gf_SpawnUnitsforIntro_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_gf_SpawnUnitsforIntro_lp_unitType;
    int lp_count = auto_gf_SpawnUnitsforIntro_lp_count;
    point lp_location = auto_gf_SpawnUnitsforIntro_lp_location;

    // Variable Declarations
    unit lv_targetDummy;
    unitgroup lv_cinematicGroup;

    // Automatic Variable Declarations
    unitgroup autoCECDC35F_g;
    int autoCECDC35F_u;
    unit autoCECDC35F_var;
    unitgroup autoA659B5BE_g;
    int autoA659B5BE_u;
    unit autoA659B5BE_var;
    unitgroup auto093324AD_g;
    int auto093324AD_u;
    unit auto093324AD_var;
    unitgroup auto474EC096_g;
    int auto474EC096_u;
    unit auto474EC096_var;

    // Variable Initialization
    lv_cinematicGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_count <= 0)) {
        return true;
    }

    if ((lp_unitType == "VikingFighter")) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_04_RAYNOR_AI, PointWithOffsetPolar(lp_location, 2.0, 315.0));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        lv_targetDummy = UnitLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_unitType, 0, gv_pLAYER_02_MOEBIUS, lp_location);
        UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
        autoCECDC35F_g = UnitLastCreatedGroup();
        autoCECDC35F_u = UnitGroupCount(autoCECDC35F_g, c_unitCountAll);
        for (;; autoCECDC35F_u -= 1) {
            autoCECDC35F_var = UnitGroupUnitFromEnd(autoCECDC35F_g, autoCECDC35F_u);
            if (autoCECDC35F_var == null) { break; }
            AISetUnitScriptControlled(autoCECDC35F_var, true);
            UnitSetHeight(autoCECDC35F_var, 12.0, 0.0);
            UnitSetState(autoCECDC35F_var, c_unitStateInvulnerable, true);
        }
        Wait(0.0625, c_timeGame);
        autoA659B5BE_g = UnitLastCreatedGroup();
        autoA659B5BE_u = UnitGroupCount(autoA659B5BE_g, c_unitCountAll);
        for (;; autoA659B5BE_u -= 1) {
            autoA659B5BE_var = UnitGroupUnitFromEnd(autoA659B5BE_g, autoA659B5BE_u);
            if (autoA659B5BE_var == null) { break; }
            UnitSetHeight(autoA659B5BE_var, UnitGetPropertyFixed(autoA659B5BE_var, c_unitPropHeight, c_unitPropNormal), 2.0);
        }
        Wait(2.0, c_timeGame);
        auto093324AD_g = UnitLastCreatedGroup();
        auto093324AD_u = UnitGroupCount(auto093324AD_g, c_unitCountAll);
        for (;; auto093324AD_u -= 1) {
            auto093324AD_var = UnitGroupUnitFromEnd(auto093324AD_g, auto093324AD_u);
            if (auto093324AD_var == null) { break; }
            UnitSetState(auto093324AD_var, c_unitStateInvulnerable, false);
            UnitIssueOrder(auto093324AD_var, Order(AbilityCommand("AssaultMode", 0)), c_orderQueueReplace);
            UnitIssueOrder(auto093324AD_var, OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetDummy), c_orderQueueAddToEnd);
        }
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_unitType, 0, gv_pLAYER_02_MOEBIUS, lp_location);
        UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_cinematicGroup, UnitLastCreatedGroup());
        libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, lp_location, lv_cinematicGroup, true, gv_pLAYER_02_MOEBIUS);
        auto474EC096_g = lv_cinematicGroup;
        auto474EC096_u = UnitGroupCount(auto474EC096_g, c_unitCountAll);
        for (;; auto474EC096_u -= 1) {
            auto474EC096_var = UnitGroupUnitFromEnd(auto474EC096_g, auto474EC096_u);
            if (auto474EC096_var == null) { break; }
            Wait(0.4, c_timeGame);
            UnitSetPropertyFixed(auto474EC096_var, c_unitPropMovementSpeed, 1.75);
            UnitIssueOrder(gv_introBunkers[2], OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), auto474EC096_var), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PKorhal01");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_MOEBIUS, "SiegeTech", 1);
    TechTreeAbilityAllow(gv_pLAYER_02_MOEBIUS, AbilityCommand("MorphToHellion", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_02_MOEBIUS, AbilityCommand("MorphToHellionTank", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "DarkMarineArmor", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_PLATFORM_STABILIZER, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_MOEBIUS, gv_pLAYER_03_PLATFORM_STABILIZER, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_RAYNOR_AI, gv_pLAYER_03_PLATFORM_STABILIZER, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_05_RAYNOR_BASE_1, gv_pLAYER_03_PLATFORM_STABILIZER, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_06_RAYNOR_BASE_2, gv_pLAYER_03_PLATFORM_STABILIZER, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_RAYNOR_AI, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_01_USER, gv_pLAYER_04_RAYNOR_AI, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_RAYNOR_BASE_1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_01_USER, gv_pLAYER_05_RAYNOR_BASE_1, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_RAYNOR_BASE_2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_01_USER, gv_pLAYER_06_RAYNOR_BASE_2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_MOEBIUS, gv_pLAYER_04_RAYNOR_AI, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_04_RAYNOR_AI, gv_pLAYER_05_RAYNOR_BASE_1, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_04_RAYNOR_AI, gv_pLAYER_06_RAYNOR_BASE_2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_05_RAYNOR_BASE_1, gv_pLAYER_06_RAYNOR_BASE_2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_pLAYER_02_MOEBIUS, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_MOEBIUS, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_MOEBIUS, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_04_RAYNOR_AI, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_RAYNOR_AI, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_RAYNOR_AI, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_05_RAYNOR_BASE_1, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_RAYNOR_BASE_1, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_RAYNOR_BASE_1, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_06_RAYNOR_BASE_2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_RAYNOR_BASE_2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_RAYNOR_BASE_2, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD1B02068_g;
    int autoD1B02068_u;
    unit autoD1B02068_var;
    unitgroup auto68F001BD_g;
    int auto68F001BD_u;
    unit auto68F001BD_var;
    unitgroup auto99EDCBB8_g;
    int auto99EDCBB8_u;
    unit auto99EDCBB8_var;
    unitgroup autoC2AD3B89_g;
    int autoC2AD3B89_u;
    unit autoC2AD3B89_var;
    unitgroup autoB78E860E_g;
    int autoB78E860E_u;
    unit autoB78E860E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_InitStabilizers, true, false);
    TriggerExecute(gt_InitShadowScrambler, true, false);
    TriggerExecute(gt_InitReinforcements, true, false);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    autoD1B02068_g = UnitGroup(null, c_playerAny, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD1B02068_u = UnitGroupCount(autoD1B02068_g, c_unitCountAll);
    for (;; autoD1B02068_u -= 1) {
        autoD1B02068_var = UnitGroupUnitFromEnd(autoD1B02068_g, autoD1B02068_u);
        if (autoD1B02068_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD1B02068_var, false);
    }
    TerrainShowRegion(RegionFromId(89), false);
    auto68F001BD_g = UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68F001BD_u = UnitGroupCount(auto68F001BD_g, c_unitCountAll);
    for (;; auto68F001BD_u -= 1) {
        auto68F001BD_var = UnitGroupUnitFromEnd(auto68F001BD_g, auto68F001BD_u);
        if (auto68F001BD_var == null) { break; }
        UnitCargoCreate(auto68F001BD_var, "Reaper", 2);
    }
    auto99EDCBB8_g = UnitGroup("Raven", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto99EDCBB8_u = UnitGroupCount(auto99EDCBB8_g, c_unitCountAll);
    for (;; auto99EDCBB8_u -= 1) {
        auto99EDCBB8_var = UnitGroupUnitFromEnd(auto99EDCBB8_g, auto99EDCBB8_u);
        if (auto99EDCBB8_var == null) { break; }
        UnitSetPropertyFixed(auto99EDCBB8_var, c_unitPropEnergyPercent, 100.0);
    }
    autoC2AD3B89_g = UnitGroup("PlatformStabilizer", gv_pLAYER_03_PLATFORM_STABILIZER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC2AD3B89_u = UnitGroupCount(autoC2AD3B89_g, c_unitCountAll);
    for (;; autoC2AD3B89_u -= 1) {
        autoC2AD3B89_var = UnitGroupUnitFromEnd(autoC2AD3B89_g, autoC2AD3B89_u);
        if (autoC2AD3B89_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoC2AD3B89_var, "Signal Off");
        UnitSetState(autoC2AD3B89_var, c_unitStateTargetable, false);
        UnitSetState(autoC2AD3B89_var, c_unitStateHighlightable, false);
        UnitSetState(autoC2AD3B89_var, c_unitStateStatusBar, false);
        libNtve_gf_ChangeUnitDamage(autoC2AD3B89_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    autoB78E860E_g = UnitGroup("ShadowScrambler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB78E860E_u = UnitGroupCount(autoB78E860E_g, c_unitCountAll);
    for (;; autoB78E860E_u -= 1) {
        autoB78E860E_var = UnitGroupUnitFromEnd(autoB78E860E_g, autoB78E860E_u);
        if (autoB78E860E_var == null) { break; }
        UnitIssueOrder(autoB78E860E_var, Order(AbilityCommand("EMPNova", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PKorhal01_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto3085A431_ae;
    const int auto3085A431_ai = 1;
    unitgroup autoBEB61266_g;
    int autoBEB61266_u;
    unit autoBEB61266_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Korhal_WallTurbine", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libLbty_gf_AutoRevealRegion(RegionFromId(12), RegionFromId(12), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(13), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(30), RegionFromId(30), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(79), RegionFromId(79), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(54), RegionFromId(54), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(62), RegionFromId(62), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(63), RegionFromId(63), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(64), RegionFromId(58), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(46), RegionFromId(46), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(47), RegionFromId(47), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(53), RegionFromId(47), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(48), RegionFromId(48), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(49), RegionFromId(49), gv_pLAYER_01_USER);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionPlayableMap(), "SpaceFallingDebris");
    TriggerExecute(gt_AmbientQuakes, true, false);
    TriggerExecute(gt_CrashingDebris, true, false);
    TriggerExecute(gt_ExplodingDoodadsInit, true, false);
    TriggerExecute(gt_FireAnimations, true, false);
    auto3085A431_ae = gv_holesInGroundTotal;
    lv_index = 1;
    for ( ; ( (auto3085A431_ai >= 0 && lv_index <= auto3085A431_ae) || (auto3085A431_ai < 0 && lv_index >= auto3085A431_ae) ) ; lv_index += auto3085A431_ai ) {
        gv_holesInGround[lv_index].lv_region = RegionFromName(("Hull Breach " + IntToString(lv_index)));
        gv_holesInGround[lv_index].lv_point = PointFromName(("Hull Breach " + IntToString(lv_index)));
    }
    autoBEB61266_g = UnitGroup("KorhalDestructiblePlatformSmall", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBEB61266_u = UnitGroupCount(autoBEB61266_g, c_unitCountAll);
    for (;; autoBEB61266_u -= 1) {
        autoBEB61266_var = UnitGroupUnitFromEnd(autoBEB61266_g, autoBEB61266_u);
        if (autoBEB61266_var == null) { break; }
        UnitRemove(autoBEB61266_var);
    }
    UnitRemove(UnitFromId(1343));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_skyshieldStartingTime = libLotv_gf_DifficultyValueFixed2(600.0, 600.0, 480.0, 360.0);
    gv_additionalTimePostRepair = libLotv_gf_DifficultyValueFixed2(300.0, 300.0, 240.0, 240.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "PunisherGrenades", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranVehicleAndShipWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranVehicleAndShipArmorsLevel1", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("ChronoBoost");
    libVCMI_gf_AddMissionTipCampaign("OrbitalStrike");
    libVCMI_gf_AddMissionTipCampaign("ProxyPylon");
    libVCMI_gf_AddMissionTipCampaign("PhotonCannon");
    libVCMI_gf_AddMissionTipCampaign("ShieldBattery");
    libVCMI_gf_AddMissionTipCampaign("WarpGate");
    libVCMI_gf_AddMissionTipCampaign("ShadowScrambler");
    libVCMI_gf_EnableDisableNeedPylonInfo(true);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Spectre", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hellion", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HellionTank", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Bunker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("PerditionTurret", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("AutoTurret", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("MissileTurret", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto44825385_ae = 3;
    const int auto44825385_ai = 1;
    const int auto58FADAE6_ae = 5;
    const int auto58FADAE6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_OrbitalStrikeSequence, true, false);
    TriggerExecute(gt_StatInitialResourcePickupCount, true, false);
    TriggerEnable(gt_CreateHolesinGround, true);
    lv_index = 1;
    for ( ; ( (auto44825385_ai >= 0 && lv_index <= auto44825385_ae) || (auto44825385_ai < 0 && lv_index >= auto44825385_ae) ) ; lv_index += auto44825385_ai ) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(gv_introDebrisLocations[lv_index], 6.0), 0.0625, false);
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4F74AC54"), null, PointFromId(45));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_pLAYER_01_USER);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_MonitorTimerWindowQ, true, false);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    TriggerExecute(gt_CreateTimerWindow, true, false);
    TriggerExecute(gt_ObjectiveSecuretheStabilizersCreate, true, true);
    lv_index = 1;
    for ( ; ( (auto58FADAE6_ai >= 0 && lv_index <= auto58FADAE6_ae) || (auto58FADAE6_ai < 0 && lv_index >= auto58FADAE6_ae) ) ; lv_index += auto58FADAE6_ai ) {
        if ((gv_stabilizers[lv_index].lv_secured == false)) {
            libVCMI_gf_CreateObjectivePing(true, RegionGetCenter(gv_stabilizers[lv_index].lv_stabilizerRegion), StringExternal("Param/Value/A1C39F15"));
            gv_stabilizers[lv_index].lv_ping = PingLastCreated();
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(RegionGetCenter(gv_stabilizers[lv_index].lv_secureZone), 8.0), 0.0625, false);
        }

    }
    TriggerQueueExit();
    Wait(4.0, c_timeReal);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    if ((gv_stabilizers[1].lv_secured == false)) {
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(gv_stabilizers[1].lv_stabilizerRegion), 5.0, Color(0.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/694164E9"), null, RegionGetCenter(gv_stabilizers[1].lv_stabilizerRegion));
        VisRevealerEnable(gv_stabilizers[1].lv_revealer, true);
        Wait(1.0, c_timeReal);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00062", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(200.0, c_timeGame);
    TriggerExecute(gt_DiscoverBonusQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_skyshieldTimer, gv_skyshieldStartingTime, false, c_timeAI);
    libVCUI_gf_TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/A55715C5"), true, false);
    gv_skyshieldTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    libVCUI_gf_FlashTimerWindow(5.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTimerWindow_Init () {
    gt_CreateTimerWindow = TriggerCreate("gt_CreateTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Timer Window Q
//--------------------------------------------------------------------------------------------------
bool gt_MonitorTimerWindowQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cycleOneMinuteRemaining;
    int lv_cycleTwoMinuteRemaining;
    timer lv_cooldownTimer;

    // Automatic Variable Declarations
    int auto70089CB3_val;
    int auto15B252DA_val;

    // Variable Initialization
    lv_cooldownTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((gv_skyshieldTimerWindow == c_timerWindowNone)) {
            continue;
        }

        TriggerQueueEnter();
        if (((libVCMI_gf_GameIsOver() == true) || (gv_stabilizersSecured >= gv_stabilizersNeeded))) {
            return true;
        }

        if ((TimerGetRemaining(gv_skyshieldTimer) <= 90.0) && (TimerGetRemaining(lv_cooldownTimer) <= 1.0)) {
            TimerStart(lv_cooldownTimer, 92.0, false, c_timeAI);
            gf_AdvanceSkyboxStage(2);
            if (lv_cycleOneMinuteRemaining >= 5) {
                lv_cycleOneMinuteRemaining = 1;
            }
            else {
                lv_cycleOneMinuteRemaining = lv_cycleOneMinuteRemaining + 1;
            }
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            auto15B252DA_val = lv_cycleOneMinuteRemaining;
            if (auto15B252DA_val == 1) {
                libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00124", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto15B252DA_val == 2) {
                libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00125", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto15B252DA_val == 3) {
                libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00126", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto15B252DA_val == 4) {
                libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00127", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto15B252DA_val == 5) {
                libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
                libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00124", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        }
        else {
            if ((TimerGetRemaining(gv_skyshieldTimer) <= 180.0) && (TimerGetRemaining(lv_cooldownTimer) <= 1.0)) {
                TimerStart(lv_cooldownTimer, 92.0, false, c_timeAI);
                if (lv_cycleTwoMinuteRemaining >= 5) {
                    lv_cycleTwoMinuteRemaining = 1;
                }
                else {
                    lv_cycleTwoMinuteRemaining = lv_cycleTwoMinuteRemaining + 1;
                }
                libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
                auto70089CB3_val = lv_cycleTwoMinuteRemaining;
                if (auto70089CB3_val == 1) {
                    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                }
                else if (auto70089CB3_val == 2) {
                    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                }
                else if (auto70089CB3_val == 3) {
                    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00121", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                }
                else if (auto70089CB3_val == 4) {
                    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00122", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                }
                else if (auto70089CB3_val == 5) {
                    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00123", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                }
                else {
                    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                }
                libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
            }

        }
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorTimerWindowQ_Init () {
    gt_MonitorTimerWindowQ = TriggerCreate("gt_MonitorTimerWindowQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Strike Sequence
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalStrikeSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVoiC_gf_MissionStatusCheck("PShakuras01", libVoiC_ge_MissionStatus_Completed) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(90.0, c_timeAI);
    TriggerExecute(gt_ShadowCoreMovesQ, true, false);
    TriggerExecute(gt_MidOrbitalStrikeQ, true, false);
    TriggerExecute(gt_OrbitalStrikeQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalStrikeSequence_Init () {
    gt_OrbitalStrikeSequence = TriggerCreate("gt_OrbitalStrikeSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Core Moves Q
//--------------------------------------------------------------------------------------------------
bool gt_ShadowCoreMovesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Event_Expedition03_ProtossAlarm", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar02|Line00140", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00118", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowCoreMovesQ_Init () {
    gt_ShadowCoreMovesQ = TriggerCreate("gt_ShadowCoreMovesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Strike Q
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalStrikeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier2Power1");
    libVCUI_gf_TurnSpearofAdunSlotHighlightOnOff(2, true);
    TriggerEnable(gt_OrbitalStrikeUsedTeaching, true);
    TriggerEnable(gt_OrbitalStrikeUsedTracking, true);
    TriggerEnable(gt_OrbitalStrikeReminderQ, true);
    Wait(2.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalStrikeQ_Init () {
    gt_OrbitalStrikeQ = TriggerCreate("gt_OrbitalStrikeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Strike Used - Teaching
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalStrikeUsedTeaching_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_SpearofAdunTargetingModeAbility() == "GPTier2Power1"))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCUI_gf_TurnSpearofAdunSlotHighlightOnOff(2, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalStrikeUsedTeaching_Init () {
    gt_OrbitalStrikeUsedTeaching = TriggerCreate("gt_OrbitalStrikeUsedTeaching_Func");
    TriggerEnable(gt_OrbitalStrikeUsedTeaching, false);
    libVCMI_gf_SpearofAdunTargetingModeExited(gt_OrbitalStrikeUsedTeaching, libVCMI_ge_SpearofAdunTargetingExitType_ByFiring);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Strike Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalStrikeReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_MOEBIUS, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5)) {
        return true;
    }

    VisRevealArea(gv_pLAYER_01_USER, EventUnitRegion(), 10.0, false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(EventUnitRegion()), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6917537F"), null, RegionGetCenter(EventUnitRegion()));
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00099", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalStrikeReminderQ_Init () {
    gt_OrbitalStrikeReminderQ = TriggerCreate("gt_OrbitalStrikeReminderQ_Func");
    TriggerEnable(gt_OrbitalStrikeReminderQ, false);
    TriggerAddEventUnitRegion(gt_OrbitalStrikeReminderQ, null, RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_OrbitalStrikeReminderQ, null, RegionFromId(41), true);
    TriggerAddEventUnitRegion(gt_OrbitalStrikeReminderQ, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Stabilizers
//--------------------------------------------------------------------------------------------------
bool gt_InitStabilizers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto505A6B8E_ae = 5;
    const int auto505A6B8E_ai = 1;
    const int auto8DA7F0F1_ae = 5;
    const int auto8DA7F0F1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto505A6B8E_ai >= 0 && lv_index <= auto505A6B8E_ae) || (auto505A6B8E_ai < 0 && lv_index >= auto505A6B8E_ae) ) ; lv_index += auto505A6B8E_ai ) {
        gv_stabilizers[lv_index].lv_stabilizerRegion = RegionFromName(("Stabilizer " + IntToString(lv_index)));
        gv_stabilizers[lv_index].lv_secureZone = RegionFromName(("Generator Secure Zone " + IntToString(lv_index)));
        gv_stabilizers[lv_index].lv_stabilizerUnit = UnitGroupUnit(UnitGroup("PlatformStabilizer", gv_pLAYER_03_PLATFORM_STABILIZER, gv_stabilizers[lv_index].lv_secureZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        VisRevealerCreate(gv_pLAYER_01_USER, gv_stabilizers[lv_index].lv_secureZone);
        gv_stabilizers[lv_index].lv_revealer = VisRevealerLastCreated();
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_stabilizers[lv_index].lv_dropshipEntry = PointFromName(("Dropship Entry " + IntToString(lv_index)));
        gv_stabilizers[lv_index].lv_dropshipExit = PointFromName(("Dropship Exit " + IntToString(lv_index)));
        if ((lv_index == 5)) {
            gv_stabilizers[lv_index].lv_hullBreachLocation = PointFromId(965);
        }
        else {
            gv_stabilizers[lv_index].lv_hullBreachLocation = PointFromName(("Hull Breach " + IntToString(lv_index)));
        }
        gv_stabilizers[lv_index].lv_supplyDepotPoint1 = PointFromName(("Reinforcement Supply " + IntToString(lv_index) + " 1"));
        gv_stabilizers[lv_index].lv_supplyDepotPoint2 = PointFromName(("Reinforcement Supply " + IntToString(lv_index) + " 2"));
        gv_stabilizers[lv_index].lv_bunkerPoint = PointFromName(("Reinforcement Bunker " + IntToString(lv_index) + " 1"));
        gv_stabilizers[lv_index].lv_sensorTowerPoint = PointFromName(("Reinforcement Sensor " + IntToString(lv_index) + " 1"));
    }
    lv_index = 1;
    for ( ; ( (auto8DA7F0F1_ai >= 0 && lv_index <= auto8DA7F0F1_ae) || (auto8DA7F0F1_ai < 0 && lv_index >= auto8DA7F0F1_ae) ) ; lv_index += auto8DA7F0F1_ai ) {
        UnitSetPropertyFixed(gv_stabilizers[lv_index].lv_stabilizerUnit, c_unitPropLife, 250.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitStabilizers_Init () {
    gt_InitStabilizers = TriggerCreate("gt_InitStabilizers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Stabilizers
//--------------------------------------------------------------------------------------------------
bool gt_MonitorStabilizers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unitgroup lv_defenders;

    // Automatic Variable Declarations
    const int auto95523CC8_ae = 5;
    const int auto95523CC8_ai = 1;
    unitgroup autoB5BE6CE5_g;
    int autoB5BE6CE5_u;
    unit autoB5BE6CE5_var;

    // Variable Initialization
    lv_defenders = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto95523CC8_ai >= 0 && lv_index <= auto95523CC8_ae) || (auto95523CC8_ai < 0 && lv_index >= auto95523CC8_ae) ) ; lv_index += auto95523CC8_ai ) {
        if ((gv_stabilizers[lv_index].lv_secured == false)) {
            lv_defenders = UnitGroupEmpty();
            autoB5BE6CE5_g = UnitGroup(null, gv_pLAYER_02_MOEBIUS, gv_stabilizers[lv_index].lv_secureZone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB5BE6CE5_u = UnitGroupCount(autoB5BE6CE5_g, c_unitCountAll);
            for (;; autoB5BE6CE5_u -= 1) {
                autoB5BE6CE5_var = UnitGroupUnitFromEnd(autoB5BE6CE5_g, autoB5BE6CE5_u);
                if (autoB5BE6CE5_var == null) { break; }
                if ((UnitGetType(autoB5BE6CE5_var) != "Raven")) {
                    UnitGroupAdd(lv_defenders, autoB5BE6CE5_var);
                }

            }
            if ((UnitGroupCount(lv_defenders, c_unitCountAlive) == 0)) {
                gv_stabilizers[lv_index].lv_secured = true;
                gv_stabilizersSecured += 1;
                PingDestroy(gv_stabilizers[lv_index].lv_ping);
                RegionSetCenter(RegionFromId(52), RegionGetCenter(gv_stabilizers[lv_index].lv_secureZone));
                if ((RegionContainsPoint(RegionFromId(52), CameraGetTarget(gv_pLAYER_01_USER)) != true)) {
                    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_stabilizers[lv_index].lv_stabilizerUnit), 5.0, Color(0.00, 100.00, 0.00));
                }

                VisRevealerEnable(gv_stabilizers[lv_index].lv_revealer, true);
                SoundPlayForPlayer(SoundLink("Kor1_StabilizerSecuredStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TriggerExecute(gt_ObjectiveSecuretheStabilizersUpdate, true, false);
                TriggerExecute(gt_AchievementTimeBetweenTwoStabilizers, true, false);
                TriggerExecute(gt_MasteryTimeBetweenThreeStabilizers, true, false);
                if ((TimerGetRemaining(gv_skyshieldTimer) < gv_lowestTimeToImpact)) {
                    gv_lowestTimeToImpact = TimerGetRemaining(gv_skyshieldTimer);
                }

                if ((gv_stabilizersSecured >= gv_stabilizersNeeded)) {
                    gv_finalStabilizerIndex = lv_index;
                    TriggerExecute(gt_VictorySecureStabilizers, true, false);
                    TimerPause(gv_skyshieldTimer, true);
                    TimerWindowShow(gv_skyshieldTimerWindow, PlayerGroupAll(), false);
                }
                else {
                    libVCUI_gf_FlashTimerWindow(5.0, false);
                    TimerStart(gv_skyshieldTimer, (TimerGetRemaining(gv_skyshieldTimer) + gv_additionalTimePostRepair), false, c_timeAI);
                }
                gf_SecureStabilizer(lv_index);
                TriggerExecute(gt_ReinforceOtherStabilizers, true, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorStabilizers_Init () {
    gt_MonitorStabilizers = TriggerCreate("gt_MonitorStabilizers_Func");
    TriggerAddEventTimePeriodic(gt_MonitorStabilizers, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stabilizer Defense
//--------------------------------------------------------------------------------------------------
bool gt_StabilizerDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto129E269B_ae = 5;
    const int auto129E269B_ai = 1;
    unitgroup auto29A7AC29_g;
    int auto29A7AC29_u;
    unit auto29A7AC29_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto129E269B_ai >= 0 && lv_index <= auto129E269B_ae) || (auto129E269B_ai < 0 && lv_index >= auto129E269B_ae) ) ; lv_index += auto129E269B_ai ) {
        if ((gv_stabilizers[lv_index].lv_secured == false) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_MOEBIUS, c_unitAllianceEnemy, gv_stabilizers[lv_index].lv_secureZone, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            auto29A7AC29_g = UnitGroup(null, gv_pLAYER_02_MOEBIUS, gv_stabilizers[lv_index].lv_secureZone, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto29A7AC29_u = UnitGroupCount(auto29A7AC29_g, c_unitCountAll);
            for (;; auto29A7AC29_u -= 1) {
                auto29A7AC29_var = UnitGroupUnitFromEnd(auto29A7AC29_g, auto29A7AC29_u);
                if (auto29A7AC29_var == null) { break; }
                libNtve_gf_AICast(auto29A7AC29_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(gv_pLAYER_02_MOEBIUS, c_unitAllianceEnemy, gv_stabilizers[lv_index].lv_secureZone, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto29A7AC29_var)))));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StabilizerDefense_Init () {
    gt_StabilizerDefense = TriggerCreate("gt_StabilizerDefense_Func");
    TriggerAddEventTimePeriodic(gt_StabilizerDefense, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Begin Repairs Q
//--------------------------------------------------------------------------------------------------
bool gt_BeginRepairsQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_repairTransmissionCount;
    int lv_transmissionStabilizer;

    // Automatic Variable Declarations
    int autoD9F8D7BA_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_repairTransmissionCount = gv_stabilizersSecured;
    lv_transmissionStabilizer = gv_activeStabilizer;
    Wait(1.0, c_timeAI);
    TriggerQueueEnter();
    if ((gv_stabilizersSecured == 2)) {
        if ((gv_autosave1Triggered == false) && (gv_autosave2Triggered == false)) {
            gv_autosave1Triggered = true;
            libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/AF6E62EB"));
        }

        gf_AdvanceSkyboxStage(2);
    }
    else if ((gv_stabilizersSecured == 3)) {
        gf_AdvanceSkyboxStage(3);
    }
    else if ((gv_stabilizersSecured == 4)) {
        if ((gv_autosave2Triggered == false)) {
            gv_autosave2Triggered = true;
            libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/2DEBD30A"));
        }

    }
    TriggerQueueExit();
    if ((gv_repairTransmissionActive == true)) {
        return true;
    }
    else {
        gv_repairTransmissionActive = true;
    }
    autoD9F8D7BA_val = lv_repairTransmissionCount;
    if (autoD9F8D7BA_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00103", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00063", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if (((lv_transmissionStabilizer == 1) || (lv_transmissionStabilizer == 2) || (lv_transmissionStabilizer == 5))) {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00065", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoD9F8D7BA_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoD9F8D7BA_val == 3) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00075", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00093", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoD9F8D7BA_val == 4) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00103", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    gv_repairTransmissionActive = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeginRepairsQ_Init () {
    gt_BeginRepairsQ = TriggerCreate("gt_BeginRepairsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Base 1
//--------------------------------------------------------------------------------------------------
bool gt_RaynorBase1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_flyingBuildings;
    point lv_landingTest;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_flyingBuildings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_MOEBIUS, RegionFromId(50), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_basesReclaimed += 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "OrbitalCommandFlying", c_unitCreateIgnorePlacement, gv_pLAYER_05_RAYNOR_BASE_1, PointFromId(1929));
    gf_OrderStructuretoLand(RegionGetCenter(RegionFromId(72)), UnitLastCreated());
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BarracksFlying", c_unitCreateIgnorePlacement, gv_pLAYER_05_RAYNOR_BASE_1, PointFromId(1925));
    gf_OrderStructuretoLand(RegionGetCenter(RegionFromId(74)), UnitLastCreated());
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BarracksFlying", c_unitCreateIgnorePlacement, gv_pLAYER_05_RAYNOR_BASE_1, PointFromId(16));
    gf_OrderStructuretoLand(RegionGetCenter(RegionFromId(73)), UnitLastCreated());
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StarportFlying", c_unitCreateIgnorePlacement, gv_pLAYER_05_RAYNOR_BASE_1, PointFromId(1932));
    gf_OrderStructuretoLand(RegionGetCenter(RegionFromId(75)), UnitLastCreated());
    TriggerExecute(gt_RaynorBaseReclaimedQ, true, false);
    gf_PatrolRaynorsUnits(1, 1, 2);
    gf_PatrolRaynorsUnits(1, 2, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorBase1_Init () {
    gt_RaynorBase1 = TriggerCreate("gt_RaynorBase1_Func");
    TriggerAddEventTimePeriodic(gt_RaynorBase1, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Base 2
//--------------------------------------------------------------------------------------------------
bool gt_RaynorBase2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_MOEBIUS, RegionFromId(51), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_basesReclaimed += 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "OrbitalCommandFlying", c_unitCreateIgnorePlacement, gv_pLAYER_06_RAYNOR_BASE_2, PointFromId(1946));
    gf_OrderStructuretoLand(RegionGetCenter(RegionFromId(69)), UnitLastCreated());
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BarracksFlying", c_unitCreateIgnorePlacement, gv_pLAYER_06_RAYNOR_BASE_2, PointFromId(1945));
    gf_OrderStructuretoLand(RegionGetCenter(RegionFromId(70)), UnitLastCreated());
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BarracksFlying", c_unitCreateIgnorePlacement, gv_pLAYER_06_RAYNOR_BASE_2, PointFromId(1963));
    gf_OrderStructuretoLand(RegionGetCenter(RegionFromId(71)), UnitLastCreated());
    TriggerExecute(gt_RaynorBaseReclaimedQ, true, false);
    gf_PatrolRaynorsUnits(2, 1, 5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorBase2_Init () {
    gt_RaynorBase2 = TriggerCreate("gt_RaynorBase2_Func");
    TriggerAddEventTimePeriodic(gt_RaynorBase2, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Base Reclaimed Q
//--------------------------------------------------------------------------------------------------
bool gt_RaynorBaseReclaimedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_basesReclaimed == 1)) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorBaseReclaimedQ_Init () {
    gt_RaynorBaseReclaimedQ = TriggerCreate("gt_RaynorBaseReclaimedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Shadow Scrambler
//--------------------------------------------------------------------------------------------------
bool gt_InitShadowScrambler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto8C5BFFF6_ae;
    const int auto8C5BFFF6_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8C5BFFF6_ae = gv_scramblersNeeded;
    lv_index = 1;
    for ( ; ( (auto8C5BFFF6_ai >= 0 && lv_index <= auto8C5BFFF6_ae) || (auto8C5BFFF6_ai < 0 && lv_index >= auto8C5BFFF6_ae) ) ; lv_index += auto8C5BFFF6_ai ) {
        gv_scramblers[lv_index].lv_region = RegionFromName(("Scrambler Region " + IntToString(lv_index)));
        gv_scramblers[lv_index].lv_scrambler = UnitGroupUnit(UnitGroup("ShadowScrambler", gv_pLAYER_02_MOEBIUS, gv_scramblers[lv_index].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitShadowScrambler_Init () {
    gt_InitShadowScrambler = TriggerCreate("gt_InitShadowScrambler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scrambler Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ScramblerDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    point lv_solaritePoint;

    // Automatic Variable Declarations
    int autoA2A8EDB9_ae;
    const int autoA2A8EDB9_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_solaritePoint = UnitGetPosition(EventUnit());
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("EMPNova", 0)), c_orderQueueReplace);
    autoA2A8EDB9_ae = gv_scramblersNeeded;
    lv_index = 1;
    for ( ; ( (autoA2A8EDB9_ai >= 0 && lv_index <= autoA2A8EDB9_ae) || (autoA2A8EDB9_ai < 0 && lv_index >= autoA2A8EDB9_ae) ) ; lv_index += autoA2A8EDB9_ai ) {
        if ((EventUnit() == gv_scramblers[lv_index].lv_scrambler)) {
            break;
        }

    }
    if ((lv_index == 0)) {
        return true;
    }

    gv_scramblers[lv_index].lv_disabled = true;
    UnitAbilityEnable(gv_scramblers[lv_index].lv_scrambler, "EMPNova", false);
    PingDestroy(gv_scramblers[lv_index].lv_ping);
    gv_scramblersDestroyed += 1;
    TriggerExecute(gt_ObjectiveDestroyShadowScrambersUpdate, true, false);
    if ((gv_scramblersDestroyed == 1)) {
        TriggerExecute(gt_EMPScrambler01DestroyedQ, true, false);
    }

    if ((gv_scramblersDestroyed == 2)) {
        TriggerExecute(gt_EMPScrambler02DestroyedQ, true, false);
    }

    if ((gv_scramblersDestroyed == gv_scramblersNeeded)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_EMPScrambler03DestroyedQ, true, false);
        TriggerExecute(gt_ObjectiveDestroyShadowScrambersComplete, true, false);
    }

    Wait(4.5, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, lv_solaritePoint);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ObjectiveCollectionBeam", 0, 1);
    Wait(2.0, c_timeAI);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(lv_solaritePoint, "PKorhal01Bonus01");
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScramblerDestroyed_Init () {
    gt_ScramblerDestroyed = TriggerCreate("gt_ScramblerDestroyed_Func");
    TriggerAddEventUnitDied(gt_ScramblerDestroyed, UnitRefFromVariable("gv_scramblers[1].lv_scrambler"));
    TriggerAddEventUnitDied(gt_ScramblerDestroyed, UnitRefFromVariable("gv_scramblers[2].lv_scrambler"));
    TriggerAddEventUnitDied(gt_ScramblerDestroyed, UnitRefFromVariable("gv_scramblers[3].lv_scrambler"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Discover Bonus Proximity
//--------------------------------------------------------------------------------------------------
bool gt_DiscoverBonusProximity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DiscoverBonusQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiscoverBonusProximity_Init () {
    gt_DiscoverBonusProximity = TriggerCreate("gt_DiscoverBonusProximity_Func");
    TriggerAddEventUnitRegion(gt_DiscoverBonusProximity, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Discover Bonus Q
//--------------------------------------------------------------------------------------------------
bool gt_DiscoverBonusQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scramblerIndex;

    // Automatic Variable Declarations
    int auto3701CE69_ae;
    const int auto3701CE69_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ScramblerVikings, true);
    TriggerQueueEnter();
    if (((libVCMI_gf_GameIsOver() == true) || (gv_scramblersDestroyed >= gv_scramblersNeeded))) {
        return true;
    }

    auto3701CE69_ae = gv_scramblersNeeded;
    lv_scramblerIndex = 1;
    for ( ; ( (auto3701CE69_ai >= 0 && lv_scramblerIndex <= auto3701CE69_ae) || (auto3701CE69_ai < 0 && lv_scramblerIndex >= auto3701CE69_ae) ) ; lv_scramblerIndex += auto3701CE69_ai ) {
        if ((gv_scramblers[lv_scramblerIndex].lv_scramblerDestroyed == false)) {
            libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_scramblers[lv_scramblerIndex].lv_scrambler), 5.0, Color(0.00, 100.00, 0.00));
            libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(gv_scramblers[lv_scramblerIndex].lv_scrambler), TextExpressionAssemble("Param/Expression/8CB12FF5"));
            gv_scramblers[lv_scramblerIndex].lv_ping = PingLastCreated();
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_scramblers[lv_scramblerIndex].lv_scrambler), 12.0), 8.0, false);
        }

    }
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectiveDestroyShadowScrambersCreate, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiscoverBonusQ_Init () {
    gt_DiscoverBonusQ = TriggerCreate("gt_DiscoverBonusQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EMP Scrambler 01 Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_EMPScrambler01DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EMPScrambler01DestroyedQ_Init () {
    gt_EMPScrambler01DestroyedQ = TriggerCreate("gt_EMPScrambler01DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EMP Scrambler 02 Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_EMPScrambler02DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EMPScrambler02DestroyedQ_Init () {
    gt_EMPScrambler02DestroyedQ = TriggerCreate("gt_EMPScrambler02DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EMP Scrambler 03 Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_EMPScrambler03DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00117", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EMPScrambler03DestroyedQ_Init () {
    gt_EMPScrambler03DestroyedQ = TriggerCreate("gt_EMPScrambler03DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient Quakes
//--------------------------------------------------------------------------------------------------
bool gt_AmbientQuakes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeReal);
    TimerStart(gv_quakeTimer, RandomFixed(20.0, 60.0), false, c_timeGame);
    while (true) {
        libNtve_gf_WaitForTimer(gv_quakeTimer, 0.0, false);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((TriggerQueueIsEmpty() == false)) {
            while (!((TriggerQueueIsEmpty() == true))) {
                Wait(0.5, c_timeGame);
            }
            TimerStart(gv_quakeTimer, RandomFixed(20.0, 40.0), false, c_timeGame);
        }
        else {
            TimerStart(gv_quakeTimer, RandomFixed(20.0, 60.0), false, c_timeGame);
        }
        CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
        libNtve_gf_CreateActorAtPoint("Korhal01_Quad_Amb_BG_Platform_Quake", RegionGetCenter(RegionEntireMap()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientQuakes_Init () {
    gt_AmbientQuakes = TriggerCreate("gt_AmbientQuakes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crashing Debris
//--------------------------------------------------------------------------------------------------
bool gt_CrashingDebris_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_randomScale;
    int lv_debrisIndex;

    // Automatic Variable Declarations
    const int auto520164ED_ae = 94;
    const int auto520164ED_ai = 1;
    const int auto8D27EFFE_ae = 94;
    const int auto8D27EFFE_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_debrisIndex = 1;
    for ( ; ( (auto520164ED_ai >= 0 && lv_debrisIndex <= auto520164ED_ae) || (auto520164ED_ai < 0 && lv_debrisIndex >= auto520164ED_ae) ) ; lv_debrisIndex += auto520164ED_ai ) {
        gv_crashingDebris[lv_debrisIndex].lv_point = PointFromName(("Crashing Debris " + IntToString(lv_debrisIndex)));
        TimerStart(gv_crashingDebris[lv_debrisIndex].lv_timer, RandomFixed(4.0, 16.0), false, c_timeGame);
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        lv_debrisIndex = 1;
        for ( ; ( (auto8D27EFFE_ai >= 0 && lv_debrisIndex <= auto8D27EFFE_ae) || (auto8D27EFFE_ai < 0 && lv_debrisIndex >= auto8D27EFFE_ae) ) ; lv_debrisIndex += auto8D27EFFE_ai ) {
            if ((TimerGetRemaining(gv_crashingDebris[lv_debrisIndex].lv_timer) < 1)) {
                libNtve_gf_KillModel(gv_crashingDebris[lv_debrisIndex].lv_actor);
                UnitCreate(1, "RaisingWreckage", 0, 0, gv_crashingDebris[lv_debrisIndex].lv_point, PointGetFacing(gv_crashingDebris[lv_debrisIndex].lv_point));
                lv_randomScale = RandomFixed(100.0, 150.0);
                UnitSetScale(UnitLastCreated(), lv_randomScale, lv_randomScale, lv_randomScale);
                gv_crashingDebris[lv_debrisIndex].lv_actor = libNtve_gf_ActorLastCreated();
                TimerStart(gv_crashingDebris[lv_debrisIndex].lv_timer, RandomFixed(15.0, 45.0), false, c_timeGame);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrashingDebris_Init () {
    gt_CrashingDebris = TriggerCreate("gt_CrashingDebris_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exploding Doodads Init
//--------------------------------------------------------------------------------------------------
bool gt_ExplodingDoodadsInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoEDC1C898_ae = 2;
    const int autoEDC1C898_ai = 1;
    const int auto5A098445_ae = 5;
    const int auto5A098445_ai = 1;
    const int autoD9CA40C6_ae = 4;
    const int autoD9CA40C6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (autoEDC1C898_ai >= 0 && lv_index <= autoEDC1C898_ae) || (autoEDC1C898_ai < 0 && lv_index >= autoEDC1C898_ae) ) ; lv_index += autoEDC1C898_ai ) {
        gv_explodingCliffBuildings[lv_index].lv_region = RegionFromName(("Exploding Cliff Building " + IntToString(lv_index)));
    }
    lv_index = 1;
    for ( ; ( (auto5A098445_ai >= 0 && lv_index <= auto5A098445_ae) || (auto5A098445_ai < 0 && lv_index >= auto5A098445_ae) ) ; lv_index += auto5A098445_ai ) {
        gv_damagedCliffBuildings[lv_index].lv_region = RegionFromName(("Damaged Cliff Building " + IntToString(lv_index)));
    }
    lv_index = 1;
    for ( ; ( (autoD9CA40C6_ai >= 0 && lv_index <= autoD9CA40C6_ae) || (autoD9CA40C6_ai < 0 && lv_index >= autoD9CA40C6_ae) ) ; lv_index += autoD9CA40C6_ai ) {
        gv_korhalDebris[lv_index].lv_region = RegionFromName(("Korhal Debris " + IntToString(lv_index)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExplodingDoodadsInit_Init () {
    gt_ExplodingDoodadsInit = TriggerCreate("gt_ExplodingDoodadsInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exploding Doodads
//--------------------------------------------------------------------------------------------------
bool gt_ExplodingDoodads_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto3D5C78A6_ae = 2;
    const int auto3D5C78A6_ai = 1;
    const int auto3A511A98_ae = 5;
    const int auto3A511A98_ai = 1;
    const int autoA90E764B_ae = 4;
    const int autoA90E764B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto3D5C78A6_ai >= 0 && lv_index <= auto3D5C78A6_ae) || (auto3D5C78A6_ai < 0 && lv_index >= auto3D5C78A6_ae) ) ; lv_index += auto3D5C78A6_ai ) {
        if ((gv_explodingCliffBuildings[lv_index].lv_triggered == false) && (RegionContainsPoint(gv_explodingCliffBuildings[lv_index].lv_region, CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            gv_explodingCliffBuildings[lv_index].lv_triggered = true;
            libNtve_gf_KillDoodadsInRegion(gv_explodingCliffBuildings[lv_index].lv_region, "ExplodingCliffBuilding");
        }

    }
    lv_index = 1;
    for ( ; ( (auto3A511A98_ai >= 0 && lv_index <= auto3A511A98_ae) || (auto3A511A98_ai < 0 && lv_index >= auto3A511A98_ae) ) ; lv_index += auto3A511A98_ai ) {
        if ((gv_damagedCliffBuildings[lv_index].lv_triggered == false) && (RegionContainsPoint(gv_damagedCliffBuildings[lv_index].lv_region, CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            gv_damagedCliffBuildings[lv_index].lv_triggered = true;
            libNtve_gf_KillDoodadsInRegion(gv_damagedCliffBuildings[lv_index].lv_region, "KorhalPlatform_DamagedCliffBuilding");
        }

    }
    lv_index = 1;
    for ( ; ( (autoA90E764B_ai >= 0 && lv_index <= autoA90E764B_ae) || (autoA90E764B_ai < 0 && lv_index >= autoA90E764B_ae) ) ; lv_index += autoA90E764B_ai ) {
        if ((gv_korhalDebris[lv_index].lv_triggered == false) && (RegionContainsPoint(gv_korhalDebris[lv_index].lv_region, CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            gv_korhalDebris[lv_index].lv_triggered = true;
            libNtve_gf_KillDoodadsInRegion(gv_korhalDebris[lv_index].lv_region, "Korhal_Debris");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExplodingDoodads_Init () {
    gt_ExplodingDoodads = TriggerCreate("gt_ExplodingDoodads_Func");
    TriggerAddEventTimePeriodic(gt_ExplodingDoodads, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Animations
//--------------------------------------------------------------------------------------------------
bool gt_FireAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_fireSmall;

    // Automatic Variable Declarations
    fixed autoE69EEE9A_at;

    // Variable Initialization
    lv_fireSmall = true;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("KorhalPlatformEx2", 0.0);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity", "Reentry_Heat", RegionEntireMap());
    Wait(60.0, c_timeAI);
    autoE69EEE9A_at = 0;
    while (!((gv_stabilizersSecured >= 1)) && autoE69EEE9A_at <= 180.0) {
        Wait(1.0, c_timeAI);
        autoE69EEE9A_at = autoE69EEE9A_at + 1.0;
    }
    GameSetLighting("KorhalPlatformEx2_Fire", 4.0);
    FogSetColorOverTime(Color(100.00, 35.29, 16.86), 2.0);
    FogSetDensityOverTime(0.1, 2.0);
    FogSetFallOffOverTime(0.135, 2.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity 1.000000 8.000000", "Reentry_Heat", RegionEntireMap());
    while (true) {
        Wait(1.0, c_timeAI);
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((lv_fireSmall == true) && (TimerGetRemaining(gv_skyshieldTimer) < gv_additionalTimePostRepair) && (TimerGetRemaining(gv_quakeTimer) > 5.0)) {
            lv_fireSmall = false;
            CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
            libNtve_gf_CreateActorAtPoint("Korhal01_Quad_Amb_BG_Platform_Quake", RegionGetCenter(RegionEntireMap()));
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(3.0, c_timeGame);
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
        }

        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((lv_fireSmall == false) && (TimerGetRemaining(gv_skyshieldTimer) > gv_additionalTimePostRepair)) {
            lv_fireSmall = true;
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(3.0, c_timeGame);
            libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireAnimations_Init () {
    gt_FireAnimations = TriggerCreate("gt_FireAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Holes in Ground
//--------------------------------------------------------------------------------------------------
bool gt_CreateHolesinGround_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoDC86D9C9_ae;
    const int autoDC86D9C9_ai = 1;
    unitgroup auto4444D119_g;
    int auto4444D119_u;
    unit auto4444D119_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDC86D9C9_ae = gv_holesInGroundTotal;
    lv_index = 1;
    for ( ; ( (autoDC86D9C9_ai >= 0 && lv_index <= autoDC86D9C9_ae) || (autoDC86D9C9_ai < 0 && lv_index >= autoDC86D9C9_ae) ) ; lv_index += autoDC86D9C9_ai ) {
        if ((gv_holesInGround[lv_index].lv_triggered == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_holesInGround[lv_index].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            gv_holesInGround[lv_index].lv_triggered = true;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalDestructiblePlatformSmall", c_unitCreateIgnorePlacement, 0, gv_holesInGround[lv_index].lv_point);
            RegionSetCenter(RegionFromId(33), UnitGetPosition(UnitLastCreated()));
            VisRevealArea(gv_pLAYER_01_USER, RegionFromId(33), 4.0, false);
            auto4444D119_g = UnitGroup(null, c_playerAny, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto4444D119_u = UnitGroupCount(auto4444D119_g, c_unitCountAll);
            for (;; auto4444D119_u -= 1) {
                auto4444D119_var = UnitGroupUnitFromEnd(auto4444D119_g, auto4444D119_u);
                if (auto4444D119_var == null) { break; }
                UnitKill(auto4444D119_var);
            }
            TerrainShowRegion(RegionFromId(33), false);
            UnitKill(UnitLastCreated());
            CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
            SoundPlayForPlayer(SoundLink("Kor1_AmbientQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            UnitCreate(1, "RaisingWreckage", 0, 0, gv_holesInGround[lv_index].lv_point, PointGetFacing(gv_holesInGround[lv_index].lv_point));
            UnitCreate(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, gv_holesInGround[lv_index].lv_point, PointGetFacing(gv_holesInGround[lv_index].lv_point));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateHolesinGround_Init () {
    gt_CreateHolesinGround = TriggerCreate("gt_CreateHolesinGround_Func");
    TriggerEnable(gt_CreateHolesinGround, false);
    TriggerAddEventTimePeriodic(gt_CreateHolesinGround, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CampaignInitAI();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    TriggerExecute(gt_BeginEnemyPatrols, true, true);
    TriggerExecute(gt_AttackWaves, true, false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Begin Enemy Patrols
//--------------------------------------------------------------------------------------------------
bool gt_BeginEnemyPatrols_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_patrolGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_patrolGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_MOEBIUS, 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS, PointFromId(328));
    lv_patrolGroup = UnitGroup(null, gv_pLAYER_02_MOEBIUS, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, lv_patrolGroup);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(328), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(329), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(330), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(331), false);
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
    Wait(0.0625, c_timeAI);
    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_MOEBIUS, 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS, PointFromId(332));
    lv_patrolGroup = UnitGroup(null, gv_pLAYER_02_MOEBIUS, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, lv_patrolGroup);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(332), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(333), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(334), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(335), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(334), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(333), false);
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
    AIAttackWaveSetTargetPatrol(gv_pLAYER_02_MOEBIUS, 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_MOEBIUS, PointFromId(894));
    lv_patrolGroup = UnitGroup(null, gv_pLAYER_02_MOEBIUS, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, lv_patrolGroup);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(895), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(896), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(897), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(896), false);
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeginEnemyPatrols_Init () {
    gt_BeginEnemyPatrols = TriggerCreate("gt_BeginEnemyPatrols_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_MOEBIUS, PlayerGroupSingle(gv_pLAYER_01_USER));
    Wait(360.0, c_timeAI);
    gv_nextAttackWave = UnitGroupEmpty();
    gf_SpawnUnitsforNextAttackWave("Reaper", libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), PointFromId(28));
    gf_SpawnUnitsforNextAttackWave("Marauder", libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), PointFromId(29));
    Wait(5.0, c_timeAI);
    AISetGroupScriptControlled(gv_nextAttackWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_MOEBIUS, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(2765), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(425), false);
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, gv_nextAttackWave);
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
    gf_AttackWavePing(gv_nextAttackWave);
    TriggerExecute(gt_FirstAttackQ, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(235.0, 235.0, 175.0, 175.0), c_timeAI);
    gv_nextAttackWave = UnitGroupEmpty();
    gf_SpawnUnitsforNextAttackWave("Reaper", libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), PointFromId(31));
    gf_SpawnUnitsforNextAttackWave("Spectre", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(32));
    Wait(5.0, c_timeAI);
    AISetGroupScriptControlled(gv_nextAttackWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_MOEBIUS, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(2767), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(425), false);
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, gv_nextAttackWave);
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
    Wait(libLotv_gf_DifficultyValueFixed2(235.0, 235.0, 175.0, 175.0), c_timeAI);
    gv_nextAttackWave = UnitGroupEmpty();
    gf_SpawnUnitsforNextAttackWave("Reaper", libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), PointFromId(28));
    gf_SpawnUnitsforNextAttackWave("Spectre", libLotv_gf_DifficultyValueInt2(2, 2, 0, 0), PointFromId(30));
    gf_SpawnUnitsforNextAttackWave("Banshee", libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), PointFromId(30));
    gf_SpawnUnitsforNextAttackWave("VikingFighter", libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), PointFromId(29));
    gf_SpawnUnitsforNextAttackWave("Raven", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), PointFromId(2791));
    Wait(5.0, c_timeAI);
    AISetGroupScriptControlled(gv_nextAttackWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_MOEBIUS, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(2765), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(425), false);
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, gv_nextAttackWave);
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
    Wait(175.0, c_timeAI);
    gv_nextAttackWave = UnitGroupEmpty();
    gf_SpawnUnitsforNextAttackWave("Reaper", libLotv_gf_DifficultyValueInt2(6, 6, 0, 0), PointFromId(31));
    gf_SpawnUnitsforNextAttackWave("Spectre", libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), PointFromId(33));
    gf_SpawnUnitsforNextAttackWave("SiegeTank", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(32));
    gf_SpawnUnitsforNextAttackWave("Raven", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), PointFromId(2792));
    Wait(5.0, c_timeAI);
    AISetGroupScriptControlled(gv_nextAttackWave, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_02_MOEBIUS, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(2767), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(425), false);
    AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, gv_nextAttackWave);
    AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
    Wait(175.0, c_timeAI);
    while (true) {
        gv_nextAttackWave = UnitGroupEmpty();
        gf_SpawnUnitsforNextAttackWave("Reaper", libLotv_gf_DifficultyValueInt2(6, 6, 6, 8), PointFromId(28));
        gf_SpawnUnitsforNextAttackWave("Banshee", libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), PointFromId(29));
        gf_SpawnUnitsforNextAttackWave("Spectre", libLotv_gf_DifficultyValueInt2(2, 2, 0, 0), PointFromId(30));
        gf_SpawnUnitsforNextAttackWave("Raven", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), PointFromId(30));
        gf_SpawnUnitsforNextAttackWave("Battlecruiser", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), PointFromId(2791));
        Wait(5.0, c_timeAI);
        AISetGroupScriptControlled(gv_nextAttackWave, false);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_MOEBIUS, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(2765), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(425), false);
        AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, gv_nextAttackWave);
        AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
        Wait(libLotv_gf_DifficultyValueFixed2(235.0, 235.0, 235.0, 175.0), c_timeAI);
        gv_nextAttackWave = UnitGroupEmpty();
        gf_SpawnUnitsforNextAttackWave("Reaper", libLotv_gf_DifficultyValueInt2(6, 6, 6, 8), PointFromId(31));
        gf_SpawnUnitsforNextAttackWave("SiegeTank", libLotv_gf_DifficultyValueInt2(1, 1, 2, 3), PointFromId(32));
        gf_SpawnUnitsforNextAttackWave("Spectre", libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), PointFromId(33));
        gf_SpawnUnitsforNextAttackWave("Raven", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), PointFromId(2792));
        Wait(5.0, c_timeAI);
        AISetGroupScriptControlled(gv_nextAttackWave, false);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_MOEBIUS, PlayerGroupSingle(gv_pLAYER_01_USER));
        AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(2767), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_MOEBIUS, PointFromId(425), false);
        AIAttackWaveUseGroup(gv_pLAYER_02_MOEBIUS, gv_nextAttackWave);
        AIAttackWaveSend(gv_pLAYER_02_MOEBIUS, 0, false);
        Wait(235.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaves_Init () {
    gt_AttackWaves = TriggerCreate("gt_AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00066", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackQ_Init () {
    gt_FirstAttackQ = TriggerCreate("gt_FirstAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranVehicleAndShipWeaponsLevel1", 1);
    Wait(480.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranVehicleAndShipArmorsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(480.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranVehicleAndShipWeaponsLevel2", 1);
    Wait(420.0, c_timeAI);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_MOEBIUS, "TerranVehicleAndShipArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_MOEBIUS, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_MOEBIUS, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_RAYNOR_AI, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_RAYNOR_AI, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_RAYNOR_BASE_1, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_RAYNOR_BASE_1, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_RAYNOR_BASE_2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_RAYNOR_BASE_2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_InitReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto145B2864_ae = 5;
    const int auto145B2864_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto145B2864_ai >= 0 && lv_index <= auto145B2864_ae) || (auto145B2864_ai < 0 && lv_index >= auto145B2864_ae) ) ; lv_index += auto145B2864_ai ) {
        gv_reinforcements[lv_index].lv_spawn = PointFromName(("Reinforcement " + IntToString(lv_index)));
        gv_reinforcements[lv_index].lv_goto = PointFromName(("Reinforcement Goto " + IntToString(lv_index)));
        gv_reinforcements[lv_index].lv_patrolPointA = PointFromName(("Reinforcement Patrol " + IntToString(lv_index) + " A"));
        gv_reinforcements[lv_index].lv_patrolPointB = PointFromName(("Reinforcement Patrol " + IntToString(lv_index) + " B"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitReinforcements_Init () {
    gt_InitReinforcements = TriggerCreate("gt_InitReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforce Other Stabilizers
//--------------------------------------------------------------------------------------------------
bool gt_ReinforceOtherStabilizers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_stabilizersSecured >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(13.0, c_timeAI);
    gv_reinforcementLevel += 1;
    TriggerExecute(gt_ReinforceOtherStabilizersQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforceOtherStabilizers_Init () {
    gt_ReinforceOtherStabilizers = TriggerCreate("gt_ReinforceOtherStabilizers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforce Other Stabilizers Q
//--------------------------------------------------------------------------------------------------
bool gt_ReinforceOtherStabilizersQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stabilizerIndex;
    int lv_reinforcementLevel_Local;

    // Automatic Variable Declarations
    const int autoB0982285_ae = 5;
    const int autoB0982285_ai = 1;
    int auto69ECDEE1_val;
    int auto77937888_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_reinforcementLevel >= 1))) {
            return false;
        }

        if (!((gv_reinforcementLevel <= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reinforcementLevel_Local = gv_reinforcementLevel;
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_stabilizerIndex = 1;
    for ( ; ( (autoB0982285_ai >= 0 && lv_stabilizerIndex <= autoB0982285_ae) || (autoB0982285_ai < 0 && lv_stabilizerIndex >= autoB0982285_ae) ) ; lv_stabilizerIndex += autoB0982285_ai ) {
        if ((gv_stabilizers[lv_stabilizerIndex].lv_secured == false)) {
            UnitSetPropertyFixed(gv_orbitalCommand, c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(gv_orbitalCommand, OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), gv_reinforcements[lv_stabilizerIndex].lv_spawn), c_orderQueueReplace);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "ScannerSweepModel", gv_reinforcements[lv_stabilizerIndex].lv_spawn, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 8.0, 270.0);
            PingSetScale(PingLastCreated(), 0.07);
            auto69ECDEE1_val = lv_stabilizerIndex;
            if (auto69ECDEE1_val == 1) {
                if ((lv_reinforcementLevel_Local == 1)) {
                    gf_SpawnReinforcements("Reaper", "Marauder", libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), lv_stabilizerIndex, true);
                    gf_SpawnAirReinforcements("Raven", "Raven", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), lv_stabilizerIndex);
                }
                else {
                    gf_SpawnReinforcements("Marauder", "Marauder", libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), lv_stabilizerIndex, false);
                }
            }
            else if (auto69ECDEE1_val == 2) {
                if ((lv_reinforcementLevel_Local == 1)) {
                    gf_SpawnReinforcements("SiegeTank", "Reaper", libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), lv_stabilizerIndex, true);
                }
                else {
                    gf_SpawnReinforcements("Spectre", "HellionTank", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), lv_stabilizerIndex, false);
                    gf_SpawnAirReinforcements("Banshee", "Raven", libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), lv_stabilizerIndex);
                }
            }
            else if (auto69ECDEE1_val == 3) {
                if ((lv_reinforcementLevel_Local == 1)) {
                    gf_SpawnReinforcements("Marauder", "HellionTank", libLotv_gf_DifficultyValueInt2(3, 3, 2, 3), libLotv_gf_DifficultyValueInt2(0, 0, 2, 2), lv_stabilizerIndex, true);
                }
                else {
                    gf_SpawnAirReinforcements("Banshee", "Raven", libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), lv_stabilizerIndex);
                }
            }
            else if (auto69ECDEE1_val == 4) {
                if ((lv_reinforcementLevel_Local == 1)) {
                    gf_SpawnReinforcements("SiegeTank", "Reaper", libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), lv_stabilizerIndex, true);
                }
                else {
                    gf_SpawnReinforcements("Marauder", "Marauder", libLotv_gf_DifficultyValueInt2(3, 3, 0, 0), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), lv_stabilizerIndex, false);
                    gf_SpawnAirReinforcements("Battlecruiser", "Raven", libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), libLotv_gf_DifficultyValueInt2(0, 0, 0, 0), lv_stabilizerIndex);
                }
            }
            else if (auto69ECDEE1_val == 5) {
                if ((lv_reinforcementLevel_Local == 1)) {
                    gf_SpawnReinforcements("Spectre", "Thor", libLotv_gf_DifficultyValueInt2(3, 3, 0, 0), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), lv_stabilizerIndex, true);
                }
                else {
                    gf_SpawnAirReinforcements("Banshee", "Raven", libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), lv_stabilizerIndex);
                }
            }
            else {
            }
            Wait(0.0625, c_timeAI);
        }

    }
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto77937888_val = lv_reinforcementLevel_Local;
    if (auto77937888_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00074", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto77937888_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00069", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforceOtherStabilizersQ_Init () {
    gt_ReinforceOtherStabilizersQ = TriggerCreate("gt_ReinforceOtherStabilizersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scrambler Vikings
//--------------------------------------------------------------------------------------------------
bool gt_ScramblerVikings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC7C3C9BD_n;
    int autoC7C3C9BD_i;
    int autoF15B542D_n;
    int autoF15B542D_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (gv_vikingWaveTriggered[1] == false)) {
        gv_vikingWaveTriggered[1] = true;
        gv_vikingsWavesSent += 1;
        autoC7C3C9BD_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
        for (autoC7C3C9BD_i = 1; autoC7C3C9BD_i <= autoC7C3C9BD_n; autoC7C3C9BD_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VikingFighter", 0, gv_pLAYER_02_MOEBIUS, PointFromId(941));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(43))), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            AISetUnitScriptControlled(UnitLastCreated(), false);
        }
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (gv_vikingWaveTriggered[2] == false)) {
        gv_vikingWaveTriggered[2] = true;
        gv_vikingsWavesSent += 1;
        autoF15B542D_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
        for (autoF15B542D_i = 1; autoF15B542D_i <= autoF15B542D_n; autoF15B542D_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VikingFighter", 0, gv_pLAYER_02_MOEBIUS, PointFromId(983));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(44))), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            AISetUnitScriptControlled(UnitLastCreated(), false);
        }
    }

    if ((gv_vikingWaveTriggered[1] == true) && (gv_vikingWaveTriggered[2] == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScramblerVikings_Init () {
    gt_ScramblerVikings = TriggerCreate("gt_ScramblerVikings_Func");
    TriggerEnable(gt_ScramblerVikings, false);
    TriggerAddEventTimePeriodic(gt_ScramblerVikings, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/97A6A0EE"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowDestroy(gv_skyshieldTimerWindow);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    CameraShake(gv_pLAYER_01_USER, "Massive", "Shake", 1.0, 0.0, 3.0);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(100.00, 0.00, 0.00), 0.0, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSecuretheStabilizersFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/CE03FA61"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventTimer(gt_DefeatPrimaryObjectiveFailed, gv_skyshieldTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Secure Stabilizers
//--------------------------------------------------------------------------------------------------
bool gt_VictorySecureStabilizers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySecureStabilizers_Init () {
    gt_VictorySecureStabilizers = TriggerCreate("gt_VictorySecureStabilizers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSecuretheStabilizersComplete, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PKorhal01_1", gv_pLAYER_01_USER);
    if ((gv_lowestTimeToImpact >= 240.0)) {
        libVoiC_gf_CampaignAwardAchievement("PKorhal01_2", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    if ((libVoiC_gf_MissionStatusCheck("PShakuras01", libVoiC_ge_MissionStatus_Completed) == false)) {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/88EC3E2D"), IntToText(gv_orbitalStrikesIssued));
    }
    else {
        TextExpressionSetToken("Param/Expression/14C60FFC", "A", IntToText(gv_resourcePickupsFound));
        TextExpressionSetToken("Param/Expression/14C60FFC", "B", IntToText(gv_resourcePickupsTotal));
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B492DEA1"), TextExpressionAssemble("Param/Expression/14C60FFC"));
    }
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/6548581D"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(gv_lowestTimeToImpact)));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Initial Resource Pickup Count
//--------------------------------------------------------------------------------------------------
bool gt_StatInitialResourcePickupCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto136D6604_g;
    int auto136D6604_u;
    unit auto136D6604_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto136D6604_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto136D6604_u = UnitGroupCount(auto136D6604_g, c_unitCountAll);
    for (;; auto136D6604_u -= 1) {
        auto136D6604_var = UnitGroupUnitFromEnd(auto136D6604_g, auto136D6604_u);
        if (auto136D6604_var == null) { break; }
        if (((UnitGetType(auto136D6604_var) == "PalletMinerals") || (UnitGetType(auto136D6604_var) == "PalletGas"))) {
            gv_resourcePickupsTotal += 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatInitialResourcePickupCount_Init () {
    gt_StatInitialResourcePickupCount = TriggerCreate("gt_StatInitialResourcePickupCount_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Resource Pickup Found
//--------------------------------------------------------------------------------------------------
bool gt_StatResourcePickupFound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_resourcePickupsFound += 1;
    if ((gv_resourcePickupsFound >= gv_resourcePickupsTotal)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatResourcePickupFound_Init () {
    gt_StatResourcePickupFound = TriggerCreate("gt_StatResourcePickupFound_Func");
    TriggerAddEventUnitAbility(gt_StatResourcePickupFound, null, AbilityCommand("PickupMinerals100", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_StatResourcePickupFound, null, AbilityCommand("PickupGas100", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Strike Used - Tracking
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalStrikeUsedTracking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_SpearofAdunTargetingModeAbility() == "GPTier2Power1"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_orbitalStrikesIssued += 1;
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalStrikeUsedTracking_Init () {
    gt_OrbitalStrikeUsedTracking = TriggerCreate("gt_OrbitalStrikeUsedTracking_Func");
    TriggerEnable(gt_OrbitalStrikeUsedTracking, false);
    libVCMI_gf_SpearofAdunTargetingModeExited(gt_OrbitalStrikeUsedTracking, libVCMI_ge_SpearofAdunTargetingExitType_ByFiring);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Time Between Two Stabilizers
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTimeBetweenTwoStabilizers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_stabilizersSecured == 1)) {
        gv_priorStabilizerTimestamp = GameGetMissionTime();
    }
    else {
        if (((GameGetMissionTime() - gv_priorStabilizerTimestamp) < 180.0)) {
            TriggerEnable(TriggerGetCurrent(), false);
            libVoiC_gf_CampaignAwardAchievement("PKorhal01_3", gv_pLAYER_01_USER);
        }
        else {
            gv_priorStabilizerTimestamp = GameGetMissionTime();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTimeBetweenTwoStabilizers_Init () {
    gt_AchievementTimeBetweenTwoStabilizers = TriggerCreate("gt_AchievementTimeBetweenTwoStabilizers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mastery: Time Between Three Stabilizers
//--------------------------------------------------------------------------------------------------
bool gt_MasteryTimeBetweenThreeStabilizers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_stabilizersSecured == 1)) {
        gv_priorMasteryTimestamp = GameGetMissionTime();
        gv_masteryProgress += 1;
    }
    else {
        if (((GameGetMissionTime() - gv_priorMasteryTimestamp) < 80.0)) {
            gv_masteryProgress += 1;
        }
        else {
            gv_priorMasteryTimestamp = GameGetMissionTime();
            gv_masteryProgress = 1;
        }
    }
    if ((gv_masteryProgress >= 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVoiC_gf_CampaignAwardAchievement("Mastery_Korhal01", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasteryTimeBetweenThreeStabilizers_Init () {
    gt_MasteryTimeBetweenThreeStabilizers = TriggerCreate("gt_MasteryTimeBetweenThreeStabilizers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Kill 40 enemy units or structures with Orbital Strike or Solar Lance
//--------------------------------------------------------------------------------------------------
bool gt_AchievementKill40enemyunitsorstructureswithOrbitalStrikeorSolarLance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((EventUnitDamageEffect() == "SOAOrbitalStrikeDamage") || (EventUnitDamageEffect() == "SOAThermalLanceDamage")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_anniversaryAchievementTermOrbitalStrikeorSolarLanceKills = (gv_anniversaryAchievementTermOrbitalStrikeorSolarLanceKills + 1);
    AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_PKorhal01", gv_anniversaryAchievementTermOrbitalStrikeorSolarLanceKills);
    TextExpressionSetToken("Param/Expression/0CDBE201", "A", IntToText(gv_anniversaryAchievementTermOrbitalStrikeorSolarLanceKills));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/0CDBE201"), false);
    gv_victory_OrbitalStrikeorSolarLanceKills += 1;
    if ((gv_victory_OrbitalStrikeorSolarLanceKills >= 40)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PKorhal01", gv_pLAYER_01_USER);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementKill40enemyunitsorstructureswithOrbitalStrikeorSolarLance_Init () {
    gt_AchievementKill40enemyunitsorstructureswithOrbitalStrikeorSolarLance = TriggerCreate("gt_AchievementKill40enemyunitsorstructureswithOrbitalStrikeorSolarLance_Func");
    TriggerAddEventUnitDied(gt_AchievementKill40enemyunitsorstructureswithOrbitalStrikeorSolarLance, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Secure the Stabilizers - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecuretheStabilizersCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PKorhal01Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PKorhal01Primary01", gv_stabilizersSecured);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecuretheStabilizersCreate_Init () {
    gt_ObjectiveSecuretheStabilizersCreate = TriggerCreate("gt_ObjectiveSecuretheStabilizersCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Secure the Stabilizers - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecuretheStabilizersComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSecuretheStabilizersCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PKorhal01Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecuretheStabilizersComplete_Init () {
    gt_ObjectiveSecuretheStabilizersComplete = TriggerCreate("gt_ObjectiveSecuretheStabilizersComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Secure the Stabilizers - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecuretheStabilizersUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stabilizersSecured <= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSecuretheStabilizersCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PKorhal01Primary01", gv_stabilizersSecured);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecuretheStabilizersUpdate_Init () {
    gt_ObjectiveSecuretheStabilizersUpdate = TriggerCreate("gt_ObjectiveSecuretheStabilizersUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Secure the Stabilizers - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecuretheStabilizersFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSecuretheStabilizersCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PKorhal01Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecuretheStabilizersFailed_Init () {
    gt_ObjectiveSecuretheStabilizersFailed = TriggerCreate("gt_ObjectiveSecuretheStabilizersFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Shadow Scrambers  - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShadowScrambersCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PKorhal01Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PKorhal01Bonus01", gv_scramblersDestroyed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShadowScrambersCreate_Init () {
    gt_ObjectiveDestroyShadowScrambersCreate = TriggerCreate("gt_ObjectiveDestroyShadowScrambersCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Shadow Scrambers - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShadowScrambersComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyShadowScrambersCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PKorhal01Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShadowScrambersComplete_Init () {
    gt_ObjectiveDestroyShadowScrambersComplete = TriggerCreate("gt_ObjectiveDestroyShadowScrambersComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Shadow Scrambers - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyShadowScrambersUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyShadowScrambersCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PKorhal01Bonus01", gv_scramblersDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyShadowScrambersUpdate_Init () {
    gt_ObjectiveDestroyShadowScrambersUpdate = TriggerCreate("gt_ObjectiveDestroyShadowScrambersUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetDummy01;
    unit lv_targetDummy02;
    unit lv_targetDummy03;

    // Automatic Variable Declarations
    unitgroup auto8E809A2E_g;
    int auto8E809A2E_u;
    unit auto8E809A2E_var;
    unitgroup auto08A8D19A_g;
    int auto08A8D19A_u;
    unit auto08A8D19A_var;
    unitgroup auto41D95CD4_g;
    int auto41D95CD4_u;
    unit auto41D95CD4_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto8E809A2E_g = UnitGroup(null, gv_pLAYER_02_MOEBIUS, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8E809A2E_u = UnitGroupCount(auto8E809A2E_g, c_unitCountAll);
    for (;; auto8E809A2E_u -= 1) {
        auto8E809A2E_var = UnitGroupUnitFromEnd(auto8E809A2E_g, auto8E809A2E_u);
        if (auto8E809A2E_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto8E809A2E_var);
        UnitGroupAdd(gv_cinematicPausedUnits, auto8E809A2E_var);
        libNtve_gf_ShowHideUnit(auto8E809A2E_var, false);
        libNtve_gf_PauseUnit(auto8E809A2E_var, true);
    }
    auto08A8D19A_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto08A8D19A_u = UnitGroupCount(auto08A8D19A_g, c_unitCountAll);
    for (;; auto08A8D19A_u -= 1) {
        auto08A8D19A_var = UnitGroupUnitFromEnd(auto08A8D19A_g, auto08A8D19A_u);
        if (auto08A8D19A_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto08A8D19A_var);
        UnitGroupAdd(gv_cinematicPausedUnits, auto08A8D19A_var);
        libNtve_gf_ShowHideUnit(auto08A8D19A_var, false);
        libNtve_gf_PauseUnit(auto08A8D19A_var, true);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointFromId(202));
    lv_targetDummy01 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetHeight(UnitLastCreated(), 1.5, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointFromId(1317));
    lv_targetDummy02 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetHeight(UnitLastCreated(), 1.5, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointFromId(1333));
    lv_targetDummy03 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetHeight(UnitLastCreated(), 1.5, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_MOEBIUS, PointFromId(691));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(693)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetDummy01), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Reaper", 0, gv_pLAYER_02_MOEBIUS, PointFromId(692));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(694)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetDummy03), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_02_MOEBIUS, PointFromId(695));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(698)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetDummy02), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_02_MOEBIUS, PointFromId(696));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(699)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetDummy01), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_02_MOEBIUS, PointFromId(697));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(700)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetDummy03), c_orderQueueAddToEnd);
    UnitGroupAdd(gv_introFirstStabilizerAssault, UnitFromId(1901));
    UnitGroupAdd(gv_introFirstStabilizerAssault, UnitFromId(869));
    UnitGroupAdd(gv_introFirstStabilizerAssault, UnitFromId(1902));
    UnitGroupAdd(gv_introFirstStabilizerAssault, UnitFromId(1918));
    UnitSetPropertyFixed(UnitFromId(1918), c_unitPropLifePercent, 50.0);
    UnitGroupAdd(gv_introFirstStabilizerAssault, UnitFromId(1921));
    UnitSetPropertyFixed(UnitFromId(1921), c_unitPropLifePercent, 55.0);
    UnitGroupAdd(gv_introFirstStabilizerAssault, UnitFromId(1919));
    UnitGroupAdd(gv_introFirstStabilizerAssault, UnitFromId(1920));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, gv_introFirstStabilizerAssault);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_02_MOEBIUS, UnitGetPosition(UnitFromId(353)));
    gv_introBunkers[1] = UnitLastCreated();
    UnitSetProgressComplete(UnitLastCreated(), 1, 5);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateIgnorePlacement, gv_pLAYER_02_MOEBIUS, UnitGetPosition(UnitFromId(352)));
    gv_introBunkers[2] = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(1900));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(872));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(952));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(871));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(953));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(954));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(193));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(191));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(196));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(197));
    UnitGroupAdd(gv_introBarracksAssault, UnitFromId(870));
    gv_introBarracks = UnitFromId(870);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, gv_introBarracksAssault);
    auto41D95CD4_g = gv_introBarracksAssault;
    auto41D95CD4_u = UnitGroupCount(auto41D95CD4_g, c_unitCountAll);
    for (;; auto41D95CD4_u -= 1) {
        auto41D95CD4_var = UnitGroupUnitFromEnd(auto41D95CD4_g, auto41D95CD4_u);
        if (auto41D95CD4_var == null) { break; }
        libNtve_gf_PauseUnit(auto41D95CD4_var, true);
    }
    UnitSetFacing(UnitFromId(943), 135.0, 0.0);
    UnitSetState(UnitFromId(943), c_unitStateFidget, false);
    UnitSetFacing(UnitFromId(944), 225.0, 0.0);
    UnitSetState(UnitFromId(944), c_unitStateFidget, false);
    libNtve_gf_PauseUnit(UnitFromId(944), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(955), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(689), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal01|Line00108", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal01|Line00058", true), c_soundIndexAny)) - 2), -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PKorhal01_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv_introDebrisLocations[1] = PointFromId(685);
    gv_introDebrisLocations[2] = PointFromId(686);
    gv_introDebrisLocations[3] = PointFromId(687);
    gv_introDebrisLocations[4] = PointFromId(964);
    gv_introDebrisLocations[5] = PointFromId(965);
    TriggerExecute(gt_IntroDebris1, true, false);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    TriggerExecute(gt_IntroWarpinBase, true, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 12.5, 2.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00108", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00058", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    gv_introDebrisCreated[3] = true;
    UnitCreate(1, "RaisingWreckage", 0, 0, gv_introDebrisLocations[3], PointGetFacing(gv_introDebrisLocations[3]));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalDestructiblePlatformSmall", c_unitCreateIgnorePlacement, 0, gv_introDebrisLocations[3]);
    UnitKill(UnitLastCreated());
    RegionSetCenter(RegionFromId(33), UnitGetPosition(UnitLastCreated()));
    TerrainShowRegion(RegionFromId(33), false);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("Kor1_AmbientQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00059", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerExecute(gt_IntroDebris2, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(690), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(956), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal01|Line00086", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal01|Line00060", true), c_soundIndexAny)) + 4), -1, 10, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 1.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00086", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00060", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00061", c_transmissionDurationAdd, 1.5, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("Kor1_AmbientQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoDFEEAD41_g;
    int autoDFEEAD41_u;
    unit autoDFEEAD41_var;
    unitgroup autoE42DD04A_g;
    int autoE42DD04A_u;
    unit autoE42DD04A_var;
    unitgroup auto1B2E850B_g;
    int auto1B2E850B_u;
    unit auto1B2E850B_var;
    unitgroup auto917547C9_g;
    int auto917547C9_u;
    unit auto917547C9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroWarpinBase);
    libNtve_gf_ShowHideDoodadsInRegion(true, gv_stabilizers[1].lv_stabilizerRegion, "SmokePillarsTall");
    autoDFEEAD41_g = gv_cinematicTempUnits;
    autoDFEEAD41_u = UnitGroupCount(autoDFEEAD41_g, c_unitCountAll);
    for (;; autoDFEEAD41_u -= 1) {
        autoDFEEAD41_var = UnitGroupUnitFromEnd(autoDFEEAD41_g, autoDFEEAD41_u);
        if (autoDFEEAD41_var == null) { break; }
        UnitRemove(autoDFEEAD41_var);
    }
    autoE42DD04A_g = gv_cinematicHiddenUnits;
    autoE42DD04A_u = UnitGroupCount(autoE42DD04A_g, c_unitCountAll);
    for (;; autoE42DD04A_u -= 1) {
        autoE42DD04A_var = UnitGroupUnitFromEnd(autoE42DD04A_g, autoE42DD04A_u);
        if (autoE42DD04A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE42DD04A_var, true);
    }
    auto1B2E850B_g = gv_cinematicPausedUnits;
    auto1B2E850B_u = UnitGroupCount(auto1B2E850B_g, c_unitCountAll);
    for (;; auto1B2E850B_u -= 1) {
        auto1B2E850B_var = UnitGroupUnitFromEnd(auto1B2E850B_g, auto1B2E850B_u);
        if (auto1B2E850B_var == null) { break; }
        libNtve_gf_PauseUnit(auto1B2E850B_var, false);
    }
    auto917547C9_g = UnitGroup("TerranDropPod", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto917547C9_u = UnitGroupCount(auto917547C9_g, c_unitCountAll);
    for (;; auto917547C9_u -= 1) {
        auto917547C9_var = UnitGroupUnitFromEnd(auto917547C9_g, auto917547C9_u);
        if (auto917547C9_var == null) { break; }
        UnitRemove(auto917547C9_var);
    }
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerExecute(gt_IntroDebrisCleanup, true, false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    UnitSetState(UnitFromId(943), c_unitStateFidget, true);
    UnitSetState(UnitFromId(944), c_unitStateFidget, true);
    libNtve_gf_PauseUnit(UnitFromId(944), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(11), 0.0625, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Warpin Base
//--------------------------------------------------------------------------------------------------
bool gt_IntroWarpinBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(36)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.125, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(35)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Nexus", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(1)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.5, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CyberneticsCore", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(2223)));
    UnitSetProgressComplete(UnitLastCreated(), 1, 50);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.25, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(34)));
    UnitSetProgressComplete(UnitLastCreated(), 1, 50);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.25, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(977)));
    UnitSetProgressComplete(UnitLastCreated(), 1, 50);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.5, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Forge", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(240)));
    UnitSetProgressComplete(UnitLastCreated(), 1, 50);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroWarpinBase_Init () {
    gt_IntroWarpinBase = TriggerCreate("gt_IntroWarpinBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Debris 1
//--------------------------------------------------------------------------------------------------
bool gt_IntroDebris1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7599FF55_g;
    int auto7599FF55_u;
    unit auto7599FF55_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7599FF55_g = gv_introFirstStabilizerAssault;
    auto7599FF55_u = UnitGroupCount(auto7599FF55_g, c_unitCountAll);
    for (;; auto7599FF55_u -= 1) {
        auto7599FF55_var = UnitGroupUnitFromEnd(auto7599FF55_g, auto7599FF55_u);
        if (auto7599FF55_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto7599FF55_var, true);
        libNtve_gf_PauseUnit(auto7599FF55_var, false);
        if ((UnitGetType(auto7599FF55_var) != "MissileTurret")) {
            libNtve_gf_ChangeUnitDamage(auto7599FF55_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }

        if ((UnitGetType(auto7599FF55_var) == "VikingFighter")) {
            UnitIssueOrder(auto7599FF55_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto7599FF55_var), 100.0, 68.0)), c_orderQueueReplace);
            UnitSetPropertyFixed(auto7599FF55_var, c_unitPropMovementSpeed, 6.0);
            libNtve_gf_ChangeUnitDamage(auto7599FF55_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
        }

    }
    Wait(3.0, c_timeGame);
    gv_introDebrisCreated[1] = true;
    UnitCreate(1, "RaisingWreckage", 0, 0, gv_introDebrisLocations[1], PointGetFacing(gv_introDebrisLocations[1]));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalDestructiblePlatformSmall", c_unitCreateIgnorePlacement, 0, gv_introDebrisLocations[1]);
    UnitKill(UnitLastCreated());
    RegionSetCenter(RegionFromId(33), UnitGetPosition(UnitLastCreated()));
    TerrainShowRegion(RegionFromId(33), false);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("Kor1_AmbientQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gv_introDebrisCreated[2] = true;
    UnitCreate(1, "RaisingWreckage", 0, 0, gv_introDebrisLocations[2], PointGetFacing(gv_introDebrisLocations[2]));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalDestructiblePlatformSmall", c_unitCreateIgnorePlacement, 0, gv_introDebrisLocations[2]);
    UnitKill(UnitLastCreated());
    RegionSetCenter(RegionFromId(33), UnitGetPosition(UnitLastCreated()));
    TerrainShowRegion(RegionFromId(33), false);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("Kor1_AmbientQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroDebris1_Init () {
    gt_IntroDebris1 = TriggerCreate("gt_IntroDebris1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Debris 2
//--------------------------------------------------------------------------------------------------
bool gt_IntroDebris2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7239A441_g;
    int auto7239A441_u;
    unit auto7239A441_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("Kor1_AmbientQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto7239A441_g = gv_introBarracksAssault;
    auto7239A441_u = UnitGroupCount(auto7239A441_g, c_unitCountAll);
    for (;; auto7239A441_u -= 1) {
        auto7239A441_var = UnitGroupUnitFromEnd(auto7239A441_g, auto7239A441_u);
        if (auto7239A441_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto7239A441_var, true);
        libNtve_gf_PauseUnit(auto7239A441_var, false);
        libNtve_gf_ChangeUnitDamage(auto7239A441_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitSetPropertyFixed(gv_introBarracks, c_unitPropLifePercent, 5.0);
    UnitIssueOrder(UnitFromId(1900), OrderTargetingUnit(null, gv_introBunkers[1]), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(953), OrderTargetingUnit(AbilityCommand("attack", 0), gv_introBarracks), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitFromId(954), OrderTargetingUnit(AbilityCommand("attack", 0), gv_introBarracks), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_introBarracks, Order(AbilityCommand("BarracksLiftOff", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_introBarracks, OrderTargetingPoint(AbilityCommand("move", 0), Point(0.0, 0.0)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    gf_SpawnUnitsforIntro("Marine", 4, PointWithOffset(UnitGetPosition(gv_introBunkers[2]), -1.0, 5.0));
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("Kor1_AmbientQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_introDebrisCreated[4] = true;
    UnitCreate(1, "RaisingWreckage", 0, 0, gv_introDebrisLocations[4], PointGetFacing(gv_introDebrisLocations[4]));
    UnitSetScale(UnitLastCreated(), 125.0, 125.0, 125.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalDestructiblePlatformMedium", 0, 0, gv_introDebrisLocations[4]);
    UnitKill(UnitLastCreated());
    RegionSetCenter(RegionFromId(80), UnitGetPosition(UnitLastCreated()));
    TerrainShowRegion(RegionFromId(80), false);
    UnitKill(UnitFromId(872));
    UnitKill(UnitFromId(952));
    UnitKill(UnitFromId(871));
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(954), Order(AbilityCommand("Unsiege", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(953), Order(AbilityCommand("Unsiege", 0)), c_orderQueueReplace);
    UnitKill(gv_introBarracks);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(193), OrderTargetingPoint(AbilityCommand("move", 0), Point(64.0, 130.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(191), OrderTargetingPoint(AbilityCommand("move", 0), Point(64.0, 130.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(197), Order(AbilityCommand("FighterMode", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(197), OrderTargetingPoint(AbilityCommand("move", 0), Point(64.0, 130.0)), c_orderQueueAddToEnd);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(UnitFromId(954), OrderTargetingPoint(AbilityCommand("move", 0), Point(64.0, 130.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(953), OrderTargetingPoint(AbilityCommand("move", 0), Point(64.0, 130.0)), c_orderQueueAddToEnd);
    gf_SpawnUnitsforIntro("VikingFighter", 1, PointWithOffset(UnitGetPosition(UnitFromId(426)), 0.0, 0.0));
    Wait(1.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "Earthquake", 0.5, 0.5, 2.0);
    SoundPlayForPlayer(SoundLink("Kor1_AmbientQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_introDebrisCreated[5] = true;
    UnitCreate(1, "RaisingWreckage", 0, 0, gv_introDebrisLocations[5], PointGetFacing(gv_introDebrisLocations[5]));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalDestructiblePlatformSmall", c_unitCreateIgnorePlacement, 0, gv_introDebrisLocations[5]);
    UnitKill(UnitLastCreated());
    RegionSetCenter(RegionFromId(33), UnitGetPosition(UnitLastCreated()));
    TerrainShowRegion(RegionFromId(33), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroDebris2_Init () {
    gt_IntroDebris2 = TriggerCreate("gt_IntroDebris2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Debris Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroDebrisCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoAA07009D_ae = 5;
    const int autoAA07009D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_IntroDebris1);
    TriggerStop(gt_IntroDebris2);
    lv_index = 1;
    for ( ; ( (autoAA07009D_ai >= 0 && lv_index <= autoAA07009D_ae) || (autoAA07009D_ai < 0 && lv_index >= autoAA07009D_ae) ) ; lv_index += autoAA07009D_ai ) {
        if ((gv_introDebrisCreated[lv_index] == false)) {
            gv_introDebrisCreated[lv_index] = true;
            if ((lv_index == 4)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalDestructiblePlatformMedium", 0, 0, gv_introDebrisLocations[4]);
                UnitKill(UnitLastCreated());
                RegionSetCenter(RegionFromId(80), UnitGetPosition(UnitLastCreated()));
                TerrainShowRegion(RegionFromId(80), false);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KorhalDestructiblePlatformSmall", c_unitCreateIgnorePlacement, 0, gv_introDebrisLocations[lv_index]);
                UnitKill(UnitLastCreated());
                RegionSetCenter(RegionFromId(33), UnitGetPosition(UnitLastCreated()));
                TerrainShowRegion(RegionFromId(33), false);
            }
            Wait(0.0625, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroDebrisCleanup_Init () {
    gt_IntroDebrisCleanup = TriggerCreate("gt_IntroDebrisCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Orbital Strike Q
//--------------------------------------------------------------------------------------------------
bool gt_MidOrbitalStrikeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidOrbitalStrikeSetup, true, true);
    TriggerExecute(gt_MidOrbitalStrikeCinematic, true, true);
    TriggerExecute(gt_MidOrbitalStrikeCinematicEnd, true, true);
    TriggerExecute(gt_MidOrbitalStrikeCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidOrbitalStrikeQ_Init () {
    gt_MidOrbitalStrikeQ = TriggerCreate("gt_MidOrbitalStrikeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Orbital Strike Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidOrbitalStrikeSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4A694549_g;
    int auto4A694549_u;
    unit auto4A694549_var;
    unitgroup auto4D21A080_g;
    int auto4D21A080_u;
    unit auto4D21A080_var;
    unitgroup autoE1FE04CC_g;
    int autoE1FE04CC_u;
    unit autoE1FE04CC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_midSpearOfAdunEnergy = libVCMI_gf_SpearofAdunEnergy(libVCMI_ge_SpearofAdunEnergyType_Absolute);
    auto4A694549_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4A694549_u = UnitGroupCount(auto4A694549_g, c_unitCountAll);
    for (;; auto4A694549_u -= 1) {
        auto4A694549_var = UnitGroupUnitFromEnd(auto4A694549_g, auto4A694549_u);
        if (auto4A694549_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto4A694549_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto4A694549_var);
            libNtve_gf_PauseUnit(auto4A694549_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupAddUnitGroup(gv_cinematicHiddenUnits, UnitGroup(null, c_playerAny, RegionFromId(8), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_cinematicHiddenUnits, UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto4D21A080_g = gv_cinematicHiddenUnits;
    auto4D21A080_u = UnitGroupCount(auto4D21A080_g, c_unitCountAll);
    for (;; auto4D21A080_u -= 1) {
        auto4D21A080_var = UnitGroupUnitFromEnd(auto4D21A080_g, auto4D21A080_u);
        if (auto4D21A080_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4D21A080_var, false);
    }
    autoE1FE04CC_g = UnitGroup(null, gv_pLAYER_02_MOEBIUS, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1FE04CC_u = UnitGroupCount(autoE1FE04CC_g, c_unitCountAll);
    for (;; autoE1FE04CC_u -= 1) {
        autoE1FE04CC_var = UnitGroupUnitFromEnd(autoE1FE04CC_g, autoE1FE04CC_u);
        if (autoE1FE04CC_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoE1FE04CC_var, false);
        UnitGroupAdd(gv_cinematicHiddenUnits, autoE1FE04CC_var);
        UnitCreate(1, UnitGetType(autoE1FE04CC_var), 0, gv_pLAYER_02_MOEBIUS, UnitGetPosition(autoE1FE04CC_var), UnitGetFacing(autoE1FE04CC_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_midTurnUnits, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidOrbitalStrikeSetup_Init () {
    gt_MidOrbitalStrikeSetup = TriggerCreate("gt_MidOrbitalStrikeSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Orbital Strike Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidOrbitalStrikeCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_fodder01;
    unitgroup lv_fodder02;
    unitgroup lv_fodder03;
    unitgroup lv_fodderMasterGroup;
    int lv_unitCount;
    int lv_orbitalStrikeIndex;
    unit lv_currentUnit;
    point[6] lv_strikePoints;
    int lv_targetIndex;
    string lv_cutsceneFile;

    // Automatic Variable Declarations
    const int auto863DEA26_ae = 5;
    const int auto863DEA26_ai = 1;
    unitgroup auto21689EC6_g;
    int auto21689EC6_u;
    unit auto21689EC6_var;
    const int auto76F87014_ae = 5;
    const int auto76F87014_ai = 1;
    const int autoFB76F59A_ae = 5;
    const int autoFB76F59A_ai = 1;
    unitgroup autoF99C4B73_g;
    int autoF99C4B73_u;
    unit autoF99C4B73_var;
    unitgroup autoC830E606_g;
    int autoC830E606_u;
    unit autoC830E606_var;
    unitgroup autoBC79D12D_g;
    int autoBC79D12D_u;
    unit autoBC79D12D_var;

    // Variable Initialization
    lv_fodder01 = UnitGroupEmpty();
    lv_fodder02 = UnitGroupEmpty();
    lv_fodder03 = UnitGroupEmpty();
    lv_fodderMasterGroup = UnitGroupEmpty();
    lv_cutsceneFile = "Cutscenes\\Mission_SoACalldown_OrbitalStrike.SC2Cutscene";

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(557), 0.0, -1, 10, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PKorhal01_Music_S1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitCreate(6, "Marine", 0, gv_pLAYER_02_MOEBIUS, PointFromId(559), 225.0);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_fodder01, UnitLastCreatedGroup());
    UnitCreate(2, "Marauder", 0, gv_pLAYER_02_MOEBIUS, PointFromId(559), 225.0);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_fodder01, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(559), lv_fodder01, false, gv_pLAYER_02_MOEBIUS);
    UnitCreate(1, "MengskThor", 0, gv_pLAYER_02_MOEBIUS, PointFromId(1341), 225.0);
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(lv_fodderMasterGroup, UnitLastCreated());
    lv_targetIndex = 1;
    for ( ; ( (auto863DEA26_ai >= 0 && lv_targetIndex <= auto863DEA26_ae) || (auto863DEA26_ai < 0 && lv_targetIndex >= auto863DEA26_ae) ) ; lv_targetIndex += auto863DEA26_ai ) {
        lv_strikePoints[lv_targetIndex] = PointFromName(("Mid Orbital Strike " + IntToString(lv_targetIndex)));
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(903), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal01|Line00097", true), c_soundIndexAny)), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00097", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitCreate(6, "Marine", 0, gv_pLAYER_02_MOEBIUS, PointFromId(560), 225.0);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_fodder02, UnitLastCreatedGroup());
    UnitCreate(2, "Marauder", 0, gv_pLAYER_02_MOEBIUS, PointFromId(560), 225.0);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_fodder02, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(560), lv_fodder02, false, gv_pLAYER_02_MOEBIUS);
    Wait(1.0, c_timeGame);
    UnitCreate(6, "Marine", 0, gv_pLAYER_02_MOEBIUS, PointFromId(2197), 225.0);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_fodder03, UnitLastCreatedGroup());
    UnitCreate(2, "Marauder", 0, gv_pLAYER_02_MOEBIUS, PointFromId(2197), 225.0);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_fodder03, UnitLastCreatedGroup());
    libVCMI_gf_CreateDropPod(libVCMI_ge_DropPodRace_Terran, PointFromId(2197), lv_fodder03, false, gv_pLAYER_02_MOEBIUS);
    auto21689EC6_g = gv_midTurnUnits;
    auto21689EC6_u = UnitGroupCount(auto21689EC6_g, c_unitCountAll);
    for (;; auto21689EC6_u -= 1) {
        auto21689EC6_var = UnitGroupUnitFromEnd(auto21689EC6_g, auto21689EC6_u);
        if (auto21689EC6_var == null) { break; }
        UnitIssueOrder(auto21689EC6_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(559)), c_orderQueueReplace);
    }
    Wait(3.5, c_timeGame);
    UnitGroupAddUnitGroup(lv_fodderMasterGroup, lv_fodder01);
    UnitGroupAddUnitGroup(lv_fodderMasterGroup, lv_fodder02);
    UnitGroupAddUnitGroup(lv_fodderMasterGroup, lv_fodder03);
    TransmissionWait(TransmissionLastSent(), 0.0);
    lv_targetIndex = 1;
    for ( ; ( (auto76F87014_ai >= 0 && lv_targetIndex <= auto76F87014_ae) || (auto76F87014_ai < 0 && lv_targetIndex >= auto76F87014_ae) ) ; lv_targetIndex += auto76F87014_ai ) {
        libVCMI_gf_CreateOrbitalStrikeTarget(lv_targetIndex, lv_strikePoints[lv_targetIndex]);
        if ((lv_targetIndex == 3)) {
            CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(904), 2.5, -1, 10, true);
        }

        Wait(0.5, c_timeGame);
    }
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.5);
    Wait(0.5, c_timeGame);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    CutsceneAddGlobalFilter("Korhal");
    libVoiC_gf_CampaignPlayCutscene2(lv_cutsceneFile, true, true);
    CutsceneRemoveGlobalFilter("Korhal");
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(557), 1.0, -1, 10, true);
    lv_orbitalStrikeIndex = 0;
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 1.0);
    lv_targetIndex = 1;
    for ( ; ( (autoFB76F59A_ai >= 0 && lv_targetIndex <= autoFB76F59A_ae) || (autoFB76F59A_ai < 0 && lv_targetIndex >= autoFB76F59A_ae) ) ; lv_targetIndex += autoFB76F59A_ai ) {
        libVCMI_gf_FireOrbitalStrikeAtTarget(lv_targetIndex);
        Wait(0.0625, c_timeGame);
    }
    autoF99C4B73_g = lv_fodderMasterGroup;
    autoF99C4B73_u = UnitGroupCount(autoF99C4B73_g, c_unitCountAll);
    for (;; autoF99C4B73_u -= 1) {
        autoF99C4B73_var = UnitGroupUnitFromEnd(autoF99C4B73_g, autoF99C4B73_u);
        if (autoF99C4B73_var == null) { break; }
        UnitIssueOrder(autoF99C4B73_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoF99C4B73_var), 8.0, AngleBetweenPoints(PointFromId(1341), UnitGetPosition(autoF99C4B73_var)))), c_orderQueueReplace);
    }
    autoC830E606_g = gv_midTurnUnits;
    autoC830E606_u = UnitGroupCount(autoC830E606_g, c_unitCountAll);
    for (;; autoC830E606_u -= 1) {
        autoC830E606_var = UnitGroupUnitFromEnd(autoC830E606_g, autoC830E606_u);
        if (autoC830E606_var == null) { break; }
        UnitIssueOrder(autoC830E606_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoC830E606_var), 12.0, 0.0)), c_orderQueueReplace);
    }
    Wait(0.5, c_timeGame);
    autoBC79D12D_g = lv_fodderMasterGroup;
    autoBC79D12D_u = UnitGroupCount(autoBC79D12D_g, c_unitCountAll);
    for (;; autoBC79D12D_u -= 1) {
        autoBC79D12D_var = UnitGroupUnitFromEnd(autoBC79D12D_g, autoBC79D12D_u);
        if (autoBC79D12D_var == null) { break; }
        UnitKill(autoBC79D12D_var);
    }
    Wait(5.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidOrbitalStrikeCinematic_Init () {
    gt_MidOrbitalStrikeCinematic = TriggerCreate("gt_MidOrbitalStrikeCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Orbital Strike Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidOrbitalStrikeCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidOrbitalStrikeCinematicEnd_Init () {
    gt_MidOrbitalStrikeCinematicEnd = TriggerCreate("gt_MidOrbitalStrikeCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Orbital Strike Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidOrbitalStrikeCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto37FE2604_g;
    int auto37FE2604_u;
    unit auto37FE2604_var;
    unitgroup auto2796DCED_g;
    int auto2796DCED_u;
    unit auto2796DCED_var;
    unitgroup autoD232F626_g;
    int autoD232F626_u;
    unit autoD232F626_var;
    unitgroup autoC9116457_g;
    int autoC9116457_u;
    unit autoC9116457_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto37FE2604_g = gv_cinematicTempUnits;
    auto37FE2604_u = UnitGroupCount(auto37FE2604_g, c_unitCountAll);
    for (;; auto37FE2604_u -= 1) {
        auto37FE2604_var = UnitGroupUnitFromEnd(auto37FE2604_g, auto37FE2604_u);
        if (auto37FE2604_var == null) { break; }
        UnitRemove(auto37FE2604_var);
    }
    auto2796DCED_g = gv_cinematicHiddenUnits;
    auto2796DCED_u = UnitGroupCount(auto2796DCED_g, c_unitCountAll);
    for (;; auto2796DCED_u -= 1) {
        auto2796DCED_var = UnitGroupUnitFromEnd(auto2796DCED_g, auto2796DCED_u);
        if (auto2796DCED_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2796DCED_var, true);
    }
    autoD232F626_g = gv_cinematicPausedUnits;
    autoD232F626_u = UnitGroupCount(autoD232F626_g, c_unitCountAll);
    for (;; autoD232F626_u -= 1) {
        autoD232F626_var = UnitGroupUnitFromEnd(autoD232F626_g, autoD232F626_u);
        if (autoD232F626_var == null) { break; }
        libNtve_gf_PauseUnit(autoD232F626_var, false);
    }
    autoC9116457_g = UnitGroup("TerranDropPod", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC9116457_u = UnitGroupCount(autoC9116457_g, c_unitCountAll);
    for (;; autoC9116457_u -= 1) {
        autoC9116457_var = UnitGroupUnitFromEnd(autoC9116457_g, autoC9116457_u);
        if (autoC9116457_var == null) { break; }
        UnitRemove(autoC9116457_var);
    }
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libVCMI_gf_CleanUpOrbitalStrikeTargets();
    CutsceneRemoveGlobalFilter("Korhal");
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    if ((gv_midSpearOfAdunEnergy < 150.0)) {
        libVCMI_gf_SetSpearofAdunEnergy((gv_midSpearOfAdunEnergy + 50.0), libVCMI_ge_SpearofAdunEnergyType_Absolute);
    }
    else {
        libVCMI_gf_SetSpearofAdunEnergy(200.0, libVCMI_ge_SpearofAdunEnergyType_Absolute);
    }
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidOrbitalStrikeCleanup_Init () {
    gt_MidOrbitalStrikeCleanup = TriggerCreate("gt_MidOrbitalStrikeCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto98C0DD7A_g;
    int auto98C0DD7A_u;
    unit auto98C0DD7A_var;
    unitgroup auto7E46B17C_g;
    int auto7E46B17C_u;
    unit auto7E46B17C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    GameSetLighting("KorhalPlatformEx2_Fire", 0.0);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Reentry_Wind");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Korhal_Platform_ReentryCloudsBig");
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto98C0DD7A_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto98C0DD7A_u = UnitGroupCount(auto98C0DD7A_g, c_unitCountAll);
    for (;; auto98C0DD7A_u -= 1) {
        auto98C0DD7A_var = UnitGroupUnitFromEnd(auto98C0DD7A_g, auto98C0DD7A_u);
        if (auto98C0DD7A_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto98C0DD7A_var), c_unitAttributeStructure) == true)) {
            if ((libNtve_gf_UnitInRegion(auto98C0DD7A_var, gv_stabilizers[gv_finalStabilizerIndex].lv_secureZone) == true)) {
                libNtve_gf_ShowHideUnit(auto98C0DD7A_var, false);
                libNtve_gf_PauseUnit(auto98C0DD7A_var, true);
            }

        }
        else {
            UnitRemove(auto98C0DD7A_var);
        }
    }
    auto7E46B17C_g = UnitGroup(null, gv_pLAYER_02_MOEBIUS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7E46B17C_u = UnitGroupCount(auto7E46B17C_g, c_unitCountAll);
    for (;; auto7E46B17C_u -= 1) {
        auto7E46B17C_var = UnitGroupUnitFromEnd(auto7E46B17C_g, auto7E46B17C_u);
        if (auto7E46B17C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto7E46B17C_var, false);
        libNtve_gf_PauseUnit(auto7E46B17C_var, true);
    }
    if ((gv_stabilizers[gv_finalStabilizerIndex].lv_secured == false)) {
        gf_SecureStabilizer(gv_finalStabilizerIndex);
    }

    UnitSetPropertyFixed(gv_stabilizers[gv_finalStabilizerIndex].lv_stabilizerUnit, c_unitPropLifePercent, 80.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1340), 0.0, -1, 10, true);
    if (((gv_finalStabilizerIndex == 3) || (gv_finalStabilizerIndex == 5))) {
        CameraPan(gv_pLAYER_01_USER, RegionGetCenter(gv_stabilizers[gv_finalStabilizerIndex].lv_stabilizerRegion), 0.0, -1, 0.0, false);
    }
    else {
        CameraPan(gv_pLAYER_01_USER, PointWithOffsetPolar(RegionGetCenter(gv_stabilizers[gv_finalStabilizerIndex].lv_stabilizerRegion), 1.0, 90.0), 0.0, -1, 0.0, false);
    }
    Wait(0.0625, c_timeGame);
    CameraSetValue(gv_pLAYER_01_USER, c_cameraValueDistance, CameraInfoGetValue(CameraInfoFromId(1337), c_cameraValueDistance), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal01|Line00082", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Korhal01|Line00129", true), c_soundIndexAny)) + 3.0), -1, 10.0);
    TriggerExecute(gt_VictoryMusic, true, false);
    GameSetLighting("KorhalPlatformEx2", 4.0);
    FogSetColorOverTime(Color(36.86, 85.88, 77.25), 4.0);
    FogSetDensityOverTime(0.02, 4.0);
    FogSetFallOffOverTime(0.135, 4.0);
    libVoiC_gf_PauseAITimeCampaign(false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 0.5);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 0.5);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00082", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    libVoiC_gf_PauseAITimeCampaign(true);
    UnitPauseAll(true);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Reentry_Heat", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_OverrideScorescreenMusic();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "PKorhal01_Music_Outro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusic_Init () {
    gt_VictoryMusic = TriggerCreate("gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGameQ_Init();
    gt_CreateTimerWindow_Init();
    gt_MonitorTimerWindowQ_Init();
    gt_OrbitalStrikeSequence_Init();
    gt_ShadowCoreMovesQ_Init();
    gt_OrbitalStrikeQ_Init();
    gt_OrbitalStrikeUsedTeaching_Init();
    gt_OrbitalStrikeReminderQ_Init();
    gt_InitStabilizers_Init();
    gt_MonitorStabilizers_Init();
    gt_StabilizerDefense_Init();
    gt_BeginRepairsQ_Init();
    gt_RaynorBase1_Init();
    gt_RaynorBase2_Init();
    gt_RaynorBaseReclaimedQ_Init();
    gt_InitShadowScrambler_Init();
    gt_ScramblerDestroyed_Init();
    gt_DiscoverBonusProximity_Init();
    gt_DiscoverBonusQ_Init();
    gt_EMPScrambler01DestroyedQ_Init();
    gt_EMPScrambler02DestroyedQ_Init();
    gt_EMPScrambler03DestroyedQ_Init();
    gt_AmbientQuakes_Init();
    gt_CrashingDebris_Init();
    gt_ExplodingDoodadsInit_Init();
    gt_ExplodingDoodads_Init();
    gt_FireAnimations_Init();
    gt_CreateHolesinGround_Init();
    gt_StartAI_Init();
    gt_BeginEnemyPatrols_Init();
    gt_AttackWaves_Init();
    gt_FirstAttackQ_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_AIGiveResources_Init();
    gt_InitReinforcements_Init();
    gt_ReinforceOtherStabilizers_Init();
    gt_ReinforceOtherStabilizersQ_Init();
    gt_ScramblerVikings_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictorySecureStabilizers_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StatInitialResourcePickupCount_Init();
    gt_StatResourcePickupFound_Init();
    gt_OrbitalStrikeUsedTracking_Init();
    gt_AchievementTimeBetweenTwoStabilizers_Init();
    gt_MasteryTimeBetweenThreeStabilizers_Init();
    gt_AchievementKill40enemyunitsorstructureswithOrbitalStrikeorSolarLance_Init();
    gt_ObjectiveSecuretheStabilizersCreate_Init();
    gt_ObjectiveSecuretheStabilizersComplete_Init();
    gt_ObjectiveSecuretheStabilizersUpdate_Init();
    gt_ObjectiveSecuretheStabilizersFailed_Init();
    gt_ObjectiveDestroyShadowScrambersCreate_Init();
    gt_ObjectiveDestroyShadowScrambersComplete_Init();
    gt_ObjectiveDestroyShadowScrambersUpdate_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroWarpinBase_Init();
    gt_IntroDebris1_Init();
    gt_IntroDebris2_Init();
    gt_IntroDebrisCleanup_Init();
    gt_MidOrbitalStrikeQ_Init();
    gt_MidOrbitalStrikeSetup_Init();
    gt_MidOrbitalStrikeCinematic_Init();
    gt_MidOrbitalStrikeCinematicEnd_Init();
    gt_MidOrbitalStrikeCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryMusic_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
