//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Growing Shadow
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai35D1D5DC"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_ZERG = 2;
const int gv_pLAYER_03_DARK_PROTOSS = 3;
const int gv_pLAYER_04_TEMPLAR = 4;
const int gv_pLAYER_05_ARTANIS = 5;
const int gv_pLAYER_06_SHAKURAS = 6;
const int gv_pLAYER_07_AIUR = 7;
const int gv_pLAYER_08_ZERG_AMBUSH = 8;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
playergroup gv_enemyPlayers;
unit gv_zeratul;
unit gv_artanis;
int gv_missionStage;
unit gv_blinkBeacon;
int gv_blinkTagAnchor;
int gv_blinkTag;
unit gv_blinkHelper;
revealer gv_blinkRevealer;
unitgroup gv_stage1Flyers;
unitgroup gv_stage1Zerg;
bool gv_stalkersBlinked;
int gv_introNexusPing;
int gv_tTextTag;
int gv_tTextTagAnchor;
unit gv_tInvisHelper;
bool gv_tTutorialComplete;
bool gv_tBuildPylonComplete;
int gv_tBuildPylonIntroTransmission;
unitgroup gv_tBuildPylonGateways;
unit gv_tBuildPylonPylon;
bool gv_tTrainWarriorComplete;
int gv_tTrainWarriorIntroTransmission;
bool gv_tMakeAssimilatorComplete;
int gv_tMakeAssimilatorIntroTransmission1;
int gv_tMakeAssimilatorIntroTransmission2;
unit gv_tMakeAssimilatorAssimilator;
bool gv_tTransferProbesComplete;
int gv_tTransferProbesIntroTransmission;
bool gv_tTrainMoreProbesComplete;
int gv_tTrainMoreProbesIntroTransmission;
timer gv_tutorialTimer;
timer gv_ambushSoundTimer;
unitgroup gv_burrowedZerg;
unitgroup gv_roachGroup;
unitgroup gv_darkProtoss;
int gv_templarPing;
unitgroup gv_resourcePickups;
int gv_resourcePickupsCollected;
int gv_resourcePickupsTotal;
timer gv_moveOutReminderTimer;
int gv_artanisPing;
unitgroup gv_finalMutas;
int gv_victoryStatBlinkCount;
int gv_mineralsPickedUp;
unitgroup gv_totalMinerals;
int gv_troopsTrainedCount;
int gv_anniversaryAchievementTermNerazimPylonsFound;
timer gv_masteryAchievementTimer;
int gv_objective_ReachNexus;
int gv_objective_ReachTemplar;
int gv_objective_ReachArtanis;
int gv_objective_ZeratulMustSurvive;
int gv_objectiveRescueStalkers;
int gv_objective_NerazimPylonsFound;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unitgroup gv_introZerg;
unitgroup gv_introStalkers;
unit gv_introZeratul;
sound gv_introStinger;
unit[4] gv_midStalkers;
int gv_midStalkerCount;
unitgroup gv_midUpperZealots;
unitgroup gv_midUpperStalkers;
unit[5] gv_midUpperStalkersArray;
sound gv_artanisAmbience;

void InitGlobals () {
    gv_enemyPlayers = PlayerGroupEmpty();
    gv_missionStage = 1;
    gv_blinkTagAnchor = c_invalidDialogId;
    gv_blinkTag = c_invalidDialogControlId;
    gv_stage1Flyers = UnitGroupEmpty();
    gv_stage1Zerg = UnitGroupEmpty();
    gv_introNexusPing = c_invalidPingId;
    gv_tTextTag = c_invalidDialogControlId;
    gv_tTextTagAnchor = c_invalidDialogId;
    gv_tBuildPylonIntroTransmission = c_invalidTransmissionId;
    gv_tBuildPylonGateways = UnitGroupEmpty();
    gv_tTrainWarriorIntroTransmission = c_invalidTransmissionId;
    gv_tMakeAssimilatorIntroTransmission1 = c_invalidTransmissionId;
    gv_tMakeAssimilatorIntroTransmission2 = c_invalidTransmissionId;
    gv_tTransferProbesIntroTransmission = c_invalidTransmissionId;
    gv_tTrainMoreProbesIntroTransmission = c_invalidTransmissionId;
    gv_tutorialTimer = TimerCreate();
    gv_ambushSoundTimer = TimerCreate();
    gv_burrowedZerg = UnitGroupEmpty();
    gv_roachGroup = UnitGroupEmpty();
    gv_darkProtoss = UnitGroupEmpty();
    gv_templarPing = c_invalidPingId;
    gv_resourcePickups = UnitGroupEmpty();
    gv_moveOutReminderTimer = TimerCreate();
    gv_artanisPing = c_invalidPingId;
    gv_finalMutas = UnitGroupEmpty();
    gv_totalMinerals = UnitGroupEmpty();
    gv_masteryAchievementTimer = TimerCreate();
    gv_objective_ReachNexus = c_invalidObjectiveId;
    gv_objective_ReachTemplar = c_invalidObjectiveId;
    gv_objective_ReachArtanis = c_invalidObjectiveId;
    gv_objective_ZeratulMustSurvive = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introZerg = UnitGroupEmpty();
    gv_introStalkers = UnitGroupEmpty();
    gv_midUpperZealots = UnitGroupEmpty();
    gv_midUpperStalkers = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AmbushSpawnZergling (point lp_sourcePoint, point lp_targetPoint);
void gf_CreateInfoText (unit lp_cHOSEN_UNIT);
void gf_GenericZerglingAmbush (unit lp_zergling);
void gf_PowerUnpowerPylon (bool lp_powerUnpower, unit lp_pylon);
void gf_ConvertUnittoAmon (unit lp_cHOSEN_UNIT);
void gf_MidAmonConversion (unit lp_unit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_DebugStage3;
trigger gt_DebugStage1Cleanup;
trigger gt_DebugStage2Cleanup;
trigger gt_StartGameStage1Q;
trigger gt_StartGameStage2Q;
trigger gt_StartGameStage3Q;
trigger gt_TeachBlinkQ;
trigger gt_TeachBlinkEnterBeacon;
trigger gt_StalkerInitialBlink;
trigger gt_IntroAmbush1;
trigger gt_IntroAmbush1Zergling1Spawn;
trigger gt_IntroAmbush2;
trigger gt_IntroFlyerAttack;
trigger gt_IntroAmbush1Q;
trigger gt_IntroFlyerAttackQ;
trigger gt_IntroNexusFound;
trigger gt_TBuildPylon;
trigger gt_TBuildPylonIntroQ;
trigger gt_TBuildPylonBuildStartedQ;
trigger gt_TBuildPylonCompleteQ;
trigger gt_TBuildPylonProbeSelection;
trigger gt_TBuildPylonTargeting;
trigger gt_TBuildPylonBuildOrder;
trigger gt_TBuildPylonBuildStarted;
trigger gt_TBuildPylonComplete;
trigger gt_TTrainWarrior;
trigger gt_TTrainWarriorIntroQ;
trigger gt_TTrainWarriorCompleteQ;
trigger gt_TTrainWarriorPreLessonUnitTrained;
trigger gt_TTrainWarriorGatewaySelection;
trigger gt_TTrainWarriorComplete;
trigger gt_TMakeAssimilator;
trigger gt_TMakeAssimilatorIntro1Q;
trigger gt_TMakeAssimilatorIntro2Q;
trigger gt_TMakeAssimilatorProbeSelection;
trigger gt_TMakeAssimilatorTargeting;
trigger gt_TMakeAssimilatorBuildOrder;
trigger gt_TMakeAssimilatorComplete;
trigger gt_TTransferProbes;
trigger gt_TTransferProbesIntroQ;
trigger gt_TTransferProbesProbeSelection;
trigger gt_TTransferProbesComplete;
trigger gt_TTrainMoreProbes;
trigger gt_TTrainMoreProbesIntroQ;
trigger gt_TTrainMoreProbesNexusSelection;
trigger gt_TTrainMoreProbesComplete;
trigger gt_KaraxIntroQ;
trigger gt_TutorialController;
trigger gt_TutorialCompleteQ;
trigger gt_TutorialCleanup;
trigger gt_StructureWarpingIn;
trigger gt_DarkProtoss1Q;
trigger gt_DarkProtoss2Q;
trigger gt_GroupBurrowedZerg;
trigger gt_GroupDarkProtoss;
trigger gt_GroupDarkProtossQ;
trigger gt_DeactivateZergBulliesHatchery;
trigger gt_DeactivateZergBulliesLair;
trigger gt_FindNerazimPylon01;
trigger gt_FindNerazimPylon02;
trigger gt_FindNerazimPylon03;
trigger gt_NerazimPylonFoundQ;
trigger gt_WarpInUnitBehaviorP06;
trigger gt_FirstPickupEncountered;
trigger gt_ResourcePickupCollected;
trigger gt_UnitEntersTurnOffMoveOutReminder;
trigger gt_RemindPlayerToMoveOutQ;
trigger gt_MainSectionComplete;
trigger gt_MainSectionCompleteQ;
trigger gt_ProtossConvertedbyAmon01;
trigger gt_ProtossConverted01Q;
trigger gt_ProtossConvertedbyAmon02;
trigger gt_ProtossConvertedbyAmon03;
trigger gt_ProtossConverted02Q;
trigger gt_AllAloneQ;
trigger gt_ArtanisFound;
trigger gt_StartAI;
trigger gt_FirstAttackQ;
trigger gt_AIGiveResources;
trigger gt_AIResearchHardBrutal;
trigger gt_DefeatStartingForcesDead;
trigger gt_DefeatBaseDead;
trigger gt_DefeatZeratulDies;
trigger gt_VictoryFindArtanisCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StatBlinkUsed;
trigger gt_AchievementUnitsTrainedCasual;
trigger gt_AchievementResourcePickupsNormal;
trigger gt_AchievementFastHatcheryKill;
trigger gt_ObjectiveReachtheNexusCreate;
trigger gt_ObjectiveReachtheNexusComplete;
trigger gt_ObjectiveReachTemplarBaseCreate;
trigger gt_ObjectiveReachTemplarBaseComplete;
trigger gt_ObjectiveReachArtanisCreate;
trigger gt_ObjectiveReachArtanisComplete;
trigger gt_ObjectiveZeratulMustSurviveCreate;
trigger gt_ObjectiveZeratulMustSurviveComplete;
trigger gt_ObjectiveZeratulMustSurviveFailed;
trigger gt_ObjectiveFindNerazimPylonsCreate;
trigger gt_ObjectiveFindNerazimPylonsComplete;
trigger gt_ObjectiveFindNerazimPylonsUpdate;
trigger gt_ObjectiveFindNerazimPylonsFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroZergUnburrow;
trigger gt_MidPlayerBaseQ;
trigger gt_MidPlayerBaseSetup;
trigger gt_MidPlayerBaseCinematic;
trigger gt_MidPlayerBaseCinematicEnd;
trigger gt_MidPlayerBaseCleanup;
trigger gt_MidReviveBase;
trigger gt_MidUpperBaseQ;
trigger gt_MidUpperBaseSetup;
trigger gt_MidUpperBaseCinematic;
trigger gt_MidUpperBaseCinematicEnd;
trigger gt_MidUpperBaseCleanup;
trigger gt_MidZealotConfusion;
trigger gt_MidZeratulRunsOut;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai35D1D5DC") { ai35D1D5DC_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { ai35D1D5DC_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { return ai35D1D5DC_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { return ai35D1D5DC_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { ai35D1D5DC_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { ai35D1D5DC_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai35D1D5DC") { ai35D1D5DC_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { ai35D1D5DC_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { ai35D1D5DC_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { return ai35D1D5DC_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { return ai35D1D5DC_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai35D1D5DC") { return ai35D1D5DC_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai35D1D5DC", 2);
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_AmbushSpawnZergling_Trigger = null;
point auto_gf_AmbushSpawnZergling_lp_sourcePoint;
point auto_gf_AmbushSpawnZergling_lp_targetPoint;

void gf_AmbushSpawnZergling (point lp_sourcePoint, point lp_targetPoint) {
    auto_gf_AmbushSpawnZergling_lp_sourcePoint = lp_sourcePoint;
    auto_gf_AmbushSpawnZergling_lp_targetPoint = lp_targetPoint;

    if (auto_gf_AmbushSpawnZergling_Trigger == null) {
        auto_gf_AmbushSpawnZergling_Trigger = TriggerCreate("auto_gf_AmbushSpawnZergling_TriggerFunc");
    }

    TriggerExecute(auto_gf_AmbushSpawnZergling_Trigger, false, false);
}

bool auto_gf_AmbushSpawnZergling_TriggerFunc (bool testConds, bool runActions) {
    point lp_sourcePoint = auto_gf_AmbushSpawnZergling_lp_sourcePoint;
    point lp_targetPoint = auto_gf_AmbushSpawnZergling_lp_targetPoint;

    // Variable Declarations
    unit lv_localZergling;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_pLAYER_08_ZERG_AMBUSH, lp_sourcePoint);
    UnitGroupAdd(gv_stage1Zerg, UnitLastCreated());
    lv_localZergling = UnitLastCreated();
    UnitIssueOrder(lv_localZergling, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    while (!(((UnitGetType(lv_localZergling) == "Zergling") || (UnitIsAlive(lv_localZergling) == false)))) {
        Wait(0.5, c_timeGame);
    }
    if ((UnitIsAlive(lv_localZergling) == true)) {
        UnitIssueOrder(lv_localZergling, OrderTargetingPoint(AbilityCommand("attack", 0), lp_targetPoint), c_orderQueueAddToEnd);
    }

    return true;
}

void gf_CreateInfoText (unit lp_cHOSEN_UNIT) {
    // Automatic Variable Declarations
    string auto965095D0_val;

    // Implementation
    if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, true, true) == true)) {
        return ;
    }

    auto965095D0_val = UnitGetType(lp_cHOSEN_UNIT);
    if (auto965095D0_val == "Nexus") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/0BB3B6D9"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/693994D1"));
    }
    else if (auto965095D0_val == "Pylon") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/9F531636"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/75177A6A"));
    }
    else if (auto965095D0_val == "Gateway") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/0773E727"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/D8112B54"));
    }
    else if (auto965095D0_val == "CyberneticsCore") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/2DF347FA"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/9FABE1AE"));
    }
    else if (auto965095D0_val == "Probe") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/8DB00FFF"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/A269BB15"));
    }
    else if (auto965095D0_val == "ProtossVespeneGeyser") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/EEEFB2FC"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/42DDE5FB"));
    }
    else if (auto965095D0_val == "MineralField") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/DF751698"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/7EA351E6"));
    }
    else if (auto965095D0_val == "NaturalGas") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/7DEFFEC5"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/B0942197"));
    }
    else if (auto965095D0_val == "NaturalMinerals") {
        libVCMI_gf_SetUnitInfoTextCampaignDetailed(lp_cHOSEN_UNIT, StringExternal("Param/Value/931E59C5"), UnitTypeGetName(UnitGetType(lp_cHOSEN_UNIT)), StringExternal("Param/Value/66D59178"));
    }
    else {
    }
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTooltipable, true);
}

trigger auto_gf_GenericZerglingAmbush_Trigger = null;
unit auto_gf_GenericZerglingAmbush_lp_zergling;

void gf_GenericZerglingAmbush (unit lp_zergling) {
    auto_gf_GenericZerglingAmbush_lp_zergling = lp_zergling;

    if (auto_gf_GenericZerglingAmbush_Trigger == null) {
        auto_gf_GenericZerglingAmbush_Trigger = TriggerCreate("auto_gf_GenericZerglingAmbush_TriggerFunc");
    }

    TriggerExecute(auto_gf_GenericZerglingAmbush_Trigger, false, false);
}

bool auto_gf_GenericZerglingAmbush_TriggerFunc (bool testConds, bool runActions) {
    unit lp_zergling = auto_gf_GenericZerglingAmbush_lp_zergling;

    // Variable Declarations
    region lv_scanRegion;
    unit lv_localTarget;

    // Automatic Variable Declarations
    int auto4D97C317_val;

    // Variable Initialization

    // Implementation
    AISetUnitScriptControlled(lp_zergling, true);
    lv_scanRegion = RegionCircle(UnitGetPosition(lp_zergling), 5.0);
    while ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, lv_scanRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
        Wait(1.0, c_timeGame);
    }
    if ((TimerGetRemaining(gv_ambushSoundTimer) == 0.0)) {
        TimerStart(gv_ambushSoundTimer, 4.0, false, c_timeGame);
        auto4D97C317_val = RandomInt(1, 3);
        if (auto4D97C317_val == 1) {
            SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 0), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_zergling), 0.0, 100.0, 0.0);
        }
        else if (auto4D97C317_val == 2) {
            SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_zergling), 0.0, 100.0, 0.0);
        }
        else if (auto4D97C317_val == 3) {
            SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 2), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_zergling), 0.0, 100.0, 0.0);
        }
        else {
            SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 2), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_zergling), 0.0, 100.0, 0.0);
        }
    }

    UnitIssueOrder(lp_zergling, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    while (!(((UnitGetType(lp_zergling) == "Zergling") || (UnitIsAlive(lp_zergling) == false)))) {
        Wait(0.5, c_timeGame);
    }
    if ((UnitIsAlive(lp_zergling) == true)) {
        lv_localTarget = UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, lv_scanRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_zergling));
        if ((UnitIsAlive(lv_localTarget) == true)) {
            UnitIssueOrder(lp_zergling, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_localTarget)), c_orderQueueAddToEnd);
        }

    }

    return true;
}

void gf_PowerUnpowerPylon (bool lp_powerUnpower, unit lp_pylon) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_powerUnpower == true)) {
        UnitBehaviorAdd(lp_pylon, "PowerSource", lp_pylon, 1);
        libNtve_gf_PauseUnit(lp_pylon, false);
        UnitSetHeight(lp_pylon, 0.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(lp_pylon, "SetTintColor 255,255,255");
        UnitSetPropertyFixed(lp_pylon, c_unitPropShieldsRegen, UnitTypeGetProperty(UnitGetType(lp_pylon), c_unitPropShieldsRegen));
        UnitSetPropertyFixed(lp_pylon, c_unitPropShieldsPercent, 100.0);
    }
    else {
        UnitBehaviorRemove(lp_pylon, "PowerSource", 1);
        libNtve_gf_PauseUnit(lp_pylon, true);
        UnitSetHeight(lp_pylon, -1.5, 0.0);
        libNtve_gf_SendActorMessageToUnit(lp_pylon, "SetTintColor 192,192,192");
        ActorSend(libNtve_gf_MainActorofUnit(lp_pylon), "AnimSetPausedAll");
        UnitSetPropertyFixed(lp_pylon, c_unitPropShieldsRegen, 0.0);
        UnitSetPropertyFixed(lp_pylon, c_unitPropShieldsPercent, 0.0);
    }
}

trigger auto_gf_ConvertUnittoAmon_Trigger = null;
unit auto_gf_ConvertUnittoAmon_lp_cHOSEN_UNIT;

void gf_ConvertUnittoAmon (unit lp_cHOSEN_UNIT) {
    auto_gf_ConvertUnittoAmon_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;

    if (auto_gf_ConvertUnittoAmon_Trigger == null) {
        auto_gf_ConvertUnittoAmon_Trigger = TriggerCreate("auto_gf_ConvertUnittoAmon_TriggerFunc");
    }

    TriggerExecute(auto_gf_ConvertUnittoAmon_Trigger, false, false);
}

bool auto_gf_ConvertUnittoAmon_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_ConvertUnittoAmon_lp_cHOSEN_UNIT;

    // Automatic Variable Declarations
    // Implementation
    UnitSetOwner(lp_cHOSEN_UNIT, gv_pLAYER_03_DARK_PROTOSS, true);
    UnitCreateEffectUnit(lp_cHOSEN_UNIT, "AmonTakeoverEffect", lp_cHOSEN_UNIT);
    return true;
}

trigger auto_gf_MidAmonConversion_Trigger = null;
unit auto_gf_MidAmonConversion_lp_unit;

void gf_MidAmonConversion (unit lp_unit) {
    auto_gf_MidAmonConversion_lp_unit = lp_unit;

    if (auto_gf_MidAmonConversion_Trigger == null) {
        auto_gf_MidAmonConversion_Trigger = TriggerCreate("auto_gf_MidAmonConversion_TriggerFunc");
    }

    TriggerExecute(auto_gf_MidAmonConversion_Trigger, false, false);
}

bool auto_gf_MidAmonConversion_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_MidAmonConversion_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    UnitSetOwner(lp_unit, gv_pLAYER_03_DARK_PROTOSS, true);
    if ((gv_cinematicCompleted == false)) {
        UnitCreateEffectUnit(lp_unit, "AmonTakeoverEffect", lp_unit);
        if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeStructure) == false)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_zeratul)), c_orderQueueReplace);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PAiur02");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameStage1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUnitAllow(gv_pLAYER_01_USER, "CyberneticsCore", true);
    libVoiC_gf_EnableCampaignTechUnit(true, "Stalker", gv_pLAYER_01_USER);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "Forge", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "PhotonCannon", false);
    TechTreeUnitAllow(gv_pLAYER_01_USER, "SoACaster", false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("UpgradeToWarpGate", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZeratulVoidPrisonAiur01", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("ZeratulStun", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HaveZeratulChampion", 1);
    libVCUI_gf_ShowSpearofAdunUI(false, c_transitionDurationDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF67BDC1C_g;
    int autoF67BDC1C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_ZERG);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_03_DARK_PROTOSS);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_05_ARTANIS);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_08_ZERG_AMBUSH);
    PlayerModifyPropertyInt(gv_pLAYER_02_ZERG, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_ZERG, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_ZERG, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_03_DARK_PROTOSS, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_DARK_PROTOSS, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_DARK_PROTOSS, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_06_SHAKURAS, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_SHAKURAS, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_SHAKURAS, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_DARK_PROTOSS, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_TEMPLAR, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_ARTANIS, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_SHAKURAS, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_07_AIUR, "HeroicShieldCleanUp", 1);
    autoF67BDC1C_g = gv_enemyPlayers;
    autoF67BDC1C_var = -1;
    while (true) {
        autoF67BDC1C_var = PlayerGroupNextPlayer(autoF67BDC1C_g, autoF67BDC1C_var);
        if (autoF67BDC1C_var < 0) { break; }
        PlayerSetColorIndex(autoF67BDC1C_var, 1, true);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_DARK_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_TEMPLAR, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_ARTANIS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_SHAKURAS, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_AIUR, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_08_ZERG_AMBUSH, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_03_DARK_PROTOSS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_04_TEMPLAR, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_05_ARTANIS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_06_SHAKURAS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_07_AIUR, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_ZERG, gv_pLAYER_08_ZERG_AMBUSH, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DARK_PROTOSS, gv_pLAYER_04_TEMPLAR, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DARK_PROTOSS, gv_pLAYER_05_ARTANIS, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DARK_PROTOSS, gv_pLAYER_06_SHAKURAS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DARK_PROTOSS, gv_pLAYER_07_AIUR, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_DARK_PROTOSS, gv_pLAYER_08_ZERG_AMBUSH, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_04_TEMPLAR, gv_pLAYER_05_ARTANIS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_TEMPLAR, gv_pLAYER_06_SHAKURAS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_TEMPLAR, gv_pLAYER_07_AIUR, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_04_TEMPLAR, gv_pLAYER_08_ZERG_AMBUSH, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetAlliance(gv_pLAYER_04_TEMPLAR, c_allianceIdSeekHelp, gv_pLAYER_01_USER, false);
    libNtve_gf_SetAlliance(gv_pLAYER_05_ARTANIS, gv_pLAYER_06_SHAKURAS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_05_ARTANIS, gv_pLAYER_07_AIUR, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_05_ARTANIS, gv_pLAYER_08_ZERG_AMBUSH, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_06_SHAKURAS, gv_pLAYER_07_AIUR, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_SHAKURAS, gv_pLAYER_08_ZERG_AMBUSH, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_07_AIUR, gv_pLAYER_08_ZERG_AMBUSH, libNtve_ge_AllianceSetting_Neutral);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4BA579B7_g;
    int auto4BA579B7_u;
    unit auto4BA579B7_var;
    unitgroup auto3488BFAB_g;
    int auto3488BFAB_u;
    unit auto3488BFAB_var;
    unitgroup auto23BA3D3E_g;
    int auto23BA3D3E_u;
    unit auto23BA3D3E_var;
    unitgroup auto81D43082_g;
    int auto81D43082_u;
    unit auto81D43082_var;
    unitgroup autoC40CD2F4_g;
    int autoC40CD2F4_u;
    unit autoC40CD2F4_var;
    unitgroup auto245974F4_g;
    int auto245974F4_u;
    unit auto245974F4_var;
    unitgroup autoF081C88C_g;
    int autoF081C88C_u;
    unit autoF081C88C_var;
    unitgroup auto3237C9D6_g;
    int auto3237C9D6_u;
    unit auto3237C9D6_var;
    unitgroup auto64AEA40B_g;
    int auto64AEA40B_u;
    unit auto64AEA40B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_artanis = UnitFromId(1072);
    UnitBehaviorAddPlayer(gv_artanis, "HybridDontDie", UnitGetOwner(gv_artanis), 1);
    UnitSetState(gv_artanis, c_unitStateTargetable, false);
    UnitSetState(gv_artanis, c_unitStateFidget, false);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_artanis), "Cover");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_artanis), c_animNameDefault, "Spell F", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_ShowHideUnit(gv_artanis, false);
    libVCMI_gf_EnableDisableNeedPylonInfo(false);
    UnitGroupAddUnitGroup(gv_stage1Flyers, UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_stage1Zerg, UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto4BA579B7_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4BA579B7_u = UnitGroupCount(auto4BA579B7_g, c_unitCountAll);
    for (;; auto4BA579B7_u -= 1) {
        auto4BA579B7_var = UnitGroupUnitFromEnd(auto4BA579B7_g, auto4BA579B7_u);
        if (auto4BA579B7_var == null) { break; }
        UnitGroupAdd(gv_stage1Zerg, auto4BA579B7_var);
    }
    UnitSetPropertyFixed(UnitFromId(83), c_unitPropLifeRegen, 0.0);
    UnitSetPropertyFixed(UnitFromId(92), c_unitPropLifeRegen, 0.0);
    UnitSetPropertyFixed(UnitFromId(75), c_unitPropLifeRegen, 0.0);
    libNtve_gf_ShowHideUnit(UnitFromId(1465), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1460), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1459), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1451), false);
    libNtve_gf_ShowHideUnit(UnitFromId(419), false);
    libNtve_gf_ShowHideUnit(UnitFromId(243), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1874), false);
    UnitSetOwner(UnitFromId(416), gv_pLAYER_07_AIUR, true);
    UnitSetOwner(UnitFromId(415), gv_pLAYER_07_AIUR, true);
    UnitSetOwner(UnitFromId(420), gv_pLAYER_07_AIUR, true);
    auto3488BFAB_g = UnitGroup("ZerglingBurrowed", gv_pLAYER_08_ZERG_AMBUSH, RegionEntireMap(), UnitFilter((1 << c_targetFilterBuried), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3488BFAB_u = UnitGroupCount(auto3488BFAB_g, c_unitCountAll);
    for (;; auto3488BFAB_u -= 1) {
        auto3488BFAB_var = UnitGroupUnitFromEnd(auto3488BFAB_g, auto3488BFAB_u);
        if (auto3488BFAB_var == null) { break; }
        gf_GenericZerglingAmbush(auto3488BFAB_var);
    }
    auto23BA3D3E_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto23BA3D3E_u = UnitGroupCount(auto23BA3D3E_g, c_unitCountAll);
    for (;; auto23BA3D3E_u -= 1) {
        auto23BA3D3E_var = UnitGroupUnitFromEnd(auto23BA3D3E_g, auto23BA3D3E_u);
        if (auto23BA3D3E_var == null) { break; }
        UnitGroupAdd(gv_roachGroup, auto23BA3D3E_var);
        AISetUnitScriptControlled(auto23BA3D3E_var, true);
    }
    auto81D43082_g = UnitGroup("CreepPodsUnit", gv_pLAYER_02_ZERG, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81D43082_u = UnitGroupCount(auto81D43082_g, c_unitCountAll);
    for (;; auto81D43082_u -= 1) {
        auto81D43082_var = UnitGroupUnitFromEnd(auto81D43082_g, auto81D43082_u);
        if (auto81D43082_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto81D43082_var, "SetMinimapVisibility");
        UnitBehaviorAddPlayer(auto81D43082_var, "Harmless", gv_pLAYER_02_ZERG, 1);
    }
    autoC40CD2F4_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC40CD2F4_u = UnitGroupCount(autoC40CD2F4_g, c_unitCountAll);
    for (;; autoC40CD2F4_u -= 1) {
        autoC40CD2F4_var = UnitGroupUnitFromEnd(autoC40CD2F4_g, autoC40CD2F4_u);
        if (autoC40CD2F4_var == null) { break; }
        UnitGroupAdd(gv_burrowedZerg, autoC40CD2F4_var);
        AISetUnitScriptControlled(autoC40CD2F4_var, true);
    }
    auto245974F4_g = UnitGroup(null, gv_pLAYER_03_DARK_PROTOSS, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto245974F4_u = UnitGroupCount(auto245974F4_g, c_unitCountAll);
    for (;; auto245974F4_u -= 1) {
        auto245974F4_var = UnitGroupUnitFromEnd(auto245974F4_g, auto245974F4_u);
        if (auto245974F4_var == null) { break; }
        UnitGroupAdd(gv_darkProtoss, auto245974F4_var);
        AISetUnitScriptControlled(auto245974F4_var, true);
    }
    autoF081C88C_g = UnitGroup(null, c_playerAny, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF081C88C_u = UnitGroupCount(autoF081C88C_g, c_unitCountAll);
    for (;; autoF081C88C_u -= 1) {
        autoF081C88C_var = UnitGroupUnitFromEnd(autoF081C88C_g, autoF081C88C_u);
        if (autoF081C88C_var == null) { break; }
        libNtve_gf_PauseUnit(autoF081C88C_var, true);
        libNtve_gf_ShowHideUnit(autoF081C88C_var, false);
        libNtve_gf_ChangeUnitDamage(autoF081C88C_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    auto3237C9D6_g = UnitGroup(null, c_playerAny, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3237C9D6_u = UnitGroupCount(auto3237C9D6_g, c_unitCountAll);
    for (;; auto3237C9D6_u -= 1) {
        auto3237C9D6_var = UnitGroupUnitFromEnd(auto3237C9D6_g, auto3237C9D6_u);
        if (auto3237C9D6_var == null) { break; }
        libNtve_gf_PauseUnit(auto3237C9D6_var, true);
        libNtve_gf_ShowHideUnit(auto3237C9D6_var, false);
        libNtve_gf_ChangeUnitDamage(auto3237C9D6_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    auto64AEA40B_g = UnitGroup(null, c_playerAny, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto64AEA40B_u = UnitGroupCount(auto64AEA40B_g, c_unitCountAll);
    for (;; auto64AEA40B_u -= 1) {
        auto64AEA40B_var = UnitGroupUnitFromEnd(auto64AEA40B_g, auto64AEA40B_u);
        if (auto64AEA40B_var == null) { break; }
        libNtve_gf_PauseUnit(auto64AEA40B_var, true);
        libNtve_gf_ShowHideUnit(auto64AEA40B_var, false);
        libNtve_gf_ChangeUnitDamage(auto64AEA40B_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PAiur02_Music_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto7C2CF8AD_g;
    int auto7C2CF8AD_u;
    unit auto7C2CF8AD_var;
    unitgroup auto87C3FD29_g;
    int auto87C3FD29_u;
    unit auto87C3FD29_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(35), RegionFromId(35), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(17), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(22), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(11), RegionFromId(11), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(25), RegionFromId(25), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(10), RegionFromId(10), gv_pLAYER_01_USER);
    UnitGroupAddUnitGroup(gv_resourcePickups, UnitGroup("NaturalMinerals", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_resourcePickups, UnitGroup("NaturalGas", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gv_resourcePickupsTotal = UnitGroupCount(gv_resourcePickups, c_unitCountAlive);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(254), "SetTintColor 192,192,192");
    auto7C2CF8AD_g = UnitGroup(null, gv_pLAYER_07_AIUR, RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7C2CF8AD_u = UnitGroupCount(auto7C2CF8AD_g, c_unitCountAll);
    for (;; auto7C2CF8AD_u -= 1) {
        auto7C2CF8AD_var = UnitGroupUnitFromEnd(auto7C2CF8AD_g, auto7C2CF8AD_u);
        if (auto7C2CF8AD_var == null) { break; }
        UnitSetState(auto7C2CF8AD_var, c_unitStateTargetable, false);
        UnitSetPropertyFixed(auto7C2CF8AD_var, c_unitPropShieldsPercent, 0.0);
        UnitSetPropertyFixed(auto7C2CF8AD_var, c_unitPropShieldsRegen, 0.0);
    }
    auto87C3FD29_g = UnitGroup(null, gv_pLAYER_07_AIUR, RegionFromId(12), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87C3FD29_u = UnitGroupCount(auto87C3FD29_g, c_unitCountAll);
    for (;; auto87C3FD29_u -= 1) {
        auto87C3FD29_var = UnitGroupUnitFromEnd(auto87C3FD29_g, auto87C3FD29_u);
        if (auto87C3FD29_var == null) { break; }
        UnitSetState(auto87C3FD29_var, c_unitStateTargetable, false);
        if ((UnitGetType(auto87C3FD29_var) == "Pylon")) {
            gf_PowerUnpowerPylon(false, auto87C3FD29_var);
        }
        else {
            libNtve_gf_SendActorMessageToUnit(auto87C3FD29_var, "SetTintColor 192,192,192");
            UnitSetPropertyFixed(auto87C3FD29_var, c_unitPropShieldsPercent, 0.0);
            UnitSetPropertyFixed(auto87C3FD29_var, c_unitPropShieldsRegen, 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto536DBF95_g;
    int auto536DBF95_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto536DBF95_g = gv_enemyPlayers;
    auto536DBF95_var = -1;
    while (true) {
        auto536DBF95_var = PlayerGroupNextPlayer(auto536DBF95_g, auto536DBF95_var);
        if (auto536DBF95_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto536DBF95_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(auto536DBF95_var, "GlialReconstitution", 1);
            TechTreeUpgradeAddLevel(auto536DBF95_var, "hydraliskspeed", 1);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto536DBF95_var, "zerglingattackspeed", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_EnableDisableNeedPylonInfo(false);
    libVCMI_gf_AddMissionTipCampaign("Zealot");
    libVCMI_gf_AddMissionTipCampaign("Stalker");
    libVCMI_gf_AddMissionTipCampaign("ChronoBoost");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Dragoon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Overlord", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Guardian", false, gv_pLAYER_01_USER);
    }

    libVCMI_gf_AddMissionCheat("Stage2", "Skip the intro section", gt_DebugStage2, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    libVCMI_gf_AddMissionCheat("Stage3", "Skip to the final section", gt_DebugStage3, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_IntroNexusFound) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DebugStage1Cleanup, true, true);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(0.0625, c_timeGame);
    }
    TriggerExecute(gt_MidPlayerBaseQ, true, true);
    TriggerExecute(gt_StartGameStage2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_missionStage != 3))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_MainSectionCompleteQ) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DebugStage1Cleanup, true, true);
    TriggerExecute(gt_DebugStage2Cleanup, true, true);
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(0.0625, c_timeGame);
    }
    TriggerExecute(gt_MidUpperBaseQ, true, true);
    TriggerExecute(gt_StartGameStage3Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage3_Init () {
    gt_DebugStage3 = TriggerCreate("gt_DebugStage3_Func");
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "S3", true);
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "Stage3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 1 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage1Cleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5C5331BF_g;
    int auto5C5331BF_u;
    unit auto5C5331BF_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DebugStage2, false);
    TriggerEnable(gt_DefeatStartingForcesDead, false);
    TriggerEnable(gt_IntroNexusFound, false);
    TriggerStop(gt_IntroAmbush1);
    TriggerStop(gt_IntroAmbush2);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Blink", 0), false);
    VisRevealerDestroy(gv_blinkRevealer);
    PingDestroy(gv_introNexusPing);
    if ((UnitIsAlive(gv_blinkBeacon) == true)) {
        UnitKill(gv_blinkBeacon);
        gv_blinkBeacon = null;
    }

    if ((UnitIsAlive(gv_blinkHelper) == true)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_blinkHelper, 1));
        DialogDestroy(gv_blinkTagAnchor);
        DialogControlDestroy(gv_blinkTag);
        UnitKill(gv_blinkHelper);
        gv_blinkHelper = null;
    }

    auto5C5331BF_g = gv_stage1Zerg;
    auto5C5331BF_u = UnitGroupCount(auto5C5331BF_g, c_unitCountAll);
    for (;; auto5C5331BF_u -= 1) {
        auto5C5331BF_var = UnitGroupUnitFromEnd(auto5C5331BF_g, auto5C5331BF_u);
        if (auto5C5331BF_var == null) { break; }
        UnitRemove(auto5C5331BF_var);
    }
    TriggerExecute(gt_ObjectiveReachtheNexusComplete, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage1Cleanup_Init () {
    gt_DebugStage1Cleanup = TriggerCreate("gt_DebugStage1Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2 Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2Cleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DebugStage3, false);
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerEnable(gt_MidPlayerBaseQ, false);
    TriggerEnable(gt_StartGameStage2Q, false);
    TriggerEnable(gt_KaraxIntroQ, false);
    TriggerStop(gt_MainSectionComplete);
    TriggerExecute(gt_TutorialCleanup, true, false);
    PingDestroy(gv_templarPing);
    cai_waves_stop("ai35D1D5DC");
    cai_wave_enable(5, gv_pLAYER_02_ZERG, false);
    if ((gv_missionStage == 2)) {
        TriggerExecute(gt_ObjectiveReachTemplarBaseComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2Cleanup_Init () {
    gt_DebugStage2Cleanup = TriggerCreate("gt_DebugStage2Cleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if ((gv_missionStage != 1)) {
        return true;
    }

    TriggerExecute(gt_ObjectiveReachtheNexusCreate, true, true);
    libVCMI_gf_CreateObjectivePing(true, RegionGetCenter(RegionFromId(45)), StringExternal("Param/Value/180B67D2"));
    gv_introNexusPing = PingLastCreated();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1Q_Init () {
    gt_StartGameStage1Q = TriggerCreate("gt_StartGameStage1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_missionStage = 2;
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(47), true, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TimerStart(gv_masteryAchievementTimer, 360.0, false, c_timeAI);
        TriggerEnable(gt_AchievementFastHatcheryKill, true);
    }

    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerEnable(gt_FirstPickupEncountered, true);
    }

    TriggerEnable(gt_ResourcePickupCollected, true);
    TriggerExecute(gt_GroupBurrowedZerg, true, false);
    TriggerExecute(gt_GroupDarkProtoss, true, false);
    TriggerExecute(gt_MainSectionComplete, true, false);
    GameSetLighting("AiurNight", 180.0);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3B290AF1"));
    Wait(1.5, c_timeReal);
    TriggerQueueEnter();
    if ((gv_missionStage != 2)) {
        return true;
    }

    TriggerExecute(gt_ObjectiveReachTemplarBaseCreate, true, true);
    if ((ObjectiveGetState(gv_objective_ReachTemplar) != c_objectiveStateCompleted)) {
        libVCMI_gf_CreateObjectivePing(true, PointFromId(471), StringExternal("Param/Value/3ECA0BC4"));
        gv_templarPing = PingLastCreated();
    }

    TriggerQueueExit();
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_KaraxIntroQ, true, true);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_TutorialController, true, false);
    }
    else {
        gv_tTutorialComplete = true;
    }
    TimerStart(gv_moveOutReminderTimer, 600.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2Q_Init () {
    gt_StartGameStage2Q = TriggerCreate("gt_StartGameStage2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game - Stage 3 Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA1C82BB1_g;
    int autoA1C82BB1_u;
    unit autoA1C82BB1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_missionStage = 3;
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(10), 0.0625, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(20), 0.0, false);
    autoA1C82BB1_g = UnitGroup("Zealot", gv_pLAYER_03_DARK_PROTOSS, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA1C82BB1_u = UnitGroupCount(autoA1C82BB1_g, c_unitCountAll);
    for (;; autoA1C82BB1_u -= 1) {
        autoA1C82BB1_var = UnitGroupUnitFromEnd(autoA1C82BB1_g, autoA1C82BB1_u);
        if (autoA1C82BB1_var == null) { break; }
        libNtve_gf_PauseUnit(autoA1C82BB1_var, false);
        Wait(0.065, c_timeGame);
    }
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    TriggerExecute(gt_AllAloneQ, true, false);
    TriggerExecute(gt_ProtossConvertedbyAmon01, true, false);
    TriggerExecute(gt_ProtossConvertedbyAmon02, true, false);
    TriggerExecute(gt_ProtossConvertedbyAmon03, true, false);
    TriggerExecute(gt_ArtanisFound, true, false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/3DABE0F0"));
    Wait(1.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveReachArtanisCreate, true, false);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveCreate, true, true);
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_artanis), StringExternal("Param/Value/1361AAA9"));
    gv_templarPing = PingLastCreated();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Aiur02|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage3Q_Init () {
    gt_StartGameStage3Q = TriggerCreate("gt_StartGameStage3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Blink Q
//--------------------------------------------------------------------------------------------------
bool gt_TeachBlinkQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_speaker = UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(RegionFromId(42)));
    TriggerQueueEnter();
    if ((gv_missionStage != 1)) {
        return true;
    }

    if ((gv_stalkersBlinked == true)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(lv_speaker, "pMission_Aiur02|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        return true;
    }

    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        CameraPan(gv_pLAYER_01_USER, PointWithOffsetPolar(PointFromId(197), 1.0, 270.0), 2.0, -1, 10.0, true);
        SoundPlayForPlayer(SoundLink("PAiur02_ReticuleAppears", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        TriggerEnable(gt_TeachBlinkEnterBeacon, true);
        TriggerExecute(gt_TeachBlinkEnterBeacon, true, false);
        VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(PointFromId(74), 4.0));
        gv_blinkRevealer = VisRevealerLastCreated();
        VisRevealerEnable(gv_blinkRevealer, true);
    }
    else {
        if ((gv_stalkersBlinked == false)) {
            UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Blink", 0), true);
        }

    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_stalkersBlinked == false)) {
        libVCMI_gf_SendTransmissionCampaign(lv_speaker, "pMission_Aiur02|Line00196", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachBlinkQ_Init () {
    gt_TeachBlinkQ = TriggerCreate("gt_TeachBlinkQ_Func");
    TriggerAddEventUnitRegion(gt_TeachBlinkQ, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Blink Enter Beacon
//--------------------------------------------------------------------------------------------------
bool gt_TeachBlinkEnterBeacon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_anchorPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anchorPoint = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Stalker", gv_pLAYER_01_USER, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= UnitGroupCount(UnitGroup("Stalker", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Blink", true);
        if ((UnitIsAlive(gv_blinkBeacon) == true)) {
            UnitKill(gv_blinkBeacon);
            gv_blinkBeacon = null;
        }

        if ((UnitIsAlive(gv_blinkHelper) != true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTutorialHelper", c_unitCreateIgnorePlacement, 0, PointFromId(74));
            gv_blinkHelper = UnitLastCreated();
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, gv_blinkHelper, "Ref_Center");
            libHots_gf_StoreActorForUnit(gv_blinkHelper, 1, libNtve_gf_ActorLastCreated());
            DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
            gv_blinkTagAnchor = DialogLastCreated();
            DialogSetImageVisible(gv_blinkTagAnchor, false);
            DialogSetPositionRelativeToUnitWithAnchor(gv_blinkTagAnchor, gv_blinkHelper, "Ref_Origin", c_anchorCenter, 0, 0);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
            lv_anchorPoint = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel");
            DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialBlinkTextTag");
            gv_blinkTag = DialogControlLastCreated();
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_anchorPoint, c_anchorCenter, 0, 0);
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds", PlayerGroupAll());
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TutorialTextProtoss", PlayerGroupAll());
            DialogControlSendAnimationEvent(gv_blinkTag, PlayerGroupAll(), "TutorialTextTagAnimation");
        }

    }
    else {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Blink", false);
        if ((UnitIsAlive(gv_blinkBeacon) != true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Protoss", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(26)));
            gv_blinkBeacon = UnitLastCreated();
            UnitSetState(gv_blinkBeacon, c_unitStateTargetable, false);
            UnitSetState(gv_blinkBeacon, c_unitStateSelectable, false);
        }

        if ((UnitIsAlive(gv_blinkHelper) == true)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_blinkHelper, 1));
            DialogDestroy(gv_blinkTagAnchor);
            DialogControlDestroy(gv_blinkTag);
            UnitKill(gv_blinkHelper);
            gv_blinkHelper = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachBlinkEnterBeacon_Init () {
    gt_TeachBlinkEnterBeacon = TriggerCreate("gt_TeachBlinkEnterBeacon_Func");
    TriggerEnable(gt_TeachBlinkEnterBeacon, false);
    TriggerAddEventUnitRegion(gt_TeachBlinkEnterBeacon, null, RegionFromId(26), true);
    TriggerAddEventUnitRegion(gt_TeachBlinkEnterBeacon, null, RegionFromId(26), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker Initial Blink
//--------------------------------------------------------------------------------------------------
bool gt_StalkerInitialBlink_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stalkersBlinked == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TeachBlinkEnterBeacon, false);
    gv_stalkersBlinked = true;
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Blink", 0), false);
    VisRevealerDestroy(gv_blinkRevealer);
    if ((UnitIsAlive(gv_blinkBeacon) == true)) {
        UnitRemove(gv_blinkBeacon);
        gv_blinkBeacon = null;
    }

    if ((UnitIsAlive(gv_blinkHelper) == true)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_blinkHelper, 1));
        DialogDestroy(gv_blinkTagAnchor);
        DialogControlDestroy(gv_blinkTag);
        UnitKill(gv_blinkHelper);
        gv_blinkHelper = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StalkerInitialBlink_Init () {
    gt_StalkerInitialBlink = TriggerCreate("gt_StalkerInitialBlink_Func");
    TriggerAddEventUnitRegion(gt_StalkerInitialBlink, null, RegionFromId(43), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Ambush 1
//--------------------------------------------------------------------------------------------------
bool gt_IntroAmbush1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_IntroAmbush1Q, true, false);
    gf_AmbushSpawnZergling(PointFromId(2300), PointFromId(492));
    Wait(0.75, c_timeAI);
    gf_AmbushSpawnZergling(PointFromId(2313), PointFromId(492));
    Wait(3.0, c_timeAI);
    SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 1), c_maxPlayers, PlayerGroupAll(), PointFromId(2314), 0.0, 100.0, 0.0);
    gf_AmbushSpawnZergling(PointFromId(2314), PointFromId(492));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        Wait(1.0, c_timeAI);
        gf_AmbushSpawnZergling(PointFromId(2316), PointFromId(492));
        Wait(1.0, c_timeAI);
        gf_AmbushSpawnZergling(PointFromId(1551), PointFromId(492));
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        Wait(1.0, c_timeAI);
        gf_AmbushSpawnZergling(PointFromId(1684), PointFromId(492));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroAmbush1_Init () {
    gt_IntroAmbush1 = TriggerCreate("gt_IntroAmbush1_Func");
    TriggerAddEventUnitRegion(gt_IntroAmbush1, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Ambush 1 - Zergling 1 Spawn
//--------------------------------------------------------------------------------------------------
bool gt_IntroAmbush1Zergling1Spawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "Zergling", 0, gv_pLAYER_08_ZERG_AMBUSH, Point((64.0+-13.4519), (64.0+-38.0999)), -224.1373);
    UnitGroupAdd(gv_stage1Zerg, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(492)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroAmbush1Zergling1Spawn_Init () {
    gt_IntroAmbush1Zergling1Spawn = TriggerCreate("gt_IntroAmbush1Zergling1Spawn_Func");
    TriggerEnable(gt_IntroAmbush1Zergling1Spawn, false);
    TriggerAddEventCutsceneBookmarkFired(gt_IntroAmbush1Zergling1Spawn, c_cutsceneNone, "Zergling1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Ambush 2
//--------------------------------------------------------------------------------------------------
bool gt_IntroAmbush2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 0), c_maxPlayers, PlayerGroupAll(), PointFromId(2319), 0.0, 100.0, 0.0);
    gf_AmbushSpawnZergling(PointFromId(2319), PointFromId(2325));
    Wait(libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 1.0, 1.0), c_timeAI);
    gf_AmbushSpawnZergling(PointFromId(2320), PointFromId(2325));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        Wait(libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 1.0, 1.0), c_timeAI);
        SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 1), c_maxPlayers, PlayerGroupAll(), PointFromId(2321), 0.0, 100.0, 0.0);
        gf_AmbushSpawnZergling(PointFromId(2321), PointFromId(2325));
        Wait(0.75, c_timeAI);
        gf_AmbushSpawnZergling(PointFromId(1735), PointFromId(2325));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroAmbush2_Init () {
    gt_IntroAmbush2 = TriggerCreate("gt_IntroAmbush2_Func");
    TriggerAddEventUnitRegion(gt_IntroAmbush2, null, RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Flyer Attack
//--------------------------------------------------------------------------------------------------
bool gt_IntroFlyerAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_attackPoint;

    // Automatic Variable Declarations
    unitgroup autoA8A7FCD9_g;
    int autoA8A7FCD9_u;
    unit autoA8A7FCD9_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(33), 8.0, false);
    TriggerExecute(gt_IntroFlyerAttackQ, true, false);
    while ((libVCMI_gf_GameIsOver() == false) && (gv_missionStage == 1) && (libNtve_gf_UnitGroupIsDead(gv_stage1Flyers) == false)) {
        lv_attackPoint = UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGroupCenterOfGroup(gv_stage1Flyers)));
        autoA8A7FCD9_g = gv_stage1Flyers;
        autoA8A7FCD9_u = UnitGroupCount(autoA8A7FCD9_g, c_unitCountAll);
        for (;; autoA8A7FCD9_u -= 1) {
            autoA8A7FCD9_var = UnitGroupUnitFromEnd(autoA8A7FCD9_g, autoA8A7FCD9_u);
            if (autoA8A7FCD9_var == null) { break; }
            UnitIssueOrder(autoA8A7FCD9_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_attackPoint), c_orderQueueReplace);
        }
        Wait(4.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroFlyerAttack_Init () {
    gt_IntroFlyerAttack = TriggerCreate("gt_IntroFlyerAttack_Func");
    TriggerAddEventUnitRegion(gt_IntroFlyerAttack, null, RegionFromId(44), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Ambush 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroAmbush1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_missionStage != 1)) {
        return true;
    }

    lv_speaker = UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(RegionFromId(36)));
    if ((UnitIsAlive(lv_speaker) == false)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(lv_speaker, "pMission_Aiur02|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroAmbush1Q_Init () {
    gt_IntroAmbush1Q = TriggerCreate("gt_IntroAmbush1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Flyer Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroFlyerAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_missionStage != 1)) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_stage1Flyers) == true)) {
        return true;
    }

    lv_speaker = UnitGroupClosestToPoint(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGroupCenterOfGroup(gv_stage1Flyers));
    if ((UnitIsAlive(lv_speaker) == false)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(lv_speaker, "pMission_Aiur02|Line00188", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroFlyerAttackQ_Init () {
    gt_IntroFlyerAttackQ = TriggerCreate("gt_IntroFlyerAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Nexus Found
//--------------------------------------------------------------------------------------------------
bool gt_IntroNexusFound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DefeatStartingForcesDead, false);
    PingDestroy(gv_introNexusPing);
    TriggerExecute(gt_ObjectiveReachtheNexusComplete, true, true);
    TriggerExecute(gt_MidPlayerBaseQ, true, true);
    TriggerExecute(gt_StartGameStage2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroNexusFound_Init () {
    gt_IntroNexusFound = TriggerCreate("gt_IntroNexusFound_Func");
    TriggerAddEventUnitRegion(gt_IntroNexusFound, null, RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T BuildPylon
//--------------------------------------------------------------------------------------------------
bool gt_TBuildPylon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TBuildPylonComplete, true);
    TriggerEnable(gt_TBuildPylonBuildStarted, true);
    TriggerExecute(gt_TBuildPylonIntroQ, true, true);
    Wait(5.0, c_timeAI);
    TriggerEnable(gt_TBuildPylonBuildOrder, true);
    TriggerExecute(gt_TBuildPylonBuildOrder, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBuildPylon_Init () {
    gt_TBuildPylon = TriggerCreate("gt_TBuildPylon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T BuildPylon Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TBuildPylonIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDD72DB5C_g;
    int autoDD72DB5C_u;
    unit autoDD72DB5C_var;
    unitgroup auto8D4AD642_g;
    int auto8D4AD642_u;
    unit auto8D4AD642_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00134", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_tBuildPylonIntroTransmission = TransmissionLastSent();
    Wait(2.0, c_timeAI);
    autoDD72DB5C_g = gv_tBuildPylonGateways;
    autoDD72DB5C_u = UnitGroupCount(autoDD72DB5C_g, c_unitCountAll);
    for (;; autoDD72DB5C_u -= 1) {
        autoDD72DB5C_var = UnitGroupUnitFromEnd(autoDD72DB5C_g, autoDD72DB5C_u);
        if (autoDD72DB5C_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoDD72DB5C_var, "HaloStart");
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    auto8D4AD642_g = gv_tBuildPylonGateways;
    auto8D4AD642_u = UnitGroupCount(auto8D4AD642_g, c_unitCountAll);
    for (;; auto8D4AD642_u -= 1) {
        auto8D4AD642_var = UnitGroupUnitFromEnd(auto8D4AD642_g, auto8D4AD642_u);
        if (auto8D4AD642_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto8D4AD642_var, "HaloStop");
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBuildPylonIntroQ_Init () {
    gt_TBuildPylonIntroQ = TriggerCreate("gt_TBuildPylonIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T BuildPylon BuildStarted Q
//--------------------------------------------------------------------------------------------------
bool gt_TBuildPylonBuildStartedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00138", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBuildPylonBuildStartedQ_Init () {
    gt_TBuildPylonBuildStartedQ = TriggerCreate("gt_TBuildPylonBuildStartedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T BuildPylon Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TBuildPylonCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_DisplayScreenImage(1, "Assets\\Textures\\tutorialresourceshighlight.dds", c_triggerBlendModeAdd, 212, 134, c_anchorTopRight, 2, -34);
    libNtve_gf_PulseScreenImage(1, 1.75, 100.0, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(gv_tBuildPylonPylon), "Create PowerVisual");
    ActorSendTo(libNtve_gf_MainActorofUnit(gv_tBuildPylonPylon), "PowerVisual", "SetTintColorBlendPair 0,0,0 255,255,255 1.250000 Bounce");
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00139", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    ActorSendTo(libNtve_gf_MainActorofUnit(gv_tBuildPylonPylon), "PowerVisual", "Destroy");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBuildPylonCompleteQ_Init () {
    gt_TBuildPylonCompleteQ = TriggerCreate("gt_TBuildPylonCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T BuildPylon ProbeSelection
//--------------------------------------------------------------------------------------------------
bool gt_TBuildPylonProbeSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto29CA0156_g;
    int auto29CA0156_u;
    unit auto29CA0156_var;
    unitgroup auto83B17D7D_g;
    int auto83B17D7D_u;
    unit auto83B17D7D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitTypeIsSelected("Probe", gv_pLAYER_01_USER) == true)) {
        auto83B17D7D_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto83B17D7D_u = UnitGroupCount(auto83B17D7D_g, c_unitCountAll);
        for (;; auto83B17D7D_u -= 1) {
            auto83B17D7D_var = UnitGroupUnitFromEnd(auto83B17D7D_g, auto83B17D7D_u);
            if (auto83B17D7D_var == null) { break; }
            if ((libHots_gf_ActorForUnit(auto83B17D7D_var, 1) != null)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto83B17D7D_var, 1));
                libHots_gf_StoreActorForUnit(auto83B17D7D_var, 1, null);
            }

        }
    }
    else {
        auto29CA0156_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto29CA0156_u = UnitGroupCount(auto29CA0156_g, c_unitCountAll);
        for (;; auto29CA0156_u -= 1) {
            auto29CA0156_var = UnitGroupUnitFromEnd(auto29CA0156_g, auto29CA0156_u);
            if (auto29CA0156_var == null) { break; }
            if ((libHots_gf_ActorForUnit(auto29CA0156_var, 1) == null)) {
                libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Small, null, auto29CA0156_var, "Ref_Center");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.750000");
                libHots_gf_StoreActorForUnit(auto29CA0156_var, 1, libNtve_gf_ActorLastCreated());
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBuildPylonProbeSelection_Init () {
    gt_TBuildPylonProbeSelection = TriggerCreate("gt_TBuildPylonProbeSelection_Func");
    TriggerEnable(gt_TBuildPylonProbeSelection, false);
    TriggerAddEventUnitSelected(gt_TBuildPylonProbeSelection, null, gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_TBuildPylonProbeSelection, null, gv_pLAYER_01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T BuildPylon Targeting
//--------------------------------------------------------------------------------------------------
bool gt_TBuildPylonTargeting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_textTagAnchorPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textTagAnchorPoint = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn) && (EventTargetModeAbilCmd() == AbilityCommand("ProtossBuild", 1))) {
        if ((UnitIsAlive(gv_tInvisHelper) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Invisible2x2", 0, 0, PointFromId(250));
            gv_tInvisHelper = UnitLastCreated();
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, gv_tInvisHelper, "Ref_Center");
            libHots_gf_StoreActorForUnit(gv_tInvisHelper, 1, libNtve_gf_ActorLastCreated());
            DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
            gv_tTextTagAnchor = DialogLastCreated();
            DialogSetImageVisible(gv_tTextTagAnchor, false);
            DialogSetPositionRelativeToUnitWithAnchor(gv_tTextTagAnchor, gv_tInvisHelper, "Ref_Origin", c_anchorCenter, 0, 0);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
            lv_textTagAnchorPoint = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
            DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialPlacementTextTag");
            gv_tTextTag = DialogControlLastCreated();
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_textTagAnchorPoint, c_anchorCenter, 0, 0);
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds", PlayerGroupAll());
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TutorialTextProtoss", PlayerGroupAll());
            DialogControlSendAnimationEvent(gv_tTextTag, PlayerGroupAll(), "TutorialTextTagAnimation");
        }

        if ((DistanceBetweenPoints(CameraGetTarget(gv_pLAYER_01_USER), PointWithOffset(PointFromId(250), 0.0, -1.0)) > 4.0)) {
            CameraPan(gv_pLAYER_01_USER, PointWithOffset(PointFromId(250), 0.0, -1.0), 1.0, -1, 10.0, false);
        }

    }
    else {
        if ((UnitIsAlive(gv_tInvisHelper) == true)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_tInvisHelper, 1));
            DialogDestroy(gv_tTextTagAnchor);
            DialogControlDestroy(gv_tTextTag);
            UnitRemove(gv_tInvisHelper);
            gv_tInvisHelper = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBuildPylonTargeting_Init () {
    gt_TBuildPylonTargeting = TriggerCreate("gt_TBuildPylonTargeting_Func");
    TriggerEnable(gt_TBuildPylonTargeting, false);
    TriggerAddEventTargetModeUpdate(gt_TBuildPylonTargeting, c_playerAny, null, c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T BuildPylon BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_TBuildPylonBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_gatewayValid1;
    bool lv_gatewayValid2;
    bool lv_validBuildOrder;

    // Automatic Variable Declarations
    unitgroup auto50687FF9_g;
    int auto50687FF9_u;
    unit auto50687FF9_var;
    unitgroup autoCC9714C5_g;
    int autoCC9714C5_u;
    unit autoCC9714C5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Pylon", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 1)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_gatewayValid1 = true;
    }

    if ((UnitGroupCount(UnitGroup("Pylon", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 2)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_gatewayValid2 = true;
    }

    auto50687FF9_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto50687FF9_u = UnitGroupCount(auto50687FF9_g, c_unitCountAll);
    for (;; auto50687FF9_u -= 1) {
        auto50687FF9_var = UnitGroupUnitFromEnd(auto50687FF9_g, auto50687FF9_u);
        if (auto50687FF9_var == null) { break; }
        if ((OrderGetAbilityCommand(UnitOrder(auto50687FF9_var, 0)) == AbilityCommand("ProtossBuild", 1)) && (DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(auto50687FF9_var, 0)), UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 1))) <= 6.5)) {
            lv_gatewayValid1 = true;
        }

        if ((OrderGetAbilityCommand(UnitOrder(auto50687FF9_var, 0)) == AbilityCommand("ProtossBuild", 1)) && (DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(auto50687FF9_var, 0)), UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 2))) <= 6.5)) {
            lv_gatewayValid2 = true;
        }

    }
    if ((lv_gatewayValid1 == true) && (lv_gatewayValid2 == true)) {
        lv_validBuildOrder = true;
    }

    if ((lv_validBuildOrder == true)) {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", false);
        if ((UnitIsAlive(gv_tInvisHelper) == true)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_tInvisHelper, 1));
            DialogDestroy(gv_tTextTagAnchor);
            DialogControlDestroy(gv_tTextTag);
            UnitRemove(gv_tInvisHelper);
            gv_tInvisHelper = null;
        }

        autoCC9714C5_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoCC9714C5_u = UnitGroupCount(autoCC9714C5_g, c_unitCountAll);
        for (;; autoCC9714C5_u -= 1) {
            autoCC9714C5_var = UnitGroupUnitFromEnd(autoCC9714C5_g, autoCC9714C5_u);
            if (autoCC9714C5_var == null) { break; }
            if ((libHots_gf_ActorForUnit(autoCC9714C5_var, 1) != null)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoCC9714C5_var, 1));
                libHots_gf_StoreActorForUnit(autoCC9714C5_var, 1, null);
            }

        }
        TriggerEnable(gt_TBuildPylonTargeting, false);
        TriggerEnable(gt_TBuildPylonProbeSelection, false);
        TriggerStop(gt_TBuildPylon);
        TransmissionClear(gv_tBuildPylonIntroTransmission);
    }
    else {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Pylon", true);
        TriggerEnable(gt_TBuildPylonTargeting, true);
        TriggerEnable(gt_TBuildPylonProbeSelection, true);
        TriggerExecute(gt_TBuildPylonProbeSelection, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBuildPylonBuildOrder_Init () {
    gt_TBuildPylonBuildOrder = TriggerCreate("gt_TBuildPylonBuildOrder_Func");
    TriggerEnable(gt_TBuildPylonBuildOrder, false);
    TriggerAddEventUnitAbility(gt_TBuildPylonBuildOrder, null, AbilityCommand("ProtossBuild", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitConstructProgress(gt_TBuildPylonBuildOrder, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T BuildPylon BuildStarted
//--------------------------------------------------------------------------------------------------
bool gt_TBuildPylonBuildStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Pylon"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Pylon", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 1)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Pylon", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 2)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_TBuildPylon);
    TransmissionClear(gv_tBuildPylonIntroTransmission);
    TriggerExecute(gt_TBuildPylonBuildStartedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBuildPylonBuildStarted_Init () {
    gt_TBuildPylonBuildStarted = TriggerCreate("gt_TBuildPylonBuildStarted_Func");
    TriggerEnable(gt_TBuildPylonBuildStarted, false);
    TriggerAddEventUnitConstructProgress(gt_TBuildPylonBuildStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T BuildPylon Complete
//--------------------------------------------------------------------------------------------------
bool gt_TBuildPylonComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "Pylon"))) {
            return false;
        }

        if (!((PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 1)), "PowerSource") == 1))) {
            return false;
        }

        if (!((PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 2)), "PowerSource") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TBuildPylonProbeSelection, false);
    TriggerEnable(gt_TBuildPylonTargeting, false);
    TriggerEnable(gt_TBuildPylonBuildOrder, false);
    TriggerEnable(gt_TBuildPylonBuildStarted, false);
    TriggerStop(gt_TBuildPylon);
    TransmissionClear(gv_tBuildPylonIntroTransmission);
    if ((UnitIsAlive(gv_tInvisHelper) == true)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_tInvisHelper, 1));
        DialogDestroy(gv_tTextTagAnchor);
        DialogControlDestroy(gv_tTextTag);
        UnitRemove(gv_tInvisHelper);
        gv_tInvisHelper = null;
    }

    gv_tBuildPylonPylon = EventUnitProgressUnit();
    TriggerExecute(gt_TBuildPylonCompleteQ, true, true);
    gv_tBuildPylonComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBuildPylonComplete_Init () {
    gt_TBuildPylonComplete = TriggerCreate("gt_TBuildPylonComplete_Func");
    TriggerEnable(gt_TBuildPylonComplete, false);
    TriggerAddEventUnitConstructProgress(gt_TBuildPylonComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainWarrior
//--------------------------------------------------------------------------------------------------
bool gt_TTrainWarrior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TTrainWarriorComplete, true);
    TriggerEnable(gt_TTrainWarriorPreLessonUnitTrained, false);
    TriggerExecute(gt_TTrainWarriorIntroQ, true, true);
    Wait(5.0, c_timeAI);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("GatewayTrain", 0), true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("GatewayTrain", 1), true);
    TriggerEnable(gt_TTrainWarriorGatewaySelection, true);
    TriggerExecute(gt_TTrainWarriorGatewaySelection, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainWarrior_Init () {
    gt_TTrainWarrior = TriggerCreate("gt_TTrainWarrior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainWarrior Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TTrainWarriorIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00183", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_tTrainWarriorIntroTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainWarriorIntroQ_Init () {
    gt_TTrainWarriorIntroQ = TriggerCreate("gt_TTrainWarriorIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainWarrior Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TTrainWarriorCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00164", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainWarriorCompleteQ_Init () {
    gt_TTrainWarriorCompleteQ = TriggerCreate("gt_TTrainWarriorCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainWarrior PreLessonUnitTrained
//--------------------------------------------------------------------------------------------------
bool gt_TTrainWarriorPreLessonUnitTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_tTrainWarriorComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainWarriorPreLessonUnitTrained_Init () {
    gt_TTrainWarriorPreLessonUnitTrained = TriggerCreate("gt_TTrainWarriorPreLessonUnitTrained_Func");
    TriggerAddEventUnitAbility(gt_TTrainWarriorPreLessonUnitTrained, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_TTrainWarriorPreLessonUnitTrained, null, AbilityCommand("GatewayTrain", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainWarrior GatewaySelection
//--------------------------------------------------------------------------------------------------
bool gt_TTrainWarriorGatewaySelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_gatewaySelected;

    // Automatic Variable Declarations
    unitgroup autoB3DEC5D7_g;
    int autoB3DEC5D7_u;
    unit autoB3DEC5D7_var;
    unitgroup auto19454579_g;
    int auto19454579_u;
    unit auto19454579_var;
    unitgroup auto45C054D4_g;
    int auto45C054D4_u;
    unit auto45C054D4_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB3DEC5D7_g = UnitGroupSelected(gv_pLAYER_01_USER);
    autoB3DEC5D7_u = UnitGroupCount(autoB3DEC5D7_g, c_unitCountAll);
    for (;; autoB3DEC5D7_u -= 1) {
        autoB3DEC5D7_var = UnitGroupUnitFromEnd(autoB3DEC5D7_g, autoB3DEC5D7_u);
        if (autoB3DEC5D7_var == null) { break; }
        if ((UnitGroupHasUnit(UnitGroup("Gateway", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), autoB3DEC5D7_var) == true)) {
            lv_gatewaySelected = true;
        }

    }
    if ((lv_gatewaySelected == true)) {
        auto45C054D4_g = UnitGroup("Gateway", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto45C054D4_u = UnitGroupCount(auto45C054D4_g, c_unitCountAll);
        for (;; auto45C054D4_u -= 1) {
            auto45C054D4_var = UnitGroupUnitFromEnd(auto45C054D4_g, auto45C054D4_u);
            if (auto45C054D4_var == null) { break; }
            if ((libHots_gf_ActorForUnit(auto45C054D4_var, 1) != null)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto45C054D4_var, 1));
                libHots_gf_StoreActorForUnit(auto45C054D4_var, 1, null);
            }

        }
    }
    else {
        auto19454579_g = UnitGroup("Gateway", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto19454579_u = UnitGroupCount(auto19454579_g, c_unitCountAll);
        for (;; auto19454579_u -= 1) {
            auto19454579_var = UnitGroupUnitFromEnd(auto19454579_g, auto19454579_u);
            if (auto19454579_var == null) { break; }
            if ((libHots_gf_ActorForUnit(auto19454579_var, 1) == null)) {
                libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, auto19454579_var, "Ref_Target 07");
                libHots_gf_StoreActorForUnit(auto19454579_var, 1, libNtve_gf_ActorLastCreated());
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainWarriorGatewaySelection_Init () {
    gt_TTrainWarriorGatewaySelection = TriggerCreate("gt_TTrainWarriorGatewaySelection_Func");
    TriggerEnable(gt_TTrainWarriorGatewaySelection, false);
    TriggerAddEventUnitSelected(gt_TTrainWarriorGatewaySelection, null, gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_TTrainWarriorGatewaySelection, null, gv_pLAYER_01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainWarrior Complete
//--------------------------------------------------------------------------------------------------
bool gt_TTrainWarriorComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB397C5AB_g;
    int autoB397C5AB_u;
    unit autoB397C5AB_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TTrainWarriorGatewaySelection, false);
    TriggerStop(gt_TTrainWarrior);
    TransmissionClear(gv_tTrainWarriorIntroTransmission);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("GatewayTrain", 0), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("GatewayTrain", 1), false);
    autoB397C5AB_g = UnitGroup("Gateway", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB397C5AB_u = UnitGroupCount(autoB397C5AB_g, c_unitCountAll);
    for (;; autoB397C5AB_u -= 1) {
        autoB397C5AB_var = UnitGroupUnitFromEnd(autoB397C5AB_g, autoB397C5AB_u);
        if (autoB397C5AB_var == null) { break; }
        if ((libHots_gf_ActorForUnit(autoB397C5AB_var, 1) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoB397C5AB_var, 1));
            libHots_gf_StoreActorForUnit(autoB397C5AB_var, 1, null);
        }

    }
    TriggerExecute(gt_TTrainWarriorCompleteQ, true, true);
    gv_tTrainWarriorComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainWarriorComplete_Init () {
    gt_TTrainWarriorComplete = TriggerCreate("gt_TTrainWarriorComplete_Func");
    TriggerEnable(gt_TTrainWarriorComplete, false);
    TriggerAddEventUnitAbility(gt_TTrainWarriorComplete, null, AbilityCommand("GatewayTrain", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_TTrainWarriorComplete, null, AbilityCommand("GatewayTrain", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T MakeAssimilator
//--------------------------------------------------------------------------------------------------
bool gt_TMakeAssimilator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TMakeAssimilatorComplete, true);
    TriggerEnable(gt_TMakeAssimilatorBuildOrder, true);
    TriggerExecute(gt_TMakeAssimilatorIntro1Q, true, true);
    TriggerExecute(gt_TMakeAssimilatorIntro2Q, true, true);
    Wait(5.0, c_timeAI);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Assimilator", true);
    TriggerExecute(gt_TMakeAssimilatorBuildOrder, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TMakeAssimilator_Init () {
    gt_TMakeAssimilator = TriggerCreate("gt_TMakeAssimilator_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T MakeAssimilator Intro1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TMakeAssimilatorIntro1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00120", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_tMakeAssimilatorIntroTransmission1 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TMakeAssimilatorIntro1Q_Init () {
    gt_TMakeAssimilatorIntro1Q = TriggerCreate("gt_TMakeAssimilatorIntro1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T MakeAssimilator Intro2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TMakeAssimilatorIntro2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00121", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_tMakeAssimilatorIntroTransmission2 = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TMakeAssimilatorIntro2Q_Init () {
    gt_TMakeAssimilatorIntro2Q = TriggerCreate("gt_TMakeAssimilatorIntro2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T MakeAssimilator ProbeSelection
//--------------------------------------------------------------------------------------------------
bool gt_TMakeAssimilatorProbeSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6DBBE895_g;
    int auto6DBBE895_u;
    unit auto6DBBE895_var;
    unitgroup autoE76E89A0_g;
    int autoE76E89A0_u;
    unit autoE76E89A0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitTypeIsSelected("Probe", gv_pLAYER_01_USER) == true)) {
        autoE76E89A0_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoE76E89A0_u = UnitGroupCount(autoE76E89A0_g, c_unitCountAll);
        for (;; autoE76E89A0_u -= 1) {
            autoE76E89A0_var = UnitGroupUnitFromEnd(autoE76E89A0_g, autoE76E89A0_u);
            if (autoE76E89A0_var == null) { break; }
            if ((libHots_gf_ActorForUnit(autoE76E89A0_var, 1) != null)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoE76E89A0_var, 1));
                libHots_gf_StoreActorForUnit(autoE76E89A0_var, 1, null);
            }

        }
    }
    else {
        auto6DBBE895_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto6DBBE895_u = UnitGroupCount(auto6DBBE895_g, c_unitCountAll);
        for (;; auto6DBBE895_u -= 1) {
            auto6DBBE895_var = UnitGroupUnitFromEnd(auto6DBBE895_g, auto6DBBE895_u);
            if (auto6DBBE895_var == null) { break; }
            if ((libHots_gf_ActorForUnit(auto6DBBE895_var, 1) == null)) {
                libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Small, null, auto6DBBE895_var, "Ref_Center");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.750000");
                libHots_gf_StoreActorForUnit(auto6DBBE895_var, 1, libNtve_gf_ActorLastCreated());
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TMakeAssimilatorProbeSelection_Init () {
    gt_TMakeAssimilatorProbeSelection = TriggerCreate("gt_TMakeAssimilatorProbeSelection_Func");
    TriggerEnable(gt_TMakeAssimilatorProbeSelection, false);
    TriggerAddEventUnitSelected(gt_TMakeAssimilatorProbeSelection, null, gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_TMakeAssimilatorProbeSelection, null, gv_pLAYER_01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T MakeAssimilator Targeting
//--------------------------------------------------------------------------------------------------
bool gt_TMakeAssimilatorTargeting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_textTagAnchorPoint;

    // Automatic Variable Declarations
    unitgroup autoCCCDD187_g;
    int autoCCCDD187_u;
    unit autoCCCDD187_var;
    unitgroup auto43821176_g;
    int auto43821176_u;
    unit auto43821176_var;

    // Variable Initialization
    lv_textTagAnchorPoint = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn) && (EventTargetModeAbilCmd() == AbilityCommand("ProtossBuild", 2))) {
        if ((UnitIsAlive(gv_tInvisHelper) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Invisible3x3", c_unitCreateIgnorePlacement, 0, PointFromId(2338));
            gv_tInvisHelper = UnitLastCreated();
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, gv_tInvisHelper, "Ref_Center");
            libHots_gf_StoreActorForUnit(gv_tInvisHelper, 1, libNtve_gf_ActorLastCreated());
            DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
            gv_tTextTagAnchor = DialogLastCreated();
            DialogSetImageVisible(gv_tTextTagAnchor, false);
            DialogSetPositionRelativeToUnitWithAnchor(gv_tTextTagAnchor, gv_tInvisHelper, "Ref_Origin", c_anchorCenter, 0, 120);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
            lv_textTagAnchorPoint = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
            DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialPlacementTextTag");
            gv_tTextTag = DialogControlLastCreated();
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_textTagAnchorPoint, c_anchorCenter, 0, 0);
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds", PlayerGroupAll());
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TutorialTextProtoss", PlayerGroupAll());
            DialogControlSendAnimationEvent(gv_tTextTag, PlayerGroupAll(), "TutorialTextTagAnimation");
            auto43821176_g = UnitGroup("ProtossVespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto43821176_u = UnitGroupCount(auto43821176_g, c_unitCountAll);
            for (;; auto43821176_u -= 1) {
                auto43821176_var = UnitGroupUnitFromEnd(auto43821176_g, auto43821176_u);
                if (auto43821176_var == null) { break; }
                UnitSetState(auto43821176_var, c_unitStateTooltipable, false);
            }
        }

    }
    else {
        if ((UnitIsAlive(gv_tInvisHelper) == true)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_tInvisHelper, 1));
            DialogDestroy(gv_tTextTagAnchor);
            DialogControlDestroy(gv_tTextTag);
            UnitRemove(gv_tInvisHelper);
            gv_tInvisHelper = null;
            autoCCCDD187_g = UnitGroup("ProtossVespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCCCDD187_u = UnitGroupCount(autoCCCDD187_g, c_unitCountAll);
            for (;; autoCCCDD187_u -= 1) {
                autoCCCDD187_var = UnitGroupUnitFromEnd(autoCCCDD187_g, autoCCCDD187_u);
                if (autoCCCDD187_var == null) { break; }
                UnitSetState(autoCCCDD187_var, c_unitStateTooltipable, true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TMakeAssimilatorTargeting_Init () {
    gt_TMakeAssimilatorTargeting = TriggerCreate("gt_TMakeAssimilatorTargeting_Func");
    TriggerEnable(gt_TMakeAssimilatorTargeting, false);
    TriggerAddEventTargetModeUpdate(gt_TMakeAssimilatorTargeting, c_playerAny, null, c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T MakeAssimilator BuildOrder
//--------------------------------------------------------------------------------------------------
bool gt_TMakeAssimilatorBuildOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validBuildOrder;

    // Automatic Variable Declarations
    unitgroup autoDD24C83D_g;
    int autoDD24C83D_u;
    unit autoDD24C83D_var;
    unitgroup auto1CFDD34B_g;
    int auto1CFDD34B_u;
    unit auto1CFDD34B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Assimilator", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_validBuildOrder = true;
    }

    autoDD24C83D_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDD24C83D_u = UnitGroupCount(autoDD24C83D_g, c_unitCountAll);
    for (;; autoDD24C83D_u -= 1) {
        autoDD24C83D_var = UnitGroupUnitFromEnd(autoDD24C83D_g, autoDD24C83D_u);
        if (autoDD24C83D_var == null) { break; }
        if ((OrderGetAbilityCommand(UnitOrder(autoDD24C83D_var, 0)) == AbilityCommand("ProtossBuild", 2))) {
            lv_validBuildOrder = true;
        }

    }
    if ((lv_validBuildOrder == true)) {
        UISetButtonFaceHighlighted(PlayerGroupAll(), "Assimilator", false);
        if ((UnitIsAlive(gv_tInvisHelper) == true)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_tInvisHelper, 1));
            DialogDestroy(gv_tTextTagAnchor);
            DialogControlDestroy(gv_tTextTag);
            UnitRemove(gv_tInvisHelper);
            gv_tInvisHelper = null;
        }

        auto1CFDD34B_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto1CFDD34B_u = UnitGroupCount(auto1CFDD34B_g, c_unitCountAll);
        for (;; auto1CFDD34B_u -= 1) {
            auto1CFDD34B_var = UnitGroupUnitFromEnd(auto1CFDD34B_g, auto1CFDD34B_u);
            if (auto1CFDD34B_var == null) { break; }
            if ((libHots_gf_ActorForUnit(auto1CFDD34B_var, 1) != null)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto1CFDD34B_var, 1));
                libHots_gf_StoreActorForUnit(auto1CFDD34B_var, 1, null);
            }

        }
        TriggerEnable(gt_TMakeAssimilatorTargeting, false);
        TriggerEnable(gt_TMakeAssimilatorProbeSelection, false);
        TriggerStop(gt_TMakeAssimilator);
        TransmissionClear(gv_tMakeAssimilatorIntroTransmission1);
        TransmissionClear(gv_tMakeAssimilatorIntroTransmission2);
    }
    else {
        if ((TriggerActiveCount(gt_TMakeAssimilatorIntro1Q) == 0) && (TriggerActiveCount(gt_TMakeAssimilatorIntro2Q) == 0)) {
            UISetButtonFaceHighlighted(PlayerGroupAll(), "Assimilator", true);
            TriggerEnable(gt_TMakeAssimilatorTargeting, true);
            TriggerEnable(gt_TMakeAssimilatorProbeSelection, true);
            TriggerExecute(gt_TMakeAssimilatorProbeSelection, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TMakeAssimilatorBuildOrder_Init () {
    gt_TMakeAssimilatorBuildOrder = TriggerCreate("gt_TMakeAssimilatorBuildOrder_Func");
    TriggerEnable(gt_TMakeAssimilatorBuildOrder, false);
    TriggerAddEventUnitAbility(gt_TMakeAssimilatorBuildOrder, null, AbilityCommand("ProtossBuild", 2), c_unitAbilStageAll, false);
    TriggerAddEventUnitConstructProgress(gt_TMakeAssimilatorBuildOrder, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T MakeAssimilator Complete
//--------------------------------------------------------------------------------------------------
bool gt_TMakeAssimilatorComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD0C38DC8_g;
    int autoD0C38DC8_u;
    unit autoD0C38DC8_var;
    unitgroup auto029BC6E4_g;
    int auto029BC6E4_u;
    unit auto029BC6E4_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "Assimilator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_tMakeAssimilatorAssimilator = EventUnitProgressUnit();
    TriggerStop(gt_TMakeAssimilator);
    TransmissionClear(gv_tMakeAssimilatorIntroTransmission1);
    TransmissionClear(gv_tMakeAssimilatorIntroTransmission2);
    TriggerEnable(gt_TMakeAssimilatorProbeSelection, false);
    TriggerEnable(gt_TMakeAssimilatorTargeting, false);
    TriggerEnable(gt_TMakeAssimilatorBuildOrder, false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Assimilator", false);
    autoD0C38DC8_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD0C38DC8_u = UnitGroupCount(autoD0C38DC8_g, c_unitCountAll);
    for (;; autoD0C38DC8_u -= 1) {
        autoD0C38DC8_var = UnitGroupUnitFromEnd(autoD0C38DC8_g, autoD0C38DC8_u);
        if (autoD0C38DC8_var == null) { break; }
        if ((libHots_gf_ActorForUnit(autoD0C38DC8_var, 1) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoD0C38DC8_var, 1));
            libHots_gf_StoreActorForUnit(autoD0C38DC8_var, 1, null);
        }

    }
    if ((UnitIsAlive(gv_tInvisHelper) == true)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_tInvisHelper, 1));
        DialogDestroy(gv_tTextTagAnchor);
        DialogControlDestroy(gv_tTextTag);
        UnitRemove(gv_tInvisHelper);
        gv_tInvisHelper = null;
        auto029BC6E4_g = UnitGroup("ProtossVespeneGeyser", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto029BC6E4_u = UnitGroupCount(auto029BC6E4_g, c_unitCountAll);
        for (;; auto029BC6E4_u -= 1) {
            auto029BC6E4_var = UnitGroupUnitFromEnd(auto029BC6E4_g, auto029BC6E4_u);
            if (auto029BC6E4_var == null) { break; }
            UnitSetState(auto029BC6E4_var, c_unitStateTooltipable, true);
        }
    }

    gv_tMakeAssimilatorComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TMakeAssimilatorComplete_Init () {
    gt_TMakeAssimilatorComplete = TriggerCreate("gt_TMakeAssimilatorComplete_Func");
    TriggerEnable(gt_TMakeAssimilatorComplete, false);
    TriggerAddEventUnitConstructProgress(gt_TMakeAssimilatorComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TransferProbes
//--------------------------------------------------------------------------------------------------
bool gt_TTransferProbes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TTransferProbesComplete, true);
    TriggerExecute(gt_TTransferProbesIntroQ, true, true);
    Wait(5.0, c_timeAI);
    TriggerEnable(gt_TTransferProbesProbeSelection, true);
    TriggerExecute(gt_TTransferProbesProbeSelection, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTransferProbes_Init () {
    gt_TTransferProbes = TriggerCreate("gt_TTransferProbes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TransferProbes Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TTransferProbesIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00095", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_tTransferProbesIntroTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTransferProbesIntroQ_Init () {
    gt_TTransferProbesIntroQ = TriggerCreate("gt_TTransferProbesIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TransferProbes ProbeSelection
//--------------------------------------------------------------------------------------------------
bool gt_TTransferProbesProbeSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_validProbeSelected;
    unitgroup lv_validProbes;
    int lv_textTagAnchorPoint;

    // Automatic Variable Declarations
    unitgroup auto220BF287_g;
    int auto220BF287_u;
    unit auto220BF287_var;
    unitgroup auto97DEA53D_g;
    int auto97DEA53D_u;
    unit auto97DEA53D_var;
    unitgroup auto3FD20CDD_g;
    int auto3FD20CDD_u;
    unit auto3FD20CDD_var;
    unitgroup auto45B3B8BE_g;
    int auto45B3B8BE_u;
    unit auto45B3B8BE_var;

    // Variable Initialization
    lv_validProbes = UnitGroupEmpty();
    lv_textTagAnchorPoint = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    auto220BF287_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto220BF287_u = UnitGroupCount(auto220BF287_g, c_unitCountAll);
    for (;; auto220BF287_u -= 1) {
        auto220BF287_var = UnitGroupUnitFromEnd(auto220BF287_g, auto220BF287_u);
        if (auto220BF287_var == null) { break; }
        if ((!((((OrderGetAbilityCommand(UnitOrder(auto220BF287_var, 0)) == AbilityCommand("ProbeHarvest", 0)) && (UnitGetType(OrderGetTargetUnit(UnitOrder(auto220BF287_var, 0))) == "Assimilator")) || ((OrderGetAbilityCommand(UnitOrder(auto220BF287_var, 0)) == AbilityCommand("ProbeHarvest", 1)) && (UnitHasBehavior2(auto220BF287_var, "CarryHarvestableVespeneGeyserGasProtoss") == true)))))) {
            UnitGroupAdd(lv_validProbes, auto220BF287_var);
        }

    }
    auto97DEA53D_g = UnitGroupSelected(gv_pLAYER_01_USER);
    auto97DEA53D_u = UnitGroupCount(auto97DEA53D_g, c_unitCountAll);
    for (;; auto97DEA53D_u -= 1) {
        auto97DEA53D_var = UnitGroupUnitFromEnd(auto97DEA53D_g, auto97DEA53D_u);
        if (auto97DEA53D_var == null) { break; }
        if ((UnitGroupHasUnit(lv_validProbes, auto97DEA53D_var) == true)) {
            lv_validProbeSelected = true;
        }

    }
    if ((lv_validProbeSelected == true)) {
        auto3FD20CDD_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto3FD20CDD_u = UnitGroupCount(auto3FD20CDD_g, c_unitCountAll);
        for (;; auto3FD20CDD_u -= 1) {
            auto3FD20CDD_var = UnitGroupUnitFromEnd(auto3FD20CDD_g, auto3FD20CDD_u);
            if (auto3FD20CDD_var == null) { break; }
            if ((libHots_gf_ActorForUnit(auto3FD20CDD_var, 1) != null)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto3FD20CDD_var, 1));
                libHots_gf_StoreActorForUnit(auto3FD20CDD_var, 1, null);
            }

        }
        if ((libHots_gf_ActorForUnit(gv_tMakeAssimilatorAssimilator, 1) == null)) {
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, gv_tMakeAssimilatorAssimilator, "Ref_Origin");
            libHots_gf_StoreActorForUnit(gv_tMakeAssimilatorAssimilator, 1, libNtve_gf_ActorLastCreated());
            DialogCreate(500, 50, c_anchorCenter, 0, 0, true);
            gv_tTextTagAnchor = DialogLastCreated();
            DialogSetImageVisible(gv_tTextTagAnchor, false);
            DialogSetPositionRelativeToUnitWithAnchor(gv_tTextTagAnchor, gv_tMakeAssimilatorAssimilator, "Ref_Origin", c_anchorCenter, 0, 120);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
            lv_textTagAnchorPoint = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
            DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "LotV_TutorialUI/TutorialGatherTextTag");
            gv_tTextTag = DialogControlLastCreated();
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_textTagAnchorPoint, c_anchorCenter, 0, 0);
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Background");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_tutorial_textborder_prot.dds", PlayerGroupAll());
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "Label");
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TutorialTextProtoss", PlayerGroupAll());
            DialogControlSendAnimationEvent(gv_tTextTag, PlayerGroupAll(), "TutorialTextTagAnimation");
        }

    }
    else {
        auto45B3B8BE_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto45B3B8BE_u = UnitGroupCount(auto45B3B8BE_g, c_unitCountAll);
        for (;; auto45B3B8BE_u -= 1) {
            auto45B3B8BE_var = UnitGroupUnitFromEnd(auto45B3B8BE_g, auto45B3B8BE_u);
            if (auto45B3B8BE_var == null) { break; }
            if ((UnitGroupHasUnit(lv_validProbes, auto45B3B8BE_var) == true)) {
                if ((libHots_gf_ActorForUnit(auto45B3B8BE_var, 1) == null)) {
                    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Small, null, auto45B3B8BE_var, "Ref_Center");
                    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.750000");
                    libHots_gf_StoreActorForUnit(auto45B3B8BE_var, 1, libNtve_gf_ActorLastCreated());
                }

            }

        }
        if ((libHots_gf_ActorForUnit(gv_tMakeAssimilatorAssimilator, 1) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_tMakeAssimilatorAssimilator, 1));
            libHots_gf_StoreActorForUnit(gv_tMakeAssimilatorAssimilator, 1, null);
            DialogDestroy(gv_tTextTagAnchor);
            DialogControlDestroy(gv_tTextTag);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTransferProbesProbeSelection_Init () {
    gt_TTransferProbesProbeSelection = TriggerCreate("gt_TTransferProbesProbeSelection_Func");
    TriggerEnable(gt_TTransferProbesProbeSelection, false);
    TriggerAddEventUnitSelected(gt_TTransferProbesProbeSelection, null, gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_TTransferProbesProbeSelection, null, gv_pLAYER_01_USER, false);
    TriggerAddEventUnitAbility(gt_TTransferProbesProbeSelection, null, AbilityCommand("ProbeHarvest", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_TTransferProbesProbeSelection, null, AbilityCommand("ProbeHarvest", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TransferProbes Complete
//--------------------------------------------------------------------------------------------------
bool gt_TTransferProbesComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probesOnGas;

    // Automatic Variable Declarations
    unitgroup auto70400E0A_g;
    int auto70400E0A_u;
    unit auto70400E0A_var;
    unitgroup autoAA4AA669_g;
    int autoAA4AA669_u;
    unit autoAA4AA669_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto70400E0A_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto70400E0A_u = UnitGroupCount(auto70400E0A_g, c_unitCountAll);
    for (;; auto70400E0A_u -= 1) {
        auto70400E0A_var = UnitGroupUnitFromEnd(auto70400E0A_g, auto70400E0A_u);
        if (auto70400E0A_var == null) { break; }
        if ((((OrderGetAbilityCommand(UnitOrder(auto70400E0A_var, 0)) == AbilityCommand("ProbeHarvest", 0)) && (UnitGetType(OrderGetTargetUnit(UnitOrder(auto70400E0A_var, 0))) == "Assimilator")) || ((OrderGetAbilityCommand(UnitOrder(auto70400E0A_var, 0)) == AbilityCommand("ProbeHarvest", 1)) && (UnitHasBehavior2(auto70400E0A_var, "CarryHarvestableVespeneGeyserGasProtoss") == true)))) {
            lv_probesOnGas += 1;
        }

    }
    if ((lv_probesOnGas >= 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerStop(gt_TTransferProbes);
        TransmissionClear(gv_tTransferProbesIntroTransmission);
        TriggerEnable(gt_TTransferProbesProbeSelection, false);
        autoAA4AA669_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoAA4AA669_u = UnitGroupCount(autoAA4AA669_g, c_unitCountAll);
        for (;; autoAA4AA669_u -= 1) {
            autoAA4AA669_var = UnitGroupUnitFromEnd(autoAA4AA669_g, autoAA4AA669_u);
            if (autoAA4AA669_var == null) { break; }
            if ((libHots_gf_ActorForUnit(autoAA4AA669_var, 1) != null)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoAA4AA669_var, 1));
                libHots_gf_StoreActorForUnit(autoAA4AA669_var, 1, null);
            }

        }
        if ((libHots_gf_ActorForUnit(gv_tMakeAssimilatorAssimilator, 1) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_tMakeAssimilatorAssimilator, 1));
            DialogDestroy(gv_tTextTagAnchor);
            DialogControlDestroy(gv_tTextTag);
        }

        gv_tTransferProbesComplete = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTransferProbesComplete_Init () {
    gt_TTransferProbesComplete = TriggerCreate("gt_TTransferProbesComplete_Func");
    TriggerEnable(gt_TTransferProbesComplete, false);
    TriggerAddEventUnitAbility(gt_TTransferProbesComplete, null, AbilityCommand("ProbeHarvest", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_TTransferProbesComplete, null, AbilityCommand("ProbeHarvest", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainMoreProbes
//--------------------------------------------------------------------------------------------------
bool gt_TTrainMoreProbes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TTrainMoreProbesComplete, true);
    TriggerExecute(gt_TTrainMoreProbesIntroQ, true, true);
    Wait(5.0, c_timeAI);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NexusTrain", 0), true);
    TriggerEnable(gt_TTrainMoreProbesNexusSelection, true);
    TriggerExecute(gt_TTrainMoreProbesNexusSelection, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainMoreProbes_Init () {
    gt_TTrainMoreProbes = TriggerCreate("gt_TTrainMoreProbes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainMoreProbes Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TTrainMoreProbesIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00132", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_tTrainMoreProbesIntroTransmission = TransmissionLastSent();
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainMoreProbesIntroQ_Init () {
    gt_TTrainMoreProbesIntroQ = TriggerCreate("gt_TTrainMoreProbesIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainMoreProbes NexusSelection
//--------------------------------------------------------------------------------------------------
bool gt_TTrainMoreProbesNexusSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_nexusSelected;

    // Automatic Variable Declarations
    unitgroup autoB231D5C6_g;
    int autoB231D5C6_u;
    unit autoB231D5C6_var;
    unitgroup auto7BD39858_g;
    int auto7BD39858_u;
    unit auto7BD39858_var;
    unitgroup auto0810F00D_g;
    int auto0810F00D_u;
    unit auto0810F00D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB231D5C6_g = UnitGroupSelected(gv_pLAYER_01_USER);
    autoB231D5C6_u = UnitGroupCount(autoB231D5C6_g, c_unitCountAll);
    for (;; autoB231D5C6_u -= 1) {
        autoB231D5C6_var = UnitGroupUnitFromEnd(autoB231D5C6_g, autoB231D5C6_u);
        if (autoB231D5C6_var == null) { break; }
        if ((UnitGroupHasUnit(UnitGroup("Nexus", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), autoB231D5C6_var) == true)) {
            lv_nexusSelected = true;
        }

    }
    if ((lv_nexusSelected == true)) {
        auto0810F00D_g = UnitGroup("Nexus", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0810F00D_u = UnitGroupCount(auto0810F00D_g, c_unitCountAll);
        for (;; auto0810F00D_u -= 1) {
            auto0810F00D_var = UnitGroupUnitFromEnd(auto0810F00D_g, auto0810F00D_u);
            if (auto0810F00D_var == null) { break; }
            if ((libHots_gf_ActorForUnit(auto0810F00D_var, 1) != null)) {
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto0810F00D_var, 1));
                libHots_gf_StoreActorForUnit(auto0810F00D_var, 1, null);
            }

        }
    }
    else {
        auto7BD39858_g = UnitGroup("Nexus", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7BD39858_u = UnitGroupCount(auto7BD39858_g, c_unitCountAll);
        for (;; auto7BD39858_u -= 1) {
            auto7BD39858_var = UnitGroupUnitFromEnd(auto7BD39858_g, auto7BD39858_u);
            if (auto7BD39858_var == null) { break; }
            if ((libHots_gf_ActorForUnit(auto7BD39858_var, 1) == null)) {
                libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Large, null, auto7BD39858_var, "Ref_Target 01");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000");
                libHots_gf_StoreActorForUnit(auto7BD39858_var, 1, libNtve_gf_ActorLastCreated());
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainMoreProbesNexusSelection_Init () {
    gt_TTrainMoreProbesNexusSelection = TriggerCreate("gt_TTrainMoreProbesNexusSelection_Func");
    TriggerEnable(gt_TTrainMoreProbesNexusSelection, false);
    TriggerAddEventUnitSelected(gt_TTrainMoreProbesNexusSelection, null, gv_pLAYER_01_USER, true);
    TriggerAddEventUnitSelected(gt_TTrainMoreProbesNexusSelection, null, gv_pLAYER_01_USER, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T TrainMoreProbes Complete
//--------------------------------------------------------------------------------------------------
bool gt_TTrainMoreProbesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto72D95AC5_g;
    int auto72D95AC5_u;
    unit auto72D95AC5_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TTrainMoreProbesNexusSelection, false);
    TriggerStop(gt_TTrainMoreProbes);
    TransmissionClear(gv_tTrainMoreProbesIntroTransmission);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NexusTrain", 0), false);
    auto72D95AC5_g = UnitGroup("Nexus", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto72D95AC5_u = UnitGroupCount(auto72D95AC5_g, c_unitCountAll);
    for (;; auto72D95AC5_u -= 1) {
        auto72D95AC5_var = UnitGroupUnitFromEnd(auto72D95AC5_g, auto72D95AC5_u);
        if (auto72D95AC5_var == null) { break; }
        if ((libHots_gf_ActorForUnit(auto72D95AC5_var, 1) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto72D95AC5_var, 1));
            libHots_gf_StoreActorForUnit(auto72D95AC5_var, 1, null);
        }

    }
    gv_tTrainMoreProbesComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TTrainMoreProbesComplete_Init () {
    gt_TTrainMoreProbesComplete = TriggerCreate("gt_TTrainMoreProbesComplete_Func");
    TriggerEnable(gt_TTrainMoreProbesComplete, false);
    TriggerAddEventUnitAbility(gt_TTrainMoreProbesComplete, null, AbilityCommand("NexusTrain", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karax Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_KaraxIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00190", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaraxIntroQ_Init () {
    gt_KaraxIntroQ = TriggerCreate("gt_KaraxIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Controller
//--------------------------------------------------------------------------------------------------
bool gt_TutorialController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probesOnGas;

    // Automatic Variable Declarations
    fixed auto1B4D6F82_at;
    fixed auto0CB7295A_at;
    const int autoA4DB1C03_n = 5;
    int autoA4DB1C03_i;
    unitgroup auto4D4BD4E5_g;
    int auto4D4BD4E5_u;
    unit auto4D4BD4E5_var;
    fixed auto4AFF17A9_at;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_tutorialTimer, 300.0, false, c_timeAI);
    UnitGroupAddUnitGroup(gv_tBuildPylonGateways, UnitGroup("Gateway", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if (((UnitGroupCount(UnitGroup("Pylon", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 1)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (UnitGroupCount(UnitGroup("Pylon", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 2)), 6.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        TriggerExecute(gt_TBuildPylon, true, false);
        while (!((gv_tBuildPylonComplete == true))) {
            Wait(1.0, c_timeAI);
        }
    }
    else {
        while (!((PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 1)), "PowerSource") == 1) && (PowerLevel(gv_pLAYER_01_USER, UnitGetPosition(UnitGroupUnit(gv_tBuildPylonGateways, 2)), "PowerSource") == 1))) {
            Wait(1.0, c_timeAI);
        }
        gv_tBuildPylonComplete = true;
    }
    auto1B4D6F82_at = 0;
    while (!((gv_tTrainWarriorComplete == true)) && auto1B4D6F82_at <= 10.0) {
        Wait(1.0, c_timeAI);
        auto1B4D6F82_at = auto1B4D6F82_at + 1.0;
    }
    if ((gv_tTrainWarriorComplete != true)) {
        TriggerExecute(gt_TTrainWarrior, true, false);
        while (!((gv_tTrainWarriorComplete == true))) {
            Wait(1.0, c_timeAI);
        }
    }

    libNtve_gf_WaitForTimer(gv_tutorialTimer, 60.0, true);
    auto0CB7295A_at = 0;
    while (!((UnitGroupCount(UnitGroup("Assimilator", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) && auto0CB7295A_at <= 10.0) {
        Wait(1.0, c_timeAI);
        auto0CB7295A_at = auto0CB7295A_at + 1.0;
    }
    if ((UnitGroupCount(UnitGroup("Assimilator", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerExecute(gt_TMakeAssimilator, true, false);
        while (!((gv_tMakeAssimilatorComplete == true))) {
            Wait(1.0, c_timeAI);
        }
    }
    else {
        while (!((UnitGroupCount(UnitGroup("Assimilator", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            Wait(1.0, c_timeAI);
        }
        gv_tMakeAssimilatorComplete = true;
    }
    for (autoA4DB1C03_i = 1; autoA4DB1C03_i <= autoA4DB1C03_n; autoA4DB1C03_i += 1) {
        Wait(1.0, c_timeAI);
        lv_probesOnGas = 0;
        auto4D4BD4E5_g = UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto4D4BD4E5_u = UnitGroupCount(auto4D4BD4E5_g, c_unitCountAll);
        for (;; auto4D4BD4E5_u -= 1) {
            auto4D4BD4E5_var = UnitGroupUnitFromEnd(auto4D4BD4E5_g, auto4D4BD4E5_u);
            if (auto4D4BD4E5_var == null) { break; }
            if ((((OrderGetAbilityCommand(UnitOrder(auto4D4BD4E5_var, 0)) == AbilityCommand("ProbeHarvest", 0)) && (UnitGetType(OrderGetTargetUnit(UnitOrder(auto4D4BD4E5_var, 0))) == "Assimilator")) || ((OrderGetAbilityCommand(UnitOrder(auto4D4BD4E5_var, 0)) == AbilityCommand("ProbeHarvest", 1)) && (UnitHasBehavior2(auto4D4BD4E5_var, "CarryHarvestableVespeneGeyserGasProtoss") == true)))) {
                lv_probesOnGas += 1;
            }

        }
        if ((lv_probesOnGas >= 2)) {
            break;
        }

    }
    if ((lv_probesOnGas < 2)) {
        TriggerExecute(gt_TTransferProbes, true, false);
        while (!((gv_tTransferProbesComplete == true))) {
            Wait(1.0, c_timeAI);
        }
    }
    else {
        gv_tTransferProbesComplete = true;
    }
    auto4AFF17A9_at = 0;
    while (!((UnitGroupCount(UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 8)) && auto4AFF17A9_at <= 10.0) {
        Wait(1.0, c_timeAI);
        auto4AFF17A9_at = auto4AFF17A9_at + 1.0;
    }
    if ((UnitGroupCount(UnitGroup("Probe", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) <= 8)) {
        TriggerExecute(gt_TTrainMoreProbes, true, false);
        while (!((gv_tTrainMoreProbesComplete == true))) {
            Wait(1.0, c_timeAI);
        }
    }

    Wait(5.0, c_timeAI);
    TriggerExecute(gt_TutorialCompleteQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialController_Init () {
    gt_TutorialController = TriggerCreate("gt_TutorialController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TutorialCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_missionStage != 2)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00191", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    gv_tTutorialComplete = true;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialCompleteQ_Init () {
    gt_TutorialCompleteQ = TriggerCreate("gt_TutorialCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_TutorialCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_TutorialController);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    ActorSendTo(libNtve_gf_MainActorofUnit(gv_tBuildPylonPylon), "PowerVisual", "Destroy");
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ProtossBuild", 1), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("GatewayTrain", 0), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("GatewayTrain", 1), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("ProtossBuild", 2), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("NexusTrain", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialCleanup_Init () {
    gt_TutorialCleanup = TriggerCreate("gt_TutorialCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Warping In
//--------------------------------------------------------------------------------------------------
bool gt_StructureWarpingIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Pylon") || (UnitGetType(EventUnitProgressUnit()) == "Gateway") || (UnitGetType(EventUnitProgressUnit()) == "Probe") || (UnitGetType(EventUnitProgressUnit()) == "Assimilator") || (UnitGetType(EventUnitProgressUnit()) == "CyberneticsCore")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateInfoText(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StructureWarpingIn_Init () {
    gt_StructureWarpingIn = TriggerCreate("gt_StructureWarpingIn_Func");
    TriggerAddEventUnitConstructProgress(gt_StructureWarpingIn, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(gt_StructureWarpingIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Protoss 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_DarkProtoss1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localZealots;

    // Automatic Variable Declarations
    unitgroup auto8D0C010D_g;
    int auto8D0C010D_u;
    unit auto8D0C010D_var;

    // Variable Initialization
    lv_localZealots = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_localZealots = UnitGroup("Zealot", gv_pLAYER_03_DARK_PROTOSS, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8D0C010D_g = lv_localZealots;
    auto8D0C010D_u = UnitGroupCount(auto8D0C010D_g, c_unitCountAll);
    for (;; auto8D0C010D_u -= 1) {
        auto8D0C010D_var = UnitGroupUnitFromEnd(auto8D0C010D_g, auto8D0C010D_u);
        if (auto8D0C010D_var == null) { break; }
        UnitIssueOrder(auto8D0C010D_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2356)), c_orderQueueReplace);
    }
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitGroupCount(lv_localZealots, c_unitCountAlive) > 0)) {
        libVCMI_gf_SendTransmissionCampaign(UnitGroupUnit(lv_localZealots, 1), "pMission_Aiur02|Line00193", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkProtoss1Q_Init () {
    gt_DarkProtoss1Q = TriggerCreate("gt_DarkProtoss1Q_Func");
    TriggerAddEventUnitRegion(gt_DarkProtoss1Q, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Protoss 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_DarkProtoss2Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localZealots;

    // Automatic Variable Declarations
    unitgroup autoC5A6D33D_g;
    int autoC5A6D33D_u;
    unit autoC5A6D33D_var;

    // Variable Initialization
    lv_localZealots = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_localZealots = UnitGroup(null, gv_pLAYER_03_DARK_PROTOSS, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    SoundPlayAtPointForPlayer(SoundLink("Zealot_Death", 2), c_maxPlayers, PlayerGroupAll(), PointFromId(2357), 0.0, 100.0, 0.0);
    autoC5A6D33D_g = lv_localZealots;
    autoC5A6D33D_u = UnitGroupCount(autoC5A6D33D_g, c_unitCountAll);
    for (;; autoC5A6D33D_u -= 1) {
        autoC5A6D33D_var = UnitGroupUnitFromEnd(autoC5A6D33D_g, autoC5A6D33D_u);
        if (autoC5A6D33D_var == null) { break; }
        UnitIssueOrder(autoC5A6D33D_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2357)), c_orderQueueReplace);
    }
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00199", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkProtoss2Q_Init () {
    gt_DarkProtoss2Q = TriggerCreate("gt_DarkProtoss2Q_Func");
    TriggerAddEventUnitRegion(gt_DarkProtoss2Q, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Group - Burrowed Zerg
//--------------------------------------------------------------------------------------------------
bool gt_GroupBurrowedZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    unitgroup auto43F666D0_g;
    int auto43F666D0_u;
    unit auto43F666D0_var;
    unitgroup auto3D399014_g;
    int auto3D399014_u;
    unit auto3D399014_var;
    unitgroup autoFC80ACAE_g;
    int autoFC80ACAE_u;
    unit autoFC80ACAE_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNtve_gf_UnitGroupIsDead(gv_burrowedZerg) == true) || (libVCMI_gf_GameIsOver() == true) || (gv_missionStage != 2))) {
            return true;
        }

        lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(3)), 0.0, 100.0, 0.0);
            auto43F666D0_g = gv_burrowedZerg;
            auto43F666D0_u = UnitGroupCount(auto43F666D0_g, c_unitCountAll);
            for (;; auto43F666D0_u -= 1) {
                auto43F666D0_var = UnitGroupUnitFromEnd(auto43F666D0_g, auto43F666D0_u);
                if (auto43F666D0_var == null) { break; }
                if ((UnitGetType(auto43F666D0_var) == "HydraliskBurrowed")) {
                    UnitIssueOrder(auto43F666D0_var, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(auto43F666D0_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                }
            }
            break;
        }

    }
    Wait(1.0, c_timeAI);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libNtve_gf_UnitGroupIsDead(gv_burrowedZerg) == true) || (libVCMI_gf_GameIsOver() == true) || (gv_missionStage != 2))) {
            return true;
        }

        lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0)) {
            auto3D399014_g = gv_burrowedZerg;
            auto3D399014_u = UnitGroupCount(auto3D399014_g, c_unitCountAll);
            for (;; auto3D399014_u -= 1) {
                auto3D399014_var = UnitGroupUnitFromEnd(auto3D399014_g, auto3D399014_u);
                if (auto3D399014_var == null) { break; }
                UnitIssueOrder(auto3D399014_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(auto3D399014_var)))), c_orderQueueReplace);
            }
        }
        else {
            autoFC80ACAE_g = gv_burrowedZerg;
            autoFC80ACAE_u = UnitGroupCount(autoFC80ACAE_g, c_unitCountAll);
            for (;; autoFC80ACAE_u -= 1) {
                autoFC80ACAE_var = UnitGroupUnitFromEnd(autoFC80ACAE_g, autoFC80ACAE_u);
                if (autoFC80ACAE_var == null) { break; }
                if ((RandomInt(1, 8) == 1)) {
                    UnitIssueOrder(autoFC80ACAE_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(3))), c_orderQueueReplace);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroupBurrowedZerg_Init () {
    gt_GroupBurrowedZerg = TriggerCreate("gt_GroupBurrowedZerg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Group - Dark Protoss
//--------------------------------------------------------------------------------------------------
bool gt_GroupDarkProtoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playerUnits;
    bool lv_movementActivated;

    // Automatic Variable Declarations
    unitgroup auto627B860E_g;
    int auto627B860E_u;
    unit auto627B860E_var;
    unitgroup autoCD9C9387_g;
    int autoCD9C9387_u;
    unit autoCD9C9387_var;
    unitgroup auto2D85548B_g;
    int auto2D85548B_u;
    unit auto2D85548B_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if (((libNtve_gf_UnitGroupIsDead(gv_darkProtoss) == true) || (libVCMI_gf_GameIsOver() == true) || (gv_missionStage != 2))) {
            return true;
        }

        lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if (((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilterRegion(gv_darkProtoss, RegionFromId(19), 0), c_unitCountAlive) > 0))) {
            TriggerExecute(gt_GroupDarkProtossQ, true, false);
            lv_movementActivated = true;
            if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0)) {
                auto627B860E_g = gv_darkProtoss;
                auto627B860E_u = UnitGroupCount(auto627B860E_g, c_unitCountAll);
                for (;; auto627B860E_u -= 1) {
                    auto627B860E_var = UnitGroupUnitFromEnd(auto627B860E_g, auto627B860E_u);
                    if (auto627B860E_var == null) { break; }
                    UnitIssueOrder(auto627B860E_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(auto627B860E_var)))), c_orderQueueReplace);
                }
            }
            else {
                autoCD9C9387_g = gv_darkProtoss;
                autoCD9C9387_u = UnitGroupCount(autoCD9C9387_g, c_unitCountAll);
                for (;; autoCD9C9387_u -= 1) {
                    autoCD9C9387_var = UnitGroupUnitFromEnd(autoCD9C9387_g, autoCD9C9387_u);
                    if (autoCD9C9387_var == null) { break; }
                    if ((RandomInt(1, 8) == 1)) {
                        UnitIssueOrder(autoCD9C9387_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(10))), c_orderQueueReplace);
                    }

                }
            }
        }
        else {
            auto2D85548B_g = gv_darkProtoss;
            auto2D85548B_u = UnitGroupCount(auto2D85548B_g, c_unitCountAll);
            for (;; auto2D85548B_u -= 1) {
                auto2D85548B_var = UnitGroupUnitFromEnd(auto2D85548B_g, auto2D85548B_u);
                if (auto2D85548B_var == null) { break; }
                if ((RandomInt(1, 8) == 1) && (lv_movementActivated == true)) {
                    UnitIssueOrder(auto2D85548B_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(10))), c_orderQueueReplace);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroupDarkProtoss_Init () {
    gt_GroupDarkProtoss = TriggerCreate("gt_GroupDarkProtoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Group - Dark Protoss Q
//--------------------------------------------------------------------------------------------------
bool gt_GroupDarkProtossQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    lv_speaker = UnitGroupClosestToPoint(UnitGroupFilter("Zealot", gv_pLAYER_03_DARK_PROTOSS, gv_darkProtoss, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PlayerStartLocation(gv_pLAYER_01_USER));
    if ((UnitIsAlive(lv_speaker) == false)) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Aiur02|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Aiur02|Line00126", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroupDarkProtossQ_Init () {
    gt_GroupDarkProtossQ = TriggerCreate("gt_GroupDarkProtossQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Zerg Bullies - Hatchery
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateZergBulliesHatchery_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF437BFA4_g;
    int autoF437BFA4_u;
    unit autoF437BFA4_var;
    unitgroup auto5B4395E9_g;
    int auto5B4395E9_u;
    unit auto5B4395E9_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/F599E49B"));
    AIToggleBulliesInRegion(gv_pLAYER_02_ZERG, RegionFromId(6), false);
    autoF437BFA4_g = UnitGroup("Larva", gv_pLAYER_02_ZERG, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF437BFA4_u = UnitGroupCount(autoF437BFA4_g, c_unitCountAll);
    for (;; autoF437BFA4_u -= 1) {
        autoF437BFA4_var = UnitGroupUnitFromEnd(autoF437BFA4_g, autoF437BFA4_u);
        if (autoF437BFA4_var == null) { break; }
        UnitKill(autoF437BFA4_var);
    }
    auto5B4395E9_g = UnitGroup("Egg", gv_pLAYER_02_ZERG, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5B4395E9_u = UnitGroupCount(auto5B4395E9_g, c_unitCountAll);
    for (;; auto5B4395E9_u -= 1) {
        auto5B4395E9_var = UnitGroupUnitFromEnd(auto5B4395E9_g, auto5B4395E9_u);
        if (auto5B4395E9_var == null) { break; }
        UnitKill(auto5B4395E9_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateZergBulliesHatchery_Init () {
    gt_DeactivateZergBulliesHatchery = TriggerCreate("gt_DeactivateZergBulliesHatchery_Func");
    TriggerAddEventUnitDied(gt_DeactivateZergBulliesHatchery, UnitRefFromUnit(UnitFromId(465)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Zerg Bullies - Lair
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateZergBulliesLair_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto528E6E7F_g;
    int auto528E6E7F_u;
    unit auto528E6E7F_var;
    unitgroup auto0AA6EFDC_g;
    int auto0AA6EFDC_u;
    unit auto0AA6EFDC_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(gv_pLAYER_02_ZERG, RegionFromId(7), false);
    auto528E6E7F_g = UnitGroup("Larva", gv_pLAYER_02_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto528E6E7F_u = UnitGroupCount(auto528E6E7F_g, c_unitCountAll);
    for (;; auto528E6E7F_u -= 1) {
        auto528E6E7F_var = UnitGroupUnitFromEnd(auto528E6E7F_g, auto528E6E7F_u);
        if (auto528E6E7F_var == null) { break; }
        UnitKill(auto528E6E7F_var);
    }
    auto0AA6EFDC_g = UnitGroup("Egg", gv_pLAYER_02_ZERG, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0AA6EFDC_u = UnitGroupCount(auto0AA6EFDC_g, c_unitCountAll);
    for (;; auto0AA6EFDC_u -= 1) {
        auto0AA6EFDC_var = UnitGroupUnitFromEnd(auto0AA6EFDC_g, auto0AA6EFDC_u);
        if (auto0AA6EFDC_var == null) { break; }
        UnitKill(auto0AA6EFDC_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateZergBulliesLair_Init () {
    gt_DeactivateZergBulliesLair = TriggerCreate("gt_DeactivateZergBulliesLair_Func");
    TriggerAddEventUnitDied(gt_DeactivateZergBulliesLair, UnitRefFromUnit(UnitFromId(881)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Find Nerazim Pylon 01
//--------------------------------------------------------------------------------------------------
bool gt_FindNerazimPylon01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_NerazimPylonFoundQ, true, false);
    gv_objective_NerazimPylonsFound += 1;
    TriggerExecute(gt_ObjectiveFindNerazimPylonsUpdate, true, false);
    if ((gv_objective_NerazimPylonsFound == 3) && (GameGetMissionTime() <= 600.0) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        gv_anniversaryAchievementTermNerazimPylonsFound = (gv_anniversaryAchievementTermNerazimPylonsFound + 1);
        AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_PAiur02", gv_anniversaryAchievementTermNerazimPylonsFound);
        TextExpressionSetToken("Param/Expression/916E8589", "A", IntToText(gv_anniversaryAchievementTermNerazimPylonsFound));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/916E8589"), false);
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PAiur02", gv_pLAYER_01_USER);
    }
    else {
        gv_anniversaryAchievementTermNerazimPylonsFound = (gv_anniversaryAchievementTermNerazimPylonsFound + 1);
        AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_PAiur02", gv_anniversaryAchievementTermNerazimPylonsFound);
        TextExpressionSetToken("Param/Expression/CC5F28EF", "A", IntToText(gv_anniversaryAchievementTermNerazimPylonsFound));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/CC5F28EF"), false);
    }
    if ((gv_objective_NerazimPylonsFound == 3)) {
        TriggerExecute(gt_ObjectiveFindNerazimPylonsComplete, true, false);
    }

    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperAdd, 8);
    UnitIssueOrder(UnitFromId(1360), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1351)), c_orderQueueReplace);
    Wait(0.5, c_timeAI);
    if (((gv_missionStage != 2) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (libVCMI_gf_GameIsOver() == true))) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1360), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1352)), c_orderQueueReplace);
    Wait(0.5, c_timeAI);
    if (((gv_missionStage != 2) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (libVCMI_gf_GameIsOver() == true))) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1360), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1354)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FindNerazimPylon01_Init () {
    gt_FindNerazimPylon01 = TriggerCreate("gt_FindNerazimPylon01_Func");
    TriggerAddEventUnitRegion(gt_FindNerazimPylon01, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Find Nerazim Pylon 02
//--------------------------------------------------------------------------------------------------
bool gt_FindNerazimPylon02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_NerazimPylonFoundQ, true, false);
    gv_objective_NerazimPylonsFound += 1;
    TriggerExecute(gt_ObjectiveFindNerazimPylonsUpdate, true, false);
    if ((gv_objective_NerazimPylonsFound == 3) && (GameGetMissionTime() <= 600.0) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        gv_anniversaryAchievementTermNerazimPylonsFound = (gv_anniversaryAchievementTermNerazimPylonsFound + 1);
        AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_PAiur02", gv_anniversaryAchievementTermNerazimPylonsFound);
        TextExpressionSetToken("Param/Expression/ED110766", "A", IntToText(gv_anniversaryAchievementTermNerazimPylonsFound));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/ED110766"), false);
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PAiur02", gv_pLAYER_01_USER);
    }
    else {
        gv_anniversaryAchievementTermNerazimPylonsFound = (gv_anniversaryAchievementTermNerazimPylonsFound + 1);
        AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_PAiur02", gv_anniversaryAchievementTermNerazimPylonsFound);
        TextExpressionSetToken("Param/Expression/0267C8B8", "A", IntToText(gv_anniversaryAchievementTermNerazimPylonsFound));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/0267C8B8"), false);
    }
    if ((gv_objective_NerazimPylonsFound == 3)) {
        TriggerExecute(gt_ObjectiveFindNerazimPylonsComplete, true, false);
    }

    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperAdd, 8);
    UnitIssueOrder(UnitFromId(1360), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1355)), c_orderQueueReplace);
    Wait(0.5, c_timeAI);
    if (((gv_missionStage != 2) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (libVCMI_gf_GameIsOver() == true))) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1360), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1357)), c_orderQueueReplace);
    Wait(0.5, c_timeAI);
    if (((gv_missionStage != 2) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (libVCMI_gf_GameIsOver() == true))) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1360), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(1358)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FindNerazimPylon02_Init () {
    gt_FindNerazimPylon02 = TriggerCreate("gt_FindNerazimPylon02_Func");
    TriggerAddEventUnitRange(gt_FindNerazimPylon02, null, UnitFromId(1290), 6.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Find Nerazim Pylon 03
//--------------------------------------------------------------------------------------------------
bool gt_FindNerazimPylon03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_NerazimPylonFoundQ, true, false);
    gv_objective_NerazimPylonsFound += 1;
    TriggerExecute(gt_ObjectiveFindNerazimPylonsUpdate, true, false);
    if ((gv_objective_NerazimPylonsFound == 3) && (GameGetMissionTime() <= 600.0) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        gv_anniversaryAchievementTermNerazimPylonsFound = (gv_anniversaryAchievementTermNerazimPylonsFound + 1);
        AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_PAiur02", gv_anniversaryAchievementTermNerazimPylonsFound);
        TextExpressionSetToken("Param/Expression/07E13346", "A", IntToText(gv_anniversaryAchievementTermNerazimPylonsFound));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/07E13346"), false);
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PAiur02", gv_pLAYER_01_USER);
    }
    else {
        gv_anniversaryAchievementTermNerazimPylonsFound = (gv_anniversaryAchievementTermNerazimPylonsFound + 1);
        AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_PAiur02", gv_anniversaryAchievementTermNerazimPylonsFound);
        TextExpressionSetToken("Param/Expression/68C5D54E", "A", IntToText(gv_anniversaryAchievementTermNerazimPylonsFound));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/68C5D54E"), false);
    }
    if ((gv_objective_NerazimPylonsFound == 3)) {
        TriggerExecute(gt_ObjectiveFindNerazimPylonsComplete, true, false);
    }

    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesMade, c_playerPropOperAdd, 8);
    UnitIssueOrder(UnitFromId(1360), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(532)), c_orderQueueReplace);
    Wait(0.5, c_timeAI);
    UnitIssueOrder(UnitFromId(1360), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(498)), c_orderQueueReplace);
    if (((gv_missionStage != 2) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (libVCMI_gf_GameIsOver() == true))) {
        return true;
    }

    Wait(0.5, c_timeAI);
    if (((gv_missionStage != 2) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (libVCMI_gf_GameIsOver() == true))) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1360), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromId(533)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FindNerazimPylon03_Init () {
    gt_FindNerazimPylon03 = TriggerCreate("gt_FindNerazimPylon03_Func");
    TriggerAddEventUnitRange(gt_FindNerazimPylon03, null, UnitFromId(531), 6.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Pylon Found Q
//--------------------------------------------------------------------------------------------------
bool gt_NerazimPylonFoundQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pylonsFoundLocal;

    // Automatic Variable Declarations
    int auto3C674A73_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pylonsFoundLocal = gv_objective_NerazimPylonsFound;
    TriggerQueueEnter();
    if (((lv_pylonsFoundLocal != gv_objective_NerazimPylonsFound) || (gv_missionStage != 2))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto3C674A73_val = lv_pylonsFoundLocal;
    if (auto3C674A73_val == 0) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Aiur02|Line00174", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00176", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3C674A73_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Aiur02|Line00177", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00179", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3C674A73_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Aiur02|Line00178", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00180", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NerazimPylonFoundQ_Init () {
    gt_NerazimPylonFoundQ = TriggerCreate("gt_NerazimPylonFoundQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp In Unit Behavior (P06)
//--------------------------------------------------------------------------------------------------
bool gt_WarpInUnitBehaviorP06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_06_SHAKURAS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_RescueUnit(EventUnitProgressUnit(), gv_pLAYER_01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpInUnitBehaviorP06_Init () {
    gt_WarpInUnitBehaviorP06 = TriggerCreate("gt_WarpInUnitBehaviorP06_Func");
    TriggerAddEventUnitConstructProgress(gt_WarpInUnitBehaviorP06, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Pickup Encountered
//--------------------------------------------------------------------------------------------------
bool gt_FirstPickupEncountered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_showReticles;

    // Automatic Variable Declarations
    unitgroup auto0840CB60_g;
    int auto0840CB60_u;
    unit auto0840CB60_var;
    unitgroup auto49C7F62D_g;
    int auto49C7F62D_u;
    unit auto49C7F62D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0840CB60_g = gv_resourcePickups;
    auto0840CB60_u = UnitGroupCount(auto0840CB60_g, c_unitCountAll);
    for (;; auto0840CB60_u -= 1) {
        auto0840CB60_var = UnitGroupUnitFromEnd(auto0840CB60_g, auto0840CB60_u);
        if (auto0840CB60_var == null) { break; }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto0840CB60_var), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
            lv_showReticles = true;
            break;
        }

    }
    if ((lv_showReticles == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        auto49C7F62D_g = gv_resourcePickups;
        auto49C7F62D_u = UnitGroupCount(auto49C7F62D_g, c_unitCountAll);
        for (;; auto49C7F62D_u -= 1) {
            auto49C7F62D_var = UnitGroupUnitFromEnd(auto49C7F62D_g, auto49C7F62D_u);
            if (auto49C7F62D_var == null) { break; }
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossBonusObjective, libVCMI_ge_CampaginReticleSize_Small, null, auto49C7F62D_var, "Ref_Overhead");
            libHots_gf_StoreActorForUnit(auto49C7F62D_var, 1, libNtve_gf_ActorLastCreated());
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstPickupEncountered_Init () {
    gt_FirstPickupEncountered = TriggerCreate("gt_FirstPickupEncountered_Func");
    TriggerEnable(gt_FirstPickupEncountered, false);
    TriggerAddEventTimePeriodic(gt_FirstPickupEncountered, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Pickup Collected
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePickupCollected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDB88303F_g;
    int autoDB88303F_u;
    unit autoDB88303F_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_resourcePickupsCollected += 1;
    if ((gv_resourcePickupsCollected == gv_resourcePickupsTotal)) {
        TriggerExecute(gt_AchievementResourcePickupsNormal, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    if ((gv_resourcePickupsCollected == 1)) {
        TriggerEnable(gt_FirstPickupEncountered, false);
        autoDB88303F_g = gv_resourcePickups;
        autoDB88303F_u = UnitGroupCount(autoDB88303F_g, c_unitCountAll);
        for (;; autoDB88303F_u -= 1) {
            autoDB88303F_var = UnitGroupUnitFromEnd(autoDB88303F_g, autoDB88303F_u);
            if (autoDB88303F_var == null) { break; }
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoDB88303F_var, 1));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePickupCollected_Init () {
    gt_ResourcePickupCollected = TriggerCreate("gt_ResourcePickupCollected_Func");
    TriggerEnable(gt_ResourcePickupCollected, false);
    TriggerAddEventUnitAbility(gt_ResourcePickupCollected, null, AbilityCommand("PickupMinerals100", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ResourcePickupCollected, null, AbilityCommand("PickupGas100", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Turn Off Move Out Reminder
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersTurnOffMoveOutReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RemindPlayerToMoveOutQ, false);
    TimerPause(gv_moveOutReminderTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersTurnOffMoveOutReminder_Init () {
    gt_UnitEntersTurnOffMoveOutReminder = TriggerCreate("gt_UnitEntersTurnOffMoveOutReminder_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersTurnOffMoveOutReminder, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remind Player To Move Out Q
//--------------------------------------------------------------------------------------------------
bool gt_RemindPlayerToMoveOutQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00167", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemindPlayerToMoveOutQ_Init () {
    gt_RemindPlayerToMoveOutQ = TriggerCreate("gt_RemindPlayerToMoveOutQ_Func");
    TriggerAddEventTimer(gt_RemindPlayerToMoveOutQ, gv_moveOutReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Section Complete
//--------------------------------------------------------------------------------------------------
bool gt_MainSectionComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeAI);
        if (((libVCMI_gf_GameIsOver() == true) || (gv_missionStage != 2))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_darkProtoss) == true)) {
            TriggerExecute(gt_MainSectionCompleteQ, true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainSectionComplete_Init () {
    gt_MainSectionComplete = TriggerCreate("gt_MainSectionComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Section Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_MainSectionCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_missionStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachTemplarBaseComplete, true, true);
    TriggerExecute(gt_MidUpperBaseQ, true, true);
    TriggerExecute(gt_StartGameStage3Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainSectionCompleteQ_Init () {
    gt_MainSectionCompleteQ = TriggerCreate("gt_MainSectionCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Converted by Amon 01
//--------------------------------------------------------------------------------------------------
bool gt_ProtossConvertedbyAmon01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localGroup;

    // Automatic Variable Declarations
    unitgroup autoD3DC834B_g;
    int autoD3DC834B_u;
    unit autoD3DC834B_var;
    unitgroup auto254128E8_g;
    int auto254128E8_u;
    unit auto254128E8_var;
    unitgroup auto9FD0725E_g;
    int auto9FD0725E_u;
    unit auto9FD0725E_var;
    unitgroup auto9ADD448B_g;
    int auto9ADD448B_u;
    unit auto9ADD448B_var;

    // Variable Initialization
    lv_localGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD3DC834B_g = UnitGroup(null, gv_pLAYER_04_TEMPLAR, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD3DC834B_u = UnitGroupCount(autoD3DC834B_g, c_unitCountAll);
    for (;; autoD3DC834B_u -= 1) {
        autoD3DC834B_var = UnitGroupUnitFromEnd(autoD3DC834B_g, autoD3DC834B_u);
        if (autoD3DC834B_var == null) { break; }
        gf_ConvertUnittoAmon(autoD3DC834B_var);
        UnitGroupAdd(lv_localGroup, autoD3DC834B_var);
        libNtve_gf_PauseUnit(autoD3DC834B_var, false);
    }
    auto254128E8_g = UnitGroup(null, gv_pLAYER_04_TEMPLAR, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto254128E8_u = UnitGroupCount(auto254128E8_g, c_unitCountAll);
    for (;; auto254128E8_u -= 1) {
        auto254128E8_var = UnitGroupUnitFromEnd(auto254128E8_g, auto254128E8_u);
        if (auto254128E8_var == null) { break; }
        UnitGroupAdd(lv_localGroup, auto254128E8_var);
        libNtve_gf_PauseUnit(auto254128E8_var, false);
    }
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
        Wait(0.5, c_timeAI);
    }
    auto9FD0725E_g = lv_localGroup;
    auto9FD0725E_u = UnitGroupCount(auto9FD0725E_g, c_unitCountAll);
    for (;; auto9FD0725E_u -= 1) {
        auto9FD0725E_var = UnitGroupUnitFromEnd(auto9FD0725E_g, auto9FD0725E_u);
        if (auto9FD0725E_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto9FD0725E_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    Wait(2.5, c_timeAI);
    TriggerExecute(gt_ProtossConverted01Q, true, false);
    auto9ADD448B_g = lv_localGroup;
    auto9ADD448B_u = UnitGroupCount(auto9ADD448B_g, c_unitCountAll);
    for (;; auto9ADD448B_u -= 1) {
        auto9ADD448B_var = UnitGroupUnitFromEnd(auto9ADD448B_g, auto9ADD448B_u);
        if (auto9ADD448B_var == null) { break; }
        if ((UnitGetOwner(auto9ADD448B_var) == gv_pLAYER_04_TEMPLAR)) {
            gf_ConvertUnittoAmon(auto9ADD448B_var);
            SoundPlayAtPointForPlayer(SoundLink("PAiur02_AmonConversion", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(auto9ADD448B_var), 0.0, 100.0, 0.0);
            Wait(2.5, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossConvertedbyAmon01_Init () {
    gt_ProtossConvertedbyAmon01 = TriggerCreate("gt_ProtossConvertedbyAmon01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Converted 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossConverted01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur02|Line00032", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossConverted01Q_Init () {
    gt_ProtossConverted01Q = TriggerCreate("gt_ProtossConverted01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Converted by Amon 02
//--------------------------------------------------------------------------------------------------
bool gt_ProtossConvertedbyAmon02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localGroup;

    // Automatic Variable Declarations
    unitgroup auto3C2580D9_g;
    int auto3C2580D9_u;
    unit auto3C2580D9_var;
    unitgroup auto8A3AC094_g;
    int auto8A3AC094_u;
    unit auto8A3AC094_var;
    unitgroup auto708747C7_g;
    int auto708747C7_u;
    unit auto708747C7_var;
    unitgroup autoEF5DF735_g;
    int autoEF5DF735_u;
    unit autoEF5DF735_var;

    // Variable Initialization
    lv_localGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3C2580D9_g = UnitGroup(null, gv_pLAYER_04_TEMPLAR, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3C2580D9_u = UnitGroupCount(auto3C2580D9_g, c_unitCountAll);
    for (;; auto3C2580D9_u -= 1) {
        auto3C2580D9_var = UnitGroupUnitFromEnd(auto3C2580D9_g, auto3C2580D9_u);
        if (auto3C2580D9_var == null) { break; }
        gf_ConvertUnittoAmon(auto3C2580D9_var);
        UnitGroupAdd(lv_localGroup, auto3C2580D9_var);
        libNtve_gf_PauseUnit(auto3C2580D9_var, false);
    }
    auto8A3AC094_g = UnitGroup(null, gv_pLAYER_04_TEMPLAR, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8A3AC094_u = UnitGroupCount(auto8A3AC094_g, c_unitCountAll);
    for (;; auto8A3AC094_u -= 1) {
        auto8A3AC094_var = UnitGroupUnitFromEnd(auto8A3AC094_g, auto8A3AC094_u);
        if (auto8A3AC094_var == null) { break; }
        UnitGroupAdd(lv_localGroup, auto8A3AC094_var);
        libNtve_gf_PauseUnit(auto8A3AC094_var, false);
    }
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
        Wait(0.5, c_timeAI);
    }
    auto708747C7_g = lv_localGroup;
    auto708747C7_u = UnitGroupCount(auto708747C7_g, c_unitCountAll);
    for (;; auto708747C7_u -= 1) {
        auto708747C7_var = UnitGroupUnitFromEnd(auto708747C7_g, auto708747C7_u);
        if (auto708747C7_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto708747C7_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    Wait(2.5, c_timeAI);
    autoEF5DF735_g = lv_localGroup;
    autoEF5DF735_u = UnitGroupCount(autoEF5DF735_g, c_unitCountAll);
    for (;; autoEF5DF735_u -= 1) {
        autoEF5DF735_var = UnitGroupUnitFromEnd(autoEF5DF735_g, autoEF5DF735_u);
        if (autoEF5DF735_var == null) { break; }
        if ((UnitGetOwner(autoEF5DF735_var) == gv_pLAYER_04_TEMPLAR)) {
            gf_ConvertUnittoAmon(autoEF5DF735_var);
            SoundPlayAtPointForPlayer(SoundLink("PAiur02_AmonConversion", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(autoEF5DF735_var), 0.0, 100.0, 0.0);
            Wait(2.5, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossConvertedbyAmon02_Init () {
    gt_ProtossConvertedbyAmon02 = TriggerCreate("gt_ProtossConvertedbyAmon02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Converted by Amon 03
//--------------------------------------------------------------------------------------------------
bool gt_ProtossConvertedbyAmon03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localGroup;

    // Automatic Variable Declarations
    unitgroup auto21A51F58_g;
    int auto21A51F58_u;
    unit auto21A51F58_var;
    unitgroup auto9C88D1E6_g;
    int auto9C88D1E6_u;
    unit auto9C88D1E6_var;
    unitgroup autoCC5D2E56_g;
    int autoCC5D2E56_u;
    unit autoCC5D2E56_var;
    unitgroup auto8B188EAF_g;
    int auto8B188EAF_u;
    unit auto8B188EAF_var;
    unitgroup autoEF7672E2_g;
    int autoEF7672E2_u;
    unit autoEF7672E2_var;

    // Variable Initialization
    lv_localGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto21A51F58_g = UnitGroup(null, gv_pLAYER_04_TEMPLAR, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto21A51F58_u = UnitGroupCount(auto21A51F58_g, c_unitCountAll);
    for (;; auto21A51F58_u -= 1) {
        auto21A51F58_var = UnitGroupUnitFromEnd(auto21A51F58_g, auto21A51F58_u);
        if (auto21A51F58_var == null) { break; }
        gf_ConvertUnittoAmon(auto21A51F58_var);
        UnitGroupAdd(lv_localGroup, auto21A51F58_var);
        libNtve_gf_PauseUnit(auto21A51F58_var, false);
    }
    auto9C88D1E6_g = UnitGroup(null, gv_pLAYER_04_TEMPLAR, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9C88D1E6_u = UnitGroupCount(auto9C88D1E6_g, c_unitCountAll);
    for (;; auto9C88D1E6_u -= 1) {
        auto9C88D1E6_var = UnitGroupUnitFromEnd(auto9C88D1E6_g, auto9C88D1E6_u);
        if (auto9C88D1E6_var == null) { break; }
        UnitGroupAdd(lv_localGroup, auto9C88D1E6_var);
        libNtve_gf_PauseUnit(auto9C88D1E6_var, false);
    }
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
        Wait(0.5, c_timeAI);
    }
    autoCC5D2E56_g = lv_localGroup;
    autoCC5D2E56_u = UnitGroupCount(autoCC5D2E56_g, c_unitCountAll);
    for (;; autoCC5D2E56_u -= 1) {
        autoCC5D2E56_var = UnitGroupUnitFromEnd(autoCC5D2E56_g, autoCC5D2E56_u);
        if (autoCC5D2E56_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoCC5D2E56_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    Wait(2.5, c_timeAI);
    TriggerExecute(gt_ProtossConverted02Q, true, false);
    auto8B188EAF_g = lv_localGroup;
    auto8B188EAF_u = UnitGroupCount(auto8B188EAF_g, c_unitCountAll);
    for (;; auto8B188EAF_u -= 1) {
        auto8B188EAF_var = UnitGroupUnitFromEnd(auto8B188EAF_g, auto8B188EAF_u);
        if (auto8B188EAF_var == null) { break; }
        if ((UnitGetOwner(auto8B188EAF_var) == gv_pLAYER_04_TEMPLAR)) {
            gf_ConvertUnittoAmon(auto8B188EAF_var);
            SoundPlayAtPointForPlayer(SoundLink("PAiur02_AmonConversion", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(auto8B188EAF_var), 0.0, 100.0, 0.0);
            Wait(2.5, c_timeAI);
        }

    }
    while (!((UnitGroupCount(UnitGroup("Stalker", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeReal);
    autoEF7672E2_g = lv_localGroup;
    autoEF7672E2_u = UnitGroupCount(autoEF7672E2_g, c_unitCountAll);
    for (;; autoEF7672E2_u -= 1) {
        autoEF7672E2_var = UnitGroupUnitFromEnd(autoEF7672E2_g, autoEF7672E2_u);
        if (autoEF7672E2_var == null) { break; }
        UnitIssueOrder(autoEF7672E2_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(50))), c_orderQueueReplace);
        UnitIssueOrder(autoEF7672E2_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(28)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossConvertedbyAmon03_Init () {
    gt_ProtossConvertedbyAmon03 = TriggerCreate("gt_ProtossConvertedbyAmon03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Converted 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossConverted02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur02|Line00075", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossConverted02Q_Init () {
    gt_ProtossConverted02Q = TriggerCreate("gt_ProtossConverted02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: All Alone Q
//--------------------------------------------------------------------------------------------------
bool gt_AllAloneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGroupCount(UnitGroup("Stalker", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if (((gv_missionStage != 3) || (ObjectiveGetState(gv_objective_ReachArtanis) == c_objectiveStateCompleted))) {
        return true;
    }

    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur02|Line00080", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllAloneQ_Init () {
    gt_AllAloneQ = TriggerCreate("gt_AllAloneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Found
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisFound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(18)) == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if (((gv_missionStage != 3) || (ObjectiveGetState(gv_objective_ReachArtanis) == c_objectiveStateCompleted))) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(gv_artanis, true, gv_pLAYER_01_USER);
    TriggerExecute(gt_ObjectiveReachArtanisComplete, true, false);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveComplete, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_VictoryFindArtanisCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisFound_Init () {
    gt_ArtanisFound = TriggerCreate("gt_ArtanisFound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_AIResearchHardBrutal, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstAttackQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zerglings;

    // Automatic Variable Declarations
    fixed autoB5A20BFE_at;

    // Variable Initialization
    lv_zerglings = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoB5A20BFE_at = 0;
    while (!((gv_tTutorialComplete == true)) && autoB5A20BFE_at <= 120.0) {
        Wait(1.0, c_timeGame);
        autoB5A20BFE_at = autoB5A20BFE_at + 1.0;
    }
    Wait(10.0, c_timeAI);
    libNtve_gf_UnitCreateFacingPoint(libLotv_gf_DifficultyValueInt2(6, 6, 10, 12), "ZerglingBurrowed", 0, gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(3)), PointFromId(901));
    lv_zerglings = UnitLastCreatedGroup();
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_ZERG, PointFromId(901));
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_ZERG, RegionGetCenter(RegionFromId(3)));
    AIAttackWaveAddWaypoint(gv_pLAYER_02_ZERG, PointFromId(901), false);
    AIAttackWaveUseGroup(gv_pLAYER_02_ZERG, lv_zerglings);
    AIAttackWaveSend(gv_pLAYER_02_ZERG, 0, false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAttackQ_Init () {
    gt_FirstAttackQ = TriggerCreate("gt_FirstAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto97474E2F_g;
    int auto97474E2F_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto97474E2F_g = gv_enemyPlayers;
    auto97474E2F_var = -1;
    while (true) {
        auto97474E2F_var = PlayerGroupNextPlayer(auto97474E2F_g, auto97474E2F_var);
        if (auto97474E2F_var < 0) { break; }
        PlayerModifyPropertyInt(auto97474E2F_var, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(auto97474E2F_var, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Research Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIResearchHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEACC9750_g;
    int autoEACC9750_var;
    playergroup auto1637D92C_g;
    int auto1637D92C_var;
    playergroup auto77A1177D_g;
    int auto77A1177D_var;
    playergroup auto0061A7D8_g;
    int auto0061A7D8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(360.0, c_timeAI);
    autoEACC9750_g = PlayerGroupSingle(gv_pLAYER_02_ZERG);
    autoEACC9750_var = -1;
    while (true) {
        autoEACC9750_var = PlayerGroupNextPlayer(autoEACC9750_g, autoEACC9750_var);
        if (autoEACC9750_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoEACC9750_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoEACC9750_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoEACC9750_var, "ZergMissileWeaponsLevel1", 1);
    }
    auto1637D92C_g = PlayerGroupSingle(gv_pLAYER_03_DARK_PROTOSS);
    auto1637D92C_var = -1;
    while (true) {
        auto1637D92C_var = PlayerGroupNextPlayer(auto1637D92C_g, auto1637D92C_var);
        if (auto1637D92C_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto1637D92C_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto1637D92C_var, "ProtossGroundWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    auto77A1177D_g = PlayerGroupSingle(gv_pLAYER_02_ZERG);
    auto77A1177D_var = -1;
    while (true) {
        auto77A1177D_var = PlayerGroupNextPlayer(auto77A1177D_g, auto77A1177D_var);
        if (auto77A1177D_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto77A1177D_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto77A1177D_var, "ZergFlyerArmorsLevel1", 1);
    }
    auto0061A7D8_g = PlayerGroupSingle(gv_pLAYER_03_DARK_PROTOSS);
    auto0061A7D8_var = -1;
    while (true) {
        auto0061A7D8_var = PlayerGroupNextPlayer(auto0061A7D8_g, auto0061A7D8_var);
        if (auto0061A7D8_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0061A7D8_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0061A7D8_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0061A7D8_var, "ProtossShieldsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIResearchHardBrutal_Init () {
    gt_AIResearchHardBrutal = TriggerCreate("gt_AIResearchHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Starting Forces Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatStartingForcesDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_missionStage == 1))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/0B203524"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatStartingForcesDead_Init () {
    gt_DefeatStartingForcesDead = TriggerCreate("gt_DefeatStartingForcesDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatStartingForcesDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_missionStage == 2))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/CF394E45"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Zeratul Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatZeratulDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/74095C5E"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatZeratulDies_Init () {
    gt_DefeatZeratulDies = TriggerCreate("gt_DefeatZeratulDies_Func");
    TriggerAddEventUnitDied(gt_DefeatZeratulDies, UnitRefFromVariable("gv_zeratul"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Find Artanis Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFindArtanisCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFindArtanisCompleted_Init () {
    gt_VictoryFindArtanisCompleted = TriggerCreate("gt_VictoryFindArtanisCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PAiur02_1", gv_pLAYER_01_USER);
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/A5E12F54"), IntToText(gv_troopsTrainedCount));
    TextExpressionSetToken("Param/Expression/FD7F2EC6", "A", IntToText(gv_resourcePickupsCollected));
    TextExpressionSetToken("Param/Expression/FD7F2EC6", "B", IntToText(gv_resourcePickupsTotal));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/AD4009F1"), TextExpressionAssemble("Param/Expression/FD7F2EC6"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/B09061BA"), IntToText(gv_victoryStatBlinkCount));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat: Blink Used
//--------------------------------------------------------------------------------------------------
bool gt_StatBlinkUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_victoryStatBlinkCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatBlinkUsed_Init () {
    gt_StatBlinkUsed = TriggerCreate("gt_StatBlinkUsed_Func");
    TriggerAddEventUnitAbility(gt_StatBlinkUsed, null, AbilityCommand("Blink", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_StatBlinkUsed, null, AbilityCommand("ZeratulBlink", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Units Trained (Casual)
//--------------------------------------------------------------------------------------------------
bool gt_AchievementUnitsTrainedCasual_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Zealot") || (UnitGetType(EventUnitProgressUnit()) == "Stalker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_troopsTrainedCount += 1;
    if ((gv_troopsTrainedCount >= 20)) {
        libVoiC_gf_CampaignAwardAchievement("PAiur02_2", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementUnitsTrainedCasual_Init () {
    gt_AchievementUnitsTrainedCasual = TriggerCreate("gt_AchievementUnitsTrainedCasual_Func");
    TriggerAddEventUnitTrainProgress(gt_AchievementUnitsTrainedCasual, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Resource Pickups (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AchievementResourcePickupsNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_resourcePickupsCollected == gv_resourcePickupsTotal)) {
        libVoiC_gf_CampaignAwardAchievement("PAiur02_3", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementResourcePickupsNormal_Init () {
    gt_AchievementResourcePickupsNormal = TriggerCreate("gt_AchievementResourcePickupsNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Fast Hatchery Kill
//--------------------------------------------------------------------------------------------------
bool gt_AchievementFastHatcheryKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (TimerGetRemaining(gv_masteryAchievementTimer) > 0.0)) {
        libVoiC_gf_CampaignAwardAchievement("Mastery_Aiur02", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementFastHatcheryKill_Init () {
    gt_AchievementFastHatcheryKill = TriggerCreate("gt_AchievementFastHatcheryKill_Func");
    TriggerEnable(gt_AchievementFastHatcheryKill, false);
    TriggerAddEventUnitDied(gt_AchievementFastHatcheryKill, UnitRefFromUnit(UnitFromId(465)));
    TriggerAddEventUnitDied(gt_AchievementFastHatcheryKill, UnitRefFromUnit(UnitFromId(881)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach the Nexus - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachtheNexusCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur02Primary01");
    gv_objective_ReachNexus = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objective_ReachNexus, 1);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachtheNexusCreate_Init () {
    gt_ObjectiveReachtheNexusCreate = TriggerCreate("gt_ObjectiveReachtheNexusCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach the Nexus - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachtheNexusComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachtheNexusCreate, true, false);
    ObjectiveSetState(gv_objective_ReachNexus, c_objectiveStateCompleted);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachtheNexusComplete_Init () {
    gt_ObjectiveReachtheNexusComplete = TriggerCreate("gt_ObjectiveReachtheNexusComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach Templar Base - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachTemplarBaseCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur02Primary02");
    gv_objective_ReachTemplar = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objective_ReachTemplar, 1);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachTemplarBaseCreate_Init () {
    gt_ObjectiveReachTemplarBaseCreate = TriggerCreate("gt_ObjectiveReachTemplarBaseCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach Templar Base - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachTemplarBaseComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachTemplarBaseCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur02Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachTemplarBaseComplete_Init () {
    gt_ObjectiveReachTemplarBaseComplete = TriggerCreate("gt_ObjectiveReachTemplarBaseComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach Artanis - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachArtanisCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur02Primary03");
    gv_objective_ReachArtanis = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objective_ReachArtanis, 1);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachArtanisCreate_Init () {
    gt_ObjectiveReachArtanisCreate = TriggerCreate("gt_ObjectiveReachArtanisCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach Artanis - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachArtanisComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachArtanisCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur02Primary03", libVoiC_ge_MissionObjectiveState_Completed);
    ObjectiveSetState(gv_objective_ReachArtanis, c_objectiveStateCompleted);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachArtanisComplete_Init () {
    gt_ObjectiveReachArtanisComplete = TriggerCreate("gt_ObjectiveReachArtanisComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zeratul Must Survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZeratulMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur02Primary04");
    gv_objective_ZeratulMustSurvive = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objective_ZeratulMustSurvive, 0);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZeratulMustSurviveCreate_Init () {
    gt_ObjectiveZeratulMustSurviveCreate = TriggerCreate("gt_ObjectiveZeratulMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zeratul Must Survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZeratulMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur02Primary04", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZeratulMustSurviveComplete_Init () {
    gt_ObjectiveZeratulMustSurviveComplete = TriggerCreate("gt_ObjectiveZeratulMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Zeratul Must Survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveZeratulMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveZeratulMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur02Primary04", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveZeratulMustSurviveFailed_Init () {
    gt_ObjectiveZeratulMustSurviveFailed = TriggerCreate("gt_ObjectiveZeratulMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Find Nerazim Pylons Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindNerazimPylonsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PAiur02Bonus01");
    libVCMI_gf_SetMissionObjectiveProgress("PAiur02Bonus01", gv_objective_NerazimPylonsFound);
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindNerazimPylonsCreate_Init () {
    gt_ObjectiveFindNerazimPylonsCreate = TriggerCreate("gt_ObjectiveFindNerazimPylonsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Find Nerazim Pylons Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindNerazimPylonsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindNerazimPylonsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur02Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindNerazimPylonsComplete_Init () {
    gt_ObjectiveFindNerazimPylonsComplete = TriggerCreate("gt_ObjectiveFindNerazimPylonsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Find Nerazim Pylons Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindNerazimPylonsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFindNerazimPylonsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PAiur02Bonus01", gv_objective_NerazimPylonsFound);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindNerazimPylonsUpdate_Init () {
    gt_ObjectiveFindNerazimPylonsUpdate = TriggerCreate("gt_ObjectiveFindNerazimPylonsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Find Nerazim Pylons Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindNerazimPylonsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFindNerazimPylonsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur02Bonus01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindNerazimPylonsFailed_Init () {
    gt_ObjectiveFindNerazimPylonsFailed = TriggerCreate("gt_ObjectiveFindNerazimPylonsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA538D728_g;
    int autoA538D728_u;
    unit autoA538D728_var;
    unitgroup auto39CAE000_g;
    int auto39CAE000_u;
    unit auto39CAE000_var;
    unitgroup auto75BEEB99_g;
    int auto75BEEB99_u;
    unit auto75BEEB99_var;
    const int autoE8580AB4_ae = 3;
    int autoE8580AB4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG, libNtve_ge_AllianceSetting_Neutral);
    autoA538D728_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA538D728_u = UnitGroupCount(autoA538D728_g, c_unitCountAll);
    for (;; autoA538D728_u -= 1) {
        autoA538D728_var = UnitGroupUnitFromEnd(autoA538D728_g, autoA538D728_u);
        if (autoA538D728_var == null) { break; }
        UnitGroupAdd(gv_cinematicPausedUnits, autoA538D728_var);
        UnitGroupAdd(gv_cinematicHiddenUnits, autoA538D728_var);
    }
    auto39CAE000_g = gv_cinematicPausedUnits;
    auto39CAE000_u = UnitGroupCount(auto39CAE000_g, c_unitCountAll);
    for (;; auto39CAE000_u -= 1) {
        auto39CAE000_var = UnitGroupUnitFromEnd(auto39CAE000_g, auto39CAE000_u);
        if (auto39CAE000_var == null) { break; }
        libNtve_gf_PauseUnit(auto39CAE000_var, true);
    }
    auto75BEEB99_g = gv_cinematicHiddenUnits;
    auto75BEEB99_u = UnitGroupCount(auto75BEEB99_g, c_unitCountAll);
    for (;; auto75BEEB99_u -= 1) {
        auto75BEEB99_var = UnitGroupUnitFromEnd(auto75BEEB99_g, auto75BEEB99_u);
        if (auto75BEEB99_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto75BEEB99_var, false);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZeratulVoidAiur01", 0, gv_pLAYER_01_USER, PointFromId(2308));
    gv_introZeratul = UnitLastCreated();
    UnitBehaviorAdd(gv_introZeratul, "SuppressCloak", gv_introZeratul, 1);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    autoE8580AB4_var = 1;
    for ( ; autoE8580AB4_var <= autoE8580AB4_ae; autoE8580AB4_var += 1 ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", 0, gv_pLAYER_01_USER, PointFromName(("Intro Stalker " + IntToString(autoE8580AB4_var))));
        UnitGroupAdd(gv_introStalkers, UnitLastCreated());
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF918F3DB_g;
    int autoF918F3DB_u;
    unit autoF918F3DB_var;
    unitgroup autoA0DF0872_g;
    int autoA0DF0872_u;
    unit autoA0DF0872_var;
    unitgroup auto210D835E_g;
    int auto210D835E_u;
    unit auto210D835E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2306), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2307), 3.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur02_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitIssueOrder(gv_introZeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(gv_introZeratul), 3.5, 3.5)), c_orderQueueReplace);
    UnitIssueOrder(gv_introZeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    autoF918F3DB_g = gv_introStalkers;
    autoF918F3DB_u = UnitGroupCount(autoF918F3DB_g, c_unitCountAll);
    for (;; autoF918F3DB_u -= 1) {
        autoF918F3DB_var = UnitGroupUnitFromEnd(autoF918F3DB_g, autoF918F3DB_u);
        if (autoF918F3DB_var == null) { break; }
        UnitIssueOrder(autoF918F3DB_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(autoF918F3DB_var), 3.5, 3.5)), c_orderQueueReplace);
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_introZeratul, "pMission_Aiur02|Line00101", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1978), 3.0, -1, 10, true);
    UnitIssueOrder(gv_introZeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(gv_introZeratul), 1.5, 1.5)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundPlayForPlayer(SoundLink("PAiur02_Music_Stinger", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_introStinger = SoundLastPlayed();
    TriggerExecute(gt_IntroZergUnburrow, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2315), 2.5, -1, 10, true);
    UnitIssueOrder(gv_introZeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2303)), c_orderQueueReplace);
    UnitIssueOrder(gv_introZeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    autoA0DF0872_g = gv_introStalkers;
    autoA0DF0872_u = UnitGroupCount(autoA0DF0872_g, c_unitCountAll);
    for (;; autoA0DF0872_u -= 1) {
        autoA0DF0872_var = UnitGroupUnitFromEnd(autoA0DF0872_g, autoA0DF0872_u);
        if (autoA0DF0872_var == null) { break; }
        UnitIssueOrder(autoA0DF0872_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2303)), c_orderQueueReplace);
        UnitIssueOrder(autoA0DF0872_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(gv_introStalkers, 1), OrderTargetingPoint(AbilityCommand("Blink", 0), UnitGetPosition(UnitFromId(467))), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_introStalkers, 2), OrderTargetingPoint(AbilityCommand("Blink", 0), UnitGetPosition(UnitFromId(2318))), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_introStalkers, 3), OrderTargetingPoint(AbilityCommand("Blink", 0), UnitGetPosition(UnitFromId(468))), c_orderQueueReplace);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libVCMI_gf_SendTransmissionCampaign(UnitGroupUnit(gv_introStalkers, 1), "pMission_Aiur02|Line00185", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (!((libNtve_gf_UnitGroupIsDead(gv_introZerg) == true))) {
        Wait(0.25, c_timeGame);
    }
    Wait(1.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1799), 3.0, -1, 10, true);
    UnitIssueOrder(gv_introZeratul, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitFromId(2318))), c_orderQueueReplace);
    libVCMI_gf_SendTransmissionCampaign(gv_introZeratul, "pMission_Aiur02|Line00186", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    auto210D835E_g = gv_introStalkers;
    auto210D835E_u = UnitGroupCount(auto210D835E_g, c_unitCountAll);
    for (;; auto210D835E_u -= 1) {
        auto210D835E_var = UnitGroupUnitFromEnd(auto210D835E_g, auto210D835E_u);
        if (auto210D835E_var == null) { break; }
        Wait(0.25, c_timeGame);
        UnitIssueOrder(auto210D835E_var, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_introZeratul)), c_orderQueueReplace);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_introZeratul, "pMission_Aiur02|Line00187", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1799), 4.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(gv_introStalkers, 1), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(467))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_introStalkers, 1), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitFromId(467)), 1.0, 0.0)), c_orderQueueAddToEnd);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(gv_introStalkers, 2), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(2318))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_introStalkers, 2), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitFromId(2318)), 1.0, 0.0)), c_orderQueueAddToEnd);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(UnitGroupUnit(gv_introStalkers, 3), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(468))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_introStalkers, 3), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitFromId(468)), 1.0, 0.0)), c_orderQueueAddToEnd);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(gv_introZeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1651)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(gv_introZeratul, OrderTargetingPoint(AbilityCommand("ZeratulBlink", 0), PointFromId(1850)), c_orderQueueReplace);
    Wait(0.25, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_introZeratul, false);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto341C5906_g;
    int auto341C5906_u;
    unit auto341C5906_var;
    unitgroup autoAD0C23DC_g;
    int autoAD0C23DC_u;
    unit autoAD0C23DC_var;
    unitgroup autoA0927A51_g;
    int autoA0927A51_u;
    unit autoA0927A51_var;
    unitgroup auto654AFE2D_g;
    int auto654AFE2D_u;
    unit auto654AFE2D_var;
    unitgroup auto02DF594C_g;
    int auto02DF594C_u;
    unit auto02DF594C_var;
    unitgroup auto50EB2880_g;
    int auto50EB2880_u;
    unit auto50EB2880_var;
    unitgroup auto337E1C44_g;
    int auto337E1C44_u;
    unit auto337E1C44_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto341C5906_g = gv_cinematicTempUnits;
    auto341C5906_u = UnitGroupCount(auto341C5906_g, c_unitCountAll);
    for (;; auto341C5906_u -= 1) {
        auto341C5906_var = UnitGroupUnitFromEnd(auto341C5906_g, auto341C5906_u);
        if (auto341C5906_var == null) { break; }
        UnitRemove(auto341C5906_var);
    }
    autoAD0C23DC_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAD0C23DC_u = UnitGroupCount(autoAD0C23DC_g, c_unitCountAll);
    for (;; autoAD0C23DC_u -= 1) {
        autoAD0C23DC_var = UnitGroupUnitFromEnd(autoAD0C23DC_g, autoAD0C23DC_u);
        if (autoAD0C23DC_var == null) { break; }
        UnitBehaviorAddPlayer(autoAD0C23DC_var, "CritterWanderLeash", gv_pLAYER_02_ZERG, 1);
    }
    if ((gv_cinematicCompleted == true)) {
        autoA0927A51_g = gv_cinematicHiddenUnits;
        autoA0927A51_u = UnitGroupCount(autoA0927A51_g, c_unitCountAll);
        for (;; autoA0927A51_u -= 1) {
            autoA0927A51_var = UnitGroupUnitFromEnd(autoA0927A51_g, autoA0927A51_u);
            if (autoA0927A51_var == null) { break; }
            UnitRemove(autoA0927A51_var);
        }
        auto654AFE2D_g = gv_introStalkers;
        auto654AFE2D_u = UnitGroupCount(auto654AFE2D_g, c_unitCountAll);
        for (;; auto654AFE2D_u -= 1) {
            auto654AFE2D_var = UnitGroupUnitFromEnd(auto654AFE2D_g, auto654AFE2D_u);
            if (auto654AFE2D_var == null) { break; }
            libNtve_gf_ChangeUnitDamage(auto654AFE2D_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            libNtve_gf_ChangeUnitDamage(auto654AFE2D_var, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
            UnitSelect(auto654AFE2D_var, gv_pLAYER_01_USER, true);
        }
    }
    else {
        auto02DF594C_g = gv_cinematicPausedUnits;
        auto02DF594C_u = UnitGroupCount(auto02DF594C_g, c_unitCountAll);
        for (;; auto02DF594C_u -= 1) {
            auto02DF594C_var = UnitGroupUnitFromEnd(auto02DF594C_g, auto02DF594C_u);
            if (auto02DF594C_var == null) { break; }
            libNtve_gf_PauseUnit(auto02DF594C_var, false);
        }
        auto50EB2880_g = gv_cinematicHiddenUnits;
        auto50EB2880_u = UnitGroupCount(auto50EB2880_g, c_unitCountAll);
        for (;; auto50EB2880_u -= 1) {
            auto50EB2880_var = UnitGroupUnitFromEnd(auto50EB2880_g, auto50EB2880_u);
            if (auto50EB2880_var == null) { break; }
            libNtve_gf_ShowHideUnit(auto50EB2880_var, true);
            UnitSelect(auto50EB2880_var, gv_pLAYER_01_USER, true);
        }
        auto337E1C44_g = gv_introStalkers;
        auto337E1C44_u = UnitGroupCount(auto337E1C44_g, c_unitCountAll);
        for (;; auto337E1C44_u -= 1) {
            auto337E1C44_var = UnitGroupUnitFromEnd(auto337E1C44_g, auto337E1C44_u);
            if (auto337E1C44_var == null) { break; }
            UnitRemove(auto337E1C44_var);
        }
    }
    SoundStop(gv_introStinger, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur02_Music_S2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitBehaviorRemove(UnitFromId(254), "TimeWarpProduction", 1);
    UnitBehaviorRemove(UnitFromId(1155), "TimeWarpProduction", 1);
    RegionPlayableMapSet(RegionFromId(2));
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_01_USER, gv_pLAYER_02_ZERG, libNtve_ge_AllianceSetting_Enemy);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(41), true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1800), lv_fadeDuration, -1, 10, true);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1800)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Zerg Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_IntroZergUnburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Event_Lab01_ZerglingRelease", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_pLAYER_02_ZERG, PointFromId(2303));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introZerg, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_pLAYER_02_ZERG, PointFromId(2304));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introZerg, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZerglingBurrowed", 0, gv_pLAYER_02_ZERG, PointFromId(2305));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_introZerg, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroZergUnburrow_Init () {
    gt_IntroZergUnburrow = TriggerCreate("gt_IntroZergUnburrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Player Base - Q
//--------------------------------------------------------------------------------------------------
bool gt_MidPlayerBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidPlayerBaseSetup, true, true);
    TriggerExecute(gt_MidPlayerBaseCinematic, true, true);
    TriggerExecute(gt_MidPlayerBaseCinematicEnd, true, true);
    TriggerExecute(gt_MidPlayerBaseCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlayerBaseQ_Init () {
    gt_MidPlayerBaseQ = TriggerCreate("gt_MidPlayerBaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Player Base - Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidPlayerBaseSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_stalkers;

    // Automatic Variable Declarations
    unitgroup auto35F93D5D_g;
    int auto35F93D5D_u;
    unit auto35F93D5D_var;
    unitgroup autoE8FE61A5_g;
    int autoE8FE61A5_u;
    unit autoE8FE61A5_var;
    int auto70C5AE3A_ae;
    int auto70C5AE3A_var;

    // Variable Initialization
    lv_stalkers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Blink", 0), false);
    if ((UnitIsAlive(gv_blinkBeacon) == true)) {
        UnitKill(gv_blinkBeacon);
        gv_blinkBeacon = null;
    }

    if ((UnitIsAlive(gv_blinkHelper) == true)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_blinkHelper, 1));
        DialogDestroy(gv_blinkTagAnchor);
        DialogControlDestroy(gv_blinkTag);
        UnitKill(gv_blinkHelper);
        gv_blinkHelper = null;
    }

    VisRevealerDestroy(gv_blinkRevealer);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    TriggerEnable(gt_DefeatStartingForcesDead, false);
    TriggerStop(gt_IntroAmbush1);
    TriggerStop(gt_IntroAmbush2);
    auto35F93D5D_g = gv_stage1Zerg;
    auto35F93D5D_u = UnitGroupCount(auto35F93D5D_g, c_unitCountAll);
    for (;; auto35F93D5D_u -= 1) {
        auto35F93D5D_var = UnitGroupUnitFromEnd(auto35F93D5D_g, auto35F93D5D_u);
        if (auto35F93D5D_var == null) { break; }
        UnitRemove(auto35F93D5D_var);
    }
    UnitClearSelection(gv_pLAYER_01_USER);
    lv_stalkers = UnitGroup("Stalker", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 3);
    autoE8FE61A5_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8FE61A5_u = UnitGroupCount(autoE8FE61A5_g, c_unitCountAll);
    for (;; autoE8FE61A5_u -= 1) {
        autoE8FE61A5_var = UnitGroupUnitFromEnd(autoE8FE61A5_g, autoE8FE61A5_u);
        if (autoE8FE61A5_var == null) { break; }
        if ((UnitGroupHasUnit(lv_stalkers, autoE8FE61A5_var) == false)) {
            UnitRemove(autoE8FE61A5_var);
        }

    }
    gv_midStalkerCount = UnitGroupCount(lv_stalkers, c_unitCountAlive);
    auto70C5AE3A_ae = gv_midStalkerCount;
    auto70C5AE3A_var = 1;
    for ( ; auto70C5AE3A_var <= auto70C5AE3A_ae; auto70C5AE3A_var += 1 ) {
        gv_midStalkers[auto70C5AE3A_var] = UnitGroupUnit(lv_stalkers, auto70C5AE3A_var);
        UnitIssueOrder(gv_midStalkers[auto70C5AE3A_var], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_midStalkers[auto70C5AE3A_var], PointFromName(("Mid Stalker " + IntToString(auto70C5AE3A_var))), false);
        UnitSetFacing(gv_midStalkers[auto70C5AE3A_var], PointGetFacing(PointFromName(("Mid Stalker " + IntToString(auto70C5AE3A_var)))), 0.0);
        UnitSetState(gv_midStalkers[auto70C5AE3A_var], c_unitStateFidget, false);
    }
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlayerBaseSetup_Init () {
    gt_MidPlayerBaseSetup = TriggerCreate("gt_MidPlayerBaseSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Player Base - Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidPlayerBaseCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(9), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(24), 6.0, -1, 10.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur02_Music_CS1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00157", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(68), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur02|Line00158", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur02|Line00104", true), c_soundIndexAny))), -1, 10.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00158", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00104", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00123", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(20), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur02|Line00172", true), c_soundIndexAny)) - 2), -1, 10.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00172", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("PAiur02_ReticuleAppears", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_MidReviveBase, true, false);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlayerBaseCinematic_Init () {
    gt_MidPlayerBaseCinematic = TriggerCreate("gt_MidPlayerBaseCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Player Base - Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidPlayerBaseCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlayerBaseCinematicEnd_Init () {
    gt_MidPlayerBaseCinematicEnd = TriggerCreate("gt_MidPlayerBaseCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Player Base - Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidPlayerBaseCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto9859A68C_g;
    int auto9859A68C_u;
    unit auto9859A68C_var;
    int auto531E0750_ae;
    int auto531E0750_var;
    unitgroup auto8B29BB7A_g;
    int auto8B29BB7A_u;
    unit auto8B29BB7A_var;
    unitgroup auto206F802E_g;
    int auto206F802E_u;
    unit auto206F802E_var;
    unitgroup autoEF2C6686_g;
    int autoEF2C6686_u;
    unit autoEF2C6686_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9859A68C_g = gv_cinematicTempUnits;
    auto9859A68C_u = UnitGroupCount(auto9859A68C_g, c_unitCountAll);
    for (;; auto9859A68C_u -= 1) {
        auto9859A68C_var = UnitGroupUnitFromEnd(auto9859A68C_g, auto9859A68C_u);
        if (auto9859A68C_var == null) { break; }
        UnitRemove(auto9859A68C_var);
    }
    if ((gv_cinematicCompleted == false)) {
        auto531E0750_ae = gv_midStalkerCount;
        auto531E0750_var = 1;
        for ( ; auto531E0750_var <= auto531E0750_ae; auto531E0750_var += 1 ) {
            UnitIssueOrder(gv_midStalkers[auto531E0750_var], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetPosition(gv_midStalkers[auto531E0750_var], PointFromName(("Mid Stalker " + IntToString(auto531E0750_var))), false);
            UnitSetFacing(gv_midStalkers[auto531E0750_var], PointGetFacing(PointFromName(("Mid Stalker " + IntToString(auto531E0750_var)))), 0.0);
            UnitSetState(gv_midStalkers[auto531E0750_var], c_unitStateFidget, true);
        }
        TriggerExecute(gt_MidReviveBase, true, false);
    }

    auto8B29BB7A_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B29BB7A_u = UnitGroupCount(auto8B29BB7A_g, c_unitCountAll);
    for (;; auto8B29BB7A_u -= 1) {
        auto8B29BB7A_var = UnitGroupUnitFromEnd(auto8B29BB7A_g, auto8B29BB7A_u);
        if (auto8B29BB7A_var == null) { break; }
        UnitSetPropertyFixed(auto8B29BB7A_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto8B29BB7A_var, c_unitPropShieldsPercent, 100.0);
    }
    UnitIssueOrder(UnitFromId(254), OrderTargetingUnit(AbilityCommand("TimeWarp", 0), UnitFromId(254)), c_orderQueueReplace);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    RegionPlayableMapSet(RegionFromId(46));
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    ObjectiveShow(gv_objective_ReachNexus, PlayerGroupAll(), false);
    gf_CreateInfoText(UnitFromId(254));
    gf_CreateInfoText(UnitFromId(416));
    gf_CreateInfoText(UnitFromId(415));
    gf_CreateInfoText(UnitFromId(420));
    gf_CreateInfoText(UnitFromId(1874));
    gf_CreateInfoText(UnitFromId(1465));
    gf_CreateInfoText(UnitFromId(243));
    gf_CreateInfoText(UnitFromId(419));
    gf_CreateInfoText(UnitFromId(1460));
    gf_CreateInfoText(UnitFromId(1451));
    gf_CreateInfoText(UnitFromId(1459));
    gf_CreateInfoText(UnitFromId(443));
    gf_CreateInfoText(UnitFromId(266));
    gf_CreateInfoText(UnitFromId(267));
    gf_CreateInfoText(UnitFromId(261));
    gf_CreateInfoText(UnitFromId(262));
    gf_CreateInfoText(UnitFromId(264));
    gf_CreateInfoText(UnitFromId(268));
    gf_CreateInfoText(UnitFromId(269));
    auto206F802E_g = UnitGroup("NaturalGas", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto206F802E_u = UnitGroupCount(auto206F802E_g, c_unitCountAll);
    for (;; auto206F802E_u -= 1) {
        auto206F802E_var = UnitGroupUnitFromEnd(auto206F802E_g, auto206F802E_u);
        if (auto206F802E_var == null) { break; }
        gf_CreateInfoText(auto206F802E_var);
    }
    autoEF2C6686_g = UnitGroup("NaturalMinerals", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEF2C6686_u = UnitGroupCount(autoEF2C6686_g, c_unitCountAll);
    for (;; autoEF2C6686_u -= 1) {
        autoEF2C6686_var = UnitGroupUnitFromEnd(autoEF2C6686_g, autoEF2C6686_u);
        if (autoEF2C6686_var == null) { break; }
        gf_CreateInfoText(autoEF2C6686_var);
    }
    TriggerExecute(gt_StartAI, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(170), lv_fadeDuration, -1, 10, true);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(170)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidPlayerBaseCleanup_Init () {
    gt_MidPlayerBaseCleanup = TriggerCreate("gt_MidPlayerBaseCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Revive Base
//--------------------------------------------------------------------------------------------------
bool gt_MidReviveBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9B572609_g;
    int auto9B572609_u;
    unit auto9B572609_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideUnit(UnitFromId(1465), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1460), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1459), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1451), true);
    libNtve_gf_ShowHideUnit(UnitFromId(419), true);
    libNtve_gf_ShowHideUnit(UnitFromId(243), true);
    libNtve_gf_ShowHideUnit(UnitFromId(1874), true);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(254), "SetTintColor 255,255,255");
    auto9B572609_g = UnitGroup(null, gv_pLAYER_07_AIUR, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B572609_u = UnitGroupCount(auto9B572609_g, c_unitCountAll);
    for (;; auto9B572609_u -= 1) {
        auto9B572609_var = UnitGroupUnitFromEnd(auto9B572609_g, auto9B572609_u);
        if (auto9B572609_var == null) { break; }
        UnitSetState(auto9B572609_var, c_unitStateTargetable, true);
        UnitSetPropertyFixed(auto9B572609_var, c_unitPropShieldsRegen, UnitTypeGetProperty(UnitGetType(auto9B572609_var), c_unitPropShieldsRegen));
        UnitSetPropertyFixed(auto9B572609_var, c_unitPropShieldsPercent, 100.0);
        if ((UnitTypeTestAttribute(UnitGetType(auto9B572609_var), c_unitAttributeStructure) == true)) {
            libNtve_gf_RescueUnit(auto9B572609_var, gv_pLAYER_01_USER, true);
        }
        else {
            UnitSetOwner(auto9B572609_var, gv_pLAYER_01_USER, true);
        }
    }
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(21), gv_pLAYER_01_USER);
    libVCMI_gf_SetWorkerRallyPointforNexus(UnitFromId(254));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidReviveBase_Init () {
    gt_MidReviveBase = TriggerCreate("gt_MidReviveBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Upper Base - Q
//--------------------------------------------------------------------------------------------------
bool gt_MidUpperBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidUpperBaseSetup, true, true);
    TriggerExecute(gt_MidUpperBaseCinematic, true, true);
    TriggerExecute(gt_MidUpperBaseCinematicEnd, true, true);
    TriggerExecute(gt_MidUpperBaseCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidUpperBaseQ_Init () {
    gt_MidUpperBaseQ = TriggerCreate("gt_MidUpperBaseQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Upper Base - Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidUpperBaseSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoE09571FC_g;
    int autoE09571FC_u;
    unit autoE09571FC_var;
    unitgroup auto67F3E66F_g;
    int auto67F3E66F_u;
    unit auto67F3E66F_var;
    unitgroup auto56A82244_g;
    int auto56A82244_u;
    unit auto56A82244_var;
    unitgroup auto6F630BB1_g;
    int auto6F630BB1_u;
    unit auto6F630BB1_var;
    const int auto42E5350E_ae = 4;
    const int auto42E5350E_ai = 1;
    const int autoAA363874_ae = 4;
    const int autoAA363874_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 2.0, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_DARK_PROTOSS, libNtve_ge_AllianceSetting_Neutral);
    RegionPlayableMapSet(RegionEntireMap());
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoE09571FC_g = UnitGroup(null, gv_pLAYER_02_ZERG, RegionFromId(46), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE09571FC_u = UnitGroupCount(autoE09571FC_g, c_unitCountAll);
    for (;; autoE09571FC_u -= 1) {
        autoE09571FC_var = UnitGroupUnitFromEnd(autoE09571FC_g, autoE09571FC_u);
        if (autoE09571FC_var == null) { break; }
        if ((UnitGetType(autoE09571FC_var) != "CreepTumorBurrowed")) {
            UnitRemove(autoE09571FC_var);
        }

    }
    auto67F3E66F_g = UnitGroup(null, gv_pLAYER_03_DARK_PROTOSS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto67F3E66F_u = UnitGroupCount(auto67F3E66F_g, c_unitCountAll);
    for (;; auto67F3E66F_u -= 1) {
        auto67F3E66F_var = UnitGroupUnitFromEnd(auto67F3E66F_g, auto67F3E66F_u);
        if (auto67F3E66F_var == null) { break; }
        UnitRemove(auto67F3E66F_var);
    }
    UnitClearSelection(gv_pLAYER_01_USER);
    auto56A82244_g = UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto56A82244_u = UnitGroupCount(auto56A82244_g, c_unitCountAll);
    for (;; auto56A82244_u -= 1) {
        auto56A82244_var = UnitGroupUnitFromEnd(auto56A82244_g, auto56A82244_u);
        if (auto56A82244_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto56A82244_var, false);
        libNtve_gf_PauseUnit(auto56A82244_var, true);
    }
    auto6F630BB1_g = UnitGroup(null, gv_pLAYER_06_SHAKURAS, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto6F630BB1_u = UnitGroupCount(auto6F630BB1_g, c_unitCountAll);
    for (;; auto6F630BB1_u -= 1) {
        auto6F630BB1_var = UnitGroupUnitFromEnd(auto6F630BB1_g, auto6F630BB1_u);
        if (auto6F630BB1_var == null) { break; }
        UnitRemove(auto6F630BB1_var);
    }
    Wait(0.0625, c_timeGame);
    cai_waves_stop("ai35D1D5DC");
    cai_wave_enable(5, gv_pLAYER_02_ZERG, false);
    TriggerEnable(gt_DefeatBaseDead, false);
    PingDestroy(gv_templarPing);
    TriggerExecute(gt_TutorialCleanup, true, false);
    libNtve_gf_ShowHideUnit(gv_artanis, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZeratulVoidAiur01", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(21));
    gv_zeratul = UnitLastCreated();
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    UnitSetFacing(gv_zeratul, PointGetFacing(PointFromId(1230)), 0.0);
    UnitSetState(gv_zeratul, c_unitStateFidget, false);
    libNtve_gf_ChangeUnitDamage(gv_zeratul, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    lv_i = 1;
    for ( ; ( (auto42E5350E_ai >= 0 && lv_i <= auto42E5350E_ae) || (auto42E5350E_ai < 0 && lv_i >= auto42E5350E_ae) ) ; lv_i += auto42E5350E_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", 0, gv_pLAYER_01_USER, PointFromName(("Mid Upper Stalker " + IntToString(lv_i))));
        UnitGroupAdd(gv_midUpperStalkers, UnitLastCreated());
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        gv_midUpperStalkersArray[lv_i] = UnitLastCreated();
    }
    lv_i = 1;
    for ( ; ( (autoAA363874_ai >= 0 && lv_i <= autoAA363874_ae) || (autoAA363874_ai < 0 && lv_i >= autoAA363874_ae) ) ; lv_i += autoAA363874_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, 0, PointFromName(("Mid Upper Zealot " + IntToString(lv_i))));
        UnitSetOwner(UnitLastCreated(), gv_pLAYER_01_USER, true);
        UnitGroupAdd(gv_midUpperZealots, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidUpperBaseSetup_Init () {
    gt_MidUpperBaseSetup = TriggerCreate("gt_MidUpperBaseSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Upper Base - Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidUpperBaseCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_zeratulTimer;

    // Automatic Variable Declarations
    unitgroup autoF99499A8_g;
    int autoF99499A8_u;
    unit autoF99499A8_var;
    unitgroup auto0C1DC4C1_g;
    int auto0C1DC4C1_u;
    unit auto0C1DC4C1_var;
    unitgroup auto217EA54A_g;
    int auto217EA54A_u;
    unit auto217EA54A_var;
    unitgroup autoDB35D8F9_g;
    int autoDB35D8F9_u;
    unit autoDB35D8F9_var;

    // Variable Initialization
    lv_zeratulTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(196), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2472), (3.0+SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur02|Line00115", true), c_soundIndexAny))), -1, 10, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur02_Music_CS1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlayForPlayer(SoundLink("PAiur02_ArtanisCorruptionAmbience", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_artanisAmbience = SoundLastPlayed();
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 1.0, 3.0, 5.0);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur02|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundStop(gv_artanisAmbience, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1231), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("ZeratulBlink", 0), PointFromId(1229)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1230)), c_orderQueueAddToEnd);
    libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Aiur02|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 3.0, 3.0, SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur02|Line00077", true), c_soundIndexAny)));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1232), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur02|Line00077", true), c_soundIndexAny)), -1, 10.0, true);
    TriggerExecute(gt_MidZealotConfusion, true, false);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PAiur02_AmonCorruption", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur02|Line00077", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerStop(gt_MidZealotConfusion);
    CameraShakeStop(gv_pLAYER_01_USER);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PAiur02_AmonTransfer", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("PAiur02_ZealotBam", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoF99499A8_g = UnitGroup(null, gv_pLAYER_07_AIUR, RegionFromId(12), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF99499A8_u = UnitGroupCount(autoF99499A8_g, c_unitCountAll);
    for (;; autoF99499A8_u -= 1) {
        autoF99499A8_var = UnitGroupUnitFromEnd(autoF99499A8_g, autoF99499A8_u);
        if (autoF99499A8_var == null) { break; }
        gf_MidAmonConversion(autoF99499A8_var);
    }
    auto0C1DC4C1_g = gv_midUpperZealots;
    auto0C1DC4C1_u = UnitGroupCount(auto0C1DC4C1_g, c_unitCountAll);
    for (;; auto0C1DC4C1_u -= 1) {
        auto0C1DC4C1_var = UnitGroupUnitFromEnd(auto0C1DC4C1_g, auto0C1DC4C1_u);
        if (auto0C1DC4C1_var == null) { break; }
        gf_MidAmonConversion(auto0C1DC4C1_var);
        Wait(0.1, c_timeReal);
    }
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1240)), c_orderQueueReplace);
    Wait(0.1, c_timeReal);
    UnitIssueOrder(gv_midUpperStalkersArray[1], OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1241)), c_orderQueueReplace);
    Wait(0.1, c_timeReal);
    UnitIssueOrder(gv_midUpperStalkersArray[2], OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1241)), c_orderQueueReplace);
    Wait(0.1, c_timeReal);
    UnitIssueOrder(gv_midUpperStalkersArray[3], OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1241)), c_orderQueueReplace);
    Wait(0.1, c_timeReal);
    UnitIssueOrder(gv_midUpperStalkersArray[4], OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1241)), c_orderQueueReplace);
    Wait(1.5, c_timeReal);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_03_DARK_PROTOSS, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Enemy);
    auto217EA54A_g = gv_midUpperZealots;
    auto217EA54A_u = UnitGroupCount(auto217EA54A_g, c_unitCountAll);
    for (;; auto217EA54A_u -= 1) {
        auto217EA54A_var = UnitGroupUnitFromEnd(auto217EA54A_g, auto217EA54A_u);
        if (auto217EA54A_var == null) { break; }
        UnitIssueOrder(auto217EA54A_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1281)), c_orderQueueReplace);
    }
    Wait(1.0, c_timeReal);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1236)), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    autoDB35D8F9_g = gv_midUpperZealots;
    autoDB35D8F9_u = UnitGroupCount(autoDB35D8F9_g, c_unitCountAll);
    for (;; autoDB35D8F9_u -= 1) {
        autoDB35D8F9_var = UnitGroupUnitFromEnd(autoDB35D8F9_g, autoDB35D8F9_u);
        if (autoDB35D8F9_var == null) { break; }
        UnitIssueOrder(autoDB35D8F9_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1805)), c_orderQueueReplace);
    }
    TriggerExecute(gt_MidZeratulRunsOut, true, false);
    TimerStart(lv_zeratulTimer, 15.0, false, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1285), 12.0, -1, 10.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Aiur02|Line00117", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (!(((RegionContainsPoint(RegionCircle(PointFromId(1273), 1.0), UnitGetPosition(gv_zeratul)) == true) || (TimerGetRemaining(lv_zeratulTimer) < 1)))) {
        Wait(1.0, c_timeReal);
    }
    libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Aiur02|Line00118", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidUpperBaseCinematic_Init () {
    gt_MidUpperBaseCinematic = TriggerCreate("gt_MidUpperBaseCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Upper Base - Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidUpperBaseCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidUpperBaseCinematicEnd_Init () {
    gt_MidUpperBaseCinematicEnd = TriggerCreate("gt_MidUpperBaseCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Upper Base - Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidUpperBaseCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_i;
    unit lv_debrisAttacker;
    unit lv_debrisTarget;

    // Automatic Variable Declarations
    unitgroup auto72E663DA_g;
    int auto72E663DA_u;
    unit auto72E663DA_var;
    const int autoF8B70980_ae = 4;
    const int autoF8B70980_ai = 1;
    unitgroup auto3721FA59_g;
    int auto3721FA59_u;
    unit auto3721FA59_var;
    unitgroup auto9ECA7036_g;
    int auto9ECA7036_u;
    unit auto9ECA7036_var;
    unitgroup auto1ADE5D1B_g;
    int auto1ADE5D1B_u;
    unit auto1ADE5D1B_var;
    unitgroup autoB0D79CA7_g;
    int autoB0D79CA7_u;
    unit autoB0D79CA7_var;
    unitgroup auto3F135946_g;
    int auto3F135946_u;
    unit auto3F135946_var;
    unitgroup autoDEF1CA47_g;
    int autoDEF1CA47_u;
    unit autoDEF1CA47_var;
    unitgroup autoFB3078F0_g;
    int autoFB3078F0_u;
    unit autoFB3078F0_var;
    const int autoBDE3F8BE_ae = 4;
    int autoBDE3F8BE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto72E663DA_g = gv_cinematicTempUnits;
    auto72E663DA_u = UnitGroupCount(auto72E663DA_g, c_unitCountAll);
    for (;; auto72E663DA_u -= 1) {
        auto72E663DA_var = UnitGroupUnitFromEnd(auto72E663DA_g, auto72E663DA_u);
        if (auto72E663DA_var == null) { break; }
        UnitRemove(auto72E663DA_var);
    }
    lv_i = 1;
    for ( ; ( (autoF8B70980_ai >= 0 && lv_i <= autoF8B70980_ae) || (autoF8B70980_ai < 0 && lv_i >= autoF8B70980_ae) ) ; lv_i += autoF8B70980_ai ) {
        UnitIssueOrder(gv_midUpperStalkersArray[lv_i], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_midUpperStalkersArray[lv_i], PointFromName(("Final Stalker " + IntToString(lv_i))), false);
        UnitIssueOrder(gv_midUpperStalkersArray[lv_i], OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1273)), c_orderQueueAddToEnd);
        libNtve_gf_ChangeUnitDamage(gv_midUpperStalkersArray[lv_i], libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_zeratul, PointFromId(1273), false);
    UnitBehaviorRemove(gv_zeratul, "SuppressCloak", 1);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(1273), 1.0, 225.0)), c_orderQueueAddToEnd);
    UnitSetState(gv_zeratul, c_unitStateFidget, true);
    libNtve_gf_ChangeUnitDamage(gv_zeratul, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    auto3721FA59_g = UnitGroup(null, gv_pLAYER_07_AIUR, RegionFromId(12), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3721FA59_u = UnitGroupCount(auto3721FA59_g, c_unitCountAll);
    for (;; auto3721FA59_u -= 1) {
        auto3721FA59_var = UnitGroupUnitFromEnd(auto3721FA59_g, auto3721FA59_u);
        if (auto3721FA59_var == null) { break; }
        gf_MidAmonConversion(auto3721FA59_var);
    }
    auto9ECA7036_g = UnitGroup(null, gv_pLAYER_03_DARK_PROTOSS, RegionFromId(16), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9ECA7036_u = UnitGroupCount(auto9ECA7036_g, c_unitCountAll);
    for (;; auto9ECA7036_u -= 1) {
        auto9ECA7036_var = UnitGroupUnitFromEnd(auto9ECA7036_g, auto9ECA7036_u);
        if (auto9ECA7036_var == null) { break; }
        libNtve_gf_PauseUnit(auto9ECA7036_var, false);
        libNtve_gf_ShowHideUnit(auto9ECA7036_var, true);
    }
    auto1ADE5D1B_g = UnitGroup(null, gv_pLAYER_04_TEMPLAR, RegionFromId(16), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1ADE5D1B_u = UnitGroupCount(auto1ADE5D1B_g, c_unitCountAll);
    for (;; auto1ADE5D1B_u -= 1) {
        auto1ADE5D1B_var = UnitGroupUnitFromEnd(auto1ADE5D1B_g, auto1ADE5D1B_u);
        if (auto1ADE5D1B_var == null) { break; }
        libNtve_gf_PauseUnit(auto1ADE5D1B_var, false);
        libNtve_gf_ShowHideUnit(auto1ADE5D1B_var, true);
    }
    autoB0D79CA7_g = UnitGroup(null, gv_pLAYER_03_DARK_PROTOSS, RegionFromId(29), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB0D79CA7_u = UnitGroupCount(autoB0D79CA7_g, c_unitCountAll);
    for (;; autoB0D79CA7_u -= 1) {
        autoB0D79CA7_var = UnitGroupUnitFromEnd(autoB0D79CA7_g, autoB0D79CA7_u);
        if (autoB0D79CA7_var == null) { break; }
        libNtve_gf_PauseUnit(autoB0D79CA7_var, false);
        libNtve_gf_ShowHideUnit(autoB0D79CA7_var, true);
    }
    auto3F135946_g = UnitGroup(null, gv_pLAYER_04_TEMPLAR, RegionFromId(29), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto3F135946_u = UnitGroupCount(auto3F135946_g, c_unitCountAll);
    for (;; auto3F135946_u -= 1) {
        auto3F135946_var = UnitGroupUnitFromEnd(auto3F135946_g, auto3F135946_u);
        if (auto3F135946_var == null) { break; }
        libNtve_gf_PauseUnit(auto3F135946_var, false);
        libNtve_gf_ShowHideUnit(auto3F135946_var, true);
    }
    autoDEF1CA47_g = UnitGroup(null, gv_pLAYER_03_DARK_PROTOSS, RegionFromId(31), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoDEF1CA47_u = UnitGroupCount(autoDEF1CA47_g, c_unitCountAll);
    for (;; autoDEF1CA47_u -= 1) {
        autoDEF1CA47_var = UnitGroupUnitFromEnd(autoDEF1CA47_g, autoDEF1CA47_u);
        if (autoDEF1CA47_var == null) { break; }
        libNtve_gf_PauseUnit(autoDEF1CA47_var, false);
        libNtve_gf_ShowHideUnit(autoDEF1CA47_var, true);
    }
    autoFB3078F0_g = UnitGroup(null, gv_pLAYER_04_TEMPLAR, RegionFromId(31), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoFB3078F0_u = UnitGroupCount(autoFB3078F0_g, c_unitCountAll);
    for (;; autoFB3078F0_u -= 1) {
        autoFB3078F0_var = UnitGroupUnitFromEnd(autoFB3078F0_g, autoFB3078F0_u);
        if (autoFB3078F0_var == null) { break; }
        libNtve_gf_PauseUnit(autoFB3078F0_var, false);
        libNtve_gf_ShowHideUnit(autoFB3078F0_var, true);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker8x8", c_unitCreateIgnorePlacement, 0, PointFromId(1805));
    autoBDE3F8BE_var = 1;
    for ( ; autoBDE3F8BE_var <= autoBDE3F8BE_ae; autoBDE3F8BE_var += 1 ) {
        UnitCreate(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_03_DARK_PROTOSS, PointFromName(("Debris Zealot " + IntToString(autoBDE3F8BE_var))), PointGetFacing(PointFromName(("Debris Zealot " + IntToString(autoBDE3F8BE_var)))));
        lv_debrisAttacker = UnitLastCreated();
        UnitSetState(lv_debrisAttacker, c_unitStateSelectable, false);
        UnitSetState(lv_debrisAttacker, c_unitStateTargetable, false);
        UnitSetState(lv_debrisAttacker, c_unitStateHighlightable, false);
        UnitSetState(lv_debrisAttacker, c_unitStateStatusBar, false);
        UnitSetState(lv_debrisAttacker, c_unitStateInvulnerable, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_debrisAttacker), 0.1, UnitGetFacing(lv_debrisAttacker)));
        lv_debrisTarget = UnitLastCreated();
        UnitIssueOrder(lv_debrisAttacker, OrderTargetingUnit(AbilityCommand("attack", 0), lv_debrisTarget), c_orderQueueReplace);
        libNtve_gf_PauseUnit(lv_debrisAttacker, true);
    }
    CameraShakeStop(gv_pLAYER_01_USER);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PAiur02_Music_S3", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libVCMI_gf_StopCinematicSounds();
    SoundStop(gv_artanisAmbience, true);
    TriggerStop(gt_MidZealotConfusion);
    TriggerStop(gt_MidZeratulRunsOut);
    if ((gv_cinematicCompleted == false)) {
    }

    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_DARK_PROTOSS, libNtve_ge_AllianceSetting_Enemy);
    RegionPlayableMapSet(RegionFromId(13));
    ObjectiveShow(gv_objective_ReachTemplar, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveRescueStalkers, PlayerGroupAll(), false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(14), false, false);
    libVCUI_gf_EnableLowHealthWarning(1, gv_zeratul);
    UnitSetPropertyFixed(UnitFromId(254), c_unitPropEnergy, 0.0);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1286), lv_fadeDuration, -1, 10.0, true);
        UISetResourceVisible(PlayerGroupAll(), c_resourceTypeMinerals, false);
        UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1286)), lv_fadeDuration);
        UISetResourceVisible(PlayerGroupAll(), c_resourceTypeMinerals, false);
        UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidUpperBaseCleanup_Init () {
    gt_MidUpperBaseCleanup = TriggerCreate("gt_MidUpperBaseCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Zealot Confusion
//--------------------------------------------------------------------------------------------------
bool gt_MidZealotConfusion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4B75C51D_g;
    int auto4B75C51D_u;
    unit auto4B75C51D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        auto4B75C51D_g = gv_midUpperZealots;
        auto4B75C51D_u = UnitGroupCount(auto4B75C51D_g, c_unitCountAll);
        for (;; auto4B75C51D_u -= 1) {
            auto4B75C51D_var = UnitGroupUnitFromEnd(auto4B75C51D_g, auto4B75C51D_u);
            if (auto4B75C51D_var == null) { break; }
            if ((RandomInt(1, 4) == 1)) {
                UnitIssueOrder(auto4B75C51D_var, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(auto4B75C51D_var), 1.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidZealotConfusion_Init () {
    gt_MidZealotConfusion = TriggerCreate("gt_MidZealotConfusion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid - Zeratul Runs Out
//--------------------------------------------------------------------------------------------------
bool gt_MidZeratulRunsOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1284)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("ZeratulBlink", 0), PointFromId(1280)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1273)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(1273), 1.0, 225.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[3], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1282)), c_orderQueueReplace);
    UnitIssueOrder(gv_midUpperStalkersArray[3], OrderTargetingPoint(AbilityCommand("Blink", 0), PointFromId(1278)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[3], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1276)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[3], OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1273)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[1], OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_zeratul)), c_orderQueueReplace);
    UnitIssueOrder(gv_midUpperStalkersArray[2], OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_zeratul)), c_orderQueueReplace);
    UnitIssueOrder(gv_midUpperStalkersArray[4], OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_zeratul)), c_orderQueueReplace);
    Wait(1.5, c_timeReal);
    UnitIssueOrder(gv_midUpperStalkersArray[4], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1283)), c_orderQueueReplace);
    UnitIssueOrder(gv_midUpperStalkersArray[4], OrderTargetingPoint(AbilityCommand("Blink", 0), PointFromId(1279)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[4], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1277)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[4], OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1273)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_midUpperStalkersArray[1], OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_zeratul)), c_orderQueueReplace);
    UnitIssueOrder(gv_midUpperStalkersArray[2], OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_zeratul)), c_orderQueueReplace);
    Wait(1.5, c_timeReal);
    UnitIssueOrder(gv_midUpperStalkersArray[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1282)), c_orderQueueReplace);
    UnitIssueOrder(gv_midUpperStalkersArray[1], OrderTargetingPoint(AbilityCommand("Blink", 0), PointFromId(1278)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1274)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[1], OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1273)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1283)), c_orderQueueReplace);
    Wait(0.75, c_timeReal);
    UnitIssueOrder(gv_midUpperStalkersArray[2], OrderTargetingPoint(AbilityCommand("Blink", 0), PointFromId(1279)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1275)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_midUpperStalkersArray[2], OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1273)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidZeratulRunsOut_Init () {
    gt_MidZeratulRunsOut = TriggerCreate("gt_MidZeratulRunsOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    TriggerExecute(gt_VictorySetup, true, true);
    libVoiC_gf_PlayCinematic("Protoss02", false);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitPauseAll(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_DebugStage3_Init();
    gt_DebugStage1Cleanup_Init();
    gt_DebugStage2Cleanup_Init();
    gt_StartGameStage1Q_Init();
    gt_StartGameStage2Q_Init();
    gt_StartGameStage3Q_Init();
    gt_TeachBlinkQ_Init();
    gt_TeachBlinkEnterBeacon_Init();
    gt_StalkerInitialBlink_Init();
    gt_IntroAmbush1_Init();
    gt_IntroAmbush1Zergling1Spawn_Init();
    gt_IntroAmbush2_Init();
    gt_IntroFlyerAttack_Init();
    gt_IntroAmbush1Q_Init();
    gt_IntroFlyerAttackQ_Init();
    gt_IntroNexusFound_Init();
    gt_TBuildPylon_Init();
    gt_TBuildPylonIntroQ_Init();
    gt_TBuildPylonBuildStartedQ_Init();
    gt_TBuildPylonCompleteQ_Init();
    gt_TBuildPylonProbeSelection_Init();
    gt_TBuildPylonTargeting_Init();
    gt_TBuildPylonBuildOrder_Init();
    gt_TBuildPylonBuildStarted_Init();
    gt_TBuildPylonComplete_Init();
    gt_TTrainWarrior_Init();
    gt_TTrainWarriorIntroQ_Init();
    gt_TTrainWarriorCompleteQ_Init();
    gt_TTrainWarriorPreLessonUnitTrained_Init();
    gt_TTrainWarriorGatewaySelection_Init();
    gt_TTrainWarriorComplete_Init();
    gt_TMakeAssimilator_Init();
    gt_TMakeAssimilatorIntro1Q_Init();
    gt_TMakeAssimilatorIntro2Q_Init();
    gt_TMakeAssimilatorProbeSelection_Init();
    gt_TMakeAssimilatorTargeting_Init();
    gt_TMakeAssimilatorBuildOrder_Init();
    gt_TMakeAssimilatorComplete_Init();
    gt_TTransferProbes_Init();
    gt_TTransferProbesIntroQ_Init();
    gt_TTransferProbesProbeSelection_Init();
    gt_TTransferProbesComplete_Init();
    gt_TTrainMoreProbes_Init();
    gt_TTrainMoreProbesIntroQ_Init();
    gt_TTrainMoreProbesNexusSelection_Init();
    gt_TTrainMoreProbesComplete_Init();
    gt_KaraxIntroQ_Init();
    gt_TutorialController_Init();
    gt_TutorialCompleteQ_Init();
    gt_TutorialCleanup_Init();
    gt_StructureWarpingIn_Init();
    gt_DarkProtoss1Q_Init();
    gt_DarkProtoss2Q_Init();
    gt_GroupBurrowedZerg_Init();
    gt_GroupDarkProtoss_Init();
    gt_GroupDarkProtossQ_Init();
    gt_DeactivateZergBulliesHatchery_Init();
    gt_DeactivateZergBulliesLair_Init();
    gt_FindNerazimPylon01_Init();
    gt_FindNerazimPylon02_Init();
    gt_FindNerazimPylon03_Init();
    gt_NerazimPylonFoundQ_Init();
    gt_WarpInUnitBehaviorP06_Init();
    gt_FirstPickupEncountered_Init();
    gt_ResourcePickupCollected_Init();
    gt_UnitEntersTurnOffMoveOutReminder_Init();
    gt_RemindPlayerToMoveOutQ_Init();
    gt_MainSectionComplete_Init();
    gt_MainSectionCompleteQ_Init();
    gt_ProtossConvertedbyAmon01_Init();
    gt_ProtossConverted01Q_Init();
    gt_ProtossConvertedbyAmon02_Init();
    gt_ProtossConvertedbyAmon03_Init();
    gt_ProtossConverted02Q_Init();
    gt_AllAloneQ_Init();
    gt_ArtanisFound_Init();
    gt_StartAI_Init();
    gt_FirstAttackQ_Init();
    gt_AIGiveResources_Init();
    gt_AIResearchHardBrutal_Init();
    gt_DefeatStartingForcesDead_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatZeratulDies_Init();
    gt_VictoryFindArtanisCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StatBlinkUsed_Init();
    gt_AchievementUnitsTrainedCasual_Init();
    gt_AchievementResourcePickupsNormal_Init();
    gt_AchievementFastHatcheryKill_Init();
    gt_ObjectiveReachtheNexusCreate_Init();
    gt_ObjectiveReachtheNexusComplete_Init();
    gt_ObjectiveReachTemplarBaseCreate_Init();
    gt_ObjectiveReachTemplarBaseComplete_Init();
    gt_ObjectiveReachArtanisCreate_Init();
    gt_ObjectiveReachArtanisComplete_Init();
    gt_ObjectiveZeratulMustSurviveCreate_Init();
    gt_ObjectiveZeratulMustSurviveComplete_Init();
    gt_ObjectiveZeratulMustSurviveFailed_Init();
    gt_ObjectiveFindNerazimPylonsCreate_Init();
    gt_ObjectiveFindNerazimPylonsComplete_Init();
    gt_ObjectiveFindNerazimPylonsUpdate_Init();
    gt_ObjectiveFindNerazimPylonsFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroZergUnburrow_Init();
    gt_MidPlayerBaseQ_Init();
    gt_MidPlayerBaseSetup_Init();
    gt_MidPlayerBaseCinematic_Init();
    gt_MidPlayerBaseCinematicEnd_Init();
    gt_MidPlayerBaseCleanup_Init();
    gt_MidReviveBase_Init();
    gt_MidUpperBaseQ_Init();
    gt_MidUpperBaseSetup_Init();
    gt_MidUpperBaseCinematic_Init();
    gt_MidUpperBaseCinematicEnd_Init();
    gt_MidUpperBaseCleanup_Init();
    gt_MidZealotConfusion_Init();
    gt_MidZeratulRunsOut_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
