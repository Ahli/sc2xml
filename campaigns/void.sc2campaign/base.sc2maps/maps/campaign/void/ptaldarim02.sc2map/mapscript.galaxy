//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Rak'Shir
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "aiCD8186A4"
include "aiD987C1BA"
include "aiED17EBAC"
include "ai12D88597"
include "ai3CC6BC9D"
include "aiD606BE98"
include "ai436B92E3"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_TALDARIM = 2;
const int gv_pLAYER_03_TALDARIM = 3;
const int gv_pLAYER_04_TALDARIM = 4;
const int gv_pLAYER_05_TALDARIM = 5;
const int gv_pLAYER_07_ALARAK = 7;
const int gv_pLAYER_08_MALASH = 8;
const int gv_pLAYER_09_ELEMENTAL = 9;
const int gv_tugOfWar_WaypointMax = 22;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESETTugOfWarState_Paused = 0;
const int ge_PRESETTugOfWarState_Forward = 1;
const int ge_PRESETTugOfWarState_Hold = 2;
const int ge_PRESETTugOfWarState_Reverse = 3;
const int ge_PRESETTugOfWarState_EventControlled = 4;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_alarak;
unit gv_malash;
unit gv_tugOfWarEscortTargetUnit;
unitgroup gv_tugOfWarEscortTargetUnitGroup;
unit gv_tugOfWarBubbleUnit;
unit gv_p02_SuperWarpGate;
unit gv_p03_SuperWarpGate;
unit gv_p04_SuperWarpGate;
unit gv_p05_SuperWarpGate;
unit gv_p06_SuperWarpGate;
string gv_mapMusicTrack;
playergroup gv_enemyPlayerGroup;
int gv_tugOfWar_State;
int gv_tugOfWar_StateBeforePause;
int gv_tugOfWar_ForwardWaypoint;
int gv_tugOfWar_ReverseWaypoint;
fixed gv_tugOfWar_ForwardSpeed;
fixed gv_tugOfWar_ReverseSpeed;
int gv_tugOfWar_Ping;
timer gv_losingGroundTimer01;
timer gv_losingGroundTimer02;
int gv_tugOfWarLosingGround01Count;
int gv_tugOfWarLosingGround02Count;
int gv_tugOfWarDefeatImmimentCount;
unit gv_slaynElemental01;
unit gv_slaynElemental02;
unit gv_slaynElemental03;
int gv_elementalMaxDisableTargets;
int[65] gv_waveData;
int gv_waveGroupIndex;
int gv_waveGroupUBound;
unitgroup gv_lastReplacedWithWarpInGroup;
int[65] gv_specialWaveData;
int gv_specialWaveGroupIndex;
int gv_specialWaveGroupUBound;
int gv_specialEscortTransmissionIterator;
int gv_bestForwardPushTime;
int gv_nexusesDestroyed;
int gv_malashEscortsKilled;
unitgroup gv_malashEscortGroup;
unitgroup gv_alarakEscortGroup;
bool gv_alarakPushedBack;
int gv_objectiveDestroyZergBase;
int gv_objectiveDestroyZergBase3;
int gv_objectiveRescueStalkers;
int gv_objectiveElementalsKilledCount;
int gv_objectiveElementalsMax;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicAlarak;
unit gv_cinematicMalash;
unit gv_cinematicDuelBubble;
unitgroup gv_cinematicPlayerGroup;
unitgroup gv_cinematicEnemyGroup;
actor gv_cinematicReticleActor;
int gv_cinematicReticleTextTag;
unitgroup gv_introPlayersUnits;
unitgroup gv_introEnemyUnits;

void InitGlobals () {
    gv_alarak = UnitFromId(240);
    gv_malash = UnitFromId(1198);
    gv_tugOfWarEscortTargetUnit = UnitFromId(949);
    gv_tugOfWarEscortTargetUnitGroup = UnitGroupEmpty();
    gv_tugOfWarBubbleUnit = UnitFromId(1236);
    gv_p02_SuperWarpGate = UnitFromId(856);
    gv_p03_SuperWarpGate = UnitFromId(855);
    gv_p04_SuperWarpGate = UnitFromId(58);
    gv_p05_SuperWarpGate = UnitFromId(1240);
    gv_p06_SuperWarpGate = UnitFromId(312);
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_tugOfWar_State = ge_PRESETTugOfWarState_Paused;
    gv_tugOfWar_ForwardSpeed = 0.5;
    gv_tugOfWar_ReverseSpeed = 0.25;
    gv_tugOfWar_Ping = c_invalidPingId;
    gv_losingGroundTimer01 = TimerCreate();
    gv_losingGroundTimer02 = TimerCreate();
    gv_slaynElemental01 = UnitFromId(94);
    gv_slaynElemental02 = UnitFromId(1276);
    gv_slaynElemental03 = UnitFromId(335);
    gv_lastReplacedWithWarpInGroup = UnitGroupEmpty();
    gv_malashEscortGroup = UnitGroupEmpty();
    gv_alarakEscortGroup = UnitGroupEmpty();
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveElementalsMax = 3;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPlayerGroup = UnitGroupEmpty();
    gv_cinematicEnemyGroup = UnitGroupEmpty();
    gv_cinematicReticleTextTag = c_textTagNone;
    gv_introPlayersUnits = UnitGroupEmpty();
    gv_introEnemyUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
unit gf_ToughestUnitinUnitGroup (unitgroup lp_unitGroup);
void gf_UpdateWaveGroupPing (unitgroup lp_unitGroup, int lp_ping);
string gf_FormatIntegerIntoMultiDigitString (int lp_integer, int lp_digits);
unitgroup gf_GetFriendlyUnitsNearAlarak ();
unitgroup gf_GetEnemyUnitsNearMalash ();
void gf_RunSlaynElementalAI (unit lp_cHOSEN_UNIT, region lp_cHOSEN_REGION, int lp_wAYPOINT_MAX);
void gf_ReplaceWithWarpIn (unitgroup lp_newUnits, region lp_region, int lp_owner);
void gf_CreateWarpInEffect (unit lp_unit);
region gf_GetWarpInRegion ();
void gf_HybridDominatorAI (unit lp_hybrid);
void gf_HybridBehemothAI (unit lp_hybrid);
void gf_OrderPowerStruggle (abilcmd lp_order, point lp_point);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGameQ;
trigger gt_TalDarimPylonDies;
trigger gt_EncourageExpansionQ;
trigger gt_PlayerReachesMidPointProgressSave;
trigger gt_RevealFinalBaseQ;
trigger gt_TugOfWarInitialize;
trigger gt_TugOfWarController;
trigger gt_TugOfWarStateUpdate;
trigger gt_TugOfWarSpeedUpdates;
trigger gt_TugOfWarMoveBossTarget;
trigger gt_TugOfWarAlarakMalashAttackLogic;
trigger gt_TugOfWarFirstTimePlayerAtTugOfWarQ;
trigger gt_TugOfWarFirstTimeEnemyAtTugOfWarQ;
trigger gt_TugOfWarLosingGround01WarningQ;
trigger gt_TugOfWarLosingGround02WarningQ;
trigger gt_TugOfWarDefeatImminentWarningQ;
trigger gt_TugOfWarVictoryImminentQ;
trigger gt_RevealBonusObjectiveQ;
trigger gt_PlayerLeavesBonusObjectiveReveal;
trigger gt_BonusObjectiveTimedReveal;
trigger gt_SlaynElemental01KilledQ;
trigger gt_SlaynElemental02KilledQ;
trigger gt_SlaynElemental03KilledQ;
trigger gt_CritterDies;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_UnitSuperWarpedIn;
trigger gt_InitWaveDataVariable;
trigger gt_AIReplaceWithWarpIn;
trigger gt_HybridDominatorIsCreated;
trigger gt_HybridBehemothIsCreated;
trigger gt_InitSpecialWaveDataVariable;
trigger gt_AIReplaceWithWarpInSpecial;
trigger gt_SpecialEscortWave01Q;
trigger gt_SpecialEscortWave02Q;
trigger gt_SpecialEscortWave03Q;
trigger gt_SpecialEscortWave04Q;
trigger gt_SpecialEscortWave05RepeatableQ;
trigger gt_AttackWave01Q;
trigger gt_AttackWave04Q;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryProtectRitualCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StatForwardPushTime;
trigger gt_StatMalashEscortsKilled;
trigger gt_MalashEscortsAddToGroup;
trigger gt_StatAchievementEnemyNexusesDestroyed;
trigger gt_AchievementAlarakEscortCount;
trigger gt_AlarakEscortsAddToGroup;
trigger gt_AlarakEscortsRemoveFromGroup;
trigger gt_TipReadyQ;
trigger gt_ObjectiveKillMalashCreate;
trigger gt_ObjectiveKillMalashComplete;
trigger gt_ObjectiveKillMalashFailed;
trigger gt_ObjectiveAlarakMustSurviveCreate;
trigger gt_ObjectiveAlarakMustSurviveComplete;
trigger gt_ObjectiveAlarakMustSurviveFailed;
trigger gt_ObjectiveKillSlaynElementalsCreate;
trigger gt_ObjectiveKillSlaynElementalsComplete;
trigger gt_ObjectiveKillSlaynElementalsUpdate;
trigger gt_ObjectiveKillSlaynElementalsFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_CreateIntroPlayerUnits;
trigger gt_CreateIntroEnemyUnits;
trigger gt_EngageIntroUnits;
trigger gt_IntroAlarakMalashAttackLogic;
trigger gt_IntroAlarakRegenAura;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryCreateSpectators1;
trigger gt_VictoryCreateSpectators2;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiCD8186A4") { aiCD8186A4_start(p); }
    if (cai_playerAI[p] == "aiD987C1BA") { aiD987C1BA_start(p); }
    if (cai_playerAI[p] == "aiED17EBAC") { aiED17EBAC_start(p); }
    if (cai_playerAI[p] == "ai12D88597") { ai12D88597_start(p); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { ai3CC6BC9D_start(p); }
    if (cai_playerAI[p] == "aiD606BE98") { aiD606BE98_start(p); }
    if (cai_playerAI[p] == "ai436B92E3") { ai436B92E3_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { aiCD8186A4_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiD987C1BA") { aiD987C1BA_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiED17EBAC") { aiED17EBAC_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai12D88597") { ai12D88597_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { ai3CC6BC9D_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiD606BE98") { aiD606BE98_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai436B92E3") { ai436B92E3_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { return aiCD8186A4_getCustomData(p); }
    if (cai_playerAI[p] == "aiD987C1BA") { return aiD987C1BA_getCustomData(p); }
    if (cai_playerAI[p] == "aiED17EBAC") { return aiED17EBAC_getCustomData(p); }
    if (cai_playerAI[p] == "ai12D88597") { return ai12D88597_getCustomData(p); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { return ai3CC6BC9D_getCustomData(p); }
    if (cai_playerAI[p] == "aiD606BE98") { return aiD606BE98_getCustomData(p); }
    if (cai_playerAI[p] == "ai436B92E3") { return ai436B92E3_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { return aiCD8186A4_getLastWave(p); }
    if (cai_playerAI[p] == "aiD987C1BA") { return aiD987C1BA_getLastWave(p); }
    if (cai_playerAI[p] == "aiED17EBAC") { return aiED17EBAC_getLastWave(p); }
    if (cai_playerAI[p] == "ai12D88597") { return ai12D88597_getLastWave(p); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { return ai3CC6BC9D_getLastWave(p); }
    if (cai_playerAI[p] == "aiD606BE98") { return aiD606BE98_getLastWave(p); }
    if (cai_playerAI[p] == "ai436B92E3") { return ai436B92E3_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { aiCD8186A4_waves_run(p, target); }
    if (cai_playerAI[p] == "aiD987C1BA") { aiD987C1BA_waves_run(p, target); }
    if (cai_playerAI[p] == "aiED17EBAC") { aiED17EBAC_waves_run(p, target); }
    if (cai_playerAI[p] == "ai12D88597") { ai12D88597_waves_run(p, target); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { ai3CC6BC9D_waves_run(p, target); }
    if (cai_playerAI[p] == "aiD606BE98") { aiD606BE98_waves_run(p, target); }
    if (cai_playerAI[p] == "ai436B92E3") { ai436B92E3_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { aiCD8186A4_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiD987C1BA") { aiD987C1BA_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiED17EBAC") { aiED17EBAC_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai12D88597") { ai12D88597_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { ai3CC6BC9D_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiD606BE98") { aiD606BE98_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai436B92E3") { ai436B92E3_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiCD8186A4") { aiCD8186A4_waves_stop(); }
    if (ai == "aiD987C1BA") { aiD987C1BA_waves_stop(); }
    if (ai == "aiED17EBAC") { aiED17EBAC_waves_stop(); }
    if (ai == "ai12D88597") { ai12D88597_waves_stop(); }
    if (ai == "ai3CC6BC9D") { ai3CC6BC9D_waves_stop(); }
    if (ai == "aiD606BE98") { aiD606BE98_waves_stop(); }
    if (ai == "ai436B92E3") { ai436B92E3_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { aiCD8186A4_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiD987C1BA") { aiD987C1BA_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiED17EBAC") { aiED17EBAC_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai12D88597") { ai12D88597_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { ai3CC6BC9D_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiD606BE98") { aiD606BE98_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai436B92E3") { ai436B92E3_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { aiCD8186A4_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiD987C1BA") { aiD987C1BA_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiED17EBAC") { aiED17EBAC_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai12D88597") { ai12D88597_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { ai3CC6BC9D_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiD606BE98") { aiD606BE98_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai436B92E3") { ai436B92E3_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { return aiCD8186A4_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiD987C1BA") { return aiD987C1BA_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiED17EBAC") { return aiED17EBAC_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai12D88597") { return ai12D88597_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { return ai3CC6BC9D_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiD606BE98") { return aiD606BE98_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai436B92E3") { return ai436B92E3_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { return aiCD8186A4_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiD987C1BA") { return aiD987C1BA_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiED17EBAC") { return aiED17EBAC_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai12D88597") { return ai12D88597_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { return ai3CC6BC9D_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiD606BE98") { return aiD606BE98_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai436B92E3") { return ai436B92E3_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCD8186A4") { return aiCD8186A4_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiD987C1BA") { return aiD987C1BA_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiED17EBAC") { return aiED17EBAC_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai12D88597") { return ai12D88597_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai3CC6BC9D") { return ai3CC6BC9D_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiD606BE98") { return aiD606BE98_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai436B92E3") { return ai436B92E3_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiCD8186A4", 2);
    cai_start("aiD987C1BA", 3);
    cai_start("aiED17EBAC", 4);
    cai_start("ai12D88597", 5);
    cai_start("ai3CC6BC9D", 7);
    cai_start("aiD606BE98", 8);
    cai_start("ai436B92E3", 9);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(9, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
unit gf_ToughestUnitinUnitGroup (unitgroup lp_unitGroup) {
    // Variable Declarations
    int lv_unitCount;
    unit lv_currentUnit;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    int auto3EB3958E_ae;
    int auto3EB3958E_var;

    // Variable Initialization

    // Implementation
    lv_unitCount = UnitGroupCount(lp_unitGroup, c_unitCountAlive);
    if ((lv_unitCount == 0)) {
        lv_targetUnit = null;
    }
    else if ((lv_unitCount == 1)) {
        lv_targetUnit = UnitGroupUnit(lp_unitGroup, 1);
    }
    else if ((lv_unitCount > 1)) {
        lv_targetUnit = UnitGroupUnit(lp_unitGroup, 1);
        auto3EB3958E_ae = lv_unitCount;
        auto3EB3958E_var = 2;
        for ( ; auto3EB3958E_var <= auto3EB3958E_ae; auto3EB3958E_var += 1 ) {
            lv_currentUnit = UnitGroupUnit(lp_unitGroup, auto3EB3958E_var);
            if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropVitality, c_unitPropCurrent) > UnitGetPropertyFixed(lv_targetUnit, c_unitPropVitality, c_unitPropCurrent))) {
                lv_targetUnit = lv_currentUnit;
            }
            else {
                lv_currentUnit = null;
            }
        }
    }
    return lv_targetUnit;
}

trigger auto_gf_UpdateWaveGroupPing_Trigger = null;
unitgroup auto_gf_UpdateWaveGroupPing_lp_unitGroup;
int auto_gf_UpdateWaveGroupPing_lp_ping;

void gf_UpdateWaveGroupPing (unitgroup lp_unitGroup, int lp_ping) {
    auto_gf_UpdateWaveGroupPing_lp_unitGroup = lp_unitGroup;
    auto_gf_UpdateWaveGroupPing_lp_ping = lp_ping;

    if (auto_gf_UpdateWaveGroupPing_Trigger == null) {
        auto_gf_UpdateWaveGroupPing_Trigger = TriggerCreate("auto_gf_UpdateWaveGroupPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateWaveGroupPing_Trigger, false, false);
}

bool auto_gf_UpdateWaveGroupPing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_UpdateWaveGroupPing_lp_unitGroup;
    int lp_ping = auto_gf_UpdateWaveGroupPing_lp_ping;

    // Automatic Variable Declarations
    // Implementation
    while ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) > 0)) {
        PingSetPosition(lp_ping, UnitGroupCenterOfGroup(lp_unitGroup));
        Wait(0.25, c_timeGame);
    }
    PingDestroy(lp_ping);
    return true;
}

string gf_FormatIntegerIntoMultiDigitString (int lp_integer, int lp_digits) {
    // Variable Declarations
    int lv_i;
    string lv_intString;

    // Automatic Variable Declarations
    int autoE7A604C4_ae;
    const int autoE7A604C4_ai = 1;

    // Variable Initialization
    lv_intString = IntToString(lp_integer);

    // Implementation
    autoE7A604C4_ae = lp_digits;
    lv_i = StringLength(lv_intString);
    for ( ; ( (autoE7A604C4_ai >= 0 && lv_i <= autoE7A604C4_ae) || (autoE7A604C4_ai < 0 && lv_i >= autoE7A604C4_ae) ) ; lv_i += autoE7A604C4_ai ) {
        lv_intString = ("0" + lv_intString);
    }
    return lv_intString;
}

unitgroup gf_GetFriendlyUnitsNearAlarak () {
    // Variable Declarations
    unitgroup lv_friendlyUnitsNearTugOfWar;

    // Automatic Variable Declarations
    unitgroup autoA3E30428_g;
    int autoA3E30428_u;
    unit autoA3E30428_var;
    unitgroup auto28BBCA79_g;
    int auto28BBCA79_u;
    unit auto28BBCA79_var;

    // Variable Initialization
    lv_friendlyUnitsNearTugOfWar = UnitGroupEmpty();

    // Implementation
    autoA3E30428_g = UnitGroup("FenixSOA", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_alarak), 13.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA3E30428_u = UnitGroupCount(autoA3E30428_g, c_unitCountAll);
    for (;; autoA3E30428_u -= 1) {
        autoA3E30428_var = UnitGroupUnitFromEnd(autoA3E30428_g, autoA3E30428_u);
        if (autoA3E30428_var == null) { break; }
        UnitGroupAdd(lv_friendlyUnitsNearTugOfWar, autoA3E30428_var);
    }
    auto28BBCA79_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_alarak), 13.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto28BBCA79_u = UnitGroupCount(auto28BBCA79_g, c_unitCountAll);
    for (;; auto28BBCA79_u -= 1) {
        auto28BBCA79_var = UnitGroupUnitFromEnd(auto28BBCA79_g, auto28BBCA79_u);
        if (auto28BBCA79_var == null) { break; }
        if ((auto28BBCA79_var != gv_alarak) && (UnitHasBehavior2(auto28BBCA79_var, "PitAlarakShieldRegen") == true)) {
            UnitGroupAdd(lv_friendlyUnitsNearTugOfWar, auto28BBCA79_var);
        }

    }
    return lv_friendlyUnitsNearTugOfWar;
}

unitgroup gf_GetEnemyUnitsNearMalash () {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearTugOfWar;

    // Automatic Variable Declarations
    unitgroup auto2856A257_g;
    int auto2856A257_u;
    unit auto2856A257_var;

    // Variable Initialization
    lv_enemyUnitsNearTugOfWar = UnitGroupEmpty();

    // Implementation
    auto2856A257_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_malash), 13.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2856A257_u = UnitGroupCount(auto2856A257_g, c_unitCountAll);
    for (;; auto2856A257_u -= 1) {
        auto2856A257_var = UnitGroupUnitFromEnd(auto2856A257_g, auto2856A257_u);
        if (auto2856A257_var == null) { break; }
        if ((auto2856A257_var != gv_malash) && (UnitGetType(auto2856A257_var) != "Observer") && (UnitHasBehavior2(auto2856A257_var, "PitMalashShieldRegen") == true)) {
            UnitGroupAdd(lv_enemyUnitsNearTugOfWar, auto2856A257_var);
        }

    }
    return lv_enemyUnitsNearTugOfWar;
}

trigger auto_gf_RunSlaynElementalAI_Trigger = null;
unit auto_gf_RunSlaynElementalAI_lp_cHOSEN_UNIT;
region auto_gf_RunSlaynElementalAI_lp_cHOSEN_REGION;
int auto_gf_RunSlaynElementalAI_lp_wAYPOINT_MAX;

void gf_RunSlaynElementalAI (unit lp_cHOSEN_UNIT, region lp_cHOSEN_REGION, int lp_wAYPOINT_MAX) {
    auto_gf_RunSlaynElementalAI_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;
    auto_gf_RunSlaynElementalAI_lp_cHOSEN_REGION = lp_cHOSEN_REGION;
    auto_gf_RunSlaynElementalAI_lp_wAYPOINT_MAX = lp_wAYPOINT_MAX;

    if (auto_gf_RunSlaynElementalAI_Trigger == null) {
        auto_gf_RunSlaynElementalAI_Trigger = TriggerCreate("auto_gf_RunSlaynElementalAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunSlaynElementalAI_Trigger, false, false);
}

bool auto_gf_RunSlaynElementalAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_RunSlaynElementalAI_lp_cHOSEN_UNIT;
    region lp_cHOSEN_REGION = auto_gf_RunSlaynElementalAI_lp_cHOSEN_REGION;
    int lp_wAYPOINT_MAX = auto_gf_RunSlaynElementalAI_lp_wAYPOINT_MAX;

    // Variable Declarations
    string lv_pathWaypointString;
    int lv_pathWaypointIndex;
    int lv_faceSuckedUnits;
    unitgroup lv_faceSuckerCandidates;

    // Automatic Variable Declarations
    unit auto01FBA150_val;
    unitgroup auto1AEC9506_g;
    int auto1AEC9506_u;
    unit auto1AEC9506_var;
    unitgroup autoDDD5729F_g;
    int autoDDD5729F_u;
    unit autoDDD5729F_var;

    // Variable Initialization
    lv_pathWaypointString = "";
    lv_pathWaypointIndex = 1;
    lv_faceSuckerCandidates = UnitGroupEmpty();

    // Implementation
    auto01FBA150_val = lp_cHOSEN_UNIT;
    if (auto01FBA150_val == gv_slaynElemental01) {
        lv_pathWaypointString = "Zoanthisk01_Path_0";
    }
    else if (auto01FBA150_val == gv_slaynElemental02) {
        lv_pathWaypointString = "Zoanthisk02_Path_0";
    }
    else if (auto01FBA150_val == gv_slaynElemental03) {
        lv_pathWaypointString = "Zoanthisk03_Path_0";
    }
    else {
        return true;
    }
    while ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_cHOSEN_UNIT) == true)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_cHOSEN_UNIT), PointFromName((lv_pathWaypointString + IntToString(lv_pathWaypointIndex)))) <= 1)) {
                if ((lv_pathWaypointIndex >= lp_wAYPOINT_MAX)) {
                    lv_pathWaypointIndex = 1;
                }
                else {
                    lv_pathWaypointIndex += 1;
                }
            }

            lv_faceSuckedUnits = 0;
            lv_faceSuckerCandidates = UnitGroupEmpty();
            auto1AEC9506_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1AEC9506_u = UnitGroupCount(auto1AEC9506_g, c_unitCountAll);
            for (;; auto1AEC9506_u -= 1) {
                auto1AEC9506_var = UnitGroupUnitFromEnd(auto1AEC9506_g, auto1AEC9506_u);
                if (auto1AEC9506_var == null) { break; }
                if ((UnitHasBehavior2(auto1AEC9506_var, "SlaynElementalGrabStun") == true)) {
                    lv_faceSuckedUnits += 1;
                }
                else {
                    UnitGroupAdd(lv_faceSuckerCandidates, auto1AEC9506_var);
                }
            }
            autoDDD5729F_g = UnitGroup("SlaynSwarmHostSpawnFlyer", c_playerAny, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoDDD5729F_u = UnitGroupCount(autoDDD5729F_g, c_unitCountAll);
            for (;; autoDDD5729F_u -= 1) {
                autoDDD5729F_var = UnitGroupUnitFromEnd(autoDDD5729F_g, autoDDD5729F_u);
                if (autoDDD5729F_var == null) { break; }
                if ((UnitHasBehavior2(autoDDD5729F_var, "SlaynElementalGrabStun") == true)) {
                    lv_faceSuckedUnits += 1;
                }
                else {
                    UnitGroupAdd(lv_faceSuckerCandidates, autoDDD5729F_var);
                }
            }
            if ((lv_faceSuckedUnits < gv_elementalMaxDisableTargets) && (UnitGroupCount(lv_faceSuckerCandidates, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingUnit(AbilityCommand("SlaynElementalGrab", 0), UnitGroupRandomUnit(lv_faceSuckerCandidates, c_unitCountAlive)), c_orderQueueReplace);
            }

            UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_pathWaypointString + IntToString(lv_pathWaypointIndex)))), c_orderQueueAddToEnd);
        }

        Wait(libLotv_gf_DifficultyValueFixed2(2.0, 2.0, 1.5, 1.5), c_timeAI);
    }
    return true;
}

void gf_ReplaceWithWarpIn (unitgroup lp_newUnits, region lp_region, int lp_owner) {
    // Variable Declarations
    unit lv_superWarpGate;
    abilcmd lv_warpInType;
    region lv_warpInRegion;
    string lv_pickedUnitType;

    // Automatic Variable Declarations
    int auto5CD846C6_val;
    unitgroup autoF7666C8C_g;
    int autoF7666C8C_u;
    unit autoF7666C8C_var;
    string autoB76ABA75_val;

    // Variable Initialization

    // Implementation
    gv_lastReplacedWithWarpInGroup = UnitGroupEmpty();
    lv_warpInRegion = gf_GetWarpInRegion();
    auto5CD846C6_val = lp_owner;
    if (auto5CD846C6_val == 2) {
        lv_superWarpGate = gv_p02_SuperWarpGate;
    }
    else if (auto5CD846C6_val == 3) {
        lv_superWarpGate = gv_p03_SuperWarpGate;
    }
    else if (auto5CD846C6_val == 4) {
        lv_superWarpGate = gv_p04_SuperWarpGate;
    }
    else if (auto5CD846C6_val == 5) {
        lv_superWarpGate = gv_p05_SuperWarpGate;
    }
    else if (auto5CD846C6_val == 6) {
        lv_superWarpGate = gv_p06_SuperWarpGate;
    }
    else {
    }
    autoF7666C8C_g = lp_newUnits;
    autoF7666C8C_u = UnitGroupCount(autoF7666C8C_g, c_unitCountAll);
    for (;; autoF7666C8C_u -= 1) {
        autoF7666C8C_var = UnitGroupUnitFromEnd(autoF7666C8C_g, autoF7666C8C_u);
        if (autoF7666C8C_var == null) { break; }
        lv_pickedUnitType = UnitGetType(autoF7666C8C_var);
        lv_warpInType = null;
        autoB76ABA75_val = lv_pickedUnitType;
        if (autoB76ABA75_val == "Zealot") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 0);
        }
        else if (autoB76ABA75_val == "Stalker") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 1);
        }
        else if (autoB76ABA75_val == "Sentry") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 5);
        }
        else if (autoB76ABA75_val == "HighTemplar") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 3);
        }
        else if (autoB76ABA75_val == "DarkTemplar") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 4);
        }
        else if (autoB76ABA75_val == "Immortal") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 2);
        }
        else if (autoB76ABA75_val == "Colossus") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 15);
        }
        else if (autoB76ABA75_val == "Phoenix") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 7);
        }
        else if (autoB76ABA75_val == "Scout") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 14);
        }
        else if (autoB76ABA75_val == "VoidRay") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 8);
        }
        else if (autoB76ABA75_val == "Carrier") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrain", 6);
        }
        else if (autoB76ABA75_val == "Tempest") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrainVoid", 0);
        }
        else if (autoB76ABA75_val == "Oracle") {
            lv_warpInType = AbilityCommand("SuperWarpGateTrainVoid", 1);
        }
        else {
        }
        UnitRemove(autoF7666C8C_var);
        if ((lv_warpInType != null)) {
            UnitIssueOrder(lv_superWarpGate, OrderTargetingPoint(lv_warpInType, RegionRandomPoint(lp_region)), c_orderQueueReplace);
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_pickedUnitType, 0, lp_owner, RegionRandomPoint(lp_region));
            UnitGroupAdd(gv_lastReplacedWithWarpInGroup, UnitLastCreated());
            gf_CreateWarpInEffect(UnitLastCreated());
        }
    }
}

trigger auto_gf_CreateWarpInEffect_Trigger = null;
unit auto_gf_CreateWarpInEffect_lp_unit;

void gf_CreateWarpInEffect (unit lp_unit) {
    auto_gf_CreateWarpInEffect_lp_unit = lp_unit;

    if (auto_gf_CreateWarpInEffect_Trigger == null) {
        auto_gf_CreateWarpInEffect_Trigger = TriggerCreate("auto_gf_CreateWarpInEffect_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateWarpInEffect_Trigger, false, false);
}

bool auto_gf_CreateWarpInEffect_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateWarpInEffect_lp_unit;

    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "attack", false);
    if (((UnitGetType(lp_unit) == "HybridDestroyer") || (UnitGetType(lp_unit) == "HybridDominatorVoid") || (UnitGetType(lp_unit) == "HybridReaver") || (UnitGetType(lp_unit) == "HybridBehemoth") || (UnitGetType(lp_unit) == "HybridNemesis"))) {
        libNtve_gf_AttachModelToUnit(lp_unit, "HybridWarpInEffect", "Ref_Center");
    }
    else {
        libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Center");
    }
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(5.0, c_timeGame);
    libNtve_gf_KillModel(lv_model);
    UnitAbilityEnable(lp_unit, "move", true);
    UnitAbilityEnable(lp_unit, "attack", true);
    return true;
}

region gf_GetWarpInRegion () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_tugOfWar_ForwardWaypoint < 7) && (UnitGroupCount(UnitGroup("InvisiblePylon", gv_pLAYER_02_TALDARIM, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        return RegionFromId(31);
    }
    else if ((gv_tugOfWar_ForwardWaypoint < 16) && (UnitGroupCount(UnitGroup("InvisiblePylon", gv_pLAYER_02_TALDARIM, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        return RegionFromId(30);
    }
    else if (((UnitGroupCount(UnitGroup("InvisiblePylon", gv_pLAYER_02_TALDARIM, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Pylon", gv_pLAYER_02_TALDARIM, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        return RegionFromId(32);
    }
    return RegionFromId(25);
}

trigger auto_gf_HybridDominatorAI_Trigger = null;
unit auto_gf_HybridDominatorAI_lp_hybrid;

void gf_HybridDominatorAI (unit lp_hybrid) {
    auto_gf_HybridDominatorAI_lp_hybrid = lp_hybrid;

    if (auto_gf_HybridDominatorAI_Trigger == null) {
        auto_gf_HybridDominatorAI_Trigger = TriggerCreate("auto_gf_HybridDominatorAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridDominatorAI_Trigger, false, false);
}

bool auto_gf_HybridDominatorAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridDominatorAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_enemyGroup9;
    unit lv_lastAttacker;
    int lv_targetCount;
    point lv_targetPoint;

    // Automatic Variable Declarations
    int autoDA7F0632_ae;
    int autoDA7F0632_var;

    // Variable Initialization
    lv_enemyGroup9 = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_hybrid) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_lastAttacker = AILastAttacker(lp_hybrid);
        lv_enemyGroup9 = UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hybrid), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), c_cmdStateCooldown) == false)) {
            if ((UnitGroupCount(lv_enemyGroup9, c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), gf_ToughestUnitinUnitGroup(lv_enemyGroup9)));
            }
            else {
                if ((UnitIsAlive(lv_lastAttacker) == true) && (UnitGetType(lv_lastAttacker) == "PhotonCannon") && (DistanceBetweenPoints(UnitGetPosition(lp_hybrid), UnitGetPosition(lv_lastAttacker)) <= 9.0)) {
                    libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), lv_lastAttacker));
                }

            }
        }

        lv_targetCount = UnitGroupCount(lv_enemyGroup9, c_unitCountAlive);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridDominatorVoidPsiStorm", 0), c_cmdStateCooldown) == false) && (lv_targetCount >= 3)) {
            autoDA7F0632_ae = lv_targetCount;
            autoDA7F0632_var = 1;
            for ( ; autoDA7F0632_var <= autoDA7F0632_ae; autoDA7F0632_var += 1 ) {
                lv_targetPoint = UnitGetPosition(UnitGroupUnit(lv_enemyGroup9, autoDA7F0632_var));
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(lv_targetPoint, 2.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 3)) {
                    libNtve_gf_AICast(lp_hybrid, OrderTargetingPoint(AbilityCommand("HybridDominatorVoidPsiStorm", 0), lv_targetPoint));
                    break;
                }
                else {
                    lv_targetPoint = null;
                }
            }
        }

        lv_enemyGroup9 = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_HybridBehemothAI_Trigger = null;
unit auto_gf_HybridBehemothAI_lp_hybrid;

void gf_HybridBehemothAI (unit lp_hybrid) {
    auto_gf_HybridBehemothAI_lp_hybrid = lp_hybrid;

    if (auto_gf_HybridBehemothAI_Trigger == null) {
        auto_gf_HybridBehemothAI_Trigger = TriggerCreate("auto_gf_HybridBehemothAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBehemothAI_Trigger, false, false);
}

bool auto_gf_HybridBehemothAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridBehemothAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_consumeDNATargets;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_consumeDNATargets = UnitGroupEmpty();

    // Implementation
    while (true) {
        lv_consumeDNATargets = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_hybrid), 6.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitIsAlive(lp_hybrid) == true) && (UnitGroupCount(lv_consumeDNATargets, c_unitCountAlive) >= 1)) {
            libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("ConsumeDNA", 0), UnitGroupClosestToPoint(lv_consumeDNATargets, UnitGetPosition(lp_hybrid))));
        }

        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lp_hybrid) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_hybrid), 7.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
            libNtve_gf_AICast(lp_hybrid, Order(AbilityCommand("HybridFAoEStun", 0)));
        }

        Wait(1.0, c_timeAI);
        if (((UnitIsAlive(lp_hybrid) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

    }
    return true;
}

void gf_OrderPowerStruggle (abilcmd lp_order, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(gv_cinematicAlarak, OrderTargetingPoint(lp_order, lp_point), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicMalash, OrderTargetingPoint(lp_order, lp_point), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicDuelBubble, OrderTargetingPoint(lp_order, lp_point), c_orderQueueReplace);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PTaldarim02");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_InitWaveDataVariable, true, false);
    TriggerExecute(gt_InitSpecialWaveDataVariable, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE95D56D5_g;
    int autoE95D56D5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_ALARAK, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_08_MALASH, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_09_ELEMENTAL, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_07_ALARAK, gv_pLAYER_08_MALASH, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_07_ALARAK, gv_pLAYER_09_ELEMENTAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_08_MALASH, gv_pLAYER_09_ELEMENTAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_MALASH, "DarkProtoss", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_TALDARIM, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_TALDARIM, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_TALDARIM, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_TALDARIM, "HeroicShieldCleanUp", 1);
    PlayerSetColorIndex(gv_pLAYER_07_ALARAK, 7, true);
    PlayerSetColorIndex(gv_pLAYER_08_MALASH, 3, true);
    PlayerSetColorIndex(gv_pLAYER_09_ELEMENTAL, 1, true);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 300);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_TALDARIM);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_03_TALDARIM);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_04_TALDARIM);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_05_TALDARIM);
    autoE95D56D5_g = gv_enemyPlayerGroup;
    autoE95D56D5_var = -1;
    while (true) {
        autoE95D56D5_var = PlayerGroupNextPlayer(autoE95D56D5_g, autoE95D56D5_var);
        if (autoE95D56D5_var < 0) { break; }
        libNtve_gf_SetAlliance(autoE95D56D5_var, gv_pLAYER_03_TALDARIM, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoE95D56D5_var, gv_pLAYER_04_TALDARIM, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoE95D56D5_var, gv_pLAYER_05_TALDARIM, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(autoE95D56D5_var, gv_pLAYER_07_ALARAK, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(autoE95D56D5_var, gv_pLAYER_08_MALASH, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(autoE95D56D5_var, gv_pLAYER_09_ELEMENTAL, libNtve_ge_AllianceSetting_Neutral);
        PlayerModifyPropertyInt(autoE95D56D5_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(autoE95D56D5_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(autoE95D56D5_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
        libNtve_gf_SetUpgradeLevelForPlayer(autoE95D56D5_var, "DarkProtoss", 1);
        PlayerApplySkin(autoE95D56D5_var, "TaldarimSkin", true);
        PlayerSetColorIndex(autoE95D56D5_var, 1, true);
    }
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7C2FE287_g;
    int auto7C2FE287_u;
    unit auto7C2FE287_var;
    unitgroup auto9DD72EE7_g;
    int auto9DD72EE7_u;
    unit auto9DD72EE7_var;
    unitgroup auto72BBFE91_g;
    int auto72BBFE91_u;
    unit auto72BBFE91_var;
    unitgroup autoABC5387E_g;
    int autoABC5387E_u;
    unit autoABC5387E_var;
    unitgroup autoEB7E5006_g;
    int autoEB7E5006_u;
    unit autoEB7E5006_var;
    unitgroup auto4850350B_g;
    int auto4850350B_u;
    unit auto4850350B_var;
    unitgroup autoF3024CB7_g;
    int autoF3024CB7_u;
    unit autoF3024CB7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_alarak, c_unitPropMovementSpeed, 0.5);
    libNtve_gf_ChangeUnitDamage(gv_alarak, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_alarak, c_unitStateTargetable, false);
    UnitSetState(gv_alarak, c_unitStateStatusBar, false);
    UnitSetState(gv_alarak, c_unitStateTurnSuppressed, false);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_alarak, null, StringExternal("Param/Value/CD1840F4"), null);
    UnitSetPropertyFixed(gv_malash, c_unitPropMovementSpeed, 0.75);
    libNtve_gf_ChangeUnitDamage(gv_malash, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_malash, c_unitStateTargetable, false);
    UnitSetState(gv_malash, c_unitStateStatusBar, false);
    UnitSetState(gv_malash, c_unitStateTurnSuppressed, false);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_malash, null, StringExternal("Param/Value/522743D3"), null);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    auto7C2FE287_g = UnitGroup("HighTemplar", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7C2FE287_u = UnitGroupCount(auto7C2FE287_g, c_unitCountAll);
    for (;; auto7C2FE287_u -= 1) {
        auto7C2FE287_var = UnitGroupUnitFromEnd(auto7C2FE287_g, auto7C2FE287_u);
        if (auto7C2FE287_var == null) { break; }
        UnitSetPropertyFixed(auto7C2FE287_var, c_unitPropEnergyPercent, 100.0);
    }
    UnitSetState(gv_tugOfWarEscortTargetUnit, c_unitStateTurnSuppressed, false);
    UnitSetFacing(gv_tugOfWarEscortTargetUnit, 135.0, 0.0);
    auto9DD72EE7_g = UnitGroup("Pylon", gv_pLAYER_02_TALDARIM, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9DD72EE7_u = UnitGroupCount(auto9DD72EE7_g, c_unitCountAll);
    for (;; auto9DD72EE7_u -= 1) {
        auto9DD72EE7_var = UnitGroupUnitFromEnd(auto9DD72EE7_g, auto9DD72EE7_u);
        if (auto9DD72EE7_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto9DD72EE7_var, true, gv_pLAYER_05_TALDARIM);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_05_TALDARIM, UnitGetPosition(auto9DD72EE7_var));
    }
    auto72BBFE91_g = UnitGroup("Pylon", gv_pLAYER_03_TALDARIM, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto72BBFE91_u = UnitGroupCount(auto72BBFE91_g, c_unitCountAll);
    for (;; auto72BBFE91_u -= 1) {
        auto72BBFE91_var = UnitGroupUnitFromEnd(auto72BBFE91_g, auto72BBFE91_u);
        if (auto72BBFE91_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto72BBFE91_var, true, gv_pLAYER_02_TALDARIM);
        libNtve_gf_ShareVisionofUnit(auto72BBFE91_var, true, gv_pLAYER_05_TALDARIM);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, UnitGetPosition(auto72BBFE91_var));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_05_TALDARIM, UnitGetPosition(auto72BBFE91_var));
    }
    autoABC5387E_g = UnitGroup("Pylon", gv_pLAYER_04_TALDARIM, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoABC5387E_u = UnitGroupCount(autoABC5387E_g, c_unitCountAll);
    for (;; autoABC5387E_u -= 1) {
        autoABC5387E_var = UnitGroupUnitFromEnd(autoABC5387E_g, autoABC5387E_u);
        if (autoABC5387E_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(autoABC5387E_var, true, gv_pLAYER_02_TALDARIM);
        libNtve_gf_ShareVisionofUnit(autoABC5387E_var, true, gv_pLAYER_05_TALDARIM);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, UnitGetPosition(autoABC5387E_var));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_05_TALDARIM, UnitGetPosition(autoABC5387E_var));
    }
    autoEB7E5006_g = UnitGroup("SlaynSwarmHostSpawnFlyer", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB7E5006_u = UnitGroupCount(autoEB7E5006_g, c_unitCountAll);
    for (;; autoEB7E5006_u -= 1) {
        autoEB7E5006_var = UnitGroupUnitFromEnd(autoEB7E5006_g, autoEB7E5006_u);
        if (autoEB7E5006_var == null) { break; }
        UnitBehaviorAdd(autoEB7E5006_var, "CritterWanderLeash", autoEB7E5006_var, 1);
        UnitBehaviorAdd(autoEB7E5006_var, "Harmless", autoEB7E5006_var, 1);
    }
    auto4850350B_g = UnitGroup("HybridBehemoth", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4850350B_u = UnitGroupCount(auto4850350B_g, c_unitCountAll);
    for (;; auto4850350B_u -= 1) {
        auto4850350B_var = UnitGroupUnitFromEnd(auto4850350B_g, auto4850350B_u);
        if (auto4850350B_var == null) { break; }
        gf_HybridBehemothAI(auto4850350B_var);
    }
    autoF3024CB7_g = UnitGroup("HybridDominatorVoid", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF3024CB7_u = UnitGroupCount(autoF3024CB7_g, c_unitCountAll);
    for (;; autoF3024CB7_u -= 1) {
        autoF3024CB7_var = UnitGroupUnitFromEnd(autoF3024CB7_g, autoF3024CB7_u);
        if (autoF3024CB7_var == null) { break; }
        gf_HybridDominatorAI(autoF3024CB7_var);
    }
    TriggerEnable(gt_HybridBehemothIsCreated, true);
    TriggerEnable(gt_HybridDominatorIsCreated, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PTaldarim02_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(1), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(1), gv_pLAYER_07_ALARAK);
    libLbty_gf_AutoRevealRegion(RegionFromId(16), RegionFromId(16), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(5), RegionFromId(5), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(33), gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2EF7DA4C_g;
    int auto2EF7DA4C_u;
    unit auto2EF7DA4C_var;
    playergroup autoABF4DE04_g;
    int autoABF4DE04_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_elementalMaxDisableTargets = libLotv_gf_DifficultyValueInt2(2, 2, 3, 4);
    auto2EF7DA4C_g = UnitGroup("SlaynElemental", gv_pLAYER_09_ELEMENTAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2EF7DA4C_u = UnitGroupCount(auto2EF7DA4C_g, c_unitCountAll);
    for (;; auto2EF7DA4C_u -= 1) {
        auto2EF7DA4C_var = UnitGroupUnitFromEnd(auto2EF7DA4C_g, auto2EF7DA4C_u);
        if (auto2EF7DA4C_var == null) { break; }
        UnitSetPropertyFixed(auto2EF7DA4C_var, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(1000.0, 1000.0, 1400.0, 1800.0));
        UnitSetPropertyFixed(auto2EF7DA4C_var, c_unitPropLifePercent, 100.0);
    }
    autoABF4DE04_g = gv_enemyPlayerGroup;
    autoABF4DE04_var = -1;
    while (true) {
        autoABF4DE04_var = PlayerGroupNextPlayer(autoABF4DE04_g, autoABF4DE04_var);
        if (autoABF4DE04_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(autoABF4DE04_var, "VoidRayBeamCanCharge", 1);
            TechTreeUpgradeAddLevel(autoABF4DE04_var, "ExtendedThermalLance", 1);
            TechTreeUpgradeAddLevel(autoABF4DE04_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoABF4DE04_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoABF4DE04_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoABF4DE04_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoABF4DE04_var, "ProtossShieldsLevel1", 1);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(autoABF4DE04_var, "CarrierLaunchSpeedUpgrade", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("PsychicDuel");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Tempest", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDominatorVoid", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridReaver", false, gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CF72EB02"), null, PointFromId(1559));
    TriggerExecute(gt_BonusObjectiveTimedReveal, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKillMalashCreate, true, false);
    TriggerExecute(gt_ObjectiveAlarakMustSurviveCreate, true, true);
    TriggerExecute(gt_TugOfWarInitialize, true, false);
    libVCMI_gf_CreateObjectivePing(true, PointFromId(882), StringExternal("Param/Value/F936CD59"));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00086", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tal'Darim Pylon Dies
//--------------------------------------------------------------------------------------------------
bool gt_TalDarimPylonDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC4832AB2_g;
    int autoC4832AB2_u;
    unit autoC4832AB2_var;
    unitgroup autoC790598B_g;
    int autoC790598B_u;
    unit autoC790598B_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_TALDARIM) || (UnitGetOwner(EventUnit()) == gv_pLAYER_03_TALDARIM) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_TALDARIM)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4832AB2_g = UnitGroup("InvisiblePylon", gv_pLAYER_02_TALDARIM, RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4832AB2_u = UnitGroupCount(autoC4832AB2_g, c_unitCountAll);
    for (;; autoC4832AB2_u -= 1) {
        autoC4832AB2_var = UnitGroupUnitFromEnd(autoC4832AB2_g, autoC4832AB2_u);
        if (autoC4832AB2_var == null) { break; }
        UnitRemove(autoC4832AB2_var);
    }
    autoC790598B_g = UnitGroup("InvisiblePylon", gv_pLAYER_05_TALDARIM, RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC790598B_u = UnitGroupCount(autoC790598B_g, c_unitCountAll);
    for (;; autoC790598B_u -= 1) {
        autoC790598B_var = UnitGroupUnitFromEnd(autoC790598B_g, autoC790598B_u);
        if (autoC790598B_var == null) { break; }
        UnitRemove(autoC790598B_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalDarimPylonDies_Init () {
    gt_TalDarimPylonDies = TriggerCreate("gt_TalDarimPylonDies_Func");
    TriggerAddEventUnitDied(gt_TalDarimPylonDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encourage Expansion Q
//--------------------------------------------------------------------------------------------------
bool gt_EncourageExpansionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueVoidBoolean(true, true, false, false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/33D81B48"), null, PointFromId(707));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(26), 6.0, false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(707), 2.0, Color(0.00, 100.00, 0.00));
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00137", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EncourageExpansionQ_Init () {
    gt_EncourageExpansionQ = TriggerCreate("gt_EncourageExpansionQ_Func");
    TriggerAddEventUnitRegion(gt_EncourageExpansionQ, UnitRefFromVariable("gv_alarak"), RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Reaches Mid Point Progress Save
//--------------------------------------------------------------------------------------------------
bool gt_PlayerReachesMidPointProgressSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/C0D783A9"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerReachesMidPointProgressSave_Init () {
    gt_PlayerReachesMidPointProgressSave = TriggerCreate("gt_PlayerReachesMidPointProgressSave_Func");
    TriggerAddEventUnitRegion(gt_PlayerReachesMidPointProgressSave, UnitRefFromVariable("gv_alarak"), RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Final Base Q
//--------------------------------------------------------------------------------------------------
bool gt_RevealFinalBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/35658668"));
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(17), 10.0, false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4380B61E"), null, RegionGetCenter(RegionFromId(17)));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(17)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/404AFC41"));
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00087", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_malash, "pMission_Taldarim02|Line00088", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealFinalBaseQ_Init () {
    gt_RevealFinalBaseQ = TriggerCreate("gt_RevealFinalBaseQ_Func");
    TriggerAddEventUnitRegion(gt_RevealFinalBaseQ, UnitRefFromVariable("gv_alarak"), RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Initialize
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(3), true, false);
    gv_tugOfWar_ForwardWaypoint = 5;
    gv_tugOfWar_ReverseWaypoint = 3;
    libNtve_gf_ShareVisionofUnit(gv_alarak, true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_alarak, true, gv_pLAYER_02_TALDARIM);
    libNtve_gf_ShareVisionofUnit(gv_alarak, true, gv_pLAYER_03_TALDARIM);
    libNtve_gf_ShareVisionofUnit(gv_alarak, true, gv_pLAYER_04_TALDARIM);
    libNtve_gf_ShareVisionofUnit(gv_alarak, true, gv_pLAYER_05_TALDARIM);
    UnitSetState(gv_tugOfWarBubbleUnit, c_unitStateTurnSuppressed, false);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_ALARAK, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_alarak), StringExternal("Param/Value/CD92A6CE"));
    gv_tugOfWar_Ping = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_alarak);
    gv_tugOfWar_State = ge_PRESETTugOfWarState_Reverse;
    TriggerExecute(gt_TugOfWarController, true, false);
    TriggerExecute(gt_TugOfWarSpeedUpdates, true, false);
    TriggerExecute(gt_TugOfWarAlarakMalashAttackLogic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarInitialize_Init () {
    gt_TugOfWarInitialize = TriggerCreate("gt_TugOfWarInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Controller
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_tugOfWarPointName;

    // Automatic Variable Declarations
    int autoD6090633_val;

    // Variable Initialization
    lv_tugOfWarPointName = "PathWaypoint";

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            TriggerExecute(gt_TugOfWarStateUpdate, true, true);
            if ((gv_tugOfWar_ForwardWaypoint < gv_tugOfWar_WaypointMax) && (DistanceBetweenPoints(UnitGetPosition(gv_tugOfWarBubbleUnit), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1)))) <= 1.0)) {
                gv_tugOfWar_ForwardWaypoint += 1;
                gv_tugOfWar_ReverseWaypoint += 1;
            }
            else {
                if ((gv_tugOfWar_ReverseWaypoint > 0) && (DistanceBetweenPoints(UnitGetPosition(gv_tugOfWarBubbleUnit), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1)))) <= 1.0)) {
                    gv_tugOfWar_ForwardWaypoint -= 1;
                    gv_tugOfWar_ReverseWaypoint -= 1;
                }

            }
            autoD6090633_val = gv_tugOfWar_State;
            if (autoD6090633_val == ge_PRESETTugOfWarState_Paused) {
                UnitIssueOrder(gv_tugOfWarBubbleUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            }
            else if (autoD6090633_val == ge_PRESETTugOfWarState_Hold) {
                UnitIssueOrder(gv_tugOfWarBubbleUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            }
            else if (autoD6090633_val == ge_PRESETTugOfWarState_Forward) {
                UnitIssueOrder(gv_tugOfWarBubbleUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1)))), c_orderQueueReplace);
            }
            else if (autoD6090633_val == ge_PRESETTugOfWarState_Reverse) {
                UnitIssueOrder(gv_tugOfWarBubbleUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1)))), c_orderQueueReplace);
            }
            else {
            }
            UnitIssueOrder(gv_alarak, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_tugOfWarBubbleUnit), 1.5, PointFromName(("PathWaypoint" + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1))))), c_orderQueueReplace);
            UnitIssueOrder(gv_malash, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_tugOfWarBubbleUnit), 1.5, PointFromName(("PathWaypoint" + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1))))), c_orderQueueReplace);
            libNtve_gf_MakeUnitFacePoint(gv_alarak, UnitGetPosition(gv_malash), 0.0);
            libNtve_gf_MakeUnitFacePoint(gv_malash, UnitGetPosition(gv_alarak), 0.0);
            TriggerExecute(gt_TugOfWarMoveBossTarget, true, false);
            if ((gv_tugOfWar_State == ge_PRESETTugOfWarState_Reverse)) {
                PingSetRotation(gv_tugOfWar_Ping, (UnitGetFacing(gv_alarak) + 180.0));
            }
            else {
                if ((gv_tugOfWar_State == ge_PRESETTugOfWarState_Forward)) {
                    PingSetRotation(gv_tugOfWar_Ping, UnitGetFacing(gv_alarak));
                }
                else {
                    PingSetRotation(gv_tugOfWar_Ping, 270.0);
                }
            }
            Wait(1.0, c_timeGame);
        }
        else {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarController_Init () {
    gt_TugOfWarController = TriggerCreate("gt_TugOfWarController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War State Update
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarStateUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_friendlyUnitsNearTugOfWar;
    unitgroup lv_enemyUnitsNearTugOfWar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_friendlyUnitsNearTugOfWar = UnitGroupEmpty();
    lv_enemyUnitsNearTugOfWar = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tugOfWar_State != ge_PRESETTugOfWarState_Paused) && (gv_tugOfWar_State != ge_PRESETTugOfWarState_EventControlled)) {
        lv_friendlyUnitsNearTugOfWar = gf_GetFriendlyUnitsNearAlarak();
        lv_enemyUnitsNearTugOfWar = gf_GetEnemyUnitsNearMalash();
        if ((((UnitGroupCount(lv_enemyUnitsNearTugOfWar, c_unitCountAlive) > 0) && (UnitGroupCount(lv_friendlyUnitsNearTugOfWar, c_unitCountAlive) > 0)) || ((UnitGroupCount(lv_enemyUnitsNearTugOfWar, c_unitCountAlive) == 0) && (UnitGroupCount(lv_friendlyUnitsNearTugOfWar, c_unitCountAlive) == 0)))) {
            if ((gv_tugOfWar_State != ge_PRESETTugOfWarState_Hold)) {
                gv_tugOfWar_State = ge_PRESETTugOfWarState_Hold;
                PingSetModel(gv_tugOfWar_Ping, "PingCircleImportant");
                PingSetColor(gv_tugOfWar_Ping, Color(100.00, 100.00, 100.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/4493EF8F"));
                PingSetScale(gv_tugOfWar_Ping, 0.5);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gv_tugOfWar_ReverseSpeed);
                UnitSetPropertyFixed(gv_alarak, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_malash, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerPause(gv_losingGroundTimer01, true);
                TimerPause(gv_losingGroundTimer02, true);
            }

        }
        else if ((UnitGroupCount(lv_enemyUnitsNearTugOfWar, c_unitCountAlive) > 0)) {
            if ((gv_tugOfWar_State != ge_PRESETTugOfWarState_Reverse)) {
                gv_alarakPushedBack = true;
                gv_tugOfWar_State = ge_PRESETTugOfWarState_Reverse;
                PingSetModel(gv_tugOfWar_Ping, "PingArrow");
                PingSetColor(gv_tugOfWar_Ping, Color(100.00, 0.00, 0.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/7110633D"));
                PingSetScale(gv_tugOfWar_Ping, 1.0);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gv_tugOfWar_ReverseSpeed);
                UnitSetPropertyFixed(gv_alarak, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_malash, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerStart(gv_losingGroundTimer01, 30.0, false, c_timeGame);
                TimerStart(gv_losingGroundTimer02, 60.0, false, c_timeGame);
            }

        }
        else if ((UnitGroupCount(lv_friendlyUnitsNearTugOfWar, c_unitCountAlive) > 0)) {
            if ((gv_tugOfWar_State != ge_PRESETTugOfWarState_Forward)) {
                gv_tugOfWar_State = ge_PRESETTugOfWarState_Forward;
                PingSetModel(gv_tugOfWar_Ping, "PingArrow");
                PingSetColor(gv_tugOfWar_Ping, Color(0.00, 100.00, 0.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/F1FA574E"));
                PingSetScale(gv_tugOfWar_Ping, 1.0);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gv_tugOfWar_ForwardSpeed);
                UnitSetPropertyFixed(gv_alarak, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_malash, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerPause(gv_losingGroundTimer01, true);
                TimerPause(gv_losingGroundTimer02, true);
                TriggerExecute(gt_StatForwardPushTime, true, false);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarStateUpdate_Init () {
    gt_TugOfWarStateUpdate = TriggerCreate("gt_TugOfWarStateUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Speed Updates
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarSpeedUpdates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3F1CC47D_n = 5;
    int auto3F1CC47D_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto3F1CC47D_i = 1; auto3F1CC47D_i <= auto3F1CC47D_n; auto3F1CC47D_i += 1) {
        Wait(240.0, c_timeGame);
        gv_tugOfWar_ForwardSpeed += 0.2;
        gv_tugOfWar_ReverseSpeed += 0.1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarSpeedUpdates_Init () {
    gt_TugOfWarSpeedUpdates = TriggerCreate("gt_TugOfWarSpeedUpdates_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Move Boss Target
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarMoveBossTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_friendlyUnitsNearTugOfWar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_friendlyUnitsNearTugOfWar = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_friendlyUnitsNearTugOfWar = gf_GetFriendlyUnitsNearAlarak();
    if ((UnitGroupCount(lv_friendlyUnitsNearTugOfWar, c_unitCountAlive) > 0)) {
        UnitIssueOrder(gv_tugOfWarEscortTargetUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGroupCenterOfGroup(lv_friendlyUnitsNearTugOfWar)), c_orderQueueReplace);
    }
    else if (true) {
        UnitIssueOrder(gv_tugOfWarEscortTargetUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(gv_malash), 2.0, -2.0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarMoveBossTarget_Init () {
    gt_TugOfWarMoveBossTarget = TriggerCreate("gt_TugOfWarMoveBossTarget_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Alarak/Malash Attack Logic
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarAlarakMalashAttackLogic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFCAF62D2_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            autoFCAF62D2_val = RandomInt(1, 3);
            if (autoFCAF62D2_val == 1) {
                UnitIssueOrder(gv_alarak, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_malash, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                UnitIssueOrder(gv_alarak, OrderTargetingUnit(AbilityCommand("PitAlarakFightDummyAbility", 0), gv_malash), c_orderQueueReplace);
                Wait(RandomFixed(1.5, 3.0), c_timeGame);
            }
            else if (autoFCAF62D2_val == 2) {
                UnitIssueOrder(gv_alarak, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_malash, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                UnitIssueOrder(gv_malash, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_alarak), c_orderQueueReplace);
                Wait(RandomFixed(1.5, 3.0), c_timeGame);
            }
            else if (autoFCAF62D2_val == 3) {
                UnitIssueOrder(gv_alarak, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_malash, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                if ((gv_tugOfWar_State == ge_PRESETTugOfWarState_Reverse)) {
                    UnitIssueOrder(gv_malash, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_alarak), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(gv_alarak, OrderTargetingUnit(AbilityCommand("PitAlarakFightDummyAbility", 0), gv_malash), c_orderQueueReplace);
                }
                Wait(RandomFixed(1.5, 3.0), c_timeGame);
            }
            else {
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarAlarakMalashAttackLogic_Init () {
    gt_TugOfWarAlarakMalashAttackLogic = TriggerCreate("gt_TugOfWarAlarakMalashAttackLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War First Time Player At Tug Of War Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_alarak), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A9873873"), null, UnitGetPosition(gv_alarak));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_alarak), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00089", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00108", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Init () {
    gt_TugOfWarFirstTimePlayerAtTugOfWarQ = TriggerCreate("gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarFirstTimePlayerAtTugOfWarQ, null, RegionCircle(UnitGetPosition(gv_alarak), 9.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War First Time Enemy At Tug Of War Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_alarak), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_alarak), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F751B7D8"), null, UnitGetPosition(gv_alarak));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_alarak), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Init () {
    gt_TugOfWarFirstTimeEnemyAtTugOfWarQ = TriggerCreate("gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarFirstTimeEnemyAtTugOfWarQ, null, RegionCircle(UnitGetPosition(gv_alarak), 9.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Losing Ground 01 Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarLosingGround01WarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto0E8A908D_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_ReverseWaypoint > 1))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_PRESETTugOfWarState_Reverse))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/62C4A983"), null, UnitGetPosition(gv_alarak));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_alarak), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto0E8A908D_val = gv_tugOfWarLosingGround01Count;
    if (auto0E8A908D_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00090", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E8A908D_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00091", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E8A908D_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0E8A908D_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00090", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if ((gv_tugOfWarLosingGround01Count == 4)) {
        gv_tugOfWarLosingGround01Count = 1;
    }
    else {
        gv_tugOfWarLosingGround01Count += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarLosingGround01WarningQ_Init () {
    gt_TugOfWarLosingGround01WarningQ = TriggerCreate("gt_TugOfWarLosingGround01WarningQ_Func");
    TriggerAddEventTimer(gt_TugOfWarLosingGround01WarningQ, gv_losingGroundTimer01);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Losing Ground 02 Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarLosingGround02WarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4D5EC4AA_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_ReverseWaypoint > 1))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_PRESETTugOfWarState_Reverse))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8A7C289C"), null, UnitGetPosition(gv_alarak));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_alarak), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto4D5EC4AA_val = gv_tugOfWarLosingGround02Count;
    if (auto4D5EC4AA_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto4D5EC4AA_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto4D5EC4AA_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if ((gv_tugOfWarLosingGround02Count == 3)) {
        gv_tugOfWarLosingGround02Count = 1;
    }
    else {
        gv_tugOfWarLosingGround02Count += 1;
    }
    TimerStart(gv_losingGroundTimer02, 60.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarLosingGround02WarningQ_Init () {
    gt_TugOfWarLosingGround02WarningQ = TriggerCreate("gt_TugOfWarLosingGround02WarningQ_Func");
    TriggerAddEventTimer(gt_TugOfWarLosingGround02WarningQ, gv_losingGroundTimer02);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Defeat Imminent Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarDefeatImminentWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC7B09F79_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_PRESETTugOfWarState_Reverse))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/23913464"), null, UnitGetPosition(gv_alarak));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_alarak), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    autoC7B09F79_val = gv_tugOfWarDefeatImmimentCount;
    if (autoC7B09F79_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00092", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC7B09F79_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(gv_malash, "pMission_Taldarim02|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC7B09F79_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC7B09F79_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(gv_malash, "pMission_Taldarim02|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_malash, "pMission_Taldarim02|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if ((gv_tugOfWarDefeatImmimentCount == 4)) {
        gv_tugOfWarDefeatImmimentCount = 1;
    }
    else {
        gv_tugOfWarDefeatImmimentCount += 1;
    }
    Wait(50.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarDefeatImminentWarningQ_Init () {
    gt_TugOfWarDefeatImminentWarningQ = TriggerCreate("gt_TugOfWarDefeatImminentWarningQ_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarDefeatImminentWarningQ, UnitRefFromVariable("gv_alarak"), RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Victory Imminent Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarVictoryImminentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_PRESETTugOfWarState_Forward))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_malash, "pMission_Taldarim02|Line00053", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00036", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarVictoryImminentQ_Init () {
    gt_TugOfWarVictoryImminentQ = TriggerCreate("gt_TugOfWarVictoryImminentQ_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarVictoryImminentQ, UnitRefFromVariable("gv_malash"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Bonus Objective Q
//--------------------------------------------------------------------------------------------------
bool gt_RevealBonusObjectiveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_AddMissionTipCampaign("SlaynElemental");
    TriggerEnable(gt_PlayerLeavesBonusObjectiveReveal, false);
    TriggerEnable(gt_BonusObjectiveTimedReveal, false);
    TriggerEnable(gt_SlaynElemental01KilledQ, true);
    TriggerEnable(gt_SlaynElemental02KilledQ, true);
    TriggerEnable(gt_SlaynElemental03KilledQ, true);
    gf_RunSlaynElementalAI(gv_slaynElemental01, RegionFromId(16), 9);
    gf_RunSlaynElementalAI(gv_slaynElemental02, RegionFromId(5), 9);
    gf_RunSlaynElementalAI(gv_slaynElemental03, RegionFromId(33), 9);
    TriggerQueueEnter();
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(gv_slaynElemental01), StringExternal("Param/Value/84362495"));
    PingSetUnit(PingLastCreated(), gv_slaynElemental01);
    libHots_gf_StorePingForUnit(gv_slaynElemental01, 1, PingLastCreated());
    Wait(0.25, c_timeGame);
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(gv_slaynElemental02), StringExternal("Param/Value/F626910D"));
    PingSetUnit(PingLastCreated(), gv_slaynElemental02);
    libHots_gf_StorePingForUnit(gv_slaynElemental02, 1, PingLastCreated());
    Wait(0.25, c_timeGame);
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(gv_slaynElemental03), StringExternal("Param/Value/580C313D"));
    PingSetUnit(PingLastCreated(), gv_slaynElemental03);
    libHots_gf_StorePingForUnit(gv_slaynElemental03, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00131", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealBonusObjectiveQ_Init () {
    gt_RevealBonusObjectiveQ = TriggerCreate("gt_RevealBonusObjectiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Bonus Objective Reveal
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesBonusObjectiveReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_RevealBonusObjectiveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesBonusObjectiveReveal_Init () {
    gt_PlayerLeavesBonusObjectiveReveal = TriggerCreate("gt_PlayerLeavesBonusObjectiveReveal_Func");
    TriggerAddEventUnitRegion(gt_PlayerLeavesBonusObjectiveReveal, null, RegionFromId(12), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Timed Reveal
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveTimedReveal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeAI);
    if ((TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerExecute(gt_RevealBonusObjectiveQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveTimedReveal_Init () {
    gt_BonusObjectiveTimedReveal = TriggerCreate("gt_BonusObjectiveTimedReveal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental 01 Killed Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElemental01KilledQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_slaynElementalPoint;
    unit lv_slaynElementalCoreUnit;

    // Automatic Variable Declarations
    int auto7AEC04E4_val;

    // Variable Initialization
    lv_slaynElementalPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_objectiveElementalsKilledCount += 1;
    TriggerExecute(gt_ObjectiveKillSlaynElementalsUpdate, true, false);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_slaynElemental01, 1));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, lv_slaynElementalPoint);
    lv_slaynElementalCoreUnit = UnitLastCreated();
    UnitSetHeight(lv_slaynElementalCoreUnit, 2.75, 0.0);
    Wait(4.0, c_timeGame);
    UnitBehaviorAdd(lv_slaynElementalCoreUnit, "ObjectiveCollectionBeam", lv_slaynElementalCoreUnit, 1);
    Wait(2.0, c_timeGame);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(lv_slaynElementalPoint, "PUlnar02Bonus01");
    auto7AEC04E4_val = gv_objectiveElementalsKilledCount;
    if (auto7AEC04E4_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00132", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto7AEC04E4_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00133", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto7AEC04E4_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_ObjectiveKillSlaynElementalsComplete, true, false);
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00134", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00135", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElemental01KilledQ_Init () {
    gt_SlaynElemental01KilledQ = TriggerCreate("gt_SlaynElemental01KilledQ_Func");
    TriggerEnable(gt_SlaynElemental01KilledQ, false);
    TriggerAddEventUnitDied(gt_SlaynElemental01KilledQ, UnitRefFromVariable("gv_slaynElemental01"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental 02 Killed Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElemental02KilledQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_slaynElementalPoint;
    unit lv_slaynElementalCoreUnit;

    // Automatic Variable Declarations
    int auto4D3EC43E_val;

    // Variable Initialization
    lv_slaynElementalPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_objectiveElementalsKilledCount += 1;
    TriggerExecute(gt_ObjectiveKillSlaynElementalsUpdate, true, false);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_slaynElemental02, 1));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, lv_slaynElementalPoint);
    lv_slaynElementalCoreUnit = UnitLastCreated();
    UnitSetHeight(lv_slaynElementalCoreUnit, 2.75, 0.0);
    Wait(4.0, c_timeGame);
    UnitBehaviorAdd(lv_slaynElementalCoreUnit, "ObjectiveCollectionBeam", lv_slaynElementalCoreUnit, 1);
    Wait(2.0, c_timeGame);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(lv_slaynElementalPoint, "PUlnar02Bonus01");
    auto4D3EC43E_val = gv_objectiveElementalsKilledCount;
    if (auto4D3EC43E_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00132", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto4D3EC43E_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00133", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto4D3EC43E_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_ObjectiveKillSlaynElementalsComplete, true, false);
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00134", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00135", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElemental02KilledQ_Init () {
    gt_SlaynElemental02KilledQ = TriggerCreate("gt_SlaynElemental02KilledQ_Func");
    TriggerEnable(gt_SlaynElemental02KilledQ, false);
    TriggerAddEventUnitDied(gt_SlaynElemental02KilledQ, UnitRefFromVariable("gv_slaynElemental02"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental 03 Killed Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElemental03KilledQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_slaynElementalPoint;
    unit lv_slaynElementalCoreUnit;

    // Automatic Variable Declarations
    int auto259D5101_val;

    // Variable Initialization
    lv_slaynElementalPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_objectiveElementalsKilledCount += 1;
    TriggerExecute(gt_ObjectiveKillSlaynElementalsUpdate, true, false);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_slaynElemental03, 1));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, lv_slaynElementalPoint);
    lv_slaynElementalCoreUnit = UnitLastCreated();
    UnitSetHeight(lv_slaynElementalCoreUnit, 2.75, 0.0);
    Wait(4.0, c_timeGame);
    UnitBehaviorAdd(lv_slaynElementalCoreUnit, "ObjectiveCollectionBeam", lv_slaynElementalCoreUnit, 1);
    Wait(2.0, c_timeGame);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(lv_slaynElementalPoint, "PUlnar02Bonus01");
    auto259D5101_val = gv_objectiveElementalsKilledCount;
    if (auto259D5101_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00132", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto259D5101_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00133", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto259D5101_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_ObjectiveKillSlaynElementalsComplete, true, false);
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00134", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00135", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElemental03KilledQ_Init () {
    gt_SlaynElemental03KilledQ = TriggerCreate("gt_SlaynElemental03KilledQ_Func");
    TriggerEnable(gt_SlaynElemental03KilledQ, false);
    TriggerAddEventUnitDied(gt_SlaynElemental03KilledQ, UnitRefFromVariable("gv_slaynElemental03"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critter Dies
//--------------------------------------------------------------------------------------------------
bool gt_CritterDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringUnitPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringUnitPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SlaynSwarmHostSpawnFlyer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    if ((RegionContainsPoint(RegionFromId(16), lv_triggeringUnitPoint) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlaynSwarmHostSpawnFlyer", 0, 0, RegionRandomPoint(RegionFromId(6)));
        UnitBehaviorAdd(UnitLastCreated(), "CritterWanderLeash", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "Harmless", UnitLastCreated(), 1);
    }
    else if ((RegionContainsPoint(RegionFromId(5), lv_triggeringUnitPoint) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlaynSwarmHostSpawnFlyer", 0, 0, RegionRandomPoint(RegionFromId(8)));
        UnitBehaviorAdd(UnitLastCreated(), "CritterWanderLeash", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "Harmless", UnitLastCreated(), 1);
    }
    else if ((RegionContainsPoint(RegionFromId(33), lv_triggeringUnitPoint) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlaynSwarmHostSpawnFlyer", 0, 0, RegionRandomPoint(RegionFromId(11)));
        UnitBehaviorAdd(UnitLastCreated(), "CritterWanderLeash", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "Harmless", UnitLastCreated(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CritterDies_Init () {
    gt_CritterDies = TriggerCreate("gt_CritterDies_Func");
    TriggerAddEventUnitDied(gt_CritterDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_TALDARIM, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_TALDARIM, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_TALDARIM, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_TALDARIM, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_TALDARIM, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_TALDARIM, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_TALDARIM, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_TALDARIM, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6A7EFF0A_g;
    int auto6A7EFF0A_var;
    playergroup autoDF13A69E_g;
    int autoDF13A69E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    auto6A7EFF0A_g = gv_enemyPlayerGroup;
    auto6A7EFF0A_var = -1;
    while (true) {
        auto6A7EFF0A_var = PlayerGroupNextPlayer(auto6A7EFF0A_g, auto6A7EFF0A_var);
        if (auto6A7EFF0A_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6A7EFF0A_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto6A7EFF0A_var, "ProtossGroundWeaponsLevel1", 1);
    }
    Wait(300.0, c_timeAI);
    autoDF13A69E_g = gv_enemyPlayerGroup;
    autoDF13A69E_var = -1;
    while (true) {
        autoDF13A69E_var = PlayerGroupNextPlayer(autoDF13A69E_g, autoDF13A69E_var);
        if (autoDF13A69E_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoDF13A69E_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoDF13A69E_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoDF13A69E_var, "ProtossShieldsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Hard
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto62B3E84F_g;
    int auto62B3E84F_var;
    playergroup autoF54B7D13_g;
    int autoF54B7D13_var;
    playergroup auto9D21697A_g;
    int auto9D21697A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(480.0, c_timeAI);
    auto62B3E84F_g = gv_enemyPlayerGroup;
    auto62B3E84F_var = -1;
    while (true) {
        auto62B3E84F_var = PlayerGroupNextPlayer(auto62B3E84F_g, auto62B3E84F_var);
        if (auto62B3E84F_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto62B3E84F_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto62B3E84F_var, "ProtossGroundWeaponsLevel2", 1);
    }
    Wait(480.0, c_timeAI);
    autoF54B7D13_g = gv_enemyPlayerGroup;
    autoF54B7D13_var = -1;
    while (true) {
        autoF54B7D13_var = PlayerGroupNextPlayer(autoF54B7D13_g, autoF54B7D13_var);
        if (autoF54B7D13_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF54B7D13_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoF54B7D13_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoF54B7D13_var, "ProtossShieldsLevel2", 1);
    }
    Wait(480.0, c_timeAI);
    auto9D21697A_g = gv_enemyPlayerGroup;
    auto9D21697A_var = -1;
    while (true) {
        auto9D21697A_var = PlayerGroupNextPlayer(auto9D21697A_g, auto9D21697A_var);
        if (auto9D21697A_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto9D21697A_var, "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto9D21697A_var, "ProtossGroundWeaponsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Super Warped In
//--------------------------------------------------------------------------------------------------
bool gt_UnitSuperWarpedIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventUnit() == gv_p02_SuperWarpGate) || (EventUnit() == gv_p05_SuperWarpGate)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_lastReplacedWithWarpInGroup, EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitSuperWarpedIn_Init () {
    gt_UnitSuperWarpedIn = TriggerCreate("gt_UnitSuperWarpedIn_Func");
    TriggerAddEventUnitConstructProgress(gt_UnitSuperWarpedIn, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init WaveData Variable
//--------------------------------------------------------------------------------------------------
bool gt_InitWaveDataVariable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 1;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 4;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 6;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 5;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 7;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 13;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 14;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 12;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 30;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 18;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 19;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 20;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 31;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 32;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 23;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 2;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 3;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 8;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 9;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 10;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 11;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 15;
    gv_waveGroupUBound += 1;
    gv_waveData[gv_waveGroupUBound] = 16;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitWaveDataVariable_Init () {
    gt_InitWaveDataVariable = TriggerCreate("gt_InitWaveDataVariable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Replace With Warp In
//--------------------------------------------------------------------------------------------------
bool gt_AIReplaceWithWarpIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveGroup;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetEscortNL(gv_pLAYER_02_TALDARIM, libNtve_gf_ConvertUnitToUnitGroup(gv_tugOfWarEscortTargetUnit), 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_TALDARIM, RegionGetCenter(gf_GetWarpInRegion()));
    if ((gv_waveGroupIndex < gv_waveGroupUBound)) {
        gv_waveGroupIndex += 1;
    }

    lv_waveGroup = cai_wave_createdUnits(gv_waveData[gv_waveGroupIndex], gv_pLAYER_02_TALDARIM);
    lv_warpInRegion = gf_GetWarpInRegion();
    if ((lv_warpInRegion == RegionFromId(30))) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_TALDARIM, PointFromId(878), false);
    }

    gf_ReplaceWithWarpIn(lv_waveGroup, lv_warpInRegion, gv_pLAYER_02_TALDARIM);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIReplaceWithWarpIn_Init () {
    gt_AIReplaceWithWarpIn = TriggerCreate("gt_AIReplaceWithWarpIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Dominator Is Created
//--------------------------------------------------------------------------------------------------
bool gt_HybridDominatorIsCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HybridDominatorVoid"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HybridDominatorAI(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridDominatorIsCreated_Init () {
    gt_HybridDominatorIsCreated = TriggerCreate("gt_HybridDominatorIsCreated_Func");
    TriggerEnable(gt_HybridDominatorIsCreated, false);
    TriggerAddEventUnitRegion(gt_HybridDominatorIsCreated, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Behemoth Is Created
//--------------------------------------------------------------------------------------------------
bool gt_HybridBehemothIsCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HybridBehemoth"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HybridBehemothAI(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridBehemothIsCreated_Init () {
    gt_HybridBehemothIsCreated = TriggerCreate("gt_HybridBehemothIsCreated_Func");
    TriggerEnable(gt_HybridBehemothIsCreated, false);
    TriggerAddEventUnitRegion(gt_HybridBehemothIsCreated, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init SpecialWaveData Variable
//--------------------------------------------------------------------------------------------------
bool gt_InitSpecialWaveDataVariable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_specialWaveGroupUBound += 1;
    gv_specialWaveData[gv_specialWaveGroupUBound] = 1;
    gv_specialWaveGroupUBound += 1;
    gv_specialWaveData[gv_specialWaveGroupUBound] = 2;
    gv_specialWaveGroupUBound += 1;
    gv_specialWaveData[gv_specialWaveGroupUBound] = 3;
    gv_specialWaveGroupUBound += 1;
    gv_specialWaveData[gv_specialWaveGroupUBound] = 4;
    gv_specialWaveGroupUBound += 1;
    gv_specialWaveData[gv_specialWaveGroupUBound] = 6;
    gv_specialWaveGroupUBound += 1;
    gv_specialWaveData[gv_specialWaveGroupUBound] = 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitSpecialWaveDataVariable_Init () {
    gt_InitSpecialWaveDataVariable = TriggerCreate("gt_InitSpecialWaveDataVariable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Replace With Warp In Special
//--------------------------------------------------------------------------------------------------
bool gt_AIReplaceWithWarpInSpecial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetEscortNL(gv_pLAYER_05_TALDARIM, libNtve_gf_ConvertUnitToUnitGroup(gv_tugOfWarEscortTargetUnit), 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_TALDARIM, RegionGetCenter(RegionFromId(23)));
    if ((gv_specialWaveGroupIndex < gv_specialWaveGroupUBound)) {
        gv_specialWaveGroupIndex += 1;
    }

    lv_waveGroup = cai_wave_createdUnits(gv_specialWaveData[gv_specialWaveGroupIndex], gv_pLAYER_05_TALDARIM);
    gf_ReplaceWithWarpIn(lv_waveGroup, gf_GetWarpInRegion(), gv_pLAYER_05_TALDARIM);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIReplaceWithWarpInSpecial_Init () {
    gt_AIReplaceWithWarpInSpecial = TriggerCreate("gt_AIReplaceWithWarpInSpecial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Escort Wave 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialEscortWave01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AIReplaceWithWarpInSpecial, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(23)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7B663D79"));
    gf_UpdateWaveGroupPing(gv_lastReplacedWithWarpInGroup, PingLastCreated());
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00097", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_malash, "pMission_Taldarim02|Line00107", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Taldarim02|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialEscortWave01Q_Init () {
    gt_SpecialEscortWave01Q = TriggerCreate("gt_SpecialEscortWave01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Escort Wave 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialEscortWave02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AIReplaceWithWarpInSpecial, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(23)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gf_UpdateWaveGroupPing(gv_lastReplacedWithWarpInGroup, PingLastCreated());
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00098", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialEscortWave02Q_Init () {
    gt_SpecialEscortWave02Q = TriggerCreate("gt_SpecialEscortWave02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Escort Wave 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialEscortWave03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AIReplaceWithWarpInSpecial, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(23)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gf_UpdateWaveGroupPing(gv_lastReplacedWithWarpInGroup, PingLastCreated());
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00099", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialEscortWave03Q_Init () {
    gt_SpecialEscortWave03Q = TriggerCreate("gt_SpecialEscortWave03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Escort Wave 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialEscortWave04Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AIReplaceWithWarpInSpecial, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(23)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gf_UpdateWaveGroupPing(gv_lastReplacedWithWarpInGroup, PingLastCreated());
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialEscortWave04Q_Init () {
    gt_SpecialEscortWave04Q = TriggerCreate("gt_SpecialEscortWave04Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Special Escort Wave 05 (Repeatable) Q
//--------------------------------------------------------------------------------------------------
bool gt_SpecialEscortWave05RepeatableQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto45921534_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AIReplaceWithWarpInSpecial, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", RegionGetCenter(RegionFromId(23)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gf_UpdateWaveGroupPing(gv_lastReplacedWithWarpInGroup, PingLastCreated());
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if (gv_specialEscortTransmissionIterator >= 3) {
        gv_specialEscortTransmissionIterator = 1;
    }
    else {
        gv_specialEscortTransmissionIterator = gv_specialEscortTransmissionIterator + 1;
    }
    auto45921534_val = gv_specialEscortTransmissionIterator;
    if (auto45921534_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00126", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto45921534_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00098", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto45921534_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialEscortWave05RepeatableQ_Init () {
    gt_SpecialEscortWave05RepeatableQ = TriggerCreate("gt_SpecialEscortWave05RepeatableQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveGroup;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_waveGroup = AIWaveGetUnits(EventPlayerWave());
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/655A21CF"), null, PointFromId(369));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(369), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0D445261"));
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00101", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_malash, "pMission_Taldarim02|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01Q_Init () {
    gt_AttackWave01Q = TriggerCreate("gt_AttackWave01Q_Func");
    TriggerAddEventPlayerAIWave(gt_AttackWave01Q, gv_pLAYER_03_TALDARIM);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_waveGroup;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveGroup = AIWaveGetUnits(EventPlayerWave());
    if ((UnitGroupCount(lv_waveGroup, c_unitCountAlive) > 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7BCE5953"), null, PointFromId(854));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(854), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/BC57D339"));
        PingSetScale(PingLastCreated(), 0.6);
        SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeGame);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00103", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(gv_malash, "pMission_Taldarim02|Line00104", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04Q_Init () {
    gt_AttackWave04Q = TriggerCreate("gt_AttackWave04Q_Func");
    TriggerAddEventPlayerAIWave(gt_AttackWave04Q, gv_pLAYER_04_TALDARIM);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/6DD12E52"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(14), 8.0, false);
    gv_tugOfWar_State = ge_PRESETTugOfWarState_Paused;
    UnitKill(gv_tugOfWarBubbleUnit);
    TriggerStop(gt_TugOfWarAlarakMalashAttackLogic);
    UnitIssueOrder(gv_alarak, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_malash, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_malash, OrderTargetingUnit(AbilityCommand("PitMalashKillAlarak", 0), gv_alarak), c_orderQueueReplace);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKillMalashFailed, true, false);
    TriggerExecute(gt_ObjectiveAlarakMustSurviveFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/B36A550E"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitRegion(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_alarak"), RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Protect Ritual Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryProtectRitualCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_TugOfWarAlarakMalashAttackLogic);
    UnitIssueOrder(gv_alarak, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_malash, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    if ((gv_alarakPushedBack == false) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_CampaignAwardAchievement("Mastery_Taldarim02", gv_pLAYER_01_USER);
    }

    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryProtectRitualCompleted_Init () {
    gt_VictoryProtectRitualCompleted = TriggerCreate("gt_VictoryProtectRitualCompleted_Func");
    TriggerAddEventUnitRegion(gt_VictoryProtectRitualCompleted, UnitRefFromVariable("gv_malash"), RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    Wait(0.0625, c_timeGame);
    TriggerQueueClear(c_triggerQueueRemove);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    gv_tugOfWar_State = ge_PRESETTugOfWarState_Paused;
    libNtve_gf_PauseUnit(gv_tugOfWarBubbleUnit, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKillMalashComplete, true, false);
    TriggerExecute(gt_ObjectiveAlarakMustSurviveComplete, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_alarak, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_malash, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (GameGetMissionTime() < 721.0)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PTaldarim02", gv_pLAYER_01_USER);
        TriggerDebugOutput(1, StringExternal("Param/Value/77B7A46F"), true);
    }

    libVoiC_gf_CampaignAwardAchievement("PTaldarim02_1", gv_pLAYER_01_USER);
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/FEC99CE4"), IntToText(gv_nexusesDestroyed));
    TextExpressionSetToken("Param/Expression/27F328F9", "A", IntToText(gv_bestForwardPushTime));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/3D94C571"), TextExpressionAssemble("Param/Expression/27F328F9"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/31CA241A"), IntToText(gv_malashEscortsKilled));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Forward Push Time
//--------------------------------------------------------------------------------------------------
bool gt_StatForwardPushTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localVictoryStatPushTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_tugOfWar_State == ge_PRESETTugOfWarState_Forward)) {
        Wait(1.0, c_timeAI);
        lv_localVictoryStatPushTime += 1;
        if ((lv_localVictoryStatPushTime > gv_bestForwardPushTime)) {
            gv_bestForwardPushTime = lv_localVictoryStatPushTime;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatForwardPushTime_Init () {
    gt_StatForwardPushTime = TriggerCreate("gt_StatForwardPushTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Ma'lash Escorts Killed
//--------------------------------------------------------------------------------------------------
bool gt_StatMalashEscortsKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_malashEscortGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_malashEscortsKilled += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatMalashEscortsKilled_Init () {
    gt_StatMalashEscortsKilled = TriggerCreate("gt_StatMalashEscortsKilled_Func");
    TriggerAddEventUnitDied(gt_StatMalashEscortsKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ma'lash Escorts Add To Group
//--------------------------------------------------------------------------------------------------
bool gt_MalashEscortsAddToGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_malash))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_malashEscortGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MalashEscortsAddToGroup_Init () {
    gt_MalashEscortsAddToGroup = TriggerCreate("gt_MalashEscortsAddToGroup_Func");
    TriggerAddEventUnitBehaviorChange(gt_MalashEscortsAddToGroup, null, "PitMalashShieldRegen", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat/Achievement - Enemy Nexuses Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_StatAchievementEnemyNexusesDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nexusesDestroyed += 1;
    if ((gv_nexusesDestroyed == 3) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVoiC_gf_CampaignAwardAchievement("PTaldarim02_3", gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatAchievementEnemyNexusesDestroyed_Init () {
    gt_StatAchievementEnemyNexusesDestroyed = TriggerCreate("gt_StatAchievementEnemyNexusesDestroyed_Func");
    TriggerAddEventUnitDied(gt_StatAchievementEnemyNexusesDestroyed, UnitRefFromUnit(UnitFromId(919)));
    TriggerAddEventUnitDied(gt_StatAchievementEnemyNexusesDestroyed, UnitRefFromUnit(UnitFromId(191)));
    TriggerAddEventUnitDied(gt_StatAchievementEnemyNexusesDestroyed, UnitRefFromUnit(UnitFromId(242)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Alarak Escort Count
//--------------------------------------------------------------------------------------------------
bool gt_AchievementAlarakEscortCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PTaldarim02_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementAlarakEscortCount_Init () {
    gt_AchievementAlarakEscortCount = TriggerCreate("gt_AchievementAlarakEscortCount_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Escorts Add To Group
//--------------------------------------------------------------------------------------------------
bool gt_AlarakEscortsAddToGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_alarak))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_alarakEscortGroup, EventUnit());
    if ((UnitGroupCount(gv_alarakEscortGroup, c_unitCountAlive) >= 25)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_AlarakEscortsRemoveFromGroup, false);
        TriggerExecute(gt_AchievementAlarakEscortCount, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlarakEscortsAddToGroup_Init () {
    gt_AlarakEscortsAddToGroup = TriggerCreate("gt_AlarakEscortsAddToGroup_Func");
    TriggerAddEventUnitBehaviorChange(gt_AlarakEscortsAddToGroup, null, "PitAlarakShieldRegen", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Escorts Remove From Group
//--------------------------------------------------------------------------------------------------
bool gt_AlarakEscortsRemoveFromGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_alarak))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_alarakEscortGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlarakEscortsRemoveFromGroup_Init () {
    gt_AlarakEscortsRemoveFromGroup = TriggerCreate("gt_AlarakEscortsRemoveFromGroup_Func");
    TriggerAddEventUnitBehaviorChange(gt_AlarakEscortsRemoveFromGroup, null, "PitAlarakShieldRegen", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Ma'lash Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillMalashCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PTaldarim02Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillMalashCreate_Init () {
    gt_ObjectiveKillMalashCreate = TriggerCreate("gt_ObjectiveKillMalashCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Ma'lash Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillMalashComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillMalashCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim02Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillMalashComplete_Init () {
    gt_ObjectiveKillMalashComplete = TriggerCreate("gt_ObjectiveKillMalashComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Ma'lash Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillMalashFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillMalashCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim02Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillMalashFailed_Init () {
    gt_ObjectiveKillMalashFailed = TriggerCreate("gt_ObjectiveKillMalashFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Alarak Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAlarakMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PTaldarim02Primary02");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAlarakMustSurviveCreate_Init () {
    gt_ObjectiveAlarakMustSurviveCreate = TriggerCreate("gt_ObjectiveAlarakMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Alarak Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAlarakMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveAlarakMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim02Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAlarakMustSurviveComplete_Init () {
    gt_ObjectiveAlarakMustSurviveComplete = TriggerCreate("gt_ObjectiveAlarakMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Alarak Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAlarakMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveAlarakMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim02Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAlarakMustSurviveFailed_Init () {
    gt_ObjectiveAlarakMustSurviveFailed = TriggerCreate("gt_ObjectiveAlarakMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PTaldarim02Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PTaldarim02Bonus01", gv_objectiveElementalsKilledCount);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsCreate_Init () {
    gt_ObjectiveKillSlaynElementalsCreate = TriggerCreate("gt_ObjectiveKillSlaynElementalsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim02Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsComplete_Init () {
    gt_ObjectiveKillSlaynElementalsComplete = TriggerCreate("gt_ObjectiveKillSlaynElementalsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PTaldarim02Bonus01", gv_objectiveElementalsKilledCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsUpdate_Init () {
    gt_ObjectiveKillSlaynElementalsUpdate = TriggerCreate("gt_ObjectiveKillSlaynElementalsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PTaldarim02Bonus01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsFailed_Init () {
    gt_ObjectiveKillSlaynElementalsFailed = TriggerCreate("gt_ObjectiveKillSlaynElementalsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoADD461BF_g;
    int autoADD461BF_u;
    unit autoADD461BF_var;
    unitgroup auto28495EFE_g;
    int auto28495EFE_u;
    unit auto28495EFE_var;
    unitgroup autoBC054E9C_g;
    int autoBC054E9C_u;
    unit autoBC054E9C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    autoADD461BF_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoADD461BF_u = UnitGroupCount(autoADD461BF_g, c_unitCountAll);
    for (;; autoADD461BF_u -= 1) {
        autoADD461BF_var = UnitGroupUnitFromEnd(autoADD461BF_g, autoADD461BF_u);
        if (autoADD461BF_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoADD461BF_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoADD461BF_var);
            libNtve_gf_PauseUnit(autoADD461BF_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto28495EFE_g = gv_cinematicHiddenUnits;
    auto28495EFE_u = UnitGroupCount(auto28495EFE_g, c_unitCountAll);
    for (;; auto28495EFE_u -= 1) {
        auto28495EFE_var = UnitGroupUnitFromEnd(auto28495EFE_g, auto28495EFE_u);
        if (auto28495EFE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto28495EFE_var, false);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PitAlarak", c_unitCreateIgnorePlacement, gv_pLAYER_07_ALARAK, UnitGetPosition(gv_alarak));
    gv_cinematicAlarak = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicAlarak);
    UnitSetPropertyFixed(gv_cinematicAlarak, c_unitPropMovementSpeed, 0.5);
    libNtve_gf_ChangeUnitDamage(gv_cinematicAlarak, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_cinematicAlarak, c_unitStateStatusBar, false);
    UnitSetState(gv_cinematicAlarak, c_unitStateTurnSuppressed, false);
    TriggerExecute(gt_IntroAlarakRegenAura, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PitMalash", c_unitCreateIgnorePlacement, gv_pLAYER_08_MALASH, UnitGetPosition(gv_malash));
    gv_cinematicMalash = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicMalash);
    UnitSetPropertyFixed(gv_cinematicMalash, c_unitPropMovementSpeed, 0.5);
    libNtve_gf_ChangeUnitDamage(gv_cinematicMalash, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_cinematicMalash, c_unitStateStatusBar, false);
    UnitSetState(gv_cinematicMalash, c_unitStateTurnSuppressed, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DuelBubbleUnit", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_tugOfWarBubbleUnit));
    gv_cinematicDuelBubble = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicDuelBubble);
    UnitSetPropertyFixed(gv_cinematicDuelBubble, c_unitPropMovementSpeed, 0.5);
    libNtve_gf_ChangeUnitDamage(gv_cinematicDuelBubble, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_cinematicDuelBubble, c_unitStateStatusBar, false);
    UnitSetState(gv_cinematicDuelBubble, c_unitStateTurnSuppressed, false);
    autoBC054E9C_g = UnitGroup(null, c_playerAny, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoBC054E9C_u = UnitGroupCount(autoBC054E9C_g, c_unitCountAll);
    for (;; autoBC054E9C_u -= 1) {
        autoBC054E9C_var = UnitGroupUnitFromEnd(autoBC054E9C_g, autoBC054E9C_u);
        if (autoBC054E9C_var == null) { break; }
        if ((UnitGetType(autoBC054E9C_var) != "Assimilator") && (UnitGetType(autoBC054E9C_var) != "Carrier")) {
            UnitCreate(1, UnitGetType(autoBC054E9C_var), c_unitCreateIgnorePlacement, UnitGetOwner(autoBC054E9C_var), UnitGetPosition(autoBC054E9C_var), UnitGetFacing(autoBC054E9C_var));
            UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_targetPoint;
    unit lv_hybridUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2900), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2901), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim02|Line00080", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim02|Line00081", true), c_soundIndexAny))), -1, 10.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PTaldarim02_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitSetFacing(gv_cinematicAlarak, 315.0, 0.0);
    UnitSetFacing(gv_cinematicMalash, 135.0, 0.0);
    TriggerExecute(gt_IntroAlarakMalashAttackLogic, true, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 6.25, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00080", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00081", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2902), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2903), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim02|Line00124", true), c_soundIndexAny)), -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00124", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2915), 0.0, -1, 10.0, true);
    CameraFollowUnitGroup(gv_pLAYER_01_USER, libNtve_gf_ConvertUnitToUnitGroup(gv_cinematicAlarak), true, true);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) - 4.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), UnitGetPosition(gv_cinematicAlarak), 4.0);
    TriggerExecute(gt_CreateIntroPlayerUnits, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00082", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00083", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerExecute(gt_CreateIntroEnemyUnits, true, false);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00085", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_EngageIntroUnits, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Taldarim02|Line00105", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraFollowUnitGroup(gv_pLAYER_01_USER, libNtve_gf_ConvertUnitToUnitGroup(gv_cinematicAlarak), false, false);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto63E6B00B_g;
    int auto63E6B00B_u;
    unit auto63E6B00B_var;
    unitgroup autoF7353E57_g;
    int autoF7353E57_u;
    unit autoF7353E57_var;
    unitgroup auto373B3390_g;
    int auto373B3390_u;
    unit auto373B3390_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    auto63E6B00B_g = gv_cinematicTempUnits;
    auto63E6B00B_u = UnitGroupCount(auto63E6B00B_g, c_unitCountAll);
    for (;; auto63E6B00B_u -= 1) {
        auto63E6B00B_var = UnitGroupUnitFromEnd(auto63E6B00B_g, auto63E6B00B_u);
        if (auto63E6B00B_var == null) { break; }
        UnitRemove(auto63E6B00B_var);
    }
    autoF7353E57_g = gv_cinematicHiddenUnits;
    autoF7353E57_u = UnitGroupCount(autoF7353E57_g, c_unitCountAll);
    for (;; autoF7353E57_u -= 1) {
        autoF7353E57_var = UnitGroupUnitFromEnd(autoF7353E57_g, autoF7353E57_u);
        if (autoF7353E57_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF7353E57_var, true);
    }
    auto373B3390_g = gv_cinematicPausedUnits;
    auto373B3390_u = UnitGroupCount(auto373B3390_g, c_unitCountAll);
    for (;; auto373B3390_u -= 1) {
        auto373B3390_var = UnitGroupUnitFromEnd(auto373B3390_g, auto373B3390_u);
        if (auto373B3390_var == null) { break; }
        libNtve_gf_PauseUnit(auto373B3390_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(7), true, false);
    TriggerExecute(gt_StartAI, true, false);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(20), gv_pLAYER_01_USER);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Intro Player Units
//--------------------------------------------------------------------------------------------------
bool gt_CreateIntroPlayerUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9A2F87C0_g;
    int auto9A2F87C0_u;
    unit auto9A2F87C0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, libVoiC_gf_EnabledUnitTypeforArmyCategory("VoidRay"), 0, gv_pLAYER_01_USER, PointFromId(2910));
    UnitGroupAdd(gv_introPlayersUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, libVoiC_gf_EnabledUnitTypeforArmyCategory("Stalker"), 0, gv_pLAYER_01_USER, PointFromId(2911));
    UnitGroupAdd(gv_introPlayersUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, libVoiC_gf_EnabledUnitTypeforArmyCategory("Stalker"), 0, gv_pLAYER_01_USER, PointFromId(2912));
    UnitGroupAdd(gv_introPlayersUnits, UnitLastCreated());
    auto9A2F87C0_g = gv_introPlayersUnits;
    auto9A2F87C0_u = UnitGroupCount(auto9A2F87C0_g, c_unitCountAll);
    for (;; auto9A2F87C0_u -= 1) {
        auto9A2F87C0_var = UnitGroupUnitFromEnd(auto9A2F87C0_g, auto9A2F87C0_u);
        if (auto9A2F87C0_var == null) { break; }
        UnitIssueOrder(auto9A2F87C0_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto9A2F87C0_var), 13.0, 315.0)), c_orderQueueReplace);
        UnitGroupAdd(gv_cinematicTempUnits, auto9A2F87C0_var);
    }
    Wait(2.0, c_timeGame);
    gf_OrderPowerStruggle(AbilityCommand("move", 0), PointFromId(866));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateIntroPlayerUnits_Init () {
    gt_CreateIntroPlayerUnits = TriggerCreate("gt_CreateIntroPlayerUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Intro Enemy Units
//--------------------------------------------------------------------------------------------------
bool gt_CreateIntroEnemyUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC8ECB8F1_g;
    int autoC8ECB8F1_u;
    unit autoC8ECB8F1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_TALDARIM, PointFromId(2904));
    UnitGroupAdd(gv_introEnemyUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_pLAYER_02_TALDARIM, PointFromId(2906));
    UnitGroupAdd(gv_introEnemyUnits, UnitLastCreated());
    autoC8ECB8F1_g = gv_introEnemyUnits;
    autoC8ECB8F1_u = UnitGroupCount(autoC8ECB8F1_g, c_unitCountAll);
    for (;; autoC8ECB8F1_u -= 1) {
        autoC8ECB8F1_var = UnitGroupUnitFromEnd(autoC8ECB8F1_g, autoC8ECB8F1_u);
        if (autoC8ECB8F1_var == null) { break; }
        UnitIssueOrder(autoC8ECB8F1_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoC8ECB8F1_var), 6.0, 135.0)), c_orderQueueReplace);
        UnitGroupAdd(gv_cinematicTempUnits, autoC8ECB8F1_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateIntroEnemyUnits_Init () {
    gt_CreateIntroEnemyUnits = TriggerCreate("gt_CreateIntroEnemyUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engage Intro Units
//--------------------------------------------------------------------------------------------------
bool gt_EngageIntroUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto733B95A5_g;
    int auto733B95A5_u;
    unit auto733B95A5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(gv_introPlayersUnits, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2916)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_introEnemyUnits, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2916)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicAlarak, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicMalash, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicDuelBubble, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    auto733B95A5_g = gv_introEnemyUnits;
    auto733B95A5_u = UnitGroupCount(auto733B95A5_g, c_unitCountAll);
    for (;; auto733B95A5_u -= 1) {
        auto733B95A5_var = UnitGroupUnitFromEnd(auto733B95A5_g, auto733B95A5_u);
        if (auto733B95A5_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(auto733B95A5_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
    }
    while (!(((UnitGroupCount(gv_introEnemyUnits, c_unitCountAlive) == 0) || (libVCMI_gf_PlayerInCinematicModeCampaign() == false)))) {
        Wait(0.25, c_timeGame);
    }
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    gf_OrderPowerStruggle(AbilityCommand("move", 0), PointFromId(867));
    UnitIssueOrder(UnitGroupUnit(gv_introPlayersUnits, 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2917)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_introPlayersUnits, 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2918)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_introPlayersUnits, 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2919)), c_orderQueueReplace);
    UnitIssueOrder(UnitGroupUnit(gv_introPlayersUnits, 1), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(2917), 1.0, 315.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_introPlayersUnits, 2), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(2918), 1.0, 315.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_introPlayersUnits, 3), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(2919), 1.0, 315.0)), c_orderQueueAddToEnd);
    Wait(3.0, c_timeGame);
    if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        return true;
    }

    UnitIssueOrder(UnitGroupUnit(gv_introPlayersUnits, 1), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(2917), 4.0, 315.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_introPlayersUnits, 2), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(2918), 4.0, 315.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitGroupUnit(gv_introPlayersUnits, 3), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromId(2919), 4.0, 315.0)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngageIntroUnits_Init () {
    gt_EngageIntroUnits = TriggerCreate("gt_EngageIntroUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Alarak/Malash Attack Logic
//--------------------------------------------------------------------------------------------------
bool gt_IntroAlarakMalashAttackLogic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto275A930E_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == true)) {
        auto275A930E_val = RandomInt(1, 3);
        if (auto275A930E_val == 1) {
            UnitIssueOrder(gv_cinematicAlarak, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_cinematicMalash, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
            UnitIssueOrder(gv_cinematicAlarak, OrderTargetingUnit(AbilityCommand("PitAlarakFightDummyAbility", 0), gv_cinematicMalash), c_orderQueueReplace);
            Wait(RandomFixed(1.5, 3.0), c_timeGame);
        }
        else if (auto275A930E_val == 2) {
            UnitIssueOrder(gv_cinematicAlarak, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_cinematicMalash, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
            UnitIssueOrder(gv_cinematicMalash, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_cinematicAlarak), c_orderQueueReplace);
            Wait(RandomFixed(1.5, 3.0), c_timeGame);
        }
        else if (auto275A930E_val == 3) {
            UnitIssueOrder(gv_cinematicAlarak, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_cinematicMalash, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
            if ((gv_tugOfWar_State == ge_PRESETTugOfWarState_Reverse)) {
                UnitIssueOrder(gv_cinematicMalash, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_cinematicAlarak), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_cinematicAlarak, OrderTargetingUnit(AbilityCommand("PitAlarakFightDummyAbility", 0), gv_cinematicMalash), c_orderQueueReplace);
            }
            Wait(RandomFixed(1.5, 3.0), c_timeGame);
        }
        else {
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroAlarakMalashAttackLogic_Init () {
    gt_IntroAlarakMalashAttackLogic = TriggerCreate("gt_IntroAlarakMalashAttackLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Alarak Regen Aura
//--------------------------------------------------------------------------------------------------
bool gt_IntroAlarakRegenAura_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1F9FA59D_g;
    int auto1F9FA59D_u;
    unit auto1F9FA59D_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == true)) {
        auto1F9FA59D_g = gv_introPlayersUnits;
        auto1F9FA59D_u = UnitGroupCount(auto1F9FA59D_g, c_unitCountAll);
        for (;; auto1F9FA59D_u -= 1) {
            auto1F9FA59D_var = UnitGroupUnitFromEnd(auto1F9FA59D_g, auto1F9FA59D_u);
            if (auto1F9FA59D_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(auto1F9FA59D_var), UnitGetPosition(gv_cinematicAlarak)) <= 12.0)) {
                UnitBehaviorAdd(auto1F9FA59D_var, "PitAlarakShieldRegen", gv_cinematicAlarak, 1);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroAlarakRegenAura_Init () {
    gt_IntroAlarakRegenAura = TriggerCreate("gt_IntroAlarakRegenAura_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC15C8B2B_g;
    int autoC15C8B2B_u;
    unit autoC15C8B2B_var;
    unitgroup autoB9958D73_g;
    int autoB9958D73_u;
    unit autoB9958D73_var;
    unitgroup autoCFCFB083_g;
    int autoCFCFB083_u;
    unit autoCFCFB083_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitRemove(gv_alarak);
    UnitRemove(gv_malash);
    autoC15C8B2B_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC15C8B2B_u = UnitGroupCount(autoC15C8B2B_g, c_unitCountAll);
    for (;; autoC15C8B2B_u -= 1) {
        autoC15C8B2B_var = UnitGroupUnitFromEnd(autoC15C8B2B_g, autoC15C8B2B_u);
        if (autoC15C8B2B_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(autoC15C8B2B_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, autoC15C8B2B_var);
            libNtve_gf_PauseUnit(autoC15C8B2B_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoB9958D73_g = gv_cinematicHiddenUnits;
    autoB9958D73_u = UnitGroupCount(autoB9958D73_g, c_unitCountAll);
    for (;; autoB9958D73_u -= 1) {
        autoB9958D73_var = UnitGroupUnitFromEnd(autoB9958D73_g, autoB9958D73_u);
        if (autoB9958D73_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB9958D73_var, false);
        if ((libNtve_gf_UnitInRegion(autoB9958D73_var, RegionFromId(10)) == true)) {
            UnitRemove(autoB9958D73_var);
        }

    }
    autoCFCFB083_g = UnitGroup(null, c_playerAny, RegionFromId(27), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCFCFB083_u = UnitGroupCount(autoCFCFB083_g, c_unitCountAll);
    for (;; autoCFCFB083_u -= 1) {
        autoCFCFB083_var = UnitGroupUnitFromEnd(autoCFCFB083_g, autoCFCFB083_u);
        if (autoCFCFB083_var == null) { break; }
        UnitSetPosition(autoCFCFB083_var, PlayerStartLocation(gv_pLAYER_01_USER), false);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PitAlarak", c_unitCreateIgnorePlacement, gv_pLAYER_07_ALARAK, PointWithOffset(PointFromId(882), -3.0, 3.0));
    gv_cinematicAlarak = UnitLastCreated();
    UnitSetFacing(UnitLastCreated(), 315.0, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.7);
    UnitAbilityEnable(gv_cinematicAlarak, "attack", false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PitMalash", c_unitCreateIgnorePlacement, gv_pLAYER_08_MALASH, PointFromId(882));
    gv_cinematicMalash = UnitLastCreated();
    UnitBehaviorRemove(gv_cinematicMalash, "PitMalashShieldRegen", 1);
    UnitBehaviorRemove(gv_cinematicMalash, "PitMalashShieldRegenAura", 1);
    UnitSetFacing(UnitLastCreated(), 135.0, 0.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.5);
    UnitAbilityEnable(gv_cinematicMalash, "attack", false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DuelBubbleUnit", c_unitCreateIgnorePlacement, 0, PointWithOffset(PointFromId(882), -1.5, 1.5));
    gv_cinematicDuelBubble = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_cinematicDuelBubble);
    UnitSetPropertyFixed(gv_cinematicDuelBubble, c_unitPropMovementSpeed, 0.5);
    libNtve_gf_ChangeUnitDamage(gv_cinematicDuelBubble, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_cinematicDuelBubble, c_unitStateStatusBar, false);
    UnitSetState(gv_cinematicDuelBubble, c_unitStateTurnSuppressed, false);
    Wait(0.5, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFCEAACD1_g;
    int autoFCEAACD1_u;
    unit autoFCEAACD1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2905), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2920), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim02|Line00037", true), c_soundIndexAny)) + 0.0), -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PTaldarim02_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitIssueOrder(gv_cinematicAlarak, OrderTargetingUnit(AbilityCommand("PitAlarakFightDummyAbility", 0), gv_cinematicMalash), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicAlarak, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_cinematicAlarak), 1.5, 320.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicMalash, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_cinematicMalash), 1.0, 320.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicDuelBubble, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_cinematicDuelBubble), 1.0, 320.0)), c_orderQueueReplace);
    TriggerExecute(gt_VictoryCreateSpectators1, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_cinematicAlarak, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    UnitKill(gv_cinematicDuelBubble);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_cinematicAlarak, OrderTargetingUnit(AbilityCommand("PitAlarakKillMalash", 0), gv_cinematicMalash), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("Event_Taldarim02_EndCine_A", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Taldarim02_PitDeath_Explosion", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_cinematicAlarak, "AnimClear Hover");
    Wait(8.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicAlarak, "pMission_Taldarim02|Line00037", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 1.0);
    TriggerExecute(gt_VictoryCreateSpectators2, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2921), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2922), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim02|Line00106", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Taldarim02|Line00136", true), c_soundIndexAny))), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicAlarak, "pMission_Taldarim02|Line00106", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_cinematicAlarak, "pMission_Taldarim02|Line00136", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    SoundPlayForPlayer(SoundLink("Event_Taldarim02_EndCine_C", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoFCEAACD1_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFCEAACD1_u = UnitGroupCount(autoFCEAACD1_g, c_unitCountAll);
    for (;; autoFCEAACD1_u -= 1) {
        autoFCEAACD1_var = UnitGroupUnitFromEnd(autoFCEAACD1_g, autoFCEAACD1_u);
        if (autoFCEAACD1_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoFCEAACD1_var, "AnimPlay Spell Stand,Victory");
        Wait(0.0625, c_timeGame);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    SoundStopAllTriggerSounds(true);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Create Spectators 1
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCreateSpectators1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_zealotCount;
    int lv_stalkerCount;
    int lv_ascendentCount;
    unitgroup lv_zealotGroup;
    unitgroup lv_stalkerGroup;
    unitgroup lv_ascendentGroup;

    // Automatic Variable Declarations
    int auto5359ECA9_ae;
    const int auto5359ECA9_ai = 1;
    int autoD5E9FE19_ae;
    const int autoD5E9FE19_ai = 1;
    int autoBE7E45DD_ae;
    const int autoBE7E45DD_ai = 1;

    // Variable Initialization
    lv_zealotCount = 11;
    lv_stalkerCount = 9;
    lv_ascendentCount = 10;
    lv_zealotGroup = UnitGroupEmpty();
    lv_stalkerGroup = UnitGroupEmpty();
    lv_ascendentGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto5359ECA9_ae = lv_zealotCount;
    lv_i = 8;
    for ( ; ( (auto5359ECA9_ai >= 0 && lv_i <= auto5359ECA9_ae) || (auto5359ECA9_ai < 0 && lv_i >= auto5359ECA9_ae) ) ; lv_i += auto5359ECA9_ai ) {
        if (((lv_i == 1) || (lv_i == 5) || (lv_i == 11))) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, PointWithOffsetPolar(PointFromName(("Outro Zealot " + IntToString(lv_i))), 8.0, (PointGetFacing(PointFromName(("Outro Zealot " + IntToString(lv_i)))) - 180.0)));
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, PointWithOffsetPolar(PointFromName(("Outro Zealot " + IntToString(lv_i))), 2.0, (PointGetFacing(PointFromName(("Outro Zealot " + IntToString(lv_i)))) - 180.0)));
        }
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Outro Zealot " + IntToString(lv_i)))), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.4);
        UnitGroupAdd(lv_zealotGroup, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    autoD5E9FE19_ae = lv_stalkerCount;
    lv_i = 8;
    for ( ; ( (autoD5E9FE19_ai >= 0 && lv_i <= autoD5E9FE19_ae) || (autoD5E9FE19_ai < 0 && lv_i >= autoD5E9FE19_ae) ) ; lv_i += autoD5E9FE19_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, PointWithOffsetPolar(PointFromName(("Outro Stalker " + IntToString(lv_i))), 4.0, (PointGetFacing(PointFromName(("Outro Stalker " + IntToString(lv_i)))) - 180.0)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.2);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Outro Stalker " + IntToString(lv_i)))), c_orderQueueReplace);
        UnitGroupAdd(lv_stalkerGroup, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    autoBE7E45DD_ae = lv_ascendentCount;
    lv_i = 9;
    for ( ; ( (autoBE7E45DD_ai >= 0 && lv_i <= autoBE7E45DD_ae) || (autoBE7E45DD_ai < 0 && lv_i >= autoBE7E45DD_ae) ) ; lv_i += autoBE7E45DD_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "HighTemplar", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, PointWithOffsetPolar(PointFromName(("Outro Ascendent " + IntToString(lv_i))), 4.0, (PointGetFacing(PointFromName(("Outro Ascendent " + IntToString(lv_i)))) - 180.0)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.2);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Outro Ascendent " + IntToString(lv_i)))), c_orderQueueReplace);
        UnitGroupAdd(lv_ascendentGroup, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCreateSpectators1_Init () {
    gt_VictoryCreateSpectators1 = TriggerCreate("gt_VictoryCreateSpectators1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Create Spectators 2
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCreateSpectators2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_zealotCount;
    int lv_stalkerCount;
    int lv_ascendentCount;
    unitgroup lv_zealotGroup;
    unitgroup lv_stalkerGroup;
    unitgroup lv_ascendentGroup;

    // Automatic Variable Declarations
    const int autoFB5AE774_ae = 7;
    const int autoFB5AE774_ai = 1;
    const int auto08E0C381_ae = 7;
    const int auto08E0C381_ai = 1;
    const int autoDB00BCCA_ae = 8;
    const int autoDB00BCCA_ai = 1;

    // Variable Initialization
    lv_zealotCount = 11;
    lv_stalkerCount = 9;
    lv_ascendentCount = 10;
    lv_zealotGroup = UnitGroupEmpty();
    lv_stalkerGroup = UnitGroupEmpty();
    lv_ascendentGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoFB5AE774_ai >= 0 && lv_i <= autoFB5AE774_ae) || (autoFB5AE774_ai < 0 && lv_i >= autoFB5AE774_ae) ) ; lv_i += autoFB5AE774_ai ) {
        if (((lv_i == 1) || (lv_i == 5) || (lv_i == 11))) {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, PointWithOffsetPolar(PointFromName(("Outro Zealot " + IntToString(lv_i))), 8.0, (PointGetFacing(PointFromName(("Outro Zealot " + IntToString(lv_i)))) - 180.0)));
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, PointWithOffsetPolar(PointFromName(("Outro Zealot " + IntToString(lv_i))), 2.0, (PointGetFacing(PointFromName(("Outro Zealot " + IntToString(lv_i)))) - 180.0)));
        }
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Outro Zealot " + IntToString(lv_i)))), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.4);
        UnitGroupAdd(lv_zealotGroup, UnitLastCreated());
    }
    lv_i = 1;
    for ( ; ( (auto08E0C381_ai >= 0 && lv_i <= auto08E0C381_ae) || (auto08E0C381_ai < 0 && lv_i >= auto08E0C381_ae) ) ; lv_i += auto08E0C381_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Stalker", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, PointWithOffsetPolar(PointFromName(("Outro Stalker " + IntToString(lv_i))), 3.5, (PointGetFacing(PointFromName(("Outro Stalker " + IntToString(lv_i)))) - 180.0)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.2);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Outro Stalker " + IntToString(lv_i)))), c_orderQueueReplace);
        UnitGroupAdd(lv_stalkerGroup, UnitLastCreated());
    }
    lv_i = 1;
    for ( ; ( (autoDB00BCCA_ai >= 0 && lv_i <= autoDB00BCCA_ae) || (autoDB00BCCA_ai < 0 && lv_i >= autoDB00BCCA_ae) ) ; lv_i += autoDB00BCCA_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "HighTemplar", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, PointWithOffsetPolar(PointFromName(("Outro Ascendent " + IntToString(lv_i))), 5.0, (PointGetFacing(PointFromName(("Outro Ascendent " + IntToString(lv_i)))) - 180.0)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.2);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Outro Ascendent " + IntToString(lv_i)))), c_orderQueueReplace);
        UnitGroupAdd(lv_ascendentGroup, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCreateSpectators2_Init () {
    gt_VictoryCreateSpectators2 = TriggerCreate("gt_VictoryCreateSpectators2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGameQ_Init();
    gt_TalDarimPylonDies_Init();
    gt_EncourageExpansionQ_Init();
    gt_PlayerReachesMidPointProgressSave_Init();
    gt_RevealFinalBaseQ_Init();
    gt_TugOfWarInitialize_Init();
    gt_TugOfWarController_Init();
    gt_TugOfWarStateUpdate_Init();
    gt_TugOfWarSpeedUpdates_Init();
    gt_TugOfWarMoveBossTarget_Init();
    gt_TugOfWarAlarakMalashAttackLogic_Init();
    gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Init();
    gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Init();
    gt_TugOfWarLosingGround01WarningQ_Init();
    gt_TugOfWarLosingGround02WarningQ_Init();
    gt_TugOfWarDefeatImminentWarningQ_Init();
    gt_TugOfWarVictoryImminentQ_Init();
    gt_RevealBonusObjectiveQ_Init();
    gt_PlayerLeavesBonusObjectiveReveal_Init();
    gt_BonusObjectiveTimedReveal_Init();
    gt_SlaynElemental01KilledQ_Init();
    gt_SlaynElemental02KilledQ_Init();
    gt_SlaynElemental03KilledQ_Init();
    gt_CritterDies_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_UnitSuperWarpedIn_Init();
    gt_InitWaveDataVariable_Init();
    gt_AIReplaceWithWarpIn_Init();
    gt_HybridDominatorIsCreated_Init();
    gt_HybridBehemothIsCreated_Init();
    gt_InitSpecialWaveDataVariable_Init();
    gt_AIReplaceWithWarpInSpecial_Init();
    gt_SpecialEscortWave01Q_Init();
    gt_SpecialEscortWave02Q_Init();
    gt_SpecialEscortWave03Q_Init();
    gt_SpecialEscortWave04Q_Init();
    gt_SpecialEscortWave05RepeatableQ_Init();
    gt_AttackWave01Q_Init();
    gt_AttackWave04Q_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryProtectRitualCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StatForwardPushTime_Init();
    gt_StatMalashEscortsKilled_Init();
    gt_MalashEscortsAddToGroup_Init();
    gt_StatAchievementEnemyNexusesDestroyed_Init();
    gt_AchievementAlarakEscortCount_Init();
    gt_AlarakEscortsAddToGroup_Init();
    gt_AlarakEscortsRemoveFromGroup_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveKillMalashCreate_Init();
    gt_ObjectiveKillMalashComplete_Init();
    gt_ObjectiveKillMalashFailed_Init();
    gt_ObjectiveAlarakMustSurviveCreate_Init();
    gt_ObjectiveAlarakMustSurviveComplete_Init();
    gt_ObjectiveAlarakMustSurviveFailed_Init();
    gt_ObjectiveKillSlaynElementalsCreate_Init();
    gt_ObjectiveKillSlaynElementalsComplete_Init();
    gt_ObjectiveKillSlaynElementalsUpdate_Init();
    gt_ObjectiveKillSlaynElementalsFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_CreateIntroPlayerUnits_Init();
    gt_CreateIntroEnemyUnits_Init();
    gt_EngageIntroUnits_Init();
    gt_IntroAlarakMalashAttackLogic_Init();
    gt_IntroAlarakRegenAura_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryCreateSpectators1_Init();
    gt_VictoryCreateSpectators2_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
