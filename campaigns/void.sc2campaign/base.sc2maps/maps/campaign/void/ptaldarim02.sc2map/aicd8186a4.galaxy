//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: P02 Escort Waves
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiCD8186A4_defGather;
string[17] aiCD8186A4_customData;
wave[17] aiCD8186A4_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave1_enabled;
unitgroup[17] aiCD8186A4_wave1_lastUnits;
wave[17] aiCD8186A4_wave1_lastWave;
trigger aiCD8186A4_wave1_trigger = null;
int aiCD8186A4_wave1_runPlayer;
playergroup aiCD8186A4_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave1_enabled[init_i] = true;
        aiCD8186A4_wave1_lastUnits[init_i] = null;
        aiCD8186A4_wave1_lastWave[init_i] = null;
    }

    aiCD8186A4_wave1_trigger = TriggerCreate("aiCD8186A4_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave1_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave1_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave1_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave1_runPlayer;
    playergroup target = aiCD8186A4_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 150; }
    if (d == 4) { ta = 120; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave1_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave1_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave1_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave1_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave1_runPlayer = p;
    aiCD8186A4_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave4_enabled;
unitgroup[17] aiCD8186A4_wave4_lastUnits;
wave[17] aiCD8186A4_wave4_lastWave;
trigger aiCD8186A4_wave4_trigger = null;
int aiCD8186A4_wave4_runPlayer;
playergroup aiCD8186A4_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave4_enabled[init_i] = true;
        aiCD8186A4_wave4_lastUnits[init_i] = null;
        aiCD8186A4_wave4_lastWave[init_i] = null;
    }

    aiCD8186A4_wave4_trigger = TriggerCreate("aiCD8186A4_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave4_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave4_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave4_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave4_runPlayer;
    playergroup target = aiCD8186A4_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 90; }
    if (d == 2) { ta = 90; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave4_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave4_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave4_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave4_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave4_runPlayer = p;
    aiCD8186A4_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave6_enabled;
unitgroup[17] aiCD8186A4_wave6_lastUnits;
wave[17] aiCD8186A4_wave6_lastWave;
trigger aiCD8186A4_wave6_trigger = null;
int aiCD8186A4_wave6_runPlayer;
playergroup aiCD8186A4_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave6_enabled[init_i] = true;
        aiCD8186A4_wave6_lastUnits[init_i] = null;
        aiCD8186A4_wave6_lastWave[init_i] = null;
    }

    aiCD8186A4_wave6_trigger = TriggerCreate("aiCD8186A4_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave6_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave6_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave6_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave6_runPlayer;
    playergroup target = aiCD8186A4_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 150; }
    if (d == 2) { ta = 150; }
    if (d == 3) { ta = 90; }
    if (d == 4) { ta = 90; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave6_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave6_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave6_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave6_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave6_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave6_runPlayer = p;
    aiCD8186A4_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave5_enabled;
unitgroup[17] aiCD8186A4_wave5_lastUnits;
wave[17] aiCD8186A4_wave5_lastWave;
trigger aiCD8186A4_wave5_trigger = null;
int aiCD8186A4_wave5_runPlayer;
playergroup aiCD8186A4_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave5_enabled[init_i] = true;
        aiCD8186A4_wave5_lastUnits[init_i] = null;
        aiCD8186A4_wave5_lastWave[init_i] = null;
    }

    aiCD8186A4_wave5_trigger = TriggerCreate("aiCD8186A4_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave5_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave5_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave5_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave5_runPlayer;
    playergroup target = aiCD8186A4_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave5_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave5_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave5_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave5_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave5_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave5_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave5_runPlayer = p;
    aiCD8186A4_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave7_enabled;
unitgroup[17] aiCD8186A4_wave7_lastUnits;
wave[17] aiCD8186A4_wave7_lastWave;
trigger aiCD8186A4_wave7_trigger = null;
int aiCD8186A4_wave7_runPlayer;
playergroup aiCD8186A4_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave7_enabled[init_i] = true;
        aiCD8186A4_wave7_lastUnits[init_i] = null;
        aiCD8186A4_wave7_lastWave[init_i] = null;
    }

    aiCD8186A4_wave7_trigger = TriggerCreate("aiCD8186A4_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave7_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave7_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave7_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave7_runPlayer;
    playergroup target = aiCD8186A4_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave7_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Sentry", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave7_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave7_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave7_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave7_runPlayer = p;
    aiCD8186A4_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave13_enabled;
unitgroup[17] aiCD8186A4_wave13_lastUnits;
wave[17] aiCD8186A4_wave13_lastWave;
trigger aiCD8186A4_wave13_trigger = null;
int aiCD8186A4_wave13_runPlayer;
playergroup aiCD8186A4_wave13_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave13_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave13_enabled[init_i] = true;
        aiCD8186A4_wave13_lastUnits[init_i] = null;
        aiCD8186A4_wave13_lastWave[init_i] = null;
    }

    aiCD8186A4_wave13_trigger = TriggerCreate("aiCD8186A4_wave13_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave13_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave13_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave13_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave13_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave13_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave13_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave13_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave13_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave13_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave13_runPlayer;
    playergroup target = aiCD8186A4_wave13_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave13_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave13_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave13_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Phoenix", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave13_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Oracle", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave13_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave13_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave13_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave13_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave13_runPlayer = p;
    aiCD8186A4_wave13_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave13_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave14_enabled;
unitgroup[17] aiCD8186A4_wave14_lastUnits;
wave[17] aiCD8186A4_wave14_lastWave;
trigger aiCD8186A4_wave14_trigger = null;
int aiCD8186A4_wave14_runPlayer;
playergroup aiCD8186A4_wave14_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave14_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave14_enabled[init_i] = true;
        aiCD8186A4_wave14_lastUnits[init_i] = null;
        aiCD8186A4_wave14_lastWave[init_i] = null;
    }

    aiCD8186A4_wave14_trigger = TriggerCreate("aiCD8186A4_wave14_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave14_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave14_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave14_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave14_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave14_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave14_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave14_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave14_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave14_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave14_runPlayer;
    playergroup target = aiCD8186A4_wave14_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave14_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave14_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave14_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave14_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave14_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave14_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave14_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave14_runPlayer = p;
    aiCD8186A4_wave14_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave14_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave12_enabled;
unitgroup[17] aiCD8186A4_wave12_lastUnits;
wave[17] aiCD8186A4_wave12_lastWave;
trigger aiCD8186A4_wave12_trigger = null;
int aiCD8186A4_wave12_runPlayer;
playergroup aiCD8186A4_wave12_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave12_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave12_enabled[init_i] = true;
        aiCD8186A4_wave12_lastUnits[init_i] = null;
        aiCD8186A4_wave12_lastWave[init_i] = null;
    }

    aiCD8186A4_wave12_trigger = TriggerCreate("aiCD8186A4_wave12_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave12_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave12_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave12_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave12_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave12_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave12_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave12_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave12_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave12_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave12_runPlayer;
    playergroup target = aiCD8186A4_wave12_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave12_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 120; }
    if (d == 2) { ta = 120; }
    if (d == 3) { ta = 120; }
    if (d == 4) { ta = 120; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave12_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Scout", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave12_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Carrier", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave12_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Oracle", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave12_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave12_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave12_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave12_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave12_runPlayer = p;
    aiCD8186A4_wave12_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave12_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave30_enabled;
unitgroup[17] aiCD8186A4_wave30_lastUnits;
wave[17] aiCD8186A4_wave30_lastWave;
trigger aiCD8186A4_wave30_trigger = null;
int aiCD8186A4_wave30_runPlayer;
playergroup aiCD8186A4_wave30_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave30_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave30_enabled[init_i] = true;
        aiCD8186A4_wave30_lastUnits[init_i] = null;
        aiCD8186A4_wave30_lastWave[init_i] = null;
    }

    aiCD8186A4_wave30_trigger = TriggerCreate("aiCD8186A4_wave30_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave30_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave30_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave30_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave30_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave30_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave30_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave30_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave30_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave30_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave30_runPlayer;
    playergroup target = aiCD8186A4_wave30_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave30_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave30_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave30_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Sentry", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave30_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "HighTemplar", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave30_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave30_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave30_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave30_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave30_runPlayer = p;
    aiCD8186A4_wave30_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave30_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave18_enabled;
unitgroup[17] aiCD8186A4_wave18_lastUnits;
wave[17] aiCD8186A4_wave18_lastWave;
trigger aiCD8186A4_wave18_trigger = null;
int aiCD8186A4_wave18_runPlayer;
playergroup aiCD8186A4_wave18_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave18_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave18_enabled[init_i] = true;
        aiCD8186A4_wave18_lastUnits[init_i] = null;
        aiCD8186A4_wave18_lastWave[init_i] = null;
    }

    aiCD8186A4_wave18_trigger = TriggerCreate("aiCD8186A4_wave18_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave18_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave18_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave18_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave18_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave18_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave18_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave18_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave18_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave18_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave18_runPlayer;
    playergroup target = aiCD8186A4_wave18_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave18_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave18_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Phoenix", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave18_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "VoidRay", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave18_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Oracle", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave18_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave18_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave18_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave18_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave18_runPlayer = p;
    aiCD8186A4_wave18_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave18_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave19_enabled;
unitgroup[17] aiCD8186A4_wave19_lastUnits;
wave[17] aiCD8186A4_wave19_lastWave;
trigger aiCD8186A4_wave19_trigger = null;
int aiCD8186A4_wave19_runPlayer;
playergroup aiCD8186A4_wave19_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave19_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave19_enabled[init_i] = true;
        aiCD8186A4_wave19_lastUnits[init_i] = null;
        aiCD8186A4_wave19_lastWave[init_i] = null;
    }

    aiCD8186A4_wave19_trigger = TriggerCreate("aiCD8186A4_wave19_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave19_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave19_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave19_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave19_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave19_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave19_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave19_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave19_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave19_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave19_runPlayer;
    playergroup target = aiCD8186A4_wave19_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave19_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave19_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave19_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave19_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave19_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave19_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave19_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave19_runPlayer = p;
    aiCD8186A4_wave19_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave19_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave20_enabled;
unitgroup[17] aiCD8186A4_wave20_lastUnits;
wave[17] aiCD8186A4_wave20_lastWave;
trigger aiCD8186A4_wave20_trigger = null;
int aiCD8186A4_wave20_runPlayer;
playergroup aiCD8186A4_wave20_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave20_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave20_enabled[init_i] = true;
        aiCD8186A4_wave20_lastUnits[init_i] = null;
        aiCD8186A4_wave20_lastWave[init_i] = null;
    }

    aiCD8186A4_wave20_trigger = TriggerCreate("aiCD8186A4_wave20_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave20_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave20_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave20_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave20_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave20_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave20_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave20_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave20_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave20_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave20_runPlayer;
    playergroup target = aiCD8186A4_wave20_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave20_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave20_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave20_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Sentry", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave20_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Tempest", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave20_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Oracle", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave20_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave20_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave20_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave20_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave20_runPlayer = p;
    aiCD8186A4_wave20_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave20_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave31_enabled;
unitgroup[17] aiCD8186A4_wave31_lastUnits;
wave[17] aiCD8186A4_wave31_lastWave;
trigger aiCD8186A4_wave31_trigger = null;
int aiCD8186A4_wave31_runPlayer;
playergroup aiCD8186A4_wave31_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave31_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave31_enabled[init_i] = true;
        aiCD8186A4_wave31_lastUnits[init_i] = null;
        aiCD8186A4_wave31_lastWave[init_i] = null;
    }

    aiCD8186A4_wave31_trigger = TriggerCreate("aiCD8186A4_wave31_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave31_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave31_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave31_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave31_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave31_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave31_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave31_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave31_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave31_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave31_runPlayer;
    playergroup target = aiCD8186A4_wave31_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave31_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave31_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave31_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave31_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave31_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave31_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave31_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave31_runPlayer = p;
    aiCD8186A4_wave31_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave31_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave32_enabled;
unitgroup[17] aiCD8186A4_wave32_lastUnits;
wave[17] aiCD8186A4_wave32_lastWave;
trigger aiCD8186A4_wave32_trigger = null;
int aiCD8186A4_wave32_runPlayer;
playergroup aiCD8186A4_wave32_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave32_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave32_enabled[init_i] = true;
        aiCD8186A4_wave32_lastUnits[init_i] = null;
        aiCD8186A4_wave32_lastWave[init_i] = null;
    }

    aiCD8186A4_wave32_trigger = TriggerCreate("aiCD8186A4_wave32_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave32_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave32_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave32_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave32_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave32_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave32_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave32_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave32_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave32_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave32_runPlayer;
    playergroup target = aiCD8186A4_wave32_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave32_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave32_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave32_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Sentry", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave32_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave32_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Oracle", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave32_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave32_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave32_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave32_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave32_runPlayer = p;
    aiCD8186A4_wave32_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave32_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave23_enabled;
unitgroup[17] aiCD8186A4_wave23_lastUnits;
wave[17] aiCD8186A4_wave23_lastWave;
trigger aiCD8186A4_wave23_trigger = null;
int aiCD8186A4_wave23_runPlayer;
playergroup aiCD8186A4_wave23_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave23_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave23_enabled[init_i] = true;
        aiCD8186A4_wave23_lastUnits[init_i] = null;
        aiCD8186A4_wave23_lastWave[init_i] = null;
    }

    aiCD8186A4_wave23_trigger = TriggerCreate("aiCD8186A4_wave23_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave23_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave23_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave23_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave23_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave23_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave23_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave23_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave23_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave23_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave23_runPlayer;
    playergroup target = aiCD8186A4_wave23_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave23_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave23_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Oracle", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave23_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave23_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave23_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave23_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave23_runPlayer = p;
    aiCD8186A4_wave23_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave23_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave2_enabled;
unitgroup[17] aiCD8186A4_wave2_lastUnits;
wave[17] aiCD8186A4_wave2_lastWave;
trigger aiCD8186A4_wave2_trigger = null;
int aiCD8186A4_wave2_runPlayer;
playergroup aiCD8186A4_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave2_enabled[init_i] = true;
        aiCD8186A4_wave2_lastUnits[init_i] = null;
        aiCD8186A4_wave2_lastWave[init_i] = null;
    }

    aiCD8186A4_wave2_trigger = TriggerCreate("aiCD8186A4_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave2_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave2_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave2_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave2_runPlayer;
    playergroup target = aiCD8186A4_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave2_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 6; }
    if (d == 2) { createCount = 6; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 6; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Scout", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave2_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave2_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave2_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave2_runPlayer = p;
    aiCD8186A4_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave3_enabled;
unitgroup[17] aiCD8186A4_wave3_lastUnits;
wave[17] aiCD8186A4_wave3_lastWave;
trigger aiCD8186A4_wave3_trigger = null;
int aiCD8186A4_wave3_runPlayer;
playergroup aiCD8186A4_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave3_enabled[init_i] = true;
        aiCD8186A4_wave3_lastUnits[init_i] = null;
        aiCD8186A4_wave3_lastWave[init_i] = null;
    }

    aiCD8186A4_wave3_trigger = TriggerCreate("aiCD8186A4_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave3_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave3_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave3_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave3_runPlayer;
    playergroup target = aiCD8186A4_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave3_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 5; }
    if (d == 2) { createCount = 5; }
    if (d == 3) { createCount = 5; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Tempest", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave3_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave3_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave3_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave3_runPlayer = p;
    aiCD8186A4_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave8_enabled;
unitgroup[17] aiCD8186A4_wave8_lastUnits;
wave[17] aiCD8186A4_wave8_lastWave;
trigger aiCD8186A4_wave8_trigger = null;
int aiCD8186A4_wave8_runPlayer;
playergroup aiCD8186A4_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave8_enabled[init_i] = true;
        aiCD8186A4_wave8_lastUnits[init_i] = null;
        aiCD8186A4_wave8_lastWave[init_i] = null;
    }

    aiCD8186A4_wave8_trigger = TriggerCreate("aiCD8186A4_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave8_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave8_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave8_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave8_runPlayer;
    playergroup target = aiCD8186A4_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave8_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 5; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave8_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave8_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave8_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave8_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave8_runPlayer = p;
    aiCD8186A4_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave9_enabled;
unitgroup[17] aiCD8186A4_wave9_lastUnits;
wave[17] aiCD8186A4_wave9_lastWave;
trigger aiCD8186A4_wave9_trigger = null;
int aiCD8186A4_wave9_runPlayer;
playergroup aiCD8186A4_wave9_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave9_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave9_enabled[init_i] = true;
        aiCD8186A4_wave9_lastUnits[init_i] = null;
        aiCD8186A4_wave9_lastWave[init_i] = null;
    }

    aiCD8186A4_wave9_trigger = TriggerCreate("aiCD8186A4_wave9_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave9_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave9_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave9_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave9_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave9_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave9_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave9_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave9_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave9_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave9_runPlayer;
    playergroup target = aiCD8186A4_wave9_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave9_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave9_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave9_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Carrier", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave9_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "Oracle", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave9_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave9_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave9_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave9_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave9_runPlayer = p;
    aiCD8186A4_wave9_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave9_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave10_enabled;
unitgroup[17] aiCD8186A4_wave10_lastUnits;
wave[17] aiCD8186A4_wave10_lastWave;
trigger aiCD8186A4_wave10_trigger = null;
int aiCD8186A4_wave10_runPlayer;
playergroup aiCD8186A4_wave10_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave10_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave10_enabled[init_i] = true;
        aiCD8186A4_wave10_lastUnits[init_i] = null;
        aiCD8186A4_wave10_lastWave[init_i] = null;
    }

    aiCD8186A4_wave10_trigger = TriggerCreate("aiCD8186A4_wave10_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave10_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave10_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave10_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave10_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave10_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave10_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave10_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave10_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave10_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave10_runPlayer;
    playergroup target = aiCD8186A4_wave10_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave10_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave10_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 6; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave10_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 2; }
    if (d == 2) { createCount = 2; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Archon", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave10_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Immortal", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave10_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Colossus", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave10_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave10_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave10_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave10_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave10_runPlayer = p;
    aiCD8186A4_wave10_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave10_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave11_enabled;
unitgroup[17] aiCD8186A4_wave11_lastUnits;
wave[17] aiCD8186A4_wave11_lastWave;
trigger aiCD8186A4_wave11_trigger = null;
int aiCD8186A4_wave11_runPlayer;
playergroup aiCD8186A4_wave11_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave11_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave11_enabled[init_i] = true;
        aiCD8186A4_wave11_lastUnits[init_i] = null;
        aiCD8186A4_wave11_lastWave[init_i] = null;
    }

    aiCD8186A4_wave11_trigger = TriggerCreate("aiCD8186A4_wave11_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave11_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave11_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave11_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave11_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave11_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave11_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave11_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave11_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave11_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave11_runPlayer;
    playergroup target = aiCD8186A4_wave11_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave11_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave11_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave11_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 4; }
    if (createCount > 0) {
        UnitCreate(createCount, "VoidRay", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave11_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Oracle", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave11_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave11_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave11_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave11_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave11_runPlayer = p;
    aiCD8186A4_wave11_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave11_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave15_enabled;
unitgroup[17] aiCD8186A4_wave15_lastUnits;
wave[17] aiCD8186A4_wave15_lastWave;
trigger aiCD8186A4_wave15_trigger = null;
int aiCD8186A4_wave15_runPlayer;
playergroup aiCD8186A4_wave15_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave15_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave15_enabled[init_i] = true;
        aiCD8186A4_wave15_lastUnits[init_i] = null;
        aiCD8186A4_wave15_lastWave[init_i] = null;
    }

    aiCD8186A4_wave15_trigger = TriggerCreate("aiCD8186A4_wave15_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave15_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave15_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave15_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave15_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave15_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave15_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave15_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave15_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave15_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave15_runPlayer;
    playergroup target = aiCD8186A4_wave15_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave15_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave15_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 8; }
    if (d == 2) { createCount = 8; }
    if (d == 3) { createCount = 8; }
    if (d == 4) { createCount = 8; }
    if (createCount > 0) {
        UnitCreate(createCount, "Zealot", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave15_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 4; }
    if (d == 2) { createCount = 4; }
    if (d == 3) { createCount = 4; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave15_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "Tempest", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave15_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave15_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave15_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave15_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave15_runPlayer = p;
    aiCD8186A4_wave15_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave15_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiCD8186A4_wave16_enabled;
unitgroup[17] aiCD8186A4_wave16_lastUnits;
wave[17] aiCD8186A4_wave16_lastWave;
trigger aiCD8186A4_wave16_trigger = null;
int aiCD8186A4_wave16_runPlayer;
playergroup aiCD8186A4_wave16_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave16_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiCD8186A4_wave16_enabled[init_i] = true;
        aiCD8186A4_wave16_lastUnits[init_i] = null;
        aiCD8186A4_wave16_lastWave[init_i] = null;
    }

    aiCD8186A4_wave16_trigger = TriggerCreate("aiCD8186A4_wave16_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave16_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_wave16_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave16_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiCD8186A4_wave16_enabled[p];
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave16_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave16_lastUnits[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave16_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_wave16_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave16_runFunc (bool c, bool a) {
    int p = aiCD8186A4_wave16_runPlayer;
    playergroup target = aiCD8186A4_wave16_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiCD8186A4_wave16_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiCD8186A4_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 30; }
    if (d == 2) { tg = 30; }
    if (d == 3) { tg = 30; }
    if (d == 4) { tg = 30; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiCD8186A4_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    createPoint = gatherPoint;
    createPoint = PointFromId(343);

    aiCD8186A4_wave16_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Stalker", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave16_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 1) { createCount = 3; }
    if (d == 2) { createCount = 3; }
    if (d == 3) { createCount = 3; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Carrier", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave16_lastUnits[p], UnitLastCreatedGroup());
    }

    createCount = 0;
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 3; }
    if (createCount > 0) {
        UnitCreate(createCount, "Oracle", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiCD8186A4_wave16_lastUnits[p], UnitLastCreatedGroup());
    }

    TriggerExecute(TriggerFind("gt_AIReplaceWithWarpIn_Func"), true, false);
    AIAttackWaveSend(p, ts, false);
    aiCD8186A4_wave16_lastWave[p] = WaveLastCreated();
    aiCD8186A4_lastWave[p] = aiCD8186A4_wave16_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave16_run (int p, playergroup target, bool wait) {
    aiCD8186A4_wave16_runPlayer = p;
    aiCD8186A4_wave16_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_wave16_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiCD8186A4_wave1_enable(p, val); }
    if (w == 4) { aiCD8186A4_wave4_enable(p, val); }
    if (w == 6) { aiCD8186A4_wave6_enable(p, val); }
    if (w == 5) { aiCD8186A4_wave5_enable(p, val); }
    if (w == 7) { aiCD8186A4_wave7_enable(p, val); }
    if (w == 13) { aiCD8186A4_wave13_enable(p, val); }
    if (w == 14) { aiCD8186A4_wave14_enable(p, val); }
    if (w == 12) { aiCD8186A4_wave12_enable(p, val); }
    if (w == 30) { aiCD8186A4_wave30_enable(p, val); }
    if (w == 18) { aiCD8186A4_wave18_enable(p, val); }
    if (w == 19) { aiCD8186A4_wave19_enable(p, val); }
    if (w == 20) { aiCD8186A4_wave20_enable(p, val); }
    if (w == 31) { aiCD8186A4_wave31_enable(p, val); }
    if (w == 32) { aiCD8186A4_wave32_enable(p, val); }
    if (w == 23) { aiCD8186A4_wave23_enable(p, val); }
    if (w == 2) { aiCD8186A4_wave2_enable(p, val); }
    if (w == 3) { aiCD8186A4_wave3_enable(p, val); }
    if (w == 8) { aiCD8186A4_wave8_enable(p, val); }
    if (w == 9) { aiCD8186A4_wave9_enable(p, val); }
    if (w == 10) { aiCD8186A4_wave10_enable(p, val); }
    if (w == 11) { aiCD8186A4_wave11_enable(p, val); }
    if (w == 15) { aiCD8186A4_wave15_enable(p, val); }
    if (w == 16) { aiCD8186A4_wave16_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiCD8186A4_wave1_isEnabled(p); }
    if (w == 4) { return aiCD8186A4_wave4_isEnabled(p); }
    if (w == 6) { return aiCD8186A4_wave6_isEnabled(p); }
    if (w == 5) { return aiCD8186A4_wave5_isEnabled(p); }
    if (w == 7) { return aiCD8186A4_wave7_isEnabled(p); }
    if (w == 13) { return aiCD8186A4_wave13_isEnabled(p); }
    if (w == 14) { return aiCD8186A4_wave14_isEnabled(p); }
    if (w == 12) { return aiCD8186A4_wave12_isEnabled(p); }
    if (w == 30) { return aiCD8186A4_wave30_isEnabled(p); }
    if (w == 18) { return aiCD8186A4_wave18_isEnabled(p); }
    if (w == 19) { return aiCD8186A4_wave19_isEnabled(p); }
    if (w == 20) { return aiCD8186A4_wave20_isEnabled(p); }
    if (w == 31) { return aiCD8186A4_wave31_isEnabled(p); }
    if (w == 32) { return aiCD8186A4_wave32_isEnabled(p); }
    if (w == 23) { return aiCD8186A4_wave23_isEnabled(p); }
    if (w == 2) { return aiCD8186A4_wave2_isEnabled(p); }
    if (w == 3) { return aiCD8186A4_wave3_isEnabled(p); }
    if (w == 8) { return aiCD8186A4_wave8_isEnabled(p); }
    if (w == 9) { return aiCD8186A4_wave9_isEnabled(p); }
    if (w == 10) { return aiCD8186A4_wave10_isEnabled(p); }
    if (w == 11) { return aiCD8186A4_wave11_isEnabled(p); }
    if (w == 15) { return aiCD8186A4_wave15_isEnabled(p); }
    if (w == 16) { return aiCD8186A4_wave16_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiCD8186A4_wave_createdUnits (int w, int p) {
    if (w == 1) { return aiCD8186A4_wave1_createdUnits(p); }
    if (w == 4) { return aiCD8186A4_wave4_createdUnits(p); }
    if (w == 6) { return aiCD8186A4_wave6_createdUnits(p); }
    if (w == 5) { return aiCD8186A4_wave5_createdUnits(p); }
    if (w == 7) { return aiCD8186A4_wave7_createdUnits(p); }
    if (w == 13) { return aiCD8186A4_wave13_createdUnits(p); }
    if (w == 14) { return aiCD8186A4_wave14_createdUnits(p); }
    if (w == 12) { return aiCD8186A4_wave12_createdUnits(p); }
    if (w == 30) { return aiCD8186A4_wave30_createdUnits(p); }
    if (w == 18) { return aiCD8186A4_wave18_createdUnits(p); }
    if (w == 19) { return aiCD8186A4_wave19_createdUnits(p); }
    if (w == 20) { return aiCD8186A4_wave20_createdUnits(p); }
    if (w == 31) { return aiCD8186A4_wave31_createdUnits(p); }
    if (w == 32) { return aiCD8186A4_wave32_createdUnits(p); }
    if (w == 23) { return aiCD8186A4_wave23_createdUnits(p); }
    if (w == 2) { return aiCD8186A4_wave2_createdUnits(p); }
    if (w == 3) { return aiCD8186A4_wave3_createdUnits(p); }
    if (w == 8) { return aiCD8186A4_wave8_createdUnits(p); }
    if (w == 9) { return aiCD8186A4_wave9_createdUnits(p); }
    if (w == 10) { return aiCD8186A4_wave10_createdUnits(p); }
    if (w == 11) { return aiCD8186A4_wave11_createdUnits(p); }
    if (w == 15) { return aiCD8186A4_wave15_createdUnits(p); }
    if (w == 16) { return aiCD8186A4_wave16_createdUnits(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_wave_createdWave (int w, int p) {
    if (w == 1) { return aiCD8186A4_wave1_createdWave(p); }
    if (w == 4) { return aiCD8186A4_wave4_createdWave(p); }
    if (w == 6) { return aiCD8186A4_wave6_createdWave(p); }
    if (w == 5) { return aiCD8186A4_wave5_createdWave(p); }
    if (w == 7) { return aiCD8186A4_wave7_createdWave(p); }
    if (w == 13) { return aiCD8186A4_wave13_createdWave(p); }
    if (w == 14) { return aiCD8186A4_wave14_createdWave(p); }
    if (w == 12) { return aiCD8186A4_wave12_createdWave(p); }
    if (w == 30) { return aiCD8186A4_wave30_createdWave(p); }
    if (w == 18) { return aiCD8186A4_wave18_createdWave(p); }
    if (w == 19) { return aiCD8186A4_wave19_createdWave(p); }
    if (w == 20) { return aiCD8186A4_wave20_createdWave(p); }
    if (w == 31) { return aiCD8186A4_wave31_createdWave(p); }
    if (w == 32) { return aiCD8186A4_wave32_createdWave(p); }
    if (w == 23) { return aiCD8186A4_wave23_createdWave(p); }
    if (w == 2) { return aiCD8186A4_wave2_createdWave(p); }
    if (w == 3) { return aiCD8186A4_wave3_createdWave(p); }
    if (w == 8) { return aiCD8186A4_wave8_createdWave(p); }
    if (w == 9) { return aiCD8186A4_wave9_createdWave(p); }
    if (w == 10) { return aiCD8186A4_wave10_createdWave(p); }
    if (w == 11) { return aiCD8186A4_wave11_createdWave(p); }
    if (w == 15) { return aiCD8186A4_wave15_createdWave(p); }
    if (w == 16) { return aiCD8186A4_wave16_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiCD8186A4_wave1_run(p, target, wait); }
    if (w == 4) { aiCD8186A4_wave4_run(p, target, wait); }
    if (w == 6) { aiCD8186A4_wave6_run(p, target, wait); }
    if (w == 5) { aiCD8186A4_wave5_run(p, target, wait); }
    if (w == 7) { aiCD8186A4_wave7_run(p, target, wait); }
    if (w == 13) { aiCD8186A4_wave13_run(p, target, wait); }
    if (w == 14) { aiCD8186A4_wave14_run(p, target, wait); }
    if (w == 12) { aiCD8186A4_wave12_run(p, target, wait); }
    if (w == 30) { aiCD8186A4_wave30_run(p, target, wait); }
    if (w == 18) { aiCD8186A4_wave18_run(p, target, wait); }
    if (w == 19) { aiCD8186A4_wave19_run(p, target, wait); }
    if (w == 20) { aiCD8186A4_wave20_run(p, target, wait); }
    if (w == 31) { aiCD8186A4_wave31_run(p, target, wait); }
    if (w == 32) { aiCD8186A4_wave32_run(p, target, wait); }
    if (w == 23) { aiCD8186A4_wave23_run(p, target, wait); }
    if (w == 2) { aiCD8186A4_wave2_run(p, target, wait); }
    if (w == 3) { aiCD8186A4_wave3_run(p, target, wait); }
    if (w == 8) { aiCD8186A4_wave8_run(p, target, wait); }
    if (w == 9) { aiCD8186A4_wave9_run(p, target, wait); }
    if (w == 10) { aiCD8186A4_wave10_run(p, target, wait); }
    if (w == 11) { aiCD8186A4_wave11_run(p, target, wait); }
    if (w == 15) { aiCD8186A4_wave15_run(p, target, wait); }
    if (w == 16) { aiCD8186A4_wave16_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiCD8186A4_waves_trigger = null;
int aiCD8186A4_waves_runPlayer;
playergroup aiCD8186A4_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_waves_init () {
    aiCD8186A4_waves_trigger = TriggerCreate("aiCD8186A4_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_waves_runFunc (bool c, bool a) {
    int p = aiCD8186A4_waves_runPlayer;
    playergroup target = aiCD8186A4_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiCD8186A4_wave1_run(p, target, true);
    aiCD8186A4_wave4_run(p, target, true);
    aiCD8186A4_wave6_run(p, target, true);
    aiCD8186A4_wave5_run(p, target, true);
    aiCD8186A4_wave7_run(p, target, true);
    aiCD8186A4_wave13_run(p, target, true);
    aiCD8186A4_wave14_run(p, target, true);
    aiCD8186A4_wave12_run(p, target, true);
    aiCD8186A4_wave30_run(p, target, true);
    aiCD8186A4_wave18_run(p, target, true);
    aiCD8186A4_wave19_run(p, target, true);
    aiCD8186A4_wave20_run(p, target, true);
    aiCD8186A4_wave31_run(p, target, true);
    aiCD8186A4_wave32_run(p, target, true);
    aiCD8186A4_wave23_run(p, target, true);
    aiCD8186A4_wave2_run(p, target, true);
    aiCD8186A4_wave3_run(p, target, true);
    // ==============================
    // ===== Start of repeating waves =====
    // ==============================
    aiCD8186A4_wave8_run(p, target, true);
    aiCD8186A4_wave9_run(p, target, true);
    aiCD8186A4_wave10_run(p, target, true);
    aiCD8186A4_wave11_run(p, target, true);
    aiCD8186A4_wave15_run(p, target, true);
    aiCD8186A4_wave16_run(p, target, true);

    while (true) {
        aiCD8186A4_wave8_run(p, target, true);
        aiCD8186A4_wave9_run(p, target, true);
        aiCD8186A4_wave10_run(p, target, true);
        aiCD8186A4_wave11_run(p, target, true);
        aiCD8186A4_wave15_run(p, target, true);
        aiCD8186A4_wave16_run(p, target, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_waves_run (int p, playergroup target) {
    aiCD8186A4_waves_runPlayer = p;
    aiCD8186A4_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiCD8186A4_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiCD8186A4_wave1_enable(p, val);
    aiCD8186A4_wave4_enable(p, val);
    aiCD8186A4_wave6_enable(p, val);
    aiCD8186A4_wave5_enable(p, val);
    aiCD8186A4_wave7_enable(p, val);
    aiCD8186A4_wave13_enable(p, val);
    aiCD8186A4_wave14_enable(p, val);
    aiCD8186A4_wave12_enable(p, val);
    aiCD8186A4_wave30_enable(p, val);
    aiCD8186A4_wave18_enable(p, val);
    aiCD8186A4_wave19_enable(p, val);
    aiCD8186A4_wave20_enable(p, val);
    aiCD8186A4_wave31_enable(p, val);
    aiCD8186A4_wave32_enable(p, val);
    aiCD8186A4_wave23_enable(p, val);
    aiCD8186A4_wave2_enable(p, val);
    aiCD8186A4_wave3_enable(p, val);
    aiCD8186A4_wave8_enable(p, val);
    aiCD8186A4_wave9_enable(p, val);
    aiCD8186A4_wave10_enable(p, val);
    aiCD8186A4_wave11_enable(p, val);
    aiCD8186A4_wave15_enable(p, val);
    aiCD8186A4_wave16_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_waves_stop () {
    TriggerStop(aiCD8186A4_waves_trigger);

    TriggerStop(aiCD8186A4_wave1_trigger);
    TriggerStop(aiCD8186A4_wave4_trigger);
    TriggerStop(aiCD8186A4_wave6_trigger);
    TriggerStop(aiCD8186A4_wave5_trigger);
    TriggerStop(aiCD8186A4_wave7_trigger);
    TriggerStop(aiCD8186A4_wave13_trigger);
    TriggerStop(aiCD8186A4_wave14_trigger);
    TriggerStop(aiCD8186A4_wave12_trigger);
    TriggerStop(aiCD8186A4_wave30_trigger);
    TriggerStop(aiCD8186A4_wave18_trigger);
    TriggerStop(aiCD8186A4_wave19_trigger);
    TriggerStop(aiCD8186A4_wave20_trigger);
    TriggerStop(aiCD8186A4_wave31_trigger);
    TriggerStop(aiCD8186A4_wave32_trigger);
    TriggerStop(aiCD8186A4_wave23_trigger);
    TriggerStop(aiCD8186A4_wave2_trigger);
    TriggerStop(aiCD8186A4_wave3_trigger);
    TriggerStop(aiCD8186A4_wave8_trigger);
    TriggerStop(aiCD8186A4_wave9_trigger);
    TriggerStop(aiCD8186A4_wave10_trigger);
    TriggerStop(aiCD8186A4_wave11_trigger);
    TriggerStop(aiCD8186A4_wave15_trigger);
    TriggerStop(aiCD8186A4_wave16_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiCD8186A4_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiCD8186A4_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiCD8186A4_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiCD8186A4_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiCD8186A4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiCD8186A4_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiCD8186A4_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiCD8186A4_initialized) {
        aiCD8186A4_wave1_init();
        aiCD8186A4_wave4_init();
        aiCD8186A4_wave6_init();
        aiCD8186A4_wave5_init();
        aiCD8186A4_wave7_init();
        aiCD8186A4_wave13_init();
        aiCD8186A4_wave14_init();
        aiCD8186A4_wave12_init();
        aiCD8186A4_wave30_init();
        aiCD8186A4_wave18_init();
        aiCD8186A4_wave19_init();
        aiCD8186A4_wave20_init();
        aiCD8186A4_wave31_init();
        aiCD8186A4_wave32_init();
        aiCD8186A4_wave23_init();
        aiCD8186A4_wave2_init();
        aiCD8186A4_wave3_init();
        aiCD8186A4_wave8_init();
        aiCD8186A4_wave9_init();
        aiCD8186A4_wave10_init();
        aiCD8186A4_wave11_init();
        aiCD8186A4_wave15_init();
        aiCD8186A4_wave16_init();
        aiCD8186A4_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiCD8186A4_defGather[init_i] = PointFromId(1622);
        }

        aiCD8186A4_initialized = true;
    }

    AICampaignStart(p);
}
