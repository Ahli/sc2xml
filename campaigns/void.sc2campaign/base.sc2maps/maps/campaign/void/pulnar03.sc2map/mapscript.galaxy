//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Harbinger of Oblivion
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai04DD8B1F"
include "ai372AE431"
include "ai44BBAAAE"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION3 = 4;
const int gv_pLAYER_02_DOMINION4 = 5;
const int gv_pLAYER_02_DOMINION5 = 6;
const int gv_vOID_CRYSTAL_TOTAL = 4;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_ZergWaveType_NormalWave = 0;
const int ge_ZergWaveType_KerriganWave = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_07_ZERG_STREAM;
int gv_pLAYER_08_VOIDCRYSTAL;
playergroup gv_swarmPlayerGroup;
playergroup gv_enemyPlayerGroup;
string gv_mapMusicTrack;
unit gv_artanis;
unit gv_zeratul;
unit gv_dARK_ENERGY;
fixed gv_darkEnergyInitialSpeed;
fixed gv_darkEnergyProgressedSpeed;
unitgroup gv_feedbackFodder;
unitgroup gv_psiStormFodder;
unit gv_hybrid01;
unit gv_hybrid02;
int gv_hybridPing;
int gv_findArtanisPing;
unitgroup gv_kerriganSwarmAiders;
unitgroup gv_hybridGroup;
unitgroup gv_s1PlayerUnits;
region gv_darkEnergyBlackRegion;
unit[7] gv_townCenterUnits;
unitgroup gv_townCenterGroup;
region gv_darkEnergyVisionRegion;
int gv_swarmBasesDestroyed;
int gv_conduitIndex;
int gv_kerriganWaveCount;
int gv_zergWaveCount;
int gv_zergWavePing;
int gv_zergStreamStage;
timer gv_zergStreamStageTimer;
timer gv_zergStreamWaveTimer;
int gv_voidCrystalsDisabled;
int[5] gv_voidCrystalPing;
unit[5] gv_voidCrystal;
unitgroup[5] gv_voidCrystalGuards;
bool[5] gv_voidCrystalClear;
unitgroup gv_retributionGroup;
int gv_retributionGroupPing;
string gv_heroReviveLinkKerrigan;
unit gv_kerriganCocoon;
int gv_vesselsActivated;
unitgroup[4] gv_vesselGuards;
int gv_psiStormKillCount;
fixed gv_feedbackDamage;
int gv_highTemplarOrArchonDamage;
int gv_anniversaryAchievementTermHighTemplarorArchonDamage;
bool[5] gv_masteryWindowClosed;
int gv_masteryAchievementProgress;
int gv_hybridIncrementer;
int gv_objectiveDestroyZergBase2;
int gv_objectiveDestroyZergBase3;
int gv_objectiveDestroyZergBase;
int gv_objectiveDestroyZergBase4;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unitgroup gv_introUnits;
unit gv_midArtanis;
unit gv_midKerrigan;
unitgroup gv_midProtoss;
unitgroup gv_midZerg;
bool gv_midMusicCompleted;
unit gv_victoryBeamCaster;
unit gv_victoryKerrigan;
unit gv_victoryArtanis;
unit gv_victoryVoidCrystal;
camerainfo gv_victoryVoidCrystalCamera;
sound gv_victoryStinger;

void InitGlobals () {
    int init_i;

    gv_pLAYER_07_ZERG_STREAM = 7;
    gv_pLAYER_08_VOIDCRYSTAL = 8;
    gv_swarmPlayerGroup = PlayerGroupEmpty();
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_feedbackFodder = UnitGroupEmpty();
    gv_psiStormFodder = UnitGroupEmpty();
    gv_hybridPing = c_invalidPingId;
    gv_findArtanisPing = c_invalidPingId;
    gv_kerriganSwarmAiders = UnitGroupEmpty();
    gv_hybridGroup = UnitGroupEmpty();
    gv_s1PlayerUnits = UnitGroupEmpty();
    gv_townCenterGroup = UnitGroupEmpty();
    gv_zergWavePing = c_invalidPingId;
    gv_zergStreamStageTimer = TimerCreate();
    gv_zergStreamWaveTimer = TimerCreate();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_voidCrystalPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_voidCrystalGuards[init_i] = UnitGroupEmpty();
    }
    gv_retributionGroup = UnitGroupEmpty();
    gv_retributionGroupPing = c_invalidPingId;
    gv_heroReviveLinkKerrigan = "Abil/KerriganRevive";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_vesselGuards[init_i] = UnitGroupEmpty();
    }
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase4 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introUnits = UnitGroupEmpty();
    gv_midProtoss = UnitGroupEmpty();
    gv_midZerg = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
unit gf_ToughestUnitinUnitGroup (unitgroup lp_unitGroup);
void gf_ZergStreamWave (unitgroup lp_group);
void gf_ZergWavePing (int lp_waveType);
void gf_CrystalDestructionShake (unit lp_cHOSEN_CRYSTAL);
void gf_StartKerriganReviveCooldown2 ();
void gf_VesselActivationFX (point lp_cHOSEN_POINT);
void gf_AIKerrigan (int lp_owner, unit lp_kerrigan, unitgroup lp_nearbyUnits);
unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
void gf_HybridDominatorAI (unit lp_hybrid);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_StartGameStage1Q;
trigger gt_StartGameStage2Q;
trigger gt_ExpandCreepQuickly;
trigger gt_TeachPsiStorm;
trigger gt_PsiStormUsed;
trigger gt_PsiStormFodderDead;
trigger gt_TransmissionPsiStormQ;
trigger gt_MarinesRespondtoPsiStorm;
trigger gt_TransmissionMarineRespondtoStormQ;
trigger gt_TeachFeedback;
trigger gt_FeedbackUsed;
trigger gt_FeedbackFodderDead;
trigger gt_TransmissionFeedbackQ;
trigger gt_ArtanisFound;
trigger gt_TransmissionSaveArtanisQ;
trigger gt_HybridFightArtanisKerrigan;
trigger gt_HybridFightArtanisActions;
trigger gt_HybridFightKerrigansActions;
trigger gt_SwarmAttacksHybrid;
trigger gt_TransmissionSwarmAidsKerriganQ;
trigger gt_HybridDeadStartStage2;
trigger gt_StartShadowTendrilMovement;
trigger gt_ShareShadowTendrilVision;
trigger gt_TransmissionShadowTendrilIntroQ;
trigger gt_ShadowTendrilDamageWarning;
trigger gt_TransmissionShadowTendrilWarningQ;
trigger gt_SpawnShadowCloudTrail01;
trigger gt_SpawnShadowCloudTrail02SpeedUpdate;
trigger gt_SpawnShadowCloudTrail03;
trigger gt_SpawnShadowCloudTrail04;
trigger gt_DisableBulliesForSwarmBases;
trigger gt_TransmissionNumberOfZergRemainingQ;
trigger gt_ZergStreamingWaveController;
trigger gt_ZergStreamingWaveGather;
trigger gt_ZergWaveTargeting;
trigger gt_KerriganWaveTargeting;
trigger gt_CancelKerriganWave;
trigger gt_TransmissionZergAttackWaveQ;
trigger gt_TransmissionKerriganWaveQ;
trigger gt_TransmissionKerriganWithdrawingQ;
trigger gt_EasterEggCarbotZergling;
trigger gt_VoidCrystal01Clear;
trigger gt_VoidCrystal02Clear;
trigger gt_VoidCrystal03Clear;
trigger gt_VoidCrystal04Clear;
trigger gt_TransmissionArtanisRemindsToDestroyPylonQ;
trigger gt_TransmissionKerriganRemindsToDestroyPylonQ;
trigger gt_VoidCrystal01Destroyed;
trigger gt_VoidCrystal02Destroyed;
trigger gt_VoidCrystal03Destroyed;
trigger gt_VoidCrystal04Destroyed;
trigger gt_TransmissionFirstVoidCrystalDestroyedQ;
trigger gt_RetributionWaveController;
trigger gt_HybridRetributionWave01;
trigger gt_HybridRetributionWave02;
trigger gt_RetributionWavePing;
trigger gt_TransmissionHybridRetributionQ;
trigger gt_KerriganDies;
trigger gt_KerriganRevivesAfterCooldown;
trigger gt_VesselIntroQ;
trigger gt_VesselDiscovery;
trigger gt_TransmissionActivateVessels;
trigger gt_Vessel01Activated;
trigger gt_Vessel02Activated;
trigger gt_Vessel03Activated;
trigger gt_TransmissionVesselActivatedQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatStartingUnitsDead;
trigger gt_DefeatArtanisorKerriganDiesStage1;
trigger gt_DefeatSwarmMustSurviveFailed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StatPsiStormKills;
trigger gt_StatFeedbackDamage;
trigger gt_AchievementPsiStormKills;
trigger gt_StatsHighTemplarorArchonDamage;
trigger gt_AchievementHighTemplarorArchonDamage;
trigger gt_MonitorUnitsinRegionCrystal01;
trigger gt_MonitorUnitDamageCrystal01;
trigger gt_MonitorUnitsinRegionCrystal02;
trigger gt_MonitorUnitDamageCrystal02;
trigger gt_MonitorUnitsinRegionCrystal03;
trigger gt_MonitorUnitDamageCrystal03;
trigger gt_MonitorUnitsinRegionCrystal04;
trigger gt_MonitorUnitDamageCrystal04;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_AIUpgradesCasualNormal;
trigger gt_AIUpgradesHardBrutal;
trigger gt_EnemyBaseWarningQ;
trigger gt_DisableBulliesForProtoss01;
trigger gt_DisableBulliesForProtoss02;
trigger gt_DisableBulliesForTerran01;
trigger gt_DisableBulliesForTerran02;
trigger gt_DisableBulliesForTerran03;
trigger gt_SpawnHybridFromPortal;
trigger gt_TransmissionFirstAttackQ;
trigger gt_TipReadyQ;
trigger gt_ObjectiveFindArtanisCreate;
trigger gt_ObjectiveFindArtanisComplete;
trigger gt_ObjectiveFindArtanisFailed;
trigger gt_ObjectiveKillHybridCreate;
trigger gt_ObjectiveKillHybridComplete;
trigger gt_ObjectiveKillHybridFailed;
trigger gt_ObjectiveDestroyVoidCrystalsCreate;
trigger gt_ObjectiveDestroyVoidCrystalsUpdate;
trigger gt_ObjectiveDestroyVoidCrystalsComplete;
trigger gt_ObjectiveDestroyVoidCrystalsFailed;
trigger gt_ObjectiveSwarmMustSurviveCreate;
trigger gt_ObjectiveSwarmMustSurviveComplete;
trigger gt_ObjectiveSwarmMustSurviveFailed;
trigger gt_ObjectiveActivateVesselsCreate;
trigger gt_ObjectiveActivateVesselsUpdate;
trigger gt_ObjectiveActivateVesselsComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidCleanupOrganiseStartingUnits;
trigger gt_MidProtossBase;
trigger gt_MidZergBase;
trigger gt_MidMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryExplosions;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_start(p); }
    if (cai_playerAI[p] == "ai372AE431") { ai372AE431_start(p); }
    if (cai_playerAI[p] == "ai44BBAAAE") { ai44BBAAAE_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai372AE431") { ai372AE431_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai44BBAAAE") { ai44BBAAAE_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_getCustomData(p); }
    if (cai_playerAI[p] == "ai372AE431") { return ai372AE431_getCustomData(p); }
    if (cai_playerAI[p] == "ai44BBAAAE") { return ai44BBAAAE_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_getLastWave(p); }
    if (cai_playerAI[p] == "ai372AE431") { return ai372AE431_getLastWave(p); }
    if (cai_playerAI[p] == "ai44BBAAAE") { return ai44BBAAAE_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_waves_run(p, target); }
    if (cai_playerAI[p] == "ai372AE431") { ai372AE431_waves_run(p, target); }
    if (cai_playerAI[p] == "ai44BBAAAE") { ai44BBAAAE_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai372AE431") { ai372AE431_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai44BBAAAE") { ai44BBAAAE_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai04DD8B1F") { ai04DD8B1F_waves_stop(); }
    if (ai == "ai372AE431") { ai372AE431_waves_stop(); }
    if (ai == "ai44BBAAAE") { ai44BBAAAE_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai372AE431") { ai372AE431_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai44BBAAAE") { ai44BBAAAE_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai372AE431") { ai372AE431_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai44BBAAAE") { ai44BBAAAE_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai372AE431") { return ai372AE431_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai44BBAAAE") { return ai44BBAAAE_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai372AE431") { return ai372AE431_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai44BBAAAE") { return ai44BBAAAE_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai372AE431") { return ai372AE431_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai44BBAAAE") { return ai44BBAAAE_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai04DD8B1F", 3);
    cai_start("ai372AE431", 4);
    cai_start("ai44BBAAAE", 6);
    AICampaignStart(2);
    AICampaignStart(5);
    AICampaignStart(7);
    AICampaignStart(8);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    cai_waves_run(6, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
unit gf_ToughestUnitinUnitGroup (unitgroup lp_unitGroup) {
    // Variable Declarations
    int lv_unitCount;
    unit lv_currentUnit;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    int auto687D92C4_ae;
    int auto687D92C4_var;

    // Variable Initialization

    // Implementation
    lv_unitCount = UnitGroupCount(lp_unitGroup, c_unitCountAlive);
    if ((lv_unitCount == 0)) {
        lv_targetUnit = null;
    }
    else if ((lv_unitCount == 1)) {
        lv_targetUnit = UnitGroupUnit(lp_unitGroup, 1);
    }
    else if ((lv_unitCount > 1)) {
        lv_targetUnit = UnitGroupUnit(lp_unitGroup, 1);
        auto687D92C4_ae = lv_unitCount;
        auto687D92C4_var = 2;
        for ( ; auto687D92C4_var <= auto687D92C4_ae; auto687D92C4_var += 1 ) {
            lv_currentUnit = UnitGroupUnit(lp_unitGroup, auto687D92C4_var);
            if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropVitality, c_unitPropCurrent) > UnitGetPropertyFixed(lv_targetUnit, c_unitPropVitality, c_unitPropCurrent))) {
                lv_targetUnit = lv_currentUnit;
            }
            else {
                lv_currentUnit = null;
            }
        }
    }
    return lv_targetUnit;
}

trigger auto_gf_ZergStreamWave_Trigger = null;
unitgroup auto_gf_ZergStreamWave_lp_group;

void gf_ZergStreamWave (unitgroup lp_group) {
    auto_gf_ZergStreamWave_lp_group = lp_group;

    if (auto_gf_ZergStreamWave_Trigger == null) {
        auto_gf_ZergStreamWave_Trigger = TriggerCreate("auto_gf_ZergStreamWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZergStreamWave_Trigger, false, false);
}

bool auto_gf_ZergStreamWave_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_group = auto_gf_ZergStreamWave_lp_group;

    // Variable Declarations
    int lv_voidCrystalIndex;
    unitgroup lv_localGroup;
    wave lv_localWave;

    // Automatic Variable Declarations
    const int autoE58919B3_ae = gv_vOID_CRYSTAL_TOTAL;
    int autoE58919B3_var;
    int autoA46F8B15_val;

    // Variable Initialization
    lv_localGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_localGroup, lp_group);
    autoE58919B3_var = 1;
    for ( ; autoE58919B3_var <= autoE58919B3_ae; autoE58919B3_var += 1 ) {
        if ((gv_voidCrystalClear[autoE58919B3_var] == false)) {
            lv_voidCrystalIndex = autoE58919B3_var;
            break;
        }

    }
    autoA46F8B15_val = lv_voidCrystalIndex;
    if (autoA46F8B15_val == 1) {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_07_ZERG_STREAM, PlayerGroupSingle(gv_pLAYER_02_DOMINION3));
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(797), false);
        AIAttackWaveUseGroup(gv_pLAYER_07_ZERG_STREAM, lv_localGroup);
    }
    else if (autoA46F8B15_val == 2) {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_07_ZERG_STREAM, PlayerGroupSingle(gv_pLAYER_02_DOMINION2));
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(801), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(798), false);
        AIAttackWaveUseGroup(gv_pLAYER_07_ZERG_STREAM, lv_localGroup);
    }
    else if (autoA46F8B15_val == 3) {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_07_ZERG_STREAM, PlayerGroupSingle(gv_pLAYER_02_DOMINION2));
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(801), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(799), false);
        AIAttackWaveUseGroup(gv_pLAYER_07_ZERG_STREAM, lv_localGroup);
    }
    else if (autoA46F8B15_val == 4) {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_07_ZERG_STREAM, PlayerGroupSingle(gv_pLAYER_02_DOMINION2));
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(801), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(823), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_07_ZERG_STREAM, PointFromId(800), false);
        AIAttackWaveUseGroup(gv_pLAYER_07_ZERG_STREAM, lv_localGroup);
    }
    else {
    }
    AIAttackWaveSend(gv_pLAYER_07_ZERG_STREAM, 0, false);
    lv_localWave = WaveLastCreated();
    while (!(((libNtve_gf_UnitGroupIsDead(lv_localGroup) == true)))) {
        Wait(2.0, c_timeAI);
    }
    if ((libNtve_gf_UnitGroupIsDead(lv_localGroup) == false)) {
        AIAttackWaveCancel(lv_localWave);
        AISetGroupSuicide(lv_localGroup, true);
    }

    return true;
}

trigger auto_gf_ZergWavePing_Trigger = null;
int auto_gf_ZergWavePing_lp_waveType;

void gf_ZergWavePing (int lp_waveType) {
    auto_gf_ZergWavePing_lp_waveType = lp_waveType;

    if (auto_gf_ZergWavePing_Trigger == null) {
        auto_gf_ZergWavePing_Trigger = TriggerCreate("auto_gf_ZergWavePing_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZergWavePing_Trigger, false, false);
}

bool auto_gf_ZergWavePing_TriggerFunc (bool testConds, bool runActions) {
    int lp_waveType = auto_gf_ZergWavePing_lp_waveType;

    // Variable Declarations
    unitgroup lv_waveGroup;
    int lv_ping;

    // Automatic Variable Declarations
    int auto9BEE4BF3_val;
    int auto304B1EFC_val;

    // Variable Initialization
    lv_waveGroup = UnitGroupEmpty();
    lv_ping = c_invalidPingId;

    // Implementation
    auto9BEE4BF3_val = lp_waveType;
    if (auto9BEE4BF3_val == ge_ZergWaveType_NormalWave) {
        auto304B1EFC_val = gv_zergWaveCount;
        if (auto304B1EFC_val == 1) {
            lv_waveGroup = AIWaveGetUnits(cai_wave_createdWave(1, gv_pLAYER_02_DOMINION5));
        }
        else if (auto304B1EFC_val == 2) {
            lv_waveGroup = AIWaveGetUnits(cai_wave_createdWave(4, gv_pLAYER_02_DOMINION5));
        }
        else if (auto304B1EFC_val == 3) {
            lv_waveGroup = AIWaveGetUnits(cai_wave_createdWave(5, gv_pLAYER_02_DOMINION5));
        }
        else {
        }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGroupCenterOfGroup(lv_waveGroup), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        lv_ping = PingLastCreated();
        PingSetScale(lv_ping, 0.75);
        PingSetTooltip(lv_ping, StringExternal("Param/Value/03968E00"));
        while ((libVCMI_gf_GameIsOver() == false) && (libNtve_gf_UnitGroupIsDead(lv_waveGroup) == false)) {
            PingSetPosition(lv_ping, UnitGroupCenterOfGroup(lv_waveGroup));
            Wait(0.1, c_timeGame);
        }
        PingDestroy(lv_ping);
    }
    else if (auto9BEE4BF3_val == ge_ZergWaveType_KerriganWave) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(gv_zeratul), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        lv_ping = PingLastCreated();
        PingSetUnit(lv_ping, gv_zeratul);
        PingSetScale(lv_ping, 0.75);
        PingSetTooltip(lv_ping, StringExternal("Param/Value/D1610CFC"));
        while (!(((UnitIsAlive(gv_zeratul) == false) || (libVCMI_gf_GameIsOver() == true) || (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION5, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_zeratul), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 2) || (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION5, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_voidCrystal[gv_conduitIndex]), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0)))) {
            Wait(0.5, c_timeGame);
        }
        PingDestroy(lv_ping);
    }
    else {
    }
    return true;
}

trigger auto_gf_CrystalDestructionShake_Trigger = null;
unit auto_gf_CrystalDestructionShake_lp_cHOSEN_CRYSTAL;

void gf_CrystalDestructionShake (unit lp_cHOSEN_CRYSTAL) {
    auto_gf_CrystalDestructionShake_lp_cHOSEN_CRYSTAL = lp_cHOSEN_CRYSTAL;

    if (auto_gf_CrystalDestructionShake_Trigger == null) {
        auto_gf_CrystalDestructionShake_Trigger = TriggerCreate("auto_gf_CrystalDestructionShake_TriggerFunc");
    }

    TriggerExecute(auto_gf_CrystalDestructionShake_Trigger, false, false);
}

bool auto_gf_CrystalDestructionShake_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_CRYSTAL = auto_gf_CrystalDestructionShake_lp_cHOSEN_CRYSTAL;

    // Automatic Variable Declarations
    // Implementation
    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(lp_cHOSEN_CRYSTAL), 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Light", "Shake", 0.5, 1.0, 3.0);
    }

    Wait(2.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(lp_cHOSEN_CRYSTAL), 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Massive", "Shake", 0.0, 0.5, 1.0);
    }

    Wait(0.5, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(lp_cHOSEN_CRYSTAL), 10.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Light", "Shake", 0.5, 1.0, 2.0);
    }

    return true;
}

void gf_StartKerriganReviveCooldown2 () {
    // Automatic Variable Declarations
    // Implementation
    Wait(6.6, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganReviveCocoon", 0, gv_pLAYER_02_DOMINION5, UnitGetPosition(UnitFromId(33)));
    gv_kerriganCocoon = UnitLastCreated();
    UnitCreateEffectUnit(UnitFromId(33), "CopyHatcheryRally", gv_kerriganCocoon);
    UnitSetPosition(gv_zeratul, UnitGetPosition(gv_kerriganCocoon), false);
    libNtve_gf_PlayerRemoveCooldown(gv_pLAYER_02_DOMINION5, gv_heroReviveLinkKerrigan);
    PlayerAddCooldown(gv_pLAYER_02_DOMINION5, gv_heroReviveLinkKerrigan, 60.0);
    TriggerEnable(gt_KerriganRevivesAfterCooldown, true);
}

trigger auto_gf_VesselActivationFX_Trigger = null;
point auto_gf_VesselActivationFX_lp_cHOSEN_POINT;

void gf_VesselActivationFX (point lp_cHOSEN_POINT) {
    auto_gf_VesselActivationFX_lp_cHOSEN_POINT = lp_cHOSEN_POINT;

    if (auto_gf_VesselActivationFX_Trigger == null) {
        auto_gf_VesselActivationFX_Trigger = TriggerCreate("auto_gf_VesselActivationFX_TriggerFunc");
    }

    TriggerExecute(auto_gf_VesselActivationFX_Trigger, false, false);
}

bool auto_gf_VesselActivationFX_TriggerFunc (bool testConds, bool runActions) {
    point lp_cHOSEN_POINT = auto_gf_VesselActivationFX_lp_cHOSEN_POINT;

    // Variable Declarations
    actor lv_doodad;
    unit lv_solariteUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lp_cHOSEN_POINT, 5.0), 8.0, false);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End", "XelNaga_Library", RegionCircle(lp_cHOSEN_POINT, 6.0));
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, lp_cHOSEN_POINT);
    lv_solariteUnit = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(lv_solariteUnit, "AnimPlay Birth Birth");
    Wait(4.0, c_timeGame);
    UnitBehaviorAddPlayer(lv_solariteUnit, "ObjectiveCollectionBeam", gv_pLAYER_01_USER, 1);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(lp_cHOSEN_POINT, "PUlnar03Bonus01");
    return true;
}

void gf_AIKerrigan (int lp_owner, unit lp_kerrigan, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unit lv_victim;
    unitgroup lv_enemyGroup10;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoD361CF6E_g;
    int autoD361CF6E_u;
    unitgroup auto66E93CE5_g;
    int auto66E93CE5_u;

    // Variable Initialization
    lv_enemyGroup10 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup10 = gf_EnemiesWithinRange(lp_kerrigan, 10.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    if ((UnitGroupCount(lv_enemyGroup10, c_unitCountAlive) > 0)) {
        if ((UnitAbilityCheck(lp_kerrigan, "MindBolt", true) == true) && (UnitCheckAbilCmdState(lp_kerrigan, AbilityCommand("MindBolt", 0), c_cmdStateCooldown) == false)) {
            lv_victim = UnitGroupRandomUnit(lv_enemyGroup10, c_unitCountAlive);
            autoD361CF6E_g = lv_enemyGroup10;
            autoD361CF6E_u = UnitGroupCount(autoD361CF6E_g, c_unitCountAll);
            for (;; autoD361CF6E_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(autoD361CF6E_g, autoD361CF6E_u);
                if (lv_currentUnit == null) { break; }
                if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropLife, c_unitPropCurrent) >= 200.0)) {
                    lv_victim = lv_currentUnit;
                    break;
                }

            }
            libNtve_gf_AICast(lp_kerrigan, OrderTargetingUnit(AbilityCommand("MindBolt", 0), lv_victim));
        }

        if ((UnitAbilityCheck(lp_kerrigan, "PsionicLift", true) == true) && (UnitCheckAbilCmdState(lp_kerrigan, AbilityCommand("PsionicLift", 0), c_cmdStateCooldown) == false) && (UnitGroupCount(lv_enemyGroup10, c_unitCountAlive) >= 5)) {
            UnitGroupRemoveUnitGroup(lv_enemyGroup10, UnitGroupFilter(null, c_playerAny, lv_enemyGroup10, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            lv_victim = UnitGroupRandomUnit(lv_enemyGroup10, c_unitCountAlive);
            auto66E93CE5_g = lv_enemyGroup10;
            auto66E93CE5_u = UnitGroupCount(auto66E93CE5_g, c_unitCountAll);
            for (;; auto66E93CE5_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto66E93CE5_g, auto66E93CE5_u);
                if (lv_currentUnit == null) { break; }
                if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropLife, c_unitPropCurrent) > 50.0)) {
                    lv_victim = lv_currentUnit;
                    break;
                }

            }
            libNtve_gf_AICast(lp_kerrigan, OrderTargetingPoint(AbilityCommand("PsionicLift", 0), UnitGetPosition(lv_victim)));
        }

    }

    if ((UnitAbilityCheck(lp_kerrigan, "PrimalHeal", true) == true) && (UnitCheckAbilCmdState(lp_kerrigan, AbilityCommand("PrimalHeal", 0), c_cmdStateCooldown) == false) && (UnitGetPropertyFixed(gv_zeratul, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0)) {
        libNtve_gf_AICast(lp_kerrigan, Order(AbilityCommand("PrimalHeal", 0)));
    }

}

unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

trigger auto_gf_HybridDominatorAI_Trigger = null;
unit auto_gf_HybridDominatorAI_lp_hybrid;

void gf_HybridDominatorAI (unit lp_hybrid) {
    auto_gf_HybridDominatorAI_lp_hybrid = lp_hybrid;

    if (auto_gf_HybridDominatorAI_Trigger == null) {
        auto_gf_HybridDominatorAI_Trigger = TriggerCreate("auto_gf_HybridDominatorAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridDominatorAI_Trigger, false, false);
}

bool auto_gf_HybridDominatorAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridDominatorAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_enemyGroup9;
    unit lv_lastAttacker;
    int lv_targetCount;
    point lv_targetPoint;

    // Automatic Variable Declarations
    int auto7560E7B0_ae;
    int auto7560E7B0_var;

    // Variable Initialization
    lv_enemyGroup9 = UnitGroupEmpty();

    // Implementation
    AISetUnitScriptControlled(lp_hybrid, false);
    while ((UnitIsAlive(lp_hybrid) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_lastAttacker = AILastAttacker(lp_hybrid);
        lv_enemyGroup9 = UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hybrid), 9.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), c_cmdStateCooldown) == false)) {
            if ((UnitGroupCount(lv_enemyGroup9, c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), gf_ToughestUnitinUnitGroup(lv_enemyGroup9)));
            }
            else {
                if ((UnitIsAlive(lv_lastAttacker) == true) && (UnitGetType(lv_lastAttacker) == "PhotonCannon") && (DistanceBetweenPoints(UnitGetPosition(lp_hybrid), UnitGetPosition(lv_lastAttacker)) <= 9.0)) {
                    libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), lv_lastAttacker));
                }

            }
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            lv_targetCount = UnitGroupCount(lv_enemyGroup9, c_unitCountAlive);
            if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridDominatorVoidPsiStorm", 0), c_cmdStateCooldown) == false) && (lv_targetCount >= 3)) {
                auto7560E7B0_ae = lv_targetCount;
                auto7560E7B0_var = 1;
                for ( ; auto7560E7B0_var <= auto7560E7B0_ae; auto7560E7B0_var += 1 ) {
                    lv_targetPoint = UnitGetPosition(UnitGroupUnit(lv_enemyGroup9, auto7560E7B0_var));
                    if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(lv_targetPoint, 2.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 3)) {
                        libNtve_gf_AICast(lp_hybrid, OrderTargetingPoint(AbilityCommand("HybridDominatorVoidPsiStorm", 0), lv_targetPoint));
                        break;
                    }
                    else {
                        lv_targetPoint = null;
                    }
                }
            }

        }

        lv_enemyGroup9 = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PUlnar03");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameStage1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libVoiC_gf_EnableCampaignTechUnit(true, "HighTemplar", gv_pLAYER_01_USER);
    libVCUI_gf_ShowSpearofAdunUI(false, c_transitionDurationDefault);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION5, "K5MindBolt", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION5, "K5CrushingGrip", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION5, "K5Mend", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION5, "K5Apocalypse", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "K5ZerglingRespawn", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "K5ImprovedOverlords", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "K5AutoExtractor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION5, "K5ZerglingRespawn", 1);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZerglingRaptor", gv_pLAYER_02_DOMINION5);
    libVoiC_gf_EnableCampaignTechUnit(true, "ZerglingRaptor", gv_pLAYER_07_ZERG_STREAM);
    libVoiC_gf_EnableCampaignTechUnit(true, "BanelingSplitter", gv_pLAYER_02_DOMINION5);
    libVoiC_gf_EnableCampaignTechUnit(true, "HydraliskLurker", gv_pLAYER_02_DOMINION5);
    libVoiC_gf_EnableCampaignTechUnit(true, "RoachVile", gv_pLAYER_02_DOMINION5);
    libVoiC_gf_EnableCampaignTechUnit(true, "MutaliskBroodlord", gv_pLAYER_02_DOMINION5);
    libVoiC_gf_EnableCampaignTechUnit(true, "UltraliskNoxious", gv_pLAYER_02_DOMINION5);
    libVoiC_gf_EnableCampaignTechUnit(true, "SwarmHostCreeper", gv_pLAYER_02_DOMINION5);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION2, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION3, "DarkMarineArmor", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION4, "SeveredCords", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_ZERG_STREAM, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_08_VOIDCRYSTAL, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_07_ZERG_STREAM, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_08_VOIDCRYSTAL, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_07_ZERG_STREAM, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_08_VOIDCRYSTAL, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION3, gv_pLAYER_07_ZERG_STREAM, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION3, gv_pLAYER_08_VOIDCRYSTAL, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION4, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION4, gv_pLAYER_07_ZERG_STREAM, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_07_ZERG_STREAM, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_08_VOIDCRYSTAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_07_ZERG_STREAM, gv_pLAYER_08_VOIDCRYSTAL, libNtve_ge_AllianceSetting_Neutral);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(gv_swarmPlayerGroup, gv_pLAYER_02_DOMINION5);
    PlayerGroupAdd(gv_swarmPlayerGroup, gv_pLAYER_07_ZERG_STREAM);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION3, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_VOIDCRYSTAL, "HeroicShieldCleanUp", 1);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 150);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 150);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_07_ZERG_STREAM, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_07_ZERG_STREAM, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_07_ZERG_STREAM, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerSetState(gv_pLAYER_02_DOMINION2, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_02_DOMINION3, c_playerStateFidgetingEnabled, false);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION, 1, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION2, 1, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION3, 1, true);
    PlayerSetColorIndex(gv_pLAYER_07_ZERG_STREAM, 4, true);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto86B81017_g;
    int auto86B81017_u;
    unit auto86B81017_var;
    unitgroup auto30A2612C_g;
    int auto30A2612C_u;
    unit auto30A2612C_var;
    unitgroup autoAAD6C912_g;
    int autoAAD6C912_u;
    unit autoAAD6C912_var;
    unitgroup autoB96E2AC9_g;
    int autoB96E2AC9_u;
    unit autoB96E2AC9_var;
    unitgroup auto3228C2D9_g;
    int auto3228C2D9_u;
    unit auto3228C2D9_var;
    unitgroup auto104F40C1_g;
    int auto104F40C1_u;
    unit auto104F40C1_var;
    unitgroup auto68A0BB80_g;
    int auto68A0BB80_u;
    unit auto68A0BB80_var;
    unitgroup autoDCC99BA6_g;
    int autoDCC99BA6_u;
    unit autoDCC99BA6_var;
    unitgroup auto31DA589A_g;
    int auto31DA589A_u;
    unit auto31DA589A_var;
    unitgroup auto107CB586_g;
    int auto107CB586_u;
    unit auto107CB586_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_artanis = UnitFromId(226);
    gv_zeratul = UnitFromId(50);
    gv_hybrid01 = UnitFromId(308);
    gv_hybrid02 = UnitFromId(317);
    UnitSetPropertyFixed(gv_artanis, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropLifeMax, 800.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropLifePercent, 100.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "KerriganVoid", "Speed", gv_pLAYER_02_DOMINION5, "2.75");
    CatalogFieldValueSet(c_gameCatalogAbil, "Apocalypse", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", gv_pLAYER_02_DOMINION5, "0");
    CatalogFieldValueSet(c_gameCatalogAbil, "Apocalypse", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", gv_pLAYER_02_DOMINION5, "0");
    libNtve_gf_PauseUnit(gv_artanis, true);
    libNtve_gf_MakeUnitInvulnerable(gv_artanis, true);
    libNtve_gf_PauseUnit(gv_zeratul, true);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, true);
    libNtve_gf_PauseUnit(gv_hybrid01, true);
    libNtve_gf_MakeUnitInvulnerable(gv_hybrid01, true);
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1), StringExternal("Param/Value/E0739DD0"), StringExternal("Param/Value/F3FEBD16"), null);
    auto86B81017_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto86B81017_u = UnitGroupCount(auto86B81017_g, c_unitCountAll);
    for (;; auto86B81017_u -= 1) {
        auto86B81017_var = UnitGroupUnitFromEnd(auto86B81017_g, auto86B81017_u);
        if (auto86B81017_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto86B81017_var, false);
        libNtve_gf_PauseUnit(auto86B81017_var, true);
    }
    auto30A2612C_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30A2612C_u = UnitGroupCount(auto30A2612C_g, c_unitCountAll);
    for (;; auto30A2612C_u -= 1) {
        auto30A2612C_var = UnitGroupUnitFromEnd(auto30A2612C_g, auto30A2612C_u);
        if (auto30A2612C_var == null) { break; }
        if ((auto30A2612C_var != UnitFromId(2))) {
            libNtve_gf_ShowHideUnit(auto30A2612C_var, false);
            libNtve_gf_PauseUnit(auto30A2612C_var, true);
        }

    }
    autoAAD6C912_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAAD6C912_u = UnitGroupCount(autoAAD6C912_g, c_unitCountAll);
    for (;; autoAAD6C912_u -= 1) {
        autoAAD6C912_var = UnitGroupUnitFromEnd(autoAAD6C912_g, autoAAD6C912_u);
        if (autoAAD6C912_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoAAD6C912_var, RegionFromId(8)) == false)) {
            libNtve_gf_ShowHideUnit(autoAAD6C912_var, false);
            libNtve_gf_PauseUnit(autoAAD6C912_var, true);
        }

    }
    autoB96E2AC9_g = UnitGroup("Bunker", gv_pLAYER_02_DOMINION3, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB96E2AC9_u = UnitGroupCount(autoB96E2AC9_g, c_unitCountAll);
    for (;; autoB96E2AC9_u -= 1) {
        autoB96E2AC9_var = UnitGroupUnitFromEnd(autoB96E2AC9_g, autoB96E2AC9_u);
        if (autoB96E2AC9_var == null) { break; }
        UnitCargoCreate(autoB96E2AC9_var, "Marine", libLotv_gf_DifficultyValueInt2(4, 4, 6, 6));
    }
    auto3228C2D9_g = UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3228C2D9_u = UnitGroupCount(auto3228C2D9_g, c_unitCountAll);
    for (;; auto3228C2D9_u -= 1) {
        auto3228C2D9_var = UnitGroupUnitFromEnd(auto3228C2D9_g, auto3228C2D9_u);
        if (auto3228C2D9_var == null) { break; }
        UnitSetPropertyFixed(auto3228C2D9_var, c_unitPropEnergyPercent, 100.0);
    }
    auto104F40C1_g = UnitGroup(null, gv_pLAYER_02_DOMINION2, null, UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto104F40C1_u = UnitGroupCount(auto104F40C1_g, c_unitCountAll);
    for (;; auto104F40C1_u -= 1) {
        auto104F40C1_var = UnitGroupUnitFromEnd(auto104F40C1_g, auto104F40C1_u);
        if (auto104F40C1_var == null) { break; }
        UnitSetPropertyFixed(auto104F40C1_var, c_unitPropEnergyPercent, 100.0);
    }
    auto68A0BB80_g = UnitGroup(null, gv_pLAYER_02_DOMINION3, null, UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68A0BB80_u = UnitGroupCount(auto68A0BB80_g, c_unitCountAll);
    for (;; auto68A0BB80_u -= 1) {
        auto68A0BB80_var = UnitGroupUnitFromEnd(auto68A0BB80_g, auto68A0BB80_u);
        if (auto68A0BB80_var == null) { break; }
        UnitSetPropertyFixed(auto68A0BB80_var, c_unitPropEnergyPercent, 100.0);
    }
    autoDCC99BA6_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, null, UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDCC99BA6_u = UnitGroupCount(autoDCC99BA6_g, c_unitCountAll);
    for (;; autoDCC99BA6_u -= 1) {
        autoDCC99BA6_var = UnitGroupUnitFromEnd(autoDCC99BA6_g, autoDCC99BA6_u);
        if (autoDCC99BA6_var == null) { break; }
        UnitSetPropertyFixed(autoDCC99BA6_var, c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupAdd(gv_hybridGroup, UnitFromId(308));
    UnitGroupAdd(gv_hybridGroup, UnitFromId(317));
    UnitIssueOrder(UnitFromId(381), Order(AbilityCommand("HybridChannelStart", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(600), Order(AbilityCommand("HybridChannelStart", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(170), Order(AbilityCommand("HybridChannelStart", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(340), Order(AbilityCommand("HybridChannelStart", 0)), c_orderQueueReplace);
    auto31DA589A_g = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31DA589A_u = UnitGroupCount(auto31DA589A_g, c_unitCountAll);
    for (;; auto31DA589A_u -= 1) {
        auto31DA589A_var = UnitGroupUnitFromEnd(auto31DA589A_g, auto31DA589A_u);
        if (auto31DA589A_var == null) { break; }
        UnitGroupAdd(gv_psiStormFodder, auto31DA589A_var);
    }
    auto107CB586_g = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto107CB586_u = UnitGroupCount(auto107CB586_g, c_unitCountAll);
    for (;; auto107CB586_u -= 1) {
        auto107CB586_var = UnitGroupUnitFromEnd(auto107CB586_g, auto107CB586_u);
        if (auto107CB586_var == null) { break; }
        UnitGroupAdd(gv_psiStormFodder, auto107CB586_var);
    }
    gv_townCenterUnits[1] = UnitFromId(32);
    gv_townCenterUnits[2] = UnitFromId(6);
    gv_townCenterUnits[3] = UnitFromId(51);
    gv_townCenterUnits[4] = UnitFromId(52);
    gv_townCenterUnits[5] = UnitFromId(33);
    UnitGroupAdd(gv_townCenterGroup, UnitFromId(32));
    UnitGroupAdd(gv_townCenterGroup, UnitFromId(6));
    UnitGroupAdd(gv_townCenterGroup, UnitFromId(51));
    UnitGroupAdd(gv_townCenterGroup, UnitFromId(52));
    UnitGroupAdd(gv_townCenterGroup, UnitFromId(33));
    gv_voidCrystal[1] = UnitFromId(472);
    gv_voidCrystal[2] = UnitFromId(315);
    gv_voidCrystal[3] = UnitFromId(384);
    gv_voidCrystal[4] = UnitFromId(231);
    gv_voidCrystalGuards[1] = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_voidCrystalGuards[2] = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_voidCrystalGuards[3] = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_voidCrystalGuards[4] = UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitBehaviorAdd(UnitFromId(794), "ZerglingCarbotSpawn", UnitFromId(794), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PUlnar03_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(1), RegionFromId(1), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(3), RegionFromId(3), gv_pLAYER_01_USER);
    ActorSend(ActorFromDoodad(DoodadFromId(592)), "AnimPlay StandWork Stand,Work PlayForever");
    CreepModify(RegionGetCenter(RegionFromId(10)), 24.0, false, false);
    CreepModify(RegionGetCenter(RegionFromId(11)), 24.0, false, false);
    CreepModify(RegionGetCenter(RegionFromId(12)), 24.0, false, false);
    CreepModify(RegionGetCenter(RegionFromId(13)), 24.0, false, false);
    CreepModify(RegionGetCenter(RegionFromId(14)), 24.0, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA784D9D9_ae = 4;
    int autoA784D9D9_var;
    playergroup autoCC51F44A_g;
    int autoCC51F44A_var;
    playergroup auto84E27F0A_g;
    int auto84E27F0A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dARK_ENERGY = UnitFromId(147);
    gv_darkEnergyInitialSpeed = libLotv_gf_DifficultyValueFixed2(0.08, 0.08, 0.1, 0.1);
    gv_darkEnergyProgressedSpeed = libLotv_gf_DifficultyValueFixed2(0.05, 0.05, 0.063, 0.063);
    autoA784D9D9_var = 1;
    for ( ; autoA784D9D9_var <= autoA784D9D9_ae; autoA784D9D9_var += 1 ) {
        UnitSetPropertyFixed(gv_voidCrystal[autoA784D9D9_var], c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(1000.0, 1000.0, 1200.0, 1400.0));
        UnitSetPropertyFixed(gv_voidCrystal[autoA784D9D9_var], c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_voidCrystal[autoA784D9D9_var], c_unitPropShieldsMax, libLotv_gf_DifficultyValueFixed2(400.0, 400.0, 500.0, 600.0));
        UnitSetPropertyFixed(gv_voidCrystal[autoA784D9D9_var], c_unitPropShieldsPercent, 100.0);
    }
    autoCC51F44A_g = gv_swarmPlayerGroup;
    autoCC51F44A_var = -1;
    while (true) {
        autoCC51F44A_var = PlayerGroupNextPlayer(autoCC51F44A_g, autoCC51F44A_var);
        if (autoCC51F44A_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(autoCC51F44A_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoCC51F44A_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoCC51F44A_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(autoCC51F44A_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(autoCC51F44A_var, "ZergFlyerArmorsLevel1", 1);
        }

        if ((TechTreeUpgradeCount(gv_pLAYER_01_USER, "SOASuperShield", c_techCountQueuedOrBetter) >= 1)) {
            TechTreeUpgradeAddLevel(autoCC51F44A_var, "SOASuperShield", 1);
        }

    }
    auto84E27F0A_g = gv_enemyPlayerGroup;
    auto84E27F0A_var = -1;
    while (true) {
        auto84E27F0A_var = PlayerGroupNextPlayer(auto84E27F0A_g, auto84E27F0A_var);
        if (auto84E27F0A_var < 0) { break; }
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "Charge", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "ExtendedThermalLance", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "VoidRayBeamCanCharge", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "ProtossShieldsLevel1", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "ShieldWall", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "PunisherGrenades", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "CellularReactors", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "NeoSteelAndShrikeTurretIconUpgrade", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "FireSuppressionSystems", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "TerranVehicleAndShipArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "TerranVehicleAndShipWeaponsLevel1", 1);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "CarrierLaunchSpeedUpgrade", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "StabilizerMedPacks", 1);
            TechTreeUpgradeAddLevel(auto84E27F0A_var, "AdvancedHealingAI", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("HighTemplar");
    libVCMI_gf_AddMissionTipCampaign("Feedback");
    libVCMI_gf_AddMissionTipCampaign("PsiStorm");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marine", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Marauder", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Medic", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Reaper", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Spectre", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Thor", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("WarHound", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VikingFighter", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VikingAssault", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SCV", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Banshee", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("VoidRay", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDominatorVoid", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridReaver", false, gv_pLAYER_01_USER);
    if ((libHots_gf_DifficultyValueInt2(0, 0, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Raven", false, gv_pLAYER_01_USER);
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Observer", false, gv_pLAYER_01_USER);
    }

    libVCMI_gf_AddMissionCheat("Stage2", "Skip to the second mission stage", gt_DebugStage2, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ArtanisFound, false);
    TriggerEnable(gt_TeachPsiStorm, false);
    TriggerEnable(gt_TeachFeedback, false);
    PingDestroy(gv_findArtanisPing);
    UnitRemove(UnitFromId(1));
    UnitRemove(UnitFromId(230));
    UnitRemove(UnitFromId(177));
    UnitRemove(UnitFromId(176));
    UnitRemove(UnitFromId(574));
    UnitRemove(UnitFromId(101));
    UnitRemove(UnitFromId(569));
    UnitRemove(UnitFromId(296));
    UnitRemove(UnitFromId(430));
    UnitRemove(UnitFromId(99));
    UnitRemove(UnitFromId(100));
    UnitRemove(UnitFromId(92));
    UnitRemove(UnitFromId(450));
    TriggerExecute(gt_ObjectiveFindArtanisComplete, true, false);
    TriggerExecute(gt_ObjectiveKillHybridComplete, true, false);
    TriggerEnable(gt_HybridDeadStartStage2, true);
    Wait(0.5, c_timeGame);
    UnitKill(UnitFromId(308));
    UnitKill(UnitFromId(317));
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(462)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game (Stage 1) Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2B068D12"), null, RegionGetCenter(RegionFromId(2)));
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveFindArtanisCreate, true, true);
    if ((UnitIsAlive(UnitFromId(1)) == true)) {
        libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(1)), StringExternal("Param/Value/1DA98730"));
        gv_findArtanisPing = PingLastCreated();
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1)), 8.0), 6.0, false);
    }

    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage1Q_Init () {
    gt_StartGameStage1Q = TriggerCreate("gt_StartGameStage1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game (Stage 2) Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameStage2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto66195DCA_ae = gv_vOID_CRYSTAL_TOTAL;
    int auto66195DCA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5307EB59"), null, PointFromId(310));
    libVCMI_gf_PauseUnpauseSpearofAdunCooldowns(false);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_pLAYER_01_USER);
    TriggerEnable(gt_DefeatBaseDead, true);
    TriggerEnable(gt_ShadowTendrilDamageWarning, true);
    TriggerEnable(gt_VoidCrystal01Clear, true);
    TriggerEnable(gt_VoidCrystal02Clear, true);
    TriggerEnable(gt_VoidCrystal03Clear, true);
    TriggerEnable(gt_VoidCrystal04Clear, true);
    TriggerEnable(gt_Vessel01Activated, true);
    TriggerEnable(gt_Vessel02Activated, true);
    TriggerEnable(gt_Vessel03Activated, true);
    TriggerExecute(gt_SpawnHybridFromPortal, true, false);
    TriggerExecute(gt_ExpandCreepQuickly, true, false);
    TriggerExecute(gt_StartShadowTendrilMovement, true, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerEnable(gt_MonitorUnitsinRegionCrystal01, true);
        TriggerEnable(gt_MonitorUnitsinRegionCrystal02, true);
        TriggerEnable(gt_MonitorUnitsinRegionCrystal03, true);
        TriggerEnable(gt_MonitorUnitsinRegionCrystal04, true);
    }

    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidCrystal[1]), 5.0), 6.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidCrystal[2]), 5.0), 6.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidCrystal[3]), 5.0), 6.0, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidCrystal[4]), 5.0), 6.0, false);
    TriggerExecute(gt_ObjectiveDestroyVoidCrystalsCreate, true, false);
    auto66195DCA_var = 1;
    for ( ; auto66195DCA_var <= auto66195DCA_ae; auto66195DCA_var += 1 ) {
        libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_voidCrystal[auto66195DCA_var]), StringExternal("Param/Value/CE6690CB"));
        gv_voidCrystalPing[auto66195DCA_var] = PingLastCreated();
    }
    TriggerExecute(gt_ObjectiveSwarmMustSurviveCreate, true, true);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    Wait(105.0, c_timeAI);
    TriggerEnable(gt_VesselDiscovery, false);
    TriggerExecute(gt_VesselIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameStage2Q_Init () {
    gt_StartGameStage2Q = TriggerCreate("gt_StartGameStage2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Expand Creep Quickly
//--------------------------------------------------------------------------------------------------
bool gt_ExpandCreepQuickly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    Wait(10.0, c_timeGame);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpandCreepQuickly_Init () {
    gt_ExpandCreepQuickly = TriggerCreate("gt_ExpandCreepQuickly_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Psi Storm
//--------------------------------------------------------------------------------------------------
bool gt_TeachPsiStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_chosenTarget;

    // Automatic Variable Declarations
    unitgroup autoFC17EFEE_g;
    int autoFC17EFEE_u;
    unit autoFC17EFEE_var;
    unitgroup auto937D93B3_g;
    int auto937D93B3_u;
    unit auto937D93B3_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_chosenTarget = UnitFromId(574);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        autoFC17EFEE_g = gv_psiStormFodder;
        autoFC17EFEE_u = UnitGroupCount(autoFC17EFEE_g, c_unitCountAll);
        for (;; autoFC17EFEE_u -= 1) {
            autoFC17EFEE_var = UnitGroupUnitFromEnd(autoFC17EFEE_g, autoFC17EFEE_u);
            if (autoFC17EFEE_var == null) { break; }
            UnitIssueOrder(autoFC17EFEE_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
    }

    CameraPan(gv_pLAYER_01_USER, PointFromId(313), 3.0, -1, 10.0, false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_chosenTarget), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4098551D"), null, lv_chosenTarget);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/921343EB"), lv_chosenTarget, "Ref_Center");
    libHots_gf_StoreActorForUnit(lv_chosenTarget, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(lv_chosenTarget, 1, TextTagLastCreated());
    auto937D93B3_g = gv_s1PlayerUnits;
    auto937D93B3_u = UnitGroupCount(auto937D93B3_g, c_unitCountAll);
    for (;; auto937D93B3_u -= 1) {
        auto937D93B3_var = UnitGroupUnitFromEnd(auto937D93B3_g, auto937D93B3_u);
        if (auto937D93B3_var == null) { break; }
        if ((UnitGetType(auto937D93B3_var) == "HighTemplar") && (UnitGetPropertyFixed(auto937D93B3_var, c_unitPropEnergy, c_unitPropCurrent) < 150.0)) {
            UnitSetPropertyFixed(auto937D93B3_var, c_unitPropEnergy, 150.0);
        }

    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("PsiStorm", 0), true);
    TriggerEnable(gt_PsiStormUsed, true);
    TriggerEnable(gt_PsiStormFodderDead, true);
    TriggerExecute(gt_TransmissionPsiStormQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachPsiStorm_Init () {
    gt_TeachPsiStorm = TriggerCreate("gt_TeachPsiStorm_Func");
    TriggerAddEventUnitRegion(gt_TeachPsiStorm, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi Storm Used
//--------------------------------------------------------------------------------------------------
bool gt_PsiStormUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("PsiStorm", 0), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(574), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(574), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiStormUsed_Init () {
    gt_PsiStormUsed = TriggerCreate("gt_PsiStormUsed_Func");
    TriggerEnable(gt_PsiStormUsed, false);
    TriggerAddEventUnitAbility(gt_PsiStormUsed, null, AbilityCommand("PsiStorm", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi Storm Fodder Dead
//--------------------------------------------------------------------------------------------------
bool gt_PsiStormFodderDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_psiStormFodder, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PsiStormUsed, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("PsiStorm", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiStormFodderDead_Init () {
    gt_PsiStormFodderDead = TriggerCreate("gt_PsiStormFodderDead_Func");
    TriggerEnable(gt_PsiStormFodderDead, false);
    TriggerAddEventTimePeriodic(gt_PsiStormFodderDead, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Psi Storm Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPsiStormQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00097", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPsiStormQ_Init () {
    gt_TransmissionPsiStormQ = TriggerCreate("gt_TransmissionPsiStormQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marines Respond to Psi Storm
//--------------------------------------------------------------------------------------------------
bool gt_MarinesRespondtoPsiStorm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoADD7D4A0_g;
    int autoADD7D4A0_u;
    unit autoADD7D4A0_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(5)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoADD7D4A0_g = UnitGroup(null, gv_pLAYER_02_DOMINION3, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoADD7D4A0_u = UnitGroupCount(autoADD7D4A0_g, c_unitCountAll);
    for (;; autoADD7D4A0_u -= 1) {
        autoADD7D4A0_var = UnitGroupUnitFromEnd(autoADD7D4A0_g, autoADD7D4A0_u);
        if (autoADD7D4A0_var == null) { break; }
        UnitIssueOrder(autoADD7D4A0_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(313)), c_orderQueueReplace);
    }
    TriggerExecute(gt_TransmissionMarineRespondtoStormQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarinesRespondtoPsiStorm_Init () {
    gt_MarinesRespondtoPsiStorm = TriggerCreate("gt_MarinesRespondtoPsiStorm_Func");
    TriggerAddEventUnitDamaged(gt_MarinesRespondtoPsiStorm, null, c_unitDamageTypeAny, c_unitDamageEither, "PsiStormDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Marine Respond to Storm Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionMarineRespondtoStormQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(230)) == true)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(UnitFromId(230), "pMission_Ulnar03|Line00123", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionMarineRespondtoStormQ_Init () {
    gt_TransmissionMarineRespondtoStormQ = TriggerCreate("gt_TransmissionMarineRespondtoStormQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teach Feedback
//--------------------------------------------------------------------------------------------------
bool gt_TeachFeedback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto56CCD694_g;
    int auto56CCD694_u;
    unit auto56CCD694_var;
    unitgroup auto383B60AE_g;
    int auto383B60AE_u;
    unit auto383B60AE_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("PsiStorm", 0), false);
    auto56CCD694_g = UnitGroup("Spectre", gv_pLAYER_02_DOMINION3, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto56CCD694_u = UnitGroupCount(auto56CCD694_g, c_unitCountAll);
    for (;; auto56CCD694_u -= 1) {
        auto56CCD694_var = UnitGroupUnitFromEnd(auto56CCD694_g, auto56CCD694_u);
        if (auto56CCD694_var == null) { break; }
        UnitGroupAdd(gv_feedbackFodder, auto56CCD694_var);
        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            UnitIssueOrder(auto56CCD694_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }

    }
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(7), 25.0, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(119), 3.0, -1, 10.0, false);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(18)), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/AEB43572"), null, RegionGetCenter(RegionFromId(18)));
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/936682DC"), UnitFromId(569), "Ref_Center");
    libHots_gf_StoreActorForUnit(UnitFromId(569), 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(UnitFromId(569), 1, TextTagLastCreated());
    auto383B60AE_g = gv_s1PlayerUnits;
    auto383B60AE_u = UnitGroupCount(auto383B60AE_g, c_unitCountAll);
    for (;; auto383B60AE_u -= 1) {
        auto383B60AE_var = UnitGroupUnitFromEnd(auto383B60AE_g, auto383B60AE_u);
        if (auto383B60AE_var == null) { break; }
        UnitIssueOrder(auto383B60AE_var, OrderTargetingRelativePoint(AbilityCommand("move", 0), PointFromId(839)), c_orderQueueReplace);
        if ((UnitGetType(auto383B60AE_var) == "HighTemplar") && (UnitGetPropertyFixed(auto383B60AE_var, c_unitPropEnergy, c_unitPropCurrent) < 150.0)) {
            UnitSetPropertyFixed(auto383B60AE_var, c_unitPropEnergy, 150.0);
        }

    }
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Feedback", 0), true);
    TriggerEnable(gt_FeedbackUsed, true);
    TriggerEnable(gt_FeedbackFodderDead, true);
    TriggerExecute(gt_TransmissionFeedbackQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachFeedback_Init () {
    gt_TeachFeedback = TriggerCreate("gt_TeachFeedback_Func");
    TriggerAddEventUnitRegion(gt_TeachFeedback, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feedback Used
//--------------------------------------------------------------------------------------------------
bool gt_FeedbackUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Feedback", 0), false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(569), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(569), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FeedbackUsed_Init () {
    gt_FeedbackUsed = TriggerCreate("gt_FeedbackUsed_Func");
    TriggerEnable(gt_FeedbackUsed, false);
    TriggerAddEventUnitAbility(gt_FeedbackUsed, null, AbilityCommand("Feedback", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feedback Fodder Dead
//--------------------------------------------------------------------------------------------------
bool gt_FeedbackFodderDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_feedbackFodder, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FeedbackUsed, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Feedback", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FeedbackFodderDead_Init () {
    gt_FeedbackFodderDead = TriggerCreate("gt_FeedbackFodderDead_Func");
    TriggerEnable(gt_FeedbackFodderDead, false);
    TriggerAddEventTimePeriodic(gt_FeedbackFodderDead, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Feedback Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFeedbackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00098", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFeedbackQ_Init () {
    gt_TransmissionFeedbackQ = TriggerCreate("gt_TransmissionFeedbackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Found
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisFound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("Feedback", 0), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("PsiStorm", 0), false);
    if ((UnitIsAlive(UnitFromId(574)) == true)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(574), 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(574), 1));
    }

    if ((UnitIsAlive(UnitFromId(569)) == true)) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(569), 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(569), 1));
    }

    PingDestroy(gv_findArtanisPing);
    UnitKill(UnitFromId(1));
    TriggerExecute(gt_HybridFightArtanisKerrigan, true, false);
    TriggerExecute(gt_ObjectiveFindArtanisComplete, true, true);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_ShareVisionofUnit(gv_artanis, true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_zeratul, true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_hybrid01, true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_artanis, true, gv_pLAYER_02_DOMINION);
    libNtve_gf_ShareVisionofUnit(gv_zeratul, true, gv_pLAYER_02_DOMINION);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_artanis), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8FAD4DDC"), null, gv_artanis);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_hybrid01), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/90603350"));
    gv_hybridPing = PingLastCreated();
    PingSetUnit(gv_hybridPing, gv_hybrid01);
    TriggerExecute(gt_ObjectiveKillHybridCreate, true, true);
    TriggerExecute(gt_TransmissionSaveArtanisQ, true, true);
    TriggerEnable(gt_HybridDeadStartStage2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisFound_Init () {
    gt_ArtanisFound = TriggerCreate("gt_ArtanisFound_Func");
    TriggerAddEventUnitRegion(gt_ArtanisFound, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Save Artanis Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSaveArtanisQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Ulnar03|Line00005", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSaveArtanisQ_Init () {
    gt_TransmissionSaveArtanisQ = TriggerCreate("gt_TransmissionSaveArtanisQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Fight Artanis & Kerrigan
//--------------------------------------------------------------------------------------------------
bool gt_HybridFightArtanisKerrigan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PauseUnit(gv_artanis, false);
    libNtve_gf_PauseUnit(gv_zeratul, false);
    libNtve_gf_PauseUnit(gv_hybrid01, false);
    libNtve_gf_MakeUnitInvulnerable(gv_artanis, false);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, false);
    libNtve_gf_MakeUnitInvulnerable(gv_hybrid01, false);
    TriggerExecute(gt_HybridFightArtanisActions, true, false);
    TriggerExecute(gt_HybridFightKerrigansActions, true, false);
    UnitIssueOrder(gv_hybrid01, OrderTargetingUnit(AbilityCommand("attack", 0), gv_zeratul), c_orderQueueReplace);
    UnitIssueOrder(gv_hybrid02, OrderTargetingUnit(AbilityCommand("attack", 0), gv_zeratul), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridFightArtanisKerrigan_Init () {
    gt_HybridFightArtanisKerrigan = TriggerCreate("gt_HybridFightArtanisKerrigan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Fight - Artanis' Actions
//--------------------------------------------------------------------------------------------------
bool gt_HybridFightArtanisActions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.5, c_timeAI);
    UnitIssueOrder(gv_artanis, OrderTargetingPoint(AbilityCommand("ArtanisLightningDash", 0), UnitGetPosition(gv_hybrid01)), c_orderQueueReplace);
    Wait(3.0, c_timeAI);
    UnitIssueOrder(gv_artanis, Order(AbilityCommand("ArtanisAstralWind", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    UnitIssueOrder(gv_artanis, OrderTargetingPoint(AbilityCommand("ArtanisLightningDash", 0), UnitGetPosition(gv_hybrid02)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridFightArtanisActions_Init () {
    gt_HybridFightArtanisActions = TriggerCreate("gt_HybridFightArtanisActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Fight - Kerrigan's Actions
//--------------------------------------------------------------------------------------------------
bool gt_HybridFightKerrigansActions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeAI);
    UnitIssueOrder(gv_zeratul, OrderTargetingUnit(AbilityCommand("MindBolt", 0), gv_hybrid01), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("PrimalHeal", 0)), c_orderQueueReplace);
    TriggerExecute(gt_SwarmAttacksHybrid, true, false);
    Wait(10.0, c_timeAI);
    UnitIssueOrder(gv_zeratul, OrderTargetingUnit(AbilityCommand("MindBolt", 0), gv_hybrid02), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    UnitIssueOrder(gv_zeratul, OrderTargetingUnit(AbilityCommand("Apocalypse", 0), gv_hybrid02), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("PrimalHeal", 0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridFightKerrigansActions_Init () {
    gt_HybridFightKerrigansActions = TriggerCreate("gt_HybridFightKerrigansActions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Attacks Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_SwarmAttacksHybrid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto549AC215_g;
    int auto549AC215_u;
    unit auto549AC215_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionSwarmAidsKerriganQ, true, false);
    auto549AC215_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto549AC215_u = UnitGroupCount(auto549AC215_g, c_unitCountAll);
    for (;; auto549AC215_u -= 1) {
        auto549AC215_var = UnitGroupUnitFromEnd(auto549AC215_g, auto549AC215_u);
        if (auto549AC215_var == null) { break; }
        UnitGroupAdd(gv_kerriganSwarmAiders, auto549AC215_var);
        UnitIssueOrder(auto549AC215_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_hybrid01), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmAttacksHybrid_Init () {
    gt_SwarmAttacksHybrid = TriggerCreate("gt_SwarmAttacksHybrid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Swarm Aids Kerrigan Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSwarmAidsKerriganQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00006", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSwarmAidsKerriganQ_Init () {
    gt_TransmissionSwarmAidsKerriganQ = TriggerCreate("gt_TransmissionSwarmAidsKerriganQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Dead - Start Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_HybridDeadStartStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_hybridGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DefeatStartingUnitsDead, false);
    TriggerEnable(gt_DefeatArtanisorKerriganDiesStage1, false);
    PingDestroy(gv_hybridPing);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/723F3608"));
    TriggerExecute(gt_ObjectiveKillHybridComplete, true, true);
    TriggerExecute(gt_MidQ, true, true);
    TriggerExecute(gt_StartGameStage2Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridDeadStartStage2_Init () {
    gt_HybridDeadStartStage2 = TriggerCreate("gt_HybridDeadStartStage2_Func");
    TriggerEnable(gt_HybridDeadStartStage2, false);
    TriggerAddEventTimePeriodic(gt_HybridDeadStartStage2, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Shadow Tendril Movement
//--------------------------------------------------------------------------------------------------
bool gt_StartShadowTendrilMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeAI);
    UnitSetPropertyFixed(gv_dARK_ENERGY, c_unitPropBaseMovementSpeed, gv_darkEnergyInitialSpeed);
    UnitSetPropertyFixed(gv_dARK_ENERGY, c_unitPropMovementSpeed, gv_darkEnergyInitialSpeed);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_dARK_ENERGY), 6.0, Color(100.00, 0.00, 0.00));
    UnitIssueOrder(gv_dARK_ENERGY, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_townCenterUnits[1])), c_orderQueueReplace);
    PingCreate(PlayerGroupSingle(gv_pLAYER_01_USER), "PingSimple", UnitGetPosition(gv_dARK_ENERGY), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    libHots_gf_StorePingForUnit(gv_dARK_ENERGY, 1, PingLastCreated());
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), gv_dARK_ENERGY);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B0A9C8E9"));
    PingSetVisible(libHots_gf_PingStoredForUnit(gv_dARK_ENERGY, 1), true);
    UnitIssueOrder(gv_dARK_ENERGY, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_townCenterUnits[1])), c_orderQueueReplace);
    UnitIssueOrder(gv_dARK_ENERGY, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_townCenterUnits[2])), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_dARK_ENERGY, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_townCenterUnits[3])), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_dARK_ENERGY, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_townCenterUnits[4])), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_dARK_ENERGY, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_townCenterUnits[5])), c_orderQueueAddToEnd);
    TriggerEnable(gt_ShareShadowTendrilVision, true);
    TriggerExecute(gt_TransmissionShadowTendrilIntroQ, true, true);
    TriggerExecute(gt_ZergStreamingWaveController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartShadowTendrilMovement_Init () {
    gt_StartShadowTendrilMovement = TriggerCreate("gt_StartShadowTendrilMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Share Shadow Tendril Vision
//--------------------------------------------------------------------------------------------------
bool gt_ShareShadowTendrilVision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_darkEnergyVisionRegion = RegionRect((PointGetX(UnitGetPosition(gv_dARK_ENERGY)) - 12.0), (PointGetY(UnitGetPosition(gv_dARK_ENERGY)) - 12.0), (PointGetX(UnitGetPosition(gv_dARK_ENERGY)) + 12.0), (PointGetY(UnitGetPosition(gv_dARK_ENERGY)) + 12.0));
    gv_darkEnergyBlackRegion = RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_dARK_ENERGY), 8.0, 180.0), 12.0);
    VisRevealArea(gv_pLAYER_01_USER, gv_darkEnergyVisionRegion, 2.0, false);
    VisExploreArea(gv_pLAYER_01_USER, gv_darkEnergyBlackRegion, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShareShadowTendrilVision_Init () {
    gt_ShareShadowTendrilVision = TriggerCreate("gt_ShareShadowTendrilVision_Func");
    TriggerEnable(gt_ShareShadowTendrilVision, false);
    TriggerAddEventTimePeriodic(gt_ShareShadowTendrilVision, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shadow Tendril Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShadowTendrilIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00068", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00086", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShadowTendrilIntroQ_Init () {
    gt_TransmissionShadowTendrilIntroQ = TriggerCreate("gt_TransmissionShadowTendrilIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Tendril Damage Warning
//--------------------------------------------------------------------------------------------------
bool gt_ShadowTendrilDamageWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8CBD6C49_g;
    int auto8CBD6C49_u;
    unit auto8CBD6C49_var;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8CBD6C49_g = UnitGroup("ShadowCloud", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8CBD6C49_u = UnitGroupCount(auto8CBD6C49_g, c_unitCountAll);
    for (;; auto8CBD6C49_u -= 1) {
        auto8CBD6C49_var = UnitGroupUnitFromEnd(auto8CBD6C49_g, auto8CBD6C49_u);
        if (auto8CBD6C49_var == null) { break; }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto8CBD6C49_var), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
            TriggerEnable(TriggerGetCurrent(), false);
            MinimapPing(PlayerGroupAll(), UnitGetPosition(auto8CBD6C49_var), 5.0, Color(100.00, 0.00, 0.00));
            UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CD0A5CC7"), null, auto8CBD6C49_var);
            TriggerExecute(gt_TransmissionShadowTendrilWarningQ, true, false);
            Wait(30.0, c_timeAI);
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowTendrilDamageWarning_Init () {
    gt_ShadowTendrilDamageWarning = TriggerCreate("gt_ShadowTendrilDamageWarning_Func");
    TriggerEnable(gt_ShadowTendrilDamageWarning, false);
    TriggerAddEventTimePeriodic(gt_ShadowTendrilDamageWarning, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Shadow Tendril Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShadowTendrilWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Ulnar03|Line00069", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShadowTendrilWarningQ_Init () {
    gt_TransmissionShadowTendrilWarningQ = TriggerCreate("gt_TransmissionShadowTendrilWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Shadow Cloud Trail 01
//--------------------------------------------------------------------------------------------------
bool gt_SpawnShadowCloudTrail01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowCloud", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(650));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnShadowCloudTrail01_Init () {
    gt_SpawnShadowCloudTrail01 = TriggerCreate("gt_SpawnShadowCloudTrail01_Func");
    TriggerAddEventUnitRangePoint(gt_SpawnShadowCloudTrail01, UnitRefFromVariable("gv_dARK_ENERGY"), PointFromId(651), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Shadow Cloud Trail 02 + Speed Update
//--------------------------------------------------------------------------------------------------
bool gt_SpawnShadowCloudTrail02SpeedUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowCloud", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(651));
    UnitSetPropertyFixed(gv_dARK_ENERGY, c_unitPropBaseMovementSpeed, gv_darkEnergyProgressedSpeed);
    UnitSetPropertyFixed(gv_dARK_ENERGY, c_unitPropMovementSpeed, gv_darkEnergyProgressedSpeed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnShadowCloudTrail02SpeedUpdate_Init () {
    gt_SpawnShadowCloudTrail02SpeedUpdate = TriggerCreate("gt_SpawnShadowCloudTrail02SpeedUpdate_Func");
    TriggerAddEventUnitRangePoint(gt_SpawnShadowCloudTrail02SpeedUpdate, UnitRefFromVariable("gv_dARK_ENERGY"), PointFromId(652), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Shadow Cloud Trail 03
//--------------------------------------------------------------------------------------------------
bool gt_SpawnShadowCloudTrail03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowCloud", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(652));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnShadowCloudTrail03_Init () {
    gt_SpawnShadowCloudTrail03 = TriggerCreate("gt_SpawnShadowCloudTrail03_Func");
    TriggerAddEventUnitRangePoint(gt_SpawnShadowCloudTrail03, UnitRefFromVariable("gv_dARK_ENERGY"), PointFromId(653), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Shadow Cloud Trail 04
//--------------------------------------------------------------------------------------------------
bool gt_SpawnShadowCloudTrail04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowCloud", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(653));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnShadowCloudTrail04_Init () {
    gt_SpawnShadowCloudTrail04 = TriggerCreate("gt_SpawnShadowCloudTrail04_Func");
    TriggerAddEventUnitRangePoint(gt_SpawnShadowCloudTrail04, UnitRefFromVariable("gv_dARK_ENERGY"), PointFromId(282), 10.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Bullies For Swarm Bases
//--------------------------------------------------------------------------------------------------
bool gt_DisableBulliesForSwarmBases_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit auto94F9E76E_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_swarmBasesDestroyed += 1;
    auto94F9E76E_val = EventUnit();
    if (auto94F9E76E_val == gv_townCenterUnits[1]) {
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(10), false);
    }
    else if (auto94F9E76E_val == gv_townCenterUnits[2]) {
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(11), false);
    }
    else if (auto94F9E76E_val == gv_townCenterUnits[3]) {
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(12), false);
        TriggerExecute(gt_TransmissionNumberOfZergRemainingQ, true, false);
    }
    else if (auto94F9E76E_val == gv_townCenterUnits[4]) {
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(13), false);
        TriggerExecute(gt_TransmissionNumberOfZergRemainingQ, true, false);
    }
    else if (auto94F9E76E_val == gv_townCenterUnits[5]) {
        AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION5, RegionFromId(14), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableBulliesForSwarmBases_Init () {
    gt_DisableBulliesForSwarmBases = TriggerCreate("gt_DisableBulliesForSwarmBases_Func");
    TriggerAddEventUnitDied(gt_DisableBulliesForSwarmBases, UnitRefFromVariable("gv_townCenterUnits[1]"));
    TriggerAddEventUnitDied(gt_DisableBulliesForSwarmBases, UnitRefFromVariable("gv_townCenterUnits[2]"));
    TriggerAddEventUnitDied(gt_DisableBulliesForSwarmBases, UnitRefFromVariable("gv_townCenterUnits[3]"));
    TriggerAddEventUnitDied(gt_DisableBulliesForSwarmBases, UnitRefFromVariable("gv_townCenterUnits[4]"));
    TriggerAddEventUnitDied(gt_DisableBulliesForSwarmBases, UnitRefFromVariable("gv_townCenterUnits[5]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Number Of Zerg Remaining Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNumberOfZergRemainingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC01DC1EE_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC01DC1EE_val = gv_swarmBasesDestroyed;
    if (autoC01DC1EE_val == 3) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (autoC01DC1EE_val == 4) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00079", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNumberOfZergRemainingQ_Init () {
    gt_TransmissionNumberOfZergRemainingQ = TriggerCreate("gt_TransmissionNumberOfZergRemainingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Streaming Wave Controller
//--------------------------------------------------------------------------------------------------
bool gt_ZergStreamingWaveController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zerglingCount;
    fixed lv_waveInterval;
    unitgroup lv_waveGroup;
    unit lv_zergNydus;

    // Automatic Variable Declarations
    int autoD3E38235_val;

    // Variable Initialization
    lv_waveGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zergNydus = UnitFromId(794);
    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((TimerGetRemaining(gv_zergStreamStageTimer) == 0.0)) {
            gv_zergStreamStage += 1;
            autoD3E38235_val = gv_zergStreamStage;
            if (autoD3E38235_val == 1) {
                TimerStart(gv_zergStreamStageTimer, 240.0, false, c_timeAI);
                lv_zerglingCount = 3;
                lv_waveInterval = 12.0;
            }
            else if (autoD3E38235_val == 2) {
                TimerStart(gv_zergStreamStageTimer, 240.0, false, c_timeAI);
                lv_zerglingCount = 4;
                lv_waveInterval = 12.0;
            }
            else if (autoD3E38235_val == 3) {
                TimerStart(gv_zergStreamStageTimer, 300.0, false, c_timeAI);
                lv_zerglingCount = 5;
                lv_waveInterval = 12.0;
            }
            else if (autoD3E38235_val == 4) {
                TimerStart(gv_zergStreamStageTimer, 300.0, false, c_timeAI);
                lv_zerglingCount = 6;
                lv_waveInterval = 12.0;
            }
            else if (autoD3E38235_val == 5) {
                TimerStart(gv_zergStreamStageTimer, 300.0, false, c_timeAI);
                lv_zerglingCount = 7;
                lv_waveInterval = 12.0;
            }
            else if (autoD3E38235_val == 6) {
                lv_zerglingCount = 7;
                lv_waveInterval = 10.0;
            }
            else {
            }
        }

        while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_07_ZERG_STREAM, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 30))) {
            Wait(2.0, c_timeAI);
        }
        if ((UnitIsAlive(lv_zergNydus) == false)) {
            if ((libNtve_gf_UnitInRegion(gv_dARK_ENERGY, RegionCircle(RegionGetCenter(RegionFromId(28)), 24.0)) == true)) {
                return true;
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_07_ZERG_STREAM, RegionGetCenter(RegionFromId(28)));
                lv_zergNydus = UnitLastCreated();
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Birth 02", 0, c_animTimeDefault);
                SoundPlayAtPointForPlayer(SoundLink("NydusSpace_BirthA", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(28)), 0.0, 100.0, 0.0);
                Wait(3.0, c_timeGame);
            }
        }

        lv_waveGroup = null;
        TimerStart(gv_zergStreamWaveTimer, lv_waveInterval, false, c_timeAI);
        UnitCargoCreate(lv_zergNydus, "HotSRaptor", lv_zerglingCount);
        lv_waveGroup = UnitCargoLastCreatedGroup();
        UnitIssueOrder(lv_zergNydus, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
        while (!((UnitGroupCount(UnitCargoGroup(lv_zergNydus), c_unitCountAlive) == 0))) {
            Wait(0.5, c_timeAI);
        }
        Wait(2.0, c_timeAI);
        AISetGroupScriptControlled(lv_waveGroup, false);
        gf_ZergStreamWave(lv_waveGroup);
        libNtve_gf_WaitForTimer(gv_zergStreamWaveTimer, 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergStreamingWaveController_Init () {
    gt_ZergStreamingWaveController = TriggerCreate("gt_ZergStreamingWaveController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Streaming Wave Gather
//--------------------------------------------------------------------------------------------------
bool gt_ZergStreamingWaveGather_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_07_ZERG_STREAM))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HotSRaptor") && (UnitOrderCount(EventUnit()) == 0)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(796)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergStreamingWaveGather_Init () {
    gt_ZergStreamingWaveGather = TriggerCreate("gt_ZergStreamingWaveGather_Func");
    TriggerAddEventUnitRegion(gt_ZergStreamingWaveGather, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Wave Targeting
//--------------------------------------------------------------------------------------------------
bool gt_ZergWaveTargeting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_conduitIndex;

    // Automatic Variable Declarations
    const int autoCE3BF03F_ae = gv_vOID_CRYSTAL_TOTAL;
    int autoCE3BF03F_var;
    int auto7FE2D7B6_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zergWaveCount += 1;
    autoCE3BF03F_var = 1;
    for ( ; autoCE3BF03F_var <= autoCE3BF03F_ae; autoCE3BF03F_var += 1 ) {
        if ((gv_voidCrystalClear[autoCE3BF03F_var] == false)) {
            lv_conduitIndex = autoCE3BF03F_var;
            break;
        }

    }
    auto7FE2D7B6_val = lv_conduitIndex;
    if (auto7FE2D7B6_val == 1) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(797), false);
    }
    else if (auto7FE2D7B6_val == 2) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(801), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(798), false);
    }
    else if (auto7FE2D7B6_val == 3) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(801), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(799), false);
    }
    else if (auto7FE2D7B6_val == 4) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(801), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(823), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(800), false);
    }
    else {
    }
    TriggerExecute(gt_TransmissionZergAttackWaveQ, true, true);
    gf_ZergWavePing(ge_ZergWaveType_NormalWave);
    if ((lv_conduitIndex != 0)) {
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystal[lv_conduitIndex]), 2.0, Color(100.00, 0.00, 0.00));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergWaveTargeting_Init () {
    gt_ZergWaveTargeting = TriggerCreate("gt_ZergWaveTargeting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Wave Targeting
//--------------------------------------------------------------------------------------------------
bool gt_KerriganWaveTargeting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE9CAAC92_ae = gv_vOID_CRYSTAL_TOTAL;
    int autoE9CAAC92_var;
    int auto5E405196_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kerriganWaveCount += 1;
    autoE9CAAC92_var = 1;
    for ( ; autoE9CAAC92_var <= autoE9CAAC92_ae; autoE9CAAC92_var += 1 ) {
        if ((gv_voidCrystalClear[autoE9CAAC92_var] == false)) {
            gv_conduitIndex = autoE9CAAC92_var;
            break;
        }

    }
    auto5E405196_val = gv_conduitIndex;
    if (auto5E405196_val == 1) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(797), false);
    }
    else if (auto5E405196_val == 2) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(801), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(798), false);
    }
    else if (auto5E405196_val == 3) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(801), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(799), false);
    }
    else if (auto5E405196_val == 4) {
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(705), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(801), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(823), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION5, PointFromId(800), false);
    }
    else {
    }
    TriggerEnable(gt_CancelKerriganWave, true);
    TriggerExecute(gt_TransmissionKerriganWaveQ, true, true);
    gf_ZergWavePing(ge_ZergWaveType_KerriganWave);
    if ((gv_conduitIndex != 0)) {
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_voidCrystal[gv_conduitIndex]), 2.0, Color(100.00, 0.00, 0.00));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganWaveTargeting_Init () {
    gt_KerriganWaveTargeting = TriggerCreate("gt_KerriganWaveTargeting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancel Kerrigan Wave
//--------------------------------------------------------------------------------------------------
bool gt_CancelKerriganWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto9CB4FB73_val;
    fixed auto8D80231F_at;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION5, c_unitAllianceAlly, RegionCircle(UnitGetPosition(gv_zeratul), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 2) || (libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(23)) == true) || (libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(24)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9CB4FB73_val = gv_kerriganWaveCount;
    if (auto9CB4FB73_val == 1) {
        AIAttackWaveCancel(cai_wave_createdWave(3, gv_pLAYER_02_DOMINION5));
    }
    else if (auto9CB4FB73_val == 2) {
        AIAttackWaveCancel(cai_wave_createdWave(6, gv_pLAYER_02_DOMINION5));
    }
    else {
    }
    if ((UnitIsAlive(gv_zeratul) == true)) {
        TriggerExecute(gt_TransmissionKerriganWithdrawingQ, true, false);
        UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(462)), c_orderQueueReplace);
    }

    auto8D80231F_at = 0;
    while (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionCircle(PointFromId(462), 5.0)) == true)) && auto8D80231F_at <= 120.0) {
        Wait(1.0, c_timeAI);
        auto8D80231F_at = auto8D80231F_at + 1.0;
    }
    AISetUnitScriptControlled(gv_zeratul, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CancelKerriganWave_Init () {
    gt_CancelKerriganWave = TriggerCreate("gt_CancelKerriganWave_Func");
    TriggerEnable(gt_CancelKerriganWave, false);
    TriggerAddEventTimePeriodic(gt_CancelKerriganWave, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zerg Attack Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZergAttackWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC55B23B3_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    autoC55B23B3_val = RandomInt(1, 6);
    if (autoC55B23B3_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00071", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC55B23B3_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC55B23B3_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00073", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC55B23B3_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00105", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC55B23B3_val == 5) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00106", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC55B23B3_val == 6) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00107", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZergAttackWaveQ_Init () {
    gt_TransmissionZergAttackWaveQ = TriggerCreate("gt_TransmissionZergAttackWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Kerrigan Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKerriganWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto878DD71B_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto878DD71B_val = RandomInt(1, 6);
    if (auto878DD71B_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00074", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto878DD71B_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00075", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto878DD71B_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto878DD71B_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto878DD71B_val == 5) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00103", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto878DD71B_val == 6) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00104", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKerriganWaveQ_Init () {
    gt_TransmissionKerriganWaveQ = TriggerCreate("gt_TransmissionKerriganWaveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Kerrigan Withdrawing Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKerriganWithdrawingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA305D9BA_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    autoA305D9BA_val = RandomInt(1, 5);
    if (autoA305D9BA_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00077", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA305D9BA_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00094", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA305D9BA_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00095", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA305D9BA_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00108", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoA305D9BA_val == 5) {
        libVCMI_gf_SendTransmissionCampaign(gv_zeratul, "pMission_Ulnar03|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKerriganWithdrawingQ_Init () {
    gt_TransmissionKerriganWithdrawingQ = TriggerCreate("gt_TransmissionKerriganWithdrawingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Easter Egg - Carbot Zergling
//--------------------------------------------------------------------------------------------------
bool gt_EasterEggCarbotZergling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zerglingGroup;

    // Automatic Variable Declarations
    const int auto2D0F1C8A_n = 4;
    int auto2D0F1C8A_i;

    // Variable Initialization
    lv_zerglingGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    for (auto2D0F1C8A_i = 1; auto2D0F1C8A_i <= auto2D0F1C8A_n; auto2D0F1C8A_i += 1) {
        if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_animNameDefault, "Spell", 0, c_animTimeDefault);
            SoundPlayOnUnitForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), EventPlayerEffectUsedUnit(c_effectUnitCaster), 0.0, 100.0, 0.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingCarbot", 0, gv_pLAYER_07_ZERG_STREAM, PointWithOffset(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1.0, -1.0));
            UnitBehaviorAdd(UnitLastCreated(), "CritterWanderLeash", UnitLastCreated(), 1);
            UnitGroupAdd(lv_zerglingGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(796)), c_orderQueueReplace);
            Wait(0.667, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EasterEggCarbotZergling_Init () {
    gt_EasterEggCarbotZergling = TriggerCreate("gt_EasterEggCarbotZergling_Func");
    TriggerAddEventPlayerEffectUsed(gt_EasterEggCarbotZergling, c_playerAny, "ZerglingCarbotSpawnRB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal 01 Clear
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystal01Clear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_voidCrystalGuards[1], c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidCrystalClear[1] = true;
    if ((UnitIsAlive(gv_voidCrystal[1]) == true)) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidCrystal[1]), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            TriggerExecute(gt_TransmissionArtanisRemindsToDestroyPylonQ, true, false);
        }
        else {
            TriggerExecute(gt_TransmissionKerriganRemindsToDestroyPylonQ, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystal01Clear_Init () {
    gt_VoidCrystal01Clear = TriggerCreate("gt_VoidCrystal01Clear_Func");
    TriggerEnable(gt_VoidCrystal01Clear, false);
    TriggerAddEventTimePeriodic(gt_VoidCrystal01Clear, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal 02 Clear
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystal02Clear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_voidCrystalGuards[2], c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidCrystalClear[2] = true;
    if ((UnitIsAlive(gv_voidCrystal[2]) == true)) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidCrystal[2]), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            TriggerExecute(gt_TransmissionArtanisRemindsToDestroyPylonQ, true, false);
        }
        else {
            TriggerExecute(gt_TransmissionKerriganRemindsToDestroyPylonQ, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystal02Clear_Init () {
    gt_VoidCrystal02Clear = TriggerCreate("gt_VoidCrystal02Clear_Func");
    TriggerEnable(gt_VoidCrystal02Clear, false);
    TriggerAddEventTimePeriodic(gt_VoidCrystal02Clear, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal 03 Clear
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystal03Clear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_voidCrystalGuards[3], c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidCrystalClear[3] = true;
    if ((UnitIsAlive(gv_voidCrystal[3]) == true)) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidCrystal[3]), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            TriggerExecute(gt_TransmissionArtanisRemindsToDestroyPylonQ, true, false);
        }
        else {
            TriggerExecute(gt_TransmissionKerriganRemindsToDestroyPylonQ, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystal03Clear_Init () {
    gt_VoidCrystal03Clear = TriggerCreate("gt_VoidCrystal03Clear_Func");
    TriggerEnable(gt_VoidCrystal03Clear, false);
    TriggerAddEventTimePeriodic(gt_VoidCrystal03Clear, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal 04 Clear
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystal04Clear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_voidCrystalGuards[4], c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidCrystalClear[4] = true;
    if ((UnitIsAlive(gv_voidCrystal[4]) == true)) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidCrystal[4]), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            TriggerExecute(gt_TransmissionArtanisRemindsToDestroyPylonQ, true, false);
        }
        else {
            TriggerExecute(gt_TransmissionKerriganRemindsToDestroyPylonQ, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystal04Clear_Init () {
    gt_VoidCrystal04Clear = TriggerCreate("gt_VoidCrystal04Clear_Func");
    TriggerEnable(gt_VoidCrystal04Clear, false);
    TriggerAddEventTimePeriodic(gt_VoidCrystal04Clear, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Artanis Reminds To Destroy Pylon Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionArtanisRemindsToDestroyPylonQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto6603573F_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto6603573F_val = gv_voidCrystalsDisabled;
    if (auto6603573F_val == 0) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00080", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto6603573F_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00081", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto6603573F_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto6603573F_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00087", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionArtanisRemindsToDestroyPylonQ_Init () {
    gt_TransmissionArtanisRemindsToDestroyPylonQ = TriggerCreate("gt_TransmissionArtanisRemindsToDestroyPylonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Kerrigan Reminds To Destroy Pylon Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionKerriganRemindsToDestroyPylonQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto00749D90_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto00749D90_val = gv_voidCrystalsDisabled;
    if (auto00749D90_val == 0) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00134", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto00749D90_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00135", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto00749D90_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00136", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto00749D90_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00137", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionKerriganRemindsToDestroyPylonQ_Init () {
    gt_TransmissionKerriganRemindsToDestroyPylonQ = TriggerCreate("gt_TransmissionKerriganRemindsToDestroyPylonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal 01 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystal01Destroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CrystalDestructionShake(gv_voidCrystal[1]);
    PingDestroy(gv_voidCrystalPing[1]);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_masteryWindowClosed[1] == false)) {
        gv_masteryAchievementProgress += 1;
        TriggerEnable(gt_MonitorUnitsinRegionCrystal01, false);
        TriggerEnable(gt_MonitorUnitDamageCrystal01, false);
        if ((gv_masteryAchievementProgress >= 2)) {
            libVoiC_gf_CampaignAwardAchievement("Mastery_Ulnar03", gv_pLAYER_01_USER);
        }

    }

    gv_voidCrystalsDisabled += 1;
    TriggerExecute(gt_ObjectiveDestroyVoidCrystalsUpdate, true, false);
    if ((gv_voidCrystalsDisabled == gv_vOID_CRYSTAL_TOTAL)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }
    else {
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionFirstVoidCrystalDestroyedQ, true, false);
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/84B68A3A"));
        TriggerExecute(gt_RetributionWaveController, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystal01Destroyed_Init () {
    gt_VoidCrystal01Destroyed = TriggerCreate("gt_VoidCrystal01Destroyed_Func");
    TriggerAddEventUnitDied(gt_VoidCrystal01Destroyed, UnitRefFromVariable("gv_voidCrystal[1]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal 02 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystal02Destroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CrystalDestructionShake(gv_voidCrystal[2]);
    PingDestroy(gv_voidCrystalPing[2]);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_masteryWindowClosed[2] == false)) {
        gv_masteryAchievementProgress += 1;
        TriggerEnable(gt_MonitorUnitsinRegionCrystal02, false);
        TriggerEnable(gt_MonitorUnitDamageCrystal02, false);
        if ((gv_masteryAchievementProgress >= 2)) {
            libVoiC_gf_CampaignAwardAchievement("Mastery_Ulnar03", gv_pLAYER_01_USER);
        }

    }

    gv_voidCrystalsDisabled += 1;
    TriggerExecute(gt_ObjectiveDestroyVoidCrystalsUpdate, true, false);
    if ((gv_voidCrystalsDisabled == gv_vOID_CRYSTAL_TOTAL)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }
    else {
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionFirstVoidCrystalDestroyedQ, true, false);
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/BFBF4EA6"));
        TriggerExecute(gt_RetributionWaveController, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystal02Destroyed_Init () {
    gt_VoidCrystal02Destroyed = TriggerCreate("gt_VoidCrystal02Destroyed_Func");
    TriggerAddEventUnitDied(gt_VoidCrystal02Destroyed, UnitRefFromVariable("gv_voidCrystal[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal 03 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystal03Destroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CrystalDestructionShake(gv_voidCrystal[3]);
    PingDestroy(gv_voidCrystalPing[3]);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_masteryWindowClosed[3] == false)) {
        gv_masteryAchievementProgress += 1;
        TriggerEnable(gt_MonitorUnitsinRegionCrystal03, false);
        TriggerEnable(gt_MonitorUnitDamageCrystal03, false);
        if ((gv_masteryAchievementProgress >= 2)) {
            libVoiC_gf_CampaignAwardAchievement("Mastery_Ulnar03", gv_pLAYER_01_USER);
        }

    }

    gv_voidCrystalsDisabled += 1;
    TriggerExecute(gt_ObjectiveDestroyVoidCrystalsUpdate, true, false);
    if ((gv_voidCrystalsDisabled == gv_vOID_CRYSTAL_TOTAL)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }
    else {
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionFirstVoidCrystalDestroyedQ, true, false);
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/A22D9E89"));
        TriggerExecute(gt_RetributionWaveController, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystal03Destroyed_Init () {
    gt_VoidCrystal03Destroyed = TriggerCreate("gt_VoidCrystal03Destroyed_Func");
    TriggerAddEventUnitDied(gt_VoidCrystal03Destroyed, UnitRefFromVariable("gv_voidCrystal[3]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal 04 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystal04Destroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CrystalDestructionShake(gv_voidCrystal[4]);
    PingDestroy(gv_voidCrystalPing[4]);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_masteryWindowClosed[4] == false)) {
        gv_masteryAchievementProgress += 1;
        TriggerEnable(gt_MonitorUnitsinRegionCrystal04, false);
        TriggerEnable(gt_MonitorUnitDamageCrystal04, false);
        if ((gv_masteryAchievementProgress >= 2)) {
            libVoiC_gf_CampaignAwardAchievement("Mastery_Ulnar03", gv_pLAYER_01_USER);
        }

    }

    gv_voidCrystalsDisabled += 1;
    TriggerExecute(gt_ObjectiveDestroyVoidCrystalsUpdate, true, false);
    if ((gv_voidCrystalsDisabled == gv_vOID_CRYSTAL_TOTAL)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }
    else {
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionFirstVoidCrystalDestroyedQ, true, false);
        libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D9C26546"));
        TriggerExecute(gt_RetributionWaveController, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCrystal04Destroyed_Init () {
    gt_VoidCrystal04Destroyed = TriggerCreate("gt_VoidCrystal04Destroyed_Func");
    TriggerAddEventUnitDied(gt_VoidCrystal04Destroyed, UnitRefFromVariable("gv_voidCrystal[4]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Void Crystal Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstVoidCrystalDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoDFBB2F71_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    autoDFBB2F71_val = gv_voidCrystalsDisabled;
    if (autoDFBB2F71_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoDFBB2F71_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoDFBB2F71_val == 3) {
        TriggerEnable(TriggerGetCurrent(), false);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00131", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstVoidCrystalDestroyedQ_Init () {
    gt_TransmissionFirstVoidCrystalDestroyedQ = TriggerCreate("gt_TransmissionFirstVoidCrystalDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retribution Wave Controller
//--------------------------------------------------------------------------------------------------
bool gt_RetributionWaveController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto07225DB2_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto07225DB2_val = gv_voidCrystalsDisabled;
    if (auto07225DB2_val == 1) {
    }
    else if (auto07225DB2_val == 2) {
        TriggerExecute(gt_HybridRetributionWave01, true, false);
    }
    else if (auto07225DB2_val == 3) {
        TriggerExecute(gt_HybridRetributionWave02, true, false);
    }
    else if (auto07225DB2_val == 4) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetributionWaveController_Init () {
    gt_RetributionWaveController = TriggerCreate("gt_RetributionWaveController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Retribution Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_HybridRetributionWave01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto45D72FEA_n;
    int auto45D72FEA_i;
    int autoCE41AB3D_n;
    int autoCE41AB3D_i;
    unitgroup autoE3133E53_g;
    int autoE3133E53_u;
    unit autoE3133E53_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto45D72FEA_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    for (auto45D72FEA_i = 1; auto45D72FEA_i <= auto45D72FEA_n; auto45D72FEA_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "HybridReaver", 0, gv_pLAYER_02_DOMINION, PointFromId(738));
        UnitGroupAdd(gv_retributionGroup, UnitLastCreated());
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, UnitLastCreated());
        Wait(1.0, c_timeAI);
    }
    autoCE41AB3D_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
    for (autoCE41AB3D_i = 1; autoCE41AB3D_i <= autoCE41AB3D_n; autoCE41AB3D_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_02_DOMINION, PointFromId(738));
        UnitGroupAdd(gv_retributionGroup, UnitLastCreated());
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, UnitLastCreated());
        Wait(1.0, c_timeAI);
    }
    Wait(3.0, c_timeAI);
    if ((UnitGroupCount(gv_retributionGroup, c_unitCountAlive) > 0)) {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        autoE3133E53_g = gv_retributionGroup;
        autoE3133E53_u = UnitGroupCount(autoE3133E53_g, c_unitCountAll);
        for (;; autoE3133E53_u -= 1) {
            autoE3133E53_var = UnitGroupUnitFromEnd(autoE3133E53_g, autoE3133E53_u);
            if (autoE3133E53_var == null) { break; }
            AISetUnitScriptControlled(autoE3133E53_var, false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, autoE3133E53_var);
        }
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(426), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(427), false);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    }

    TriggerExecute(gt_TransmissionHybridRetributionQ, true, true);
    TriggerExecute(gt_RetributionWavePing, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridRetributionWave01_Init () {
    gt_HybridRetributionWave01 = TriggerCreate("gt_HybridRetributionWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Retribution Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_HybridRetributionWave02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto160FD15C_n;
    int auto160FD15C_i;
    int auto010E1306_n;
    int auto010E1306_i;
    unitgroup autoEDA2E35D_g;
    int autoEDA2E35D_u;
    unit autoEDA2E35D_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto160FD15C_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 2);
    for (auto160FD15C_i = 1; auto160FD15C_i <= auto160FD15C_n; auto160FD15C_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "HybridReaver", 0, gv_pLAYER_02_DOMINION, PointFromId(738));
        UnitGroupAdd(gv_retributionGroup, UnitLastCreated());
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, UnitLastCreated());
        Wait(1.0, c_timeAI);
    }
    auto010E1306_n = libLotv_gf_DifficultyValueInt2(2, 2, 3, 5);
    for (auto010E1306_i = 1; auto010E1306_i <= auto010E1306_n; auto010E1306_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", 0, gv_pLAYER_02_DOMINION, PointFromId(738));
        UnitGroupAdd(gv_retributionGroup, UnitLastCreated());
        AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, UnitLastCreated());
        Wait(1.0, c_timeAI);
    }
    Wait(3.0, c_timeAI);
    if ((UnitGroupCount(gv_retributionGroup, c_unitCountAlive) > 0)) {
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_01_USER));
        autoEDA2E35D_g = gv_retributionGroup;
        autoEDA2E35D_u = UnitGroupCount(autoEDA2E35D_g, c_unitCountAll);
        for (;; autoEDA2E35D_u -= 1) {
            autoEDA2E35D_var = UnitGroupUnitFromEnd(autoEDA2E35D_g, autoEDA2E35D_u);
            if (autoEDA2E35D_var == null) { break; }
            AISetUnitScriptControlled(autoEDA2E35D_var, false);
            AIAttackWaveUseUnit(gv_pLAYER_02_DOMINION, autoEDA2E35D_var);
        }
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(426), false);
        AIAttackWaveAddWaypoint(gv_pLAYER_02_DOMINION, PointFromId(427), false);
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 0, false);
    }

    TriggerExecute(gt_TransmissionHybridRetributionQ, true, true);
    TriggerExecute(gt_RetributionWavePing, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridRetributionWave02_Init () {
    gt_HybridRetributionWave02 = TriggerCreate("gt_HybridRetributionWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retribution Wave Ping
//--------------------------------------------------------------------------------------------------
bool gt_RetributionWavePing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2F007BC7_g;
    int auto2F007BC7_u;
    unit auto2F007BC7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(gv_pLAYER_01_USER), "PingAlert", PointFromId(738), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_retributionGroupPing = PingLastCreated();
    PingSetVisible(gv_retributionGroupPing, false);
    PingSetScale(gv_retributionGroupPing, 0.6);
    PingSetTooltip(gv_retributionGroupPing, StringExternal("Param/Value/89677986"));
    while (true) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_retributionGroup) == true)) {
            PingDestroy(gv_retributionGroupPing);
            return true;
        }
        else {
            PingSetPosition(gv_retributionGroupPing, UnitGroupCenterOfGroup(gv_retributionGroup));
            PingSetVisible(gv_retributionGroupPing, true);
            auto2F007BC7_g = gv_retributionGroup;
            auto2F007BC7_u = UnitGroupCount(auto2F007BC7_g, c_unitCountAll);
            for (;; auto2F007BC7_u -= 1) {
                auto2F007BC7_var = UnitGroupUnitFromEnd(auto2F007BC7_g, auto2F007BC7_u);
                if (auto2F007BC7_var == null) { break; }
                if ((UnitGetOwner(auto2F007BC7_var) == gv_pLAYER_01_USER)) {
                    UnitGroupRemove(gv_retributionGroup, auto2F007BC7_var);
                }

            }
        }
        Wait(0.1, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetributionWavePing_Init () {
    gt_RetributionWavePing = TriggerCreate("gt_RetributionWavePing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Retribution Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridRetributionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoBF385280_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    autoBF385280_val = gv_voidCrystalsDisabled;
    if (autoBF385280_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Ulnar03|Line00067", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBF385280_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Ulnar03|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridRetributionQ_Init () {
    gt_TransmissionHybridRetributionQ = TriggerCreate("gt_TransmissionHybridRetributionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Dies
//--------------------------------------------------------------------------------------------------
bool gt_KerriganDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StartKerriganReviveCooldown2();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganDies_Init () {
    gt_KerriganDies = TriggerCreate("gt_KerriganDies_Func");
    TriggerAddEventUnitDied(gt_KerriganDies, UnitRefFromVariable("gv_zeratul"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Revives After Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_KerriganRevivesAfterCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGetCooldown(gv_pLAYER_02_DOMINION5, gv_heroReviveLinkKerrigan) == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_kerriganCocoon, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("KerriganRevive", 0), gv_zeratul), c_orderQueueReplace);
    UnitKill(gv_kerriganCocoon);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerriganRevivesAfterCooldown_Init () {
    gt_KerriganRevivesAfterCooldown = TriggerCreate("gt_KerriganRevivesAfterCooldown_Func");
    TriggerEnable(gt_KerriganRevivesAfterCooldown, false);
    TriggerAddEventTimePeriodic(gt_KerriganRevivesAfterCooldown, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vessel Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_VesselIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveActivateVesselsCreate, true, true);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_TransmissionActivateVessels, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VesselIntroQ_Init () {
    gt_VesselIntroQ = TriggerCreate("gt_VesselIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vessel Discovery
//--------------------------------------------------------------------------------------------------
bool gt_VesselDiscovery_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VesselIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VesselDiscovery_Init () {
    gt_VesselDiscovery = TriggerCreate("gt_VesselDiscovery_Func");
    TriggerAddEventTimePeriodic(gt_VesselDiscovery, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Activate Vessels
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionActivateVessels_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00017", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00025", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionActivateVessels_Init () {
    gt_TransmissionActivateVessels = TriggerCreate("gt_TransmissionActivateVessels_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vessel 01 Activated
//--------------------------------------------------------------------------------------------------
bool gt_Vessel01Activated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(448), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_vesselsActivated += 1;
    gf_VesselActivationFX(PointFromId(448));
    TriggerExecute(gt_ObjectiveActivateVesselsUpdate, true, true);
    if ((gv_vesselsActivated == 3)) {
        TriggerExecute(gt_ObjectiveActivateVesselsComplete, true, true);
    }

    TriggerExecute(gt_TransmissionVesselActivatedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vessel01Activated_Init () {
    gt_Vessel01Activated = TriggerCreate("gt_Vessel01Activated_Func");
    TriggerEnable(gt_Vessel01Activated, false);
    TriggerAddEventTimePeriodic(gt_Vessel01Activated, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vessel 02 Activated
//--------------------------------------------------------------------------------------------------
bool gt_Vessel02Activated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(510), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_vesselsActivated += 1;
    gf_VesselActivationFX(PointFromId(510));
    TriggerExecute(gt_ObjectiveActivateVesselsUpdate, true, true);
    if ((gv_vesselsActivated == 3)) {
        TriggerExecute(gt_ObjectiveActivateVesselsComplete, true, true);
    }

    TriggerExecute(gt_TransmissionVesselActivatedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vessel02Activated_Init () {
    gt_Vessel02Activated = TriggerCreate("gt_Vessel02Activated_Func");
    TriggerEnable(gt_Vessel02Activated, false);
    TriggerAddEventTimePeriodic(gt_Vessel02Activated, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vessel 03 Activated
//--------------------------------------------------------------------------------------------------
bool gt_Vessel03Activated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(554), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_vesselsActivated += 1;
    gf_VesselActivationFX(PointFromId(554));
    TriggerExecute(gt_ObjectiveActivateVesselsUpdate, true, true);
    if ((gv_vesselsActivated == 3)) {
        TriggerExecute(gt_ObjectiveActivateVesselsComplete, true, true);
    }

    TriggerExecute(gt_TransmissionVesselActivatedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vessel03Activated_Init () {
    gt_Vessel03Activated = TriggerCreate("gt_Vessel03Activated_Func");
    TriggerEnable(gt_Vessel03Activated, false);
    TriggerAddEventTimePeriodic(gt_Vessel03Activated, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Vessel Activated Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVesselActivatedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3178A77E_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto3178A77E_val = gv_vesselsActivated;
    if (auto3178A77E_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00066", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00089", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3178A77E_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00090", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3178A77E_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00026", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00091", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVesselActivatedQ_Init () {
    gt_TransmissionVesselActivatedQ = TriggerCreate("gt_TransmissionVesselActivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/B35EB3E9"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Starting Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatStartingUnitsDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    if ((ObjectiveGetState(gv_objectiveDestroyZergBase2) != c_objectiveStateCompleted)) {
        TriggerExecute(gt_ObjectiveFindArtanisFailed, true, false);
    }
    else if ((ObjectiveGetState(gv_objectiveDestroyZergBase3) != c_objectiveStateCompleted)) {
        TriggerExecute(gt_ObjectiveKillHybridFailed, true, false);
    }
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/3142407E"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatStartingUnitsDead_Init () {
    gt_DefeatStartingUnitsDead = TriggerCreate("gt_DefeatStartingUnitsDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatStartingUnitsDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Artanis or Kerrigan Dies (Stage 1)
//--------------------------------------------------------------------------------------------------
bool gt_DefeatArtanisorKerriganDiesStage1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKillHybridFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/79EA0516"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatArtanisorKerriganDiesStage1_Init () {
    gt_DefeatArtanisorKerriganDiesStage1 = TriggerCreate("gt_DefeatArtanisorKerriganDiesStage1_Func");
    TriggerAddEventUnitDied(gt_DefeatArtanisorKerriganDiesStage1, UnitRefFromVariable("gv_artanis"));
    TriggerAddEventUnitDied(gt_DefeatArtanisorKerriganDiesStage1, UnitRefFromVariable("gv_zeratul"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Swarm Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatSwarmMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_townCenterGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSwarmMustSurviveFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/A3546624"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatSwarmMustSurviveFailed_Init () {
    gt_DefeatSwarmMustSurviveFailed = TriggerCreate("gt_DefeatSwarmMustSurviveFailed_Func");
    TriggerAddEventTimePeriodic(gt_DefeatSwarmMustSurviveFailed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyVoidCrystalsComplete, true, false);
    TriggerExecute(gt_ObjectiveSwarmMustSurviveComplete, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_artanis, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_zeratul, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libVoiC_gf_CampaignAwardAchievement("PUlnar03_1", gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_swarmBasesDestroyed <= 3)) {
        libVoiC_gf_CampaignAwardAchievement("PUlnar03_3", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/39D59A9A"), IntToText(FixedToInt(gv_feedbackDamage)));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/05273AD2"), IntToText(gv_psiStormKillCount));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/279DED79"), IntToText(gv_swarmBasesDestroyed));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Psi Storm Kills
//--------------------------------------------------------------------------------------------------
bool gt_StatPsiStormKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_psiStormKillCount += 1;
    if ((gv_psiStormKillCount >= 15)) {
        TriggerExecute(gt_AchievementPsiStormKills, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatPsiStormKills_Init () {
    gt_StatPsiStormKills = TriggerCreate("gt_StatPsiStormKills_Func");
    TriggerAddEventUnitDamaged(gt_StatPsiStormKills, null, c_unitDamageTypeAny, c_unitDamageFatal, "PsiStormDamage");
    TriggerAddEventUnitDamaged(gt_StatPsiStormKills, null, c_unitDamageTypeAny, c_unitDamageFatal, "PsiStormDamageInitial");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Feedback Damage
//--------------------------------------------------------------------------------------------------
bool gt_StatFeedbackDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_feedbackDamage += EventUnitDamageAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatFeedbackDamage_Init () {
    gt_StatFeedbackDamage = TriggerCreate("gt_StatFeedbackDamage_Func");
    TriggerAddEventUnitDamaged(gt_StatFeedbackDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "Feedback");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Psi Storm Kills
//--------------------------------------------------------------------------------------------------
bool gt_AchievementPsiStormKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PUlnar03_2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementPsiStormKills_Init () {
    gt_AchievementPsiStormKills = TriggerCreate("gt_AchievementPsiStormKills_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stats - High Templar or Archon Damage
//--------------------------------------------------------------------------------------------------
bool gt_StatsHighTemplarorArchonDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(gv_pLAYER_01_USER, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "Archon") || (UnitGetType(EventUnitDamageSourceUnit()) == "HighTemplar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_anniversaryAchievementTermHighTemplarorArchonDamage = (gv_anniversaryAchievementTermHighTemplarorArchonDamage + FixedToInt(EventUnitDamageAmount()));
    AchievementTermQuantitySet(gv_pLAYER_01_USER, "Anniversary_PUlnar03", gv_anniversaryAchievementTermHighTemplarorArchonDamage);
    TextExpressionSetToken("Param/Expression/FA4C3183", "A", IntToText(gv_anniversaryAchievementTermHighTemplarorArchonDamage));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/FA4C3183"), false);
    gv_highTemplarOrArchonDamage += FixedToInt(EventUnitDamageAmount());
    if ((gv_highTemplarOrArchonDamage >= 1000)) {
        TriggerExecute(gt_AchievementHighTemplarorArchonDamage, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatsHighTemplarorArchonDamage_Init () {
    gt_StatsHighTemplarorArchonDamage = TriggerCreate("gt_StatsHighTemplarorArchonDamage_Func");
    TriggerAddEventUnitDamaged(gt_StatsHighTemplarorArchonDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - High Templar or Archon Damage
//--------------------------------------------------------------------------------------------------
bool gt_AchievementHighTemplarorArchonDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_CampaignAwardAchievement("Anniversary_PUlnar03", gv_pLAYER_01_USER);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementHighTemplarorArchonDamage_Init () {
    gt_AchievementHighTemplarorArchonDamage = TriggerCreate("gt_AchievementHighTemplarorArchonDamage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Units in Region (Crystal 01)
//--------------------------------------------------------------------------------------------------
bool gt_MonitorUnitsinRegionCrystal01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_07_ZERG_STREAM, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MonitorUnitDamageCrystal01, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorUnitsinRegionCrystal01_Init () {
    gt_MonitorUnitsinRegionCrystal01 = TriggerCreate("gt_MonitorUnitsinRegionCrystal01_Func");
    TriggerEnable(gt_MonitorUnitsinRegionCrystal01, false);
    TriggerAddEventTimePeriodic(gt_MonitorUnitsinRegionCrystal01, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Unit Damage (Crystal 01)
//--------------------------------------------------------------------------------------------------
bool gt_MonitorUnitDamageCrystal01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crystal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crystal = 1;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(15)) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_masteryWindowClosed[lv_crystal] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorUnitDamageCrystal01_Init () {
    gt_MonitorUnitDamageCrystal01 = TriggerCreate("gt_MonitorUnitDamageCrystal01_Func");
    TriggerEnable(gt_MonitorUnitDamageCrystal01, false);
    TriggerAddEventUnitDamaged(gt_MonitorUnitDamageCrystal01, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Units in Region (Crystal 02)
//--------------------------------------------------------------------------------------------------
bool gt_MonitorUnitsinRegionCrystal02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_07_ZERG_STREAM, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MonitorUnitDamageCrystal02, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorUnitsinRegionCrystal02_Init () {
    gt_MonitorUnitsinRegionCrystal02 = TriggerCreate("gt_MonitorUnitsinRegionCrystal02_Func");
    TriggerEnable(gt_MonitorUnitsinRegionCrystal02, false);
    TriggerAddEventTimePeriodic(gt_MonitorUnitsinRegionCrystal02, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Unit Damage (Crystal 02)
//--------------------------------------------------------------------------------------------------
bool gt_MonitorUnitDamageCrystal02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crystal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crystal = 2;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(27)) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_masteryWindowClosed[lv_crystal] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorUnitDamageCrystal02_Init () {
    gt_MonitorUnitDamageCrystal02 = TriggerCreate("gt_MonitorUnitDamageCrystal02_Func");
    TriggerEnable(gt_MonitorUnitDamageCrystal02, false);
    TriggerAddEventUnitDamaged(gt_MonitorUnitDamageCrystal02, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Units in Region (Crystal 03)
//--------------------------------------------------------------------------------------------------
bool gt_MonitorUnitsinRegionCrystal03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_07_ZERG_STREAM, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MonitorUnitDamageCrystal03, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorUnitsinRegionCrystal03_Init () {
    gt_MonitorUnitsinRegionCrystal03 = TriggerCreate("gt_MonitorUnitsinRegionCrystal03_Func");
    TriggerEnable(gt_MonitorUnitsinRegionCrystal03, false);
    TriggerAddEventTimePeriodic(gt_MonitorUnitsinRegionCrystal03, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Unit Damage (Crystal 03)
//--------------------------------------------------------------------------------------------------
bool gt_MonitorUnitDamageCrystal03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crystal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crystal = 3;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(21)) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_masteryWindowClosed[lv_crystal] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorUnitDamageCrystal03_Init () {
    gt_MonitorUnitDamageCrystal03 = TriggerCreate("gt_MonitorUnitDamageCrystal03_Func");
    TriggerEnable(gt_MonitorUnitDamageCrystal03, false);
    TriggerAddEventUnitDamaged(gt_MonitorUnitDamageCrystal03, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Units in Region (Crystal 04)
//--------------------------------------------------------------------------------------------------
bool gt_MonitorUnitsinRegionCrystal04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_07_ZERG_STREAM, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MonitorUnitDamageCrystal04, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorUnitsinRegionCrystal04_Init () {
    gt_MonitorUnitsinRegionCrystal04 = TriggerCreate("gt_MonitorUnitsinRegionCrystal04_Func");
    TriggerEnable(gt_MonitorUnitsinRegionCrystal04, false);
    TriggerAddEventTimePeriodic(gt_MonitorUnitsinRegionCrystal04, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monitor Unit Damage (Crystal 04)
//--------------------------------------------------------------------------------------------------
bool gt_MonitorUnitDamageCrystal04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crystal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crystal = 4;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(16)) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION2) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_masteryWindowClosed[lv_crystal] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonitorUnitDamageCrystal04_Init () {
    gt_MonitorUnitDamageCrystal04 = TriggerCreate("gt_MonitorUnitDamageCrystal04_Func");
    TriggerEnable(gt_MonitorUnitDamageCrystal04, false);
    TriggerAddEventUnitDamaged(gt_MonitorUnitDamageCrystal04, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7C1EC188_g;
    int auto7C1EC188_u;
    unit auto7C1EC188_var;

    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_02_DOMINION5, "KerriganVoid", "AIKerrigan", false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesCasualNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHardBrutal, true, false);
    }
    TriggerEnable(gt_DisableBulliesForProtoss01, true);
    TriggerEnable(gt_DisableBulliesForProtoss02, true);
    TriggerEnable(gt_DisableBulliesForTerran01, true);
    TriggerEnable(gt_DisableBulliesForTerran02, true);
    TriggerEnable(gt_DisableBulliesForTerran03, true);
    auto7C1EC188_g = UnitGroup("HybridDominatorVoid", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7C1EC188_u = UnitGroupCount(auto7C1EC188_g, c_unitCountAll);
    for (;; auto7C1EC188_u -= 1) {
        auto7C1EC188_var = UnitGroupUnitFromEnd(auto7C1EC188_g, auto7C1EC188_u);
        if (auto7C1EC188_var == null) { break; }
        gf_HybridDominatorAI(auto7C1EC188_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION3, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION4, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION5, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF1DD8F57_g;
    int autoF1DD8F57_var;
    playergroup auto6C1A375E_g;
    int auto6C1A375E_var;
    playergroup auto542F1AF1_g;
    int auto542F1AF1_var;
    playergroup autoFFAC2D07_g;
    int autoFFAC2D07_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    autoF1DD8F57_g = gv_enemyPlayerGroup;
    autoF1DD8F57_var = -1;
    while (true) {
        autoF1DD8F57_var = PlayerGroupNextPlayer(autoF1DD8F57_g, autoF1DD8F57_var);
        if (autoF1DD8F57_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF1DD8F57_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoF1DD8F57_var, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoF1DD8F57_var, "TerranInfantryWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoF1DD8F57_var, "TerranVehicleAndShipWeaponsLevel1", 1);
    }
    auto6C1A375E_g = gv_swarmPlayerGroup;
    auto6C1A375E_var = -1;
    while (true) {
        auto6C1A375E_var = PlayerGroupNextPlayer(auto6C1A375E_g, auto6C1A375E_var);
        if (auto6C1A375E_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6C1A375E_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto6C1A375E_var, "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto6C1A375E_var, "ZergFlyerWeaponsLevel1", 1);
    }
    Wait(300.0, c_timeAI);
    auto542F1AF1_g = gv_enemyPlayerGroup;
    auto542F1AF1_var = -1;
    while (true) {
        auto542F1AF1_var = PlayerGroupNextPlayer(auto542F1AF1_g, auto542F1AF1_var);
        if (auto542F1AF1_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto542F1AF1_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto542F1AF1_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto542F1AF1_var, "ProtossShieldsLevel1", 1);
        TechTreeUpgradeAddLevel(auto542F1AF1_var, "TerranInfantryArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto542F1AF1_var, "TerranVehicleAndShipArmorsLevel1", 1);
    }
    autoFFAC2D07_g = gv_swarmPlayerGroup;
    autoFFAC2D07_var = -1;
    while (true) {
        autoFFAC2D07_var = PlayerGroupNextPlayer(autoFFAC2D07_g, autoFFAC2D07_var);
        if (autoFFAC2D07_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoFFAC2D07_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoFFAC2D07_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesCasualNormal_Init () {
    gt_AIUpgradesCasualNormal = TriggerCreate("gt_AIUpgradesCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5D3C4A59_g;
    int auto5D3C4A59_var;
    playergroup auto67F5149B_g;
    int auto67F5149B_var;
    playergroup auto69B4B473_g;
    int auto69B4B473_var;
    playergroup autoB0142A7D_g;
    int autoB0142A7D_var;
    playergroup autoA4D23506_g;
    int autoA4D23506_var;
    playergroup auto8648ECB3_g;
    int auto8648ECB3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(480.0, c_timeAI);
    auto5D3C4A59_g = gv_enemyPlayerGroup;
    auto5D3C4A59_var = -1;
    while (true) {
        auto5D3C4A59_var = PlayerGroupNextPlayer(auto5D3C4A59_g, auto5D3C4A59_var);
        if (auto5D3C4A59_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto5D3C4A59_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto5D3C4A59_var, "ProtossGroundWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto5D3C4A59_var, "TerranVehicleAndShipWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto5D3C4A59_var, "TerranInfantryWeaponsLevel2", 1);
    }
    auto67F5149B_g = gv_swarmPlayerGroup;
    auto67F5149B_var = -1;
    while (true) {
        auto67F5149B_var = PlayerGroupNextPlayer(auto67F5149B_g, auto67F5149B_var);
        if (auto67F5149B_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto67F5149B_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto67F5149B_var, "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto67F5149B_var, "ZergFlyerWeaponsLevel2", 1);
    }
    Wait(240.0, c_timeAI);
    auto69B4B473_g = gv_enemyPlayerGroup;
    auto69B4B473_var = -1;
    while (true) {
        auto69B4B473_var = PlayerGroupNextPlayer(auto69B4B473_g, auto69B4B473_var);
        if (auto69B4B473_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto69B4B473_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto69B4B473_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto69B4B473_var, "ProtossShieldsLevel2", 1);
        TechTreeUpgradeAddLevel(auto69B4B473_var, "TerranInfantryArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto69B4B473_var, "TerranVehicleAndShipArmorsLevel2", 1);
    }
    autoB0142A7D_g = gv_swarmPlayerGroup;
    autoB0142A7D_var = -1;
    while (true) {
        autoB0142A7D_var = PlayerGroupNextPlayer(autoB0142A7D_g, autoB0142A7D_var);
        if (autoB0142A7D_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoB0142A7D_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoB0142A7D_var, "ZergFlyerArmorsLevel2", 1);
    }
    Wait(240.0, c_timeAI);
    autoA4D23506_g = gv_enemyPlayerGroup;
    autoA4D23506_var = -1;
    while (true) {
        autoA4D23506_var = PlayerGroupNextPlayer(autoA4D23506_g, autoA4D23506_var);
        if (autoA4D23506_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoA4D23506_var, "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoA4D23506_var, "ProtossGroundWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoA4D23506_var, "TerranVehicleAndShipWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(autoA4D23506_var, "TerranInfantryWeaponsLevel3", 1);
    }
    auto8648ECB3_g = gv_swarmPlayerGroup;
    auto8648ECB3_var = -1;
    while (true) {
        auto8648ECB3_var = PlayerGroupNextPlayer(auto8648ECB3_g, auto8648ECB3_var);
        if (auto8648ECB3_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto8648ECB3_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto8648ECB3_var, "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto8648ECB3_var, "ZergFlyerWeaponsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHardBrutal_Init () {
    gt_AIUpgradesHardBrutal = TriggerCreate("gt_AIUpgradesHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Base Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyBaseWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00121", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyBaseWarningQ_Init () {
    gt_EnemyBaseWarningQ = TriggerCreate("gt_EnemyBaseWarningQ_Func");
    TriggerAddEventUnitRegion(gt_EnemyBaseWarningQ, null, RegionFromId(35), true);
    TriggerAddEventUnitRegion(gt_EnemyBaseWarningQ, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Bullies For Protoss 01
//--------------------------------------------------------------------------------------------------
bool gt_DisableBulliesForProtoss01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(291)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(27), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableBulliesForProtoss01_Init () {
    gt_DisableBulliesForProtoss01 = TriggerCreate("gt_DisableBulliesForProtoss01_Func");
    TriggerEnable(gt_DisableBulliesForProtoss01, false);
    TriggerAddEventTimePeriodic(gt_DisableBulliesForProtoss01, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Bullies For Protoss 02
//--------------------------------------------------------------------------------------------------
bool gt_DisableBulliesForProtoss02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitIsAlive(UnitFromId(598)) == false) && (UnitIsAlive(UnitFromId(599)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION2, RegionFromId(21), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableBulliesForProtoss02_Init () {
    gt_DisableBulliesForProtoss02 = TriggerCreate("gt_DisableBulliesForProtoss02_Func");
    TriggerEnable(gt_DisableBulliesForProtoss02, false);
    TriggerAddEventTimePeriodic(gt_DisableBulliesForProtoss02, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Bullies For Terran 01
//--------------------------------------------------------------------------------------------------
bool gt_DisableBulliesForTerran01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitIsAlive(UnitFromId(108)) == false) && (UnitIsAlive(UnitFromId(90)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(15), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableBulliesForTerran01_Init () {
    gt_DisableBulliesForTerran01 = TriggerCreate("gt_DisableBulliesForTerran01_Func");
    TriggerEnable(gt_DisableBulliesForTerran01, false);
    TriggerAddEventTimePeriodic(gt_DisableBulliesForTerran01, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Bullies For Terran 02
//--------------------------------------------------------------------------------------------------
bool gt_DisableBulliesForTerran02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(482)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(16), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableBulliesForTerran02_Init () {
    gt_DisableBulliesForTerran02 = TriggerCreate("gt_DisableBulliesForTerran02_Func");
    TriggerEnable(gt_DisableBulliesForTerran02, false);
    TriggerAddEventTimePeriodic(gt_DisableBulliesForTerran02, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Bullies For Terran 03
//--------------------------------------------------------------------------------------------------
bool gt_DisableBulliesForTerran03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(170)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_pLAYER_02_DOMINION3, RegionFromId(20), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableBulliesForTerran03_Init () {
    gt_DisableBulliesForTerran03 = TriggerCreate("gt_DisableBulliesForTerran03_Func");
    TriggerEnable(gt_DisableBulliesForTerran03, false);
    TriggerAddEventTimePeriodic(gt_DisableBulliesForTerran03, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Hybrid From Portal
//--------------------------------------------------------------------------------------------------
bool gt_SpawnHybridFromPortal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4398970F_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(90.0, c_timeAI);
    while (true) {
        if (((libVCMI_gf_GameIsOver() == true) || (gv_swarmBasesDestroyed >= 4))) {
            return true;
        }

        auto4398970F_val = gv_hybridIncrementer;
        if (auto4398970F_val == 0) {
            libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(738));
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION, UnitLastCreatedGroup());
        }
        else if (auto4398970F_val == 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(738));
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION, UnitLastCreatedGroup());
        }
        else if (auto4398970F_val == 2) {
            libNtve_gf_CreateUnitsAtPoint2(1, "HybridReaver", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(738));
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION, UnitLastCreatedGroup());
        }
        else if (auto4398970F_val == 3) {
            libNtve_gf_CreateUnitsAtPoint2(2, "HybridDestroyer", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(738));
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION, UnitLastCreatedGroup());
        }
        else {
            libNtve_gf_CreateUnitsAtPoint2(1, "HybridDestroyer", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(738));
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsAtPoint2(1, "HybridReaver", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(738));
            AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION, UnitLastCreatedGroup());
        }
        Wait(0.5, c_timeAI);
        AIAttackWaveSetTargetPlayer(gv_pLAYER_02_DOMINION, PlayerGroupSingle(gv_pLAYER_02_DOMINION5));
        AIAttackWaveSend(gv_pLAYER_02_DOMINION, 5, false);
        gv_hybridIncrementer += 1;
        Wait(120.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnHybridFromPortal_Init () {
    gt_SpawnHybridFromPortal = TriggerCreate("gt_SpawnHybridFromPortal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(70.0, c_timeGame);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00070", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstAttackQ_Init () {
    gt_TransmissionFirstAttackQ = TriggerCreate("gt_TransmissionFirstAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Artanis Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindArtanisCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PUlnar03Primary01");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindArtanisCreate_Init () {
    gt_ObjectiveFindArtanisCreate = TriggerCreate("gt_ObjectiveFindArtanisCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Artanis Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindArtanisComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFindArtanisCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar03Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindArtanisComplete_Init () {
    gt_ObjectiveFindArtanisComplete = TriggerCreate("gt_ObjectiveFindArtanisComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Artanis Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindArtanisFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFindArtanisCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar03Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindArtanisFailed_Init () {
    gt_ObjectiveFindArtanisFailed = TriggerCreate("gt_ObjectiveFindArtanisFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Hybrid Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillHybridCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PUlnar03Primary02");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillHybridCreate_Init () {
    gt_ObjectiveKillHybridCreate = TriggerCreate("gt_ObjectiveKillHybridCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Hybrid Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillHybridComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillHybridCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar03Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillHybridComplete_Init () {
    gt_ObjectiveKillHybridComplete = TriggerCreate("gt_ObjectiveKillHybridComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Hybrid Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillHybridFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKillHybridCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar03Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillHybridFailed_Init () {
    gt_ObjectiveKillHybridFailed = TriggerCreate("gt_ObjectiveKillHybridFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Void Crystals Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidCrystalsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PUlnar03Primary03");
    libVCMI_gf_SetMissionObjectiveProgress("PUlnar03Primary03", gv_voidCrystalsDisabled);
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidCrystalsCreate_Init () {
    gt_ObjectiveDestroyVoidCrystalsCreate = TriggerCreate("gt_ObjectiveDestroyVoidCrystalsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Void Crystals Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidCrystalsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyVoidCrystalsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PUlnar03Primary03", gv_voidCrystalsDisabled);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidCrystalsUpdate_Init () {
    gt_ObjectiveDestroyVoidCrystalsUpdate = TriggerCreate("gt_ObjectiveDestroyVoidCrystalsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Void Crystals Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidCrystalsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyVoidCrystalsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar03Primary03", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidCrystalsComplete_Init () {
    gt_ObjectiveDestroyVoidCrystalsComplete = TriggerCreate("gt_ObjectiveDestroyVoidCrystalsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Void Crystals Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidCrystalsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyVoidCrystalsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar03Primary03", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidCrystalsFailed_Init () {
    gt_ObjectiveDestroyVoidCrystalsFailed = TriggerCreate("gt_ObjectiveDestroyVoidCrystalsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Swarm Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSwarmMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PUlnar03Primary04");
    gv_objectiveDestroyZergBase4 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSwarmMustSurviveCreate_Init () {
    gt_ObjectiveSwarmMustSurviveCreate = TriggerCreate("gt_ObjectiveSwarmMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Swarm Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSwarmMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSwarmMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar03Primary04", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSwarmMustSurviveComplete_Init () {
    gt_ObjectiveSwarmMustSurviveComplete = TriggerCreate("gt_ObjectiveSwarmMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Swarm Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSwarmMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveSwarmMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar03Primary04", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSwarmMustSurviveFailed_Init () {
    gt_ObjectiveSwarmMustSurviveFailed = TriggerCreate("gt_ObjectiveSwarmMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Vessels Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateVesselsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PUlnar03Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PUlnar03Bonus01", gv_vesselsActivated);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateVesselsCreate_Init () {
    gt_ObjectiveActivateVesselsCreate = TriggerCreate("gt_ObjectiveActivateVesselsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Vessels Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateVesselsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveActivateVesselsCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PUlnar03Bonus01", gv_vesselsActivated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateVesselsUpdate_Init () {
    gt_ObjectiveActivateVesselsUpdate = TriggerCreate("gt_ObjectiveActivateVesselsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Vessels Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateVesselsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveActivateVesselsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PUlnar03Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateVesselsComplete_Init () {
    gt_ObjectiveActivateVesselsComplete = TriggerCreate("gt_ObjectiveActivateVesselsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto85A7619F_g;
    int auto85A7619F_u;
    unit auto85A7619F_var;
    unitgroup auto211ED777_g;
    int auto211ED777_u;
    unit auto211ED777_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto85A7619F_g = gv_cinematicHiddenUnits;
    auto85A7619F_u = UnitGroupCount(auto85A7619F_g, c_unitCountAll);
    for (;; auto85A7619F_u -= 1) {
        auto85A7619F_var = UnitGroupUnitFromEnd(auto85A7619F_g, auto85A7619F_u);
        if (auto85A7619F_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto85A7619F_var, false);
    }
    auto211ED777_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto211ED777_u = UnitGroupCount(auto211ED777_g, c_unitCountAll);
    for (;; auto211ED777_u -= 1) {
        auto211ED777_var = UnitGroupUnitFromEnd(auto211ED777_g, auto211ED777_u);
        if (auto211ED777_var == null) { break; }
        UnitCreate(1, UnitGetType(auto211ED777_var), 0, gv_pLAYER_01_USER, PointWithOffsetPolar(UnitGetPosition(auto211ED777_var), 8.0, 315.0), 135.0);
        UnitGroupAdd(gv_introUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(auto211ED777_var)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_speaker;

    // Automatic Variable Declarations
    unitgroup auto96F45584_g;
    int auto96F45584_u;
    unit auto96F45584_var;
    unitgroup auto9341FF52_g;
    int auto9341FF52_u;
    unit auto9341FF52_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(143), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(162), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar03|Line00116", true), c_soundIndexAny)) + 3), -1, 10, true);
    lv_speaker = UnitGroupUnit(UnitGroupFilter(libVoiC_gf_EnabledUnitTypeforArmyCategory("HighTemplar"), gv_pLAYER_01_USER, gv_introUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar03_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00124", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00116", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(234), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar03|Line00117", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar03|Line00001", true), c_soundIndexAny))), -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    auto96F45584_g = gv_introUnits;
    auto96F45584_u = UnitGroupCount(auto96F45584_g, c_unitCountAll);
    for (;; auto96F45584_u -= 1) {
        auto96F45584_var = UnitGroupUnitFromEnd(auto96F45584_g, auto96F45584_u);
        if (auto96F45584_var == null) { break; }
        if ((auto96F45584_var != lv_speaker)) {
            UnitIssueOrder(auto96F45584_var, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(lv_speaker)), c_orderQueueAddToEnd);
        }

    }
    libVCMI_gf_SendTransmissionCampaign(lv_speaker, "pMission_Ulnar03|Line00117", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00001", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    auto9341FF52_g = gv_introUnits;
    auto9341FF52_u = UnitGroupCount(auto9341FF52_g, c_unitCountAll);
    for (;; auto9341FF52_u -= 1) {
        auto9341FF52_var = UnitGroupUnitFromEnd(auto9341FF52_g, auto9341FF52_u);
        if (auto9341FF52_var == null) { break; }
        Wait(RandomFixed(0.1, 0.4), c_timeGame);
        UnitIssueOrder(auto9341FF52_var, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(RegionGetCenter(RegionFromId(2)), 16.0, 135.0)), c_orderQueueReplace);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto54C5BC2F_g;
    int auto54C5BC2F_u;
    unit auto54C5BC2F_var;
    unitgroup auto5FD5B695_g;
    int auto5FD5B695_u;
    unit auto5FD5B695_var;
    unitgroup autoCE29B34D_g;
    int autoCE29B34D_u;
    unit autoCE29B34D_var;
    unitgroup auto1A0248B8_g;
    int auto1A0248B8_u;
    unit auto1A0248B8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        auto5FD5B695_g = gv_introUnits;
        auto5FD5B695_u = UnitGroupCount(auto5FD5B695_g, c_unitCountAll);
        for (;; auto5FD5B695_u -= 1) {
            auto5FD5B695_var = UnitGroupUnitFromEnd(auto5FD5B695_g, auto5FD5B695_u);
            if (auto5FD5B695_var == null) { break; }
            UnitRemove(auto5FD5B695_var);
        }
        Wait(0.086, c_timeGame);
        autoCE29B34D_g = gv_cinematicHiddenUnits;
        autoCE29B34D_u = UnitGroupCount(autoCE29B34D_g, c_unitCountAll);
        for (;; autoCE29B34D_u -= 1) {
            autoCE29B34D_var = UnitGroupUnitFromEnd(autoCE29B34D_g, autoCE29B34D_u);
            if (autoCE29B34D_var == null) { break; }
            libNtve_gf_ShowHideUnit(autoCE29B34D_var, true);
        }
    }
    else {
        auto54C5BC2F_g = gv_cinematicHiddenUnits;
        auto54C5BC2F_u = UnitGroupCount(auto54C5BC2F_g, c_unitCountAll);
        for (;; auto54C5BC2F_u -= 1) {
            auto54C5BC2F_var = UnitGroupUnitFromEnd(auto54C5BC2F_g, auto54C5BC2F_u);
            if (auto54C5BC2F_var == null) { break; }
            UnitRemove(auto54C5BC2F_var);
        }
    }
    auto1A0248B8_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1A0248B8_u = UnitGroupCount(auto1A0248B8_g, c_unitCountAll);
    for (;; auto1A0248B8_u -= 1) {
        auto1A0248B8_var = UnitGroupUnitFromEnd(auto1A0248B8_g, auto1A0248B8_u);
        if (auto1A0248B8_var == null) { break; }
        UnitGroupAdd(gv_s1PlayerUnits, auto1A0248B8_var);
    }
    UnitGroupSelect(gv_s1PlayerUnits, gv_pLAYER_01_USER, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    CreepModify(UnitGetPosition(UnitFromId(2)), 6.0, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(40), lv_fadeDuration, -1, 10, true);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libVCMI_gf_PauseUnpauseSpearofAdunCooldowns(true);
        Wait(lv_fadeDuration, c_timeReal);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libVCMI_gf_PauseUnpauseSpearofAdunCooldowns(true);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(40)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zealotCount;
    unitgroup lv_templarCount;
    int lv_iter;

    // Automatic Variable Declarations
    unitgroup auto748892D0_g;
    int auto748892D0_u;
    unit auto748892D0_var;
    unitgroup auto9C6D87B5_g;
    int auto9C6D87B5_u;
    unit auto9C6D87B5_var;
    unitgroup autoB7B93766_g;
    int autoB7B93766_u;
    unit autoB7B93766_var;
    int autoD8E6433D_ae;
    const int autoD8E6433D_ai = 1;
    int auto46B3DB5E_ae;
    const int auto46B3DB5E_ai = 1;
    unitgroup auto29C154CA_g;
    int auto29C154CA_u;
    unit auto29C154CA_var;
    unitgroup autoEDB3C0BB_g;
    int autoEDB3C0BB_u;
    unit autoEDB3C0BB_var;
    unitgroup auto693EDC15_g;
    int auto693EDC15_u;
    unit auto693EDC15_var;

    // Variable Initialization
    lv_zealotCount = UnitGroupEmpty();
    lv_templarCount = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupAddUnitGroup(lv_zealotCount, UnitGroup(libVoiC_gf_EnabledUnitTypeforArmyCategory("Zealot"), gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_templarCount, UnitGroup(libVoiC_gf_EnabledUnitTypeforArmyCategory("HighTemplar"), gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_templarCount, UnitGroup(libVoiC_gf_EnabledUnitTypeforArmyCategory("Archon"), gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto748892D0_g = gv_kerriganSwarmAiders;
    auto748892D0_u = UnitGroupCount(auto748892D0_g, c_unitCountAll);
    for (;; auto748892D0_u -= 1) {
        auto748892D0_var = UnitGroupUnitFromEnd(auto748892D0_g, auto748892D0_u);
        if (auto748892D0_var == null) { break; }
        UnitRemove(auto748892D0_var);
    }
    auto9C6D87B5_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9C6D87B5_u = UnitGroupCount(auto9C6D87B5_g, c_unitCountAll);
    for (;; auto9C6D87B5_u -= 1) {
        auto9C6D87B5_var = UnitGroupUnitFromEnd(auto9C6D87B5_g, auto9C6D87B5_u);
        if (auto9C6D87B5_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto9C6D87B5_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto9C6D87B5_var);
            libNtve_gf_PauseUnit(auto9C6D87B5_var, true);
        }

    }
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoB7B93766_g = gv_cinematicHiddenUnits;
    autoB7B93766_u = UnitGroupCount(autoB7B93766_g, c_unitCountAll);
    for (;; autoB7B93766_u -= 1) {
        autoB7B93766_var = UnitGroupUnitFromEnd(autoB7B93766_g, autoB7B93766_u);
        if (autoB7B93766_var == null) { break; }
        if ((UnitGetType(autoB7B93766_var) == "ShadowCloud")) {
            UnitGroupRemove(gv_cinematicHiddenUnits, autoB7B93766_var);
        }
        else {
            libNtve_gf_ShowHideUnit(autoB7B93766_var, false);
        }
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganVoid", 0, gv_pLAYER_02_DOMINION5, PointFromId(458));
    gv_midKerrigan = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_midKerrigan);
    UnitSetState(gv_midKerrigan, c_unitStateFidget, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "ArtanisVoid", 0, gv_pLAYER_02_DOMINION4, PointFromId(459));
    gv_midArtanis = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_midArtanis);
    UnitSetState(gv_midArtanis, c_unitStateFidget, false);
    autoD8E6433D_ae = UnitGroupCount(lv_zealotCount, c_unitCountAlive);
    lv_iter = 1;
    for ( ; ( (autoD8E6433D_ai >= 0 && lv_iter <= autoD8E6433D_ae) || (autoD8E6433D_ai < 0 && lv_iter >= autoD8E6433D_ae) ) ; lv_iter += autoD8E6433D_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, libVoiC_gf_EnabledUnitTypeforArmyCategory("Zealot"), 0, gv_pLAYER_02_DOMINION4, PointFromName(("Mid Zealot " + IntToString(lv_iter) + "-1")));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_midProtoss, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    }
    auto46B3DB5E_ae = UnitGroupCount(lv_templarCount, c_unitCountAlive);
    lv_iter = 1;
    for ( ; ( (auto46B3DB5E_ai >= 0 && lv_iter <= auto46B3DB5E_ae) || (auto46B3DB5E_ai < 0 && lv_iter >= auto46B3DB5E_ae) ) ; lv_iter += auto46B3DB5E_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "HighTemplar", 0, gv_pLAYER_02_DOMINION4, PointFromName(("Mid HT " + IntToString(lv_iter) + "-1")));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_midProtoss, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ShadowTendril", 0, gv_pLAYER_02_DOMINION, PointFromId(161));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    auto29C154CA_g = UnitGroup(null, 0, RegionFromId(6), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto29C154CA_u = UnitGroupCount(auto29C154CA_g, c_unitCountAll);
    for (;; auto29C154CA_u -= 1) {
        auto29C154CA_var = UnitGroupUnitFromEnd(auto29C154CA_g, auto29C154CA_u);
        if (auto29C154CA_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto29C154CA_var, true);
    }
    autoEDB3C0BB_g = UnitGroup(null, 0, RegionFromId(9), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEDB3C0BB_u = UnitGroupCount(autoEDB3C0BB_g, c_unitCountAll);
    for (;; autoEDB3C0BB_u -= 1) {
        autoEDB3C0BB_var = UnitGroupUnitFromEnd(autoEDB3C0BB_g, autoEDB3C0BB_u);
        if (autoEDB3C0BB_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoEDB3C0BB_var, true);
    }
    auto693EDC15_g = UnitGroup(null, c_playerAny, RegionFromId(22), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto693EDC15_u = UnitGroupCount(auto693EDC15_g, c_unitCountAll);
    for (;; auto693EDC15_u -= 1) {
        auto693EDC15_var = UnitGroupUnitFromEnd(auto693EDC15_g, auto693EDC15_u);
        if (auto693EDC15_var == null) { break; }
        if ((UnitGetType(auto693EDC15_var) != "Beacon_Protoss")) {
            libNtve_gf_ShowHideUnit(auto693EDC15_var, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto9F56E177_g;
    int auto9F56E177_u;
    unit auto9F56E177_var;
    unitgroup auto86E4C1A6_g;
    int auto86E4C1A6_u;
    unit auto86E4C1A6_var;
    unitgroup auto471BDB1E_g;
    int auto471BDB1E_u;
    unit auto471BDB1E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(532), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(562), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar03|Line00125", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar03|Line00085", true), c_soundIndexAny)) - 2), -1, 10, true);
    TriggerExecute(gt_MidMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    auto9F56E177_g = gv_cinematicTempUnits;
    auto9F56E177_u = UnitGroupCount(auto9F56E177_g, c_unitCountAll);
    for (;; auto9F56E177_u -= 1) {
        auto9F56E177_var = UnitGroupUnitFromEnd(auto9F56E177_g, auto9F56E177_u);
        if (auto9F56E177_var == null) { break; }
        if ((auto9F56E177_var != gv_midArtanis) && (auto9F56E177_var != gv_midKerrigan)) {
            UnitIssueOrder(auto9F56E177_var, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_midArtanis)), c_orderQueueReplace);
        }

    }
    libVCMI_gf_SendTransmissionCampaign(gv_midArtanis, "pMission_Ulnar03|Line00125", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitSetPosition(gv_midKerrigan, PointFromId(462), false);
    UnitSetFacing(gv_midKerrigan, PointGetFacing(PointFromId(462)), 0.0);
    UnitIssueOrder(gv_midKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPosition(gv_midArtanis, PointFromId(609), false);
    UnitSetFacing(gv_midArtanis, PointGetFacing(PointFromId(609)), 0.0);
    auto86E4C1A6_g = UnitGroupFilter(libVoiC_gf_EnabledUnitTypeforArmyCategory("Zealot"), gv_pLAYER_02_DOMINION4, gv_midProtoss, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto86E4C1A6_u = UnitGroupCount(auto86E4C1A6_g, c_unitCountAll);
    for (;; auto86E4C1A6_u -= 1) {
        auto86E4C1A6_var = UnitGroupUnitFromEnd(auto86E4C1A6_g, auto86E4C1A6_u);
        if (auto86E4C1A6_var == null) { break; }
        lv_i += 1;
        UnitSetPosition(auto86E4C1A6_var, PointFromName(("Mid Zealot " + IntToString(lv_i) + "-2")), false);
        libNtve_gf_MakeUnitFacePoint(auto86E4C1A6_var, UnitGetPosition(gv_midArtanis), 0.0);
    }
    lv_i = 0;
    auto471BDB1E_g = UnitGroupFilter(libVoiC_gf_EnabledUnitTypeforArmyCategory("HighTemplar"), gv_pLAYER_02_DOMINION4, gv_midProtoss, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto471BDB1E_u = UnitGroupCount(auto471BDB1E_g, c_unitCountAll);
    for (;; auto471BDB1E_u -= 1) {
        auto471BDB1E_var = UnitGroupUnitFromEnd(auto471BDB1E_g, auto471BDB1E_u);
        if (auto471BDB1E_var == null) { break; }
        lv_i += 1;
        UnitSetPosition(auto471BDB1E_var, PointFromName(("Mid HT " + IntToString(lv_i) + "-2")), false);
        libNtve_gf_MakeUnitFacePoint(auto471BDB1E_var, UnitGetPosition(gv_midArtanis), 0.0);
    }
    TriggerExecute(gt_MidProtossBase, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(654), 0.0, -1, 10, true);
    TriggerExecute(gt_MidZergBase, true, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1097), 0.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_midKerrigan, "pMission_Ulnar03|Line00085", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(693), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1098), 7.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Ulnar03|Line00126", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Large, null, gv_voidCrystal[1], "Ref_Center");
    libHots_gf_StoreActorForUnit(gv_voidCrystal[1], 1, libNtve_gf_ActorLastCreated());
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    UnitIssueOrder(gv_midArtanis, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(451)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(454), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(455), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar03|Line00127", true), c_soundIndexAny)) - 1), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_midArtanis, "pMission_Ulnar03|Line00127", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoAA2C3511_g;
    int autoAA2C3511_u;
    unit autoAA2C3511_var;
    unitgroup autoFB57C7FD_g;
    int autoFB57C7FD_u;
    unit autoFB57C7FD_var;
    unitgroup autoFC7F90F2_g;
    int autoFC7F90F2_u;
    unit autoFC7F90F2_var;
    unitgroup autoD07733EA_g;
    int autoD07733EA_u;
    unit autoD07733EA_var;
    unitgroup autoBD2775CC_g;
    int autoBD2775CC_u;
    unit autoBD2775CC_var;
    unitgroup auto0DDE138C_g;
    int auto0DDE138C_u;
    unit auto0DDE138C_var;
    unitgroup autoC2B005F5_g;
    int autoC2B005F5_u;
    unit autoC2B005F5_var;
    unitgroup auto81C39E94_g;
    int auto81C39E94_u;
    unit auto81C39E94_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA2C3511_g = gv_cinematicTempUnits;
    autoAA2C3511_u = UnitGroupCount(autoAA2C3511_g, c_unitCountAll);
    for (;; autoAA2C3511_u -= 1) {
        autoAA2C3511_var = UnitGroupUnitFromEnd(autoAA2C3511_g, autoAA2C3511_u);
        if (autoAA2C3511_var == null) { break; }
        UnitRemove(autoAA2C3511_var);
    }
    autoFB57C7FD_g = gv_cinematicHiddenUnits;
    autoFB57C7FD_u = UnitGroupCount(autoFB57C7FD_g, c_unitCountAll);
    for (;; autoFB57C7FD_u -= 1) {
        autoFB57C7FD_var = UnitGroupUnitFromEnd(autoFB57C7FD_g, autoFB57C7FD_u);
        if (autoFB57C7FD_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFB57C7FD_var, true);
    }
    autoFC7F90F2_g = gv_cinematicPausedUnits;
    autoFC7F90F2_u = UnitGroupCount(autoFC7F90F2_g, c_unitCountAll);
    for (;; autoFC7F90F2_u -= 1) {
        autoFC7F90F2_var = UnitGroupUnitFromEnd(autoFC7F90F2_g, autoFC7F90F2_u);
        if (autoFC7F90F2_var == null) { break; }
        libNtve_gf_PauseUnit(autoFC7F90F2_var, false);
    }
    autoD07733EA_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD07733EA_u = UnitGroupCount(autoD07733EA_g, c_unitCountAll);
    for (;; autoD07733EA_u -= 1) {
        autoD07733EA_var = UnitGroupUnitFromEnd(autoD07733EA_g, autoD07733EA_u);
        if (autoD07733EA_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD07733EA_var, true);
        libNtve_gf_PauseUnit(autoD07733EA_var, false);
    }
    autoBD2775CC_g = UnitGroup(null, gv_pLAYER_02_DOMINION5, RegionPlayableMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoBD2775CC_u = UnitGroupCount(autoBD2775CC_g, c_unitCountAll);
    for (;; autoBD2775CC_u -= 1) {
        autoBD2775CC_var = UnitGroupUnitFromEnd(autoBD2775CC_g, autoBD2775CC_u);
        if (autoBD2775CC_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoBD2775CC_var, true);
        libNtve_gf_PauseUnit(autoBD2775CC_var, false);
    }
    UnitRemove(gv_artanis);
    UnitRemove(gv_zeratul);
    libNtve_gf_CreateUnitsAtPoint2(1, "KerriganVoid", 0, gv_pLAYER_02_DOMINION5, PointFromId(462));
    gv_zeratul = UnitLastCreated();
    TriggerStop(gt_MidProtossBase);
    TriggerStop(gt_MidZergBase);
    TriggerExecute(gt_MidCleanupOrganiseStartingUnits, true, false);
    if ((gv_midMusicCompleted == false)) {
        TriggerStop(gt_MidMusic);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    auto0DDE138C_g = gv_midZerg;
    auto0DDE138C_u = UnitGroupCount(auto0DDE138C_g, c_unitCountAll);
    for (;; auto0DDE138C_u -= 1) {
        auto0DDE138C_var = UnitGroupUnitFromEnd(auto0DDE138C_g, auto0DDE138C_u);
        if (auto0DDE138C_var == null) { break; }
        AISetUnitScriptControlled(auto0DDE138C_var, false);
    }
    autoC2B005F5_g = UnitGroup(null, gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC2B005F5_u = UnitGroupCount(autoC2B005F5_g, c_unitCountAll);
    for (;; autoC2B005F5_u -= 1) {
        autoC2B005F5_var = UnitGroupUnitFromEnd(autoC2B005F5_g, autoC2B005F5_u);
        if (autoC2B005F5_var == null) { break; }
        UnitSetPropertyFixed(autoC2B005F5_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoC2B005F5_var, c_unitPropShieldsPercent, 100.0);
    }
    auto81C39E94_g = UnitGroup("HighTemplar", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81C39E94_u = UnitGroupCount(auto81C39E94_g, c_unitCountAll);
    for (;; auto81C39E94_u -= 1) {
        auto81C39E94_var = UnitGroupUnitFromEnd(auto81C39E94_g, auto81C39E94_u);
        if (auto81C39E94_var == null) { break; }
        UnitSetPropertyFixed(auto81C39E94_var, c_unitPropEnergyPercent, 100.0);
    }
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    ObjectiveSetState(gv_objectiveDestroyZergBase2, c_objectiveStateHidden);
    ObjectiveSetState(gv_objectiveDestroyZergBase3, c_objectiveStateHidden);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_ZERG_STREAM, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_voidCrystal[1], 1));
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCUI_gf_ShowSpearofAdunUI(true, c_transitionDurationDefault);
    libVCMI_gf_SetSpearofAdunEnergy(0.0, libVCMI_ge_SpearofAdunEnergyType_Absolute);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(17), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup - Organise Starting Units
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanupOrganiseStartingUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_invisiblePylon;
    int lv_unitsToSpawn;
    int lv_iter;
    point[4] lv_zealotPoint;
    point[4] lv_templarPoint;
    unitgroup lv_zealotUnitGroup;
    unitgroup lv_templarUnitGroup;

    // Automatic Variable Declarations
    unitgroup auto0263B50F_g;
    int auto0263B50F_u;
    unit auto0263B50F_var;
    unitgroup auto05E6DB33_g;
    int auto05E6DB33_u;
    unit auto05E6DB33_var;
    unitgroup autoA8C625CE_g;
    int autoA8C625CE_u;
    unit autoA8C625CE_var;

    // Variable Initialization
    lv_zealotUnitGroup = UnitGroupEmpty();
    lv_templarUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto0263B50F_g = UnitGroup(libVoiC_gf_EnabledUnitTypeforArmyCategory("Zealot"), gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0263B50F_u = UnitGroupCount(auto0263B50F_g, c_unitCountAll);
    for (;; auto0263B50F_u -= 1) {
        auto0263B50F_var = UnitGroupUnitFromEnd(auto0263B50F_g, auto0263B50F_u);
        if (auto0263B50F_var == null) { break; }
        lv_iter += 1;
        UnitIssueOrder(auto0263B50F_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(auto0263B50F_var, PointFromName(("Zealot Spawn " + IntToString(lv_iter))), false);
        UnitSetFacing(auto0263B50F_var, PointGetFacing(PointFromName(("Zealot Spawn " + IntToString(lv_iter)))), 0.0);
    }
    lv_iter = 0;
    auto05E6DB33_g = UnitGroup(libVoiC_gf_EnabledUnitTypeforArmyCategory("HighTemplar"), gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto05E6DB33_u = UnitGroupCount(auto05E6DB33_g, c_unitCountAll);
    for (;; auto05E6DB33_u -= 1) {
        auto05E6DB33_var = UnitGroupUnitFromEnd(auto05E6DB33_g, auto05E6DB33_u);
        if (auto05E6DB33_var == null) { break; }
        lv_iter += 1;
        UnitIssueOrder(auto05E6DB33_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(auto05E6DB33_var, PointFromName(("Templar Spawn " + IntToString(lv_iter))), false);
        UnitSetFacing(auto05E6DB33_var, PointGetFacing(PointFromName(("Templar Spawn " + IntToString(lv_iter)))), 0.0);
    }
    autoA8C625CE_g = UnitGroup("Archon", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA8C625CE_u = UnitGroupCount(autoA8C625CE_g, c_unitCountAll);
    for (;; autoA8C625CE_u -= 1) {
        autoA8C625CE_var = UnitGroupUnitFromEnd(autoA8C625CE_g, autoA8C625CE_u);
        if (autoA8C625CE_var == null) { break; }
        lv_iter += 1;
        UnitIssueOrder(autoA8C625CE_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(autoA8C625CE_var, PointFromName(("Templar Spawn " + IntToString(lv_iter))), false);
        UnitSetFacing(autoA8C625CE_var, PointGetFacing(PointFromName(("Templar Spawn " + IntToString(lv_iter)))), 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanupOrganiseStartingUnits_Init () {
    gt_MidCleanupOrganiseStartingUnits = TriggerCreate("gt_MidCleanupOrganiseStartingUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Protoss Base
//--------------------------------------------------------------------------------------------------
bool gt_MidProtossBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Nexus", c_unitCreateConstruct, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(85)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.4, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", c_unitCreateConstruct, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(117)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.4, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gateway", c_unitCreateConstruct, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(30)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.4, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TemplarArchive", c_unitCreateConstruct, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(49)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.4, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stargate", c_unitCreateConstruct, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(833)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    Wait(0.4, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", c_unitCreateConstruct, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(471)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidProtossBase_Init () {
    gt_MidProtossBase = TriggerCreate("gt_MidProtossBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Zerg Base
//--------------------------------------------------------------------------------------------------
bool gt_MidZergBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto01055ADA_n = 16;
    int auto01055ADA_i;
    const int autoFF6AF44A_n = 4;
    int autoFF6AF44A_i;
    const int auto6C0EEAF3_n = 4;
    int auto6C0EEAF3_i;
    unitgroup auto2FCC5000_g;
    int auto2FCC5000_u;
    unit auto2FCC5000_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CreepModify(UnitGetPosition(UnitFromId(33)), 6.0, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hatchery", c_unitCreateConstruct, gv_pLAYER_02_DOMINION5, UnitGetPosition(UnitFromId(33)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    CreepModify(UnitGetPosition(UnitFromId(144)), 4.0, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpawningPool", c_unitCreateConstruct, gv_pLAYER_02_DOMINION5, UnitGetPosition(UnitFromId(144)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    CreepModify(UnitGetPosition(UnitFromId(503)), 4.0, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskCavern", c_unitCreateConstruct, gv_pLAYER_02_DOMINION5, UnitGetPosition(UnitFromId(503)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateConstruct, gv_pLAYER_02_DOMINION5, UnitGetPosition(UnitFromId(232)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", c_unitCreateConstruct, gv_pLAYER_02_DOMINION5, UnitGetPosition(UnitFromId(2)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    for (auto01055ADA_i = 1; auto01055ADA_i <= auto01055ADA_n; auto01055ADA_i += 1) {
        UnitCreate(1, "HotSRaptor", 0, gv_pLAYER_02_DOMINION5, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_midZerg, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    for (autoFF6AF44A_i = 1; autoFF6AF44A_i <= autoFF6AF44A_n; autoFF6AF44A_i += 1) {
        UnitCreate(1, "HydraliskLurker", 0, gv_pLAYER_02_DOMINION5, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_midZerg, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    for (auto6C0EEAF3_i = 1; auto6C0EEAF3_i <= auto6C0EEAF3_n; auto6C0EEAF3_i += 1) {
        UnitCreate(1, "MutaliskBroodlord", 0, gv_pLAYER_02_DOMINION5, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_midZerg, UnitLastCreated());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    while (true) {
        auto2FCC5000_g = gv_midZerg;
        auto2FCC5000_u = UnitGroupCount(auto2FCC5000_g, c_unitCountAll);
        for (;; auto2FCC5000_u -= 1) {
            auto2FCC5000_var = UnitGroupUnitFromEnd(auto2FCC5000_g, auto2FCC5000_u);
            if (auto2FCC5000_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto2FCC5000_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(4))), c_orderQueueReplace);
                UnitGroupAdd(gv_midZerg, UnitLastCreated());
            }

        }
        Wait(1.0, c_timeGame);
        if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidZergBase_Init () {
    gt_MidZergBase = TriggerCreate("gt_MidZergBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Music
//--------------------------------------------------------------------------------------------------
bool gt_MidMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "PUlnar03_Music_Mid";
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_midMusicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidMusic_Init () {
    gt_MidMusic = TriggerCreate("gt_MidMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoD6DF10BC_g;
    int autoD6DF10BC_u;
    unit autoD6DF10BC_var;
    unitgroup auto133033AC_g;
    int auto133033AC_u;
    unit auto133033AC_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitPauseAll(true);
    autoD6DF10BC_g = UnitGroup(null, c_playerAny, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD6DF10BC_u = UnitGroupCount(autoD6DF10BC_g, c_unitCountAll);
    for (;; autoD6DF10BC_u -= 1) {
        autoD6DF10BC_var = UnitGroupUnitFromEnd(autoD6DF10BC_g, autoD6DF10BC_u);
        if (autoD6DF10BC_var == null) { break; }
        if ((UnitGetOwner(autoD6DF10BC_var) != 0)) {
            UnitRemove(autoD6DF10BC_var);
        }

    }
    auto133033AC_g = UnitGroup(null, c_playerAny, RegionFromId(39), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto133033AC_u = UnitGroupCount(auto133033AC_g, c_unitCountAll);
    for (;; auto133033AC_u -= 1) {
        auto133033AC_var = UnitGroupUnitFromEnd(auto133033AC_g, auto133033AC_u);
        if (auto133033AC_var == null) { break; }
        if ((UnitGetOwner(auto133033AC_var) != 0)) {
            UnitRemove(auto133033AC_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(318), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(467), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Ulnar03|Line00060", true), c_soundIndexAny)) + 3), -1, 10, true);
    TriggerExecute(gt_VictoryExplosions, true, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PUlnar03_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Ulnar03_EndCine", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("PUlnar03_Music_VictoryStinger", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_victoryStinger = SoundLastPlayed();
    ActorSend(ActorFromDoodad(DoodadFromId(592)), "AnimClear StandWork");
    ActorSend(ActorFromDoodad(DoodadFromId(592)), "AnimPlay StandWorkEnd Stand,Work,End PlayForever,NonLooping");
    Wait(3.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 1.0, 3.0, 6.0);
    Wait(3.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryArtanis, "pMission_Ulnar03|Line00060", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(6.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerStop(gt_VictoryExplosions);
    SoundStop(gv_victoryStinger, true);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    TransmissionClearAll();
    libVCMI_gf_StopCinematicSounds();
    SoundChannelStop(PlayerGroupAll(), c_soundCategoryOther);
    Wait(0.5, c_timeReal);
    libVoiC_gf_DisplayTimestamp("Ulnar03MissionEnd", false);
    libVoiC_gf_PlayCinematic("Ulnar03MissionEnd", false);
    libVoiC_gf_HaltTimestamp();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_victoryStinger, false);
    SoundStopAllTriggerSounds(false);
    TriggerStop(gt_VictoryExplosions);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Explosions
//--------------------------------------------------------------------------------------------------
bool gt_VictoryExplosions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD2F14027_g;
    int autoD2F14027_u;
    unit autoD2F14027_var;
    unitgroup auto20E1F284_g;
    int auto20E1F284_u;
    unit auto20E1F284_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD2F14027_g = UnitGroup("ShadowCloud", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD2F14027_u = UnitGroupCount(autoD2F14027_g, c_unitCountAll);
    for (;; autoD2F14027_u -= 1) {
        autoD2F14027_var = UnitGroupUnitFromEnd(autoD2F14027_g, autoD2F14027_u);
        if (autoD2F14027_var == null) { break; }
        UnitKill(autoD2F14027_var);
    }
    auto20E1F284_g = UnitGroup("ShadowTendril", gv_pLAYER_02_DOMINION, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto20E1F284_u = UnitGroupCount(auto20E1F284_g, c_unitCountAll);
    for (;; auto20E1F284_u -= 1) {
        auto20E1F284_var = UnitGroupUnitFromEnd(auto20E1F284_g, auto20E1F284_u);
        if (auto20E1F284_var == null) { break; }
        UnitKill(auto20E1F284_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryExplosions_Init () {
    gt_VictoryExplosions = TriggerCreate("gt_VictoryExplosions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_StartGameStage1Q_Init();
    gt_StartGameStage2Q_Init();
    gt_ExpandCreepQuickly_Init();
    gt_TeachPsiStorm_Init();
    gt_PsiStormUsed_Init();
    gt_PsiStormFodderDead_Init();
    gt_TransmissionPsiStormQ_Init();
    gt_MarinesRespondtoPsiStorm_Init();
    gt_TransmissionMarineRespondtoStormQ_Init();
    gt_TeachFeedback_Init();
    gt_FeedbackUsed_Init();
    gt_FeedbackFodderDead_Init();
    gt_TransmissionFeedbackQ_Init();
    gt_ArtanisFound_Init();
    gt_TransmissionSaveArtanisQ_Init();
    gt_HybridFightArtanisKerrigan_Init();
    gt_HybridFightArtanisActions_Init();
    gt_HybridFightKerrigansActions_Init();
    gt_SwarmAttacksHybrid_Init();
    gt_TransmissionSwarmAidsKerriganQ_Init();
    gt_HybridDeadStartStage2_Init();
    gt_StartShadowTendrilMovement_Init();
    gt_ShareShadowTendrilVision_Init();
    gt_TransmissionShadowTendrilIntroQ_Init();
    gt_ShadowTendrilDamageWarning_Init();
    gt_TransmissionShadowTendrilWarningQ_Init();
    gt_SpawnShadowCloudTrail01_Init();
    gt_SpawnShadowCloudTrail02SpeedUpdate_Init();
    gt_SpawnShadowCloudTrail03_Init();
    gt_SpawnShadowCloudTrail04_Init();
    gt_DisableBulliesForSwarmBases_Init();
    gt_TransmissionNumberOfZergRemainingQ_Init();
    gt_ZergStreamingWaveController_Init();
    gt_ZergStreamingWaveGather_Init();
    gt_ZergWaveTargeting_Init();
    gt_KerriganWaveTargeting_Init();
    gt_CancelKerriganWave_Init();
    gt_TransmissionZergAttackWaveQ_Init();
    gt_TransmissionKerriganWaveQ_Init();
    gt_TransmissionKerriganWithdrawingQ_Init();
    gt_EasterEggCarbotZergling_Init();
    gt_VoidCrystal01Clear_Init();
    gt_VoidCrystal02Clear_Init();
    gt_VoidCrystal03Clear_Init();
    gt_VoidCrystal04Clear_Init();
    gt_TransmissionArtanisRemindsToDestroyPylonQ_Init();
    gt_TransmissionKerriganRemindsToDestroyPylonQ_Init();
    gt_VoidCrystal01Destroyed_Init();
    gt_VoidCrystal02Destroyed_Init();
    gt_VoidCrystal03Destroyed_Init();
    gt_VoidCrystal04Destroyed_Init();
    gt_TransmissionFirstVoidCrystalDestroyedQ_Init();
    gt_RetributionWaveController_Init();
    gt_HybridRetributionWave01_Init();
    gt_HybridRetributionWave02_Init();
    gt_RetributionWavePing_Init();
    gt_TransmissionHybridRetributionQ_Init();
    gt_KerriganDies_Init();
    gt_KerriganRevivesAfterCooldown_Init();
    gt_VesselIntroQ_Init();
    gt_VesselDiscovery_Init();
    gt_TransmissionActivateVessels_Init();
    gt_Vessel01Activated_Init();
    gt_Vessel02Activated_Init();
    gt_Vessel03Activated_Init();
    gt_TransmissionVesselActivatedQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatStartingUnitsDead_Init();
    gt_DefeatArtanisorKerriganDiesStage1_Init();
    gt_DefeatSwarmMustSurviveFailed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StatPsiStormKills_Init();
    gt_StatFeedbackDamage_Init();
    gt_AchievementPsiStormKills_Init();
    gt_StatsHighTemplarorArchonDamage_Init();
    gt_AchievementHighTemplarorArchonDamage_Init();
    gt_MonitorUnitsinRegionCrystal01_Init();
    gt_MonitorUnitDamageCrystal01_Init();
    gt_MonitorUnitsinRegionCrystal02_Init();
    gt_MonitorUnitDamageCrystal02_Init();
    gt_MonitorUnitsinRegionCrystal03_Init();
    gt_MonitorUnitDamageCrystal03_Init();
    gt_MonitorUnitsinRegionCrystal04_Init();
    gt_MonitorUnitDamageCrystal04_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_AIUpgradesCasualNormal_Init();
    gt_AIUpgradesHardBrutal_Init();
    gt_EnemyBaseWarningQ_Init();
    gt_DisableBulliesForProtoss01_Init();
    gt_DisableBulliesForProtoss02_Init();
    gt_DisableBulliesForTerran01_Init();
    gt_DisableBulliesForTerran02_Init();
    gt_DisableBulliesForTerran03_Init();
    gt_SpawnHybridFromPortal_Init();
    gt_TransmissionFirstAttackQ_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveFindArtanisCreate_Init();
    gt_ObjectiveFindArtanisComplete_Init();
    gt_ObjectiveFindArtanisFailed_Init();
    gt_ObjectiveKillHybridCreate_Init();
    gt_ObjectiveKillHybridComplete_Init();
    gt_ObjectiveKillHybridFailed_Init();
    gt_ObjectiveDestroyVoidCrystalsCreate_Init();
    gt_ObjectiveDestroyVoidCrystalsUpdate_Init();
    gt_ObjectiveDestroyVoidCrystalsComplete_Init();
    gt_ObjectiveDestroyVoidCrystalsFailed_Init();
    gt_ObjectiveSwarmMustSurviveCreate_Init();
    gt_ObjectiveSwarmMustSurviveComplete_Init();
    gt_ObjectiveSwarmMustSurviveFailed_Init();
    gt_ObjectiveActivateVesselsCreate_Init();
    gt_ObjectiveActivateVesselsUpdate_Init();
    gt_ObjectiveActivateVesselsComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidCleanupOrganiseStartingUnits_Init();
    gt_MidProtossBase_Init();
    gt_MidZergBase_Init();
    gt_MidMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryExplosions_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
