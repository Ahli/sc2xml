//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Amon's Reach
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai34110672"
include "ai597BE227"
include "aiF3C6EA19"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_04_THRASHER = 4;
const int gv_pLAYER_05_PROTOSS_ALLY = 5;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_VoidThrashers {
    unit[6] lv_thrasher;
    point[6] lv_location;
    int[6] lv_ping;
    revealer[6] lv_revealer;
    int lv_activeThrashers;
    int lv_totalThrashers;
    int lv_killedThrashers;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
playergroup gv_enemyPlayerGroup;
bool gv_orbitalStrikeUsed;
unit gv_warpConduit;
int gv_warpConduitMaxLife;
int[5] gv_launchBayPing;
point[5] gv_launchBayLocations;
int[5] gv_launchBayTextTags;
actor[5] gv_launchBayReticules;
unit[5] gv_launchBay;
unit[5] gv_zergConstrictions;
int gv_activeBayIndex;
int gv_objective_LaunchBaysFreed;
int gv_objective_LaunchBaysQuota;
region gv_voidThrasherTerrainHideRegion;
gs_RECORD_VoidThrashers gv_voidThrashers;
timer gv_thrasherSpawnTimer;
timer gv_bonusObjectiveRevealTimer;
int gv_vaultsFound;
int gv_vaultsTotal;
unit[4] gv_vaultBeacon;
bool gv_crawlerEncountered;
int gv_statDarkTemplarWarped;
int gv_statOrbitalStrikeCount;
bool gv_achievementNonProbesorDarkTemplarsBuilt;
int gv_objectiveDestroyZergBase4;
int gv_objectiveDestroyZergBase3;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unitgroup gv_introDarkTemplar;
int[9] gv_introMinerals;
int[2] gv_introGas;
unit gv_midThrasher;
fixed gv_midSpearOfAdunEnergy;
unitgroup gv_midZerg;
bool gv_midUnburrowSafety;
sound gv_midStinger1;
sound gv_midStinger2;

void InitGlobals () {
    int init_i;
    int init_i1;

    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_warpConduit = UnitFromId(19);
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_launchBayPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_launchBayTextTags[init_i] = c_textTagNone;
    }
    gv_objective_LaunchBaysQuota = 4;
    gv_voidThrasherTerrainHideRegion = RegionFromId(35);
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_voidThrashers.lv_ping[init_i1] = c_invalidPingId;
    }
    gv_thrasherSpawnTimer = TimerCreate();
    gv_bonusObjectiveRevealTimer = TimerCreate();
    gv_vaultsTotal = 3;
    gv_objectiveDestroyZergBase4 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introDarkTemplar = UnitGroupEmpty();
    gv_midZerg = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ShuttleBirth (unit lp_shuttle);
void gf_ShuttleMoveController (unit lp_shuttle, int lp_shuttleBayIndex);
void gf_ShuttleCurvePath (unit lp_shuttle, point lp_point1, point lp_point2, point lp_point3);
void gf_SpawnVoidThrasher (int lp_index);
void gf_VoidThrasherAI (int lp_index);
void gf_ThrasherAttackEnemies (int lp_index, int lp_count);
void gf_CreateNydusWormAtPoint (point lp_nydusSpawnPoint, region lp_cargoAttackTarget);
void gf_HideTerrainWhileVoidThrasherIsAlive (unit lp_voidThrasher);
void gf_OrderCrawlertoRoot (point lp_targetPoint, unit lp_crawler);
bool gf_PointisValid (point lp_point, fixed lp_radius);
point gf_GetValidPoint (fixed lp_radius, point lp_point);
void gf_AttackWavePing (unitgroup lp_waveGroup);
void gf_ActivateCarrierCrashinRegion (region lp_region);
void gf_CreateUnitforWarpConduit (string lp_unitType, point lp_createPoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_VoidThrasherMissiles;
trigger gt_StartGameQ;
trigger gt_DarkTemplarIntroQ;
trigger gt_TeachingOrbitalStrikeQ;
trigger gt_TeachingOrbitalStrikeUsed;
trigger gt_OrbitalStrikeReminderQ;
trigger gt_WarpConduitBossBar;
trigger gt_WarpConduitLow50Q;
trigger gt_WarpConduitLow25Q;
trigger gt_WarpConduitLow10Q;
trigger gt_ZergAttackConduitLocation;
trigger gt_DarkTemplarSafety;
trigger gt_LaunchBay01Released;
trigger gt_LaunchBay02Released;
trigger gt_LaunchBay03Released;
trigger gt_LaunchBay04Released;
trigger gt_LaunchBayUpdate;
trigger gt_TransmissionLaunchBayUpdateQ;
trigger gt_VoidThrasherIntroQ;
trigger gt_VoidThrasherIntroShake;
trigger gt_TransmissionVoidThrasherReturnQ;
trigger gt_TransmissionVoidThrasherDeathQ;
trigger gt_VoidThrasherEncounter1;
trigger gt_VoidThrasherDeath1;
trigger gt_VoidThrasherSpawn2;
trigger gt_VoidThrasherEncounter2;
trigger gt_VoidThrasherDeath2;
trigger gt_VoidThrasherSpawn3;
trigger gt_VoidThrasherEncounter3;
trigger gt_VoidThrasherDeath3;
trigger gt_VoidThrasherSpawn4;
trigger gt_VoidThrasherEncounter4;
trigger gt_VoidThrasherDeath4;
trigger gt_VoidThrasherSpawn5;
trigger gt_VoidThrasherEncounter5;
trigger gt_VoidThrasherDeath5;
trigger gt_VoidThrasherAttacksScreenShake;
trigger gt_VaultTimedIntroQ;
trigger gt_VaultFirstVaultFoundTimedQ;
trigger gt_VaultDiscoveryIntroQ;
trigger gt_VaultFirstVaultFoundDiscoveryQ;
trigger gt_Vault01Activated;
trigger gt_Vault02Activated;
trigger gt_Vault03Activated;
trigger gt_TransmissionAllSolariteCollectedQ;
trigger gt_Vault02CarrierCrash;
trigger gt_ZergP02Wander;
trigger gt_KillLarva;
trigger gt_TeachingDetectorEnemyUnitsQ;
trigger gt_OverseerVisionSharing;
trigger gt_StartOverseerPatrols;
trigger gt_OverseerPatrolWestCorridor;
trigger gt_OverseerPatrolThrasher3;
trigger gt_OverseerPatrolThrasher4;
trigger gt_OverseerPatrolNorthBO;
trigger gt_OverseerPatrolThrasher5;
trigger gt_SporeCrawlerDigIn0102;
trigger gt_SporeCrawlerDigIn03;
trigger gt_SporeCrawlerDigIn04;
trigger gt_SporeCrawlerDigIn05;
trigger gt_Victory;
trigger gt_VictorySequence;
trigger gt_VictoryPrimaryObjectiveCompleted;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_AttackWaveWarningQ;
trigger gt_DarkTemplarWarpsIn;
trigger gt_OrbitalStrikeIssued;
trigger gt_AchievementFinalThrasherSkipped;
trigger gt_MasteryNoThrashersKilled;
trigger gt_AchievementVictorywithonlyProbesAndDarkTemplars;
trigger gt_ObjectiveLaunchBaysCreate;
trigger gt_ObjectiveLaunchBaysComplete;
trigger gt_ObjectiveLaunchBaysUpdate;
trigger gt_ObjectiveWarpConduitCreate;
trigger gt_ObjectiveWarpConduitComplete;
trigger gt_ObjectiveWarpConduitFailed;
trigger gt_ObjectiveArchiveCoresCreate;
trigger gt_ObjectiveArchiveCoresComplete;
trigger gt_ObjectiveArchiveCoresUpdate;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidZergUnburrow;
trigger gt_MidThrasherBehavior;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai34110672") { ai34110672_start(p); }
    if (cai_playerAI[p] == "ai597BE227") { ai597BE227_start(p); }
    if (cai_playerAI[p] == "aiF3C6EA19") { aiF3C6EA19_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai34110672") { ai34110672_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai597BE227") { ai597BE227_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiF3C6EA19") { aiF3C6EA19_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai34110672") { return ai34110672_getCustomData(p); }
    if (cai_playerAI[p] == "ai597BE227") { return ai597BE227_getCustomData(p); }
    if (cai_playerAI[p] == "aiF3C6EA19") { return aiF3C6EA19_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai34110672") { return ai34110672_getLastWave(p); }
    if (cai_playerAI[p] == "ai597BE227") { return ai597BE227_getLastWave(p); }
    if (cai_playerAI[p] == "aiF3C6EA19") { return aiF3C6EA19_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai34110672") { ai34110672_waves_run(p, target); }
    if (cai_playerAI[p] == "ai597BE227") { ai597BE227_waves_run(p, target); }
    if (cai_playerAI[p] == "aiF3C6EA19") { aiF3C6EA19_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai34110672") { ai34110672_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai597BE227") { ai597BE227_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiF3C6EA19") { aiF3C6EA19_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai34110672") { ai34110672_waves_stop(); }
    if (ai == "ai597BE227") { ai597BE227_waves_stop(); }
    if (ai == "aiF3C6EA19") { aiF3C6EA19_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai34110672") { ai34110672_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai597BE227") { ai597BE227_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiF3C6EA19") { aiF3C6EA19_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai34110672") { ai34110672_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai597BE227") { ai597BE227_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiF3C6EA19") { aiF3C6EA19_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai34110672") { return ai34110672_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai597BE227") { return ai597BE227_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiF3C6EA19") { return aiF3C6EA19_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai34110672") { return ai34110672_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai597BE227") { return ai597BE227_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiF3C6EA19") { return aiF3C6EA19_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai34110672") { return ai34110672_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai597BE227") { return ai597BE227_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiF3C6EA19") { return aiF3C6EA19_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai34110672", 3);
    cai_start("ai597BE227", 2);
    cai_start("aiF3C6EA19", 4);
    AICampaignStart(5);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_ShuttleBirth_Trigger = null;
unit auto_gf_ShuttleBirth_lp_shuttle;

void gf_ShuttleBirth (unit lp_shuttle) {
    auto_gf_ShuttleBirth_lp_shuttle = lp_shuttle;

    if (auto_gf_ShuttleBirth_Trigger == null) {
        auto_gf_ShuttleBirth_Trigger = TriggerCreate("auto_gf_ShuttleBirth_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleBirth_Trigger, false, false);
}

bool auto_gf_ShuttleBirth_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shuttle = auto_gf_ShuttleBirth_lp_shuttle;

    // Automatic Variable Declarations
    // Implementation
    UnitSetState(lp_shuttle, c_unitStateInvulnerable, true);
    UnitSetState(lp_shuttle, c_unitStateTargetable, false);
    UnitSetState(lp_shuttle, c_unitStateSelectable, false);
    UnitSetState(lp_shuttle, c_unitStateTooltipable, false);
    UnitSetState(lp_shuttle, c_unitStateCursorable, false);
    UnitSetState(lp_shuttle, c_unitStateStatusBar, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_shuttle), c_animNameDefault, "Birth", 0, 0.0);
    UnitIssueOrder(lp_shuttle, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPropertyFixed(lp_shuttle, c_unitPropBaseMovementSpeed, 6.0);
    Wait(12.0, c_timeGame);
    UnitSetState(lp_shuttle, c_unitStateInvulnerable, false);
    UnitSetState(lp_shuttle, c_unitStateSelectable, true);
    UnitSetState(lp_shuttle, c_unitStateTooltipable, true);
    UnitSetState(lp_shuttle, c_unitStateCursorable, true);
    UnitSetState(lp_shuttle, c_unitStateStatusBar, true);
    libVCMI_gf_SetUnitInfoTextCampaign(lp_shuttle, null, StringExternal("Param/Value/4B1B35F5"), null);
    libNtve_gf_ChangeUnitDamage(lp_shuttle, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    return true;
}

trigger auto_gf_ShuttleMoveController_Trigger = null;
unit auto_gf_ShuttleMoveController_lp_shuttle;
int auto_gf_ShuttleMoveController_lp_shuttleBayIndex;

void gf_ShuttleMoveController (unit lp_shuttle, int lp_shuttleBayIndex) {
    auto_gf_ShuttleMoveController_lp_shuttle = lp_shuttle;
    auto_gf_ShuttleMoveController_lp_shuttleBayIndex = lp_shuttleBayIndex;

    if (auto_gf_ShuttleMoveController_Trigger == null) {
        auto_gf_ShuttleMoveController_Trigger = TriggerCreate("auto_gf_ShuttleMoveController_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleMoveController_Trigger, false, false);
}

bool auto_gf_ShuttleMoveController_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shuttle = auto_gf_ShuttleMoveController_lp_shuttle;
    int lp_shuttleBayIndex = auto_gf_ShuttleMoveController_lp_shuttleBayIndex;

    // Automatic Variable Declarations
    int auto03AA9DB6_val;

    // Implementation
    auto03AA9DB6_val = lp_shuttleBayIndex;
    if (auto03AA9DB6_val == 1) {
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(159), PointFromId(1792), PointFromId(455));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(455), PointFromId(1794), PointFromId(1793));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1793), PointFromId(1795), PointFromId(245));
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
    }
    else if (auto03AA9DB6_val == 2) {
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(307), PointFromId(1797), PointFromId(1796));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1796), PointFromId(1802), PointFromId(1798));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1798), PointFromId(1800), PointFromId(1799));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1799), PointFromId(1801), PointFromId(245));
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
    }
    else if (auto03AA9DB6_val == 3) {
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1645), PointFromId(1806), PointFromId(513));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(513), PointFromId(1807), PointFromId(514));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(514), PointFromId(1808), PointFromId(723));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(723), PointFromId(1809), PointFromId(1803));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1803), PointFromId(1810), PointFromId(1804));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1804), PointFromId(1811), PointFromId(1805));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1805), PointFromId(1812), PointFromId(245));
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
    }
    else if (auto03AA9DB6_val == 4) {
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(314), PointFromId(1814), PointFromId(509));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(509), PointFromId(1815), PointFromId(511));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(511), PointFromId(1816), PointFromId(466));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(466), PointFromId(1817), PointFromId(489));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(489), PointFromId(1818), PointFromId(1813));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1813), PointFromId(1819), PointFromId(245));
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

void gf_ShuttleCurvePath (unit lp_shuttle, point lp_point1, point lp_point2, point lp_point3) {
    // Variable Declarations
    point lv_currentTarget;
    point lv_baseOffsetPoint;
    point lv_modOffsetPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libVCMI_gf_GameIsOver() == true) || (libVCMI_gf_PlayerInCinematicModeCampaign() == true) || (lp_shuttle == null))) {
        return ;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(lp_shuttle), lp_point1) > 1)) {
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), lp_point1), c_orderQueueReplace);
    }

    lv_currentTarget = lp_point1;
    while ((DistanceBetweenPoints(lv_currentTarget, lp_point3) > 1)) {
        lv_baseOffsetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_currentTarget, 1.5, lp_point3);
        lv_modOffsetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_baseOffsetPoint, 0.5, lp_point2);
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), lv_modOffsetPoint), c_orderQueueAddToEnd);
        lv_currentTarget = lv_modOffsetPoint;
    }
    while (!((UnitOrderCount(lp_shuttle) <= 2))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), lp_point3), c_orderQueueReplace);
}

trigger auto_gf_SpawnVoidThrasher_Trigger = null;
int auto_gf_SpawnVoidThrasher_lp_index;

void gf_SpawnVoidThrasher (int lp_index) {
    auto_gf_SpawnVoidThrasher_lp_index = lp_index;

    if (auto_gf_SpawnVoidThrasher_Trigger == null) {
        auto_gf_SpawnVoidThrasher_Trigger = TriggerCreate("auto_gf_SpawnVoidThrasher_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnVoidThrasher_Trigger, false, false);
}

bool auto_gf_SpawnVoidThrasher_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_SpawnVoidThrasher_lp_index;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, "VoidThrasher", c_unitCreateIgnorePlacement, gv_pLAYER_04_THRASHER, gv_voidThrashers.lv_location[lp_index]);
    gv_voidThrashers.lv_thrasher[lp_index] = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_voidThrashers.lv_thrasher[lp_index], true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_voidThrashers.lv_thrasher[lp_index]), "Birth", "Birth", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    gf_HideTerrainWhileVoidThrasherIsAlive(gv_voidThrashers.lv_thrasher[lp_index]);
    return true;
}

trigger auto_gf_VoidThrasherAI_Trigger = null;
int auto_gf_VoidThrasherAI_lp_index;

void gf_VoidThrasherAI (int lp_index) {
    auto_gf_VoidThrasherAI_lp_index = lp_index;

    if (auto_gf_VoidThrasherAI_Trigger == null) {
        auto_gf_VoidThrasherAI_Trigger = TriggerCreate("auto_gf_VoidThrasherAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_VoidThrasherAI_Trigger, false, false);
}

bool auto_gf_VoidThrasherAI_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_VoidThrasherAI_lp_index;

    // Automatic Variable Declarations
    int auto6026DBDB_val;

    // Implementation
    while ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_voidThrashers.lv_thrasher[lp_index]) == true)) {
        UnitIssueOrder(gv_voidThrashers.lv_thrasher[lp_index], OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_warpConduit), c_orderQueueReplace);
        if ((UnitHasBehavior2(gv_voidThrashers.lv_thrasher[lp_index], "ArtanisTemporalField") == true)) {
            Wait(6.0, c_timeAI);
        }
        else {
            Wait(3.0, c_timeAI);
        }
        if ((UnitIsAlive(gv_voidThrashers.lv_thrasher[lp_index]) == true) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            auto6026DBDB_val = lp_index;
            if (auto6026DBDB_val == 1) {
                gf_ThrasherAttackEnemies(lp_index, libLotv_gf_DifficultyValueInt2(1, 1, 1, 3));
            }
            else if (auto6026DBDB_val == 2) {
                gf_ThrasherAttackEnemies(lp_index, libLotv_gf_DifficultyValueInt2(1, 1, 1, 3));
            }
            else if (auto6026DBDB_val == 3) {
                gf_ThrasherAttackEnemies(lp_index, libLotv_gf_DifficultyValueInt2(1, 1, 3, 3));
            }
            else if (auto6026DBDB_val == 4) {
                gf_ThrasherAttackEnemies(lp_index, libLotv_gf_DifficultyValueInt2(1, 1, 3, 3));
            }
            else if (auto6026DBDB_val == 5) {
                gf_ThrasherAttackEnemies(lp_index, libLotv_gf_DifficultyValueInt2(3, 3, 3, 3));
            }
            else {
                gf_ThrasherAttackEnemies(lp_index, libLotv_gf_DifficultyValueInt2(1, 1, 3, 3));
            }
            Wait(7.0, c_timeAI);
        }
        else {
            Wait(3.5, c_timeAI);
        }
    }
    return true;
}

trigger auto_gf_ThrasherAttackEnemies_Trigger = null;
int auto_gf_ThrasherAttackEnemies_lp_index;
int auto_gf_ThrasherAttackEnemies_lp_count;

void gf_ThrasherAttackEnemies (int lp_index, int lp_count) {
    auto_gf_ThrasherAttackEnemies_lp_index = lp_index;
    auto_gf_ThrasherAttackEnemies_lp_count = lp_count;

    if (auto_gf_ThrasherAttackEnemies_Trigger == null) {
        auto_gf_ThrasherAttackEnemies_Trigger = TriggerCreate("auto_gf_ThrasherAttackEnemies_TriggerFunc");
    }

    TriggerExecute(auto_gf_ThrasherAttackEnemies_Trigger, false, false);
}

bool auto_gf_ThrasherAttackEnemies_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_ThrasherAttackEnemies_lp_index;
    int lp_count = auto_gf_ThrasherAttackEnemies_lp_count;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unit lv_targetUnit;
    point lv_primaryTarget;
    point lv_extraTarget;

    // Automatic Variable Declarations
    unitgroup auto0393CDE3_g;
    int auto0393CDE3_u;
    unit auto0393CDE3_var;
    unitgroup autoFE8458B3_g;
    int autoFE8458B3_u;
    unit autoFE8458B3_var;
    unitgroup autoE5C9A77F_g;
    int autoE5C9A77F_u;
    unit autoE5C9A77F_var;
    unitgroup auto0FAC421B_g;
    int auto0FAC421B_u;
    unit auto0FAC421B_var;
    unitgroup auto8966C49D_g;
    int auto8966C49D_u;
    unit auto8966C49D_var;
    unitgroup autoF884058C_g;
    int autoF884058C_u;
    unit autoF884058C_var;
    unitgroup auto18F9EDC0_g;
    int auto18F9EDC0_u;
    unit auto18F9EDC0_var;
    int autoFBBFA960_n;
    int autoFBBFA960_i;
    unitgroup auto20FC29C4_g;
    int auto20FC29C4_u;
    unit auto20FC29C4_var;
    unitgroup auto347604CE_g;
    int auto347604CE_u;
    unit auto347604CE_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    if (((UnitIsAlive(gv_voidThrashers.lv_thrasher[lp_index]) == false) || (libVCMI_gf_GameIsOver() == true))) {
        return true;
    }

    lv_enemyGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0393CDE3_g = lv_enemyGroup;
    auto0393CDE3_u = UnitGroupCount(auto0393CDE3_g, c_unitCountAll);
    for (;; auto0393CDE3_u -= 1) {
        auto0393CDE3_var = UnitGroupUnitFromEnd(auto0393CDE3_g, auto0393CDE3_u);
        if (auto0393CDE3_var == null) { break; }
        if ((UnitGetType(auto0393CDE3_var) == "SOAThermalLanceTargeter")) {
            UnitGroupRemove(lv_enemyGroup, auto0393CDE3_var);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_targetUnit = UnitGroupRandomUnit(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGroupCenterOfGroup(lv_enemyGroup), 4.0), 0), c_unitCountAlive);
    if ((lv_targetUnit == null)) {
        lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), UnitGetPosition(lv_targetUnit)) < 5.0)) {
        lv_primaryTarget = PointWithOffsetPolar(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), 5.0, AngleBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), UnitGetPosition(lv_targetUnit)));
        autoFE8458B3_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
        autoFE8458B3_u = UnitGroupCount(autoFE8458B3_g, c_unitCountAll);
        for (;; autoFE8458B3_u -= 1) {
            autoFE8458B3_var = UnitGroupUnitFromEnd(autoFE8458B3_g, autoFE8458B3_u);
            if (autoFE8458B3_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, autoFE8458B3_var);
        }
    }
    else {
        lv_primaryTarget = UnitGetPosition(lv_targetUnit);
    }
    UnitIssueOrder(gv_voidThrashers.lv_thrasher[lp_index], OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoE", 0), lv_primaryTarget), c_orderQueueReplace);
    autoE5C9A77F_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_primaryTarget, 3.0), 0);
    autoE5C9A77F_u = UnitGroupCount(autoE5C9A77F_g, c_unitCountAll);
    for (;; autoE5C9A77F_u -= 1) {
        autoE5C9A77F_var = UnitGroupUnitFromEnd(autoE5C9A77F_g, autoE5C9A77F_u);
        if (autoE5C9A77F_var == null) { break; }
        UnitGroupRemove(lv_enemyGroup, autoE5C9A77F_var);
    }
    Wait(0.0625, c_timeAI);
    if ((lp_count >= 2) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0) && (UnitIsAlive(gv_voidThrashers.lv_thrasher[lp_index]) == true)) {
        lv_targetUnit = UnitGroupRandomUnit(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), lv_primaryTarget) + 60.0)), 8.0), 0), c_unitCountAlive);
        if ((lv_targetUnit == null)) {
            lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), UnitGetPosition(lv_targetUnit)) < 5.0)) {
            lv_extraTarget = PointWithOffsetPolar(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), 5.0, AngleBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), UnitGetPosition(lv_targetUnit)));
            auto0FAC421B_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
            auto0FAC421B_u = UnitGroupCount(auto0FAC421B_g, c_unitCountAll);
            for (;; auto0FAC421B_u -= 1) {
                auto0FAC421B_var = UnitGroupUnitFromEnd(auto0FAC421B_g, auto0FAC421B_u);
                if (auto0FAC421B_var == null) { break; }
                UnitGroupRemove(lv_enemyGroup, auto0FAC421B_var);
            }
        }
        else {
            lv_extraTarget = UnitGetPosition(lv_targetUnit);
        }
        UnitIssueOrder(gv_voidThrashers.lv_thrasher[lp_index], OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoEExtra", 0), lv_extraTarget), c_orderQueueAddToFront);
        auto8966C49D_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_extraTarget, 3.0), 0);
        auto8966C49D_u = UnitGroupCount(auto8966C49D_g, c_unitCountAll);
        for (;; auto8966C49D_u -= 1) {
            auto8966C49D_var = UnitGroupUnitFromEnd(auto8966C49D_g, auto8966C49D_u);
            if (auto8966C49D_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto8966C49D_var);
        }
    }

    Wait(0.0625, c_timeAI);
    if ((lp_count >= 3) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0) && (UnitIsAlive(gv_voidThrashers.lv_thrasher[lp_index]) == true)) {
        lv_targetUnit = UnitGroupRandomUnit(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), 7.0, (AngleBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), lv_primaryTarget) - 60.0)), 8.0), 0), c_unitCountAlive);
        if ((lv_targetUnit == null)) {
            lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), UnitGetPosition(lv_targetUnit)) < 5.0)) {
            lv_extraTarget = PointWithOffsetPolar(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), 5.0, AngleBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), UnitGetPosition(lv_targetUnit)));
            autoF884058C_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
            autoF884058C_u = UnitGroupCount(autoF884058C_g, c_unitCountAll);
            for (;; autoF884058C_u -= 1) {
                autoF884058C_var = UnitGroupUnitFromEnd(autoF884058C_g, autoF884058C_u);
                if (autoF884058C_var == null) { break; }
                UnitGroupRemove(lv_enemyGroup, autoF884058C_var);
            }
        }
        else {
            lv_extraTarget = UnitGetPosition(lv_targetUnit);
        }
        UnitIssueOrder(gv_voidThrashers.lv_thrasher[lp_index], OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoEExtra", 0), lv_extraTarget), c_orderQueueAddToFront);
        auto18F9EDC0_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_extraTarget, 3.0), 0);
        auto18F9EDC0_u = UnitGroupCount(auto18F9EDC0_g, c_unitCountAll);
        for (;; auto18F9EDC0_u -= 1) {
            auto18F9EDC0_var = UnitGroupUnitFromEnd(auto18F9EDC0_g, auto18F9EDC0_u);
            if (auto18F9EDC0_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto18F9EDC0_var);
        }
    }

    autoFBBFA960_n = (lp_count - 3);
    for (autoFBBFA960_i = 1; autoFBBFA960_i <= autoFBBFA960_n; autoFBBFA960_i += 1) {
        Wait(0.0625, c_timeAI);
        if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0) || (UnitIsAlive(gv_voidThrashers.lv_thrasher[lp_index]) == false))) {
            return true;
        }

        lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
        if ((DistanceBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), UnitGetPosition(lv_targetUnit)) < 5.0)) {
            lv_extraTarget = PointWithOffsetPolar(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), 5.0, AngleBetweenPoints(UnitGetPosition(gv_voidThrashers.lv_thrasher[lp_index]), UnitGetPosition(lv_targetUnit)));
            auto20FC29C4_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
            auto20FC29C4_u = UnitGroupCount(auto20FC29C4_g, c_unitCountAll);
            for (;; auto20FC29C4_u -= 1) {
                auto20FC29C4_var = UnitGroupUnitFromEnd(auto20FC29C4_g, auto20FC29C4_u);
                if (auto20FC29C4_var == null) { break; }
                UnitGroupRemove(lv_enemyGroup, auto20FC29C4_var);
            }
        }
        else {
            lv_extraTarget = UnitGetPosition(lv_targetUnit);
        }
        UnitIssueOrder(gv_voidThrashers.lv_thrasher[lp_index], OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoEExtra", 0), lv_extraTarget), c_orderQueueAddToFront);
        auto347604CE_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_extraTarget, 3.0), 0);
        auto347604CE_u = UnitGroupCount(auto347604CE_g, c_unitCountAll);
        for (;; auto347604CE_u -= 1) {
            auto347604CE_var = UnitGroupUnitFromEnd(auto347604CE_g, auto347604CE_u);
            if (auto347604CE_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto347604CE_var);
        }
    }
    return true;
}

trigger auto_gf_CreateNydusWormAtPoint_Trigger = null;
point auto_gf_CreateNydusWormAtPoint_lp_nydusSpawnPoint;
region auto_gf_CreateNydusWormAtPoint_lp_cargoAttackTarget;

void gf_CreateNydusWormAtPoint (point lp_nydusSpawnPoint, region lp_cargoAttackTarget) {
    auto_gf_CreateNydusWormAtPoint_lp_nydusSpawnPoint = lp_nydusSpawnPoint;
    auto_gf_CreateNydusWormAtPoint_lp_cargoAttackTarget = lp_cargoAttackTarget;

    if (auto_gf_CreateNydusWormAtPoint_Trigger == null) {
        auto_gf_CreateNydusWormAtPoint_Trigger = TriggerCreate("auto_gf_CreateNydusWormAtPoint_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateNydusWormAtPoint_Trigger, false, false);
}

bool auto_gf_CreateNydusWormAtPoint_TriggerFunc (bool testConds, bool runActions) {
    point lp_nydusSpawnPoint = auto_gf_CreateNydusWormAtPoint_lp_nydusSpawnPoint;
    region lp_cargoAttackTarget = auto_gf_CreateNydusWormAtPoint_lp_cargoAttackTarget;

    // Variable Declarations
    unitgroup lv_attackGroup;
    unit lv_nydusWorm;
    timer lv_spawnTimer;
    unitgroup lv_playerUnits;
    unitgroup lv_zerglingGroup;
    int lv_zerglingCap;
    unitgroup lv_hydraliskGroup;
    int lv_hydraliskCap;
    unitgroup lv_roachGroup;
    int lv_roachCap;

    // Automatic Variable Declarations
    unitgroup auto65C75468_g;
    int auto65C75468_u;
    unit auto65C75468_var;
    unitgroup auto9E89C4B5_g;
    int auto9E89C4B5_u;
    unit auto9E89C4B5_var;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_spawnTimer = TimerCreate();
    lv_playerUnits = UnitGroupEmpty();
    lv_zerglingGroup = UnitGroupEmpty();
    lv_hydraliskGroup = UnitGroupEmpty();
    lv_roachGroup = UnitGroupEmpty();

    // Implementation
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_02_DOMINION, lp_nydusSpawnPoint);
    lv_nydusWorm = UnitLastCreated();
    SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), lp_nydusSpawnPoint, 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.866, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault);
    lv_zerglingCap = libLotv_gf_DifficultyValueInt2(3, 3, 5, 6);
    lv_hydraliskCap = libLotv_gf_DifficultyValueInt2(1, 1, 1, 2);
    lv_roachCap = libLotv_gf_DifficultyValueInt2(0, 0, 1, 1);
    while ((libVCMI_gf_GameIsOver() == false) && ((UnitIsAlive(lv_nydusWorm) == true) || (libNtve_gf_UnitGroupIsDead(lv_attackGroup) == false))) {
        if ((TimerGetRemaining(lv_spawnTimer) == 0.0) && (UnitIsAlive(lv_nydusWorm) == true)) {
            if ((UnitGroupCount(lv_zerglingGroup, c_unitCountAlive) < lv_zerglingCap)) {
                UnitCargoCreate(lv_nydusWorm, "Zergling", MinI((lv_zerglingCap - UnitGroupCount(lv_zerglingGroup, c_unitCountAlive)), 3));
                UnitGroupAddUnitGroup(lv_zerglingGroup, UnitCargoLastCreatedGroup());
                UnitGroupAddUnitGroup(lv_attackGroup, UnitCargoLastCreatedGroup());
            }

            if ((UnitGroupCount(lv_hydraliskGroup, c_unitCountAlive) < lv_hydraliskCap)) {
                UnitCargoCreate(lv_nydusWorm, "Hydralisk", (lv_hydraliskCap - UnitGroupCount(lv_hydraliskGroup, c_unitCountAlive)));
                UnitGroupAddUnitGroup(lv_hydraliskGroup, UnitCargoLastCreatedGroup());
                UnitGroupAddUnitGroup(lv_attackGroup, UnitCargoLastCreatedGroup());
            }

            if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (UnitGroupCount(lv_roachGroup, c_unitCountAlive) < lv_roachCap)) {
                UnitCargoCreate(lv_nydusWorm, "Roach", (lv_roachCap - UnitGroupCount(lv_roachGroup, c_unitCountAlive)));
                UnitGroupAddUnitGroup(lv_roachGroup, UnitCargoLastCreatedGroup());
                UnitGroupAddUnitGroup(lv_attackGroup, UnitCargoLastCreatedGroup());
            }

            UnitIssueOrder(lv_nydusWorm, Order(AbilityCommand("NydusWormTransport", 1)), c_orderQueueReplace);
            TimerStart(lv_spawnTimer, libLotv_gf_DifficultyValueFixed2(12.0, 12.0, 8.0, 8.0), false, c_timeAI);
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_attackGroup) == false)) {
            lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, lp_cargoAttackTarget, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0)) {
                auto9E89C4B5_g = lv_attackGroup;
                auto9E89C4B5_u = UnitGroupCount(auto9E89C4B5_g, c_unitCountAll);
                for (;; auto9E89C4B5_u -= 1) {
                    auto9E89C4B5_var = UnitGroupUnitFromEnd(auto9E89C4B5_g, auto9E89C4B5_u);
                    if (auto9E89C4B5_var == null) { break; }
                    UnitIssueOrder(auto9E89C4B5_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(auto9E89C4B5_var)))), c_orderQueueReplace);
                }
            }
            else {
                auto65C75468_g = lv_attackGroup;
                auto65C75468_u = UnitGroupCount(auto65C75468_g, c_unitCountAll);
                for (;; auto65C75468_u -= 1) {
                    auto65C75468_var = UnitGroupUnitFromEnd(auto65C75468_g, auto65C75468_u);
                    if (auto65C75468_var == null) { break; }
                    if ((UnitOrderCount(auto65C75468_var) == 0)) {
                        UnitIssueOrder(auto65C75468_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_cargoAttackTarget)), c_orderQueueReplace);
                    }

                }
            }
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_HideTerrainWhileVoidThrasherIsAlive_Trigger = null;
unit auto_gf_HideTerrainWhileVoidThrasherIsAlive_lp_voidThrasher;

void gf_HideTerrainWhileVoidThrasherIsAlive (unit lp_voidThrasher) {
    auto_gf_HideTerrainWhileVoidThrasherIsAlive_lp_voidThrasher = lp_voidThrasher;

    if (auto_gf_HideTerrainWhileVoidThrasherIsAlive_Trigger == null) {
        auto_gf_HideTerrainWhileVoidThrasherIsAlive_Trigger = TriggerCreate("auto_gf_HideTerrainWhileVoidThrasherIsAlive_TriggerFunc");
    }

    TriggerExecute(auto_gf_HideTerrainWhileVoidThrasherIsAlive_Trigger, false, false);
}

bool auto_gf_HideTerrainWhileVoidThrasherIsAlive_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidThrasher = auto_gf_HideTerrainWhileVoidThrasherIsAlive_lp_voidThrasher;

    // Variable Declarations
    bool lv_terrainHidden;
    point lv_voidThrasherPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    lv_voidThrasherPoint = UnitGetPosition(lp_voidThrasher);
    RegionSetCenter(RegionFromId(35), lv_voidThrasherPoint);
    TerrainShowRegion(gv_voidThrasherTerrainHideRegion, false);
    lv_terrainHidden = true;
    while ((UnitIsAlive(lp_voidThrasher) == true)) {
        if ((libNtve_gf_UnitIsHidden(lp_voidThrasher) == true)) {
            if ((lv_terrainHidden == true)) {
                RegionSetCenter(RegionFromId(35), lv_voidThrasherPoint);
                TerrainShowRegion(gv_voidThrasherTerrainHideRegion, true);
                lv_terrainHidden = false;
            }

        }
        else {
            if ((lv_terrainHidden == false)) {
                RegionSetCenter(RegionFromId(35), lv_voidThrasherPoint);
                TerrainShowRegion(gv_voidThrasherTerrainHideRegion, false);
                lv_terrainHidden = true;
            }

        }
        Wait(1.0, c_timeGame);
    }
    RegionSetCenter(RegionFromId(35), lv_voidThrasherPoint);
    TerrainShowRegion(gv_voidThrasherTerrainHideRegion, true);
    return true;
}

trigger auto_gf_OrderCrawlertoRoot_Trigger = null;
point auto_gf_OrderCrawlertoRoot_lp_targetPoint;
unit auto_gf_OrderCrawlertoRoot_lp_crawler;

void gf_OrderCrawlertoRoot (point lp_targetPoint, unit lp_crawler) {
    auto_gf_OrderCrawlertoRoot_lp_targetPoint = lp_targetPoint;
    auto_gf_OrderCrawlertoRoot_lp_crawler = lp_crawler;

    if (auto_gf_OrderCrawlertoRoot_Trigger == null) {
        auto_gf_OrderCrawlertoRoot_Trigger = TriggerCreate("auto_gf_OrderCrawlertoRoot_TriggerFunc");
    }

    TriggerExecute(auto_gf_OrderCrawlertoRoot_Trigger, false, false);
}

bool auto_gf_OrderCrawlertoRoot_TriggerFunc (bool testConds, bool runActions) {
    point lp_targetPoint = auto_gf_OrderCrawlertoRoot_lp_targetPoint;
    unit lp_crawler = auto_gf_OrderCrawlertoRoot_lp_crawler;

    // Variable Declarations
    abilcmd lv_rootCommand;
    string lv_crawlerUnitType;
    fixed lv_crawlerRadius;
    point lv_currentTargetPoint;

    // Automatic Variable Declarations
    string autoA70A4C8D_val;

    // Variable Initialization

    // Implementation
    if (((UnitIsAlive(lp_crawler) == false) || (lp_targetPoint == null))) {
        return true;
    }
    else {
        AISetUnitScriptControlled(lp_crawler, true);
    }
    autoA70A4C8D_val = UnitGetType(lp_crawler);
    if (autoA70A4C8D_val == "SpineCrawlerUprooted") {
        lv_rootCommand = AbilityCommand("SpineCrawlerRoot", 0);
        lv_crawlerUnitType = "SpineCrawler";
        lv_crawlerRadius = 1.0;
    }
    else if (autoA70A4C8D_val == "SporeCrawlerUprooted") {
        lv_rootCommand = AbilityCommand("SporeCrawlerRoot", 0);
        lv_crawlerUnitType = "SporeCrawler";
        lv_crawlerRadius = 1.0;
    }
    else {
        return true;
    }
    while (true) {
        if (((UnitIsAlive(lp_crawler) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((UnitGetType(lp_crawler) == lv_crawlerUnitType)) {
            AISetUnitScriptControlled(lp_crawler, false);
            return true;
        }

        lv_currentTargetPoint = gf_GetValidPoint(lv_crawlerRadius, lp_targetPoint);
        if ((lv_currentTargetPoint != null)) {
            UnitIssueOrder(lp_crawler, OrderTargetingPoint(lv_rootCommand, lv_currentTargetPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_crawler, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

bool gf_PointisValid (point lp_point, fixed lp_radius) {
    // Variable Declarations
    fixed lv_radiusIncrement;
    int lv_rotationIncrement;
    point lv_testPoint;

    // Automatic Variable Declarations
    const fixed auto2FC9A5AD_ae = 0.2;
    const fixed auto2FC9A5AD_ai = -1.0;
    const int auto9C854DFF_ae = 7;
    const int auto9C854DFF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_testPoint = lp_point;
    if (((CreepIsPresent(lv_testPoint) == false) || (PointPathingPassable(lv_testPoint) == false) || (PathingType(lv_testPoint) == c_pathingBuilding) || (UnitGroupCount(UnitGroup("VoidThrasher", c_playerAny, RegionCircle(lv_testPoint, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(lv_testPoint, lp_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
        return false;
    }

    lv_radiusIncrement = lp_radius;
    for ( ; ( (auto2FC9A5AD_ai >= 0 && lv_radiusIncrement <= auto2FC9A5AD_ae) || (auto2FC9A5AD_ai < 0 && lv_radiusIncrement >= auto2FC9A5AD_ae) ) ; lv_radiusIncrement += auto2FC9A5AD_ai ) {
        lv_rotationIncrement = 0;
        for ( ; ( (auto9C854DFF_ai >= 0 && lv_rotationIncrement <= auto9C854DFF_ae) || (auto9C854DFF_ai < 0 && lv_rotationIncrement >= auto9C854DFF_ae) ) ; lv_rotationIncrement += auto9C854DFF_ai ) {
            if ((ModI(lv_rotationIncrement, 2) == 0)) {
                lv_testPoint = PointWithOffsetPolar(lp_point, (lv_radiusIncrement - 0.1), (lv_rotationIncrement*45));
            }
            else {
                lv_testPoint = PointWithOffsetPolar(lp_point, ((lv_radiusIncrement * 1.414) - 0.1), (lv_rotationIncrement*45));
            }
            if (((CreepIsPresent(lv_testPoint) == false) || (PointPathingPassable(lv_testPoint) == false) || (PathingType(lv_testPoint) == c_pathingBuilding) || (UnitGroupCount(UnitGroup("VoidThrasher", c_playerAny, RegionCircle(lv_testPoint, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(lv_testPoint, lp_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
                return false;
            }

        }
    }
    return true;
}

point gf_GetValidPoint (fixed lp_radius, point lp_point) {
    // Variable Declarations
    int lv_rotationIncrement;
    int lv_radiusIncrement;
    point lv_testPoint;

    // Automatic Variable Declarations
    const int autoA061BB51_ae = 8;
    const int autoA061BB51_ai = 1;
    const int autoDEFCB01D_ae = 7;
    const int autoDEFCB01D_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gf_PointisValid(lp_point, lp_radius) == true)) {
        return lp_point;
    }

    lv_radiusIncrement = 1;
    for ( ; ( (autoA061BB51_ai >= 0 && lv_radiusIncrement <= autoA061BB51_ae) || (autoA061BB51_ai < 0 && lv_radiusIncrement >= autoA061BB51_ae) ) ; lv_radiusIncrement += autoA061BB51_ai ) {
        lv_rotationIncrement = 0;
        for ( ; ( (autoDEFCB01D_ai >= 0 && lv_rotationIncrement <= autoDEFCB01D_ae) || (autoDEFCB01D_ai < 0 && lv_rotationIncrement >= autoDEFCB01D_ae) ) ; lv_rotationIncrement += autoDEFCB01D_ai ) {
            if ((ModI(lv_rotationIncrement, 2) == 0)) {
                lv_testPoint = PointWithOffsetPolar(lp_point, lv_radiusIncrement, (lv_rotationIncrement*45));
            }
            else {
                lv_testPoint = PointWithOffsetPolar(lp_point, (lv_radiusIncrement*1.414), (lv_rotationIncrement*45));
            }
            if ((gf_PointisValid(lv_testPoint, lp_radius) == true)) {
                return lv_testPoint;
            }

        }
    }
    return null;
}

trigger auto_gf_AttackWavePing_Trigger = null;
unitgroup auto_gf_AttackWavePing_lp_waveGroup;

void gf_AttackWavePing (unitgroup lp_waveGroup) {
    auto_gf_AttackWavePing_lp_waveGroup = lp_waveGroup;

    if (auto_gf_AttackWavePing_Trigger == null) {
        auto_gf_AttackWavePing_Trigger = TriggerCreate("auto_gf_AttackWavePing_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackWavePing_Trigger, false, false);
}

bool auto_gf_AttackWavePing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_waveGroup = auto_gf_AttackWavePing_lp_waveGroup;

    // Variable Declarations
    int lv_wavePing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_wavePing = c_invalidPingId;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGroupCenterOfGroup(lp_waveGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_wavePing = PingLastCreated();
    PingSetTooltip(lv_wavePing, StringExternal("Param/Value/F4A31CBD"));
    PingSetScale(PingLastCreated(), 0.8);
    while ((libNtve_gf_UnitGroupIsDead(lp_waveGroup) == false)) {
        PingSetPosition(lv_wavePing, UnitGroupCenterOfGroup(lp_waveGroup));
        Wait(0.25, c_timeAI);
    }
    PingDestroy(lv_wavePing);
    return true;
}

trigger auto_gf_ActivateCarrierCrashinRegion_Trigger = null;
region auto_gf_ActivateCarrierCrashinRegion_lp_region;

void gf_ActivateCarrierCrashinRegion (region lp_region) {
    auto_gf_ActivateCarrierCrashinRegion_lp_region = lp_region;

    if (auto_gf_ActivateCarrierCrashinRegion_Trigger == null) {
        auto_gf_ActivateCarrierCrashinRegion_Trigger = TriggerCreate("auto_gf_ActivateCarrierCrashinRegion_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateCarrierCrashinRegion_Trigger, false, false);
}

bool auto_gf_ActivateCarrierCrashinRegion_TriggerFunc (bool testConds, bool runActions) {
    region lp_region = auto_gf_ActivateCarrierCrashinRegion_lp_region;

    // Automatic Variable Declarations
    region auto96C3D391_val;

    // Implementation
    auto96C3D391_val = lp_region;
    if (auto96C3D391_val == RegionFromId(42)) {
        ActorSend(ActorFromDoodad(DoodadFromId(302)), "Signal DoodadDeath");
    }
    else if (auto96C3D391_val == RegionFromId(43)) {
        ActorSend(ActorFromDoodad(DoodadFromId(1352)), "Signal DoodadDeath");
    }
    else {
        return true;
    }
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(lp_region), 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        SoundPlayForPlayer(SoundLink("Shak1_sfx_CarrierIncoming", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    Wait(2.0, c_timeGame);
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(lp_region), 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 1.0, 3.0);
        SoundPlayForPlayer(SoundLink("Shak1_sfx_CarrierCrashExplo", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    return true;
}

trigger auto_gf_CreateUnitforWarpConduit_Trigger = null;
string auto_gf_CreateUnitforWarpConduit_lp_unitType;
point auto_gf_CreateUnitforWarpConduit_lp_createPoint;

void gf_CreateUnitforWarpConduit (string lp_unitType, point lp_createPoint) {
    auto_gf_CreateUnitforWarpConduit_lp_unitType = lp_unitType;
    auto_gf_CreateUnitforWarpConduit_lp_createPoint = lp_createPoint;

    if (auto_gf_CreateUnitforWarpConduit_Trigger == null) {
        auto_gf_CreateUnitforWarpConduit_Trigger = TriggerCreate("auto_gf_CreateUnitforWarpConduit_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateUnitforWarpConduit_Trigger, false, false);
}

bool auto_gf_CreateUnitforWarpConduit_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_gf_CreateUnitforWarpConduit_lp_unitType;
    point lp_createPoint = auto_gf_CreateUnitforWarpConduit_lp_createPoint;

    // Variable Declarations
    unit lv_warpOutUnit;
    int lv_safetyCounter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, lp_unitType, 0, gv_pLAYER_05_PROTOSS_ALLY, lp_createPoint, UnitGetPosition(gv_warpConduit));
    lv_warpOutUnit = UnitLastCreated();
    UnitSetState(lv_warpOutUnit, c_unitStateSelectable, false);
    UnitSetState(lv_warpOutUnit, c_unitStateTargetable, false);
    UnitSetState(lv_warpOutUnit, c_unitStateStatusBar, false);
    UnitSetState(lv_warpOutUnit, c_unitStateCursorable, false);
    UnitSetState(lv_warpOutUnit, c_unitStateInvulnerable, true);
    libNtve_gf_ShareVisionofUnit(lv_warpOutUnit, true, gv_pLAYER_01_USER);
    if (((PointGetX(UnitGetPosition(lv_warpOutUnit)) > PointGetX(UnitGetPosition(gv_warpConduit))) || (PointGetY(UnitGetPosition(lv_warpOutUnit)) > PointGetY(UnitGetPosition(gv_warpConduit))))) {
        while (true) {
            if ((UnitIsAlive(lv_warpOutUnit) == false)) {
                return true;
            }

            if ((DistanceBetweenPoints(UnitGetPosition(lv_warpOutUnit), PointFromId(233)) > 2.0)) {
                UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_warpConduit)), c_orderQueueReplace);
                break;
            }
            Wait(0.5, c_timeGame);
        }
    }

    while (true) {
        if ((UnitIsAlive(lv_warpOutUnit) == false)) {
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_warpOutUnit), UnitGetPosition(gv_warpConduit)) > 11.5)) {
            UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_warpConduit)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_warpConduit, OrderTargetingUnit(AbilityCommand("WarpConduitWarpAwayImminent", 0), lv_warpOutUnit), c_orderQueueReplace);
            break;
        }
        Wait(0.5, c_timeGame);
    }
    while (true) {
        if ((UnitIsAlive(lv_warpOutUnit) == false)) {
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_warpOutUnit), UnitGetPosition(gv_warpConduit)) > 5.5)) {
            UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_warpConduit)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_warpConduit, OrderTargetingUnit(AbilityCommand("WarpConduitWarpAwayImminent2", 0), lv_warpOutUnit), c_orderQueueReplace);
            break;
        }
        Wait(0.5, c_timeGame);
    }
    while (true) {
        if ((UnitIsAlive(lv_warpOutUnit) == false)) {
            return true;
        }

        if ((lv_safetyCounter >= 5)) {
            UnitRemove(lv_warpOutUnit);
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_warpOutUnit), UnitGetPosition(gv_warpConduit)) > 2.5)) {
            UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_warpConduit)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_warpConduit, OrderTargetingUnit(AbilityCommand("WarpConduitWarpAway", 0), lv_warpOutUnit), c_orderQueueReplace);
            lv_safetyCounter += 1;
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PShakuras01");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libVoiC_gf_EnableCampaignTechUnit(true, "DarkTemplar", gv_pLAYER_01_USER);
    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("SpawnLarva", 0), false);
    if ((libVoiC_gf_MissionStatusCheck("PKorhal01", libVoiC_ge_MissionStatus_Completed) == false)) {
        libVoiC_gf_EnableDisableSpearofAdunAbility(false, "GPTier2Power1");
    }

    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION, "HaveBanelingNest", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION, "HaveSpawningPool", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION, "HaveEvolutionChamber", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION, "HaveBanelingNest2", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION, "HaveHydraliskDen", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION, "HaveInfestationPit", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION, "HaveUltraliskCavern", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION, "HaveLairAndEvolutionChamber", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION2, "HaveBanelingNest", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION2, "HaveSpawningPool", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION2, "HaveEvolutionChamber", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION2, "HaveRoachWarrenOrImpalerDen", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION2, "HaveHydraliskDen", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION2, "HaveInfestationPit", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION2, "HaveUltraliskCavern", false);
    TechTreeSpecificRequirementEnable(gv_pLAYER_02_DOMINION2, "HaveLairAndEvolutionChamber", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_THRASHER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_PROTOSS_ALLY, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_04_THRASHER, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_05_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_04_THRASHER, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION2, gv_pLAYER_05_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_04_THRASHER, gv_pLAYER_05_PROTOSS_ALLY, libNtve_ge_AllianceSetting_Enemy);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_DOMINION2);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_PROTOSS_ALLY, "HeroicShieldCleanUp", 1);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION, 1, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION2, 1, true);
    PlayerSetColorIndex(gv_pLAYER_04_THRASHER, 1, true);
    PlayerSetColorIndex(gv_pLAYER_05_PROTOSS_ALLY, 3, true);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateFoodIgnored, true);
    PlayerSetState(gv_pLAYER_02_DOMINION2, c_playerStateFoodIgnored, true);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    unitgroup auto72653A4A_g;
    int auto72653A4A_u;
    unit auto72653A4A_var;
    const int autoCC8A3298_ae = 4;
    int autoCC8A3298_var;
    const int autoFEF278C1_ae = 4;
    int autoFEF278C1_var;
    unitgroup auto88E24685_g;
    int auto88E24685_u;
    unit auto88E24685_var;
    unitgroup auto98A67803_g;
    int auto98A67803_u;
    unit auto98A67803_var;
    const int auto63492BC7_ae = 3;
    const int auto63492BC7_ai = 1;
    unitgroup autoE71202A8_g;
    int autoE71202A8_u;
    unit autoE71202A8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    libNtve_gf_MakeUnitInvulnerable(gv_warpConduit, true);
    libNtve_gf_SendActorMessageToUnit(gv_warpConduit, "Signal Off");
    auto72653A4A_g = UnitGroup(null, c_playerAny, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto72653A4A_u = UnitGroupCount(auto72653A4A_g, c_unitCountAll);
    for (;; auto72653A4A_u -= 1) {
        auto72653A4A_var = UnitGroupUnitFromEnd(auto72653A4A_g, auto72653A4A_u);
        if (auto72653A4A_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto72653A4A_var, true);
    }
    TriggerExecute(gt_ZergAttackConduitLocation, true, false);
    TriggerExecute(gt_DarkTemplarSafety, true, false);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_warpConduit, null, StringExternal("Param/Value/E046E8C2"), null);
    gv_voidThrashers.lv_thrasher[1] = UnitFromId(324);
    UnitSetState(gv_voidThrashers.lv_thrasher[1], c_unitStateHidden, true);
    UnitSetState(gv_voidThrashers.lv_thrasher[1], c_unitStateInvulnerable, true);
    gv_voidThrashers.lv_location[1] = PointFromId(54);
    gv_voidThrashers.lv_location[2] = PointFromId(181);
    gv_voidThrashers.lv_location[3] = PointFromId(182);
    gv_voidThrashers.lv_location[4] = PointFromId(55);
    gv_voidThrashers.lv_location[5] = PointFromId(124);
    gv_launchBay[1] = UnitFromId(405);
    gv_launchBay[2] = UnitFromId(497);
    gv_launchBay[3] = UnitFromId(401);
    gv_launchBay[4] = UnitFromId(98);
    gv_launchBayLocations[1] = PointFromId(159);
    gv_launchBayLocations[2] = PointFromId(307);
    gv_launchBayLocations[3] = PointFromId(1645);
    gv_launchBayLocations[4] = PointFromId(314);
    gv_zergConstrictions[1] = UnitFromId(453);
    gv_zergConstrictions[2] = UnitFromId(315);
    gv_zergConstrictions[3] = UnitFromId(501);
    gv_zergConstrictions[4] = UnitFromId(444);
    autoCC8A3298_var = 1;
    for ( ; autoCC8A3298_var <= autoCC8A3298_ae; autoCC8A3298_var += 1 ) {
        libNtve_gf_SendActorMessageToUnit(gv_launchBay[autoCC8A3298_var], "SetMinimapVisibility");
        libNtve_gf_SendActorMessageToUnit(gv_zergConstrictions[autoCC8A3298_var], "SetMinimapVisibility");
    }
    autoFEF278C1_var = 1;
    for ( ; autoFEF278C1_var <= autoFEF278C1_ae; autoFEF278C1_var += 1 ) {
        UnitSetState(gv_launchBay[autoFEF278C1_var], c_unitStateSelectable, false);
        UnitSetState(gv_launchBay[autoFEF278C1_var], c_unitStateTargetable, false);
        UnitSetState(gv_launchBay[autoFEF278C1_var], c_unitStateStatusBar, false);
        UnitSetState(gv_launchBay[autoFEF278C1_var], c_unitStateCursorable, false);
        UnitSetState(gv_launchBay[autoFEF278C1_var], c_unitStateInvulnerable, true);
    }
    auto88E24685_g = UnitGroup("CreepPodsUnit", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto88E24685_u = UnitGroupCount(auto88E24685_g, c_unitCountAll);
    for (;; auto88E24685_u -= 1) {
        auto88E24685_var = UnitGroupUnitFromEnd(auto88E24685_g, auto88E24685_u);
        if (auto88E24685_var == null) { break; }
        UnitBehaviorAddPlayer(auto88E24685_var, "Harmless", gv_pLAYER_02_DOMINION, 1);
    }
    auto98A67803_g = UnitGroup("Overseer", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto98A67803_u = UnitGroupCount(auto98A67803_g, c_unitCountAll);
    for (;; auto98A67803_u -= 1) {
        auto98A67803_var = UnitGroupUnitFromEnd(auto98A67803_g, auto98A67803_u);
        if (auto98A67803_var == null) { break; }
        UnitIssueOrder(auto98A67803_var, Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueReplace);
        UnitIssueOrder(auto98A67803_var, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    gv_vaultBeacon[1] = UnitFromId(755);
    gv_vaultBeacon[2] = UnitFromId(756);
    gv_vaultBeacon[3] = UnitFromId(757);
    lv_index = 1;
    for ( ; ( (auto63492BC7_ai >= 0 && lv_index <= auto63492BC7_ae) || (auto63492BC7_ai < 0 && lv_index >= auto63492BC7_ae) ) ; lv_index += auto63492BC7_ai ) {
        libVCMI_gf_SetUnitInfoTextCampaign(gv_vaultBeacon[lv_index], StringExternal("Param/Value/28144B4A"), StringExternal("Param/Value/C1FA5E8C"), null);
    }
    autoE71202A8_g = UnitGroup("ArchiveShakurasSealed", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE71202A8_u = UnitGroupCount(autoE71202A8_g, c_unitCountAll);
    for (;; autoE71202A8_u -= 1) {
        autoE71202A8_var = UnitGroupUnitFromEnd(autoE71202A8_g, autoE71202A8_u);
        if (autoE71202A8_var == null) { break; }
        UnitSetState(autoE71202A8_var, c_unitStateTargetable, false);
        UnitSetState(autoE71202A8_var, c_unitStateStatusBar, false);
        UnitSetState(autoE71202A8_var, c_unitStateCursorable, false);
        libNtve_gf_SendActorMessageToUnit(autoE71202A8_var, "SetMinimapVisibility");
    }
    UnitBehaviorAdd(UnitFromId(485), "KhaydarinBeamAlternate", UnitFromId(485), 1);
    UnitBehaviorAdd(UnitFromId(640), "KhaydarinBeamAlternate", UnitFromId(640), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PShakuras01_Music_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(13), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(33), RegionFromId(33), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(34), RegionFromId(34), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(36), RegionFromId(36), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(19), RegionFromId(19), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(14), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(30), RegionFromId(15), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(32), RegionFromId(17), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(20), RegionFromId(20), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(21), RegionFromId(21), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(16), RegionFromId(29), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(12), RegionFromId(12), gv_pLAYER_01_USER);
    TriggerExecute(gt_Vault02CarrierCrash, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4F2F5510_ae = 4;
    int auto4F2F5510_var;
    playergroup auto0E525D99_g;
    int auto0E525D99_var;
    playergroup auto59DB96E9_g;
    int auto59DB96E9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_warpConduitMaxLife = libLotv_gf_DifficultyValueInt2(9000, 9000, 6000, 5000);
    UnitSetPropertyFixed(gv_warpConduit, c_unitPropLifeMax, gv_warpConduitMaxLife);
    UnitSetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, 100.0);
    auto4F2F5510_var = 1;
    for ( ; auto4F2F5510_var <= auto4F2F5510_ae; auto4F2F5510_var += 1 ) {
        UnitSetPropertyFixed(gv_zergConstrictions[auto4F2F5510_var], c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(750, 750, 1500, 2000));
        UnitSetPropertyFixed(gv_zergConstrictions[auto4F2F5510_var], c_unitPropLifePercent, 100.0);
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        auto0E525D99_g = gv_enemyPlayerGroup;
        auto0E525D99_var = -1;
        while (true) {
            auto0E525D99_var = PlayerGroupNextPlayer(auto0E525D99_g, auto0E525D99_var);
            if (auto0E525D99_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto0E525D99_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(auto0E525D99_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(auto0E525D99_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto0E525D99_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto0E525D99_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto0E525D99_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto0E525D99_var, "ZergFlyerArmorsLevel1", 1);
        }
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        auto59DB96E9_g = gv_enemyPlayerGroup;
        auto59DB96E9_var = -1;
        while (true) {
            auto59DB96E9_var = PlayerGroupNextPlayer(auto59DB96E9_g, auto59DB96E9_var);
            if (auto59DB96E9_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto59DB96E9_var, "zerglingattackspeed", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("ChronoBoost");
    libVCMI_gf_AddMissionTipCampaign("OrbitalStrike");
    libVCMI_gf_AddMissionTipCampaign("ProxyPylon");
    libVCMI_gf_AddMissionTipCampaign("PhotonCannon");
    libVCMI_gf_AddMissionTipCampaign("ShieldBattery");
    libVCMI_gf_AddMissionTipCampaign("WarpGate");
    libVCMI_gf_AddMissionTipCampaign("DarkTemplar");
    libVCMI_gf_EnableDisableNeedPylonInfo(true);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("QueenClassic", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SpineCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("SporeCrawler", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("DarkTemplar", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("KhaydarinMonolith", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Guardian", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Missiles
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherMissiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missileUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "KaiserWormScourgeMissile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missileUnit = EventUnit();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "KaiserWormScourgeMissile", UnitGetPosition(lv_missileUnit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, UnitGetFacing(lv_missileUnit));
    libHots_gf_StorePingForUnit(lv_missileUnit, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), lv_missileUnit);
    PingSetScale(PingLastCreated(), 0.075);
    while (!((UnitIsAlive(EventUnit()) == false))) {
        Wait(0.0625, c_timeGame);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(lv_missileUnit, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherMissiles_Init () {
    gt_VoidThrasherMissiles = TriggerCreate("gt_VoidThrasherMissiles_Func");
    TriggerAddEventUnitRegion(gt_VoidThrasherMissiles, null, RegionPlayableMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto759BD870_ae = 4;
    int auto759BD870_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BCF92819"), null, PointFromId(1));
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(28), true, false);
    TimerStart(gv_bonusObjectiveRevealTimer, 300.0, false, c_timeAI);
    TriggerExecute(gt_StartOverseerPatrols, true, false);
    TriggerEnable(gt_DefeatBaseDead, true);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveLaunchBaysCreate, true, true);
    auto759BD870_var = 1;
    for ( ; auto759BD870_var <= auto759BD870_ae; auto759BD870_var += 1 ) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_launchBay[auto759BD870_var]), 5.0), 5.0, false);
        if ((UnitGroupCount(UnitGroup("ConstrictionDisabler10x10", c_playerAny, RegionCircle(UnitGetPosition(gv_launchBay[auto759BD870_var]), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(gv_launchBay[auto759BD870_var]), StringExternal("Param/Value/D7A40AA2"));
            gv_launchBayPing[auto759BD870_var] = PingLastCreated();
            libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/CA6B9655"), PointWithOffsetPolar(gv_launchBayLocations[auto759BD870_var], 0.5, 90.0));
            gv_launchBayReticules[auto759BD870_var] = libNtve_gf_ActorLastCreated();
            gv_launchBayTextTags[auto759BD870_var] = TextTagLastCreated();
            TextTagSetPosition(TextTagLastCreated(), PointWithOffsetPolar(gv_launchBayLocations[auto759BD870_var], 0.5, 90.0), 0.0);
        }

    }
    TriggerQueueExit();
    Wait(6.0, c_timeAI);
    TriggerExecute(gt_DarkTemplarIntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto29A90E24_g;
    int auto29A90E24_u;
    unit auto29A90E24_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(827), 5.0, Color(0.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6AEDB61A"), null, PointFromId(827));
    auto29A90E24_g = UnitGroup("DarkTemplar", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto29A90E24_u = UnitGroupCount(auto29A90E24_g, c_unitCountAll);
    for (;; auto29A90E24_u -= 1) {
        auto29A90E24_var = UnitGroupUnitFromEnd(auto29A90E24_g, auto29A90E24_u);
        if (auto29A90E24_var == null) { break; }
        UnitFlashSelection(auto29A90E24_var, 5.0);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00117", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarIntroQ_Init () {
    gt_DarkTemplarIntroQ = TriggerCreate("gt_DarkTemplarIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teaching: Orbital Strike Q
//--------------------------------------------------------------------------------------------------
bool gt_TeachingOrbitalStrikeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier2Power1");
    libVCUI_gf_TurnSpearofAdunSlotHighlightOnOff(2, true);
    TriggerEnable(gt_TeachingOrbitalStrikeUsed, true);
    TriggerEnable(gt_OrbitalStrikeReminderQ, true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Korhal01|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachingOrbitalStrikeQ_Init () {
    gt_TeachingOrbitalStrikeQ = TriggerCreate("gt_TeachingOrbitalStrikeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teaching: Orbital Strike Used
//--------------------------------------------------------------------------------------------------
bool gt_TeachingOrbitalStrikeUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_orbitalStrikeUsed == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.125, c_timeGame);
    libVCUI_gf_TurnSpearofAdunSlotHighlightOnOff(2, false);
    gv_orbitalStrikeUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachingOrbitalStrikeUsed_Init () {
    gt_TeachingOrbitalStrikeUsed = TriggerCreate("gt_TeachingOrbitalStrikeUsed_Func");
    TriggerEnable(gt_TeachingOrbitalStrikeUsed, false);
    TriggerAddEventUnitAbility(gt_TeachingOrbitalStrikeUsed, null, AbilityCommand("SOAOrbitalStrikeExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Strike Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalStrikeReminderQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_strikeRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1) && (UnitGetPropertyFixed(UnitFromId(82), c_unitPropLifePercent, c_unitPropCurrent) == 100.0)) {
        lv_strikeRegion = RegionFromId(37);
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
        lv_strikeRegion = RegionFromId(27);
    }

    if ((lv_strikeRegion != null)) {
        TriggerEnable(TriggerGetCurrent(), false);
        VisRevealArea(gv_pLAYER_01_USER, lv_strikeRegion, 10.0, false);
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(lv_strikeRegion), 5.0, Color(100.00, 0.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C433EEEE"), null, RegionGetCenter(lv_strikeRegion));
        Wait(1.0, c_timeReal);
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00122", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalStrikeReminderQ_Init () {
    gt_OrbitalStrikeReminderQ = TriggerCreate("gt_OrbitalStrikeReminderQ_Func");
    TriggerEnable(gt_OrbitalStrikeReminderQ, false);
    TriggerAddEventTimePeriodic(gt_OrbitalStrikeReminderQ, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCUI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\ui_void_boss_warpconduit.dds", StringExternal("Param/Value/394ED3FC"), gv_warpConduitMaxLife);
    libVCUI_gf_SetSingularBossBarColor(Color(23.53, 86.67, 100.00));
    libVCUI_gf_SetSingularBossBarBossVoidCampaign(gv_warpConduit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpConduitBossBar_Init () {
    gt_WarpConduitBossBar = TriggerCreate("gt_WarpConduitBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit Low 50% Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitLow50Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) > 25.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_warpConduit), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7F2101BC"), null, gv_warpConduit);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_voidThrashers.lv_activeThrashers <= 1)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00123", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00174", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpConduitLow50Q_Init () {
    gt_WarpConduitLow50Q = TriggerCreate("gt_WarpConduitLow50Q_Func");
    TriggerAddEventTimePeriodic(gt_WarpConduitLow50Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit Low 25% Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitLow25Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) > 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_WarpConduitLow50Q, false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_warpConduit), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B5C2371F"), null, gv_warpConduit);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_voidThrashers.lv_activeThrashers <= 1)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00124", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00175", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpConduitLow25Q_Init () {
    gt_WarpConduitLow25Q = TriggerCreate("gt_WarpConduitLow25Q_Func");
    TriggerAddEventTimePeriodic(gt_WarpConduitLow25Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit Low 10% Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitLow10Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_WarpConduitLow25Q, false);
    TriggerEnable(gt_WarpConduitLow50Q, false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_warpConduit), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9A24113C"), null, gv_warpConduit);
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_voidThrashers.lv_activeThrashers <= 1)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00125", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00176", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpConduitLow10Q_Init () {
    gt_WarpConduitLow10Q = TriggerCreate("gt_WarpConduitLow10Q_Func");
    TriggerAddEventTimePeriodic(gt_WarpConduitLow10Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Attack Conduit Location
//--------------------------------------------------------------------------------------------------
bool gt_ZergAttackConduitLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergAttackers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_zergAttackers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        while (!((UnitGroupCount(lv_zergAttackers, c_unitCountAlive) < 24))) {
            Wait(1.0, c_timeAI);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(992));
        UnitGroupAdd(lv_zergAttackers, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(992));
        UnitGroupAdd(lv_zergAttackers, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(992));
        UnitGroupAdd(lv_zergAttackers, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
        Wait(2.0, c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(992));
        UnitGroupAdd(lv_zergAttackers, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(992));
        UnitGroupAdd(lv_zergAttackers, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(992));
        UnitGroupAdd(lv_zergAttackers, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
        Wait(2.0, c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(992));
        UnitGroupAdd(lv_zergAttackers, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION, PointFromId(992));
        UnitGroupAdd(lv_zergAttackers, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
        Wait(8.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAttackConduitLocation_Init () {
    gt_ZergAttackConduitLocation = TriggerCreate("gt_ZergAttackConduitLocation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar Safety
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarSafety_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_darkTemplar;

    // Automatic Variable Declarations
    unitgroup autoB76D5166_g;
    int autoB76D5166_u;
    unit autoB76D5166_var;

    // Variable Initialization
    lv_darkTemplar = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_darkTemplar = UnitGroup("DarkTemplar", gv_pLAYER_05_PROTOSS_ALLY, RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libVCMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_darkTemplar) == true))) {
            return true;
        }

        autoB76D5166_g = lv_darkTemplar;
        autoB76D5166_u = UnitGroupCount(autoB76D5166_g, c_unitCountAll);
        for (;; autoB76D5166_u -= 1) {
            autoB76D5166_var = UnitGroupUnitFromEnd(autoB76D5166_g, autoB76D5166_u);
            if (autoB76D5166_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(autoB76D5166_var, RegionFromId(41)) == false)) {
                UnitIssueOrder(autoB76D5166_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(41)), 3.0))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarSafety_Init () {
    gt_DarkTemplarSafety = TriggerCreate("gt_DarkTemplarSafety_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Bay 01 Released
//--------------------------------------------------------------------------------------------------
bool gt_LaunchBay01Released_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localShuttle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_launchBayReticules[1]);
    TextTagDestroy(gv_launchBayTextTags[1]);
    gv_objective_LaunchBaysFreed += 1;
    TriggerExecute(gt_LaunchBayUpdate, true, false);
    PingDestroy(gv_launchBayPing[1]);
    gv_activeBayIndex = 1;
    Wait(2.0, c_timeAI);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(405)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false) && (gv_activeBayIndex == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "DarkTemplarShuttle", c_unitCreateIgnorePlacement, gv_pLAYER_05_PROTOSS_ALLY, gv_launchBayLocations[1]);
        lv_localShuttle = UnitLastCreated();
        gf_ShuttleBirth(lv_localShuttle);
        Wait(12.0, c_timeAI);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_localShuttle), c_animNameDefault);
        gf_ShuttleMoveController(lv_localShuttle, 1);
        libVCMI_gf_SetUnitInfoTextCampaign(lv_localShuttle, null, StringExternal("Param/Value/8606326D"), null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchBay01Released_Init () {
    gt_LaunchBay01Released = TriggerCreate("gt_LaunchBay01Released_Func");
    TriggerAddEventUnitDied(gt_LaunchBay01Released, UnitRefFromUnit(UnitFromId(453)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Bay 02 Released
//--------------------------------------------------------------------------------------------------
bool gt_LaunchBay02Released_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localShuttle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_launchBayReticules[2]);
    TextTagDestroy(gv_launchBayTextTags[2]);
    gv_objective_LaunchBaysFreed += 1;
    TriggerExecute(gt_LaunchBayUpdate, true, false);
    PingDestroy(gv_launchBayPing[2]);
    gv_activeBayIndex = 2;
    Wait(2.0, c_timeAI);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(497)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false) && (gv_activeBayIndex == 2)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "DarkTemplarShuttle", c_unitCreateIgnorePlacement, gv_pLAYER_05_PROTOSS_ALLY, gv_launchBayLocations[2]);
        lv_localShuttle = UnitLastCreated();
        gf_ShuttleBirth(lv_localShuttle);
        Wait(12.0, c_timeAI);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_localShuttle), c_animNameDefault);
        gf_ShuttleMoveController(lv_localShuttle, 2);
        libVCMI_gf_SetUnitInfoTextCampaign(lv_localShuttle, null, StringExternal("Param/Value/B6493D9B"), null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchBay02Released_Init () {
    gt_LaunchBay02Released = TriggerCreate("gt_LaunchBay02Released_Func");
    TriggerAddEventUnitDied(gt_LaunchBay02Released, UnitRefFromUnit(UnitFromId(315)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Bay 03 Released
//--------------------------------------------------------------------------------------------------
bool gt_LaunchBay03Released_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localShuttle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_launchBayReticules[3]);
    TextTagDestroy(gv_launchBayTextTags[3]);
    gv_objective_LaunchBaysFreed += 1;
    TriggerExecute(gt_LaunchBayUpdate, true, false);
    PingDestroy(gv_launchBayPing[3]);
    gv_activeBayIndex = 3;
    Wait(2.0, c_timeAI);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(401)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false) && (gv_activeBayIndex == 3)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "DarkTemplarShuttle", c_unitCreateIgnorePlacement, gv_pLAYER_05_PROTOSS_ALLY, gv_launchBayLocations[3]);
        lv_localShuttle = UnitLastCreated();
        gf_ShuttleBirth(lv_localShuttle);
        Wait(12.0, c_timeAI);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_localShuttle), c_animNameDefault);
        gf_ShuttleMoveController(lv_localShuttle, 3);
        libVCMI_gf_SetUnitInfoTextCampaign(lv_localShuttle, null, StringExternal("Param/Value/B4E87F7C"), null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchBay03Released_Init () {
    gt_LaunchBay03Released = TriggerCreate("gt_LaunchBay03Released_Func");
    TriggerAddEventUnitDied(gt_LaunchBay03Released, UnitRefFromUnit(UnitFromId(501)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Bay 04 Released
//--------------------------------------------------------------------------------------------------
bool gt_LaunchBay04Released_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localShuttle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_launchBayReticules[4]);
    TextTagDestroy(gv_launchBayTextTags[4]);
    gv_objective_LaunchBaysFreed += 1;
    TriggerExecute(gt_LaunchBayUpdate, true, false);
    PingDestroy(gv_launchBayPing[4]);
    gv_activeBayIndex = 4;
    Wait(2.0, c_timeAI);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(98)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.0, c_timeAI);
    while ((libVCMI_gf_GameIsOver() == false) && (gv_activeBayIndex == 4)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "DarkTemplarShuttle", c_unitCreateIgnorePlacement, gv_pLAYER_05_PROTOSS_ALLY, gv_launchBayLocations[4]);
        lv_localShuttle = UnitLastCreated();
        gf_ShuttleBirth(lv_localShuttle);
        Wait(12.0, c_timeAI);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_localShuttle), c_animNameDefault);
        gf_ShuttleMoveController(lv_localShuttle, 4);
        libVCMI_gf_SetUnitInfoTextCampaign(lv_localShuttle, null, StringExternal("Param/Value/9D17A418"), null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchBay04Released_Init () {
    gt_LaunchBay04Released = TriggerCreate("gt_LaunchBay04Released_Func");
    TriggerAddEventUnitDied(gt_LaunchBay04Released, UnitRefFromUnit(UnitFromId(444)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Bay Update
//--------------------------------------------------------------------------------------------------
bool gt_LaunchBayUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveLaunchBaysUpdate, true, false);
    if ((gv_objective_LaunchBaysFreed == gv_objective_LaunchBaysQuota)) {
        if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (gv_voidThrashers.lv_totalThrashers < 5)) {
            TriggerExecute(gt_AchievementFinalThrasherSkipped, true, false);
        }

        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (gv_voidThrashers.lv_killedThrashers == 0)) {
            TriggerExecute(gt_MasteryNoThrashersKilled, true, false);
        }

        TriggerExecute(gt_ObjectiveLaunchBaysComplete, true, false);
        TriggerExecute(gt_VictoryPrimaryObjectiveCompleted, true, false);
    }
    else {
        TriggerExecute(gt_TransmissionLaunchBayUpdateQ, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchBayUpdate_Init () {
    gt_LaunchBayUpdate = TriggerCreate("gt_LaunchBayUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Launch Bay Update Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLaunchBayUpdateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA4631900_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    autoA4631900_val = gv_objective_LaunchBaysFreed;
    if (autoA4631900_val == 1) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoA4631900_val == 2) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00155", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoA4631900_val == 3) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (autoA4631900_val == 4) {
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLaunchBayUpdateQ_Init () {
    gt_TransmissionLaunchBayUpdateQ = TriggerCreate("gt_TransmissionLaunchBayUpdateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherIntroQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_preQuakeSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VoidThrasherIntroShake, true, true);
    TriggerExecute(gt_MidQ, true, true);
    TriggerExecute(gt_VoidThrasherEncounter1, true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(1));
    gv_voidThrashers.lv_revealer[1] = VisRevealerLastCreated();
    TriggerQueueEnter();
    TriggerExecute(gt_WarpConduitBossBar, true, false);
    TriggerExecute(gt_ObjectiveWarpConduitCreate, true, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_voidThrashers.lv_thrasher[1]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_voidThrashers.lv_ping[1] = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/85ED45AB"));
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), gv_voidThrashers.lv_thrasher[1]);
    TriggerQueueExit();
    Wait(2.0, c_timeAI);
    if ((libVoiC_gf_MissionStatusCheck("PKorhal01", libVoiC_ge_MissionStatus_Completed) == false)) {
        TriggerExecute(gt_TeachingOrbitalStrikeQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherIntroQ_Init () {
    gt_VoidThrasherIntroQ = TriggerCreate("gt_VoidThrasherIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Intro Shake
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherIntroShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_preQuakeSound;
    fixed lv_shakeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_shakeDuration = (5.0 + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Shakuras01|Line00119", true), c_soundIndexAny)));
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", (lv_shakeDuration / 2.0), (lv_shakeDuration / 2.0), lv_shakeDuration);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_preQuakeSound = SoundLastPlayed();
    Wait(5.0, c_timeGame);
    SoundStop(lv_preQuakeSound, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherIntroShake_Init () {
    gt_VoidThrasherIntroShake = TriggerCreate("gt_VoidThrasherIntroShake_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Thrasher Return Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidThrasherReturnQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto22260605_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto22260605_val = gv_voidThrashers.lv_totalThrashers;
    if (auto22260605_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00165", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto22260605_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00166", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto22260605_val == 4) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00168", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto22260605_val == 5) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00171", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidThrasherReturnQ_Init () {
    gt_TransmissionVoidThrasherReturnQ = TriggerCreate("gt_TransmissionVoidThrasherReturnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Thrasher Death Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidThrasherDeathQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killedThrashersSnapshot;

    // Automatic Variable Declarations
    int autoECF6F13A_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killedThrashersSnapshot = gv_voidThrashers.lv_killedThrashers;
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    autoECF6F13A_val = lv_killedThrashersSnapshot;
    if (autoECF6F13A_val == 1) {
        if ((gv_voidThrashers.lv_activeThrashers == 0)) {
            Wait(3.0, c_timeGame);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00161", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            Wait(2.0, c_timeGame);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00177", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else if (autoECF6F13A_val == 2) {
        if ((gv_voidThrashers.lv_activeThrashers == 0)) {
            Wait(2.0, c_timeGame);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00163", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            Wait(2.0, c_timeGame);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00178", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else if (autoECF6F13A_val == 3) {
        Wait(2.0, c_timeGame);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00167", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoECF6F13A_val == 4) {
        Wait(2.0, c_timeGame);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00169", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoECF6F13A_val == 5) {
        Wait(2.0, c_timeGame);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00170", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidThrasherDeathQ_Init () {
    gt_TransmissionVoidThrasherDeathQ = TriggerCreate("gt_TransmissionVoidThrasherDeathQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Encounter 1
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherEncounter1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidThrashers.lv_activeThrashers += 1;
    gv_voidThrashers.lv_totalThrashers += 1;
    TriggerEnable(gt_VoidThrasherDeath1, true);
    Wait(2.0, c_timeAI);
    gf_VoidThrasherAI(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherEncounter1_Init () {
    gt_VoidThrasherEncounter1 = TriggerCreate("gt_VoidThrasherEncounter1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Death 1
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherDeath1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidThrashers.lv_killedThrashers += 1;
    gv_voidThrashers.lv_activeThrashers -= 1;
    TriggerExecute(gt_TransmissionVoidThrasherDeathQ, true, false);
    PingSetVisible(gv_voidThrashers.lv_ping[1], false);
    Wait(2.0, c_timeAI);
    VisRevealerDestroy(gv_voidThrashers.lv_revealer[1]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherDeath1_Init () {
    gt_VoidThrasherDeath1 = TriggerCreate("gt_VoidThrasherDeath1_Func");
    TriggerEnable(gt_VoidThrasherDeath1, false);
    TriggerAddEventUnitDied(gt_VoidThrasherDeath1, UnitRefFromVariable("gv_voidThrashers.lv_thrasher[1]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawn 2
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawn2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    lv_spawnIndex = 2;
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(2));
    gv_voidThrashers.lv_revealer[lv_spawnIndex] = VisRevealerLastCreated();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_voidThrashers.lv_location[lv_spawnIndex], 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/180C7E20"), null, gv_voidThrashers.lv_location[lv_spawnIndex]);
    TimerStart(gv_thrasherSpawnTimer, 6.0, false, c_timeAI);
    gf_SpawnVoidThrasher(lv_spawnIndex);
    if ((RegionContainsPoint(RegionCircle(gv_voidThrashers.lv_location[lv_spawnIndex], 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        SoundPlayForPlayer(SoundLink("Zerus03_Zurvan_CS_Intro", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 3.0, 1.0, 6.0);
    }

    libNtve_gf_WaitForTimer(gv_thrasherSpawnTimer, 0.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_voidThrashers.lv_thrasher[lv_spawnIndex]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_voidThrashers.lv_ping[lv_spawnIndex] = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1A98DFBC"));
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), gv_voidThrashers.lv_thrasher[lv_spawnIndex]);
    libNtve_gf_MakeUnitInvulnerable(gv_voidThrashers.lv_thrasher[lv_spawnIndex], false);
    gv_voidThrashers.lv_activeThrashers += 1;
    gv_voidThrashers.lv_totalThrashers += 1;
    TriggerEnable(gt_VoidThrasherDeath2, true);
    TriggerExecute(gt_VoidThrasherEncounter2, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_TransmissionVoidThrasherReturnQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawn2_Init () {
    gt_VoidThrasherSpawn2 = TriggerCreate("gt_VoidThrasherSpawn2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Encounter 2
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherEncounter2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeAI);
    gf_VoidThrasherAI(2);
    while (!((UnitGetPropertyFixed(gv_voidThrashers.lv_thrasher[2], c_unitPropVitalityPercent, c_unitPropCurrent) <= 75.0))) {
        Wait(0.25, c_timeAI);
    }
    gf_CreateNydusWormAtPoint(PointFromId(60), RegionFromId(2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherEncounter2_Init () {
    gt_VoidThrasherEncounter2 = TriggerCreate("gt_VoidThrasherEncounter2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Death 2
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherDeath2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidThrashers.lv_killedThrashers += 1;
    gv_voidThrashers.lv_activeThrashers -= 1;
    TriggerExecute(gt_TransmissionVoidThrasherDeathQ, true, false);
    PingSetVisible(gv_voidThrashers.lv_ping[2], false);
    Wait(2.0, c_timeAI);
    VisRevealerDestroy(gv_voidThrashers.lv_revealer[2]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherDeath2_Init () {
    gt_VoidThrasherDeath2 = TriggerCreate("gt_VoidThrasherDeath2_Func");
    TriggerEnable(gt_VoidThrasherDeath2, false);
    TriggerAddEventUnitDied(gt_VoidThrasherDeath2, UnitRefFromVariable("gv_voidThrashers.lv_thrasher[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawn 3
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawn3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    lv_spawnIndex = 3;
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(4));
    gv_voidThrashers.lv_revealer[lv_spawnIndex] = VisRevealerLastCreated();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_voidThrashers.lv_location[lv_spawnIndex], 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CF2DFB05"), null, gv_voidThrashers.lv_location[lv_spawnIndex]);
    TimerStart(gv_thrasherSpawnTimer, 6.0, false, c_timeAI);
    gf_SpawnVoidThrasher(lv_spawnIndex);
    if ((RegionContainsPoint(RegionCircle(gv_voidThrashers.lv_location[lv_spawnIndex], 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        SoundPlayForPlayer(SoundLink("Zerus03_Zurvan_CS_Intro", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 3.0, 1.0, 6.0);
    }

    libNtve_gf_WaitForTimer(gv_thrasherSpawnTimer, 0.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_voidThrashers.lv_thrasher[lv_spawnIndex]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_voidThrashers.lv_ping[lv_spawnIndex] = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B84D47B5"));
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), gv_voidThrashers.lv_thrasher[lv_spawnIndex]);
    libNtve_gf_MakeUnitInvulnerable(gv_voidThrashers.lv_thrasher[lv_spawnIndex], false);
    gv_voidThrashers.lv_activeThrashers += 1;
    gv_voidThrashers.lv_totalThrashers += 1;
    TriggerEnable(gt_VoidThrasherDeath3, true);
    TriggerExecute(gt_VoidThrasherEncounter3, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_TransmissionVoidThrasherReturnQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawn3_Init () {
    gt_VoidThrasherSpawn3 = TriggerCreate("gt_VoidThrasherSpawn3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Encounter 3
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherEncounter3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeAI);
    gf_VoidThrasherAI(3);
    while (!((UnitGetPropertyFixed(gv_voidThrashers.lv_thrasher[3], c_unitPropVitalityPercent, c_unitPropCurrent) <= 85.0))) {
        Wait(0.25, c_timeAI);
    }
    gf_CreateNydusWormAtPoint(PointFromId(170), RegionFromId(4));
    while (!((UnitGetPropertyFixed(gv_voidThrashers.lv_thrasher[3], c_unitPropVitalityPercent, c_unitPropCurrent) <= 45.0))) {
        Wait(0.25, c_timeAI);
    }
    gf_CreateNydusWormAtPoint(PointFromId(130), RegionFromId(4));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherEncounter3_Init () {
    gt_VoidThrasherEncounter3 = TriggerCreate("gt_VoidThrasherEncounter3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Death 3
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherDeath3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidThrashers.lv_killedThrashers += 1;
    gv_voidThrashers.lv_activeThrashers -= 1;
    TriggerExecute(gt_TransmissionVoidThrasherDeathQ, true, false);
    PingSetVisible(gv_voidThrashers.lv_ping[3], false);
    Wait(2.0, c_timeAI);
    VisRevealerDestroy(gv_voidThrashers.lv_revealer[3]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherDeath3_Init () {
    gt_VoidThrasherDeath3 = TriggerCreate("gt_VoidThrasherDeath3_Func");
    TriggerEnable(gt_VoidThrasherDeath3, false);
    TriggerAddEventUnitDied(gt_VoidThrasherDeath3, UnitRefFromVariable("gv_voidThrashers.lv_thrasher[3]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawn 4
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawn4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    lv_spawnIndex = 4;
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(3));
    gv_voidThrashers.lv_revealer[lv_spawnIndex] = VisRevealerLastCreated();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_voidThrashers.lv_location[lv_spawnIndex], 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/6ABDE670"), null, gv_voidThrashers.lv_location[lv_spawnIndex]);
    TimerStart(gv_thrasherSpawnTimer, 6.0, false, c_timeAI);
    gf_SpawnVoidThrasher(lv_spawnIndex);
    if ((RegionContainsPoint(RegionCircle(gv_voidThrashers.lv_location[lv_spawnIndex], 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        SoundPlayForPlayer(SoundLink("Zerus03_Zurvan_CS_Intro", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 3.0, 1.0, 6.0);
    }

    libNtve_gf_WaitForTimer(gv_thrasherSpawnTimer, 0.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_voidThrashers.lv_thrasher[lv_spawnIndex]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_voidThrashers.lv_ping[lv_spawnIndex] = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8B8E7D7A"));
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), gv_voidThrashers.lv_thrasher[lv_spawnIndex]);
    libNtve_gf_MakeUnitInvulnerable(gv_voidThrashers.lv_thrasher[lv_spawnIndex], false);
    gv_voidThrashers.lv_activeThrashers += 1;
    gv_voidThrashers.lv_totalThrashers += 1;
    TriggerEnable(gt_VoidThrasherDeath4, true);
    TriggerExecute(gt_VoidThrasherEncounter4, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_TransmissionVoidThrasherReturnQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawn4_Init () {
    gt_VoidThrasherSpawn4 = TriggerCreate("gt_VoidThrasherSpawn4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Encounter 4
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherEncounter4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeAI);
    gf_VoidThrasherAI(4);
    while (!((UnitGetPropertyFixed(gv_voidThrashers.lv_thrasher[4], c_unitPropVitalityPercent, c_unitPropCurrent) <= 99.0))) {
        Wait(0.25, c_timeAI);
    }
    gf_CreateNydusWormAtPoint(PointFromId(97), RegionFromId(3));
    while (!((UnitGetPropertyFixed(gv_voidThrashers.lv_thrasher[4], c_unitPropVitalityPercent, c_unitPropCurrent) <= 50.0))) {
        Wait(0.25, c_timeAI);
    }
    gf_CreateNydusWormAtPoint(PointFromId(120), RegionFromId(3));
    Wait(0.5, c_timeAI);
    gf_CreateNydusWormAtPoint(PointFromId(160), RegionFromId(3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherEncounter4_Init () {
    gt_VoidThrasherEncounter4 = TriggerCreate("gt_VoidThrasherEncounter4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Death 4
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherDeath4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidThrashers.lv_killedThrashers += 1;
    gv_voidThrashers.lv_activeThrashers -= 1;
    TriggerExecute(gt_TransmissionVoidThrasherDeathQ, true, false);
    PingSetVisible(gv_voidThrashers.lv_ping[4], false);
    Wait(2.0, c_timeAI);
    VisRevealerDestroy(gv_voidThrashers.lv_revealer[4]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherDeath4_Init () {
    gt_VoidThrasherDeath4 = TriggerCreate("gt_VoidThrasherDeath4_Func");
    TriggerEnable(gt_VoidThrasherDeath4, false);
    TriggerAddEventUnitDied(gt_VoidThrasherDeath4, UnitRefFromVariable("gv_voidThrashers.lv_thrasher[4]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Spawn 5
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherSpawn5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    lv_spawnIndex = 5;
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(11));
    gv_voidThrashers.lv_revealer[lv_spawnIndex] = VisRevealerLastCreated();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_voidThrashers.lv_location[lv_spawnIndex], 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FA00FE46"), null, gv_voidThrashers.lv_location[lv_spawnIndex]);
    TimerStart(gv_thrasherSpawnTimer, 6.0, false, c_timeAI);
    gf_SpawnVoidThrasher(lv_spawnIndex);
    if ((RegionContainsPoint(RegionCircle(gv_voidThrashers.lv_location[lv_spawnIndex], 32.0), CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
        SoundPlayForPlayer(SoundLink("Zerus03_Zurvan_CS_Intro", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 3.0, 1.0, 6.0);
    }

    libNtve_gf_WaitForTimer(gv_thrasherSpawnTimer, 0.0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_voidThrashers.lv_thrasher[lv_spawnIndex]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_voidThrashers.lv_ping[lv_spawnIndex] = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FB0BCD2C"));
    PingSetScale(PingLastCreated(), 0.8);
    PingSetUnit(PingLastCreated(), gv_voidThrashers.lv_thrasher[lv_spawnIndex]);
    libNtve_gf_MakeUnitInvulnerable(gv_voidThrashers.lv_thrasher[lv_spawnIndex], false);
    gv_voidThrashers.lv_activeThrashers += 1;
    gv_voidThrashers.lv_totalThrashers += 1;
    TriggerEnable(gt_VoidThrasherDeath5, true);
    TriggerExecute(gt_VoidThrasherEncounter5, true, false);
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_TransmissionVoidThrasherReturnQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherSpawn5_Init () {
    gt_VoidThrasherSpawn5 = TriggerCreate("gt_VoidThrasherSpawn5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Encounter 5
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherEncounter5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeAI);
    gf_VoidThrasherAI(5);
    while (!((UnitGetPropertyFixed(gv_voidThrashers.lv_thrasher[5], c_unitPropVitalityPercent, c_unitPropCurrent) <= 90.0))) {
        Wait(0.25, c_timeAI);
    }
    gf_CreateNydusWormAtPoint(PointFromId(512), RegionFromId(11));
    while (!((UnitGetPropertyFixed(gv_voidThrashers.lv_thrasher[5], c_unitPropVitalityPercent, c_unitPropCurrent) <= 65.0))) {
        Wait(0.25, c_timeAI);
    }
    gf_CreateNydusWormAtPoint(PointFromId(510), RegionFromId(11));
    while (!((UnitGetPropertyFixed(gv_voidThrashers.lv_thrasher[5], c_unitPropVitalityPercent, c_unitPropCurrent) <= 45.0))) {
        Wait(0.25, c_timeAI);
    }
    gf_CreateNydusWormAtPoint(PointFromId(516), RegionFromId(11));
    Wait(0.5, c_timeAI);
    gf_CreateNydusWormAtPoint(PointFromId(515), RegionFromId(11));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherEncounter5_Init () {
    gt_VoidThrasherEncounter5 = TriggerCreate("gt_VoidThrasherEncounter5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Death 5
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherDeath5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_voidThrashers.lv_killedThrashers += 1;
    gv_voidThrashers.lv_activeThrashers -= 1;
    TriggerExecute(gt_TransmissionVoidThrasherDeathQ, true, false);
    PingSetVisible(gv_voidThrashers.lv_ping[5], false);
    Wait(2.0, c_timeAI);
    VisRevealerDestroy(gv_voidThrashers.lv_revealer[5]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherDeath5_Init () {
    gt_VoidThrasherDeath5 = TriggerCreate("gt_VoidThrasherDeath5_Func");
    TriggerEnable(gt_VoidThrasherDeath5, false);
    TriggerAddEventUnitDied(gt_VoidThrasherDeath5, UnitRefFromVariable("gv_voidThrashers.lv_thrasher[5]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Attacks Screen Shake
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherAttacksScreenShake_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(CameraGetTarget(gv_pLAYER_01_USER), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 13.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 0.0, 2.0, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherAttacksScreenShake_Init () {
    gt_VoidThrasherAttacksScreenShake = TriggerCreate("gt_VoidThrasherAttacksScreenShake_Func");
    TriggerAddEventPlayerEffectUsed(gt_VoidThrasherAttacksScreenShake, gv_pLAYER_04_THRASHER, "VoidThrasherLightningAoECreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vault Timed Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_VaultTimedIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_VaultDiscoveryIntroQ, false);
    TriggerQueueEnter();
    if ((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateCompleted)) {
        return true;
    }

    TriggerExecute(gt_ObjectiveArchiveCoresCreate, true, true);
    TriggerEnable(gt_VaultFirstVaultFoundTimedQ, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((libVoiC_gf_MissionStatus("PKorhal01") == libVoiC_ge_MissionStatus_Completed)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00179", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00183", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00184", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VaultTimedIntroQ_Init () {
    gt_VaultTimedIntroQ = TriggerCreate("gt_VaultTimedIntroQ_Func");
    TriggerAddEventTimer(gt_VaultTimedIntroQ, gv_bonusObjectiveRevealTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vault - First Vault Found (Timed) Q
//--------------------------------------------------------------------------------------------------
bool gt_VaultFirstVaultFoundTimedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateCompleted)) {
        return true;
    }

    TriggerExecute(gt_ObjectiveArchiveCoresCreate, true, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00146", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VaultFirstVaultFoundTimedQ_Init () {
    gt_VaultFirstVaultFoundTimedQ = TriggerCreate("gt_VaultFirstVaultFoundTimedQ_Func");
    TriggerEnable(gt_VaultFirstVaultFoundTimedQ, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vault Discovery Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_VaultDiscoveryIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_VaultTimedIntroQ, false);
    TriggerQueueEnter();
    if ((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateCompleted)) {
        return true;
    }

    TriggerExecute(gt_ObjectiveArchiveCoresCreate, true, true);
    TriggerEnable(gt_VaultFirstVaultFoundDiscoveryQ, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    if ((libVoiC_gf_MissionStatus("PKorhal01") == libVoiC_ge_MissionStatus_Completed)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00145", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00181", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VaultDiscoveryIntroQ_Init () {
    gt_VaultDiscoveryIntroQ = TriggerCreate("gt_VaultDiscoveryIntroQ_Func");
    TriggerAddEventTimePeriodic(gt_VaultDiscoveryIntroQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vault - First Vault Found (Discovery) Q
//--------------------------------------------------------------------------------------------------
bool gt_VaultFirstVaultFoundDiscoveryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateCompleted)) {
        return true;
    }

    TriggerExecute(gt_ObjectiveArchiveCoresCreate, true, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00182", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VaultFirstVaultFoundDiscoveryQ_Init () {
    gt_VaultFirstVaultFoundDiscoveryQ = TriggerCreate("gt_VaultFirstVaultFoundDiscoveryQ_Func");
    TriggerEnable(gt_VaultFirstVaultFoundDiscoveryQ, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vault 01 Activated
//--------------------------------------------------------------------------------------------------
bool gt_Vault01Activated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_core;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_vaultBeacon[1]), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(gv_vaultBeacon[1]);
    gv_vaultsFound = (gv_vaultsFound + 1);
    if ((gv_vaultsFound == 1)) {
        TriggerExecute(gt_VaultFirstVaultFoundDiscoveryQ, true, false);
    }

    TriggerExecute(gt_ObjectiveArchiveCoresUpdate, true, false);
    UnitIssueOrder(UnitFromId(217), Order(AbilityCommand("ArchiveShakurasRaise", 0)), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(7), 12.0, false);
    Wait(8.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, PointFromId(758));
    lv_core = UnitLastCreated();
    UnitSetState(lv_core, c_unitStateHighlightable, false);
    UnitSetState(lv_core, c_unitStateSelectable, false);
    UnitSetState(lv_core, c_unitStateTargetable, false);
    UnitSetState(lv_core, c_unitStateInvulnerable, true);
    libNtve_gf_SendActorMessageToUnit(lv_core, "SetMinimapVisibility");
    UnitBehaviorAddPlayer(lv_core, "ObjectiveCollectionBeam", gv_pLAYER_01_USER, 1);
    Wait(2.0, c_timeAI);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(UnitFromId(217)), "PShakuras01Bonus01");
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vault01Activated_Init () {
    gt_Vault01Activated = TriggerCreate("gt_Vault01Activated_Func");
    TriggerAddEventTimePeriodic(gt_Vault01Activated, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vault 02 Activated
//--------------------------------------------------------------------------------------------------
bool gt_Vault02Activated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_core;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_vaultBeacon[2]), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(gv_vaultBeacon[2]);
    gv_vaultsFound = (gv_vaultsFound + 1);
    if ((gv_vaultsFound == 1)) {
        TriggerExecute(gt_VaultFirstVaultFoundDiscoveryQ, true, false);
    }

    TriggerExecute(gt_ObjectiveArchiveCoresUpdate, true, false);
    UnitIssueOrder(UnitFromId(270), Order(AbilityCommand("ArchiveShakurasRaise", 0)), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(8), 12.0, false);
    Wait(8.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, PointFromId(759));
    lv_core = UnitLastCreated();
    UnitSetState(lv_core, c_unitStateHighlightable, false);
    UnitSetState(lv_core, c_unitStateSelectable, false);
    UnitSetState(lv_core, c_unitStateTargetable, false);
    UnitSetState(lv_core, c_unitStateInvulnerable, true);
    libNtve_gf_SendActorMessageToUnit(lv_core, "SetMinimapVisibility");
    UnitBehaviorAddPlayer(lv_core, "ObjectiveCollectionBeam", gv_pLAYER_01_USER, 1);
    Wait(2.0, c_timeAI);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(UnitFromId(270)), "PShakuras01Bonus01");
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vault02Activated_Init () {
    gt_Vault02Activated = TriggerCreate("gt_Vault02Activated_Func");
    TriggerAddEventTimePeriodic(gt_Vault02Activated, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vault 03 Activated
//--------------------------------------------------------------------------------------------------
bool gt_Vault03Activated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_core;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_vaultBeacon[3]), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(gv_vaultBeacon[3]);
    gv_vaultsFound = (gv_vaultsFound + 1);
    if ((gv_vaultsFound == 1)) {
        TriggerExecute(gt_VaultFirstVaultFoundDiscoveryQ, true, false);
    }

    TriggerExecute(gt_ObjectiveArchiveCoresUpdate, true, false);
    UnitIssueOrder(UnitFromId(164), Order(AbilityCommand("ArchiveShakurasRaise", 0)), c_orderQueueReplace);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(9), 12.0, false);
    Wait(8.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RawSolarite", c_unitCreateIgnorePlacement, 0, PointFromId(760));
    lv_core = UnitLastCreated();
    UnitSetState(lv_core, c_unitStateHighlightable, false);
    UnitSetState(lv_core, c_unitStateSelectable, false);
    UnitSetState(lv_core, c_unitStateTargetable, false);
    UnitSetState(lv_core, c_unitStateInvulnerable, true);
    libNtve_gf_SendActorMessageToUnit(lv_core, "SetMinimapVisibility");
    UnitBehaviorAddPlayer(lv_core, "ObjectiveCollectionBeam", gv_pLAYER_01_USER, 1);
    Wait(2.0, c_timeAI);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(UnitFromId(164)), "PShakuras01Bonus01");
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vault03Activated_Init () {
    gt_Vault03Activated = TriggerCreate("gt_Vault03Activated_Func");
    TriggerAddEventTimePeriodic(gt_Vault03Activated, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - All Solarite Collected Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAllSolariteCollectedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00148", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAllSolariteCollectedQ_Init () {
    gt_TransmissionAllSolariteCollectedQ = TriggerCreate("gt_TransmissionAllSolariteCollectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vault 02 Carrier Crash
//--------------------------------------------------------------------------------------------------
bool gt_Vault02CarrierCrash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((RegionContainsPoint(RegionFromId(43), CameraGetTarget(gv_pLAYER_01_USER)) == true) && (VisIsVisibleForPlayer(gv_pLAYER_01_USER, CameraGetTarget(gv_pLAYER_01_USER)) == true)) {
            VisRevealArea(gv_pLAYER_01_USER, RegionFromId(43), 12.0, false);
            gf_ActivateCarrierCrashinRegion(RegionFromId(43));
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vault02CarrierCrash_Init () {
    gt_Vault02CarrierCrash = TriggerCreate("gt_Vault02CarrierCrash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg P02 Wander
//--------------------------------------------------------------------------------------------------
bool gt_ZergP02Wander_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zerglingGroup;

    // Automatic Variable Declarations
    unitgroup autoFB944A76_g;
    int autoFB944A76_u;
    unit autoFB944A76_var;

    // Variable Initialization
    lv_zerglingGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zerglingGroup = UnitGroup("Zergling", gv_pLAYER_02_DOMINION, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libNtve_gf_UnitGroupIsDead(lv_zerglingGroup) == true) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        autoFB944A76_g = lv_zerglingGroup;
        autoFB944A76_u = UnitGroupCount(autoFB944A76_g, c_unitCountAll);
        for (;; autoFB944A76_u -= 1) {
            autoFB944A76_var = UnitGroupUnitFromEnd(autoFB944A76_g, autoFB944A76_u);
            if (autoFB944A76_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(autoFB944A76_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergP02Wander_Init () {
    gt_ZergP02Wander = TriggerCreate("gt_ZergP02Wander_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Larva
//--------------------------------------------------------------------------------------------------
bool gt_KillLarva_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto523842B9_g;
    int auto523842B9_u;
    unit auto523842B9_var;
    unitgroup auto2AB71E11_g;
    int auto2AB71E11_u;
    unit auto2AB71E11_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto523842B9_g = UnitGroup("Larva", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto523842B9_u = UnitGroupCount(auto523842B9_g, c_unitCountAll);
    for (;; auto523842B9_u -= 1) {
        auto523842B9_var = UnitGroupUnitFromEnd(auto523842B9_g, auto523842B9_u);
        if (auto523842B9_var == null) { break; }
        UnitKill(auto523842B9_var);
    }
    auto2AB71E11_g = UnitGroup("Egg", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2AB71E11_u = UnitGroupCount(auto2AB71E11_g, c_unitCountAll);
    for (;; auto2AB71E11_u -= 1) {
        auto2AB71E11_var = UnitGroupUnitFromEnd(auto2AB71E11_g, auto2AB71E11_u);
        if (auto2AB71E11_var == null) { break; }
        UnitKill(auto2AB71E11_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillLarva_Init () {
    gt_KillLarva = TriggerCreate("gt_KillLarva_Func");
    TriggerAddEventUnitDied(gt_KillLarva, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teaching: Detector Enemy Units Q
//--------------------------------------------------------------------------------------------------
bool gt_TeachingDetectorEnemyUnitsQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_detectorGroup;

    // Automatic Variable Declarations
    unitgroup auto245E9C8B_g;
    int auto245E9C8B_u;
    unit auto245E9C8B_var;

    // Variable Initialization
    lv_detectorGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_detectorGroup, UnitGroup("Overseer", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_detectorGroup, UnitGroup("SporeCrawlerUprooted", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto245E9C8B_g = lv_detectorGroup;
    auto245E9C8B_u = UnitGroupCount(auto245E9C8B_g, c_unitCountAll);
    for (;; auto245E9C8B_u -= 1) {
        auto245E9C8B_var = UnitGroupUnitFromEnd(auto245E9C8B_g, auto245E9C8B_u);
        if (auto245E9C8B_var == null) { break; }
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto245E9C8B_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerExecute(gt_OverseerVisionSharing, true, false);
            TriggerQueueEnter();
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00027", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
            TriggerQueueExit();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeachingDetectorEnemyUnitsQ_Init () {
    gt_TeachingDetectorEnemyUnitsQ = TriggerCreate("gt_TeachingDetectorEnemyUnitsQ_Func");
    TriggerAddEventTimePeriodic(gt_TeachingDetectorEnemyUnitsQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Vision Sharing
//--------------------------------------------------------------------------------------------------
bool gt_OverseerVisionSharing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_overseerGroup;

    // Automatic Variable Declarations
    unitgroup auto4601F198_g;
    int auto4601F198_u;
    unit auto4601F198_var;

    // Variable Initialization
    lv_overseerGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        lv_overseerGroup = UnitGroup("Overseer", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4601F198_g = lv_overseerGroup;
        auto4601F198_u = UnitGroupCount(auto4601F198_g, c_unitCountAll);
        for (;; auto4601F198_u -= 1) {
            auto4601F198_var = UnitGroupUnitFromEnd(auto4601F198_g, auto4601F198_u);
            if (auto4601F198_var == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(auto4601F198_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
                libNtve_gf_ShareVisionofUnit(auto4601F198_var, true, gv_pLAYER_01_USER);
            }
            else {
                libNtve_gf_ShareVisionofUnit(auto4601F198_var, false, gv_pLAYER_01_USER);
            }
        }
        Wait(0.125, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerVisionSharing_Init () {
    gt_OverseerVisionSharing = TriggerCreate("gt_OverseerVisionSharing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Overseer Patrols
//--------------------------------------------------------------------------------------------------
bool gt_StartOverseerPatrols_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_OverseerPatrolThrasher3, true, false);
    TriggerExecute(gt_OverseerPatrolThrasher4, true, false);
    TriggerExecute(gt_OverseerPatrolNorthBO, true, false);
    TriggerExecute(gt_OverseerPatrolThrasher5, true, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_OverseerPatrolWestCorridor, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartOverseerPatrols_Init () {
    gt_StartOverseerPatrols = TriggerCreate("gt_StartOverseerPatrols_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Patrol West Corridor
//--------------------------------------------------------------------------------------------------
bool gt_OverseerPatrolWestCorridor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_overseer;
    point[3] lv_patrolPath;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patrolPath[1] = PointFromId(733);
    lv_patrolPath[2] = PointFromId(734);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_pLAYER_02_DOMINION, lv_patrolPath[1]);
    lv_overseer = UnitLastCreated();
    while ((UnitIsAlive(lv_overseer) == true)) {
        UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[1]), c_orderQueueReplace);
        while (!((UnitOrderCount(lv_overseer) == 0))) {
            Wait(1.0, c_timeAI);
        }
        Wait(3.0, c_timeAI);
        UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[2]), c_orderQueueReplace);
        while (!((UnitOrderCount(lv_overseer) == 0))) {
            Wait(1.0, c_timeAI);
        }
        Wait(3.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerPatrolWestCorridor_Init () {
    gt_OverseerPatrolWestCorridor = TriggerCreate("gt_OverseerPatrolWestCorridor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Patrol Thrasher 3
//--------------------------------------------------------------------------------------------------
bool gt_OverseerPatrolThrasher3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_overseer;
    point[3] lv_patrolPath;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patrolPath[1] = PointFromId(682);
    lv_patrolPath[2] = PointFromId(683);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_pLAYER_02_DOMINION2, lv_patrolPath[1]);
    lv_overseer = UnitLastCreated();
    while ((UnitIsAlive(lv_overseer) == true)) {
        UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[1]), c_orderQueueReplace);
        while (!((UnitOrderCount(lv_overseer) == 0))) {
            Wait(1.0, c_timeAI);
        }
        Wait(3.0, c_timeAI);
        UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[2]), c_orderQueueReplace);
        while (!((UnitOrderCount(lv_overseer) == 0))) {
            Wait(1.0, c_timeAI);
        }
        Wait(5.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerPatrolThrasher3_Init () {
    gt_OverseerPatrolThrasher3 = TriggerCreate("gt_OverseerPatrolThrasher3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Patrol Thrasher 4
//--------------------------------------------------------------------------------------------------
bool gt_OverseerPatrolThrasher4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_overseer;
    point[4] lv_patrolPath;
    int lv_patrolPathIndex;

    // Automatic Variable Declarations
    int autoF139D28E_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patrolPath[1] = PointFromId(1649);
    lv_patrolPath[2] = PointFromId(251);
    lv_patrolPath[3] = PointFromId(636);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_pLAYER_02_DOMINION, lv_patrolPath[1]);
    lv_overseer = UnitLastCreated();
    while ((UnitIsAlive(lv_overseer) == true)) {
        if (lv_patrolPathIndex >= 3) {
            lv_patrolPathIndex = 1;
        }
        else {
            lv_patrolPathIndex = lv_patrolPathIndex + 1;
        }
        autoF139D28E_val = lv_patrolPathIndex;
        if (autoF139D28E_val == 1) {
            UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[1]), c_orderQueueReplace);
        }
        else if (autoF139D28E_val == 2) {
            UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[2]), c_orderQueueReplace);
        }
        else if (autoF139D28E_val == 3) {
            UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[3]), c_orderQueueReplace);
        }
        else {
        }
        while (!((UnitOrderCount(lv_overseer) == 0))) {
            Wait(1.0, c_timeAI);
        }
        Wait(2.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerPatrolThrasher4_Init () {
    gt_OverseerPatrolThrasher4 = TriggerCreate("gt_OverseerPatrolThrasher4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Patrol North BO
//--------------------------------------------------------------------------------------------------
bool gt_OverseerPatrolNorthBO_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_overseer;
    point[3] lv_patrolPath;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patrolPath[1] = PointFromId(638);
    lv_patrolPath[2] = PointFromId(639);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_pLAYER_02_DOMINION, lv_patrolPath[1]);
    lv_overseer = UnitLastCreated();
    while ((UnitIsAlive(lv_overseer) == true)) {
        UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[1]), c_orderQueueReplace);
        while (!((UnitOrderCount(lv_overseer) == 0))) {
            Wait(1.0, c_timeAI);
        }
        Wait(3.0, c_timeAI);
        UnitIssueOrder(lv_overseer, OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[2]), c_orderQueueReplace);
        while (!((UnitOrderCount(lv_overseer) == 0))) {
            Wait(1.0, c_timeAI);
        }
        Wait(3.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerPatrolNorthBO_Init () {
    gt_OverseerPatrolNorthBO = TriggerCreate("gt_OverseerPatrolNorthBO_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Patrol Thrasher 5
//--------------------------------------------------------------------------------------------------
bool gt_OverseerPatrolThrasher5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[3] lv_overseers;
    point[5] lv_patrolPath;
    int lv_patrolPathIndex;

    // Automatic Variable Declarations
    int auto268EA377_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patrolPath[1] = PointFromId(632);
    lv_patrolPath[2] = PointFromId(635);
    lv_patrolPath[3] = PointFromId(634);
    lv_patrolPath[4] = PointFromId(633);
    libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_pLAYER_02_DOMINION2, lv_patrolPath[1]);
    lv_overseers[1] = UnitLastCreated();
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Overseer", 0, gv_pLAYER_02_DOMINION2, lv_patrolPath[3]);
        lv_overseers[2] = UnitLastCreated();
    }

    while (((UnitIsAlive(lv_overseers[1]) == true) || (UnitIsAlive(lv_overseers[2]) == true))) {
        if (lv_patrolPathIndex >= 4) {
            lv_patrolPathIndex = 1;
        }
        else {
            lv_patrolPathIndex = lv_patrolPathIndex + 1;
        }
        auto268EA377_val = lv_patrolPathIndex;
        if (auto268EA377_val == 1) {
            if ((UnitIsAlive(lv_overseers[1]) == true)) {
                UnitIssueOrder(lv_overseers[1], OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[2]), c_orderQueueReplace);
            }

            if ((UnitIsAlive(lv_overseers[2]) == true)) {
                UnitIssueOrder(lv_overseers[2], OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[4]), c_orderQueueReplace);
            }

        }
        else if (auto268EA377_val == 2) {
            if ((UnitIsAlive(lv_overseers[1]) == true)) {
                UnitIssueOrder(lv_overseers[1], OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[3]), c_orderQueueReplace);
            }

            if ((UnitIsAlive(lv_overseers[2]) == true)) {
                UnitIssueOrder(lv_overseers[2], OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[1]), c_orderQueueReplace);
            }

        }
        else if (auto268EA377_val == 3) {
            if ((UnitIsAlive(lv_overseers[1]) == true)) {
                UnitIssueOrder(lv_overseers[1], OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[4]), c_orderQueueReplace);
            }

            if ((UnitIsAlive(lv_overseers[2]) == true)) {
                UnitIssueOrder(lv_overseers[2], OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[2]), c_orderQueueReplace);
            }

        }
        else if (auto268EA377_val == 4) {
            if ((UnitIsAlive(lv_overseers[1]) == true)) {
                UnitIssueOrder(lv_overseers[1], OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[1]), c_orderQueueReplace);
            }

            if ((UnitIsAlive(lv_overseers[2]) == true)) {
                UnitIssueOrder(lv_overseers[2], OrderTargetingPoint(AbilityCommand("move", 0), lv_patrolPath[3]), c_orderQueueReplace);
            }

        }
        else {
        }
        while (!((UnitOrderCount(lv_overseers[1]) == 0) && (UnitOrderCount(lv_overseers[2]) == 0))) {
            Wait(1.0, c_timeAI);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerPatrolThrasher5_Init () {
    gt_OverseerPatrolThrasher5 = TriggerCreate("gt_OverseerPatrolThrasher5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Crawler Dig In 01/02
//--------------------------------------------------------------------------------------------------
bool gt_SporeCrawlerDigIn0102_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_crawler;

    // Automatic Variable Declarations
    region autoC298C6EE_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC298C6EE_val = EventUnitRegion();
    if (autoC298C6EE_val == RegionFromId(23)) {
        gf_OrderCrawlertoRoot(PointFromId(649), UnitFromId(647));
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            gf_OrderCrawlertoRoot(PointFromId(13), UnitFromId(648));
        }

        if ((gv_crawlerEncountered == false) && (libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            gv_crawlerEncountered = true;
            lv_crawler = UnitFromId(647);
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Medium, null, lv_crawler, "Ref_Center");
            libHots_gf_StoreActorForUnit(lv_crawler, 1, libNtve_gf_ActorLastCreated());
            while (!((UnitGetType(lv_crawler) == "SporeCrawler"))) {
                Wait(0.5, c_timeAI);
            }
            Wait(2.0, c_timeAI);
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_crawler, 1));
        }

    }
    else if (autoC298C6EE_val == RegionFromId(24)) {
        gf_OrderCrawlertoRoot(PointFromId(721), UnitFromId(647));
        if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
            gf_OrderCrawlertoRoot(PointFromId(722), UnitFromId(648));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCrawlerDigIn0102_Init () {
    gt_SporeCrawlerDigIn0102 = TriggerCreate("gt_SporeCrawlerDigIn0102_Func");
    TriggerAddEventUnitRegion(gt_SporeCrawlerDigIn0102, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_SporeCrawlerDigIn0102, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Crawler Dig In 03
//--------------------------------------------------------------------------------------------------
bool gt_SporeCrawlerDigIn03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_crawler;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_OrderCrawlertoRoot(PointFromId(715), UnitFromId(685));
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        gf_OrderCrawlertoRoot(PointFromId(720), UnitFromId(686));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCrawlerDigIn03_Init () {
    gt_SporeCrawlerDigIn03 = TriggerCreate("gt_SporeCrawlerDigIn03_Func");
    TriggerAddEventUnitRegion(gt_SporeCrawlerDigIn03, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Crawler Dig In 04
//--------------------------------------------------------------------------------------------------
bool gt_SporeCrawlerDigIn04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_crawler;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_OrderCrawlertoRoot(PointFromId(698), UnitFromId(696));
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_OrderCrawlertoRoot(PointFromId(699), UnitFromId(697));
    }

    if ((gv_crawlerEncountered == false) && (libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        gv_crawlerEncountered = true;
        lv_crawler = UnitFromId(696);
        libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Small, null, lv_crawler, "Ref_Center");
        libHots_gf_StoreActorForUnit(lv_crawler, 1, libNtve_gf_ActorLastCreated());
        while (!((UnitGetType(lv_crawler) == "SporeCrawler"))) {
            Wait(0.5, c_timeAI);
        }
        Wait(2.0, c_timeAI);
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_crawler, 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCrawlerDigIn04_Init () {
    gt_SporeCrawlerDigIn04 = TriggerCreate("gt_SporeCrawlerDigIn04_Func");
    TriggerAddEventUnitRegion(gt_SporeCrawlerDigIn04, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spore Crawler Dig In 05
//--------------------------------------------------------------------------------------------------
bool gt_SporeCrawlerDigIn05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_crawler;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 1, 0) == 1)) {
        gf_OrderCrawlertoRoot(PointFromId(419), UnitFromId(753));
        gf_OrderCrawlertoRoot(PointFromId(752), UnitFromId(4));
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        gf_OrderCrawlertoRoot(PointFromId(751), UnitFromId(753));
        gf_OrderCrawlertoRoot(PointFromId(750), UnitFromId(4));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCrawlerDigIn05_Init () {
    gt_SporeCrawlerDigIn05 = TriggerCreate("gt_SporeCrawlerDigIn05_Func");
    TriggerAddEventUnitRegion(gt_SporeCrawlerDigIn05, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1) && (gv_achievementNonProbesorDarkTemplarsBuilt == false)) {
        libVoiC_gf_CampaignAwardAchievement("Anniversary_PShakuras01", gv_pLAYER_01_USER);
    }

    libVoiC_gf_CampaignAwardAchievement("PShakuras01_1", gv_pLAYER_01_USER);
    if ((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropCurrent) >= 2000.0)) {
        libVoiC_gf_CampaignAwardAchievement("PShakuras01_2", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E1C6AF07"), IntToText(FixedToInt(UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropCurrent))));
    if ((libVoiC_gf_MissionStatus("PKorhal01") != libVoiC_ge_MissionStatus_Completed)) {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/5E9D279D"), IntToText(gv_statOrbitalStrikeCount));
    }
    else {
        VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/6AA6DB7A"), IntToText(gv_statDarkTemplarWarped));
    }
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_warpConduit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerExecute(gt_ObjectiveWarpConduitComplete, true, false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveCompleted_Init () {
    gt_VictoryPrimaryObjectiveCompleted = TriggerCreate("gt_VictoryPrimaryObjectiveCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/553A3312"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1646), 0.0, -1, 10.0, true);
    libVCUI_gf_ShowHideSingularBossBarVoidCampaign(false);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveWarpConduitFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/6CB49B43"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_warpConduit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_runall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC68F5203_g;
    int autoC68F5203_var;
    playergroup auto635DBC49_g;
    int auto635DBC49_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    autoC68F5203_g = gv_enemyPlayerGroup;
    autoC68F5203_var = -1;
    while (true) {
        autoC68F5203_var = PlayerGroupNextPlayer(autoC68F5203_g, autoC68F5203_var);
        if (autoC68F5203_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC68F5203_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC68F5203_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoC68F5203_var, "ZergMissileWeaponsLevel1", 1);
    }
    Wait(240.0, c_timeAI);
    auto635DBC49_g = gv_enemyPlayerGroup;
    auto635DBC49_var = -1;
    while (true) {
        auto635DBC49_var = PlayerGroupNextPlayer(auto635DBC49_g, auto635DBC49_var);
        if (auto635DBC49_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto635DBC49_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto635DBC49_var, "ZergFlyerArmorsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto80002297_g;
    int auto80002297_var;
    playergroup autoF9030FDF_g;
    int autoF9030FDF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(480.0, c_timeAI);
    auto80002297_g = gv_enemyPlayerGroup;
    auto80002297_var = -1;
    while (true) {
        auto80002297_var = PlayerGroupNextPlayer(auto80002297_g, auto80002297_var);
        if (auto80002297_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto80002297_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto80002297_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto80002297_var, "ZergMissileWeaponsLevel2", 1);
    }
    Wait(240.0, c_timeAI);
    autoF9030FDF_g = gv_enemyPlayerGroup;
    autoF9030FDF_var = -1;
    while (true) {
        autoF9030FDF_var = PlayerGroupNextPlayer(autoF9030FDF_g, autoF9030FDF_var);
        if (autoF9030FDF_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoF9030FDF_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoF9030FDF_var, "ZergFlyerArmorsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AttackWavePing(AIWaveGetUnits(EventPlayerWave()));
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/32B14DA8"), null, PointFromId(571));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveWarningQ_Init () {
    gt_AttackWaveWarningQ = TriggerCreate("gt_AttackWaveWarningQ_Func");
    TriggerAddEventPlayerAIWave(gt_AttackWaveWarningQ, gv_pLAYER_02_DOMINION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Templar Warps In
//--------------------------------------------------------------------------------------------------
bool gt_DarkTemplarWarpsIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DarkTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_statDarkTemplarWarped += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkTemplarWarpsIn_Init () {
    gt_DarkTemplarWarpsIn = TriggerCreate("gt_DarkTemplarWarpsIn_Func");
    TriggerAddEventUnitConstructProgress(gt_DarkTemplarWarpsIn, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(gt_DarkTemplarWarpsIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Strike Issued
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalStrikeIssued_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_statOrbitalStrikeCount += 1;
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalStrikeIssued_Init () {
    gt_OrbitalStrikeIssued = TriggerCreate("gt_OrbitalStrikeIssued_Func");
    TriggerAddEventUnitAbility(gt_OrbitalStrikeIssued, null, AbilityCommand("SOAOrbitalStrikeExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Final Thrasher Skipped
//--------------------------------------------------------------------------------------------------
bool gt_AchievementFinalThrasherSkipped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PShakuras01_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementFinalThrasherSkipped_Init () {
    gt_AchievementFinalThrasherSkipped = TriggerCreate("gt_AchievementFinalThrasherSkipped_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mastery - No Thrashers Killed
//--------------------------------------------------------------------------------------------------
bool gt_MasteryNoThrashersKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Mastery_Shakuras01", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasteryNoThrashersKilled_Init () {
    gt_MasteryNoThrashersKilled = TriggerCreate("gt_MasteryNoThrashersKilled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Victory with only Probes And Dark Templars
//--------------------------------------------------------------------------------------------------
bool gt_AchievementVictorywithonlyProbesAndDarkTemplars_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Probe"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "DarkTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievementNonProbesorDarkTemplarsBuilt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementVictorywithonlyProbesAndDarkTemplars_Init () {
    gt_AchievementVictorywithonlyProbesAndDarkTemplars = TriggerCreate("gt_AchievementVictorywithonlyProbesAndDarkTemplars_Func");
    TriggerAddEventUnitTrainProgress(gt_AchievementVictorywithonlyProbesAndDarkTemplars, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Launch Bays - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLaunchBaysCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PShakuras01Primary01");
    gv_objectiveDestroyZergBase4 = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objectiveDestroyZergBase4, 2);
    TriggerExecute(gt_ObjectiveLaunchBaysUpdate, true, false);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLaunchBaysCreate_Init () {
    gt_ObjectiveLaunchBaysCreate = TriggerCreate("gt_ObjectiveLaunchBaysCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Launch Bays - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLaunchBaysComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveLaunchBaysCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras01Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLaunchBaysComplete_Init () {
    gt_ObjectiveLaunchBaysComplete = TriggerCreate("gt_ObjectiveLaunchBaysComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Launch Bays - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLaunchBaysUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveLaunchBaysCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PShakuras01Primary01", gv_objective_LaunchBaysFreed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLaunchBaysUpdate_Init () {
    gt_ObjectiveLaunchBaysUpdate = TriggerCreate("gt_ObjectiveLaunchBaysUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Warp Conduit - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWarpConduitCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PShakuras01Primary02");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWarpConduitCreate_Init () {
    gt_ObjectiveWarpConduitCreate = TriggerCreate("gt_ObjectiveWarpConduitCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Warp Conduit - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWarpConduitComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveWarpConduitCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras01Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWarpConduitComplete_Init () {
    gt_ObjectiveWarpConduitComplete = TriggerCreate("gt_ObjectiveWarpConduitComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Warp Conduit - Failed 
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWarpConduitFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveWarpConduitCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras01Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWarpConduitFailed_Init () {
    gt_ObjectiveWarpConduitFailed = TriggerCreate("gt_ObjectiveWarpConduitFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Archive Cores - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArchiveCoresCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PShakuras01Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    TriggerExecute(gt_ObjectiveArchiveCoresUpdate, true, false);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArchiveCoresCreate_Init () {
    gt_ObjectiveArchiveCoresCreate = TriggerCreate("gt_ObjectiveArchiveCoresCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Archive Cores - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArchiveCoresComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveArchiveCoresCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PShakuras01Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArchiveCoresComplete_Init () {
    gt_ObjectiveArchiveCoresComplete = TriggerCreate("gt_ObjectiveArchiveCoresComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Archive Cores - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveArchiveCoresUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveArchiveCoresCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PShakuras01Bonus01", gv_vaultsFound);
    if ((gv_vaultsFound == gv_vaultsTotal)) {
        TriggerExecute(gt_ObjectiveArchiveCoresComplete, true, true);
        TriggerExecute(gt_TransmissionAllSolariteCollectedQ, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveArchiveCoresUpdate_Init () {
    gt_ObjectiveArchiveCoresUpdate = TriggerCreate("gt_ObjectiveArchiveCoresUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto55A7887D_g;
    int auto55A7887D_u;
    unit auto55A7887D_var;
    unitgroup auto876895D8_g;
    int auto876895D8_u;
    unit auto876895D8_var;
    const int auto7D12FF28_n = 4;
    int auto7D12FF28_i;
    const int auto288F90F8_n = 4;
    int auto288F90F8_i;
    const int auto3C7F7303_n = 4;
    int auto3C7F7303_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PShakuras01_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 0.0);
    Wait(1.0, c_timeGame);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_PauseUnit(UnitFromId(20), true);
    auto55A7887D_g = UnitGroup(null, c_playerAny, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto55A7887D_u = UnitGroupCount(auto55A7887D_g, c_unitCountAll);
    for (;; auto55A7887D_u -= 1) {
        auto55A7887D_var = UnitGroupUnitFromEnd(auto55A7887D_g, auto55A7887D_u);
        if (auto55A7887D_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto55A7887D_var);
        libNtve_gf_ShowHideUnit(auto55A7887D_var, false);
    }
    auto876895D8_g = UnitGroup("DarkTemplar", gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto876895D8_u = UnitGroupCount(auto876895D8_g, c_unitCountAll);
    for (;; auto876895D8_u -= 1) {
        auto876895D8_var = UnitGroupUnitFromEnd(auto876895D8_g, auto876895D8_u);
        if (auto876895D8_var == null) { break; }
        UnitGroupAdd(gv_introDarkTemplar, auto876895D8_var);
        libNtve_gf_ShowHideUnit(auto876895D8_var, false);
    }
    TriggerExecute(gt_ZergP02Wander, true, false);
    for (auto7D12FF28_i = 1; auto7D12FF28_i <= auto7D12FF28_n; auto7D12FF28_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(10)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
    }
    for (auto288F90F8_i = 1; auto288F90F8_i <= auto288F90F8_n; auto288F90F8_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(39)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
    }
    for (auto3C7F7303_i = 1; auto3C7F7303_i <= auto3C7F7303_n; auto3C7F7303_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(40)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8DD53543_g;
    int auto8DD53543_u;
    unit auto8DD53543_var;
    const int autoF369DEF1_n = 4;
    int autoF369DEF1_i;
    const int auto4E3FD024_n = 4;
    int auto4E3FD024_i;
    const int auto69DCBE7F_n = 4;
    int auto69DCBE7F_i;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1617), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(187), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Shakuras01|Line00112", true), c_soundIndexAny)) + 1), -1, 10.0, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(46), gv_pLAYER_01_USER);
    gv_introMinerals[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_introMinerals[1] = FixedToInt(UnitGetPropertyFixed(UnitFromId(3), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[2] = FixedToInt(UnitGetPropertyFixed(UnitFromId(5), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[3] = FixedToInt(UnitGetPropertyFixed(UnitFromId(6), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[4] = FixedToInt(UnitGetPropertyFixed(UnitFromId(8), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[5] = FixedToInt(UnitGetPropertyFixed(UnitFromId(9), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[6] = FixedToInt(UnitGetPropertyFixed(UnitFromId(10), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[7] = FixedToInt(UnitGetPropertyFixed(UnitFromId(11), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[8] = FixedToInt(UnitGetPropertyFixed(UnitFromId(12), c_unitPropResources, c_unitPropCurrent));
    gv_introGas[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    gv_introGas[1] = FixedToInt(UnitGetPropertyFixed(UnitFromId(184), c_unitPropResources, c_unitPropCurrent));
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 15.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 40.0, 1.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00112", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(4.0, c_timeGame);
    gf_ActivateCarrierCrashinRegion(RegionFromId(42));
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(613), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(409), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Shakuras01|Line00113", true), c_soundIndexAny)) - 1), -1, 10.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 1.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00113", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 60.0, 0.5);
    Wait(4.0, c_timeReal);
    libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/B49E88CB"), PointWithOffsetPolar(gv_launchBayLocations[1], 0.5, 90.0));
    gv_launchBayReticules[1] = libNtve_gf_ActorLastCreated();
    gv_launchBayTextTags[1] = TextTagLastCreated();
    TextTagSetPosition(TextTagLastCreated(), PointWithOffsetPolar(gv_launchBayLocations[1], 0.5, 90.0), 0.0);
    TransmissionWait(TransmissionLastSent(), 0.0);
    auto8DD53543_g = gv_introDarkTemplar;
    auto8DD53543_u = UnitGroupCount(auto8DD53543_g, c_unitCountAll);
    for (;; auto8DD53543_u -= 1) {
        auto8DD53543_var = UnitGroupUnitFromEnd(auto8DD53543_g, auto8DD53543_u);
        if (auto8DD53543_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto8DD53543_var, true);
    }
    for (autoF369DEF1_i = 1; autoF369DEF1_i <= autoF369DEF1_n; autoF369DEF1_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(10)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
    }
    for (auto4E3FD024_i = 1; auto4E3FD024_i <= auto4E3FD024_n; auto4E3FD024_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(39)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
    }
    for (auto69DCBE7F_i = 1; auto69DCBE7F_i <= auto69DCBE7F_n; auto69DCBE7F_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(RegionFromId(40)));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(993)), c_orderQueueReplace);
    }
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00115", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeReal);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1620), 0.0, -1, 10.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 15.0, 1.5);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1621), libVCMI_gf_ConvesationLineDuration("pMission_Shakuras01|Line00116"), -1, 10.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto827E65DE_g;
    int auto827E65DE_u;
    unit auto827E65DE_var;
    unitgroup auto2A075459_g;
    int auto2A075459_u;
    unit auto2A075459_var;
    unitgroup auto812F7F81_g;
    int auto812F7F81_u;
    unit auto812F7F81_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto827E65DE_g = gv_cinematicHiddenUnits;
    auto827E65DE_u = UnitGroupCount(auto827E65DE_g, c_unitCountAll);
    for (;; auto827E65DE_u -= 1) {
        auto827E65DE_var = UnitGroupUnitFromEnd(auto827E65DE_g, auto827E65DE_u);
        if (auto827E65DE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto827E65DE_var, true);
    }
    auto2A075459_g = gv_cinematicTempUnits;
    auto2A075459_u = UnitGroupCount(auto2A075459_g, c_unitCountAll);
    for (;; auto2A075459_u -= 1) {
        auto2A075459_var = UnitGroupUnitFromEnd(auto2A075459_g, auto2A075459_u);
        if (auto2A075459_var == null) { break; }
        UnitRemove(auto2A075459_var);
    }
    libNtve_gf_PauseUnit(UnitFromId(20), false);
    if ((gv_cinematicCompleted == false)) {
        auto812F7F81_g = gv_introDarkTemplar;
        auto812F7F81_u = UnitGroupCount(auto812F7F81_g, c_unitCountAll);
        for (;; auto812F7F81_u -= 1) {
            auto812F7F81_var = UnitGroupUnitFromEnd(auto812F7F81_g, auto812F7F81_u);
            if (auto812F7F81_var == null) { break; }
            libNtve_gf_ShowHideUnit(auto812F7F81_var, true);
        }
    }

    UnitSetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(640), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(485), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(640), c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(485), c_unitPropShieldsPercent, 100.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(302)), c_animNameDefault, "Dead", c_animFlagPlayForever, 0.0);
    libNtve_gf_KillModel(gv_launchBayReticules[1]);
    TextTagDestroy(gv_launchBayTextTags[1]);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UnitSetPropertyFixed(UnitFromId(3), c_unitPropResources, gv_introMinerals[1]);
    UnitSetPropertyFixed(UnitFromId(5), c_unitPropResources, gv_introMinerals[2]);
    UnitSetPropertyFixed(UnitFromId(6), c_unitPropResources, gv_introMinerals[3]);
    UnitSetPropertyFixed(UnitFromId(8), c_unitPropResources, gv_introMinerals[4]);
    UnitSetPropertyFixed(UnitFromId(9), c_unitPropResources, gv_introMinerals[5]);
    UnitSetPropertyFixed(UnitFromId(10), c_unitPropResources, gv_introMinerals[6]);
    UnitSetPropertyFixed(UnitFromId(11), c_unitPropResources, gv_introMinerals[7]);
    UnitSetPropertyFixed(UnitFromId(12), c_unitPropResources, gv_introMinerals[8]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals[0]);
    UnitSetPropertyFixed(UnitFromId(184), c_unitPropResources, gv_introGas[1]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_introGas[0]);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(46), gv_pLAYER_01_USER);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1622), lv_fadeDuration, -1, 10.0, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1622)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3CFC539A_g;
    int auto3CFC539A_u;
    unit auto3CFC539A_var;
    unitgroup auto891E2AB2_g;
    int auto891E2AB2_u;
    unit auto891E2AB2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_midSpearOfAdunEnergy = libVCMI_gf_SpearofAdunEnergy(libVCMI_ge_SpearofAdunEnergyType_Absolute);
    libNtve_gf_ShowHideUnit(UnitFromId(755), false);
    auto3CFC539A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto3CFC539A_u = UnitGroupCount(auto3CFC539A_g, c_unitCountAll);
    for (;; auto3CFC539A_u -= 1) {
        auto3CFC539A_var = UnitGroupUnitFromEnd(auto3CFC539A_g, auto3CFC539A_u);
        if (auto3CFC539A_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto3CFC539A_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto3CFC539A_var);
            libNtve_gf_PauseUnit(auto3CFC539A_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_DOMINION, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_02_DOMINION2, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, gv_pLAYER_05_PROTOSS_ALLY, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto891E2AB2_g = gv_cinematicHiddenUnits;
    auto891E2AB2_u = UnitGroupCount(auto891E2AB2_g, c_unitCountAll);
    for (;; auto891E2AB2_u -= 1) {
        auto891E2AB2_var = UnitGroupUnitFromEnd(auto891E2AB2_g, auto891E2AB2_u);
        if (auto891E2AB2_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto891E2AB2_var, false);
    }
    libNtve_gf_ChangeUnitDamage(gv_warpConduit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zergGroup1;
    unitgroup lv_zergGroup2;
    unitgroup lv_zergGroup3;

    // Automatic Variable Declarations
    const int autoCEA75C22_n = 5;
    int autoCEA75C22_i;
    const int autoFD33A20D_n = 1;
    int autoFD33A20D_i;
    const int auto8C0F708F_n = 5;
    int auto8C0F708F_i;
    const int autoEDFB4CDB_n = 1;
    int autoEDFB4CDB_i;
    const int auto8F3D419C_n = 5;
    int auto8F3D419C_i;
    const int auto5C8FF26B_n = 1;
    int auto5C8FF26B_i;
    const int auto81530BF6_ae = 5;
    int auto81530BF6_var;
    unitgroup autoFDB38293_g;
    int autoFDB38293_u;
    unit autoFDB38293_var;

    // Variable Initialization
    lv_zergGroup1 = UnitGroupEmpty();
    lv_zergGroup2 = UnitGroupEmpty();
    lv_zergGroup3 = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(818), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, 0.5);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.5);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00119", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1619), 6.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PShakuras01_Music_CS1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlayForPlayer(SoundLink("Shak1_sfx_ThrasherSpawnFlash", 0), c_maxPlayers, PlayerGroupAll(), 25.0, 0.0);
    gv_midStinger1 = SoundLastPlayed();
    SoundPlayForPlayer(SoundLink("Zerus03_Zurvan_CS_Intro", 0), c_maxPlayers, PlayerGroupAll(), 10.0, 0.0);
    gv_midStinger2 = SoundLastPlayed();
    UnitCreate(1, "VoidThrasher", c_unitCreateIgnorePlacement, gv_pLAYER_04_THRASHER, gv_voidThrashers.lv_location[1], 225.0);
    gv_midThrasher = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_midThrasher);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_midThrasher), c_animNameDefault, "Birth", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    gf_HideTerrainWhileVoidThrasherIsAlive(gv_midThrasher);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 3.0, 1.0, 6.0);
    Wait(6.0, c_timeGame);
    TriggerExecute(gt_MidThrasherBehavior, true, false);
    libNtve_gf_PauseUnit(gv_warpConduit, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(817), 1.0, -1, 10, true);
    Wait(2.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00159", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(819), 4.0, -1, 10, true);
    if ((libVoiC_gf_MissionStatusCheck("PKorhal01", libVoiC_ge_MissionStatus_Completed) == true)) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00173", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv_cinematicCompleted = true;
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    for (autoCEA75C22_i = 1; autoCEA75C22_i <= autoCEA75C22_n; autoCEA75C22_i += 1) {
        UnitCreate(1, "ZerglingBurrowed", 0, gv_pLAYER_02_DOMINION, PointFromId(820), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup1, UnitLastCreated());
    }
    for (autoFD33A20D_i = 1; autoFD33A20D_i <= autoFD33A20D_n; autoFD33A20D_i += 1) {
        UnitCreate(1, "HydraliskBurrowed", 0, gv_pLAYER_02_DOMINION, PointFromId(820), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup1, UnitLastCreated());
    }
    for (auto8C0F708F_i = 1; auto8C0F708F_i <= auto8C0F708F_n; auto8C0F708F_i += 1) {
        UnitCreate(1, "ZerglingBurrowed", 0, gv_pLAYER_02_DOMINION, PointFromId(821), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup2, UnitLastCreated());
    }
    for (autoEDFB4CDB_i = 1; autoEDFB4CDB_i <= autoEDFB4CDB_n; autoEDFB4CDB_i += 1) {
        UnitCreate(1, "HydraliskBurrowed", 0, gv_pLAYER_02_DOMINION, PointFromId(821), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup2, UnitLastCreated());
    }
    for (auto8F3D419C_i = 1; auto8F3D419C_i <= auto8F3D419C_n; auto8F3D419C_i += 1) {
        UnitCreate(1, "ZerglingBurrowed", 0, gv_pLAYER_02_DOMINION, PointFromId(822), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup3, UnitLastCreated());
    }
    for (auto5C8FF26B_i = 1; auto5C8FF26B_i <= auto5C8FF26B_n; auto5C8FF26B_i += 1) {
        UnitCreate(1, "HydraliskBurrowed", 0, gv_pLAYER_02_DOMINION, PointFromId(822), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(lv_zergGroup3, UnitLastCreated());
    }
    UnitGroupAddUnitGroup(gv_midZerg, lv_zergGroup1);
    UnitGroupAddUnitGroup(gv_midZerg, lv_zergGroup2);
    UnitGroupAddUnitGroup(gv_midZerg, lv_zergGroup3);
    TriggerExecute(gt_MidZergUnburrow, true, false);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00151", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00152", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 2.0);
    libVCMI_gf_CreateOrbitalStrikeTarget(1, PointFromId(820));
    Wait(0.35, c_timeGame);
    libVCMI_gf_CreateOrbitalStrikeTarget(2, PointFromId(821));
    Wait(0.35, c_timeGame);
    libVCMI_gf_CreateOrbitalStrikeTarget(3, PointFromId(822));
    Wait(0.5, c_timeGame);
    libVCMI_gf_CreateOrbitalStrikeTarget(4, PointWithOffset(PointFromId(54), -1.0, 0.0));
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1647), 1.5, -1, 10, true);
    Wait(0.5, c_timeGame);
    libVCMI_gf_CreateOrbitalStrikeTarget(5, PointWithOffset(PointFromId(54), 1.0, -1.5));
    Wait(0.5, c_timeGame);
    gv_midUnburrowSafety = true;
    TriggerStop(gt_MidThrasherBehavior);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    CutsceneAddGlobalFilter("Shakuras");
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Mission_SoACalldown_OrbitalStrike.SC2Cutscene", true, true);
    CutsceneRemoveGlobalFilter("Shakuras");
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(819), 1.0, -1, 10, true);
    auto81530BF6_var = 1;
    for ( ; auto81530BF6_var <= auto81530BF6_ae; auto81530BF6_var += 1 ) {
        libVCMI_gf_FireOrbitalStrikeAtTarget(auto81530BF6_var);
        Wait(0.0625, c_timeReal);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_midThrasher), c_animNameDefault, "Stun", 0, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    autoFDB38293_g = gv_midZerg;
    autoFDB38293_u = UnitGroupCount(autoFDB38293_g, c_unitCountAll);
    for (;; autoFDB38293_u -= 1) {
        autoFDB38293_var = UnitGroupUnitFromEnd(autoFDB38293_g, autoFDB38293_u);
        if (autoFDB38293_var == null) { break; }
        UnitKill(autoFDB38293_var);
    }
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 2.0);
    Wait(2.0, c_timeReal);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00160", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 2.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoD44D3F18_g;
    int autoD44D3F18_u;
    unit autoD44D3F18_var;
    unitgroup autoDC66BADF_g;
    int autoDC66BADF_u;
    unit autoDC66BADF_var;
    unitgroup auto3AF2941A_g;
    int auto3AF2941A_u;
    unit auto3AF2941A_var;
    unitgroup autoD79AA6B8_g;
    int autoD79AA6B8_u;
    unit autoD79AA6B8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD44D3F18_g = gv_cinematicTempUnits;
    autoD44D3F18_u = UnitGroupCount(autoD44D3F18_g, c_unitCountAll);
    for (;; autoD44D3F18_u -= 1) {
        autoD44D3F18_var = UnitGroupUnitFromEnd(autoD44D3F18_g, autoD44D3F18_u);
        if (autoD44D3F18_var == null) { break; }
        UnitRemove(autoD44D3F18_var);
    }
    autoDC66BADF_g = gv_cinematicHiddenUnits;
    autoDC66BADF_u = UnitGroupCount(autoDC66BADF_g, c_unitCountAll);
    for (;; autoDC66BADF_u -= 1) {
        autoDC66BADF_var = UnitGroupUnitFromEnd(autoDC66BADF_g, autoDC66BADF_u);
        if (autoDC66BADF_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoDC66BADF_var, true);
    }
    auto3AF2941A_g = gv_cinematicPausedUnits;
    auto3AF2941A_u = UnitGroupCount(auto3AF2941A_g, c_unitCountAll);
    for (;; auto3AF2941A_u -= 1) {
        auto3AF2941A_var = UnitGroupUnitFromEnd(auto3AF2941A_g, auto3AF2941A_u);
        if (auto3AF2941A_var == null) { break; }
        libNtve_gf_PauseUnit(auto3AF2941A_var, false);
    }
    if ((libVoiC_gf_MissionStatusCheck("PKorhal01", libVoiC_ge_MissionStatus_Completed) == false)) {
        UnitSetPropertyFixed(gv_voidThrashers.lv_thrasher[1], c_unitPropShields, (UnitGetPropertyFixed(gv_voidThrashers.lv_thrasher[1], c_unitPropShields, c_unitPropCurrent) - 200.0));
    }

    TriggerStop(gt_MidThrasherBehavior);
    TriggerStop(gt_MidZergUnburrow);
    UnitSetState(gv_voidThrashers.lv_thrasher[1], c_unitStateHidden, false);
    UnitSetState(gv_voidThrashers.lv_thrasher[1], c_unitStateInvulnerable, false);
    UnitSetPosition(gv_voidThrashers.lv_thrasher[1], gv_voidThrashers.lv_location[1], false);
    autoD79AA6B8_g = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(PointFromId(54), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD79AA6B8_u = UnitGroupCount(autoD79AA6B8_g, c_unitCountAll);
    for (;; autoD79AA6B8_u -= 1) {
        autoD79AA6B8_var = UnitGroupUnitFromEnd(autoD79AA6B8_g, autoD79AA6B8_u);
        if (autoD79AA6B8_var == null) { break; }
        UnitSetPosition(autoD79AA6B8_var, RegionRandomPoint(RegionFromId(38)), false);
    }
    libNtve_gf_ChangeUnitDamage(gv_warpConduit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_ShowHideUnit(UnitFromId(755), true);
    gf_HideTerrainWhileVoidThrasherIsAlive(gv_voidThrashers.lv_thrasher[1]);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundStop(gv_midStinger1, true);
    SoundStop(gv_midStinger2, true);
    libVCMI_gf_CleanUpOrbitalStrikeTargets();
    CameraShakeStop(gv_pLAYER_01_USER);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libVCMI_gf_AddMissionTipCampaign("VoidThrasher");
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(1), 6.0, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    if ((gv_midSpearOfAdunEnergy < 150.0)) {
        libVCMI_gf_SetSpearofAdunEnergy((gv_midSpearOfAdunEnergy + 50.0), libVCMI_ge_SpearofAdunEnergyType_Absolute);
    }
    else {
        libVCMI_gf_SetSpearofAdunEnergy(200.0, libVCMI_ge_SpearofAdunEnergyType_Absolute);
    }
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Zerg Unburrow
//--------------------------------------------------------------------------------------------------
bool gt_MidZergUnburrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_shuffledZerg;
    unitgroup lv_unshuffledZerg;
    unit lv_currentZerg;

    // Automatic Variable Declarations
    unitgroup auto270552B9_g;
    int auto270552B9_u;
    unit auto270552B9_var;
    unitgroup auto2B8432B0_g;
    int auto2B8432B0_u;
    unit auto2B8432B0_var;

    // Variable Initialization
    lv_shuffledZerg = UnitGroupEmpty();
    lv_unshuffledZerg = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_unshuffledZerg, gv_midZerg);
    while ((UnitGroupCount(lv_unshuffledZerg, c_unitCountAlive) > 0)) {
        lv_currentZerg = UnitGroupRandomUnit(lv_unshuffledZerg, c_unitCountAlive);
        UnitGroupAdd(lv_shuffledZerg, lv_currentZerg);
        UnitGroupRemove(lv_unshuffledZerg, lv_currentZerg);
    }
    auto270552B9_g = lv_shuffledZerg;
    auto270552B9_u = UnitGroupCount(auto270552B9_g, c_unitCountAll);
    for (;; auto270552B9_u -= 1) {
        auto270552B9_var = UnitGroupUnitFromEnd(auto270552B9_g, auto270552B9_u);
        if (auto270552B9_var == null) { break; }
        if ((UnitGetType(auto270552B9_var) == "HydraliskBurrowed")) {
            UnitGroupRemove(lv_shuffledZerg, auto270552B9_var);
            UnitGroupAdd(lv_shuffledZerg, auto270552B9_var);
            break;
        }

    }
    auto2B8432B0_g = lv_shuffledZerg;
    auto2B8432B0_u = UnitGroupCount(auto2B8432B0_g, c_unitCountAll);
    for (;; auto2B8432B0_u -= 1) {
        auto2B8432B0_var = UnitGroupUnitFromEnd(auto2B8432B0_g, auto2B8432B0_u);
        if (auto2B8432B0_var == null) { break; }
        if ((UnitGetType(auto2B8432B0_var) == "HydraliskBurrowed")) {
            UnitIssueOrder(auto2B8432B0_var, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto2B8432B0_var, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        if ((gv_midUnburrowSafety == false)) {
            Wait(0.3, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidZergUnburrow_Init () {
    gt_MidZergUnburrow = TriggerCreate("gt_MidZergUnburrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Thrasher Behavior
//--------------------------------------------------------------------------------------------------
bool gt_MidThrasherBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_midThrasher, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_warpConduit), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_midThrasher, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_warpConduit), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_midThrasher, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_warpConduit), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    while (true) {
        UnitIssueOrder(gv_midThrasher, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_warpConduit), c_orderQueueReplace);
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidThrasherBehavior_Init () {
    gt_MidThrasherBehavior = TriggerCreate("gt_MidThrasherBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDC45421D_g;
    int autoDC45421D_u;
    unit autoDC45421D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    libVCUI_gf_ShowHideSingularBossBarVoidCampaign(false);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    autoDC45421D_g = UnitGroup("DarkTemplarShuttle", gv_pLAYER_05_PROTOSS_ALLY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC45421D_u = UnitGroupCount(autoDC45421D_g, c_unitCountAll);
    for (;; autoDC45421D_u -= 1) {
        autoDC45421D_var = UnitGroupUnitFromEnd(autoDC45421D_g, autoDC45421D_u);
        if (autoDC45421D_var == null) { break; }
        UnitRemove(autoDC45421D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1625), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PShakuras01_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_CreateUnitforWarpConduit("DarkTemplarShuttle", PointFromId(1624));
    gf_CreateUnitforWarpConduit("DarkTemplarShuttle", PointFromId(608));
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1626), 14.0, -1, 10, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 15.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 1.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00149", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Shakuras01|Line00150", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 3.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_ZergAttackConduitLocation);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_VoidThrasherMissiles_Init();
    gt_StartGameQ_Init();
    gt_DarkTemplarIntroQ_Init();
    gt_TeachingOrbitalStrikeQ_Init();
    gt_TeachingOrbitalStrikeUsed_Init();
    gt_OrbitalStrikeReminderQ_Init();
    gt_WarpConduitBossBar_Init();
    gt_WarpConduitLow50Q_Init();
    gt_WarpConduitLow25Q_Init();
    gt_WarpConduitLow10Q_Init();
    gt_ZergAttackConduitLocation_Init();
    gt_DarkTemplarSafety_Init();
    gt_LaunchBay01Released_Init();
    gt_LaunchBay02Released_Init();
    gt_LaunchBay03Released_Init();
    gt_LaunchBay04Released_Init();
    gt_LaunchBayUpdate_Init();
    gt_TransmissionLaunchBayUpdateQ_Init();
    gt_VoidThrasherIntroQ_Init();
    gt_VoidThrasherIntroShake_Init();
    gt_TransmissionVoidThrasherReturnQ_Init();
    gt_TransmissionVoidThrasherDeathQ_Init();
    gt_VoidThrasherEncounter1_Init();
    gt_VoidThrasherDeath1_Init();
    gt_VoidThrasherSpawn2_Init();
    gt_VoidThrasherEncounter2_Init();
    gt_VoidThrasherDeath2_Init();
    gt_VoidThrasherSpawn3_Init();
    gt_VoidThrasherEncounter3_Init();
    gt_VoidThrasherDeath3_Init();
    gt_VoidThrasherSpawn4_Init();
    gt_VoidThrasherEncounter4_Init();
    gt_VoidThrasherDeath4_Init();
    gt_VoidThrasherSpawn5_Init();
    gt_VoidThrasherEncounter5_Init();
    gt_VoidThrasherDeath5_Init();
    gt_VoidThrasherAttacksScreenShake_Init();
    gt_VaultTimedIntroQ_Init();
    gt_VaultFirstVaultFoundTimedQ_Init();
    gt_VaultDiscoveryIntroQ_Init();
    gt_VaultFirstVaultFoundDiscoveryQ_Init();
    gt_Vault01Activated_Init();
    gt_Vault02Activated_Init();
    gt_Vault03Activated_Init();
    gt_TransmissionAllSolariteCollectedQ_Init();
    gt_Vault02CarrierCrash_Init();
    gt_ZergP02Wander_Init();
    gt_KillLarva_Init();
    gt_TeachingDetectorEnemyUnitsQ_Init();
    gt_OverseerVisionSharing_Init();
    gt_StartOverseerPatrols_Init();
    gt_OverseerPatrolWestCorridor_Init();
    gt_OverseerPatrolThrasher3_Init();
    gt_OverseerPatrolThrasher4_Init();
    gt_OverseerPatrolNorthBO_Init();
    gt_OverseerPatrolThrasher5_Init();
    gt_SporeCrawlerDigIn0102_Init();
    gt_SporeCrawlerDigIn03_Init();
    gt_SporeCrawlerDigIn04_Init();
    gt_SporeCrawlerDigIn05_Init();
    gt_Victory_Init();
    gt_VictorySequence_Init();
    gt_VictoryPrimaryObjectiveCompleted_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_AttackWaveWarningQ_Init();
    gt_DarkTemplarWarpsIn_Init();
    gt_OrbitalStrikeIssued_Init();
    gt_AchievementFinalThrasherSkipped_Init();
    gt_MasteryNoThrashersKilled_Init();
    gt_AchievementVictorywithonlyProbesAndDarkTemplars_Init();
    gt_ObjectiveLaunchBaysCreate_Init();
    gt_ObjectiveLaunchBaysComplete_Init();
    gt_ObjectiveLaunchBaysUpdate_Init();
    gt_ObjectiveWarpConduitCreate_Init();
    gt_ObjectiveWarpConduitComplete_Init();
    gt_ObjectiveWarpConduitFailed_Init();
    gt_ObjectiveArchiveCoresCreate_Init();
    gt_ObjectiveArchiveCoresComplete_Init();
    gt_ObjectiveArchiveCoresUpdate_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidZergUnburrow_Init();
    gt_MidThrasherBehavior_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
