//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Forbidden Weapon
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "ai87A2D632"
include "aiBCFA6D5D"
include "ai57DBC637"
include "ai4A252C2D"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_TALDARIM = 2;
const int gv_pLAYER_03_TALDARIM = 3;
const int gv_pLAYER_04_GLACIUS = 4;
const int gv_pLAYER_05_PLANETCRACKER = 5;
const int gv_displacementBeamPathUBound = 39;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_DisplacementBeam {
    int lv_stage;
    fixed lv_speed;
    unit lv_unit;
    region lv_shakeRegionLarge;
    region lv_shakeRegionSmall;
    int lv_purifierTerminalPing;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_mapMusicTrack;
unit[5] gv_superWarpGates;
playergroup gv_enemyPlayers;
gs_RECORD_DisplacementBeam gv_displacementBeam;
int gv_displacementBeamPathCurrent;
int[41] gv_displacementBeamArrowPings;
bool gv_playerPassedDefensePoint01;
bool gv_playerPassedDefensePoint02;
bool gv_playerPassedDefensePoint03;
bool[6] gv_sentryStasisActivated;
unitgroup gv_sentryIntroAttackWaveGroup;
bool gv_sentryIntroWarpedIn;
unitgroup gv_sentryGatewayGroup;
timer gv_sentryGatewayTimeoutTimer;
unitgroup[7] gv_warpGroups;
int gv_unitsLostToPlanetCracker;
int gv_taldarimGatewaysDestroyed;
bool gv_gatewayAchievementUnlocked;
fixed gv_shieldsRestoredBySentries;
timer gv_masteryAchievementTimer;
int gv_objectiveReachTheTechVault;
int gv_objectiveRescueStalkers;
int gv_objectiveFindRawSolariteProgress;
int gv_objectiveFindRawSolariteProgressMax;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
int[9] gv_introMinerals;
int[2] gv_introGas;
unit gv_introPlanetCracker;
unit gv_victoryWarpPrism;
unitgroup gv_victoryAccessPointUnits;
unit gv_victoryPlanetCracker;
unit gv_victorySentry;
unit gv_victoryZealot;
bool gv_victoryExplosionReady;

void InitGlobals () {
    int init_i;

    gv_enemyPlayers = PlayerGroupEmpty();
    gv_displacementBeam.lv_stage = 1;
    gv_displacementBeam.lv_purifierTerminalPing = c_invalidPingId;
    for (init_i = 0; init_i <= 40; init_i += 1) {
        gv_displacementBeamArrowPings[init_i] = c_invalidPingId;
    }
    gv_sentryIntroAttackWaveGroup = UnitGroupEmpty();
    gv_sentryGatewayGroup = UnitGroupEmpty();
    gv_sentryGatewayTimeoutTimer = TimerCreate();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_warpGroups[init_i] = UnitGroupEmpty();
    }
    gv_masteryAchievementTimer = TimerCreate();
    gv_objectiveReachTheTechVault = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveFindRawSolariteProgressMax = 3;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_victoryAccessPointUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RescueSentryUnits (region lp_cHOSEN_REGION, point lp_tARGET, bool lp_cHOSEN_TRANSMISSION);
void gf_MakeConstructingUnitFaceAngle (unit lp_unit, fixed lp_angle);
abilcmd gf_GetWarpInCommand (string lp_unitType);
void gf_WarpInUnits (int lp_numberOfUnits, string lp_unitType, int lp_chosenPlayer, point lp_spawnLocation);
void gf_DeployWarpPrism (unit lp_warpPrism, int lp_region);
void gf_RawSolaritePickupQ (unit lp_cHOSEN_UNIT);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGameQ;
trigger gt_DisplacementBeamAdvancesQ;
trigger gt_TipReadyQ;
trigger gt_InitDisplacementBeam;
trigger gt_DisplacementBeamController;
trigger gt_SetDisplacementBeamSpeed;
trigger gt_PingDisplacementBeamPathRemaining;
trigger gt_DisplacementBeamScreenShake;
trigger gt_PlayerPassesGlaciusDefensePoint01;
trigger gt_PlayerPassesGlaciusDefensePoint02;
trigger gt_PlayerPassesGlaciusDefensePoint03;
trigger gt_DisplacementBeamReachesGlaciusDefense0;
trigger gt_DisplacementBeamReachesGlaciusDefense1;
trigger gt_DisplacementBeamReachesGlaciusDefense2;
trigger gt_DisplacementBeamReachesGlaciusDefense3;
trigger gt_DisplacementBeamReachesGlaciusDefense4;
trigger gt_DisplacementBeamReachesMainAccessPoint;
trigger gt_PlayerUnitsCloseToDisplacementBeamQ;
trigger gt_PlayerUnitsHitByDisplacementBeamQ;
trigger gt_SentryIntroQ;
trigger gt_SentryUnlockedQ;
trigger gt_SentryGatewaySelectedCleanup;
trigger gt_SentryGatewayDiesCleanup;
trigger gt_SentryCleanupTraining;
trigger gt_SentryCleanupTimeout;
trigger gt_TrackSentryStasis;
trigger gt_TrackSentryStasisQ;
trigger gt_PlayerApproachesP03BaseQ;
trigger gt_PlayerAttacksP03BaseQ;
trigger gt_TaldarimReinforcementA1;
trigger gt_TaldarimReinforcementA2;
trigger gt_TaldarimAmbush;
trigger gt_TaldarimAmbushQ;
trigger gt_TaldarimWarpConstruction;
trigger gt_FinalEncounter;
trigger gt_ForceFieldReminderQ1;
trigger gt_ForceFieldReminderQ2;
trigger gt_ForceFieldReminderQ3;
trigger gt_ForceFieldRevealPylon1;
trigger gt_ForceFieldRevealPylon2;
trigger gt_ForceFieldRevealPylon3;
trigger gt_AIGateUsageOnOffControlFF2;
trigger gt_AIGateUsageOnOffControlFF4;
trigger gt_PylonPoweringForceFieldDies;
trigger gt_DestroyForceFieldPathingBlockersProgress;
trigger gt_DestroyForceFieldPathingBlockersPylonDestroyed;
trigger gt_RawSolariteDiscoverQ;
trigger gt_PickupRawSolarite1;
trigger gt_PickupRawSolarite2;
trigger gt_PickupRawSolarite3;
trigger gt_Checkpoint01;
trigger gt_Checkpoint02;
trigger gt_Checkpoint03EnvironmentShift;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_AchievementUnitLosttoDisplacementBeam;
trigger gt_StatTaldarimGatewaysDestroyed;
trigger gt_AchievementTaldarimGatewaysDestroyed;
trigger gt_StatSentryShieldRestoration;
trigger gt_AchievementDestroyallenemystructures;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryReachTechVaultCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_ObjectiveReachtheTechVaultCreate;
trigger gt_ObjectiveReachtheTechVaultComplete;
trigger gt_ObjectiveReachtheTechVaultFailed;
trigger gt_ObjectiveFindRawSolariteCreate;
trigger gt_ObjectiveFindRawSolariteComplete;
trigger gt_ObjectiveFindRawSolariteUpdate;
trigger gt_ObjectiveFindRawSolariteFailed;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroDestructibles;
trigger gt_IntroMusic;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryDisplacementBeam;
trigger gt_VictoryVaultAnimations;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai87A2D632") { ai87A2D632_start(p); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { aiBCFA6D5D_start(p); }
    if (cai_playerAI[p] == "ai57DBC637") { ai57DBC637_start(p); }
    if (cai_playerAI[p] == "ai4A252C2D") { ai4A252C2D_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87A2D632") { ai87A2D632_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { aiBCFA6D5D_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai57DBC637") { ai57DBC637_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai4A252C2D") { ai4A252C2D_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai87A2D632") { return ai87A2D632_getCustomData(p); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { return aiBCFA6D5D_getCustomData(p); }
    if (cai_playerAI[p] == "ai57DBC637") { return ai57DBC637_getCustomData(p); }
    if (cai_playerAI[p] == "ai4A252C2D") { return ai4A252C2D_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai87A2D632") { return ai87A2D632_getLastWave(p); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { return aiBCFA6D5D_getLastWave(p); }
    if (cai_playerAI[p] == "ai57DBC637") { return ai57DBC637_getLastWave(p); }
    if (cai_playerAI[p] == "ai4A252C2D") { return ai4A252C2D_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87A2D632") { ai87A2D632_waves_run(p, target); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { aiBCFA6D5D_waves_run(p, target); }
    if (cai_playerAI[p] == "ai57DBC637") { ai57DBC637_waves_run(p, target); }
    if (cai_playerAI[p] == "ai4A252C2D") { ai4A252C2D_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87A2D632") { ai87A2D632_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { aiBCFA6D5D_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai57DBC637") { ai57DBC637_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai4A252C2D") { ai4A252C2D_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai87A2D632") { ai87A2D632_waves_stop(); }
    if (ai == "aiBCFA6D5D") { aiBCFA6D5D_waves_stop(); }
    if (ai == "ai57DBC637") { ai57DBC637_waves_stop(); }
    if (ai == "ai4A252C2D") { ai4A252C2D_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87A2D632") { ai87A2D632_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { aiBCFA6D5D_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai57DBC637") { ai57DBC637_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai4A252C2D") { ai4A252C2D_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87A2D632") { ai87A2D632_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { aiBCFA6D5D_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai57DBC637") { ai57DBC637_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai4A252C2D") { ai4A252C2D_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai87A2D632") { return ai87A2D632_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { return aiBCFA6D5D_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai57DBC637") { return ai57DBC637_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai4A252C2D") { return ai4A252C2D_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai87A2D632") { return ai87A2D632_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { return aiBCFA6D5D_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai57DBC637") { return ai57DBC637_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai4A252C2D") { return ai4A252C2D_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai87A2D632") { return ai87A2D632_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiBCFA6D5D") { return aiBCFA6D5D_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai57DBC637") { return ai57DBC637_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai4A252C2D") { return ai4A252C2D_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai87A2D632", 3);
    cai_start("aiBCFA6D5D", 2);
    cai_start("ai57DBC637", 4);
    cai_start("ai4A252C2D", 5);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RescueSentryUnits_Trigger = null;
region auto_gf_RescueSentryUnits_lp_cHOSEN_REGION;
point auto_gf_RescueSentryUnits_lp_tARGET;
bool auto_gf_RescueSentryUnits_lp_cHOSEN_TRANSMISSION;

void gf_RescueSentryUnits (region lp_cHOSEN_REGION, point lp_tARGET, bool lp_cHOSEN_TRANSMISSION) {
    auto_gf_RescueSentryUnits_lp_cHOSEN_REGION = lp_cHOSEN_REGION;
    auto_gf_RescueSentryUnits_lp_tARGET = lp_tARGET;
    auto_gf_RescueSentryUnits_lp_cHOSEN_TRANSMISSION = lp_cHOSEN_TRANSMISSION;

    if (auto_gf_RescueSentryUnits_Trigger == null) {
        auto_gf_RescueSentryUnits_Trigger = TriggerCreate("auto_gf_RescueSentryUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_RescueSentryUnits_Trigger, false, false);
}

bool auto_gf_RescueSentryUnits_TriggerFunc (bool testConds, bool runActions) {
    region lp_cHOSEN_REGION = auto_gf_RescueSentryUnits_lp_cHOSEN_REGION;
    point lp_tARGET = auto_gf_RescueSentryUnits_lp_tARGET;
    bool lp_cHOSEN_TRANSMISSION = auto_gf_RescueSentryUnits_lp_cHOSEN_TRANSMISSION;

    // Automatic Variable Declarations
    unitgroup auto9D2DD649_g;
    int auto9D2DD649_u;
    unit auto9D2DD649_var;
    unitgroup autoAEE0432B_g;
    int autoAEE0432B_u;
    unit autoAEE0432B_var;

    // Implementation
    if ((lp_cHOSEN_TRANSMISSION == true)) {
        TriggerExecute(gt_TrackSentryStasisQ, true, false);
    }

    auto9D2DD649_g = UnitGroup("Sentry", 0, lp_cHOSEN_REGION, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9D2DD649_u = UnitGroupCount(auto9D2DD649_g, c_unitCountAll);
    for (;; auto9D2DD649_u -= 1) {
        auto9D2DD649_var = UnitGroupUnitFromEnd(auto9D2DD649_g, auto9D2DD649_u);
        if (auto9D2DD649_var == null) { break; }
        UnitBehaviorAddPlayer(auto9D2DD649_var, "PurifierStasisEnding", gv_pLAYER_01_USER, 1);
    }
    if ((RegionContainsPoint(RegionCircle(RegionGetCenter(lp_cHOSEN_REGION), 20.0), CameraGetTarget(gv_pLAYER_01_USER)) != true) && (lp_cHOSEN_REGION != RegionFromId(4))) {
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(lp_cHOSEN_REGION), 5.0, Color(100.00, 100.00, 0.00));
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/0ABA819C"), null, lp_tARGET);
    }

    Wait(3.0, c_timeAI);
    autoAEE0432B_g = UnitGroup("Sentry", 0, lp_cHOSEN_REGION, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAEE0432B_u = UnitGroupCount(autoAEE0432B_g, c_unitCountAll);
    for (;; autoAEE0432B_u -= 1) {
        autoAEE0432B_var = UnitGroupUnitFromEnd(autoAEE0432B_g, autoAEE0432B_u);
        if (autoAEE0432B_var == null) { break; }
        libNtve_gf_RescueUnit(autoAEE0432B_var, gv_pLAYER_01_USER, true);
        UnitBehaviorRemove(autoAEE0432B_var, "PurifierStasisLongTerm", 1);
        UnitBehaviorRemove(autoAEE0432B_var, "PurifierStasisEnding", 1);
        if ((lp_tARGET == PointFromId(746))) {
            UnitIssueOrder(autoAEE0432B_var, OrderTargetingPoint(AbilityCommand("move", 0), lp_tARGET), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(autoAEE0432B_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoAEE0432B_var), 2.0, UnitGetFacing(autoAEE0432B_var))), c_orderQueueReplace);
        }
    }
    return true;
}

trigger auto_gf_MakeConstructingUnitFaceAngle_Trigger = null;
unit auto_gf_MakeConstructingUnitFaceAngle_lp_unit;
fixed auto_gf_MakeConstructingUnitFaceAngle_lp_angle;

void gf_MakeConstructingUnitFaceAngle (unit lp_unit, fixed lp_angle) {
    auto_gf_MakeConstructingUnitFaceAngle_lp_unit = lp_unit;
    auto_gf_MakeConstructingUnitFaceAngle_lp_angle = lp_angle;

    if (auto_gf_MakeConstructingUnitFaceAngle_Trigger == null) {
        auto_gf_MakeConstructingUnitFaceAngle_Trigger = TriggerCreate("auto_gf_MakeConstructingUnitFaceAngle_TriggerFunc");
    }

    TriggerExecute(auto_gf_MakeConstructingUnitFaceAngle_Trigger, false, false);
}

bool auto_gf_MakeConstructingUnitFaceAngle_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_MakeConstructingUnitFaceAngle_lp_unit;
    fixed lp_angle = auto_gf_MakeConstructingUnitFaceAngle_lp_angle;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lp_unit) == false)) {
            return true;
        }

        if ((UnitTestState(lp_unit, c_unitStateUnderConstruction) == false)) {
            UnitSetFacing(lp_unit, lp_angle, 0.0625);
            return true;
        }

    }
    return true;
}

abilcmd gf_GetWarpInCommand (string lp_unitType) {
    // Automatic Variable Declarations
    string auto3290B2AA_val;

    // Implementation
    auto3290B2AA_val = lp_unitType;
    if (auto3290B2AA_val == "Zealot") {
        return AbilityCommand("SuperWarpGateTrain", 0);
    }
    else if (auto3290B2AA_val == "Stalker") {
        return AbilityCommand("SuperWarpGateTrain", 1);
    }
    else if (auto3290B2AA_val == "Sentry") {
        return AbilityCommand("SuperWarpGateTrain", 5);
    }
    else if (auto3290B2AA_val == "HighTemplar") {
        return AbilityCommand("SuperWarpGateTrain", 3);
    }
    else if (auto3290B2AA_val == "DarkTemplar") {
        return AbilityCommand("SuperWarpGateTrain", 4);
    }
    else if (auto3290B2AA_val == "Immortal") {
        return AbilityCommand("SuperWarpGateTrain", 2);
    }
    else if (auto3290B2AA_val == "Colossus") {
        return AbilityCommand("SuperWarpGateTrain", 15);
    }
    else if (auto3290B2AA_val == "Phoenix") {
        return AbilityCommand("SuperWarpGateTrain", 7);
    }
    else if (auto3290B2AA_val == "Scout") {
        return AbilityCommand("SuperWarpGateTrain", 14);
    }
    else if (auto3290B2AA_val == "VoidRay") {
        return AbilityCommand("SuperWarpGateTrain", 8);
    }
    else if (auto3290B2AA_val == "Carrier") {
        return AbilityCommand("SuperWarpGateTrain", 6);
    }
    else if (auto3290B2AA_val == "Tempest") {
        return AbilityCommand("SuperWarpGateTrainVoid", 0);
    }
    else {
    }
    return AbilityCommand("SuperWarpGateTrain", 0);
}

trigger auto_gf_WarpInUnits_Trigger = null;
int auto_gf_WarpInUnits_lp_numberOfUnits;
string auto_gf_WarpInUnits_lp_unitType;
int auto_gf_WarpInUnits_lp_chosenPlayer;
point auto_gf_WarpInUnits_lp_spawnLocation;

void gf_WarpInUnits (int lp_numberOfUnits, string lp_unitType, int lp_chosenPlayer, point lp_spawnLocation) {
    auto_gf_WarpInUnits_lp_numberOfUnits = lp_numberOfUnits;
    auto_gf_WarpInUnits_lp_unitType = lp_unitType;
    auto_gf_WarpInUnits_lp_chosenPlayer = lp_chosenPlayer;
    auto_gf_WarpInUnits_lp_spawnLocation = lp_spawnLocation;

    if (auto_gf_WarpInUnits_Trigger == null) {
        auto_gf_WarpInUnits_Trigger = TriggerCreate("auto_gf_WarpInUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpInUnits_Trigger, false, false);
}

bool auto_gf_WarpInUnits_TriggerFunc (bool testConds, bool runActions) {
    int lp_numberOfUnits = auto_gf_WarpInUnits_lp_numberOfUnits;
    string lp_unitType = auto_gf_WarpInUnits_lp_unitType;
    int lp_chosenPlayer = auto_gf_WarpInUnits_lp_chosenPlayer;
    point lp_spawnLocation = auto_gf_WarpInUnits_lp_spawnLocation;

    // Variable Declarations
    int lv_unitIndex;
    abilcmd lv_abilityCommand;

    // Automatic Variable Declarations
    int auto0AC46071_ae;
    const int auto0AC46071_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libVCMI_gf_GameIsOver() == true)) {
        return true;
    }

    if ((lp_chosenPlayer != gv_pLAYER_02_TALDARIM) && (lp_chosenPlayer != gv_pLAYER_03_TALDARIM) && (lp_chosenPlayer != gv_pLAYER_04_GLACIUS)) {
        return true;
    }

    if ((lp_numberOfUnits <= 0)) {
        return true;
    }

    lv_abilityCommand = gf_GetWarpInCommand(lp_unitType);
    auto0AC46071_ae = lp_numberOfUnits;
    lv_unitIndex = 1;
    for ( ; ( (auto0AC46071_ai >= 0 && lv_unitIndex <= auto0AC46071_ae) || (auto0AC46071_ai < 0 && lv_unitIndex >= auto0AC46071_ae) ) ; lv_unitIndex += auto0AC46071_ai ) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((lp_numberOfUnits == 1)) {
            UnitIssueOrder(gv_superWarpGates[lp_chosenPlayer], OrderTargetingPoint(lv_abilityCommand, lp_spawnLocation), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_superWarpGates[lp_chosenPlayer], OrderTargetingPoint(lv_abilityCommand, PointWithOffsetPolar(lp_spawnLocation, 1.5, (lv_unitIndex*(360.0/lp_numberOfUnits)))), c_orderQueueReplace);
        }
        Wait(0.25, c_timeAI);
    }
    return true;
}

trigger auto_gf_DeployWarpPrism_Trigger = null;
unit auto_gf_DeployWarpPrism_lp_warpPrism;
int auto_gf_DeployWarpPrism_lp_region;

void gf_DeployWarpPrism (unit lp_warpPrism, int lp_region) {
    auto_gf_DeployWarpPrism_lp_warpPrism = lp_warpPrism;
    auto_gf_DeployWarpPrism_lp_region = lp_region;

    if (auto_gf_DeployWarpPrism_Trigger == null) {
        auto_gf_DeployWarpPrism_Trigger = TriggerCreate("auto_gf_DeployWarpPrism_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeployWarpPrism_Trigger, false, false);
}

bool auto_gf_DeployWarpPrism_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpPrism = auto_gf_DeployWarpPrism_lp_warpPrism;
    int lp_region = auto_gf_DeployWarpPrism_lp_region;

    // Variable Declarations
    timer lv_warpCooldown;

    // Automatic Variable Declarations
    unitgroup auto1A7887DC_g;
    int auto1A7887DC_u;
    unit auto1A7887DC_var;

    // Variable Initialization
    lv_warpCooldown = TimerCreate();

    // Implementation
    while (true) {
        if (((UnitIsAlive(lp_warpPrism) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(lp_warpPrism, RegionCircle(PointFromName(("Glacius Assault Waypoint " + IntToString(lp_region))), 1.0)) == true)) {
            break;
        }
        else {
            UnitIssueOrder(lp_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Glacius Assault Waypoint " + IntToString(lp_region)))), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    while (true) {
        if (((UnitIsAlive(lp_warpPrism) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((libNtve_gf_UnitInRegion(lp_warpPrism, RegionCircle(PointFromName(("Glacius Assault Destination " + IntToString(lp_region))), 1.0)) == true)) {
            UnitIssueOrder(lp_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
            if ((lp_region <= 4)) {
                auto1A7887DC_g = UnitGroup("PhotonCannon", gv_pLAYER_04_GLACIUS, RegionFromName(("Glacius Assault Region " + IntToString(lp_region))), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                auto1A7887DC_u = UnitGroupCount(auto1A7887DC_g, c_unitCountAll);
                for (;; auto1A7887DC_u -= 1) {
                    auto1A7887DC_var = UnitGroupUnitFromEnd(auto1A7887DC_g, auto1A7887DC_u);
                    if (auto1A7887DC_var == null) { break; }
                    libNtve_gf_ShowHideUnit(auto1A7887DC_var, true);
                    UnitBehaviorAdd(auto1A7887DC_var, "PermanentMindControl", lp_warpPrism, 1);
                    UnitBehaviorRemove(auto1A7887DC_var, "UndergroundNoPad", 1);
                }
            }

            break;
        }
        else {
            UnitIssueOrder(lp_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("Glacius Assault Destination " + IntToString(lp_region)))), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    TimerStart(lv_warpCooldown, 3.0, false, c_timeAI);
    while (true) {
        if (((UnitIsAlive(lp_warpPrism) == false) || (libVCMI_gf_GameIsOver() == true))) {
            return true;
        }

        if ((TimerGetRemaining(lv_warpCooldown) < 1.0) && (UnitGroupCount(gv_warpGroups[lp_region], c_unitCountAlive) < libLotv_gf_DifficultyValueInt2(2, 2, 4, 6)) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_warpPrism), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            TimerStart(lv_warpCooldown, libLotv_gf_DifficultyValueFixed2(12.0, 12.0, 9.0, 6.0), false, c_timeAI);
            if ((lp_region <= 4)) {
                gf_WarpInUnits(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Zealot", gv_pLAYER_02_TALDARIM, PointFromName(("Glacius Assault Warp " + IntToString(lp_region))));
            }
            else {
                gf_WarpInUnits(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Stalker", gv_pLAYER_02_TALDARIM, PointFromName(("Glacius Assault Warp " + IntToString(lp_region))));
            }
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

void gf_RawSolaritePickupQ (unit lp_cHOSEN_UNIT) {
    // Variable Declarations
    int lv_solariteProgressLocal;

    // Automatic Variable Declarations
    int auto23DB7D61_val;

    // Variable Initialization

    // Implementation
    PingDestroy(libHots_gf_PingStoredForUnit(lp_cHOSEN_UNIT, 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lp_cHOSEN_UNIT, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(lp_cHOSEN_UNIT, 1));
    UnitBehaviorAdd(lp_cHOSEN_UNIT, "ObjectiveCollectionBeam", lp_cHOSEN_UNIT, 1);
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateSelectable, false);
    UnitSetState(lp_cHOSEN_UNIT, c_unitStateTargetable, false);
    libVCMI_gf_DisplayMissionObjectiveRewardFloatingText(UnitGetPosition(lp_cHOSEN_UNIT), "PPurifier01Bonus01");
    gv_objectiveFindRawSolariteProgress += 1;
    lv_solariteProgressLocal = gv_objectiveFindRawSolariteProgress;
    TriggerExecute(gt_ObjectiveFindRawSolariteUpdate, true, false);
    if ((gv_objectiveFindRawSolariteProgress >= gv_objectiveFindRawSolariteProgressMax)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveFindRawSolariteComplete, true, false);
    }

    TriggerQueueEnter();
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/2A75545E"), null, lp_cHOSEN_UNIT);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto23DB7D61_val = lv_solariteProgressLocal;
    if (auto23DB7D61_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00045", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto23DB7D61_val == 2) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00104", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto23DB7D61_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00105", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_ULoadCampaignData("PPurifier01");
    TriggerExecute(gt_Init01Technology, true, false);
    libVoiC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_pLAYER_02_TALDARIM, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_TALDARIM, "DarkProtoss", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEFC0DAFC_g;
    int autoEFC0DAFC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_TALDARIM);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_03_TALDARIM);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_TALDARIM, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_GLACIUS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_PLANETCRACKER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_TALDARIM, gv_pLAYER_03_TALDARIM, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_TALDARIM, gv_pLAYER_04_GLACIUS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_TALDARIM, gv_pLAYER_05_PLANETCRACKER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_03_TALDARIM, gv_pLAYER_04_GLACIUS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_03_TALDARIM, gv_pLAYER_05_PLANETCRACKER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_04_GLACIUS, gv_pLAYER_05_PLANETCRACKER, libNtve_ge_AllianceSetting_Enemy);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_pLAYER_04_GLACIUS, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_GLACIUS, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_04_GLACIUS, c_playerStateFoodIgnored, true);
    PlayerModifyPropertyInt(gv_pLAYER_05_PLANETCRACKER, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_05_PLANETCRACKER, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerSetState(gv_pLAYER_05_PLANETCRACKER, c_playerStateFoodIgnored, true);
    autoEFC0DAFC_g = gv_enemyPlayers;
    autoEFC0DAFC_var = -1;
    while (true) {
        autoEFC0DAFC_var = PlayerGroupNextPlayer(autoEFC0DAFC_g, autoEFC0DAFC_var);
        if (autoEFC0DAFC_var < 0) { break; }
        PlayerModifyPropertyInt(autoEFC0DAFC_var, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(autoEFC0DAFC_var, c_playerPropVespene, c_playerPropOperSetTo, 5000);
        PlayerSetState(autoEFC0DAFC_var, c_playerStateFoodIgnored, true);
        PlayerSetState(autoEFC0DAFC_var, c_playerStateFidgetingEnabled, false);
        PlayerSetColorIndex(autoEFC0DAFC_var, 1, true);
    }
    PlayerSetState(gv_pLAYER_04_GLACIUS, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_05_PLANETCRACKER, c_playerStateFidgetingEnabled, false);
    PlayerSetColorIndex(gv_pLAYER_04_GLACIUS, 13, true);
    PlayerSetColorIndex(gv_pLAYER_05_PLANETCRACKER, 1, true);
    libVCMI_gf_PM_DetectionUpgradesApply();
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_01_USER, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_TALDARIM, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_03_TALDARIM, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_04_GLACIUS, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_PLANETCRACKER, "HeroicShieldCleanUp", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD7EA1067_g;
    int autoD7EA1067_u;
    unit autoD7EA1067_var;
    unitgroup auto6D3E8AE1_g;
    int auto6D3E8AE1_u;
    unit auto6D3E8AE1_var;
    unitgroup auto8BC523C9_g;
    int auto8BC523C9_u;
    unit auto8BC523C9_var;
    unitgroup auto62D493B2_g;
    int auto62D493B2_u;
    unit auto62D493B2_var;
    unitgroup autoF86B47EE_g;
    int autoF86B47EE_u;
    unit autoF86B47EE_var;
    unitgroup auto4B4E3375_g;
    int auto4B4E3375_u;
    unit auto4B4E3375_var;
    unitgroup auto7F5B4A0C_g;
    int auto7F5B4A0C_u;
    unit auto7F5B4A0C_var;
    unitgroup auto064B009D_g;
    int auto064B009D_u;
    unit auto064B009D_var;
    unitgroup auto91ED365E_g;
    int auto91ED365E_u;
    unit auto91ED365E_var;
    unitgroup auto810269D5_g;
    int auto810269D5_u;
    unit auto810269D5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    gv_superWarpGates[2] = UnitFromId(794);
    gv_superWarpGates[3] = UnitFromId(687);
    gv_superWarpGates[4] = UnitFromId(688);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(174), true);
    UnitSetState(UnitFromId(174), c_unitStateStatusBar, false);
    UnitSetState(UnitFromId(174), c_unitStateTargetable, false);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(174), "SetMinimapVisibility");
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(488), StringExternal("Param/Value/03B88E92"), StringExternal("Param/Value/64249C29"), null);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(488), "SetMinimapVisibility");
    autoD7EA1067_g = UnitGroup("GlaciusDefenseCannon", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD7EA1067_u = UnitGroupCount(autoD7EA1067_g, c_unitCountAll);
    for (;; autoD7EA1067_u -= 1) {
        autoD7EA1067_var = UnitGroupUnitFromEnd(autoD7EA1067_g, autoD7EA1067_u);
        if (autoD7EA1067_var == null) { break; }
        UnitSetState(autoD7EA1067_var, c_unitStateStatusBar, false);
        libNtve_gf_SendActorMessageToUnit(autoD7EA1067_var, "SetMinimapVisibility");
    }
    auto6D3E8AE1_g = UnitGroup("ProtossWarpDriveUnit", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6D3E8AE1_u = UnitGroupCount(auto6D3E8AE1_g, c_unitCountAll);
    for (;; auto6D3E8AE1_u -= 1) {
        auto6D3E8AE1_var = UnitGroupUnitFromEnd(auto6D3E8AE1_g, auto6D3E8AE1_u);
        if (auto6D3E8AE1_var == null) { break; }
        UnitSetState(auto6D3E8AE1_var, c_unitStateStatusBar, false);
    }
    auto8BC523C9_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8BC523C9_u = UnitGroupCount(auto8BC523C9_g, c_unitCountAll);
    for (;; auto8BC523C9_u -= 1) {
        auto8BC523C9_var = UnitGroupUnitFromEnd(auto8BC523C9_g, auto8BC523C9_u);
        if (auto8BC523C9_var == null) { break; }
        UnitBehaviorAddPlayer(auto8BC523C9_var, "PurifierStasisLongTerm", gv_pLAYER_01_USER, 1);
        UnitSetOwner(auto8BC523C9_var, 0, true);
    }
    auto62D493B2_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto62D493B2_u = UnitGroupCount(auto62D493B2_g, c_unitCountAll);
    for (;; auto62D493B2_u -= 1) {
        auto62D493B2_var = UnitGroupUnitFromEnd(auto62D493B2_g, auto62D493B2_u);
        if (auto62D493B2_var == null) { break; }
        UnitBehaviorAddPlayer(auto62D493B2_var, "PurifierStasisLongTerm", gv_pLAYER_01_USER, 1);
        UnitSetOwner(auto62D493B2_var, 0, true);
    }
    autoF86B47EE_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF86B47EE_u = UnitGroupCount(autoF86B47EE_g, c_unitCountAll);
    for (;; autoF86B47EE_u -= 1) {
        autoF86B47EE_var = UnitGroupUnitFromEnd(autoF86B47EE_g, autoF86B47EE_u);
        if (autoF86B47EE_var == null) { break; }
        UnitBehaviorAddPlayer(autoF86B47EE_var, "PurifierStasisLongTerm", gv_pLAYER_01_USER, 1);
        UnitSetOwner(autoF86B47EE_var, 0, true);
    }
    auto4B4E3375_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B4E3375_u = UnitGroupCount(auto4B4E3375_g, c_unitCountAll);
    for (;; auto4B4E3375_u -= 1) {
        auto4B4E3375_var = UnitGroupUnitFromEnd(auto4B4E3375_g, auto4B4E3375_u);
        if (auto4B4E3375_var == null) { break; }
        UnitBehaviorAddPlayer(auto4B4E3375_var, "PurifierStasisLongTerm", gv_pLAYER_01_USER, 1);
        UnitSetOwner(auto4B4E3375_var, 0, true);
    }
    auto7F5B4A0C_g = UnitGroup(null, gv_pLAYER_04_GLACIUS, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7F5B4A0C_u = UnitGroupCount(auto7F5B4A0C_g, c_unitCountAll);
    for (;; auto7F5B4A0C_u -= 1) {
        auto7F5B4A0C_var = UnitGroupUnitFromEnd(auto7F5B4A0C_g, auto7F5B4A0C_u);
        if (auto7F5B4A0C_var == null) { break; }
        UnitBehaviorAddPlayer(auto7F5B4A0C_var, "UndergroundNoPad", gv_pLAYER_01_USER, 1);
        libNtve_gf_ShowHideUnit(auto7F5B4A0C_var, false);
    }
    auto064B009D_g = UnitGroup(null, gv_pLAYER_04_GLACIUS, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto064B009D_u = UnitGroupCount(auto064B009D_g, c_unitCountAll);
    for (;; auto064B009D_u -= 1) {
        auto064B009D_var = UnitGroupUnitFromEnd(auto064B009D_g, auto064B009D_u);
        if (auto064B009D_var == null) { break; }
        UnitBehaviorAddPlayer(auto064B009D_var, "UndergroundNoPad", gv_pLAYER_01_USER, 1);
        libNtve_gf_ShowHideUnit(auto064B009D_var, false);
    }
    auto91ED365E_g = UnitGroup(null, gv_pLAYER_04_GLACIUS, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto91ED365E_u = UnitGroupCount(auto91ED365E_g, c_unitCountAll);
    for (;; auto91ED365E_u -= 1) {
        auto91ED365E_var = UnitGroupUnitFromEnd(auto91ED365E_g, auto91ED365E_u);
        if (auto91ED365E_var == null) { break; }
        UnitBehaviorAddPlayer(auto91ED365E_var, "UndergroundNoPad", gv_pLAYER_01_USER, 1);
        libNtve_gf_ShowHideUnit(auto91ED365E_var, false);
    }
    auto810269D5_g = UnitGroup(null, gv_pLAYER_04_GLACIUS, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto810269D5_u = UnitGroupCount(auto810269D5_g, c_unitCountAll);
    for (;; auto810269D5_u -= 1) {
        auto810269D5_var = UnitGroupUnitFromEnd(auto810269D5_g, auto810269D5_u);
        if (auto810269D5_var == null) { break; }
        UnitBehaviorAddPlayer(auto810269D5_var, "UndergroundNoPad", gv_pLAYER_01_USER, 1);
        libNtve_gf_ShowHideUnit(auto810269D5_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PPurifier01_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_PPurifier01_Rain_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAE8119D0_g;
    int autoAE8119D0_u;
    unit autoAE8119D0_var;
    unitgroup auto57A67B38_g;
    int auto57A67B38_u;
    unit auto57A67B38_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("00");
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal PurifierBeamImpact", "OrbitalMegaDeathBeam_ImpactTrail", RegionFromId(75));
    libLbty_gf_AutoRevealRegion(RegionFromId(47), RegionFromId(47), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(48), RegionFromId(48), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(49), RegionFromId(49), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(50), RegionFromId(50), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(51), RegionFromId(51), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(22), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(16), RegionFromId(16), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(27), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(9), RegionFromId(9), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(13), RegionFromId(13), gv_pLAYER_01_USER);
    autoAE8119D0_g = UnitGroup("NaturalMinerals", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAE8119D0_u = UnitGroupCount(autoAE8119D0_g, c_unitCountAll);
    for (;; autoAE8119D0_u -= 1) {
        autoAE8119D0_var = UnitGroupUnitFromEnd(autoAE8119D0_g, autoAE8119D0_u);
        if (autoAE8119D0_var == null) { break; }
        UnitSetPropertyFixed(autoAE8119D0_var, c_unitPropHeight, 0.1);
    }
    auto57A67B38_g = UnitGroup("GasCanisterProtoss", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto57A67B38_u = UnitGroupCount(auto57A67B38_g, c_unitCountAll);
    for (;; auto57A67B38_u -= 1) {
        auto57A67B38_var = UnitGroupUnitFromEnd(auto57A67B38_g, auto57A67B38_u);
        if (auto57A67B38_var == null) { break; }
        UnitSetPropertyFixed(auto57A67B38_var, c_unitPropHeight, 0.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto209AD56B_g;
    int auto209AD56B_var;
    playergroup autoD557E76C_g;
    int autoD557E76C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_displacementBeam.lv_speed = libLotv_gf_DifficultyValueFixed2(0.2, 0.2, 0.225, 0.25);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerEnable(gt_PlayerApproachesP03BaseQ, false);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        auto209AD56B_g = gv_enemyPlayers;
        auto209AD56B_var = -1;
        while (true) {
            auto209AD56B_var = PlayerGroupNextPlayer(auto209AD56B_g, auto209AD56B_var);
            if (auto209AD56B_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto209AD56B_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto209AD56B_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto209AD56B_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto209AD56B_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto209AD56B_var, "ProtossShieldsLevel1", 1);
        }
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        autoD557E76C_g = gv_enemyPlayers;
        autoD557E76C_var = -1;
        while (true) {
            autoD557E76C_var = PlayerGroupNextPlayer(autoD557E76C_g, autoD557E76C_var);
            if (autoD557E76C_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoD557E76C_var, "ExtendedThermalLance", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("DisplacementBeam");
    libVCMI_gf_AddMissionTipCampaign("Sentry");
    libVCMI_gf_AddMissionTipCampaign("ShieldRecharge");
    libVCMI_gf_AddMissionTipCampaign("GuardianShield");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Sentry", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("WarpPrismPhasing", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("WarpPrism", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("ShieldBattery", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("PhotonCannon", false, gv_pLAYER_01_USER);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libVoiC_gf_AddUnitTypeToUnitHelpPanel("Archon", false, gv_pLAYER_01_USER);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/1465D07C"), null, PointFromId(1));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionFromId(8), gv_pLAYER_01_USER);
    TimerStart(gv_masteryAchievementTimer, 660.0, false, c_timeAI);
    TriggerExecute(gt_InitDisplacementBeam, true, false);
    TriggerExecute(gt_DisplacementBeamAdvancesQ, true, false);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveReachtheTechVaultCreate, true, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E22C2796"), null, UnitGetPosition(UnitFromId(488)));
    if ((UnitIsAlive(UnitFromId(488)) == true)) {
        libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(174)), StringExternal("Param/Value/1E456CB4"));
        gv_displacementBeam.lv_purifierTerminalPing = PingLastCreated();
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(174)), 6.0), 8.0, false);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Displacement Beam Advances Q
//--------------------------------------------------------------------------------------------------
bool gt_DisplacementBeamAdvancesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(10.0, c_timeAI);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4BC2D121"), null, PointFromId(76));
    TriggerExecute(gt_PingDisplacementBeamPathRemaining, true, false);
    Wait(2.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplacementBeamAdvancesQ_Init () {
    gt_DisplacementBeamAdvancesQ = TriggerCreate("gt_DisplacementBeamAdvancesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Displacement Beam
//--------------------------------------------------------------------------------------------------
bool gt_InitDisplacementBeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetCrackerPurifierUnit", 0, gv_pLAYER_05_PLANETCRACKER, PointFromId(76));
    gv_displacementBeam.lv_unit = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F117EEC3"));
    UnitSetState(gv_displacementBeam.lv_unit, c_unitStateSelectable, false);
    libNtve_gf_ShareVisionofUnit(gv_displacementBeam.lv_unit, true, gv_pLAYER_01_USER);
    UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, gv_displacementBeam.lv_speed);
    UnitBehaviorRemove(gv_displacementBeam.lv_unit, "PlanetCrackerPurifierFiring", 1);
    gv_displacementBeam.lv_shakeRegionLarge = RegionFromId(10);
    gv_displacementBeam.lv_shakeRegionSmall = RegionFromId(24);
    RegionAttachToUnit(gv_displacementBeam.lv_shakeRegionLarge, gv_displacementBeam.lv_unit, Point(0.0, 0.0));
    RegionAttachToUnit(gv_displacementBeam.lv_shakeRegionSmall, gv_displacementBeam.lv_unit, Point(0.0, 0.0));
    RegionAttachToUnit(RegionFromId(65), gv_displacementBeam.lv_unit, Point(0.0, 0.0));
    TriggerExecute(gt_DisplacementBeamScreenShake, true, false);
    Wait(10.0, c_timeAI);
    UnitKill(UnitFromId(10));
    TriggerExecute(gt_DisplacementBeamController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitDisplacementBeam_Init () {
    gt_InitDisplacementBeam = TriggerCreate("gt_InitDisplacementBeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Displacement Beam Controller
//--------------------------------------------------------------------------------------------------
bool gt_DisplacementBeamController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_currentPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPoint = PointFromId(109);

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((libVCMI_gf_GameIsOver() == true) || (UnitIsAlive(gv_displacementBeam.lv_unit) == false))) {
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(gv_displacementBeam.lv_unit), lv_currentPoint) < 0.25) && (gv_displacementBeamPathCurrent < gv_displacementBeamPathUBound)) {
            gv_displacementBeamPathCurrent += 1;
        }

        if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
            TriggerExecute(gt_SetDisplacementBeamSpeed, true, false);
        }

        lv_currentPoint = PointFromName(("Planet Cracker Line " + IntToString(gv_displacementBeamPathCurrent)));
        UnitIssueOrder(gv_displacementBeam.lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_currentPoint), c_orderQueueReplace);
        if ((gv_displacementBeamArrowPings[gv_displacementBeamPathCurrent] != c_invalidPingId)) {
            PingDestroy(gv_displacementBeamArrowPings[gv_displacementBeamPathCurrent]);
            gv_displacementBeamArrowPings[gv_displacementBeamPathCurrent] = c_invalidPingId;
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplacementBeamController_Init () {
    gt_DisplacementBeamController = TriggerCreate("gt_DisplacementBeamController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Displacement Beam Speed
//--------------------------------------------------------------------------------------------------
bool gt_SetDisplacementBeamSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB3C91DF0_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB3C91DF0_val = gv_displacementBeam.lv_stage;
    if (autoB3C91DF0_val == 1) {
        if ((gv_playerPassedDefensePoint03 == true)) {
            UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed + 0.3));
        }
        else {
            if ((gv_playerPassedDefensePoint02 == true)) {
                UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed + 0.2));
            }
            else {
                if ((gv_playerPassedDefensePoint01 == true)) {
                    UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed + 0.1));
                }
                else {
                    UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, gv_displacementBeam.lv_speed);
                }
            }
        }
    }
    else if (autoB3C91DF0_val == 2) {
        if ((gv_playerPassedDefensePoint03 == true)) {
            UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed + 0.2));
        }
        else {
            if ((gv_playerPassedDefensePoint02 == true)) {
                UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed + 0.1));
            }
            else {
                if ((gv_playerPassedDefensePoint01 == true)) {
                    UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, gv_displacementBeam.lv_speed);
                }
                else {
                    UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed - 0.075));
                }
            }
        }
    }
    else if (autoB3C91DF0_val == 3) {
        if ((gv_playerPassedDefensePoint03 == true)) {
            UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed + 0.1));
        }
        else {
            if ((gv_playerPassedDefensePoint02 == true)) {
                UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, gv_displacementBeam.lv_speed);
            }
            else {
                if ((gv_playerPassedDefensePoint01 == true)) {
                    UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed - 0.075));
                }
                else {
                    UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed - 0.15));
                }
            }
        }
    }
    else if (autoB3C91DF0_val == 4) {
        if ((gv_playerPassedDefensePoint03 == true)) {
            UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, gv_displacementBeam.lv_speed);
        }
        else {
            if ((gv_playerPassedDefensePoint02 == true)) {
                UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed - 0.075));
            }
            else {
                UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed - 0.15));
            }
        }
    }
    else if (autoB3C91DF0_val == 5) {
        if ((gv_playerPassedDefensePoint03 == true)) {
            UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed - 0.075));
        }
        else {
            UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, (gv_displacementBeam.lv_speed - 0.15));
        }
    }
    else {
        UnitSetPropertyFixed(gv_displacementBeam.lv_unit, c_unitPropMovementSpeed, gv_displacementBeam.lv_speed);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetDisplacementBeamSpeed_Init () {
    gt_SetDisplacementBeamSpeed = TriggerCreate("gt_SetDisplacementBeamSpeed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Displacement Beam Path Remaining
//--------------------------------------------------------------------------------------------------
bool gt_PingDisplacementBeamPathRemaining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_start;
    int lv_end;
    int lv_beamPathIndex;

    // Automatic Variable Declarations
    int auto9BA1DBA7_ae;
    const int auto9BA1DBA7_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_start = gv_displacementBeamPathCurrent;
    lv_end = (gv_displacementBeamPathUBound - 1);
    auto9BA1DBA7_ae = lv_end;
    lv_beamPathIndex = lv_start;
    for ( ; ( (auto9BA1DBA7_ai >= 0 && lv_beamPathIndex <= auto9BA1DBA7_ae) || (auto9BA1DBA7_ai < 0 && lv_beamPathIndex >= auto9BA1DBA7_ae) ) ; lv_beamPathIndex += auto9BA1DBA7_ai ) {
        if ((PointFromName(("Planet Cracker Line " + IntToString(lv_beamPathIndex))) != null)) {
            PingCreate(PlayerGroupAll(), "PingArrow", PointFromName(("Planet Cracker Line " + IntToString(lv_beamPathIndex))), ColorWithAlpha(61.57, 38.43, 38.43, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.5);
            gv_displacementBeamArrowPings[lv_beamPathIndex] = PingLastCreated();
        }

        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingDisplacementBeamPathRemaining_Init () {
    gt_PingDisplacementBeamPathRemaining = TriggerCreate("gt_PingDisplacementBeamPathRemaining_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Displacement Beam Screen Shake
//--------------------------------------------------------------------------------------------------
bool gt_DisplacementBeamScreenShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_shakeCooldownSmallRegion;
    timer lv_shakeCooldownLargeRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_shakeCooldownSmallRegion = TimerCreate();
    lv_shakeCooldownLargeRegion = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(gv_displacementBeam.lv_unit) == true) && (RegionContainsPoint(gv_displacementBeam.lv_shakeRegionSmall, CameraGetTarget(gv_pLAYER_01_USER)) == true) && (TimerGetRemaining(lv_shakeCooldownSmallRegion) < 0.5)) {
            CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 0.0, 0.5, 5.0);
            TimerStart(lv_shakeCooldownSmallRegion, 5.0, false, c_timeGame);
            TimerStart(lv_shakeCooldownLargeRegion, 0.0, false, c_timeGame);
        }
        else {
            if ((UnitIsAlive(gv_displacementBeam.lv_unit) == true) && (RegionContainsPoint(gv_displacementBeam.lv_shakeRegionSmall, CameraGetTarget(gv_pLAYER_01_USER)) == false) && (RegionContainsPoint(gv_displacementBeam.lv_shakeRegionLarge, CameraGetTarget(gv_pLAYER_01_USER)) == true) && (TimerGetRemaining(lv_shakeCooldownLargeRegion) < 0.5)) {
                CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 4.0, 4.0, 5.0);
                TimerStart(lv_shakeCooldownLargeRegion, 5.0, false, c_timeGame);
                TimerStart(lv_shakeCooldownSmallRegion, 0.0, false, c_timeGame);
            }
            else {
                if ((RegionContainsPoint(gv_displacementBeam.lv_shakeRegionSmall, CameraGetTarget(gv_pLAYER_01_USER)) == false) && (RegionContainsPoint(gv_displacementBeam.lv_shakeRegionLarge, CameraGetTarget(gv_pLAYER_01_USER)) == false) && ((TimerGetRemaining(lv_shakeCooldownLargeRegion) > 1) || (TimerGetRemaining(lv_shakeCooldownSmallRegion) > 1))) {
                    CameraShakeStop(gv_pLAYER_01_USER);
                    TimerStart(lv_shakeCooldownLargeRegion, 0.0, false, c_timeGame);
                    TimerStart(lv_shakeCooldownSmallRegion, 0.0, false, c_timeGame);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplacementBeamScreenShake_Init () {
    gt_DisplacementBeamScreenShake = TriggerCreate("gt_DisplacementBeamScreenShake_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Passes Glacius Defense Point 01
//--------------------------------------------------------------------------------------------------
bool gt_PlayerPassesGlaciusDefensePoint01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerPassedDefensePoint01 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerPassesGlaciusDefensePoint01_Init () {
    gt_PlayerPassesGlaciusDefensePoint01 = TriggerCreate("gt_PlayerPassesGlaciusDefensePoint01_Func");
    TriggerAddEventUnitRegion(gt_PlayerPassesGlaciusDefensePoint01, null, RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Passes Glacius Defense Point 02
//--------------------------------------------------------------------------------------------------
bool gt_PlayerPassesGlaciusDefensePoint02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerPassedDefensePoint02 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerPassesGlaciusDefensePoint02_Init () {
    gt_PlayerPassesGlaciusDefensePoint02 = TriggerCreate("gt_PlayerPassesGlaciusDefensePoint02_Func");
    TriggerAddEventUnitRegion(gt_PlayerPassesGlaciusDefensePoint02, null, RegionFromId(55), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Passes Glacius Defense Point 03
//--------------------------------------------------------------------------------------------------
bool gt_PlayerPassesGlaciusDefensePoint03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerPassedDefensePoint03 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerPassesGlaciusDefensePoint03_Init () {
    gt_PlayerPassesGlaciusDefensePoint03 = TriggerCreate("gt_PlayerPassesGlaciusDefensePoint03_Func");
    TriggerAddEventUnitRegion(gt_PlayerPassesGlaciusDefensePoint03, null, RegionFromId(56), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Displacement Beam Reaches Glacius Defense 0
//--------------------------------------------------------------------------------------------------
bool gt_DisplacementBeamReachesGlaciusDefense0_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC2E6540A_g;
    int autoC2E6540A_u;
    unit autoC2E6540A_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventUnit() == gv_displacementBeam.lv_unit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    autoC2E6540A_g = UnitGroup("GlaciusDefenseCannon", c_playerAny, RegionFromId(77), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC2E6540A_u = UnitGroupCount(autoC2E6540A_g, c_unitCountAll);
    for (;; autoC2E6540A_u -= 1) {
        autoC2E6540A_var = UnitGroupUnitFromEnd(autoC2E6540A_g, autoC2E6540A_u);
        if (autoC2E6540A_var == null) { break; }
        libNtve_gf_ChangeUnitDamage(autoC2E6540A_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplacementBeamReachesGlaciusDefense0_Init () {
    gt_DisplacementBeamReachesGlaciusDefense0 = TriggerCreate("gt_DisplacementBeamReachesGlaciusDefense0_Func");
    TriggerAddEventUnitRegion(gt_DisplacementBeamReachesGlaciusDefense0, null, RegionFromId(77), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Displacement Beam Reaches Glacius Defense 1
//--------------------------------------------------------------------------------------------------
bool gt_DisplacementBeamReachesGlaciusDefense1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;

    // Automatic Variable Declarations
    unitgroup autoDB48995D_g;
    int autoDB48995D_u;
    unit autoDB48995D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventUnit() == gv_displacementBeam.lv_unit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    autoDB48995D_g = UnitGroup("GlaciusDefenseCannon", c_playerAny, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDB48995D_u = UnitGroupCount(autoDB48995D_g, c_unitCountAll);
    for (;; autoDB48995D_u -= 1) {
        autoDB48995D_var = UnitGroupUnitFromEnd(autoDB48995D_g, autoDB48995D_u);
        if (autoDB48995D_var == null) { break; }
        lv_spawnPoint = UnitGetPosition(autoDB48995D_var);
        libNtve_gf_ChangeUnitDamage(autoDB48995D_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
    }
    gv_displacementBeam.lv_stage = 2;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplacementBeamReachesGlaciusDefense1_Init () {
    gt_DisplacementBeamReachesGlaciusDefense1 = TriggerCreate("gt_DisplacementBeamReachesGlaciusDefense1_Func");
    TriggerAddEventUnitRegion(gt_DisplacementBeamReachesGlaciusDefense1, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Displacement Beam Reaches Glacius Defense 2
//--------------------------------------------------------------------------------------------------
bool gt_DisplacementBeamReachesGlaciusDefense2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;

    // Automatic Variable Declarations
    unitgroup auto5F37FAB8_g;
    int auto5F37FAB8_u;
    unit auto5F37FAB8_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventUnit() == gv_displacementBeam.lv_unit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    auto5F37FAB8_g = UnitGroup("GlaciusDefenseCannon", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5F37FAB8_u = UnitGroupCount(auto5F37FAB8_g, c_unitCountAll);
    for (;; auto5F37FAB8_u -= 1) {
        auto5F37FAB8_var = UnitGroupUnitFromEnd(auto5F37FAB8_g, auto5F37FAB8_u);
        if (auto5F37FAB8_var == null) { break; }
        lv_spawnPoint = UnitGetPosition(auto5F37FAB8_var);
        libNtve_gf_ChangeUnitDamage(auto5F37FAB8_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
    }
    gv_displacementBeam.lv_stage = 3;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplacementBeamReachesGlaciusDefense2_Init () {
    gt_DisplacementBeamReachesGlaciusDefense2 = TriggerCreate("gt_DisplacementBeamReachesGlaciusDefense2_Func");
    TriggerAddEventUnitRegion(gt_DisplacementBeamReachesGlaciusDefense2, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Displacement Beam Reaches Glacius Defense 3
//--------------------------------------------------------------------------------------------------
bool gt_DisplacementBeamReachesGlaciusDefense3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;

    // Automatic Variable Declarations
    unitgroup auto1E0B7E35_g;
    int auto1E0B7E35_u;
    unit auto1E0B7E35_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventUnit() == gv_displacementBeam.lv_unit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    auto1E0B7E35_g = UnitGroup("GlaciusDefenseCannon", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E0B7E35_u = UnitGroupCount(auto1E0B7E35_g, c_unitCountAll);
    for (;; auto1E0B7E35_u -= 1) {
        auto1E0B7E35_var = UnitGroupUnitFromEnd(auto1E0B7E35_g, auto1E0B7E35_u);
        if (auto1E0B7E35_var == null) { break; }
        lv_spawnPoint = UnitGetPosition(auto1E0B7E35_var);
        libNtve_gf_ChangeUnitDamage(auto1E0B7E35_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
    }
    gv_displacementBeam.lv_stage = 4;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplacementBeamReachesGlaciusDefense3_Init () {
    gt_DisplacementBeamReachesGlaciusDefense3 = TriggerCreate("gt_DisplacementBeamReachesGlaciusDefense3_Func");
    TriggerAddEventUnitRegion(gt_DisplacementBeamReachesGlaciusDefense3, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Displacement Beam Reaches Glacius Defense 4
//--------------------------------------------------------------------------------------------------
bool gt_DisplacementBeamReachesGlaciusDefense4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;

    // Automatic Variable Declarations
    unitgroup autoD9576ED0_g;
    int autoD9576ED0_u;
    unit autoD9576ED0_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventUnit() == gv_displacementBeam.lv_unit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    autoD9576ED0_g = UnitGroup("GlaciusDefenseCannon", c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD9576ED0_u = UnitGroupCount(autoD9576ED0_g, c_unitCountAll);
    for (;; autoD9576ED0_u -= 1) {
        autoD9576ED0_var = UnitGroupUnitFromEnd(autoD9576ED0_g, autoD9576ED0_u);
        if (autoD9576ED0_var == null) { break; }
        lv_spawnPoint = UnitGetPosition(autoD9576ED0_var);
        libNtve_gf_ChangeUnitDamage(autoD9576ED0_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
    }
    gv_displacementBeam.lv_stage = 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplacementBeamReachesGlaciusDefense4_Init () {
    gt_DisplacementBeamReachesGlaciusDefense4 = TriggerCreate("gt_DisplacementBeamReachesGlaciusDefense4_Func");
    TriggerAddEventUnitRegion(gt_DisplacementBeamReachesGlaciusDefense4, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Displacement Beam Reaches Main Access Point
//--------------------------------------------------------------------------------------------------
bool gt_DisplacementBeamReachesMainAccessPoint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv_displacementBeam.lv_unit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    if ((libVCMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
        TriggerExecute(gt_ObjectiveReachtheTechVaultFailed, true, false);
        TriggerStop(gt_DisplacementBeamScreenShake);
        CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 3.0);
        UnitKill(UnitFromId(174));
        SoundPlayForPlayer(SoundLink("PPurifier01_VictoryExplosion", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeGame);
        UnitKill(gv_displacementBeam.lv_unit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplacementBeamReachesMainAccessPoint_Init () {
    gt_DisplacementBeamReachesMainAccessPoint = TriggerCreate("gt_DisplacementBeamReachesMainAccessPoint_Func");
    TriggerAddEventUnitRegion(gt_DisplacementBeamReachesMainAccessPoint, null, RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Close To Displacement Beam Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsCloseToDisplacementBeamQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/5197A6AD"), null, UnitGetPosition(gv_displacementBeam.lv_unit));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_displacementBeam.lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsCloseToDisplacementBeamQ_Init () {
    gt_PlayerUnitsCloseToDisplacementBeamQ = TriggerCreate("gt_PlayerUnitsCloseToDisplacementBeamQ_Func");
    TriggerAddEventUnitRegion(gt_PlayerUnitsCloseToDisplacementBeamQ, null, RegionFromId(65), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Hit By Displacement Beam Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsHitByDisplacementBeamQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/88F64DFC"), null, UnitGetPosition(gv_displacementBeam.lv_unit));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_displacementBeam.lv_unit), 5.0, Color(0.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(60.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsHitByDisplacementBeamQ_Init () {
    gt_PlayerUnitsHitByDisplacementBeamQ = TriggerCreate("gt_PlayerUnitsHitByDisplacementBeamQ_Func");
    TriggerAddEventUnitDamaged(gt_PlayerUnitsHitByDisplacementBeamQ, null, c_unitDamageTypeAny, c_unitDamageEither, "PlanetCrackerPurifierDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_SentryIntroQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_invisiblePylon;
    revealer lv_revealer;

    // Automatic Variable Declarations
    unitgroup auto036E766F_g;
    int auto036E766F_u;
    unit auto036E766F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(60), 3.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/19B4FB6D"), null, PointFromId(60));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(5));
    lv_revealer = VisRevealerLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisiblePylon", c_unitCreateIgnorePlacement, gv_pLAYER_02_TALDARIM, PointFromId(44));
    lv_invisiblePylon = UnitLastCreated();
    Wait(0.5, c_timeAI);
    gf_WarpInUnits(1, "Stalker", gv_pLAYER_02_TALDARIM, PointFromId(44));
    Wait(0.25, c_timeAI);
    gf_WarpInUnits(1, "Zealot", gv_pLAYER_02_TALDARIM, PointFromId(45));
    Wait(0.25, c_timeAI);
    gf_WarpInUnits(1, "Zealot", gv_pLAYER_02_TALDARIM, PointFromId(60));
    Wait(0.25, c_timeAI);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_WarpInUnits(1, "Stalker", gv_pLAYER_02_TALDARIM, PointFromId(982));
        Wait(0.25, c_timeAI);
    }

    auto036E766F_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(5), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto036E766F_u = UnitGroupCount(auto036E766F_g, c_unitCountAll);
    for (;; auto036E766F_u -= 1) {
        auto036E766F_var = UnitGroupUnitFromEnd(auto036E766F_g, auto036E766F_u);
        if (auto036E766F_var == null) { break; }
        AISetUnitScriptControlled(auto036E766F_var, true);
        UnitGroupAdd(gv_sentryIntroAttackWaveGroup, auto036E766F_var);
        gf_MakeConstructingUnitFaceAngle(auto036E766F_var, 315.0);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00090", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(19), 20.0, false);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00084", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(56)), 3.0, Color(100.00, 100.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/D5BBDD1F"), null, UnitGetPosition(UnitFromId(56)));
    libVoiC_gf_EnableCampaignTechUnit(true, "Sentry", gv_pLAYER_01_USER);
    gf_RescueSentryUnits(RegionFromId(4), PointFromId(746), false);
    TriggerQueueExit();
    Wait(3.0, c_timeAI);
    VisRevealerDestroy(lv_revealer);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(3), 10.0, false);
    UnitRemove(lv_invisiblePylon);
    AISetGroupScriptControlled(gv_sentryIntroAttackWaveGroup, false);
    AISetGroupSuicide(gv_sentryIntroAttackWaveGroup, true);
    if ((gv_sentryIntroWarpedIn == false)) {
        TriggerEnable(gt_SentryUnlockedQ, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryIntroQ_Init () {
    gt_SentryIntroQ = TriggerCreate("gt_SentryIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Unlocked Q
//--------------------------------------------------------------------------------------------------
bool gt_SentryUnlockedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto44308903_g;
    int auto44308903_u;
    unit auto44308903_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_sentryIntroAttackWaveGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    if ((gv_sentryIntroWarpedIn == true)) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00085", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1) && (gv_sentryIntroWarpedIn == false)) {
        UnitGroupAddUnitGroup(gv_sentryGatewayGroup, UnitGroup("Gateway", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_sentryGatewayGroup, UnitGroup("WarpGate", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto44308903_g = gv_sentryGatewayGroup;
        auto44308903_u = UnitGroupCount(auto44308903_g, c_unitCountAll);
        for (;; auto44308903_u -= 1) {
            auto44308903_var = UnitGroupUnitFromEnd(auto44308903_g, auto44308903_u);
            if (auto44308903_var == null) { break; }
            libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/9F5FE815"), auto44308903_var, "Ref_Center");
            libHots_gf_StoreActorForUnit(auto44308903_var, 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(auto44308903_var, 1, TextTagLastCreated());
        }
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("WarpGateTrain", 5), true);
        UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("GatewayTrain", 5), true);
        TriggerEnable(gt_SentryGatewaySelectedCleanup, true);
        TriggerEnable(gt_SentryGatewayDiesCleanup, true);
        TimerStart(gv_sentryGatewayTimeoutTimer, 120.0, false, c_timeAI);
    }

    TransmissionWait(TransmissionLastSent(), 0.0);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryUnlockedQ_Init () {
    gt_SentryUnlockedQ = TriggerCreate("gt_SentryUnlockedQ_Func");
    TriggerEnable(gt_SentryUnlockedQ, false);
    TriggerAddEventTimePeriodic(gt_SentryUnlockedQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Gateway Selected Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_SentryGatewaySelectedCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCA4EB50A_g;
    int autoCA4EB50A_u;
    unit autoCA4EB50A_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_sentryGatewayGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SentryGatewayDiesCleanup, false);
    autoCA4EB50A_g = gv_sentryGatewayGroup;
    autoCA4EB50A_u = UnitGroupCount(autoCA4EB50A_g, c_unitCountAll);
    for (;; autoCA4EB50A_u -= 1) {
        autoCA4EB50A_var = UnitGroupUnitFromEnd(autoCA4EB50A_g, autoCA4EB50A_u);
        if (autoCA4EB50A_var == null) { break; }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoCA4EB50A_var, 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(autoCA4EB50A_var, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryGatewaySelectedCleanup_Init () {
    gt_SentryGatewaySelectedCleanup = TriggerCreate("gt_SentryGatewaySelectedCleanup_Func");
    TriggerEnable(gt_SentryGatewaySelectedCleanup, false);
    TriggerAddEventUnitSelected(gt_SentryGatewaySelectedCleanup, null, gv_pLAYER_01_USER, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Gateway Dies Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_SentryGatewayDiesCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_sentryGatewayGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libHots_gf_ActorForUnit(EventUnit(), 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    if ((libNtve_gf_UnitGroupIsDead(gv_sentryGatewayGroup) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_SentryGatewaySelectedCleanup, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryGatewayDiesCleanup_Init () {
    gt_SentryGatewayDiesCleanup = TriggerCreate("gt_SentryGatewayDiesCleanup_Func");
    TriggerEnable(gt_SentryGatewayDiesCleanup, false);
    TriggerAddEventUnitDied(gt_SentryGatewayDiesCleanup, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Cleanup Training
//--------------------------------------------------------------------------------------------------
bool gt_SentryCleanupTraining_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFED53A6E_g;
    int autoFED53A6E_u;
    unit autoFED53A6E_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_sentryIntroWarpedIn = true;
    TriggerEnable(gt_SentryCleanupTimeout, false);
    TriggerEnable(gt_SentryGatewaySelectedCleanup, false);
    TriggerEnable(gt_SentryGatewayDiesCleanup, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("WarpGateTrain", 5), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("GatewayTrain", 5), false);
    autoFED53A6E_g = gv_sentryGatewayGroup;
    autoFED53A6E_u = UnitGroupCount(autoFED53A6E_g, c_unitCountAll);
    for (;; autoFED53A6E_u -= 1) {
        autoFED53A6E_var = UnitGroupUnitFromEnd(autoFED53A6E_g, autoFED53A6E_u);
        if (autoFED53A6E_var == null) { break; }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoFED53A6E_var, 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(autoFED53A6E_var, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryCleanupTraining_Init () {
    gt_SentryCleanupTraining = TriggerCreate("gt_SentryCleanupTraining_Func");
    TriggerAddEventUnitOrder(gt_SentryCleanupTraining, null, AbilityCommand("WarpGateTrain", 5));
    TriggerAddEventUnitOrder(gt_SentryCleanupTraining, null, AbilityCommand("GatewayTrain", 5));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Cleanup Timeout
//--------------------------------------------------------------------------------------------------
bool gt_SentryCleanupTimeout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBFFF2364_g;
    int autoBFFF2364_u;
    unit autoBFFF2364_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SentryCleanupTraining, false);
    TriggerEnable(gt_SentryGatewaySelectedCleanup, false);
    TriggerEnable(gt_SentryGatewayDiesCleanup, false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("WarpGateTrain", 5), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("GatewayTrain", 5), false);
    autoBFFF2364_g = gv_sentryGatewayGroup;
    autoBFFF2364_u = UnitGroupCount(autoBFFF2364_g, c_unitCountAll);
    for (;; autoBFFF2364_u -= 1) {
        autoBFFF2364_var = UnitGroupUnitFromEnd(autoBFFF2364_g, autoBFFF2364_u);
        if (autoBFFF2364_var == null) { break; }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(autoBFFF2364_var, 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(autoBFFF2364_var, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryCleanupTimeout_Init () {
    gt_SentryCleanupTimeout = TriggerCreate("gt_SentryCleanupTimeout_Func");
    TriggerAddEventTimer(gt_SentryCleanupTimeout, gv_sentryGatewayTimeoutTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Sentry Stasis
//--------------------------------------------------------------------------------------------------
bool gt_TrackSentryStasis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_sentryStasisActivated[2] == true) && (gv_sentryStasisActivated[3] == true) && (gv_sentryStasisActivated[4] == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (gv_sentryStasisActivated[2] == false)) {
        gv_sentryStasisActivated[2] = true;
        gf_RescueSentryUnits(RegionFromId(26), PointFromId(747), true);
    }
    else if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (gv_sentryStasisActivated[3] == false)) {
        gv_sentryStasisActivated[3] = true;
        gf_RescueSentryUnits(RegionFromId(28), PointFromId(748), true);
    }
    else if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (gv_sentryStasisActivated[4] == false)) {
        gv_sentryStasisActivated[4] = true;
        gf_RescueSentryUnits(RegionFromId(32), PointFromId(748), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackSentryStasis_Init () {
    gt_TrackSentryStasis = TriggerCreate("gt_TrackSentryStasis_Func");
    TriggerAddEventTimePeriodic(gt_TrackSentryStasis, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Sentry Stasis Q
//--------------------------------------------------------------------------------------------------
bool gt_TrackSentryStasisQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto6FB24D32_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6FB24D32_val = TriggerGetExecCount(TriggerGetCurrent());
    if (auto6FB24D32_val == 0) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00086", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto6FB24D32_val == 1) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto6FB24D32_val == 2) {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00117", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00086", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackSentryStasisQ_Init () {
    gt_TrackSentryStasisQ = TriggerCreate("gt_TrackSentryStasisQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Approaches P03 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerApproachesP03BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/24C4672B"), null, PointFromId(206));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(206), 8.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00113", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(10.0, c_timeAI);
    TriggerEnable(gt_PlayerAttacksP03BaseQ, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerApproachesP03BaseQ_Init () {
    gt_PlayerApproachesP03BaseQ = TriggerCreate("gt_PlayerApproachesP03BaseQ_Func");
    TriggerAddEventTimePeriodic(gt_PlayerApproachesP03BaseQ, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Attacks P03 Base Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerAttacksP03BaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_TALDARIM, RegionFromId(66), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00118", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerAttacksP03BaseQ_Init () {
    gt_PlayerAttacksP03BaseQ = TriggerCreate("gt_PlayerAttacksP03BaseQ_Func");
    TriggerEnable(gt_PlayerAttacksP03BaseQ, false);
    TriggerAddEventTimePeriodic(gt_PlayerAttacksP03BaseQ, 3.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tal'darim Reinforcement A1
//--------------------------------------------------------------------------------------------------
bool gt_TaldarimReinforcementA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        gf_WarpInUnits(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Zealot", gv_pLAYER_02_TALDARIM, RegionRandomPoint(RegionFromId(73)));
        gf_WarpInUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Stalker", gv_pLAYER_02_TALDARIM, RegionRandomPoint(RegionFromId(73)));
    }
    else {
        gf_WarpInUnits(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Zealot", gv_pLAYER_02_TALDARIM, RegionRandomPoint(RegionFromId(74)));
        gf_WarpInUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Stalker", gv_pLAYER_02_TALDARIM, RegionRandomPoint(RegionFromId(74)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaldarimReinforcementA1_Init () {
    gt_TaldarimReinforcementA1 = TriggerCreate("gt_TaldarimReinforcementA1_Func");
    TriggerAddEventUnitRegion(gt_TaldarimReinforcementA1, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tal'darim Reinforcement A2
//--------------------------------------------------------------------------------------------------
bool gt_TaldarimReinforcementA2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_warpPrism;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_warpPrism = UnitFromId(458);
    UnitSetHeight(lv_warpPrism, 12.0, 0.0);
    libNtve_gf_ShowHideUnit(lv_warpPrism, true);
    UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
    UnitSetHeight(lv_warpPrism, UnitGetPropertyFixed(lv_warpPrism, c_unitPropHeight, c_unitPropNormal), 3.0);
    Wait(4.0, c_timeAI);
    gf_WarpInUnits(3, "Zealot", gv_pLAYER_02_TALDARIM, PointFromId(461));
    gf_WarpInUnits(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Stalker", gv_pLAYER_02_TALDARIM, PointFromId(461));
    Wait(6.0, c_timeAI);
    UnitSetHeight(lv_warpPrism, 12.0, 3.0);
    UnitIssueOrder(lv_warpPrism, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeAI);
    UnitRemove(lv_warpPrism);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaldarimReinforcementA2_Init () {
    gt_TaldarimReinforcementA2 = TriggerCreate("gt_TaldarimReinforcementA2_Func");
    TriggerAddEventUnitRegion(gt_TaldarimReinforcementA2, null, RegionFromId(53), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tal'darim Ambush
//--------------------------------------------------------------------------------------------------
bool gt_TaldarimAmbush_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitIndex;

    // Automatic Variable Declarations
    const int autoA14C8F8B_ae = 4;
    const int autoA14C8F8B_ai = 1;
    const int auto96C19D89_ae = 4;
    const int auto96C19D89_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_unitIndex = 3;
    for ( ; ( (autoA14C8F8B_ai >= 0 && lv_unitIndex <= autoA14C8F8B_ae) || (autoA14C8F8B_ai < 0 && lv_unitIndex >= autoA14C8F8B_ae) ) ; lv_unitIndex += autoA14C8F8B_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Phoenix", 0, gv_pLAYER_02_TALDARIM, PointFromName(("Glacius Assault Spawn " + IntToString(lv_unitIndex))), PointFromName(("Glacius Assault Spawn " + IntToString(lv_unitIndex))));
        Wait(0.1, c_timeAI);
        AIAttackWaveSetGatherPoint(gv_pLAYER_02_TALDARIM, UnitGetPosition(UnitLastCreated()));
        AIAttackWaveSetTargetRegion(gv_pLAYER_02_TALDARIM, RegionFromId(36), 0);
        AIAttackWaveUseUnit(gv_pLAYER_02_TALDARIM, UnitLastCreated());
        AIAttackWaveSend(gv_pLAYER_02_TALDARIM, 0, true);
    }
    lv_unitIndex = 1;
    for ( ; ( (auto96C19D89_ai >= 0 && lv_unitIndex <= auto96C19D89_ae) || (auto96C19D89_ai < 0 && lv_unitIndex >= auto96C19D89_ae) ) ; lv_unitIndex += auto96C19D89_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "WarpPrism", 0, gv_pLAYER_02_TALDARIM, PointFromName(("Glacius Assault Spawn " + IntToString(lv_unitIndex))), PointFromName(("Glacius Assault Waypoint " + IntToString(lv_unitIndex))));
        gf_DeployWarpPrism(UnitLastCreated(), lv_unitIndex);
    }
    TriggerExecute(gt_TaldarimAmbushQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaldarimAmbush_Init () {
    gt_TaldarimAmbush = TriggerCreate("gt_TaldarimAmbush_Func");
    TriggerAddEventUnitRegion(gt_TaldarimAmbush, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tal'darim Ambush Q
//--------------------------------------------------------------------------------------------------
bool gt_TaldarimAmbushQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), PointFromId(18), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00091", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00092", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaldarimAmbushQ_Init () {
    gt_TaldarimAmbushQ = TriggerCreate("gt_TaldarimAmbushQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tal'darim Warp Construction
//--------------------------------------------------------------------------------------------------
bool gt_TaldarimWarpConstruction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIndex;

    // Automatic Variable Declarations
    const int auto0B30078D_ae = 6;
    const int auto0B30078D_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_TALDARIM))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_regionIndex = 1;
    for ( ; ( (auto0B30078D_ai >= 0 && lv_regionIndex <= auto0B30078D_ae) || (auto0B30078D_ai < 0 && lv_regionIndex >= auto0B30078D_ae) ) ; lv_regionIndex += auto0B30078D_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionCircle(PointFromName(("Glacius Assault Warp " + IntToString(lv_regionIndex))), 2.0)) == true)) {
            UnitGroupAdd(gv_warpGroups[lv_regionIndex], EventUnitProgressUnit());
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaldarimWarpConstruction_Init () {
    gt_TaldarimWarpConstruction = TriggerCreate("gt_TaldarimWarpConstruction_Func");
    TriggerAddEventUnitConstructProgress(gt_TaldarimWarpConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Encounter
//--------------------------------------------------------------------------------------------------
bool gt_FinalEncounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_warpPrism1;
    unit lv_warpPrism2;
    unitgroup lv_finalEncounterWarpGroup;
    unitgroup lv_playerUnits;
    timer lv_warpCooldown;

    // Automatic Variable Declarations
    unitgroup autoBF0CBDB7_g;
    int autoBF0CBDB7_u;
    unit autoBF0CBDB7_var;
    unitgroup auto7AA11F8F_g;
    int auto7AA11F8F_u;
    unit auto7AA11F8F_var;

    // Variable Initialization
    lv_finalEncounterWarpGroup = UnitGroupEmpty();
    lv_playerUnits = UnitGroupEmpty();
    lv_warpCooldown = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_warpPrism1 = UnitFromId(409);
    lv_warpPrism2 = UnitFromId(510);
    TimerStart(lv_warpCooldown, 2.0, false, c_timeAI);
    while (true) {
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

        if ((UnitIsAlive(lv_warpPrism1) == false) && (UnitIsAlive(lv_warpPrism2) == false) && (libNtve_gf_UnitGroupIsDead(lv_finalEncounterWarpGroup) == true)) {
            return true;
        }

        autoBF0CBDB7_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(61), UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBF0CBDB7_u = UnitGroupCount(autoBF0CBDB7_g, c_unitCountAll);
        for (;; autoBF0CBDB7_u -= 1) {
            autoBF0CBDB7_var = UnitGroupUnitFromEnd(autoBF0CBDB7_g, autoBF0CBDB7_u);
            if (autoBF0CBDB7_var == null) { break; }
            UnitGroupAdd(lv_finalEncounterWarpGroup, autoBF0CBDB7_var);
        }
        lv_playerUnits = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0)) {
            if ((UnitGroupCount(lv_finalEncounterWarpGroup, c_unitCountAlive) < libLotv_gf_DifficultyValueInt2(4, 4, 6, 6)) && (TimerGetRemaining(lv_warpCooldown) < 1)) {
                if ((UnitIsAlive(lv_warpPrism1) == true)) {
                    gf_WarpInUnits(1, "Zealot", gv_pLAYER_02_TALDARIM, PointFromId(824));
                }

                if ((UnitIsAlive(lv_warpPrism2) == true)) {
                    gf_WarpInUnits(1, "Zealot", gv_pLAYER_02_TALDARIM, PointFromId(825));
                }

                TimerStart(lv_warpCooldown, libLotv_gf_DifficultyValueFixed2(12.0, 12.0, 9.0, 6.0), false, c_timeAI);
            }

            auto7AA11F8F_g = lv_finalEncounterWarpGroup;
            auto7AA11F8F_u = UnitGroupCount(auto7AA11F8F_g, c_unitCountAll);
            for (;; auto7AA11F8F_u -= 1) {
                auto7AA11F8F_var = UnitGroupUnitFromEnd(auto7AA11F8F_g, auto7AA11F8F_u);
                if (auto7AA11F8F_var == null) { break; }
                UnitIssueOrder(auto7AA11F8F_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_playerUnits, UnitGetPosition(auto7AA11F8F_var)))), c_orderQueueReplace);
            }
        }

        Wait(2.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalEncounter_Init () {
    gt_FinalEncounter = TriggerCreate("gt_FinalEncounter_Func");
    TriggerAddEventTimePeriodic(gt_FinalEncounter, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Field Reminder Q 1
//--------------------------------------------------------------------------------------------------
bool gt_ForceFieldReminderQ1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(32)) == true)) {
        TriggerEnable(gt_ForceFieldReminderQ2, false);
        TriggerEnable(gt_ForceFieldReminderQ3, false);
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00088", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceFieldReminderQ1_Init () {
    gt_ForceFieldReminderQ1 = TriggerCreate("gt_ForceFieldReminderQ1_Func");
    TriggerAddEventTimePeriodic(gt_ForceFieldReminderQ1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Field Reminder Q 2
//--------------------------------------------------------------------------------------------------
bool gt_ForceFieldReminderQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(205)) == true)) {
        TriggerEnable(gt_ForceFieldReminderQ1, false);
        TriggerEnable(gt_ForceFieldReminderQ3, false);
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00089", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceFieldReminderQ2_Init () {
    gt_ForceFieldReminderQ2 = TriggerCreate("gt_ForceFieldReminderQ2_Func");
    TriggerAddEventTimePeriodic(gt_ForceFieldReminderQ2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Field Reminder Q 3
//--------------------------------------------------------------------------------------------------
bool gt_ForceFieldReminderQ3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(21)) == true)) {
        TriggerEnable(gt_ForceFieldReminderQ1, false);
        TriggerEnable(gt_ForceFieldReminderQ2, false);
        TriggerQueueEnter();
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00089", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceFieldReminderQ3_Init () {
    gt_ForceFieldReminderQ3 = TriggerCreate("gt_ForceFieldReminderQ3_Func");
    TriggerAddEventTimePeriodic(gt_ForceFieldReminderQ3, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Field Reveal Pylon 1
//--------------------------------------------------------------------------------------------------
bool gt_ForceFieldRevealPylon1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(71), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(32)) == true)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(67), 0.0625, false);
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceFieldRevealPylon1_Init () {
    gt_ForceFieldRevealPylon1 = TriggerCreate("gt_ForceFieldRevealPylon1_Func");
    TriggerAddEventTimePeriodic(gt_ForceFieldRevealPylon1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Field Reveal Pylon 2
//--------------------------------------------------------------------------------------------------
bool gt_ForceFieldRevealPylon2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(72), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(205)) == true)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(68), 0.0625, false);
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceFieldRevealPylon2_Init () {
    gt_ForceFieldRevealPylon2 = TriggerCreate("gt_ForceFieldRevealPylon2_Func");
    TriggerAddEventTimePeriodic(gt_ForceFieldRevealPylon2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Field Reveal Pylon 3
//--------------------------------------------------------------------------------------------------
bool gt_ForceFieldRevealPylon3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(69), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(21)) == true)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(70), 0.0625, false);
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceFieldRevealPylon3_Init () {
    gt_ForceFieldRevealPylon3 = TriggerCreate("gt_ForceFieldRevealPylon3_Func");
    TriggerAddEventTimePeriodic(gt_ForceFieldRevealPylon3, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Gate Usage On / Off Control - FF 2
//--------------------------------------------------------------------------------------------------
bool gt_AIGateUsageOnOffControlFF2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitsOfWave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitsOfWave = AIWaveGetUnits(EventPlayerWave());

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(32)) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    while (!(((UnitGroupCount(UnitGroupFilterRegion(lv_unitsOfWave, RegionFromId(6), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroupFilterRegion(lv_unitsOfWave, RegionFromId(6), 0), c_unitCountAlive) >= 1)))) {
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(UnitFromId(32)) == true)) {
        UnitBehaviorRemove(UnitFromId(69), "PowerUserGate", 1);
    }

    while (!((UnitGroupCount(UnitGroupFilterRegion(lv_unitsOfWave, RegionFromId(6), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilterRegion(lv_unitsOfWave, RegionFromId(6), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(UnitFromId(32)) == true)) {
        UnitBehaviorAdd(UnitFromId(69), "PowerUserGate", UnitFromId(69), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGateUsageOnOffControlFF2_Init () {
    gt_AIGateUsageOnOffControlFF2 = TriggerCreate("gt_AIGateUsageOnOffControlFF2_Func");
    TriggerAddEventPlayerAIWave(gt_AIGateUsageOnOffControlFF2, gv_pLAYER_02_TALDARIM);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Gate Usage On / Off Control - FF 4
//--------------------------------------------------------------------------------------------------
bool gt_AIGateUsageOnOffControlFF4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitsOfWave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitsOfWave = AIWaveGetUnits(EventPlayerWave());

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(205)) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    while (!(((UnitGroupCount(UnitGroupFilterRegion(lv_unitsOfWave, RegionFromId(20), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroupFilterRegion(lv_unitsOfWave, RegionFromId(20), 0), c_unitCountAlive) >= 1)))) {
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(UnitFromId(205)) == true)) {
        UnitBehaviorRemove(UnitFromId(738), "PowerUserGate", 1);
    }

    while (!((UnitGroupCount(UnitGroupFilterRegion(lv_unitsOfWave, RegionFromId(20), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilterRegion(lv_unitsOfWave, RegionFromId(20), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(UnitFromId(205)) == true)) {
        UnitBehaviorAdd(UnitFromId(738), "PowerUserGate", UnitFromId(738), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGateUsageOnOffControlFF4_Init () {
    gt_AIGateUsageOnOffControlFF4 = TriggerCreate("gt_AIGateUsageOnOffControlFF4_Func");
    TriggerAddEventPlayerAIWave(gt_AIGateUsageOnOffControlFF4, gv_pLAYER_02_TALDARIM);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon Powering Force Field Dies
//--------------------------------------------------------------------------------------------------
bool gt_PylonPoweringForceFieldDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit auto718C2D1C_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto718C2D1C_val = EventUnit();
    if (auto718C2D1C_val == UnitFromId(32)) {
        UnitRemove(UnitFromId(1798));
    }
    else if (auto718C2D1C_val == UnitFromId(21)) {
        UnitRemove(UnitFromId(1872));
    }
    else if (auto718C2D1C_val == UnitFromId(205)) {
        UnitRemove(UnitFromId(563));
    }
    else if (auto718C2D1C_val == UnitFromId(407)) {
        UnitRemove(UnitFromId(1873));
    }
    else if (auto718C2D1C_val == UnitFromId(783)) {
        UnitRemove(UnitFromId(1873));
        UnitRemove(UnitFromId(1880));
    }
    else if (auto718C2D1C_val == UnitFromId(638)) {
        UnitRemove(UnitFromId(1880));
    }
    else if (auto718C2D1C_val == UnitFromId(171)) {
        if ((UnitGroupCount(UnitGroup("Pylon", c_playerAny, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitRemove(UnitFromId(1881));
        }

    }
    else if (auto718C2D1C_val == UnitFromId(88)) {
        if ((UnitGroupCount(UnitGroup("Pylon", c_playerAny, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitRemove(UnitFromId(1881));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PylonPoweringForceFieldDies_Init () {
    gt_PylonPoweringForceFieldDies = TriggerCreate("gt_PylonPoweringForceFieldDies_Func");
    TriggerAddEventUnitDied(gt_PylonPoweringForceFieldDies, UnitRefFromUnit(UnitFromId(32)));
    TriggerAddEventUnitDied(gt_PylonPoweringForceFieldDies, UnitRefFromUnit(UnitFromId(21)));
    TriggerAddEventUnitDied(gt_PylonPoweringForceFieldDies, UnitRefFromUnit(UnitFromId(205)));
    TriggerAddEventUnitDied(gt_PylonPoweringForceFieldDies, UnitRefFromUnit(UnitFromId(407)));
    TriggerAddEventUnitDied(gt_PylonPoweringForceFieldDies, UnitRefFromUnit(UnitFromId(783)));
    TriggerAddEventUnitDied(gt_PylonPoweringForceFieldDies, UnitRefFromUnit(UnitFromId(638)));
    TriggerAddEventUnitDied(gt_PylonPoweringForceFieldDies, UnitRefFromUnit(UnitFromId(171)));
    TriggerAddEventUnitDied(gt_PylonPoweringForceFieldDies, UnitRefFromUnit(UnitFromId(88)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Force Field Pathing Blockers - Progress
//--------------------------------------------------------------------------------------------------
bool gt_DestroyForceFieldPathingBlockersProgress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(52), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DestroyForceFieldPathingBlockersPylonDestroyed, false);
    UnitRemove(UnitFromId(981));
    UnitRemove(UnitFromId(1011));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyForceFieldPathingBlockersProgress_Init () {
    gt_DestroyForceFieldPathingBlockersProgress = TriggerCreate("gt_DestroyForceFieldPathingBlockersProgress_Func");
    TriggerAddEventTimePeriodic(gt_DestroyForceFieldPathingBlockersProgress, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Force Field Pathing Blockers - Pylon Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DestroyForceFieldPathingBlockersPylonDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DestroyForceFieldPathingBlockersProgress, false);
    UnitRemove(UnitFromId(981));
    UnitRemove(UnitFromId(1011));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyForceFieldPathingBlockersPylonDestroyed_Init () {
    gt_DestroyForceFieldPathingBlockersPylonDestroyed = TriggerCreate("gt_DestroyForceFieldPathingBlockersPylonDestroyed_Func");
    TriggerAddEventUnitDied(gt_DestroyForceFieldPathingBlockersPylonDestroyed, UnitRefFromUnit(UnitFromId(205)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raw Solarite Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_RawSolariteDiscoverQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    unit lv_solariteUnit;

    // Automatic Variable Declarations
    region auto156C09E5_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto156C09E5_val = EventUnitRegion();
    if (auto156C09E5_val == RegionFromId(15)) {
        lv_solariteUnit = UnitFromId(274);
    }
    else if (auto156C09E5_val == RegionFromId(12)) {
        lv_solariteUnit = UnitFromId(98);
    }
    else if (auto156C09E5_val == RegionFromId(14)) {
        lv_solariteUnit = UnitFromId(425);
    }
    else {
    }
    lv_region = RegionCircle(UnitGetPosition(lv_solariteUnit), 2.0);
    TriggerQueueEnter();
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_solariteUnit), 3.0, Color(100.00, 100.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/30B8B77D"), null, lv_solariteUnit);
    VisRevealArea(gv_pLAYER_01_USER, lv_region, 5.0, false);
    TriggerExecute(gt_ObjectiveFindRawSolariteCreate, true, false);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossBonusObjective, libVCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/38A2AC97"), lv_solariteUnit, "Ref_Center");
    libHots_gf_StoreActorForUnit(lv_solariteUnit, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(lv_solariteUnit, 1, TextTagLastCreated());
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(lv_solariteUnit), StringExternal("Param/Value/1933134E"));
    libHots_gf_StorePingForUnit(lv_solariteUnit, 1, PingLastCreated());
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00010", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RawSolariteDiscoverQ_Init () {
    gt_RawSolariteDiscoverQ = TriggerCreate("gt_RawSolariteDiscoverQ_Func");
    TriggerAddEventUnitRegion(gt_RawSolariteDiscoverQ, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_RawSolariteDiscoverQ, null, RegionFromId(12), true);
    TriggerAddEventUnitRegion(gt_RawSolariteDiscoverQ, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickup Raw Solarite 1
//--------------------------------------------------------------------------------------------------
bool gt_PickupRawSolarite1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(274)), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RawSolaritePickupQ(UnitFromId(274));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupRawSolarite1_Init () {
    gt_PickupRawSolarite1 = TriggerCreate("gt_PickupRawSolarite1_Func");
    TriggerAddEventTimePeriodic(gt_PickupRawSolarite1, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickup Raw Solarite 2
//--------------------------------------------------------------------------------------------------
bool gt_PickupRawSolarite2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(98)), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RawSolaritePickupQ(UnitFromId(98));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupRawSolarite2_Init () {
    gt_PickupRawSolarite2 = TriggerCreate("gt_PickupRawSolarite2_Func");
    TriggerAddEventTimePeriodic(gt_PickupRawSolarite2, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickup Raw Solarite 3
//--------------------------------------------------------------------------------------------------
bool gt_PickupRawSolarite3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(425)), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RawSolaritePickupQ(UnitFromId(425));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupRawSolarite3_Init () {
    gt_PickupRawSolarite3 = TriggerCreate("gt_PickupRawSolarite3_Func");
    TriggerAddEventTimePeriodic(gt_PickupRawSolarite3, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkpoint 01
//--------------------------------------------------------------------------------------------------
bool gt_Checkpoint01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checkpoint01_Init () {
    gt_Checkpoint01 = TriggerCreate("gt_Checkpoint01_Func");
    TriggerAddEventUnitRegion(gt_Checkpoint01, null, RegionFromId(58), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkpoint 02
//--------------------------------------------------------------------------------------------------
bool gt_Checkpoint02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checkpoint02_Init () {
    gt_Checkpoint02 = TriggerCreate("gt_Checkpoint02_Func");
    TriggerAddEventUnitRegion(gt_Checkpoint02, null, RegionFromId(59), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkpoint 03 - Environment Shift
//--------------------------------------------------------------------------------------------------
bool gt_Checkpoint03EnvironmentShift_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringToText(""));
    libVCMI_gf_SendActorMessageToDoodadsInRegion("SetVisibility", "RainSprinkle", RegionEntireMap());
    GameSetLighting("ProtossBaseDay", 90.0);
    FogSetColorOverTime(Color(21.57, 34.51, 44.31), 90.0);
    FogSetDensityOverTime(0.18, 90.0);
    FogSetFallOffOverTime(0.15, 90.0);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_PPurifier01_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checkpoint03EnvironmentShift_Init () {
    gt_Checkpoint03EnvironmentShift = TriggerCreate("gt_Checkpoint03EnvironmentShift_Func");
    TriggerAddEventUnitRegion(gt_Checkpoint03EnvironmentShift, null, RegionFromId(60), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_runall();
    libNtve_gf_DeclareNextTown(gv_pLAYER_02_TALDARIM, PointFromId(34));
    AINearestTownLimitWaveGather(gv_pLAYER_02_TALDARIM, true);
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_TALDARIM, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_TALDARIM, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_TALDARIM, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_TALDARIM, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_GLACIUS, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_GLACIUS, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_PLANETCRACKER, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_PLANETCRACKER, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0D58AD84_g;
    int auto0D58AD84_var;
    playergroup autoFD4C5707_g;
    int autoFD4C5707_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    auto0D58AD84_g = gv_enemyPlayers;
    auto0D58AD84_var = -1;
    while (true) {
        auto0D58AD84_var = PlayerGroupNextPlayer(auto0D58AD84_g, auto0D58AD84_var);
        if (auto0D58AD84_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0D58AD84_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0D58AD84_var, "ProtossGroundWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    autoFD4C5707_g = gv_enemyPlayers;
    autoFD4C5707_var = -1;
    while (true) {
        autoFD4C5707_var = PlayerGroupNextPlayer(autoFD4C5707_g, autoFD4C5707_var);
        if (autoFD4C5707_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoFD4C5707_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoFD4C5707_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(autoFD4C5707_var, "ProtossShieldsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC2D7BE74_g;
    int autoC2D7BE74_var;
    playergroup autoCDE33443_g;
    int autoCDE33443_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(540.0, c_timeAI);
    autoC2D7BE74_g = gv_enemyPlayers;
    autoC2D7BE74_var = -1;
    while (true) {
        autoC2D7BE74_var = PlayerGroupNextPlayer(autoC2D7BE74_g, autoC2D7BE74_var);
        if (autoC2D7BE74_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC2D7BE74_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(autoC2D7BE74_var, "ProtossGroundWeaponsLevel2", 1);
    }
    Wait(300.0, c_timeAI);
    autoCDE33443_g = gv_enemyPlayers;
    autoCDE33443_var = -1;
    while (true) {
        autoCDE33443_var = PlayerGroupNextPlayer(autoCDE33443_g, autoCDE33443_var);
        if (autoCDE33443_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoCDE33443_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCDE33443_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCDE33443_var, "ProtossShieldsLevel2", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Unit Lost to Displacement Beam
//--------------------------------------------------------------------------------------------------
bool gt_AchievementUnitLosttoDisplacementBeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_unitsLostToPlanetCracker += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementUnitLosttoDisplacementBeam_Init () {
    gt_AchievementUnitLosttoDisplacementBeam = TriggerCreate("gt_AchievementUnitLosttoDisplacementBeam_Func");
    TriggerAddEventUnitDamaged(gt_AchievementUnitLosttoDisplacementBeam, null, c_unitDamageTypeAny, c_unitDamageFatal, "PlanetCrackerPurifierDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat: Tal'darim Gateways Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_StatTaldarimGatewaysDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Gateway") || (UnitGetType(EventUnit()) == "WarpGate")))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_02_TALDARIM) || (UnitGetOwner(EventUnit()) == gv_pLAYER_03_TALDARIM)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_taldarimGatewaysDestroyed += 1;
    if ((gv_taldarimGatewaysDestroyed >= 6) && (gv_gatewayAchievementUnlocked == false) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        gv_gatewayAchievementUnlocked = true;
        TriggerExecute(gt_AchievementTaldarimGatewaysDestroyed, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatTaldarimGatewaysDestroyed_Init () {
    gt_StatTaldarimGatewaysDestroyed = TriggerCreate("gt_StatTaldarimGatewaysDestroyed_Func");
    TriggerAddEventUnitDied(gt_StatTaldarimGatewaysDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement: Tal'darim Gateways Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTaldarimGatewaysDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PPurifier01_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTaldarimGatewaysDestroyed_Init () {
    gt_AchievementTaldarimGatewaysDestroyed = TriggerCreate("gt_AchievementTaldarimGatewaysDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat: Sentry Shield Restoration
//--------------------------------------------------------------------------------------------------
bool gt_StatSentryShieldRestoration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_shieldsRestoredBySentries += EventUnitHealAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatSentryShieldRestoration_Init () {
    gt_StatSentryShieldRestoration = TriggerCreate("gt_StatSentryShieldRestoration_Func");
    TriggerAddEventUnitHealed(gt_StatSentryShieldRestoration, null, c_unitVitalShields, "VoidSentryShieldRepair");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Destroy all enemy structures
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDestroyallenemystructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(gv_pLAYER_01_USER, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_TALDARIM, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_CampaignAwardAchievement("Anniversary_PPurifier01", gv_pLAYER_01_USER);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDestroyallenemystructures_Init () {
    gt_AchievementDestroyallenemystructures = TriggerCreate("gt_AchievementDestroyallenemystructures_Func");
    TriggerAddEventUnitDied(gt_AchievementDestroyallenemystructures, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/67DF44AF"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/A23C67A1"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Reach Tech Vault Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryReachTechVaultCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lvBeacon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_masteryAchievementTimer, true);
    UnitKill(UnitFromId(488));
    TriggerExecute(gt_ObjectiveReachtheTechVaultComplete, true, true);
    UnitRemove(gv_displacementBeam.lv_unit);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryReachTechVaultCompleted_Init () {
    gt_VictoryReachTechVaultCompleted = TriggerCreate("gt_VictoryReachTechVaultCompleted_Func");
    TriggerAddEventTimePeriodic(gt_VictoryReachTechVaultCompleted, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PPurifier01_1", gv_pLAYER_01_USER);
    if ((gv_unitsLostToPlanetCracker == 0)) {
        libVoiC_gf_CampaignAwardAchievement("PPurifier01_2", gv_pLAYER_01_USER);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (TimerGetRemaining(gv_masteryAchievementTimer) > 0.0)) {
        libVoiC_gf_CampaignAwardAchievement("Mastery_Purifier01", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/D3F0E443"), FixedToText(gv_shieldsRestoredBySentries, 0));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/649D0857"), IntToText(gv_unitsLostToPlanetCracker));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/CEF54520"), IntToText(gv_taldarimGatewaysDestroyed));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach the Tech Vault Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachtheTechVaultCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PPurifier01Primary01");
    gv_objectiveReachTheTechVault = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachtheTechVaultCreate_Init () {
    gt_ObjectiveReachtheTechVaultCreate = TriggerCreate("gt_ObjectiveReachtheTechVaultCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach the Tech Vault Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachtheTechVaultComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveReachtheTechVaultCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier01Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachtheTechVaultComplete_Init () {
    gt_ObjectiveReachtheTechVaultComplete = TriggerCreate("gt_ObjectiveReachtheTechVaultComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach the Tech Vault Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachtheTechVaultFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveReachtheTechVaultCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier01Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachtheTechVaultFailed_Init () {
    gt_ObjectiveReachtheTechVaultFailed = TriggerCreate("gt_ObjectiveReachtheTechVaultFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Raw Solarite Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindRawSolariteCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PPurifier01Bonus01");
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier01Bonus01", gv_objectiveFindRawSolariteProgress);
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindRawSolariteCreate_Init () {
    gt_ObjectiveFindRawSolariteCreate = TriggerCreate("gt_ObjectiveFindRawSolariteCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Raw Solarite Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindRawSolariteComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFindRawSolariteCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier01Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindRawSolariteComplete_Init () {
    gt_ObjectiveFindRawSolariteComplete = TriggerCreate("gt_ObjectiveFindRawSolariteComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Raw Solarite Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindRawSolariteUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFindRawSolariteCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier01Bonus01", gv_objectiveFindRawSolariteProgress);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindRawSolariteUpdate_Init () {
    gt_ObjectiveFindRawSolariteUpdate = TriggerCreate("gt_ObjectiveFindRawSolariteUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find Raw Solarite Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindRawSolariteFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFindRawSolariteCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier01Bonus01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindRawSolariteFailed_Init () {
    gt_ObjectiveFindRawSolariteFailed = TriggerCreate("gt_ObjectiveFindRawSolariteFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto54B0B41C_g;
    int auto54B0B41C_u;
    unit auto54B0B41C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 0.1);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    CameraShakeStop(gv_pLAYER_01_USER);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_introMinerals[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_introMinerals[1] = libNtve_gf_UnitGetPropertyResources(UnitFromId(4), c_unitPropCurrent);
    gv_introMinerals[2] = libNtve_gf_UnitGetPropertyResources(UnitFromId(6), c_unitPropCurrent);
    gv_introMinerals[3] = libNtve_gf_UnitGetPropertyResources(UnitFromId(7), c_unitPropCurrent);
    gv_introMinerals[4] = libNtve_gf_UnitGetPropertyResources(UnitFromId(5), c_unitPropCurrent);
    gv_introMinerals[5] = libNtve_gf_UnitGetPropertyResources(UnitFromId(2), c_unitPropCurrent);
    gv_introMinerals[6] = libNtve_gf_UnitGetPropertyResources(UnitFromId(9), c_unitPropCurrent);
    gv_introMinerals[7] = libNtve_gf_UnitGetPropertyResources(UnitFromId(3), c_unitPropCurrent);
    gv_introMinerals[8] = libNtve_gf_UnitGetPropertyResources(UnitFromId(8), c_unitPropCurrent);
    gv_introGas[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    gv_introGas[1] = libNtve_gf_UnitGetPropertyResources(UnitFromId(459), c_unitPropCurrent);
    auto54B0B41C_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto54B0B41C_u = UnitGroupCount(auto54B0B41C_g, c_unitCountAll);
    for (;; auto54B0B41C_u -= 1) {
        auto54B0B41C_var = UnitGroupUnitFromEnd(auto54B0B41C_g, auto54B0B41C_u);
        if (auto54B0B41C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto54B0B41C_var, false);
        UnitGroupAdd(gv_cinematicHiddenUnits, auto54B0B41C_var);
    }
    libNtve_gf_ShowHideUnit(UnitFromId(488), false);
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(488));
    libNtve_gf_ShowHideUnit(UnitFromId(172), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(99), 0.0, -1, 10, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetCrackerPurifierUnitCinematic", 0, gv_pLAYER_02_TALDARIM, PointFromId(341));
    gv_introPlanetCracker = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introPlanetCracker);
    UnitSetPropertyFixed(gv_introPlanetCracker, c_unitPropMovementSpeed, 1.0);
    UnitBehaviorRemove(gv_introPlanetCracker, "PlanetCrackerPurifierBuildUp", 1);
    UnitBehaviorAdd(gv_introPlanetCracker, "PlanetCrackerPurifierFiring", gv_introPlanetCracker, 1);
    UnitIssueOrder(gv_introPlanetCracker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(641)), c_orderQueueReplace);
    UnitIssueOrder(gv_introPlanetCracker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(870)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_introPlanetCracker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(76)), c_orderQueueAddToEnd);
    TriggerExecute(gt_IntroDestructibles, true, false);
    TriggerExecute(gt_IntroMusic, true, false);
    CameraShake(1, "Light", "Tremor", 4.0, 4.0, (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00129", true), c_soundIndexAny))+SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00101", true), c_soundIndexAny))));
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(984), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00069", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00101", true), c_soundIndexAny)) - 2), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00101", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(77), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(930), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00102", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00119", true), c_soundIndexAny)) - 3), -1, 10, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    SoundPlayForPlayer(SoundLink("Event_Purifier01_StartCine_PurifierVault", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(UnitFromId(499), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1002)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(500), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1017)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1018), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1020), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00130", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00075", true), c_soundIndexAny)) - 1), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00130", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00075", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto81869285_g;
    int auto81869285_u;
    unit auto81869285_var;
    unitgroup auto88F33DA7_g;
    int auto88F33DA7_u;
    unit auto88F33DA7_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto81869285_g = gv_cinematicTempUnits;
    auto81869285_u = UnitGroupCount(auto81869285_g, c_unitCountAll);
    for (;; auto81869285_u -= 1) {
        auto81869285_var = UnitGroupUnitFromEnd(auto81869285_g, auto81869285_u);
        if (auto81869285_var == null) { break; }
        UnitRemove(auto81869285_var);
    }
    auto88F33DA7_g = gv_cinematicHiddenUnits;
    auto88F33DA7_u = UnitGroupCount(auto88F33DA7_g, c_unitCountAll);
    for (;; auto88F33DA7_u -= 1) {
        auto88F33DA7_var = UnitGroupUnitFromEnd(auto88F33DA7_g, auto88F33DA7_u);
        if (auto88F33DA7_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto88F33DA7_var, true);
    }
    UnitKill(UnitFromId(868));
    UnitKill(UnitFromId(557));
    TriggerStop(gt_IntroMusic);
    SoundStopAllTriggerSounds(true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    TriggerStop(gt_IntroDestructibles);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libVCMI_gf_SendActorMessageToDoodadsInRegion("Signal PurifierBeamImpact", "OrbitalMegaDeathBeam_ImpactTrail", RegionFromId(76));
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals[0]);
    UnitSetPropertyFixed(UnitFromId(4), c_unitPropResources, gv_introMinerals[1]);
    UnitSetPropertyFixed(UnitFromId(6), c_unitPropResources, gv_introMinerals[2]);
    UnitSetPropertyFixed(UnitFromId(7), c_unitPropResources, gv_introMinerals[3]);
    UnitSetPropertyFixed(UnitFromId(5), c_unitPropResources, gv_introMinerals[4]);
    UnitSetPropertyFixed(UnitFromId(2), c_unitPropResources, gv_introMinerals[5]);
    UnitSetPropertyFixed(UnitFromId(9), c_unitPropResources, gv_introMinerals[6]);
    UnitSetPropertyFixed(UnitFromId(3), c_unitPropResources, gv_introMinerals[7]);
    UnitSetPropertyFixed(UnitFromId(8), c_unitPropResources, gv_introMinerals[8]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_introGas[0]);
    UnitSetPropertyFixed(UnitFromId(459), c_unitPropResources, gv_introGas[1]);
    UnitSetPropertyFixed(UnitFromId(38), c_unitPropEnergy, 0.0);
    if ((gv_cinematicCompleted == false)) {
        UnitSetPosition(UnitFromId(499), PointFromId(1002), false);
        UnitSetPosition(UnitFromId(500), PointFromId(1017), false);
    }

    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(31), true, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(64), lv_fadeDuration, -1, 10, true);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, true);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(64)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Destructibles
//--------------------------------------------------------------------------------------------------
bool gt_IntroDestructibles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_UnitInRegion(gv_introPlanetCracker, RegionCircle(UnitGetPosition(UnitFromId(868)), 2.0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    SoundPlayForPlayer(SoundLink("Event_Purifier01_StartCine_Explo01", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("PPurifier01_HoleExplosion", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitKill(UnitFromId(868));
    while (!((libNtve_gf_UnitInRegion(gv_introPlanetCracker, RegionCircle(UnitGetPosition(UnitFromId(557)), 2.0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    SoundPlayForPlayer(SoundLink("Event_Purifier01_StartCine_Explo02", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("PPurifier01_HoleExplosion", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitKill(UnitFromId(557));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroDestructibles_Init () {
    gt_IntroDestructibles = TriggerCreate("gt_IntroDestructibles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_soundtrack = "PPurifier01_Music_Intro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier01_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCEF0A7E5_g;
    int autoCEF0A7E5_u;
    unit autoCEF0A7E5_var;
    unitgroup auto562C6B18_g;
    int auto562C6B18_u;
    unit auto562C6B18_var;
    unitgroup auto5C971D2A_g;
    int auto5C971D2A_u;
    unit auto5C971D2A_var;
    unitgroup autoDA9A7DC4_g;
    int autoDA9A7DC4_u;
    unit autoDA9A7DC4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    CameraShakeStop(gv_pLAYER_01_USER);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitRemove(gv_displacementBeam.lv_unit);
    TriggerStop(gt_DisplacementBeamScreenShake);
    if ((UnitIsAlive(UnitFromId(488)) == true)) {
        UnitRemove(UnitFromId(488));
        ActorSend(libHots_gf_ActorForUnit(UnitFromId(488), 1), "SetOpacity");
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitFromId(488), 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(UnitFromId(488), 1));
    }

    autoCEF0A7E5_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCEF0A7E5_u = UnitGroupCount(autoCEF0A7E5_g, c_unitCountAll);
    for (;; autoCEF0A7E5_u -= 1) {
        autoCEF0A7E5_var = UnitGroupUnitFromEnd(autoCEF0A7E5_g, autoCEF0A7E5_u);
        if (autoCEF0A7E5_var == null) { break; }
        UnitRemove(autoCEF0A7E5_var);
    }
    auto562C6B18_g = UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(78), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto562C6B18_u = UnitGroupCount(auto562C6B18_g, c_unitCountAll);
    for (;; auto562C6B18_u -= 1) {
        auto562C6B18_var = UnitGroupUnitFromEnd(auto562C6B18_g, auto562C6B18_u);
        if (auto562C6B18_var == null) { break; }
        if ((UnitGetType(auto562C6B18_var) != "GlaciusTechnologyVault")) {
            UnitRemove(auto562C6B18_var);
        }

    }
    auto5C971D2A_g = UnitGroup(null, gv_pLAYER_02_TALDARIM, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5C971D2A_u = UnitGroupCount(auto5C971D2A_g, c_unitCountAll);
    for (;; auto5C971D2A_u -= 1) {
        auto5C971D2A_var = UnitGroupUnitFromEnd(auto5C971D2A_g, auto5C971D2A_u);
        if (auto5C971D2A_var == null) { break; }
        UnitRemove(auto5C971D2A_var);
    }
    autoDA9A7DC4_g = UnitGroup(null, gv_pLAYER_03_TALDARIM, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA9A7DC4_u = UnitGroupCount(autoDA9A7DC4_g, c_unitCountAll);
    for (;; autoDA9A7DC4_u -= 1) {
        autoDA9A7DC4_var = UnitGroupUnitFromEnd(autoDA9A7DC4_g, autoDA9A7DC4_u);
        if (autoDA9A7DC4_var == null) { break; }
        UnitRemove(autoDA9A7DC4_var);
    }
    UnitPauseAll(true);
    UnitCreate(1, "WarpPrism", 0, gv_pLAYER_01_USER, PointFromId(1048), 315.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_victoryWarpPrism = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1105));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_victoryAccessPointUnits, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 2.828, 45.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sentry", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1062));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_victoryAccessPointUnits, UnitLastCreated());
    gv_victorySentry = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 2.828, 45.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(1110));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_victoryAccessPointUnits, UnitLastCreated());
    gv_victoryZealot = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 2.828, 45.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_planetCrackerDistance;
    fixed lv_travelTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(455), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1112), 8.0, -1, 10, true);
    TriggerExecute(gt_VictoryDisplacementBeam, true, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier01_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_VictoryVaultAnimations, true, false);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00095", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00096", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 3.0, 0.0, 30.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00097", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_victoryZealot, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(925)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1194), 3.0, -1, 10, true);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(174), "StatusSet Victory 1");
    UnitKill(UnitFromId(174));
    SoundPlayForPlayer(SoundLink("PPurifier01_VictoryWarp", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00098", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    UnitGroupIssueOrder(gv_victoryAccessPointUnits, OrderTargetingUnit(null, gv_victoryWarpPrism), c_orderQueueReplace);
    UnitIssueOrder(gv_victoryWarpPrism, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(78)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    gv_victoryExplosionReady = true;
    Wait(5.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(122), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00128", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00126", true), c_soundIndexAny))), -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00128", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier01|Line00126", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto27CF93E4_g;
    int auto27CF93E4_u;
    unit auto27CF93E4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_VictoryDisplacementBeam);
    CameraShakeStop(gv_pLAYER_01_USER);
    auto27CF93E4_g = gv_cinematicTempUnits;
    auto27CF93E4_u = UnitGroupCount(auto27CF93E4_g, c_unitCountAll);
    for (;; auto27CF93E4_u -= 1) {
        auto27CF93E4_var = UnitGroupUnitFromEnd(auto27CF93E4_g, auto27CF93E4_u);
        if (auto27CF93E4_var == null) { break; }
        UnitRemove(auto27CF93E4_var);
    }
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Displacement Beam
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDisplacementBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    fixed lv_travelTime;
    fixed lv_timeTillDeath;
    actor lv_explosionEffect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timeTillDeath = 1.0;
    lv_timeTillDeath += SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00095", true), c_soundIndexAny));
    lv_timeTillDeath += SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00096", true), c_soundIndexAny));
    lv_timeTillDeath += SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Purifier01|Line00097", true), c_soundIndexAny));
    lv_timeTillDeath += 7.0;
    if ((lv_timeTillDeath < 18.0)) {
        lv_timeTillDeath = 18.0;
    }

    lv_distance = DistanceBetweenPoints(PointFromId(275), PointFromId(276));
    lv_distance += DistanceBetweenPoints(PointFromId(276), PointFromId(279));
    lv_distance += DistanceBetweenPoints(PointFromId(279), PointFromId(432));
    lv_travelTime = (lv_distance / 1.2);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetCrackerPurifierUnitCinematic", 0, gv_pLAYER_02_TALDARIM, PointFromId(275));
    gv_victoryPlanetCracker = UnitLastCreated();
    UnitSetPropertyFixed(gv_victoryPlanetCracker, c_unitPropMovementSpeed, 1.2);
    UnitGroupAdd(gv_cinematicTempUnits, gv_victoryPlanetCracker);
    if ((lv_travelTime <= lv_timeTillDeath)) {
        Wait((lv_timeTillDeath - lv_travelTime), c_timeGame);
        UnitIssueOrder(gv_victoryPlanetCracker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(276)), c_orderQueueReplace);
        UnitIssueOrder(gv_victoryPlanetCracker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(279)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_victoryPlanetCracker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(432)), c_orderQueueAddToEnd);
        Wait(lv_travelTime, c_timeGame);
    }
    else {
        UnitSetPropertyFixed(gv_victoryPlanetCracker, c_unitPropMovementSpeed, (lv_distance / lv_timeTillDeath));
        UnitIssueOrder(gv_victoryPlanetCracker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(276)), c_orderQueueReplace);
        UnitIssueOrder(gv_victoryPlanetCracker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(279)), c_orderQueueAddToEnd);
        UnitIssueOrder(gv_victoryPlanetCracker, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(432)), c_orderQueueAddToEnd);
        Wait(lv_timeTillDeath, c_timeGame);
    }
    while (!((gv_victoryExplosionReady == true))) {
        Wait(0.0625, c_timeGame);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1233), 2.0, -1, 10, true);
    CameraShake(gv_pLAYER_01_USER, "Heavy", "Earthquake", 0.0, 1.0, 3.0);
    SoundPlayForPlayer(SoundLink("PPurifier01_PurifierVault_VictoryExplosion", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Purifier01_EndCine_FireLoop", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    UnitKill(gv_victoryPlanetCracker);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDisplacementBeam_Init () {
    gt_VictoryDisplacementBeam = TriggerCreate("gt_VictoryDisplacementBeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Vault Animations
//--------------------------------------------------------------------------------------------------
bool gt_VictoryVaultAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beamCaster;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "BeamCaster", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(1062), 2.5, 45.0), 45.0);
    lv_beamCaster = UnitLastCreated();
    UnitSetPropertyFixed(lv_beamCaster, c_unitPropHeight, 0.5);
    UnitIssueOrder(lv_beamCaster, OrderTargetingUnit(AbilityCommand("BeamCaster11", 0), UnitFromId(174)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(174)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_victorySentry), c_animNameDefault, "Spell", c_animFlagPlayForever, c_animTimeDefault);
    Wait(8.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(174), "Signal WarpVault");
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_victorySentry), c_animNameDefault);
    UnitRemove(lv_beamCaster);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(174)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Purifier01_EndCineExploSweetener", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryVaultAnimations_Init () {
    gt_VictoryVaultAnimations = TriggerCreate("gt_VictoryVaultAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGameQ_Init();
    gt_DisplacementBeamAdvancesQ_Init();
    gt_TipReadyQ_Init();
    gt_InitDisplacementBeam_Init();
    gt_DisplacementBeamController_Init();
    gt_SetDisplacementBeamSpeed_Init();
    gt_PingDisplacementBeamPathRemaining_Init();
    gt_DisplacementBeamScreenShake_Init();
    gt_PlayerPassesGlaciusDefensePoint01_Init();
    gt_PlayerPassesGlaciusDefensePoint02_Init();
    gt_PlayerPassesGlaciusDefensePoint03_Init();
    gt_DisplacementBeamReachesGlaciusDefense0_Init();
    gt_DisplacementBeamReachesGlaciusDefense1_Init();
    gt_DisplacementBeamReachesGlaciusDefense2_Init();
    gt_DisplacementBeamReachesGlaciusDefense3_Init();
    gt_DisplacementBeamReachesGlaciusDefense4_Init();
    gt_DisplacementBeamReachesMainAccessPoint_Init();
    gt_PlayerUnitsCloseToDisplacementBeamQ_Init();
    gt_PlayerUnitsHitByDisplacementBeamQ_Init();
    gt_SentryIntroQ_Init();
    gt_SentryUnlockedQ_Init();
    gt_SentryGatewaySelectedCleanup_Init();
    gt_SentryGatewayDiesCleanup_Init();
    gt_SentryCleanupTraining_Init();
    gt_SentryCleanupTimeout_Init();
    gt_TrackSentryStasis_Init();
    gt_TrackSentryStasisQ_Init();
    gt_PlayerApproachesP03BaseQ_Init();
    gt_PlayerAttacksP03BaseQ_Init();
    gt_TaldarimReinforcementA1_Init();
    gt_TaldarimReinforcementA2_Init();
    gt_TaldarimAmbush_Init();
    gt_TaldarimAmbushQ_Init();
    gt_TaldarimWarpConstruction_Init();
    gt_FinalEncounter_Init();
    gt_ForceFieldReminderQ1_Init();
    gt_ForceFieldReminderQ2_Init();
    gt_ForceFieldReminderQ3_Init();
    gt_ForceFieldRevealPylon1_Init();
    gt_ForceFieldRevealPylon2_Init();
    gt_ForceFieldRevealPylon3_Init();
    gt_AIGateUsageOnOffControlFF2_Init();
    gt_AIGateUsageOnOffControlFF4_Init();
    gt_PylonPoweringForceFieldDies_Init();
    gt_DestroyForceFieldPathingBlockersProgress_Init();
    gt_DestroyForceFieldPathingBlockersPylonDestroyed_Init();
    gt_RawSolariteDiscoverQ_Init();
    gt_PickupRawSolarite1_Init();
    gt_PickupRawSolarite2_Init();
    gt_PickupRawSolarite3_Init();
    gt_Checkpoint01_Init();
    gt_Checkpoint02_Init();
    gt_Checkpoint03EnvironmentShift_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_AchievementUnitLosttoDisplacementBeam_Init();
    gt_StatTaldarimGatewaysDestroyed_Init();
    gt_AchievementTaldarimGatewaysDestroyed_Init();
    gt_StatSentryShieldRestoration_Init();
    gt_AchievementDestroyallenemystructures_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryReachTechVaultCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_ObjectiveReachtheTechVaultCreate_Init();
    gt_ObjectiveReachtheTechVaultComplete_Init();
    gt_ObjectiveReachtheTechVaultFailed_Init();
    gt_ObjectiveFindRawSolariteCreate_Init();
    gt_ObjectiveFindRawSolariteComplete_Init();
    gt_ObjectiveFindRawSolariteUpdate_Init();
    gt_ObjectiveFindRawSolariteFailed_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroDestructibles_Init();
    gt_IntroMusic_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryDisplacementBeam_Init();
    gt_VictoryVaultAnimations_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
