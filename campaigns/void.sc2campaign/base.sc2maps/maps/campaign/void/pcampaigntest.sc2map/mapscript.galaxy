//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Aiur 1
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "ai04DD8B1F"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_DOMINION = 2;
const int gv_pLAYER_03_ALLYPROTOSS = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_artanis;
unit gv_zeratul;
string gv_mapMusicTrack;
playergroup gv_enemyPlayers;
bool gv_inCyberSpace;
bool gv_hideToggleButton;
int gv_toggleDialog;
int gv_toggleButton;
unitgroup[7] gv_bonusObjectiveRescueUnits;
region[7] gv_bonusObjectiveRescueRegions;
int[7] gv_bonusObjectiveRescuePings;
revealer[7] gv_bonusObjectiveRescueRevealer;
actor[7] gv_bonusObjectiveNormalSpaceMarker;
int gv_objectiveDestroyZergBase;
int gv_objectiveRescueStalkers;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
actor gv_introHatchReticle;

void InitGlobals () {
    int init_i;

    gv_enemyPlayers = PlayerGroupEmpty();
    gv_toggleDialog = c_invalidDialogId;
    gv_toggleButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bonusObjectiveRescueUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bonusObjectiveRescuePings[init_i] = c_invalidPingId;
    }
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
point gf_TogglePoint (point lp_point);
void gf_RescueStalkerGroup (int lp_stalkerGroup);
bool gf_StalkerGroupRescued (int lp_stalkerGroup);
void gf_CreateHybridforPhylactery (unit lp_phylactery);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugStage2;
trigger gt_DebugStage3;
trigger gt_DebugExampleRepeatCheat;
trigger gt_DebugCheatBonusObjective;
trigger gt_DebugStartLichHybrid;
trigger gt_DebugTestProgressBar;
trigger gt_CyberspaceColoringOwnerChanged;
trigger gt_CyberspaceColoringUnitCreated;
trigger gt_StartGameQ;
trigger gt_SetupToggleButton;
trigger gt_ToggleSelectedtoCyberNormalSpace;
trigger gt_RescueStalkerGroup01;
trigger gt_RescueStalkerGroup02;
trigger gt_RescueStalkerGroup03;
trigger gt_CreatePhylacteryHybrid;
trigger gt_SendTwoConsecutiveTransmissionsQ;
trigger gt_SendTransmissionQ;
trigger gt_TransmissionBonusObjectiveDiscoveredQ;
trigger gt_TransmissionZergBaseHeavilyFortifiedQ;
trigger gt_TransmissionLichHybridAttackQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryDestoryZergHatchCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipReadyQ;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_ObjectiveDestroyZergInfestationCreate;
trigger gt_ObjectiveDestroyZergInfestationCompleteQ;
trigger gt_ObjectiveDestroyZergInfestationUpdate;
trigger gt_ObjectiveDestroyZergInfestationFailedQ;
trigger gt_ObjectiveRescueStalkersCreate;
trigger gt_ObjectiveRescueStalkersCompleteQ;
trigger gt_ObjectiveRescueStalkersUpdate;
trigger gt_ObjectiveRescueStalkersFailedQ;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai04DD8B1F") { ai04DD8B1F_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { ai04DD8B1F_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai04DD8B1F") { return ai04DD8B1F_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai04DD8B1F", 2);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
point gf_TogglePoint (point lp_point) {
    // Implementation
    if ((RegionContainsPoint(RegionFromId(1), lp_point) == true)) {
        return PointWithOffsetPolar(RegionGetCenter(RegionFromId(2)), DistanceBetweenPoints(RegionGetCenter(RegionFromId(1)), lp_point), AngleBetweenPoints(RegionGetCenter(RegionFromId(1)), lp_point));
    }
    else {
    }
    if ((RegionContainsPoint(RegionFromId(2), lp_point) == true)) {
        return PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), DistanceBetweenPoints(RegionGetCenter(RegionFromId(2)), lp_point), AngleBetweenPoints(RegionGetCenter(RegionFromId(2)), lp_point));
    }
    else {
    }
    return null;
}

void gf_RescueStalkerGroup (int lp_stalkerGroup) {
    // Implementation
    TriggerExecute(gt_ObjectiveRescueStalkersUpdate, true, true);
    UnitGroupLoopBegin(gv_bonusObjectiveRescueUnits[lp_stalkerGroup]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        UnitGroupRemove(gv_bonusObjectiveRescueUnits[lp_stalkerGroup], UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    PingDestroy(gv_bonusObjectiveRescuePings[lp_stalkerGroup]);
    gv_bonusObjectiveRescuePings[lp_stalkerGroup] = c_invalidPingId;
    libNtve_gf_KillModel(gv_bonusObjectiveNormalSpaceMarker[lp_stalkerGroup]);
    gv_bonusObjectiveNormalSpaceMarker[lp_stalkerGroup] = null;
}

bool gf_StalkerGroupRescued (int lp_stalkerGroup) {
    int autoDC8E070D_val;

    // Implementation
    autoDC8E070D_val = lp_stalkerGroup;
    if (autoDC8E070D_val == 1) {
        return TriggerIsEnabled(gt_RescueStalkerGroup01);
    }
    else if (autoDC8E070D_val == 2) {
        return TriggerIsEnabled(gt_RescueStalkerGroup02);
    }
    else if (autoDC8E070D_val == 3) {
        return TriggerIsEnabled(gt_RescueStalkerGroup03);
    }
    else {
        return false;
    }
}

void gf_CreateHybridforPhylactery (unit lp_phylactery) {
    // Variable Declarations
    unit lv_hybrid;
    int lv_rebuildTime;
    int lv_rebuildTimeMax;

    // Variable Initialization
    lv_rebuildTime = 90;
    lv_rebuildTimeMax = 90;

    // Implementation
    while ((UnitIsAlive(lp_phylactery) == true)) {
        if ((lv_hybrid == null)) {
            UnitCreate(1, "HybridReaver", 0, gv_pLAYER_02_DOMINION, UnitGetPosition(lp_phylactery), 270.0);
            lv_hybrid = UnitLastCreated();
        }
        else {
            UnitRevive(lv_hybrid);
            if ((UnitIsAlive(lv_hybrid) == false)) {
                UnitCreate(1, "HybridReaver", 0, gv_pLAYER_02_DOMINION, UnitGetPosition(lp_phylactery), 270.0);
                lv_hybrid = UnitLastCreated();
            }
            else {
            }
        }
        while ((UnitIsAlive(lv_hybrid) == true) && (UnitIsAlive(lp_phylactery) == true)) {
            UnitIssueOrder(lv_hybrid, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(310)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_phylactery) == true)) {
            lv_rebuildTime = lv_rebuildTimeMax;
            libVCUI_gf_DisplayProgressBarUnitOld(lp_phylactery, 0, 90, StringExternal("Param/Value/0A4273CF"), -100, -30, "Ref_Center");
            while ((UnitIsAlive(lp_phylactery) == true) && (lv_rebuildTime > 0)) {
                libVCUI_gf_SetProgressBarProgressUnitOld(lp_phylactery, lv_rebuildTime);
                lv_rebuildTime -= 1;
                Wait(1.0, c_timeGame);
            }
        }
        else {
        }
        libVCUI_gf_DestroyProgressBarUnitOld(lp_phylactery);
    }
    UnitKill(lv_hybrid);
    lv_hybrid = null;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_EnableCampaignTechUnit(true, "Zealot", gv_pLAYER_01_USER);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("Charge", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_ALLYPROTOSS, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION, gv_pLAYER_03_ALLYPROTOSS, libNtve_ge_AllianceSetting_Neutral);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerSetState(gv_pLAYER_02_DOMINION, c_playerStateFidgetingEnabled, false);
    PlayerSetState(gv_pLAYER_03_ALLYPROTOSS, c_playerStateFidgetingEnabled, false);
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    gv_bonusObjectiveRescueRegions[1] = RegionFromId(3);
    gv_bonusObjectiveRescueRegions[2] = RegionFromId(4);
    gv_bonusObjectiveRescueRegions[3] = RegionFromId(5);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(72)), libNtve_gf_SetTintColor(Color(0.00, 0.00, 100.00), 1.0, 0.0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(72)), libNtve_gf_SetScale(0.3, 1.0, 1.0, 0.0));
    UnitGroupLoopBegin(UnitGroup(UnitGetType(UnitFromId(11)), c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetOpacity(0.75, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetTintColor(Color(0.00, 0.00, 100.00), 1.0, 0.0));
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER)) {
            ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetTintColor(Color(0.00, 0.00, 100.00), 1.0, 0.0));
        }
        else {
            if (((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_EnemyMutual) == true))) {
                ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 1.0, 0.0));
            }
            else {
                if (((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Neutral) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_NeutralMutual) == true))) {
                    ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetTintColor(Color(100.00, 100.00, 0.00), 1.0, 0.0));
                }
                else {
                    if (((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_NeutralMutual) == true))) {
                        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetTintColor(Color(0.00, 100.00, 0.00), 1.0, 0.0));
                    }
                    else {
                    }
                }
            }
        }
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetOpacity(0.75, 0));
    }
    UnitGroupLoopEnd();
    IntLoopBegin(FixedToInt((PointGetY(RegionGetBoundsMin(RegionFromId(1))) + 1.0)), FixedToInt(PointGetY(RegionGetBoundsMax(RegionFromId(1)))));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "ShapeCube", Point((PointGetX(RegionGetCenter(RegionFromId(1))) + (libNtve_gf_WidthOfRegion(RegionFromId(1)) / 2.0)), IntLoopCurrent()), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.015);
        PingSetColor(PingLastCreated(), Color(0.00, 0.00, 50.20));
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "Music_TerrHigh";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("SampleTip");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_pLAYER_01_USER);
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        libVCMI_gf_AddMissionCheat("Mid Cine", "Skip to Mid Cinematic where Cyberspace is introduced", gt_DebugStage2, libVCMI_ge_MissionCheatType_Stage, libVCMI_ge_MissionCheatUIType_Button);
        libVCMI_gf_AddMissionCheat("BonusObj", "Rescue N Stalker groups", gt_DebugCheatBonusObjective, libVCMI_ge_MissionCheatType_Mechanic, libVCMI_ge_MissionCheatUIType_ButtonEditBoxCombo);
        libVCMI_gf_AddMissionCheat("Send Hybrid Attack", "Sends an attack from the \"Lych\" Hybrid", gt_DebugStartLichHybrid, libVCMI_ge_MissionCheatType_Mechanic, libVCMI_ge_MissionCheatUIType_Button);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MidQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2_Init () {
    gt_DebugStage2 = TriggerCreate("gt_DebugStage2_Func");
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 3
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage3_Init () {
    gt_DebugStage3 = TriggerCreate("gt_DebugStage3_Func");
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "S3", true);
    TriggerAddEventChatMessage(gt_DebugStage3, c_playerAny, "Stage3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Example Repeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DebugExampleRepeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugExampleRepeatCheat_Init () {
    gt_DebugExampleRepeatCheat = TriggerCreate("gt_DebugExampleRepeatCheat_Func");
    TriggerAddEventChatMessage(gt_DebugExampleRepeatCheat, c_playerAny, "repeatable", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Cheat Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_DebugCheatBonusObjective_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_editboxParameter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_editboxParameter = libVCMI_gf_MissionCheatEditBoxValueInteger(TriggerGetCurrent());
    IntLoopBegin(1, lv_editboxParameter);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gf_StalkerGroupRescued(1) == true)) {
            TriggerExecute(gt_RescueStalkerGroup01, false, false);
        }
        else if ((gf_StalkerGroupRescued(2) == true)) {
            TriggerExecute(gt_RescueStalkerGroup02, false, false);
        }
        else if ((gf_StalkerGroupRescued(3) == true)) {
            TriggerExecute(gt_RescueStalkerGroup03, false, false);
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCheatBonusObjective_Init () {
    gt_DebugCheatBonusObjective = TriggerCreate("gt_DebugCheatBonusObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Start Lich Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_DebugStartLichHybrid_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_TransmissionLichHybridAttackQ, true, false);
    TriggerExecute(gt_CreatePhylacteryHybrid, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStartLichHybrid_Init () {
    gt_DebugStartLichHybrid = TriggerCreate("gt_DebugStartLichHybrid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Test Progress Bar
//--------------------------------------------------------------------------------------------------
bool gt_DebugTestProgressBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_testUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupSelected(gv_pLAYER_01_USER));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ArtifactVault")) {
            lv_testUnit = UnitGroupLoopCurrent();
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_testUnit == null)) {
        return true;
    }
    else {
    }
    libVCUI_gf_SetProgresBarTitleUnitOld(lv_testUnit, StringExternal("Param/Value/8F432B58"));
    Wait(1.0, c_timeGame);
    libVCUI_gf_MoveProgressBarUnitOld(lv_testUnit, 0, 0);
    Wait(1.0, c_timeGame);
    libVCUI_gf_MoveProgressBarUnitOld(lv_testUnit, 0, 0);
    Wait(1.0, c_timeGame);
    libVCUI_gf_MoveProgressBarUnitOld(lv_testUnit, 0, 0);
    Wait(1.0, c_timeGame);
    libVCUI_gf_SetProgressBarValueRangeUnitOld(lv_testUnit, 15, 75);
    Wait(1.0, c_timeGame);
    libVCUI_gf_ShowHideProgressBarUnitOld(lv_testUnit, false);
    Wait(1.0, c_timeGame);
    libVCUI_gf_ShowHideProgressBarUnitOld(lv_testUnit, true);
    Wait(1.0, c_timeGame);
    libVCUI_gf_ShowHideProgressBarUnitOld(lv_testUnit, false);
    Wait(1.0, c_timeGame);
    libVCUI_gf_ShowHideProgressBarUnitOld(lv_testUnit, true);
    Wait(1.0, c_timeGame);
    libVCUI_gf_ShowHideProgressBarUnitOld(lv_testUnit, false);
    Wait(1.0, c_timeGame);
    libVCUI_gf_ShowHideProgressBarUnitOld(lv_testUnit, true);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugTestProgressBar_Init () {
    gt_DebugTestProgressBar = TriggerCreate("gt_DebugTestProgressBar_Func");
    TriggerAddEventChatMessage(gt_DebugTestProgressBar, c_playerAny, "testprogressbar", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cyberspace Coloring - Owner Changed
//--------------------------------------------------------------------------------------------------
bool gt_CyberspaceColoringOwnerChanged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(2)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitOwnerNew() == gv_pLAYER_01_USER)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(0.00, 0.00, 100.00), 1.0, 0.0));
    }
    else {
        if (((libNtve_gf_PlayerIsEnemy(EventUnitOwnerNew(), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(EventUnitOwnerNew(), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_EnemyMutual) == true))) {
            ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 1.0, 0.0));
        }
        else {
            if (((libNtve_gf_PlayerIsEnemy(EventUnitOwnerNew(), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Neutral) == true) || (libNtve_gf_PlayerIsEnemy(EventUnitOwnerNew(), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_NeutralMutual) == true))) {
                ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(100.00, 100.00, 0.00), 1.0, 0.0));
            }
            else {
                if (((libNtve_gf_PlayerIsEnemy(EventUnitOwnerNew(), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true) || (libNtve_gf_PlayerIsEnemy(EventUnitOwnerNew(), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_NeutralMutual) == true))) {
                    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(0.00, 100.00, 0.00), 1.0, 0.0));
                }
                else {
                }
            }
        }
    }
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetOpacity(0.75, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CyberspaceColoringOwnerChanged_Init () {
    gt_CyberspaceColoringOwnerChanged = TriggerCreate("gt_CyberspaceColoringOwnerChanged_Func");
    TriggerEnable(gt_CyberspaceColoringOwnerChanged, false);
    TriggerAddEventUnitChangeOwner(gt_CyberspaceColoringOwnerChanged, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cyberspace Coloring - Unit Created
//--------------------------------------------------------------------------------------------------
bool gt_CyberspaceColoringUnitCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(2)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(0.00, 0.00, 100.00), 1.0, 0.0));
    }
    else {
        if (((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_EnemyMutual) == true))) {
            ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 1.0, 0.0));
        }
        else {
            if (((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Neutral) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_NeutralMutual) == true))) {
                ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(100.00, 100.00, 0.00), 1.0, 0.0));
            }
            else {
                if (((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_Ally) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), gv_pLAYER_01_USER, libNtve_ge_PlayerRelation_NeutralMutual) == true))) {
                    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(0.00, 100.00, 0.00), 1.0, 0.0));
                }
                else {
                }
            }
        }
    }
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetOpacity(0.75, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CyberspaceColoringUnitCreated_Init () {
    gt_CyberspaceColoringUnitCreated = TriggerCreate("gt_CyberspaceColoringUnitCreated_Func");
    TriggerAddEventUnitCreated(gt_CyberspaceColoringUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringToText(""), null, PointFromId(310));
    TriggerEnable(gt_CyberspaceColoringOwnerChanged, true);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyZergInfestationCreate, true, true);
    TriggerQueueExit();
    libVCMI_gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(28)), TextExpressionAssemble("Param/Expression/DB509C96"));
    Wait(2.0, c_timeReal);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    Wait(120.0, c_timeGame);
    TriggerExecute(gt_MidQ, true, false);
    Wait(120.0, c_timeGame);
    TriggerExecute(gt_TransmissionLichHybridAttackQ, true, false);
    TriggerExecute(gt_CreatePhylacteryHybrid, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Toggle Button
//--------------------------------------------------------------------------------------------------
bool gt_SetupToggleButton_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 100, c_anchorBottomLeft, 0, 375, true);
    gv_toggleDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/9989B3AF"), StringExternal("Param/Value/F42EC24F"), "");
    gv_toggleButton = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((gv_hideToggleButton == true)) {
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        }
        else {
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        }
        Wait(0.5, c_timeReal);
    }
    DialogDestroy(DialogLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupToggleButton_Init () {
    gt_SetupToggleButton = TriggerCreate("gt_SetupToggleButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Selected to Cyber/Normal Space
//--------------------------------------------------------------------------------------------------
bool gt_ToggleSelectedtoCyberNormalSpace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_warpedUnits;
    text lv_buttonText;

    // Variable Initialization
    lv_warpedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_toggleButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRescueStalkersCreate, true, false);
    lv_warpedUnits = UnitGroupSelected(gv_pLAYER_01_USER);
    if ((UnitGroupCount(UnitGroupFilterPlayer(lv_warpedUnits, gv_pLAYER_01_USER, 0), c_unitCountAlive) == 0)) {
        SoundPlay(SoundLink("UI_GenericError", 0), PlayerGroupAll(), 100.0, 0.0);
        return true;
    }
    else {
    }
    DialogControlSetEnabled(gv_toggleButton, PlayerGroupAll(), false);
    lv_buttonText = libNtve_gf_DialogItemText(gv_toggleButton, gv_pLAYER_01_USER);
    libNtve_gf_SetDialogItemText(gv_toggleButton, StringExternal("Param/Value/67AA4B62"), PlayerGroupAll());
    UnitGroupLoopBegin(lv_warpedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_01_USER)) {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(1)) == true)) {
                ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetOpacity(0.75, 0));
                ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetTintColor(Color(0.00, 0.00, 100.00), 1.0, 0.0));
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetOpacity(1.0, 0));
                ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
            }
            libNtve_gf_CreateModelAtPoint("HybridWarpOut", UnitGetPosition(UnitGroupLoopCurrent()));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.25, 0.25, 0.5, 0.0));
            libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 5, libNtve_gf_ActorLastCreated());
            UnitSetPosition(UnitGroupLoopCurrent(), gf_TogglePoint(UnitGetPosition(UnitGroupLoopCurrent())), false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            libNtve_gf_CreateModelAtPoint("HybridWarpInEffect", UnitGetPosition(UnitGroupLoopCurrent()));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.25, 0.25, 0.5, 0.0));
            libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 6, libNtve_gf_ActorLastCreated());
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 2.0, 270.0);
            PingSetScale(PingLastCreated(), 0.5);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeGame);
    UnitGroupLoopBegin(lv_warpedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 5));
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(UnitGroupLoopCurrent(), 6));
        libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 5, null);
        libHots_gf_StoreActorForUnit(UnitGroupLoopCurrent(), 6, null);
    }
    UnitGroupLoopEnd();
    DialogControlSetEnabled(gv_toggleButton, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(gv_toggleButton, lv_buttonText, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleSelectedtoCyberNormalSpace_Init () {
    gt_ToggleSelectedtoCyberNormalSpace = TriggerCreate("gt_ToggleSelectedtoCyberNormalSpace_Func");
    TriggerAddEventDialogControl(gt_ToggleSelectedtoCyberNormalSpace, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Stalker Group 01
//--------------------------------------------------------------------------------------------------
bool gt_RescueStalkerGroup01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RescueStalkerGroup(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueStalkerGroup01_Init () {
    gt_RescueStalkerGroup01 = TriggerCreate("gt_RescueStalkerGroup01_Func");
    TriggerAddEventUnitRegion(gt_RescueStalkerGroup01, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Stalker Group 02
//--------------------------------------------------------------------------------------------------
bool gt_RescueStalkerGroup02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RescueStalkerGroup(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueStalkerGroup02_Init () {
    gt_RescueStalkerGroup02 = TriggerCreate("gt_RescueStalkerGroup02_Func");
    TriggerAddEventUnitRegion(gt_RescueStalkerGroup02, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Stalker Group 03
//--------------------------------------------------------------------------------------------------
bool gt_RescueStalkerGroup03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RescueStalkerGroup(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueStalkerGroup03_Init () {
    gt_RescueStalkerGroup03 = TriggerCreate("gt_RescueStalkerGroup03_Func");
    TriggerAddEventUnitRegion(gt_RescueStalkerGroup03, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Phylactery Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_CreatePhylacteryHybrid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_spawnRegion;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegion = RegionFromId(1);
    RegionAddCircle(lv_spawnRegion, false, PointFromId(310), 20.0);
    RegionAddCircle(lv_spawnRegion, false, PointFromId(311), 20.0);
    UnitCreate(1, "ArtifactVault", 0, gv_pLAYER_02_DOMINION, RegionRandomPoint(lv_spawnRegion), 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3554258B"));
    PingSetScale(PingLastCreated(), 0.6);
    gf_CreateHybridforPhylactery(UnitLastCreated());
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePhylacteryHybrid_Init () {
    gt_CreatePhylacteryHybrid = TriggerCreate("gt_CreatePhylacteryHybrid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Two Consecutive Transmissions Q
//--------------------------------------------------------------------------------------------------
bool gt_SendTwoConsecutiveTransmissionsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Genericphrases|Line00069", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Genericphrases|Line00022", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendTwoConsecutiveTransmissionsQ_Init () {
    gt_SendTwoConsecutiveTransmissionsQ = TriggerCreate("gt_SendTwoConsecutiveTransmissionsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_SendTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "Genericphrases|Line00069", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendTransmissionQ_Init () {
    gt_SendTransmissionQ = TriggerCreate("gt_SendTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bonus Objective Discovered Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveDiscoveredQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaignPlaceHolder(null, null, StringExternal("Param/Value/9AAACB36"), StringExternal("Param/Value/78779868"), 13.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveDiscoveredQ_Init () {
    gt_TransmissionBonusObjectiveDiscoveredQ = TriggerCreate("gt_TransmissionBonusObjectiveDiscoveredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Zerg Base Heavily Fortified Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionZergBaseHeavilyFortifiedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaignPlaceHolder(null, null, StringExternal("Param/Value/0925D44F"), StringExternal("Param/Value/1A2D6B31"), 13.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionZergBaseHeavilyFortifiedQ_Init () {
    gt_TransmissionZergBaseHeavilyFortifiedQ = TriggerCreate("gt_TransmissionZergBaseHeavilyFortifiedQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionZergBaseHeavilyFortifiedQ, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Lich Hybrid Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLichHybridAttackQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaignPlaceHolder(null, null, StringExternal("Param/Value/BBA14326"), StringExternal("Param/Value/92465071"), 13.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLichHybridAttackQ_Init () {
    gt_TransmissionLichHybridAttackQ = TriggerCreate("gt_TransmissionLichHybridAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/897D30D2"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyZergInfestationFailedQ, true, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/4DED3829"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destory Zerg Hatch Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestoryZergHatchCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(28)) == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestoryZergHatchCompleted_Init () {
    gt_VictoryDestoryZergHatchCompleted = TriggerCreate("gt_VictoryDestoryZergHatchCompleted_Func");
    TriggerAddEventTimePeriodic(gt_VictoryDestoryZergHatchCompleted, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyZergInfestationCompleteQ, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objectiveDestroyZergBase) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveRescueStalkers) == c_objectiveStateCompleted)) {
        libVoiC_gf_CampaignAwardAchievement("ZSpace02_1", gv_pLAYER_01_USER);
    }
    else {
    }
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/716C603B"), StringExternal("Param/Value/D18421A6"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/959C93F9"), StringExternal("Param/Value/66B519D8"));
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_runall();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Infestation Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergInfestationCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergInfestationCreate_Init () {
    gt_ObjectiveDestroyZergInfestationCreate = TriggerCreate("gt_ObjectiveDestroyZergInfestationCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Infestation Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergInfestationCompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyZergInfestationCreate, true, false);
    TriggerQueueEnter();
    ObjectiveSetState(gv_objectiveDestroyZergBase, c_objectiveStateCompleted);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergInfestationCompleteQ_Init () {
    gt_ObjectiveDestroyZergInfestationCompleteQ = TriggerCreate("gt_ObjectiveDestroyZergInfestationCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Infestation Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergInfestationUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyZergInfestationCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergInfestationUpdate_Init () {
    gt_ObjectiveDestroyZergInfestationUpdate = TriggerCreate("gt_ObjectiveDestroyZergInfestationUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Zerg Infestation Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZergInfestationFailedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyZergInfestationCreate, true, false);
    TriggerQueueEnter();
    ObjectiveSetState(gv_objectiveDestroyZergBase, c_objectiveStateFailed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZergInfestationFailedQ_Init () {
    gt_ObjectiveDestroyZergInfestationFailedQ = TriggerCreate("gt_ObjectiveDestroyZergInfestationFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Stalkers Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueStalkersCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    TriggerExecute(gt_TransmissionBonusObjectiveDiscoveredQ, true, false);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueStalkersCreate_Init () {
    gt_ObjectiveRescueStalkersCreate = TriggerCreate("gt_ObjectiveRescueStalkersCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Stalkers Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueStalkersCompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueStalkersCreate, true, false);
    TriggerQueueEnter();
    ObjectiveSetState(gv_objectiveRescueStalkers, c_objectiveStateCompleted);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueStalkersCompleteQ_Init () {
    gt_ObjectiveRescueStalkersCompleteQ = TriggerCreate("gt_ObjectiveRescueStalkersCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Stalkers Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueStalkersUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRescueStalkersCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueStalkersUpdate_Init () {
    gt_ObjectiveRescueStalkersUpdate = TriggerCreate("gt_ObjectiveRescueStalkersUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Rescue Stalkers Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRescueStalkersFailedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRescueStalkersCreate, true, false);
    TriggerQueueEnter();
    ObjectiveSetState(gv_objectiveRescueStalkers, c_objectiveStateFailed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRescueStalkersFailedQ_Init () {
    gt_ObjectiveRescueStalkersFailedQ = TriggerCreate("gt_ObjectiveRescueStalkersFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetOwner(UnitGroupLoopCurrent()) == 0) || (UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_02_DOMINION) || (UnitGetOwner(UnitGroupLoopCurrent()) == gv_pLAYER_03_ALLYPROTOSS))) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        }
        else {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(164), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(165), 15.0, -1, 10, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("ArmoryscreentutorialAdjutant00001", 0), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Tosh03B_TerranNukeReady", 0), PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("ResearchscreentutorialAdjutant00001", 0), PlayerGroupAll(), 100.0, 0.0);
    libVCMI_gf_PlaySoundCinematic(SoundLink("ChartutorialAdjutant00001", 0), PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, UnitFromId(28), "Ref_Center");
    gv_introHatchReticle = libNtve_gf_ActorLastCreated();
    libVCMI_gf_SendTransmissionCampaignPlaceHolder(null, null, StringExternal("Param/Value/74DFDF7E"), StringExternal("Param/Value/C77BC0A7"), 8.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    libNtve_gf_KillModel(gv_introHatchReticle);
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    RegionPlayableMapSet(RegionFromId(1));
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    AITimePause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(2)) == false)) {
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(182), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(183), 15.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_SetupToggleButton, true, false);
    TextExpressionSetToken("Param/Expression/D1B03013", "ButtonText", libNtve_gf_DialogItemText(gv_toggleButton, 1));
    libVCMI_gf_SendTransmissionCampaignPlaceHolder(null, null, StringExternal("Param/Value/45E57795"), TextExpressionAssemble("Param/Expression/D1B03013"), 8.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    AITimePause(false);
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    RegionPlayableMapSet(RegionEntireMap());
    TriggerExecute(gt_SetupToggleButton, true, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libVCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    AITimePause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    gv_hideToggleButton = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaignPlaceHolder(null, null, StringExternal("Param/Value/02111536"), StringExternal("Param/Value/5EFC20E0"), 8.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugStage2_Init();
    gt_DebugStage3_Init();
    gt_DebugExampleRepeatCheat_Init();
    gt_DebugCheatBonusObjective_Init();
    gt_DebugStartLichHybrid_Init();
    gt_DebugTestProgressBar_Init();
    gt_CyberspaceColoringOwnerChanged_Init();
    gt_CyberspaceColoringUnitCreated_Init();
    gt_StartGameQ_Init();
    gt_SetupToggleButton_Init();
    gt_ToggleSelectedtoCyberNormalSpace_Init();
    gt_RescueStalkerGroup01_Init();
    gt_RescueStalkerGroup02_Init();
    gt_RescueStalkerGroup03_Init();
    gt_CreatePhylacteryHybrid_Init();
    gt_SendTwoConsecutiveTransmissionsQ_Init();
    gt_SendTransmissionQ_Init();
    gt_TransmissionBonusObjectiveDiscoveredQ_Init();
    gt_TransmissionZergBaseHeavilyFortifiedQ_Init();
    gt_TransmissionLichHybridAttackQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryDestoryZergHatchCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipReadyQ_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_ObjectiveDestroyZergInfestationCreate_Init();
    gt_ObjectiveDestroyZergInfestationCompleteQ_Init();
    gt_ObjectiveDestroyZergInfestationUpdate_Init();
    gt_ObjectiveDestroyZergInfestationFailedQ_Init();
    gt_ObjectiveRescueStalkersCreate_Init();
    gt_ObjectiveRescueStalkersCompleteQ_Init();
    gt_ObjectiveRescueStalkersUpdate_Init();
    gt_ObjectiveRescueStalkersFailedQ_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
